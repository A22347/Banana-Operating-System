
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bf 7a 00 00       	call   c0007adf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 88 1f 02 c0       	mov    eax,0xc0021f88
c0000025:	3d 88 1f 02 c0       	cmp    eax,0xc0021f88
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 88 1f 02 c0       	push   0xc0021f88
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 88 1f 02 c0       	mov    eax,0xc0021f88
c0000051:	2d 88 1f 02 c0       	sub    eax,0xc0021f88
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 88 1f 02 c0       	push   0xc0021f88
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 2c ef 01 c0       	mov    ebx,0xc001ef2c
c0000097:	81 eb 28 ef 01 c0    	sub    ebx,0xc001ef28
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 28 ef 01 c0       	mov    esi,0xc001ef28
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 88 1f 02 c0       	push   0xc0021f88
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 88 1f 02 c0       	push   0xc0021f88
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bb 45 01 00       	call   c0014868 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 77 a4 00 00       	call   c000a73c <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 99 45 01 00       	call   c0014868 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 a2 4a 01 00       	call   c0014d90 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f9 50 01 00       	call   c00153f0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 91 03 01 00       	jmp    c0010710 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	83 ec 14             	sub    esp,0x14
c00003d3:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c00003d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00003db:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00003df:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00003e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00003e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00003eb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00003ef:	39 cd                	cmp    ebp,ecx
c00003f1:	0f 83 b9 00 00 00    	jae    c00004b0 <memmove+0xe0>
c00003f7:	85 d2                	test   edx,edx
c00003f9:	0f 84 90 00 00 00    	je     c000048f <memmove+0xbf>
c00003ff:	8d 59 04             	lea    ebx,[ecx+0x4]
c0000402:	39 dd                	cmp    ebp,ebx
c0000404:	0f 93 44 24 03       	setae  BYTE PTR [esp+0x3]
c0000409:	0f b6 44 24 03       	movzx  eax,BYTE PTR [esp+0x3]
c000040e:	8d 5d 04             	lea    ebx,[ebp+0x4]
c0000411:	39 d9                	cmp    ecx,ebx
c0000413:	0f 93 c3             	setae  bl
c0000416:	08 c3                	or     bl,al
c0000418:	88 d8                	mov    al,bl
c000041a:	8d 5a ff             	lea    ebx,[edx-0x1]
c000041d:	83 fb 06             	cmp    ebx,0x6
c0000420:	0f 97 c3             	seta   bl
c0000423:	84 d8                	test   al,bl
c0000425:	0f 84 a5 00 00 00    	je     c00004d0 <memmove+0x100>
c000042b:	89 eb                	mov    ebx,ebp
c000042d:	09 cb                	or     ebx,ecx
c000042f:	f6 c3 03             	test   bl,0x3
c0000432:	0f 85 98 00 00 00    	jne    c00004d0 <memmove+0x100>
c0000438:	89 d7                	mov    edi,edx
c000043a:	89 cb                	mov    ebx,ecx
c000043c:	83 e7 fc             	and    edi,0xfffffffc
c000043f:	89 ee                	mov    esi,ebp
c0000441:	01 cf                	add    edi,ecx
c0000443:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000449:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000450:	8b 03                	mov    eax,DWORD PTR [ebx]
c0000452:	83 c3 04             	add    ebx,0x4
c0000455:	83 c6 04             	add    esi,0x4
c0000458:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000045b:	39 fb                	cmp    ebx,edi
c000045d:	75 f1                	jne    c0000450 <memmove+0x80>
c000045f:	89 d3                	mov    ebx,edx
c0000461:	89 d7                	mov    edi,edx
c0000463:	83 e3 fc             	and    ebx,0xfffffffc
c0000466:	29 df                	sub    edi,ebx
c0000468:	01 d9                	add    ecx,ebx
c000046a:	8d 74 1d 00          	lea    esi,[ebp+ebx*1+0x0]
c000046e:	39 da                	cmp    edx,ebx
c0000470:	74 1d                	je     c000048f <memmove+0xbf>
c0000472:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000475:	83 ff 01             	cmp    edi,0x1
c0000478:	88 06                	mov    BYTE PTR [esi],al
c000047a:	74 13                	je     c000048f <memmove+0xbf>
c000047c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0000480:	83 ff 02             	cmp    edi,0x2
c0000483:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000486:	74 07                	je     c000048f <memmove+0xbf>
c0000488:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000048f:	89 e8                	mov    eax,ebp
c0000491:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0000495:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0000499:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000049d:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c00004a1:	83 c4 14             	add    esp,0x14
c00004a4:	c3                   	ret    
c00004a5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 dd                	jbe    c000048f <memmove+0xbf>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 d9                	je     c000048f <memmove+0xbf>
c00004b6:	8d 59 ff             	lea    ebx,[ecx-0x1]
c00004b9:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004bc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004c0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00004c4:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c7:	4a                   	dec    edx
c00004c8:	75 f6                	jne    c00004c0 <memmove+0xf0>
c00004ca:	eb c3                	jmp    c000048f <memmove+0xbf>
c00004cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 eb                	mov    ebx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c00004e3:	43                   	inc    ebx
c00004e4:	41                   	inc    ecx
c00004e5:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c00004e8:	39 d3                	cmp    ebx,edx
c00004ea:	75 f4                	jne    c00004e0 <memmove+0x110>
c00004ec:	eb a1                	jmp    c000048f <memmove+0xbf>
c00004ee:	66 90                	xchg   ax,ax

c00004f0 <memset>:
c00004f0:	83 ec 0c             	sub    esp,0xc
c00004f3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00004f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00004fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000502:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000506:	85 d2                	test   edx,edx
c0000508:	74 1b                	je     c0000525 <memset+0x35>
c000050a:	83 fa 08             	cmp    edx,0x8
c000050d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000512:	89 f7                	mov    edi,esi
c0000514:	73 2a                	jae    c0000540 <memset+0x50>
c0000516:	83 e2 07             	and    edx,0x7
c0000519:	74 0a                	je     c0000525 <memset+0x35>
c000051b:	31 c0                	xor    eax,eax
c000051d:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000520:	40                   	inc    eax
c0000521:	39 d0                	cmp    eax,edx
c0000523:	72 f8                	jb     c000051d <memset+0x2d>
c0000525:	89 f0                	mov    eax,esi
c0000527:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c000052a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000052e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000532:	83 c4 0c             	add    esp,0xc
c0000535:	c3                   	ret    
c0000536:	8d 76 00             	lea    esi,[esi+0x0]
c0000539:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000540:	0f b6 c3             	movzx  eax,bl
c0000543:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c0000549:	f7 c6 01 00 00 00    	test   esi,0x1
c000054f:	75 1d                	jne    c000056e <memset+0x7e>
c0000551:	f7 c7 02 00 00 00    	test   edi,0x2
c0000557:	75 1d                	jne    c0000576 <memset+0x86>
c0000559:	f7 c7 04 00 00 00    	test   edi,0x4
c000055f:	75 20                	jne    c0000581 <memset+0x91>
c0000561:	89 d1                	mov    ecx,edx
c0000563:	c1 e9 02             	shr    ecx,0x2
c0000566:	fc                   	cld    
c0000567:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000569:	83 e2 03             	and    edx,0x3
c000056c:	eb a8                	jmp    c0000516 <memset+0x26>
c000056e:	88 06                	mov    BYTE PTR [esi],al
c0000570:	8d 7e 01             	lea    edi,[esi+0x1]
c0000573:	4a                   	dec    edx
c0000574:	eb db                	jmp    c0000551 <memset+0x61>
c0000576:	66 89 07             	mov    WORD PTR [edi],ax
c0000579:	83 ea 02             	sub    edx,0x2
c000057c:	83 c7 02             	add    edi,0x2
c000057f:	eb d8                	jmp    c0000559 <memset+0x69>
c0000581:	89 07                	mov    DWORD PTR [edi],eax
c0000583:	83 ea 04             	sub    edx,0x4
c0000586:	83 c7 04             	add    edi,0x4
c0000589:	eb d6                	jmp    c0000561 <memset+0x71>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000590 <strlen>:
c0000590:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000594:	31 c0                	xor    eax,eax
c0000596:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000599:	74 15                	je     c00005b0 <strlen+0x20>
c000059b:	90                   	nop
c000059c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005a0:	40                   	inc    eax
c00005a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00005a5:	75 f9                	jne    c00005a0 <strlen+0x10>
c00005a7:	c3                   	ret    
c00005a8:	90                   	nop
c00005a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00005b0:	c3                   	ret    
c00005b1:	eb 0d                	jmp    c00005c0 <strpbrk>
c00005b3:	90                   	nop
c00005b4:	90                   	nop
c00005b5:	90                   	nop
c00005b6:	90                   	nop
c00005b7:	90                   	nop
c00005b8:	90                   	nop
c00005b9:	90                   	nop
c00005ba:	90                   	nop
c00005bb:	90                   	nop
c00005bc:	90                   	nop
c00005bd:	90                   	nop
c00005be:	90                   	nop
c00005bf:	90                   	nop

c00005c0 <strpbrk>:
c00005c0:	57                   	push   edi
c00005c1:	56                   	push   esi
c00005c2:	53                   	push   ebx
c00005c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005cb:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c00005ce:	84 db                	test   bl,bl
c00005d0:	74 32                	je     c0000604 <strpbrk+0x44>
c00005d2:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c00005d5:	84 c0                	test   al,al
c00005d7:	74 23                	je     c00005fc <strpbrk+0x3c>
c00005d9:	38 d8                	cmp    al,bl
c00005db:	74 29                	je     c0000606 <strpbrk+0x46>
c00005dd:	89 fa                	mov    edx,edi
c00005df:	90                   	nop
c00005e0:	eb 12                	jmp    c00005f4 <strpbrk+0x34>
c00005e2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00005e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005f0:	38 d9                	cmp    cl,bl
c00005f2:	74 12                	je     c0000606 <strpbrk+0x46>
c00005f4:	42                   	inc    edx
c00005f5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00005f8:	84 c9                	test   cl,cl
c00005fa:	75 f4                	jne    c00005f0 <strpbrk+0x30>
c00005fc:	46                   	inc    esi
c00005fd:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000600:	84 db                	test   bl,bl
c0000602:	75 d1                	jne    c00005d5 <strpbrk+0x15>
c0000604:	31 f6                	xor    esi,esi
c0000606:	5b                   	pop    ebx
c0000607:	89 f0                	mov    eax,esi
c0000609:	5e                   	pop    esi
c000060a:	5f                   	pop    edi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000610 <strtok>:
c0000610:	56                   	push   esi
c0000611:	53                   	push   ebx
c0000612:	83 ec 08             	sub    esp,0x8
c0000615:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000619:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000061d:	85 db                	test   ebx,ebx
c000061f:	75 13                	jne    c0000634 <strtok+0x24>
c0000621:	eb 4d                	jmp    c0000670 <strtok+0x60>
c0000623:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000629:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000630:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000633:	43                   	inc    ebx
c0000634:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000638:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000063b:	e8 80 ff ff ff       	call   c00005c0 <strpbrk>
c0000640:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000645:	39 d8                	cmp    eax,ebx
c0000647:	74 e7                	je     c0000630 <strtok+0x20>
c0000649:	85 c0                	test   eax,eax
c000064b:	74 2d                	je     c000067a <strtok+0x6a>
c000064d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000650:	8d 50 01             	lea    edx,[eax+0x1]
c0000653:	89 d8                	mov    eax,ebx
c0000655:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000065b:	83 c4 08             	add    esp,0x8
c000065e:	5b                   	pop    ebx
c000065f:	5e                   	pop    esi
c0000660:	c3                   	ret    
c0000661:	eb 0d                	jmp    c0000670 <strtok+0x60>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000676:	85 db                	test   ebx,ebx
c0000678:	75 ba                	jne    c0000634 <strtok+0x24>
c000067a:	83 c4 08             	add    esp,0x8
c000067d:	31 c0                	xor    eax,eax
c000067f:	5b                   	pop    ebx
c0000680:	5e                   	pop    esi
c0000681:	c3                   	ret    
c0000682:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strcpy>:
c0000690:	53                   	push   ebx
c0000691:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000699:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000069c:	89 c3                	mov    ebx,eax
c000069e:	84 d2                	test   dl,dl
c00006a0:	74 19                	je     c00006bb <strcpy+0x2b>
c00006a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	88 13                	mov    BYTE PTR [ebx],dl
c00006b2:	41                   	inc    ecx
c00006b3:	43                   	inc    ebx
c00006b4:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00006b7:	84 d2                	test   dl,dl
c00006b9:	75 f5                	jne    c00006b0 <strcpy+0x20>
c00006bb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006be:	5b                   	pop    ebx
c00006bf:	c3                   	ret    

c00006c0 <strncpy>:
c00006c0:	57                   	push   edi
c00006c1:	56                   	push   esi
c00006c2:	53                   	push   ebx
c00006c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006cf:	85 db                	test   ebx,ebx
c00006d1:	74 3f                	je     c0000712 <strncpy+0x52>
c00006d3:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00006d6:	8d 43 ff             	lea    eax,[ebx-0x1]
c00006d9:	8d 7a 01             	lea    edi,[edx+0x1]
c00006dc:	88 0a                	mov    BYTE PTR [edx],cl
c00006de:	84 c9                	test   cl,cl
c00006e0:	74 3e                	je     c0000720 <strncpy+0x60>
c00006e2:	85 c0                	test   eax,eax
c00006e4:	74 2c                	je     c0000712 <strncpy+0x52>
c00006e6:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c00006ea:	8d 43 fe             	lea    eax,[ebx-0x2]
c00006ed:	8d 7a 02             	lea    edi,[edx+0x2]
c00006f0:	8d 5e 02             	lea    ebx,[esi+0x2]
c00006f3:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c00006f6:	84 c9                	test   cl,cl
c00006f8:	75 14                	jne    c000070e <strncpy+0x4e>
c00006fa:	eb 24                	jmp    c0000720 <strncpy+0x60>
c00006fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000700:	43                   	inc    ebx
c0000701:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000705:	47                   	inc    edi
c0000706:	48                   	dec    eax
c0000707:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000070a:	84 c9                	test   cl,cl
c000070c:	74 12                	je     c0000720 <strncpy+0x60>
c000070e:	85 c0                	test   eax,eax
c0000710:	75 ee                	jne    c0000700 <strncpy+0x40>
c0000712:	5b                   	pop    ebx
c0000713:	89 d0                	mov    eax,edx
c0000715:	5e                   	pop    esi
c0000716:	5f                   	pop    edi
c0000717:	c3                   	ret    
c0000718:	90                   	nop
c0000719:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000720:	85 c0                	test   eax,eax
c0000722:	74 ee                	je     c0000712 <strncpy+0x52>
c0000724:	83 f8 08             	cmp    eax,0x8
c0000727:	89 c3                	mov    ebx,eax
c0000729:	73 35                	jae    c0000760 <strncpy+0xa0>
c000072b:	f6 c3 04             	test   bl,0x4
c000072e:	74 09                	je     c0000739 <strncpy+0x79>
c0000730:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000736:	83 c7 04             	add    edi,0x4
c0000739:	f6 c3 02             	test   bl,0x2
c000073c:	74 08                	je     c0000746 <strncpy+0x86>
c000073e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000743:	83 c7 02             	add    edi,0x2
c0000746:	f6 c3 01             	test   bl,0x1
c0000749:	74 c7                	je     c0000712 <strncpy+0x52>
c000074b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000074e:	89 d0                	mov    eax,edx
c0000750:	5b                   	pop    ebx
c0000751:	5e                   	pop    esi
c0000752:	5f                   	pop    edi
c0000753:	c3                   	ret    
c0000754:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000075a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000760:	f7 c7 01 00 00 00    	test   edi,0x1
c0000766:	75 1f                	jne    c0000787 <strncpy+0xc7>
c0000768:	f7 c7 02 00 00 00    	test   edi,0x2
c000076e:	75 2c                	jne    c000079c <strncpy+0xdc>
c0000770:	f7 c7 04 00 00 00    	test   edi,0x4
c0000776:	75 16                	jne    c000078e <strncpy+0xce>
c0000778:	89 d9                	mov    ecx,ebx
c000077a:	c1 e9 02             	shr    ecx,0x2
c000077d:	fc                   	cld    
c000077e:	31 c0                	xor    eax,eax
c0000780:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000782:	83 e3 03             	and    ebx,0x3
c0000785:	eb a4                	jmp    c000072b <strncpy+0x6b>
c0000787:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000078a:	4b                   	dec    ebx
c000078b:	47                   	inc    edi
c000078c:	eb da                	jmp    c0000768 <strncpy+0xa8>
c000078e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000794:	83 eb 04             	sub    ebx,0x4
c0000797:	83 c7 04             	add    edi,0x4
c000079a:	eb dc                	jmp    c0000778 <strncpy+0xb8>
c000079c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007a1:	83 eb 02             	sub    ebx,0x2
c00007a4:	83 c7 02             	add    edi,0x2
c00007a7:	eb c7                	jmp    c0000770 <strncpy+0xb0>
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00007b0 <strcmp>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ba:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00007bd:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007c0:	38 d1                	cmp    cl,dl
c00007c2:	75 1d                	jne    c00007e1 <strcmp+0x31>
c00007c4:	84 c9                	test   cl,cl
c00007c6:	74 28                	je     c00007f0 <strcmp+0x40>
c00007c8:	b8 01 00 00 00       	mov    eax,0x1
c00007cd:	eb 06                	jmp    c00007d5 <strcmp+0x25>
c00007cf:	90                   	nop
c00007d0:	40                   	inc    eax
c00007d1:	84 d2                	test   dl,dl
c00007d3:	74 1b                	je     c00007f0 <strcmp+0x40>
c00007d5:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c00007d9:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007dd:	38 ca                	cmp    dl,cl
c00007df:	74 ef                	je     c00007d0 <strcmp+0x20>
c00007e1:	5b                   	pop    ebx
c00007e2:	0f b6 c2             	movzx  eax,dl
c00007e5:	29 c8                	sub    eax,ecx
c00007e7:	5e                   	pop    esi
c00007e8:	c3                   	ret    
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	5b                   	pop    ebx
c00007f1:	31 c0                	xor    eax,eax
c00007f3:	5e                   	pop    esi
c00007f4:	c3                   	ret    
c00007f5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00007f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000800 <strchr>:
c0000800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000804:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000807:	84 d2                	test   dl,dl
c0000809:	74 21                	je     c000082c <strchr+0x2c>
c000080b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0000810:	38 ca                	cmp    dl,cl
c0000812:	75 10                	jne    c0000824 <strchr+0x24>
c0000814:	eb 19                	jmp    c000082f <strchr+0x2f>
c0000816:	8d 76 00             	lea    esi,[esi+0x0]
c0000819:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 0a                	je     c000082e <strchr+0x2e>
c0000824:	40                   	inc    eax
c0000825:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000828:	84 d2                	test   dl,dl
c000082a:	75 f4                	jne    c0000820 <strchr+0x20>
c000082c:	31 c0                	xor    eax,eax
c000082e:	c3                   	ret    
c000082f:	90                   	nop
c0000830:	c3                   	ret    
c0000831:	eb 0d                	jmp    c0000840 <strncmp>
c0000833:	90                   	nop
c0000834:	90                   	nop
c0000835:	90                   	nop
c0000836:	90                   	nop
c0000837:	90                   	nop
c0000838:	90                   	nop
c0000839:	90                   	nop
c000083a:	90                   	nop
c000083b:	90                   	nop
c000083c:	90                   	nop
c000083d:	90                   	nop
c000083e:	90                   	nop
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 31                	je     c0000884 <strncmp+0x44>
c0000853:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c0000856:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000859:	38 d1                	cmp    cl,dl
c000085b:	75 33                	jne    c0000890 <strncmp+0x50>
c000085d:	8d 46 01             	lea    eax,[esi+0x1]
c0000860:	84 c9                	test   cl,cl
c0000862:	74 20                	je     c0000884 <strncmp+0x44>
c0000864:	01 fe                	add    esi,edi
c0000866:	eb 17                	jmp    c000087f <strncmp+0x3f>
c0000868:	90                   	nop
c0000869:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000870:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000873:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000876:	38 ca                	cmp    dl,cl
c0000878:	75 16                	jne    c0000890 <strncmp+0x50>
c000087a:	40                   	inc    eax
c000087b:	84 d2                	test   dl,dl
c000087d:	74 05                	je     c0000884 <strncmp+0x44>
c000087f:	43                   	inc    ebx
c0000880:	39 c6                	cmp    esi,eax
c0000882:	75 ec                	jne    c0000870 <strncmp+0x30>
c0000884:	5b                   	pop    ebx
c0000885:	31 c0                	xor    eax,eax
c0000887:	5e                   	pop    esi
c0000888:	5f                   	pop    edi
c0000889:	c3                   	ret    
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	5b                   	pop    ebx
c0000891:	0f b6 c2             	movzx  eax,dl
c0000894:	29 c8                	sub    eax,ecx
c0000896:	5e                   	pop    esi
c0000897:	5f                   	pop    edi
c0000898:	c3                   	ret    
c0000899:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00008a0 <strcat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008aa:	89 c3                	mov    ebx,eax
c00008ac:	eb 04                	jmp    c00008b2 <strcat+0x12>
c00008ae:	66 90                	xchg   ax,ax
c00008b0:	89 d3                	mov    ebx,edx
c00008b2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008b5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x10>
c00008bb:	31 d2                	xor    edx,edx
c00008bd:	8d 76 00             	lea    esi,[esi+0x0]
c00008c0:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c00008c4:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008c7:	42                   	inc    edx
c00008c8:	84 c9                	test   cl,cl
c00008ca:	75 f4                	jne    c00008c0 <strcat+0x20>
c00008cc:	5b                   	pop    ebx
c00008cd:	5e                   	pop    esi
c00008ce:	c3                   	ret    
c00008cf:	90                   	nop

c00008d0 <strncat>:
c00008d0:	56                   	push   esi
c00008d1:	53                   	push   ebx
c00008d2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008de:	85 f6                	test   esi,esi
c00008e0:	74 2f                	je     c0000911 <strncat+0x41>
c00008e2:	89 c2                	mov    edx,eax
c00008e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008f0:	42                   	inc    edx
c00008f1:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008f5:	75 f9                	jne    c00008f0 <strncat+0x20>
c00008f7:	01 ce                	add    esi,ecx
c00008f9:	eb 0a                	jmp    c0000905 <strncat+0x35>
c00008fb:	90                   	nop
c00008fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000900:	39 f1                	cmp    ecx,esi
c0000902:	74 1c                	je     c0000920 <strncat+0x50>
c0000904:	42                   	inc    edx
c0000905:	41                   	inc    ecx
c0000906:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000090a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000090d:	84 db                	test   bl,bl
c000090f:	75 ef                	jne    c0000900 <strncat+0x30>
c0000911:	5b                   	pop    ebx
c0000912:	5e                   	pop    esi
c0000913:	c3                   	ret    
c0000914:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000091a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000920:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000923:	5b                   	pop    ebx
c0000924:	5e                   	pop    esi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <strstr>:
c0000930:	57                   	push   edi
c0000931:	56                   	push   esi
c0000932:	53                   	push   ebx
c0000933:	83 ec 0c             	sub    esp,0xc
c0000936:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000093a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000093e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0000941:	e8 4a fc ff ff       	call   c0000590 <strlen>
c0000946:	85 c0                	test   eax,eax
c0000948:	89 c6                	mov    esi,eax
c000094a:	75 19                	jne    c0000965 <strstr+0x35>
c000094c:	eb 32                	jmp    c0000980 <strstr+0x50>
c000094e:	66 90                	xchg   ax,ax
c0000950:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0000954:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000958:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000095b:	e8 20 fa ff ff       	call   c0000380 <memcmp>
c0000960:	85 c0                	test   eax,eax
c0000962:	74 1c                	je     c0000980 <strstr+0x50>
c0000964:	43                   	inc    ebx
c0000965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000968:	e8 23 fc ff ff       	call   c0000590 <strlen>
c000096d:	39 f0                	cmp    eax,esi
c000096f:	73 df                	jae    c0000950 <strstr+0x20>
c0000971:	83 c4 0c             	add    esp,0xc
c0000974:	31 c0                	xor    eax,eax
c0000976:	5b                   	pop    ebx
c0000977:	5e                   	pop    esi
c0000978:	5f                   	pop    edi
c0000979:	c3                   	ret    
c000097a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000980:	83 c4 0c             	add    esp,0xc
c0000983:	89 d8                	mov    eax,ebx
c0000985:	5b                   	pop    ebx
c0000986:	5e                   	pop    esi
c0000987:	5f                   	pop    edi
c0000988:	c3                   	ret    
c0000989:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000990 <toupper>:
c0000990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000994:	0f b6 d0             	movzx  edx,al
c0000997:	f6 82 40 ef 01 c0 02 	test   BYTE PTR [edx-0x3ffe10c0],0x2
c000099e:	74 03                	je     c00009a3 <toupper+0x13>
c00009a0:	83 e8 20             	sub    eax,0x20
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009b0 <tolower>:
c00009b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00009b4:	0f b6 d0             	movzx  edx,al
c00009b7:	f6 82 40 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10c0],0x1
c00009be:	74 03                	je     c00009c3 <tolower+0x13>
c00009c0:	83 c0 20             	add    eax,0x20
c00009c3:	c3                   	ret    
c00009c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009d0 <simple_strtoul>:
c00009d0:	55                   	push   ebp
c00009d1:	57                   	push   edi
c00009d2:	56                   	push   esi
c00009d3:	53                   	push   ebx
c00009d4:	83 ec 0c             	sub    esp,0xc
c00009d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009db:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00009df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00009e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00009e6:	89 c2                	mov    edx,eax
c00009e8:	0f b6 80 40 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe10c0]
c00009ef:	c0 e8 03             	shr    al,0x3
c00009f2:	24 01                	and    al,0x1
c00009f4:	74 1e                	je     c0000a14 <simple_strtoul+0x44>
c00009f6:	8d 76 00             	lea    esi,[esi+0x0]
c00009f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a04:	89 c2                	mov    edx,eax
c0000a06:	0f b6 80 40 ef 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe10c0]
c0000a0d:	c0 e8 03             	shr    al,0x3
c0000a10:	24 01                	and    al,0x1
c0000a12:	75 ec                	jne    c0000a00 <simple_strtoul+0x30>
c0000a14:	80 fa 09             	cmp    dl,0x9
c0000a17:	74 e7                	je     c0000a00 <simple_strtoul+0x30>
c0000a19:	80 fa 2d             	cmp    dl,0x2d
c0000a1c:	0f 84 3e 01 00 00    	je     c0000b60 <simple_strtoul+0x190>
c0000a22:	31 c0                	xor    eax,eax
c0000a24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000a28:	31 c0                	xor    eax,eax
c0000a2a:	80 fa 2b             	cmp    dl,0x2b
c0000a2d:	0f 94 c0             	sete   al
c0000a30:	01 c1                	add    ecx,eax
c0000a32:	85 ff                	test   edi,edi
c0000a34:	0f 85 c6 00 00 00    	jne    c0000b00 <simple_strtoul+0x130>
c0000a3a:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000a3d:	bf 0a 00 00 00       	mov    edi,0xa
c0000a42:	80 fb 30             	cmp    bl,0x30
c0000a45:	0f 84 70 01 00 00    	je     c0000bbb <simple_strtoul+0x1eb>
c0000a4b:	84 db                	test   bl,bl
c0000a4d:	0f 84 3d 01 00 00    	je     c0000b90 <simple_strtoul+0x1c0>
c0000a53:	31 c0                	xor    eax,eax
c0000a55:	31 ed                	xor    ebp,ebp
c0000a57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000a5b:	31 f6                	xor    esi,esi
c0000a5d:	eb 2e                	jmp    c0000a8d <simple_strtoul+0xbd>
c0000a5f:	90                   	nop
c0000a60:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000a63:	39 fb                	cmp    ebx,edi
c0000a65:	73 59                	jae    c0000ac0 <simple_strtoul+0xf0>
c0000a67:	89 d8                	mov    eax,ebx
c0000a69:	31 d2                	xor    edx,edx
c0000a6b:	f7 d0                	not    eax
c0000a6d:	f7 f7                	div    edi
c0000a6f:	39 f0                	cmp    eax,esi
c0000a71:	0f 82 d9 00 00 00    	jb     c0000b50 <simple_strtoul+0x180>
c0000a77:	0f af f7             	imul   esi,edi
c0000a7a:	01 de                	add    esi,ebx
c0000a7c:	bb 01 00 00 00       	mov    ebx,0x1
c0000a81:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000a85:	41                   	inc    ecx
c0000a86:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000a89:	84 db                	test   bl,bl
c0000a8b:	74 33                	je     c0000ac0 <simple_strtoul+0xf0>
c0000a8d:	0f b6 c3             	movzx  eax,bl
c0000a90:	f6 80 40 ef 01 c0 04 	test   BYTE PTR [eax-0x3ffe10c0],0x4
c0000a97:	75 c7                	jne    c0000a60 <simple_strtoul+0x90>
c0000a99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a9c:	e8 ef fe ff ff       	call   c0000990 <toupper>
c0000aa1:	0f b6 d0             	movzx  edx,al
c0000aa4:	f6 82 40 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe10c0],0x1
c0000aab:	74 13                	je     c0000ac0 <simple_strtoul+0xf0>
c0000aad:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ab0:	39 fb                	cmp    ebx,edi
c0000ab2:	72 b3                	jb     c0000a67 <simple_strtoul+0x97>
c0000ab4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000aba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000ac0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000ac4:	85 d2                	test   edx,edx
c0000ac6:	74 12                	je     c0000ada <simple_strtoul+0x10a>
c0000ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000acc:	09 f0                	or     eax,esi
c0000ace:	0f 84 9c 00 00 00    	je     c0000b70 <simple_strtoul+0x1a0>
c0000ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ad8:	89 08                	mov    DWORD PTR [eax],ecx
c0000ada:	4d                   	dec    ebp
c0000adb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ae0:	0f 44 f0             	cmove  esi,eax
c0000ae3:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000ae8:	75 02                	jne    c0000aec <simple_strtoul+0x11c>
c0000aea:	f7 de                	neg    esi
c0000aec:	83 c4 0c             	add    esp,0xc
c0000aef:	89 f0                	mov    eax,esi
c0000af1:	5b                   	pop    ebx
c0000af2:	5e                   	pop    esi
c0000af3:	5f                   	pop    edi
c0000af4:	5d                   	pop    ebp
c0000af5:	c3                   	ret    
c0000af6:	8d 76 00             	lea    esi,[esi+0x0]
c0000af9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b00:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b03:	83 f8 22             	cmp    eax,0x22
c0000b06:	0f 87 84 00 00 00    	ja     c0000b90 <simple_strtoul+0x1c0>
c0000b0c:	83 ff 08             	cmp    edi,0x8
c0000b0f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b12:	0f 84 c6 00 00 00    	je     c0000bde <simple_strtoul+0x20e>
c0000b18:	83 ff 10             	cmp    edi,0x10
c0000b1b:	0f 85 2a ff ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000b21:	80 fb 30             	cmp    bl,0x30
c0000b24:	bf 10 00 00 00       	mov    edi,0x10
c0000b29:	0f 85 1c ff ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000b2f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b33:	89 04 24             	mov    DWORD PTR [esp],eax
c0000b36:	89 c3                	mov    ebx,eax
c0000b38:	e8 73 fe ff ff       	call   c00009b0 <tolower>
c0000b3d:	83 f8 78             	cmp    eax,0x78
c0000b40:	0f 84 c1 00 00 00    	je     c0000c07 <simple_strtoul+0x237>
c0000b46:	41                   	inc    ecx
c0000b47:	e9 ff fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	bd 01 00 00 00       	mov    ebp,0x1
c0000b55:	31 f6                	xor    esi,esi
c0000b57:	e9 29 ff ff ff       	jmp    c0000a85 <simple_strtoul+0xb5>
c0000b5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b60:	b8 01 00 00 00       	mov    eax,0x1
c0000b65:	41                   	inc    ecx
c0000b66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000b6a:	e9 c3 fe ff ff       	jmp    c0000a32 <simple_strtoul+0x62>
c0000b6f:	90                   	nop
c0000b70:	85 c9                	test   ecx,ecx
c0000b72:	74 39                	je     c0000bad <simple_strtoul+0x1dd>
c0000b74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b78:	31 f6                	xor    esi,esi
c0000b7a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b7e:	89 38                	mov    DWORD PTR [eax],edi
c0000b80:	e9 55 ff ff ff       	jmp    c0000ada <simple_strtoul+0x10a>
c0000b85:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b94:	85 c0                	test   eax,eax
c0000b96:	74 1c                	je     c0000bb4 <simple_strtoul+0x1e4>
c0000b98:	85 c9                	test   ecx,ecx
c0000b9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b9e:	74 5a                	je     c0000bfa <simple_strtoul+0x22a>
c0000ba0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	89 38                	mov    DWORD PTR [eax],edi
c0000ba8:	e9 36 ff ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000bad:	31 f6                	xor    esi,esi
c0000baf:	e9 20 ff ff ff       	jmp    c0000ad4 <simple_strtoul+0x104>
c0000bb4:	31 f6                	xor    esi,esi
c0000bb6:	e9 28 ff ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000bbb:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc2:	89 c3                	mov    ebx,eax
c0000bc4:	e8 e7 fd ff ff       	call   c00009b0 <tolower>
c0000bc9:	83 f8 78             	cmp    eax,0x78
c0000bcc:	74 20                	je     c0000bee <simple_strtoul+0x21e>
c0000bce:	41                   	inc    ecx
c0000bcf:	80 fb 30             	cmp    bl,0x30
c0000bd2:	74 13                	je     c0000be7 <simple_strtoul+0x217>
c0000bd4:	bf 08 00 00 00       	mov    edi,0x8
c0000bd9:	e9 6d fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>
c0000bde:	80 fb 30             	cmp    bl,0x30
c0000be1:	0f 85 64 fe ff ff    	jne    c0000a4b <simple_strtoul+0x7b>
c0000be7:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000beb:	41                   	inc    ecx
c0000bec:	eb e6                	jmp    c0000bd4 <simple_strtoul+0x204>
c0000bee:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000bf2:	83 c1 02             	add    ecx,0x2
c0000bf5:	e9 27 ff ff ff       	jmp    c0000b21 <simple_strtoul+0x151>
c0000bfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c00:	31 f6                	xor    esi,esi
c0000c02:	e9 dc fe ff ff       	jmp    c0000ae3 <simple_strtoul+0x113>
c0000c07:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c0b:	83 c1 02             	add    ecx,0x2
c0000c0e:	e9 38 fe ff ff       	jmp    c0000a4b <simple_strtoul+0x7b>

c0000c13 <largebin_index>:
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	c1 ea 08             	shr    edx,0x8
c0000c18:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c1e:	77 10                	ja     c0000c30 <largebin_index+0x1d>
c0000c20:	0f bd d2             	bsr    edx,edx
c0000c23:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c26:	d3 e8                	shr    eax,cl
c0000c28:	83 e0 03             	and    eax,0x3
c0000c2b:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c2f:	c3                   	ret    
c0000c30:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c35:	c3                   	ret    

c0000c36 <malloc_init_state>:
c0000c36:	8d 50 34             	lea    edx,[eax+0x34]
c0000c39:	53                   	push   ebx
c0000c3a:	89 d1                	mov    ecx,edx
c0000c3c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c42:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c45:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c48:	83 c2 08             	add    edx,0x8
c0000c4b:	39 da                	cmp    edx,ebx
c0000c4d:	75 f3                	jne    c0000c42 <malloc_init_state+0xc>
c0000c4f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c59:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c5b:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c65:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c6f:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c79:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c80:	83 e2 03             	and    edx,0x3
c0000c83:	5b                   	pop    ebx
c0000c84:	83 ca 48             	or     edx,0x48
c0000c87:	89 10                	mov    DWORD PTR [eax],edx
c0000c89:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c8c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c96:	c3                   	ret    

c0000c97 <malloc_consolidate>:
c0000c97:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 d8 00 00 00    	je     c0000d79 <malloc_consolidate+0xe2>
c0000ca1:	55                   	push   ebp
c0000ca2:	83 e2 fd             	and    edx,0xfffffffd
c0000ca5:	57                   	push   edi
c0000ca6:	89 c5                	mov    ebp,eax
c0000ca8:	56                   	push   esi
c0000ca9:	53                   	push   ebx
c0000caa:	8d 78 34             	lea    edi,[eax+0x34]
c0000cad:	83 ec 10             	sub    esp,0x10
c0000cb0:	89 10                	mov    DWORD PTR [eax],edx
c0000cb2:	c1 ea 03             	shr    edx,0x3
c0000cb5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cb9:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cbd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cc4:	85 d2                	test   edx,edx
c0000cc6:	0f 84 98 00 00 00    	je     c0000d64 <malloc_consolidate+0xcd>
c0000ccc:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cd3:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cd6:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cd9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cdd:	89 f9                	mov    ecx,edi
c0000cdf:	83 e1 fe             	and    ecx,0xfffffffe
c0000ce2:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ce5:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ce8:	83 e3 fc             	and    ebx,0xfffffffc
c0000ceb:	83 e7 01             	and    edi,0x1
c0000cee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf1:	75 14                	jne    c0000d07 <malloc_consolidate+0x70>
c0000cf3:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cf5:	29 fa                	sub    edx,edi
c0000cf7:	01 f9                	add    ecx,edi
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	89 fb                	mov    ebx,edi
c0000cfe:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d01:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d04:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d07:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d0a:	74 40                	je     c0000d4c <malloc_consolidate+0xb5>
c0000d0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d0f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d12:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d16:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d19:	83 e7 01             	and    edi,0x1
c0000d1c:	75 0e                	jne    c0000d2c <malloc_consolidate+0x95>
c0000d1e:	01 d9                	add    ecx,ebx
c0000d20:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d23:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d26:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d29:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d2c:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d2f:	89 ce                	mov    esi,ecx
c0000d31:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d34:	83 ce 01             	or     esi,0x1
c0000d37:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d3a:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d3d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d41:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d44:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d47:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d4a:	eb 0c                	jmp    c0000d58 <malloc_consolidate+0xc1>
c0000d4c:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d4f:	83 c9 01             	or     ecx,0x1
c0000d52:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d55:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d5c:	85 d2                	test   edx,edx
c0000d5e:	0f 85 6f ff ff ff    	jne    c0000cd3 <malloc_consolidate+0x3c>
c0000d64:	83 c5 04             	add    ebp,0x4
c0000d67:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d6b:	0f 85 50 ff ff ff    	jne    c0000cc1 <malloc_consolidate+0x2a>
c0000d71:	83 c4 10             	add    esp,0x10
c0000d74:	5b                   	pop    ebx
c0000d75:	5e                   	pop    esi
c0000d76:	5f                   	pop    edi
c0000d77:	5d                   	pop    ebp
c0000d78:	c3                   	ret    
c0000d79:	e9 b8 fe ff ff       	jmp    c0000c36 <malloc_init_state>

c0000d7e <dlfree>:
c0000d7e:	57                   	push   edi
c0000d7f:	56                   	push   esi
c0000d80:	53                   	push   ebx
c0000d81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d85:	85 db                	test   ebx,ebx
c0000d87:	0f 84 e2 00 00 00    	je     c0000e6f <dlfree+0xf1>
c0000d8d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d90:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d93:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d99:	89 f0                	mov    eax,esi
c0000d9b:	83 e0 fc             	and    eax,0xfffffffc
c0000d9e:	39 c1                	cmp    ecx,eax
c0000da0:	72 24                	jb     c0000dc6 <dlfree+0x48>
c0000da2:	c1 e8 03             	shr    eax,0x3
c0000da5:	83 c9 03             	or     ecx,0x3
c0000da8:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000dae:	83 e8 02             	sub    eax,0x2
c0000db1:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000db8:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dba:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000dc1:	e9 a9 00 00 00       	jmp    c0000e6f <dlfree+0xf1>
c0000dc6:	83 e6 02             	and    esi,0x2
c0000dc9:	0f 85 a0 00 00 00    	jne    c0000e6f <dlfree+0xf1>
c0000dcf:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dd2:	83 c9 01             	or     ecx,0x1
c0000dd5:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000ddb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000dde:	83 e1 fc             	and    ecx,0xfffffffc
c0000de1:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000de5:	75 13                	jne    c0000dfa <dlfree+0x7c>
c0000de7:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dea:	29 da                	sub    edx,ebx
c0000dec:	01 d8                	add    eax,ebx
c0000dee:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000df4:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000df7:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dfa:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e00:	74 40                	je     c0000e42 <dlfree+0xc4>
c0000e02:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e06:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e09:	f6 c3 01             	test   bl,0x1
c0000e0c:	75 0e                	jne    c0000e1c <dlfree+0x9e>
c0000e0e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e11:	01 c8                	add    eax,ecx
c0000e13:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e16:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e19:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e1c:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e22:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e29:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e2c:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e32:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e35:	89 c1                	mov    ecx,eax
c0000e37:	83 c9 01             	or     ecx,0x1
c0000e3a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e3d:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e40:	eb 10                	jmp    c0000e52 <dlfree+0xd4>
c0000e42:	01 c8                	add    eax,ecx
c0000e44:	89 c1                	mov    ecx,eax
c0000e46:	83 c9 01             	or     ecx,0x1
c0000e49:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e4c:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e52:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e57:	76 16                	jbe    c0000e6f <dlfree+0xf1>
c0000e59:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e60:	74 0d                	je     c0000e6f <dlfree+0xf1>
c0000e62:	5b                   	pop    ebx
c0000e63:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e68:	5e                   	pop    esi
c0000e69:	5f                   	pop    edi
c0000e6a:	e9 28 fe ff ff       	jmp    c0000c97 <malloc_consolidate>
c0000e6f:	5b                   	pop    ebx
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	c3                   	ret    

c0000e73 <sYSMALLOc>:
c0000e73:	55                   	push   ebp
c0000e74:	57                   	push   edi
c0000e75:	56                   	push   esi
c0000e76:	53                   	push   ebx
c0000e77:	89 d3                	mov    ebx,edx
c0000e79:	83 ec 2c             	sub    esp,0x2c
c0000e7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e80:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e86:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e89:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e90:	74 1f                	je     c0000eb1 <sYSMALLOc+0x3e>
c0000e92:	89 d0                	mov    eax,edx
c0000e94:	e8 fe fd ff ff       	call   c0000c97 <malloc_consolidate>
c0000e99:	83 ec 0c             	sub    esp,0xc
c0000e9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea0:	83 e8 07             	sub    eax,0x7
c0000ea3:	50                   	push   eax
c0000ea4:	e8 33 02 00 00       	call   c00010dc <dlmalloc>
c0000ea9:	83 c4 10             	add    esp,0x10
c0000eac:	e9 23 02 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c0000eb1:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000eb8:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ebe:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec1:	83 c0 10             	add    eax,0x10
c0000ec4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ec8:	01 c2                	add    edx,eax
c0000eca:	83 e5 fc             	and    ebp,0xfffffffc
c0000ecd:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ed4:	74 02                	je     c0000ed8 <sYSMALLOc+0x65>
c0000ed6:	29 ea                	sub    edx,ebp
c0000ed8:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000ee2:	21 ca                	and    edx,ecx
c0000ee4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ee8:	7f 07                	jg     c0000ef1 <sYSMALLOc+0x7e>
c0000eea:	31 c0                	xor    eax,eax
c0000eec:	e9 e3 01 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c0000ef1:	83 ec 0c             	sub    esp,0xc
c0000ef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ef8:	e8 1f 6a 00 00       	call   c000791c <sbrk>
c0000efd:	83 c4 10             	add    esp,0x10
c0000f00:	83 f8 ff             	cmp    eax,0xffffffff
c0000f03:	89 c6                	mov    esi,eax
c0000f05:	74 e3                	je     c0000eea <sYSMALLOc+0x77>
c0000f07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f0b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f0e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f14:	39 c2                	cmp    edx,eax
c0000f16:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f1c:	75 11                	jne    c0000f2f <sYSMALLOc+0xbc>
c0000f1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f22:	01 e8                	add    eax,ebp
c0000f24:	83 c8 01             	or     eax,0x1
c0000f27:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f2a:	e9 93 00 00 00       	jmp    c0000fc2 <sYSMALLOc+0x14f>
c0000f2f:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f35:	a8 01                	test   al,0x1
c0000f37:	0f 84 73 01 00 00    	je     c00010b0 <sYSMALLOc+0x23d>
c0000f3d:	85 ed                	test   ebp,ebp
c0000f3f:	74 12                	je     c0000f53 <sYSMALLOc+0xe0>
c0000f41:	39 f2                	cmp    edx,esi
c0000f43:	76 0e                	jbe    c0000f53 <sYSMALLOc+0xe0>
c0000f45:	83 e0 fe             	and    eax,0xfffffffe
c0000f48:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f4e:	e9 5d 01 00 00       	jmp    c00010b0 <sYSMALLOc+0x23d>
c0000f53:	85 ed                	test   ebp,ebp
c0000f55:	74 0c                	je     c0000f63 <sYSMALLOc+0xf0>
c0000f57:	89 f0                	mov    eax,esi
c0000f59:	29 d0                	sub    eax,edx
c0000f5b:	01 c1                	add    ecx,eax
c0000f5d:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f63:	89 f2                	mov    edx,esi
c0000f65:	83 e2 07             	and    edx,0x7
c0000f68:	0f 84 b1 00 00 00    	je     c000101f <sYSMALLOc+0x1ac>
c0000f6e:	b8 08 00 00 00       	mov    eax,0x8
c0000f73:	29 d0                	sub    eax,edx
c0000f75:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f78:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f80:	01 e8                	add    eax,ebp
c0000f82:	83 ec 0c             	sub    esp,0xc
c0000f85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f88:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f8c:	01 f2                	add    edx,esi
c0000f8e:	29 d0                	sub    eax,edx
c0000f90:	01 d1                	add    ecx,edx
c0000f92:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f96:	01 c1                	add    ecx,eax
c0000f98:	51                   	push   ecx
c0000f99:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f9d:	e8 7a 69 00 00       	call   c000791c <sbrk>
c0000fa2:	83 c4 10             	add    esp,0x10
c0000fa5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0000fac:	75 7c                	jne    c000102a <sYSMALLOc+0x1b7>
c0000fae:	83 ec 0c             	sub    esp,0xc
c0000fb1:	6a 00                	push   0x0
c0000fb3:	e8 64 69 00 00       	call   c000791c <sbrk>
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	31 c9                	xor    ecx,ecx
c0000fbd:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc0:	75 7e                	jne    c0001040 <sYSMALLOc+0x1cd>
c0000fc2:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc8:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fce:	73 06                	jae    c0000fd6 <sYSMALLOc+0x163>
c0000fd0:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd6:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdc:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe2:	73 06                	jae    c0000fea <sYSMALLOc+0x177>
c0000fe4:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fea:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff0:	83 e2 fc             	and    edx,0xfffffffc
c0000ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000ff7:	0f 87 ed fe ff ff    	ja     c0000eea <sYSMALLOc+0x77>
c0000ffd:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001001:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001004:	29 fa                	sub    edx,edi
c0001006:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001009:	89 fb                	mov    ebx,edi
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 cb 01             	or     ebx,0x1
c0001011:	83 c0 08             	add    eax,0x8
c0001014:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001017:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101a:	e9 b5 00 00 00       	jmp    c00010d4 <sYSMALLOc+0x261>
c000101f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0001023:	31 c0                	xor    eax,eax
c0001025:	e9 52 ff ff ff       	jmp    c0000f7c <sYSMALLOc+0x109>
c000102a:	39 c6                	cmp    esi,eax
c000102c:	76 12                	jbe    c0001040 <sYSMALLOc+0x1cd>
c000102e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001032:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001039:	01 f0                	add    eax,esi
c000103b:	e9 7b ff ff ff       	jmp    c0000fbb <sYSMALLOc+0x148>
c0001040:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001044:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001047:	29 f0                	sub    eax,esi
c0001049:	01 c8                	add    eax,ecx
c000104b:	83 c8 01             	or     eax,0x1
c000104e:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001051:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001057:	85 ed                	test   ebp,ebp
c0001059:	0f 84 63 ff ff ff    	je     c0000fc2 <sYSMALLOc+0x14f>
c000105f:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001062:	83 e0 f8             	and    eax,0xfffffff8
c0001065:	89 c2                	mov    edx,eax
c0001067:	83 ca 01             	or     edx,0x1
c000106a:	83 f8 0f             	cmp    eax,0xf
c000106d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001070:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001078:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001080:	0f 86 3c ff ff ff    	jbe    c0000fc2 <sYSMALLOc+0x14f>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	83 c7 08             	add    edi,0x8
c0001092:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000109c:	57                   	push   edi
c000109d:	e8 dc fc ff ff       	call   c0000d7e <dlfree>
c00010a2:	83 c4 10             	add    esp,0x10
c00010a5:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010ab:	e9 12 ff ff ff       	jmp    c0000fc2 <sYSMALLOc+0x14f>
c00010b0:	83 ec 0c             	sub    esp,0xc
c00010b3:	6a 00                	push   0x0
c00010b5:	e8 62 68 00 00       	call   c000791c <sbrk>
c00010ba:	89 c2                	mov    edx,eax
c00010bc:	29 f2                	sub    edx,esi
c00010be:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010c2:	83 c4 10             	add    esp,0x10
c00010c5:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010cb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010cf:	e9 e7 fe ff ff       	jmp    c0000fbb <sYSMALLOc+0x148>
c00010d4:	83 c4 2c             	add    esp,0x2c
c00010d7:	5b                   	pop    ebx
c00010d8:	5e                   	pop    esi
c00010d9:	5f                   	pop    edi
c00010da:	5d                   	pop    ebp
c00010db:	c3                   	ret    

c00010dc <dlmalloc>:
c00010dc:	55                   	push   ebp
c00010dd:	57                   	push   edi
c00010de:	56                   	push   esi
c00010df:	53                   	push   ebx
c00010e0:	83 ec 1c             	sub    esp,0x1c
c00010e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010e7:	83 f8 df             	cmp    eax,0xffffffdf
c00010ea:	0f 87 70 03 00 00    	ja     c0001460 <dlmalloc+0x384>
c00010f0:	83 c0 0b             	add    eax,0xb
c00010f3:	be 10 00 00 00       	mov    esi,0x10
c00010f8:	83 f8 0f             	cmp    eax,0xf
c00010fb:	76 05                	jbe    c0001102 <dlmalloc+0x26>
c00010fd:	83 e0 f8             	and    eax,0xfffffff8
c0001100:	89 c6                	mov    esi,eax
c0001102:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001108:	f7 c7 01 00 00 00    	test   edi,0x1
c000110e:	75 17                	jne    c0001127 <dlmalloc+0x4b>
c0001110:	85 ff                	test   edi,edi
c0001112:	0f 85 05 03 00 00    	jne    c000141d <dlmalloc+0x341>
c0001118:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000111d:	e8 75 fb ff ff       	call   c0000c97 <malloc_consolidate>
c0001122:	e9 f6 02 00 00       	jmp    c000141d <dlmalloc+0x341>
c0001127:	39 f7                	cmp    edi,esi
c0001129:	72 1f                	jb     c000114a <dlmalloc+0x6e>
c000112b:	89 f2                	mov    edx,esi
c000112d:	c1 ea 03             	shr    edx,0x3
c0001130:	83 ea 02             	sub    edx,0x2
c0001133:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c000113a:	85 c0                	test   eax,eax
c000113c:	74 0c                	je     c000114a <dlmalloc+0x6e>
c000113e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001141:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001148:	eb 30                	jmp    c000117a <dlmalloc+0x9e>
c000114a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001150:	89 f0                	mov    eax,esi
c0001152:	77 2e                	ja     c0001182 <dlmalloc+0xa6>
c0001154:	c1 e8 03             	shr    eax,0x3
c0001157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115b:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c0001162:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001165:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001168:	39 c3                	cmp    ebx,eax
c000116a:	74 2e                	je     c000119a <dlmalloc+0xbe>
c000116c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000116f:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001174:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001177:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000117a:	83 c0 08             	add    eax,0x8
c000117d:	e9 e0 02 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001182:	e8 8c fa ff ff       	call   c0000c13 <largebin_index>
c0001187:	83 e7 02             	and    edi,0x2
c000118a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000118e:	74 0a                	je     c000119a <dlmalloc+0xbe>
c0001190:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001195:	e8 fd fa ff ff       	call   c0000c97 <malloc_consolidate>
c000119a:	8d 46 10             	lea    eax,[esi+0x10]
c000119d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a1:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c00011a7:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c00011ad:	0f 84 13 01 00 00    	je     c00012c6 <dlmalloc+0x1ea>
c00011b3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011b6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011b9:	83 e7 fc             	and    edi,0xfffffffc
c00011bc:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011c2:	77 4c                	ja     c0001210 <dlmalloc+0x134>
c00011c4:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011c9:	75 45                	jne    c0001210 <dlmalloc+0x134>
c00011cb:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011d1:	75 3d                	jne    c0001210 <dlmalloc+0x134>
c00011d3:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011d7:	73 37                	jae    c0001210 <dlmalloc+0x134>
c00011d9:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011dc:	89 fa                	mov    edx,edi
c00011de:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011e3:	29 f2                	sub    edx,esi
c00011e5:	83 ce 01             	or     esi,0x1
c00011e8:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011ed:	89 d1                	mov    ecx,edx
c00011ef:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011f4:	83 c9 01             	or     ecx,0x1
c00011f7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011fe:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001205:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001208:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000120b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000120e:	eb 15                	jmp    c0001225 <dlmalloc+0x149>
c0001210:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c0001215:	39 fe                	cmp    esi,edi
c0001217:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000121e:	75 0d                	jne    c000122d <dlmalloc+0x151>
c0001220:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001225:	8d 43 08             	lea    eax,[ebx+0x8]
c0001228:	e9 35 02 00 00       	jmp    c0001462 <dlmalloc+0x386>
c000122d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001233:	89 f8                	mov    eax,edi
c0001235:	77 19                	ja     c0001250 <dlmalloc+0x174>
c0001237:	c1 e8 03             	shr    eax,0x3
c000123a:	8d 14 00             	lea    edx,[eax+eax*1]
c000123d:	83 c2 0d             	add    edx,0xd
c0001240:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001247:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000124e:	eb 46                	jmp    c0001296 <dlmalloc+0x1ba>
c0001250:	e8 be f9 ff ff       	call   c0000c13 <largebin_index>
c0001255:	8d 14 00             	lea    edx,[eax+eax*1]
c0001258:	83 c2 0d             	add    edx,0xd
c000125b:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001262:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001269:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000126c:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001270:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001274:	89 d5                	mov    ebp,edx
c0001276:	74 1e                	je     c0001296 <dlmalloc+0x1ba>
c0001278:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000127b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000127e:	77 12                	ja     c0001292 <dlmalloc+0x1b6>
c0001280:	83 cf 01             	or     edi,0x1
c0001283:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001286:	76 05                	jbe    c000128d <dlmalloc+0x1b1>
c0001288:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000128b:	eb f6                	jmp    c0001283 <dlmalloc+0x1a7>
c000128d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001290:	eb 04                	jmp    c0001296 <dlmalloc+0x1ba>
c0001292:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001296:	89 c7                	mov    edi,eax
c0001298:	88 c1                	mov    cl,al
c000129a:	c1 ff 05             	sar    edi,0x5
c000129d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a1:	bf 01 00 00 00       	mov    edi,0x1
c00012a6:	d3 e7                	shl    edi,cl
c00012a8:	89 f8                	mov    eax,edi
c00012aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012ae:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c00012b5:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012b8:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012bb:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012be:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c1:	e9 db fe ff ff       	jmp    c00011a1 <dlmalloc+0xc5>
c00012c6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012cc:	76 78                	jbe    c0001346 <dlmalloc+0x26a>
c00012ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012d2:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012dc:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012df:	39 ca                	cmp    edx,ecx
c00012e1:	74 63                	je     c0001346 <dlmalloc+0x26a>
c00012e3:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012e6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012e9:	83 e3 fc             	and    ebx,0xfffffffc
c00012ec:	39 de                	cmp    esi,ebx
c00012ee:	77 52                	ja     c0001342 <dlmalloc+0x266>
c00012f0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012f3:	89 df                	mov    edi,ebx
c00012f5:	01 d3                	add    ebx,edx
c00012f7:	29 f7                	sub    edi,esi
c00012f9:	83 ff 0f             	cmp    edi,0xf
c00012fc:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012ff:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001302:	8d 42 08             	lea    eax,[edx+0x8]
c0001305:	77 09                	ja     c0001310 <dlmalloc+0x234>
c0001307:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000130b:	e9 52 01 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001310:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c000131c:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c0001322:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001329:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001330:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001333:	89 fa                	mov    edx,edi
c0001335:	83 ca 01             	or     edx,0x1
c0001338:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000133b:	89 3b                	mov    DWORD PTR [ebx],edi
c000133d:	e9 20 01 00 00       	jmp    c0001462 <dlmalloc+0x386>
c0001342:	89 c2                	mov    edx,eax
c0001344:	eb 99                	jmp    c00012df <dlmalloc+0x203>
c0001346:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000134a:	b8 01 00 00 00       	mov    eax,0x1
c000134f:	41                   	inc    ecx
c0001350:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001357:	89 cb                	mov    ebx,ecx
c0001359:	c1 eb 05             	shr    ebx,0x5
c000135c:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001363:	d3 e0                	shl    eax,cl
c0001365:	39 f8                	cmp    eax,edi
c0001367:	77 04                	ja     c000136d <dlmalloc+0x291>
c0001369:	85 c0                	test   eax,eax
c000136b:	75 26                	jne    c0001393 <dlmalloc+0x2b7>
c000136d:	43                   	inc    ebx
c000136e:	83 fb 02             	cmp    ebx,0x2
c0001371:	0f 87 a6 00 00 00    	ja     c000141d <dlmalloc+0x341>
c0001377:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000137e:	85 ff                	test   edi,edi
c0001380:	74 eb                	je     c000136d <dlmalloc+0x291>
c0001382:	89 d8                	mov    eax,ebx
c0001384:	c1 e0 06             	shl    eax,0x6
c0001387:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000138e:	b8 01 00 00 00       	mov    eax,0x1
c0001393:	85 f8                	test   eax,edi
c0001395:	75 07                	jne    c000139e <dlmalloc+0x2c2>
c0001397:	83 c2 08             	add    edx,0x8
c000139a:	01 c0                	add    eax,eax
c000139c:	eb f5                	jmp    c0001393 <dlmalloc+0x2b7>
c000139e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a1:	39 ca                	cmp    edx,ecx
c00013a3:	75 14                	jne    c00013b9 <dlmalloc+0x2dd>
c00013a5:	89 c1                	mov    ecx,eax
c00013a7:	83 c2 08             	add    edx,0x8
c00013aa:	f7 d1                	not    ecx
c00013ac:	01 c0                	add    eax,eax
c00013ae:	21 cf                	and    edi,ecx
c00013b0:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c00013b7:	eb ac                	jmp    c0001365 <dlmalloc+0x289>
c00013b9:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013bc:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013bf:	83 e0 fc             	and    eax,0xfffffffc
c00013c2:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013c5:	89 c3                	mov    ebx,eax
c00013c7:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013ca:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013cd:	29 f3                	sub    ebx,esi
c00013cf:	8d 41 08             	lea    eax,[ecx+0x8]
c00013d2:	83 fb 0f             	cmp    ebx,0xf
c00013d5:	77 09                	ja     c00013e0 <dlmalloc+0x304>
c00013d7:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013db:	e9 82 00 00 00       	jmp    c0001462 <dlmalloc+0x386>
c00013e0:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013e3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013e9:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013ef:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013f5:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013fc:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001403:	77 06                	ja     c000140b <dlmalloc+0x32f>
c0001405:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000140b:	83 ce 01             	or     esi,0x1
c000140e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001411:	89 d9                	mov    ecx,ebx
c0001413:	83 c9 01             	or     ecx,0x1
c0001416:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001419:	89 1a                	mov    DWORD PTR [edx],ebx
c000141b:	eb 45                	jmp    c0001462 <dlmalloc+0x386>
c000141d:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001422:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001425:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001428:	83 e2 fc             	and    edx,0xfffffffc
c000142b:	39 d1                	cmp    ecx,edx
c000142d:	77 1e                	ja     c000144d <dlmalloc+0x371>
c000142f:	89 f3                	mov    ebx,esi
c0001431:	29 f2                	sub    edx,esi
c0001433:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001436:	83 cb 01             	or     ebx,0x1
c0001439:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c000143f:	83 ca 01             	or     edx,0x1
c0001442:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001445:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001448:	e9 2d fd ff ff       	jmp    c000117a <dlmalloc+0x9e>
c000144d:	83 c4 1c             	add    esp,0x1c
c0001450:	89 f0                	mov    eax,esi
c0001452:	5b                   	pop    ebx
c0001453:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 13 fa ff ff       	jmp    c0000e73 <sYSMALLOc>
c0001460:	31 c0                	xor    eax,eax
c0001462:	83 c4 1c             	add    esp,0x1c
c0001465:	5b                   	pop    ebx
c0001466:	5e                   	pop    esi
c0001467:	5f                   	pop    edi
c0001468:	5d                   	pop    ebp
c0001469:	c3                   	ret    

c000146a <iALLOc>:
c000146a:	55                   	push   ebp
c000146b:	89 c5                	mov    ebp,eax
c000146d:	57                   	push   edi
c000146e:	56                   	push   esi
c000146f:	53                   	push   ebx
c0001470:	83 ec 2c             	sub    esp,0x2c
c0001473:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001477:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000147b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001482:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001486:	75 12                	jne    c000149a <iALLOc+0x30>
c0001488:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000148c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001491:	e8 01 f8 ff ff       	call   c0000c97 <malloc_consolidate>
c0001496:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000149a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000149f:	74 12                	je     c00014b3 <iALLOc+0x49>
c00014a1:	85 ed                	test   ebp,ebp
c00014a3:	0f 84 64 01 00 00    	je     c000160d <iALLOc+0x1a3>
c00014a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b1:	eb 33                	jmp    c00014e6 <iALLOc+0x7c>
c00014b3:	85 ed                	test   ebp,ebp
c00014b5:	75 14                	jne    c00014cb <iALLOc+0x61>
c00014b7:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014bf:	83 c4 2c             	add    esp,0x2c
c00014c2:	5b                   	pop    ebx
c00014c3:	5e                   	pop    esi
c00014c4:	5f                   	pop    edi
c00014c5:	5d                   	pop    ebp
c00014c6:	e9 11 fc ff ff       	jmp    c00010dc <dlmalloc>
c00014cb:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014da:	83 f8 0f             	cmp    eax,0xf
c00014dd:	76 07                	jbe    c00014e6 <iALLOc+0x7c>
c00014df:	83 e0 f8             	and    eax,0xfffffff8
c00014e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014e6:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014eb:	75 09                	jne    c00014f6 <iALLOc+0x8c>
c00014ed:	89 d0                	mov    eax,edx
c00014ef:	31 f6                	xor    esi,esi
c00014f1:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014f4:	eb 3b                	jmp    c0001531 <iALLOc+0xc7>
c00014f6:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001500:	83 c0 0b             	add    eax,0xb
c0001503:	83 f8 0f             	cmp    eax,0xf
c0001506:	76 07                	jbe    c000150f <iALLOc+0xa5>
c0001508:	83 e0 f8             	and    eax,0xfffffff8
c000150b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000150f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001513:	0f af f5             	imul   esi,ebp
c0001516:	eb 25                	jmp    c000153d <iALLOc+0xd3>
c0001518:	8b 18                	mov    ebx,DWORD PTR [eax]
c000151a:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000151d:	bb 10 00 00 00       	mov    ebx,0x10
c0001522:	83 f9 0f             	cmp    ecx,0xf
c0001525:	76 05                	jbe    c000152c <iALLOc+0xc2>
c0001527:	83 e1 f8             	and    ecx,0xfffffff8
c000152a:	89 cb                	mov    ebx,ecx
c000152c:	01 de                	add    esi,ebx
c000152e:	83 c0 04             	add    eax,0x4
c0001531:	39 c7                	cmp    edi,eax
c0001533:	75 e3                	jne    c0001518 <iALLOc+0xae>
c0001535:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000153d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001541:	83 ec 0c             	sub    esp,0xc
c0001544:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c000154a:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001558:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000155c:	50                   	push   eax
c000155d:	e8 7a fb ff ff       	call   c00010dc <dlmalloc>
c0001562:	83 c4 10             	add    esp,0x10
c0001565:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000156b:	85 c0                	test   eax,eax
c000156d:	0f 84 92 00 00 00    	je     c0001605 <iALLOc+0x19b>
c0001573:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001576:	8d 78 f8             	lea    edi,[eax-0x8]
c0001579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000157d:	83 e3 fc             	and    ebx,0xfffffffc
c0001580:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001585:	74 1e                	je     c00015a5 <iALLOc+0x13b>
c0001587:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000158b:	89 d9                	mov    ecx,ebx
c000158d:	52                   	push   edx
c000158e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001592:	83 e9 04             	sub    ecx,0x4
c0001595:	51                   	push   ecx
c0001596:	6a 00                	push   0x0
c0001598:	50                   	push   eax
c0001599:	e8 52 ef ff ff       	call   c00004f0 <memset>
c000159e:	83 c4 10             	add    esp,0x10
c00015a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015a5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015aa:	75 14                	jne    c00015c0 <iALLOc+0x156>
c00015ac:	8d 04 37             	lea    eax,[edi+esi*1]
c00015af:	29 f3                	sub    ebx,esi
c00015b1:	8d 48 08             	lea    ecx,[eax+0x8]
c00015b4:	83 cb 01             	or     ebx,0x1
c00015b7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ba:	89 f3                	mov    ebx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	31 c0                	xor    eax,eax
c00015c2:	4d                   	dec    ebp
c00015c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015c7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015ca:	39 c5                	cmp    ebp,eax
c00015cc:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015cf:	74 2c                	je     c00015fd <iALLOc+0x193>
c00015d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015d5:	85 c9                	test   ecx,ecx
c00015d7:	75 15                	jne    c00015ee <iALLOc+0x184>
c00015d9:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015dc:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015df:	b9 10 00 00 00       	mov    ecx,0x10
c00015e4:	83 fe 0f             	cmp    esi,0xf
c00015e7:	76 05                	jbe    c00015ee <iALLOc+0x184>
c00015e9:	83 e6 f8             	and    esi,0xfffffff8
c00015ec:	89 f1                	mov    ecx,esi
c00015ee:	89 ce                	mov    esi,ecx
c00015f0:	29 cb                	sub    ebx,ecx
c00015f2:	83 ce 01             	or     esi,0x1
c00015f5:	40                   	inc    eax
c00015f6:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015f9:	01 cf                	add    edi,ecx
c00015fb:	eb c6                	jmp    c00015c3 <iALLOc+0x159>
c00015fd:	83 cb 01             	or     ebx,0x1
c0001600:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001603:	eb 08                	jmp    c000160d <iALLOc+0x1a3>
c0001605:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000160d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001611:	83 c4 2c             	add    esp,0x2c
c0001614:	5b                   	pop    ebx
c0001615:	5e                   	pop    esi
c0001616:	5f                   	pop    edi
c0001617:	5d                   	pop    ebp
c0001618:	c3                   	ret    

c0001619 <dlrealloc>:
c0001619:	55                   	push   ebp
c000161a:	57                   	push   edi
c000161b:	56                   	push   esi
c000161c:	53                   	push   ebx
c000161d:	83 ec 1c             	sub    esp,0x1c
c0001620:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001624:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001628:	85 db                	test   ebx,ebx
c000162a:	75 10                	jne    c000163c <dlrealloc+0x23>
c000162c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001630:	83 c4 1c             	add    esp,0x1c
c0001633:	5b                   	pop    ebx
c0001634:	5e                   	pop    esi
c0001635:	5f                   	pop    edi
c0001636:	5d                   	pop    ebp
c0001637:	e9 a0 fa ff ff       	jmp    c00010dc <dlmalloc>
c000163c:	83 f8 df             	cmp    eax,0xffffffdf
c000163f:	76 07                	jbe    c0001648 <dlrealloc+0x2f>
c0001641:	31 db                	xor    ebx,ebx
c0001643:	e9 6b 01 00 00       	jmp    c00017b3 <dlrealloc+0x19a>
c0001648:	83 c0 0b             	add    eax,0xb
c000164b:	bd 10 00 00 00       	mov    ebp,0x10
c0001650:	83 f8 0f             	cmp    eax,0xf
c0001653:	76 05                	jbe    c000165a <dlrealloc+0x41>
c0001655:	83 e0 f8             	and    eax,0xfffffff8
c0001658:	89 c5                	mov    ebp,eax
c000165a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000165d:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001660:	89 ce                	mov    esi,ecx
c0001662:	83 e6 fc             	and    esi,0xfffffffc
c0001665:	f6 c1 02             	test   cl,0x2
c0001668:	75 d7                	jne    c0001641 <dlrealloc+0x28>
c000166a:	39 f5                	cmp    ebp,esi
c000166c:	0f 86 04 01 00 00    	jbe    c0001776 <dlrealloc+0x15d>
c0001672:	8d 14 37             	lea    edx,[edi+esi*1]
c0001675:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000167b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000167e:	75 33                	jne    c00016b3 <dlrealloc+0x9a>
c0001680:	83 e0 fc             	and    eax,0xfffffffc
c0001683:	01 f0                	add    eax,esi
c0001685:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001689:	8d 45 10             	lea    eax,[ebp+0x10]
c000168c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001690:	77 49                	ja     c00016db <dlrealloc+0xc2>
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 e1 01             	and    ecx,0x1
c0001699:	01 ef                	add    edi,ebp
c000169b:	09 e9                	or     ecx,ebp
c000169d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a0:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c00016a6:	29 e8                	sub    eax,ebp
c00016a8:	83 c8 01             	or     eax,0x1
c00016ab:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016ae:	e9 00 01 00 00       	jmp    c00017b3 <dlrealloc+0x19a>
c00016b3:	89 c1                	mov    ecx,eax
c00016b5:	83 e1 fe             	and    ecx,0xfffffffe
c00016b8:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016bd:	75 1c                	jne    c00016db <dlrealloc+0xc2>
c00016bf:	83 e0 fc             	and    eax,0xfffffffc
c00016c2:	01 f0                	add    eax,esi
c00016c4:	39 c5                	cmp    ebp,eax
c00016c6:	77 13                	ja     c00016db <dlrealloc+0xc2>
c00016c8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016cb:	89 c6                	mov    esi,eax
c00016cd:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016d3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016d6:	e9 9b 00 00 00       	jmp    c0001776 <dlrealloc+0x15d>
c00016db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016df:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016e2:	83 ec 0c             	sub    esp,0xc
c00016e5:	50                   	push   eax
c00016e6:	e8 f1 f9 ff ff       	call   c00010dc <dlmalloc>
c00016eb:	83 c4 10             	add    esp,0x10
c00016ee:	85 c0                	test   eax,eax
c00016f0:	0f 84 4b ff ff ff    	je     c0001641 <dlrealloc+0x28>
c00016f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016fa:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016fd:	39 ca                	cmp    edx,ecx
c00016ff:	75 0a                	jne    c000170b <dlrealloc+0xf2>
c0001701:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001704:	83 e0 fc             	and    eax,0xfffffffc
c0001707:	01 c6                	add    esi,eax
c0001709:	eb 6b                	jmp    c0001776 <dlrealloc+0x15d>
c000170b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000170e:	83 f9 27             	cmp    ecx,0x27
c0001711:	76 08                	jbe    c000171b <dlrealloc+0x102>
c0001713:	89 de                	mov    esi,ebx
c0001715:	89 c7                	mov    edi,eax
c0001717:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001719:	eb 43                	jmp    c000175e <dlrealloc+0x145>
c000171b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000171d:	83 f9 13             	cmp    ecx,0x13
c0001720:	89 10                	mov    DWORD PTR [eax],edx
c0001722:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001725:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001728:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000172b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000172e:	76 2e                	jbe    c000175e <dlrealloc+0x145>
c0001730:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001733:	83 f9 1b             	cmp    ecx,0x1b
c0001736:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001739:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000173c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000173f:	76 1d                	jbe    c000175e <dlrealloc+0x145>
c0001741:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001744:	83 f9 23             	cmp    ecx,0x23
c0001747:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000174a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000174d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001750:	76 0c                	jbe    c000175e <dlrealloc+0x145>
c0001752:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001755:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001758:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000175b:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000175e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	53                   	push   ebx
c0001766:	e8 13 f6 ff ff       	call   c0000d7e <dlfree>
c000176b:	83 c4 10             	add    esp,0x10
c000176e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001772:	89 c3                	mov    ebx,eax
c0001774:	eb 3d                	jmp    c00017b3 <dlrealloc+0x19a>
c0001776:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001779:	8d 04 37             	lea    eax,[edi+esi*1]
c000177c:	89 f2                	mov    edx,esi
c000177e:	29 ea                	sub    edx,ebp
c0001780:	83 e1 01             	and    ecx,0x1
c0001783:	83 fa 0f             	cmp    edx,0xf
c0001786:	77 0b                	ja     c0001793 <dlrealloc+0x17a>
c0001788:	09 ce                	or     esi,ecx
c000178a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000178d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001791:	eb 20                	jmp    c00017b3 <dlrealloc+0x19a>
c0001793:	01 ef                	add    edi,ebp
c0001795:	83 ca 01             	or     edx,0x1
c0001798:	09 cd                	or     ebp,ecx
c000179a:	83 ec 0c             	sub    esp,0xc
c000179d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a0:	83 c7 08             	add    edi,0x8
c00017a3:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017a6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017aa:	57                   	push   edi
c00017ab:	e8 ce f5 ff ff       	call   c0000d7e <dlfree>
c00017b0:	83 c4 10             	add    esp,0x10
c00017b3:	83 c4 1c             	add    esp,0x1c
c00017b6:	89 d8                	mov    eax,ebx
c00017b8:	5b                   	pop    ebx
c00017b9:	5e                   	pop    esi
c00017ba:	5f                   	pop    edi
c00017bb:	5d                   	pop    ebp
c00017bc:	c3                   	ret    

c00017bd <dlmemalign>:
c00017bd:	55                   	push   ebp
c00017be:	57                   	push   edi
c00017bf:	56                   	push   esi
c00017c0:	53                   	push   ebx
c00017c1:	83 ec 0c             	sub    esp,0xc
c00017c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017c8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017cc:	83 fa 08             	cmp    edx,0x8
c00017cf:	77 10                	ja     c00017e1 <dlmemalign+0x24>
c00017d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017d5:	83 c4 0c             	add    esp,0xc
c00017d8:	5b                   	pop    ebx
c00017d9:	5e                   	pop    esi
c00017da:	5f                   	pop    edi
c00017db:	5d                   	pop    ebp
c00017dc:	e9 fb f8 ff ff       	jmp    c00010dc <dlmalloc>
c00017e1:	83 fa 0f             	cmp    edx,0xf
c00017e4:	bf 10 00 00 00       	mov    edi,0x10
c00017e9:	76 13                	jbe    c00017fe <dlmemalign+0x41>
c00017eb:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017ee:	85 d1                	test   ecx,edx
c00017f0:	75 04                	jne    c00017f6 <dlmemalign+0x39>
c00017f2:	89 d7                	mov    edi,edx
c00017f4:	eb 08                	jmp    c00017fe <dlmemalign+0x41>
c00017f6:	39 d7                	cmp    edi,edx
c00017f8:	73 04                	jae    c00017fe <dlmemalign+0x41>
c00017fa:	01 ff                	add    edi,edi
c00017fc:	eb f8                	jmp    c00017f6 <dlmemalign+0x39>
c00017fe:	83 f8 df             	cmp    eax,0xffffffdf
c0001801:	76 07                	jbe    c000180a <dlmemalign+0x4d>
c0001803:	31 c0                	xor    eax,eax
c0001805:	e9 ce 00 00 00       	jmp    c00018d8 <dlmemalign+0x11b>
c000180a:	83 c0 0b             	add    eax,0xb
c000180d:	bd 10 00 00 00       	mov    ebp,0x10
c0001812:	83 f8 0f             	cmp    eax,0xf
c0001815:	76 05                	jbe    c000181c <dlmemalign+0x5f>
c0001817:	83 e0 f8             	and    eax,0xfffffff8
c000181a:	89 c5                	mov    ebp,eax
c000181c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 b3 f8 ff ff       	call   c00010dc <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	89 c1                	mov    ecx,eax
c0001830:	74 d1                	je     c0001803 <dlmemalign+0x46>
c0001832:	8d 70 f8             	lea    esi,[eax-0x8]
c0001835:	31 d2                	xor    edx,edx
c0001837:	f7 f7                	div    edi
c0001839:	85 d2                	test   edx,edx
c000183b:	74 62                	je     c000189f <dlmemalign+0xe2>
c000183d:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001841:	89 f8                	mov    eax,edi
c0001843:	f7 d8                	neg    eax
c0001845:	21 c3                	and    ebx,eax
c0001847:	83 eb 08             	sub    ebx,0x8
c000184a:	89 d8                	mov    eax,ebx
c000184c:	29 f0                	sub    eax,esi
c000184e:	83 f8 0f             	cmp    eax,0xf
c0001851:	77 02                	ja     c0001855 <dlmemalign+0x98>
c0001853:	01 fb                	add    ebx,edi
c0001855:	89 d8                	mov    eax,ebx
c0001857:	29 f0                	sub    eax,esi
c0001859:	89 c6                	mov    esi,eax
c000185b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185e:	89 c2                	mov    edx,eax
c0001860:	83 e2 fc             	and    edx,0xfffffffc
c0001863:	29 f2                	sub    edx,esi
c0001865:	a8 02                	test   al,0x2
c0001867:	74 10                	je     c0001879 <dlmemalign+0xbc>
c0001869:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000186c:	83 ca 02             	or     edx,0x2
c000186f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001872:	8d 43 08             	lea    eax,[ebx+0x8]
c0001875:	89 33                	mov    DWORD PTR [ebx],esi
c0001877:	eb 5f                	jmp    c00018d8 <dlmemalign+0x11b>
c0001879:	89 d0                	mov    eax,edx
c000187b:	83 ec 0c             	sub    esp,0xc
c000187e:	83 c8 01             	or     eax,0x1
c0001881:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001884:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001889:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188c:	83 e0 01             	and    eax,0x1
c000188f:	09 f0                	or     eax,esi
c0001891:	89 de                	mov    esi,ebx
c0001893:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001896:	51                   	push   ecx
c0001897:	e8 e2 f4 ff ff       	call   c0000d7e <dlfree>
c000189c:	83 c4 10             	add    esp,0x10
c000189f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018a2:	a8 02                	test   al,0x2
c00018a4:	75 2f                	jne    c00018d5 <dlmemalign+0x118>
c00018a6:	8d 55 10             	lea    edx,[ebp+0x10]
c00018a9:	83 e0 fc             	and    eax,0xfffffffc
c00018ac:	39 c2                	cmp    edx,eax
c00018ae:	73 25                	jae    c00018d5 <dlmemalign+0x118>
c00018b0:	29 e8                	sub    eax,ebp
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018b8:	83 c8 01             	or     eax,0x1
c00018bb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018be:	83 c2 08             	add    edx,0x8
c00018c1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018c4:	83 e0 01             	and    eax,0x1
c00018c7:	09 c5                	or     ebp,eax
c00018c9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018cc:	52                   	push   edx
c00018cd:	e8 ac f4 ff ff       	call   c0000d7e <dlfree>
c00018d2:	83 c4 10             	add    esp,0x10
c00018d5:	8d 46 08             	lea    eax,[esi+0x8]
c00018d8:	83 c4 0c             	add    esp,0xc
c00018db:	5b                   	pop    ebx
c00018dc:	5e                   	pop    esi
c00018dd:	5f                   	pop    edi
c00018de:	5d                   	pop    ebp
c00018df:	c3                   	ret    

c00018e0 <dlcalloc>:
c00018e0:	53                   	push   ebx
c00018e1:	83 ec 14             	sub    esp,0x14
c00018e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018e8:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ed:	50                   	push   eax
c00018ee:	e8 e9 f7 ff ff       	call   c00010dc <dlmalloc>
c00018f3:	83 c4 10             	add    esp,0x10
c00018f6:	85 c0                	test   eax,eax
c00018f8:	89 c3                	mov    ebx,eax
c00018fa:	74 77                	je     c0001973 <dlcalloc+0x93>
c00018fc:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018ff:	89 d0                	mov    eax,edx
c0001901:	83 e0 fc             	and    eax,0xfffffffc
c0001904:	f6 c2 02             	test   dl,0x2
c0001907:	75 5a                	jne    c0001963 <dlcalloc+0x83>
c0001909:	83 e8 04             	sub    eax,0x4
c000190c:	83 f8 27             	cmp    eax,0x27
c000190f:	76 03                	jbe    c0001914 <dlcalloc+0x34>
c0001911:	51                   	push   ecx
c0001912:	eb 53                	jmp    c0001967 <dlcalloc+0x87>
c0001914:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000191a:	83 f8 13             	cmp    eax,0x13
c000191d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001924:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000192b:	76 46                	jbe    c0001973 <dlcalloc+0x93>
c000192d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001934:	83 f8 1b             	cmp    eax,0x1b
c0001937:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000193e:	76 33                	jbe    c0001973 <dlcalloc+0x93>
c0001940:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001947:	83 f8 23             	cmp    eax,0x23
c000194a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001951:	76 20                	jbe    c0001973 <dlcalloc+0x93>
c0001953:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000195a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001961:	eb 10                	jmp    c0001973 <dlcalloc+0x93>
c0001963:	52                   	push   edx
c0001964:	83 e8 08             	sub    eax,0x8
c0001967:	50                   	push   eax
c0001968:	6a 00                	push   0x0
c000196a:	53                   	push   ebx
c000196b:	e8 80 eb ff ff       	call   c00004f0 <memset>
c0001970:	83 c4 10             	add    esp,0x10
c0001973:	83 c4 08             	add    esp,0x8
c0001976:	89 d8                	mov    eax,ebx
c0001978:	5b                   	pop    ebx
c0001979:	c3                   	ret    

c000197a <dlcfree>:
c000197a:	e9 ff f3 ff ff       	jmp    c0000d7e <dlfree>

c000197f <dlindependent_calloc>:
c000197f:	83 ec 28             	sub    esp,0x28
c0001982:	b9 03 00 00 00       	mov    ecx,0x3
c0001987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000198b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000198f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001997:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000199b:	e8 ca fa ff ff       	call   c000146a <iALLOc>
c00019a0:	83 c4 2c             	add    esp,0x2c
c00019a3:	c3                   	ret    

c00019a4 <dlindependent_comalloc>:
c00019a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019a8:	31 c9                	xor    ecx,ecx
c00019aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019b6:	e9 af fa ff ff       	jmp    c000146a <iALLOc>

c00019bb <dlvalloc>:
c00019bb:	83 ec 0c             	sub    esp,0xc
c00019be:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019c5:	75 0a                	jne    c00019d1 <dlvalloc+0x16>
c00019c7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019cc:	e8 c6 f2 ff ff       	call   c0000c97 <malloc_consolidate>
c00019d1:	50                   	push   eax
c00019d2:	50                   	push   eax
c00019d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019d7:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019dd:	e8 db fd ff ff       	call   c00017bd <dlmemalign>
c00019e2:	83 c4 1c             	add    esp,0x1c
c00019e5:	c3                   	ret    

c00019e6 <dlpvalloc>:
c00019e6:	83 ec 0c             	sub    esp,0xc
c00019e9:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019f0:	75 0a                	jne    c00019fc <dlpvalloc+0x16>
c00019f2:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019f7:	e8 9b f2 ff ff       	call   c0000c97 <malloc_consolidate>
c00019fc:	52                   	push   edx
c00019fd:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a02:	52                   	push   edx
c0001a03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a07:	89 c1                	mov    ecx,eax
c0001a09:	f7 d9                	neg    ecx
c0001a0b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a0f:	21 ca                	and    edx,ecx
c0001a11:	52                   	push   edx
c0001a12:	50                   	push   eax
c0001a13:	e8 a5 fd ff ff       	call   c00017bd <dlmemalign>
c0001a18:	83 c4 1c             	add    esp,0x1c
c0001a1b:	c3                   	ret    

c0001a1c <dlmalloc_trim>:
c0001a1c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a21:	e8 71 f2 ff ff       	call   c0000c97 <malloc_consolidate>
c0001a26:	31 c0                	xor    eax,eax
c0001a28:	c3                   	ret    

c0001a29 <dlmalloc_usable_size>:
c0001a29:	53                   	push   ebx
c0001a2a:	31 c0                	xor    eax,eax
c0001a2c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a30:	85 c9                	test   ecx,ecx
c0001a32:	74 24                	je     c0001a58 <dlmalloc_usable_size+0x2f>
c0001a34:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a37:	f6 c2 02             	test   dl,0x2
c0001a3a:	74 08                	je     c0001a44 <dlmalloc_usable_size+0x1b>
c0001a3c:	83 e2 fc             	and    edx,0xfffffffc
c0001a3f:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a42:	eb 14                	jmp    c0001a58 <dlmalloc_usable_size+0x2f>
c0001a44:	89 d3                	mov    ebx,edx
c0001a46:	31 c0                	xor    eax,eax
c0001a48:	83 e3 fe             	and    ebx,0xfffffffe
c0001a4b:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a50:	74 06                	je     c0001a58 <dlmalloc_usable_size+0x2f>
c0001a52:	83 e2 fc             	and    edx,0xfffffffc
c0001a55:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a58:	5b                   	pop    ebx
c0001a59:	c3                   	ret    

c0001a5a <dlmallinfo>:
c0001a5a:	55                   	push   ebp
c0001a5b:	57                   	push   edi
c0001a5c:	56                   	push   esi
c0001a5d:	53                   	push   ebx
c0001a5e:	83 ec 08             	sub    esp,0x8
c0001a61:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a6c:	75 0a                	jne    c0001a78 <dlmallinfo+0x1e>
c0001a6e:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a73:	e8 1f f2 ff ff       	call   c0000c97 <malloc_consolidate>
c0001a78:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a7d:	31 ed                	xor    ebp,ebp
c0001a7f:	31 c9                	xor    ecx,ecx
c0001a81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a84:	83 e0 fc             	and    eax,0xfffffffc
c0001a87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a8b:	31 c0                	xor    eax,eax
c0001a8d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a94:	85 d2                	test   edx,edx
c0001a96:	74 0e                	je     c0001aa6 <dlmallinfo+0x4c>
c0001a98:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a9b:	45                   	inc    ebp
c0001a9c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a9f:	83 e6 fc             	and    esi,0xfffffffc
c0001aa2:	01 f1                	add    ecx,esi
c0001aa4:	eb ee                	jmp    c0001a94 <dlmallinfo+0x3a>
c0001aa6:	40                   	inc    eax
c0001aa7:	83 f8 0a             	cmp    eax,0xa
c0001aaa:	75 e1                	jne    c0001a8d <dlmallinfo+0x33>
c0001aac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ab3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ab7:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001aba:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001abf:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ac2:	39 f0                	cmp    eax,esi
c0001ac4:	74 10                	je     c0001ad6 <dlmallinfo+0x7c>
c0001ac6:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ac9:	ff 04 24             	inc    DWORD PTR [esp]
c0001acc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001acf:	83 e7 fc             	and    edi,0xfffffffc
c0001ad2:	01 fa                	add    edx,edi
c0001ad4:	eb ec                	jmp    c0001ac2 <dlmallinfo+0x68>
c0001ad6:	83 c0 08             	add    eax,0x8
c0001ad9:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ade:	75 df                	jne    c0001abf <dlmallinfo+0x65>
c0001ae0:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001ae6:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ae9:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001aee:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001af4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001af7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001afa:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b00:	89 03                	mov    DWORD PTR [ebx],eax
c0001b02:	29 d0                	sub    eax,edx
c0001b04:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b0b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b0e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b11:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001b17:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b1a:	89 d8                	mov    eax,ebx
c0001b1c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b1f:	83 c4 08             	add    esp,0x8
c0001b22:	5b                   	pop    ebx
c0001b23:	5e                   	pop    esi
c0001b24:	5f                   	pop    edi
c0001b25:	5d                   	pop    ebp
c0001b26:	c2 04 00             	ret    0x4

c0001b29 <dlmalloc_stats>:
c0001b29:	83 ec 30             	sub    esp,0x30
c0001b2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b30:	50                   	push   eax
c0001b31:	e8 24 ff ff ff       	call   c0001a5a <dlmallinfo>
c0001b36:	83 c4 30             	add    esp,0x30
c0001b39:	c3                   	ret    

c0001b3a <dlmallopt>:
c0001b3a:	56                   	push   esi
c0001b3b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b40:	53                   	push   ebx
c0001b41:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b49:	e8 49 f1 ff ff       	call   c0000c97 <malloc_consolidate>
c0001b4e:	8d 46 04             	lea    eax,[esi+0x4]
c0001b51:	83 f8 05             	cmp    eax,0x5
c0001b54:	77 67                	ja     c0001bbd <dlmallopt+0x83>
c0001b56:	ff 24 85 44 f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0fbc]
c0001b5d:	83 fb 50             	cmp    ebx,0x50
c0001b60:	77 5b                	ja     c0001bbd <dlmallopt+0x83>
c0001b62:	85 db                	test   ebx,ebx
c0001b64:	ba 08 00 00 00       	mov    edx,0x8
c0001b69:	74 12                	je     c0001b7d <dlmallopt+0x43>
c0001b6b:	83 c3 0b             	add    ebx,0xb
c0001b6e:	ba 10 00 00 00       	mov    edx,0x10
c0001b73:	83 fb 0f             	cmp    ebx,0xf
c0001b76:	76 05                	jbe    c0001b7d <dlmallopt+0x43>
c0001b78:	89 da                	mov    edx,ebx
c0001b7a:	83 e2 f8             	and    edx,0xfffffff8
c0001b7d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b82:	83 e0 03             	and    eax,0x3
c0001b85:	09 d0                	or     eax,edx
c0001b87:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b8c:	eb 31                	jmp    c0001bbf <dlmallopt+0x85>
c0001b8e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b94:	eb 06                	jmp    c0001b9c <dlmallopt+0x62>
c0001b96:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b9c:	be 01 00 00 00       	mov    esi,0x1
c0001ba1:	eb 1c                	jmp    c0001bbf <dlmallopt+0x85>
c0001ba3:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001ba9:	eb f1                	jmp    c0001b9c <dlmallopt+0x62>
c0001bab:	31 f6                	xor    esi,esi
c0001bad:	85 db                	test   ebx,ebx
c0001baf:	75 0e                	jne    c0001bbf <dlmallopt+0x85>
c0001bb1:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001bbb:	eb df                	jmp    c0001b9c <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	5b                   	pop    ebx
c0001bc0:	89 f0                	mov    eax,esi
c0001bc2:	5e                   	pop    esi
c0001bc3:	c3                   	ret    

c0001bc4 <isblank>:
c0001bc4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bc9:	74 09                	je     c0001bd4 <isblank+0x10>
c0001bcb:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd0:	75 0a                	jne    c0001bdc <isblank+0x18>
c0001bd2:	66 90                	xchg   ax,ax
c0001bd4:	b8 01 00 00 00       	mov    eax,0x1
c0001bd9:	c3                   	ret    
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 00 00 00 00       	mov    eax,0x0
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax

c0001be4 <iscntrl>:
c0001be4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001be9:	7e 09                	jle    c0001bf4 <iscntrl+0x10>
c0001beb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf0:	75 0a                	jne    c0001bfc <iscntrl+0x18>
c0001bf2:	66 90                	xchg   ax,ax
c0001bf4:	b8 01 00 00 00       	mov    eax,0x1
c0001bf9:	c3                   	ret    
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 00 00 00 00       	mov    eax,0x0
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax

c0001c04 <isdigit>:
c0001c04:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c09:	7e 0d                	jle    c0001c18 <isdigit+0x14>
c0001c0b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c10:	7f 06                	jg     c0001c18 <isdigit+0x14>
c0001c12:	b8 01 00 00 00       	mov    eax,0x1
c0001c17:	c3                   	ret    
c0001c18:	b8 00 00 00 00       	mov    eax,0x0
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax

c0001c20 <islower>:
c0001c20:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c25:	7e 0d                	jle    c0001c34 <islower+0x14>
c0001c27:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c2c:	7f 06                	jg     c0001c34 <islower+0x14>
c0001c2e:	b8 01 00 00 00       	mov    eax,0x1
c0001c33:	c3                   	ret    
c0001c34:	b8 00 00 00 00       	mov    eax,0x0
c0001c39:	c3                   	ret    
c0001c3a:	66 90                	xchg   ax,ax

c0001c3c <isspace>:
c0001c3c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c41:	7c 19                	jl     c0001c5c <isspace+0x20>
c0001c43:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c48:	7e 0a                	jle    c0001c54 <isspace+0x18>
c0001c4a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c4f:	75 0b                	jne    c0001c5c <isspace+0x20>
c0001c51:	8d 76 00             	lea    esi,[esi+0x0]
c0001c54:	b8 01 00 00 00       	mov    eax,0x1
c0001c59:	c3                   	ret    
c0001c5a:	66 90                	xchg   ax,ax
c0001c5c:	b8 00 00 00 00       	mov    eax,0x0
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax

c0001c64 <isupper>:
c0001c64:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c69:	7e 0d                	jle    c0001c78 <isupper+0x14>
c0001c6b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c70:	7f 06                	jg     c0001c78 <isupper+0x14>
c0001c72:	b8 01 00 00 00       	mov    eax,0x1
c0001c77:	c3                   	ret    
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalpha>:
c0001c80:	83 ec 04             	sub    esp,0x4
c0001c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c8a:	e8 d5 ff ff ff       	call   c0001c64 <isupper>
c0001c8f:	85 c0                	test   eax,eax
c0001c91:	75 11                	jne    c0001ca4 <isalpha+0x24>
c0001c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001c97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001c9a:	e8 81 ff ff ff       	call   c0001c20 <islower>
c0001c9f:	85 c0                	test   eax,eax
c0001ca1:	74 09                	je     c0001cac <isalpha+0x2c>
c0001ca3:	90                   	nop
c0001ca4:	b8 01 00 00 00       	mov    eax,0x1
c0001ca9:	eb 09                	jmp    c0001cb4 <isalpha+0x34>
c0001cab:	90                   	nop
c0001cac:	b8 00 00 00 00       	mov    eax,0x0
c0001cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0001cb4:	83 c4 04             	add    esp,0x4
c0001cb7:	c3                   	ret    

c0001cb8 <isalnum>:
c0001cb8:	83 ec 04             	sub    esp,0x4
c0001cbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001cbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cc2:	e8 b9 ff ff ff       	call   c0001c80 <isalpha>
c0001cc7:	85 c0                	test   eax,eax
c0001cc9:	75 11                	jne    c0001cdc <isalnum+0x24>
c0001ccb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ccf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cd2:	e8 2d ff ff ff       	call   c0001c04 <isdigit>
c0001cd7:	85 c0                	test   eax,eax
c0001cd9:	74 09                	je     c0001ce4 <isalnum+0x2c>
c0001cdb:	90                   	nop
c0001cdc:	b8 01 00 00 00       	mov    eax,0x1
c0001ce1:	eb 09                	jmp    c0001cec <isalnum+0x34>
c0001ce3:	90                   	nop
c0001ce4:	b8 00 00 00 00       	mov    eax,0x0
c0001ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0001cec:	83 c4 04             	add    esp,0x4
c0001cef:	c3                   	ret    

c0001cf0 <ispunct>:
c0001cf0:	83 ec 04             	sub    esp,0x4
c0001cf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001cf7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001cfa:	e8 b9 ff ff ff       	call   c0001cb8 <isalnum>
c0001cff:	85 c0                	test   eax,eax
c0001d01:	75 29                	jne    c0001d2c <ispunct+0x3c>
c0001d03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d0a:	e8 2d ff ff ff       	call   c0001c3c <isspace>
c0001d0f:	85 c0                	test   eax,eax
c0001d11:	75 19                	jne    c0001d2c <ispunct+0x3c>
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 c5 fe ff ff       	call   c0001be4 <iscntrl>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 09                	jne    c0001d2c <ispunct+0x3c>
c0001d23:	b8 01 00 00 00       	mov    eax,0x1
c0001d28:	eb 0a                	jmp    c0001d34 <ispunct+0x44>
c0001d2a:	66 90                	xchg   ax,ax
c0001d2c:	b8 00 00 00 00       	mov    eax,0x0
c0001d31:	8d 76 00             	lea    esi,[esi+0x0]
c0001d34:	83 c4 04             	add    esp,0x4
c0001d37:	c3                   	ret    

c0001d38 <isgraph>:
c0001d38:	83 ec 04             	sub    esp,0x4
c0001d3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d42:	e8 71 ff ff ff       	call   c0001cb8 <isalnum>
c0001d47:	85 c0                	test   eax,eax
c0001d49:	75 11                	jne    c0001d5c <isgraph+0x24>
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 99 ff ff ff       	call   c0001cf0 <ispunct>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	74 09                	je     c0001d64 <isgraph+0x2c>
c0001d5b:	90                   	nop
c0001d5c:	b8 01 00 00 00       	mov    eax,0x1
c0001d61:	eb 09                	jmp    c0001d6c <isgraph+0x34>
c0001d63:	90                   	nop
c0001d64:	b8 00 00 00 00       	mov    eax,0x0
c0001d69:	8d 76 00             	lea    esi,[esi+0x0]
c0001d6c:	83 c4 04             	add    esp,0x4
c0001d6f:	c3                   	ret    

c0001d70 <isprint>:
c0001d70:	83 ec 04             	sub    esp,0x4
c0001d73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d77:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d7a:	e8 b9 ff ff ff       	call   c0001d38 <isgraph>
c0001d7f:	85 c0                	test   eax,eax
c0001d81:	75 09                	jne    c0001d8c <isprint+0x1c>
c0001d83:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001d88:	75 0a                	jne    c0001d94 <isprint+0x24>
c0001d8a:	66 90                	xchg   ax,ax
c0001d8c:	b8 01 00 00 00       	mov    eax,0x1
c0001d91:	eb 09                	jmp    c0001d9c <isprint+0x2c>
c0001d93:	90                   	nop
c0001d94:	b8 00 00 00 00       	mov    eax,0x0
c0001d99:	8d 76 00             	lea    esi,[esi+0x0]
c0001d9c:	83 c4 04             	add    esp,0x4
c0001d9f:	c3                   	ret    

c0001da0 <isxdigit>:
c0001da0:	83 ec 04             	sub    esp,0x4
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 55 fe ff ff       	call   c0001c04 <isdigit>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 21                	jne    c0001dd4 <isxdigit+0x34>
c0001db3:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001db8:	7e 0a                	jle    c0001dc4 <isxdigit+0x24>
c0001dba:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001dbf:	7e 13                	jle    c0001dd4 <isxdigit+0x34>
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001dc9:	7e 11                	jle    c0001ddc <isxdigit+0x3c>
c0001dcb:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001dd0:	7f 0a                	jg     c0001ddc <isxdigit+0x3c>
c0001dd2:	66 90                	xchg   ax,ax
c0001dd4:	b8 01 00 00 00       	mov    eax,0x1
c0001dd9:	eb 09                	jmp    c0001de4 <isxdigit+0x44>
c0001ddb:	90                   	nop
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	8d 76 00             	lea    esi,[esi+0x0]
c0001de4:	83 c4 04             	add    esp,0x4
c0001de7:	c3                   	ret    

c0001de8 <disk_status>:
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	c3                   	ret    

c0001deb <disk_initialize>:
c0001deb:	31 c0                	xor    eax,eax
c0001ded:	c3                   	ret    

c0001dee <disk_read>:
c0001dee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001df3:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dff:	e9 b0 69 01 00       	jmp    c00187b4 <fatWrapperReadDisk>

c0001e04 <disk_write>:
c0001e04:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e09:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e15:	e9 e2 69 01 00       	jmp    c00187fc <fatWrapperWriteDisk>

c0001e1a <disk_ioctl>:
c0001e1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001e1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001e23:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e28:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e34:	e9 0b 6a 01 00       	jmp    c0018844 <fatWrapperIoctl>

c0001e39 <ld_word>:
c0001e39:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e3d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e40:	c1 e2 08             	shl    edx,0x8
c0001e43:	09 d0                	or     eax,edx
c0001e45:	c3                   	ret    

c0001e46 <ld_dword>:
c0001e46:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e4a:	89 d1                	mov    ecx,edx
c0001e4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e53:	c1 e1 08             	shl    ecx,0x8
c0001e56:	09 ca                	or     edx,ecx
c0001e58:	c1 e2 08             	shl    edx,0x8
c0001e5b:	09 d0                	or     eax,edx
c0001e5d:	c3                   	ret    

c0001e5e <st_word>:
c0001e5e:	66 89 10             	mov    WORD PTR [eax],dx
c0001e61:	c3                   	ret    

c0001e62 <st_dword>:
c0001e62:	89 10                	mov    DWORD PTR [eax],edx
c0001e64:	c3                   	ret    

c0001e65 <mem_cpy>:
c0001e65:	85 c9                	test   ecx,ecx
c0001e67:	74 10                	je     c0001e79 <mem_cpy+0x14>
c0001e69:	57                   	push   edi
c0001e6a:	01 c1                	add    ecx,eax
c0001e6c:	56                   	push   esi
c0001e6d:	89 c7                	mov    edi,eax
c0001e6f:	89 d6                	mov    esi,edx
c0001e71:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e72:	39 f9                	cmp    ecx,edi
c0001e74:	75 fb                	jne    c0001e71 <mem_cpy+0xc>
c0001e76:	5e                   	pop    esi
c0001e77:	5f                   	pop    edi
c0001e78:	c3                   	ret    
c0001e79:	c3                   	ret    

c0001e7a <mem_set>:
c0001e7a:	01 c1                	add    ecx,eax
c0001e7c:	88 10                	mov    BYTE PTR [eax],dl
c0001e7e:	40                   	inc    eax
c0001e7f:	39 c8                	cmp    eax,ecx
c0001e81:	75 f9                	jne    c0001e7c <mem_set+0x2>
c0001e83:	c3                   	ret    

c0001e84 <mem_cmp>:
c0001e84:	57                   	push   edi
c0001e85:	56                   	push   esi
c0001e86:	89 c6                	mov    esi,eax
c0001e88:	53                   	push   ebx
c0001e89:	46                   	inc    esi
c0001e8a:	42                   	inc    edx
c0001e8b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e8f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e93:	29 fb                	sub    ebx,edi
c0001e95:	89 cf                	mov    edi,ecx
c0001e97:	29 f7                	sub    edi,esi
c0001e99:	01 c7                	add    edi,eax
c0001e9b:	74 04                	je     c0001ea1 <mem_cmp+0x1d>
c0001e9d:	85 db                	test   ebx,ebx
c0001e9f:	74 e8                	je     c0001e89 <mem_cmp+0x5>
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	5b                   	pop    ebx
c0001ea4:	5e                   	pop    esi
c0001ea5:	5f                   	pop    edi
c0001ea6:	c3                   	ret    

c0001ea7 <chk_chr>:
c0001ea7:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001eaa:	84 c9                	test   cl,cl
c0001eac:	74 07                	je     c0001eb5 <chk_chr+0xe>
c0001eae:	39 d1                	cmp    ecx,edx
c0001eb0:	74 03                	je     c0001eb5 <chk_chr+0xe>
c0001eb2:	40                   	inc    eax
c0001eb3:	eb f2                	jmp    c0001ea7 <chk_chr>
c0001eb5:	89 c8                	mov    eax,ecx
c0001eb7:	c3                   	ret    

c0001eb8 <dbc_1st>:
c0001eb8:	31 c0                	xor    eax,eax
c0001eba:	c3                   	ret    

c0001ebb <dbc_2nd>:
c0001ebb:	31 c0                	xor    eax,eax
c0001ebd:	c3                   	ret    

c0001ebe <tchar2uni>:
c0001ebe:	57                   	push   edi
c0001ebf:	56                   	push   esi
c0001ec0:	89 c6                	mov    esi,eax
c0001ec2:	53                   	push   ebx
c0001ec3:	51                   	push   ecx
c0001ec4:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001ec6:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001ec8:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001ecb:	84 d2                	test   dl,dl
c0001ecd:	78 0a                	js     c0001ed9 <tchar2uni+0x1b>
c0001ecf:	0f b6 c2             	movzx  eax,dl
c0001ed2:	89 cf                	mov    edi,ecx
c0001ed4:	e9 a3 00 00 00       	jmp    c0001f7c <tchar2uni+0xbe>
c0001ed9:	88 d0                	mov    al,dl
c0001edb:	24 e0                	and    al,0xe0
c0001edd:	3c c0                	cmp    al,0xc0
c0001edf:	75 0d                	jne    c0001eee <tchar2uni+0x30>
c0001ee1:	80 e2 1f             	and    dl,0x1f
c0001ee4:	0f b6 c2             	movzx  eax,dl
c0001ee7:	ba 01 00 00 00       	mov    edx,0x1
c0001eec:	eb 32                	jmp    c0001f20 <tchar2uni+0x62>
c0001eee:	88 d0                	mov    al,dl
c0001ef0:	24 f0                	and    al,0xf0
c0001ef2:	3c e0                	cmp    al,0xe0
c0001ef4:	75 0d                	jne    c0001f03 <tchar2uni+0x45>
c0001ef6:	80 e2 0f             	and    dl,0xf
c0001ef9:	0f b6 c2             	movzx  eax,dl
c0001efc:	ba 02 00 00 00       	mov    edx,0x2
c0001f01:	eb 1d                	jmp    c0001f20 <tchar2uni+0x62>
c0001f03:	88 d0                	mov    al,dl
c0001f05:	24 f8                	and    al,0xf8
c0001f07:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f0b:	83 c8 ff             	or     eax,0xffffffff
c0001f0e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001f13:	75 6e                	jne    c0001f83 <tchar2uni+0xc5>
c0001f15:	80 e2 07             	and    dl,0x7
c0001f18:	0f b6 c2             	movzx  eax,dl
c0001f1b:	ba 03 00 00 00       	mov    edx,0x3
c0001f20:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001f24:	41                   	inc    ecx
c0001f25:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001f28:	88 da                	mov    dl,bl
c0001f2a:	80 e2 c0             	and    dl,0xc0
c0001f2d:	80 fa 80             	cmp    dl,0x80
c0001f30:	75 4e                	jne    c0001f80 <tchar2uni+0xc2>
c0001f32:	c1 e0 06             	shl    eax,0x6
c0001f35:	80 e3 3f             	and    bl,0x3f
c0001f38:	0f b6 db             	movzx  ebx,bl
c0001f3b:	09 d8                	or     eax,ebx
c0001f3d:	39 f9                	cmp    ecx,edi
c0001f3f:	75 e3                	jne    c0001f24 <tchar2uni+0x66>
c0001f41:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001f47:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001f4d:	76 31                	jbe    c0001f80 <tchar2uni+0xc2>
c0001f4f:	8d 50 80             	lea    edx,[eax-0x80]
c0001f52:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001f58:	77 26                	ja     c0001f80 <tchar2uni+0xc2>
c0001f5a:	3d ff ff 00 00       	cmp    eax,0xffff
c0001f5f:	76 1b                	jbe    c0001f7c <tchar2uni+0xbe>
c0001f61:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001f67:	25 ff 03 00 00       	and    eax,0x3ff
c0001f6c:	c1 e1 06             	shl    ecx,0x6
c0001f6f:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f75:	09 c8                	or     eax,ecx
c0001f77:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c0001f7c:	89 3e                	mov    DWORD PTR [esi],edi
c0001f7e:	eb 03                	jmp    c0001f83 <tchar2uni+0xc5>
c0001f80:	83 c8 ff             	or     eax,0xffffffff
c0001f83:	5a                   	pop    edx
c0001f84:	5b                   	pop    ebx
c0001f85:	5e                   	pop    esi
c0001f86:	5f                   	pop    edi
c0001f87:	c3                   	ret    

c0001f88 <put_utf>:
c0001f88:	53                   	push   ebx
c0001f89:	89 d3                	mov    ebx,edx
c0001f8b:	31 d2                	xor    edx,edx
c0001f8d:	83 f8 7f             	cmp    eax,0x7f
c0001f90:	77 11                	ja     c0001fa3 <put_utf+0x1b>
c0001f92:	85 c9                	test   ecx,ecx
c0001f94:	0f 84 da 00 00 00    	je     c0002074 <put_utf+0xec>
c0001f9a:	88 03                	mov    BYTE PTR [ebx],al
c0001f9c:	b2 01                	mov    dl,0x1
c0001f9e:	e9 d1 00 00 00       	jmp    c0002074 <put_utf+0xec>
c0001fa3:	3d ff 07 00 00       	cmp    eax,0x7ff
c0001fa8:	77 21                	ja     c0001fcb <put_utf+0x43>
c0001faa:	83 f9 01             	cmp    ecx,0x1
c0001fad:	0f 86 c1 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fb3:	89 c2                	mov    edx,eax
c0001fb5:	24 3f                	and    al,0x3f
c0001fb7:	c1 ea 06             	shr    edx,0x6
c0001fba:	0c 80                	or     al,0x80
c0001fbc:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0001fbf:	80 ca c0             	or     dl,0xc0
c0001fc2:	88 13                	mov    BYTE PTR [ebx],dl
c0001fc4:	b2 02                	mov    dl,0x2
c0001fc6:	e9 a9 00 00 00       	jmp    c0002074 <put_utf+0xec>
c0001fcb:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fd0:	77 3e                	ja     c0002010 <put_utf+0x88>
c0001fd2:	83 f9 02             	cmp    ecx,0x2
c0001fd5:	0f 86 99 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fdb:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0001fe1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fe7:	0f 86 87 00 00 00    	jbe    c0002074 <put_utf+0xec>
c0001fed:	89 c2                	mov    edx,eax
c0001fef:	c1 ea 0c             	shr    edx,0xc
c0001ff2:	80 ca e0             	or     dl,0xe0
c0001ff5:	88 13                	mov    BYTE PTR [ebx],dl
c0001ff7:	89 c2                	mov    edx,eax
c0001ff9:	24 3f                	and    al,0x3f
c0001ffb:	c1 ea 06             	shr    edx,0x6
c0001ffe:	0c 80                	or     al,0x80
c0002000:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002003:	80 e2 3f             	and    dl,0x3f
c0002006:	80 ca 80             	or     dl,0x80
c0002009:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000200c:	b2 03                	mov    dl,0x3
c000200e:	eb 64                	jmp    c0002074 <put_utf+0xec>
c0002010:	83 f9 03             	cmp    ecx,0x3
c0002013:	76 5f                	jbe    c0002074 <put_utf+0xec>
c0002015:	89 c2                	mov    edx,eax
c0002017:	0f b7 c0             	movzx  eax,ax
c000201a:	66 31 d2             	xor    dx,dx
c000201d:	2d 00 dc 00 00       	sub    eax,0xdc00
c0002022:	81 c2 00 00 00 28    	add    edx,0x28000000
c0002028:	c1 ea 06             	shr    edx,0x6
c000202b:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c0002031:	77 3f                	ja     c0002072 <put_utf+0xea>
c0002033:	3d ff 03 00 00       	cmp    eax,0x3ff
c0002038:	77 38                	ja     c0002072 <put_utf+0xea>
c000203a:	09 d0                	or     eax,edx
c000203c:	05 00 00 01 00       	add    eax,0x10000
c0002041:	89 c2                	mov    edx,eax
c0002043:	c1 ea 12             	shr    edx,0x12
c0002046:	80 ca f0             	or     dl,0xf0
c0002049:	88 13                	mov    BYTE PTR [ebx],dl
c000204b:	89 c2                	mov    edx,eax
c000204d:	c1 ea 0c             	shr    edx,0xc
c0002050:	80 e2 3f             	and    dl,0x3f
c0002053:	80 ca 80             	or     dl,0x80
c0002056:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c0002059:	89 c2                	mov    edx,eax
c000205b:	24 3f                	and    al,0x3f
c000205d:	c1 ea 06             	shr    edx,0x6
c0002060:	0c 80                	or     al,0x80
c0002062:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c0002065:	80 e2 3f             	and    dl,0x3f
c0002068:	80 ca 80             	or     dl,0x80
c000206b:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c000206e:	b2 04                	mov    dl,0x4
c0002070:	eb 02                	jmp    c0002074 <put_utf+0xec>
c0002072:	31 d2                	xor    edx,edx
c0002074:	5b                   	pop    ebx
c0002075:	88 d0                	mov    al,dl
c0002077:	c3                   	ret    

c0002078 <clst2sect>:
c0002078:	8d 4a fe             	lea    ecx,[edx-0x2]
c000207b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000207e:	83 ea 02             	sub    edx,0x2
c0002081:	39 ca                	cmp    edx,ecx
c0002083:	76 0d                	jbe    c0002092 <clst2sect+0x1a>
c0002085:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002089:	0f af d1             	imul   edx,ecx
c000208c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000208f:	89 d0                	mov    eax,edx
c0002091:	c3                   	ret    
c0002092:	31 c0                	xor    eax,eax
c0002094:	c3                   	ret    

c0002095 <pick_lfn>:
c0002095:	55                   	push   ebp
c0002096:	57                   	push   edi
c0002097:	89 d7                	mov    edi,edx
c0002099:	56                   	push   esi
c000209a:	53                   	push   ebx
c000209b:	89 c3                	mov    ebx,eax
c000209d:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020a0:	e8 94 fd ff ff       	call   c0001e39 <ld_word>
c00020a5:	66 85 c0             	test   ax,ax
c00020a8:	74 04                	je     c00020ae <pick_lfn+0x19>
c00020aa:	31 c0                	xor    eax,eax
c00020ac:	eb 65                	jmp    c0002113 <pick_lfn+0x7e>
c00020ae:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c00020b1:	be 01 00 00 00       	mov    esi,0x1
c00020b6:	31 ed                	xor    ebp,ebp
c00020b8:	83 e1 bf             	and    ecx,0xffffffbf
c00020bb:	49                   	dec    ecx
c00020bc:	6b c9 0d             	imul   ecx,ecx,0xd
c00020bf:	0f b6 85 a0 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0e60]
c00020c6:	01 f8                	add    eax,edi
c00020c8:	e8 6c fd ff ff       	call   c0001e39 <ld_word>
c00020cd:	85 f6                	test   esi,esi
c00020cf:	0f b7 d0             	movzx  edx,ax
c00020d2:	74 11                	je     c00020e5 <pick_lfn+0x50>
c00020d4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020da:	77 ce                	ja     c00020aa <pick_lfn+0x15>
c00020dc:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c00020e0:	89 d6                	mov    esi,edx
c00020e2:	41                   	inc    ecx
c00020e3:	eb 08                	jmp    c00020ed <pick_lfn+0x58>
c00020e5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020eb:	75 bd                	jne    c00020aa <pick_lfn+0x15>
c00020ed:	45                   	inc    ebp
c00020ee:	83 fd 0d             	cmp    ebp,0xd
c00020f1:	75 cc                	jne    c00020bf <pick_lfn+0x2a>
c00020f3:	8a 07                	mov    al,BYTE PTR [edi]
c00020f5:	c0 e8 06             	shr    al,0x6
c00020f8:	24 01                	and    al,0x1
c00020fa:	74 12                	je     c000210e <pick_lfn+0x79>
c00020fc:	85 f6                	test   esi,esi
c00020fe:	74 0e                	je     c000210e <pick_lfn+0x79>
c0002100:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002106:	77 a2                	ja     c00020aa <pick_lfn+0x15>
c0002108:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000210e:	b8 01 00 00 00       	mov    eax,0x1
c0002113:	5b                   	pop    ebx
c0002114:	5e                   	pop    esi
c0002115:	5f                   	pop    edi
c0002116:	5d                   	pop    ebp
c0002117:	c3                   	ret    

c0002118 <put_lfn>:
c0002118:	55                   	push   ebp
c0002119:	31 ed                	xor    ebp,ebp
c000211b:	57                   	push   edi
c000211c:	89 d7                	mov    edi,edx
c000211e:	56                   	push   esi
c000211f:	31 f6                	xor    esi,esi
c0002121:	53                   	push   ebx
c0002122:	53                   	push   ebx
c0002123:	89 04 24             	mov    DWORD PTR [esp],eax
c0002126:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c000212a:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002130:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002133:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002136:	31 d2                	xor    edx,edx
c0002138:	e8 21 fd ff ff       	call   c0001e5e <st_word>
c000213d:	0f b6 d9             	movzx  ebx,cl
c0002140:	4b                   	dec    ebx
c0002141:	6b db 0d             	imul   ebx,ebx,0xd
c0002144:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000214a:	74 08                	je     c0002154 <put_lfn+0x3c>
c000214c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000214f:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002153:	43                   	inc    ebx
c0002154:	0f b6 85 a0 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0e60]
c000215b:	89 f2                	mov    edx,esi
c000215d:	01 f8                	add    eax,edi
c000215f:	e8 fa fc ff ff       	call   c0001e5e <st_word>
c0002164:	85 f6                	test   esi,esi
c0002166:	75 05                	jne    c000216d <put_lfn+0x55>
c0002168:	be ff ff 00 00       	mov    esi,0xffff
c000216d:	45                   	inc    ebp
c000216e:	83 fd 0d             	cmp    ebp,0xd
c0002171:	75 d1                	jne    c0002144 <put_lfn+0x2c>
c0002173:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002179:	74 0a                	je     c0002185 <put_lfn+0x6d>
c000217b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000217e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002183:	75 03                	jne    c0002188 <put_lfn+0x70>
c0002185:	80 c9 40             	or     cl,0x40
c0002188:	88 0f                	mov    BYTE PTR [edi],cl
c000218a:	58                   	pop    eax
c000218b:	5b                   	pop    ebx
c000218c:	5e                   	pop    esi
c000218d:	5f                   	pop    edi
c000218e:	5d                   	pop    ebp
c000218f:	c3                   	ret    

c0002190 <gen_numname>:
c0002190:	57                   	push   edi
c0002191:	89 cf                	mov    edi,ecx
c0002193:	56                   	push   esi
c0002194:	b9 0b 00 00 00       	mov    ecx,0xb
c0002199:	53                   	push   ebx
c000219a:	89 c6                	mov    esi,eax
c000219c:	83 ec 10             	sub    esp,0x10
c000219f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021a3:	e8 bd fc ff ff       	call   c0001e65 <mem_cpy>
c00021a8:	83 fb 05             	cmp    ebx,0x5
c00021ab:	76 2b                	jbe    c00021d8 <gen_numname+0x48>
c00021ad:	0f b7 07             	movzx  eax,WORD PTR [edi]
c00021b0:	85 c0                	test   eax,eax
c00021b2:	74 24                	je     c00021d8 <gen_numname+0x48>
c00021b4:	83 c7 02             	add    edi,0x2
c00021b7:	ba 10 00 00 00       	mov    edx,0x10
c00021bc:	89 c1                	mov    ecx,eax
c00021be:	01 db                	add    ebx,ebx
c00021c0:	d1 e8                	shr    eax,1
c00021c2:	83 e1 01             	and    ecx,0x1
c00021c5:	01 cb                	add    ebx,ecx
c00021c7:	0f ba e3 10          	bt     ebx,0x10
c00021cb:	73 06                	jae    c00021d3 <gen_numname+0x43>
c00021cd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021d3:	4a                   	dec    edx
c00021d4:	75 e6                	jne    c00021bc <gen_numname+0x2c>
c00021d6:	eb d5                	jmp    c00021ad <gen_numname+0x1d>
c00021d8:	bf 07 00 00 00       	mov    edi,0x7
c00021dd:	88 da                	mov    dl,bl
c00021df:	80 e2 0f             	and    dl,0xf
c00021e2:	88 d0                	mov    al,dl
c00021e4:	04 30                	add    al,0x30
c00021e6:	3c 39                	cmp    al,0x39
c00021e8:	76 04                	jbe    c00021ee <gen_numname+0x5e>
c00021ea:	88 d0                	mov    al,dl
c00021ec:	04 37                	add    al,0x37
c00021ee:	8d 4f ff             	lea    ecx,[edi-0x1]
c00021f1:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c00021f5:	89 d8                	mov    eax,ebx
c00021f7:	c1 e8 04             	shr    eax,0x4
c00021fa:	83 fb 0f             	cmp    ebx,0xf
c00021fd:	76 06                	jbe    c0002205 <gen_numname+0x75>
c00021ff:	89 cf                	mov    edi,ecx
c0002201:	89 c3                	mov    ebx,eax
c0002203:	eb d8                	jmp    c00021dd <gen_numname+0x4d>
c0002205:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000220a:	31 d2                	xor    edx,edx
c000220c:	83 ef 02             	sub    edi,0x2
c000220f:	8d 04 16             	lea    eax,[esi+edx*1]
c0002212:	39 ca                	cmp    edx,ecx
c0002214:	73 18                	jae    c000222e <gen_numname+0x9e>
c0002216:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002219:	3c 20                	cmp    al,0x20
c000221b:	74 11                	je     c000222e <gen_numname+0x9e>
c000221d:	e8 96 fc ff ff       	call   c0001eb8 <dbc_1st>
c0002222:	85 c0                	test   eax,eax
c0002224:	74 05                	je     c000222b <gen_numname+0x9b>
c0002226:	39 d7                	cmp    edi,edx
c0002228:	74 04                	je     c000222e <gen_numname+0x9e>
c000222a:	42                   	inc    edx
c000222b:	42                   	inc    edx
c000222c:	eb e1                	jmp    c000220f <gen_numname+0x7f>
c000222e:	83 f9 07             	cmp    ecx,0x7
c0002231:	b0 20                	mov    al,0x20
c0002233:	77 05                	ja     c000223a <gen_numname+0xaa>
c0002235:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002239:	41                   	inc    ecx
c000223a:	42                   	inc    edx
c000223b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000223f:	83 fa 07             	cmp    edx,0x7
c0002242:	76 ea                	jbe    c000222e <gen_numname+0x9e>
c0002244:	83 c4 10             	add    esp,0x10
c0002247:	5b                   	pop    ebx
c0002248:	5e                   	pop    esi
c0002249:	5f                   	pop    edi
c000224a:	c3                   	ret    

c000224b <sum_sfn>:
c000224b:	31 c9                	xor    ecx,ecx
c000224d:	31 d2                	xor    edx,edx
c000224f:	d0 ca                	ror    dl,1
c0002251:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002254:	41                   	inc    ecx
c0002255:	83 f9 0b             	cmp    ecx,0xb
c0002258:	75 f5                	jne    c000224f <sum_sfn+0x4>
c000225a:	88 d0                	mov    al,dl
c000225c:	c3                   	ret    

c000225d <get_ldnumber>:
c000225d:	57                   	push   edi
c000225e:	56                   	push   esi
c000225f:	83 ce ff             	or     esi,0xffffffff
c0002262:	53                   	push   ebx
c0002263:	8b 10                	mov    edx,DWORD PTR [eax]
c0002265:	85 d2                	test   edx,edx
c0002267:	74 33                	je     c000229c <get_ldnumber+0x3f>
c0002269:	89 c7                	mov    edi,eax
c000226b:	89 d1                	mov    ecx,edx
c000226d:	41                   	inc    ecx
c000226e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002271:	80 fb 1f             	cmp    bl,0x1f
c0002274:	76 05                	jbe    c000227b <get_ldnumber+0x1e>
c0002276:	80 fb 3a             	cmp    bl,0x3a
c0002279:	75 f2                	jne    c000226d <get_ldnumber+0x10>
c000227b:	31 f6                	xor    esi,esi
c000227d:	80 fb 3a             	cmp    bl,0x3a
c0002280:	75 1a                	jne    c000229c <get_ldnumber+0x3f>
c0002282:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002285:	83 ce ff             	or     esi,0xffffffff
c0002288:	88 d8                	mov    al,bl
c000228a:	2c 30                	sub    al,0x30
c000228c:	3c 09                	cmp    al,0x9
c000228e:	77 0c                	ja     c000229c <get_ldnumber+0x3f>
c0002290:	83 c2 02             	add    edx,0x2
c0002293:	39 d1                	cmp    ecx,edx
c0002295:	75 05                	jne    c000229c <get_ldnumber+0x3f>
c0002297:	89 0f                	mov    DWORD PTR [edi],ecx
c0002299:	8d 73 d0             	lea    esi,[ebx-0x30]
c000229c:	5b                   	pop    ebx
c000229d:	89 f0                	mov    eax,esi
c000229f:	5e                   	pop    esi
c00022a0:	5f                   	pop    edi
c00022a1:	c3                   	ret    

c00022a2 <validate>:
c00022a2:	56                   	push   esi
c00022a3:	85 c0                	test   eax,eax
c00022a5:	53                   	push   ebx
c00022a6:	89 d6                	mov    esi,edx
c00022a8:	51                   	push   ecx
c00022a9:	75 09                	jne    c00022b4 <validate+0x12>
c00022ab:	b8 09 00 00 00       	mov    eax,0x9
c00022b0:	31 d2                	xor    edx,edx
c00022b2:	eb 30                	jmp    c00022e4 <validate+0x42>
c00022b4:	89 c3                	mov    ebx,eax
c00022b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00022b8:	85 c0                	test   eax,eax
c00022ba:	74 ef                	je     c00022ab <validate+0x9>
c00022bc:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022bf:	74 ea                	je     c00022ab <validate+0x9>
c00022c1:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00022c4:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c00022c8:	75 e1                	jne    c00022ab <validate+0x9>
c00022ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022ce:	83 ec 0c             	sub    esp,0xc
c00022d1:	50                   	push   eax
c00022d2:	e8 11 fb ff ff       	call   c0001de8 <disk_status>
c00022d7:	83 c4 10             	add    esp,0x10
c00022da:	24 01                	and    al,0x1
c00022dc:	84 c0                	test   al,al
c00022de:	75 cb                	jne    c00022ab <validate+0x9>
c00022e0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00022e2:	31 c0                	xor    eax,eax
c00022e4:	89 16                	mov    DWORD PTR [esi],edx
c00022e6:	5a                   	pop    edx
c00022e7:	5b                   	pop    ebx
c00022e8:	5e                   	pop    esi
c00022e9:	c3                   	ret    

c00022ea <sync_window>:
c00022ea:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022ee:	74 58                	je     c0002348 <sync_window+0x5e>
c00022f0:	56                   	push   esi
c00022f1:	53                   	push   ebx
c00022f2:	89 c3                	mov    ebx,eax
c00022f4:	51                   	push   ecx
c00022f5:	6a 01                	push   0x1
c00022f7:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022fa:	8d 70 34             	lea    esi,[eax+0x34]
c00022fd:	56                   	push   esi
c00022fe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002302:	50                   	push   eax
c0002303:	e8 fc fa ff ff       	call   c0001e04 <disk_write>
c0002308:	83 c4 10             	add    esp,0x10
c000230b:	ba 01 00 00 00       	mov    edx,0x1
c0002310:	85 c0                	test   eax,eax
c0002312:	75 2e                	jne    c0002342 <sync_window+0x58>
c0002314:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002318:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000231b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000231e:	89 c1                	mov    ecx,eax
c0002320:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	73 19                	jae    c0002340 <sync_window+0x56>
c0002327:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000232b:	75 13                	jne    c0002340 <sync_window+0x56>
c000232d:	6a 01                	push   0x1
c000232f:	01 d0                	add    eax,edx
c0002331:	50                   	push   eax
c0002332:	56                   	push   esi
c0002333:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002337:	50                   	push   eax
c0002338:	e8 c7 fa ff ff       	call   c0001e04 <disk_write>
c000233d:	83 c4 10             	add    esp,0x10
c0002340:	31 d2                	xor    edx,edx
c0002342:	89 d0                	mov    eax,edx
c0002344:	5a                   	pop    edx
c0002345:	5b                   	pop    ebx
c0002346:	5e                   	pop    esi
c0002347:	c3                   	ret    
c0002348:	31 d2                	xor    edx,edx
c000234a:	89 d0                	mov    eax,edx
c000234c:	c3                   	ret    

c000234d <move_window>:
c000234d:	57                   	push   edi
c000234e:	56                   	push   esi
c000234f:	53                   	push   ebx
c0002350:	31 db                	xor    ebx,ebx
c0002352:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002355:	74 38                	je     c000238f <move_window+0x42>
c0002357:	89 c6                	mov    esi,eax
c0002359:	89 d7                	mov    edi,edx
c000235b:	e8 8a ff ff ff       	call   c00022ea <sync_window>
c0002360:	85 c0                	test   eax,eax
c0002362:	89 c3                	mov    ebx,eax
c0002364:	75 29                	jne    c000238f <move_window+0x42>
c0002366:	6a 01                	push   0x1
c0002368:	57                   	push   edi
c0002369:	8d 46 34             	lea    eax,[esi+0x34]
c000236c:	50                   	push   eax
c000236d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002371:	50                   	push   eax
c0002372:	e8 77 fa ff ff       	call   c0001dee <disk_read>
c0002377:	83 c4 10             	add    esp,0x10
c000237a:	ba 01 00 00 00       	mov    edx,0x1
c000237f:	85 c0                	test   eax,eax
c0002381:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002386:	0f 45 f8             	cmovne edi,eax
c0002389:	0f 45 da             	cmovne ebx,edx
c000238c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000238f:	89 d8                	mov    eax,ebx
c0002391:	5b                   	pop    ebx
c0002392:	5e                   	pop    esi
c0002393:	5f                   	pop    edi
c0002394:	c3                   	ret    

c0002395 <check_fs>:
c0002395:	53                   	push   ebx
c0002396:	89 c3                	mov    ebx,eax
c0002398:	83 ec 08             	sub    esp,0x8
c000239b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000239f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023a6:	e8 a2 ff ff ff       	call   c000234d <move_window>
c00023ab:	ba 04 00 00 00       	mov    edx,0x4
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 6a                	jne    c000241e <check_fs+0x89>
c00023b4:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023ba:	e8 7a fa ff ff       	call   c0001e39 <ld_word>
c00023bf:	ba 03 00 00 00       	mov    edx,0x3
c00023c4:	66 3d 55 aa          	cmp    ax,0xaa55
c00023c8:	75 54                	jne    c000241e <check_fs+0x89>
c00023ca:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023cd:	88 c2                	mov    dl,al
c00023cf:	80 c2 18             	add    dl,0x18
c00023d2:	80 fa 01             	cmp    dl,0x1
c00023d5:	76 09                	jbe    c00023e0 <check_fs+0x4b>
c00023d7:	3c eb                	cmp    al,0xeb
c00023d9:	ba 02 00 00 00       	mov    edx,0x2
c00023de:	75 3e                	jne    c000241e <check_fs+0x89>
c00023e0:	ba 84 12 02 c0       	mov    edx,0xc0021284
c00023e5:	b9 03 00 00 00       	mov    ecx,0x3
c00023ea:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023ed:	e8 92 fa ff ff       	call   c0001e84 <mem_cmp>
c00023f2:	31 d2                	xor    edx,edx
c00023f4:	85 c0                	test   eax,eax
c00023f6:	74 26                	je     c000241e <check_fs+0x89>
c00023f8:	ba 5c f0 01 c0       	mov    edx,0xc001f05c
c00023fd:	b9 05 00 00 00       	mov    ecx,0x5
c0002402:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002408:	e8 77 fa ff ff       	call   c0001e84 <mem_cmp>
c000240d:	31 d2                	xor    edx,edx
c000240f:	85 c0                	test   eax,eax
c0002411:	74 0b                	je     c000241e <check_fs+0x89>
c0002413:	31 d2                	xor    edx,edx
c0002415:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002419:	0f 95 c2             	setne  dl
c000241c:	01 d2                	add    edx,edx
c000241e:	83 c4 08             	add    esp,0x8
c0002421:	89 d0                	mov    eax,edx
c0002423:	5b                   	pop    ebx
c0002424:	c3                   	ret    

c0002425 <find_volume>:
c0002425:	55                   	push   ebp
c0002426:	57                   	push   edi
c0002427:	89 c7                	mov    edi,eax
c0002429:	56                   	push   esi
c000242a:	89 d6                	mov    esi,edx
c000242c:	53                   	push   ebx
c000242d:	31 d2                	xor    edx,edx
c000242f:	83 ec 2c             	sub    esp,0x2c
c0002432:	e8 5e ff ff ff       	call   c0002395 <check_fs>
c0002437:	85 f6                	test   esi,esi
c0002439:	0f 94 c3             	sete   bl
c000243c:	83 f8 02             	cmp    eax,0x2
c000243f:	74 06                	je     c0002447 <find_volume+0x22>
c0002441:	77 5f                	ja     c00024a2 <find_volume+0x7d>
c0002443:	84 db                	test   bl,bl
c0002445:	75 5b                	jne    c00024a2 <find_volume+0x7d>
c0002447:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c000244d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002451:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c0002457:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000245b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245f:	89 e8                	mov    eax,ebp
c0002461:	83 c5 10             	add    ebp,0x10
c0002464:	e8 dd f9 ff ff       	call   c0001e46 <ld_dword>
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	83 c1 04             	add    ecx,0x4
c0002470:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002473:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002477:	75 e2                	jne    c000245b <find_volume+0x36>
c0002479:	83 fe 01             	cmp    esi,0x1
c000247c:	83 d6 ff             	adc    esi,0xffffffff
c000247f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002483:	b8 03 00 00 00       	mov    eax,0x3
c0002488:	85 d2                	test   edx,edx
c000248a:	74 07                	je     c0002493 <find_volume+0x6e>
c000248c:	89 f8                	mov    eax,edi
c000248e:	e8 02 ff ff ff       	call   c0002395 <check_fs>
c0002493:	83 f8 01             	cmp    eax,0x1
c0002496:	76 0a                	jbe    c00024a2 <find_volume+0x7d>
c0002498:	84 db                	test   bl,bl
c000249a:	74 06                	je     c00024a2 <find_volume+0x7d>
c000249c:	46                   	inc    esi
c000249d:	83 fe 03             	cmp    esi,0x3
c00024a0:	76 dd                	jbe    c000247f <find_volume+0x5a>
c00024a2:	83 c4 2c             	add    esp,0x2c
c00024a5:	5b                   	pop    ebx
c00024a6:	5e                   	pop    esi
c00024a7:	5f                   	pop    edi
c00024a8:	5d                   	pop    ebp
c00024a9:	c3                   	ret    

c00024aa <mount_volume>:
c00024aa:	55                   	push   ebp
c00024ab:	89 d5                	mov    ebp,edx
c00024ad:	57                   	push   edi
c00024ae:	bf 0b 00 00 00       	mov    edi,0xb
c00024b3:	56                   	push   esi
c00024b4:	53                   	push   ebx
c00024b5:	88 cb                	mov    bl,cl
c00024b7:	83 ec 2c             	sub    esp,0x2c
c00024ba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024c0:	e8 98 fd ff ff       	call   c000225d <get_ldnumber>
c00024c5:	85 c0                	test   eax,eax
c00024c7:	0f 88 d0 02 00 00    	js     c000279d <mount_volume+0x2f3>
c00024cd:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024d4:	89 c1                	mov    ecx,eax
c00024d6:	bf 0c 00 00 00       	mov    edi,0xc
c00024db:	85 f6                	test   esi,esi
c00024dd:	0f 84 ba 02 00 00    	je     c000279d <mount_volume+0x2f3>
c00024e3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024e6:	80 e3 fe             	and    bl,0xfe
c00024e9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024ec:	74 3d                	je     c000252b <mount_volume+0x81>
c00024ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024f2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024f6:	83 ec 0c             	sub    esp,0xc
c00024f9:	50                   	push   eax
c00024fa:	e8 e9 f8 ff ff       	call   c0001de8 <disk_status>
c00024ff:	83 c4 10             	add    esp,0x10
c0002502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002506:	88 c2                	mov    dl,al
c0002508:	24 01                	and    al,0x1
c000250a:	84 c0                	test   al,al
c000250c:	75 1d                	jne    c000252b <mount_volume+0x81>
c000250e:	31 ff                	xor    edi,edi
c0002510:	84 db                	test   bl,bl
c0002512:	0f 84 85 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002518:	80 e2 04             	and    dl,0x4
c000251b:	0f 84 7c 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002521:	bf 0a 00 00 00       	mov    edi,0xa
c0002526:	e9 72 02 00 00       	jmp    c000279d <mount_volume+0x2f3>
c000252b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000252e:	83 ec 0c             	sub    esp,0xc
c0002531:	0f b6 c9             	movzx  ecx,cl
c0002534:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002537:	bf 03 00 00 00       	mov    edi,0x3
c000253c:	51                   	push   ecx
c000253d:	e8 a9 f8 ff ff       	call   c0001deb <disk_initialize>
c0002542:	83 c4 10             	add    esp,0x10
c0002545:	88 c1                	mov    cl,al
c0002547:	80 e1 01             	and    cl,0x1
c000254a:	84 c9                	test   cl,cl
c000254c:	0f 85 4b 02 00 00    	jne    c000279d <mount_volume+0x2f3>
c0002552:	84 db                	test   bl,bl
c0002554:	74 04                	je     c000255a <mount_volume+0xb0>
c0002556:	24 04                	and    al,0x4
c0002558:	75 c7                	jne    c0002521 <mount_volume+0x77>
c000255a:	31 d2                	xor    edx,edx
c000255c:	89 f0                	mov    eax,esi
c000255e:	e8 c2 fe ff ff       	call   c0002425 <find_volume>
c0002563:	bf 01 00 00 00       	mov    edi,0x1
c0002568:	83 f8 04             	cmp    eax,0x4
c000256b:	0f 84 2c 02 00 00    	je     c000279d <mount_volume+0x2f3>
c0002571:	83 f8 01             	cmp    eax,0x1
c0002574:	76 0a                	jbe    c0002580 <mount_volume+0xd6>
c0002576:	bf 0d 00 00 00       	mov    edi,0xd
c000257b:	e9 1d 02 00 00       	jmp    c000279d <mount_volume+0x2f3>
c0002580:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002583:	e8 b1 f8 ff ff       	call   c0001e39 <ld_word>
c0002588:	66 3d 00 02          	cmp    ax,0x200
c000258c:	75 e8                	jne    c0002576 <mount_volume+0xcc>
c000258e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002591:	e8 a3 f8 ff ff       	call   c0001e39 <ld_word>
c0002596:	0f b7 e8             	movzx  ebp,ax
c0002599:	85 ed                	test   ebp,ebp
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0xfd>
c000259d:	8d 46 58             	lea    eax,[esi+0x58]
c00025a0:	e8 a1 f8 ff ff       	call   c0001e46 <ld_dword>
c00025a5:	89 c5                	mov    ebp,eax
c00025a7:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c00025aa:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025ad:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c00025b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b5:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c00025b8:	88 d8                	mov    al,bl
c00025ba:	fe c8                	dec    al
c00025bc:	3c 01                	cmp    al,0x1
c00025be:	77 b6                	ja     c0002576 <mount_volume+0xcc>
c00025c0:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c00025c4:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c00025c8:	66 85 d2             	test   dx,dx
c00025cb:	74 a9                	je     c0002576 <mount_volume+0xcc>
c00025cd:	0f b6 fa             	movzx  edi,dl
c00025d0:	8d 47 ff             	lea    eax,[edi-0x1]
c00025d3:	85 f8                	test   eax,edi
c00025d5:	75 9f                	jne    c0002576 <mount_volume+0xcc>
c00025d7:	8d 46 45             	lea    eax,[esi+0x45]
c00025da:	e8 5a f8 ff ff       	call   c0001e39 <ld_word>
c00025df:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025e3:	0f b7 d0             	movzx  edx,ax
c00025e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ea:	f6 c2 0f             	test   dl,0xf
c00025ed:	75 87                	jne    c0002576 <mount_volume+0xcc>
c00025ef:	8d 46 47             	lea    eax,[esi+0x47]
c00025f2:	e8 42 f8 ff ff       	call   c0001e39 <ld_word>
c00025f7:	0f b7 d0             	movzx  edx,ax
c00025fa:	85 d2                	test   edx,edx
c00025fc:	75 0a                	jne    c0002608 <mount_volume+0x15e>
c00025fe:	8d 46 54             	lea    eax,[esi+0x54]
c0002601:	e8 40 f8 ff ff       	call   c0001e46 <ld_dword>
c0002606:	89 c2                	mov    edx,eax
c0002608:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000260c:	8d 46 42             	lea    eax,[esi+0x42]
c000260f:	e8 25 f8 ff ff       	call   c0001e39 <ld_word>
c0002614:	0f b7 c0             	movzx  eax,ax
c0002617:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000261b:	85 c0                	test   eax,eax
c000261d:	0f 84 53 ff ff ff    	je     c0002576 <mount_volume+0xcc>
c0002623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002627:	0f af dd             	imul   ebx,ebp
c000262a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000262e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0002632:	c1 e9 04             	shr    ecx,0x4
c0002635:	01 d9                	add    ecx,ebx
c0002637:	01 c1                	add    ecx,eax
c0002639:	39 ca                	cmp    edx,ecx
c000263b:	0f 82 35 ff ff ff    	jb     c0002576 <mount_volume+0xcc>
c0002641:	89 d3                	mov    ebx,edx
c0002643:	31 d2                	xor    edx,edx
c0002645:	29 cb                	sub    ebx,ecx
c0002647:	89 d8                	mov    eax,ebx
c0002649:	f7 f7                	div    edi
c000264b:	39 fb                	cmp    ebx,edi
c000264d:	0f 82 23 ff ff ff    	jb     c0002576 <mount_volume+0xcc>
c0002653:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002658:	0f 87 18 ff ff ff    	ja     c0002576 <mount_volume+0xcc>
c000265e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002663:	0f 86 25 01 00 00    	jbe    c000278e <mount_volume+0x2e4>
c0002669:	bb 03 00 00 00       	mov    ebx,0x3
c000266e:	8d 78 02             	lea    edi,[eax+0x2]
c0002671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002675:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002679:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000267c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000267f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002683:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002687:	83 fb 03             	cmp    ebx,0x3
c000268a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000268d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002690:	75 27                	jne    c00026b9 <mount_volume+0x20f>
c0002692:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002695:	e8 9f f7 ff ff       	call   c0001e39 <ld_word>
c000269a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000269e:	0f b7 c0             	movzx  eax,ax
c00026a1:	09 c1                	or     ecx,eax
c00026a3:	0f 85 cd fe ff ff    	jne    c0002576 <mount_volume+0xcc>
c00026a9:	8d 46 60             	lea    eax,[esi+0x60]
c00026ac:	e8 95 f7 ff ff       	call   c0001e46 <ld_dword>
c00026b1:	c1 e7 02             	shl    edi,0x2
c00026b4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026b7:	eb 25                	jmp    c00026de <mount_volume+0x234>
c00026b9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00026be:	0f 84 b2 fe ff ff    	je     c0002576 <mount_volume+0xcc>
c00026c4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026c8:	8d 14 7f             	lea    edx,[edi+edi*2]
c00026cb:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00026ce:	83 e7 01             	and    edi,0x1
c00026d1:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026d4:	d1 ea                	shr    edx,1
c00026d6:	01 d7                	add    edi,edx
c00026d8:	83 fb 02             	cmp    ebx,0x2
c00026db:	0f 44 f9             	cmove  edi,ecx
c00026de:	81 c7 ff 01 00 00    	add    edi,0x1ff
c00026e4:	c1 ef 09             	shr    edi,0x9
c00026e7:	39 ef                	cmp    edi,ebp
c00026e9:	0f 87 87 fe ff ff    	ja     c0002576 <mount_volume+0xcc>
c00026ef:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026f6:	83 fb 03             	cmp    ebx,0x3
c00026f9:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002700:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002704:	75 6e                	jne    c0002774 <mount_volume+0x2ca>
c0002706:	8d 46 64             	lea    eax,[esi+0x64]
c0002709:	e8 2b f7 ff ff       	call   c0001e39 <ld_word>
c000270e:	66 48                	dec    ax
c0002710:	75 62                	jne    c0002774 <mount_volume+0x2ca>
c0002712:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002716:	89 f0                	mov    eax,esi
c0002718:	42                   	inc    edx
c0002719:	e8 2f fc ff ff       	call   c000234d <move_window>
c000271e:	85 c0                	test   eax,eax
c0002720:	75 52                	jne    c0002774 <mount_volume+0x2ca>
c0002722:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002726:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000272c:	e8 08 f7 ff ff       	call   c0001e39 <ld_word>
c0002731:	66 3d 55 aa          	cmp    ax,0xaa55
c0002735:	75 3d                	jne    c0002774 <mount_volume+0x2ca>
c0002737:	8d 46 34             	lea    eax,[esi+0x34]
c000273a:	e8 07 f7 ff ff       	call   c0001e46 <ld_dword>
c000273f:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002744:	75 2e                	jne    c0002774 <mount_volume+0x2ca>
c0002746:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000274c:	e8 f5 f6 ff ff       	call   c0001e46 <ld_dword>
c0002751:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002756:	75 1c                	jne    c0002774 <mount_volume+0x2ca>
c0002758:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000275e:	e8 e3 f6 ff ff       	call   c0001e46 <ld_dword>
c0002763:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002766:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000276c:	e8 d5 f6 ff ff       	call   c0001e46 <ld_dword>
c0002771:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002774:	88 1e                	mov    BYTE PTR [esi],bl
c0002776:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000277c:	31 ff                	xor    edi,edi
c000277e:	40                   	inc    eax
c000277f:	0f b7 c0             	movzx  eax,ax
c0002782:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002788:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000278c:	eb 0f                	jmp    c000279d <mount_volume+0x2f3>
c000278e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002793:	19 db                	sbb    ebx,ebx
c0002795:	83 c3 02             	add    ebx,0x2
c0002798:	e9 d1 fe ff ff       	jmp    c000266e <mount_volume+0x1c4>
c000279d:	83 c4 2c             	add    esp,0x2c
c00027a0:	89 f8                	mov    eax,edi
c00027a2:	5b                   	pop    ebx
c00027a3:	5e                   	pop    esi
c00027a4:	5f                   	pop    edi
c00027a5:	5d                   	pop    ebp
c00027a6:	c3                   	ret    

c00027a7 <put_fat>:
c00027a7:	55                   	push   ebp
c00027a8:	bd 02 00 00 00       	mov    ebp,0x2
c00027ad:	57                   	push   edi
c00027ae:	56                   	push   esi
c00027af:	53                   	push   ebx
c00027b0:	83 ec 1c             	sub    esp,0x1c
c00027b3:	83 fa 01             	cmp    edx,0x1
c00027b6:	0f 86 35 01 00 00    	jbe    c00028f1 <put_fat+0x14a>
c00027bc:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027bf:	0f 86 2c 01 00 00    	jbe    c00028f1 <put_fat+0x14a>
c00027c5:	89 c7                	mov    edi,eax
c00027c7:	8a 00                	mov    al,BYTE PTR [eax]
c00027c9:	89 cb                	mov    ebx,ecx
c00027cb:	89 d6                	mov    esi,edx
c00027cd:	3c 02                	cmp    al,0x2
c00027cf:	0f 84 b0 00 00 00    	je     c0002885 <put_fat+0xde>
c00027d5:	3c 03                	cmp    al,0x3
c00027d7:	0f 84 d5 00 00 00    	je     c00028b2 <put_fat+0x10b>
c00027dd:	fe c8                	dec    al
c00027df:	0f 85 0c 01 00 00    	jne    c00028f1 <put_fat+0x14a>
c00027e5:	89 d1                	mov    ecx,edx
c00027e7:	89 f8                	mov    eax,edi
c00027e9:	d1 e9                	shr    ecx,1
c00027eb:	01 d1                	add    ecx,edx
c00027ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00027f1:	89 ca                	mov    edx,ecx
c00027f3:	c1 ea 09             	shr    edx,0x9
c00027f6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00027f9:	e8 4f fb ff ff       	call   c000234d <move_window>
c00027fe:	85 c0                	test   eax,eax
c0002800:	89 c5                	mov    ebp,eax
c0002802:	0f 85 e9 00 00 00    	jne    c00028f1 <put_fat+0x14a>
c0002808:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000280c:	8d 47 34             	lea    eax,[edi+0x34]
c000280f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002813:	8d 41 01             	lea    eax,[ecx+0x1]
c0002816:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000281c:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c0002820:	83 e6 01             	and    esi,0x1
c0002823:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002827:	88 d8                	mov    al,bl
c0002829:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000282d:	74 0b                	je     c000283a <put_fat+0x93>
c000282f:	8a 01                	mov    al,BYTE PTR [ecx]
c0002831:	89 da                	mov    edx,ebx
c0002833:	c1 e2 04             	shl    edx,0x4
c0002836:	24 0f                	and    al,0xf
c0002838:	08 d0                	or     al,dl
c000283a:	88 01                	mov    BYTE PTR [ecx],al
c000283c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002840:	89 f8                	mov    eax,edi
c0002842:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002846:	c1 ea 09             	shr    edx,0x9
c0002849:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000284c:	e8 fc fa ff ff       	call   c000234d <move_window>
c0002851:	85 c0                	test   eax,eax
c0002853:	89 c5                	mov    ebp,eax
c0002855:	0f 85 96 00 00 00    	jne    c00028f1 <put_fat+0x14a>
c000285b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000285f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002865:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0002869:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000286e:	74 05                	je     c0002875 <put_fat+0xce>
c0002870:	c1 eb 04             	shr    ebx,0x4
c0002873:	eb 0c                	jmp    c0002881 <put_fat+0xda>
c0002875:	8a 06                	mov    al,BYTE PTR [esi]
c0002877:	c1 eb 08             	shr    ebx,0x8
c000287a:	80 e3 0f             	and    bl,0xf
c000287d:	24 f0                	and    al,0xf0
c000287f:	08 c3                	or     bl,al
c0002881:	88 1e                	mov    BYTE PTR [esi],bl
c0002883:	eb 27                	jmp    c00028ac <put_fat+0x105>
c0002885:	c1 ea 08             	shr    edx,0x8
c0002888:	89 f8                	mov    eax,edi
c000288a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000288d:	e8 bb fa ff ff       	call   c000234d <move_window>
c0002892:	85 c0                	test   eax,eax
c0002894:	89 c5                	mov    ebp,eax
c0002896:	75 59                	jne    c00028f1 <put_fat+0x14a>
c0002898:	01 f6                	add    esi,esi
c000289a:	0f b7 d3             	movzx  edx,bx
c000289d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00028a3:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00028a7:	e8 b2 f5 ff ff       	call   c0001e5e <st_word>
c00028ac:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028b0:	eb 3f                	jmp    c00028f1 <put_fat+0x14a>
c00028b2:	c1 ea 07             	shr    edx,0x7
c00028b5:	89 f8                	mov    eax,edi
c00028b7:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028ba:	e8 8e fa ff ff       	call   c000234d <move_window>
c00028bf:	85 c0                	test   eax,eax
c00028c1:	89 c5                	mov    ebp,eax
c00028c3:	75 2c                	jne    c00028f1 <put_fat+0x14a>
c00028c5:	c1 e6 02             	shl    esi,0x2
c00028c8:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00028ce:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00028d4:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c00028d8:	89 f0                	mov    eax,esi
c00028da:	e8 67 f5 ff ff       	call   c0001e46 <ld_dword>
c00028df:	25 00 00 00 f0       	and    eax,0xf0000000
c00028e4:	09 d8                	or     eax,ebx
c00028e6:	89 c2                	mov    edx,eax
c00028e8:	89 f0                	mov    eax,esi
c00028ea:	e8 73 f5 ff ff       	call   c0001e62 <st_dword>
c00028ef:	eb bb                	jmp    c00028ac <put_fat+0x105>
c00028f1:	83 c4 1c             	add    esp,0x1c
c00028f4:	89 e8                	mov    eax,ebp
c00028f6:	5b                   	pop    ebx
c00028f7:	5e                   	pop    esi
c00028f8:	5f                   	pop    edi
c00028f9:	5d                   	pop    ebp
c00028fa:	c3                   	ret    

c00028fb <dir_clear>:
c00028fb:	55                   	push   ebp
c00028fc:	57                   	push   edi
c00028fd:	56                   	push   esi
c00028fe:	89 c6                	mov    esi,eax
c0002900:	53                   	push   ebx
c0002901:	83 ec 1c             	sub    esp,0x1c
c0002904:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002908:	e8 dd f9 ff ff       	call   c00022ea <sync_window>
c000290d:	85 c0                	test   eax,eax
c000290f:	0f 85 c1 00 00 00    	jne    c00029d6 <dir_clear+0xdb>
c0002915:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002919:	89 f0                	mov    eax,esi
c000291b:	e8 58 f7 ff ff       	call   c0002078 <clst2sect>
c0002920:	31 d2                	xor    edx,edx
c0002922:	b9 00 02 00 00       	mov    ecx,0x200
c0002927:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000292a:	89 c5                	mov    ebp,eax
c000292c:	8d 46 34             	lea    eax,[esi+0x34]
c000292f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002933:	e8 42 f5 ff ff       	call   c0001e7a <mem_set>
c0002938:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000293c:	b8 00 80 00 00       	mov    eax,0x8000
c0002941:	c1 e3 09             	shl    ebx,0x9
c0002944:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000294a:	0f 47 d8             	cmova  ebx,eax
c000294d:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002953:	76 16                	jbe    c000296b <dir_clear+0x70>
c0002955:	83 ec 0c             	sub    esp,0xc
c0002958:	53                   	push   ebx
c0002959:	e8 12 32 00 00       	call   c0005b70 <ff_memalloc>
c000295e:	83 c4 10             	add    esp,0x10
c0002961:	85 c0                	test   eax,eax
c0002963:	89 c7                	mov    edi,eax
c0002965:	75 76                	jne    c00029dd <dir_clear+0xe2>
c0002967:	d1 eb                	shr    ebx,1
c0002969:	eb e2                	jmp    c000294d <dir_clear+0x52>
c000296b:	31 db                	xor    ebx,ebx
c000296d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002971:	39 d8                	cmp    eax,ebx
c0002973:	76 53                	jbe    c00029c8 <dir_clear+0xcd>
c0002975:	6a 01                	push   0x1
c0002977:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000297a:	50                   	push   eax
c000297b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002983:	50                   	push   eax
c0002984:	e8 7b f4 ff ff       	call   c0001e04 <disk_write>
c0002989:	83 c4 10             	add    esp,0x10
c000298c:	85 c0                	test   eax,eax
c000298e:	75 38                	jne    c00029c8 <dir_clear+0xcd>
c0002990:	43                   	inc    ebx
c0002991:	eb da                	jmp    c000296d <dir_clear+0x72>
c0002993:	52                   	push   edx
c0002994:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002997:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000299b:	50                   	push   eax
c000299c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a0:	57                   	push   edi
c00029a1:	50                   	push   eax
c00029a2:	e8 5d f4 ff ff       	call   c0001e04 <disk_write>
c00029a7:	83 c4 10             	add    esp,0x10
c00029aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029ae:	85 c0                	test   eax,eax
c00029b0:	75 0a                	jne    c00029bc <dir_clear+0xc1>
c00029b2:	01 d3                	add    ebx,edx
c00029b4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029b8:	39 d8                	cmp    eax,ebx
c00029ba:	77 d7                	ja     c0002993 <dir_clear+0x98>
c00029bc:	83 ec 0c             	sub    esp,0xc
c00029bf:	57                   	push   edi
c00029c0:	e8 bf 31 00 00       	call   c0005b84 <ff_memfree>
c00029c5:	83 c4 10             	add    esp,0x10
c00029c8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029cc:	39 d8                	cmp    eax,ebx
c00029ce:	0f 95 c0             	setne  al
c00029d1:	0f b6 c0             	movzx  eax,al
c00029d4:	eb 19                	jmp    c00029ef <dir_clear+0xf4>
c00029d6:	b8 01 00 00 00       	mov    eax,0x1
c00029db:	eb 12                	jmp    c00029ef <dir_clear+0xf4>
c00029dd:	89 d9                	mov    ecx,ebx
c00029df:	31 d2                	xor    edx,edx
c00029e1:	e8 94 f4 ff ff       	call   c0001e7a <mem_set>
c00029e6:	89 da                	mov    edx,ebx
c00029e8:	31 db                	xor    ebx,ebx
c00029ea:	c1 ea 09             	shr    edx,0x9
c00029ed:	eb c5                	jmp    c00029b4 <dir_clear+0xb9>
c00029ef:	83 c4 1c             	add    esp,0x1c
c00029f2:	5b                   	pop    ebx
c00029f3:	5e                   	pop    esi
c00029f4:	5f                   	pop    edi
c00029f5:	5d                   	pop    ebp
c00029f6:	c3                   	ret    

c00029f7 <create_name>:
c00029f7:	55                   	push   ebp
c00029f8:	89 d1                	mov    ecx,edx
c00029fa:	57                   	push   edi
c00029fb:	89 c7                	mov    edi,eax
c00029fd:	56                   	push   esi
c00029fe:	31 f6                	xor    esi,esi
c0002a00:	53                   	push   ebx
c0002a01:	83 ec 3c             	sub    esp,0x3c
c0002a04:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a0a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a17:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a1b:	e8 9e f4 ff ff       	call   c0001ebe <tchar2uni>
c0002a20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a24:	83 f8 ff             	cmp    eax,0xffffffff
c0002a27:	75 0a                	jne    c0002a33 <create_name+0x3c>
c0002a29:	b8 06 00 00 00       	mov    eax,0x6
c0002a2e:	e9 8c 02 00 00       	jmp    c0002cbf <create_name+0x2c8>
c0002a33:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a38:	76 0e                	jbe    c0002a48 <create_name+0x51>
c0002a3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002a3e:	89 c2                	mov    edx,eax
c0002a40:	c1 ea 10             	shr    edx,0x10
c0002a43:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002a47:	46                   	inc    esi
c0002a48:	0f b7 e8             	movzx  ebp,ax
c0002a4b:	83 fd 1f             	cmp    ebp,0x1f
c0002a4e:	76 3a                	jbe    c0002a8a <create_name+0x93>
c0002a50:	83 fd 2f             	cmp    ebp,0x2f
c0002a53:	74 35                	je     c0002a8a <create_name+0x93>
c0002a55:	83 fd 5c             	cmp    ebp,0x5c
c0002a58:	74 3e                	je     c0002a98 <create_name+0xa1>
c0002a5a:	83 fd 7f             	cmp    ebp,0x7f
c0002a5d:	77 18                	ja     c0002a77 <create_name+0x80>
c0002a5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a63:	89 ea                	mov    edx,ebp
c0002a65:	b8 62 f0 01 c0       	mov    eax,0xc001f062
c0002a6a:	e8 38 f4 ff ff       	call   c0001ea7 <chk_chr>
c0002a6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a73:	85 c0                	test   eax,eax
c0002a75:	75 b2                	jne    c0002a29 <create_name+0x32>
c0002a77:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a7d:	77 aa                	ja     c0002a29 <create_name+0x32>
c0002a7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002a83:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002a87:	46                   	inc    esi
c0002a88:	eb 89                	jmp    c0002a13 <create_name+0x1c>
c0002a8a:	83 fd 1f             	cmp    ebp,0x1f
c0002a8d:	b3 04                	mov    bl,0x4
c0002a8f:	76 19                	jbe    c0002aaa <create_name+0xb3>
c0002a91:	eb 05                	jmp    c0002a98 <create_name+0xa1>
c0002a93:	40                   	inc    eax
c0002a94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002a9e:	80 fa 2f             	cmp    dl,0x2f
c0002aa1:	74 f0                	je     c0002a93 <create_name+0x9c>
c0002aa3:	80 fa 5c             	cmp    dl,0x5c
c0002aa6:	74 eb                	je     c0002a93 <create_name+0x9c>
c0002aa8:	31 db                	xor    ebx,ebx
c0002aaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002aae:	89 01                	mov    DWORD PTR [ecx],eax
c0002ab0:	85 f6                	test   esi,esi
c0002ab2:	74 16                	je     c0002aca <create_name+0xd3>
c0002ab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ab8:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002abd:	83 f8 20             	cmp    eax,0x20
c0002ac0:	74 05                	je     c0002ac7 <create_name+0xd0>
c0002ac2:	83 f8 2e             	cmp    eax,0x2e
c0002ac5:	75 03                	jne    c0002aca <create_name+0xd3>
c0002ac7:	4e                   	dec    esi
c0002ac8:	eb e6                	jmp    c0002ab0 <create_name+0xb9>
c0002aca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ace:	85 f6                	test   esi,esi
c0002ad0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002ad6:	0f 84 4d ff ff ff    	je     c0002a29 <create_name+0x32>
c0002adc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002ae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002ae8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002aec:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002af0:	42                   	inc    edx
c0002af1:	83 f8 20             	cmp    eax,0x20
c0002af4:	75 06                	jne    c0002afc <create_name+0x105>
c0002af6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002afa:	eb e8                	jmp    c0002ae4 <create_name+0xed>
c0002afc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b01:	75 05                	jne    c0002b08 <create_name+0x111>
c0002b03:	83 f8 2e             	cmp    eax,0x2e
c0002b06:	75 08                	jne    c0002b10 <create_name+0x119>
c0002b08:	80 cb 03             	or     bl,0x3
c0002b0b:	eb 03                	jmp    c0002b10 <create_name+0x119>
c0002b0d:	4e                   	dec    esi
c0002b0e:	74 0c                	je     c0002b1c <create_name+0x125>
c0002b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b14:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b1a:	75 f1                	jne    c0002b0d <create_name+0x116>
c0002b1c:	8d 47 20             	lea    eax,[edi+0x20]
c0002b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b24:	ba 20 00 00 00       	mov    edx,0x20
c0002b29:	31 ed                	xor    ebp,ebp
c0002b2b:	e8 4a f3 ff ff       	call   c0001e7a <mem_set>
c0002b30:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002b38:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002b41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b45:	40                   	inc    eax
c0002b46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b4e:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002b52:	85 c9                	test   ecx,ecx
c0002b54:	0f 84 15 01 00 00    	je     c0002c6f <create_name+0x278>
c0002b5a:	83 f9 20             	cmp    ecx,0x20
c0002b5d:	74 0b                	je     c0002b6a <create_name+0x173>
c0002b5f:	83 f9 2e             	cmp    ecx,0x2e
c0002b62:	75 13                	jne    c0002b77 <create_name+0x180>
c0002b64:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b68:	74 0d                	je     c0002b77 <create_name+0x180>
c0002b6a:	80 cb 03             	or     bl,0x3
c0002b6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002b71:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b75:	eb c6                	jmp    c0002b3d <create_name+0x146>
c0002b77:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002b7b:	73 06                	jae    c0002b83 <create_name+0x18c>
c0002b7d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b81:	75 3a                	jne    c0002bbd <create_name+0x1c6>
c0002b83:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002b88:	75 08                	jne    c0002b92 <create_name+0x19b>
c0002b8a:	80 cb 03             	or     bl,0x3
c0002b8d:	e9 dd 00 00 00       	jmp    c0002c6f <create_name+0x278>
c0002b92:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b96:	74 0d                	je     c0002ba5 <create_name+0x1ae>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002b9f:	0f 87 ca 00 00 00    	ja     c0002c6f <create_name+0x278>
c0002ba5:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002baa:	bd 08 00 00 00       	mov    ebp,0x8
c0002baf:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002bb3:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002bbb:	eb b0                	jmp    c0002b6d <create_name+0x176>
c0002bbd:	83 f9 7f             	cmp    ecx,0x7f
c0002bc0:	76 5d                	jbe    c0002c1f <create_name+0x228>
c0002bc2:	88 da                	mov    dl,bl
c0002bc4:	80 ca 02             	or     dl,0x2
c0002bc7:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002bcb:	50                   	push   eax
c0002bcc:	50                   	push   eax
c0002bcd:	68 b5 01 00 00       	push   0x1b5
c0002bd2:	51                   	push   ecx
c0002bd3:	e8 c0 2f 00 00       	call   c0005b98 <ff_uni2oem>
c0002bd8:	83 c4 10             	add    esp,0x10
c0002bdb:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002bdf:	0f b7 c8             	movzx  ecx,ax
c0002be2:	f6 c1 80             	test   cl,0x80
c0002be5:	74 0c                	je     c0002bf3 <create_name+0x1fc>
c0002be7:	83 e1 7f             	and    ecx,0x7f
c0002bea:	0f b6 89 20 f1 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe0ee0]
c0002bf1:	eb 26                	jmp    c0002c19 <create_name+0x222>
c0002bf3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002bf9:	76 1e                	jbe    c0002c19 <create_name+0x222>
c0002bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002bff:	48                   	dec    eax
c0002c00:	39 e8                	cmp    eax,ebp
c0002c02:	77 0c                	ja     c0002c10 <create_name+0x219>
c0002c04:	80 cb 03             	or     bl,0x3
c0002c07:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	e9 5d ff ff ff       	jmp    c0002b6d <create_name+0x176>
c0002c10:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002c14:	88 d3                	mov    bl,dl
c0002c16:	45                   	inc    ebp
c0002c17:	eb 4c                	jmp    c0002c65 <create_name+0x26e>
c0002c19:	85 c9                	test   ecx,ecx
c0002c1b:	88 d3                	mov    bl,dl
c0002c1d:	74 18                	je     c0002c37 <create_name+0x240>
c0002c1f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002c23:	89 ca                	mov    edx,ecx
c0002c25:	b8 6b f0 01 c0       	mov    eax,0xc001f06b
c0002c2a:	e8 78 f2 ff ff       	call   c0001ea7 <chk_chr>
c0002c2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002c33:	85 c0                	test   eax,eax
c0002c35:	74 0a                	je     c0002c41 <create_name+0x24a>
c0002c37:	80 cb 03             	or     bl,0x3
c0002c3a:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002c3f:	eb 24                	jmp    c0002c65 <create_name+0x26e>
c0002c41:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002c44:	66 83 f8 19          	cmp    ax,0x19
c0002c48:	77 07                	ja     c0002c51 <create_name+0x25a>
c0002c4a:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002c4f:	eb 14                	jmp    c0002c65 <create_name+0x26e>
c0002c51:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002c54:	66 83 f8 19          	cmp    ax,0x19
c0002c58:	77 0b                	ja     c0002c65 <create_name+0x26e>
c0002c5a:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002c5f:	83 e9 20             	sub    ecx,0x20
c0002c62:	0f b7 c9             	movzx  ecx,cx
c0002c65:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002c69:	45                   	inc    ebp
c0002c6a:	e9 fe fe ff ff       	jmp    c0002b6d <create_name+0x176>
c0002c6f:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002c73:	75 04                	jne    c0002c79 <create_name+0x282>
c0002c75:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002c79:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002c7e:	75 05                	jne    c0002c85 <create_name+0x28e>
c0002c80:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002c89:	24 0c                	and    al,0xc
c0002c8b:	3c 0c                	cmp    al,0xc
c0002c8d:	74 0a                	je     c0002c99 <create_name+0x2a2>
c0002c8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002c93:	24 03                	and    al,0x3
c0002c95:	3c 03                	cmp    al,0x3
c0002c97:	75 05                	jne    c0002c9e <create_name+0x2a7>
c0002c99:	80 cb 02             	or     bl,0x2
c0002c9c:	eb 1c                	jmp    c0002cba <create_name+0x2c3>
c0002c9e:	88 d8                	mov    al,bl
c0002ca0:	24 02                	and    al,0x2
c0002ca2:	75 16                	jne    c0002cba <create_name+0x2c3>
c0002ca4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002ca8:	24 01                	and    al,0x1
c0002caa:	74 03                	je     c0002caf <create_name+0x2b8>
c0002cac:	80 cb 10             	or     bl,0x10
c0002caf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002cb3:	24 04                	and    al,0x4
c0002cb5:	74 03                	je     c0002cba <create_name+0x2c3>
c0002cb7:	80 cb 08             	or     bl,0x8
c0002cba:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002cbd:	31 c0                	xor    eax,eax
c0002cbf:	83 c4 3c             	add    esp,0x3c
c0002cc2:	5b                   	pop    ebx
c0002cc3:	5e                   	pop    esi
c0002cc4:	5f                   	pop    edi
c0002cc5:	5d                   	pop    ebp
c0002cc6:	c3                   	ret    

c0002cc7 <cmp_lfn>:
c0002cc7:	55                   	push   ebp
c0002cc8:	57                   	push   edi
c0002cc9:	89 d7                	mov    edi,edx
c0002ccb:	56                   	push   esi
c0002ccc:	53                   	push   ebx
c0002ccd:	83 ec 1c             	sub    esp,0x1c
c0002cd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002cd4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cd7:	e8 5d f1 ff ff       	call   c0001e39 <ld_word>
c0002cdc:	66 85 c0             	test   ax,ax
c0002cdf:	74 07                	je     c0002ce8 <cmp_lfn+0x21>
c0002ce1:	31 c0                	xor    eax,eax
c0002ce3:	e9 a0 00 00 00       	jmp    c0002d88 <cmp_lfn+0xc1>
c0002ce8:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002ceb:	bd 01 00 00 00       	mov    ebp,0x1
c0002cf0:	31 c9                	xor    ecx,ecx
c0002cf2:	83 e3 3f             	and    ebx,0x3f
c0002cf5:	4b                   	dec    ebx
c0002cf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002cf9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cfd:	0f b6 81 a0 f1 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0e60]
c0002d04:	01 f8                	add    eax,edi
c0002d06:	e8 2e f1 ff ff       	call   c0001e39 <ld_word>
c0002d0b:	85 ed                	test   ebp,ebp
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	0f b7 f0             	movzx  esi,ax
c0002d14:	74 41                	je     c0002d57 <cmp_lfn+0x90>
c0002d16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d1a:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d20:	77 bf                	ja     c0002ce1 <cmp_lfn+0x1a>
c0002d22:	83 ec 0c             	sub    esp,0xc
c0002d25:	56                   	push   esi
c0002d26:	e8 81 2f 00 00       	call   c0005cac <ff_wtoupper>
c0002d2b:	89 c5                	mov    ebp,eax
c0002d2d:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d38:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d3f:	e8 68 2f 00 00       	call   c0005cac <ff_wtoupper>
c0002d44:	83 c4 10             	add    esp,0x10
c0002d47:	39 c5                	cmp    ebp,eax
c0002d49:	75 96                	jne    c0002ce1 <cmp_lfn+0x1a>
c0002d4b:	89 f5                	mov    ebp,esi
c0002d4d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d55:	eb 08                	jmp    c0002d5f <cmp_lfn+0x98>
c0002d57:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d5d:	75 82                	jne    c0002ce1 <cmp_lfn+0x1a>
c0002d5f:	41                   	inc    ecx
c0002d60:	83 f9 0d             	cmp    ecx,0xd
c0002d63:	75 94                	jne    c0002cf9 <cmp_lfn+0x32>
c0002d65:	8a 07                	mov    al,BYTE PTR [edi]
c0002d67:	c0 e8 06             	shr    al,0x6
c0002d6a:	24 01                	and    al,0x1
c0002d6c:	74 15                	je     c0002d83 <cmp_lfn+0xbc>
c0002d6e:	85 ed                	test   ebp,ebp
c0002d70:	74 11                	je     c0002d83 <cmp_lfn+0xbc>
c0002d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d76:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d7b:	0f 94 c0             	sete   al
c0002d7e:	0f b6 c0             	movzx  eax,al
c0002d81:	eb 05                	jmp    c0002d88 <cmp_lfn+0xc1>
c0002d83:	b8 01 00 00 00       	mov    eax,0x1
c0002d88:	83 c4 1c             	add    esp,0x1c
c0002d8b:	5b                   	pop    ebx
c0002d8c:	5e                   	pop    esi
c0002d8d:	5f                   	pop    edi
c0002d8e:	5d                   	pop    ebp
c0002d8f:	c3                   	ret    

c0002d90 <sync_fs>:
c0002d90:	56                   	push   esi
c0002d91:	53                   	push   ebx
c0002d92:	53                   	push   ebx
c0002d93:	89 c3                	mov    ebx,eax
c0002d95:	e8 50 f5 ff ff       	call   c00022ea <sync_window>
c0002d9a:	85 c0                	test   eax,eax
c0002d9c:	0f 85 9a 00 00 00    	jne    c0002e3c <sync_fs+0xac>
c0002da2:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002da5:	75 7b                	jne    c0002e22 <sync_fs+0x92>
c0002da7:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dab:	75 75                	jne    c0002e22 <sync_fs+0x92>
c0002dad:	8d 73 34             	lea    esi,[ebx+0x34]
c0002db0:	b9 00 02 00 00       	mov    ecx,0x200
c0002db5:	31 d2                	xor    edx,edx
c0002db7:	89 f0                	mov    eax,esi
c0002db9:	e8 bc f0 ff ff       	call   c0001e7a <mem_set>
c0002dbe:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002dc4:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dc9:	e8 90 f0 ff ff       	call   c0001e5e <st_word>
c0002dce:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dd3:	89 f0                	mov    eax,esi
c0002dd5:	e8 88 f0 ff ff       	call   c0001e62 <st_dword>
c0002dda:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002de0:	ba 72 72 41 61       	mov    edx,0x61417272
c0002de5:	e8 78 f0 ff ff       	call   c0001e62 <st_dword>
c0002dea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ded:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002df3:	e8 6a f0 ff ff       	call   c0001e62 <st_dword>
c0002df8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002dfb:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e01:	e8 5c f0 ff ff       	call   c0001e62 <st_dword>
c0002e06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e09:	6a 01                	push   0x1
c0002e0b:	40                   	inc    eax
c0002e0c:	50                   	push   eax
c0002e0d:	56                   	push   esi
c0002e0e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e11:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e15:	50                   	push   eax
c0002e16:	e8 e9 ef ff ff       	call   c0001e04 <disk_write>
c0002e1b:	83 c4 10             	add    esp,0x10
c0002e1e:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e22:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e26:	51                   	push   ecx
c0002e27:	6a 00                	push   0x0
c0002e29:	6a 00                	push   0x0
c0002e2b:	50                   	push   eax
c0002e2c:	e8 e9 ef ff ff       	call   c0001e1a <disk_ioctl>
c0002e31:	83 c4 10             	add    esp,0x10
c0002e34:	85 c0                	test   eax,eax
c0002e36:	0f 95 c0             	setne  al
c0002e39:	0f b6 c0             	movzx  eax,al
c0002e3c:	5a                   	pop    edx
c0002e3d:	5b                   	pop    ebx
c0002e3e:	5e                   	pop    esi
c0002e3f:	c3                   	ret    

c0002e40 <create_partition>:
c0002e40:	55                   	push   ebp
c0002e41:	0f b6 c0             	movzx  eax,al
c0002e44:	57                   	push   edi
c0002e45:	56                   	push   esi
c0002e46:	53                   	push   ebx
c0002e47:	83 ec 40             	sub    esp,0x40
c0002e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e4e:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002e56:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e5a:	50                   	push   eax
c0002e5b:	6a 01                	push   0x1
c0002e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002e61:	e8 b4 ef ff ff       	call   c0001e1a <disk_ioctl>
c0002e66:	83 c4 10             	add    esp,0x10
c0002e69:	85 c0                	test   eax,eax
c0002e6b:	0f 85 66 01 00 00    	jne    c0002fd7 <create_partition+0x197>
c0002e71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e75:	b9 05 00 00 00       	mov    ecx,0x5
c0002e7a:	b3 08                	mov    bl,0x8
c0002e7c:	31 d2                	xor    edx,edx
c0002e7e:	0f b6 f3             	movzx  esi,bl
c0002e81:	89 e8                	mov    eax,ebp
c0002e83:	f7 f6                	div    esi
c0002e85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e8a:	76 07                	jbe    c0002e93 <create_partition+0x53>
c0002e8c:	00 db                	add    bl,bl
c0002e8e:	49                   	dec    ecx
c0002e8f:	75 eb                	jne    c0002e7c <create_partition+0x3c>
c0002e91:	b3 ff                	mov    bl,0xff
c0002e93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e97:	b9 00 02 00 00       	mov    ecx,0x200
c0002e9c:	31 d2                	xor    edx,edx
c0002e9e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002ea3:	e8 d2 ef ff ff       	call   c0001e7a <mem_set>
c0002ea8:	b9 64 00 00 00       	mov    ecx,0x64
c0002ead:	89 e8                	mov    eax,ebp
c0002eaf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002eb7:	31 d2                	xor    edx,edx
c0002eb9:	f7 f1                	div    ecx
c0002ebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002ebf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ec3:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002ec9:	0f b6 c3             	movzx  eax,bl
c0002ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ed0:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002ed5:	0f 96 c2             	setbe  dl
c0002ed8:	85 ff                	test   edi,edi
c0002eda:	0f 95 c0             	setne  al
c0002edd:	84 c2                	test   dl,al
c0002edf:	0f 84 c1 00 00 00    	je     c0002fa6 <create_partition+0x166>
c0002ee5:	39 ef                	cmp    edi,ebp
c0002ee7:	0f 83 b9 00 00 00    	jae    c0002fa6 <create_partition+0x166>
c0002eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ef1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002ef5:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002ef8:	83 f9 64             	cmp    ecx,0x64
c0002efb:	77 0b                	ja     c0002f08 <create_partition+0xc8>
c0002efd:	74 07                	je     c0002f06 <create_partition+0xc6>
c0002eff:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f04:	eb 02                	jmp    c0002f08 <create_partition+0xc8>
c0002f06:	89 e9                	mov    ecx,ebp
c0002f08:	89 fa                	mov    edx,edi
c0002f0a:	31 c0                	xor    eax,eax
c0002f0c:	01 ca                	add    edx,ecx
c0002f0e:	73 05                	jae    c0002f15 <create_partition+0xd5>
c0002f10:	b8 01 00 00 00       	mov    eax,0x1
c0002f15:	39 ea                	cmp    edx,ebp
c0002f17:	77 04                	ja     c0002f1d <create_partition+0xdd>
c0002f19:	85 c0                	test   eax,eax
c0002f1b:	74 06                	je     c0002f23 <create_partition+0xe3>
c0002f1d:	89 e9                	mov    ecx,ebp
c0002f1f:	29 f9                	sub    ecx,edi
c0002f21:	eb 04                	jmp    c0002f27 <create_partition+0xe7>
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	74 7f                	je     c0002fa6 <create_partition+0x166>
c0002f27:	89 fa                	mov    edx,edi
c0002f29:	89 f0                	mov    eax,esi
c0002f2b:	e8 32 ef ff ff       	call   c0001e62 <st_dword>
c0002f30:	8d 46 04             	lea    eax,[esi+0x4]
c0002f33:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002f38:	83 c6 10             	add    esi,0x10
c0002f3b:	89 ca                	mov    edx,ecx
c0002f3d:	e8 20 ef ff ff       	call   c0001e62 <st_dword>
c0002f42:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002f46:	31 d2                	xor    edx,edx
c0002f48:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f4c:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002f4f:	89 f8                	mov    eax,edi
c0002f51:	f7 f3                	div    ebx
c0002f53:	01 cf                	add    edi,ecx
c0002f55:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002f59:	31 d2                	xor    edx,edx
c0002f5b:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002f5f:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002f63:	fe c3                	inc    bl
c0002f65:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002f68:	89 c2                	mov    edx,eax
c0002f6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002f6d:	c1 ea 02             	shr    edx,0x2
c0002f70:	8d 47 ff             	lea    eax,[edi-0x1]
c0002f73:	80 e2 c0             	and    dl,0xc0
c0002f76:	08 da                	or     dl,bl
c0002f78:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002f7d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0002f80:	31 d2                	xor    edx,edx
c0002f82:	f7 f3                	div    ebx
c0002f84:	89 d1                	mov    ecx,edx
c0002f86:	31 d2                	xor    edx,edx
c0002f88:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002f8c:	fe c1                	inc    cl
c0002f8e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0002f91:	89 c3                	mov    ebx,eax
c0002f93:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0002f96:	c1 eb 02             	shr    ebx,0x2
c0002f99:	80 e3 c0             	and    bl,0xc0
c0002f9c:	08 d9                	or     cl,bl
c0002f9e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0002fa1:	e9 2a ff ff ff       	jmp    c0002ed0 <create_partition+0x90>
c0002fa6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002faa:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002faf:	05 fe 01 00 00       	add    eax,0x1fe
c0002fb4:	e8 a5 ee ff ff       	call   c0001e5e <st_word>
c0002fb9:	6a 01                	push   0x1
c0002fbb:	6a 00                	push   0x0
c0002fbd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002fc5:	e8 3a ee ff ff       	call   c0001e04 <disk_write>
c0002fca:	83 c4 10             	add    esp,0x10
c0002fcd:	85 c0                	test   eax,eax
c0002fcf:	0f 95 c0             	setne  al
c0002fd2:	0f b6 c0             	movzx  eax,al
c0002fd5:	eb 05                	jmp    c0002fdc <create_partition+0x19c>
c0002fd7:	b8 01 00 00 00       	mov    eax,0x1
c0002fdc:	83 c4 3c             	add    esp,0x3c
c0002fdf:	5b                   	pop    ebx
c0002fe0:	5e                   	pop    esi
c0002fe1:	5f                   	pop    edi
c0002fe2:	5d                   	pop    ebp
c0002fe3:	c3                   	ret    

c0002fe4 <get_fileinfo>:
c0002fe4:	55                   	push   ebp
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fed:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ff1:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ff5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002ff9:	0f 84 bc 01 00 00    	je     c00031bb <get_fileinfo+0x1d7>
c0002fff:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003003:	89 d3                	mov    ebx,edx
c0003005:	89 c6                	mov    esi,eax
c0003007:	74 6c                	je     c0003075 <get_fileinfo+0x91>
c0003009:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003011:	31 ed                	xor    ebp,ebp
c0003013:	31 ff                	xor    edi,edi
c0003015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003019:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000301d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003020:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003024:	85 c0                	test   eax,eax
c0003026:	74 3e                	je     c0003066 <get_fileinfo+0x82>
c0003028:	85 ed                	test   ebp,ebp
c000302a:	75 0d                	jne    c0003039 <get_fileinfo+0x55>
c000302c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0003032:	66 81 fa ff 07       	cmp    dx,0x7ff
c0003037:	76 22                	jbe    c000305b <get_fileinfo+0x77>
c0003039:	89 ea                	mov    edx,ebp
c000303b:	b9 ff 00 00 00       	mov    ecx,0xff
c0003040:	c1 e2 10             	shl    edx,0x10
c0003043:	29 f9                	sub    ecx,edi
c0003045:	09 d0                	or     eax,edx
c0003047:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000304b:	e8 38 ef ff ff       	call   c0001f88 <put_utf>
c0003050:	84 c0                	test   al,al
c0003052:	74 10                	je     c0003064 <get_fileinfo+0x80>
c0003054:	0f b6 c0             	movzx  eax,al
c0003057:	01 c7                	add    edi,eax
c0003059:	31 c0                	xor    eax,eax
c000305b:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003060:	89 c5                	mov    ebp,eax
c0003062:	eb b1                	jmp    c0003015 <get_fileinfo+0x31>
c0003064:	31 ff                	xor    edi,edi
c0003066:	85 ed                	test   ebp,ebp
c0003068:	b8 00 00 00 00       	mov    eax,0x0
c000306d:	0f 45 f8             	cmovne edi,eax
c0003070:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003075:	31 ff                	xor    edi,edi
c0003077:	31 c9                	xor    ecx,ecx
c0003079:	83 f9 0a             	cmp    ecx,0xa
c000307c:	0f 87 a1 00 00 00    	ja     c0003123 <get_fileinfo+0x13f>
c0003082:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003085:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003088:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000308c:	83 fa 20             	cmp    edx,0x20
c000308f:	0f 84 87 00 00 00    	je     c000311c <get_fileinfo+0x138>
c0003095:	83 fa 05             	cmp    edx,0x5
c0003098:	75 05                	jne    c000309f <get_fileinfo+0xbb>
c000309a:	ba e5 00 00 00       	mov    edx,0xe5
c000309f:	83 fd 09             	cmp    ebp,0x9
c00030a2:	75 0b                	jne    c00030af <get_fileinfo+0xcb>
c00030a4:	83 ff 0b             	cmp    edi,0xb
c00030a7:	77 06                	ja     c00030af <get_fileinfo+0xcb>
c00030a9:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030ae:	47                   	inc    edi
c00030af:	89 d0                	mov    eax,edx
c00030b1:	e8 02 ee ff ff       	call   c0001eb8 <dbc_1st>
c00030b6:	85 c0                	test   eax,eax
c00030b8:	74 2e                	je     c00030e8 <get_fileinfo+0x104>
c00030ba:	83 fd 08             	cmp    ebp,0x8
c00030bd:	74 29                	je     c00030e8 <get_fileinfo+0x104>
c00030bf:	83 fd 0b             	cmp    ebp,0xb
c00030c2:	74 24                	je     c00030e8 <get_fileinfo+0x104>
c00030c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030c7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030cb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00030cf:	e8 e7 ed ff ff       	call   c0001ebb <dbc_2nd>
c00030d4:	85 c0                	test   eax,eax
c00030d6:	74 10                	je     c00030e8 <get_fileinfo+0x104>
c00030d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00030dd:	c1 e2 08             	shl    edx,0x8
c00030e0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030e3:	09 d0                	or     eax,edx
c00030e5:	0f b7 d0             	movzx  edx,ax
c00030e8:	50                   	push   eax
c00030e9:	50                   	push   eax
c00030ea:	68 b5 01 00 00       	push   0x1b5
c00030ef:	52                   	push   edx
c00030f0:	e8 3f 2b 00 00       	call   c0005c34 <ff_oem2uni>
c00030f5:	83 c4 10             	add    esp,0x10
c00030f8:	0f b7 c0             	movzx  eax,ax
c00030fb:	85 c0                	test   eax,eax
c00030fd:	75 04                	jne    c0003103 <get_fileinfo+0x11f>
c00030ff:	31 ff                	xor    edi,edi
c0003101:	eb 20                	jmp    c0003123 <get_fileinfo+0x13f>
c0003103:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003107:	b9 0c 00 00 00       	mov    ecx,0xc
c000310c:	29 f9                	sub    ecx,edi
c000310e:	e8 75 ee ff ff       	call   c0001f88 <put_utf>
c0003113:	84 c0                	test   al,al
c0003115:	74 e8                	je     c00030ff <get_fileinfo+0x11b>
c0003117:	0f b6 c0             	movzx  eax,al
c000311a:	01 c7                	add    edi,eax
c000311c:	89 e9                	mov    ecx,ebp
c000311e:	e9 56 ff ff ff       	jmp    c0003079 <get_fileinfo+0x95>
c0003123:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003128:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000312c:	75 59                	jne    c0003187 <get_fileinfo+0x1a3>
c000312e:	85 ff                	test   edi,edi
c0003130:	75 0b                	jne    c000313d <get_fileinfo+0x159>
c0003132:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003136:	b9 01 00 00 00       	mov    ecx,0x1
c000313b:	eb 38                	jmp    c0003175 <get_fileinfo+0x191>
c000313d:	b2 08                	mov    dl,0x8
c000313f:	31 c9                	xor    ecx,ecx
c0003141:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c0003147:	84 c0                	test   al,al
c0003149:	74 2a                	je     c0003175 <get_fileinfo+0x191>
c000314b:	0f b7 c0             	movzx  eax,ax
c000314e:	83 f8 2e             	cmp    eax,0x2e
c0003151:	74 19                	je     c000316c <get_fileinfo+0x188>
c0003153:	8d 78 bf             	lea    edi,[eax-0x41]
c0003156:	66 83 ff 19          	cmp    di,0x19
c000315a:	77 12                	ja     c000316e <get_fileinfo+0x18a>
c000315c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000315f:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x18a>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	0f b7 c0             	movzx  eax,ax
c000316a:	eb 02                	jmp    c000316e <get_fileinfo+0x18a>
c000316c:	b2 10                	mov    dl,0x10
c000316e:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003172:	41                   	inc    ecx
c0003173:	eb cc                	jmp    c0003141 <get_fileinfo+0x15d>
c0003175:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1a3>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 ab ec ff ff       	call   c0001e46 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 91 ec ff ff       	call   c0001e39 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 82 ec ff ff       	call   c0001e39 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	88 c1                	mov    cl,al
c00031c6:	53                   	push   ebx
c00031c7:	89 d6                	mov    esi,edx
c00031c9:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031cc:	e8 68 ec ff ff       	call   c0001e39 <ld_word>
c00031d1:	80 f9 03             	cmp    cl,0x3
c00031d4:	0f b7 d8             	movzx  ebx,ax
c00031d7:	75 0d                	jne    c00031e6 <ld_clust.isra.0+0x23>
c00031d9:	8d 46 14             	lea    eax,[esi+0x14]
c00031dc:	e8 58 ec ff ff       	call   c0001e39 <ld_word>
c00031e1:	c1 e0 10             	shl    eax,0x10
c00031e4:	09 c3                	or     ebx,eax
c00031e6:	89 d8                	mov    eax,ebx
c00031e8:	5b                   	pop    ebx
c00031e9:	5e                   	pop    esi
c00031ea:	c3                   	ret    

c00031eb <st_clust.isra.1>:
c00031eb:	56                   	push   esi
c00031ec:	89 c6                	mov    esi,eax
c00031ee:	53                   	push   ebx
c00031ef:	89 d3                	mov    ebx,edx
c00031f1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f4:	0f b7 d1             	movzx  edx,cx
c00031f7:	e8 62 ec ff ff       	call   c0001e5e <st_word>
c00031fc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00031ff:	75 0f                	jne    c0003210 <st_clust.isra.1+0x25>
c0003201:	8d 43 14             	lea    eax,[ebx+0x14]
c0003204:	5b                   	pop    ebx
c0003205:	c1 e9 10             	shr    ecx,0x10
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5e                   	pop    esi
c000320b:	e9 4e ec ff ff       	jmp    c0001e5e <st_word>
c0003210:	5b                   	pop    ebx
c0003211:	5e                   	pop    esi
c0003212:	c3                   	ret    

c0003213 <get_fat.isra.2>:
c0003213:	83 fa 01             	cmp    edx,0x1
c0003216:	b9 01 00 00 00       	mov    ecx,0x1
c000321b:	0f 86 f1 00 00 00    	jbe    c0003312 <get_fat.isra.2+0xff>
c0003221:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003224:	0f 83 e8 00 00 00    	jae    c0003312 <get_fat.isra.2+0xff>
c000322a:	55                   	push   ebp
c000322b:	57                   	push   edi
c000322c:	89 c7                	mov    edi,eax
c000322e:	56                   	push   esi
c000322f:	89 d6                	mov    esi,edx
c0003231:	53                   	push   ebx
c0003232:	83 ec 0c             	sub    esp,0xc
c0003235:	8a 00                	mov    al,BYTE PTR [eax]
c0003237:	3c 02                	cmp    al,0x2
c0003239:	74 78                	je     c00032b3 <get_fat.isra.2+0xa0>
c000323b:	3c 03                	cmp    al,0x3
c000323d:	0f 84 97 00 00 00    	je     c00032da <get_fat.isra.2+0xc7>
c0003243:	fe c8                	dec    al
c0003245:	0f 85 bd 00 00 00    	jne    c0003308 <get_fat.isra.2+0xf5>
c000324b:	89 d3                	mov    ebx,edx
c000324d:	89 f8                	mov    eax,edi
c000324f:	d1 eb                	shr    ebx,1
c0003251:	01 d3                	add    ebx,edx
c0003253:	89 da                	mov    edx,ebx
c0003255:	c1 ea 09             	shr    edx,0x9
c0003258:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325b:	e8 ed f0 ff ff       	call   c000234d <move_window>
c0003260:	85 c0                	test   eax,eax
c0003262:	74 08                	je     c000326c <get_fat.isra.2+0x59>
c0003264:	83 c9 ff             	or     ecx,0xffffffff
c0003267:	e9 9c 00 00 00       	jmp    c0003308 <get_fat.isra.2+0xf5>
c000326c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000326f:	89 f8                	mov    eax,edi
c0003271:	89 ea                	mov    edx,ebp
c0003273:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003279:	c1 ea 09             	shr    edx,0x9
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003283:	e8 c5 f0 ff ff       	call   c000234d <move_window>
c0003288:	85 c0                	test   eax,eax
c000328a:	75 d8                	jne    c0003264 <get_fat.isra.2+0x51>
c000328c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003292:	0f b6 c3             	movzx  eax,bl
c0003295:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329a:	c1 e3 08             	shl    ebx,0x8
c000329d:	09 c3                	or     ebx,eax
c000329f:	89 d9                	mov    ecx,ebx
c00032a1:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032a7:	83 e6 01             	and    esi,0x1
c00032aa:	74 5c                	je     c0003308 <get_fat.isra.2+0xf5>
c00032ac:	89 d9                	mov    ecx,ebx
c00032ae:	c1 e9 04             	shr    ecx,0x4
c00032b1:	eb 55                	jmp    c0003308 <get_fat.isra.2+0xf5>
c00032b3:	c1 ea 08             	shr    edx,0x8
c00032b6:	89 f8                	mov    eax,edi
c00032b8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032bb:	e8 8d f0 ff ff       	call   c000234d <move_window>
c00032c0:	85 c0                	test   eax,eax
c00032c2:	75 a0                	jne    c0003264 <get_fat.isra.2+0x51>
c00032c4:	01 f6                	add    esi,esi
c00032c6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cc:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d0:	e8 64 eb ff ff       	call   c0001e39 <ld_word>
c00032d5:	0f b7 c8             	movzx  ecx,ax
c00032d8:	eb 2e                	jmp    c0003308 <get_fat.isra.2+0xf5>
c00032da:	c1 ea 07             	shr    edx,0x7
c00032dd:	89 f8                	mov    eax,edi
c00032df:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e2:	e8 66 f0 ff ff       	call   c000234d <move_window>
c00032e7:	85 c0                	test   eax,eax
c00032e9:	0f 85 75 ff ff ff    	jne    c0003264 <get_fat.isra.2+0x51>
c00032ef:	c1 e6 02             	shl    esi,0x2
c00032f2:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032f8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032fc:	e8 45 eb ff ff       	call   c0001e46 <ld_dword>
c0003301:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003306:	89 c1                	mov    ecx,eax
c0003308:	83 c4 0c             	add    esp,0xc
c000330b:	89 c8                	mov    eax,ecx
c000330d:	5b                   	pop    ebx
c000330e:	5e                   	pop    esi
c000330f:	5f                   	pop    edi
c0003310:	5d                   	pop    ebp
c0003311:	c3                   	ret    
c0003312:	89 c8                	mov    eax,ecx
c0003314:	c3                   	ret    

c0003315 <dir_sdi>:
c0003315:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331b:	0f 87 b6 00 00 00    	ja     c00033d7 <dir_sdi+0xc2>
c0003321:	55                   	push   ebp
c0003322:	57                   	push   edi
c0003323:	56                   	push   esi
c0003324:	53                   	push   ebx
c0003325:	89 d3                	mov    ebx,edx
c0003327:	83 ec 1c             	sub    esp,0x1c
c000332a:	f6 c2 1f             	test   dl,0x1f
c000332d:	74 0a                	je     c0003339 <dir_sdi+0x24>
c000332f:	b8 02 00 00 00       	mov    eax,0x2
c0003334:	e9 96 00 00 00       	jmp    c00033cf <dir_sdi+0xba>
c0003339:	89 c6                	mov    esi,eax
c000333b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000333d:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003340:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003343:	85 ff                	test   edi,edi
c0003345:	75 21                	jne    c0003368 <dir_sdi+0x53>
c0003347:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000334b:	76 07                	jbe    c0003354 <dir_sdi+0x3f>
c000334d:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003350:	85 c0                	test   eax,eax
c0003352:	75 12                	jne    c0003366 <dir_sdi+0x51>
c0003354:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003358:	89 da                	mov    edx,ebx
c000335a:	c1 ea 05             	shr    edx,0x5
c000335d:	39 c2                	cmp    edx,eax
c000335f:	73 ce                	jae    c000332f <dir_sdi+0x1a>
c0003361:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003364:	eb 3c                	jmp    c00033a2 <dir_sdi+0x8d>
c0003366:	89 c7                	mov    edi,eax
c0003368:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000336c:	c1 e1 09             	shl    ecx,0x9
c000336f:	39 cb                	cmp    ebx,ecx
c0003371:	72 26                	jb     c0003399 <dir_sdi+0x84>
c0003373:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003377:	8b 06                	mov    eax,DWORD PTR [esi]
c0003379:	89 fa                	mov    edx,edi
c000337b:	e8 93 fe ff ff       	call   c0003213 <get_fat.isra.2>
c0003380:	83 f8 ff             	cmp    eax,0xffffffff
c0003383:	89 c7                	mov    edi,eax
c0003385:	74 43                	je     c00033ca <dir_sdi+0xb5>
c0003387:	83 f8 01             	cmp    eax,0x1
c000338a:	76 a3                	jbe    c000332f <dir_sdi+0x1a>
c000338c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000338f:	76 9e                	jbe    c000332f <dir_sdi+0x1a>
c0003391:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003395:	29 cb                	sub    ebx,ecx
c0003397:	eb d6                	jmp    c000336f <dir_sdi+0x5a>
c0003399:	89 fa                	mov    edx,edi
c000339b:	89 e8                	mov    eax,ebp
c000339d:	e8 d6 ec ff ff       	call   c0002078 <clst2sect>
c00033a2:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a5:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	85 d2                	test   edx,edx
c00033ad:	74 80                	je     c000332f <dir_sdi+0x1a>
c00033af:	89 d8                	mov    eax,ebx
c00033b1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033b7:	c1 e8 09             	shr    eax,0x9
c00033ba:	01 d0                	add    eax,edx
c00033bc:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033bf:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00033c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c6:	31 c0                	xor    eax,eax
c00033c8:	eb 05                	jmp    c00033cf <dir_sdi+0xba>
c00033ca:	b8 01 00 00 00       	mov    eax,0x1
c00033cf:	83 c4 1c             	add    esp,0x1c
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	5f                   	pop    edi
c00033d5:	5d                   	pop    ebp
c00033d6:	c3                   	ret    
c00033d7:	b8 02 00 00 00       	mov    eax,0x2
c00033dc:	c3                   	ret    

c00033dd <create_chain>:
c00033dd:	55                   	push   ebp
c00033de:	89 c5                	mov    ebp,eax
c00033e0:	57                   	push   edi
c00033e1:	89 d7                	mov    edi,edx
c00033e3:	56                   	push   esi
c00033e4:	53                   	push   ebx
c00033e5:	83 ec 1c             	sub    esp,0x1c
c00033e8:	85 d2                	test   edx,edx
c00033ea:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ec:	75 0e                	jne    c00033fc <create_chain+0x1f>
c00033ee:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00033f1:	85 c9                	test   ecx,ecx
c00033f3:	74 32                	je     c0003427 <create_chain+0x4a>
c00033f5:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00033f8:	77 32                	ja     c000342c <create_chain+0x4f>
c00033fa:	eb 2b                	jmp    c0003427 <create_chain+0x4a>
c00033fc:	89 d8                	mov    eax,ebx
c00033fe:	e8 10 fe ff ff       	call   c0003213 <get_fat.isra.2>
c0003403:	83 f8 01             	cmp    eax,0x1
c0003406:	77 0a                	ja     c0003412 <create_chain+0x35>
c0003408:	b8 01 00 00 00       	mov    eax,0x1
c000340d:	e9 f8 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003412:	83 f8 ff             	cmp    eax,0xffffffff
c0003415:	0f 84 ec 00 00 00    	je     c0003507 <create_chain+0x12a>
c000341b:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000341e:	89 f9                	mov    ecx,edi
c0003420:	76 0a                	jbe    c000342c <create_chain+0x4f>
c0003422:	e9 e3 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003427:	b9 01 00 00 00       	mov    ecx,0x1
c000342c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003430:	75 07                	jne    c0003439 <create_chain+0x5c>
c0003432:	31 c0                	xor    eax,eax
c0003434:	e9 d1 00 00 00       	jmp    c000350a <create_chain+0x12d>
c0003439:	39 f9                	cmp    ecx,edi
c000343b:	75 49                	jne    c0003486 <create_chain+0xa9>
c000343d:	8d 71 01             	lea    esi,[ecx+0x1]
c0003440:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003443:	77 05                	ja     c000344a <create_chain+0x6d>
c0003445:	be 02 00 00 00       	mov    esi,0x2
c000344a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000344e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003451:	89 f2                	mov    edx,esi
c0003453:	e8 bb fd ff ff       	call   c0003213 <get_fat.isra.2>
c0003458:	83 f8 01             	cmp    eax,0x1
c000345b:	0f 84 a9 00 00 00    	je     c000350a <create_chain+0x12d>
c0003461:	83 f8 ff             	cmp    eax,0xffffffff
c0003464:	0f 84 a0 00 00 00    	je     c000350a <create_chain+0x12d>
c000346a:	85 c0                	test   eax,eax
c000346c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003470:	74 10                	je     c0003482 <create_chain+0xa5>
c0003472:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003475:	83 f8 01             	cmp    eax,0x1
c0003478:	76 0c                	jbe    c0003486 <create_chain+0xa9>
c000347a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000347d:	0f 47 c8             	cmova  ecx,eax
c0003480:	eb 04                	jmp    c0003486 <create_chain+0xa9>
c0003482:	85 f6                	test   esi,esi
c0003484:	75 3b                	jne    c00034c1 <create_chain+0xe4>
c0003486:	89 ce                	mov    esi,ecx
c0003488:	46                   	inc    esi
c0003489:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000348c:	77 0a                	ja     c0003498 <create_chain+0xbb>
c000348e:	83 f9 01             	cmp    ecx,0x1
c0003491:	76 9f                	jbe    c0003432 <create_chain+0x55>
c0003493:	be 02 00 00 00       	mov    esi,0x2
c0003498:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000349f:	89 f2                	mov    edx,esi
c00034a1:	e8 6d fd ff ff       	call   c0003213 <get_fat.isra.2>
c00034a6:	85 c0                	test   eax,eax
c00034a8:	74 17                	je     c00034c1 <create_chain+0xe4>
c00034aa:	83 f8 01             	cmp    eax,0x1
c00034ad:	74 5b                	je     c000350a <create_chain+0x12d>
c00034af:	83 f8 ff             	cmp    eax,0xffffffff
c00034b2:	74 56                	je     c000350a <create_chain+0x12d>
c00034b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b8:	39 ce                	cmp    esi,ecx
c00034ba:	75 cc                	jne    c0003488 <create_chain+0xab>
c00034bc:	e9 71 ff ff ff       	jmp    c0003432 <create_chain+0x55>
c00034c1:	83 c9 ff             	or     ecx,0xffffffff
c00034c4:	89 f2                	mov    edx,esi
c00034c6:	89 d8                	mov    eax,ebx
c00034c8:	e8 da f2 ff ff       	call   c00027a7 <put_fat>
c00034cd:	85 c0                	test   eax,eax
c00034cf:	75 0f                	jne    c00034e0 <create_chain+0x103>
c00034d1:	85 ff                	test   edi,edi
c00034d3:	74 0b                	je     c00034e0 <create_chain+0x103>
c00034d5:	89 f1                	mov    ecx,esi
c00034d7:	89 fa                	mov    edx,edi
c00034d9:	89 d8                	mov    eax,ebx
c00034db:	e8 c7 f2 ff ff       	call   c00027a7 <put_fat>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	75 1c                	jne    c0003500 <create_chain+0x123>
c00034e4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00034e7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00034ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00034ed:	8d 57 fe             	lea    edx,[edi-0x2]
c00034f0:	39 d0                	cmp    eax,edx
c00034f2:	77 04                	ja     c00034f8 <create_chain+0x11b>
c00034f4:	48                   	dec    eax
c00034f5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034f8:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034fc:	89 f0                	mov    eax,esi
c00034fe:	eb 0a                	jmp    c000350a <create_chain+0x12d>
c0003500:	48                   	dec    eax
c0003501:	0f 85 01 ff ff ff    	jne    c0003408 <create_chain+0x2b>
c0003507:	83 c8 ff             	or     eax,0xffffffff
c000350a:	83 c4 1c             	add    esp,0x1c
c000350d:	5b                   	pop    ebx
c000350e:	5e                   	pop    esi
c000350f:	5f                   	pop    edi
c0003510:	5d                   	pop    ebp
c0003511:	c3                   	ret    

c0003512 <remove_chain>:
c0003512:	55                   	push   ebp
c0003513:	57                   	push   edi
c0003514:	56                   	push   esi
c0003515:	89 d6                	mov    esi,edx
c0003517:	53                   	push   ebx
c0003518:	83 ec 0c             	sub    esp,0xc
c000351b:	83 fa 01             	cmp    edx,0x1
c000351e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003520:	76 65                	jbe    c0003587 <remove_chain+0x75>
c0003522:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003525:	76 60                	jbe    c0003587 <remove_chain+0x75>
c0003527:	85 c9                	test   ecx,ecx
c0003529:	89 c5                	mov    ebp,eax
c000352b:	89 ca                	mov    edx,ecx
c000352d:	74 0e                	je     c000353d <remove_chain+0x2b>
c000352f:	83 c9 ff             	or     ecx,0xffffffff
c0003532:	89 d8                	mov    eax,ebx
c0003534:	e8 6e f2 ff ff       	call   c00027a7 <put_fat>
c0003539:	85 c0                	test   eax,eax
c000353b:	75 56                	jne    c0003593 <remove_chain+0x81>
c000353d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003540:	89 f2                	mov    edx,esi
c0003542:	e8 cc fc ff ff       	call   c0003213 <get_fat.isra.2>
c0003547:	85 c0                	test   eax,eax
c0003549:	89 c7                	mov    edi,eax
c000354b:	75 04                	jne    c0003551 <remove_chain+0x3f>
c000354d:	31 c0                	xor    eax,eax
c000354f:	eb 42                	jmp    c0003593 <remove_chain+0x81>
c0003551:	83 f8 01             	cmp    eax,0x1
c0003554:	74 31                	je     c0003587 <remove_chain+0x75>
c0003556:	83 f8 ff             	cmp    eax,0xffffffff
c0003559:	74 33                	je     c000358e <remove_chain+0x7c>
c000355b:	31 c9                	xor    ecx,ecx
c000355d:	89 f2                	mov    edx,esi
c000355f:	89 d8                	mov    eax,ebx
c0003561:	e8 41 f2 ff ff       	call   c00027a7 <put_fat>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 29                	jne    c0003593 <remove_chain+0x81>
c000356a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000356d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003570:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003573:	39 c8                	cmp    eax,ecx
c0003575:	73 08                	jae    c000357f <remove_chain+0x6d>
c0003577:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000357b:	40                   	inc    eax
c000357c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000357f:	39 fa                	cmp    edx,edi
c0003581:	89 fe                	mov    esi,edi
c0003583:	77 b8                	ja     c000353d <remove_chain+0x2b>
c0003585:	eb c6                	jmp    c000354d <remove_chain+0x3b>
c0003587:	b8 02 00 00 00       	mov    eax,0x2
c000358c:	eb 05                	jmp    c0003593 <remove_chain+0x81>
c000358e:	b8 01 00 00 00       	mov    eax,0x1
c0003593:	83 c4 0c             	add    esp,0xc
c0003596:	5b                   	pop    ebx
c0003597:	5e                   	pop    esi
c0003598:	5f                   	pop    edi
c0003599:	5d                   	pop    ebp
c000359a:	c3                   	ret    

c000359b <dir_next>:
c000359b:	55                   	push   ebp
c000359c:	57                   	push   edi
c000359d:	56                   	push   esi
c000359e:	53                   	push   ebx
c000359f:	83 ec 1c             	sub    esp,0x1c
c00035a2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035a5:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035a7:	83 c7 20             	add    edi,0x20
c00035aa:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035b0:	76 07                	jbe    c00035b9 <dir_next+0x1e>
c00035b2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035b9:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035bc:	b9 04 00 00 00       	mov    ecx,0x4
c00035c1:	85 f6                	test   esi,esi
c00035c3:	0f 84 cd 00 00 00    	je     c0003696 <dir_next+0xfb>
c00035c9:	89 c3                	mov    ebx,eax
c00035cb:	89 f8                	mov    eax,edi
c00035cd:	25 ff 01 00 00       	and    eax,0x1ff
c00035d2:	89 d1                	mov    ecx,edx
c00035d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035d8:	0f 85 a8 00 00 00    	jne    c0003686 <dir_next+0xeb>
c00035de:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035e1:	46                   	inc    esi
c00035e2:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035e5:	85 d2                	test   edx,edx
c00035e7:	75 22                	jne    c000360b <dir_next+0x70>
c00035e9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00035ed:	89 fa                	mov    edx,edi
c00035ef:	c1 ea 05             	shr    edx,0x5
c00035f2:	39 c2                	cmp    edx,eax
c00035f4:	0f 82 8c 00 00 00    	jb     c0003686 <dir_next+0xeb>
c00035fa:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003601:	b9 04 00 00 00       	mov    ecx,0x4
c0003606:	e9 8b 00 00 00       	jmp    c0003696 <dir_next+0xfb>
c000360b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000360f:	89 fe                	mov    esi,edi
c0003611:	c1 ee 09             	shr    esi,0x9
c0003614:	48                   	dec    eax
c0003615:	85 f0                	test   eax,esi
c0003617:	75 6d                	jne    c0003686 <dir_next+0xeb>
c0003619:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 ef fb ff ff       	call   c0003213 <get_fat.isra.2>
c0003624:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003628:	83 f8 01             	cmp    eax,0x1
c000362b:	89 c6                	mov    esi,eax
c000362d:	77 07                	ja     c0003636 <dir_next+0x9b>
c000362f:	b9 02 00 00 00       	mov    ecx,0x2
c0003634:	eb 60                	jmp    c0003696 <dir_next+0xfb>
c0003636:	83 f8 ff             	cmp    eax,0xffffffff
c0003639:	75 07                	jne    c0003642 <dir_next+0xa7>
c000363b:	b9 01 00 00 00       	mov    ecx,0x1
c0003640:	eb 54                	jmp    c0003696 <dir_next+0xfb>
c0003642:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003645:	77 30                	ja     c0003677 <dir_next+0xdc>
c0003647:	85 c9                	test   ecx,ecx
c0003649:	74 af                	je     c00035fa <dir_next+0x5f>
c000364b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000364e:	89 d8                	mov    eax,ebx
c0003650:	e8 88 fd ff ff       	call   c00033dd <create_chain>
c0003655:	b9 07 00 00 00       	mov    ecx,0x7
c000365a:	85 c0                	test   eax,eax
c000365c:	89 c6                	mov    esi,eax
c000365e:	74 36                	je     c0003696 <dir_next+0xfb>
c0003660:	83 f8 01             	cmp    eax,0x1
c0003663:	74 ca                	je     c000362f <dir_next+0x94>
c0003665:	83 f8 ff             	cmp    eax,0xffffffff
c0003668:	74 d1                	je     c000363b <dir_next+0xa0>
c000366a:	89 c2                	mov    edx,eax
c000366c:	89 e8                	mov    eax,ebp
c000366e:	e8 88 f2 ff ff       	call   c00028fb <dir_clear>
c0003673:	85 c0                	test   eax,eax
c0003675:	75 c4                	jne    c000363b <dir_next+0xa0>
c0003677:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000367a:	89 f2                	mov    edx,esi
c000367c:	89 e8                	mov    eax,ebp
c000367e:	e8 f5 e9 ff ff       	call   c0002078 <clst2sect>
c0003683:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003686:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368d:	31 c9                	xor    ecx,ecx
c000368f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003693:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003696:	83 c4 1c             	add    esp,0x1c
c0003699:	89 c8                	mov    eax,ecx
c000369b:	5b                   	pop    ebx
c000369c:	5e                   	pop    esi
c000369d:	5f                   	pop    edi
c000369e:	5d                   	pop    ebp
c000369f:	c3                   	ret    

c00036a0 <dir_alloc>:
c00036a0:	55                   	push   ebp
c00036a1:	89 c5                	mov    ebp,eax
c00036a3:	57                   	push   edi
c00036a4:	89 d7                	mov    edi,edx
c00036a6:	56                   	push   esi
c00036a7:	31 d2                	xor    edx,edx
c00036a9:	53                   	push   ebx
c00036aa:	83 ec 0c             	sub    esp,0xc
c00036ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00036af:	e8 61 fc ff ff       	call   c0003315 <dir_sdi>
c00036b4:	85 c0                	test   eax,eax
c00036b6:	75 37                	jne    c00036ef <dir_alloc+0x4f>
c00036b8:	31 db                	xor    ebx,ebx
c00036ba:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036bd:	89 f0                	mov    eax,esi
c00036bf:	e8 89 ec ff ff       	call   c000234d <move_window>
c00036c4:	85 c0                	test   eax,eax
c00036c6:	75 27                	jne    c00036ef <dir_alloc+0x4f>
c00036c8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036cb:	8a 12                	mov    dl,BYTE PTR [edx]
c00036cd:	80 fa e5             	cmp    dl,0xe5
c00036d0:	74 04                	je     c00036d6 <dir_alloc+0x36>
c00036d2:	84 d2                	test   dl,dl
c00036d4:	75 07                	jne    c00036dd <dir_alloc+0x3d>
c00036d6:	43                   	inc    ebx
c00036d7:	39 fb                	cmp    ebx,edi
c00036d9:	75 04                	jne    c00036df <dir_alloc+0x3f>
c00036db:	eb 1c                	jmp    c00036f9 <dir_alloc+0x59>
c00036dd:	31 db                	xor    ebx,ebx
c00036df:	ba 01 00 00 00       	mov    edx,0x1
c00036e4:	89 e8                	mov    eax,ebp
c00036e6:	e8 b0 fe ff ff       	call   c000359b <dir_next>
c00036eb:	85 c0                	test   eax,eax
c00036ed:	74 cb                	je     c00036ba <dir_alloc+0x1a>
c00036ef:	83 f8 04             	cmp    eax,0x4
c00036f2:	75 05                	jne    c00036f9 <dir_alloc+0x59>
c00036f4:	b8 07 00 00 00       	mov    eax,0x7
c00036f9:	83 c4 0c             	add    esp,0xc
c00036fc:	5b                   	pop    ebx
c00036fd:	5e                   	pop    esi
c00036fe:	5f                   	pop    edi
c00036ff:	5d                   	pop    ebp
c0003700:	c3                   	ret    

c0003701 <dir_read>:
c0003701:	55                   	push   ebp
c0003702:	57                   	push   edi
c0003703:	56                   	push   esi
c0003704:	be 04 00 00 00       	mov    esi,0x4
c0003709:	53                   	push   ebx
c000370a:	89 c3                	mov    ebx,eax
c000370c:	83 ec 1c             	sub    esp,0x1c
c000370f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003713:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003715:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c000371a:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000371f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003722:	85 d2                	test   edx,edx
c0003724:	0f 84 d8 00 00 00    	je     c0003802 <dir_read+0x101>
c000372a:	89 e8                	mov    eax,ebp
c000372c:	e8 1c ec ff ff       	call   c000234d <move_window>
c0003731:	85 c0                	test   eax,eax
c0003733:	89 c6                	mov    esi,eax
c0003735:	0f 85 d2 00 00 00    	jne    c000380d <dir_read+0x10c>
c000373b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c000373e:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003740:	84 c9                	test   cl,cl
c0003742:	0f 84 c0 00 00 00    	je     c0003808 <dir_read+0x107>
c0003748:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c000374b:	24 3f                	and    al,0x3f
c000374d:	80 f9 e5             	cmp    cl,0xe5
c0003750:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003753:	0f 84 8f 00 00 00    	je     c00037e8 <dir_read+0xe7>
c0003759:	80 f9 2e             	cmp    cl,0x2e
c000375c:	0f 84 86 00 00 00    	je     c00037e8 <dir_read+0xe7>
c0003762:	0f b6 d0             	movzx  edx,al
c0003765:	83 e2 df             	and    edx,0xffffffdf
c0003768:	83 fa 08             	cmp    edx,0x8
c000376b:	0f 94 c2             	sete   dl
c000376e:	0f b6 d2             	movzx  edx,dl
c0003771:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003775:	75 71                	jne    c00037e8 <dir_read+0xe7>
c0003777:	3c 0f                	cmp    al,0xf
c0003779:	75 4c                	jne    c00037c7 <dir_read+0xc6>
c000377b:	88 c8                	mov    al,cl
c000377d:	24 40                	and    al,0x40
c000377f:	74 12                	je     c0003793 <dir_read+0x92>
c0003781:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003784:	80 e1 bf             	and    cl,0xbf
c0003787:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000378b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000378e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003791:	eb 06                	jmp    c0003799 <dir_read+0x98>
c0003793:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003797:	75 4f                	jne    c00037e8 <dir_read+0xe7>
c0003799:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000379e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00037a2:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00037a5:	75 46                	jne    c00037ed <dir_read+0xec>
c00037a7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00037ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037ae:	89 fa                	mov    edx,edi
c00037b0:	e8 e0 e8 ff ff       	call   c0002095 <pick_lfn>
c00037b5:	85 c0                	test   eax,eax
c00037b7:	74 34                	je     c00037ed <dir_read+0xec>
c00037b9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00037bd:	88 c8                	mov    al,cl
c00037bf:	fe c8                	dec    al
c00037c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00037c5:	eb 26                	jmp    c00037ed <dir_read+0xec>
c00037c7:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00037cc:	75 11                	jne    c00037df <dir_read+0xde>
c00037ce:	89 f8                	mov    eax,edi
c00037d0:	e8 76 ea ff ff       	call   c000224b <sum_sfn>
c00037d5:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00037d9:	75 04                	jne    c00037df <dir_read+0xde>
c00037db:	31 f6                	xor    esi,esi
c00037dd:	eb 35                	jmp    c0003814 <dir_read+0x113>
c00037df:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037e6:	eb 2c                	jmp    c0003814 <dir_read+0x113>
c00037e8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037ed:	31 d2                	xor    edx,edx
c00037ef:	89 d8                	mov    eax,ebx
c00037f1:	e8 a5 fd ff ff       	call   c000359b <dir_next>
c00037f6:	85 c0                	test   eax,eax
c00037f8:	89 c6                	mov    esi,eax
c00037fa:	0f 84 1f ff ff ff    	je     c000371f <dir_read+0x1e>
c0003800:	eb 0b                	jmp    c000380d <dir_read+0x10c>
c0003802:	85 f6                	test   esi,esi
c0003804:	74 d5                	je     c00037db <dir_read+0xda>
c0003806:	eb 05                	jmp    c000380d <dir_read+0x10c>
c0003808:	be 04 00 00 00       	mov    esi,0x4
c000380d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003814:	83 c4 1c             	add    esp,0x1c
c0003817:	89 f0                	mov    eax,esi
c0003819:	5b                   	pop    ebx
c000381a:	5e                   	pop    esi
c000381b:	5f                   	pop    edi
c000381c:	5d                   	pop    ebp
c000381d:	c3                   	ret    

c000381e <dir_remove>:
c000381e:	57                   	push   edi
c000381f:	56                   	push   esi
c0003820:	53                   	push   ebx
c0003821:	89 c3                	mov    ebx,eax
c0003823:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003826:	8b 30                	mov    esi,DWORD PTR [eax]
c0003828:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000382b:	83 fa ff             	cmp    edx,0xffffffff
c000382e:	74 09                	je     c0003839 <dir_remove+0x1b>
c0003830:	e8 e0 fa ff ff       	call   c0003315 <dir_sdi>
c0003835:	85 c0                	test   eax,eax
c0003837:	75 34                	jne    c000386d <dir_remove+0x4f>
c0003839:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000383c:	89 f0                	mov    eax,esi
c000383e:	e8 0a eb ff ff       	call   c000234d <move_window>
c0003843:	85 c0                	test   eax,eax
c0003845:	75 1c                	jne    c0003863 <dir_remove+0x45>
c0003847:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000384a:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000384d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003851:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003854:	73 17                	jae    c000386d <dir_remove+0x4f>
c0003856:	31 d2                	xor    edx,edx
c0003858:	89 d8                	mov    eax,ebx
c000385a:	e8 3c fd ff ff       	call   c000359b <dir_next>
c000385f:	85 c0                	test   eax,eax
c0003861:	74 d6                	je     c0003839 <dir_remove+0x1b>
c0003863:	83 f8 04             	cmp    eax,0x4
c0003866:	75 05                	jne    c000386d <dir_remove+0x4f>
c0003868:	b8 02 00 00 00       	mov    eax,0x2
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	c3                   	ret    

c0003871 <dir_find>:
c0003871:	55                   	push   ebp
c0003872:	31 d2                	xor    edx,edx
c0003874:	57                   	push   edi
c0003875:	56                   	push   esi
c0003876:	53                   	push   ebx
c0003877:	89 c3                	mov    ebx,eax
c0003879:	83 ec 1c             	sub    esp,0x1c
c000387c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000387e:	e8 92 fa ff ff       	call   c0003315 <dir_sdi>
c0003883:	85 c0                	test   eax,eax
c0003885:	89 c6                	mov    esi,eax
c0003887:	0f 85 03 01 00 00    	jne    c0003990 <dir_find+0x11f>
c000388d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003894:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003899:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000389e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038a1:	89 e8                	mov    eax,ebp
c00038a3:	e8 a5 ea ff ff       	call   c000234d <move_window>
c00038a8:	85 c0                	test   eax,eax
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	0f 85 de 00 00 00    	jne    c0003990 <dir_find+0x11f>
c00038b2:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00038b5:	8a 0f                	mov    cl,BYTE PTR [edi]
c00038b7:	84 c9                	test   cl,cl
c00038b9:	0f 84 cc 00 00 00    	je     c000398b <dir_find+0x11a>
c00038bf:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00038c2:	88 c2                	mov    dl,al
c00038c4:	80 e2 3f             	and    dl,0x3f
c00038c7:	80 f9 e5             	cmp    cl,0xe5
c00038ca:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c00038cd:	0f 84 97 00 00 00    	je     c000396a <dir_find+0xf9>
c00038d3:	24 08                	and    al,0x8
c00038d5:	74 0b                	je     c00038e2 <dir_find+0x71>
c00038d7:	80 fa 0f             	cmp    dl,0xf
c00038da:	0f 85 8a 00 00 00    	jne    c000396a <dir_find+0xf9>
c00038e0:	eb 05                	jmp    c00038e7 <dir_find+0x76>
c00038e2:	80 fa 0f             	cmp    dl,0xf
c00038e5:	75 56                	jne    c000393d <dir_find+0xcc>
c00038e7:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00038eb:	0f 85 85 00 00 00    	jne    c0003976 <dir_find+0x105>
c00038f1:	88 c8                	mov    al,cl
c00038f3:	24 40                	and    al,0x40
c00038f5:	74 12                	je     c0003909 <dir_find+0x98>
c00038f7:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c00038fa:	80 e1 bf             	and    cl,0xbf
c00038fd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003901:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003904:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003907:	eb 06                	jmp    c000390f <dir_find+0x9e>
c0003909:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000390d:	75 62                	jne    c0003971 <dir_find+0x100>
c000390f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003914:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003918:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c000391b:	75 59                	jne    c0003976 <dir_find+0x105>
c000391d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0003921:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003924:	89 fa                	mov    edx,edi
c0003926:	e8 9c f3 ff ff       	call   c0002cc7 <cmp_lfn>
c000392b:	85 c0                	test   eax,eax
c000392d:	74 47                	je     c0003976 <dir_find+0x105>
c000392f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003933:	88 c8                	mov    al,cl
c0003935:	fe c8                	dec    al
c0003937:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c000393b:	eb 39                	jmp    c0003976 <dir_find+0x105>
c000393d:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c0003942:	75 0d                	jne    c0003951 <dir_find+0xe0>
c0003944:	89 f8                	mov    eax,edi
c0003946:	e8 00 e9 ff ff       	call   c000224b <sum_sfn>
c000394b:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c000394f:	74 3f                	je     c0003990 <dir_find+0x11f>
c0003951:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003955:	75 13                	jne    c000396a <dir_find+0xf9>
c0003957:	8d 53 20             	lea    edx,[ebx+0x20]
c000395a:	b9 0b 00 00 00       	mov    ecx,0xb
c000395f:	89 f8                	mov    eax,edi
c0003961:	e8 1e e5 ff ff       	call   c0001e84 <mem_cmp>
c0003966:	85 c0                	test   eax,eax
c0003968:	74 26                	je     c0003990 <dir_find+0x11f>
c000396a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003971:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003976:	31 d2                	xor    edx,edx
c0003978:	89 d8                	mov    eax,ebx
c000397a:	e8 1c fc ff ff       	call   c000359b <dir_next>
c000397f:	85 c0                	test   eax,eax
c0003981:	89 c6                	mov    esi,eax
c0003983:	0f 84 15 ff ff ff    	je     c000389e <dir_find+0x2d>
c0003989:	eb 05                	jmp    c0003990 <dir_find+0x11f>
c000398b:	be 04 00 00 00       	mov    esi,0x4
c0003990:	83 c4 1c             	add    esp,0x1c
c0003993:	89 f0                	mov    eax,esi
c0003995:	5b                   	pop    ebx
c0003996:	5e                   	pop    esi
c0003997:	5f                   	pop    edi
c0003998:	5d                   	pop    ebp
c0003999:	c3                   	ret    

c000399a <follow_path>:
c000399a:	56                   	push   esi
c000399b:	53                   	push   ebx
c000399c:	89 c3                	mov    ebx,eax
c000399e:	83 ec 14             	sub    esp,0x14
c00039a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039a5:	8b 30                	mov    esi,DWORD PTR [eax]
c00039a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ab:	8a 10                	mov    dl,BYTE PTR [eax]
c00039ad:	80 fa 2f             	cmp    dl,0x2f
c00039b0:	75 07                	jne    c00039b9 <follow_path+0x1f>
c00039b2:	40                   	inc    eax
c00039b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039b7:	eb ee                	jmp    c00039a7 <follow_path+0xd>
c00039b9:	80 fa 5c             	cmp    dl,0x5c
c00039bc:	74 f4                	je     c00039b2 <follow_path+0x18>
c00039be:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00039c5:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00039c8:	77 3e                	ja     c0003a08 <follow_path+0x6e>
c00039ca:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00039ce:	31 d2                	xor    edx,edx
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	e8 3e f9 ff ff       	call   c0003315 <dir_sdi>
c00039d7:	eb 57                	jmp    c0003a30 <follow_path+0x96>
c00039d9:	89 d8                	mov    eax,ebx
c00039db:	e8 91 fe ff ff       	call   c0003871 <dir_find>
c00039e0:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00039e3:	85 c0                	test   eax,eax
c00039e5:	75 32                	jne    c0003a19 <follow_path+0x7f>
c00039e7:	80 e2 04             	and    dl,0x4
c00039ea:	75 44                	jne    c0003a30 <follow_path+0x96>
c00039ec:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00039f0:	74 39                	je     c0003a2b <follow_path+0x91>
c00039f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039f5:	25 ff 01 00 00       	and    eax,0x1ff
c00039fa:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00039fe:	8a 06                	mov    al,BYTE PTR [esi]
c0003a00:	e8 be f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a05:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a08:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a0c:	89 d8                	mov    eax,ebx
c0003a0e:	e8 e4 ef ff ff       	call   c00029f7 <create_name>
c0003a13:	85 c0                	test   eax,eax
c0003a15:	74 c2                	je     c00039d9 <follow_path+0x3f>
c0003a17:	eb 17                	jmp    c0003a30 <follow_path+0x96>
c0003a19:	83 f8 04             	cmp    eax,0x4
c0003a1c:	75 12                	jne    c0003a30 <follow_path+0x96>
c0003a1e:	80 e2 04             	and    dl,0x4
c0003a21:	ba 05 00 00 00       	mov    edx,0x5
c0003a26:	0f 44 c2             	cmove  eax,edx
c0003a29:	eb 05                	jmp    c0003a30 <follow_path+0x96>
c0003a2b:	b8 05 00 00 00       	mov    eax,0x5
c0003a30:	83 c4 14             	add    esp,0x14
c0003a33:	5b                   	pop    ebx
c0003a34:	5e                   	pop    esi
c0003a35:	c3                   	ret    

c0003a36 <dir_register>:
c0003a36:	55                   	push   ebp
c0003a37:	57                   	push   edi
c0003a38:	56                   	push   esi
c0003a39:	be 06 00 00 00       	mov    esi,0x6
c0003a3e:	53                   	push   ebx
c0003a3f:	83 ec 2c             	sub    esp,0x2c
c0003a42:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003a46:	0f 85 65 01 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003a4c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a56:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a5d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a62:	74 06                	je     c0003a6a <dir_register+0x34>
c0003a64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003a68:	eb ef                	jmp    c0003a59 <dir_register+0x23>
c0003a6a:	89 c3                	mov    ebx,eax
c0003a6c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003a71:	8d 40 20             	lea    eax,[eax+0x20]
c0003a74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003a78:	89 c2                	mov    edx,eax
c0003a7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003a7e:	e8 e2 e3 ff ff       	call   c0001e65 <mem_cpy>
c0003a83:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003a88:	74 48                	je     c0003ad2 <dir_register+0x9c>
c0003a8a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003a8e:	bd 01 00 00 00       	mov    ebp,0x1
c0003a93:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003a96:	55                   	push   ebp
c0003a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003a9f:	e8 ec e6 ff ff       	call   c0002190 <gen_numname>
c0003aa4:	58                   	pop    eax
c0003aa5:	89 d8                	mov    eax,ebx
c0003aa7:	e8 c5 fd ff ff       	call   c0003871 <dir_find>
c0003aac:	85 c0                	test   eax,eax
c0003aae:	89 c6                	mov    esi,eax
c0003ab0:	75 10                	jne    c0003ac2 <dir_register+0x8c>
c0003ab2:	45                   	inc    ebp
c0003ab3:	83 fd 64             	cmp    ebp,0x64
c0003ab6:	75 db                	jne    c0003a93 <dir_register+0x5d>
c0003ab8:	be 07 00 00 00       	mov    esi,0x7
c0003abd:	e9 ef 00 00 00       	jmp    c0003bb1 <dir_register+0x17b>
c0003ac2:	83 f8 04             	cmp    eax,0x4
c0003ac5:	0f 85 e6 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003acb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003acf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003ad2:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003ad7:	bd 01 00 00 00       	mov    ebp,0x1
c0003adc:	74 13                	je     c0003af1 <dir_register+0xbb>
c0003ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae2:	b9 0d 00 00 00       	mov    ecx,0xd
c0003ae7:	31 d2                	xor    edx,edx
c0003ae9:	83 c0 0c             	add    eax,0xc
c0003aec:	f7 f1                	div    ecx
c0003aee:	8d 68 01             	lea    ebp,[eax+0x1]
c0003af1:	89 ea                	mov    edx,ebp
c0003af3:	89 d8                	mov    eax,ebx
c0003af5:	e8 a6 fb ff ff       	call   c00036a0 <dir_alloc>
c0003afa:	85 c0                	test   eax,eax
c0003afc:	89 c6                	mov    esi,eax
c0003afe:	0f 85 ad 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003b04:	4d                   	dec    ebp
c0003b05:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b09:	74 67                	je     c0003b72 <dir_register+0x13c>
c0003b0b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b0e:	89 e8                	mov    eax,ebp
c0003b10:	c1 e0 05             	shl    eax,0x5
c0003b13:	29 c2                	sub    edx,eax
c0003b15:	89 d8                	mov    eax,ebx
c0003b17:	e8 f9 f7 ff ff       	call   c0003315 <dir_sdi>
c0003b1c:	85 c0                	test   eax,eax
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	0f 85 8b 00 00 00    	jne    c0003bb1 <dir_register+0x17b>
c0003b26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b2a:	e8 1c e7 ff ff       	call   c000224b <sum_sfn>
c0003b2f:	0f b6 e8             	movzx  ebp,al
c0003b32:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b35:	89 f8                	mov    eax,edi
c0003b37:	e8 11 e8 ff ff       	call   c000234d <move_window>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 6f                	jne    c0003bb1 <dir_register+0x17b>
c0003b42:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b47:	83 ec 0c             	sub    esp,0xc
c0003b4a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b4d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b50:	55                   	push   ebp
c0003b51:	e8 c2 e5 ff ff       	call   c0002118 <put_lfn>
c0003b56:	31 d2                	xor    edx,edx
c0003b58:	89 d8                	mov    eax,ebx
c0003b5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b5e:	e8 38 fa ff ff       	call   c000359b <dir_next>
c0003b63:	83 c4 10             	add    esp,0x10
c0003b66:	85 c0                	test   eax,eax
c0003b68:	89 c6                	mov    esi,eax
c0003b6a:	75 45                	jne    c0003bb1 <dir_register+0x17b>
c0003b6c:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003b70:	75 c0                	jne    c0003b32 <dir_register+0xfc>
c0003b72:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b75:	89 f8                	mov    eax,edi
c0003b77:	e8 d1 e7 ff ff       	call   c000234d <move_window>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	75 2f                	jne    c0003bb1 <dir_register+0x17b>
c0003b82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b85:	b9 20 00 00 00       	mov    ecx,0x20
c0003b8a:	31 d2                	xor    edx,edx
c0003b8c:	e8 e9 e2 ff ff       	call   c0001e7a <mem_set>
c0003b91:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003b94:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b99:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003b9d:	e8 c3 e2 ff ff       	call   c0001e65 <mem_cpy>
c0003ba2:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ba5:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ba8:	24 18                	and    al,0x18
c0003baa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bb1:	83 c4 2c             	add    esp,0x2c
c0003bb4:	89 f0                	mov    eax,esi
c0003bb6:	5b                   	pop    ebx
c0003bb7:	5e                   	pop    esi
c0003bb8:	5f                   	pop    edi
c0003bb9:	5d                   	pop    ebp
c0003bba:	c3                   	ret    

c0003bbb <f_mount>:
c0003bbb:	53                   	push   ebx
c0003bbc:	83 ec 18             	sub    esp,0x18
c0003bbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003bc3:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003bc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003bcf:	e8 89 e6 ff ff       	call   c000225d <get_ldnumber>
c0003bd4:	89 c2                	mov    edx,eax
c0003bd6:	b8 0b 00 00 00       	mov    eax,0xb
c0003bdb:	85 d2                	test   edx,edx
c0003bdd:	78 39                	js     c0003c18 <f_mount+0x5d>
c0003bdf:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003be6:	85 c0                	test   eax,eax
c0003be8:	74 03                	je     c0003bed <f_mount+0x32>
c0003bea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bf1:	85 c0                	test   eax,eax
c0003bf3:	74 03                	je     c0003bf8 <f_mount+0x3d>
c0003bf5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003bfc:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c03:	31 c0                	xor    eax,eax
c0003c05:	84 db                	test   bl,bl
c0003c07:	74 0f                	je     c0003c18 <f_mount+0x5d>
c0003c09:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c0d:	31 c9                	xor    ecx,ecx
c0003c0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c13:	e8 92 e8 ff ff       	call   c00024aa <mount_volume>
c0003c18:	83 c4 18             	add    esp,0x18
c0003c1b:	5b                   	pop    ebx
c0003c1c:	c3                   	ret    

c0003c1d <f_open>:
c0003c1d:	55                   	push   ebp
c0003c1e:	b8 09 00 00 00       	mov    eax,0x9
c0003c23:	57                   	push   edi
c0003c24:	56                   	push   esi
c0003c25:	53                   	push   ebx
c0003c26:	83 ec 5c             	sub    esp,0x5c
c0003c29:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003c2d:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003c31:	85 f6                	test   esi,esi
c0003c33:	0f 84 a6 02 00 00    	je     c0003edf <f_open+0x2c2>
c0003c39:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c3d:	88 d8                	mov    al,bl
c0003c3f:	24 3f                	and    al,0x3f
c0003c41:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003c45:	0f b6 c8             	movzx  ecx,al
c0003c48:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c4c:	e8 59 e8 ff ff       	call   c00024aa <mount_volume>
c0003c51:	85 c0                	test   eax,eax
c0003c53:	0f 85 80 02 00 00    	jne    c0003ed9 <f_open+0x2bc>
c0003c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c5d:	83 ec 0c             	sub    esp,0xc
c0003c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c64:	68 00 02 00 00       	push   0x200
c0003c69:	e8 02 1f 00 00       	call   c0005b70 <ff_memalloc>
c0003c6e:	83 c4 10             	add    esp,0x10
c0003c71:	89 c7                	mov    edi,eax
c0003c73:	b8 11 00 00 00       	mov    eax,0x11
c0003c78:	85 ff                	test   edi,edi
c0003c7a:	0f 84 5f 02 00 00    	je     c0003edf <f_open+0x2c2>
c0003c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c84:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003c88:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003c8b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c8f:	e8 06 fd ff ff       	call   c000399a <follow_path>
c0003c94:	85 c0                	test   eax,eax
c0003c96:	75 0d                	jne    c0003ca5 <f_open+0x88>
c0003c98:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003c9d:	ba 06 00 00 00       	mov    edx,0x6
c0003ca2:	0f 48 c2             	cmovs  eax,edx
c0003ca5:	f6 c3 1c             	test   bl,0x1c
c0003ca8:	0f 84 d2 00 00 00    	je     c0003d80 <f_open+0x163>
c0003cae:	85 c0                	test   eax,eax
c0003cb0:	74 21                	je     c0003cd3 <f_open+0xb6>
c0003cb2:	83 f8 04             	cmp    eax,0x4
c0003cb5:	0f 85 06 02 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003cbb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cbf:	e8 72 fd ff ff       	call   c0003a36 <dir_register>
c0003cc4:	85 c0                	test   eax,eax
c0003cc6:	0f 85 f5 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003ccc:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003cd1:	eb 29                	jmp    c0003cfc <f_open+0xdf>
c0003cd3:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003cd8:	b8 07 00 00 00       	mov    eax,0x7
c0003cdd:	0f 85 de 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003ce3:	88 da                	mov    dl,bl
c0003ce5:	b8 08 00 00 00       	mov    eax,0x8
c0003cea:	80 e2 04             	and    dl,0x4
c0003ced:	0f 85 ce 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003cf3:	80 e3 08             	and    bl,0x8
c0003cf6:	0f 84 b3 00 00 00    	je     c0003daf <f_open+0x192>
c0003cfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d00:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d04:	8a 00                	mov    al,BYTE PTR [eax]
c0003d06:	89 ea                	mov    edx,ebp
c0003d08:	e8 b6 f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d12:	89 c3                	mov    ebx,eax
c0003d14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d17:	e8 46 e1 ff ff       	call   c0001e62 <st_dword>
c0003d1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d20:	31 c9                	xor    ecx,ecx
c0003d22:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d2a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d2e:	e8 b8 f4 ff ff       	call   c00031eb <st_clust.isra.1>
c0003d33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d37:	31 d2                	xor    edx,edx
c0003d39:	83 c0 1c             	add    eax,0x1c
c0003d3c:	e8 21 e1 ff ff       	call   c0001e62 <st_dword>
c0003d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d45:	85 db                	test   ebx,ebx
c0003d47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d4b:	74 62                	je     c0003daf <f_open+0x192>
c0003d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d51:	31 c9                	xor    ecx,ecx
c0003d53:	89 da                	mov    edx,ebx
c0003d55:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003d58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d5c:	e8 b1 f7 ff ff       	call   c0003512 <remove_chain>
c0003d61:	85 c0                	test   eax,eax
c0003d63:	0f 85 58 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d6d:	89 ea                	mov    edx,ebp
c0003d6f:	4b                   	dec    ebx
c0003d70:	e8 d8 e5 ff ff       	call   c000234d <move_window>
c0003d75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003d79:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003d7c:	85 c0                	test   eax,eax
c0003d7e:	eb 29                	jmp    c0003da9 <f_open+0x18c>
c0003d80:	85 c0                	test   eax,eax
c0003d82:	0f 85 39 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d88:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d8c:	b8 04 00 00 00       	mov    eax,0x4
c0003d91:	88 d1                	mov    cl,dl
c0003d93:	80 e1 10             	and    cl,0x10
c0003d96:	0f 85 25 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003d9c:	80 e3 02             	and    bl,0x2
c0003d9f:	74 0e                	je     c0003daf <f_open+0x192>
c0003da1:	80 e2 01             	and    dl,0x1
c0003da4:	b8 07 00 00 00       	mov    eax,0x7
c0003da9:	0f 85 12 01 00 00    	jne    c0003ec1 <f_open+0x2a4>
c0003daf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003db3:	24 08                	and    al,0x8
c0003db5:	74 05                	je     c0003dbc <f_open+0x19f>
c0003db7:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003dbc:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003dc0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003dc4:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003dc7:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003dca:	89 da                	mov    edx,ebx
c0003dcc:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003dcf:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003dd2:	e8 ec f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003dd7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003dda:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003ddd:	e8 64 e0 ff ff       	call   c0001e46 <ld_dword>
c0003de2:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003de5:	31 d2                	xor    edx,edx
c0003de7:	89 2e                	mov    DWORD PTR [esi],ebp
c0003de9:	b9 00 02 00 00       	mov    ecx,0x200
c0003dee:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003df1:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003df5:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003df9:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e00:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e07:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e0f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003e12:	89 d8                	mov    eax,ebx
c0003e14:	e8 61 e0 ff ff       	call   c0001e7a <mem_set>
c0003e19:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e1d:	24 20                	and    al,0x20
c0003e1f:	75 07                	jne    c0003e28 <f_open+0x20b>
c0003e21:	31 c0                	xor    eax,eax
c0003e23:	e9 99 00 00 00       	jmp    c0003ec1 <f_open+0x2a4>
c0003e28:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003e2b:	85 ed                	test   ebp,ebp
c0003e2d:	74 f2                	je     c0003e21 <f_open+0x204>
c0003e2f:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003e32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e36:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003e39:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003e3d:	31 c0                	xor    eax,eax
c0003e3f:	c1 e1 09             	shl    ecx,0x9
c0003e42:	85 c0                	test   eax,eax
c0003e44:	75 2b                	jne    c0003e71 <f_open+0x254>
c0003e46:	39 cd                	cmp    ebp,ecx
c0003e48:	76 27                	jbe    c0003e71 <f_open+0x254>
c0003e4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e4e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003e50:	e8 be f3 ff ff       	call   c0003213 <get_fat.isra.2>
c0003e55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e59:	89 c2                	mov    edx,eax
c0003e5b:	b8 02 00 00 00       	mov    eax,0x2
c0003e60:	83 fa 01             	cmp    edx,0x1
c0003e63:	76 08                	jbe    c0003e6d <f_open+0x250>
c0003e65:	31 c0                	xor    eax,eax
c0003e67:	83 fa ff             	cmp    edx,0xffffffff
c0003e6a:	0f 94 c0             	sete   al
c0003e6d:	29 cd                	sub    ebp,ecx
c0003e6f:	eb d1                	jmp    c0003e42 <f_open+0x225>
c0003e71:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003e74:	85 c0                	test   eax,eax
c0003e76:	75 49                	jne    c0003ec1 <f_open+0x2a4>
c0003e78:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003e7e:	74 a1                	je     c0003e21 <f_open+0x204>
c0003e80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e88:	89 c8                	mov    eax,ecx
c0003e8a:	e8 e9 e1 ff ff       	call   c0002078 <clst2sect>
c0003e8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e93:	89 c2                	mov    edx,eax
c0003e95:	b8 02 00 00 00       	mov    eax,0x2
c0003e9a:	85 d2                	test   edx,edx
c0003e9c:	74 23                	je     c0003ec1 <f_open+0x2a4>
c0003e9e:	c1 ed 09             	shr    ebp,0x9
c0003ea1:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ea5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003ea8:	6a 01                	push   0x1
c0003eaa:	50                   	push   eax
c0003eab:	53                   	push   ebx
c0003eac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb0:	50                   	push   eax
c0003eb1:	e8 38 df ff ff       	call   c0001dee <disk_read>
c0003eb6:	83 c4 10             	add    esp,0x10
c0003eb9:	85 c0                	test   eax,eax
c0003ebb:	0f 95 c0             	setne  al
c0003ebe:	0f b6 c0             	movzx  eax,al
c0003ec1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ec5:	83 ec 0c             	sub    esp,0xc
c0003ec8:	57                   	push   edi
c0003ec9:	e8 b6 1c 00 00       	call   c0005b84 <ff_memfree>
c0003ece:	83 c4 10             	add    esp,0x10
c0003ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ed5:	85 c0                	test   eax,eax
c0003ed7:	74 06                	je     c0003edf <f_open+0x2c2>
c0003ed9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003edf:	83 c4 5c             	add    esp,0x5c
c0003ee2:	5b                   	pop    ebx
c0003ee3:	5e                   	pop    esi
c0003ee4:	5f                   	pop    edi
c0003ee5:	5d                   	pop    ebp
c0003ee6:	c3                   	ret    

c0003ee7 <f_read>:
c0003ee7:	55                   	push   ebp
c0003ee8:	57                   	push   edi
c0003ee9:	56                   	push   esi
c0003eea:	53                   	push   ebx
c0003eeb:	83 ec 2c             	sub    esp,0x2c
c0003eee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ef2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ef6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003efa:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003efe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 97 e3 ff ff       	call   c00022a2 <validate>
c0003f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f0f:	85 c0                	test   eax,eax
c0003f11:	0f 85 a0 01 00 00    	jne    c00040b7 <f_read+0x1d0>
c0003f17:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	0f 85 90 01 00 00    	jne    c00040b7 <f_read+0x1d0>
c0003f27:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f2b:	0f 84 7e 01 00 00    	je     c00040af <f_read+0x1c8>
c0003f31:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f34:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f37:	39 f8                	cmp    eax,edi
c0003f39:	0f 46 f8             	cmovbe edi,eax
c0003f3c:	85 ff                	test   edi,edi
c0003f3e:	0f 84 73 01 00 00    	je     c00040b7 <f_read+0x1d0>
c0003f44:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f47:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f4c:	0f 85 26 01 00 00    	jne    c0004078 <f_read+0x191>
c0003f52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f56:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003f5a:	89 c2                	mov    edx,eax
c0003f5c:	c1 ea 09             	shr    edx,0x9
c0003f5f:	4d                   	dec    ebp
c0003f60:	21 d5                	and    ebp,edx
c0003f62:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003f66:	75 42                	jne    c0003faa <f_read+0xc3>
c0003f68:	85 c0                	test   eax,eax
c0003f6a:	75 05                	jne    c0003f71 <f_read+0x8a>
c0003f6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f6f:	eb 0a                	jmp    c0003f7b <f_read+0x94>
c0003f71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f76:	e8 98 f2 ff ff       	call   c0003213 <get_fat.isra.2>
c0003f7b:	83 f8 01             	cmp    eax,0x1
c0003f7e:	77 11                	ja     c0003f91 <f_read+0xaa>
c0003f80:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f84:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0003f8c:	e9 26 01 00 00       	jmp    c00040b7 <f_read+0x1d0>
c0003f91:	83 f8 ff             	cmp    eax,0xffffffff
c0003f94:	75 11                	jne    c0003fa7 <f_read+0xc0>
c0003f96:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f9a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0003fa2:	e9 10 01 00 00       	jmp    c00040b7 <f_read+0x1d0>
c0003fa7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003faa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb5:	89 c8                	mov    eax,ecx
c0003fb7:	e8 bc e0 ff ff       	call   c0002078 <clst2sect>
c0003fbc:	85 c0                	test   eax,eax
c0003fbe:	74 c0                	je     c0003f80 <f_read+0x99>
c0003fc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc4:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003fca:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	76 58                	jbe    c000402b <f_read+0x144>
c0003fd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fd7:	89 fe                	mov    esi,edi
c0003fd9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdd:	c1 ee 09             	shr    esi,0x9
c0003fe0:	01 f2                	add    edx,esi
c0003fe2:	39 c2                	cmp    edx,eax
c0003fe4:	76 06                	jbe    c0003fec <f_read+0x105>
c0003fe6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003fea:	89 c6                	mov    esi,eax
c0003fec:	56                   	push   esi
c0003fed:	55                   	push   ebp
c0003fee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ff6:	50                   	push   eax
c0003ff7:	e8 f2 dd ff ff       	call   c0001dee <disk_read>
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	85 c0                	test   eax,eax
c0004001:	75 93                	jne    c0003f96 <f_read+0xaf>
c0004003:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004007:	79 1d                	jns    c0004026 <f_read+0x13f>
c0004009:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000400c:	29 e8                	sub    eax,ebp
c000400e:	39 f0                	cmp    eax,esi
c0004010:	73 14                	jae    c0004026 <f_read+0x13f>
c0004012:	c1 e0 09             	shl    eax,0x9
c0004015:	b9 00 02 00 00       	mov    ecx,0x200
c000401a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000401e:	8d 53 28             	lea    edx,[ebx+0x28]
c0004021:	e8 3f de ff ff       	call   c0001e65 <mem_cpy>
c0004026:	c1 e6 09             	shl    esi,0x9
c0004029:	eb 70                	jmp    c000409b <f_read+0x1b4>
c000402b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000402e:	39 e8                	cmp    eax,ebp
c0004030:	74 43                	je     c0004075 <f_read+0x18e>
c0004032:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004036:	8d 73 28             	lea    esi,[ebx+0x28]
c0004039:	79 1d                	jns    c0004058 <f_read+0x171>
c000403b:	6a 01                	push   0x1
c000403d:	50                   	push   eax
c000403e:	56                   	push   esi
c000403f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004043:	50                   	push   eax
c0004044:	e8 bb dd ff ff       	call   c0001e04 <disk_write>
c0004049:	83 c4 10             	add    esp,0x10
c000404c:	85 c0                	test   eax,eax
c000404e:	0f 85 42 ff ff ff    	jne    c0003f96 <f_read+0xaf>
c0004054:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004058:	6a 01                	push   0x1
c000405a:	55                   	push   ebp
c000405b:	56                   	push   esi
c000405c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004060:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004064:	50                   	push   eax
c0004065:	e8 84 dd ff ff       	call   c0001dee <disk_read>
c000406a:	83 c4 10             	add    esp,0x10
c000406d:	85 c0                	test   eax,eax
c000406f:	0f 85 21 ff ff ff    	jne    c0003f96 <f_read+0xaf>
c0004075:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004078:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000407b:	be 00 02 00 00       	mov    esi,0x200
c0004080:	25 ff 01 00 00       	and    eax,0x1ff
c0004085:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004089:	29 c6                	sub    esi,eax
c000408b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000408f:	39 f7                	cmp    edi,esi
c0004091:	0f 46 f7             	cmovbe esi,edi
c0004094:	89 f1                	mov    ecx,esi
c0004096:	e8 ca dd ff ff       	call   c0001e65 <mem_cpy>
c000409b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000409f:	29 f7                	sub    edi,esi
c00040a1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040a5:	01 30                	add    DWORD PTR [eax],esi
c00040a7:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00040aa:	e9 8d fe ff ff       	jmp    c0003f3c <f_read+0x55>
c00040af:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c00040b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040bb:	83 c4 2c             	add    esp,0x2c
c00040be:	5b                   	pop    ebx
c00040bf:	5e                   	pop    esi
c00040c0:	5f                   	pop    edi
c00040c1:	5d                   	pop    ebp
c00040c2:	c3                   	ret    

c00040c3 <f_write>:
c00040c3:	55                   	push   ebp
c00040c4:	57                   	push   edi
c00040c5:	56                   	push   esi
c00040c6:	53                   	push   ebx
c00040c7:	83 ec 2c             	sub    esp,0x2c
c00040ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00040d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00040d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00040dc:	89 d8                	mov    eax,ebx
c00040de:	e8 bf e1 ff ff       	call   c00022a2 <validate>
c00040e3:	85 c0                	test   eax,eax
c00040e5:	89 c7                	mov    edi,eax
c00040e7:	0f 85 ff 01 00 00    	jne    c00042ec <f_write+0x229>
c00040ed:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c00040f1:	85 ff                	test   edi,edi
c00040f3:	0f 85 f3 01 00 00    	jne    c00042ec <f_write+0x229>
c00040f9:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00040fd:	0f 84 e4 01 00 00    	je     c00042e7 <f_write+0x224>
c0004103:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004106:	89 c1                	mov    ecx,eax
c0004108:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000410c:	0f 83 e8 00 00 00    	jae    c00041fa <f_write+0x137>
c0004112:	f7 d0                	not    eax
c0004114:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004118:	e9 dd 00 00 00       	jmp    c00041fa <f_write+0x137>
c000411d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004120:	a9 ff 01 00 00       	test   eax,0x1ff
c0004125:	0f 85 8c 01 00 00    	jne    c00042b7 <f_write+0x1f4>
c000412b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000412f:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004133:	89 c2                	mov    edx,eax
c0004135:	c1 ea 09             	shr    edx,0x9
c0004138:	4d                   	dec    ebp
c0004139:	21 d5                	and    ebp,edx
c000413b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000413f:	0f 84 c2 00 00 00    	je     c0004207 <f_write+0x144>
c0004145:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004149:	0f 88 19 01 00 00    	js     c0004268 <f_write+0x1a5>
c000414f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004153:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004156:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000415a:	89 c8                	mov    eax,ecx
c000415c:	e8 17 df ff ff       	call   c0002078 <clst2sect>
c0004161:	85 c0                	test   eax,eax
c0004163:	0f 84 c9 00 00 00    	je     c0004232 <f_write+0x16f>
c0004169:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000416d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004175:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004178:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000417c:	0f 86 0d 01 00 00    	jbe    c000428f <f_write+0x1cc>
c0004182:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000418a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000418e:	c1 ee 09             	shr    esi,0x9
c0004191:	01 f2                	add    edx,esi
c0004193:	39 c2                	cmp    edx,eax
c0004195:	76 06                	jbe    c000419d <f_write+0xda>
c0004197:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000419b:	89 c6                	mov    esi,eax
c000419d:	56                   	push   esi
c000419e:	55                   	push   ebp
c000419f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041a7:	50                   	push   eax
c00041a8:	e8 57 dc ff ff       	call   c0001e04 <disk_write>
c00041ad:	83 c4 10             	add    esp,0x10
c00041b0:	85 c0                	test   eax,eax
c00041b2:	0f 85 8d 00 00 00    	jne    c0004245 <f_write+0x182>
c00041b8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00041bb:	29 ea                	sub    edx,ebp
c00041bd:	39 f2                	cmp    edx,esi
c00041bf:	73 18                	jae    c00041d9 <f_write+0x116>
c00041c1:	c1 e2 09             	shl    edx,0x9
c00041c4:	b9 00 02 00 00       	mov    ecx,0x200
c00041c9:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00041cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00041d0:	e8 90 dc ff ff       	call   c0001e65 <mem_cpy>
c00041d5:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041d9:	c1 e6 09             	shl    esi,0x9
c00041dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041e0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00041e4:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00041e8:	01 30                	add    DWORD PTR [eax],esi
c00041ea:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00041ed:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c00041f0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00041f3:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c00041f7:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00041fa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00041ff:	0f 85 18 ff ff ff    	jne    c000411d <f_write+0x5a>
c0004205:	eb 1d                	jmp    c0004224 <f_write+0x161>
c0004207:	85 c0                	test   eax,eax
c0004209:	75 0b                	jne    c0004216 <f_write+0x153>
c000420b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000420e:	31 d2                	xor    edx,edx
c0004210:	85 c0                	test   eax,eax
c0004212:	75 19                	jne    c000422d <f_write+0x16a>
c0004214:	eb 03                	jmp    c0004219 <f_write+0x156>
c0004216:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004219:	89 d8                	mov    eax,ebx
c000421b:	e8 bd f1 ff ff       	call   c00033dd <create_chain>
c0004220:	85 c0                	test   eax,eax
c0004222:	75 09                	jne    c000422d <f_write+0x16a>
c0004224:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004228:	e9 bf 00 00 00       	jmp    c00042ec <f_write+0x229>
c000422d:	83 f8 01             	cmp    eax,0x1
c0004230:	75 0e                	jne    c0004240 <f_write+0x17d>
c0004232:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004236:	bf 02 00 00 00       	mov    edi,0x2
c000423b:	e9 ac 00 00 00       	jmp    c00042ec <f_write+0x229>
c0004240:	83 f8 ff             	cmp    eax,0xffffffff
c0004243:	75 0e                	jne    c0004253 <f_write+0x190>
c0004245:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004249:	bf 01 00 00 00       	mov    edi,0x1
c000424e:	e9 99 00 00 00       	jmp    c00042ec <f_write+0x229>
c0004253:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004257:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000425a:	0f 85 e5 fe ff ff    	jne    c0004145 <f_write+0x82>
c0004260:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004263:	e9 dd fe ff ff       	jmp    c0004145 <f_write+0x82>
c0004268:	6a 01                	push   0x1
c000426a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004270:	50                   	push   eax
c0004271:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004275:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004279:	50                   	push   eax
c000427a:	e8 85 db ff ff       	call   c0001e04 <disk_write>
c000427f:	83 c4 10             	add    esp,0x10
c0004282:	85 c0                	test   eax,eax
c0004284:	75 bf                	jne    c0004245 <f_write+0x182>
c0004286:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000428a:	e9 c0 fe ff ff       	jmp    c000414f <f_write+0x8c>
c000428f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004292:	74 20                	je     c00042b4 <f_write+0x1f1>
c0004294:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004297:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000429a:	76 18                	jbe    c00042b4 <f_write+0x1f1>
c000429c:	6a 01                	push   0x1
c000429e:	55                   	push   ebp
c000429f:	8d 43 28             	lea    eax,[ebx+0x28]
c00042a2:	50                   	push   eax
c00042a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a7:	50                   	push   eax
c00042a8:	e8 41 db ff ff       	call   c0001dee <disk_read>
c00042ad:	83 c4 10             	add    esp,0x10
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 91                	jne    c0004245 <f_write+0x182>
c00042b4:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ba:	be 00 02 00 00       	mov    esi,0x200
c00042bf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00042c3:	25 ff 01 00 00       	and    eax,0x1ff
c00042c8:	29 c6                	sub    esi,eax
c00042ca:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c00042ce:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00042d2:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c00042d7:	89 f1                	mov    ecx,esi
c00042d9:	e8 87 db ff ff       	call   c0001e65 <mem_cpy>
c00042de:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00042e2:	e9 f5 fe ff ff       	jmp    c00041dc <f_write+0x119>
c00042e7:	bf 07 00 00 00       	mov    edi,0x7
c00042ec:	83 c4 2c             	add    esp,0x2c
c00042ef:	89 f8                	mov    eax,edi
c00042f1:	5b                   	pop    ebx
c00042f2:	5e                   	pop    esi
c00042f3:	5f                   	pop    edi
c00042f4:	5d                   	pop    ebp
c00042f5:	c3                   	ret    

c00042f6 <f_sync>:
c00042f6:	56                   	push   esi
c00042f7:	53                   	push   ebx
c00042f8:	83 ec 14             	sub    esp,0x14
c00042fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00042ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004303:	89 d8                	mov    eax,ebx
c0004305:	e8 98 df ff ff       	call   c00022a2 <validate>
c000430a:	85 c0                	test   eax,eax
c000430c:	0f 85 95 00 00 00    	jne    c00043a7 <f_sync+0xb1>
c0004312:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004315:	88 d1                	mov    cl,dl
c0004317:	80 e1 40             	and    cl,0x40
c000431a:	0f 84 87 00 00 00    	je     c00043a7 <f_sync+0xb1>
c0004320:	84 d2                	test   dl,dl
c0004322:	79 29                	jns    c000434d <f_sync+0x57>
c0004324:	6a 01                	push   0x1
c0004326:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004329:	8d 43 28             	lea    eax,[ebx+0x28]
c000432c:	50                   	push   eax
c000432d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004331:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004335:	50                   	push   eax
c0004336:	e8 c9 da ff ff       	call   c0001e04 <disk_write>
c000433b:	83 c4 10             	add    esp,0x10
c000433e:	89 c2                	mov    edx,eax
c0004340:	b8 01 00 00 00       	mov    eax,0x1
c0004345:	85 d2                	test   edx,edx
c0004347:	75 5e                	jne    c00043a7 <f_sync+0xb1>
c0004349:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000434d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004354:	e8 f4 df ff ff       	call   c000234d <move_window>
c0004359:	85 c0                	test   eax,eax
c000435b:	75 4a                	jne    c00043a7 <f_sync+0xb1>
c000435d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004360:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004364:	89 f2                	mov    edx,esi
c0004366:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004369:	8b 03                	mov    eax,DWORD PTR [ebx]
c000436b:	e8 7b ee ff ff       	call   c00031eb <st_clust.isra.1>
c0004370:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004373:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004376:	e8 e7 da ff ff       	call   c0001e62 <st_dword>
c000437b:	8d 46 16             	lea    eax,[esi+0x16]
c000437e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004383:	e8 da da ff ff       	call   c0001e62 <st_dword>
c0004388:	8d 46 12             	lea    eax,[esi+0x12]
c000438b:	31 d2                	xor    edx,edx
c000438d:	e8 cc da ff ff       	call   c0001e5e <st_word>
c0004392:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004396:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000439a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000439e:	e8 ed e9 ff ff       	call   c0002d90 <sync_fs>
c00043a3:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00043a7:	83 c4 14             	add    esp,0x14
c00043aa:	5b                   	pop    ebx
c00043ab:	5e                   	pop    esi
c00043ac:	c3                   	ret    

c00043ad <f_close>:
c00043ad:	53                   	push   ebx
c00043ae:	83 ec 24             	sub    esp,0x24
c00043b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00043b5:	53                   	push   ebx
c00043b6:	e8 3b ff ff ff       	call   c00042f6 <f_sync>
c00043bb:	83 c4 10             	add    esp,0x10
c00043be:	85 c0                	test   eax,eax
c00043c0:	75 15                	jne    c00043d7 <f_close+0x2a>
c00043c2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00043c6:	89 d8                	mov    eax,ebx
c00043c8:	e8 d5 de ff ff       	call   c00022a2 <validate>
c00043cd:	85 c0                	test   eax,eax
c00043cf:	75 06                	jne    c00043d7 <f_close+0x2a>
c00043d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00043d7:	83 c4 18             	add    esp,0x18
c00043da:	5b                   	pop    ebx
c00043db:	c3                   	ret    

c00043dc <f_lseek>:
c00043dc:	55                   	push   ebp
c00043dd:	57                   	push   edi
c00043de:	56                   	push   esi
c00043df:	53                   	push   ebx
c00043e0:	83 ec 2c             	sub    esp,0x2c
c00043e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00043e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00043eb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00043ef:	89 d8                	mov    eax,ebx
c00043f1:	e8 ac de ff ff       	call   c00022a2 <validate>
c00043f6:	85 c0                	test   eax,eax
c00043f8:	89 c5                	mov    ebp,eax
c00043fa:	0f 85 78 01 00 00    	jne    c0004578 <f_lseek+0x19c>
c0004400:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004404:	85 ed                	test   ebp,ebp
c0004406:	0f 85 6c 01 00 00    	jne    c0004578 <f_lseek+0x19c>
c000440c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000440f:	39 f0                	cmp    eax,esi
c0004411:	73 07                	jae    c000441a <f_lseek+0x3e>
c0004413:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004417:	0f 44 f0             	cmove  esi,eax
c000441a:	85 f6                	test   esi,esi
c000441c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000441f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004426:	75 07                	jne    c000442f <f_lseek+0x53>
c0004428:	31 f6                	xor    esi,esi
c000442a:	e9 e2 00 00 00       	jmp    c0004511 <f_lseek+0x135>
c000442f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004433:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004437:	c1 e7 09             	shl    edi,0x9
c000443a:	85 c9                	test   ecx,ecx
c000443c:	74 28                	je     c0004466 <f_lseek+0x8a>
c000443e:	31 d2                	xor    edx,edx
c0004440:	49                   	dec    ecx
c0004441:	8d 46 ff             	lea    eax,[esi-0x1]
c0004444:	f7 f7                	div    edi
c0004446:	31 d2                	xor    edx,edx
c0004448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000444c:	89 c8                	mov    eax,ecx
c000444e:	f7 f7                	div    edi
c0004450:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004454:	72 10                	jb     c0004466 <f_lseek+0x8a>
c0004456:	89 f8                	mov    eax,edi
c0004458:	f7 d8                	neg    eax
c000445a:	21 c1                	and    ecx,eax
c000445c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000445f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004462:	29 ce                	sub    esi,ecx
c0004464:	eb 3c                	jmp    c00044a2 <f_lseek+0xc6>
c0004466:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004469:	85 c0                	test   eax,eax
c000446b:	75 32                	jne    c000449f <f_lseek+0xc3>
c000446d:	31 d2                	xor    edx,edx
c000446f:	89 d8                	mov    eax,ebx
c0004471:	e8 67 ef ff ff       	call   c00033dd <create_chain>
c0004476:	83 f8 01             	cmp    eax,0x1
c0004479:	75 0e                	jne    c0004489 <f_lseek+0xad>
c000447b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000447f:	bd 02 00 00 00       	mov    ebp,0x2
c0004484:	e9 ef 00 00 00       	jmp    c0004578 <f_lseek+0x19c>
c0004489:	83 f8 ff             	cmp    eax,0xffffffff
c000448c:	75 0e                	jne    c000449c <f_lseek+0xc0>
c000448e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004492:	bd 01 00 00 00       	mov    ebp,0x1
c0004497:	e9 dc 00 00 00       	jmp    c0004578 <f_lseek+0x19c>
c000449c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	85 c0                	test   eax,eax
c00044a4:	74 82                	je     c0004428 <f_lseek+0x4c>
c00044a6:	39 fe                	cmp    esi,edi
c00044a8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044ab:	76 3d                	jbe    c00044ea <f_lseek+0x10e>
c00044ad:	01 fa                	add    edx,edi
c00044af:	29 fe                	sub    esi,edi
c00044b1:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044b5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00044b8:	89 c2                	mov    edx,eax
c00044ba:	74 0d                	je     c00044c9 <f_lseek+0xed>
c00044bc:	89 d8                	mov    eax,ebx
c00044be:	e8 1a ef ff ff       	call   c00033dd <create_chain>
c00044c3:	85 c0                	test   eax,eax
c00044c5:	75 09                	jne    c00044d0 <f_lseek+0xf4>
c00044c7:	eb 1f                	jmp    c00044e8 <f_lseek+0x10c>
c00044c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044cb:	e8 43 ed ff ff       	call   c0003213 <get_fat.isra.2>
c00044d0:	83 f8 ff             	cmp    eax,0xffffffff
c00044d3:	74 b9                	je     c000448e <f_lseek+0xb2>
c00044d5:	83 f8 01             	cmp    eax,0x1
c00044d8:	76 a1                	jbe    c000447b <f_lseek+0x9f>
c00044da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00044de:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00044e1:	76 98                	jbe    c000447b <f_lseek+0x9f>
c00044e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044e6:	eb be                	jmp    c00044a6 <f_lseek+0xca>
c00044e8:	31 f6                	xor    esi,esi
c00044ea:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00044ed:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00044f3:	0f 84 2f ff ff ff    	je     c0004428 <f_lseek+0x4c>
c00044f9:	89 c2                	mov    edx,eax
c00044fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044ff:	e8 74 db ff ff       	call   c0002078 <clst2sect>
c0004504:	85 c0                	test   eax,eax
c0004506:	0f 84 6f ff ff ff    	je     c000447b <f_lseek+0x9f>
c000450c:	c1 ee 09             	shr    esi,0x9
c000450f:	01 c6                	add    esi,eax
c0004511:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004514:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004517:	76 07                	jbe    c0004520 <f_lseek+0x144>
c0004519:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000451d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004520:	a9 ff 01 00 00       	test   eax,0x1ff
c0004525:	74 51                	je     c0004578 <f_lseek+0x19c>
c0004527:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000452a:	39 f0                	cmp    eax,esi
c000452c:	74 4a                	je     c0004578 <f_lseek+0x19c>
c000452e:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004532:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004535:	79 21                	jns    c0004558 <f_lseek+0x17c>
c0004537:	6a 01                	push   0x1
c0004539:	50                   	push   eax
c000453a:	57                   	push   edi
c000453b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000453f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004543:	50                   	push   eax
c0004544:	e8 bb d8 ff ff       	call   c0001e04 <disk_write>
c0004549:	83 c4 10             	add    esp,0x10
c000454c:	85 c0                	test   eax,eax
c000454e:	0f 85 3a ff ff ff    	jne    c000448e <f_lseek+0xb2>
c0004554:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004558:	6a 01                	push   0x1
c000455a:	56                   	push   esi
c000455b:	57                   	push   edi
c000455c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004560:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004564:	50                   	push   eax
c0004565:	e8 84 d8 ff ff       	call   c0001dee <disk_read>
c000456a:	83 c4 10             	add    esp,0x10
c000456d:	85 c0                	test   eax,eax
c000456f:	0f 85 19 ff ff ff    	jne    c000448e <f_lseek+0xb2>
c0004575:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004578:	83 c4 2c             	add    esp,0x2c
c000457b:	89 e8                	mov    eax,ebp
c000457d:	5b                   	pop    ebx
c000457e:	5e                   	pop    esi
c000457f:	5f                   	pop    edi
c0004580:	5d                   	pop    ebp
c0004581:	c3                   	ret    

c0004582 <f_opendir>:
c0004582:	56                   	push   esi
c0004583:	b8 09 00 00 00       	mov    eax,0x9
c0004588:	53                   	push   ebx
c0004589:	83 ec 24             	sub    esp,0x24
c000458c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004590:	85 db                	test   ebx,ebx
c0004592:	0f 84 af 00 00 00    	je     c0004647 <f_opendir+0xc5>
c0004598:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000459c:	31 c9                	xor    ecx,ecx
c000459e:	8d 44 24 34          	lea    eax,[esp+0x34]
c00045a2:	e8 03 df ff ff       	call   c00024aa <mount_volume>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 85 92 00 00 00    	jne    c0004641 <f_opendir+0xbf>
c00045af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045b3:	83 ec 0c             	sub    esp,0xc
c00045b6:	89 03                	mov    DWORD PTR [ebx],eax
c00045b8:	68 00 02 00 00       	push   0x200
c00045bd:	e8 ae 15 00 00       	call   c0005b70 <ff_memalloc>
c00045c2:	83 c4 10             	add    esp,0x10
c00045c5:	89 c6                	mov    esi,eax
c00045c7:	b8 11 00 00 00       	mov    eax,0x11
c00045cc:	85 f6                	test   esi,esi
c00045ce:	74 77                	je     c0004647 <f_opendir+0xc5>
c00045d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045d4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00045d8:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045db:	89 d8                	mov    eax,ebx
c00045dd:	e8 b8 f3 ff ff       	call   c000399a <follow_path>
c00045e2:	85 c0                	test   eax,eax
c00045e4:	75 37                	jne    c000461d <f_opendir+0x9b>
c00045e6:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00045ea:	78 1c                	js     c0004608 <f_opendir+0x86>
c00045ec:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00045f0:	b8 05 00 00 00       	mov    eax,0x5
c00045f5:	74 26                	je     c000461d <f_opendir+0x9b>
c00045f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00045fe:	8a 00                	mov    al,BYTE PTR [eax]
c0004600:	e8 be eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004605:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000460c:	31 d2                	xor    edx,edx
c000460e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c0004612:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004616:	89 d8                	mov    eax,ebx
c0004618:	e8 f8 ec ff ff       	call   c0003315 <dir_sdi>
c000461d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004621:	83 ec 0c             	sub    esp,0xc
c0004624:	56                   	push   esi
c0004625:	e8 5a 15 00 00       	call   c0005b84 <ff_memfree>
c000462a:	83 c4 10             	add    esp,0x10
c000462d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004631:	83 f8 04             	cmp    eax,0x4
c0004634:	74 06                	je     c000463c <f_opendir+0xba>
c0004636:	85 c0                	test   eax,eax
c0004638:	74 0d                	je     c0004647 <f_opendir+0xc5>
c000463a:	eb 05                	jmp    c0004641 <f_opendir+0xbf>
c000463c:	b8 05 00 00 00       	mov    eax,0x5
c0004641:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004647:	83 c4 24             	add    esp,0x24
c000464a:	5b                   	pop    ebx
c000464b:	5e                   	pop    esi
c000464c:	c3                   	ret    

c000464d <f_closedir>:
c000464d:	53                   	push   ebx
c000464e:	83 ec 18             	sub    esp,0x18
c0004651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004655:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004659:	89 d8                	mov    eax,ebx
c000465b:	e8 42 dc ff ff       	call   c00022a2 <validate>
c0004660:	85 c0                	test   eax,eax
c0004662:	75 06                	jne    c000466a <f_closedir+0x1d>
c0004664:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000466a:	83 c4 18             	add    esp,0x18
c000466d:	5b                   	pop    ebx
c000466e:	c3                   	ret    

c000466f <f_readdir>:
c000466f:	57                   	push   edi
c0004670:	56                   	push   esi
c0004671:	53                   	push   ebx
c0004672:	83 ec 20             	sub    esp,0x20
c0004675:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004679:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000467d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004681:	89 d8                	mov    eax,ebx
c0004683:	e8 1a dc ff ff       	call   c00022a2 <validate>
c0004688:	85 c0                	test   eax,eax
c000468a:	75 6e                	jne    c00046fa <f_readdir+0x8b>
c000468c:	85 ff                	test   edi,edi
c000468e:	75 0b                	jne    c000469b <f_readdir+0x2c>
c0004690:	31 d2                	xor    edx,edx
c0004692:	89 d8                	mov    eax,ebx
c0004694:	e8 7c ec ff ff       	call   c0003315 <dir_sdi>
c0004699:	eb 5f                	jmp    c00046fa <f_readdir+0x8b>
c000469b:	83 ec 0c             	sub    esp,0xc
c000469e:	68 00 02 00 00       	push   0x200
c00046a3:	e8 c8 14 00 00       	call   c0005b70 <ff_memalloc>
c00046a8:	83 c4 10             	add    esp,0x10
c00046ab:	89 c6                	mov    esi,eax
c00046ad:	b8 11 00 00 00       	mov    eax,0x11
c00046b2:	85 f6                	test   esi,esi
c00046b4:	74 44                	je     c00046fa <f_readdir+0x8b>
c00046b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046ba:	31 d2                	xor    edx,edx
c00046bc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	e8 3b f0 ff ff       	call   c0003701 <dir_read>
c00046c6:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00046cb:	75 19                	jne    c00046e6 <f_readdir+0x77>
c00046cd:	89 fa                	mov    edx,edi
c00046cf:	89 d8                	mov    eax,ebx
c00046d1:	e8 0e e9 ff ff       	call   c0002fe4 <get_fileinfo>
c00046d6:	31 d2                	xor    edx,edx
c00046d8:	89 d8                	mov    eax,ebx
c00046da:	e8 bc ee ff ff       	call   c000359b <dir_next>
c00046df:	83 f8 04             	cmp    eax,0x4
c00046e2:	75 02                	jne    c00046e6 <f_readdir+0x77>
c00046e4:	31 c0                	xor    eax,eax
c00046e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ea:	83 ec 0c             	sub    esp,0xc
c00046ed:	56                   	push   esi
c00046ee:	e8 91 14 00 00       	call   c0005b84 <ff_memfree>
c00046f3:	83 c4 10             	add    esp,0x10
c00046f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046fa:	83 c4 20             	add    esp,0x20
c00046fd:	5b                   	pop    ebx
c00046fe:	5e                   	pop    esi
c00046ff:	5f                   	pop    edi
c0004700:	c3                   	ret    

c0004701 <f_stat>:
c0004701:	57                   	push   edi
c0004702:	31 c9                	xor    ecx,ecx
c0004704:	56                   	push   esi
c0004705:	53                   	push   ebx
c0004706:	83 ec 30             	sub    esp,0x30
c0004709:	8d 44 24 40          	lea    eax,[esp+0x40]
c000470d:	89 e2                	mov    edx,esp
c000470f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004713:	e8 92 dd ff ff       	call   c00024aa <mount_volume>
c0004718:	85 c0                	test   eax,eax
c000471a:	89 c3                	mov    ebx,eax
c000471c:	75 59                	jne    c0004777 <f_stat+0x76>
c000471e:	83 ec 0c             	sub    esp,0xc
c0004721:	bb 11 00 00 00       	mov    ebx,0x11
c0004726:	68 00 02 00 00       	push   0x200
c000472b:	e8 40 14 00 00       	call   c0005b70 <ff_memalloc>
c0004730:	83 c4 10             	add    esp,0x10
c0004733:	85 c0                	test   eax,eax
c0004735:	89 c6                	mov    esi,eax
c0004737:	74 3e                	je     c0004777 <f_stat+0x76>
c0004739:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000473c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004740:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004743:	89 e0                	mov    eax,esp
c0004745:	e8 50 f2 ff ff       	call   c000399a <follow_path>
c000474a:	85 c0                	test   eax,eax
c000474c:	89 c3                	mov    ebx,eax
c000474e:	75 1b                	jne    c000476b <f_stat+0x6a>
c0004750:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004755:	78 0f                	js     c0004766 <f_stat+0x65>
c0004757:	85 ff                	test   edi,edi
c0004759:	74 10                	je     c000476b <f_stat+0x6a>
c000475b:	89 fa                	mov    edx,edi
c000475d:	89 e0                	mov    eax,esp
c000475f:	e8 80 e8 ff ff       	call   c0002fe4 <get_fileinfo>
c0004764:	eb 05                	jmp    c000476b <f_stat+0x6a>
c0004766:	bb 06 00 00 00       	mov    ebx,0x6
c000476b:	83 ec 0c             	sub    esp,0xc
c000476e:	56                   	push   esi
c000476f:	e8 10 14 00 00       	call   c0005b84 <ff_memfree>
c0004774:	83 c4 10             	add    esp,0x10
c0004777:	83 c4 30             	add    esp,0x30
c000477a:	89 d8                	mov    eax,ebx
c000477c:	5b                   	pop    ebx
c000477d:	5e                   	pop    esi
c000477e:	5f                   	pop    edi
c000477f:	c3                   	ret    

c0004780 <f_getfree>:
c0004780:	55                   	push   ebp
c0004781:	31 c9                	xor    ecx,ecx
c0004783:	57                   	push   edi
c0004784:	56                   	push   esi
c0004785:	53                   	push   ebx
c0004786:	83 ec 2c             	sub    esp,0x2c
c0004789:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000478d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004791:	e8 14 dd ff ff       	call   c00024aa <mount_volume>
c0004796:	85 c0                	test   eax,eax
c0004798:	89 c6                	mov    esi,eax
c000479a:	0f 85 da 00 00 00    	jne    c000487a <f_getfree+0xfa>
c00047a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00047a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00047a8:	89 18                	mov    DWORD PTR [eax],ebx
c00047aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00047ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047b0:	8d 57 fe             	lea    edx,[edi-0x2]
c00047b3:	39 d0                	cmp    eax,edx
c00047b5:	77 0b                	ja     c00047c2 <f_getfree+0x42>
c00047b7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00047bb:	89 01                	mov    DWORD PTR [ecx],eax
c00047bd:	e9 b8 00 00 00       	jmp    c000487a <f_getfree+0xfa>
c00047c2:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c00047c5:	75 29                	jne    c00047f0 <f_getfree+0x70>
c00047c7:	bf 02 00 00 00       	mov    edi,0x2
c00047cc:	31 ed                	xor    ebp,ebp
c00047ce:	89 fa                	mov    edx,edi
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	e8 3c ea ff ff       	call   c0003213 <get_fat.isra.2>
c00047d7:	83 f8 ff             	cmp    eax,0xffffffff
c00047da:	74 7d                	je     c0004859 <f_getfree+0xd9>
c00047dc:	83 f8 01             	cmp    eax,0x1
c00047df:	74 7f                	je     c0004860 <f_getfree+0xe0>
c00047e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047e5:	83 d5 00             	adc    ebp,0x0
c00047e8:	47                   	inc    edi
c00047e9:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c00047ec:	77 e0                	ja     c00047ce <f_getfree+0x4e>
c00047ee:	eb 79                	jmp    c0004869 <f_getfree+0xe9>
c00047f0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00047f3:	31 ed                	xor    ebp,ebp
c00047f5:	31 db                	xor    ebx,ebx
c00047f7:	85 db                	test   ebx,ebx
c00047f9:	75 18                	jne    c0004813 <f_getfree+0x93>
c00047fb:	8d 42 01             	lea    eax,[edx+0x1]
c00047fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004802:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004806:	e8 42 db ff ff       	call   c000234d <move_window>
c000480b:	85 c0                	test   eax,eax
c000480d:	75 58                	jne    c0004867 <f_getfree+0xe7>
c000480f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004813:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004817:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000481b:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c000481e:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004822:	75 13                	jne    c0004837 <f_getfree+0xb7>
c0004824:	e8 10 d6 ff ff       	call   c0001e39 <ld_word>
c0004829:	0f b7 c0             	movzx  eax,ax
c000482c:	83 f8 01             	cmp    eax,0x1
c000482f:	83 d5 00             	adc    ebp,0x0
c0004832:	83 c3 02             	add    ebx,0x2
c0004835:	eb 13                	jmp    c000484a <f_getfree+0xca>
c0004837:	e8 0a d6 ff ff       	call   c0001e46 <ld_dword>
c000483c:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004841:	83 f8 01             	cmp    eax,0x1
c0004844:	83 d5 00             	adc    ebp,0x0
c0004847:	83 c3 04             	add    ebx,0x4
c000484a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004850:	4f                   	dec    edi
c0004851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004855:	75 a0                	jne    c00047f7 <f_getfree+0x77>
c0004857:	eb 10                	jmp    c0004869 <f_getfree+0xe9>
c0004859:	be 01 00 00 00       	mov    esi,0x1
c000485e:	eb 09                	jmp    c0004869 <f_getfree+0xe9>
c0004860:	be 02 00 00 00       	mov    esi,0x2
c0004865:	eb 02                	jmp    c0004869 <f_getfree+0xe9>
c0004867:	89 c6                	mov    esi,eax
c0004869:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000486d:	89 28                	mov    DWORD PTR [eax],ebp
c000486f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004873:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004877:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000487a:	83 c4 2c             	add    esp,0x2c
c000487d:	89 f0                	mov    eax,esi
c000487f:	5b                   	pop    ebx
c0004880:	5e                   	pop    esi
c0004881:	5f                   	pop    edi
c0004882:	5d                   	pop    ebp
c0004883:	c3                   	ret    

c0004884 <f_truncate>:
c0004884:	56                   	push   esi
c0004885:	53                   	push   ebx
c0004886:	83 ec 14             	sub    esp,0x14
c0004889:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000488d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004891:	89 d8                	mov    eax,ebx
c0004893:	e8 0a da ff ff       	call   c00022a2 <validate>
c0004898:	85 c0                	test   eax,eax
c000489a:	89 c6                	mov    esi,eax
c000489c:	0f 85 be 00 00 00    	jne    c0004960 <f_truncate+0xdc>
c00048a2:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00048a6:	85 f6                	test   esi,esi
c00048a8:	0f 85 b2 00 00 00    	jne    c0004960 <f_truncate+0xdc>
c00048ae:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00048b2:	0f 84 a3 00 00 00    	je     c000495b <f_truncate+0xd7>
c00048b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00048bb:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00048be:	0f 83 9c 00 00 00    	jae    c0004960 <f_truncate+0xdc>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	75 15                	jne    c00048dd <f_truncate+0x59>
c00048c8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 3e ec ff ff       	call   c0003512 <remove_chain>
c00048d4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00048db:	eb 35                	jmp    c0004912 <f_truncate+0x8e>
c00048dd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00048e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00048e2:	e8 2c e9 ff ff       	call   c0003213 <get_fat.isra.2>
c00048e7:	89 c2                	mov    edx,eax
c00048e9:	b8 01 00 00 00       	mov    eax,0x1
c00048ee:	83 fa ff             	cmp    edx,0xffffffff
c00048f1:	74 1f                	je     c0004912 <f_truncate+0x8e>
c00048f3:	83 fa 01             	cmp    edx,0x1
c00048f6:	b8 02 00 00 00       	mov    eax,0x2
c00048fb:	74 15                	je     c0004912 <f_truncate+0x8e>
c00048fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004901:	31 c0                	xor    eax,eax
c0004903:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004906:	76 0a                	jbe    c0004912 <f_truncate+0x8e>
c0004908:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000490b:	89 d8                	mov    eax,ebx
c000490d:	e8 00 ec ff ff       	call   c0003512 <remove_chain>
c0004912:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004915:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004918:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000491b:	80 ca 40             	or     dl,0x40
c000491e:	85 c0                	test   eax,eax
c0004920:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004923:	75 2f                	jne    c0004954 <f_truncate+0xd0>
c0004925:	84 d2                	test   dl,dl
c0004927:	79 37                	jns    c0004960 <f_truncate+0xdc>
c0004929:	6a 01                	push   0x1
c000492b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000492e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004931:	50                   	push   eax
c0004932:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004936:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000493a:	50                   	push   eax
c000493b:	e8 c4 d4 ff ff       	call   c0001e04 <disk_write>
c0004940:	83 c4 10             	add    esp,0x10
c0004943:	85 c0                	test   eax,eax
c0004945:	75 08                	jne    c000494f <f_truncate+0xcb>
c0004947:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000494b:	31 f6                	xor    esi,esi
c000494d:	eb 11                	jmp    c0004960 <f_truncate+0xdc>
c000494f:	b8 01 00 00 00       	mov    eax,0x1
c0004954:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004957:	89 c6                	mov    esi,eax
c0004959:	eb 05                	jmp    c0004960 <f_truncate+0xdc>
c000495b:	be 07 00 00 00       	mov    esi,0x7
c0004960:	83 c4 14             	add    esp,0x14
c0004963:	89 f0                	mov    eax,esi
c0004965:	5b                   	pop    ebx
c0004966:	5e                   	pop    esi
c0004967:	c3                   	ret    

c0004968 <f_unlink>:
c0004968:	55                   	push   ebp
c0004969:	b9 02 00 00 00       	mov    ecx,0x2
c000496e:	57                   	push   edi
c000496f:	56                   	push   esi
c0004970:	53                   	push   ebx
c0004971:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004977:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000497b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004982:	e8 23 db ff ff       	call   c00024aa <mount_volume>
c0004987:	85 c0                	test   eax,eax
c0004989:	0f 85 ec 00 00 00    	jne    c0004a7b <f_unlink+0x113>
c000498f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004993:	83 ec 0c             	sub    esp,0xc
c0004996:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000499a:	68 00 02 00 00       	push   0x200
c000499f:	e8 cc 11 00 00       	call   c0005b70 <ff_memalloc>
c00049a4:	83 c4 10             	add    esp,0x10
c00049a7:	89 c6                	mov    esi,eax
c00049a9:	b8 11 00 00 00       	mov    eax,0x11
c00049ae:	85 f6                	test   esi,esi
c00049b0:	0f 84 c5 00 00 00    	je     c0004a7b <f_unlink+0x113>
c00049b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049ba:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00049c1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049c8:	e8 cd ef ff ff       	call   c000399a <follow_path>
c00049cd:	85 c0                	test   eax,eax
c00049cf:	0f 85 92 00 00 00    	jne    c0004a67 <f_unlink+0xff>
c00049d5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00049da:	b8 06 00 00 00       	mov    eax,0x6
c00049df:	0f 88 82 00 00 00    	js     c0004a67 <f_unlink+0xff>
c00049e5:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c00049e9:	88 d8                	mov    al,bl
c00049eb:	24 01                	and    al,0x1
c00049ed:	74 07                	je     c00049f6 <f_unlink+0x8e>
c00049ef:	b8 07 00 00 00       	mov    eax,0x7
c00049f4:	eb 71                	jmp    c0004a67 <f_unlink+0xff>
c00049f6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00049fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00049fe:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a01:	e8 bd e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a06:	80 e3 10             	and    bl,0x10
c0004a09:	89 c7                	mov    edi,eax
c0004a0b:	75 20                	jne    c0004a2d <f_unlink+0xc5>
c0004a0d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a11:	e8 08 ee ff ff       	call   c000381e <dir_remove>
c0004a16:	85 c0                	test   eax,eax
c0004a18:	75 40                	jne    c0004a5a <f_unlink+0xf2>
c0004a1a:	85 ff                	test   edi,edi
c0004a1c:	74 3c                	je     c0004a5a <f_unlink+0xf2>
c0004a1e:	31 c9                	xor    ecx,ecx
c0004a20:	89 fa                	mov    edx,edi
c0004a22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a26:	e8 e7 ea ff ff       	call   c0003512 <remove_chain>
c0004a2b:	eb 2d                	jmp    c0004a5a <f_unlink+0xf2>
c0004a2d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004a31:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a35:	31 d2                	xor    edx,edx
c0004a37:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004a3b:	e8 d5 e8 ff ff       	call   c0003315 <dir_sdi>
c0004a40:	85 c0                	test   eax,eax
c0004a42:	75 23                	jne    c0004a67 <f_unlink+0xff>
c0004a44:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	e8 b2 ec ff ff       	call   c0003701 <dir_read>
c0004a4f:	85 c0                	test   eax,eax
c0004a51:	74 9c                	je     c00049ef <f_unlink+0x87>
c0004a53:	83 f8 04             	cmp    eax,0x4
c0004a56:	75 0f                	jne    c0004a67 <f_unlink+0xff>
c0004a58:	eb b3                	jmp    c0004a0d <f_unlink+0xa5>
c0004a5a:	85 c0                	test   eax,eax
c0004a5c:	75 09                	jne    c0004a67 <f_unlink+0xff>
c0004a5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a62:	e8 29 e3 ff ff       	call   c0002d90 <sync_fs>
c0004a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a6b:	83 ec 0c             	sub    esp,0xc
c0004a6e:	56                   	push   esi
c0004a6f:	e8 10 11 00 00       	call   c0005b84 <ff_memfree>
c0004a74:	83 c4 10             	add    esp,0x10
c0004a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a7b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004a81:	5b                   	pop    ebx
c0004a82:	5e                   	pop    esi
c0004a83:	5f                   	pop    edi
c0004a84:	5d                   	pop    ebp
c0004a85:	c3                   	ret    

c0004a86 <f_mkdir>:
c0004a86:	57                   	push   edi
c0004a87:	b9 02 00 00 00       	mov    ecx,0x2
c0004a8c:	56                   	push   esi
c0004a8d:	53                   	push   ebx
c0004a8e:	83 ec 50             	sub    esp,0x50
c0004a91:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a95:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004a99:	e8 0c da ff ff       	call   c00024aa <mount_volume>
c0004a9e:	85 c0                	test   eax,eax
c0004aa0:	89 c3                	mov    ebx,eax
c0004aa2:	0f 85 70 01 00 00    	jne    c0004c18 <f_mkdir+0x192>
c0004aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aac:	83 ec 0c             	sub    esp,0xc
c0004aaf:	bb 11 00 00 00       	mov    ebx,0x11
c0004ab4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ab8:	68 00 02 00 00       	push   0x200
c0004abd:	e8 ae 10 00 00       	call   c0005b70 <ff_memalloc>
c0004ac2:	83 c4 10             	add    esp,0x10
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	89 c7                	mov    edi,eax
c0004ac9:	0f 84 49 01 00 00    	je     c0004c18 <f_mkdir+0x192>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ad7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004ada:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ade:	e8 b7 ee ff ff       	call   c000399a <follow_path>
c0004ae3:	85 c0                	test   eax,eax
c0004ae5:	89 c3                	mov    ebx,eax
c0004ae7:	74 3e                	je     c0004b27 <f_mkdir+0xa1>
c0004ae9:	83 f8 04             	cmp    eax,0x4
c0004aec:	75 3e                	jne    c0004b2c <f_mkdir+0xa6>
c0004aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af2:	31 d2                	xor    edx,edx
c0004af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004af8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004afc:	e8 dc e8 ff ff       	call   c00033dd <create_chain>
c0004b01:	85 c0                	test   eax,eax
c0004b03:	89 c6                	mov    esi,eax
c0004b05:	74 0c                	je     c0004b13 <f_mkdir+0x8d>
c0004b07:	83 f8 01             	cmp    eax,0x1
c0004b0a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b0f:	74 07                	je     c0004b18 <f_mkdir+0x92>
c0004b11:	eb 2a                	jmp    c0004b3d <f_mkdir+0xb7>
c0004b13:	bb 07 00 00 00       	mov    ebx,0x7
c0004b18:	31 c9                	xor    ecx,ecx
c0004b1a:	89 f2                	mov    edx,esi
c0004b1c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b20:	e8 ed e9 ff ff       	call   c0003512 <remove_chain>
c0004b25:	eb 05                	jmp    c0004b2c <f_mkdir+0xa6>
c0004b27:	bb 08 00 00 00       	mov    ebx,0x8
c0004b2c:	83 ec 0c             	sub    esp,0xc
c0004b2f:	57                   	push   edi
c0004b30:	e8 4f 10 00 00       	call   c0005b84 <ff_memfree>
c0004b35:	83 c4 10             	add    esp,0x10
c0004b38:	e9 db 00 00 00       	jmp    c0004c18 <f_mkdir+0x192>
c0004b3d:	83 f8 ff             	cmp    eax,0xffffffff
c0004b40:	bb 01 00 00 00       	mov    ebx,0x1
c0004b45:	74 d1                	je     c0004b18 <f_mkdir+0x92>
c0004b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4b:	89 f2                	mov    edx,esi
c0004b4d:	e8 a9 dd ff ff       	call   c00028fb <dir_clear>
c0004b52:	85 c0                	test   eax,eax
c0004b54:	89 c3                	mov    ebx,eax
c0004b56:	75 c0                	jne    c0004b18 <f_mkdir+0x92>
c0004b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b5c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004b61:	ba 20 00 00 00       	mov    edx,0x20
c0004b66:	83 c0 34             	add    eax,0x34
c0004b69:	e8 0c d3 ff ff       	call   c0001e7a <mem_set>
c0004b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b77:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004b7b:	83 c0 4a             	add    eax,0x4a
c0004b7e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004b82:	e8 db d2 ff ff       	call   c0001e62 <st_dword>
c0004b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8b:	89 f1                	mov    ecx,esi
c0004b8d:	8d 50 34             	lea    edx,[eax+0x34]
c0004b90:	e8 56 e6 ff ff       	call   c00031eb <st_clust.isra.1>
c0004b95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b99:	b9 20 00 00 00       	mov    ecx,0x20
c0004b9e:	8d 50 34             	lea    edx,[eax+0x34]
c0004ba1:	83 c0 54             	add    eax,0x54
c0004ba4:	e8 bc d2 ff ff       	call   c0001e65 <mem_cpy>
c0004ba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004bb1:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004bb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004bb8:	e8 2e e6 ff ff       	call   c00031eb <st_clust.isra.1>
c0004bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bc1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004bc5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bc9:	e8 68 ee ff ff       	call   c0003a36 <dir_register>
c0004bce:	85 c0                	test   eax,eax
c0004bd0:	89 c3                	mov    ebx,eax
c0004bd2:	0f 85 40 ff ff ff    	jne    c0004b18 <f_mkdir+0x92>
c0004bd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bdc:	ba 00 00 21 50       	mov    edx,0x50210000
c0004be1:	83 c0 16             	add    eax,0x16
c0004be4:	e8 79 d2 ff ff       	call   c0001e62 <st_dword>
c0004be9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004bed:	89 f1                	mov    ecx,esi
c0004bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf3:	e8 f3 e5 ff ff       	call   c00031eb <st_clust.isra.1>
c0004bf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bfc:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c04:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c0c:	e8 7f e1 ff ff       	call   c0002d90 <sync_fs>
c0004c11:	89 c3                	mov    ebx,eax
c0004c13:	e9 14 ff ff ff       	jmp    c0004b2c <f_mkdir+0xa6>
c0004c18:	83 c4 50             	add    esp,0x50
c0004c1b:	89 d8                	mov    eax,ebx
c0004c1d:	5b                   	pop    ebx
c0004c1e:	5e                   	pop    esi
c0004c1f:	5f                   	pop    edi
c0004c20:	c3                   	ret    

c0004c21 <f_rename>:
c0004c21:	57                   	push   edi
c0004c22:	56                   	push   esi
c0004c23:	53                   	push   ebx
c0004c24:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004c2a:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004c31:	e8 27 d6 ff ff       	call   c000225d <get_ldnumber>
c0004c36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c3a:	b9 02 00 00 00       	mov    ecx,0x2
c0004c3f:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004c46:	e8 5f d8 ff ff       	call   c00024aa <mount_volume>
c0004c4b:	85 c0                	test   eax,eax
c0004c4d:	0f 85 7c 01 00 00    	jne    c0004dcf <f_rename+0x1ae>
c0004c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c57:	83 ec 0c             	sub    esp,0xc
c0004c5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004c5e:	68 00 02 00 00       	push   0x200
c0004c63:	e8 08 0f 00 00       	call   c0005b70 <ff_memalloc>
c0004c68:	83 c4 10             	add    esp,0x10
c0004c6b:	89 c6                	mov    esi,eax
c0004c6d:	b8 11 00 00 00       	mov    eax,0x11
c0004c72:	85 f6                	test   esi,esi
c0004c74:	0f 84 55 01 00 00    	je     c0004dcf <f_rename+0x1ae>
c0004c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c7e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004c85:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004c88:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004c8c:	e8 09 ed ff ff       	call   c000399a <follow_path>
c0004c91:	85 c0                	test   eax,eax
c0004c93:	0f 85 22 01 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004c99:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004c9e:	b8 06 00 00 00       	mov    eax,0x6
c0004ca3:	0f 85 12 01 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004ca9:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004cad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cb1:	b9 20 00 00 00       	mov    ecx,0x20
c0004cb6:	e8 aa d1 ff ff       	call   c0001e65 <mem_cpy>
c0004cbb:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004cbf:	b9 30 00 00 00       	mov    ecx,0x30
c0004cc4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004cc8:	e8 98 d1 ff ff       	call   c0001e65 <mem_cpy>
c0004ccd:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004cd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004cd8:	e8 bd ec ff ff       	call   c000399a <follow_path>
c0004cdd:	85 c0                	test   eax,eax
c0004cdf:	75 20                	jne    c0004d01 <f_rename+0xe0>
c0004ce1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004ce5:	b8 08 00 00 00       	mov    eax,0x8
c0004cea:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004cee:	0f 85 c7 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004cf4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004cf8:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004cff:	eb 03                	jmp    c0004d04 <f_rename+0xe3>
c0004d01:	83 f8 04             	cmp    eax,0x4
c0004d04:	0f 85 b1 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004d0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d0e:	e8 23 ed ff ff       	call   c0003a36 <dir_register>
c0004d13:	85 c0                	test   eax,eax
c0004d15:	0f 85 a0 00 00 00    	jne    c0004dbb <f_rename+0x19a>
c0004d1b:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004d22:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004d26:	b9 13 00 00 00       	mov    ecx,0x13
c0004d2b:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004d2e:	e8 32 d1 ff ff       	call   c0001e65 <mem_cpy>
c0004d33:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004d37:	88 c2                	mov    dl,al
c0004d39:	80 e2 10             	and    dl,0x10
c0004d3c:	75 02                	jne    c0004d40 <f_rename+0x11f>
c0004d3e:	0c 20                	or     al,0x20
c0004d40:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004d43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d47:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d4b:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004d4f:	74 54                	je     c0004da5 <f_rename+0x184>
c0004d51:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004d55:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004d59:	74 4a                	je     c0004da5 <f_rename+0x184>
c0004d5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004d5f:	89 da                	mov    edx,ebx
c0004d61:	8a 07                	mov    al,BYTE PTR [edi]
c0004d63:	e8 5b e4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004d68:	89 c2                	mov    edx,eax
c0004d6a:	89 f8                	mov    eax,edi
c0004d6c:	e8 07 d3 ff ff       	call   c0002078 <clst2sect>
c0004d71:	89 c2                	mov    edx,eax
c0004d73:	b8 02 00 00 00       	mov    eax,0x2
c0004d78:	85 d2                	test   edx,edx
c0004d7a:	74 3f                	je     c0004dbb <f_rename+0x19a>
c0004d7c:	89 f8                	mov    eax,edi
c0004d7e:	e8 ca d5 ff ff       	call   c000234d <move_window>
c0004d83:	85 c0                	test   eax,eax
c0004d85:	75 34                	jne    c0004dbb <f_rename+0x19a>
c0004d87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004d8f:	75 14                	jne    c0004da5 <f_rename+0x184>
c0004d91:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004d95:	8d 50 54             	lea    edx,[eax+0x54]
c0004d98:	e8 4e e4 ff ff       	call   c00031eb <st_clust.isra.1>
c0004d9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da5:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004da9:	e8 70 ea ff ff       	call   c000381e <dir_remove>
c0004dae:	85 c0                	test   eax,eax
c0004db0:	75 09                	jne    c0004dbb <f_rename+0x19a>
c0004db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004db6:	e8 d5 df ff ff       	call   c0002d90 <sync_fs>
c0004dbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004dbf:	83 ec 0c             	sub    esp,0xc
c0004dc2:	56                   	push   esi
c0004dc3:	e8 bc 0d 00 00       	call   c0005b84 <ff_memfree>
c0004dc8:	83 c4 10             	add    esp,0x10
c0004dcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcf:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004dd5:	5b                   	pop    ebx
c0004dd6:	5e                   	pop    esi
c0004dd7:	5f                   	pop    edi
c0004dd8:	c3                   	ret    

c0004dd9 <f_chmod>:
c0004dd9:	56                   	push   esi
c0004dda:	b9 02 00 00 00       	mov    ecx,0x2
c0004ddf:	53                   	push   ebx
c0004de0:	83 ec 54             	sub    esp,0x54
c0004de3:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004de7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004deb:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004def:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004df3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004df7:	e8 ae d6 ff ff       	call   c00024aa <mount_volume>
c0004dfc:	85 c0                	test   eax,eax
c0004dfe:	0f 85 81 00 00 00    	jne    c0004e85 <f_chmod+0xac>
c0004e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e08:	83 ec 0c             	sub    esp,0xc
c0004e0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e0f:	68 00 02 00 00       	push   0x200
c0004e14:	e8 57 0d 00 00       	call   c0005b70 <ff_memalloc>
c0004e19:	83 c4 10             	add    esp,0x10
c0004e1c:	89 c6                	mov    esi,eax
c0004e1e:	b8 11 00 00 00       	mov    eax,0x11
c0004e23:	85 f6                	test   esi,esi
c0004e25:	74 5e                	je     c0004e85 <f_chmod+0xac>
c0004e27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e32:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e36:	e8 5f eb ff ff       	call   c000399a <follow_path>
c0004e3b:	85 c0                	test   eax,eax
c0004e3d:	75 32                	jne    c0004e71 <f_chmod+0x98>
c0004e3f:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e44:	b8 06 00 00 00       	mov    eax,0x6
c0004e49:	75 26                	jne    c0004e71 <f_chmod+0x98>
c0004e4b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e4f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004e52:	30 c3                	xor    bl,al
c0004e54:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004e58:	80 e3 27             	and    bl,0x27
c0004e5b:	30 c3                	xor    bl,al
c0004e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e61:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004e64:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e6c:	e8 1f df ff ff       	call   c0002d90 <sync_fs>
c0004e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e75:	83 ec 0c             	sub    esp,0xc
c0004e78:	56                   	push   esi
c0004e79:	e8 06 0d 00 00       	call   c0005b84 <ff_memfree>
c0004e7e:	83 c4 10             	add    esp,0x10
c0004e81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e85:	83 c4 54             	add    esp,0x54
c0004e88:	5b                   	pop    ebx
c0004e89:	5e                   	pop    esi
c0004e8a:	c3                   	ret    

c0004e8b <f_utime>:
c0004e8b:	56                   	push   esi
c0004e8c:	b9 02 00 00 00       	mov    ecx,0x2
c0004e91:	53                   	push   ebx
c0004e92:	83 ec 54             	sub    esp,0x54
c0004e95:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e99:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004e9d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ea1:	e8 04 d6 ff ff       	call   c00024aa <mount_volume>
c0004ea6:	85 c0                	test   eax,eax
c0004ea8:	0f 85 85 00 00 00    	jne    c0004f33 <f_utime+0xa8>
c0004eae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eb2:	83 ec 0c             	sub    esp,0xc
c0004eb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eb9:	68 00 02 00 00       	push   0x200
c0004ebe:	e8 ad 0c 00 00       	call   c0005b70 <ff_memalloc>
c0004ec3:	83 c4 10             	add    esp,0x10
c0004ec6:	89 c3                	mov    ebx,eax
c0004ec8:	b8 11 00 00 00       	mov    eax,0x11
c0004ecd:	85 db                	test   ebx,ebx
c0004ecf:	74 62                	je     c0004f33 <f_utime+0xa8>
c0004ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed5:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ed9:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004edc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ee0:	e8 b5 ea ff ff       	call   c000399a <follow_path>
c0004ee5:	85 c0                	test   eax,eax
c0004ee7:	75 36                	jne    c0004f1f <f_utime+0x94>
c0004ee9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004eee:	b8 06 00 00 00       	mov    eax,0x6
c0004ef3:	75 2a                	jne    c0004f1f <f_utime+0x94>
c0004ef5:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004ef9:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004efd:	c1 e2 10             	shl    edx,0x10
c0004f00:	09 c2                	or     edx,eax
c0004f02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f06:	83 c0 16             	add    eax,0x16
c0004f09:	e8 54 cf ff ff       	call   c0001e62 <st_dword>
c0004f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f12:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1a:	e8 71 de ff ff       	call   c0002d90 <sync_fs>
c0004f1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f23:	83 ec 0c             	sub    esp,0xc
c0004f26:	53                   	push   ebx
c0004f27:	e8 58 0c 00 00       	call   c0005b84 <ff_memfree>
c0004f2c:	83 c4 10             	add    esp,0x10
c0004f2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f33:	83 c4 54             	add    esp,0x54
c0004f36:	5b                   	pop    ebx
c0004f37:	5e                   	pop    esi
c0004f38:	c3                   	ret    

c0004f39 <f_getlabel>:
c0004f39:	55                   	push   ebp
c0004f3a:	31 c9                	xor    ecx,ecx
c0004f3c:	57                   	push   edi
c0004f3d:	56                   	push   esi
c0004f3e:	53                   	push   ebx
c0004f3f:	83 ec 5c             	sub    esp,0x5c
c0004f42:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f46:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f4a:	e8 5b d5 ff ff       	call   c00024aa <mount_volume>
c0004f4f:	85 c0                	test   eax,eax
c0004f51:	89 c3                	mov    ebx,eax
c0004f53:	0f 85 de 00 00 00    	jne    c0005037 <f_getlabel+0xfe>
c0004f59:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004f5e:	0f 84 d3 00 00 00    	je     c0005037 <f_getlabel+0xfe>
c0004f64:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f70:	31 d2                	xor    edx,edx
c0004f72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004f76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f7a:	e8 96 e3 ff ff       	call   c0003315 <dir_sdi>
c0004f7f:	85 c0                	test   eax,eax
c0004f81:	89 c3                	mov    ebx,eax
c0004f83:	0f 85 a0 00 00 00    	jne    c0005029 <f_getlabel+0xf0>
c0004f89:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f8d:	ba 01 00 00 00       	mov    edx,0x1
c0004f92:	e8 6a e7 ff ff       	call   c0003701 <dir_read>
c0004f97:	85 c0                	test   eax,eax
c0004f99:	89 c3                	mov    ebx,eax
c0004f9b:	0f 85 88 00 00 00    	jne    c0005029 <f_getlabel+0xf0>
c0004fa1:	31 f6                	xor    esi,esi
c0004fa3:	31 c9                	xor    ecx,ecx
c0004fa5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004fa9:	8d 79 01             	lea    edi,[ecx+0x1]
c0004fac:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004fb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb5:	89 c2                	mov    edx,eax
c0004fb7:	e8 fc ce ff ff       	call   c0001eb8 <dbc_1st>
c0004fbc:	85 c0                	test   eax,eax
c0004fbe:	74 16                	je     c0004fd6 <f_getlabel+0x9d>
c0004fc0:	83 ff 0b             	cmp    edi,0xb
c0004fc3:	74 11                	je     c0004fd6 <f_getlabel+0x9d>
c0004fc5:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c0004fca:	c1 e2 08             	shl    edx,0x8
c0004fcd:	8d 79 02             	lea    edi,[ecx+0x2]
c0004fd0:	09 d0                	or     eax,edx
c0004fd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fd6:	50                   	push   eax
c0004fd7:	50                   	push   eax
c0004fd8:	68 b5 01 00 00       	push   0x1b5
c0004fdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004fe1:	e8 4e 0c 00 00       	call   c0005c34 <ff_oem2uni>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	0f b7 c0             	movzx  eax,ax
c0004fec:	85 c0                	test   eax,eax
c0004fee:	74 22                	je     c0005012 <f_getlabel+0xd9>
c0004ff0:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004ff4:	b9 04 00 00 00       	mov    ecx,0x4
c0004ff9:	01 f2                	add    edx,esi
c0004ffb:	e8 88 cf ff ff       	call   c0001f88 <put_utf>
c0005000:	84 c0                	test   al,al
c0005002:	74 0e                	je     c0005012 <f_getlabel+0xd9>
c0005004:	0f b6 c0             	movzx  eax,al
c0005007:	01 c6                	add    esi,eax
c0005009:	83 ff 0b             	cmp    edi,0xb
c000500c:	74 06                	je     c0005014 <f_getlabel+0xdb>
c000500e:	89 f9                	mov    ecx,edi
c0005010:	eb 93                	jmp    c0004fa5 <f_getlabel+0x6c>
c0005012:	31 f6                	xor    esi,esi
c0005014:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c0005018:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c000501c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000501f:	74 16                	je     c0005037 <f_getlabel+0xfe>
c0005021:	4e                   	dec    esi
c0005022:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0005025:	74 f1                	je     c0005018 <f_getlabel+0xdf>
c0005027:	eb 0e                	jmp    c0005037 <f_getlabel+0xfe>
c0005029:	83 fb 04             	cmp    ebx,0x4
c000502c:	75 09                	jne    c0005037 <f_getlabel+0xfe>
c000502e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005032:	31 db                	xor    ebx,ebx
c0005034:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005037:	85 db                	test   ebx,ebx
c0005039:	75 48                	jne    c0005083 <f_getlabel+0x14a>
c000503b:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005040:	74 41                	je     c0005083 <f_getlabel+0x14a>
c0005042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005046:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005049:	e8 ff d2 ff ff       	call   c000234d <move_window>
c000504e:	85 c0                	test   eax,eax
c0005050:	89 c3                	mov    ebx,eax
c0005052:	75 2f                	jne    c0005083 <f_getlabel+0x14a>
c0005054:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005058:	b8 43 00 00 00       	mov    eax,0x43
c000505d:	8a 0a                	mov    cl,BYTE PTR [edx]
c000505f:	80 f9 03             	cmp    cl,0x3
c0005062:	74 10                	je     c0005074 <f_getlabel+0x13b>
c0005064:	80 f9 04             	cmp    cl,0x4
c0005067:	b8 64 00 00 00       	mov    eax,0x64
c000506c:	b9 27 00 00 00       	mov    ecx,0x27
c0005071:	0f 45 c1             	cmovne eax,ecx
c0005074:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005078:	e8 c9 cd ff ff       	call   c0001e46 <ld_dword>
c000507d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005081:	89 07                	mov    DWORD PTR [edi],eax
c0005083:	83 c4 5c             	add    esp,0x5c
c0005086:	89 d8                	mov    eax,ebx
c0005088:	5b                   	pop    ebx
c0005089:	5e                   	pop    esi
c000508a:	5f                   	pop    edi
c000508b:	5d                   	pop    ebp
c000508c:	c3                   	ret    

c000508d <f_setlabel>:
c000508d:	56                   	push   esi
c000508e:	b9 02 00 00 00       	mov    ecx,0x2
c0005093:	53                   	push   ebx
c0005094:	83 ec 64             	sub    esp,0x64
c0005097:	8d 54 24 14          	lea    edx,[esp+0x14]
c000509b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000509f:	e8 06 d4 ff ff       	call   c00024aa <mount_volume>
c00050a4:	85 c0                	test   eax,eax
c00050a6:	89 c6                	mov    esi,eax
c00050a8:	0f 85 67 01 00 00    	jne    c0005215 <f_setlabel+0x188>
c00050ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00050b3:	ba 20 00 00 00       	mov    edx,0x20
c00050b8:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00050bc:	31 db                	xor    ebx,ebx
c00050be:	e8 b7 cd ff ff       	call   c0001e7a <mem_set>
c00050c3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00050c7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00050ca:	76 63                	jbe    c000512f <f_setlabel+0xa2>
c00050cc:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d0:	e8 e9 cd ff ff       	call   c0001ebe <tchar2uni>
c00050d5:	3d ff ff 00 00       	cmp    eax,0xffff
c00050da:	76 0a                	jbe    c00050e6 <f_setlabel+0x59>
c00050dc:	be 06 00 00 00       	mov    esi,0x6
c00050e1:	e9 2f 01 00 00       	jmp    c0005215 <f_setlabel+0x188>
c00050e6:	83 ec 0c             	sub    esp,0xc
c00050e9:	50                   	push   eax
c00050ea:	e8 bd 0b 00 00       	call   c0005cac <ff_wtoupper>
c00050ef:	5a                   	pop    edx
c00050f0:	59                   	pop    ecx
c00050f1:	68 b5 01 00 00       	push   0x1b5
c00050f6:	50                   	push   eax
c00050f7:	e8 9c 0a 00 00       	call   c0005b98 <ff_uni2oem>
c00050fc:	83 c4 10             	add    esp,0x10
c00050ff:	0f b7 c8             	movzx  ecx,ax
c0005102:	85 c9                	test   ecx,ecx
c0005104:	74 d6                	je     c00050dc <f_setlabel+0x4f>
c0005106:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000510a:	89 ca                	mov    edx,ecx
c000510c:	b8 f0 f0 01 c0       	mov    eax,0xc001f0f0
c0005111:	e8 91 cd ff ff       	call   c0001ea7 <chk_chr>
c0005116:	85 c0                	test   eax,eax
c0005118:	75 c2                	jne    c00050dc <f_setlabel+0x4f>
c000511a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000511e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0005124:	0f 87 c9 00 00 00    	ja     c00051f3 <f_setlabel+0x166>
c000512a:	e9 dc 00 00 00       	jmp    c000520b <f_setlabel+0x17e>
c000512f:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c0005134:	74 a6                	je     c00050dc <f_setlabel+0x4f>
c0005136:	85 db                	test   ebx,ebx
c0005138:	74 0e                	je     c0005148 <f_setlabel+0xbb>
c000513a:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c000513f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005142:	75 04                	jne    c0005148 <f_setlabel+0xbb>
c0005144:	89 c3                	mov    ebx,eax
c0005146:	eb ee                	jmp    c0005136 <f_setlabel+0xa9>
c0005148:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0005150:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005154:	31 d2                	xor    edx,edx
c0005156:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000515a:	8d 44 24 30          	lea    eax,[esp+0x30]
c000515e:	e8 b2 e1 ff ff       	call   c0003315 <dir_sdi>
c0005163:	85 c0                	test   eax,eax
c0005165:	89 c6                	mov    esi,eax
c0005167:	0f 85 a8 00 00 00    	jne    c0005215 <f_setlabel+0x188>
c000516d:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005171:	ba 01 00 00 00       	mov    edx,0x1
c0005176:	e8 86 e5 ff ff       	call   c0003701 <dir_read>
c000517b:	85 c0                	test   eax,eax
c000517d:	75 18                	jne    c0005197 <f_setlabel+0x10a>
c000517f:	85 db                	test   ebx,ebx
c0005181:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005185:	74 0b                	je     c0005192 <f_setlabel+0x105>
c0005187:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000518b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005190:	eb 47                	jmp    c00051d9 <f_setlabel+0x14c>
c0005192:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005195:	eb 47                	jmp    c00051de <f_setlabel+0x151>
c0005197:	83 f8 04             	cmp    eax,0x4
c000519a:	75 53                	jne    c00051ef <f_setlabel+0x162>
c000519c:	85 db                	test   ebx,ebx
c000519e:	74 75                	je     c0005215 <f_setlabel+0x188>
c00051a0:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051a4:	ba 01 00 00 00       	mov    edx,0x1
c00051a9:	e8 f2 e4 ff ff       	call   c00036a0 <dir_alloc>
c00051ae:	85 c0                	test   eax,eax
c00051b0:	89 c6                	mov    esi,eax
c00051b2:	75 61                	jne    c0005215 <f_setlabel+0x188>
c00051b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051b8:	b9 20 00 00 00       	mov    ecx,0x20
c00051bd:	31 d2                	xor    edx,edx
c00051bf:	e8 b6 cc ff ff       	call   c0001e7a <mem_set>
c00051c4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00051cd:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c00051d1:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00051d5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051d9:	e8 87 cc ff ff       	call   c0001e65 <mem_cpy>
c00051de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051ea:	e8 a1 db ff ff       	call   c0002d90 <sync_fs>
c00051ef:	89 c6                	mov    esi,eax
c00051f1:	eb 22                	jmp    c0005215 <f_setlabel+0x188>
c00051f3:	83 fb 09             	cmp    ebx,0x9
c00051f6:	0f 87 e0 fe ff ff    	ja     c00050dc <f_setlabel+0x4f>
c00051fc:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005200:	43                   	inc    ebx
c0005201:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005205:	43                   	inc    ebx
c0005206:	e9 b8 fe ff ff       	jmp    c00050c3 <f_setlabel+0x36>
c000520b:	83 fb 0a             	cmp    ebx,0xa
c000520e:	76 f1                	jbe    c0005201 <f_setlabel+0x174>
c0005210:	e9 c7 fe ff ff       	jmp    c00050dc <f_setlabel+0x4f>
c0005215:	83 c4 64             	add    esp,0x64
c0005218:	89 f0                	mov    eax,esi
c000521a:	5b                   	pop    ebx
c000521b:	5e                   	pop    esi
c000521c:	c3                   	ret    

c000521d <f_expand>:
c000521d:	55                   	push   ebp
c000521e:	57                   	push   edi
c000521f:	56                   	push   esi
c0005220:	53                   	push   ebx
c0005221:	83 ec 2c             	sub    esp,0x2c
c0005224:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0005228:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000522c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005230:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0005234:	89 d8                	mov    eax,ebx
c0005236:	e8 67 d0 ff ff       	call   c00022a2 <validate>
c000523b:	85 c0                	test   eax,eax
c000523d:	89 c6                	mov    esi,eax
c000523f:	0f 85 2c 01 00 00    	jne    c0005371 <f_expand+0x154>
c0005245:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005249:	85 f6                	test   esi,esi
c000524b:	0f 85 20 01 00 00    	jne    c0005371 <f_expand+0x154>
c0005251:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005256:	75 0a                	jne    c0005262 <f_expand+0x45>
c0005258:	be 07 00 00 00       	mov    esi,0x7
c000525d:	e9 0f 01 00 00       	jmp    c0005371 <f_expand+0x154>
c0005262:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005266:	75 f0                	jne    c0005258 <f_expand+0x3b>
c0005268:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000526c:	74 ea                	je     c0005258 <f_expand+0x3b>
c000526e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005272:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005276:	c1 e7 09             	shl    edi,0x9
c0005279:	8d 47 ff             	lea    eax,[edi-0x1]
c000527c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005280:	0f 95 c0             	setne  al
c0005283:	31 d2                	xor    edx,edx
c0005285:	0f b6 e8             	movzx  ebp,al
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	f7 f7                	div    edi
c000528e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005291:	01 e8                	add    eax,ebp
c0005293:	83 ff 01             	cmp    edi,0x1
c0005296:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000529a:	76 05                	jbe    c00052a1 <f_expand+0x84>
c000529c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000529f:	77 05                	ja     c00052a6 <f_expand+0x89>
c00052a1:	bf 02 00 00 00       	mov    edi,0x2
c00052a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00052a9:	89 fd                	mov    ebp,edi
c00052ab:	31 c9                	xor    ecx,ecx
c00052ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00052b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00052b3:	89 ea                	mov    edx,ebp
c00052b5:	45                   	inc    ebp
c00052b6:	e8 58 df ff ff       	call   c0003213 <get_fat.isra.2>
c00052bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00052c3:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00052c6:	77 05                	ja     c00052cd <f_expand+0xb0>
c00052c8:	bd 02 00 00 00       	mov    ebp,0x2
c00052cd:	83 f8 01             	cmp    eax,0x1
c00052d0:	74 20                	je     c00052f2 <f_expand+0xd5>
c00052d2:	83 f8 ff             	cmp    eax,0xffffffff
c00052d5:	74 22                	je     c00052f9 <f_expand+0xdc>
c00052d7:	85 c0                	test   eax,eax
c00052d9:	75 09                	jne    c00052e4 <f_expand+0xc7>
c00052db:	41                   	inc    ecx
c00052dc:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00052e0:	75 07                	jne    c00052e9 <f_expand+0xcc>
c00052e2:	eb 1c                	jmp    c0005300 <f_expand+0xe3>
c00052e4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00052e7:	31 c9                	xor    ecx,ecx
c00052e9:	39 fd                	cmp    ebp,edi
c00052eb:	75 c0                	jne    c00052ad <f_expand+0x90>
c00052ed:	e9 66 ff ff ff       	jmp    c0005258 <f_expand+0x3b>
c00052f2:	be 02 00 00 00       	mov    esi,0x2
c00052f7:	eb 78                	jmp    c0005371 <f_expand+0x154>
c00052f9:	be 01 00 00 00       	mov    esi,0x1
c00052fe:	eb 71                	jmp    c0005371 <f_expand+0x154>
c0005300:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005305:	74 2b                	je     c0005332 <f_expand+0x115>
c0005307:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000530a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000530e:	85 ed                	test   ebp,ebp
c0005310:	74 24                	je     c0005336 <f_expand+0x119>
c0005312:	83 c9 ff             	or     ecx,0xffffffff
c0005315:	83 fd 01             	cmp    ebp,0x1
c0005318:	74 03                	je     c000531d <f_expand+0x100>
c000531a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000531d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005321:	89 fa                	mov    edx,edi
c0005323:	e8 7f d4 ff ff       	call   c00027a7 <put_fat>
c0005328:	85 c0                	test   eax,eax
c000532a:	75 43                	jne    c000536f <f_expand+0x152>
c000532c:	89 f8                	mov    eax,edi
c000532e:	4d                   	dec    ebp
c000532f:	47                   	inc    edi
c0005330:	eb dc                	jmp    c000530e <f_expand+0xf1>
c0005332:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005335:	48                   	dec    eax
c0005336:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000533a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000533f:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005342:	74 2d                	je     c0005371 <f_expand+0x154>
c0005344:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005347:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000534b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000534e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005352:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005355:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005358:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000535b:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000535e:	39 c8                	cmp    eax,ecx
c0005360:	77 0f                	ja     c0005371 <f_expand+0x154>
c0005362:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005366:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c000536a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000536d:	eb 02                	jmp    c0005371 <f_expand+0x154>
c000536f:	89 c6                	mov    esi,eax
c0005371:	83 c4 2c             	add    esp,0x2c
c0005374:	89 f0                	mov    eax,esi
c0005376:	5b                   	pop    ebx
c0005377:	5e                   	pop    esi
c0005378:	5f                   	pop    edi
c0005379:	5d                   	pop    ebp
c000537a:	c3                   	ret    

c000537b <f_mkfs>:
c000537b:	55                   	push   ebp
c000537c:	57                   	push   edi
c000537d:	56                   	push   esi
c000537e:	53                   	push   ebx
c000537f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005384:	83 ec 4c             	sub    esp,0x4c
c0005387:	8d 44 24 60          	lea    eax,[esp+0x60]
c000538b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000538f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005393:	e8 c5 ce ff ff       	call   c000225d <get_ldnumber>
c0005398:	85 c0                	test   eax,eax
c000539a:	0f 88 c6 07 00 00    	js     c0005b66 <f_mkfs+0x7eb>
c00053a0:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c00053a7:	85 d2                	test   edx,edx
c00053a9:	74 03                	je     c00053ae <f_mkfs+0x33>
c00053ab:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00053ae:	85 f6                	test   esi,esi
c00053b0:	75 05                	jne    c00053b7 <f_mkfs+0x3c>
c00053b2:	be e0 f0 01 c0       	mov    esi,0xc001f0e0
c00053b7:	0f b6 c0             	movzx  eax,al
c00053ba:	83 ec 0c             	sub    esp,0xc
c00053bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00053c1:	bb 03 00 00 00       	mov    ebx,0x3
c00053c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053ca:	e8 1c ca ff ff       	call   c0001deb <disk_initialize>
c00053cf:	83 c4 10             	add    esp,0x10
c00053d2:	88 c2                	mov    dl,al
c00053d4:	80 e2 01             	and    dl,0x1
c00053d7:	84 d2                	test   dl,dl
c00053d9:	0f 85 87 07 00 00    	jne    c0005b66 <f_mkfs+0x7eb>
c00053df:	24 04                	and    al,0x4
c00053e1:	bb 0a 00 00 00       	mov    ebx,0xa
c00053e6:	0f 85 7a 07 00 00    	jne    c0005b66 <f_mkfs+0x7eb>
c00053ec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00053ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00053f3:	85 c0                	test   eax,eax
c00053f5:	75 20                	jne    c0005417 <f_mkfs+0x9c>
c00053f7:	51                   	push   ecx
c00053f8:	8d 44 24 34          	lea    eax,[esp+0x34]
c00053fc:	50                   	push   eax
c00053fd:	6a 03                	push   0x3
c00053ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005403:	e8 12 ca ff ff       	call   c0001e1a <disk_ioctl>
c0005408:	83 c4 10             	add    esp,0x10
c000540b:	85 c0                	test   eax,eax
c000540d:	74 08                	je     c0005417 <f_mkfs+0x9c>
c000540f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005417:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000541b:	8d 42 ff             	lea    eax,[edx-0x1]
c000541e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005423:	77 04                	ja     c0005429 <f_mkfs+0xae>
c0005425:	85 c2                	test   edx,eax
c0005427:	74 08                	je     c0005431 <f_mkfs+0xb6>
c0005429:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005431:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0005434:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005438:	fe c8                	dec    al
c000543a:	3c 01                	cmp    al,0x1
c000543c:	76 05                	jbe    c0005443 <f_mkfs+0xc8>
c000543e:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005443:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0005446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000544a:	48                   	dec    eax
c000544b:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005450:	77 15                	ja     c0005467 <f_mkfs+0xec>
c0005452:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c0005457:	b8 00 02 00 00       	mov    eax,0x200
c000545c:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c0005461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005465:	eb 08                	jmp    c000546f <f_mkfs+0xf4>
c0005467:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c000546f:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005472:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005478:	77 0f                	ja     c0005489 <f_mkfs+0x10e>
c000547a:	8d 47 ff             	lea    eax,[edi-0x1]
c000547d:	85 f8                	test   eax,edi
c000547f:	b8 00 00 00 00       	mov    eax,0x0
c0005484:	0f 45 f8             	cmovne edi,eax
c0005487:	eb 02                	jmp    c000548b <f_mkfs+0x110>
c0005489:	31 ff                	xor    edi,edi
c000548b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005493:	77 0a                	ja     c000549f <f_mkfs+0x124>
c0005495:	bb 11 00 00 00       	mov    ebx,0x11
c000549a:	e9 c7 06 00 00       	jmp    c0005b66 <f_mkfs+0x7eb>
c000549f:	85 ed                	test   ebp,ebp
c00054a1:	8a 1e                	mov    bl,BYTE PTR [esi]
c00054a3:	89 ee                	mov    esi,ebp
c00054a5:	75 1b                	jne    c00054c2 <f_mkfs+0x147>
c00054a7:	83 ec 0c             	sub    esp,0xc
c00054aa:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00054ae:	25 00 fe ff ff       	and    eax,0xfffffe00
c00054b3:	50                   	push   eax
c00054b4:	e8 b7 06 00 00       	call   c0005b70 <ff_memalloc>
c00054b9:	83 c4 10             	add    esp,0x10
c00054bc:	85 c0                	test   eax,eax
c00054be:	89 c6                	mov    esi,eax
c00054c0:	74 d3                	je     c0005495 <f_mkfs+0x11a>
c00054c2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00054ca:	52                   	push   edx
c00054cb:	8d 44 24 38          	lea    eax,[esp+0x38]
c00054cf:	50                   	push   eax
c00054d0:	6a 01                	push   0x1
c00054d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d6:	e8 3f c9 ff ff       	call   c0001e1a <disk_ioctl>
c00054db:	83 c4 10             	add    esp,0x10
c00054de:	85 c0                	test   eax,eax
c00054e0:	0f 85 27 06 00 00    	jne    c0005b0d <f_mkfs+0x792>
c00054e6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00054ee:	88 d8                	mov    al,bl
c00054f0:	24 08                	and    al,0x8
c00054f2:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00054f6:	75 18                	jne    c0005510 <f_mkfs+0x195>
c00054f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00054fc:	83 f8 3f             	cmp    eax,0x3f
c00054ff:	76 0f                	jbe    c0005510 <f_mkfs+0x195>
c0005501:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005509:	83 e8 3f             	sub    eax,0x3f
c000550c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005510:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	83 f8 7f             	cmp    eax,0x7f
c000551b:	0f 86 61 02 00 00    	jbe    c0005782 <f_mkfs+0x407>
c0005521:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c0005527:	b9 80 00 00 00       	mov    ecx,0x80
c000552c:	77 05                	ja     c0005533 <f_mkfs+0x1b8>
c000552e:	c1 ef 09             	shr    edi,0x9
c0005531:	89 f9                	mov    ecx,edi
c0005533:	88 d8                	mov    al,bl
c0005535:	24 01                	and    al,0x1
c0005537:	80 e3 02             	and    bl,0x2
c000553a:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000553e:	74 0a                	je     c000554a <f_mkfs+0x1cf>
c0005540:	84 c0                	test   al,al
c0005542:	0f 84 58 01 00 00    	je     c00056a0 <f_mkfs+0x325>
c0005548:	eb 3b                	jmp    c0005585 <f_mkfs+0x20a>
c000554a:	84 c0                	test   al,al
c000554c:	bb 13 00 00 00       	mov    ebx,0x13
c0005551:	75 32                	jne    c0005585 <f_mkfs+0x20a>
c0005553:	e9 cc 05 00 00       	jmp    c0005b24 <f_mkfs+0x7a9>
c0005558:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000555d:	0f 85 18 02 00 00    	jne    c000577b <f_mkfs+0x400>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 86 ee 01 00 00    	jbe    c000575c <f_mkfs+0x3e1>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 c0 05 00 00    	jne    c0005b36 <f_mkfs+0x7bb>
c0005576:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000557a:	01 c9                	add    ecx,ecx
c000557c:	83 f9 40             	cmp    ecx,0x40
c000557f:	0f 87 c1 05 00 00    	ja     c0005b46 <f_mkfs+0x7cb>
c0005585:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005589:	85 c9                	test   ecx,ecx
c000558b:	75 1f                	jne    c00055ac <f_mkfs+0x231>
c000558d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005595:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005599:	b8 c0 f0 01 c0       	mov    eax,0xc001f0c0
c000559e:	c1 eb 0c             	shr    ebx,0xc
c00055a1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00055a4:	85 d2                	test   edx,edx
c00055a6:	0f 85 62 01 00 00    	jne    c000570e <f_mkfs+0x393>
c00055ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00055b0:	31 d2                	xor    edx,edx
c00055b2:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00055b6:	3d f5 0f 00 00       	cmp    eax,0xff5
c00055bb:	0f 86 65 01 00 00    	jbe    c0005726 <f_mkfs+0x3ab>
c00055c1:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00055c6:	83 c0 02             	add    eax,0x2
c00055c9:	01 c0                	add    eax,eax
c00055cb:	05 ff 01 00 00       	add    eax,0x1ff
c00055d0:	bf 01 00 00 00       	mov    edi,0x1
c00055d5:	c1 e8 09             	shr    eax,0x9
c00055d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00055dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00055e0:	c1 e0 05             	shl    eax,0x5
c00055e3:	c1 e8 09             	shr    eax,0x9
c00055e6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00055ea:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00055ef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00055f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00055f7:	01 f8                	add    eax,edi
c00055f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005601:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005606:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000560a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000560e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005616:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000561a:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c000561e:	f7 d8                	neg    eax
c0005620:	21 c3                	and    ebx,eax
c0005622:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005626:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000562b:	0f 85 08 01 00 00    	jne    c0005739 <f_mkfs+0x3be>
c0005631:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005635:	01 df                	add    edi,ebx
c0005637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000563b:	c1 e0 04             	shl    eax,0x4
c000563e:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0005642:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005646:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000564a:	0f 82 32 01 00 00    	jb     c0005782 <f_mkfs+0x407>
c0005650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005654:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005658:	29 f8                	sub    eax,edi
c000565a:	89 c2                	mov    edx,eax
c000565c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005660:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005665:	29 c2                	sub    edx,eax
c0005667:	89 d0                	mov    eax,edx
c0005669:	31 d2                	xor    edx,edx
c000566b:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c000566f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005674:	89 c3                	mov    ebx,eax
c0005676:	0f 85 dc fe ff ff    	jne    c0005558 <f_mkfs+0x1dd>
c000567c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005681:	0f 87 0a 01 00 00    	ja     c0005791 <f_mkfs+0x416>
c0005687:	85 c9                	test   ecx,ecx
c0005689:	0f 85 f3 00 00 00    	jne    c0005782 <f_mkfs+0x407>
c000568f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005694:	0f 86 e8 00 00 00    	jbe    c0005782 <f_mkfs+0x407>
c000569a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000569e:	d1 e9                	shr    ecx,1
c00056a0:	85 c9                	test   ecx,ecx
c00056a2:	89 cb                	mov    ebx,ecx
c00056a4:	75 25                	jne    c00056cb <f_mkfs+0x350>
c00056a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00056aa:	b8 d0 f0 01 c0       	mov    eax,0xc001f0d0
c00056af:	b9 01 00 00 00       	mov    ecx,0x1
c00056b4:	c1 eb 11             	shr    ebx,0x11
c00056b7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00056ba:	85 d2                	test   edx,edx
c00056bc:	74 0b                	je     c00056c9 <f_mkfs+0x34e>
c00056be:	83 c0 02             	add    eax,0x2
c00056c1:	39 da                	cmp    edx,ebx
c00056c3:	77 04                	ja     c00056c9 <f_mkfs+0x34e>
c00056c5:	01 c9                	add    ecx,ecx
c00056c7:	eb ee                	jmp    c00056b7 <f_mkfs+0x33c>
c00056c9:	31 db                	xor    ebx,ebx
c00056cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cf:	31 d2                	xor    edx,edx
c00056d1:	f7 f1                	div    ecx
c00056d3:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00056da:	2d f6 ff 00 00       	sub    eax,0xfff6
c00056df:	c1 ea 09             	shr    edx,0x9
c00056e2:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00056e7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00056eb:	0f 87 91 00 00 00    	ja     c0005782 <f_mkfs+0x407>
c00056f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00056f5:	bf 20 00 00 00       	mov    edi,0x20
c00056fa:	89 d9                	mov    ecx,ebx
c00056fc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005704:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005709:	e9 dc fe ff ff       	jmp    c00055ea <f_mkfs+0x26f>
c000570e:	83 c0 02             	add    eax,0x2
c0005711:	39 da                	cmp    edx,ebx
c0005713:	0f 87 93 fe ff ff    	ja     c00055ac <f_mkfs+0x231>
c0005719:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000571d:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c0005721:	e9 7b fe ff ff       	jmp    c00055a1 <f_mkfs+0x226>
c0005726:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000572b:	8d 04 40             	lea    eax,[eax+eax*2]
c000572e:	40                   	inc    eax
c000572f:	d1 e8                	shr    eax,1
c0005731:	83 c0 03             	add    eax,0x3
c0005734:	e9 92 fe ff ff       	jmp    c00055cb <f_mkfs+0x250>
c0005739:	31 d2                	xor    edx,edx
c000573b:	89 d8                	mov    eax,ebx
c000573d:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005741:	85 d2                	test   edx,edx
c0005743:	74 06                	je     c000574b <f_mkfs+0x3d0>
c0005745:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005749:	4b                   	dec    ebx
c000574a:	47                   	inc    edi
c000574b:	89 d8                	mov    eax,ebx
c000574d:	31 d2                	xor    edx,edx
c000574f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005753:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0005757:	e9 db fe ff ff       	jmp    c0005637 <f_mkfs+0x2bc>
c000575c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005761:	77 2e                	ja     c0005791 <f_mkfs+0x416>
c0005763:	85 c9                	test   ecx,ecx
c0005765:	75 1b                	jne    c0005782 <f_mkfs+0x407>
c0005767:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000576b:	01 c9                	add    ecx,ecx
c000576d:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005773:	0f 86 0c fe ff ff    	jbe    c0005585 <f_mkfs+0x20a>
c0005779:	eb 07                	jmp    c0005782 <f_mkfs+0x407>
c000577b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005780:	76 0a                	jbe    c000578c <f_mkfs+0x411>
c0005782:	bb 0e 00 00 00       	mov    ebx,0xe
c0005787:	e9 98 03 00 00       	jmp    c0005b24 <f_mkfs+0x7a9>
c000578c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005791:	31 d2                	xor    edx,edx
c0005793:	b9 00 02 00 00       	mov    ecx,0x200
c0005798:	89 f0                	mov    eax,esi
c000579a:	e8 db c6 ff ff       	call   c0001e7a <mem_set>
c000579f:	b9 0b 00 00 00       	mov    ecx,0xb
c00057a4:	ba 72 f0 01 c0       	mov    edx,0xc001f072
c00057a9:	89 f0                	mov    eax,esi
c00057ab:	e8 b5 c6 ff ff       	call   c0001e65 <mem_cpy>
c00057b0:	8d 46 0b             	lea    eax,[esi+0xb]
c00057b3:	ba 00 02 00 00       	mov    edx,0x200
c00057b8:	e8 a1 c6 ff ff       	call   c0001e5e <st_word>
c00057bd:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00057c1:	0f b7 d7             	movzx  edx,di
c00057c4:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00057c7:	8d 46 0e             	lea    eax,[esi+0xe]
c00057ca:	e8 8f c6 ff ff       	call   c0001e5e <st_word>
c00057cf:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00057d3:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057d8:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00057db:	b8 00 00 00 00       	mov    eax,0x0
c00057e0:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	8d 46 11             	lea    eax,[esi+0x11]
c00057ec:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00057f0:	e8 69 c6 ff ff       	call   c0001e5e <st_word>
c00057f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057f9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00057ff:	77 0a                	ja     c000580b <f_mkfs+0x490>
c0005801:	8d 46 13             	lea    eax,[esi+0x13]
c0005804:	e8 55 c6 ff ff       	call   c0001e5e <st_word>
c0005809:	eb 08                	jmp    c0005813 <f_mkfs+0x498>
c000580b:	8d 46 20             	lea    eax,[esi+0x20]
c000580e:	e8 4f c6 ff ff       	call   c0001e62 <st_dword>
c0005813:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c0005817:	8d 46 18             	lea    eax,[esi+0x18]
c000581a:	ba 3f 00 00 00       	mov    edx,0x3f
c000581f:	e8 3a c6 ff ff       	call   c0001e5e <st_word>
c0005824:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005827:	ba ff 00 00 00       	mov    edx,0xff
c000582c:	e8 2d c6 ff ff       	call   c0001e5e <st_word>
c0005831:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005835:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005838:	e8 25 c6 ff ff       	call   c0001e62 <st_dword>
c000583d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005842:	75 57                	jne    c000589b <f_mkfs+0x520>
c0005844:	8d 46 43             	lea    eax,[esi+0x43]
c0005847:	ba 00 00 21 50       	mov    edx,0x50210000
c000584c:	e8 11 c6 ff ff       	call   c0001e62 <st_dword>
c0005851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005855:	8d 46 24             	lea    eax,[esi+0x24]
c0005858:	e8 05 c6 ff ff       	call   c0001e62 <st_dword>
c000585d:	8d 46 2c             	lea    eax,[esi+0x2c]
c0005860:	ba 02 00 00 00       	mov    edx,0x2
c0005865:	e8 f8 c5 ff ff       	call   c0001e62 <st_dword>
c000586a:	8d 46 30             	lea    eax,[esi+0x30]
c000586d:	ba 01 00 00 00       	mov    edx,0x1
c0005872:	e8 e7 c5 ff ff       	call   c0001e5e <st_word>
c0005877:	8d 46 32             	lea    eax,[esi+0x32]
c000587a:	ba 06 00 00 00       	mov    edx,0x6
c000587f:	e8 da c5 ff ff       	call   c0001e5e <st_word>
c0005884:	8d 46 47             	lea    eax,[esi+0x47]
c0005887:	b9 13 00 00 00       	mov    ecx,0x13
c000588c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005890:	ba 7e f0 01 c0       	mov    edx,0xc001f07e
c0005895:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005899:	eb 2f                	jmp    c00058ca <f_mkfs+0x54f>
c000589b:	8d 46 27             	lea    eax,[esi+0x27]
c000589e:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a3:	e8 ba c5 ff ff       	call   c0001e62 <st_dword>
c00058a8:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00058ad:	8d 46 16             	lea    eax,[esi+0x16]
c00058b0:	e8 a9 c5 ff ff       	call   c0001e5e <st_word>
c00058b5:	8d 46 2b             	lea    eax,[esi+0x2b]
c00058b8:	b9 13 00 00 00       	mov    ecx,0x13
c00058bd:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00058c1:	ba 92 f0 01 c0       	mov    edx,0xc001f092
c00058c6:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00058ca:	e8 96 c5 ff ff       	call   c0001e65 <mem_cpy>
c00058cf:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c00058d5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00058da:	89 f8                	mov    eax,edi
c00058dc:	e8 7d c5 ff ff       	call   c0001e5e <st_word>
c00058e1:	6a 01                	push   0x1
c00058e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00058e7:	56                   	push   esi
c00058e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00058ec:	e8 13 c5 ff ff       	call   c0001e04 <disk_write>
c00058f1:	83 c4 10             	add    esp,0x10
c00058f4:	85 c0                	test   eax,eax
c00058f6:	0f 85 11 02 00 00    	jne    c0005b0d <f_mkfs+0x792>
c00058fc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005901:	0f 85 94 00 00 00    	jne    c000599b <f_mkfs+0x620>
c0005907:	6a 01                	push   0x1
c0005909:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000590d:	83 c0 06             	add    eax,0x6
c0005910:	50                   	push   eax
c0005911:	56                   	push   esi
c0005912:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005916:	e8 e9 c4 ff ff       	call   c0001e04 <disk_write>
c000591b:	b9 00 02 00 00       	mov    ecx,0x200
c0005920:	31 d2                	xor    edx,edx
c0005922:	89 f0                	mov    eax,esi
c0005924:	e8 51 c5 ff ff       	call   c0001e7a <mem_set>
c0005929:	ba 52 52 61 41       	mov    edx,0x41615252
c000592e:	89 f0                	mov    eax,esi
c0005930:	e8 2d c5 ff ff       	call   c0001e62 <st_dword>
c0005935:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c000593b:	ba 72 72 41 61       	mov    edx,0x61417272
c0005940:	e8 1d c5 ff ff       	call   c0001e62 <st_dword>
c0005945:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005948:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000594e:	e8 0f c5 ff ff       	call   c0001e62 <st_dword>
c0005953:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005959:	ba 02 00 00 00       	mov    edx,0x2
c000595e:	e8 ff c4 ff ff       	call   c0001e62 <st_dword>
c0005963:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005968:	89 f8                	mov    eax,edi
c000596a:	e8 ef c4 ff ff       	call   c0001e5e <st_word>
c000596f:	6a 01                	push   0x1
c0005971:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005975:	83 c0 07             	add    eax,0x7
c0005978:	50                   	push   eax
c0005979:	56                   	push   esi
c000597a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000597e:	e8 81 c4 ff ff       	call   c0001e04 <disk_write>
c0005983:	83 c4 20             	add    esp,0x20
c0005986:	6a 01                	push   0x1
c0005988:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000598c:	40                   	inc    eax
c000598d:	50                   	push   eax
c000598e:	56                   	push   esi
c000598f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005993:	e8 6c c4 ff ff       	call   c0001e04 <disk_write>
c0005998:	83 c4 10             	add    esp,0x10
c000599b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000599f:	31 d2                	xor    edx,edx
c00059a1:	89 f0                	mov    eax,esi
c00059a3:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00059a7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00059ad:	e8 c8 c4 ff ff       	call   c0001e7a <mem_set>
c00059b2:	c1 ef 09             	shr    edi,0x9
c00059b5:	ba f8 ff ff 00       	mov    edx,0xfffff8
c00059ba:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00059bf:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c00059c4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00059cc:	0f 44 c2             	cmove  eax,edx
c00059cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00059d3:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059d8:	75 21                	jne    c00059fb <f_mkfs+0x680>
c00059da:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00059df:	89 f0                	mov    eax,esi
c00059e1:	e8 7c c4 ff ff       	call   c0001e62 <st_dword>
c00059e6:	8d 46 04             	lea    eax,[esi+0x4]
c00059e9:	83 ca ff             	or     edx,0xffffffff
c00059ec:	e8 71 c4 ff ff       	call   c0001e62 <st_dword>
c00059f1:	8d 46 08             	lea    eax,[esi+0x8]
c00059f4:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00059f9:	eb 06                	jmp    c0005a01 <f_mkfs+0x686>
c00059fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00059ff:	89 f0                	mov    eax,esi
c0005a01:	e8 5c c4 ff ff       	call   c0001e62 <st_dword>
c0005a06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a0a:	39 fb                	cmp    ebx,edi
c0005a0c:	89 f8                	mov    eax,edi
c0005a0e:	0f 46 c3             	cmovbe eax,ebx
c0005a11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a15:	50                   	push   eax
c0005a16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005a1a:	56                   	push   esi
c0005a1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a1f:	e8 e0 c3 ff ff       	call   c0001e04 <disk_write>
c0005a24:	83 c4 10             	add    esp,0x10
c0005a27:	85 c0                	test   eax,eax
c0005a29:	0f 85 de 00 00 00    	jne    c0005b0d <f_mkfs+0x792>
c0005a2f:	b9 00 02 00 00       	mov    ecx,0x200
c0005a34:	31 d2                	xor    edx,edx
c0005a36:	89 f0                	mov    eax,esi
c0005a38:	e8 3d c4 ff ff       	call   c0001e7a <mem_set>
c0005a3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005a41:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005a45:	29 cb                	sub    ebx,ecx
c0005a47:	75 c1                	jne    c0005a0a <f_mkfs+0x68f>
c0005a49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4d:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005a55:	40                   	inc    eax
c0005a56:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005a5a:	0f 87 73 ff ff ff    	ja     c00059d3 <f_mkfs+0x658>
c0005a60:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a69:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005a6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a72:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005a76:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005a7a:	0f 47 df             	cmova  ebx,edi
c0005a7d:	53                   	push   ebx
c0005a7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005a82:	56                   	push   esi
c0005a83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a87:	e8 78 c3 ff ff       	call   c0001e04 <disk_write>
c0005a8c:	83 c4 10             	add    esp,0x10
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 7a                	jne    c0005b0d <f_mkfs+0x792>
c0005a93:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005a97:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005a9b:	75 d5                	jne    c0005a72 <f_mkfs+0x6f7>
c0005a9d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005aa2:	b1 0c                	mov    cl,0xc
c0005aa4:	74 1c                	je     c0005ac2 <f_mkfs+0x747>
c0005aa6:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005aae:	b1 06                	mov    cl,0x6
c0005ab0:	77 10                	ja     c0005ac2 <f_mkfs+0x747>
c0005ab2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005ab7:	0f 94 c1             	sete   cl
c0005aba:	fe c9                	dec    cl
c0005abc:	80 e1 fd             	and    cl,0xfd
c0005abf:	80 c1 04             	add    cl,0x4
c0005ac2:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005ac7:	75 2d                	jne    c0005af6 <f_mkfs+0x77b>
c0005ac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005acd:	83 ec 0c             	sub    esp,0xc
c0005ad0:	0f b6 c9             	movzx  ecx,cl
c0005ad3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005adb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005adf:	56                   	push   esi
c0005ae0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae4:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005ae8:	e8 53 d3 ff ff       	call   c0002e40 <create_partition>
c0005aed:	83 c4 10             	add    esp,0x10
c0005af0:	85 c0                	test   eax,eax
c0005af2:	89 c3                	mov    ebx,eax
c0005af4:	75 2e                	jne    c0005b24 <f_mkfs+0x7a9>
c0005af6:	50                   	push   eax
c0005af7:	31 db                	xor    ebx,ebx
c0005af9:	6a 00                	push   0x0
c0005afb:	6a 00                	push   0x0
c0005afd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b01:	e8 14 c3 ff ff       	call   c0001e1a <disk_ioctl>
c0005b06:	83 c4 10             	add    esp,0x10
c0005b09:	85 c0                	test   eax,eax
c0005b0b:	74 17                	je     c0005b24 <f_mkfs+0x7a9>
c0005b0d:	85 ed                	test   ebp,ebp
c0005b0f:	75 0c                	jne    c0005b1d <f_mkfs+0x7a2>
c0005b11:	83 ec 0c             	sub    esp,0xc
c0005b14:	56                   	push   esi
c0005b15:	e8 6a 00 00 00       	call   c0005b84 <ff_memfree>
c0005b1a:	83 c4 10             	add    esp,0x10
c0005b1d:	bb 01 00 00 00       	mov    ebx,0x1
c0005b22:	eb 42                	jmp    c0005b66 <f_mkfs+0x7eb>
c0005b24:	85 ed                	test   ebp,ebp
c0005b26:	75 3e                	jne    c0005b66 <f_mkfs+0x7eb>
c0005b28:	83 ec 0c             	sub    esp,0xc
c0005b2b:	56                   	push   esi
c0005b2c:	e8 53 00 00 00       	call   c0005b84 <ff_memfree>
c0005b31:	83 c4 10             	add    esp,0x10
c0005b34:	eb 30                	jmp    c0005b66 <f_mkfs+0x7eb>
c0005b36:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005b3b:	0f 85 5f fb ff ff    	jne    c00056a0 <f_mkfs+0x325>
c0005b41:	e9 3c fc ff ff       	jmp    c0005782 <f_mkfs+0x407>
c0005b46:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005b4b:	0f 85 55 fb ff ff    	jne    c00056a6 <f_mkfs+0x32b>
c0005b51:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005b55:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005b5b:	0f 86 4b fa ff ff    	jbe    c00055ac <f_mkfs+0x231>
c0005b61:	e9 1c fc ff ff       	jmp    c0005782 <f_mkfs+0x407>
c0005b66:	83 c4 4c             	add    esp,0x4c
c0005b69:	89 d8                	mov    eax,ebx
c0005b6b:	5b                   	pop    ebx
c0005b6c:	5e                   	pop    esi
c0005b6d:	5f                   	pop    edi
c0005b6e:	5d                   	pop    ebp
c0005b6f:	c3                   	ret    

c0005b70 <ff_memalloc>:
c0005b70:	83 ec 1c             	sub    esp,0x1c
c0005b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b77:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b7a:	e8 e7 1e 00 00       	call   c0007a66 <malloc>
c0005b7f:	83 c4 1c             	add    esp,0x1c
c0005b82:	c3                   	ret    
c0005b83:	90                   	nop

c0005b84 <ff_memfree>:
c0005b84:	83 ec 1c             	sub    esp,0x1c
c0005b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b8e:	e8 e6 1e 00 00       	call   c0007a79 <free>
c0005b93:	90                   	nop
c0005b94:	83 c4 1c             	add    esp,0x1c
c0005b97:	c3                   	ret    

c0005b98 <ff_uni2oem>:
c0005b98:	83 ec 14             	sub    esp,0x14
c0005b9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b9f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ba3:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005baa:	c7 44 24 0c c0 f4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f4c0
c0005bb2:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005bb7:	77 0b                	ja     c0005bc4 <ff_uni2oem+0x2c>
c0005bb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bbd:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005bc2:	eb 64                	jmp    c0005c28 <ff_uni2oem+0x90>
c0005bc4:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005bcc:	77 5a                	ja     c0005c28 <ff_uni2oem+0x90>
c0005bce:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005bd2:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005bd7:	75 4f                	jne    c0005c28 <ff_uni2oem+0x90>
c0005bd9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005be0:	eb 0e                	jmp    c0005bf0 <ff_uni2oem+0x58>
c0005be2:	66 90                	xchg   ax,ax
c0005be4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005be9:	40                   	inc    eax
c0005bea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005bef:	90                   	nop
c0005bf0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005bf5:	83 f8 7f             	cmp    eax,0x7f
c0005bf8:	77 1a                	ja     c0005c14 <ff_uni2oem+0x7c>
c0005bfa:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005bff:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c06:	01 d0                	add    eax,edx
c0005c08:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c0b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c0f:	75 d3                	jne    c0005be4 <ff_uni2oem+0x4c>
c0005c11:	8d 76 00             	lea    esi,[esi+0x0]
c0005c14:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c19:	83 e8 80             	sub    eax,0xffffff80
c0005c1c:	0f b7 c0             	movzx  eax,ax
c0005c1f:	0f b6 c0             	movzx  eax,al
c0005c22:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c27:	90                   	nop
c0005c28:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c2d:	83 c4 14             	add    esp,0x14
c0005c30:	c3                   	ret    
c0005c31:	8d 76 00             	lea    esi,[esi+0x0]

c0005c34 <ff_oem2uni>:
c0005c34:	83 ec 18             	sub    esp,0x18
c0005c37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c3f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005c44:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c48:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005c4f:	c7 44 24 10 c0 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f4c0
c0005c57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c5c:	83 f8 7f             	cmp    eax,0x7f
c0005c5f:	77 0b                	ja     c0005c6c <ff_oem2uni+0x38>
c0005c61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005c6a:	eb 34                	jmp    c0005ca0 <ff_oem2uni+0x6c>
c0005c6c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c70:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c75:	75 29                	jne    c0005ca0 <ff_oem2uni+0x6c>
c0005c77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c7c:	3d ff 00 00 00       	cmp    eax,0xff
c0005c81:	77 1d                	ja     c0005ca0 <ff_oem2uni+0x6c>
c0005c83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005c88:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005c8d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005c94:	01 d0                	add    eax,edx
c0005c96:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c99:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005c9e:	66 90                	xchg   ax,ax
c0005ca0:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005ca5:	83 c4 18             	add    esp,0x18
c0005ca8:	c3                   	ret    
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]

c0005cac <ff_wtoupper>:
c0005cac:	83 ec 10             	sub    esp,0x10
c0005caf:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005cb7:	0f 87 af 01 00 00    	ja     c0005e6c <ff_wtoupper+0x1c0>
c0005cbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005cc1:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cc6:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ccb:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005cd0:	77 0a                	ja     c0005cdc <ff_wtoupper+0x30>
c0005cd2:	b8 c0 f2 01 c0       	mov    eax,0xc001f2c0
c0005cd7:	eb 0b                	jmp    c0005ce4 <ff_wtoupper+0x38>
c0005cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cdc:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c0005ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cec:	8d 50 02             	lea    edx,[eax+0x2]
c0005cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cf3:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005cf6:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005cfb:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d00:	85 c0                	test   eax,eax
c0005d02:	0f 84 58 01 00 00    	je     c0005e60 <ff_wtoupper+0x1b4>
c0005d08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d12:	39 c2                	cmp    edx,eax
c0005d14:	0f 82 46 01 00 00    	jb     c0005e60 <ff_wtoupper+0x1b4>
c0005d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d1e:	8d 50 02             	lea    edx,[eax+0x2]
c0005d21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d25:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d28:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d32:	c1 e8 08             	shr    eax,0x8
c0005d35:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005d3a:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005d3f:	0f b6 c0             	movzx  eax,al
c0005d42:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005d47:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d4c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005d51:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005d56:	01 ca                	add    edx,ecx
c0005d58:	39 d0                	cmp    eax,edx
c0005d5a:	0f 8d dc 00 00 00    	jge    c0005e3c <ff_wtoupper+0x190>
c0005d60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d65:	83 f8 08             	cmp    eax,0x8
c0005d68:	0f 87 ee 00 00 00    	ja     c0005e5c <ff_wtoupper+0x1b0>
c0005d6e:	8b 04 85 c0 f1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0e40]
c0005d75:	ff e0                	jmp    eax
c0005d77:	90                   	nop
c0005d78:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d7d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d82:	29 c2                	sub    edx,eax
c0005d84:	89 d0                	mov    eax,edx
c0005d86:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d8d:	01 d0                	add    eax,edx
c0005d8f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d92:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d97:	e9 9c 00 00 00       	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005d9c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005da5:	89 d1                	mov    ecx,edx
c0005da7:	29 c1                	sub    ecx,eax
c0005da9:	89 c8                	mov    eax,ecx
c0005dab:	0f b7 c0             	movzx  eax,ax
c0005dae:	83 e0 01             	and    eax,0x1
c0005db1:	0f b7 c0             	movzx  eax,ax
c0005db4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005db9:	89 d1                	mov    ecx,edx
c0005dbb:	29 c1                	sub    ecx,eax
c0005dbd:	89 c8                	mov    eax,ecx
c0005dbf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005dc4:	eb 72                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005dc6:	66 90                	xchg   ax,ax
c0005dc8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005dcd:	83 e8 10             	sub    eax,0x10
c0005dd0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005dd5:	eb 61                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005dd7:	90                   	nop
c0005dd8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddd:	83 e8 20             	sub    eax,0x20
c0005de0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005de5:	eb 51                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005de7:	90                   	nop
c0005de8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ded:	83 e8 30             	sub    eax,0x30
c0005df0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005df5:	eb 41                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005df7:	90                   	nop
c0005df8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005dfd:	83 e8 1a             	sub    eax,0x1a
c0005e00:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e05:	eb 31                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e07:	90                   	nop
c0005e08:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e0d:	83 c0 08             	add    eax,0x8
c0005e10:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e15:	eb 21                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e17:	90                   	nop
c0005e18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e1d:	83 e8 50             	sub    eax,0x50
c0005e20:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e25:	eb 11                	jmp    c0005e38 <ff_wtoupper+0x18c>
c0005e27:	90                   	nop
c0005e28:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e2d:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005e32:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e37:	90                   	nop
c0005e38:	eb 22                	jmp    c0005e5c <ff_wtoupper+0x1b0>
c0005e3a:	66 90                	xchg   ax,ax
c0005e3c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e41:	85 c0                	test   eax,eax
c0005e43:	0f 85 9f fe ff ff    	jne    c0005ce8 <ff_wtoupper+0x3c>
c0005e49:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e4e:	01 c0                	add    eax,eax
c0005e50:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005e54:	e9 8f fe ff ff       	jmp    c0005ce8 <ff_wtoupper+0x3c>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	90                   	nop
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e60:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e65:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005e69:	8d 76 00             	lea    esi,[esi+0x0]
c0005e6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e70:	83 c4 10             	add    esp,0x10
c0005e73:	c3                   	ret    

c0005e74 <utf2ucs>:
c0005e74:	56                   	push   esi
c0005e75:	31 c9                	xor    ecx,ecx
c0005e77:	53                   	push   ebx
c0005e78:	89 c6                	mov    esi,eax
c0005e7a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005e7e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005e82:	89 d8                	mov    eax,ebx
c0005e84:	c1 f8 08             	sar    eax,0x8
c0005e87:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005e8a:	41                   	inc    ecx
c0005e8b:	85 db                	test   ebx,ebx
c0005e8d:	75 eb                	jne    c0005e7a <utf2ucs+0x6>
c0005e8f:	5b                   	pop    ebx
c0005e90:	5e                   	pop    esi
c0005e91:	c3                   	ret    

c0005e92 <ucs2utfn>:
c0005e92:	57                   	push   edi
c0005e93:	83 e1 fe             	and    ecx,0xfffffffe
c0005e96:	56                   	push   esi
c0005e97:	89 d6                	mov    esi,edx
c0005e99:	53                   	push   ebx
c0005e9a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005e9d:	39 f7                	cmp    edi,esi
c0005e9f:	74 5a                	je     c0005efb <ucs2utfn+0x69>
c0005ea1:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005ea4:	83 c6 02             	add    esi,0x2
c0005ea7:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005eab:	c1 e3 08             	shl    ebx,0x8
c0005eae:	09 d3                	or     ebx,edx
c0005eb0:	83 fb 3b             	cmp    ebx,0x3b
c0005eb3:	74 46                	je     c0005efb <ucs2utfn+0x69>
c0005eb5:	83 fb 7f             	cmp    ebx,0x7f
c0005eb8:	88 da                	mov    dl,bl
c0005eba:	7f 05                	jg     c0005ec1 <ucs2utfn+0x2f>
c0005ebc:	88 18                	mov    BYTE PTR [eax],bl
c0005ebe:	40                   	inc    eax
c0005ebf:	eb dc                	jmp    c0005e9d <ucs2utfn+0xb>
c0005ec1:	80 e2 3f             	and    dl,0x3f
c0005ec4:	89 d9                	mov    ecx,ebx
c0005ec6:	c1 f9 06             	sar    ecx,0x6
c0005ec9:	80 ca 80             	or     dl,0x80
c0005ecc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005ed2:	7f 0e                	jg     c0005ee2 <ucs2utfn+0x50>
c0005ed4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005ed7:	80 c9 c0             	or     cl,0xc0
c0005eda:	83 c0 02             	add    eax,0x2
c0005edd:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005ee0:	eb bb                	jmp    c0005e9d <ucs2utfn+0xb>
c0005ee2:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005ee5:	c1 fb 0c             	sar    ebx,0xc
c0005ee8:	80 e1 3f             	and    cl,0x3f
c0005eeb:	80 cb e0             	or     bl,0xe0
c0005eee:	80 c9 80             	or     cl,0x80
c0005ef1:	88 18                	mov    BYTE PTR [eax],bl
c0005ef3:	83 c0 03             	add    eax,0x3
c0005ef6:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005ef9:	eb a2                	jmp    c0005e9d <ucs2utfn+0xb>
c0005efb:	5b                   	pop    ebx
c0005efc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005eff:	5e                   	pop    esi
c0005f00:	5f                   	pop    edi
c0005f01:	c3                   	ret    

c0005f02 <isjoliet>:
c0005f02:	31 d2                	xor    edx,edx
c0005f04:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f07:	75 22                	jne    c0005f2b <isjoliet+0x29>
c0005f09:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f0d:	75 1c                	jne    c0005f2b <isjoliet+0x29>
c0005f0f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005f12:	ba 02 00 00 00       	mov    edx,0x2
c0005f17:	3c 43                	cmp    al,0x43
c0005f19:	74 10                	je     c0005f2b <isjoliet+0x29>
c0005f1b:	3c 45                	cmp    al,0x45
c0005f1d:	ba 03 00 00 00       	mov    edx,0x3
c0005f22:	74 07                	je     c0005f2b <isjoliet+0x29>
c0005f24:	31 d2                	xor    edx,edx
c0005f26:	3c 40                	cmp    al,0x40
c0005f28:	0f 94 c2             	sete   dl
c0005f2b:	89 d0                	mov    eax,edx
c0005f2d:	c3                   	ret    

c0005f2e <htohl_32>:
c0005f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005f30:	c3                   	ret    

c0005f31 <iso_733>:
c0005f31:	eb fb                	jmp    c0005f2e <htohl_32>

c0005f33 <bgrad_cache>:
c0005f33:	83 fa 0e             	cmp    edx,0xe
c0005f36:	77 16                	ja     c0005f4e <bgrad_cache+0x1b>
c0005f38:	53                   	push   ebx
c0005f39:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005f3c:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005f40:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005f43:	42                   	inc    edx
c0005f44:	83 fa 0f             	cmp    edx,0xf
c0005f47:	75 f3                	jne    c0005f3c <bgrad_cache+0x9>
c0005f49:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005f4c:	5b                   	pop    ebx
c0005f4d:	c3                   	ret    
c0005f4e:	c3                   	ret    

c0005f4f <ucscompare>:
c0005f4f:	55                   	push   ebp
c0005f50:	57                   	push   edi
c0005f51:	89 c7                	mov    edi,eax
c0005f53:	56                   	push   esi
c0005f54:	89 d6                	mov    esi,edx
c0005f56:	53                   	push   ebx
c0005f57:	31 d2                	xor    edx,edx
c0005f59:	83 ec 1c             	sub    esp,0x1c
c0005f5c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005f60:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005f65:	c1 e3 08             	shl    ebx,0x8
c0005f68:	09 c3                	or     ebx,eax
c0005f6a:	39 ca                	cmp    edx,ecx
c0005f6c:	7d 42                	jge    c0005fb0 <ucscompare+0x61>
c0005f6e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005f72:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005f76:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005f7a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005f7f:	c1 e0 08             	shl    eax,0x8
c0005f82:	09 e8                	or     eax,ebp
c0005f84:	83 f8 3b             	cmp    eax,0x3b
c0005f87:	74 27                	je     c0005fb0 <ucscompare+0x61>
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	50                   	push   eax
c0005f8d:	e8 1e aa ff ff       	call   c00009b0 <tolower>
c0005f92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005f95:	89 c5                	mov    ebp,eax
c0005f97:	e8 14 aa ff ff       	call   c00009b0 <tolower>
c0005f9c:	83 c4 10             	add    esp,0x10
c0005f9f:	39 c5                	cmp    ebp,eax
c0005fa1:	75 21                	jne    c0005fc4 <ucscompare+0x75>
c0005fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fa7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005fab:	83 c2 02             	add    edx,0x2
c0005fae:	eb ac                	jmp    c0005f5c <ucscompare+0xd>
c0005fb0:	83 fb 2f             	cmp    ebx,0x2f
c0005fb3:	0f 95 c0             	setne  al
c0005fb6:	85 db                	test   ebx,ebx
c0005fb8:	0f 95 c2             	setne  dl
c0005fbb:	20 d0                	and    al,dl
c0005fbd:	0f b6 c0             	movzx  eax,al
c0005fc0:	f7 d8                	neg    eax
c0005fc2:	eb 03                	jmp    c0005fc7 <ucscompare+0x78>
c0005fc4:	83 c8 ff             	or     eax,0xffffffff
c0005fc7:	83 c4 1c             	add    esp,0x1c
c0005fca:	5b                   	pop    ebx
c0005fcb:	5e                   	pop    esi
c0005fcc:	5f                   	pop    edi
c0005fcd:	5d                   	pop    ebp
c0005fce:	c3                   	ret    

c0005fcf <fncompare>:
c0005fcf:	55                   	push   ebp
c0005fd0:	31 ed                	xor    ebp,ebp
c0005fd2:	57                   	push   edi
c0005fd3:	89 c7                	mov    edi,eax
c0005fd5:	56                   	push   esi
c0005fd6:	89 d6                	mov    esi,edx
c0005fd8:	53                   	push   ebx
c0005fd9:	89 cb                	mov    ebx,ecx
c0005fdb:	83 ec 1c             	sub    esp,0x1c
c0005fde:	39 f5                	cmp    ebp,esi
c0005fe0:	7d 3f                	jge    c0006021 <fncompare+0x52>
c0005fe2:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0005fe6:	3c 3b                	cmp    al,0x3b
c0005fe8:	74 37                	je     c0006021 <fncompare+0x52>
c0005fea:	3c 2e                	cmp    al,0x2e
c0005fec:	75 0e                	jne    c0005ffc <fncompare+0x2d>
c0005fee:	8d 4e ff             	lea    ecx,[esi-0x1]
c0005ff1:	39 e9                	cmp    ecx,ebp
c0005ff3:	74 2c                	je     c0006021 <fncompare+0x52>
c0005ff5:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c0005ffa:	74 25                	je     c0006021 <fncompare+0x52>
c0005ffc:	83 ec 0c             	sub    esp,0xc
c0005fff:	50                   	push   eax
c0006000:	e8 ab a9 ff ff       	call   c00009b0 <tolower>
c0006005:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006009:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000600d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006010:	e8 9b a9 ff ff       	call   c00009b0 <tolower>
c0006015:	83 c4 10             	add    esp,0x10
c0006018:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000601c:	75 1a                	jne    c0006038 <fncompare+0x69>
c000601e:	45                   	inc    ebp
c000601f:	eb bd                	jmp    c0005fde <fncompare+0xf>
c0006021:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c0006024:	80 fa 2f             	cmp    dl,0x2f
c0006027:	0f 95 c0             	setne  al
c000602a:	84 d2                	test   dl,dl
c000602c:	0f 95 c2             	setne  dl
c000602f:	20 d0                	and    al,dl
c0006031:	0f b6 c0             	movzx  eax,al
c0006034:	f7 d8                	neg    eax
c0006036:	eb 03                	jmp    c000603b <fncompare+0x6c>
c0006038:	83 c8 ff             	or     eax,0xffffffff
c000603b:	83 c4 1c             	add    esp,0x1c
c000603e:	5b                   	pop    ebx
c000603f:	5e                   	pop    esi
c0006040:	5f                   	pop    edi
c0006041:	5d                   	pop    ebp
c0006042:	c3                   	ret    

c0006043 <bclear_cache>:
c0006043:	83 ec 18             	sub    esp,0x18
c0006046:	68 c0 f5 01 c0       	push   0xc001f5c0
c000604b:	e8 78 30 01 00       	call   c00190c8 <iso_kprintf>
c0006050:	83 c4 10             	add    esp,0x10
c0006053:	31 c0                	xor    eax,eax
c0006055:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000605c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006062:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006069:	40                   	inc    eax
c000606a:	83 f8 10             	cmp    eax,0x10
c000606d:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006073:	75 e0                	jne    c0006055 <bclear_cache+0x12>
c0006075:	83 c4 0c             	add    esp,0xc
c0006078:	c3                   	ret    

c0006079 <bclear>:
c0006079:	eb c8                	jmp    c0006043 <bclear_cache>

c000607b <iso_break_all>:
c000607b:	83 ec 18             	sub    esp,0x18
c000607e:	68 ce f5 01 c0       	push   0xc001f5ce
c0006083:	e8 40 30 01 00       	call   c00190c8 <iso_kprintf>
c0006088:	83 c4 10             	add    esp,0x10
c000608b:	31 c0                	xor    eax,eax
c000608d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006097:	05 94 00 00 00       	add    eax,0x94
c000609c:	3d 40 09 00 00       	cmp    eax,0x940
c00060a1:	75 ea                	jne    c000608d <iso_break_all+0x12>
c00060a3:	83 c4 0c             	add    esp,0xc
c00060a6:	c3                   	ret    

c00060a7 <isoReadDiscSector>:
c00060a7:	83 ec 0c             	sub    esp,0xc
c00060aa:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c00060b1:	50                   	push   eax
c00060b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00060be:	e8 9d 2f 01 00       	call   c0019060 <isoReadDiscSectorHelper>
c00060c3:	83 c4 1c             	add    esp,0x1c
c00060c6:	c3                   	ret    

c00060c7 <bread_cache>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 d7                	mov    edi,edx
c00060cb:	56                   	push   esi
c00060cc:	ba 0f 00 00 00       	mov    edx,0xf
c00060d1:	53                   	push   ebx
c00060d2:	89 c6                	mov    esi,eax
c00060d4:	83 ec 0c             	sub    esp,0xc
c00060d7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00060da:	39 38                	cmp    DWORD PTR [eax],edi
c00060dc:	74 3c                	je     c000611a <bread_cache+0x53>
c00060de:	4a                   	dec    edx
c00060df:	83 fa ff             	cmp    edx,0xffffffff
c00060e2:	75 f3                	jne    c00060d7 <bread_cache+0x10>
c00060e4:	31 db                	xor    ebx,ebx
c00060e6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00060e9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00060ec:	74 08                	je     c00060f6 <bread_cache+0x2f>
c00060ee:	43                   	inc    ebx
c00060ef:	83 fb 10             	cmp    ebx,0x10
c00060f2:	75 f2                	jne    c00060e6 <bread_cache+0x1f>
c00060f4:	31 db                	xor    ebx,ebx
c00060f6:	50                   	push   eax
c00060f7:	6a 01                	push   0x1
c00060f9:	57                   	push   edi
c00060fa:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00060fd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006100:	83 c0 04             	add    eax,0x4
c0006103:	50                   	push   eax
c0006104:	e8 9e ff ff ff       	call   c00060a7 <isoReadDiscSector>
c0006109:	83 c4 10             	add    esp,0x10
c000610c:	83 c9 ff             	or     ecx,0xffffffff
c000610f:	85 c0                	test   eax,eax
c0006111:	78 13                	js     c0006126 <bread_cache+0x5f>
c0006113:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006116:	89 da                	mov    edx,ebx
c0006118:	89 38                	mov    DWORD PTR [eax],edi
c000611a:	89 f0                	mov    eax,esi
c000611c:	e8 12 fe ff ff       	call   c0005f33 <bgrad_cache>
c0006121:	b9 0f 00 00 00       	mov    ecx,0xf
c0006126:	83 c4 0c             	add    esp,0xc
c0006129:	89 c8                	mov    eax,ecx
c000612b:	5b                   	pop    ebx
c000612c:	5e                   	pop    esi
c000612d:	5f                   	pop    edi
c000612e:	5d                   	pop    ebp
c000612f:	c3                   	ret    

c0006130 <biread>:
c0006130:	89 c2                	mov    edx,eax
c0006132:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006137:	eb 8e                	jmp    c00060c7 <bread_cache>

c0006139 <bdread>:
c0006139:	89 c2                	mov    edx,eax
c000613b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006140:	eb 85                	jmp    c00060c7 <bread_cache>

c0006142 <strnicmp>:
c0006142:	55                   	push   ebp
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	31 f6                	xor    esi,esi
c0006147:	53                   	push   ebx
c0006148:	83 ec 0c             	sub    esp,0xc
c000614b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000614f:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006153:	74 42                	je     c0006197 <strnicmp+0x55>
c0006155:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006159:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000615d:	84 c0                	test   al,al
c000615f:	74 36                	je     c0006197 <strnicmp+0x55>
c0006161:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006164:	84 d2                	test   dl,dl
c0006166:	74 2f                	je     c0006197 <strnicmp+0x55>
c0006168:	8d 6e 01             	lea    ebp,[esi+0x1]
c000616b:	38 d0                	cmp    al,dl
c000616d:	75 04                	jne    c0006173 <strnicmp+0x31>
c000616f:	89 ee                	mov    esi,ebp
c0006171:	eb dc                	jmp    c000614f <strnicmp+0xd>
c0006173:	83 ec 0c             	sub    esp,0xc
c0006176:	50                   	push   eax
c0006177:	e8 34 a8 ff ff       	call   c00009b0 <tolower>
c000617c:	89 c7                	mov    edi,eax
c000617e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006182:	89 ee                	mov    esi,ebp
c0006184:	89 04 24             	mov    DWORD PTR [esp],eax
c0006187:	e8 24 a8 ff ff       	call   c00009b0 <tolower>
c000618c:	83 c4 10             	add    esp,0x10
c000618f:	29 c7                	sub    edi,eax
c0006191:	89 f8                	mov    eax,edi
c0006193:	74 ba                	je     c000614f <strnicmp+0xd>
c0006195:	eb 02                	jmp    c0006199 <strnicmp+0x57>
c0006197:	31 c0                	xor    eax,eax
c0006199:	83 c4 0c             	add    esp,0xc
c000619c:	5b                   	pop    ebx
c000619d:	5e                   	pop    esi
c000619e:	5f                   	pop    edi
c000619f:	5d                   	pop    ebp
c00061a0:	c3                   	ret    

c00061a1 <find_object>:
c00061a1:	55                   	push   ebp
c00061a2:	89 c5                	mov    ebp,eax
c00061a4:	57                   	push   edi
c00061a5:	56                   	push   esi
c00061a6:	53                   	push   ebx
c00061a7:	89 d3                	mov    ebx,edx
c00061a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00061af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00061b3:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00061ba:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00061c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061c5:	74 0b                	je     c00061d2 <find_object+0x31>
c00061c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00061cb:	89 ea                	mov    edx,ebp
c00061cd:	e8 a2 fc ff ff       	call   c0005e74 <utf2ucs>
c00061d2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00061d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00061de:	7e 11                	jle    c00061f1 <find_object+0x50>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	e8 47 ff ff ff       	call   c0006130 <biread>
c00061e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	79 07                	jns    c00061f8 <find_object+0x57>
c00061f1:	31 db                	xor    ebx,ebx
c00061f3:	e9 4c 01 00 00       	jmp    c0006344 <find_object+0x1a3>
c00061f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006200:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006204:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006208:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000620f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c0006213:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0006215:	84 c9                	test   cl,cl
c0006217:	75 0e                	jne    c0006227 <find_object+0x86>
c0006219:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000621d:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c0006225:	eb b2                	jmp    c00061d9 <find_object+0x38>
c0006227:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c000622d:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c0006231:	85 d2                	test   edx,edx
c0006233:	89 f8                	mov    eax,edi
c0006235:	74 33                	je     c000626a <find_object+0xc9>
c0006237:	8d 43 21             	lea    eax,[ebx+0x21]
c000623a:	89 f9                	mov    ecx,edi
c000623c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006240:	e8 0a fd ff ff       	call   c0005f4f <ucscompare>
c0006245:	85 c0                	test   eax,eax
c0006247:	0f 84 c9 00 00 00    	je     c0006316 <find_object+0x175>
c000624d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006250:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006254:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000625c:	7f bb                	jg     c0006219 <find_object+0x78>
c000625e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006262:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0006266:	7f 98                	jg     c0006200 <find_object+0x5f>
c0006268:	eb af                	jmp    c0006219 <find_object+0x78>
c000626a:	0f b6 f1             	movzx  esi,cl
c000626d:	29 fe                	sub    esi,edi
c000626f:	24 01                	and    al,0x1
c0006271:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006275:	74 05                	je     c000627c <find_object+0xdb>
c0006277:	83 ee 21             	sub    esi,0x21
c000627a:	eb 5b                	jmp    c00062d7 <find_object+0x136>
c000627c:	47                   	inc    edi
c000627d:	83 ee 22             	sub    esi,0x22
c0006280:	eb 55                	jmp    c00062d7 <find_object+0x136>
c0006282:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006285:	fe c8                	dec    al
c0006287:	3c 01                	cmp    al,0x1
c0006289:	77 51                	ja     c00062dc <find_object+0x13b>
c000628b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000628f:	50                   	push   eax
c0006290:	6a 02                	push   0x2
c0006292:	68 dd f5 01 c0       	push   0xc001f5dd
c0006297:	57                   	push   edi
c0006298:	e8 a3 a5 ff ff       	call   c0000840 <strncmp>
c000629d:	83 c4 10             	add    esp,0x10
c00062a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a4:	85 c0                	test   eax,eax
c00062a6:	75 27                	jne    c00062cf <find_object+0x12e>
c00062a8:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c00062ac:	50                   	push   eax
c00062ad:	8d 47 05             	lea    eax,[edi+0x5]
c00062b0:	83 ea 05             	sub    edx,0x5
c00062b3:	52                   	push   edx
c00062b4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00062b8:	50                   	push   eax
c00062b9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00062bd:	50                   	push   eax
c00062be:	e8 fd a3 ff ff       	call   c00006c0 <strncpy>
c00062c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00062c7:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c00062cc:	83 c4 10             	add    esp,0x10
c00062cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00062d3:	29 c6                	sub    esi,eax
c00062d5:	01 c7                	add    edi,eax
c00062d7:	83 fe 03             	cmp    esi,0x3
c00062da:	7f a6                	jg     c0006282 <find_object+0xe1>
c00062dc:	85 d2                	test   edx,edx
c00062de:	7e 40                	jle    c0006320 <find_object+0x17f>
c00062e0:	51                   	push   ecx
c00062e1:	51                   	push   ecx
c00062e2:	6a 2f                	push   0x2f
c00062e4:	55                   	push   ebp
c00062e5:	e8 16 a5 ff ff       	call   c0000800 <strchr>
c00062ea:	83 c4 10             	add    esp,0x10
c00062ed:	85 c0                	test   eax,eax
c00062ef:	74 04                	je     c00062f5 <find_object+0x154>
c00062f1:	29 e8                	sub    eax,ebp
c00062f3:	eb 0c                	jmp    c0006301 <find_object+0x160>
c00062f5:	83 ec 0c             	sub    esp,0xc
c00062f8:	55                   	push   ebp
c00062f9:	e8 92 a2 ff ff       	call   c0000590 <strlen>
c00062fe:	83 c4 10             	add    esp,0x10
c0006301:	52                   	push   edx
c0006302:	50                   	push   eax
c0006303:	55                   	push   ebp
c0006304:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006308:	50                   	push   eax
c0006309:	e8 34 fe ff ff       	call   c0006142 <strnicmp>
c000630e:	83 c4 10             	add    esp,0x10
c0006311:	e9 2f ff ff ff       	jmp    c0006245 <find_object+0xa4>
c0006316:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000631a:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000631e:	eb 1e                	jmp    c000633e <find_object+0x19d>
c0006320:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006324:	8d 43 21             	lea    eax,[ebx+0x21]
c0006327:	89 e9                	mov    ecx,ebp
c0006329:	e8 a1 fc ff ff       	call   c0005fcf <fncompare>
c000632e:	85 c0                	test   eax,eax
c0006330:	0f 85 17 ff ff ff    	jne    c000624d <find_object+0xac>
c0006336:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000633a:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000633e:	0f 85 09 ff ff ff    	jne    c000624d <find_object+0xac>
c0006344:	81 c4 2c 01 00 00    	add    esp,0x12c
c000634a:	89 d8                	mov    eax,ebx
c000634c:	5b                   	pop    ebx
c000634d:	5e                   	pop    esi
c000634e:	5f                   	pop    edi
c000634f:	5d                   	pop    ebp
c0006350:	c3                   	ret    

c0006351 <find_object_path>:
c0006351:	55                   	push   ebp
c0006352:	57                   	push   edi
c0006353:	89 d7                	mov    edi,edx
c0006355:	56                   	push   esi
c0006356:	89 c6                	mov    esi,eax
c0006358:	53                   	push   ebx
c0006359:	89 cb                	mov    ebx,ecx
c000635b:	83 ec 0c             	sub    esp,0xc
c000635e:	50                   	push   eax
c000635f:	50                   	push   eax
c0006360:	6a 2f                	push   0x2f
c0006362:	56                   	push   esi
c0006363:	e8 98 a4 ff ff       	call   c0000800 <strchr>
c0006368:	83 c4 10             	add    esp,0x10
c000636b:	85 c0                	test   eax,eax
c000636d:	89 c5                	mov    ebp,eax
c000636f:	74 3a                	je     c00063ab <find_object_path+0x5a>
c0006371:	39 ee                	cmp    esi,ebp
c0006373:	74 31                	je     c00063a6 <find_object_path+0x55>
c0006375:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006378:	e8 b4 fb ff ff       	call   c0005f31 <iso_733>
c000637d:	89 c2                	mov    edx,eax
c000637f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006382:	e8 aa fb ff ff       	call   c0005f31 <iso_733>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	52                   	push   edx
c000638b:	89 c1                	mov    ecx,eax
c000638d:	ba 01 00 00 00       	mov    edx,0x1
c0006392:	89 f0                	mov    eax,esi
c0006394:	e8 08 fe ff ff       	call   c00061a1 <find_object>
c0006399:	83 c4 10             	add    esp,0x10
c000639c:	85 c0                	test   eax,eax
c000639e:	89 c3                	mov    ebx,eax
c00063a0:	75 04                	jne    c00063a6 <find_object_path+0x55>
c00063a2:	31 db                	xor    ebx,ebx
c00063a4:	eb 36                	jmp    c00063dc <find_object_path+0x8b>
c00063a6:	8d 75 01             	lea    esi,[ebp+0x1]
c00063a9:	eb b3                	jmp    c000635e <find_object_path+0xd>
c00063ab:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00063ae:	74 28                	je     c00063d8 <find_object_path+0x87>
c00063b0:	8d 43 0a             	lea    eax,[ebx+0xa]
c00063b3:	e8 79 fb ff ff       	call   c0005f31 <iso_733>
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	8d 43 02             	lea    eax,[ebx+0x2]
c00063bd:	e8 6f fb ff ff       	call   c0005f31 <iso_733>
c00063c2:	83 ec 0c             	sub    esp,0xc
c00063c5:	52                   	push   edx
c00063c6:	89 c1                	mov    ecx,eax
c00063c8:	89 fa                	mov    edx,edi
c00063ca:	89 f0                	mov    eax,esi
c00063cc:	e8 d0 fd ff ff       	call   c00061a1 <find_object>
c00063d1:	83 c4 10             	add    esp,0x10
c00063d4:	89 c3                	mov    ebx,eax
c00063d6:	eb 04                	jmp    c00063dc <find_object_path+0x8b>
c00063d8:	85 ff                	test   edi,edi
c00063da:	74 c6                	je     c00063a2 <find_object_path+0x51>
c00063dc:	83 c4 0c             	add    esp,0xc
c00063df:	89 d8                	mov    eax,ebx
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	5f                   	pop    edi
c00063e4:	5d                   	pop    ebp
c00063e5:	c3                   	ret    

c00063e6 <stricmp>:
c00063e6:	57                   	push   edi
c00063e7:	56                   	push   esi
c00063e8:	31 f6                	xor    esi,esi
c00063ea:	53                   	push   ebx
c00063eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063ef:	83 ec 0c             	sub    esp,0xc
c00063f2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00063f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fa:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00063fe:	46                   	inc    esi
c00063ff:	50                   	push   eax
c0006400:	e8 8b a5 ff ff       	call   c0000990 <toupper>
c0006405:	89 04 24             	mov    DWORD PTR [esp],eax
c0006408:	e8 a3 a5 ff ff       	call   c00009b0 <tolower>
c000640d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006410:	89 c3                	mov    ebx,eax
c0006412:	e8 79 a5 ff ff       	call   c0000990 <toupper>
c0006417:	89 04 24             	mov    DWORD PTR [esp],eax
c000641a:	e8 91 a5 ff ff       	call   c00009b0 <tolower>
c000641f:	83 c4 10             	add    esp,0x10
c0006422:	39 c3                	cmp    ebx,eax
c0006424:	75 04                	jne    c000642a <stricmp+0x44>
c0006426:	85 db                	test   ebx,ebx
c0006428:	75 c1                	jne    c00063eb <stricmp+0x5>
c000642a:	29 c3                	sub    ebx,eax
c000642c:	89 d8                	mov    eax,ebx
c000642e:	5b                   	pop    ebx
c000642f:	5e                   	pop    esi
c0006430:	5f                   	pop    edi
c0006431:	c3                   	ret    

c0006432 <iso_open>:
c0006432:	57                   	push   edi
c0006433:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006438:	56                   	push   esi
c0006439:	53                   	push   ebx
c000643a:	31 db                	xor    ebx,ebx
c000643c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006445:	0f 95 c3             	setne  bl
c0006448:	89 da                	mov    edx,ebx
c000644a:	e8 02 ff ff ff       	call   c0006351 <find_object_path>
c000644f:	83 ca ff             	or     edx,0xffffffff
c0006452:	85 c0                	test   eax,eax
c0006454:	74 5e                	je     c00064b4 <iso_open+0x82>
c0006456:	89 c1                	mov    ecx,eax
c0006458:	31 d2                	xor    edx,edx
c000645a:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006460:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006467:	75 42                	jne    c00064ab <iso_open+0x79>
c0006469:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006473:	8d 41 02             	lea    eax,[ecx+0x2]
c0006476:	e8 b6 fa ff ff       	call   c0005f31 <iso_733>
c000647b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006481:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000648b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006491:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006494:	e8 98 fa ff ff       	call   c0005f31 <iso_733>
c0006499:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c00064a3:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c00064a9:	eb 09                	jmp    c00064b4 <iso_open+0x82>
c00064ab:	42                   	inc    edx
c00064ac:	83 fa 10             	cmp    edx,0x10
c00064af:	75 a9                	jne    c000645a <iso_open+0x28>
c00064b1:	83 ca ff             	or     edx,0xffffffff
c00064b4:	5b                   	pop    ebx
c00064b5:	89 d0                	mov    eax,edx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	c3                   	ret    

c00064ba <iso_close>:
c00064ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00064be:	83 f8 0f             	cmp    eax,0xf
c00064c1:	7f 10                	jg     c00064d3 <iso_close+0x19>
c00064c3:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00064c9:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00064d3:	e9 6b fb ff ff       	jmp    c0006043 <bclear_cache>

c00064d8 <iso_read>:
c00064d8:	55                   	push   ebp
c00064d9:	57                   	push   edi
c00064da:	56                   	push   esi
c00064db:	53                   	push   ebx
c00064dc:	83 ec 1c             	sub    esp,0x1c
c00064df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00064e3:	83 fd 0f             	cmp    ebp,0xf
c00064e6:	7e 0a                	jle    c00064f2 <iso_read+0x1a>
c00064e8:	83 c8 ff             	or     eax,0xffffffff
c00064eb:	89 c2                	mov    edx,eax
c00064ed:	e9 f4 00 00 00       	jmp    c00065e6 <iso_read+0x10e>
c00064f2:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00064f8:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00064ff:	74 e7                	je     c00064e8 <iso_read+0x10>
c0006501:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006507:	85 d2                	test   edx,edx
c0006509:	75 dd                	jne    c00064e8 <iso_read+0x10>
c000650b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006510:	0f 84 cd 00 00 00    	je     c00065e3 <iso_read+0x10b>
c0006516:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000651c:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c0006522:	29 c3                	sub    ebx,eax
c0006524:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006528:	89 d9                	mov    ecx,ebx
c000652a:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c000652f:	85 c9                	test   ecx,ecx
c0006531:	0f 84 ac 00 00 00    	je     c00065e3 <iso_read+0x10b>
c0006537:	89 c6                	mov    esi,eax
c0006539:	bb 00 08 00 00       	mov    ebx,0x800
c000653e:	c1 e8 0b             	shr    eax,0xb
c0006541:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006547:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000654d:	29 f3                	sub    ebx,esi
c000654f:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006555:	75 3f                	jne    c0006596 <iso_read+0xbe>
c0006557:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000655d:	7e 37                	jle    c0006596 <iso_read+0xbe>
c000655f:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006565:	be 20 00 00 00       	mov    esi,0x20
c000656a:	7f 05                	jg     c0006571 <iso_read+0x99>
c000656c:	89 ce                	mov    esi,ecx
c000656e:	c1 fe 0b             	sar    esi,0xb
c0006571:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006575:	89 f3                	mov    ebx,esi
c0006577:	52                   	push   edx
c0006578:	56                   	push   esi
c0006579:	50                   	push   eax
c000657a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000657e:	c1 e3 0b             	shl    ebx,0xb
c0006581:	e8 21 fb ff ff       	call   c00060a7 <isoReadDiscSector>
c0006586:	83 c4 10             	add    esp,0x10
c0006589:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000658d:	85 c0                	test   eax,eax
c000658f:	7f 3d                	jg     c00065ce <iso_read+0xf6>
c0006591:	e9 52 ff ff ff       	jmp    c00064e8 <iso_read+0x10>
c0006596:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000659a:	39 d9                	cmp    ecx,ebx
c000659c:	0f 4e d9             	cmovle ebx,ecx
c000659f:	e8 95 fb ff ff       	call   c0006139 <bdread>
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 88 3c ff ff ff    	js     c00064e8 <iso_read+0x10>
c00065ac:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c00065b3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00065bd:	25 ff 07 00 00       	and    eax,0x7ff
c00065c2:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00065c6:	89 d9                	mov    ecx,ebx
c00065c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00065ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00065ce:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00065d2:	01 da                	add    edx,ebx
c00065d4:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00065da:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00065de:	e9 28 ff ff ff       	jmp    c000650b <iso_read+0x33>
c00065e3:	89 d0                	mov    eax,edx
c00065e5:	99                   	cdq    
c00065e6:	83 c4 1c             	add    esp,0x1c
c00065e9:	5b                   	pop    ebx
c00065ea:	5e                   	pop    esi
c00065eb:	5f                   	pop    edi
c00065ec:	5d                   	pop    ebp
c00065ed:	c3                   	ret    

c00065ee <iso_seek>:
c00065ee:	55                   	push   ebp
c00065ef:	83 c8 ff             	or     eax,0xffffffff
c00065f2:	57                   	push   edi
c00065f3:	89 c2                	mov    edx,eax
c00065f5:	56                   	push   esi
c00065f6:	53                   	push   ebx
c00065f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00065fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00065ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006603:	83 fe 0f             	cmp    esi,0xf
c0006606:	7f 65                	jg     c000666d <iso_seek+0x7f>
c0006608:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000660e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c0006615:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c000661b:	74 50                	je     c000666d <iso_seek+0x7f>
c000661d:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006624:	75 47                	jne    c000666d <iso_seek+0x7f>
c0006626:	83 fb 01             	cmp    ebx,0x1
c0006629:	74 0e                	je     c0006639 <iso_seek+0x4b>
c000662b:	83 fb 02             	cmp    ebx,0x2
c000662e:	74 0e                	je     c000663e <iso_seek+0x50>
c0006630:	85 db                	test   ebx,ebx
c0006632:	75 39                	jne    c000666d <iso_seek+0x7f>
c0006634:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006637:	eb 0d                	jmp    c0006646 <iso_seek+0x58>
c0006639:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000663c:	eb 08                	jmp    c0006646 <iso_seek+0x58>
c000663e:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006641:	01 f8                	add    eax,edi
c0006643:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006646:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000664c:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c0006652:	05 40 45 02 c0       	add    eax,0xc0024540
c0006657:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000665a:	76 03                	jbe    c000665f <iso_seek+0x71>
c000665c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000665f:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006665:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c000666b:	31 d2                	xor    edx,edx
c000666d:	5b                   	pop    ebx
c000666e:	5e                   	pop    esi
c000666f:	5f                   	pop    edi
c0006670:	5d                   	pop    ebp
c0006671:	c3                   	ret    

c0006672 <iso_tell>:
c0006672:	53                   	push   ebx
c0006673:	83 c8 ff             	or     eax,0xffffffff
c0006676:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000667a:	89 c2                	mov    edx,eax
c000667c:	83 f9 0f             	cmp    ecx,0xf
c000667f:	7f 20                	jg     c00066a1 <iso_tell+0x2f>
c0006681:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006687:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000668e:	74 11                	je     c00066a1 <iso_tell+0x2f>
c0006690:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006697:	75 08                	jne    c00066a1 <iso_tell+0x2f>
c0006699:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000669f:	31 d2                	xor    edx,edx
c00066a1:	5b                   	pop    ebx
c00066a2:	c3                   	ret    

c00066a3 <iso_total>:
c00066a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066a7:	83 c8 ff             	or     eax,0xffffffff
c00066aa:	83 fa 0f             	cmp    edx,0xf
c00066ad:	7f 1e                	jg     c00066cd <iso_total+0x2a>
c00066af:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00066b5:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c00066bc:	74 0f                	je     c00066cd <iso_total+0x2a>
c00066be:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00066c5:	75 06                	jne    c00066cd <iso_total+0x2a>
c00066c7:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00066cd:	c3                   	ret    

c00066ce <fn_postprocess>:
c00066ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00066d2:	89 d0                	mov    eax,edx
c00066d4:	8a 08                	mov    cl,BYTE PTR [eax]
c00066d6:	84 c9                	test   cl,cl
c00066d8:	74 08                	je     c00066e2 <fn_postprocess+0x14>
c00066da:	80 f9 3b             	cmp    cl,0x3b
c00066dd:	74 03                	je     c00066e2 <fn_postprocess+0x14>
c00066df:	40                   	inc    eax
c00066e0:	eb f2                	jmp    c00066d4 <fn_postprocess+0x6>
c00066e2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00066e5:	39 d0                	cmp    eax,edx
c00066e7:	76 0a                	jbe    c00066f3 <fn_postprocess+0x25>
c00066e9:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00066ed:	75 04                	jne    c00066f3 <fn_postprocess+0x25>
c00066ef:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00066f3:	c3                   	ret    

c00066f4 <iso_readdir>:
c00066f4:	55                   	push   ebp
c00066f5:	57                   	push   edi
c00066f6:	56                   	push   esi
c00066f7:	53                   	push   ebx
c00066f8:	83 ec 1c             	sub    esp,0x1c
c00066fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00066ff:	83 fb 0f             	cmp    ebx,0xf
c0006702:	7f 28                	jg     c000672c <iso_readdir+0x38>
c0006704:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000670a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c0006711:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c0006717:	74 13                	je     c000672c <iso_readdir+0x38>
c0006719:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c000671d:	74 0d                	je     c000672c <iso_readdir+0x38>
c000671f:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006726:	0f 84 b1 00 00 00    	je     c00067dd <iso_readdir+0xe9>
c000672c:	83 ec 0c             	sub    esp,0xc
c000672f:	68 e0 f5 01 c0       	push   0xc001f5e0
c0006734:	e8 8f 29 01 00       	call   c00190c8 <iso_kprintf>
c0006739:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000673c:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006742:	e8 9d 29 01 00       	call   c00190e4 <iso_kprintfd>
c0006747:	c7 04 24 e5 f5 01 c0 	mov    DWORD PTR [esp],0xc001f5e5
c000674e:	e8 75 29 01 00       	call   c00190c8 <iso_kprintf>
c0006753:	58                   	pop    eax
c0006754:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c000675a:	e8 85 29 01 00       	call   c00190e4 <iso_kprintfd>
c000675f:	c7 04 24 eb f5 01 c0 	mov    DWORD PTR [esp],0xc001f5eb
c0006766:	e8 5d 29 01 00       	call   c00190c8 <iso_kprintf>
c000676b:	58                   	pop    eax
c000676c:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006772:	e8 6d 29 01 00       	call   c00190e4 <iso_kprintfd>
c0006777:	c7 04 24 f1 f5 01 c0 	mov    DWORD PTR [esp],0xc001f5f1
c000677e:	e8 45 29 01 00       	call   c00190c8 <iso_kprintf>
c0006783:	58                   	pop    eax
c0006784:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000678a:	e8 55 29 01 00       	call   c00190e4 <iso_kprintfd>
c000678f:	83 c4 10             	add    esp,0x10
c0006792:	eb 42                	jmp    c00067d6 <iso_readdir+0xe2>
c0006794:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006797:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000679e:	89 d1                	mov    ecx,edx
c00067a0:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00067a6:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00067aa:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00067ad:	75 35                	jne    c00067e4 <iso_readdir+0xf0>
c00067af:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00067b5:	81 c2 00 08 00 00    	add    edx,0x800
c00067bb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00067be:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00067c1:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00067c4:	73 1e                	jae    c00067e4 <iso_readdir+0xf0>
c00067c6:	8b 07                	mov    eax,DWORD PTR [edi]
c00067c8:	c1 ea 0b             	shr    edx,0xb
c00067cb:	01 d0                	add    eax,edx
c00067cd:	e8 5e f9 ff ff       	call   c0006130 <biread>
c00067d2:	85 c0                	test   eax,eax
c00067d4:	79 be                	jns    c0006794 <iso_readdir+0xa0>
c00067d6:	31 c0                	xor    eax,eax
c00067d8:	e9 6d 01 00 00       	jmp    c000694a <iso_readdir+0x256>
c00067dd:	31 f6                	xor    esi,esi
c00067df:	83 c8 ff             	or     eax,0xffffffff
c00067e2:	eb da                	jmp    c00067be <iso_readdir+0xca>
c00067e4:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00067ea:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00067f0:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00067f6:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00067f9:	73 db                	jae    c00067d6 <iso_readdir+0xe2>
c00067fb:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00067ff:	75 34                	jne    c0006835 <iso_readdir+0x141>
c0006801:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006805:	75 2e                	jne    c0006835 <iso_readdir+0x141>
c0006807:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000680a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006811:	01 f9                	add    ecx,edi
c0006813:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006816:	89 c8                	mov    eax,ecx
c0006818:	25 ff 07 00 00       	and    eax,0x7ff
c000681d:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006822:	01 c8                	add    eax,ecx
c0006824:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006827:	25 ff 07 00 00       	and    eax,0x7ff
c000682c:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006830:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006833:	74 a1                	je     c00067d6 <iso_readdir+0xe2>
c0006835:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c000683b:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000683f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006846:	8d 56 21             	lea    edx,[esi+0x21]
c0006849:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c000684f:	74 0c                	je     c000685d <iso_readdir+0x169>
c0006851:	89 e8                	mov    eax,ebp
c0006853:	e8 3a f6 ff ff       	call   c0005e92 <ucs2utfn>
c0006858:	e9 b4 00 00 00       	jmp    c0006911 <iso_readdir+0x21d>
c000685d:	50                   	push   eax
c000685e:	51                   	push   ecx
c000685f:	52                   	push   edx
c0006860:	55                   	push   ebp
c0006861:	e8 5a 9e ff ff       	call   c00006c0 <strncpy>
c0006866:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000686a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000686d:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006875:	e8 54 fe ff ff       	call   c00066ce <fn_postprocess>
c000687a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000687e:	83 c4 10             	add    esp,0x10
c0006881:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006884:	89 d1                	mov    ecx,edx
c0006886:	80 e1 01             	and    cl,0x1
c0006889:	29 d0                	sub    eax,edx
c000688b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000688f:	84 c9                	test   cl,cl
c0006891:	74 05                	je     c0006898 <iso_readdir+0x1a4>
c0006893:	83 e8 21             	sub    eax,0x21
c0006896:	eb 04                	jmp    c000689c <iso_readdir+0x1a8>
c0006898:	42                   	inc    edx
c0006899:	83 e8 22             	sub    eax,0x22
c000689c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00068a0:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00068a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00068aa:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00068af:	7e 60                	jle    c0006911 <iso_readdir+0x21d>
c00068b1:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00068b4:	fe c8                	dec    al
c00068b6:	3c 01                	cmp    al,0x1
c00068b8:	77 57                	ja     c0006911 <iso_readdir+0x21d>
c00068ba:	51                   	push   ecx
c00068bb:	6a 02                	push   0x2
c00068bd:	68 dd f5 01 c0       	push   0xc001f5dd
c00068c2:	52                   	push   edx
c00068c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00068c7:	e8 74 9f ff ff       	call   c0000840 <strncmp>
c00068cc:	83 c4 10             	add    esp,0x10
c00068cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068d3:	85 c0                	test   eax,eax
c00068d5:	75 2e                	jne    c0006905 <iso_readdir+0x211>
c00068d7:	50                   	push   eax
c00068d8:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00068dc:	83 e8 05             	sub    eax,0x5
c00068df:	50                   	push   eax
c00068e0:	8d 42 05             	lea    eax,[edx+0x5]
c00068e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00068e7:	50                   	push   eax
c00068e8:	55                   	push   ebp
c00068e9:	e8 d2 9d ff ff       	call   c00006c0 <strncpy>
c00068ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00068f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00068f6:	83 c4 10             	add    esp,0x10
c00068f9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00068fd:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006905:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006909:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000690d:	01 c2                	add    edx,eax
c000690f:	eb 99                	jmp    c00068aa <iso_readdir+0x1b6>
c0006911:	83 c8 ff             	or     eax,0xffffffff
c0006914:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006918:	89 c2                	mov    edx,eax
c000691a:	75 0a                	jne    c0006926 <iso_readdir+0x232>
c000691c:	8d 46 0a             	lea    eax,[esi+0xa]
c000691f:	e8 0d f6 ff ff       	call   c0005f31 <iso_733>
c0006924:	31 d2                	xor    edx,edx
c0006926:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000692c:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006932:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006938:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c000693e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006941:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006944:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c000694a:	83 c4 1c             	add    esp,0x1c
c000694d:	5b                   	pop    ebx
c000694e:	5e                   	pop    esi
c000694f:	5f                   	pop    edi
c0006950:	5d                   	pop    ebp
c0006951:	c3                   	ret    

c0006952 <iso_reset>:
c0006952:	83 ec 18             	sub    esp,0x18
c0006955:	68 fa f5 01 c0       	push   0xc001f5fa
c000695a:	e8 69 27 01 00       	call   c00190c8 <iso_kprintf>
c000695f:	e8 17 f7 ff ff       	call   c000607b <iso_break_all>
c0006964:	e8 10 f7 ff ff       	call   c0006079 <bclear>
c0006969:	31 c0                	xor    eax,eax
c000696b:	83 c4 1c             	add    esp,0x1c
c000696e:	c3                   	ret    

c000696f <init_percd>:
c000696f:	57                   	push   edi
c0006970:	56                   	push   esi
c0006971:	53                   	push   ebx
c0006972:	bb 01 00 00 00       	mov    ebx,0x1
c0006977:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000697b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006980:	e8 cd ff ff ff       	call   c0006952 <iso_reset>
c0006985:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c000698f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006994:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006998:	e8 93 f7 ff ff       	call   c0006130 <biread>
c000699d:	85 c0                	test   eax,eax
c000699f:	89 c6                	mov    esi,eax
c00069a1:	0f 88 ba 00 00 00    	js     c0006a61 <init_percd+0xf2>
c00069a7:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00069ae:	52                   	push   edx
c00069af:	6a 06                	push   0x6
c00069b1:	68 05 f6 01 c0       	push   0xc001f605
c00069b6:	83 c0 04             	add    eax,0x4
c00069b9:	50                   	push   eax
c00069ba:	e8 c1 99 ff ff       	call   c0000380 <memcmp>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	85 c0                	test   eax,eax
c00069c4:	74 08                	je     c00069ce <init_percd+0x5f>
c00069c6:	43                   	inc    ebx
c00069c7:	83 fb 04             	cmp    ebx,0x4
c00069ca:	75 c3                	jne    c000698f <init_percd+0x20>
c00069cc:	eb 1a                	jmp    c00069e8 <init_percd+0x79>
c00069ce:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c00069d5:	83 c0 5c             	add    eax,0x5c
c00069d8:	e8 25 f5 ff ff       	call   c0005f02 <isjoliet>
c00069dd:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c00069e2:	85 c0                	test   eax,eax
c00069e4:	74 e0                	je     c00069c6 <init_percd+0x57>
c00069e6:	eb 3e                	jmp    c0006a26 <init_percd+0xb7>
c00069e8:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00069ef:	75 35                	jne    c0006a26 <init_percd+0xb7>
c00069f1:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c00069f6:	83 c0 10             	add    eax,0x10
c00069f9:	e8 32 f7 ff ff       	call   c0006130 <biread>
c00069fe:	85 c0                	test   eax,eax
c0006a00:	89 c6                	mov    esi,eax
c0006a02:	78 5f                	js     c0006a63 <init_percd+0xf4>
c0006a04:	50                   	push   eax
c0006a05:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a0c:	83 cb ff             	or     ebx,0xffffffff
c0006a0f:	6a 06                	push   0x6
c0006a11:	68 0c f6 01 c0       	push   0xc001f60c
c0006a16:	83 c0 04             	add    eax,0x4
c0006a19:	50                   	push   eax
c0006a1a:	e8 61 99 ff ff       	call   c0000380 <memcmp>
c0006a1f:	83 c4 10             	add    esp,0x10
c0006a22:	85 c0                	test   eax,eax
c0006a24:	75 3d                	jne    c0006a63 <init_percd+0xf4>
c0006a26:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006a2d:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006a32:	b9 22 00 00 00       	mov    ecx,0x22
c0006a37:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006a3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a3f:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006a44:	31 db                	xor    ebx,ebx
c0006a46:	e8 e6 f4 ff ff       	call   c0005f31 <iso_733>
c0006a4b:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006a50:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006a55:	e8 d7 f4 ff ff       	call   c0005f31 <iso_733>
c0006a5a:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006a5f:	eb 02                	jmp    c0006a63 <init_percd+0xf4>
c0006a61:	89 c3                	mov    ebx,eax
c0006a63:	89 d8                	mov    eax,ebx
c0006a65:	5b                   	pop    ebx
c0006a66:	5e                   	pop    esi
c0006a67:	5f                   	pop    edi
c0006a68:	c3                   	ret    

c0006a69 <iso_ioctl>:
c0006a69:	83 ec 18             	sub    esp,0x18
c0006a6c:	68 13 f6 01 c0       	push   0xc001f613
c0006a71:	e8 52 26 01 00       	call   c00190c8 <iso_kprintf>
c0006a76:	e8 d7 fe ff ff       	call   c0006952 <iso_reset>
c0006a7b:	31 c0                	xor    eax,eax
c0006a7d:	83 c4 1c             	add    esp,0x1c
c0006a80:	c3                   	ret    

c0006a81 <fs_iso9660_init>:
c0006a81:	53                   	push   ebx
c0006a82:	31 db                	xor    ebx,ebx
c0006a84:	83 ec 14             	sub    esp,0x14
c0006a87:	68 1e f6 01 c0       	push   0xc001f61e
c0006a8c:	e8 37 26 01 00       	call   c00190c8 <iso_kprintf>
c0006a91:	83 c4 0c             	add    esp,0xc
c0006a94:	68 40 09 00 00       	push   0x940
c0006a99:	6a 00                	push   0x0
c0006a9b:	68 40 45 02 c0       	push   0xc0024540
c0006aa0:	e8 4b 9a ff ff       	call   c00004f0 <memset>
c0006aa5:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006aaf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ab6:	e8 ab 0f 00 00       	call   c0007a66 <malloc>
c0006abb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006ac2:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006ac7:	e8 9a 0f 00 00       	call   c0007a66 <malloc>
c0006acc:	83 c4 10             	add    esp,0x10
c0006acf:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006ad4:	83 ec 0c             	sub    esp,0xc
c0006ad7:	68 04 08 00 00       	push   0x804
c0006adc:	e8 85 0f 00 00       	call   c0007a66 <malloc>
c0006ae1:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006ae8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006aee:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006af5:	e8 6c 0f 00 00       	call   c0007a66 <malloc>
c0006afa:	83 c4 10             	add    esp,0x10
c0006afd:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b04:	43                   	inc    ebx
c0006b05:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b0b:	83 fb 10             	cmp    ebx,0x10
c0006b0e:	75 c4                	jne    c0006ad4 <fs_iso9660_init+0x53>
c0006b10:	83 c4 08             	add    esp,0x8
c0006b13:	31 c0                	xor    eax,eax
c0006b15:	5b                   	pop    ebx
c0006b16:	c3                   	ret    

c0006b17 <fs_iso9660_shutdown>:
c0006b17:	53                   	push   ebx
c0006b18:	31 db                	xor    ebx,ebx
c0006b1a:	83 ec 08             	sub    esp,0x8
c0006b1d:	83 ec 0c             	sub    esp,0xc
c0006b20:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006b27:	e8 4d 0f 00 00       	call   c0007a79 <free>
c0006b2c:	58                   	pop    eax
c0006b2d:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006b34:	43                   	inc    ebx
c0006b35:	e8 3f 0f 00 00       	call   c0007a79 <free>
c0006b3a:	83 c4 10             	add    esp,0x10
c0006b3d:	83 fb 10             	cmp    ebx,0x10
c0006b40:	75 db                	jne    c0006b1d <fs_iso9660_shutdown+0x6>
c0006b42:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006b47:	85 c0                	test   eax,eax
c0006b49:	74 0c                	je     c0006b57 <fs_iso9660_shutdown+0x40>
c0006b4b:	83 ec 0c             	sub    esp,0xc
c0006b4e:	50                   	push   eax
c0006b4f:	e8 25 0f 00 00       	call   c0007a79 <free>
c0006b54:	83 c4 10             	add    esp,0x10
c0006b57:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006b5c:	85 c0                	test   eax,eax
c0006b5e:	74 0c                	je     c0006b6c <fs_iso9660_shutdown+0x55>
c0006b60:	83 ec 0c             	sub    esp,0xc
c0006b63:	50                   	push   eax
c0006b64:	e8 10 0f 00 00       	call   c0007a79 <free>
c0006b69:	83 c4 10             	add    esp,0x10
c0006b6c:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006b76:	31 c0                	xor    eax,eax
c0006b78:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006b82:	83 c4 08             	add    esp,0x8
c0006b85:	5b                   	pop    ebx
c0006b86:	c3                   	ret    
c0006b87:	90                   	nop

c0006b88 <Computer::close(int, int, void*)>:
c0006b88:	83 ec 1c             	sub    esp,0x1c
c0006b8b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006b8f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006b93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006b97:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006b9b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006b9f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006ba3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ba9:	89 04 24             	mov    DWORD PTR [esp],eax
c0006bac:	e8 6f 53 00 00       	call   c000bf20 <Device::closeAll()>
c0006bb1:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bb7:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006bbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006bc0:	8b 10                	mov    edx,DWORD PTR [eax]
c0006bc2:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006bc6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006bca:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006bce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006bd2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006bd6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bda:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006bdd:	83 c4 1c             	add    esp,0x1c
c0006be0:	ff e0                	jmp    eax

c0006be2 <Krnl::firstTask()>:
c0006be2:	53                   	push   ebx
c0006be3:	83 ec 28             	sub    esp,0x28
c0006be6:	fb                   	sti    
c0006be7:	c7 04 24 2f f6 01 c0 	mov    DWORD PTR [esp],0xc001f62f
c0006bee:	e8 be 94 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006bf3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006bfa:	e8 67 0e 00 00       	call   c0007a66 <malloc>
c0006bff:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c05:	b9 01 00 00 00       	mov    ecx,0x1
c0006c0a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006c12:	ba 48 f6 01 c0       	mov    edx,0xc001f648
c0006c17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006c1b:	89 c3                	mov    ebx,eax
c0006c1d:	31 c0                	xor    eax,eax
c0006c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c23:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c26:	e8 a5 df 00 00       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0006c2b:	b8 ff 00 00 00       	mov    eax,0xff
c0006c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c34:	31 c0                	xor    eax,eax
c0006c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c3a:	b8 97 74 00 c0       	mov    eax,0xc0007497
c0006c3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006c42:	31 db                	xor    ebx,ebx
c0006c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006c48:	e8 9b e1 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0006c4d:	b8 7a 00 00 00       	mov    eax,0x7a
c0006c52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c56:	31 c0                	xor    eax,eax
c0006c58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006c5c:	b8 14 58 01 c0       	mov    eax,0xc0015814
c0006c61:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006c65:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006c6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c6d:	e8 76 e1 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0006c72:	b2 01                	mov    dl,0x1
c0006c74:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006c7a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006c7f:	e8 58 9c 00 00       	call   c00108dc <KeInitRand()>
c0006c84:	c7 04 24 44 f7 01 c0 	mov    DWORD PTR [esp],0xc001f744
c0006c8b:	e8 21 94 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006c90:	e8 3c ef 00 00       	call   c0015bd1 <Vm::initialise8086()>
c0006c95:	e8 ed 40 00 00       	call   c000ad87 <Fs::initVFS()>
c0006c9a:	c7 04 24 55 f6 01 c0 	mov    DWORD PTR [esp],0xc001f655
c0006ca1:	e8 0b 94 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006ca6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006cab:	31 c9                	xor    ecx,ecx
c0006cad:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006cb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cb5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006cb9:	31 c9                	xor    ecx,ecx
c0006cbb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006cbf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006cc3:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006cc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ccb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006cce:	c7 04 24 44 f7 01 c0 	mov    DWORD PTR [esp],0xc001f744
c0006cd5:	e8 d7 93 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006cda:	e8 a9 98 00 00       	call   c0010588 <Krnl::loadSystemEnv()>
c0006cdf:	e8 06 9b 00 00       	call   c00107ea <Krnl::setupPowerManager()>
c0006ce4:	b8 6f f6 01 c0       	mov    eax,0xc001f66f
c0006ce9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf1:	c7 04 24 78 f6 01 c0 	mov    DWORD PTR [esp],0xc001f678
c0006cf8:	e8 b6 c1 00 00       	call   c0012eb3 <Reg::readIntWithDefault(char*, char*, int)>
c0006cfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d00:	e8 7f 4b 00 00       	call   c000b884 <User::loadClockSettings(int)>
c0006d05:	c7 04 24 68 f7 01 c0 	mov    DWORD PTR [esp],0xc001f768
c0006d0c:	e8 a0 93 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006d11:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d16:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d1f:	e8 fa 51 00 00       	call   c000bf1e <Device::loadDriversForAll()>
c0006d24:	c7 04 24 80 f6 01 c0 	mov    DWORD PTR [esp],0xc001f680
c0006d2b:	e8 81 93 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0006d30:	b8 01 00 00 00       	mov    eax,0x1
c0006d35:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006d3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d3f:	c7 04 24 91 f6 01 c0 	mov    DWORD PTR [esp],0xc001f691
c0006d46:	e8 72 d8 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c0006d4b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d52:	e8 a2 da 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c0006d57:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006d5e:	e8 b9 e4 00 00       	call   c001521c <blockTask(TaskState)>
c0006d63:	eb f2                	jmp    c0006d57 <Krnl::firstTask()+0x175>
c0006d65:	90                   	nop

c0006d66 <Computer::Computer()>:
c0006d66:	83 ec 1c             	sub    esp,0x1c
c0006d69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d6d:	c7 44 24 04 ad f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f6ad
c0006d75:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d78:	e8 1d 52 00 00       	call   c000bf9a <Device::Device(char const*)>
c0006d7d:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c0006d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d86:	89 10                	mov    DWORD PTR [eax],edx
c0006d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d8c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006d96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006d9a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006da8:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006daf:	80 ca 04             	or     dl,0x4
c0006db2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dbc:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006dc3:	0f b6 d0             	movzx  edx,al
c0006dc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dca:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006dd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dd5:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006ddc:	0f b6 d0             	movzx  edx,al
c0006ddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006de3:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dec:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006df3:	88 c1                	mov    cl,al
c0006df5:	fe c1                	inc    cl
c0006df7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006dfb:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e01:	0f b6 d0             	movzx  edx,al
c0006e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e08:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e0d:	80 e1 3f             	and    cl,0x3f
c0006e10:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e14:	90                   	nop
c0006e15:	83 c4 1c             	add    esp,0x1c
c0006e18:	c3                   	ret    
c0006e19:	90                   	nop

c0006e1a <Computer::setBootMessage(char const*)>:
c0006e1a:	c3                   	ret    
c0006e1b:	90                   	nop

c0006e1c <Computer::detectFeatures()>:
c0006e1c:	55                   	push   ebp
c0006e1d:	57                   	push   edi
c0006e1e:	56                   	push   esi
c0006e1f:	53                   	push   ebx
c0006e20:	83 ec 3c             	sub    esp,0x3c
c0006e23:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006e27:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006e31:	e8 c3 93 ff ff       	call   c00001f9 <detectCPUID>
c0006e36:	85 c0                	test   eax,eax
c0006e38:	0f 95 c0             	setne  al
c0006e3b:	00 c0                	add    al,al
c0006e3d:	88 c2                	mov    dl,al
c0006e3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006e46:	24 fd                	and    al,0xfd
c0006e48:	08 d0                	or     al,dl
c0006e4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e50:	24 02                	and    al,0x2
c0006e52:	75 48                	jne    c0006e9c <Computer::detectFeatures()+0x80>
c0006e54:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006e5b:	74 07                	je     c0006e64 <Computer::detectFeatures()+0x48>
c0006e5d:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006e64:	e8 5d 71 01 00       	call   c001dfc6 <x87Detect>
c0006e69:	24 01                	and    al,0x1
c0006e6b:	c0 e0 04             	shl    al,0x4
c0006e6e:	88 c2                	mov    dl,al
c0006e70:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006e77:	24 ef                	and    al,0xef
c0006e79:	08 d0                	or     al,dl
c0006e7b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e81:	88 c2                	mov    dl,al
c0006e83:	80 e2 10             	and    dl,0x10
c0006e86:	0f 85 34 01 00 00    	jne    c0006fc0 <Computer::detectFeatures()+0x1a4>
c0006e8c:	84 c0                	test   al,al
c0006e8e:	0f 88 4f 01 00 00    	js     c0006fe3 <Computer::detectFeatures()+0x1c7>
c0006e94:	83 c4 3c             	add    esp,0x3c
c0006e97:	5b                   	pop    ebx
c0006e98:	5e                   	pop    esi
c0006e99:	5f                   	pop    edi
c0006e9a:	5d                   	pop    ebp
c0006e9b:	c3                   	ret    
c0006e9c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006ea3:	e8 62 87 00 00       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c0006ea8:	24 01                	and    al,0x1
c0006eaa:	c0 e0 03             	shl    al,0x3
c0006ead:	88 c2                	mov    dl,al
c0006eaf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006eb6:	24 f7                	and    al,0xf7
c0006eb8:	08 d0                	or     al,dl
c0006eba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ec0:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006ec7:	e8 3e 87 00 00       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c0006ecc:	24 01                	and    al,0x1
c0006ece:	88 c2                	mov    dl,al
c0006ed0:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ed7:	24 fe                	and    al,0xfe
c0006ed9:	08 d0                	or     al,dl
c0006edb:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ee1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006ee8:	e8 1d 87 00 00       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c0006eed:	c0 e0 07             	shl    al,0x7
c0006ef0:	88 c2                	mov    dl,al
c0006ef2:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ef9:	24 7f                	and    al,0x7f
c0006efb:	08 d0                	or     al,dl
c0006efd:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f0a:	e8 fb 86 00 00       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c0006f0f:	24 01                	and    al,0x1
c0006f11:	c0 e0 05             	shl    al,0x5
c0006f14:	88 c2                	mov    dl,al
c0006f16:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f1d:	24 df                	and    al,0xdf
c0006f1f:	08 d0                	or     al,dl
c0006f21:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006f2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f31:	0f 84 d1 00 00 00    	je     c0007008 <Computer::detectFeatures()+0x1ec>
c0006f37:	24 fe                	and    al,0xfe
c0006f39:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	88 c2                	mov    dl,al
c0006f48:	80 e2 09             	and    dl,0x9
c0006f4b:	fe ca                	dec    dl
c0006f4d:	75 08                	jne    c0006f57 <Computer::detectFeatures()+0x13b>
c0006f4f:	24 fe                	and    al,0xfe
c0006f51:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f57:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006f5b:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006f5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f63:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006f67:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006f6b:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006f6f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0006f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0006f77:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c0006f7e:	e8 03 86 00 00       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f83:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006f87:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c0006f8f:	0f 86 bf fe ff ff    	jbe    c0006e54 <Computer::detectFeatures()+0x38>
c0006f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006f99:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006f9d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0006fa1:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0006fa5:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c0006fac:	e8 d5 85 00 00       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006fb1:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006fbb:	e9 94 fe ff ff       	jmp    c0006e54 <Computer::detectFeatures()+0x38>
c0006fc0:	e8 bb 6f 01 00       	call   c001df80 <absolutelyNoChanceInHell>
c0006fc5:	88 c2                	mov    dl,al
c0006fc7:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fce:	c0 e2 07             	shl    dl,0x7
c0006fd1:	24 7f                	and    al,0x7f
c0006fd3:	08 d0                	or     al,dl
c0006fd5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fdb:	84 c0                	test   al,al
c0006fdd:	0f 89 b1 fe ff ff    	jns    c0006e94 <Computer::detectFeatures()+0x78>
c0006fe3:	e8 08 6c 01 00       	call   c001dbf0 <avxDetect>
c0006fe8:	24 01                	and    al,0x1
c0006fea:	c0 e0 05             	shl    al,0x5
c0006fed:	88 c2                	mov    dl,al
c0006fef:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006ff6:	24 df                	and    al,0xdf
c0006ff8:	08 d0                	or     al,dl
c0006ffa:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007000:	83 c4 3c             	add    esp,0x3c
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	5f                   	pop    edi
c0007006:	5d                   	pop    ebp
c0007007:	c3                   	ret    
c0007008:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000700f:	e8 f6 85 00 00       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c0007014:	24 01                	and    al,0x1
c0007016:	88 c2                	mov    dl,al
c0007018:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000701f:	24 fe                	and    al,0xfe
c0007021:	08 d0                	or     al,dl
c0007023:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0007029:	e9 11 ff ff ff       	jmp    c0006f3f <Computer::detectFeatures()+0x123>

c000702e <Computer::displayFeatures()>:
c000702e:	c3                   	ret    
c000702f:	90                   	nop

c0007030 <Computer::rdmsr(unsigned int)>:
c0007030:	83 ec 1c             	sub    esp,0x1c
c0007033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007037:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000703e:	74 0a                	je     c000704a <Computer::rdmsr(unsigned int)+0x1a>
c0007040:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007044:	0f 32                	rdmsr  
c0007046:	83 c4 1c             	add    esp,0x1c
c0007049:	c3                   	ret    
c000704a:	c7 04 24 b6 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6b6
c0007051:	e8 cf 96 00 00       	call   c0010725 <KePanic(char const*)>
c0007056:	eb e8                	jmp    c0007040 <Computer::rdmsr(unsigned int)+0x10>

c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007058:	83 ec 1c             	sub    esp,0x1c
c000705b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000705f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007063:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007067:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000706b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000706f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007076:	74 16                	je     c000708e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007078:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000707c:	89 f0                	mov    eax,esi
c000707e:	89 fa                	mov    edx,edi
c0007080:	0f 30                	wrmsr  
c0007082:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007086:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000708a:	83 c4 1c             	add    esp,0x1c
c000708d:	c3                   	ret    
c000708e:	c7 04 24 bc f6 01 c0 	mov    DWORD PTR [esp],0xc001f6bc
c0007095:	e8 8b 96 00 00       	call   c0010725 <KePanic(char const*)>
c000709a:	eb dc                	jmp    c0007078 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000709c <Computer::shutdown()>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	31 c9                	xor    ecx,ecx
c00070a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00070a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00070ab:	31 c9                	xor    ecx,ecx
c00070ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00070b1:	31 c9                	xor    ecx,ecx
c00070b3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00070b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ba:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070bd:	83 c4 1c             	add    esp,0x1c
c00070c0:	c3                   	ret    
c00070c1:	90                   	nop

c00070c2 <Computer::restart()>:
c00070c2:	83 ec 1c             	sub    esp,0x1c
c00070c5:	31 c9                	xor    ecx,ecx
c00070c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00070cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00070d1:	31 c9                	xor    ecx,ecx
c00070d3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00070d7:	b9 01 00 00 00       	mov    ecx,0x1
c00070dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00070e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00070e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00070e6:	83 c4 1c             	add    esp,0x1c
c00070e9:	c3                   	ret    

c00070ea <Computer::sleep()>:
c00070ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ee:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00070f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00070f8:	e9 b3 7f 00 00       	jmp    c000f0b0 <ACPI::sleep()>
c00070fd:	90                   	nop

c00070fe <Computer::nmiEnabled()>:
c00070fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007102:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007109:	c3                   	ret    

c000710a <Computer::readCMOS(unsigned char)>:
c000710a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000710e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007113:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000711a:	19 c0                	sbb    eax,eax
c000711c:	24 80                	and    al,0x80
c000711e:	08 d0                	or     al,dl
c0007120:	e6 70                	out    0x70,al
c0007122:	e4 71                	in     al,0x71
c0007124:	c3                   	ret    
c0007125:	90                   	nop

c0007126 <Computer::enableNMI(bool)>:
c0007126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000712a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000712f:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007135:	b8 10 00 00 00       	mov    eax,0x10
c000713a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000713e:	eb ca                	jmp    c000710a <Computer::readCMOS(unsigned char)>

c0007140 <Computer::open(int, int, void*)>:
c0007140:	56                   	push   esi
c0007141:	53                   	push   ebx
c0007142:	83 ec 14             	sub    esp,0x14
c0007145:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c000714c:	c7 04 24 c2 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6c2
c0007153:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007157:	0f 94 05 c0 1a 02 c0 	sete   BYTE PTR ds:0xc0021ac0
c000715e:	e8 4e 8f 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0007163:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000716a:	e8 f7 08 00 00       	call   c0007a66 <malloc>
c000716f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007172:	89 c6                	mov    esi,eax
c0007174:	e8 db 7a 00 00       	call   c000ec54 <ACPI::ACPI()>
c0007179:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000717f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007183:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007186:	e8 77 4c 00 00       	call   c000be02 <Device::addChild(Device*)>
c000718b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000718e:	e8 89 fc ff ff       	call   c0006e1c <Computer::detectFeatures()>
c0007193:	b8 01 00 00 00       	mov    eax,0x1
c0007198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000719f:	e8 82 ff ff ff       	call   c0007126 <Computer::enableNMI(bool)>
c00071a4:	c7 04 24 da f6 01 c0 	mov    DWORD PTR [esp],0xc001f6da
c00071ab:	e8 01 8f 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c00071b0:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00071b7:	e8 aa 08 00 00       	call   c0007a66 <malloc>
c00071bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00071bf:	89 c6                	mov    esi,eax
c00071c1:	e8 fc 84 00 00       	call   c000f6c2 <CPU::CPU()>
c00071c6:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00071cc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00071d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071d3:	e8 2a 4c 00 00       	call   c000be02 <Device::addChild(Device*)>
c00071d8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00071de:	31 db                	xor    ebx,ebx
c00071e0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00071e4:	8b 10                	mov    edx,DWORD PTR [eax]
c00071e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00071ea:	31 c9                	xor    ecx,ecx
c00071ec:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00071f0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00071f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00071f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00071fa:	c7 04 24 f4 f6 01 c0 	mov    DWORD PTR [esp],0xc001f6f4
c0007201:	e8 ab 8e 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c0007206:	c7 04 24 e2 6b 00 c0 	mov    DWORD PTR [esp],0xc0006be2
c000720d:	e8 06 dd 00 00       	call   c0014f18 <setupMultitasking(void (*)())>
c0007212:	83 c4 14             	add    esp,0x14
c0007215:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000721a:	5b                   	pop    ebx
c000721b:	5e                   	pop    esi
c000721c:	c3                   	ret    
c000721d:	90                   	nop

c000721e <Computer::disableNMI()>:
c000721e:	83 ec 08             	sub    esp,0x8
c0007221:	31 c0                	xor    eax,eax
c0007223:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007227:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000722b:	89 04 24             	mov    DWORD PTR [esp],eax
c000722e:	e8 f3 fe ff ff       	call   c0007126 <Computer::enableNMI(bool)>
c0007233:	83 c4 08             	add    esp,0x8
c0007236:	c3                   	ret    
c0007237:	90                   	nop

c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000723c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0007241:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007248:	19 c0                	sbb    eax,eax
c000724a:	24 80                	and    al,0x80
c000724c:	08 d0                	or     al,dl
c000724e:	e6 70                	out    0x70,al
c0007250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007254:	e6 71                	out    0x71,al
c0007256:	c3                   	ret    
c0007257:	90                   	nop

c0007258 <Computer::handleNMI()>:
c0007258:	83 ec 2c             	sub    esp,0x2c
c000725b:	e4 92                	in     al,0x92
c000725d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0007261:	e4 61                	in     al,0x61
c0007263:	c7 04 24 0f f7 01 c0 	mov    DWORD PTR [esp],0xc001f70f
c000726a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000726e:	e8 63 37 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0007273:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007278:	24 10                	and    al,0x10
c000727a:	75 14                	jne    c0007290 <Computer::handleNMI()+0x38>
c000727c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007281:	24 40                	and    al,0x40
c0007283:	75 20                	jne    c00072a5 <Computer::handleNMI()+0x4d>
c0007285:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000728a:	78 2c                	js     c00072b8 <Computer::handleNMI()+0x60>
c000728c:	83 c4 2c             	add    esp,0x2c
c000728f:	c3                   	ret    
c0007290:	c7 04 24 20 f7 01 c0 	mov    DWORD PTR [esp],0xc001f720
c0007297:	e8 89 94 00 00       	call   c0010725 <KePanic(char const*)>
c000729c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00072a1:	24 40                	and    al,0x40
c00072a3:	74 e0                	je     c0007285 <Computer::handleNMI()+0x2d>
c00072a5:	c7 04 24 2d f7 01 c0 	mov    DWORD PTR [esp],0xc001f72d
c00072ac:	e8 74 94 00 00       	call   c0010725 <KePanic(char const*)>
c00072b1:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00072b6:	79 d4                	jns    c000728c <Computer::handleNMI()+0x34>
c00072b8:	b8 37 f7 01 c0       	mov    eax,0xc001f737
c00072bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00072c1:	83 c4 2c             	add    esp,0x2c
c00072c4:	e9 5c 94 00 00       	jmp    c0010725 <KePanic(char const*)>
c00072c9:	90                   	nop

c00072ca <GDTEntry::setBase(unsigned int)>:
c00072ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072d2:	89 c1                	mov    ecx,eax
c00072d4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072d8:	c1 e9 10             	shr    ecx,0x10
c00072db:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00072de:	c1 e8 18             	shr    eax,0x18
c00072e1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00072e4:	c3                   	ret    
c00072e5:	90                   	nop

c00072e6 <GDTEntry::setLimit(unsigned int)>:
c00072e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00072ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ee:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00072f1:	66 89 01             	mov    WORD PTR [ecx],ax
c00072f4:	c1 e8 10             	shr    eax,0x10
c00072f7:	24 0f                	and    al,0xf
c00072f9:	80 e2 f0             	and    dl,0xf0
c00072fc:	08 d0                	or     al,dl
c00072fe:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007301:	c3                   	ret    

c0007302 <GDT::GDT()>:
c0007302:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007306:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000730c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007310:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007316:	90                   	nop
c0007317:	c3                   	ret    

c0007318 <GDT::addEntry(GDTEntry)>:
c0007318:	53                   	push   ebx
c0007319:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000731d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007321:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007325:	8b 02                	mov    eax,DWORD PTR [edx]
c0007327:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000732b:	8d 48 01             	lea    ecx,[eax+0x1]
c000732e:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007332:	c1 e0 03             	shl    eax,0x3
c0007335:	89 0a                	mov    DWORD PTR [edx],ecx
c0007337:	5b                   	pop    ebx
c0007338:	c3                   	ret    
c0007339:	90                   	nop

c000733a <GDT::getNumberOfEntries()>:
c000733a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000733e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007340:	c3                   	ret    
c0007341:	90                   	nop

c0007342 <GDT::flush()>:
c0007342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007346:	8b 10                	mov    edx,DWORD PTR [eax]
c0007348:	83 c0 04             	add    eax,0x4
c000734b:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007350:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007357:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c000735e:	e9 f7 8f ff ff       	jmp    c000035a <loadGDT>
c0007363:	90                   	nop

c0007364 <GDT::setup()>:
c0007364:	57                   	push   edi
c0007365:	56                   	push   esi
c0007366:	53                   	push   ebx
c0007367:	83 ec 30             	sub    esp,0x30
c000736a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000736e:	6a 00                	push   0x0
c0007370:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007374:	56                   	push   esi
c0007375:	e8 50 ff ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c000737a:	6a 00                	push   0x0
c000737c:	56                   	push   esi
c000737d:	e8 64 ff ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c0007382:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000738a:	6a 00                	push   0x0
c000738c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007390:	56                   	push   esi
c0007391:	e8 34 ff ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0007396:	68 ff ff ff 00       	push   0xffffff
c000739b:	56                   	push   esi
c000739c:	e8 45 ff ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c00073a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073a9:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00073ae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073b2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00073b7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00073bb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00073bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00073c3:	89 f8                	mov    eax,edi
c00073c5:	89 fa                	mov    edx,edi
c00073c7:	80 e4 f7             	and    ah,0xf7
c00073ca:	80 ce 60             	or     dh,0x60
c00073cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00073d1:	89 c7                	mov    edi,eax
c00073d3:	80 cc 60             	or     ah,0x60
c00073d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00073da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00073de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00073e2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00073e6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00073ea:	83 c4 20             	add    esp,0x20
c00073ed:	6a 00                	push   0x0
c00073ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00073f3:	50                   	push   eax
c00073f4:	e8 d1 fe ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c00073f9:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00073fd:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007401:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007406:	6a 00                	push   0x0
c0007408:	8d 44 24 34          	lea    eax,[esp+0x34]
c000740c:	50                   	push   eax
c000740d:	e8 b8 fe ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0007412:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007417:	83 c4 0c             	add    esp,0xc
c000741a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007422:	53                   	push   ebx
c0007423:	e8 f0 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007428:	83 c4 0c             	add    esp,0xc
c000742b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000742f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007433:	53                   	push   ebx
c0007434:	e8 df fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007439:	83 c4 0c             	add    esp,0xc
c000743c:	57                   	push   edi
c000743d:	56                   	push   esi
c000743e:	53                   	push   ebx
c000743f:	e8 d4 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007444:	83 c4 0c             	add    esp,0xc
c0007447:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000744b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000744f:	53                   	push   ebx
c0007450:	e8 c3 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007455:	83 c4 0c             	add    esp,0xc
c0007458:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000745c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007460:	53                   	push   ebx
c0007461:	e8 b2 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007466:	83 c4 0c             	add    esp,0xc
c0007469:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000746d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007471:	53                   	push   ebx
c0007472:	e8 a1 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007477:	83 c4 0c             	add    esp,0xc
c000747a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000747e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007482:	53                   	push   ebx
c0007483:	e8 90 fe ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0007488:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000748b:	e8 b2 fe ff ff       	call   c0007342 <GDT::flush()>
c0007490:	83 c4 40             	add    esp,0x40
c0007493:	5b                   	pop    ebx
c0007494:	5e                   	pop    esi
c0007495:	5f                   	pop    edi
c0007496:	c3                   	ret    

c0007497 <idleFunction(void*)>:
c0007497:	83 ec 0c             	sub    esp,0xc
c000749a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000749f:	48                   	dec    eax
c00074a0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00074a5:	75 01                	jne    c00074a8 <idleFunction(void*)+0x11>
c00074a7:	fb                   	sti    
c00074a8:	e8 3e f5 00 00       	call   c00169eb <HalSystemIdle()>
c00074ad:	e8 c9 70 01 00       	call   c001e57b <idleCommon()>
c00074b2:	eb f4                	jmp    c00074a8 <idleFunction(void*)+0x11>

c00074b4 <IDTEntry::IDTEntry(bool)>:
c00074b4:	83 ec 04             	sub    esp,0x4
c00074b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074bb:	88 04 24             	mov    BYTE PTR [esp],al
c00074be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074c2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00074c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074cc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00074d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074d4:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00074d8:	80 e2 f0             	and    dl,0xf0
c00074db:	80 ca 0e             	or     dl,0xe
c00074de:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074e5:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00074e9:	80 e2 ef             	and    dl,0xef
c00074ec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00074ef:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00074f3:	74 07                	je     c00074fc <IDTEntry::IDTEntry(bool)+0x48>
c00074f5:	b2 03                	mov    dl,0x3
c00074f7:	eb 07                	jmp    c0007500 <IDTEntry::IDTEntry(bool)+0x4c>
c00074f9:	8d 76 00             	lea    esi,[esi+0x0]
c00074fc:	b2 00                	mov    dl,0x0
c00074fe:	66 90                	xchg   ax,ax
c0007500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007504:	80 e2 03             	and    dl,0x3
c0007507:	88 d1                	mov    cl,dl
c0007509:	c0 e1 05             	shl    cl,0x5
c000750c:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007510:	80 e2 9f             	and    dl,0x9f
c0007513:	08 ca                	or     dl,cl
c0007515:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000751c:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007520:	80 ca 80             	or     dl,0x80
c0007523:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007526:	90                   	nop
c0007527:	83 c4 04             	add    esp,0x4
c000752a:	c3                   	ret    
c000752b:	90                   	nop

c000752c <IDTEntry::setOffset(unsigned int)>:
c000752c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007534:	66 89 02             	mov    WORD PTR [edx],ax
c0007537:	c1 e8 10             	shr    eax,0x10
c000753a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000753e:	c3                   	ret    
c000753f:	90                   	nop

c0007540 <IDT::IDT()>:
c0007540:	90                   	nop
c0007541:	c3                   	ret    

c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007546:	83 c0 30             	add    eax,0x30
c0007549:	c3                   	ret    

c000754a <IDT::addEntry(IDTEntry, int)>:
c000754a:	53                   	push   ebx
c000754b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000754f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007553:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000755b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000755e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007562:	5b                   	pop    ebx
c0007563:	c3                   	ret    

c0007564 <IDT::addEntry(int, void (*)(), bool)>:
c0007564:	53                   	push   ebx
c0007565:	83 ec 10             	sub    esp,0x10
c0007568:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000756d:	50                   	push   eax
c000756e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007572:	53                   	push   ebx
c0007573:	e8 3c ff ff ff       	call   c00074b4 <IDTEntry::IDTEntry(bool)>
c0007578:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000757c:	53                   	push   ebx
c000757d:	e8 aa ff ff ff       	call   c000752c <IDTEntry::setOffset(unsigned int)>
c0007582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007586:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000758a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000758e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007592:	e8 b3 ff ff ff       	call   c000754a <IDT::addEntry(IDTEntry, int)>
c0007597:	83 c4 30             	add    esp,0x30
c000759a:	5b                   	pop    ebx
c000759b:	c3                   	ret    

c000759c <IDT::flush()>:
c000759c:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c00075a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075a9:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c00075ae:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c00075b5:	c3                   	ret    

c00075b6 <IDT::setup()>:
c00075b6:	57                   	push   edi
c00075b7:	56                   	push   esi
c00075b8:	53                   	push   ebx
c00075b9:	83 ec 10             	sub    esp,0x10
c00075bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00075c0:	6a 00                	push   0x0
c00075c2:	68 80 dc 01 c0       	push   0xc001dc80
c00075c7:	6a 00                	push   0x0
c00075c9:	53                   	push   ebx
c00075ca:	e8 95 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075cf:	6a 00                	push   0x0
c00075d1:	68 90 dc 01 c0       	push   0xc001dc90
c00075d6:	6a 01                	push   0x1
c00075d8:	53                   	push   ebx
c00075d9:	e8 86 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	83 c4 20             	add    esp,0x20
c00075e1:	6a 00                	push   0x0
c00075e3:	68 9a dc 01 c0       	push   0xc001dc9a
c00075e8:	6a 02                	push   0x2
c00075ea:	53                   	push   ebx
c00075eb:	e8 74 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075f0:	6a 00                	push   0x0
c00075f2:	68 a4 dc 01 c0       	push   0xc001dca4
c00075f7:	6a 03                	push   0x3
c00075f9:	53                   	push   ebx
c00075fa:	e8 65 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	83 c4 20             	add    esp,0x20
c0007602:	6a 00                	push   0x0
c0007604:	68 ae dc 01 c0       	push   0xc001dcae
c0007609:	6a 04                	push   0x4
c000760b:	53                   	push   ebx
c000760c:	e8 53 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007611:	6a 00                	push   0x0
c0007613:	68 b8 dc 01 c0       	push   0xc001dcb8
c0007618:	6a 05                	push   0x5
c000761a:	53                   	push   ebx
c000761b:	e8 44 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	83 c4 20             	add    esp,0x20
c0007623:	6a 00                	push   0x0
c0007625:	68 c2 dc 01 c0       	push   0xc001dcc2
c000762a:	6a 06                	push   0x6
c000762c:	53                   	push   ebx
c000762d:	e8 32 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007632:	6a 00                	push   0x0
c0007634:	68 cc dc 01 c0       	push   0xc001dccc
c0007639:	6a 07                	push   0x7
c000763b:	53                   	push   ebx
c000763c:	e8 23 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	83 c4 20             	add    esp,0x20
c0007644:	6a 00                	push   0x0
c0007646:	68 d6 dc 01 c0       	push   0xc001dcd6
c000764b:	6a 08                	push   0x8
c000764d:	53                   	push   ebx
c000764e:	e8 11 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007653:	6a 00                	push   0x0
c0007655:	68 de dc 01 c0       	push   0xc001dcde
c000765a:	6a 09                	push   0x9
c000765c:	53                   	push   ebx
c000765d:	e8 02 ff ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	83 c4 20             	add    esp,0x20
c0007665:	6a 00                	push   0x0
c0007667:	68 e8 dc 01 c0       	push   0xc001dce8
c000766c:	6a 0a                	push   0xa
c000766e:	53                   	push   ebx
c000766f:	e8 f0 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007674:	6a 00                	push   0x0
c0007676:	68 f0 dc 01 c0       	push   0xc001dcf0
c000767b:	6a 0b                	push   0xb
c000767d:	53                   	push   ebx
c000767e:	e8 e1 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	83 c4 20             	add    esp,0x20
c0007686:	6a 00                	push   0x0
c0007688:	68 f8 dc 01 c0       	push   0xc001dcf8
c000768d:	6a 0c                	push   0xc
c000768f:	53                   	push   ebx
c0007690:	e8 cf fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007695:	6a 00                	push   0x0
c0007697:	68 00 dd 01 c0       	push   0xc001dd00
c000769c:	6a 0d                	push   0xd
c000769e:	53                   	push   ebx
c000769f:	e8 c0 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	83 c4 20             	add    esp,0x20
c00076a7:	6a 00                	push   0x0
c00076a9:	68 1a dd 01 c0       	push   0xc001dd1a
c00076ae:	6a 0e                	push   0xe
c00076b0:	53                   	push   ebx
c00076b1:	e8 ae fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	6a 00                	push   0x0
c00076b8:	68 22 dd 01 c0       	push   0xc001dd22
c00076bd:	6a 0f                	push   0xf
c00076bf:	53                   	push   ebx
c00076c0:	e8 9f fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076c5:	83 c4 20             	add    esp,0x20
c00076c8:	6a 00                	push   0x0
c00076ca:	68 2c dd 01 c0       	push   0xc001dd2c
c00076cf:	6a 10                	push   0x10
c00076d1:	53                   	push   ebx
c00076d2:	e8 8d fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	6a 00                	push   0x0
c00076d9:	68 36 dd 01 c0       	push   0xc001dd36
c00076de:	6a 11                	push   0x11
c00076e0:	53                   	push   ebx
c00076e1:	e8 7e fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076e6:	83 c4 20             	add    esp,0x20
c00076e9:	6a 00                	push   0x0
c00076eb:	68 40 dd 01 c0       	push   0xc001dd40
c00076f0:	6a 12                	push   0x12
c00076f2:	53                   	push   ebx
c00076f3:	e8 6c fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	6a 01                	push   0x1
c00076fa:	68 da dd 01 c0       	push   0xc001ddda
c00076ff:	6a 60                	push   0x60
c0007701:	53                   	push   ebx
c0007702:	e8 5d fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007707:	83 c4 20             	add    esp,0x20
c000770a:	6a 00                	push   0x0
c000770c:	68 e1 dd 01 c0       	push   0xc001dde1
c0007711:	6a 20                	push   0x20
c0007713:	53                   	push   ebx
c0007714:	e8 4b fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007719:	6a 00                	push   0x0
c000771b:	68 cc dd 01 c0       	push   0xc001ddcc
c0007720:	6a 21                	push   0x21
c0007722:	53                   	push   ebx
c0007723:	e8 3c fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007728:	83 c4 20             	add    esp,0x20
c000772b:	6a 00                	push   0x0
c000772d:	68 d3 dd 01 c0       	push   0xc001ddd3
c0007732:	6a 22                	push   0x22
c0007734:	53                   	push   ebx
c0007735:	e8 2a fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000773a:	6a 00                	push   0x0
c000773c:	68 4a dd 01 c0       	push   0xc001dd4a
c0007741:	6a 23                	push   0x23
c0007743:	53                   	push   ebx
c0007744:	e8 1b fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007749:	83 c4 20             	add    esp,0x20
c000774c:	6a 00                	push   0x0
c000774e:	68 54 dd 01 c0       	push   0xc001dd54
c0007753:	6a 24                	push   0x24
c0007755:	53                   	push   ebx
c0007756:	e8 09 fe ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000775b:	6a 00                	push   0x0
c000775d:	68 5e dd 01 c0       	push   0xc001dd5e
c0007762:	6a 25                	push   0x25
c0007764:	53                   	push   ebx
c0007765:	e8 fa fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000776a:	83 c4 20             	add    esp,0x20
c000776d:	6a 00                	push   0x0
c000776f:	68 68 dd 01 c0       	push   0xc001dd68
c0007774:	6a 26                	push   0x26
c0007776:	53                   	push   ebx
c0007777:	e8 e8 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000777c:	6a 00                	push   0x0
c000777e:	68 72 dd 01 c0       	push   0xc001dd72
c0007783:	6a 27                	push   0x27
c0007785:	53                   	push   ebx
c0007786:	e8 d9 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000778b:	83 c4 20             	add    esp,0x20
c000778e:	6a 00                	push   0x0
c0007790:	68 7c dd 01 c0       	push   0xc001dd7c
c0007795:	6a 28                	push   0x28
c0007797:	53                   	push   ebx
c0007798:	e8 c7 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000779d:	6a 00                	push   0x0
c000779f:	68 86 dd 01 c0       	push   0xc001dd86
c00077a4:	6a 29                	push   0x29
c00077a6:	53                   	push   ebx
c00077a7:	e8 b8 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077ac:	83 c4 20             	add    esp,0x20
c00077af:	6a 00                	push   0x0
c00077b1:	68 90 dd 01 c0       	push   0xc001dd90
c00077b6:	6a 2a                	push   0x2a
c00077b8:	53                   	push   ebx
c00077b9:	e8 a6 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077be:	6a 00                	push   0x0
c00077c0:	68 9a dd 01 c0       	push   0xc001dd9a
c00077c5:	6a 2b                	push   0x2b
c00077c7:	53                   	push   ebx
c00077c8:	e8 97 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077cd:	83 c4 20             	add    esp,0x20
c00077d0:	6a 00                	push   0x0
c00077d2:	68 a4 dd 01 c0       	push   0xc001dda4
c00077d7:	6a 2c                	push   0x2c
c00077d9:	53                   	push   ebx
c00077da:	e8 85 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077df:	6a 00                	push   0x0
c00077e1:	68 ae dd 01 c0       	push   0xc001ddae
c00077e6:	6a 2d                	push   0x2d
c00077e8:	53                   	push   ebx
c00077e9:	e8 76 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c00077ee:	83 c4 20             	add    esp,0x20
c00077f1:	6a 00                	push   0x0
c00077f3:	68 b8 dd 01 c0       	push   0xc001ddb8
c00077f8:	6a 2e                	push   0x2e
c00077fa:	53                   	push   ebx
c00077fb:	e8 64 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007800:	6a 00                	push   0x0
c0007802:	68 c2 dd 01 c0       	push   0xc001ddc2
c0007807:	6a 2f                	push   0x2f
c0007809:	53                   	push   ebx
c000780a:	e8 55 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c000780f:	83 c4 20             	add    esp,0x20
c0007812:	6a 00                	push   0x0
c0007814:	68 1c df 01 c0       	push   0xc001df1c
c0007819:	6a 30                	push   0x30
c000781b:	53                   	push   ebx
c000781c:	e8 43 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007821:	6a 00                	push   0x0
c0007823:	68 26 df 01 c0       	push   0xc001df26
c0007828:	6a 31                	push   0x31
c000782a:	53                   	push   ebx
c000782b:	e8 34 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007830:	83 c4 20             	add    esp,0x20
c0007833:	6a 00                	push   0x0
c0007835:	68 30 df 01 c0       	push   0xc001df30
c000783a:	6a 32                	push   0x32
c000783c:	53                   	push   ebx
c000783d:	e8 22 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007842:	6a 00                	push   0x0
c0007844:	68 3a df 01 c0       	push   0xc001df3a
c0007849:	6a 33                	push   0x33
c000784b:	53                   	push   ebx
c000784c:	e8 13 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007851:	83 c4 20             	add    esp,0x20
c0007854:	6a 00                	push   0x0
c0007856:	68 44 df 01 c0       	push   0xc001df44
c000785b:	6a 34                	push   0x34
c000785d:	53                   	push   ebx
c000785e:	e8 01 fd ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007863:	6a 00                	push   0x0
c0007865:	68 4e df 01 c0       	push   0xc001df4e
c000786a:	6a 35                	push   0x35
c000786c:	53                   	push   ebx
c000786d:	e8 f2 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007872:	83 c4 20             	add    esp,0x20
c0007875:	6a 00                	push   0x0
c0007877:	68 58 df 01 c0       	push   0xc001df58
c000787c:	6a 36                	push   0x36
c000787e:	53                   	push   ebx
c000787f:	e8 e0 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007884:	6a 00                	push   0x0
c0007886:	68 62 df 01 c0       	push   0xc001df62
c000788b:	6a 37                	push   0x37
c000788d:	53                   	push   ebx
c000788e:	e8 d1 fc ff ff       	call   c0007564 <IDT::addEntry(int, void (*)(), bool)>
c0007893:	83 c4 1c             	add    esp,0x1c
c0007896:	6a 03                	push   0x3
c0007898:	6a 02                	push   0x2
c000789a:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00078a0:	e8 31 25 00 00       	call   c0009dd6 <VAS::allocatePages(int, int)>
c00078a5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00078ac:	89 c6                	mov    esi,eax
c00078ae:	e8 b3 01 00 00       	call   c0007a66 <malloc>
c00078b3:	81 c6 00 20 00 00    	add    esi,0x2000
c00078b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00078bc:	89 c7                	mov    edi,eax
c00078be:	e8 0d 16 00 00       	call   c0008ed0 <TSS::TSS()>
c00078c3:	83 c4 0c             	add    esp,0xc
c00078c6:	68 d6 dc 01 c0       	push   0xc001dcd6
c00078cb:	56                   	push   esi
c00078cc:	57                   	push   edi
c00078cd:	e8 46 16 00 00       	call   c0008f18 <TSS::setup(unsigned long, unsigned long)>
c00078d2:	89 c6                	mov    esi,eax
c00078d4:	58                   	pop    eax
c00078d5:	5a                   	pop    edx
c00078d6:	6a 00                	push   0x0
c00078d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00078dc:	50                   	push   eax
c00078dd:	e8 d2 fb ff ff       	call   c00074b4 <IDTEntry::IDTEntry(bool)>
c00078e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00078eb:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00078f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00078fc:	80 ce 05             	or     dh,0x5
c00078ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007903:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007906:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000790a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000790d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007910:	e8 87 fc ff ff       	call   c000759c <IDT::flush()>
c0007915:	83 c4 20             	add    esp,0x20
c0007918:	5b                   	pop    ebx
c0007919:	5e                   	pop    esi
c000791a:	5f                   	pop    edi
c000791b:	c3                   	ret    

c000791c <sbrk>:
c000791c:	55                   	push   ebp
c000791d:	57                   	push   edi
c000791e:	56                   	push   esi
c000791f:	53                   	push   ebx
c0007920:	83 ec 2c             	sub    esp,0x2c
c0007923:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007927:	85 c0                	test   eax,eax
c0007929:	74 6c                	je     c0007997 <sbrk+0x7b>
c000792b:	78 71                	js     c000799e <sbrk+0x82>
c000792d:	8b 15 ac 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021aac
c0007933:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007937:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000793d:	05 ff 0f 00 00       	add    eax,0xfff
c0007942:	0f 49 e8             	cmovns ebp,eax
c0007945:	c1 fd 0c             	sar    ebp,0xc
c0007948:	bb 00 00 00 00       	mov    ebx,0x0
c000794d:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c0007953:	8b 3d ac 1a 02 c0    	mov    edi,DWORD PTR ds:0xc0021aac
c0007959:	e8 0e 04 00 00       	call   c0007d6c <Phys::allocatePage()>
c000795e:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c0007966:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000796a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000796e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007971:	e8 2c 23 00 00       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007976:	81 05 ac 1a 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021aac,0x1000
c0007980:	43                   	inc    ebx
c0007981:	39 dd                	cmp    ebp,ebx
c0007983:	75 c8                	jne    c000794d <sbrk+0x31>
c0007985:	0f 20 d8             	mov    eax,cr3
c0007988:	0f 22 d8             	mov    cr3,eax
c000798b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000798f:	83 c4 2c             	add    esp,0x2c
c0007992:	5b                   	pop    ebx
c0007993:	5e                   	pop    esi
c0007994:	5f                   	pop    edi
c0007995:	5d                   	pop    ebp
c0007996:	c3                   	ret    
c0007997:	a1 ac 1a 02 c0       	mov    eax,ds:0xc0021aac
c000799c:	eb f1                	jmp    c000798f <sbrk+0x73>
c000799e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00079a2:	c7 04 24 b4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7b4
c00079a9:	e8 28 30 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00079ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00079b3:	eb da                	jmp    c000798f <sbrk+0x73>

c00079b5 <mmap>:
c00079b5:	83 ec 1c             	sub    esp,0x1c
c00079b8:	c7 04 24 e4 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e4
c00079bf:	e8 61 8d 00 00       	call   c0010725 <KePanic(char const*)>
c00079c4:	b8 00 00 00 00       	mov    eax,0x0
c00079c9:	83 c4 1c             	add    esp,0x1c
c00079cc:	c3                   	ret    

c00079cd <munmap>:
c00079cd:	83 ec 1c             	sub    esp,0x1c
c00079d0:	c7 04 24 e9 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7e9
c00079d7:	e8 49 8d 00 00       	call   c0010725 <KePanic(char const*)>
c00079dc:	b8 00 00 00 00       	mov    eax,0x0
c00079e1:	83 c4 1c             	add    esp,0x1c
c00079e4:	c3                   	ret    

c00079e5 <liballoc_lock()>:
c00079e5:	fa                   	cli    
c00079e6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00079ec:	b8 00 00 00 00       	mov    eax,0x0
c00079f1:	c3                   	ret    

c00079f2 <liballoc_unlock()>:
c00079f2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00079f7:	48                   	dec    eax
c00079f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00079fd:	75 01                	jne    c0007a00 <liballoc_unlock()+0xe>
c00079ff:	fb                   	sti    
c0007a00:	b8 00 00 00 00       	mov    eax,0x0
c0007a05:	c3                   	ret    

c0007a06 <liballoc_alloc(int)>:
c0007a06:	83 ec 1c             	sub    esp,0x1c
c0007a09:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a19:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a21:	e8 b0 23 00 00       	call   c0009dd6 <VAS::allocatePages(int, int)>
c0007a26:	83 c4 1c             	add    esp,0x1c
c0007a29:	c3                   	ret    

c0007a2a <liballoc_free(void*, int)>:
c0007a2a:	83 ec 1c             	sub    esp,0x1c
c0007a2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a35:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007a3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a3d:	e8 6c 1f 00 00       	call   c00099ae <VAS::freeAllocatedPages(unsigned long)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <realloc>:
c0007a4b:	83 ec 1c             	sub    esp,0x1c
c0007a4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a5d:	e8 b7 9b ff ff       	call   c0001619 <dlrealloc>
c0007a62:	83 c4 1c             	add    esp,0x1c
c0007a65:	c3                   	ret    

c0007a66 <malloc>:
c0007a66:	83 ec 1c             	sub    esp,0x1c
c0007a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a70:	e8 67 96 ff ff       	call   c00010dc <dlmalloc>
c0007a75:	83 c4 1c             	add    esp,0x1c
c0007a78:	c3                   	ret    

c0007a79 <free>:
c0007a79:	83 ec 1c             	sub    esp,0x1c
c0007a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a80:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a83:	e8 f6 92 ff ff       	call   c0000d7e <dlfree>
c0007a88:	83 c4 1c             	add    esp,0x1c
c0007a8b:	c3                   	ret    

c0007a8c <rfree>:
c0007a8c:	83 ec 1c             	sub    esp,0x1c
c0007a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a93:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a96:	e8 e3 92 ff ff       	call   c0000d7e <dlfree>
c0007a9b:	83 c4 1c             	add    esp,0x1c
c0007a9e:	c3                   	ret    

c0007a9f <calloc>:
c0007a9f:	83 ec 1c             	sub    esp,0x1c
c0007aa2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007aa6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007aaa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007aae:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007ab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ab6:	e8 ab ff ff ff       	call   c0007a66 <malloc>
c0007abb:	89 c6                	mov    esi,eax
c0007abd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ac1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007ac9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007acc:	e8 1f 8a ff ff       	call   c00004f0 <memset>
c0007ad1:	89 f0                	mov    eax,esi
c0007ad3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007ad7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007adb:	83 c4 1c             	add    esp,0x1c
c0007ade:	c3                   	ret    

c0007adf <KeEntryPoint>:
c0007adf:	56                   	push   esi
c0007ae0:	be f9 03 00 00       	mov    esi,0x3f9
c0007ae5:	53                   	push   ebx
c0007ae6:	89 f2                	mov    edx,esi
c0007ae8:	83 ec 34             	sub    esp,0x34
c0007aeb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007af0:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007af5:	31 c0                	xor    eax,eax
c0007af7:	ee                   	out    dx,al
c0007af8:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007afd:	b0 80                	mov    al,0x80
c0007aff:	89 da                	mov    edx,ebx
c0007b01:	ee                   	out    dx,al
c0007b02:	b1 03                	mov    cl,0x3
c0007b04:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b09:	88 c8                	mov    al,cl
c0007b0b:	ee                   	out    dx,al
c0007b0c:	31 c0                	xor    eax,eax
c0007b0e:	89 f2                	mov    edx,esi
c0007b10:	ee                   	out    dx,al
c0007b11:	88 c8                	mov    al,cl
c0007b13:	89 da                	mov    edx,ebx
c0007b15:	ee                   	out    dx,al
c0007b16:	b0 c7                	mov    al,0xc7
c0007b18:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b1d:	ee                   	out    dx,al
c0007b1e:	b0 0b                	mov    al,0xb
c0007b20:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b25:	ee                   	out    dx,al
c0007b26:	c7 04 24 f0 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7f0
c0007b2d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007b31:	e8 a0 2e 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0007b36:	e8 08 85 00 00       	call   c0010043 <KeDisplaySplashScreen()>
c0007b3b:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b40:	05 ff 0f 00 00       	add    eax,0xfff
c0007b45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b4d:	e8 78 03 00 00       	call   c0007eca <Phys::physicalMemorySetup(unsigned int)>
c0007b52:	e8 f1 1b 00 00       	call   c0009748 <Virt::virtualMemorySetup()>
c0007b57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b5a:	e8 e3 1e 00 00       	call   c0009a42 <VAS::VAS()>
c0007b5f:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b65:	e8 b0 69 01 00       	call   c001e51a <_init>
c0007b6a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b71:	e8 f0 fe ff ff       	call   c0007a66 <malloc>
c0007b76:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b79:	89 c6                	mov    esi,eax
c0007b7b:	e8 e6 f1 ff ff       	call   c0006d66 <Computer::Computer()>
c0007b80:	31 d2                	xor    edx,edx
c0007b82:	31 c9                	xor    ecx,ecx
c0007b84:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007b88:	31 c0                	xor    eax,eax
c0007b8a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007b8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b95:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007b9b:	e8 a0 f5 ff ff       	call   c0007140 <Computer::open(int, int, void*)>
c0007ba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007ba3:	e8 90 1f 00 00       	call   c0009b38 <VAS::~VAS()>
c0007ba8:	83 c4 34             	add    esp,0x34
c0007bab:	5b                   	pop    ebx
c0007bac:	5e                   	pop    esi
c0007bad:	c3                   	ret    
c0007bae:	66 90                	xchg   ax,ax

c0007bb0 <Phys::allocateDMA(unsigned long)>:
c0007bb0:	55                   	push   ebp
c0007bb1:	31 ed                	xor    ebp,ebp
c0007bb3:	57                   	push   edi
c0007bb4:	56                   	push   esi
c0007bb5:	31 f6                	xor    esi,esi
c0007bb7:	53                   	push   ebx
c0007bb8:	31 db                	xor    ebx,ebx
c0007bba:	83 ec 2c             	sub    esp,0x2c
c0007bbd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007bc1:	05 ff 0f 00 00       	add    eax,0xfff
c0007bc6:	c1 e8 0c             	shr    eax,0xc
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	31 c0                	xor    eax,eax
c0007bcf:	eb 19                	jmp    c0007bea <Phys::allocateDMA(unsigned long)+0x3a>
c0007bd1:	8d 78 01             	lea    edi,[eax+0x1]
c0007bd4:	85 c0                	test   eax,eax
c0007bd6:	0f 44 eb             	cmove  ebp,ebx
c0007bd9:	0f 44 f3             	cmove  esi,ebx
c0007bdc:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007be0:	74 2f                	je     c0007c11 <Phys::allocateDMA(unsigned long)+0x61>
c0007be2:	89 f8                	mov    eax,edi
c0007be4:	43                   	inc    ebx
c0007be5:	83 fb 0f             	cmp    ebx,0xf
c0007be8:	7f 11                	jg     c0007bfb <Phys::allocateDMA(unsigned long)+0x4b>
c0007bea:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007bf1:	74 de                	je     c0007bd1 <Phys::allocateDMA(unsigned long)+0x21>
c0007bf3:	31 c0                	xor    eax,eax
c0007bf5:	43                   	inc    ebx
c0007bf6:	83 fb 0f             	cmp    ebx,0xf
c0007bf9:	7e ef                	jle    c0007bea <Phys::allocateDMA(unsigned long)+0x3a>
c0007bfb:	c7 04 24 08 f8 01 c0 	mov    DWORD PTR [esp],0xc001f808
c0007c02:	e8 1e 8b 00 00       	call   c0010725 <KePanic(char const*)>
c0007c07:	31 c0                	xor    eax,eax
c0007c09:	83 c4 2c             	add    esp,0x2c
c0007c0c:	5b                   	pop    ebx
c0007c0d:	5e                   	pop    esi
c0007c0e:	5f                   	pop    edi
c0007c0f:	5d                   	pop    ebp
c0007c10:	c3                   	ret    
c0007c11:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007c15:	89 f2                	mov    edx,esi
c0007c17:	c1 fa 04             	sar    edx,0x4
c0007c1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c1e:	01 f1                	add    ecx,esi
c0007c20:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c23:	49                   	dec    ecx
c0007c24:	0f 48 ca             	cmovs  ecx,edx
c0007c27:	c1 f9 04             	sar    ecx,0x4
c0007c2a:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007c2e:	74 06                	je     c0007c36 <Phys::allocateDMA(unsigned long)+0x86>
c0007c30:	89 eb                	mov    ebx,ebp
c0007c32:	31 c0                	xor    eax,eax
c0007c34:	eb bf                	jmp    c0007bf5 <Phys::allocateDMA(unsigned long)+0x45>
c0007c36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007c3a:	85 d2                	test   edx,edx
c0007c3c:	74 15                	je     c0007c53 <Phys::allocateDMA(unsigned long)+0xa3>
c0007c3e:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007c44:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007c4b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c4e:	42                   	inc    edx
c0007c4f:	39 d0                	cmp    eax,edx
c0007c51:	75 f8                	jne    c0007c4b <Phys::allocateDMA(unsigned long)+0x9b>
c0007c53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007c57:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007c5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007c61:	85 c0                	test   eax,eax
c0007c63:	74 13                	je     c0007c78 <Phys::allocateDMA(unsigned long)+0xc8>
c0007c65:	c7 04 24 08 f8 01 c0 	mov    DWORD PTR [esp],0xc001f808
c0007c6c:	e8 b4 8a 00 00       	call   c0010725 <KePanic(char const*)>
c0007c71:	89 f8                	mov    eax,edi
c0007c73:	e9 6c ff ff ff       	jmp    c0007be4 <Phys::allocateDMA(unsigned long)+0x34>
c0007c78:	c1 e6 0c             	shl    esi,0xc
c0007c7b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007c81:	eb 86                	jmp    c0007c09 <Phys::allocateDMA(unsigned long)+0x59>

c0007c83 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c87:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c91:	c1 ea 0c             	shr    edx,0xc
c0007c94:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007c9a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007c9f:	c1 e8 0c             	shr    eax,0xc
c0007ca2:	85 d2                	test   edx,edx
c0007ca4:	74 0f                	je     c0007cb5 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007ca6:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007cab:	01 c2                	add    edx,eax
c0007cad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cb0:	40                   	inc    eax
c0007cb1:	39 d0                	cmp    eax,edx
c0007cb3:	75 f8                	jne    c0007cad <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007cb5:	c3                   	ret    

c0007cb6 <Phys::setPageState(unsigned long, bool)>:
c0007cb6:	53                   	push   ebx
c0007cb7:	8b 1d b0 1a 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ab0
c0007cbd:	ba 01 00 00 00       	mov    edx,0x1
c0007cc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007cc6:	89 c8                	mov    eax,ecx
c0007cc8:	83 e1 07             	and    ecx,0x7
c0007ccb:	c1 e8 03             	shr    eax,0x3
c0007cce:	d3 e2                	shl    edx,cl
c0007cd0:	01 c3                	add    ebx,eax
c0007cd2:	f6 d2                	not    dl
c0007cd4:	20 13                	and    BYTE PTR [ebx],dl
c0007cd6:	8b 15 b0 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021ab0
c0007cdc:	01 d0                	add    eax,edx
c0007cde:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007ce3:	d3 e2                	shl    edx,cl
c0007ce5:	08 10                	or     BYTE PTR [eax],dl
c0007ce7:	5b                   	pop    ebx
c0007ce8:	c3                   	ret    

c0007ce9 <Phys::getPageState(unsigned long)>:
c0007ce9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007ced:	8b 15 b0 1a 02 c0    	mov    edx,DWORD PTR ds:0xc0021ab0
c0007cf3:	89 c8                	mov    eax,ecx
c0007cf5:	83 e1 07             	and    ecx,0x7
c0007cf8:	c1 e8 03             	shr    eax,0x3
c0007cfb:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007cff:	d3 f8                	sar    eax,cl
c0007d01:	24 01                	and    al,0x1
c0007d03:	c3                   	ret    

c0007d04 <Phys::freePage(unsigned long)>:
c0007d04:	53                   	push   ebx
c0007d05:	83 ec 18             	sub    esp,0x18
c0007d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d0c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d12:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d18:	76 3c                	jbe    c0007d56 <Phys::freePage(unsigned long)+0x52>
c0007d1a:	c1 e8 0c             	shr    eax,0xc
c0007d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d20:	89 c3                	mov    ebx,eax
c0007d22:	e8 c2 ff ff ff       	call   c0007ce9 <Phys::getPageState(unsigned long)>
c0007d27:	84 c0                	test   al,al
c0007d29:	74 19                	je     c0007d44 <Phys::freePage(unsigned long)+0x40>
c0007d2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d2e:	31 c0                	xor    eax,eax
c0007d30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007d34:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007d3a:	e8 77 ff ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0007d3f:	83 c4 18             	add    esp,0x18
c0007d42:	5b                   	pop    ebx
c0007d43:	c3                   	ret    
c0007d44:	ba ad f8 01 c0       	mov    edx,0xc001f8ad
c0007d49:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007d4d:	83 c4 18             	add    esp,0x18
c0007d50:	5b                   	pop    ebx
c0007d51:	e9 cf 89 00 00       	jmp    c0010725 <KePanic(char const*)>
c0007d56:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d59:	b9 00 10 00 00       	mov    ecx,0x1000
c0007d5e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007d62:	e8 1c ff ff ff       	call   c0007c83 <Phys::freeDMA(unsigned long, unsigned long)>
c0007d67:	83 c4 18             	add    esp,0x18
c0007d6a:	5b                   	pop    ebx
c0007d6b:	c3                   	ret    

c0007d6c <Phys::allocatePage()>:
c0007d6c:	56                   	push   esi
c0007d6d:	53                   	push   ebx
c0007d6e:	83 ec 24             	sub    esp,0x24
c0007d71:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007d77:	89 f3                	mov    ebx,esi
c0007d79:	eb 0a                	jmp    c0007d85 <Phys::allocatePage()+0x19>
c0007d7b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007d81:	39 de                	cmp    esi,ebx
c0007d83:	74 23                	je     c0007da8 <Phys::allocatePage()+0x3c>
c0007d85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007d88:	e8 5c ff ff ff       	call   c0007ce9 <Phys::getPageState(unsigned long)>
c0007d8d:	84 c0                	test   al,al
c0007d8f:	74 56                	je     c0007de7 <Phys::allocatePage()+0x7b>
c0007d91:	43                   	inc    ebx
c0007d92:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d98:	75 e1                	jne    c0007d7b <Phys::allocatePage()+0xf>
c0007d9a:	31 db                	xor    ebx,ebx
c0007d9c:	31 c9                	xor    ecx,ecx
c0007d9e:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007da4:	39 de                	cmp    esi,ebx
c0007da6:	75 dd                	jne    c0007d85 <Phys::allocatePage()+0x19>
c0007da8:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007daf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007db4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007db7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dc0:	e8 8f 28 00 00       	call   c000a654 <VAS::scanForEviction()>
c0007dc5:	85 c0                	test   eax,eax
c0007dc7:	75 43                	jne    c0007e0c <Phys::allocatePage()+0xa0>
c0007dc9:	c7 04 24 30 f8 01 c0 	mov    DWORD PTR [esp],0xc001f830
c0007dd0:	e8 50 89 00 00       	call   c0010725 <KePanic(char const*)>
c0007dd5:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007ddb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dde:	e8 06 ff ff ff       	call   c0007ce9 <Phys::getPageState(unsigned long)>
c0007de3:	84 c0                	test   al,al
c0007de5:	75 aa                	jne    c0007d91 <Phys::allocatePage()+0x25>
c0007de7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dea:	be 01 00 00 00       	mov    esi,0x1
c0007def:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007df3:	e8 be fe ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0007df8:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007dfd:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007e03:	c1 e0 0c             	shl    eax,0xc
c0007e06:	83 c4 24             	add    esp,0x24
c0007e09:	5b                   	pop    ebx
c0007e0a:	5e                   	pop    esi
c0007e0b:	c3                   	ret    
c0007e0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007e10:	ba 01 00 00 00       	mov    edx,0x1
c0007e15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007e19:	89 c2                	mov    edx,eax
c0007e1b:	c1 ea 0c             	shr    edx,0xc
c0007e1e:	89 14 24             	mov    DWORD PTR [esp],edx
c0007e21:	e8 90 fe ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0007e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007e2a:	eb da                	jmp    c0007e06 <Phys::allocatePage()+0x9a>

c0007e2c <Phys::allocateContiguousPages(int)>:
c0007e2c:	57                   	push   edi
c0007e2d:	56                   	push   esi
c0007e2e:	53                   	push   ebx
c0007e2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e33:	fa                   	cli    
c0007e34:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007e3a:	31 db                	xor    ebx,ebx
c0007e3c:	85 db                	test   ebx,ebx
c0007e3e:	75 11                	jne    c0007e51 <Phys::allocateContiguousPages(int)+0x25>
c0007e40:	e8 27 ff ff ff       	call   c0007d6c <Phys::allocatePage()>
c0007e45:	83 fe 01             	cmp    esi,0x1
c0007e48:	89 c7                	mov    edi,eax
c0007e4a:	74 21                	je     c0007e6d <Phys::allocateContiguousPages(int)+0x41>
c0007e4c:	bb 01 00 00 00       	mov    ebx,0x1
c0007e51:	e8 16 ff ff ff       	call   c0007d6c <Phys::allocatePage()>
c0007e56:	89 da                	mov    edx,ebx
c0007e58:	c1 e2 0c             	shl    edx,0xc
c0007e5b:	01 fa                	add    edx,edi
c0007e5d:	39 c2                	cmp    edx,eax
c0007e5f:	74 20                	je     c0007e81 <Phys::allocateContiguousPages(int)+0x55>
c0007e61:	83 fe 01             	cmp    esi,0x1
c0007e64:	bb 01 00 00 00       	mov    ebx,0x1
c0007e69:	89 c7                	mov    edi,eax
c0007e6b:	75 e4                	jne    c0007e51 <Phys::allocateContiguousPages(int)+0x25>
c0007e6d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e72:	48                   	dec    eax
c0007e73:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e78:	75 01                	jne    c0007e7b <Phys::allocateContiguousPages(int)+0x4f>
c0007e7a:	fb                   	sti    
c0007e7b:	5b                   	pop    ebx
c0007e7c:	89 f8                	mov    eax,edi
c0007e7e:	5e                   	pop    esi
c0007e7f:	5f                   	pop    edi
c0007e80:	c3                   	ret    
c0007e81:	43                   	inc    ebx
c0007e82:	39 f3                	cmp    ebx,esi
c0007e84:	75 b6                	jne    c0007e3c <Phys::allocateContiguousPages(int)+0x10>
c0007e86:	eb e5                	jmp    c0007e6d <Phys::allocateContiguousPages(int)+0x41>

c0007e88 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007e88:	56                   	push   esi
c0007e89:	53                   	push   ebx
c0007e8a:	83 ec 08             	sub    esp,0x8
c0007e8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007e91:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007e97:	73 06                	jae    c0007e9f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007e99:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007e9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ea3:	c1 eb 0c             	shr    ebx,0xc
c0007ea6:	c1 e8 0c             	shr    eax,0xc
c0007ea9:	39 d8                	cmp    eax,ebx
c0007eab:	73 17                	jae    c0007ec4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007ead:	89 04 24             	mov    DWORD PTR [esp],eax
c0007eb0:	8d 70 01             	lea    esi,[eax+0x1]
c0007eb3:	31 d2                	xor    edx,edx
c0007eb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007eb9:	e8 f8 fd ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0007ebe:	39 f3                	cmp    ebx,esi
c0007ec0:	89 f0                	mov    eax,esi
c0007ec2:	75 e9                	jne    c0007ead <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007ec4:	83 c4 08             	add    esp,0x8
c0007ec7:	5b                   	pop    ebx
c0007ec8:	5e                   	pop    esi
c0007ec9:	c3                   	ret    

c0007eca <Phys::physicalMemorySetup(unsigned int)>:
c0007eca:	55                   	push   ebp
c0007ecb:	b8 10 00 00 00       	mov    eax,0x10
c0007ed0:	57                   	push   edi
c0007ed1:	56                   	push   esi
c0007ed2:	53                   	push   ebx
c0007ed3:	31 db                	xor    ebx,ebx
c0007ed5:	83 ec 4c             	sub    esp,0x4c
c0007ed8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007edc:	31 c0                	xor    eax,eax
c0007ede:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007ee2:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007ee9:	e8 02 86 ff ff       	call   c00004f0 <memset>
c0007eee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007ef2:	c7 04 24 c3 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8c3
c0007ef9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007efe:	05 00 10 00 00       	add    eax,0x1000
c0007f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f07:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f0b:	e8 c6 2a 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0007f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007f13:	b8 01 00 00 00       	mov    eax,0x1
c0007f18:	43                   	inc    ebx
c0007f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f1d:	e8 94 fd ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0007f22:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f28:	75 e6                	jne    c0007f10 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007f2a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f31:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f35:	85 c0                	test   eax,eax
c0007f37:	0f 84 37 01 00 00    	je     c0008074 <Phys::physicalMemorySetup(unsigned int)+0x1aa>
c0007f3d:	31 c0                	xor    eax,eax
c0007f3f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f44:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007f48:	eb 68                	jmp    c0007fb2 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007f4a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007f4e:	89 c1                	mov    ecx,eax
c0007f50:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007f54:	0f 83 bf 00 00 00    	jae    c0008019 <Phys::physicalMemorySetup(unsigned int)+0x14f>
c0007f5a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007f5e:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007f63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007f67:	39 f2                	cmp    edx,esi
c0007f69:	19 f8                	sbb    eax,edi
c0007f6b:	73 07                	jae    c0007f74 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007f6d:	be 00 00 0a 00       	mov    esi,0xa0000
c0007f72:	31 ff                	xor    edi,edi
c0007f74:	89 f2                	mov    edx,esi
c0007f76:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007f7b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007f81:	89 f9                	mov    ecx,edi
c0007f83:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007f87:	83 d1 ff             	adc    ecx,0xffffffff
c0007f8a:	39 d0                	cmp    eax,edx
c0007f8c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0007f90:	b8 00 00 00 00       	mov    eax,0x0
c0007f95:	19 c8                	sbb    eax,ecx
c0007f97:	0f 82 9d 01 00 00    	jb     c000813a <Phys::physicalMemorySetup(unsigned int)+0x270>
c0007f9d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0007fa1:	83 c3 18             	add    ebx,0x18
c0007fa4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa8:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0007fac:	0f 84 ce 00 00 00    	je     c0008080 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c0007fb2:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fb4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fb7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fbd:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007fc1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fc8:	01 f0                	add    eax,esi
c0007fca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007fd2:	11 fa                	adc    edx,edi
c0007fd4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0007fd8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007fdc:	c7 04 24 60 f8 01 c0 	mov    DWORD PTR [esp],0xc001f860
c0007fe3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007fe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007feb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fef:	e8 e2 29 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0007ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007ff8:	09 f8                	or     eax,edi
c0007ffa:	0f 85 80 00 00 00    	jne    c0008080 <Phys::physicalMemorySetup(unsigned int)+0x1b6>
c0008000:	83 fd 01             	cmp    ebp,0x1
c0008003:	75 11                	jne    c0008016 <Phys::physicalMemorySetup(unsigned int)+0x14c>
c0008005:	ba 00 00 08 00       	mov    edx,0x80000
c000800a:	89 c1                	mov    ecx,eax
c000800c:	39 f2                	cmp    edx,esi
c000800e:	19 f9                	sbb    ecx,edi
c0008010:	0f 83 34 ff ff ff    	jae    c0007f4a <Phys::physicalMemorySetup(unsigned int)+0x80>
c0008016:	4d                   	dec    ebp
c0008017:	75 84                	jne    c0007f9d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008019:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000801d:	31 d2                	xor    edx,edx
c000801f:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c0008023:	89 c8                	mov    eax,ecx
c0008025:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008029:	19 d1                	sbb    ecx,edx
c000802b:	0f 82 6c ff ff ff    	jb     c0007f9d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008031:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0008036:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c000803a:	b9 00 00 00 00       	mov    ecx,0x0
c000803f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008043:	0f 83 54 ff ff ff    	jae    c0007f9d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c0008049:	39 c6                	cmp    esi,eax
c000804b:	19 d7                	sbb    edi,edx
c000804d:	0f 83 f4 00 00 00    	jae    c0008147 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0008053:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008057:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000805b:	29 c7                	sub    edi,eax
c000805d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008061:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008065:	19 d5                	sbb    ebp,edx
c0008067:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000806b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000806f:	e9 d3 00 00 00       	jmp    c0008147 <Phys::physicalMemorySetup(unsigned int)+0x27d>
c0008074:	c7 04 24 db f8 01 c0 	mov    DWORD PTR [esp],0xc001f8db
c000807b:	e8 a5 86 00 00       	call   c0010725 <KePanic(char const*)>
c0008080:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008087:	31 db                	xor    ebx,ebx
c0008089:	31 f6                	xor    esi,esi
c000808b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000808f:	bb 60 00 00 00       	mov    ebx,0x60
c0008094:	e8 1d fc ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c0008099:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000809d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00080a4:	e8 0d fc ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c00080a9:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c00080b0:	31 c9                	xor    ecx,ecx
c00080b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080b5:	43                   	inc    ebx
c00080b6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00080ba:	e8 f7 fb ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c00080bf:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00080c5:	75 e9                	jne    c00080b0 <Phys::physicalMemorySetup(unsigned int)+0x1e6>
c00080c7:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080cc:	bb 40 01 00 00       	mov    ebx,0x140
c00080d1:	83 c0 20             	add    eax,0x20
c00080d4:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080d9:	eb 22                	jmp    c00080fd <Phys::physicalMemorySetup(unsigned int)+0x233>
c00080db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00080de:	31 d2                	xor    edx,edx
c00080e0:	43                   	inc    ebx
c00080e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080e5:	e8 cc fb ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c00080ea:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00080ef:	40                   	inc    eax
c00080f0:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00080f6:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00080fb:	74 07                	je     c0008104 <Phys::physicalMemorySetup(unsigned int)+0x23a>
c00080fd:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008102:	7e d7                	jle    c00080db <Phys::physicalMemorySetup(unsigned int)+0x211>
c0008104:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008109:	3d ff 07 00 00       	cmp    eax,0x7ff
c000810e:	7f 22                	jg     c0008132 <Phys::physicalMemorySetup(unsigned int)+0x268>
c0008110:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008113:	31 c0                	xor    eax,eax
c0008115:	43                   	inc    ebx
c0008116:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000811a:	e8 97 fb ff ff       	call   c0007cb6 <Phys::setPageState(unsigned long, bool)>
c000811f:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008124:	40                   	inc    eax
c0008125:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000812b:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008130:	75 d7                	jne    c0008109 <Phys::physicalMemorySetup(unsigned int)+0x23f>
c0008132:	83 c4 4c             	add    esp,0x4c
c0008135:	5b                   	pop    ebx
c0008136:	5e                   	pop    esi
c0008137:	5f                   	pop    edi
c0008138:	5d                   	pop    ebp
c0008139:	c3                   	ret    
c000813a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000813e:	b8 00 00 08 00       	mov    eax,0x80000
c0008143:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008147:	c7 04 24 84 f8 01 c0 	mov    DWORD PTR [esp],0xc001f884
c000814e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008152:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008156:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000815a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000815e:	e8 73 28 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0008163:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008167:	89 34 24             	mov    DWORD PTR [esp],esi
c000816a:	e8 19 fd ff ff       	call   c0007e88 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000816f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008173:	c7 04 24 e9 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8e9
c000817a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000817e:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c0008184:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008188:	01 e8                	add    eax,ebp
c000818a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000818e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008195:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008199:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000819e:	e8 33 28 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00081a3:	e9 f5 fd ff ff       	jmp    c0007f9d <Phys::physicalMemorySetup(unsigned int)+0xd3>

c00081a8 <Pipe::isAtty()>:
c00081a8:	31 c0                	xor    eax,eax
c00081aa:	c3                   	ret    
c00081ab:	90                   	nop

c00081ac <Pipe::~Pipe()>:
c00081ac:	83 ec 1c             	sub    esp,0x1c
c00081af:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c00081b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b8:	89 10                	mov    DWORD PTR [eax],edx
c00081ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081be:	89 04 24             	mov    DWORD PTR [esp],eax
c00081c1:	e8 56 11 00 00       	call   c000931c <UnixFile::~UnixFile()>
c00081c6:	90                   	nop
c00081c7:	83 c4 1c             	add    esp,0x1c
c00081ca:	c3                   	ret    
c00081cb:	90                   	nop

c00081cc <Pipe::~Pipe()>:
c00081cc:	83 ec 1c             	sub    esp,0x1c
c00081cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00081d6:	e8 d1 ff ff ff       	call   c00081ac <Pipe::~Pipe()>
c00081db:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c00081e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00081ea:	e8 cd 26 00 00       	call   c000a8bc <operator delete(void*, unsigned long)>
c00081ef:	83 c4 1c             	add    esp,0x1c
c00081f2:	c3                   	ret    
c00081f3:	90                   	nop

c00081f4 <Pipe::write(unsigned long long, void*, int*)>:
c00081f4:	55                   	push   ebp
c00081f5:	57                   	push   edi
c00081f6:	56                   	push   esi
c00081f7:	53                   	push   ebx
c00081f8:	83 ec 1c             	sub    esp,0x1c
c00081fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00081ff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008203:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008207:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000820a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000820e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008211:	89 04 24             	mov    DWORD PTR [esp],eax
c0008214:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008218:	89 d8                	mov    eax,ebx
c000821a:	89 d6                	mov    esi,edx
c000821c:	89 d7                	mov    edi,edx
c000821e:	c1 ff 1f             	sar    edi,0x1f
c0008221:	03 34 24             	add    esi,DWORD PTR [esp]
c0008224:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008228:	c1 f8 1f             	sar    eax,0x1f
c000822b:	39 f3                	cmp    ebx,esi
c000822d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008235:	19 f8                	sbb    eax,edi
c0008237:	b8 01 00 00 00       	mov    eax,0x1
c000823c:	72 72                	jb     c00082b0 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000823e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008241:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0008245:	01 d0                	add    eax,edx
c0008247:	99                   	cdq    
c0008248:	f7 fb                	idiv   ebx
c000824a:	89 d8                	mov    eax,ebx
c000824c:	29 d0                	sub    eax,edx
c000824e:	89 d6                	mov    esi,edx
c0008250:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008253:	89 c3                	mov    ebx,eax
c0008255:	c1 fb 1f             	sar    ebx,0x1f
c0008258:	39 c2                	cmp    edx,eax
c000825a:	19 df                	sbb    edi,ebx
c000825c:	bb 00 00 00 00       	mov    ebx,0x0
c0008261:	72 04                	jb     c0008267 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0008263:	89 d3                	mov    ebx,edx
c0008265:	29 c3                	sub    ebx,eax
c0008267:	89 d0                	mov    eax,edx
c0008269:	29 d8                	sub    eax,ebx
c000826b:	74 0d                	je     c000827a <Pipe::write(unsigned long long, void*, int*)+0x86>
c000826d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008270:	89 c1                	mov    ecx,eax
c0008272:	01 f7                	add    edi,esi
c0008274:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008278:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000827a:	85 db                	test   ebx,ebx
c000827c:	74 0d                	je     c000828b <Pipe::write(unsigned long long, void*, int*)+0x97>
c000827e:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008282:	89 d9                	mov    ecx,ebx
c0008284:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008287:	89 c6                	mov    esi,eax
c0008289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000828b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000828e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008293:	75 10                	jne    c00082a5 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008295:	83 ec 0c             	sub    esp,0xc
c0008298:	68 05 f9 01 c0       	push   0xc001f905
c000829d:	e8 83 84 00 00       	call   c0010725 <KePanic(char const*)>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082a9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00082ac:	89 08                	mov    DWORD PTR [eax],ecx
c00082ae:	31 c0                	xor    eax,eax
c00082b0:	83 c4 1c             	add    esp,0x1c
c00082b3:	5b                   	pop    ebx
c00082b4:	5e                   	pop    esi
c00082b5:	5f                   	pop    edi
c00082b6:	5d                   	pop    ebp
c00082b7:	c3                   	ret    

c00082b8 <Pipe::read(unsigned long long, void*, int*)>:
c00082b8:	55                   	push   ebp
c00082b9:	57                   	push   edi
c00082ba:	56                   	push   esi
c00082bb:	53                   	push   ebx
c00082bc:	83 ec 1c             	sub    esp,0x1c
c00082bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00082c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00082c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00082cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00082ce:	89 c8                	mov    eax,ecx
c00082d0:	99                   	cdq    
c00082d1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00082d5:	74 24                	je     c00082fb <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082d7:	39 f9                	cmp    ecx,edi
c00082d9:	89 d1                	mov    ecx,edx
c00082db:	19 f1                	sbb    ecx,esi
c00082dd:	73 1c                	jae    c00082fb <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082df:	fa                   	cli    
c00082e0:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00082e6:	e8 55 cd 00 00       	call   c0015040 <schedule()>
c00082eb:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00082f0:	48                   	dec    eax
c00082f1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00082f6:	75 d3                	jne    c00082cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082f8:	fb                   	sti    
c00082f9:	eb d0                	jmp    c00082cb <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082fb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00082ff:	39 f8                	cmp    eax,edi
c0008301:	89 d1                	mov    ecx,edx
c0008303:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0008307:	19 f1                	sbb    ecx,esi
c0008309:	73 08                	jae    c0008313 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000830b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000830f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008313:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008316:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008319:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000831d:	29 f7                	sub    edi,esi
c000831f:	89 f8                	mov    eax,edi
c0008321:	99                   	cdq    
c0008322:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0008326:	89 d0                	mov    eax,edx
c0008328:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000832c:	19 c2                	sbb    edx,eax
c000832e:	89 f8                	mov    eax,edi
c0008330:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0008335:	89 ea                	mov    edx,ebp
c0008337:	29 c2                	sub    edx,eax
c0008339:	85 c0                	test   eax,eax
c000833b:	74 0b                	je     c0008348 <Pipe::read(unsigned long long, void*, int*)+0x90>
c000833d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008340:	89 c1                	mov    ecx,eax
c0008342:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008346:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008348:	85 d2                	test   edx,edx
c000834a:	74 0d                	je     c0008359 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c000834c:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008350:	89 d1                	mov    ecx,edx
c0008352:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008355:	89 c7                	mov    edi,eax
c0008357:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008359:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000835c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000835f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008362:	99                   	cdq    
c0008363:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008367:	89 f7                	mov    edi,esi
c0008369:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000836d:	c1 ff 1f             	sar    edi,0x1f
c0008370:	57                   	push   edi
c0008371:	56                   	push   esi
c0008372:	52                   	push   edx
c0008373:	50                   	push   eax
c0008374:	e8 87 60 01 00       	call   c001e400 <__umoddi3>
c0008379:	83 c4 10             	add    esp,0x10
c000837c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008381:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008384:	75 10                	jne    c0008396 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008386:	83 ec 0c             	sub    esp,0xc
c0008389:	68 22 f9 01 c0       	push   0xc001f922
c000838e:	e8 92 83 00 00       	call   c0010725 <KePanic(char const*)>
c0008393:	83 c4 10             	add    esp,0x10
c0008396:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000839a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000839e:	89 10                	mov    DWORD PTR [eax],edx
c00083a0:	83 c4 1c             	add    esp,0x1c
c00083a3:	31 c0                	xor    eax,eax
c00083a5:	5b                   	pop    ebx
c00083a6:	5e                   	pop    esi
c00083a7:	5f                   	pop    edi
c00083a8:	5d                   	pop    ebp
c00083a9:	c3                   	ret    

c00083aa <Pipe::Pipe(int)>:
c00083aa:	83 ec 1c             	sub    esp,0x1c
c00083ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00083b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00083bc:	e8 95 0d 00 00       	call   c0009156 <UnixFile::UnixFile(int)>
c00083c1:	ba 48 f9 01 c0       	mov    edx,0xc001f948
c00083c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ca:	89 10                	mov    DWORD PTR [eax],edx
c00083cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083d4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083db:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00083e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083e6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00083ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00083f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00083f4:	e8 6d f6 ff ff       	call   c0007a66 <malloc>
c00083f9:	89 c2                	mov    edx,eax
c00083fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008406:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000840a:	90                   	nop
c000840b:	83 c4 1c             	add    esp,0x1c
c000840e:	c3                   	ret    
c000840f:	90                   	nop

c0008410 <VgaText::isAtty()>:
c0008410:	b0 01                	mov    al,0x1
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <VgaText::~VgaText()>:
c0008414:	83 ec 1c             	sub    esp,0x1c
c0008417:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c000841c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008420:	89 10                	mov    DWORD PTR [eax],edx
c0008422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008426:	89 04 24             	mov    DWORD PTR [esp],eax
c0008429:	e8 ee 0e 00 00       	call   c000931c <UnixFile::~UnixFile()>
c000842e:	90                   	nop
c000842f:	83 c4 1c             	add    esp,0x1c
c0008432:	c3                   	ret    
c0008433:	90                   	nop

c0008434 <VgaText::~VgaText()>:
c0008434:	83 ec 1c             	sub    esp,0x1c
c0008437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000843b:	89 04 24             	mov    DWORD PTR [esp],eax
c000843e:	e8 d1 ff ff ff       	call   c0008414 <VgaText::~VgaText()>
c0008443:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c000844b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000844f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008452:	e8 65 24 00 00       	call   c000a8bc <operator delete(void*, unsigned long)>
c0008457:	83 c4 1c             	add    esp,0x1c
c000845a:	c3                   	ret    
c000845b:	90                   	nop

c000845c <VgaText::read(unsigned long long, void*, int*)>:
c000845c:	83 ec 10             	sub    esp,0x10
c000845f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000846b:	e8 b9 47 00 00       	call   c000cc29 <readKeyboard(VgaText*, char*, unsigned long)>
c0008470:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008474:	89 02                	mov    DWORD PTR [edx],eax
c0008476:	31 c0                	xor    eax,eax
c0008478:	83 c4 1c             	add    esp,0x1c
c000847b:	c3                   	ret    

c000847c <setTerminalScrollLock(bool)>:
c000847c:	c3                   	ret    

c000847d <doTerminalCycle()>:
c000847d:	c3                   	ret    

c000847e <addToTerminalCycle(VgaText*)>:
c000847e:	c3                   	ret    

c000847f <scrollTerminalScrollLock(int)>:
c000847f:	c3                   	ret    

c0008480 <VgaText::updateTitle()>:
c0008480:	c3                   	ret    
c0008481:	90                   	nop

c0008482 <VgaText::load()>:
c0008482:	c3                   	ret    
c0008483:	90                   	nop

c0008484 <VgaText::updateCursor()>:
c0008484:	83 ec 14             	sub    esp,0x14
c0008487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000848b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000848e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008491:	e8 36 f7 00 00       	call   c0017bcc <HalConsoleCursorUpdate(int, int)>
c0008496:	83 c4 1c             	add    esp,0x1c
c0008499:	c3                   	ret    

c000849a <VgaText::doANSI_SGR(int)>:
c000849a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000849e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084a2:	85 d2                	test   edx,edx
c00084a4:	75 0b                	jne    c00084b1 <VgaText::doANSI_SGR(int)+0x17>
c00084a6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00084a9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084ac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00084af:	eb 59                	jmp    c000850a <VgaText::doANSI_SGR(int)+0x70>
c00084b1:	83 fa 07             	cmp    edx,0x7
c00084b4:	75 0b                	jne    c00084c1 <VgaText::doANSI_SGR(int)+0x27>
c00084b6:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00084b9:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00084bc:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00084bf:	eb 49                	jmp    c000850a <VgaText::doANSI_SGR(int)+0x70>
c00084c1:	83 fa 1b             	cmp    edx,0x1b
c00084c4:	74 e0                	je     c00084a6 <VgaText::doANSI_SGR(int)+0xc>
c00084c6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00084c9:	83 f9 07             	cmp    ecx,0x7
c00084cc:	77 09                	ja     c00084d7 <VgaText::doANSI_SGR(int)+0x3d>
c00084ce:	8b 14 8d e0 1a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde520]
c00084d5:	eb 20                	jmp    c00084f7 <VgaText::doANSI_SGR(int)+0x5d>
c00084d7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00084da:	83 f9 07             	cmp    ecx,0x7
c00084dd:	77 09                	ja     c00084e8 <VgaText::doANSI_SGR(int)+0x4e>
c00084df:	8b 14 8d e0 1a 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde520]
c00084e6:	eb 22                	jmp    c000850a <VgaText::doANSI_SGR(int)+0x70>
c00084e8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00084eb:	83 f9 07             	cmp    ecx,0x7
c00084ee:	77 0b                	ja     c00084fb <VgaText::doANSI_SGR(int)+0x61>
c00084f0:	8b 14 95 98 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde668]
c00084f7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084fa:	c3                   	ret    
c00084fb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00084fe:	83 f9 07             	cmp    ecx,0x7
c0008501:	77 0a                	ja     c000850d <VgaText::doANSI_SGR(int)+0x73>
c0008503:	8b 14 95 70 19 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde690]
c000850a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000850d:	c3                   	ret    

c000850e <VgaText::setDefaultBgColour(VgaColour)>:
c000850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008512:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008516:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008519:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::setDefaultFgColour(VgaColour)>:
c000851e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008522:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008526:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008529:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000852c:	c3                   	ret    
c000852d:	90                   	nop

c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000852e:	53                   	push   ebx
c000852f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008533:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000853b:	51                   	push   ecx
c000853c:	e8 cd ff ff ff       	call   c000850e <VgaText::setDefaultBgColour(VgaColour)>
c0008541:	58                   	pop    eax
c0008542:	5a                   	pop    edx
c0008543:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008547:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000854b:	5b                   	pop    ebx
c000854c:	eb d0                	jmp    c000851e <VgaText::setDefaultFgColour(VgaColour)>

c000854e <VgaText::setTitleTextColour(VgaColour)>:
c000854e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008552:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008556:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008559:	c3                   	ret    

c000855a <VgaText::setTitleColour(VgaColour)>:
c000855a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000855e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008562:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008565:	c3                   	ret    

c0008566 <VgaText::setTitle(char*)>:
c0008566:	c3                   	ret    
c0008567:	90                   	nop

c0008568 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008568:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000856c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008571:	24 0f                	and    al,0xf
c0008573:	c1 e2 04             	shl    edx,0x4
c0008576:	08 d0                	or     al,dl
c0008578:	c3                   	ret    
c0008579:	90                   	nop

c000857a <VgaText::scrollScreen()>:
c000857a:	55                   	push   ebp
c000857b:	57                   	push   edi
c000857c:	56                   	push   esi
c000857d:	be 01 00 00 00       	mov    esi,0x1
c0008582:	53                   	push   ebx
c0008583:	83 ec 0c             	sub    esp,0xc
c0008586:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000858a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000858d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008593:	31 ff                	xor    edi,edi
c0008595:	01 e9                	add    ecx,ebp
c0008597:	8a 01                	mov    al,BYTE PTR [ecx]
c0008599:	83 fe 18             	cmp    esi,0x18
c000859c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00085a2:	75 20                	jne    c00085c4 <VgaText::scrollScreen()+0x4a>
c00085a4:	f7 c7 01 00 00 00    	test   edi,0x1
c00085aa:	74 15                	je     c00085c1 <VgaText::scrollScreen()+0x47>
c00085ac:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085b0:	50                   	push   eax
c00085b1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085b5:	50                   	push   eax
c00085b6:	e8 ad ff ff ff       	call   c0008568 <VgaText::combineColours(unsigned char, unsigned char)>
c00085bb:	5a                   	pop    edx
c00085bc:	5a                   	pop    edx
c00085bd:	88 01                	mov    BYTE PTR [ecx],al
c00085bf:	eb 03                	jmp    c00085c4 <VgaText::scrollScreen()+0x4a>
c00085c1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00085c4:	47                   	inc    edi
c00085c5:	41                   	inc    ecx
c00085c6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00085cc:	75 c9                	jne    c0008597 <VgaText::scrollScreen()+0x1d>
c00085ce:	46                   	inc    esi
c00085cf:	83 fe 19             	cmp    esi,0x19
c00085d2:	75 b9                	jne    c000858d <VgaText::scrollScreen()+0x13>
c00085d4:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c00085da:	75 1f                	jne    c00085fb <VgaText::scrollScreen()+0x81>
c00085dc:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00085e0:	74 05                	je     c00085e7 <VgaText::scrollScreen()+0x6d>
c00085e2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00085e5:	eb 14                	jmp    c00085fb <VgaText::scrollScreen()+0x81>
c00085e7:	50                   	push   eax
c00085e8:	50                   	push   eax
c00085e9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085ed:	50                   	push   eax
c00085ee:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085f2:	50                   	push   eax
c00085f3:	e8 60 f4 00 00       	call   c0017a58 <HalConsoleScroll(int, int)>
c00085f8:	83 c4 10             	add    esp,0x10
c00085fb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	5b                   	pop    ebx
c0008603:	5e                   	pop    esi
c0008604:	5f                   	pop    edi
c0008605:	5d                   	pop    ebp
c0008606:	e9 79 fe ff ff       	jmp    c0008484 <VgaText::updateCursor()>
c000860b:	90                   	nop

c000860c <VgaText::combineCharAndColour(char, unsigned char)>:
c000860c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008611:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008616:	c1 e0 08             	shl    eax,0x8
c0008619:	09 d0                	or     eax,edx
c000861b:	c3                   	ret    

c000861c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000861c:	55                   	push   ebp
c000861d:	57                   	push   edi
c000861e:	56                   	push   esi
c000861f:	53                   	push   ebx
c0008620:	83 ec 1c             	sub    esp,0x1c
c0008623:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008627:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000862b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000862f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008637:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000863b:	0f b6 c3             	movzx  eax,bl
c000863e:	50                   	push   eax
c000863f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008644:	50                   	push   eax
c0008645:	e8 1e ff ff ff       	call   c0008568 <VgaText::combineColours(unsigned char, unsigned char)>
c000864a:	5a                   	pop    edx
c000864b:	59                   	pop    ecx
c000864c:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008651:	0f b6 c0             	movzx  eax,al
c0008654:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008658:	50                   	push   eax
c0008659:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000865d:	e8 aa ff ff ff       	call   c000860c <VgaText::combineCharAndColour(char, unsigned char)>
c0008662:	5a                   	pop    edx
c0008663:	6b d7 50             	imul   edx,edi,0x50
c0008666:	59                   	pop    ecx
c0008667:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000866a:	01 f2                	add    edx,esi
c000866c:	0f b7 d2             	movzx  edx,dx
c000866f:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008673:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008679:	75 28                	jne    c00086a3 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000867b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000867f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008683:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008687:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000868b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000868f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008693:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008697:	83 c4 1c             	add    esp,0x1c
c000869a:	5b                   	pop    ebx
c000869b:	5e                   	pop    esi
c000869c:	5f                   	pop    edi
c000869d:	5d                   	pop    ebp
c000869e:	e9 bd f4 00 00       	jmp    c0017b60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00086a3:	83 c4 1c             	add    esp,0x1c
c00086a6:	5b                   	pop    ebx
c00086a7:	5e                   	pop    esi
c00086a8:	5f                   	pop    edi
c00086a9:	5d                   	pop    ebp
c00086aa:	c3                   	ret    
c00086ab:	90                   	nop

c00086ac <VgaText::getCursorX()>:
c00086ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00086b3:	c3                   	ret    

c00086b4 <VgaText::getCursorY()>:
c00086b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00086bb:	c3                   	ret    

c00086bc <VgaText::setCursor(int, int)>:
c00086bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00086c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00086cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00086ce:	e9 b1 fd ff ff       	jmp    c0008484 <VgaText::updateCursor()>

c00086d3 <setActiveTerminal(VgaText*)>:
c00086d3:	53                   	push   ebx
c00086d4:	83 ec 08             	sub    esp,0x8
c00086d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086db:	85 db                	test   ebx,ebx
c00086dd:	75 11                	jne    c00086f0 <setActiveTerminal(VgaText*)+0x1d>
c00086df:	c7 44 24 10 5c f9 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f95c
c00086e7:	83 c4 08             	add    esp,0x8
c00086ea:	5b                   	pop    ebx
c00086eb:	e9 35 80 00 00       	jmp    c0010725 <KePanic(char const*)>
c00086f0:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c00086f5:	85 c0                	test   eax,eax
c00086f7:	74 0c                	je     c0008705 <setActiveTerminal(VgaText*)+0x32>
c00086f9:	83 ec 0c             	sub    esp,0xc
c00086fc:	50                   	push   eax
c00086fd:	e8 82 fd ff ff       	call   c0008484 <VgaText::updateCursor()>
c0008702:	83 c4 10             	add    esp,0x10
c0008705:	50                   	push   eax
c0008706:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008709:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c000870f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008712:	53                   	push   ebx
c0008713:	e8 a4 ff ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c0008718:	83 c4 18             	add    esp,0x18
c000871b:	5b                   	pop    ebx
c000871c:	c3                   	ret    
c000871d:	90                   	nop

c000871e <VgaText::clearScreen()>:
c000871e:	57                   	push   edi
c000871f:	56                   	push   esi
c0008720:	31 f6                	xor    esi,esi
c0008722:	53                   	push   ebx
c0008723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008727:	52                   	push   edx
c0008728:	6a 00                	push   0x0
c000872a:	6a 00                	push   0x0
c000872c:	53                   	push   ebx
c000872d:	e8 8a ff ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c0008732:	83 c4 10             	add    esp,0x10
c0008735:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000873c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000873f:	7e 20                	jle    c0008761 <VgaText::clearScreen()+0x43>
c0008741:	31 ff                	xor    edi,edi
c0008743:	50                   	push   eax
c0008744:	50                   	push   eax
c0008745:	56                   	push   esi
c0008746:	57                   	push   edi
c0008747:	47                   	inc    edi
c0008748:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000874b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000874e:	6a 20                	push   0x20
c0008750:	53                   	push   ebx
c0008751:	e8 c6 fe ff ff       	call   c000861c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008756:	83 c4 20             	add    esp,0x20
c0008759:	83 ff 50             	cmp    edi,0x50
c000875c:	75 e5                	jne    c0008743 <VgaText::clearScreen()+0x25>
c000875e:	46                   	inc    esi
c000875f:	eb db                	jmp    c000873c <VgaText::clearScreen()+0x1e>
c0008761:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008768:	5b                   	pop    ebx
c0008769:	5e                   	pop    esi
c000876a:	5f                   	pop    edi
c000876b:	c3                   	ret    

c000876c <VgaText::setCursorX(int)>:
c000876c:	83 ec 10             	sub    esp,0x10
c000876f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008773:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000877a:	50                   	push   eax
c000877b:	e8 3c ff ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c0008780:	83 c4 1c             	add    esp,0x1c
c0008783:	c3                   	ret    

c0008784 <VgaText::setCursorY(int)>:
c0008784:	83 ec 10             	sub    esp,0x10
c0008787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000878b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000878f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008792:	50                   	push   eax
c0008793:	e8 24 ff ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c0008798:	83 c4 1c             	add    esp,0x1c
c000879b:	c3                   	ret    

c000879c <VgaText::incrementCursor(bool)>:
c000879c:	53                   	push   ebx
c000879d:	83 ec 18             	sub    esp,0x18
c00087a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087a4:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c00087a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00087ab:	40                   	inc    eax
c00087ac:	83 f8 50             	cmp    eax,0x50
c00087af:	74 05                	je     c00087b6 <VgaText::incrementCursor(bool)+0x1a>
c00087b1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00087b4:	eb 2c                	jmp    c00087e2 <VgaText::incrementCursor(bool)+0x46>
c00087b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00087c0:	8d 48 01             	lea    ecx,[eax+0x1]
c00087c3:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00087c6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00087c9:	75 17                	jne    c00087e2 <VgaText::incrementCursor(bool)+0x46>
c00087cb:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00087cf:	83 ec 0c             	sub    esp,0xc
c00087d2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00087d5:	53                   	push   ebx
c00087d6:	e8 9f fd ff ff       	call   c000857a <VgaText::scrollScreen()>
c00087db:	83 c4 10             	add    esp,0x10
c00087de:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00087e2:	84 d2                	test   dl,dl
c00087e4:	74 0d                	je     c00087f3 <VgaText::incrementCursor(bool)+0x57>
c00087e6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00087ea:	83 c4 18             	add    esp,0x18
c00087ed:	5b                   	pop    ebx
c00087ee:	e9 91 fc ff ff       	jmp    c0008484 <VgaText::updateCursor()>
c00087f3:	83 c4 18             	add    esp,0x18
c00087f6:	5b                   	pop    ebx
c00087f7:	c3                   	ret    

c00087f8 <VgaText::decrementCursor(bool)>:
c00087f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087fc:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0008800:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008803:	85 c0                	test   eax,eax
c0008805:	74 04                	je     c000880b <VgaText::decrementCursor(bool)+0x13>
c0008807:	48                   	dec    eax
c0008808:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000880b:	84 c9                	test   cl,cl
c000880d:	74 09                	je     c0008818 <VgaText::decrementCursor(bool)+0x20>
c000880f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008813:	e9 6c fc ff ff       	jmp    c0008484 <VgaText::updateCursor()>
c0008818:	c3                   	ret    
c0008819:	90                   	nop

c000881a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000881a:	53                   	push   ebx
c000881b:	83 ec 08             	sub    esp,0x8
c000881e:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008827:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000882b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000882f:	3c 07                	cmp    al,0x7
c0008831:	75 21                	jne    c0008854 <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c0008833:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000883b:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008843:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000884b:	83 c4 08             	add    esp,0x8
c000884e:	5b                   	pop    ebx
c000884f:	e9 d4 2f 00 00       	jmp    c000b828 <Krnl::beep(int, int, bool)>
c0008854:	3c 0d                	cmp    al,0xd
c0008856:	75 09                	jne    c0008861 <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c0008858:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000885f:	eb 2c                	jmp    c000888d <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c0008861:	3c 0a                	cmp    al,0xa
c0008863:	75 31                	jne    c0008896 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c0008865:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000886c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886f:	8d 50 01             	lea    edx,[eax+0x1]
c0008872:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008875:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008878:	75 0f                	jne    c0008889 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c000887a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000887d:	83 ec 0c             	sub    esp,0xc
c0008880:	53                   	push   ebx
c0008881:	e8 f4 fc ff ff       	call   c000857a <VgaText::scrollScreen()>
c0008886:	83 c4 10             	add    esp,0x10
c0008889:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000888d:	83 c4 08             	add    esp,0x8
c0008890:	5b                   	pop    ebx
c0008891:	e9 ee fb ff ff       	jmp    c0008484 <VgaText::updateCursor()>
c0008896:	3c 08                	cmp    al,0x8
c0008898:	75 25                	jne    c00088bf <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c000889a:	50                   	push   eax
c000889b:	50                   	push   eax
c000889c:	6a 01                	push   0x1
c000889e:	53                   	push   ebx
c000889f:	e8 54 ff ff ff       	call   c00087f8 <VgaText::decrementCursor(bool)>
c00088a4:	5a                   	pop    edx
c00088a5:	59                   	pop    ecx
c00088a6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088ac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00088af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00088b2:	6a 20                	push   0x20
c00088b4:	53                   	push   ebx
c00088b5:	e8 62 fd ff ff       	call   c000861c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088ba:	83 c4 28             	add    esp,0x28
c00088bd:	5b                   	pop    ebx
c00088be:	c3                   	ret    
c00088bf:	83 ec 08             	sub    esp,0x8
c00088c2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088c8:	51                   	push   ecx
c00088c9:	52                   	push   edx
c00088ca:	50                   	push   eax
c00088cb:	53                   	push   ebx
c00088cc:	e8 4b fd ff ff       	call   c000861c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088d1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00088d5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00088dd:	83 c4 28             	add    esp,0x28
c00088e0:	5b                   	pop    ebx
c00088e1:	e9 b6 fe ff ff       	jmp    c000879c <VgaText::incrementCursor(bool)>

c00088e6 <VgaText::putchar(char)>:
c00088e6:	56                   	push   esi
c00088e7:	53                   	push   ebx
c00088e8:	83 ec 14             	sub    esp,0x14
c00088eb:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c00088f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00088f4:	3c 5b                	cmp    al,0x5b
c00088f6:	75 18                	jne    c0008910 <VgaText::putchar(char)+0x2a>
c00088f8:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00088fc:	74 1f                	je     c000891d <VgaText::putchar(char)+0x37>
c00088fe:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008904:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000890b:	e9 bc 00 00 00       	jmp    c00089cc <VgaText::putchar(char)+0xe6>
c0008910:	3c 1b                	cmp    al,0x1b
c0008912:	75 09                	jne    c000891d <VgaText::putchar(char)+0x37>
c0008914:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008918:	e9 af 00 00 00       	jmp    c00089cc <VgaText::putchar(char)+0xe6>
c000891d:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c0008920:	84 d2                	test   dl,dl
c0008922:	0f 84 94 00 00 00    	je     c00089bc <VgaText::putchar(char)+0xd6>
c0008928:	88 c1                	mov    cl,al
c000892a:	80 e9 40             	sub    cl,0x40
c000892d:	80 f9 3e             	cmp    cl,0x3e
c0008930:	77 76                	ja     c00089a8 <VgaText::putchar(char)+0xc2>
c0008932:	3c 6d                	cmp    al,0x6d
c0008934:	75 47                	jne    c000897d <VgaText::putchar(char)+0x97>
c0008936:	31 f6                	xor    esi,esi
c0008938:	31 c9                	xor    ecx,ecx
c000893a:	31 c0                	xor    eax,eax
c000893c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000893f:	7e 2d                	jle    c000896e <VgaText::putchar(char)+0x88>
c0008941:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c0008946:	80 f9 3b             	cmp    cl,0x3b
c0008949:	75 17                	jne    c0008962 <VgaText::putchar(char)+0x7c>
c000894b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000894f:	50                   	push   eax
c0008950:	53                   	push   ebx
c0008951:	e8 44 fb ff ff       	call   c000849a <VgaText::doANSI_SGR(int)>
c0008956:	59                   	pop    ecx
c0008957:	31 c9                	xor    ecx,ecx
c0008959:	58                   	pop    eax
c000895a:	31 c0                	xor    eax,eax
c000895c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008960:	eb 09                	jmp    c000896b <VgaText::putchar(char)+0x85>
c0008962:	6b c0 0a             	imul   eax,eax,0xa
c0008965:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008969:	88 d1                	mov    cl,dl
c000896b:	46                   	inc    esi
c000896c:	eb ce                	jmp    c000893c <VgaText::putchar(char)+0x56>
c000896e:	84 c9                	test   cl,cl
c0008970:	74 2e                	je     c00089a0 <VgaText::putchar(char)+0xba>
c0008972:	50                   	push   eax
c0008973:	53                   	push   ebx
c0008974:	e8 21 fb ff ff       	call   c000849a <VgaText::doANSI_SGR(int)>
c0008979:	58                   	pop    eax
c000897a:	5a                   	pop    edx
c000897b:	eb 23                	jmp    c00089a0 <VgaText::putchar(char)+0xba>
c000897d:	3c 4a                	cmp    al,0x4a
c000897f:	75 1f                	jne    c00089a0 <VgaText::putchar(char)+0xba>
c0008981:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008985:	75 19                	jne    c00089a0 <VgaText::putchar(char)+0xba>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 8e fd ff ff       	call   c000871e <VgaText::clearScreen()>
c0008990:	83 c4 0c             	add    esp,0xc
c0008993:	6a 00                	push   0x0
c0008995:	6a 00                	push   0x0
c0008997:	53                   	push   ebx
c0008998:	e8 1f fd ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00089a6:	eb 24                	jmp    c00089cc <VgaText::putchar(char)+0xe6>
c00089a8:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00089ab:	83 fa 0e             	cmp    edx,0xe
c00089ae:	7f 1c                	jg     c00089cc <VgaText::putchar(char)+0xe6>
c00089b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c00089b3:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00089b6:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00089ba:	eb 10                	jmp    c00089cc <VgaText::putchar(char)+0xe6>
c00089bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089c2:	50                   	push   eax
c00089c3:	53                   	push   ebx
c00089c4:	e8 51 fe ff ff       	call   c000881a <VgaText::putchar(char, VgaColour, VgaColour)>
c00089c9:	83 c4 10             	add    esp,0x10
c00089cc:	83 c4 14             	add    esp,0x14
c00089cf:	5b                   	pop    ebx
c00089d0:	5e                   	pop    esi
c00089d1:	c3                   	ret    

c00089d2 <VgaText::putx(unsigned int)>:
c00089d2:	57                   	push   edi
c00089d3:	b9 11 00 00 00       	mov    ecx,0x11
c00089d8:	56                   	push   esi
c00089d9:	be 6a f9 01 c0       	mov    esi,0xc001f96a
c00089de:	53                   	push   ebx
c00089df:	83 ec 20             	sub    esp,0x20
c00089e2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00089e6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00089ea:	fc                   	cld    
c00089eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00089ed:	be 08 00 00 00       	mov    esi,0x8
c00089f2:	50                   	push   eax
c00089f3:	50                   	push   eax
c00089f4:	89 d8                	mov    eax,ebx
c00089f6:	c1 e8 1c             	shr    eax,0x1c
c00089f9:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00089fe:	c1 e3 04             	shl    ebx,0x4
c0008a01:	50                   	push   eax
c0008a02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a06:	e8 db fe ff ff       	call   c00088e6 <VgaText::putchar(char)>
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	4e                   	dec    esi
c0008a0f:	75 e1                	jne    c00089f2 <VgaText::putx(unsigned int)+0x20>
c0008a11:	83 c4 20             	add    esp,0x20
c0008a14:	5b                   	pop    ebx
c0008a15:	5e                   	pop    esi
c0008a16:	5f                   	pop    edi
c0008a17:	c3                   	ret    

c0008a18 <VgaText::puts(char const*)>:
c0008a18:	53                   	push   ebx
c0008a19:	83 ec 08             	sub    esp,0x8
c0008a1c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a20:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a23:	84 c0                	test   al,al
c0008a25:	74 12                	je     c0008a39 <VgaText::puts(char const*)+0x21>
c0008a27:	51                   	push   ecx
c0008a28:	43                   	inc    ebx
c0008a29:	51                   	push   ecx
c0008a2a:	50                   	push   eax
c0008a2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a2f:	e8 b2 fe ff ff       	call   c00088e6 <VgaText::putchar(char)>
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	eb e7                	jmp    c0008a20 <VgaText::puts(char const*)+0x8>
c0008a39:	83 c4 08             	add    esp,0x8
c0008a3c:	5b                   	pop    ebx
c0008a3d:	c3                   	ret    

c0008a3e <VgaText::write(unsigned long long, void*, int*)>:
c0008a3e:	55                   	push   ebp
c0008a3f:	57                   	push   edi
c0008a40:	56                   	push   esi
c0008a41:	53                   	push   ebx
c0008a42:	83 ec 0c             	sub    esp,0xc
c0008a45:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a49:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008a51:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008a58:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008a5b:	39 eb                	cmp    ebx,ebp
c0008a5d:	74 13                	je     c0008a72 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008a5f:	50                   	push   eax
c0008a60:	43                   	inc    ebx
c0008a61:	50                   	push   eax
c0008a62:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008a66:	50                   	push   eax
c0008a67:	56                   	push   esi
c0008a68:	e8 79 fe ff ff       	call   c00088e6 <VgaText::putchar(char)>
c0008a6d:	83 c4 10             	add    esp,0x10
c0008a70:	eb e9                	jmp    c0008a5b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008a72:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008a79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a7d:	89 38                	mov    DWORD PTR [eax],edi
c0008a7f:	83 c4 0c             	add    esp,0xc
c0008a82:	31 c0                	xor    eax,eax
c0008a84:	5b                   	pop    ebx
c0008a85:	5e                   	pop    esi
c0008a86:	5f                   	pop    edi
c0008a87:	5d                   	pop    ebp
c0008a88:	c3                   	ret    
c0008a89:	90                   	nop

c0008a8a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008a8a:	55                   	push   ebp
c0008a8b:	57                   	push   edi
c0008a8c:	56                   	push   esi
c0008a8d:	53                   	push   ebx
c0008a8e:	83 ec 0c             	sub    esp,0xc
c0008a91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008a9a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008aa1:	50                   	push   eax
c0008aa2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008aa7:	50                   	push   eax
c0008aa8:	e8 bb fa ff ff       	call   c0008568 <VgaText::combineColours(unsigned char, unsigned char)>
c0008aad:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ab1:	5a                   	pop    edx
c0008ab2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008ab5:	59                   	pop    ecx
c0008ab6:	0f b6 e8             	movzx  ebp,al
c0008ab9:	0f b7 f6             	movzx  esi,si
c0008abc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ac0:	01 f6                	add    esi,esi
c0008ac2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ac5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008ac8:	84 c0                	test   al,al
c0008aca:	0f 84 ec 00 00 00    	je     c0008bbc <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008ad0:	3c 0d                	cmp    al,0xd
c0008ad2:	75 0c                	jne    c0008ae0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008ad4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008adb:	e9 d6 00 00 00       	jmp    c0008bb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008ae0:	3c 0a                	cmp    al,0xa
c0008ae2:	75 44                	jne    c0008b28 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008ae4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008aeb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008aee:	8d 48 01             	lea    ecx,[eax+0x1]
c0008af1:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008af4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008af7:	75 0f                	jne    c0008b08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008af9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008afc:	83 ec 0c             	sub    esp,0xc
c0008aff:	53                   	push   ebx
c0008b00:	e8 75 fa ff ff       	call   c000857a <VgaText::scrollScreen()>
c0008b05:	83 c4 10             	add    esp,0x10
c0008b08:	83 ec 0c             	sub    esp,0xc
c0008b0b:	53                   	push   ebx
c0008b0c:	e8 73 f9 ff ff       	call   c0008484 <VgaText::updateCursor()>
c0008b11:	83 c4 10             	add    esp,0x10
c0008b14:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b18:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b1b:	0f b7 f6             	movzx  esi,si
c0008b1e:	01 f6                	add    esi,esi
c0008b20:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b23:	e9 8e 00 00 00       	jmp    c0008bb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b28:	3c 08                	cmp    al,0x8
c0008b2a:	75 34                	jne    c0008b60 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008b2c:	51                   	push   ecx
c0008b2d:	51                   	push   ecx
c0008b2e:	6a 01                	push   0x1
c0008b30:	53                   	push   ebx
c0008b31:	e8 c2 fc ff ff       	call   c00087f8 <VgaText::decrementCursor(bool)>
c0008b36:	5e                   	pop    esi
c0008b37:	58                   	pop    eax
c0008b38:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b3b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b3e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b41:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b44:	6a 20                	push   0x20
c0008b46:	53                   	push   ebx
c0008b47:	e8 d0 fa ff ff       	call   c000861c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b4c:	83 c4 20             	add    esp,0x20
c0008b4f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b53:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b56:	0f b7 f6             	movzx  esi,si
c0008b59:	01 f6                	add    esi,esi
c0008b5b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b5e:	eb 56                	jmp    c0008bb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b60:	52                   	push   edx
c0008b61:	52                   	push   edx
c0008b62:	55                   	push   ebp
c0008b63:	50                   	push   eax
c0008b64:	e8 a3 fa ff ff       	call   c000860c <VgaText::combineCharAndColour(char, unsigned char)>
c0008b69:	83 c4 10             	add    esp,0x10
c0008b6c:	66 89 06             	mov    WORD PTR [esi],ax
c0008b6f:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008b75:	75 1d                	jne    c0008b94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008b77:	83 ec 0c             	sub    esp,0xc
c0008b7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b7d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b84:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b88:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b8b:	50                   	push   eax
c0008b8c:	e8 cf ef 00 00       	call   c0017b60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b91:	83 c4 20             	add    esp,0x20
c0008b94:	50                   	push   eax
c0008b95:	83 c6 02             	add    esi,0x2
c0008b98:	50                   	push   eax
c0008b99:	6a 00                	push   0x0
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 fb fb ff ff       	call   c000879c <VgaText::incrementCursor(bool)>
c0008ba1:	83 c4 10             	add    esp,0x10
c0008ba4:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008ba8:	75 0c                	jne    c0008bb6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008baa:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bae:	0f b7 f6             	movzx  esi,si
c0008bb1:	01 f6                	add    esi,esi
c0008bb3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb6:	47                   	inc    edi
c0008bb7:	e9 09 ff ff ff       	jmp    c0008ac5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008bbc:	83 ec 0c             	sub    esp,0xc
c0008bbf:	53                   	push   ebx
c0008bc0:	e8 bf f8 ff ff       	call   c0008484 <VgaText::updateCursor()>
c0008bc5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008bcc:	83 c4 1c             	add    esp,0x1c
c0008bcf:	5b                   	pop    ebx
c0008bd0:	5e                   	pop    esi
c0008bd1:	5f                   	pop    edi
c0008bd2:	5d                   	pop    ebp
c0008bd3:	c3                   	ret    

c0008bd4 <VgaText::VgaText(char const*)>:
c0008bd4:	56                   	push   esi
c0008bd5:	53                   	push   ebx
c0008bd6:	83 ec 14             	sub    esp,0x14
c0008bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008be5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008be8:	e8 69 05 00 00       	call   c0009156 <UnixFile::UnixFile(int)>
c0008bed:	ba 90 f9 01 c0       	mov    edx,0xc001f990
c0008bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bf6:	89 10                	mov    DWORD PTR [eax],edx
c0008bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bfc:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c07:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c12:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c1a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c22:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c2d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c38:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c43:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008c4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4e:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008c55:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008c5c:	e8 1f 09 00 00       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c0008c61:	89 c2                	mov    edx,eax
c0008c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c67:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008c6a:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c77:	89 c6                	mov    esi,eax
c0008c79:	e8 ee f0 ff ff       	call   c0007d6c <Phys::allocatePage()>
c0008c7e:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008c86:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008c8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008c91:	e8 0c 10 00 00       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008c96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c9d:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008ca5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008cad:	89 04 24             	mov    DWORD PTR [esp],eax
c0008cb0:	e8 3b 78 ff ff       	call   c00004f0 <memset>
c0008cb5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008cbd:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ccc:	e8 5d f8 ff ff       	call   c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008cd1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008cd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ce8:	e8 cf f9 ff ff       	call   c00086bc <VgaText::setCursor(int, int)>
c0008ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf1:	89 04 24             	mov    DWORD PTR [esp],eax
c0008cf4:	e8 25 fa ff ff       	call   c000871e <VgaText::clearScreen()>
c0008cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cfd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d05:	05 82 00 00 00       	add    eax,0x82
c0008d0a:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008d12:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d1d:	e8 ce 77 ff ff       	call   c00004f0 <memset>
c0008d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d26:	05 02 01 00 00       	add    eax,0x102
c0008d2b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008d33:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d3e:	e8 ad 77 ff ff       	call   c00004f0 <memset>
c0008d43:	90                   	nop
c0008d44:	83 c4 14             	add    esp,0x14
c0008d47:	5b                   	pop    ebx
c0008d48:	5e                   	pop    esi
c0008d49:	c3                   	ret    

c0008d4a <VgaText::receiveKey(unsigned char)>:
c0008d4a:	55                   	push   ebp
c0008d4b:	57                   	push   edi
c0008d4c:	56                   	push   esi
c0008d4d:	53                   	push   ebx
c0008d4e:	83 ec 1c             	sub    esp,0x1c
c0008d51:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008d55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008d59:	84 db                	test   bl,bl
c0008d5b:	0f 84 3f 01 00 00    	je     c0008ea0 <VgaText::receiveKey(unsigned char)+0x156>
c0008d61:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008d67:	80 fb 08             	cmp    bl,0x8
c0008d6a:	75 68                	jne    c0008dd4 <VgaText::receiveKey(unsigned char)+0x8a>
c0008d6c:	83 ec 0c             	sub    esp,0xc
c0008d6f:	57                   	push   edi
c0008d70:	e8 1b 78 ff ff       	call   c0000590 <strlen>
c0008d75:	83 c4 10             	add    esp,0x10
c0008d78:	85 c0                	test   eax,eax
c0008d7a:	0f 84 e6 00 00 00    	je     c0008e66 <VgaText::receiveKey(unsigned char)+0x11c>
c0008d80:	50                   	push   eax
c0008d81:	50                   	push   eax
c0008d82:	6a 08                	push   0x8
c0008d84:	56                   	push   esi
c0008d85:	e8 5c fb ff ff       	call   c00088e6 <VgaText::putchar(char)>
c0008d8a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008d8d:	e8 fe 77 ff ff       	call   c0000590 <strlen>
c0008d92:	83 c4 10             	add    esp,0x10
c0008d95:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008d9c:	3c 1f                	cmp    al,0x1f
c0008d9e:	7f 1e                	jg     c0008dbe <VgaText::receiveKey(unsigned char)+0x74>
c0008da0:	88 c2                	mov    dl,al
c0008da2:	80 ea 08             	sub    dl,0x8
c0008da5:	80 fa 02             	cmp    dl,0x2
c0008da8:	76 14                	jbe    c0008dbe <VgaText::receiveKey(unsigned char)+0x74>
c0008daa:	3c 0d                	cmp    al,0xd
c0008dac:	74 10                	je     c0008dbe <VgaText::receiveKey(unsigned char)+0x74>
c0008dae:	55                   	push   ebp
c0008daf:	55                   	push   ebp
c0008db0:	68 7b f9 01 c0       	push   0xc001f97b
c0008db5:	56                   	push   esi
c0008db6:	e8 5d fc ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0008dbb:	83 c4 10             	add    esp,0x10
c0008dbe:	83 ec 0c             	sub    esp,0xc
c0008dc1:	57                   	push   edi
c0008dc2:	e8 c9 77 ff ff       	call   c0000590 <strlen>
c0008dc7:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008dcf:	e9 8f 00 00 00       	jmp    c0008e63 <VgaText::receiveKey(unsigned char)+0x119>
c0008dd4:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008dda:	83 ec 0c             	sub    esp,0xc
c0008ddd:	50                   	push   eax
c0008dde:	e8 ad 77 ff ff       	call   c0000590 <strlen>
c0008de3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008de6:	89 c5                	mov    ebp,eax
c0008de8:	e8 a3 77 ff ff       	call   c0000590 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008df4:	3d 80 00 00 00       	cmp    eax,0x80
c0008df9:	0f 87 a1 00 00 00    	ja     c0008ea0 <VgaText::receiveKey(unsigned char)+0x156>
c0008dff:	88 d8                	mov    al,bl
c0008e01:	fe c8                	dec    al
c0008e03:	3c 1e                	cmp    al,0x1e
c0008e05:	77 37                	ja     c0008e3e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e07:	88 d8                	mov    al,bl
c0008e09:	2c 09                	sub    al,0x9
c0008e0b:	3c 01                	cmp    al,0x1
c0008e0d:	76 2f                	jbe    c0008e3e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e0f:	80 fb 0d             	cmp    bl,0xd
c0008e12:	74 2a                	je     c0008e3e <VgaText::receiveKey(unsigned char)+0xf4>
c0008e14:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008e17:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008e1a:	68 81 f9 01 c0       	push   0xc001f981
c0008e1f:	56                   	push   esi
c0008e20:	e8 65 fc ff ff       	call   c0008a8a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e25:	88 d8                	mov    al,bl
c0008e27:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008e2a:	04 40                	add    al,0x40
c0008e2c:	0f b6 c0             	movzx  eax,al
c0008e2f:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008e32:	50                   	push   eax
c0008e33:	56                   	push   esi
c0008e34:	e8 e1 f9 ff ff       	call   c000881a <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e39:	83 c4 20             	add    esp,0x20
c0008e3c:	eb 0f                	jmp    c0008e4d <VgaText::receiveKey(unsigned char)+0x103>
c0008e3e:	51                   	push   ecx
c0008e3f:	0f be c3             	movsx  eax,bl
c0008e42:	51                   	push   ecx
c0008e43:	50                   	push   eax
c0008e44:	56                   	push   esi
c0008e45:	e8 9c fa ff ff       	call   c00088e6 <VgaText::putchar(char)>
c0008e4a:	83 c4 10             	add    esp,0x10
c0008e4d:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008e51:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008e56:	52                   	push   edx
c0008e57:	52                   	push   edx
c0008e58:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008e5c:	50                   	push   eax
c0008e5d:	57                   	push   edi
c0008e5e:	e8 3d 7a ff ff       	call   c00008a0 <strcat>
c0008e63:	83 c4 10             	add    esp,0x10
c0008e66:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008e6d:	75 0f                	jne    c0008e7e <VgaText::receiveKey(unsigned char)+0x134>
c0008e6f:	80 fb 1c             	cmp    bl,0x1c
c0008e72:	77 2c                	ja     c0008ea0 <VgaText::receiveKey(unsigned char)+0x156>
c0008e74:	b8 08 04 00 10       	mov    eax,0x10000408
c0008e79:	0f a3 d8             	bt     eax,ebx
c0008e7c:	73 22                	jae    c0008ea0 <VgaText::receiveKey(unsigned char)+0x156>
c0008e7e:	50                   	push   eax
c0008e7f:	81 c6 02 01 00 00    	add    esi,0x102
c0008e85:	50                   	push   eax
c0008e86:	57                   	push   edi
c0008e87:	56                   	push   esi
c0008e88:	e8 13 7a ff ff       	call   c00008a0 <strcat>
c0008e8d:	83 c4 0c             	add    esp,0xc
c0008e90:	68 80 00 00 00       	push   0x80
c0008e95:	6a 00                	push   0x0
c0008e97:	57                   	push   edi
c0008e98:	e8 53 76 ff ff       	call   c00004f0 <memset>
c0008e9d:	83 c4 10             	add    esp,0x10
c0008ea0:	83 c4 1c             	add    esp,0x1c
c0008ea3:	5b                   	pop    ebx
c0008ea4:	5e                   	pop    esi
c0008ea5:	5f                   	pop    edi
c0008ea6:	5d                   	pop    ebp
c0008ea7:	c3                   	ret    

c0008ea8 <VgaText::doUpdate()>:
c0008ea8:	c3                   	ret    

c0008ea9 <newTerminal(char*)>:
c0008ea9:	83 ec 28             	sub    esp,0x28
c0008eac:	68 84 01 00 00       	push   0x184
c0008eb1:	e8 b0 eb ff ff       	call   c0007a66 <malloc>
c0008eb6:	5a                   	pop    edx
c0008eb7:	59                   	pop    ecx
c0008eb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ebc:	50                   	push   eax
c0008ebd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ec1:	e8 0e fd ff ff       	call   c0008bd4 <VgaText::VgaText(char const*)>
c0008ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008eca:	83 c4 2c             	add    esp,0x2c
c0008ecd:	c3                   	ret    
c0008ece:	66 90                	xchg   ax,ax

c0008ed0 <TSS::TSS()>:
c0008ed0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ed4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008edb:	90                   	nop
c0008edc:	c3                   	ret    
c0008edd:	90                   	nop
c0008ede:	66 90                	xchg   ax,ax

c0008ee0 <TSS::setESP(unsigned long)>:
c0008ee0:	55                   	push   ebp
c0008ee1:	89 e5                	mov    ebp,esp
c0008ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ee9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008eec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008eef:	90                   	nop
c0008ef0:	5d                   	pop    ebp
c0008ef1:	c3                   	ret    
c0008ef2:	66 90                	xchg   ax,ax

c0008ef4 <TSS::flush()>:
c0008ef4:	55                   	push   ebp
c0008ef5:	89 e5                	mov    ebp,esp
c0008ef7:	83 ec 10             	sub    esp,0x10
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008eff:	98                   	cwde   
c0008f00:	83 c8 03             	or     eax,0x3
c0008f03:	98                   	cwde   
c0008f04:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f08:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008f0c:	66 89 d0             	mov    ax,dx
c0008f0f:	0f 00 d8             	ltr    ax
c0008f12:	90                   	nop
c0008f13:	c9                   	leave  
c0008f14:	c3                   	ret    
c0008f15:	90                   	nop
c0008f16:	66 90                	xchg   ax,ax

c0008f18 <TSS::setup(unsigned long, unsigned long)>:
c0008f18:	55                   	push   ebp
c0008f19:	89 e5                	mov    ebp,esp
c0008f1b:	83 ec 28             	sub    esp,0x28
c0008f1e:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008f25:	e8 3c eb ff ff       	call   c0007a66 <malloc>
c0008f2a:	89 c2                	mov    edx,eax
c0008f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f38:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008f40:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f4b:	e8 a0 75 ff ff       	call   c00004f0 <memset>
c0008f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f56:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f62:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f6e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f7a:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008f80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f86:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f92:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008f98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f9e:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008faa:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb6:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008fc5:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008fc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fce:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fda:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe7:	0f 20 da             	mov    edx,cr3
c0008fea:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008fed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ff0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ffd:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009000:	89 04 24             	mov    DWORD PTR [esp],eax
c0009003:	e8 c2 e2 ff ff       	call   c00072ca <GDTEntry::setBase(unsigned int)>
c0009008:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c0009010:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009013:	89 04 24             	mov    DWORD PTR [esp],eax
c0009016:	e8 cb e2 ff ff       	call   c00072e6 <GDTEntry::setLimit(unsigned int)>
c000901b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000901f:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c0009023:	24 0f                	and    al,0xf
c0009025:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009028:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c000902c:	0c 40                	or     al,0x40
c000902e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009031:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009036:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000903c:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c0009042:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009045:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0009048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000904c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009050:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009053:	e8 c0 e2 ff ff       	call   c0007318 <GDT::addEntry(GDTEntry)>
c0009058:	89 c2                	mov    edx,eax
c000905a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905d:	89 10                	mov    DWORD PTR [eax],edx
c000905f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009064:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000906a:	05 78 01 00 00       	add    eax,0x178
c000906f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009072:	e8 cb e2 ff ff       	call   c0007342 <GDT::flush()>
c0009077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907a:	8b 00                	mov    eax,DWORD PTR [eax]
c000907c:	c9                   	leave  
c000907d:	c3                   	ret    

c000907e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000907e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009082:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009089:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000908e:	75 08                	jne    c0009098 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009090:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009096:	eb 38                	jmp    c00090d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009098:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000909d:	75 17                	jne    c00090b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000909f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00090af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090b3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00090b6:	89 c1                	mov    ecx,eax
c00090b8:	83 e1 fd             	and    ecx,0xfffffffd
c00090bb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00090c1:	74 cd                	je     c0009090 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00090c3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00090c8:	83 e0 ef             	and    eax,0xffffffef
c00090cb:	83 f8 08             	cmp    eax,0x8
c00090ce:	76 c0                	jbe    c0009090 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00090d0:	31 c0                	xor    eax,eax
c00090d2:	c3                   	ret    
c00090d3:	90                   	nop

c00090d4 <ReservedFilename::isAtty()>:
c00090d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090db:	31 c0                	xor    eax,eax
c00090dd:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00090e3:	74 09                	je     c00090ee <ReservedFilename::isAtty()+0x1a>
c00090e5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00090eb:	0f 94 c0             	sete   al
c00090ee:	c3                   	ret    
c00090ef:	90                   	nop

c00090f0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00090f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00090f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090ff:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009104:	75 08                	jne    c000910e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009106:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000910c:	eb 3d                	jmp    c000914b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000910e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009113:	75 17                	jne    c000912c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000911a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000911d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009123:	8b 10                	mov    edx,DWORD PTR [eax]
c0009125:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009129:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000912c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009131:	75 04                	jne    c0009137 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009133:	89 0a                	mov    DWORD PTR [edx],ecx
c0009135:	eb 14                	jmp    c000914b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009137:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000913c:	74 c8                	je     c0009106 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000913e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009143:	83 e0 ef             	and    eax,0xffffffef
c0009146:	83 f8 08             	cmp    eax,0x8
c0009149:	76 bb                	jbe    c0009106 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000914b:	31 c0                	xor    eax,eax
c000914d:	c3                   	ret    

c000914e <UnixFile::getFileDescriptor()>:
c000914e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009152:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009155:	c3                   	ret    

c0009156 <UnixFile::UnixFile(int)>:
c0009156:	53                   	push   ebx
c0009157:	83 ec 38             	sub    esp,0x38
c000915a:	ba 58 fa 01 c0       	mov    edx,0xc001fa58
c000915f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009163:	89 10                	mov    DWORD PTR [eax],edx
c0009165:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c000916d:	0f 8f 70 01 00 00    	jg     c00092e3 <UnixFile::UnixFile(int)+0x18d>
c0009173:	a1 20 1b 02 c0       	mov    eax,ds:0xc0021b20
c0009178:	8d 50 01             	lea    edx,[eax+0x1]
c000917b:	89 15 20 1b 02 c0    	mov    DWORD PTR ds:0xc0021b20,edx
c0009181:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009185:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009188:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000918c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009190:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009197:	e8 44 54 01 00       	call   c001e5e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000919c:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c00091a3:	34 01                	xor    al,0x1
c00091a5:	0f 84 39 01 00 00    	je     c00092e4 <UnixFile::UnixFile(int)+0x18e>
c00091ab:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c00091b2:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c00091ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091be:	89 04 24             	mov    DWORD PTR [esp],eax
c00091c1:	e8 a0 e8 ff ff       	call   c0007a66 <malloc>
c00091c6:	89 c3                	mov    ebx,eax
c00091c8:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c00091d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091d3:	e8 12 01 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c00091d8:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c00091de:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c00091e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ed:	e8 74 e8 ff ff       	call   c0007a66 <malloc>
c00091f2:	89 c3                	mov    ebx,eax
c00091f4:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c00091fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00091ff:	e8 e6 00 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c0009204:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000920a:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c0009212:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009216:	89 04 24             	mov    DWORD PTR [esp],eax
c0009219:	e8 48 e8 ff ff       	call   c0007a66 <malloc>
c000921e:	89 c3                	mov    ebx,eax
c0009220:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c0009228:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000922b:	e8 ba 00 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c0009230:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c0009236:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c000923e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009242:	89 04 24             	mov    DWORD PTR [esp],eax
c0009245:	e8 1c e8 ff ff       	call   c0007a66 <malloc>
c000924a:	89 c3                	mov    ebx,eax
c000924c:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c0009254:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009257:	e8 8e 00 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c000925c:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c0009262:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000926a:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c000926f:	7f 73                	jg     c00092e4 <UnixFile::UnixFile(int)+0x18e>
c0009271:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000927d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009280:	e8 e1 e7 ff ff       	call   c0007a66 <malloc>
c0009285:	89 c3                	mov    ebx,eax
c0009287:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000928b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009290:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009294:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009297:	e8 4e 00 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c000929c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092a0:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c00092a7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00092b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00092b6:	e8 ab e7 ff ff       	call   c0007a66 <malloc>
c00092bb:	89 c3                	mov    ebx,eax
c00092bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092c1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00092c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092cd:	e8 18 00 00 00       	call   c00092ea <ReservedFilename::ReservedFilename(int)>
c00092d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00092d6:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c00092dd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00092e1:	eb 87                	jmp    c000926a <UnixFile::UnixFile(int)+0x114>
c00092e3:	90                   	nop
c00092e4:	83 c4 38             	add    esp,0x38
c00092e7:	5b                   	pop    ebx
c00092e8:	c3                   	ret    
c00092e9:	90                   	nop

c00092ea <ReservedFilename::ReservedFilename(int)>:
c00092ea:	83 ec 1c             	sub    esp,0x1c
c00092ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00092f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00092f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092fc:	e8 55 fe ff ff       	call   c0009156 <UnixFile::UnixFile(int)>
c0009301:	ba 74 fa 01 c0       	mov    edx,0xc001fa74
c0009306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000930a:	89 10                	mov    DWORD PTR [eax],edx
c000930c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009310:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009317:	90                   	nop
c0009318:	83 c4 1c             	add    esp,0x1c
c000931b:	c3                   	ret    

c000931c <UnixFile::~UnixFile()>:
c000931c:	83 ec 2c             	sub    esp,0x2c
c000931f:	ba 58 fa 01 c0       	mov    edx,0xc001fa58
c0009324:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009328:	89 10                	mov    DWORD PTR [eax],edx
c000932a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000932e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009331:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009336:	7f 67                	jg     c000939f <UnixFile::~UnixFile()+0x83>
c0009338:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009340:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009347:	e8 5c 53 01 00       	call   c001e6a8 <LinkedList<UnixFile>::getFirstElement()>
c000934c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009350:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009357:	e8 54 53 01 00       	call   c001e6b0 <LinkedList<UnixFile>::removeFirst()>
c000935c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009360:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0009364:	74 3c                	je     c00093a2 <UnixFile::~UnixFile()+0x86>
c0009366:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000936a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000936e:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c0009375:	e8 66 52 01 00       	call   c001e5e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000937a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000937e:	8d 50 01             	lea    edx,[eax+0x1]
c0009381:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009385:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000938a:	0f 94 c0             	sete   al
c000938d:	84 c0                	test   al,al
c000938f:	74 af                	je     c0009340 <UnixFile::~UnixFile()+0x24>
c0009391:	c7 04 24 30 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa30
c0009398:	e8 88 73 00 00       	call   c0010725 <KePanic(char const*)>
c000939d:	eb a1                	jmp    c0009340 <UnixFile::~UnixFile()+0x24>
c000939f:	90                   	nop
c00093a0:	eb 01                	jmp    c00093a3 <UnixFile::~UnixFile()+0x87>
c00093a2:	90                   	nop
c00093a3:	90                   	nop
c00093a4:	83 c4 2c             	add    esp,0x2c
c00093a7:	c3                   	ret    

c00093a8 <UnixFile::~UnixFile()>:
c00093a8:	83 ec 1c             	sub    esp,0x1c
c00093ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093af:	89 04 24             	mov    DWORD PTR [esp],eax
c00093b2:	e8 65 ff ff ff       	call   c000931c <UnixFile::~UnixFile()>
c00093b7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00093bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c6:	e8 f1 14 00 00       	call   c000a8bc <operator delete(void*, unsigned long)>
c00093cb:	83 c4 1c             	add    esp,0x1c
c00093ce:	c3                   	ret    
c00093cf:	90                   	nop

c00093d0 <ReservedFilename::~ReservedFilename()>:
c00093d0:	83 ec 1c             	sub    esp,0x1c
c00093d3:	ba 74 fa 01 c0       	mov    edx,0xc001fa74
c00093d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093dc:	89 10                	mov    DWORD PTR [eax],edx
c00093de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093e5:	e8 32 ff ff ff       	call   c000931c <UnixFile::~UnixFile()>
c00093ea:	90                   	nop
c00093eb:	83 c4 1c             	add    esp,0x1c
c00093ee:	c3                   	ret    
c00093ef:	90                   	nop

c00093f0 <ReservedFilename::~ReservedFilename()>:
c00093f0:	83 ec 1c             	sub    esp,0x1c
c00093f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fa:	e8 d1 ff ff ff       	call   c00093d0 <ReservedFilename::~ReservedFilename()>
c00093ff:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000940b:	89 04 24             	mov    DWORD PTR [esp],eax
c000940e:	e8 a9 14 00 00       	call   c000a8bc <operator delete(void*, unsigned long)>
c0009413:	83 c4 1c             	add    esp,0x1c
c0009416:	c3                   	ret    

c0009417 <getFromFileDescriptor(int)>:
c0009417:	53                   	push   ebx
c0009418:	83 ec 08             	sub    esp,0x8
c000941b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000941f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009425:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000942b:	7f 2c                	jg     c0009459 <getFromFileDescriptor(int)+0x42>
c000942d:	83 ec 0c             	sub    esp,0xc
c0009430:	68 98 4f 02 c0       	push   0xc0024f98
c0009435:	e8 6e 52 01 00       	call   c001e6a8 <LinkedList<UnixFile>::getFirstElement()>
c000943a:	83 c4 10             	add    esp,0x10
c000943d:	85 c0                	test   eax,eax
c000943f:	75 04                	jne    c0009445 <getFromFileDescriptor(int)+0x2e>
c0009441:	31 c0                	xor    eax,eax
c0009443:	eb 6e                	jmp    c00094b3 <getFromFileDescriptor(int)+0x9c>
c0009445:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009448:	74 69                	je     c00094b3 <getFromFileDescriptor(int)+0x9c>
c000944a:	52                   	push   edx
c000944b:	52                   	push   edx
c000944c:	50                   	push   eax
c000944d:	68 98 4f 02 c0       	push   0xc0024f98
c0009452:	e8 ef 52 01 00       	call   c001e746 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009457:	eb e1                	jmp    c000943a <getFromFileDescriptor(int)+0x23>
c0009459:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000945f:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c0009464:	74 4d                	je     c00094b3 <getFromFileDescriptor(int)+0x9c>
c0009466:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000946c:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009471:	74 40                	je     c00094b3 <getFromFileDescriptor(int)+0x9c>
c0009473:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009479:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c000947e:	74 33                	je     c00094b3 <getFromFileDescriptor(int)+0x9c>
c0009480:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009486:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000948b:	74 26                	je     c00094b3 <getFromFileDescriptor(int)+0x9c>
c000948d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009493:	83 f8 08             	cmp    eax,0x8
c0009496:	77 09                	ja     c00094a1 <getFromFileDescriptor(int)+0x8a>
c0009498:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000949f:	eb 12                	jmp    c00094b3 <getFromFileDescriptor(int)+0x9c>
c00094a1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00094a7:	83 fb 08             	cmp    ebx,0x8
c00094aa:	77 95                	ja     c0009441 <getFromFileDescriptor(int)+0x2a>
c00094ac:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c00094b3:	83 c4 08             	add    esp,0x8
c00094b6:	5b                   	pop    ebx
c00094b7:	c3                   	ret    

c00094b8 <__static_initialization_and_destruction_0(int, int)>:
c00094b8:	83 ec 1c             	sub    esp,0x1c
c00094bb:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c00094c0:	75 32                	jne    c00094f4 <__static_initialization_and_destruction_0(int, int)+0x3c>
c00094c2:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c00094ca:	75 28                	jne    c00094f4 <__static_initialization_and_destruction_0(int, int)+0x3c>
c00094cc:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00094d3:	e8 c6 50 01 00       	call   c001e59e <LinkedList<UnixFile>::LinkedList()>
c00094d8:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c00094e0:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c00094e8:	c7 04 24 9c e5 01 c0 	mov    DWORD PTR [esp],0xc001e59c
c00094ef:	e8 78 13 00 00       	call   c000a86c <__cxa_atexit>
c00094f4:	90                   	nop
c00094f5:	83 c4 1c             	add    esp,0x1c
c00094f8:	c3                   	ret    

c00094f9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00094f9:	83 ec 1c             	sub    esp,0x1c
c00094fc:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0009504:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000950b:	e8 a8 ff ff ff       	call   c00094b8 <__static_initialization_and_destruction_0(int, int)>
c0009510:	83 c4 1c             	add    esp,0x1c
c0009513:	c3                   	ret    
c0009514:	66 90                	xchg   ax,ax
c0009516:	66 90                	xchg   ax,ax
c0009518:	66 90                	xchg   ax,ax
c000951a:	66 90                	xchg   ax,ax
c000951c:	66 90                	xchg   ax,ax
c000951e:	66 90                	xchg   ax,ax

c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009520:	53                   	push   ebx
c0009521:	8b 15 28 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b28
c0009527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000952b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0009530:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0009536:	89 d8                	mov    eax,ebx
c0009538:	d1 e8                	shr    eax,1
c000953a:	01 d0                	add    eax,edx
c000953c:	f6 c3 01             	test   bl,0x1
c000953f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0009542:	75 09                	jne    c000954d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c0009544:	80 e2 f0             	and    dl,0xf0
c0009547:	08 d1                	or     cl,dl
c0009549:	88 08                	mov    BYTE PTR [eax],cl
c000954b:	5b                   	pop    ebx
c000954c:	c3                   	ret    
c000954d:	c0 e1 04             	shl    cl,0x4
c0009550:	80 e2 0f             	and    dl,0xf
c0009553:	08 ca                	or     dl,cl
c0009555:	88 10                	mov    BYTE PTR [eax],dl
c0009557:	5b                   	pop    ebx
c0009558:	c3                   	ret    

c0009559 <Virt::getPageState(unsigned long)>:
c0009559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955d:	8b 0d 28 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b28
c0009563:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009569:	89 d0                	mov    eax,edx
c000956b:	d1 e8                	shr    eax,1
c000956d:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009571:	88 c8                	mov    al,cl
c0009573:	c0 e8 04             	shr    al,0x4
c0009576:	f6 c2 01             	test   dl,0x1
c0009579:	75 04                	jne    c000957f <Virt::getPageState(unsigned long)+0x26>
c000957b:	88 c8                	mov    al,cl
c000957d:	24 0f                	and    al,0xf
c000957f:	c3                   	ret    

c0009580 <Virt::allocateKernelVirtualPages(int)>:
c0009580:	55                   	push   ebp
c0009581:	57                   	push   edi
c0009582:	31 ff                	xor    edi,edi
c0009584:	56                   	push   esi
c0009585:	31 f6                	xor    esi,esi
c0009587:	53                   	push   ebx
c0009588:	31 db                	xor    ebx,ebx
c000958a:	83 ec 1c             	sub    esp,0x1c
c000958d:	8b 2d 24 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021b24
c0009593:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009596:	e8 be ff ff ff       	call   c0009559 <Virt::getPageState(unsigned long)>
c000959b:	84 c0                	test   al,al
c000959d:	75 36                	jne    c00095d5 <Virt::allocateKernelVirtualPages(int)+0x55>
c000959f:	85 f6                	test   esi,esi
c00095a1:	0f 44 fd             	cmove  edi,ebp
c00095a4:	46                   	inc    esi
c00095a5:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c00095a9:	74 51                	je     c00095fc <Virt::allocateKernelVirtualPages(int)+0x7c>
c00095ab:	45                   	inc    ebp
c00095ac:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00095b2:	76 2c                	jbe    c00095e0 <Virt::allocateKernelVirtualPages(int)+0x60>
c00095b4:	b8 00 80 0c 00       	mov    eax,0xc8000
c00095b9:	84 db                	test   bl,bl
c00095bb:	a3 24 1b 02 c0       	mov    ds:0xc0021b24,eax
c00095c0:	75 26                	jne    c00095e8 <Virt::allocateKernelVirtualPages(int)+0x68>
c00095c2:	bd 00 80 0c 00       	mov    ebp,0xc8000
c00095c7:	b3 01                	mov    bl,0x1
c00095c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00095cc:	e8 88 ff ff ff       	call   c0009559 <Virt::getPageState(unsigned long)>
c00095d1:	84 c0                	test   al,al
c00095d3:	74 ca                	je     c000959f <Virt::allocateKernelVirtualPages(int)+0x1f>
c00095d5:	45                   	inc    ebp
c00095d6:	31 f6                	xor    esi,esi
c00095d8:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c00095de:	77 d4                	ja     c00095b4 <Virt::allocateKernelVirtualPages(int)+0x34>
c00095e0:	89 2d 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,ebp
c00095e6:	eb ab                	jmp    c0009593 <Virt::allocateKernelVirtualPages(int)+0x13>
c00095e8:	c7 04 24 88 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa88
c00095ef:	e8 31 71 00 00       	call   c0010725 <KePanic(char const*)>
c00095f4:	8b 2d 24 1b 02 c0    	mov    ebp,DWORD PTR ds:0xc0021b24
c00095fa:	eb 97                	jmp    c0009593 <Virt::allocateKernelVirtualPages(int)+0x13>
c00095fc:	89 3d 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,edi
c0009602:	4e                   	dec    esi
c0009603:	74 74                	je     c0009679 <Virt::allocateKernelVirtualPages(int)+0xf9>
c0009605:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009609:	85 d2                	test   edx,edx
c000960b:	74 4b                	je     c0009658 <Virt::allocateKernelVirtualPages(int)+0xd8>
c000960d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009611:	89 f8                	mov    eax,edi
c0009613:	31 db                	xor    ebx,ebx
c0009615:	8d 71 ff             	lea    esi,[ecx-0x1]
c0009618:	eb 19                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0xb3>
c000961a:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c000961f:	43                   	inc    ebx
c0009620:	89 04 24             	mov    DWORD PTR [esp],eax
c0009623:	e8 f8 fe ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009628:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c000962c:	74 2a                	je     c0009658 <Virt::allocateKernelVirtualPages(int)+0xd8>
c000962e:	a1 24 1b 02 c0       	mov    eax,ds:0xc0021b24
c0009633:	8d 50 01             	lea    edx,[eax+0x1]
c0009636:	85 db                	test   ebx,ebx
c0009638:	89 15 24 1b 02 c0    	mov    DWORD PTR ds:0xc0021b24,edx
c000963e:	74 25                	je     c0009665 <Virt::allocateKernelVirtualPages(int)+0xe5>
c0009640:	39 de                	cmp    esi,ebx
c0009642:	75 d6                	jne    c000961a <Virt::allocateKernelVirtualPages(int)+0x9a>
c0009644:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c0009649:	43                   	inc    ebx
c000964a:	89 04 24             	mov    DWORD PTR [esp],eax
c000964d:	e8 ce fe ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009652:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c0009656:	75 d6                	jne    c000962e <Virt::allocateKernelVirtualPages(int)+0xae>
c0009658:	83 c4 1c             	add    esp,0x1c
c000965b:	89 f8                	mov    eax,edi
c000965d:	5b                   	pop    ebx
c000965e:	c1 e0 0c             	shl    eax,0xc
c0009661:	5e                   	pop    esi
c0009662:	5f                   	pop    edi
c0009663:	5d                   	pop    ebp
c0009664:	c3                   	ret    
c0009665:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c000966a:	bb 01 00 00 00       	mov    ebx,0x1
c000966f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009672:	e8 a9 fe ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009677:	eb b5                	jmp    c000962e <Virt::allocateKernelVirtualPages(int)+0xae>
c0009679:	89 3c 24             	mov    DWORD PTR [esp],edi
c000967c:	8d 47 01             	lea    eax,[edi+0x1]
c000967f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009684:	a3 24 1b 02 c0       	mov    ds:0xc0021b24,eax
c0009689:	e8 92 fe ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000968e:	83 c4 1c             	add    esp,0x1c
c0009691:	89 f8                	mov    eax,edi
c0009693:	5b                   	pop    ebx
c0009694:	c1 e0 0c             	shl    eax,0xc
c0009697:	5e                   	pop    esi
c0009698:	5f                   	pop    edi
c0009699:	5d                   	pop    ebp
c000969a:	c3                   	ret    

c000969b <Virt::freeSwapfilePage(unsigned long)>:
c000969b:	53                   	push   ebx
c000969c:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c00096a2:	b8 01 00 00 00       	mov    eax,0x1
c00096a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00096ab:	d3 e0                	shl    eax,cl
c00096ad:	89 cb                	mov    ebx,ecx
c00096af:	c1 eb 05             	shr    ebx,0x5
c00096b2:	f7 d0                	not    eax
c00096b4:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00096b7:	5b                   	pop    ebx
c00096b8:	c3                   	ret    

c00096b9 <Virt::swapIDToSector(unsigned long)>:
c00096b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096bd:	8b 15 2c 1b 02 c0    	mov    edx,DWORD PTR ds:0xc0021b2c
c00096c3:	8b 0d 34 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b34
c00096c9:	0f af c2             	imul   eax,edx
c00096cc:	01 c8                	add    eax,ecx
c00096ce:	c3                   	ret    

c00096cf <Virt::allocateSwapfilePage()>:
c00096cf:	55                   	push   ebp
c00096d0:	31 d2                	xor    edx,edx
c00096d2:	57                   	push   edi
c00096d3:	56                   	push   esi
c00096d4:	53                   	push   ebx
c00096d5:	83 ec 1c             	sub    esp,0x1c
c00096d8:	8b 1d 30 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b30
c00096de:	8b 0d 2c 1b 02 c0    	mov    ecx,DWORD PTR ds:0xc0021b2c
c00096e4:	89 d8                	mov    eax,ebx
c00096e6:	f7 f1                	div    ecx
c00096e8:	39 cb                	cmp    ebx,ecx
c00096ea:	72 2d                	jb     c0009719 <Virt::allocateSwapfilePage()+0x4a>
c00096ec:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c00096f2:	8b 16                	mov    edx,DWORD PTR [esi]
c00096f4:	f6 c2 01             	test   dl,0x1
c00096f7:	74 38                	je     c0009731 <Virt::allocateSwapfilePage()+0x62>
c00096f9:	31 c9                	xor    ecx,ecx
c00096fb:	bf 01 00 00 00       	mov    edi,0x1
c0009700:	eb 12                	jmp    c0009714 <Virt::allocateSwapfilePage()+0x45>
c0009702:	89 ca                	mov    edx,ecx
c0009704:	89 fd                	mov    ebp,edi
c0009706:	c1 ea 05             	shr    edx,0x5
c0009709:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000970c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000970e:	d3 e5                	shl    ebp,cl
c0009710:	85 ea                	test   edx,ebp
c0009712:	74 26                	je     c000973a <Virt::allocateSwapfilePage()+0x6b>
c0009714:	41                   	inc    ecx
c0009715:	39 c8                	cmp    eax,ecx
c0009717:	77 e9                	ja     c0009702 <Virt::allocateSwapfilePage()+0x33>
c0009719:	c7 04 24 ef fb 01 c0 	mov    DWORD PTR [esp],0xc001fbef
c0009720:	e8 00 70 00 00       	call   c0010725 <KePanic(char const*)>
c0009725:	83 c4 1c             	add    esp,0x1c
c0009728:	31 c9                	xor    ecx,ecx
c000972a:	5b                   	pop    ebx
c000972b:	89 c8                	mov    eax,ecx
c000972d:	5e                   	pop    esi
c000972e:	5f                   	pop    edi
c000972f:	5d                   	pop    ebp
c0009730:	c3                   	ret    
c0009731:	89 f3                	mov    ebx,esi
c0009733:	bd 01 00 00 00       	mov    ebp,0x1
c0009738:	31 c9                	xor    ecx,ecx
c000973a:	09 ea                	or     edx,ebp
c000973c:	89 c8                	mov    eax,ecx
c000973e:	89 13                	mov    DWORD PTR [ebx],edx
c0009740:	83 c4 1c             	add    esp,0x1c
c0009743:	5b                   	pop    ebx
c0009744:	5e                   	pop    esi
c0009745:	5f                   	pop    edi
c0009746:	5d                   	pop    ebp
c0009747:	c3                   	ret    

c0009748 <Virt::virtualMemorySetup()>:
c0009748:	53                   	push   ebx
c0009749:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000974e:	83 ec 08             	sub    esp,0x8
c0009751:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009754:	43                   	inc    ebx
c0009755:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c000975a:	e8 c1 fd ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000975f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009765:	75 ea                	jne    c0009751 <Virt::virtualMemorySetup()+0x9>
c0009767:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000976c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000976f:	43                   	inc    ebx
c0009770:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009775:	e8 a6 fd ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000977a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009780:	75 ea                	jne    c000976c <Virt::virtualMemorySetup()+0x24>
c0009782:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009787:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000978a:	43                   	inc    ebx
c000978b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c0009790:	e8 8b fd ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009795:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000979b:	75 ea                	jne    c0009787 <Virt::virtualMemorySetup()+0x3f>
c000979d:	83 c4 08             	add    esp,0x8
c00097a0:	5b                   	pop    ebx
c00097a1:	c3                   	ret    

c00097a2 <Virt::setupPageSwapping(int)>:
c00097a2:	53                   	push   ebx
c00097a3:	b9 06 fc 01 c0       	mov    ecx,0xc001fc06
c00097a8:	83 ec 18             	sub    esp,0x18
c00097ab:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c00097b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00097b4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00097ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00097bc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00097c0:	c1 e3 0b             	shl    ebx,0xb
c00097c3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00097c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00097ca:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00097cd:	b2 43                	mov    dl,0x43
c00097cf:	b9 08 00 00 00       	mov    ecx,0x8
c00097d4:	89 1d 30 1b 02 c0    	mov    DWORD PTR ds:0xc0021b30,ebx
c00097da:	c1 eb 08             	shr    ebx,0x8
c00097dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097e0:	31 db                	xor    ebx,ebx
c00097e2:	88 15 38 1b 02 c0    	mov    BYTE PTR ds:0xc0021b38,dl
c00097e8:	89 0d 2c 1b 02 c0    	mov    DWORD PTR ds:0xc0021b2c,ecx
c00097ee:	a3 34 1b 02 c0       	mov    ds:0xc0021b34,eax
c00097f3:	e8 6e e2 ff ff       	call   c0007a66 <malloc>
c00097f8:	31 d2                	xor    edx,edx
c00097fa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00097fe:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009803:	89 c1                	mov    ecx,eax
c0009805:	a1 30 1b 02 c0       	mov    eax,ds:0xc0021b30
c000980a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000980d:	f7 35 2c 1b 02 c0    	div    DWORD PTR ds:0xc0021b2c
c0009813:	c1 e8 05             	shr    eax,0x5
c0009816:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000981a:	e8 d1 6c ff ff       	call   c00004f0 <memset>
c000981f:	83 c4 18             	add    esp,0x18
c0009822:	5b                   	pop    ebx
c0009823:	c3                   	ret    

c0009824 <VAS::VAS(VAS*)>:
c0009824:	83 ec 1c             	sub    esp,0x1c
c0009827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000982b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009836:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000983d:	c7 04 24 a8 fa 01 c0 	mov    DWORD PTR [esp],0xc001faa8
c0009844:	e8 dc 6e 00 00       	call   c0010725 <KePanic(char const*)>
c0009849:	90                   	nop
c000984a:	83 c4 1c             	add    esp,0x1c
c000984d:	c3                   	ret    

c000984e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000984e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009852:	89 c2                	mov    edx,eax
c0009854:	c1 ea 16             	shr    edx,0x16
c0009857:	c1 e8 0a             	shr    eax,0xa
c000985a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000985f:	19 c9                	sbb    ecx,ecx
c0009861:	25 fc 0f 00 00       	and    eax,0xffc
c0009866:	c1 e2 0c             	shl    edx,0xc
c0009869:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000986f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009876:	01 d0                	add    eax,edx
c0009878:	c3                   	ret    
c0009879:	90                   	nop

c000987a <VAS::getPageTableEntry(unsigned long)>:
c000987a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000987e:	89 ca                	mov    edx,ecx
c0009880:	c1 ea 16             	shr    edx,0x16
c0009883:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009889:	c1 e9 0a             	shr    ecx,0xa
c000988c:	c1 e0 0c             	shl    eax,0xc
c000988f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009895:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009898:	c3                   	ret    

c0009899 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009899:	57                   	push   edi
c000989a:	56                   	push   esi
c000989b:	53                   	push   ebx
c000989c:	b3 01                	mov    bl,0x1
c000989e:	83 ec 20             	sub    esp,0x20
c00098a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00098a5:	c1 ee 0c             	shr    esi,0xc
c00098a8:	eb 3f                	jmp    c00098e9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00098aa:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00098ae:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00098b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00098b6:	e8 bf ff ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c00098bb:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00098c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00098c2:	f6 c4 04             	test   ah,0x4
c00098c5:	75 60                	jne    c0009927 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c00098c7:	80 fa 04             	cmp    dl,0x4
c00098ca:	74 76                	je     c0009942 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c00098cc:	80 fa 02             	cmp    dl,0x2
c00098cf:	0f 84 85 00 00 00    	je     c000995a <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c00098d5:	80 fa 03             	cmp    dl,0x3
c00098d8:	0f 84 a3 00 00 00    	je     c0009981 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c00098de:	fe ca                	dec    dl
c00098e0:	0f 84 89 00 00 00    	je     c000996f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00098e6:	46                   	inc    esi
c00098e7:	31 db                	xor    ebx,ebx
c00098e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00098ec:	89 f7                	mov    edi,esi
c00098ee:	e8 66 fc ff ff       	call   c0009559 <Virt::getPageState(unsigned long)>
c00098f3:	c1 e7 0c             	shl    edi,0xc
c00098f6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00098fa:	84 c0                	test   al,al
c00098fc:	75 ac                	jne    c00098aa <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c00098fe:	c7 04 24 1d fc 01 c0 	mov    DWORD PTR [esp],0xc001fc1d
c0009905:	e8 1b 6e 00 00       	call   c0010725 <KePanic(char const*)>
c000990a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000990f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009913:	89 04 24             	mov    DWORD PTR [esp],eax
c0009916:	e8 5f ff ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c000991b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009920:	8b 00                	mov    eax,DWORD PTR [eax]
c0009922:	f6 c4 04             	test   ah,0x4
c0009925:	74 bf                	je     c00098e6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009927:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c000992b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009930:	89 04 24             	mov    DWORD PTR [esp],eax
c0009933:	e8 cc e3 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009938:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000993d:	80 fa 04             	cmp    dl,0x4
c0009940:	75 8a                	jne    c00098cc <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c0009942:	84 db                	test   bl,bl
c0009944:	75 3f                	jne    c0009985 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c0009946:	ba cc fa 01 c0       	mov    edx,0xc001facc
c000994b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000994f:	83 c4 20             	add    esp,0x20
c0009952:	5b                   	pop    ebx
c0009953:	5e                   	pop    esi
c0009954:	5f                   	pop    edi
c0009955:	e9 cb 6d 00 00       	jmp    c0010725 <KePanic(char const*)>
c000995a:	84 db                	test   bl,bl
c000995c:	75 11                	jne    c000996f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c000995e:	c7 04 24 39 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc39
c0009965:	e8 bb 6d 00 00       	call   c0010725 <KePanic(char const*)>
c000996a:	e9 77 ff ff ff       	jmp    c00098e6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c000996f:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009974:	89 34 24             	mov    DWORD PTR [esp],esi
c0009977:	e8 a4 fb ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000997c:	e9 65 ff ff ff       	jmp    c00098e6 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009981:	84 db                	test   bl,bl
c0009983:	75 14                	jne    c0009999 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009985:	89 34 24             	mov    DWORD PTR [esp],esi
c0009988:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c000998d:	e8 8e fb ff ff       	call   c0009520 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009992:	83 c4 20             	add    esp,0x20
c0009995:	5b                   	pop    ebx
c0009996:	5e                   	pop    esi
c0009997:	5f                   	pop    edi
c0009998:	c3                   	ret    
c0009999:	b8 55 fc 01 c0       	mov    eax,0xc001fc55
c000999e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a2:	83 c4 20             	add    esp,0x20
c00099a5:	5b                   	pop    ebx
c00099a6:	5e                   	pop    esi
c00099a7:	5f                   	pop    edi
c00099a8:	e9 78 6d 00 00       	jmp    c0010725 <KePanic(char const*)>
c00099ad:	90                   	nop

c00099ae <VAS::freeAllocatedPages(unsigned long)>:
c00099ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099b6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00099ba:	74 09                	je     c00099c5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00099bc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00099c0:	e9 d4 fe ff ff       	jmp    c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c00099c5:	b8 f0 fa 01 c0       	mov    eax,0xc001faf0
c00099ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099ce:	e9 03 10 00 00       	jmp    c000a9d6 <Dbg::kprintf(char const*, ...)>
c00099d3:	90                   	nop

c00099d4 <VAS::virtualToPhysical(unsigned long)>:
c00099d4:	83 ec 08             	sub    esp,0x8
c00099d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099e6:	e8 8f fe ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c00099eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00099ed:	83 c4 08             	add    esp,0x8
c00099f0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099f5:	c3                   	ret    

c00099f6 <VAS::reflagRange(unsigned long, int, int, int)>:
c00099f6:	55                   	push   ebp
c00099f7:	57                   	push   edi
c00099f8:	56                   	push   esi
c00099f9:	53                   	push   ebx
c00099fa:	83 ec 08             	sub    esp,0x8
c00099fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009a01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009a05:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009a09:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009a0d:	89 c3                	mov    ebx,eax
c0009a0f:	c1 e3 0c             	shl    ebx,0xc
c0009a12:	01 f3                	add    ebx,esi
c0009a14:	85 c0                	test   eax,eax
c0009a16:	7e 22                	jle    c0009a3a <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009a18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009a1c:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009a25:	e8 50 fe ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c0009a2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009a2e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a30:	21 f9                	and    ecx,edi
c0009a32:	09 d1                	or     ecx,edx
c0009a34:	39 f3                	cmp    ebx,esi
c0009a36:	89 08                	mov    DWORD PTR [eax],ecx
c0009a38:	75 de                	jne    c0009a18 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009a3a:	83 c4 08             	add    esp,0x8
c0009a3d:	5b                   	pop    ebx
c0009a3e:	5e                   	pop    esi
c0009a3f:	5f                   	pop    edi
c0009a40:	5d                   	pop    ebp
c0009a41:	c3                   	ret    

c0009a42 <VAS::VAS()>:
c0009a42:	83 ec 14             	sub    esp,0x14
c0009a45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a49:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a54:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009a5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a5f:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009a64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a68:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009a6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a70:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009a73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a77:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009a7e:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009a83:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009a88:	29 c2                	sub    edx,eax
c0009a8a:	89 d0                	mov    eax,edx
c0009a8c:	05 ff 0f 00 00       	add    eax,0xfff
c0009a91:	c1 e8 0c             	shr    eax,0xc
c0009a94:	89 c2                	mov    edx,eax
c0009a96:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009a9b:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009aa3:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009aab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009aaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ab7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009aba:	e8 37 ff ff ff       	call   c00099f6 <VAS::reflagRange(unsigned long, int, int, int)>
c0009abf:	90                   	nop
c0009ac0:	83 c4 14             	add    esp,0x14
c0009ac3:	c3                   	ret    

c0009ac4 <VAS::setToWriteCombining(unsigned long, int)>:
c0009ac4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ac9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009acf:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009ad6:	75 01                	jne    c0009ad9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 14             	sub    esp,0x14
c0009adc:	b8 80 00 00 00       	mov    eax,0x80
c0009ae1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ae9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009aee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009af2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009afa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009afe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b02:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b05:	e8 ec fe ff ff       	call   c00099f6 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b0a:	83 c4 14             	add    esp,0x14
c0009b0d:	c3                   	ret    

c0009b0e <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b12:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009b17:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b21:	19 c0                	sbb    eax,eax
c0009b23:	83 ca 03             	or     edx,0x3
c0009b26:	83 e0 fc             	and    eax,0xfffffffc
c0009b29:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b30:	0f 20 d8             	mov    eax,cr3
c0009b33:	0f 22 d8             	mov    cr3,eax
c0009b36:	c3                   	ret    
c0009b37:	90                   	nop

c0009b38 <VAS::~VAS()>:
c0009b38:	83 ec 3c             	sub    esp,0x3c
c0009b3b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b43:	fa                   	cli    
c0009b44:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b49:	40                   	inc    eax
c0009b4a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b4f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b5f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009b63:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b67:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b72:	e8 97 ff ff ff       	call   c0009b0e <VAS::mapOtherVASIn(bool, VAS*)>
c0009b77:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b7f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009b87:	0f 8f d8 00 00 00    	jg     c0009c65 <VAS::~VAS()+0x12d>
c0009b8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009b91:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b94:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009b98:	c1 e2 02             	shl    edx,0x2
c0009b9b:	01 d0                	add    eax,edx
c0009b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b9f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ba3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ba7:	83 e0 01             	and    eax,0x1
c0009baa:	0f 84 ac 00 00 00    	je     c0009c5c <VAS::~VAS()+0x124>
c0009bb0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb8:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009bc0:	7f 7a                	jg     c0009c3c <VAS::~VAS()+0x104>
c0009bc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009bc6:	c1 e0 0a             	shl    eax,0xa
c0009bc9:	89 c2                	mov    edx,eax
c0009bcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009bcf:	01 d0                	add    eax,edx
c0009bd1:	c1 e0 0c             	shl    eax,0xc
c0009bd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bd8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bdf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009be2:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009be8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009bec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009bf0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfb:	e8 4e fc ff ff       	call   c000984e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c12:	25 01 04 00 00       	and    eax,0x401
c0009c17:	3d 01 04 00 00       	cmp    eax,0x401
c0009c1c:	75 15                	jne    c0009c33 <VAS::~VAS()+0xfb>
c0009c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2a:	e8 d5 e0 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009c2f:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c33:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009c37:	e9 7c ff ff ff       	jmp    c0009bb8 <VAS::~VAS()+0x80>
c0009c3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c40:	25 00 04 00 00       	and    eax,0x400
c0009c45:	74 15                	je     c0009c5c <VAS::~VAS()+0x124>
c0009c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c50:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c53:	e8 ac e0 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009c58:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c5c:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009c60:	e9 1a ff ff ff       	jmp    c0009b7f <VAS::~VAS()+0x47>
c0009c65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6f:	e8 25 fc ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c78:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009c7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c7e:	e8 81 e0 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009c83:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009c87:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009c8c:	48                   	dec    eax
c0009c8d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009c92:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009c97:	85 c0                	test   eax,eax
c0009c99:	75 01                	jne    c0009c9c <VAS::~VAS()+0x164>
c0009c9b:	fb                   	sti    
c0009c9c:	90                   	nop
c0009c9d:	83 c4 3c             	add    esp,0x3c
c0009ca0:	c3                   	ret    
c0009ca1:	90                   	nop

c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009ca2:	83 ec 4c             	sub    esp,0x4c
c0009ca5:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009ca9:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009cad:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009cb1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009cb5:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009cb9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009cbd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009cc1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cc7:	77 0b                	ja     c0009cd4 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009cc9:	0f 20 d8             	mov    eax,cr3
c0009ccc:	0f 20 d8             	mov    eax,cr3
c0009ccf:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009cd2:	75 4f                	jne    c0009d23 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009cd4:	89 d8                	mov    eax,ebx
c0009cd6:	09 f8                	or     eax,edi
c0009cd8:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cdd:	75 5b                	jne    c0009d3a <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009cdf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009ce2:	89 de                	mov    esi,ebx
c0009ce4:	c1 ee 16             	shr    esi,0x16
c0009ce7:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009cee:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009cf2:	74 54                	je     c0009d48 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009cf4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009cf8:	c1 eb 0a             	shr    ebx,0xa
c0009cfb:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d01:	c1 e6 0c             	shl    esi,0xc
c0009d04:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d0a:	09 c7                	or     edi,eax
c0009d0c:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009d13:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009d17:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009d1b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009d1f:	83 c4 4c             	add    esp,0x4c
c0009d22:	c3                   	ret    
c0009d23:	c7 04 24 14 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb14
c0009d2a:	e8 a7 0c 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0009d2f:	89 d8                	mov    eax,ebx
c0009d31:	09 f8                	or     eax,edi
c0009d33:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d38:	74 a5                	je     c0009cdf <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009d3a:	c7 04 24 7c fb 01 c0 	mov    DWORD PTR [esp],0xc001fb7c
c0009d41:	e8 df 69 00 00       	call   c0010725 <KePanic(char const*)>
c0009d46:	eb 97                	jmp    c0009cdf <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009d48:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009d4c:	e8 1b e0 ff ff       	call   c0007d6c <Phys::allocatePage()>
c0009d51:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009d5e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d62:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d66:	e8 15 f8 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c0009d6b:	b9 01 00 00 00       	mov    ecx,0x1
c0009d70:	ba 03 00 00 00       	mov    edx,0x3
c0009d75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009d79:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009d7d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009d81:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009d8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d90:	e8 4d 02 00 00       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d95:	89 c1                	mov    ecx,eax
c0009d97:	b8 00 10 00 00       	mov    eax,0x1000
c0009d9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009da0:	31 c0                	xor    eax,eax
c0009da2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009da5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009da9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009dad:	e8 3e 67 ff ff       	call   c00004f0 <memset>
c0009db2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009db6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db9:	e8 db fa ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009dc2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009dc9:	0d 07 04 00 00       	or     eax,0x407
c0009dce:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009dd1:	e9 1e ff ff ff       	jmp    c0009cf4 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009dd6 <VAS::allocatePages(int, int)>:
c0009dd6:	55                   	push   ebp
c0009dd7:	57                   	push   edi
c0009dd8:	56                   	push   esi
c0009dd9:	53                   	push   ebx
c0009dda:	83 ec 2c             	sub    esp,0x2c
c0009ddd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009de2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009de6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009dec:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009df3:	24 01                	and    al,0x1
c0009df5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009df9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009dfd:	0f 85 ce 00 00 00    	jne    c0009ed1 <VAS::allocatePages(int, int)+0xfb>
c0009e03:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009e06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e0a:	85 c0                	test   eax,eax
c0009e0c:	0f 84 a7 00 00 00    	je     c0009eb9 <VAS::allocatePages(int, int)+0xe3>
c0009e12:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009e16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e1a:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009e1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009e22:	c1 e6 0c             	shl    esi,0xc
c0009e25:	01 de                	add    esi,ebx
c0009e27:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009e2a:	81 cd 00 04 00 00    	or     ebp,0x400
c0009e30:	85 c0                	test   eax,eax
c0009e32:	7e 2d                	jle    c0009e61 <VAS::allocatePages(int, int)+0x8b>
c0009e34:	e8 33 df ff ff       	call   c0007d6c <Phys::allocatePage()>
c0009e39:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009e3d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e41:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009e44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e48:	e8 55 fe ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e4d:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009e52:	74 03                	je     c0009e57 <VAS::allocatePages(int, int)+0x81>
c0009e54:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e57:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e5d:	39 de                	cmp    esi,ebx
c0009e5f:	75 d3                	jne    c0009e34 <VAS::allocatePages(int, int)+0x5e>
c0009e61:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009e66:	75 12                	jne    c0009e7a <VAS::allocatePages(int, int)+0xa4>
c0009e68:	0f 20 d8             	mov    eax,cr3
c0009e6b:	0f 22 d8             	mov    cr3,eax
c0009e6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e72:	83 c4 2c             	add    esp,0x2c
c0009e75:	5b                   	pop    ebx
c0009e76:	5e                   	pop    esi
c0009e77:	5f                   	pop    edi
c0009e78:	5d                   	pop    ebp
c0009e79:	c3                   	ret    
c0009e7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e7e:	c1 ee 0a             	shr    esi,0xa
c0009e81:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e87:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009e8d:	c1 eb 0a             	shr    ebx,0xa
c0009e90:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009e96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009e9c:	39 c3                	cmp    ebx,eax
c0009e9e:	77 ce                	ja     c0009e6e <VAS::allocatePages(int, int)+0x98>
c0009ea0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ea3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ea9:	39 d8                	cmp    eax,ebx
c0009eab:	73 f3                	jae    c0009ea0 <VAS::allocatePages(int, int)+0xca>
c0009ead:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009eb1:	83 c4 2c             	add    esp,0x2c
c0009eb4:	5b                   	pop    ebx
c0009eb5:	5e                   	pop    esi
c0009eb6:	5f                   	pop    edi
c0009eb7:	5d                   	pop    ebp
c0009eb8:	c3                   	ret    
c0009eb9:	c7 04 24 a0 fb 01 c0 	mov    DWORD PTR [esp],0xc001fba0
c0009ec0:	e8 60 68 00 00       	call   c0010725 <KePanic(char const*)>
c0009ec5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ec8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ecc:	e9 41 ff ff ff       	jmp    c0009e12 <VAS::allocatePages(int, int)+0x3c>
c0009ed1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009ed5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ed8:	e8 a3 f6 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c0009edd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ee1:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ee6:	0f 87 a3 00 00 00    	ja     c0009f8f <VAS::allocatePages(int, int)+0x1b9>
c0009eec:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009ef0:	85 d2                	test   edx,edx
c0009ef2:	7e 44                	jle    c0009f38 <VAS::allocatePages(int, int)+0x162>
c0009ef4:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009ef8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009efc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f00:	c1 e5 0c             	shl    ebp,0xc
c0009f03:	81 ce 00 04 00 00    	or     esi,0x400
c0009f09:	01 dd                	add    ebp,ebx
c0009f0b:	e8 5c de ff ff       	call   c0007d6c <Phys::allocatePage()>
c0009f10:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009f14:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009f18:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f1f:	e8 7e fd ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f24:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f29:	74 03                	je     c0009f2e <VAS::allocatePages(int, int)+0x158>
c0009f2b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f34:	39 dd                	cmp    ebp,ebx
c0009f36:	75 d3                	jne    c0009f0b <VAS::allocatePages(int, int)+0x135>
c0009f38:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f3d:	0f 84 25 ff ff ff    	je     c0009e68 <VAS::allocatePages(int, int)+0x92>
c0009f43:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f4b:	c1 e0 0c             	shl    eax,0xc
c0009f4e:	01 d0                	add    eax,edx
c0009f50:	89 d3                	mov    ebx,edx
c0009f52:	c1 eb 0a             	shr    ebx,0xa
c0009f55:	c1 e8 0a             	shr    eax,0xa
c0009f58:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f63:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f69:	2d 00 00 40 00       	sub    eax,0x400000
c0009f6e:	39 c3                	cmp    ebx,eax
c0009f70:	0f 87 f8 fe ff ff    	ja     c0009e6e <VAS::allocatePages(int, int)+0x98>
c0009f76:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f7f:	39 d8                	cmp    eax,ebx
c0009f81:	73 f3                	jae    c0009f76 <VAS::allocatePages(int, int)+0x1a0>
c0009f83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f87:	83 c4 2c             	add    esp,0x2c
c0009f8a:	5b                   	pop    ebx
c0009f8b:	5e                   	pop    esi
c0009f8c:	5f                   	pop    edi
c0009f8d:	5d                   	pop    ebp
c0009f8e:	c3                   	ret    
c0009f8f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009f94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f9a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fa1:	0f 84 45 ff ff ff    	je     c0009eec <VAS::allocatePages(int, int)+0x116>
c0009fa7:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c0009faf:	e9 38 ff ff ff       	jmp    c0009eec <VAS::allocatePages(int, int)+0x116>

c0009fb4 <VAS::setCPUSpecific(unsigned long)>:
c0009fb4:	83 ec 1c             	sub    esp,0x1c
c0009fb7:	b8 05 00 00 00       	mov    eax,0x5
c0009fbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc4:	ba 00 00 40 c2       	mov    edx,0xc2400000
c0009fc9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fcd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c5 fc ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fdd:	83 c4 1c             	add    esp,0x1c
c0009fe0:	c3                   	ret    
c0009fe1:	90                   	nop

c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009fe2:	55                   	push   ebp
c0009fe3:	57                   	push   edi
c0009fe4:	56                   	push   esi
c0009fe5:	53                   	push   ebx
c0009fe6:	83 ec 2c             	sub    esp,0x2c
c0009fe9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fee:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009ff2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009ff6:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009ffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a000:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a007:	24 01                	and    al,0x1
c000a009:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a00d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a011:	85 c0                	test   eax,eax
c000a013:	7e 41                	jle    c000a056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a015:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a019:	89 f3                	mov    ebx,esi
c000a01b:	c1 e0 0c             	shl    eax,0xc
c000a01e:	01 f0                	add    eax,esi
c000a020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a024:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a028:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a02c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a030:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a033:	29 f0                	sub    eax,esi
c000a035:	01 d8                	add    eax,ebx
c000a037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a03b:	e8 62 fc ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a040:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a045:	74 03                	je     c000a04a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a047:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a04a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a050:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a054:	75 ce                	jne    c000a024 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a056:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a05b:	75 10                	jne    c000a06d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a05d:	0f 20 d8             	mov    eax,cr3
c000a060:	0f 22 d8             	mov    cr3,eax
c000a063:	83 c4 2c             	add    esp,0x2c
c000a066:	89 f0                	mov    eax,esi
c000a068:	5b                   	pop    ebx
c000a069:	5e                   	pop    esi
c000a06a:	5f                   	pop    edi
c000a06b:	5d                   	pop    ebp
c000a06c:	c3                   	ret    
c000a06d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a071:	89 f3                	mov    ebx,esi
c000a073:	c1 eb 0a             	shr    ebx,0xa
c000a076:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a07c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a082:	c1 e0 0c             	shl    eax,0xc
c000a085:	01 f0                	add    eax,esi
c000a087:	c1 e8 0a             	shr    eax,0xa
c000a08a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a08f:	2d 00 00 40 00       	sub    eax,0x400000
c000a094:	39 c3                	cmp    ebx,eax
c000a096:	77 cb                	ja     c000a063 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a098:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a09b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0a1:	39 d8                	cmp    eax,ebx
c000a0a3:	73 f3                	jae    c000a098 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a0a5:	83 c4 2c             	add    esp,0x2c
c000a0a8:	89 f0                	mov    eax,esi
c000a0aa:	5b                   	pop    ebx
c000a0ab:	5e                   	pop    esi
c000a0ac:	5f                   	pop    edi
c000a0ad:	5d                   	pop    ebp
c000a0ae:	c3                   	ret    
c000a0af:	90                   	nop

c000a0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0b0:	83 ec 4c             	sub    esp,0x4c
c000a0b3:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a0b7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a0bb:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a0bf:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a0c3:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a0c7:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a0cb:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a0cf:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a0d4:	09 d8                	or     eax,ebx
c000a0d6:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0db:	75 52                	jne    c000a12f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a0dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a0e0:	89 de                	mov    esi,ebx
c000a0e2:	c1 ee 16             	shr    esi,0x16
c000a0e5:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a0ec:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a0f0:	74 54                	je     c000a146 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a0f2:	c1 eb 0a             	shr    ebx,0xa
c000a0f5:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a0f9:	80 fa 01             	cmp    dl,0x1
c000a0fc:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a100:	19 c0                	sbb    eax,eax
c000a102:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a108:	c1 e6 0c             	shl    esi,0xc
c000a10b:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a110:	01 f3                	add    ebx,esi
c000a112:	09 ca                	or     edx,ecx
c000a114:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a11b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a11f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a123:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a127:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a12b:	83 c4 4c             	add    esp,0x4c
c000a12e:	c3                   	ret    
c000a12f:	c7 04 24 cc fb 01 c0 	mov    DWORD PTR [esp],0xc001fbcc
c000a136:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a13a:	e8 e6 65 00 00       	call   c0010725 <KePanic(char const*)>
c000a13f:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a144:	eb 97                	jmp    c000a0dd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a146:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a14a:	e8 1d dc ff ff       	call   c0007d6c <Phys::allocatePage()>
c000a14f:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a155:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a15c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a160:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a164:	e8 17 f4 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000a169:	b9 01 00 00 00       	mov    ecx,0x1
c000a16e:	ba 03 00 00 00       	mov    edx,0x3
c000a173:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a177:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a17b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a17f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a182:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a186:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a18a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a18e:	e8 4f fe ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a193:	89 c1                	mov    ecx,eax
c000a195:	b8 00 10 00 00       	mov    eax,0x1000
c000a19a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19e:	31 c0                	xor    eax,eax
c000a1a0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a1a7:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a1ab:	e8 40 63 ff ff       	call   c00004f0 <memset>
c000a1b0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a1b4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1b7:	e8 dd f6 ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a1c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a1c3:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a1c8:	81 c9 07 04 00 00    	or     ecx,0x407
c000a1ce:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a1d1:	e9 1c ff ff ff       	jmp    c000a0f2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a1d6 <VAS::VAS(bool)>:
c000a1d6:	53                   	push   ebx
c000a1d7:	83 ec 48             	sub    esp,0x48
c000a1da:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a1de:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a1e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a1e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1ed:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a1f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1f8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a1fc:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a201:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a204:	e8 63 db ff ff       	call   c0007d6c <Phys::allocatePage()>
c000a209:	89 c2                	mov    edx,eax
c000a20b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a20f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a212:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a218:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a21f:	e8 5c f3 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000a224:	89 c2                	mov    edx,eax
c000a226:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a22a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a22d:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a235:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a23d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a241:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a245:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a248:	e8 95 fd ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a24d:	89 c2                	mov    edx,eax
c000a24f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a253:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a256:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a25e:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a266:	7f 1c                	jg     c000a284 <VAS::VAS(bool)+0xae>
c000a268:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a26c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a26f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a273:	c1 e2 02             	shl    edx,0x2
c000a276:	01 d0                	add    eax,edx
c000a278:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a27e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a282:	eb da                	jmp    c000a25e <VAS::VAS(bool)+0x88>
c000a284:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a28c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a294:	7f 75                	jg     c000a30b <VAS::VAS(bool)+0x135>
c000a296:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a29a:	2d 00 02 00 00       	sub    eax,0x200
c000a29f:	c1 e0 0c             	shl    eax,0xc
c000a2a2:	83 c8 05             	or     eax,0x5
c000a2a5:	89 c2                	mov    edx,eax
c000a2a7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2b2:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a2b9:	24 10                	and    al,0x10
c000a2bb:	74 07                	je     c000a2c4 <VAS::VAS(bool)+0xee>
c000a2bd:	b8 00 01 00 00       	mov    eax,0x100
c000a2c2:	eb 05                	jmp    c000a2c9 <VAS::VAS(bool)+0xf3>
c000a2c4:	b8 00 00 00 00       	mov    eax,0x0
c000a2c9:	09 d0                	or     eax,edx
c000a2cb:	89 c1                	mov    ecx,eax
c000a2cd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2d4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2d8:	c1 e2 02             	shl    edx,0x2
c000a2db:	01 d0                	add    eax,edx
c000a2dd:	89 ca                	mov    edx,ecx
c000a2df:	89 10                	mov    DWORD PTR [eax],edx
c000a2e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a2e5:	2d 40 03 00 00       	sub    eax,0x340
c000a2ea:	83 f8 7f             	cmp    eax,0x7f
c000a2ed:	77 16                	ja     c000a305 <VAS::VAS(bool)+0x12f>
c000a2ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2f6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a2fa:	c1 e2 02             	shl    edx,0x2
c000a2fd:	01 d0                	add    eax,edx
c000a2ff:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a305:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a309:	eb 81                	jmp    c000a28c <VAS::VAS(bool)+0xb6>
c000a30b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a310:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a316:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a31d:	24 10                	and    al,0x10
c000a31f:	74 07                	je     c000a328 <VAS::VAS(bool)+0x152>
c000a321:	b8 03 41 00 00       	mov    eax,0x4103
c000a326:	eb 05                	jmp    c000a32d <VAS::VAS(bool)+0x157>
c000a328:	b8 03 40 00 00       	mov    eax,0x4003
c000a32d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a331:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a334:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a33a:	89 02                	mov    DWORD PTR [edx],eax
c000a33c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a341:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a347:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a34d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a351:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a355:	89 04 24             	mov    DWORD PTR [esp],eax
c000a358:	e8 57 fc ff ff       	call   c0009fb4 <VAS::setCPUSpecific(unsigned long)>
c000a35d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a361:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a364:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a369:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a36f:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a376:	24 10                	and    al,0x10
c000a378:	74 07                	je     c000a381 <VAS::VAS(bool)+0x1ab>
c000a37a:	b8 00 01 00 00       	mov    eax,0x100
c000a37f:	eb 05                	jmp    c000a386 <VAS::VAS(bool)+0x1b0>
c000a381:	b8 00 00 00 00       	mov    eax,0x0
c000a386:	09 c2                	or     edx,eax
c000a388:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a38f:	05 fc 0f 00 00       	add    eax,0xffc
c000a394:	83 ca 03             	or     edx,0x3
c000a397:	89 10                	mov    DWORD PTR [eax],edx
c000a399:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a39e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3a7:	e8 e8 1c 00 00       	call   c000c094 <Device::getName()>
c000a3ac:	c7 44 24 04 6f fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fc6f
c000a3b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3b7:	e8 f4 63 ff ff       	call   c00007b0 <strcmp>
c000a3bc:	85 c0                	test   eax,eax
c000a3be:	0f 94 c0             	sete   al
c000a3c1:	84 c0                	test   al,al
c000a3c3:	0f 84 8b 00 00 00    	je     c000a454 <VAS::VAS(bool)+0x27e>
c000a3c9:	fa                   	cli    
c000a3ca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3cf:	40                   	inc    eax
c000a3d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3d5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3e0:	05 7c 09 00 00       	add    eax,0x97c
c000a3e5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3e8:	e8 55 d1 ff ff       	call   c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3f2:	89 c3                	mov    ebx,eax
c000a3f4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ff:	05 7c 09 00 00       	add    eax,0x97c
c000a404:	89 04 24             	mov    DWORD PTR [esp],eax
c000a407:	e8 36 d1 ff ff       	call   c0007542 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a40c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a410:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a414:	89 04 24             	mov    DWORD PTR [esp],eax
c000a417:	e8 5e f4 ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c000a41c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a41e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a423:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a42b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a42f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a433:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a437:	89 04 24             	mov    DWORD PTR [esp],eax
c000a43a:	e8 63 f8 ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a43f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a444:	48                   	dec    eax
c000a445:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a44a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a44f:	85 c0                	test   eax,eax
c000a451:	75 01                	jne    c000a454 <VAS::VAS(bool)+0x27e>
c000a453:	fb                   	sti    
c000a454:	90                   	nop
c000a455:	83 c4 48             	add    esp,0x48
c000a458:	5b                   	pop    ebx
c000a459:	c3                   	ret    

c000a45a <VAS::evict(unsigned long)>:
c000a45a:	55                   	push   ebp
c000a45b:	57                   	push   edi
c000a45c:	56                   	push   esi
c000a45d:	53                   	push   ebx
c000a45e:	83 ec 3c             	sub    esp,0x3c
c000a461:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a465:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a469:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a46d:	e8 5d f2 ff ff       	call   c00096cf <Virt::allocateSwapfilePage()>
c000a472:	8b 1d 2c 1b 02 c0    	mov    ebx,DWORD PTR ds:0xc0021b2c
c000a478:	85 db                	test   ebx,ebx
c000a47a:	89 c7                	mov    edi,eax
c000a47c:	7e 4a                	jle    c000a4c8 <VAS::evict(unsigned long)+0x6e>
c000a47e:	89 ee                	mov    esi,ebp
c000a480:	31 db                	xor    ebx,ebx
c000a482:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a485:	e8 2f f2 ff ff       	call   c00096b9 <Virt::swapIDToSector(unsigned long)>
c000a48a:	31 c9                	xor    ecx,ecx
c000a48c:	ba 01 00 00 00       	mov    edx,0x1
c000a491:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a495:	81 c6 00 02 00 00    	add    esi,0x200
c000a49b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a49f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a4a3:	01 d8                	add    eax,ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4aa:	0f be 05 38 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021b38
c000a4b1:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4bb:	e8 b4 2c 00 00       	call   c000d174 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4c0:	39 1d 2c 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b2c,ebx
c000a4c6:	7f ba                	jg     c000a482 <VAS::evict(unsigned long)+0x28>
c000a4c8:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a4cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a4d0:	c1 e7 0b             	shl    edi,0xb
c000a4d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4d6:	e8 9f f3 ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c000a4db:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4dd:	89 d1                	mov    ecx,edx
c000a4df:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4e5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4eb:	09 cf                	or     edi,ecx
c000a4ed:	89 38                	mov    DWORD PTR [eax],edi
c000a4ef:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4f2:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a4f8:	e8 07 d8 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c000a4fd:	0f 20 d8             	mov    eax,cr3
c000a500:	0f 22 d8             	mov    cr3,eax
c000a503:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a508:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a50c:	8d 50 01             	lea    edx,[eax+0x1]
c000a50f:	b8 7d fc 01 c0       	mov    eax,0xc001fc7d
c000a514:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a51a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a51e:	83 c4 3c             	add    esp,0x3c
c000a521:	5b                   	pop    ebx
c000a522:	5e                   	pop    esi
c000a523:	5f                   	pop    edi
c000a524:	5d                   	pop    ebp
c000a525:	e9 ac 04 00 00       	jmp    c000a9d6 <Dbg::kprintf(char const*, ...)>

c000a52a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a52a:	83 ec 4c             	sub    esp,0x4c
c000a52d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a531:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a535:	c7 04 24 8e fc 01 c0 	mov    DWORD PTR [esp],0xc001fc8e
c000a53c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a540:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a544:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a548:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a54e:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a552:	e8 7f 04 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a557:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a55b:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a55f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a562:	e8 13 f3 ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c000a567:	85 c0                	test   eax,eax
c000a569:	89 c6                	mov    esi,eax
c000a56b:	0f 95 c2             	setne  dl
c000a56e:	85 db                	test   ebx,ebx
c000a570:	0f 95 c0             	setne  al
c000a573:	20 c2                	and    dl,al
c000a575:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a579:	75 19                	jne    c000a594 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a57b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a580:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a584:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a588:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a58c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a590:	83 c4 4c             	add    esp,0x4c
c000a593:	c3                   	ret    
c000a594:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a596:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a59c:	74 07                	je     c000a5a5 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a59e:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a5a3:	eb d6                	jmp    c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a5a5:	e8 c2 d7 ff ff       	call   c0007d6c <Phys::allocatePage()>
c000a5aa:	8b 16                	mov    edx,DWORD PTR [esi]
c000a5ac:	c1 ed 0b             	shr    ebp,0xb
c000a5af:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a5b5:	09 c2                	or     edx,eax
c000a5b7:	81 ca 01 08 00 00    	or     edx,0x801
c000a5bd:	89 16                	mov    DWORD PTR [esi],edx
c000a5bf:	8b 35 2c 1b 02 c0    	mov    esi,DWORD PTR ds:0xc0021b2c
c000a5c5:	85 f6                	test   esi,esi
c000a5c7:	7e 4a                	jle    c000a613 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a5c9:	89 df                	mov    edi,ebx
c000a5cb:	31 f6                	xor    esi,esi
c000a5cd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a5d0:	e8 e4 f0 ff ff       	call   c00096b9 <Virt::swapIDToSector(unsigned long)>
c000a5d5:	31 c9                	xor    ecx,ecx
c000a5d7:	ba 01 00 00 00       	mov    edx,0x1
c000a5dc:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a5e0:	81 c7 00 02 00 00    	add    edi,0x200
c000a5e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a5ee:	01 f0                	add    eax,esi
c000a5f0:	46                   	inc    esi
c000a5f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a5f5:	0f be 05 38 1b 02 c0 	movsx  eax,BYTE PTR ds:0xc0021b38
c000a5fc:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a603:	89 04 24             	mov    DWORD PTR [esp],eax
c000a606:	e8 fd 2a 00 00       	call   c000d108 <LogicalDisk::read(unsigned long long, int, void*)>
c000a60b:	39 35 2c 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b2c,esi
c000a611:	7f ba                	jg     c000a5cd <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a613:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a617:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a61c:	c7 04 24 a1 fc 01 c0 	mov    DWORD PTR [esp],0xc001fca1
c000a623:	48                   	dec    eax
c000a624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a628:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a62d:	e8 a4 03 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a632:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a635:	e8 61 f0 ff ff       	call   c000969b <Virt::freeSwapfilePage(unsigned long)>
c000a63a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a63f:	48                   	dec    eax
c000a640:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a645:	75 01                	jne    c000a648 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a647:	fb                   	sti    
c000a648:	0f 20 d8             	mov    eax,cr3
c000a64b:	0f 22 d8             	mov    cr3,eax
c000a64e:	e9 28 ff ff ff       	jmp    c000a57b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a653:	90                   	nop

c000a654 <VAS::scanForEviction()>:
c000a654:	57                   	push   edi
c000a655:	31 ff                	xor    edi,edi
c000a657:	56                   	push   esi
c000a658:	53                   	push   ebx
c000a659:	83 ec 20             	sub    esp,0x20
c000a65c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a660:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a663:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a669:	75 0e                	jne    c000a679 <VAS::scanForEviction()+0x25>
c000a66b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a66e:	89 da                	mov    edx,ebx
c000a670:	c1 ea 16             	shr    edx,0x16
c000a673:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a677:	74 51                	je     c000a6ca <VAS::scanForEviction()+0x76>
c000a679:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a67d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a680:	e8 f5 f1 ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c000a685:	8b 10                	mov    edx,DWORD PTR [eax]
c000a687:	89 d1                	mov    ecx,edx
c000a689:	81 e1 01 08 00 00    	and    ecx,0x801
c000a68f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a695:	74 3e                	je     c000a6d5 <VAS::scanForEviction()+0x81>
c000a697:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a69d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a6a3:	76 2b                	jbe    c000a6d0 <VAS::scanForEviction()+0x7c>
c000a6a5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a6ac:	47                   	inc    edi
c000a6ad:	83 ff 03             	cmp    edi,0x3
c000a6b0:	74 32                	je     c000a6e4 <VAS::scanForEviction()+0x90>
c000a6b2:	31 db                	xor    ebx,ebx
c000a6b4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a6ba:	75 bd                	jne    c000a679 <VAS::scanForEviction()+0x25>
c000a6bc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a6bf:	89 da                	mov    edx,ebx
c000a6c1:	c1 ea 16             	shr    edx,0x16
c000a6c4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a6c8:	75 af                	jne    c000a679 <VAS::scanForEviction()+0x25>
c000a6ca:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6d0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6d3:	eb 8e                	jmp    c000a663 <VAS::scanForEviction()+0xf>
c000a6d5:	f6 c2 20             	test   dl,0x20
c000a6d8:	74 13                	je     c000a6ed <VAS::scanForEviction()+0x99>
c000a6da:	83 e2 df             	and    edx,0xffffffdf
c000a6dd:	89 10                	mov    DWORD PTR [eax],edx
c000a6df:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6e2:	eb b3                	jmp    c000a697 <VAS::scanForEviction()+0x43>
c000a6e4:	83 c4 20             	add    esp,0x20
c000a6e7:	31 c0                	xor    eax,eax
c000a6e9:	5b                   	pop    ebx
c000a6ea:	5e                   	pop    esi
c000a6eb:	5f                   	pop    edi
c000a6ec:	c3                   	ret    
c000a6ed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a6f1:	89 d0                	mov    eax,edx
c000a6f3:	c7 04 24 b6 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcb6
c000a6fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a703:	e8 ce 02 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a708:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a70b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a70e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a712:	e8 43 fd ff ff       	call   c000a45a <VAS::evict(unsigned long)>
c000a717:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a71a:	c7 04 24 ca fc 01 c0 	mov    DWORD PTR [esp],0xc001fcca
c000a721:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a725:	e8 ac 02 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a72a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a72e:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a735:	83 c4 20             	add    esp,0x20
c000a738:	5b                   	pop    ebx
c000a739:	5e                   	pop    esi
c000a73a:	5f                   	pop    edi
c000a73b:	c3                   	ret    

c000a73c <mapVASFirstTime>:
c000a73c:	55                   	push   ebp
c000a73d:	57                   	push   edi
c000a73e:	56                   	push   esi
c000a73f:	53                   	push   ebx
c000a740:	83 ec 2c             	sub    esp,0x2c
c000a743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a748:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a74b:	4a                   	dec    edx
c000a74c:	0f 84 06 01 00 00    	je     c000a858 <mapVASFirstTime+0x11c>
c000a752:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a755:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a75a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a75f:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a762:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a768:	c1 e5 15             	shl    ebp,0x15
c000a76b:	29 eb                	sub    ebx,ebp
c000a76d:	29 ef                	sub    edi,ebp
c000a76f:	e8 f8 d5 ff ff       	call   c0007d6c <Phys::allocatePage()>
c000a774:	b9 03 04 00 00       	mov    ecx,0x403
c000a779:	ba 01 00 00 00       	mov    edx,0x1
c000a77e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a782:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a788:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a78c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a790:	89 34 24             	mov    DWORD PTR [esp],esi
c000a793:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a797:	e8 46 f8 ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79c:	39 fb                	cmp    ebx,edi
c000a79e:	75 cf                	jne    c000a76f <mapVASFirstTime+0x33>
c000a7a0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a7a5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a7aa:	29 eb                	sub    ebx,ebp
c000a7ac:	29 ef                	sub    edi,ebp
c000a7ae:	e8 b9 d5 ff ff       	call   c0007d6c <Phys::allocatePage()>
c000a7b3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a7b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a7bb:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7be:	19 d2                	sbb    edx,edx
c000a7c0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a7c6:	83 e2 04             	and    edx,0x4
c000a7c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7cd:	81 c2 03 04 00 00    	add    edx,0x403
c000a7d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a7d7:	ba 01 00 00 00       	mov    edx,0x1
c000a7dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7e0:	e8 fd f7 ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a7e5:	39 df                	cmp    edi,ebx
c000a7e7:	75 c5                	jne    c000a7ae <mapVASFirstTime+0x72>
c000a7e9:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a7f3:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7f9:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a7fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a802:	c1 eb 0c             	shr    ebx,0xc
c000a805:	b8 04 00 00 00       	mov    eax,0x4
c000a80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a80e:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a813:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a818:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a81c:	89 34 24             	mov    DWORD PTR [esp],esi
c000a81f:	be 04 00 00 00       	mov    esi,0x4
c000a824:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a828:	e8 c9 f1 ff ff       	call   c00099f6 <VAS::reflagRange(unsigned long, int, int, int)>
c000a82d:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a832:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a836:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a83a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a83e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a842:	89 04 24             	mov    DWORD PTR [esp],eax
c000a845:	e8 ac f1 ff ff       	call   c00099f6 <VAS::reflagRange(unsigned long, int, int, int)>
c000a84a:	0f 20 d8             	mov    eax,cr3
c000a84d:	0f 22 d8             	mov    cr3,eax
c000a850:	83 c4 2c             	add    esp,0x2c
c000a853:	5b                   	pop    ebx
c000a854:	5e                   	pop    esi
c000a855:	5f                   	pop    edi
c000a856:	5d                   	pop    ebp
c000a857:	c3                   	ret    
c000a858:	c7 04 24 dd fc 01 c0 	mov    DWORD PTR [esp],0xc001fcdd
c000a85f:	e8 72 01 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a864:	83 c4 2c             	add    esp,0x2c
c000a867:	5b                   	pop    ebx
c000a868:	5e                   	pop    esi
c000a869:	5f                   	pop    edi
c000a86a:	5d                   	pop    ebp
c000a86b:	c3                   	ret    

c000a86c <__cxa_atexit>:
c000a86c:	31 c0                	xor    eax,eax
c000a86e:	c3                   	ret    

c000a86f <__cxa_finalize>:
c000a86f:	c3                   	ret    

c000a870 <__stack_chk_fail>:
c000a870:	55                   	push   ebp
c000a871:	89 e5                	mov    ebp,esp
c000a873:	83 ec 10             	sub    esp,0x10
c000a876:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a879:	68 f6 fc 01 c0       	push   0xc001fcf6
c000a87e:	e8 53 01 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a883:	58                   	pop    eax
c000a884:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a887:	5a                   	pop    edx
c000a888:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a88b:	68 f6 fc 01 c0       	push   0xc001fcf6
c000a890:	e8 41 01 00 00       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000a895:	c7 04 24 fe fc 01 c0 	mov    DWORD PTR [esp],0xc001fcfe
c000a89c:	e8 84 5e 00 00       	call   c0010725 <KePanic(char const*)>
c000a8a1:	83 c4 10             	add    esp,0x10
c000a8a4:	c9                   	leave  
c000a8a5:	c3                   	ret    

c000a8a6 <__cxa_pure_virtual>:
c000a8a6:	83 ec 18             	sub    esp,0x18
c000a8a9:	68 16 fd 01 c0       	push   0xc001fd16
c000a8ae:	e8 72 5e 00 00       	call   c0010725 <KePanic(char const*)>
c000a8b3:	83 c4 1c             	add    esp,0x1c
c000a8b6:	c3                   	ret    

c000a8b7 <operator new[](unsigned long)>:
c000a8b7:	e9 aa d1 ff ff       	jmp    c0007a66 <malloc>

c000a8bc <operator delete(void*, unsigned long)>:
c000a8bc:	e9 cb d1 ff ff       	jmp    c0007a8c <rfree>

c000a8c1 <operator delete[](void*)>:
c000a8c1:	e9 c6 d1 ff ff       	jmp    c0007a8c <rfree>

c000a8c6 <operator delete[](void*, unsigned long)>:
c000a8c6:	e9 c1 d1 ff ff       	jmp    c0007a8c <rfree>

c000a8cb <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a8cb:	55                   	push   ebp
c000a8cc:	b8 30 31 32 33       	mov    eax,0x33323130
c000a8d1:	57                   	push   edi
c000a8d2:	ba 34 35 36 37       	mov    edx,0x37363534
c000a8d7:	56                   	push   esi
c000a8d8:	bf 43 44 45 46       	mov    edi,0x46454443
c000a8dd:	53                   	push   ebx
c000a8de:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a8e3:	83 ec 20             	sub    esp,0x20
c000a8e6:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a8ea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a8ee:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a8f2:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a8f6:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a8fa:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a8fe:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a902:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a907:	89 f7                	mov    edi,esi
c000a909:	89 eb                	mov    ebx,ebp
c000a90b:	eb 02                	jmp    c000a90f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a90d:	89 c7                	mov    edi,eax
c000a90f:	31 d2                	xor    edx,edx
c000a911:	89 f8                	mov    eax,edi
c000a913:	f7 f1                	div    ecx
c000a915:	43                   	inc    ebx
c000a916:	39 cf                	cmp    edi,ecx
c000a918:	73 f3                	jae    c000a90d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a91a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a91d:	eb 02                	jmp    c000a921 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a91f:	89 c6                	mov    esi,eax
c000a921:	31 d2                	xor    edx,edx
c000a923:	89 f0                	mov    eax,esi
c000a925:	f7 f1                	div    ecx
c000a927:	4b                   	dec    ebx
c000a928:	39 ce                	cmp    esi,ecx
c000a92a:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a92f:	88 13                	mov    BYTE PTR [ebx],dl
c000a931:	73 ec                	jae    c000a91f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a933:	83 c4 20             	add    esp,0x20
c000a936:	89 e8                	mov    eax,ebp
c000a938:	5b                   	pop    ebx
c000a939:	5e                   	pop    esi
c000a93a:	5f                   	pop    edi
c000a93b:	5d                   	pop    ebp
c000a93c:	c3                   	ret    

c000a93d <Dbg::logc(char)>:
c000a93d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a944:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a948:	75 12                	jne    c000a95c <Dbg::logc(char)+0x1f>
c000a94a:	ba fd 03 00 00       	mov    edx,0x3fd
c000a94f:	ec                   	in     al,dx
c000a950:	24 20                	and    al,0x20
c000a952:	74 fb                	je     c000a94f <Dbg::logc(char)+0x12>
c000a954:	ba f8 03 00 00       	mov    edx,0x3f8
c000a959:	88 c8                	mov    al,cl
c000a95b:	ee                   	out    dx,al
c000a95c:	c3                   	ret    

c000a95d <Dbg::logs(char*)>:
c000a95d:	53                   	push   ebx
c000a95e:	83 ec 04             	sub    esp,0x4
c000a961:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a965:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a968:	84 c0                	test   al,al
c000a96a:	74 10                	je     c000a97c <Dbg::logs(char*)+0x1f>
c000a96c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96f:	43                   	inc    ebx
c000a970:	e8 c8 ff ff ff       	call   c000a93d <Dbg::logc(char)>
c000a975:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a978:	84 c0                	test   al,al
c000a97a:	75 f0                	jne    c000a96c <Dbg::logs(char*)+0xf>
c000a97c:	58                   	pop    eax
c000a97d:	5b                   	pop    ebx
c000a97e:	c3                   	ret    

c000a97f <Dbg::logWriteInt(unsigned int)>:
c000a97f:	83 ec 1c             	sub    esp,0x1c
c000a982:	b8 0a 00 00 00       	mov    eax,0xa
c000a987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a98b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a98f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a997:	89 04 24             	mov    DWORD PTR [esp],eax
c000a99a:	e8 2c ff ff ff       	call   c000a8cb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a99f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a2:	e8 b6 ff ff ff       	call   c000a95d <Dbg::logs(char*)>
c000a9a7:	83 c4 1c             	add    esp,0x1c
c000a9aa:	c3                   	ret    

c000a9ab <Dbg::logWriteIntBase(unsigned int, int)>:
c000a9ab:	83 ec 1c             	sub    esp,0x1c
c000a9ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9b6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000a9ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	e8 01 ff ff ff       	call   c000a8cb <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a9ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9cd:	e8 8b ff ff ff       	call   c000a95d <Dbg::logs(char*)>
c000a9d2:	83 c4 1c             	add    esp,0x1c
c000a9d5:	c3                   	ret    

c000a9d6 <Dbg::kprintf(char const*, ...)>:
c000a9d6:	55                   	push   ebp
c000a9d7:	57                   	push   edi
c000a9d8:	56                   	push   esi
c000a9d9:	53                   	push   ebx
c000a9da:	83 ec 14             	sub    esp,0x14
c000a9dd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9e4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000a9e8:	74 08                	je     c000a9f2 <Dbg::kprintf(char const*, ...)+0x1c>
c000a9ea:	83 c4 14             	add    esp,0x14
c000a9ed:	5b                   	pop    ebx
c000a9ee:	5e                   	pop    esi
c000a9ef:	5f                   	pop    edi
c000a9f0:	5d                   	pop    ebp
c000a9f1:	c3                   	ret    
c000a9f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000a9f6:	31 db                	xor    ebx,ebx
c000a9f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9ff:	84 c0                	test   al,al
c000aa01:	74 e7                	je     c000a9ea <Dbg::kprintf(char const*, ...)+0x14>
c000aa03:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa06:	3c 25                	cmp    al,0x25
c000aa08:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aa0b:	75 46                	jne    c000aa53 <Dbg::kprintf(char const*, ...)+0x7d>
c000aa0d:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aa10:	83 c3 02             	add    ebx,0x2
c000aa13:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aa16:	2c 25                	sub    al,0x25
c000aa18:	3c 53                	cmp    al,0x53
c000aa1a:	0f 87 e8 00 00 00    	ja     c000ab08 <Dbg::kprintf(char const*, ...)+0x132>
c000aa20:	0f b6 c0             	movzx  eax,al
c000aa23:	ff 24 85 2c fd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe02d4]
c000aa2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aa2e:	89 c8                	mov    eax,ecx
c000aa30:	83 c1 04             	add    ecx,0x4
c000aa33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa37:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	e8 3e ff ff ff       	call   c000a97f <Dbg::logWriteInt(unsigned int)>
c000aa41:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa45:	84 c0                	test   al,al
c000aa47:	74 a1                	je     c000a9ea <Dbg::kprintf(char const*, ...)+0x14>
c000aa49:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aa4c:	3c 25                	cmp    al,0x25
c000aa4e:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aa51:	74 ba                	je     c000aa0d <Dbg::kprintf(char const*, ...)+0x37>
c000aa53:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa56:	89 eb                	mov    ebx,ebp
c000aa58:	89 fd                	mov    ebp,edi
c000aa5a:	e8 de fe ff ff       	call   c000a93d <Dbg::logc(char)>
c000aa5f:	eb e0                	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aa61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aa65:	89 c8                	mov    eax,ecx
c000aa67:	83 c1 04             	add    ecx,0x4
c000aa6a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aa6e:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa70:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa73:	e8 e5 fe ff ff       	call   c000a95d <Dbg::logs(char*)>
c000aa78:	eb c7                	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aa7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa7e:	89 d0                	mov    eax,edx
c000aa80:	83 c2 04             	add    edx,0x4
c000aa83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa87:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa89:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8c:	e8 ee fe ff ff       	call   c000a97f <Dbg::logWriteInt(unsigned int)>
c000aa91:	eb ae                	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aa93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa97:	89 d0                	mov    eax,edx
c000aa99:	83 c2 04             	add    edx,0x4
c000aa9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaa0:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aaa3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaa6:	e8 92 fe ff ff       	call   c000a93d <Dbg::logc(char)>
c000aaab:	eb 94                	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aaad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aab1:	89 c8                	mov    eax,ecx
c000aab3:	83 c1 04             	add    ecx,0x4
c000aab6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aaba:	b9 10 00 00 00       	mov    ecx,0x10
c000aabf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aac3:	8b 00                	mov    eax,DWORD PTR [eax]
c000aac5:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac8:	e8 de fe ff ff       	call   c000a9ab <Dbg::logWriteIntBase(unsigned int, int)>
c000aacd:	e9 6f ff ff ff       	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aad2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aad6:	89 d0                	mov    eax,edx
c000aad8:	83 c2 08             	add    edx,0x8
c000aadb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aadf:	ba 10 00 00 00       	mov    edx,0x10
c000aae4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aae8:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaea:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaed:	e8 b9 fe ff ff       	call   c000a9ab <Dbg::logWriteIntBase(unsigned int, int)>
c000aaf2:	e9 4a ff ff ff       	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000aaf7:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000aafe:	e8 3a fe ff ff       	call   c000a93d <Dbg::logc(char)>
c000ab03:	e9 39 ff ff ff       	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab08:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab0f:	e8 29 fe ff ff       	call   c000a93d <Dbg::logc(char)>
c000ab14:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ab17:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1a:	e8 1e fe ff ff       	call   c000a93d <Dbg::logc(char)>
c000ab1f:	e9 1d ff ff ff       	jmp    c000aa41 <Dbg::kprintf(char const*, ...)+0x6b>

c000ab24 <File::read(unsigned long long, void*, int*)>:
c000ab24:	53                   	push   ebx
c000ab25:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab2d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab34:	3c 19                	cmp    al,0x19
c000ab36:	77 35                	ja     c000ab6d <File::read(unsigned long long, void*, int*)+0x49>
c000ab38:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab3f:	85 c0                	test   eax,eax
c000ab41:	74 2a                	je     c000ab6d <File::read(unsigned long long, void*, int*)+0x49>
c000ab43:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab49:	85 c0                	test   eax,eax
c000ab4b:	74 20                	je     c000ab6d <File::read(unsigned long long, void*, int*)+0x49>
c000ab4d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab51:	74 21                	je     c000ab74 <File::read(unsigned long long, void*, int*)+0x50>
c000ab53:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab55:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab59:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab67:	5b                   	pop    ebx
c000ab68:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab6b:	ff e0                	jmp    eax
c000ab6d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab72:	eb 05                	jmp    c000ab79 <File::read(unsigned long long, void*, int*)+0x55>
c000ab74:	b8 05 00 00 00       	mov    eax,0x5
c000ab79:	5b                   	pop    ebx
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <File::write(unsigned long long, void*, int*)>:
c000ab7c:	53                   	push   ebx
c000ab7d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab81:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab85:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab8c:	3c 19                	cmp    al,0x19
c000ab8e:	77 35                	ja     c000abc5 <File::write(unsigned long long, void*, int*)+0x49>
c000ab90:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab97:	85 c0                	test   eax,eax
c000ab99:	74 2a                	je     c000abc5 <File::write(unsigned long long, void*, int*)+0x49>
c000ab9b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aba1:	85 c0                	test   eax,eax
c000aba3:	74 20                	je     c000abc5 <File::write(unsigned long long, void*, int*)+0x49>
c000aba5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aba9:	74 21                	je     c000abcc <File::write(unsigned long long, void*, int*)+0x50>
c000abab:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abb1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abbf:	5b                   	pop    ebx
c000abc0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000abc3:	ff e0                	jmp    eax
c000abc5:	b8 0b 00 00 00       	mov    eax,0xb
c000abca:	eb 05                	jmp    c000abd1 <File::write(unsigned long long, void*, int*)+0x55>
c000abcc:	b8 05 00 00 00       	mov    eax,0x5
c000abd1:	5b                   	pop    ebx
c000abd2:	c3                   	ret    
c000abd3:	90                   	nop

c000abd4 <Directory::read(unsigned long long, void*, int*)>:
c000abd4:	53                   	push   ebx
c000abd5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abd9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abdd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abe4:	3c 19                	cmp    al,0x19
c000abe6:	77 35                	ja     c000ac1d <Directory::read(unsigned long long, void*, int*)+0x49>
c000abe8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abef:	85 c0                	test   eax,eax
c000abf1:	74 2a                	je     c000ac1d <Directory::read(unsigned long long, void*, int*)+0x49>
c000abf3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abf9:	85 c0                	test   eax,eax
c000abfb:	74 20                	je     c000ac1d <Directory::read(unsigned long long, void*, int*)+0x49>
c000abfd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac01:	74 21                	je     c000ac24 <Directory::read(unsigned long long, void*, int*)+0x50>
c000ac03:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac05:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac09:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac17:	5b                   	pop    ebx
c000ac18:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ac1b:	ff e0                	jmp    eax
c000ac1d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac22:	eb 05                	jmp    c000ac29 <Directory::read(unsigned long long, void*, int*)+0x55>
c000ac24:	b8 05 00 00 00       	mov    eax,0x5
c000ac29:	5b                   	pop    ebx
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <Directory::write(unsigned long long, void*, int*)>:
c000ac2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac30:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ac37:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3c:	80 fa 19             	cmp    dl,0x19
c000ac3f:	77 18                	ja     c000ac59 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac41:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ac48:	85 d2                	test   edx,edx
c000ac4a:	74 0d                	je     c000ac59 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ac4c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000ac53:	19 c0                	sbb    eax,eax
c000ac55:	83 e0 0a             	and    eax,0xa
c000ac58:	40                   	inc    eax
c000ac59:	c3                   	ret    

c000ac5a <File::isAtty()>:
c000ac5a:	31 c0                	xor    eax,eax
c000ac5c:	c3                   	ret    
c000ac5d:	90                   	nop

c000ac5e <Directory::isAtty()>:
c000ac5e:	31 c0                	xor    eax,eax
c000ac60:	c3                   	ret    
c000ac61:	90                   	nop

c000ac62 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ac62:	b8 0a 00 00 00       	mov    eax,0xa
c000ac67:	c3                   	ret    

c000ac68 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ac68:	b8 0a 00 00 00       	mov    eax,0xa
c000ac6d:	c3                   	ret    

c000ac6e <Filesystem::allocateSwapfile(char const*, int)>:
c000ac6e:	31 c0                	xor    eax,eax
c000ac70:	31 d2                	xor    edx,edx
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <File::~File()>:
c000ac74:	83 ec 1c             	sub    esp,0x1c
c000ac77:	ba ec fe 01 c0       	mov    edx,0xc001feec
c000ac7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac80:	89 10                	mov    DWORD PTR [eax],edx
c000ac82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac86:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac89:	e8 8e e6 ff ff       	call   c000931c <UnixFile::~UnixFile()>
c000ac8e:	90                   	nop
c000ac8f:	83 c4 1c             	add    esp,0x1c
c000ac92:	c3                   	ret    
c000ac93:	90                   	nop

c000ac94 <File::~File()>:
c000ac94:	83 ec 1c             	sub    esp,0x1c
c000ac97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ac9b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac9e:	e8 d1 ff ff ff       	call   c000ac74 <File::~File()>
c000aca3:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000acab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000acb2:	e8 05 fc ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000acb7:	83 c4 1c             	add    esp,0x1c
c000acba:	c3                   	ret    
c000acbb:	90                   	nop

c000acbc <Directory::~Directory()>:
c000acbc:	83 ec 1c             	sub    esp,0x1c
c000acbf:	ba 08 ff 01 c0       	mov    edx,0xc001ff08
c000acc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acc8:	89 10                	mov    DWORD PTR [eax],edx
c000acca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acce:	89 04 24             	mov    DWORD PTR [esp],eax
c000acd1:	e8 46 e6 ff ff       	call   c000931c <UnixFile::~UnixFile()>
c000acd6:	90                   	nop
c000acd7:	83 c4 1c             	add    esp,0x1c
c000acda:	c3                   	ret    
c000acdb:	90                   	nop

c000acdc <Directory::~Directory()>:
c000acdc:	83 ec 1c             	sub    esp,0x1c
c000acdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ace3:	89 04 24             	mov    DWORD PTR [esp],eax
c000ace6:	e8 d1 ff ff ff       	call   c000acbc <Directory::~Directory()>
c000aceb:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000acf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000acf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000acfa:	e8 bd fb ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000acff:	83 c4 1c             	add    esp,0x1c
c000ad02:	c3                   	ret    
c000ad03:	90                   	nop

c000ad04 <Filesystem::Filesystem()>:
c000ad04:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000ad09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad0d:	89 10                	mov    DWORD PTR [eax],edx
c000ad0f:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ad15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad20:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ad25:	90                   	nop
c000ad26:	c3                   	ret    
c000ad27:	90                   	nop

c000ad28 <Filesystem::~Filesystem()>:
c000ad28:	ba 84 fe 01 c0       	mov    edx,0xc001fe84
c000ad2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad31:	89 10                	mov    DWORD PTR [eax],edx
c000ad33:	90                   	nop
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <Filesystem::~Filesystem()>:
c000ad36:	83 ec 1c             	sub    esp,0x1c
c000ad39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad40:	e8 e3 ff ff ff       	call   c000ad28 <Filesystem::~Filesystem()>
c000ad45:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000ad4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad51:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad54:	e8 63 fb ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000ad59:	83 c4 1c             	add    esp,0x1c
c000ad5c:	c3                   	ret    

c000ad5d <Fs::getcwd(Process*, char*, int)>:
c000ad5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad61:	31 c0                	xor    eax,eax
c000ad63:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad67:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad6a:	7d 15                	jge    c000ad81 <Fs::getcwd(Process*, char*, int)+0x24>
c000ad6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad70:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad77:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad7a:	84 c9                	test   cl,cl
c000ad7c:	74 06                	je     c000ad84 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad7e:	40                   	inc    eax
c000ad7f:	eb e2                	jmp    c000ad63 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad81:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad84:	31 c0                	xor    eax,eax
c000ad86:	c3                   	ret    

c000ad87 <Fs::initVFS()>:
c000ad87:	83 ec 18             	sub    esp,0x18
c000ad8a:	6a 08                	push   0x8
c000ad8c:	e8 d5 cc ff ff       	call   c0007a66 <malloc>
c000ad91:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad94:	e8 c7 db 00 00       	call   c0018960 <FAT::FAT()>
c000ad99:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ada0:	e8 c1 cc ff ff       	call   c0007a66 <malloc>
c000ada5:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada8:	e8 1d ea 00 00       	call   c00197ca <ISO9660::ISO9660()>
c000adad:	83 c4 1c             	add    esp,0x1c
c000adb0:	c3                   	ret    

c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000adb1:	55                   	push   ebp
c000adb2:	57                   	push   edi
c000adb3:	56                   	push   esi
c000adb4:	53                   	push   ebx
c000adb5:	81 ec 10 04 00 00    	sub    esp,0x410
c000adbb:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000adc2:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000adc9:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000add0:	68 00 04 00 00       	push   0x400
c000add5:	6a 00                	push   0x0
c000add7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000addb:	56                   	push   esi
c000addc:	e8 0f 57 ff ff       	call   c00004f0 <memset>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ade8:	75 0b                	jne    c000adf5 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000adea:	50                   	push   eax
c000adeb:	50                   	push   eax
c000adec:	57                   	push   edi
c000aded:	56                   	push   esi
c000adee:	e8 9d 58 ff ff       	call   c0000690 <strcpy>
c000adf3:	eb 40                	jmp    c000ae35 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000adf5:	8a 07                	mov    al,BYTE PTR [edi]
c000adf7:	3c 2f                	cmp    al,0x2f
c000adf9:	74 04                	je     c000adff <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000adfb:	3c 5c                	cmp    al,0x5c
c000adfd:	75 17                	jne    c000ae16 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000adff:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ae02:	3c 60                	cmp    al,0x60
c000ae04:	7e 02                	jle    c000ae08 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000ae06:	2c 20                	sub    al,0x20
c000ae08:	88 04 24             	mov    BYTE PTR [esp],al
c000ae0b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae12:	50                   	push   eax
c000ae13:	50                   	push   eax
c000ae14:	eb 18                	jmp    c000ae2e <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000ae16:	50                   	push   eax
c000ae17:	50                   	push   eax
c000ae18:	55                   	push   ebp
c000ae19:	56                   	push   esi
c000ae1a:	e8 71 58 ff ff       	call   c0000690 <strcpy>
c000ae1f:	5a                   	pop    edx
c000ae20:	59                   	pop    ecx
c000ae21:	68 db 0d 02 c0       	push   0xc0020ddb
c000ae26:	56                   	push   esi
c000ae27:	e8 74 5a ff ff       	call   c00008a0 <strcat>
c000ae2c:	5d                   	pop    ebp
c000ae2d:	58                   	pop    eax
c000ae2e:	57                   	push   edi
c000ae2f:	56                   	push   esi
c000ae30:	e8 6b 5a ff ff       	call   c00008a0 <strcat>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ae3b:	3c 60                	cmp    al,0x60
c000ae3d:	7e 02                	jle    c000ae41 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000ae3f:	2c 20                	sub    al,0x20
c000ae41:	88 04 24             	mov    BYTE PTR [esp],al
c000ae44:	bf 03 00 00 00       	mov    edi,0x3
c000ae49:	88 03                	mov    BYTE PTR [ebx],al
c000ae4b:	b8 03 00 00 00       	mov    eax,0x3
c000ae50:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ae57:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ae5d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ae61:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000ae64:	84 d2                	test   dl,dl
c000ae66:	0f 84 91 00 00 00    	je     c000aefd <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000ae6c:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae6f:	80 fa 2f             	cmp    dl,0x2f
c000ae72:	74 05                	je     c000ae79 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000ae74:	80 fa 5c             	cmp    dl,0x5c
c000ae77:	75 12                	jne    c000ae8b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000ae79:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae7e:	89 c5                	mov    ebp,eax
c000ae80:	74 09                	je     c000ae8b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000ae82:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae86:	40                   	inc    eax
c000ae87:	89 cf                	mov    edi,ecx
c000ae89:	eb d6                	jmp    c000ae61 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000ae8b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae90:	75 5b                	jne    c000aeed <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000ae92:	80 fa 2e             	cmp    dl,0x2e
c000ae95:	75 56                	jne    c000aeed <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000ae97:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae9b:	74 19                	je     c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000ae9d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aea2:	74 53                	je     c000aef7 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000aea4:	89 f9                	mov    ecx,edi
c000aea6:	41                   	inc    ecx
c000aea7:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aeaa:	80 fa 2f             	cmp    dl,0x2f
c000aead:	74 f7                	je     c000aea6 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000aeaf:	80 fa 5c             	cmp    dl,0x5c
c000aeb2:	74 f2                	je     c000aea6 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000aeb4:	eb d1                	jmp    c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aeb6:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aebb:	74 3a                	je     c000aef7 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000aebd:	83 f8 03             	cmp    eax,0x3
c000aec0:	74 c5                	je     c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aec2:	41                   	inc    ecx
c000aec3:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aec6:	80 fa 2f             	cmp    dl,0x2f
c000aec9:	74 f7                	je     c000aec2 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000aecb:	80 fa 5c             	cmp    dl,0x5c
c000aece:	74 f2                	je     c000aec2 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000aed0:	48                   	dec    eax
c000aed1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aed5:	75 06                	jne    c000aedd <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000aed7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aedb:	eb f3                	jmp    c000aed0 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000aedd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aee1:	74 07                	je     c000aeea <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000aee3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aee7:	48                   	dec    eax
c000aee8:	eb f3                	jmp    c000aedd <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000aeea:	40                   	inc    eax
c000aeeb:	eb 9a                	jmp    c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aeed:	80 fa 2f             	cmp    dl,0x2f
c000aef0:	74 95                	je     c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aef2:	80 fa 5c             	cmp    dl,0x5c
c000aef5:	74 90                	je     c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aef7:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aefa:	40                   	inc    eax
c000aefb:	eb 8a                	jmp    c000ae87 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000aefd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af01:	83 ec 0c             	sub    esp,0xc
c000af04:	53                   	push   ebx
c000af05:	e8 86 56 ff ff       	call   c0000590 <strlen>
c000af0a:	83 c4 10             	add    esp,0x10
c000af0d:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000af12:	75 26                	jne    c000af3a <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000af14:	83 ec 0c             	sub    esp,0xc
c000af17:	53                   	push   ebx
c000af18:	e8 73 56 ff ff       	call   c0000590 <strlen>
c000af1d:	83 c4 10             	add    esp,0x10
c000af20:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000af25:	74 26                	je     c000af4d <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	53                   	push   ebx
c000af2b:	e8 60 56 ff ff       	call   c0000590 <strlen>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000af38:	eb c7                	jmp    c000af01 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	53                   	push   ebx
c000af3e:	e8 4d 56 ff ff       	call   c0000590 <strlen>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af4b:	74 c7                	je     c000af14 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000af4d:	81 c4 0c 04 00 00    	add    esp,0x40c
c000af53:	5b                   	pop    ebx
c000af54:	5e                   	pop    esi
c000af55:	5f                   	pop    edi
c000af56:	5d                   	pop    ebp
c000af57:	c3                   	ret    

c000af58 <File::File(char const*, Process*)>:
c000af58:	83 ec 1c             	sub    esp,0x1c
c000af5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af5f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000af67:	89 04 24             	mov    DWORD PTR [esp],eax
c000af6a:	e8 e7 e1 ff ff       	call   c0009156 <UnixFile::UnixFile(int)>
c000af6f:	ba ec fe 01 c0       	mov    edx,0xc001feec
c000af74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000af78:	89 10                	mov    DWORD PTR [eax],edx
c000af7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000af7e:	05 0c 01 00 00       	add    eax,0x10c
c000af83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af87:	83 c2 0d             	add    edx,0xd
c000af8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000af92:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af96:	89 14 24             	mov    DWORD PTR [esp],edx
c000af99:	e8 13 fe ff ff       	call   c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afa2:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000afa6:	2c 41                	sub    al,0x41
c000afa8:	88 c2                	mov    dl,al
c000afaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afb8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afc0:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000afc7:	0f b6 c0             	movzx  eax,al
c000afca:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afd1:	85 c0                	test   eax,eax
c000afd3:	74 3c                	je     c000b011 <File::File(char const*, Process*)+0xb9>
c000afd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afd9:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000afe0:	0f b6 c0             	movzx  eax,al
c000afe3:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afea:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aff0:	85 c0                	test   eax,eax
c000aff2:	75 1d                	jne    c000b011 <File::File(char const*, Process*)+0xb9>
c000aff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aff8:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000afff:	0f b6 c0             	movzx  eax,al
c000b002:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b009:	89 04 24             	mov    DWORD PTR [esp],eax
c000b00c:	e8 35 20 00 00       	call   c000d046 <LogicalDisk::mount()>
c000b011:	90                   	nop
c000b012:	83 c4 1c             	add    esp,0x1c
c000b015:	c3                   	ret    

c000b016 <File::open(FileOpenMode)>:
c000b016:	53                   	push   ebx
c000b017:	b8 0b 00 00 00       	mov    eax,0xb
c000b01c:	83 ec 08             	sub    esp,0x8
c000b01f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b023:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b02a:	80 fa 19             	cmp    dl,0x19
c000b02d:	77 40                	ja     c000b06f <File::open(FileOpenMode)+0x59>
c000b02f:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b036:	85 d2                	test   edx,edx
c000b038:	74 35                	je     c000b06f <File::open(FileOpenMode)+0x59>
c000b03a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b040:	85 d2                	test   edx,edx
c000b042:	74 2b                	je     c000b06f <File::open(FileOpenMode)+0x59>
c000b044:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b048:	b8 06 00 00 00       	mov    eax,0x6
c000b04d:	75 20                	jne    c000b06f <File::open(FileOpenMode)+0x59>
c000b04f:	8b 02                	mov    eax,DWORD PTR [edx]
c000b051:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b057:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05b:	51                   	push   ecx
c000b05c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b05f:	51                   	push   ecx
c000b060:	52                   	push   edx
c000b061:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	85 c0                	test   eax,eax
c000b069:	75 04                	jne    c000b06f <File::open(FileOpenMode)+0x59>
c000b06b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b06f:	83 c4 08             	add    esp,0x8
c000b072:	5b                   	pop    ebx
c000b073:	c3                   	ret    

c000b074 <File::close()>:
c000b074:	53                   	push   ebx
c000b075:	b8 0b 00 00 00       	mov    eax,0xb
c000b07a:	83 ec 08             	sub    esp,0x8
c000b07d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b081:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b088:	80 fa 19             	cmp    dl,0x19
c000b08b:	77 41                	ja     c000b0ce <File::close()+0x5a>
c000b08d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b094:	85 db                	test   ebx,ebx
c000b096:	74 36                	je     c000b0ce <File::close()+0x5a>
c000b098:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b09f:	74 2d                	je     c000b0ce <File::close()+0x5a>
c000b0a1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0a5:	b8 05 00 00 00       	mov    eax,0x5
c000b0aa:	74 22                	je     c000b0ce <File::close()+0x5a>
c000b0ac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0b0:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b0b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b0bd:	53                   	push   ebx
c000b0be:	53                   	push   ebx
c000b0bf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0c7:	50                   	push   eax
c000b0c8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b0cb:	83 c4 10             	add    esp,0x10
c000b0ce:	83 c4 08             	add    esp,0x8
c000b0d1:	5b                   	pop    ebx
c000b0d2:	c3                   	ret    
c000b0d3:	90                   	nop

c000b0d4 <File::seek(unsigned long long)>:
c000b0d4:	56                   	push   esi
c000b0d5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0da:	53                   	push   ebx
c000b0db:	51                   	push   ecx
c000b0dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0e0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b0e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b0e8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b0ef:	80 fa 19             	cmp    dl,0x19
c000b0f2:	77 31                	ja     c000b125 <File::seek(unsigned long long)+0x51>
c000b0f4:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0fb:	85 d2                	test   edx,edx
c000b0fd:	74 26                	je     c000b125 <File::seek(unsigned long long)+0x51>
c000b0ff:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b105:	85 d2                	test   edx,edx
c000b107:	74 1c                	je     c000b125 <File::seek(unsigned long long)+0x51>
c000b109:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b10d:	b8 05 00 00 00       	mov    eax,0x5
c000b112:	74 11                	je     c000b125 <File::seek(unsigned long long)+0x51>
c000b114:	8b 02                	mov    eax,DWORD PTR [edx]
c000b116:	53                   	push   ebx
c000b117:	51                   	push   ecx
c000b118:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b11e:	52                   	push   edx
c000b11f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	5a                   	pop    edx
c000b126:	5b                   	pop    ebx
c000b127:	5e                   	pop    esi
c000b128:	c3                   	ret    
c000b129:	90                   	nop

c000b12a <File::tell(unsigned long long*)>:
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	b8 0b 00 00 00       	mov    eax,0xb
c000b132:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b136:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b13d:	80 fa 19             	cmp    dl,0x19
c000b140:	77 34                	ja     c000b176 <File::tell(unsigned long long*)+0x4c>
c000b142:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b149:	85 d2                	test   edx,edx
c000b14b:	74 29                	je     c000b176 <File::tell(unsigned long long*)+0x4c>
c000b14d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b153:	85 d2                	test   edx,edx
c000b155:	74 1f                	je     c000b176 <File::tell(unsigned long long*)+0x4c>
c000b157:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b15b:	b8 05 00 00 00       	mov    eax,0x5
c000b160:	74 14                	je     c000b176 <File::tell(unsigned long long*)+0x4c>
c000b162:	50                   	push   eax
c000b163:	8b 02                	mov    eax,DWORD PTR [edx]
c000b165:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b169:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b16f:	52                   	push   edx
c000b170:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	83 c4 0c             	add    esp,0xc
c000b179:	c3                   	ret    

c000b17a <File::rewind()>:
c000b17a:	83 ec 10             	sub    esp,0x10
c000b17d:	6a 00                	push   0x0
c000b17f:	6a 00                	push   0x0
c000b181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b185:	e8 4a ff ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c000b18a:	83 c4 1c             	add    esp,0x1c
c000b18d:	c3                   	ret    

c000b18e <File::unlink()>:
c000b18e:	83 ec 0c             	sub    esp,0xc
c000b191:	b8 0b 00 00 00       	mov    eax,0xb
c000b196:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a1:	80 f9 19             	cmp    cl,0x19
c000b1a4:	77 2f                	ja     c000b1d5 <File::unlink()+0x47>
c000b1a6:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1ad:	85 c9                	test   ecx,ecx
c000b1af:	74 24                	je     c000b1d5 <File::unlink()+0x47>
c000b1b1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1b7:	85 c9                	test   ecx,ecx
c000b1b9:	74 1a                	je     c000b1d5 <File::unlink()+0x47>
c000b1bb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1bf:	b8 06 00 00 00       	mov    eax,0x6
c000b1c4:	75 0f                	jne    c000b1d5 <File::unlink()+0x47>
c000b1c6:	50                   	push   eax
c000b1c7:	83 c2 0d             	add    edx,0xd
c000b1ca:	50                   	push   eax
c000b1cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1cd:	52                   	push   edx
c000b1ce:	51                   	push   ecx
c000b1cf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1d2:	83 c4 10             	add    esp,0x10
c000b1d5:	83 c4 0c             	add    esp,0xc
c000b1d8:	c3                   	ret    
c000b1d9:	90                   	nop

c000b1da <File::rename(char const*)>:
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1e6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ed:	80 f9 19             	cmp    cl,0x19
c000b1f0:	77 32                	ja     c000b224 <File::rename(char const*)+0x4a>
c000b1f2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1f9:	85 c9                	test   ecx,ecx
c000b1fb:	74 27                	je     c000b224 <File::rename(char const*)+0x4a>
c000b1fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b203:	85 c9                	test   ecx,ecx
c000b205:	74 1d                	je     c000b224 <File::rename(char const*)+0x4a>
c000b207:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b20b:	b8 06 00 00 00       	mov    eax,0x6
c000b210:	75 12                	jne    c000b224 <File::rename(char const*)+0x4a>
c000b212:	50                   	push   eax
c000b213:	83 c2 0d             	add    edx,0xd
c000b216:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b21c:	52                   	push   edx
c000b21d:	51                   	push   ecx
c000b21e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	83 c4 0c             	add    esp,0xc
c000b227:	c3                   	ret    

c000b228 <File::chfatattr(unsigned char, unsigned char)>:
c000b228:	56                   	push   esi
c000b229:	b8 0b 00 00 00       	mov    eax,0xb
c000b22e:	53                   	push   ebx
c000b22f:	51                   	push   ecx
c000b230:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b234:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b239:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b23e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b245:	80 fa 19             	cmp    dl,0x19
c000b248:	77 2f                	ja     c000b279 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b24a:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b251:	85 d2                	test   edx,edx
c000b253:	74 24                	je     c000b279 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b255:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b25b:	85 d2                	test   edx,edx
c000b25d:	74 1a                	je     c000b279 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b25f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b263:	b8 06 00 00 00       	mov    eax,0x6
c000b268:	75 0f                	jne    c000b279 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b26a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b26c:	83 c6 0d             	add    esi,0xd
c000b26f:	53                   	push   ebx
c000b270:	51                   	push   ecx
c000b271:	56                   	push   esi
c000b272:	52                   	push   edx
c000b273:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b276:	83 c4 10             	add    esp,0x10
c000b279:	5a                   	pop    edx
c000b27a:	5b                   	pop    ebx
c000b27b:	5e                   	pop    esi
c000b27c:	c3                   	ret    
c000b27d:	90                   	nop

c000b27e <File::exists()>:
c000b27e:	83 ec 0c             	sub    esp,0xc
c000b281:	31 c0                	xor    eax,eax
c000b283:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b287:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b28e:	80 f9 19             	cmp    cl,0x19
c000b291:	77 24                	ja     c000b2b7 <File::exists()+0x39>
c000b293:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b29a:	85 c9                	test   ecx,ecx
c000b29c:	74 19                	je     c000b2b7 <File::exists()+0x39>
c000b29e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a4:	85 c9                	test   ecx,ecx
c000b2a6:	74 0f                	je     c000b2b7 <File::exists()+0x39>
c000b2a8:	50                   	push   eax
c000b2a9:	83 c2 0d             	add    edx,0xd
c000b2ac:	50                   	push   eax
c000b2ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2af:	52                   	push   edx
c000b2b0:	51                   	push   ecx
c000b2b1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2b4:	83 c4 10             	add    esp,0x10
c000b2b7:	83 c4 0c             	add    esp,0xc
c000b2ba:	c3                   	ret    
c000b2bb:	90                   	nop

c000b2bc <File::stat(unsigned long long*, bool*)>:
c000b2bc:	56                   	push   esi
c000b2bd:	53                   	push   ebx
c000b2be:	50                   	push   eax
c000b2bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b2cc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b2d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d7:	80 f9 19             	cmp    cl,0x19
c000b2da:	77 3d                	ja     c000b319 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2dc:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b2e3:	85 c9                	test   ecx,ecx
c000b2e5:	74 32                	je     c000b319 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2e7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2ed:	85 c9                	test   ecx,ecx
c000b2ef:	74 28                	je     c000b319 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2f1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f7:	74 13                	je     c000b30c <File::stat(unsigned long long*, bool*)+0x50>
c000b2f9:	83 ec 04             	sub    esp,0x4
c000b2fc:	56                   	push   esi
c000b2fd:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b303:	51                   	push   ecx
c000b304:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b307:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b30a:	eb 0a                	jmp    c000b316 <File::stat(unsigned long long*, bool*)+0x5a>
c000b30c:	53                   	push   ebx
c000b30d:	83 c2 0d             	add    edx,0xd
c000b310:	56                   	push   esi
c000b311:	52                   	push   edx
c000b312:	51                   	push   ecx
c000b313:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	5a                   	pop    edx
c000b31a:	5b                   	pop    ebx
c000b31b:	5e                   	pop    esi
c000b31c:	c3                   	ret    

c000b31d <Fs::setcwd(Process*, char*)>:
c000b31d:	55                   	push   ebp
c000b31e:	57                   	push   edi
c000b31f:	56                   	push   esi
c000b320:	53                   	push   ebx
c000b321:	81 ec 20 02 00 00    	sub    esp,0x220
c000b327:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b32e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b334:	57                   	push   edi
c000b335:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b33c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b340:	56                   	push   esi
c000b341:	e8 6b fa ff ff       	call   c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b346:	89 34 24             	mov    DWORD PTR [esp],esi
c000b349:	e8 42 52 ff ff       	call   c0000590 <strlen>
c000b34e:	83 c4 10             	add    esp,0x10
c000b351:	83 f8 02             	cmp    eax,0x2
c000b354:	77 15                	ja     c000b36b <Fs::setcwd(Process*, char*)+0x4e>
c000b356:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b35b:	83 eb 41             	sub    ebx,0x41
c000b35e:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b365:	85 c0                	test   eax,eax
c000b367:	75 1c                	jne    c000b385 <Fs::setcwd(Process*, char*)+0x68>
c000b369:	eb 2f                	jmp    c000b39a <Fs::setcwd(Process*, char*)+0x7d>
c000b36b:	83 ec 0c             	sub    esp,0xc
c000b36e:	56                   	push   esi
c000b36f:	e8 1c 52 ff ff       	call   c0000590 <strlen>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	83 f8 03             	cmp    eax,0x3
c000b37a:	75 57                	jne    c000b3d3 <Fs::setcwd(Process*, char*)+0xb6>
c000b37c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b381:	75 50                	jne    c000b3d3 <Fs::setcwd(Process*, char*)+0xb6>
c000b383:	eb d1                	jmp    c000b356 <Fs::setcwd(Process*, char*)+0x39>
c000b385:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b38c:	75 0c                	jne    c000b39a <Fs::setcwd(Process*, char*)+0x7d>
c000b38e:	83 ec 0c             	sub    esp,0xc
c000b391:	50                   	push   eax
c000b392:	e8 af 1c 00 00       	call   c000d046 <LogicalDisk::mount()>
c000b397:	83 c4 10             	add    esp,0x10
c000b39a:	83 fb 19             	cmp    ebx,0x19
c000b39d:	b8 03 00 00 00       	mov    eax,0x3
c000b3a2:	0f 87 c6 00 00 00    	ja     c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b3a8:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b3af:	b8 05 00 00 00       	mov    eax,0x5
c000b3b4:	85 d2                	test   edx,edx
c000b3b6:	0f 84 b2 00 00 00    	je     c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b3bc:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b3c3:	b8 06 00 00 00       	mov    eax,0x6
c000b3c8:	0f 85 92 00 00 00    	jne    c000b460 <Fs::setcwd(Process*, char*)+0x143>
c000b3ce:	e9 9b 00 00 00       	jmp    c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b3d3:	83 ec 0c             	sub    esp,0xc
c000b3d6:	68 14 01 00 00       	push   0x114
c000b3db:	e8 86 c6 ff ff       	call   c0007a66 <malloc>
c000b3e0:	83 c4 0c             	add    esp,0xc
c000b3e3:	55                   	push   ebp
c000b3e4:	56                   	push   esi
c000b3e5:	50                   	push   eax
c000b3e6:	89 c3                	mov    ebx,eax
c000b3e8:	e8 6b fb ff ff       	call   c000af58 <File::File(char const*, Process*)>
c000b3ed:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3f2:	83 c4 0c             	add    esp,0xc
c000b3f5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3f9:	50                   	push   eax
c000b3fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3fe:	50                   	push   eax
c000b3ff:	53                   	push   ebx
c000b400:	e8 b7 fe ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c000b405:	83 c4 10             	add    esp,0x10
c000b408:	83 f8 02             	cmp    eax,0x2
c000b40b:	74 27                	je     c000b434 <Fs::setcwd(Process*, char*)+0x117>
c000b40d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b412:	75 1c                	jne    c000b430 <Fs::setcwd(Process*, char*)+0x113>
c000b414:	85 db                	test   ebx,ebx
c000b416:	b8 02 00 00 00       	mov    eax,0x2
c000b41b:	74 51                	je     c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b41d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b41f:	83 ec 0c             	sub    esp,0xc
c000b422:	53                   	push   ebx
c000b423:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	b8 02 00 00 00       	mov    eax,0x2
c000b42e:	eb 3e                	jmp    c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b430:	85 c0                	test   eax,eax
c000b432:	74 1c                	je     c000b450 <Fs::setcwd(Process*, char*)+0x133>
c000b434:	85 db                	test   ebx,ebx
c000b436:	b8 01 00 00 00       	mov    eax,0x1
c000b43b:	74 31                	je     c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b43d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b43f:	83 ec 0c             	sub    esp,0xc
c000b442:	53                   	push   ebx
c000b443:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b446:	83 c4 10             	add    esp,0x10
c000b449:	b8 01 00 00 00       	mov    eax,0x1
c000b44e:	eb 1e                	jmp    c000b46e <Fs::setcwd(Process*, char*)+0x151>
c000b450:	85 db                	test   ebx,ebx
c000b452:	74 0c                	je     c000b460 <Fs::setcwd(Process*, char*)+0x143>
c000b454:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b456:	83 ec 0c             	sub    esp,0xc
c000b459:	53                   	push   ebx
c000b45a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	50                   	push   eax
c000b461:	50                   	push   eax
c000b462:	56                   	push   esi
c000b463:	57                   	push   edi
c000b464:	e8 27 52 ff ff       	call   c0000690 <strcpy>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	31 c0                	xor    eax,eax
c000b46e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b474:	5b                   	pop    ebx
c000b475:	5e                   	pop    esi
c000b476:	5f                   	pop    edi
c000b477:	5d                   	pop    ebp
c000b478:	c3                   	ret    
c000b479:	90                   	nop

c000b47a <Directory::Directory(char const*, Process*)>:
c000b47a:	83 ec 1c             	sub    esp,0x1c
c000b47d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b481:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b489:	89 04 24             	mov    DWORD PTR [esp],eax
c000b48c:	e8 c5 dc ff ff       	call   c0009156 <UnixFile::UnixFile(int)>
c000b491:	ba 08 ff 01 c0       	mov    edx,0xc001ff08
c000b496:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b49a:	89 10                	mov    DWORD PTR [eax],edx
c000b49c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b4a0:	05 0c 01 00 00       	add    eax,0x10c
c000b4a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b4a9:	83 c2 0d             	add    edx,0xd
c000b4ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b4b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4b8:	89 14 24             	mov    DWORD PTR [esp],edx
c000b4bb:	e8 f1 f8 ff ff       	call   c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b4c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4c4:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b4c8:	2c 41                	sub    al,0x41
c000b4ca:	88 c2                	mov    dl,al
c000b4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4d0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b4d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4da:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b4de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4e2:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b4e9:	0f b6 c0             	movzx  eax,al
c000b4ec:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4f3:	85 c0                	test   eax,eax
c000b4f5:	74 3c                	je     c000b533 <Directory::Directory(char const*, Process*)+0xb9>
c000b4f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b4fb:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b502:	0f b6 c0             	movzx  eax,al
c000b505:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b50c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b512:	85 c0                	test   eax,eax
c000b514:	75 1d                	jne    c000b533 <Directory::Directory(char const*, Process*)+0xb9>
c000b516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b51a:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b521:	0f b6 c0             	movzx  eax,al
c000b524:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b52b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b52e:	e8 13 1b 00 00       	call   c000d046 <LogicalDisk::mount()>
c000b533:	90                   	nop
c000b534:	83 c4 1c             	add    esp,0x1c
c000b537:	c3                   	ret    

c000b538 <Directory::open()>:
c000b538:	53                   	push   ebx
c000b539:	b8 0b 00 00 00       	mov    eax,0xb
c000b53e:	83 ec 08             	sub    esp,0x8
c000b541:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b545:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b54c:	80 fa 19             	cmp    dl,0x19
c000b54f:	77 3d                	ja     c000b58e <Directory::open()+0x56>
c000b551:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b558:	85 d2                	test   edx,edx
c000b55a:	74 32                	je     c000b58e <Directory::open()+0x56>
c000b55c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b562:	85 d2                	test   edx,edx
c000b564:	74 28                	je     c000b58e <Directory::open()+0x56>
c000b566:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b56a:	b8 06 00 00 00       	mov    eax,0x6
c000b56f:	75 1d                	jne    c000b58e <Directory::open()+0x56>
c000b571:	50                   	push   eax
c000b572:	8b 02                	mov    eax,DWORD PTR [edx]
c000b574:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b57a:	51                   	push   ecx
c000b57b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b57e:	51                   	push   ecx
c000b57f:	52                   	push   edx
c000b580:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b583:	83 c4 10             	add    esp,0x10
c000b586:	85 c0                	test   eax,eax
c000b588:	75 04                	jne    c000b58e <Directory::open()+0x56>
c000b58a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b58e:	83 c4 08             	add    esp,0x8
c000b591:	5b                   	pop    ebx
c000b592:	c3                   	ret    
c000b593:	90                   	nop

c000b594 <Directory::close()>:
c000b594:	53                   	push   ebx
c000b595:	b8 0b 00 00 00       	mov    eax,0xb
c000b59a:	83 ec 08             	sub    esp,0x8
c000b59d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5a1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b5a8:	80 fa 19             	cmp    dl,0x19
c000b5ab:	77 41                	ja     c000b5ee <Directory::close()+0x5a>
c000b5ad:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5b4:	85 db                	test   ebx,ebx
c000b5b6:	74 36                	je     c000b5ee <Directory::close()+0x5a>
c000b5b8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b5bf:	74 2d                	je     c000b5ee <Directory::close()+0x5a>
c000b5c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b5c5:	b8 05 00 00 00       	mov    eax,0x5
c000b5ca:	74 22                	je     c000b5ee <Directory::close()+0x5a>
c000b5cc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b5d0:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b5d7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5dd:	53                   	push   ebx
c000b5de:	53                   	push   ebx
c000b5df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b5e7:	50                   	push   eax
c000b5e8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	83 c4 08             	add    esp,0x8
c000b5f1:	5b                   	pop    ebx
c000b5f2:	c3                   	ret    
c000b5f3:	90                   	nop

c000b5f4 <Directory::unlink()>:
c000b5f4:	83 ec 0c             	sub    esp,0xc
c000b5f7:	b8 0b 00 00 00       	mov    eax,0xb
c000b5fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b600:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b607:	80 f9 19             	cmp    cl,0x19
c000b60a:	77 2f                	ja     c000b63b <Directory::unlink()+0x47>
c000b60c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b613:	85 c9                	test   ecx,ecx
c000b615:	74 24                	je     c000b63b <Directory::unlink()+0x47>
c000b617:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b61d:	85 c9                	test   ecx,ecx
c000b61f:	74 1a                	je     c000b63b <Directory::unlink()+0x47>
c000b621:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b625:	b8 06 00 00 00       	mov    eax,0x6
c000b62a:	75 0f                	jne    c000b63b <Directory::unlink()+0x47>
c000b62c:	50                   	push   eax
c000b62d:	83 c2 0d             	add    edx,0xd
c000b630:	50                   	push   eax
c000b631:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b633:	52                   	push   edx
c000b634:	51                   	push   ecx
c000b635:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b638:	83 c4 10             	add    esp,0x10
c000b63b:	83 c4 0c             	add    esp,0xc
c000b63e:	c3                   	ret    
c000b63f:	90                   	nop

c000b640 <Directory::rename(char const*)>:
c000b640:	83 ec 0c             	sub    esp,0xc
c000b643:	b8 0b 00 00 00       	mov    eax,0xb
c000b648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b64c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b653:	80 f9 19             	cmp    cl,0x19
c000b656:	77 32                	ja     c000b68a <Directory::rename(char const*)+0x4a>
c000b658:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b65f:	85 c9                	test   ecx,ecx
c000b661:	74 27                	je     c000b68a <Directory::rename(char const*)+0x4a>
c000b663:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b669:	85 c9                	test   ecx,ecx
c000b66b:	74 1d                	je     c000b68a <Directory::rename(char const*)+0x4a>
c000b66d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b671:	b8 06 00 00 00       	mov    eax,0x6
c000b676:	75 12                	jne    c000b68a <Directory::rename(char const*)+0x4a>
c000b678:	50                   	push   eax
c000b679:	83 c2 0d             	add    edx,0xd
c000b67c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b67e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b682:	52                   	push   edx
c000b683:	51                   	push   ecx
c000b684:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	83 c4 0c             	add    esp,0xc
c000b68d:	c3                   	ret    

c000b68e <Directory::exists()>:
c000b68e:	83 ec 0c             	sub    esp,0xc
c000b691:	31 c0                	xor    eax,eax
c000b693:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b697:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b69e:	80 f9 19             	cmp    cl,0x19
c000b6a1:	77 24                	ja     c000b6c7 <Directory::exists()+0x39>
c000b6a3:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6aa:	85 c9                	test   ecx,ecx
c000b6ac:	74 19                	je     c000b6c7 <Directory::exists()+0x39>
c000b6ae:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6b4:	85 c9                	test   ecx,ecx
c000b6b6:	74 0f                	je     c000b6c7 <Directory::exists()+0x39>
c000b6b8:	50                   	push   eax
c000b6b9:	83 c2 0d             	add    edx,0xd
c000b6bc:	50                   	push   eax
c000b6bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6bf:	52                   	push   edx
c000b6c0:	51                   	push   ecx
c000b6c1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	83 c4 0c             	add    esp,0xc
c000b6ca:	c3                   	ret    
c000b6cb:	90                   	nop

c000b6cc <Directory::read(dirent*)>:
c000b6cc:	83 ec 1c             	sub    esp,0x1c
c000b6cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b6d8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b6df:	80 fa 19             	cmp    dl,0x19
c000b6e2:	77 30                	ja     c000b714 <Directory::read(dirent*)+0x48>
c000b6e4:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b6eb:	85 d2                	test   edx,edx
c000b6ed:	74 25                	je     c000b714 <Directory::read(dirent*)+0x48>
c000b6ef:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b6f6:	74 1c                	je     c000b714 <Directory::read(dirent*)+0x48>
c000b6f8:	83 ec 0c             	sub    esp,0xc
c000b6fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b701:	52                   	push   edx
c000b702:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b706:	6a 00                	push   0x0
c000b708:	68 10 01 00 00       	push   0x110
c000b70d:	51                   	push   ecx
c000b70e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b711:	83 c4 20             	add    esp,0x20
c000b714:	83 c4 1c             	add    esp,0x1c
c000b717:	c3                   	ret    

c000b718 <Directory::create()>:
c000b718:	83 ec 0c             	sub    esp,0xc
c000b71b:	b8 0b 00 00 00       	mov    eax,0xb
c000b720:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b724:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b72b:	80 f9 19             	cmp    cl,0x19
c000b72e:	77 2f                	ja     c000b75f <Directory::create()+0x47>
c000b730:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b737:	85 c9                	test   ecx,ecx
c000b739:	74 24                	je     c000b75f <Directory::create()+0x47>
c000b73b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b741:	85 c9                	test   ecx,ecx
c000b743:	74 1a                	je     c000b75f <Directory::create()+0x47>
c000b745:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b749:	b8 06 00 00 00       	mov    eax,0x6
c000b74e:	75 0f                	jne    c000b75f <Directory::create()+0x47>
c000b750:	50                   	push   eax
c000b751:	83 c2 0d             	add    edx,0xd
c000b754:	50                   	push   eax
c000b755:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b757:	52                   	push   edx
c000b758:	51                   	push   ecx
c000b759:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b75c:	83 c4 10             	add    esp,0x10
c000b75f:	83 c4 0c             	add    esp,0xc
c000b762:	c3                   	ret    
c000b763:	90                   	nop

c000b764 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b764:	b8 0a 00 00 00       	mov    eax,0xa
c000b769:	c3                   	ret    
c000b76a:	66 90                	xchg   ax,ax

c000b76c <Bus::Bus(char const*)>:
c000b76c:	83 ec 1c             	sub    esp,0x1c
c000b76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b773:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b77b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b77e:	e8 17 08 00 00       	call   c000bf9a <Device::Device(char const*)>
c000b783:	ba 24 ff 01 c0       	mov    edx,0xc001ff24
c000b788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b78c:	89 10                	mov    DWORD PTR [eax],edx
c000b78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b792:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b79c:	90                   	nop
c000b79d:	83 c4 1c             	add    esp,0x1c
c000b7a0:	c3                   	ret    
c000b7a1:	90                   	nop
c000b7a2:	66 90                	xchg   ax,ax

c000b7a4 <Bus::~Bus()>:
c000b7a4:	83 ec 1c             	sub    esp,0x1c
c000b7a7:	ba 24 ff 01 c0       	mov    edx,0xc001ff24
c000b7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7b0:	89 10                	mov    DWORD PTR [eax],edx
c000b7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7b9:	e8 48 05 00 00       	call   c000bd06 <Device::~Device()>
c000b7be:	90                   	nop
c000b7bf:	83 c4 1c             	add    esp,0x1c
c000b7c2:	c3                   	ret    
c000b7c3:	90                   	nop

c000b7c4 <Bus::~Bus()>:
c000b7c4:	83 ec 1c             	sub    esp,0x1c
c000b7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7ce:	e8 d1 ff ff ff       	call   c000b7a4 <Bus::~Bus()>
c000b7d3:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7df:	89 04 24             	mov    DWORD PTR [esp],eax
c000b7e2:	e8 d5 f0 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000b7e7:	83 c4 1c             	add    esp,0x1c
c000b7ea:	c3                   	ret    

c000b7eb <beepThread(void*)>:
c000b7eb:	83 ec 0c             	sub    esp,0xc
c000b7ee:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7f7:	48                   	dec    eax
c000b7f8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7fd:	75 01                	jne    c000b800 <beepThread(void*)+0x15>
c000b7ff:	fb                   	sti    
c000b800:	6b c2 0a             	imul   eax,edx,0xa
c000b803:	83 ec 0c             	sub    esp,0xc
c000b806:	50                   	push   eax
c000b807:	e8 10 9b 00 00       	call   c001531c <milliTenthSleep(unsigned int)>
c000b80c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b813:	e8 4c b8 00 00       	call   c0017064 <HalMakeBeep(int)>
c000b818:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b820:	83 c4 1c             	add    esp,0x1c
c000b823:	e9 f4 99 00 00       	jmp    c001521c <blockTask(TaskState)>

c000b828 <Krnl::beep(int, int, bool)>:
c000b828:	53                   	push   ebx
c000b829:	83 ec 24             	sub    esp,0x24
c000b82c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b830:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b834:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b838:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b83c:	e8 23 b8 00 00       	call   c0017064 <HalMakeBeep(int)>
c000b841:	83 c4 10             	add    esp,0x10
c000b844:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b848:	84 c0                	test   al,al
c000b84a:	74 1d                	je     c000b869 <Krnl::beep(int, int, bool)+0x41>
c000b84c:	6b db 0a             	imul   ebx,ebx,0xa
c000b84f:	83 ec 0c             	sub    esp,0xc
c000b852:	53                   	push   ebx
c000b853:	e8 c4 9a 00 00       	call   c001531c <milliTenthSleep(unsigned int)>
c000b858:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b860:	83 c4 28             	add    esp,0x28
c000b863:	5b                   	pop    ebx
c000b864:	e9 fb b7 00 00       	jmp    c0017064 <HalMakeBeep(int)>
c000b869:	68 e6 00 00 00       	push   0xe6
c000b86e:	53                   	push   ebx
c000b86f:	68 eb b7 00 c0       	push   0xc000b7eb
c000b874:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b87a:	e8 69 95 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000b87f:	83 c4 28             	add    esp,0x28
c000b882:	5b                   	pop    ebx
c000b883:	c3                   	ret    

c000b884 <User::loadClockSettings(int)>:
c000b884:	53                   	push   ebx
c000b885:	83 ec 14             	sub    esp,0x14
c000b888:	68 14 01 00 00       	push   0x114
c000b88d:	e8 d4 c1 ff ff       	call   c0007a66 <malloc>
c000b892:	83 c4 0c             	add    esp,0xc
c000b895:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b89b:	68 48 ff 01 c0       	push   0xc001ff48
c000b8a0:	50                   	push   eax
c000b8a1:	89 c3                	mov    ebx,eax
c000b8a3:	e8 b0 f6 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c000b8a8:	58                   	pop    eax
c000b8a9:	5a                   	pop    edx
c000b8aa:	6a 01                	push   0x1
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 64 f7 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c000b8b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b8b5:	e8 ba f7 ff ff       	call   c000b074 <File::close()>
c000b8ba:	83 c4 10             	add    esp,0x10
c000b8bd:	85 db                	test   ebx,ebx
c000b8bf:	74 0f                	je     c000b8d0 <User::loadClockSettings(int)+0x4c>
c000b8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b8c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b8c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b8ca:	83 c4 08             	add    esp,0x8
c000b8cd:	5b                   	pop    ebx
c000b8ce:	ff e0                	jmp    eax
c000b8d0:	83 c4 08             	add    esp,0x8
c000b8d3:	5b                   	pop    ebx
c000b8d4:	c3                   	ret    
c000b8d5:	90                   	nop

c000b8d6 <Clock::Clock(char const*)>:
c000b8d6:	83 ec 1c             	sub    esp,0x1c
c000b8d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8dd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b8e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b8e5:	89 04 24             	mov    DWORD PTR [esp],eax
c000b8e8:	e8 ad 06 00 00       	call   c000bf9a <Device::Device(char const*)>
c000b8ed:	ba 70 ff 01 c0       	mov    edx,0xc001ff70
c000b8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8f6:	89 10                	mov    DWORD PTR [eax],edx
c000b8f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b8fc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b906:	90                   	nop
c000b907:	83 c4 1c             	add    esp,0x1c
c000b90a:	c3                   	ret    
c000b90b:	90                   	nop

c000b90c <Clock::~Clock()>:
c000b90c:	83 ec 1c             	sub    esp,0x1c
c000b90f:	ba 70 ff 01 c0       	mov    edx,0xc001ff70
c000b914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b918:	89 10                	mov    DWORD PTR [eax],edx
c000b91a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b91e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b921:	e8 e0 03 00 00       	call   c000bd06 <Device::~Device()>
c000b926:	90                   	nop
c000b927:	83 c4 1c             	add    esp,0x1c
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Clock::~Clock()>:
c000b92c:	83 ec 1c             	sub    esp,0x1c
c000b92f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b933:	89 04 24             	mov    DWORD PTR [esp],eax
c000b936:	e8 d1 ff ff ff       	call   c000b90c <Clock::~Clock()>
c000b93b:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b947:	89 04 24             	mov    DWORD PTR [esp],eax
c000b94a:	e8 6d ef ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000b94f:	83 c4 1c             	add    esp,0x1c
c000b952:	c3                   	ret    
c000b953:	90                   	nop

c000b954 <Clock::timeInSecondsLocal()>:
c000b954:	53                   	push   ebx
c000b955:	83 ec 14             	sub    esp,0x14
c000b958:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b95c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b95e:	50                   	push   eax
c000b95f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b962:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b969:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b96f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b975:	89 cb                	mov    ebx,ecx
c000b977:	c1 fb 1f             	sar    ebx,0x1f
c000b97a:	01 c8                	add    eax,ecx
c000b97c:	11 da                	adc    edx,ebx
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	31 c9                	xor    ecx,ecx
c000b983:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b98a:	74 05                	je     c000b991 <Clock::timeInSecondsLocal()+0x3d>
c000b98c:	b9 08 07 00 00       	mov    ecx,0x708
c000b991:	31 db                	xor    ebx,ebx
c000b993:	01 c8                	add    eax,ecx
c000b995:	11 da                	adc    edx,ebx
c000b997:	83 c4 08             	add    esp,0x8
c000b99a:	5b                   	pop    ebx
c000b99b:	c3                   	ret    

c000b99c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b99c:	57                   	push   edi
c000b99d:	56                   	push   esi
c000b99e:	53                   	push   ebx
c000b99f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b9ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9ad:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b9b0:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b9b7:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b9bd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b9c3:	99                   	cdq    
c000b9c4:	29 c6                	sub    esi,eax
c000b9c6:	19 d7                	sbb    edi,edx
c000b9c8:	89 f0                	mov    eax,esi
c000b9ca:	31 f6                	xor    esi,esi
c000b9cc:	89 fa                	mov    edx,edi
c000b9ce:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b9d5:	74 05                	je     c000b9dc <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b9d7:	be 08 07 00 00       	mov    esi,0x708
c000b9dc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b9e0:	31 ff                	xor    edi,edi
c000b9e2:	29 f0                	sub    eax,esi
c000b9e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b9e8:	19 fa                	sbb    edx,edi
c000b9ea:	89 d8                	mov    eax,ebx
c000b9ec:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9f0:	5b                   	pop    ebx
c000b9f1:	5e                   	pop    esi
c000b9f2:	5f                   	pop    edi
c000b9f3:	ff e0                	jmp    eax

c000b9f5 <datetimeToSeconds(datetime_t)>:
c000b9f5:	55                   	push   ebp
c000b9f6:	57                   	push   edi
c000b9f7:	56                   	push   esi
c000b9f8:	53                   	push   ebx
c000b9f9:	83 ec 0c             	sub    esp,0xc
c000b9fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ba04:	0f b6 c6             	movzx  eax,dh
c000ba07:	0f b6 c0             	movzx  eax,al
c000ba0a:	0f b6 dd             	movzx  ebx,ch
c000ba0d:	6b f8 3c             	imul   edi,eax,0x3c
c000ba10:	89 d0                	mov    eax,edx
c000ba12:	0f b6 d2             	movzx  edx,dl
c000ba15:	fe cb                	dec    bl
c000ba17:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000ba1d:	89 ce                	mov    esi,ecx
c000ba1f:	c1 e8 10             	shr    eax,0x10
c000ba22:	0f b6 c9             	movzx  ecx,cl
c000ba25:	c1 ee 10             	shr    esi,0x10
c000ba28:	0f b6 c0             	movzx  eax,al
c000ba2b:	01 f8                	add    eax,edi
c000ba2d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000ba33:	01 c2                	add    edx,eax
c000ba35:	0f b6 c3             	movzx  eax,bl
c000ba38:	89 14 24             	mov    DWORD PTR [esp],edx
c000ba3b:	8b 04 85 c0 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0040]
c000ba42:	c1 fa 1f             	sar    edx,0x1f
c000ba45:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba49:	80 fb 01             	cmp    bl,0x1
c000ba4c:	0f b7 f6             	movzx  esi,si
c000ba4f:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000ba53:	76 2a                	jbe    c000ba7f <datetimeToSeconds(datetime_t)+0x8a>
c000ba55:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba5b:	75 22                	jne    c000ba7f <datetimeToSeconds(datetime_t)+0x8a>
c000ba5d:	31 d2                	xor    edx,edx
c000ba5f:	bb 64 00 00 00       	mov    ebx,0x64
c000ba64:	89 f0                	mov    eax,esi
c000ba66:	f7 f3                	div    ebx
c000ba68:	85 d2                	test   edx,edx
c000ba6a:	75 12                	jne    c000ba7e <datetimeToSeconds(datetime_t)+0x89>
c000ba6c:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba72:	bb 90 01 00 00       	mov    ebx,0x190
c000ba77:	99                   	cdq    
c000ba78:	f7 fb                	idiv   ebx
c000ba7a:	85 d2                	test   edx,edx
c000ba7c:	75 01                	jne    c000ba7f <datetimeToSeconds(datetime_t)+0x8a>
c000ba7e:	41                   	inc    ecx
c000ba7f:	83 fe 46             	cmp    esi,0x46
c000ba82:	76 45                	jbe    c000bac9 <datetimeToSeconds(datetime_t)+0xd4>
c000ba84:	bb 46 00 00 00       	mov    ebx,0x46
c000ba89:	bd 64 00 00 00       	mov    ebp,0x64
c000ba8e:	bf 90 01 00 00       	mov    edi,0x190
c000ba93:	f6 c3 03             	test   bl,0x3
c000ba96:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba9b:	75 23                	jne    c000bac0 <datetimeToSeconds(datetime_t)+0xcb>
c000ba9d:	89 d8                	mov    eax,ebx
c000ba9f:	99                   	cdq    
c000baa0:	f7 fd                	idiv   ebp
c000baa2:	b8 6e 01 00 00       	mov    eax,0x16e
c000baa7:	85 d2                	test   edx,edx
c000baa9:	75 15                	jne    c000bac0 <datetimeToSeconds(datetime_t)+0xcb>
c000baab:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bab1:	99                   	cdq    
c000bab2:	f7 ff                	idiv   edi
c000bab4:	83 fa 01             	cmp    edx,0x1
c000bab7:	19 c0                	sbb    eax,eax
c000bab9:	f7 d0                	not    eax
c000babb:	05 6e 01 00 00       	add    eax,0x16e
c000bac0:	43                   	inc    ebx
c000bac1:	01 c1                	add    ecx,eax
c000bac3:	39 f3                	cmp    ebx,esi
c000bac5:	7c cc                	jl     c000ba93 <datetimeToSeconds(datetime_t)+0x9e>
c000bac7:	eb 34                	jmp    c000bafd <datetimeToSeconds(datetime_t)+0x108>
c000bac9:	74 32                	je     c000bafd <datetimeToSeconds(datetime_t)+0x108>
c000bacb:	b8 45 00 00 00       	mov    eax,0x45
c000bad0:	89 c2                	mov    edx,eax
c000bad2:	83 e2 03             	and    edx,0x3
c000bad5:	39 f0                	cmp    eax,esi
c000bad7:	7e 0f                	jle    c000bae8 <datetimeToSeconds(datetime_t)+0xf3>
c000bad9:	83 fa 01             	cmp    edx,0x1
c000badc:	19 d2                	sbb    edx,edx
c000bade:	48                   	dec    eax
c000badf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bae6:	eb e8                	jmp    c000bad0 <datetimeToSeconds(datetime_t)+0xdb>
c000bae8:	85 d2                	test   edx,edx
c000baea:	b8 6d 01 00 00       	mov    eax,0x16d
c000baef:	75 0a                	jne    c000bafb <datetimeToSeconds(datetime_t)+0x106>
c000baf1:	83 fe 01             	cmp    esi,0x1
c000baf4:	19 c0                	sbb    eax,eax
c000baf6:	05 6e 01 00 00       	add    eax,0x16e
c000bafb:	29 c1                	sub    ecx,eax
c000bafd:	b8 80 51 01 00       	mov    eax,0x15180
c000bb02:	f7 e9                	imul   ecx
c000bb04:	03 04 24             	add    eax,DWORD PTR [esp]
c000bb07:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bb0b:	83 c4 0c             	add    esp,0xc
c000bb0e:	5b                   	pop    ebx
c000bb0f:	5e                   	pop    esi
c000bb10:	5f                   	pop    edi
c000bb11:	5d                   	pop    ebp
c000bb12:	c3                   	ret    
c000bb13:	90                   	nop

c000bb14 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bb14:	57                   	push   edi
c000bb15:	56                   	push   esi
c000bb16:	53                   	push   ebx
c000bb17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bb1b:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb1d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bb20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb28:	e8 c8 fe ff ff       	call   c000b9f5 <datetimeToSeconds(datetime_t)>
c000bb2d:	59                   	pop    ecx
c000bb2e:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000bb35:	5b                   	pop    ebx
c000bb36:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bb3c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bb42:	89 cb                	mov    ebx,ecx
c000bb44:	c1 fb 1f             	sar    ebx,0x1f
c000bb47:	29 c8                	sub    eax,ecx
c000bb49:	19 da                	sbb    edx,ebx
c000bb4b:	31 c9                	xor    ecx,ecx
c000bb4d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb54:	74 05                	je     c000bb5b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb56:	b9 08 07 00 00       	mov    ecx,0x708
c000bb5b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb5f:	31 db                	xor    ebx,ebx
c000bb61:	29 c8                	sub    eax,ecx
c000bb63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb67:	19 da                	sbb    edx,ebx
c000bb69:	89 f8                	mov    eax,edi
c000bb6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb6f:	5b                   	pop    ebx
c000bb70:	5e                   	pop    esi
c000bb71:	5f                   	pop    edi
c000bb72:	ff e0                	jmp    eax

c000bb74 <secondsToDatetime(unsigned long long)>:
c000bb74:	55                   	push   ebp
c000bb75:	57                   	push   edi
c000bb76:	56                   	push   esi
c000bb77:	53                   	push   ebx
c000bb78:	83 ec 1c             	sub    esp,0x1c
c000bb7b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb87:	6a 00                	push   0x0
c000bb89:	68 80 51 01 00       	push   0x15180
c000bb8e:	55                   	push   ebp
c000bb8f:	57                   	push   edi
c000bb90:	e8 6b 27 01 00       	call   c001e300 <__udivdi3>
c000bb95:	83 c4 10             	add    esp,0x10
c000bb98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb9c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bba2:	6a 00                	push   0x0
c000bba4:	68 80 51 01 00       	push   0x15180
c000bba9:	55                   	push   ebp
c000bbaa:	57                   	push   edi
c000bbab:	bf 10 0e 00 00       	mov    edi,0xe10
c000bbb0:	e8 4b 28 01 00       	call   c001e400 <__umoddi3>
c000bbb5:	83 c4 10             	add    esp,0x10
c000bbb8:	99                   	cdq    
c000bbb9:	f7 ff                	idiv   edi
c000bbbb:	bf 3c 00 00 00       	mov    edi,0x3c
c000bbc0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bbc3:	89 d0                	mov    eax,edx
c000bbc5:	99                   	cdq    
c000bbc6:	f7 ff                	idiv   edi
c000bbc8:	85 db                	test   ebx,ebx
c000bbca:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bbcd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bbd0:	79 11                	jns    c000bbe3 <secondsToDatetime(unsigned long long)+0x6f>
c000bbd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bbd6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bbdc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbe1:	eb 07                	jmp    c000bbea <secondsToDatetime(unsigned long long)+0x76>
c000bbe3:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bbe8:	89 d8                	mov    eax,ebx
c000bbea:	99                   	cdq    
c000bbeb:	bf b4 05 00 00       	mov    edi,0x5b4
c000bbf0:	f7 f9                	idiv   ecx
c000bbf2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbf7:	31 d2                	xor    edx,edx
c000bbf9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc02:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bc0a:	01 c3                	add    ebx,eax
c000bc0c:	89 d8                	mov    eax,ebx
c000bc0e:	f7 f1                	div    ecx
c000bc10:	31 d2                	xor    edx,edx
c000bc12:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bc15:	89 d8                	mov    eax,ebx
c000bc17:	f7 f7                	div    edi
c000bc19:	31 d2                	xor    edx,edx
c000bc1b:	29 c1                	sub    ecx,eax
c000bc1d:	89 d8                	mov    eax,ebx
c000bc1f:	f7 f5                	div    ebp
c000bc21:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bc26:	31 d2                	xor    edx,edx
c000bc28:	29 c1                	sub    ecx,eax
c000bc2a:	89 c8                	mov    eax,ecx
c000bc2c:	f7 f5                	div    ebp
c000bc2e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bc33:	31 d2                	xor    edx,edx
c000bc35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc39:	89 c8                	mov    eax,ecx
c000bc3b:	f7 f5                	div    ebp
c000bc3d:	31 d2                	xor    edx,edx
c000bc3f:	01 c3                	add    ebx,eax
c000bc41:	89 c8                	mov    eax,ecx
c000bc43:	f7 f7                	div    edi
c000bc45:	bf 99 00 00 00       	mov    edi,0x99
c000bc4a:	31 d2                	xor    edx,edx
c000bc4c:	29 c3                	sub    ebx,eax
c000bc4e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc56:	29 c3                	sub    ebx,eax
c000bc58:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc5b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc5e:	83 c1 02             	add    ecx,0x2
c000bc61:	89 c8                	mov    eax,ecx
c000bc63:	bb 05 00 00 00       	mov    ebx,0x5
c000bc68:	f7 f7                	div    edi
c000bc6a:	31 d2                	xor    edx,edx
c000bc6c:	89 c7                	mov    edi,eax
c000bc6e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc74:	83 c0 02             	add    eax,0x2
c000bc77:	f7 f3                	div    ebx
c000bc79:	89 eb                	mov    ebx,ebp
c000bc7b:	29 c3                	sub    ebx,eax
c000bc7d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc83:	88 1e                	mov    BYTE PTR [esi],bl
c000bc85:	19 c0                	sbb    eax,eax
c000bc87:	31 d2                	xor    edx,edx
c000bc89:	83 e0 0c             	and    eax,0xc
c000bc8c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc90:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bc94:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc9c:	01 c7                	add    edi,eax
c000bc9e:	83 f9 01             	cmp    ecx,0x1
c000bca1:	0f 96 c2             	setbe  dl
c000bca4:	fe c1                	inc    cl
c000bca6:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bca9:	8d 04 17             	lea    eax,[edi+edx*1]
c000bcac:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bcb0:	83 c4 1c             	add    esp,0x1c
c000bcb3:	89 f0                	mov    eax,esi
c000bcb5:	5b                   	pop    ebx
c000bcb6:	5e                   	pop    esi
c000bcb7:	5f                   	pop    edi
c000bcb8:	5d                   	pop    ebp
c000bcb9:	c2 04 00             	ret    0x4

c000bcbc <Clock::timeInDatetimeLocal()>:
c000bcbc:	53                   	push   ebx
c000bcbd:	83 ec 14             	sub    esp,0x14
c000bcc0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcc4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bcc8:	e8 87 fc ff ff       	call   c000b954 <Clock::timeInSecondsLocal()>
c000bccd:	83 c4 0c             	add    esp,0xc
c000bcd0:	52                   	push   edx
c000bcd1:	50                   	push   eax
c000bcd2:	53                   	push   ebx
c000bcd3:	e8 9c fe ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c000bcd8:	89 d8                	mov    eax,ebx
c000bcda:	83 c4 14             	add    esp,0x14
c000bcdd:	5b                   	pop    ebx
c000bcde:	c2 04 00             	ret    0x4
c000bce1:	90                   	nop

c000bce2 <Device::hibernate()>:
c000bce2:	c3                   	ret    
c000bce3:	90                   	nop

c000bce4 <Device::wake()>:
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop

c000bce6 <Device::detect()>:
c000bce6:	c3                   	ret    
c000bce7:	90                   	nop

c000bce8 <Device::disableLegacy()>:
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop

c000bcea <Device::powerSaving(PowerSavingLevel)>:
c000bcea:	c3                   	ret    
c000bceb:	90                   	nop

c000bcec <DriverlessDevice::close(int, int, void*)>:
c000bcec:	31 c0                	xor    eax,eax
c000bcee:	c3                   	ret    
c000bcef:	90                   	nop

c000bcf0 <DriverlessDevice::detect()>:
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <DriverlessDevice::open(int, int, void*)>:
c000bcf2:	83 ec 18             	sub    esp,0x18
c000bcf5:	68 f0 ff 01 c0       	push   0xc001fff0
c000bcfa:	e8 26 4a 00 00       	call   c0010725 <KePanic(char const*)>
c000bcff:	83 c8 ff             	or     eax,0xffffffff
c000bd02:	83 c4 1c             	add    esp,0x1c
c000bd05:	c3                   	ret    

c000bd06 <Device::~Device()>:
c000bd06:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000bd0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd0f:	89 10                	mov    DWORD PTR [eax],edx
c000bd11:	90                   	nop
c000bd12:	c3                   	ret    
c000bd13:	90                   	nop

c000bd14 <Device::~Device()>:
c000bd14:	83 ec 1c             	sub    esp,0x1c
c000bd17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd1e:	e8 e3 ff ff ff       	call   c000bd06 <Device::~Device()>
c000bd23:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000bd2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd32:	e8 85 eb ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000bd37:	83 c4 1c             	add    esp,0x1c
c000bd3a:	c3                   	ret    
c000bd3b:	90                   	nop

c000bd3c <Device::findAndLoadDriver()>:
c000bd3c:	c7 44 24 04 0e 00 02 c0 	mov    DWORD PTR [esp+0x4],0xc002000e
c000bd44:	e9 8d ec ff ff       	jmp    c000a9d6 <Dbg::kprintf(char const*, ...)>
c000bd49:	90                   	nop

c000bd4a <Device::preOpenPCI(PCIDeviceInfo)>:
c000bd4a:	57                   	push   edi
c000bd4b:	b9 09 00 00 00       	mov    ecx,0x9
c000bd50:	56                   	push   esi
c000bd51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd55:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd59:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd63:	81 c7 18 01 00 00    	add    edi,0x118
c000bd69:	fc                   	cld    
c000bd6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd6c:	5e                   	pop    esi
c000bd6d:	5f                   	pop    edi
c000bd6e:	c3                   	ret    
c000bd6f:	90                   	nop

c000bd70 <Device::preOpenACPI(void*, char*, char*)>:
c000bd70:	57                   	push   edi
c000bd71:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd76:	56                   	push   esi
c000bd77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd7f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd83:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd8d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd93:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd9b:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bda1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bda5:	b9 0e 00 00 00       	mov    ecx,0xe
c000bdaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bdac:	5e                   	pop    esi
c000bdad:	5f                   	pop    edi
c000bdae:	c3                   	ret    
c000bdaf:	90                   	nop

c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bdb0:	53                   	push   ebx
c000bdb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdb9:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bdbe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bdc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bdce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bdd2:	5b                   	pop    ebx
c000bdd3:	e9 8c 05 00 00       	jmp    c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bdd8 <Device::getParent()>:
c000bdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bddc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bde2:	c3                   	ret    
c000bde3:	90                   	nop

c000bde4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bde4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bde8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdec:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bdf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdf5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bdf9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdfd:	e9 d6 06 00 00       	jmp    c000c4d8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000be02 <Device::addChild(Device*)>:
c000be02:	53                   	push   ebx
c000be03:	83 ec 08             	sub    esp,0x8
c000be06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000be0e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000be14:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000be1a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000be1c:	85 d2                	test   edx,edx
c000be1e:	74 04                	je     c000be24 <Device::addChild(Device*)+0x22>
c000be20:	89 d3                	mov    ebx,edx
c000be22:	eb f6                	jmp    c000be1a <Device::addChild(Device*)+0x18>
c000be24:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000be27:	83 ec 0c             	sub    esp,0xc
c000be2a:	6a 08                	push   0x8
c000be2c:	e8 35 bc ff ff       	call   c0007a66 <malloc>
c000be31:	89 03                	mov    DWORD PTR [ebx],eax
c000be33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be40:	83 c4 18             	add    esp,0x18
c000be43:	5b                   	pop    ebx
c000be44:	c3                   	ret    
c000be45:	90                   	nop

c000be46 <Device::removeAllChildren()>:
c000be46:	56                   	push   esi
c000be47:	53                   	push   ebx
c000be48:	52                   	push   edx
c000be49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be4d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be53:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be56:	74 17                	je     c000be6f <Device::removeAllChildren()+0x29>
c000be58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be5b:	85 c0                	test   eax,eax
c000be5d:	74 0c                	je     c000be6b <Device::removeAllChildren()+0x25>
c000be5f:	8b 10                	mov    edx,DWORD PTR [eax]
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be68:	83 c4 10             	add    esp,0x10
c000be6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be6d:	eb e4                	jmp    c000be53 <Device::removeAllChildren()+0xd>
c000be6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be7b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be88:	58                   	pop    eax
c000be89:	5b                   	pop    ebx
c000be8a:	5e                   	pop    esi
c000be8b:	c3                   	ret    

c000be8c <Device::hibernateAll()>:
c000be8c:	53                   	push   ebx
c000be8d:	83 ec 14             	sub    esp,0x14
c000be90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be96:	53                   	push   ebx
c000be97:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bea6:	74 0f                	je     c000beb7 <Device::hibernateAll()+0x2b>
c000bea8:	83 ec 0c             	sub    esp,0xc
c000beab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000beae:	e8 d9 ff ff ff       	call   c000be8c <Device::hibernateAll()>
c000beb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000beb5:	eb e9                	jmp    c000bea0 <Device::hibernateAll()+0x14>
c000beb7:	83 c4 08             	add    esp,0x8
c000beba:	5b                   	pop    ebx
c000bebb:	c3                   	ret    

c000bebc <Device::wakeAll()>:
c000bebc:	53                   	push   ebx
c000bebd:	83 ec 14             	sub    esp,0x14
c000bec0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bec4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bec6:	53                   	push   ebx
c000bec7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000beca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bed0:	83 c4 10             	add    esp,0x10
c000bed3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bed6:	74 0f                	je     c000bee7 <Device::wakeAll()+0x2b>
c000bed8:	83 ec 0c             	sub    esp,0xc
c000bedb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bede:	e8 d9 ff ff ff       	call   c000bebc <Device::wakeAll()>
c000bee3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bee5:	eb e9                	jmp    c000bed0 <Device::wakeAll()+0x14>
c000bee7:	83 c4 08             	add    esp,0x8
c000beea:	5b                   	pop    ebx
c000beeb:	c3                   	ret    

c000beec <Device::detectAll()>:
c000beec:	53                   	push   ebx
c000beed:	83 ec 14             	sub    esp,0x14
c000bef0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bef4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bef6:	53                   	push   ebx
c000bef7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000befa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf00:	83 c4 10             	add    esp,0x10
c000bf03:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf06:	74 0f                	je     c000bf17 <Device::detectAll()+0x2b>
c000bf08:	83 ec 0c             	sub    esp,0xc
c000bf0b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf0e:	e8 d9 ff ff ff       	call   c000beec <Device::detectAll()>
c000bf13:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf15:	eb e9                	jmp    c000bf00 <Device::detectAll()+0x14>
c000bf17:	83 c4 08             	add    esp,0x8
c000bf1a:	5b                   	pop    ebx
c000bf1b:	c3                   	ret    

c000bf1c <Device::disableLegacyAll()>:
c000bf1c:	c3                   	ret    
c000bf1d:	90                   	nop

c000bf1e <Device::loadDriversForAll()>:
c000bf1e:	c3                   	ret    
c000bf1f:	90                   	nop

c000bf20 <Device::closeAll()>:
c000bf20:	53                   	push   ebx
c000bf21:	83 ec 08             	sub    esp,0x8
c000bf24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf28:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf2a:	6a 00                	push   0x0
c000bf2c:	6a 00                	push   0x0
c000bf2e:	6a 00                	push   0x0
c000bf30:	53                   	push   ebx
c000bf31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf34:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf40:	74 0f                	je     c000bf51 <Device::closeAll()+0x31>
c000bf42:	83 ec 0c             	sub    esp,0xc
c000bf45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf48:	e8 d3 ff ff ff       	call   c000bf20 <Device::closeAll()>
c000bf4d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf4f:	eb e9                	jmp    c000bf3a <Device::closeAll()+0x1a>
c000bf51:	83 c4 08             	add    esp,0x8
c000bf54:	5b                   	pop    ebx
c000bf55:	c3                   	ret    

c000bf56 <Device::powerSavingAll(PowerSavingLevel)>:
c000bf56:	56                   	push   esi
c000bf57:	53                   	push   ebx
c000bf58:	83 ec 0c             	sub    esp,0xc
c000bf5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf5f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf63:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf65:	56                   	push   esi
c000bf66:	53                   	push   ebx
c000bf67:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf70:	83 c4 10             	add    esp,0x10
c000bf73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf76:	74 0f                	je     c000bf87 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf78:	52                   	push   edx
c000bf79:	52                   	push   edx
c000bf7a:	56                   	push   esi
c000bf7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf7e:	e8 d3 ff ff ff       	call   c000bf56 <Device::powerSavingAll(PowerSavingLevel)>
c000bf83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf85:	eb e9                	jmp    c000bf70 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf87:	58                   	pop    eax
c000bf88:	5b                   	pop    ebx
c000bf89:	5e                   	pop    esi
c000bf8a:	c3                   	ret    
c000bf8b:	90                   	nop

c000bf8c <Device::setName(char const*)>:
c000bf8c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf94:	e9 f7 46 ff ff       	jmp    c0000690 <strcpy>
c000bf99:	90                   	nop

c000bf9a <Device::Device(char const*)>:
c000bf9a:	83 ec 2c             	sub    esp,0x2c
c000bf9d:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000bfa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfa6:	89 10                	mov    DWORD PTR [eax],edx
c000bfa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfac:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bfb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfba:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bfc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfc8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfd6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bfe0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bfe4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfe8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfec:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfef:	e8 98 ff ff ff       	call   c000bf8c <Device::setName(char const*)>
c000bff4:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000bffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c000:	89 04 24             	mov    DWORD PTR [esp],eax
c000c003:	e8 5e ba ff ff       	call   c0007a66 <malloc>
c000c008:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c00e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c015:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c019:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c01f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c023:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c029:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c02f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c033:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c039:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c044:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c04b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c04f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c05a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c068:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c072:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c076:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c084:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c08e:	90                   	nop
c000c08f:	83 c4 2c             	add    esp,0x2c
c000c092:	c3                   	ret    
c000c093:	90                   	nop

c000c094 <Device::getName()>:
c000c094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c098:	05 d0 00 00 00       	add    eax,0xd0
c000c09d:	c3                   	ret    

c000c09e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c09e:	83 ec 1c             	sub    esp,0x1c
c000c0a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0a5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c0a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0b0:	e8 e5 fe ff ff       	call   c000bf9a <Device::Device(char const*)>
c000c0b5:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c000c0ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0be:	89 10                	mov    DWORD PTR [eax],edx
c000c0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c0c4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c0ce:	90                   	nop
c000c0cf:	83 c4 1c             	add    esp,0x1c
c000c0d2:	c3                   	ret    
c000c0d3:	90                   	nop

c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c0d4:	57                   	push   edi
c000c0d5:	56                   	push   esi
c000c0d6:	53                   	push   ebx
c000c0d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0e3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c0e9:	75 0c                	jne    c000c0f7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0eb:	52                   	push   edx
c000c0ec:	52                   	push   edx
c000c0ed:	53                   	push   ebx
c000c0ee:	56                   	push   esi
c000c0ef:	e8 a2 26 01 00       	call   c001e796 <LinkedList<Device>::addElement(Device*)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c100:	74 12                	je     c000c114 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c102:	50                   	push   eax
c000c103:	57                   	push   edi
c000c104:	56                   	push   esi
c000c105:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c108:	e8 c7 ff ff ff       	call   c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c10d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c10f:	83 c4 10             	add    esp,0x10
c000c112:	eb e9                	jmp    c000c0fd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c114:	5b                   	pop    ebx
c000c115:	5e                   	pop    esi
c000c116:	5f                   	pop    edi
c000c117:	c3                   	ret    

c000c118 <getDevicesOfType(DeviceType)>:
c000c118:	53                   	push   ebx
c000c119:	83 ec 14             	sub    esp,0x14
c000c11c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c120:	53                   	push   ebx
c000c121:	e8 40 27 01 00       	call   c001e866 <LinkedList<Device>::LinkedList()>
c000c126:	83 c4 0c             	add    esp,0xc
c000c129:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c12d:	53                   	push   ebx
c000c12e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c134:	e8 9b ff ff ff       	call   c000c0d4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c139:	83 c4 18             	add    esp,0x18
c000c13c:	89 d8                	mov    eax,ebx
c000c13e:	5b                   	pop    ebx
c000c13f:	c2 04 00             	ret    0x4
c000c142:	66 90                	xchg   ax,ax

c000c144 <HardDiskController::HardDiskController(char const*)>:
c000c144:	83 ec 1c             	sub    esp,0x1c
c000c147:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c14b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c14f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c153:	89 04 24             	mov    DWORD PTR [esp],eax
c000c156:	e8 3f fe ff ff       	call   c000bf9a <Device::Device(char const*)>
c000c15b:	ba a8 00 02 c0       	mov    edx,0xc00200a8
c000c160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c164:	89 10                	mov    DWORD PTR [eax],edx
c000c166:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c16a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c174:	90                   	nop
c000c175:	83 c4 1c             	add    esp,0x1c
c000c178:	c3                   	ret    
c000c179:	90                   	nop
c000c17a:	66 90                	xchg   ax,ax

c000c17c <HardDiskController::~HardDiskController()>:
c000c17c:	83 ec 1c             	sub    esp,0x1c
c000c17f:	ba a8 00 02 c0       	mov    edx,0xc00200a8
c000c184:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c188:	89 10                	mov    DWORD PTR [eax],edx
c000c18a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c18e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c191:	e8 70 fb ff ff       	call   c000bd06 <Device::~Device()>
c000c196:	90                   	nop
c000c197:	83 c4 1c             	add    esp,0x1c
c000c19a:	c3                   	ret    
c000c19b:	90                   	nop

c000c19c <HardDiskController::~HardDiskController()>:
c000c19c:	83 ec 1c             	sub    esp,0x1c
c000c19f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1a6:	e8 d1 ff ff ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c000c1ab:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c1b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1ba:	e8 fd e6 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000c1bf:	83 c4 1c             	add    esp,0x1c
c000c1c2:	c3                   	ret    
c000c1c3:	90                   	nop

c000c1c4 <PhysicalDisk::eject()>:
c000c1c4:	83 c8 ff             	or     eax,0xffffffff
c000c1c7:	c3                   	ret    

c000c1c8 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c1c8:	83 ec 1c             	sub    esp,0x1c
c000c1cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c1d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c1d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c1da:	e8 bb fd ff ff       	call   c000bf9a <Device::Device(char const*)>
c000c1df:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000c1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1e8:	89 10                	mov    DWORD PTR [eax],edx
c000c1ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1ee:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1f9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c204:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c20e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c212:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c216:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c21c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c220:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c22a:	90                   	nop
c000c22b:	83 c4 1c             	add    esp,0x1c
c000c22e:	c3                   	ret    
c000c22f:	90                   	nop

c000c230 <PhysicalDisk::startCache()>:
c000c230:	56                   	push   esi
c000c231:	53                   	push   ebx
c000c232:	83 ec 10             	sub    esp,0x10
c000c235:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c239:	6a 44                	push   0x44
c000c23b:	e8 26 b8 ff ff       	call   c0007a66 <malloc>
c000c240:	89 c6                	mov    esi,eax
c000c242:	58                   	pop    eax
c000c243:	5a                   	pop    edx
c000c244:	53                   	push   ebx
c000c245:	56                   	push   esi
c000c246:	e8 81 16 00 00       	call   c000d8cc <VCache::VCache(PhysicalDisk*)>
c000c24b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c251:	83 c4 14             	add    esp,0x14
c000c254:	5b                   	pop    ebx
c000c255:	5e                   	pop    esi
c000c256:	c3                   	ret    
c000c257:	90                   	nop

c000c258 <PhysicalDisk::~PhysicalDisk()>:
c000c258:	83 ec 1c             	sub    esp,0x1c
c000c25b:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000c260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c264:	89 10                	mov    DWORD PTR [eax],edx
c000c266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c26d:	e8 94 fa ff ff       	call   c000bd06 <Device::~Device()>
c000c272:	90                   	nop
c000c273:	83 c4 1c             	add    esp,0x1c
c000c276:	c3                   	ret    
c000c277:	90                   	nop

c000c278 <PhysicalDisk::~PhysicalDisk()>:
c000c278:	83 ec 1c             	sub    esp,0x1c
c000c27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c282:	e8 d1 ff ff ff       	call   c000c258 <PhysicalDisk::~PhysicalDisk()>
c000c287:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c293:	89 04 24             	mov    DWORD PTR [esp],eax
c000c296:	e8 21 e6 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000c29b:	83 c4 1c             	add    esp,0x1c
c000c29e:	c3                   	ret    
c000c29f:	90                   	nop

c000c2a0 <int_handler>:
c000c2a0:	55                   	push   ebp
c000c2a1:	57                   	push   edi
c000c2a2:	56                   	push   esi
c000c2a3:	53                   	push   ebx
c000c2a4:	83 ec 1c             	sub    esp,0x1c
c000c2a7:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2ae:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2b2:	74 0b                	je     c000c2bf <int_handler+0x1f>
c000c2b4:	fa                   	cli    
c000c2b5:	f4                   	hlt    
c000c2b6:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c2bd:	75 f5                	jne    c000c2b4 <int_handler+0x14>
c000c2bf:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c2c2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c2c5:	83 f8 17             	cmp    eax,0x17
c000c2c8:	76 3d                	jbe    c000c307 <int_handler+0x67>
c000c2ca:	c1 e6 04             	shl    esi,0x4
c000c2cd:	31 db                	xor    ebx,ebx
c000c2cf:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c2d5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c2db:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c2df:	85 c0                	test   eax,eax
c000c2e1:	74 12                	je     c000c2f5 <int_handler+0x55>
c000c2e3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2e6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c2f1:	74 1e                	je     c000c311 <int_handler+0x71>
c000c2f3:	ff d0                	call   eax
c000c2f5:	43                   	inc    ebx
c000c2f6:	83 fb 04             	cmp    ebx,0x4
c000c2f9:	75 e0                	jne    c000c2db <int_handler+0x3b>
c000c2fb:	83 c4 1c             	add    esp,0x1c
c000c2fe:	31 c0                	xor    eax,eax
c000c300:	5b                   	pop    ebx
c000c301:	31 d2                	xor    edx,edx
c000c303:	5e                   	pop    esi
c000c304:	5f                   	pop    edi
c000c305:	5d                   	pop    ebp
c000c306:	c3                   	ret    
c000c307:	89 04 24             	mov    DWORD PTR [esp],eax
c000c30a:	e8 91 ad 00 00       	call   c00170a0 <HalEndOfInterrupt(int)>
c000c30f:	eb b9                	jmp    c000c2ca <int_handler+0x2a>
c000c311:	ff d0                	call   eax
c000c313:	83 c4 1c             	add    esp,0x1c
c000c316:	5b                   	pop    ebx
c000c317:	5e                   	pop    esi
c000c318:	5f                   	pop    edi
c000c319:	5d                   	pop    ebp
c000c31a:	c3                   	ret    

c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c31b:	56                   	push   esi
c000c31c:	31 c0                	xor    eax,eax
c000c31e:	53                   	push   ebx
c000c31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c327:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c32b:	89 ca                	mov    edx,ecx
c000c32d:	c1 e2 04             	shl    edx,0x4
c000c330:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c338:	74 16                	je     c000c350 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000c33a:	40                   	inc    eax
c000c33b:	83 f8 04             	cmp    eax,0x4
c000c33e:	75 f0                	jne    c000c330 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c340:	b8 04 01 02 c0       	mov    eax,0xc0020104
c000c345:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c349:	5b                   	pop    ebx
c000c34a:	5e                   	pop    esi
c000c34b:	e9 d5 43 00 00       	jmp    c0010725 <KePanic(char const*)>
c000c350:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c353:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c35a:	5b                   	pop    ebx
c000c35b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c362:	5e                   	pop    esi
c000c363:	c3                   	ret    

c000c364 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c364:	56                   	push   esi
c000c365:	53                   	push   ebx
c000c366:	83 ec 34             	sub    esp,0x34
c000c369:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000c36e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c372:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c376:	88 c1                	mov    cl,al
c000c378:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c37d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c384:	74 50                	je     c000c3d6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c386:	84 c9                	test   cl,cl
c000c388:	74 20                	je     c000c3aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c38a:	83 fb 0f             	cmp    ebx,0xf
c000c38d:	0f 8f da 00 00 00    	jg     c000c46d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c393:	0f b6 9b 40 1b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde4c0]
c000c39a:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000c3a2:	d1 e8                	shr    eax,1
c000c3a4:	24 01                	and    al,0x1
c000c3a6:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c3aa:	c7 04 24 11 01 02 c0 	mov    DWORD PTR [esp],0xc0020111
c000c3b1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3b6:	31 f6                	xor    esi,esi
c000c3b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c3bc:	e8 15 e6 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000c3c1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c3c6:	85 c0                	test   eax,eax
c000c3c8:	7f 4b                	jg     c000c415 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000c3ca:	c7 04 24 28 01 02 c0 	mov    DWORD PTR [esp],0xc0020128
c000c3d1:	e8 4f 43 00 00       	call   c0010725 <KePanic(char const*)>
c000c3d6:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000c3d9:	31 c0                	xor    eax,eax
c000c3db:	89 ca                	mov    edx,ecx
c000c3dd:	c1 e2 04             	shl    edx,0x4
c000c3e0:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000c3e7:	85 f6                	test   esi,esi
c000c3e9:	0f 84 94 00 00 00    	je     c000c483 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000c3ef:	40                   	inc    eax
c000c3f0:	83 f8 04             	cmp    eax,0x4
c000c3f3:	75 eb                	jne    c000c3e0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000c3f5:	c7 04 24 7c 01 02 c0 	mov    DWORD PTR [esp],0xc002017c
c000c3fc:	e8 24 43 00 00       	call   c0010725 <KePanic(char const*)>
c000c401:	83 c4 34             	add    esp,0x34
c000c404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c409:	5b                   	pop    ebx
c000c40a:	5e                   	pop    esi
c000c40b:	c3                   	ret    
c000c40c:	46                   	inc    esi
c000c40d:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000c413:	7e b5                	jle    c000c3ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000c415:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c419:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c420:	89 04 24             	mov    DWORD PTR [esp],eax
c000c423:	e8 8e 12 01 00       	call   c001d6b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c428:	84 c0                	test   al,al
c000c42a:	74 e0                	je     c000c40c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c42c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000c431:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c435:	31 c0                	xor    eax,eax
c000c437:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c43b:	88 d8                	mov    al,bl
c000c43d:	04 20                	add    al,0x20
c000c43f:	0f b6 c0             	movzx  eax,al
c000c442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c446:	31 c0                	xor    eax,eax
c000c448:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c44c:	31 c0                	xor    eax,eax
c000c44e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c452:	0f b6 c3             	movzx  eax,bl
c000c455:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c459:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c460:	89 04 24             	mov    DWORD PTR [esp],eax
c000c463:	e8 c0 13 01 00       	call   c001d828 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c468:	e9 69 ff ff ff       	jmp    c000c3d6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c46d:	c7 04 24 44 01 02 c0 	mov    DWORD PTR [esp],0xc0020144
c000c474:	e8 ac 42 00 00       	call   c0010725 <KePanic(char const*)>
c000c479:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000c47e:	e9 27 ff ff ff       	jmp    c000c3aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c483:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c487:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c48a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c491:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000c495:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c49c:	83 c4 34             	add    esp,0x34
c000c49f:	89 d8                	mov    eax,ebx
c000c4a1:	5b                   	pop    ebx
c000c4a2:	5e                   	pop    esi
c000c4a3:	c3                   	ret    

c000c4a4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c4ac:	c1 e0 04             	shl    eax,0x4
c000c4af:	8d 50 10             	lea    edx,[eax+0x10]
c000c4b2:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c4b8:	74 08                	je     c000c4c2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c4ba:	83 c0 04             	add    eax,0x4
c000c4bd:	39 d0                	cmp    eax,edx
c000c4bf:	75 f1                	jne    c000c4b2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c4c1:	c3                   	ret    
c000c4c2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4cc:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4d6:	eb e2                	jmp    c000c4ba <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c4d8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c4d8:	56                   	push   esi
c000c4d9:	53                   	push   ebx
c000c4da:	83 ec 14             	sub    esp,0x14
c000c4dd:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000c4e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c4e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c4ea:	74 0e                	je     c000c4fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c4ec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4f1:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4f8:	75 30                	jne    c000c52a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000c4fa:	8d 43 20             	lea    eax,[ebx+0x20]
c000c4fd:	c1 e0 04             	shl    eax,0x4
c000c500:	8d 50 10             	lea    edx,[eax+0x10]
c000c503:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c509:	74 0d                	je     c000c518 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c50b:	83 c0 04             	add    eax,0x4
c000c50e:	39 d0                	cmp    eax,edx
c000c510:	75 f1                	jne    c000c503 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c512:	83 c4 14             	add    esp,0x14
c000c515:	5b                   	pop    ebx
c000c516:	5e                   	pop    esi
c000c517:	c3                   	ret    
c000c518:	31 c9                	xor    ecx,ecx
c000c51a:	31 db                	xor    ebx,ebx
c000c51c:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000c522:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000c528:	eb e1                	jmp    c000c50b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c52a:	83 fb 0f             	cmp    ebx,0xf
c000c52d:	7f 09                	jg     c000c538 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000c52f:	0f b6 9b 40 1b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde4c0]
c000c536:	eb c2                	jmp    c000c4fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c538:	c7 04 24 35 01 02 c0 	mov    DWORD PTR [esp],0xc0020135
c000c53f:	e8 e1 41 00 00       	call   c0010725 <KePanic(char const*)>
c000c544:	eb b4                	jmp    c000c4fa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c546 <setupINTS()>:
c000c546:	31 c0                	xor    eax,eax
c000c548:	31 d2                	xor    edx,edx
c000c54a:	31 c9                	xor    ecx,ecx
c000c54c:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000c552:	31 d2                	xor    edx,edx
c000c554:	83 c0 10             	add    eax,0x10
c000c557:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000c55d:	31 c9                	xor    ecx,ecx
c000c55f:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000c565:	31 d2                	xor    edx,edx
c000c567:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000c56d:	31 c9                	xor    ecx,ecx
c000c56f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000c575:	31 d2                	xor    edx,edx
c000c577:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000c57d:	31 c9                	xor    ecx,ecx
c000c57f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000c585:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000c58b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c590:	75 b6                	jne    c000c548 <setupINTS()+0x2>
c000c592:	c3                   	ret    

c000c593 <convertLegacyIRQNumber(int)>:
c000c593:	83 ec 1c             	sub    esp,0x1c
c000c596:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5a0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c5a7:	74 0c                	je     c000c5b5 <convertLegacyIRQNumber(int)+0x22>
c000c5a9:	83 f8 0f             	cmp    eax,0xf
c000c5ac:	7f 0b                	jg     c000c5b9 <convertLegacyIRQNumber(int)+0x26>
c000c5ae:	0f b6 80 40 1b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde4c0]
c000c5b5:	83 c4 1c             	add    esp,0x1c
c000c5b8:	c3                   	ret    
c000c5b9:	c7 04 24 44 01 02 c0 	mov    DWORD PTR [esp],0xc0020144
c000c5c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5c4:	e8 5c 41 00 00       	call   c0010725 <KePanic(char const*)>
c000c5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c5cd:	83 c4 1c             	add    esp,0x1c
c000c5d0:	c3                   	ret    
c000c5d1:	90                   	nop

c000c5d2 <startGUI(void*)>:
c000c5d2:	55                   	push   ebp
c000c5d3:	89 e5                	mov    ebp,esp
c000c5d5:	53                   	push   ebx
c000c5d6:	83 ec 14             	sub    esp,0x14
c000c5d9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5de:	48                   	dec    eax
c000c5df:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5e4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5e9:	85 c0                	test   eax,eax
c000c5eb:	75 01                	jne    c000c5ee <startGUI(void*)+0x1c>
c000c5ed:	fb                   	sti    
c000c5ee:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5f4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c5fc:	c7 04 24 a1 01 02 c0 	mov    DWORD PTR [esp],0xc00201a1
c000c603:	e8 b5 7f 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000c608:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c60c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c60f:	e8 e5 81 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000c614:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c61a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c622:	c7 04 24 bb 01 02 c0 	mov    DWORD PTR [esp],0xc00201bb
c000c629:	e8 8f 7f 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000c62e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c632:	89 04 24             	mov    DWORD PTR [esp],eax
c000c635:	e8 bf 81 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000c63a:	90                   	nop
c000c63b:	83 c4 14             	add    esp,0x14
c000c63e:	5b                   	pop    ebx
c000c63f:	5d                   	pop    ebp
c000c640:	c3                   	ret    

c000c641 <startGUIVESA(void*)>:
c000c641:	55                   	push   ebp
c000c642:	89 e5                	mov    ebp,esp
c000c644:	53                   	push   ebx
c000c645:	83 ec 14             	sub    esp,0x14
c000c648:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c64d:	48                   	dec    eax
c000c64e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c653:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c658:	85 c0                	test   eax,eax
c000c65a:	75 01                	jne    c000c65d <startGUIVESA(void*)+0x1c>
c000c65c:	fb                   	sti    
c000c65d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c663:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c66b:	c7 04 24 d9 01 02 c0 	mov    DWORD PTR [esp],0xc00201d9
c000c672:	e8 46 7f 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000c677:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c67b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c67e:	e8 76 81 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000c683:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c689:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c691:	c7 04 24 bb 01 02 c0 	mov    DWORD PTR [esp],0xc00201bb
c000c698:	e8 20 7f 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000c69d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6a4:	e8 50 81 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000c6a9:	90                   	nop
c000c6aa:	83 c4 14             	add    esp,0x14
c000c6ad:	5b                   	pop    ebx
c000c6ae:	5d                   	pop    ebp
c000c6af:	c3                   	ret    

c000c6b0 <sendKeyToTerminal(unsigned char)>:
c000c6b0:	55                   	push   ebp
c000c6b1:	89 e5                	mov    ebp,esp
c000c6b3:	83 ec 38             	sub    esp,0x38
c000c6b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6bc:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6c1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c6c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6cc:	e8 79 c6 ff ff       	call   c0008d4a <VgaText::receiveKey(unsigned char)>
c000c6d1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c6d5:	74 10                	je     c000c6e7 <sendKeyToTerminal(unsigned char)+0x37>
c000c6d7:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c6db:	74 0a                	je     c000c6e7 <sendKeyToTerminal(unsigned char)+0x37>
c000c6dd:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c6e1:	0f 85 8c 00 00 00    	jne    c000c773 <sendKeyToTerminal(unsigned char)+0xc3>
c000c6e7:	fa                   	cli    
c000c6e8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6ed:	40                   	inc    eax
c000c6ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6f3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6f8:	40                   	inc    eax
c000c6f9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6fe:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c703:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c706:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c710:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c714:	74 1c                	je     c000c732 <sendKeyToTerminal(unsigned char)+0x82>
c000c716:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c719:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c71c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c71f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c722:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c725:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c728:	89 04 24             	mov    DWORD PTR [esp],eax
c000c72b:	e8 98 8d 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000c730:	eb de                	jmp    c000c710 <sendKeyToTerminal(unsigned char)+0x60>
c000c732:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c737:	48                   	dec    eax
c000c738:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c73d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c742:	85 c0                	test   eax,eax
c000c744:	75 18                	jne    c000c75e <sendKeyToTerminal(unsigned char)+0xae>
c000c746:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c74b:	85 c0                	test   eax,eax
c000c74d:	74 0f                	je     c000c75e <sendKeyToTerminal(unsigned char)+0xae>
c000c74f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c759:	e8 e2 88 00 00       	call   c0015040 <schedule()>
c000c75e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c763:	48                   	dec    eax
c000c764:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c769:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c76e:	85 c0                	test   eax,eax
c000c770:	75 01                	jne    c000c773 <sendKeyToTerminal(unsigned char)+0xc3>
c000c772:	fb                   	sti    
c000c773:	90                   	nop
c000c774:	c9                   	leave  
c000c775:	c3                   	ret    

c000c776 <sendKeyboardToken(KeyboardToken)>:
c000c776:	55                   	push   ebp
c000c777:	89 e5                	mov    ebp,esp
c000c779:	83 ec 28             	sub    esp,0x28
c000c77c:	e8 f4 3f 00 00       	call   c0010775 <Krnl::userIOReceived()>
c000c781:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000c785:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c789:	80 f2 01             	xor    dl,0x1
c000c78c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c792:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c797:	85 c0                	test   eax,eax
c000c799:	74 1d                	je     c000c7b8 <sendKeyboardToken(KeyboardToken)+0x42>
c000c79b:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c7a0:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000c7a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7ab:	89 14 24             	mov    DWORD PTR [esp],edx
c000c7ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c7b1:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000c7b6:	ff d0                	call   eax
c000c7b8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7bc:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000c7c0:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c7c7:	38 c2                	cmp    dl,al
c000c7c9:	74 1b                	je     c000c7e6 <sendKeyboardToken(KeyboardToken)+0x70>
c000c7cb:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000c7cf:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7d4:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c7db:	0f b6 c0             	movzx  eax,al
c000c7de:	89 04 24             	mov    DWORD PTR [esp],eax
c000c7e1:	e8 96 bc ff ff       	call   c000847c <setTerminalScrollLock(bool)>
c000c7e6:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000c7ea:	84 c0                	test   al,al
c000c7ec:	0f 84 c4 00 00 00    	je     c000c8b6 <sendKeyboardToken(KeyboardToken)+0x140>
c000c7f2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c7f6:	3d 18 03 00 00       	cmp    eax,0x318
c000c7fb:	75 06                	jne    c000c803 <sendKeyboardToken(KeyboardToken)+0x8d>
c000c7fd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c803:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c807:	3d 19 03 00 00       	cmp    eax,0x319
c000c80c:	75 06                	jne    c000c814 <sendKeyboardToken(KeyboardToken)+0x9e>
c000c80e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c814:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c818:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c81d:	75 06                	jne    c000c825 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c81f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c825:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c829:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c82e:	75 06                	jne    c000c836 <sendKeyboardToken(KeyboardToken)+0xc0>
c000c830:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c836:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c83a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c83f:	75 06                	jne    c000c847 <sendKeyboardToken(KeyboardToken)+0xd1>
c000c841:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c847:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c84b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c850:	75 06                	jne    c000c858 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c852:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c858:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c85c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c861:	75 06                	jne    c000c869 <sendKeyboardToken(KeyboardToken)+0xf3>
c000c863:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c869:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c86d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c872:	75 06                	jne    c000c87a <sendKeyboardToken(KeyboardToken)+0x104>
c000c874:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c87a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c87e:	3d 20 03 00 00       	cmp    eax,0x320
c000c883:	75 06                	jne    c000c88b <sendKeyboardToken(KeyboardToken)+0x115>
c000c885:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c88b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c88f:	3d 21 03 00 00       	cmp    eax,0x321
c000c894:	75 06                	jne    c000c89c <sendKeyboardToken(KeyboardToken)+0x126>
c000c896:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c89c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8a0:	3d 22 03 00 00       	cmp    eax,0x322
c000c8a5:	0f 85 dd 00 00 00    	jne    c000c988 <sendKeyboardToken(KeyboardToken)+0x212>
c000c8ab:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8b1:	e9 d2 00 00 00       	jmp    c000c988 <sendKeyboardToken(KeyboardToken)+0x212>
c000c8b6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8ba:	3d 18 03 00 00       	cmp    eax,0x318
c000c8bf:	75 0a                	jne    c000c8cb <sendKeyboardToken(KeyboardToken)+0x155>
c000c8c1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8cb:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8cf:	3d 19 03 00 00       	cmp    eax,0x319
c000c8d4:	75 0a                	jne    c000c8e0 <sendKeyboardToken(KeyboardToken)+0x16a>
c000c8d6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8e0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8e4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8e9:	75 0a                	jne    c000c8f5 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c8eb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c8f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8f9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c8fe:	75 0a                	jne    c000c90a <sendKeyboardToken(KeyboardToken)+0x194>
c000c900:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c906:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c90a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c90e:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c913:	75 0a                	jne    c000c91f <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c915:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c91b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c91f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c923:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c928:	75 0a                	jne    c000c934 <sendKeyboardToken(KeyboardToken)+0x1be>
c000c92a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c930:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c934:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c938:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c93d:	75 0a                	jne    c000c949 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000c93f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c945:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c94d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c952:	75 0a                	jne    c000c95e <sendKeyboardToken(KeyboardToken)+0x1e8>
c000c954:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c95a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c962:	3d 20 03 00 00       	cmp    eax,0x320
c000c967:	75 0a                	jne    c000c973 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000c969:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c96f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c973:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c977:	3d 21 03 00 00       	cmp    eax,0x321
c000c97c:	75 0a                	jne    c000c988 <sendKeyboardToken(KeyboardToken)+0x212>
c000c97e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c984:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c988:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c98c:	3d 00 02 00 00       	cmp    eax,0x200
c000c991:	75 3b                	jne    c000c9ce <sendKeyboardToken(KeyboardToken)+0x258>
c000c993:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000c99a:	34 01                	xor    al,0x1
c000c99c:	84 c0                	test   al,al
c000c99e:	74 2e                	je     c000c9ce <sendKeyboardToken(KeyboardToken)+0x258>
c000c9a0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9a5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000c9ad:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c9b5:	c7 44 24 04 d2 c5 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c5d2
c000c9bd:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9c0:	e8 23 84 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000c9c5:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9cc:	eb 44                	jmp    c000ca12 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9ce:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9d2:	3d 01 02 00 00       	cmp    eax,0x201
c000c9d7:	75 39                	jne    c000ca12 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9d9:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000c9e0:	34 01                	xor    al,0x1
c000c9e2:	84 c0                	test   al,al
c000c9e4:	74 2c                	je     c000ca12 <sendKeyboardToken(KeyboardToken)+0x29c>
c000c9e6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9eb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000c9f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c9fb:	c7 44 24 04 41 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c641
c000ca03:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca06:	e8 dd 83 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c000ca0b:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca12:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca16:	3d 25 03 00 00       	cmp    eax,0x325
c000ca1b:	75 06                	jne    c000ca23 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000ca1d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca23:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca27:	3d 24 03 00 00       	cmp    eax,0x324
c000ca2c:	75 06                	jne    c000ca34 <sendKeyboardToken(KeyboardToken)+0x2be>
c000ca2e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca34:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca38:	3d 23 03 00 00       	cmp    eax,0x323
c000ca3d:	75 06                	jne    c000ca45 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000ca3f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca45:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca49:	3d 26 03 00 00       	cmp    eax,0x326
c000ca4e:	75 06                	jne    c000ca56 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000ca50:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca56:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca5a:	3d 27 03 00 00       	cmp    eax,0x327
c000ca5f:	75 06                	jne    c000ca67 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000ca61:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca67:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca6b:	3d 22 03 00 00       	cmp    eax,0x322
c000ca70:	75 06                	jne    c000ca78 <sendKeyboardToken(KeyboardToken)+0x302>
c000ca72:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ca78:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ca7c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000ca80:	34 01                	xor    al,0x1
c000ca82:	84 c0                	test   al,al
c000ca84:	74 73                	je     c000caf9 <sendKeyboardToken(KeyboardToken)+0x383>
c000ca86:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000ca8d:	84 c0                	test   al,al
c000ca8f:	74 3f                	je     c000cad0 <sendKeyboardToken(KeyboardToken)+0x35a>
c000ca91:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ca95:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000ca99:	74 29                	je     c000cac4 <sendKeyboardToken(KeyboardToken)+0x34e>
c000ca9b:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000caa1:	89 d0                	mov    eax,edx
c000caa3:	c1 e0 02             	shl    eax,0x2
c000caa6:	01 d0                	add    eax,edx
c000caa8:	01 c0                	add    eax,eax
c000caaa:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000caaf:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cab3:	8d 50 d0             	lea    edx,[eax-0x30]
c000cab6:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cabb:	01 d0                	add    eax,edx
c000cabd:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cac2:	eb 67                	jmp    c000cb2b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cac4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cace:	eb 5b                	jmp    c000cb2b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cad0:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cad5:	85 c0                	test   eax,eax
c000cad7:	74 14                	je     c000caed <sendKeyboardToken(KeyboardToken)+0x377>
c000cad9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cade:	0f b6 c0             	movzx  eax,al
c000cae1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cae4:	e8 c7 fb ff ff       	call   c000c6b0 <sendKeyToTerminal(unsigned char)>
c000cae9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caed:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000caf7:	eb 32                	jmp    c000cb2b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000caf9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cafd:	3d 01 01 00 00       	cmp    eax,0x101
c000cb02:	75 27                	jne    c000cb2b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cb04:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb09:	85 c0                	test   eax,eax
c000cb0b:	74 14                	je     c000cb21 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000cb0d:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb12:	0f b6 c0             	movzx  eax,al
c000cb15:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb18:	e8 93 fb ff ff       	call   c000c6b0 <sendKeyToTerminal(unsigned char)>
c000cb1d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb21:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb2b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cb2f:	34 01                	xor    al,0x1
c000cb31:	84 c0                	test   al,al
c000cb33:	74 4a                	je     c000cb7f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb35:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb39:	34 01                	xor    al,0x1
c000cb3b:	84 c0                	test   al,al
c000cb3d:	74 40                	je     c000cb7f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb3f:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cb46:	34 01                	xor    al,0x1
c000cb48:	84 c0                	test   al,al
c000cb4a:	74 33                	je     c000cb7f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb4c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb50:	83 f8 1f             	cmp    eax,0x1f
c000cb53:	76 09                	jbe    c000cb5e <sendKeyboardToken(KeyboardToken)+0x3e8>
c000cb55:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb59:	83 f8 7e             	cmp    eax,0x7e
c000cb5c:	76 12                	jbe    c000cb70 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cb5e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb62:	83 f8 0a             	cmp    eax,0xa
c000cb65:	74 09                	je     c000cb70 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cb67:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb6b:	83 f8 08             	cmp    eax,0x8
c000cb6e:	75 0f                	jne    c000cb7f <sendKeyboardToken(KeyboardToken)+0x409>
c000cb70:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb74:	0f b6 c0             	movzx  eax,al
c000cb77:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb7a:	e8 31 fb ff ff       	call   c000c6b0 <sendKeyToTerminal(unsigned char)>
c000cb7f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cb83:	34 01                	xor    al,0x1
c000cb85:	84 c0                	test   al,al
c000cb87:	74 4d                	je     c000cbd6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cb89:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb8d:	34 01                	xor    al,0x1
c000cb8f:	84 c0                	test   al,al
c000cb91:	74 43                	je     c000cbd6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cb93:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cb9a:	84 c0                	test   al,al
c000cb9c:	74 38                	je     c000cbd6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cb9e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cba2:	83 f8 3f             	cmp    eax,0x3f
c000cba5:	76 2f                	jbe    c000cbd6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cba7:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbab:	83 f8 7f             	cmp    eax,0x7f
c000cbae:	77 26                	ja     c000cbd6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cbb0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbb4:	88 c2                	mov    dl,al
c000cbb6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbba:	83 f8 5f             	cmp    eax,0x5f
c000cbbd:	76 04                	jbe    c000cbc3 <sendKeyboardToken(KeyboardToken)+0x44d>
c000cbbf:	b0 20                	mov    al,0x20
c000cbc1:	eb 02                	jmp    c000cbc5 <sendKeyboardToken(KeyboardToken)+0x44f>
c000cbc3:	b0 00                	mov    al,0x0
c000cbc5:	28 c2                	sub    dl,al
c000cbc7:	88 d0                	mov    al,dl
c000cbc9:	2c 40                	sub    al,0x40
c000cbcb:	0f b6 c0             	movzx  eax,al
c000cbce:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbd1:	e8 da fa ff ff       	call   c000c6b0 <sendKeyToTerminal(unsigned char)>
c000cbd6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbda:	3d 00 03 00 00       	cmp    eax,0x300
c000cbdf:	75 0f                	jne    c000cbf0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cbe1:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cbe5:	34 01                	xor    al,0x1
c000cbe7:	84 c0                	test   al,al
c000cbe9:	74 05                	je     c000cbf0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cbeb:	e8 8d b8 ff ff       	call   c000847d <doTerminalCycle()>
c000cbf0:	90                   	nop
c000cbf1:	c9                   	leave  
c000cbf2:	c3                   	ret    

c000cbf3 <clearInternalKeybuffer(VgaText*)>:
c000cbf3:	55                   	push   ebp
c000cbf4:	89 e5                	mov    ebp,esp
c000cbf6:	83 ec 18             	sub    esp,0x18
c000cbf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbfc:	05 02 01 00 00       	add    eax,0x102
c000cc01:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc04:	e8 87 39 ff ff       	call   c0000590 <strlen>
c000cc09:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc0c:	81 c2 02 01 00 00    	add    edx,0x102
c000cc12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc16:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000cc1e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cc21:	e8 ca 38 ff ff       	call   c00004f0 <memset>
c000cc26:	90                   	nop
c000cc27:	c9                   	leave  
c000cc28:	c3                   	ret    

c000cc29 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc29:	55                   	push   ebp
c000cc2a:	89 e5                	mov    ebp,esp
c000cc2c:	83 ec 28             	sub    esp,0x28
c000cc2f:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc34:	85 c0                	test   eax,eax
c000cc36:	74 23                	je     c000cc5b <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000cc38:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cc3e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc43:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000cc4b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000cc4e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cc51:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000cc54:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000cc59:	ff d0                	call   eax
c000cc5b:	fb                   	sti    
c000cc5c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cc63:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cc67:	0f 84 fa 00 00 00    	je     c000cd67 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000cc6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc70:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cc77:	84 c0                	test   al,al
c000cc79:	75 28                	jne    c000cca3 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000cc7b:	fa                   	cli    
c000cc7c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc81:	40                   	inc    eax
c000cc82:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cc87:	e8 b4 83 00 00       	call   c0015040 <schedule()>
c000cc8c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc91:	48                   	dec    eax
c000cc92:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cc97:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cc9c:	85 c0                	test   eax,eax
c000cc9e:	75 cd                	jne    c000cc6d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cca0:	fb                   	sti    
c000cca1:	eb ca                	jmp    c000cc6d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cca3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cca6:	8d 50 01             	lea    edx,[eax+0x1]
c000cca9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ccac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccaf:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000ccb6:	88 10                	mov    BYTE PTR [eax],dl
c000ccb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccbb:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000ccc2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ccc5:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000ccc9:	75 20                	jne    c000cceb <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000cccb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ccd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ccd5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000ccdb:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000cce3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cce6:	e8 a8 3e 00 00       	call   c0010b93 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cceb:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000ccef:	75 20                	jne    c000cd11 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000ccf1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ccf6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccf8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ccfb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd01:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000cd09:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd0c:	e8 82 3e 00 00       	call   c0010b93 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd14:	05 02 01 00 00       	add    eax,0x102
c000cd19:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd1c:	e8 6f 38 ff ff       	call   c0000590 <strlen>
c000cd21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd24:	81 c2 02 01 00 00    	add    edx,0x102
c000cd2a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd2d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd30:	81 c2 02 01 00 00    	add    edx,0x102
c000cd36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd3a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd3e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cd41:	e8 8a 36 ff ff       	call   c00003d0 <memmove>
c000cd46:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000cd49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000cd4c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000cd50:	74 10                	je     c000cd62 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cd52:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cd56:	74 0a                	je     c000cd62 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000cd58:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cd5c:	0f 85 01 ff ff ff    	jne    c000cc63 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000cd62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd65:	eb 03                	jmp    c000cd6a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000cd67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cd6a:	c9                   	leave  
c000cd6b:	c3                   	ret    

c000cd6c <Keyboard::Keyboard(char const*)>:
c000cd6c:	83 ec 1c             	sub    esp,0x1c
c000cd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cd73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cd77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000cd7e:	e8 17 f2 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000cd83:	ba fc 01 02 c0       	mov    edx,0xc00201fc
c000cd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cd8c:	89 10                	mov    DWORD PTR [eax],edx
c000cd8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cd92:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cd9c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000cda3:	90                   	nop
c000cda4:	83 c4 1c             	add    esp,0x1c
c000cda7:	c3                   	ret    

c000cda8 <Keyboard::~Keyboard()>:
c000cda8:	83 ec 1c             	sub    esp,0x1c
c000cdab:	ba fc 01 02 c0       	mov    edx,0xc00201fc
c000cdb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdb4:	89 10                	mov    DWORD PTR [eax],edx
c000cdb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdba:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdbd:	e8 44 ef ff ff       	call   c000bd06 <Device::~Device()>
c000cdc2:	90                   	nop
c000cdc3:	83 c4 1c             	add    esp,0x1c
c000cdc6:	c3                   	ret    
c000cdc7:	90                   	nop

c000cdc8 <Keyboard::~Keyboard()>:
c000cdc8:	83 ec 1c             	sub    esp,0x1c
c000cdcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cdcf:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdd2:	e8 d1 ff ff ff       	call   c000cda8 <Keyboard::~Keyboard()>
c000cdd7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cde3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cde6:	e8 d1 da ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000cdeb:	83 c4 1c             	add    esp,0x1c
c000cdee:	c3                   	ret    
c000cdef:	90                   	nop

c000cdf0 <LogicalDisk::close(int, int, void*)>:
c000cdf0:	83 c8 ff             	or     eax,0xffffffff
c000cdf3:	c3                   	ret    

c000cdf4 <LogicalDisk::~LogicalDisk()>:
c000cdf4:	83 ec 1c             	sub    esp,0x1c
c000cdf7:	ba 74 02 02 c0       	mov    edx,0xc0020274
c000cdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce00:	89 10                	mov    DWORD PTR [eax],edx
c000ce02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce06:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce09:	e8 f8 ee ff ff       	call   c000bd06 <Device::~Device()>
c000ce0e:	90                   	nop
c000ce0f:	83 c4 1c             	add    esp,0x1c
c000ce12:	c3                   	ret    
c000ce13:	90                   	nop

c000ce14 <LogicalDisk::~LogicalDisk()>:
c000ce14:	83 ec 1c             	sub    esp,0x1c
c000ce17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce1b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce1e:	e8 d1 ff ff ff       	call   c000cdf4 <LogicalDisk::~LogicalDisk()>
c000ce23:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000ce2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce32:	e8 85 da ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000ce37:	83 c4 1c             	add    esp,0x1c
c000ce3a:	c3                   	ret    
c000ce3b:	90                   	nop

c000ce3c <LogicalDisk::open(int, int, void*)>:
c000ce3c:	83 ec 18             	sub    esp,0x18
c000ce3f:	68 28 02 02 c0       	push   0xc0020228
c000ce44:	e8 dc 38 00 00       	call   c0010725 <KePanic(char const*)>
c000ce49:	83 c8 ff             	or     eax,0xffffffff
c000ce4c:	83 c4 1c             	add    esp,0x1c
c000ce4f:	c3                   	ret    

c000ce50 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ce50:	53                   	push   ebx
c000ce51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ce59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ce5d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ce63:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ce69:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ce6f:	77 10                	ja     c000ce81 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ce71:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ce77:	89 d3                	mov    ebx,edx
c000ce79:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ce7f:	72 05                	jb     c000ce86 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ce81:	83 c8 ff             	or     eax,0xffffffff
c000ce84:	89 c2                	mov    edx,eax
c000ce86:	5b                   	pop    ebx
c000ce87:	c3                   	ret    

c000ce88 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ce88:	56                   	push   esi
c000ce89:	83 c8 ff             	or     eax,0xffffffff
c000ce8c:	53                   	push   ebx
c000ce8d:	89 c2                	mov    edx,eax
c000ce8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce93:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ce97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cea1:	77 27                	ja     c000ceca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cea3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cea9:	89 d8                	mov    eax,ebx
c000ceab:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ceb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ceb6:	89 c2                	mov    edx,eax
c000ceb8:	73 10                	jae    c000ceca <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ceba:	89 c8                	mov    eax,ecx
c000cebc:	89 da                	mov    edx,ebx
c000cebe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cec4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ceca:	5b                   	pop    ebx
c000cecb:	5e                   	pop    esi
c000cecc:	c3                   	ret    
c000cecd:	90                   	nop

c000cece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cece:	83 ec 2c             	sub    esp,0x2c
c000ced1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ced5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ced9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cedd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cee1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cee5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cee9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ceed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cef5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cef9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cefd:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf00:	e8 95 f0 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000cf05:	ba 74 02 02 c0       	mov    edx,0xc0020274
c000cf0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf0e:	89 10                	mov    DWORD PTR [eax],edx
c000cf10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf14:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf1f:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cf26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf2a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf35:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cf3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cf43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cf4b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cf51:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cf57:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000cf5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf63:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cf69:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cf6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf73:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000cf77:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cf7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf81:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cf8b:	90                   	nop
c000cf8c:	83 c4 2c             	add    esp,0x2c
c000cf8f:	c3                   	ret    

c000cf90 <LogicalDisk::assignDriveLetter()>:
c000cf90:	55                   	push   ebp
c000cf91:	57                   	push   edi
c000cf92:	56                   	push   esi
c000cf93:	53                   	push   ebx
c000cf94:	83 ec 14             	sub    esp,0x14
c000cf97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf9b:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000cfa1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cfa7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cfab:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000cfb1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cfb7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cfbb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cfbf:	3c 01                	cmp    al,0x1
c000cfc1:	19 c0                	sbb    eax,eax
c000cfc3:	24 02                	and    al,0x2
c000cfc5:	04 41                	add    al,0x41
c000cfc7:	0f be e8             	movsx  ebp,al
c000cfca:	3c 43                	cmp    al,0x43
c000cfcc:	75 10                	jne    c000cfde <LogicalDisk::assignDriveLetter()+0x4e>
c000cfce:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cfd5:	75 5d                	jne    c000d034 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfd7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cfdc:	75 56                	jne    c000d034 <LogicalDisk::assignDriveLetter()+0xa4>
c000cfde:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cfe1:	ba 01 00 00 00       	mov    edx,0x1
c000cfe6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cfea:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cfee:	d3 e2                	shl    edx,cl
c000cff0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cff4:	89 d7                	mov    edi,edx
c000cff6:	89 d6                	mov    esi,edx
c000cff8:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cffc:	c1 ff 1f             	sar    edi,0x1f
c000cfff:	21 f9                	and    ecx,edi
c000d001:	09 d1                	or     ecx,edx
c000d003:	75 2f                	jne    c000d034 <LogicalDisk::assignDriveLetter()+0xa4>
c000d005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d009:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d00d:	09 f2                	or     edx,esi
c000d00f:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d015:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d019:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d01f:	09 fa                	or     edx,edi
c000d021:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d025:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d02b:	89 1c bd 20 74 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8be0],ebx
c000d032:	eb 09                	jmp    c000d03d <LogicalDisk::assignDriveLetter()+0xad>
c000d034:	fe c0                	inc    al
c000d036:	45                   	inc    ebp
c000d037:	3c 5b                	cmp    al,0x5b
c000d039:	75 8f                	jne    c000cfca <LogicalDisk::assignDriveLetter()+0x3a>
c000d03b:	31 c0                	xor    eax,eax
c000d03d:	83 c4 14             	add    esp,0x14
c000d040:	5b                   	pop    ebx
c000d041:	5e                   	pop    esi
c000d042:	5f                   	pop    edi
c000d043:	5d                   	pop    ebp
c000d044:	c3                   	ret    
c000d045:	90                   	nop

c000d046 <LogicalDisk::mount()>:
c000d046:	56                   	push   esi
c000d047:	53                   	push   ebx
c000d048:	53                   	push   ebx
c000d049:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d04d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d053:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d05d:	85 db                	test   ebx,ebx
c000d05f:	74 27                	je     c000d088 <LogicalDisk::mount()+0x42>
c000d061:	51                   	push   ecx
c000d062:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d069:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d06b:	83 e8 41             	sub    eax,0x41
c000d06e:	50                   	push   eax
c000d06f:	56                   	push   esi
c000d070:	53                   	push   ebx
c000d071:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d074:	83 c4 10             	add    esp,0x10
c000d077:	84 c0                	test   al,al
c000d079:	74 08                	je     c000d083 <LogicalDisk::mount()+0x3d>
c000d07b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d081:	eb 07                	jmp    c000d08a <LogicalDisk::mount()+0x44>
c000d083:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d086:	eb d5                	jmp    c000d05d <LogicalDisk::mount()+0x17>
c000d088:	31 c0                	xor    eax,eax
c000d08a:	5a                   	pop    edx
c000d08b:	5b                   	pop    ebx
c000d08c:	5e                   	pop    esi
c000d08d:	c3                   	ret    

c000d08e <LogicalDisk::unmount()>:
c000d08e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d092:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d09c:	c3                   	ret    
c000d09d:	90                   	nop

c000d09e <LogicalDisk::eject()>:
c000d09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d0a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d0aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d0ae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d0b1:	90                   	nop

c000d0b2 <LogicalDisk::unassignDriveLetter()>:
c000d0b2:	57                   	push   edi
c000d0b3:	56                   	push   esi
c000d0b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0b8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d0bf:	84 c9                	test   cl,cl
c000d0c1:	75 0f                	jne    c000d0d2 <LogicalDisk::unassignDriveLetter()+0x20>
c000d0c3:	c7 44 24 0c 4c 02 02 c0 	mov    DWORD PTR [esp+0xc],0xc002024c
c000d0cb:	5e                   	pop    esi
c000d0cc:	5f                   	pop    edi
c000d0cd:	e9 53 36 00 00       	jmp    c0010725 <KePanic(char const*)>
c000d0d2:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d0d9:	83 e9 41             	sub    ecx,0x41
c000d0dc:	b8 01 00 00 00       	mov    eax,0x1
c000d0e1:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d0ec:	d3 e0                	shl    eax,cl
c000d0ee:	89 c7                	mov    edi,eax
c000d0f0:	f7 d0                	not    eax
c000d0f2:	c1 ff 1f             	sar    edi,0x1f
c000d0f5:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d0fb:	89 fe                	mov    esi,edi
c000d0fd:	f7 d6                	not    esi
c000d0ff:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d105:	5e                   	pop    esi
c000d106:	5f                   	pop    edi
c000d107:	c3                   	ret    

c000d108 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d108:	57                   	push   edi
c000d109:	56                   	push   esi
c000d10a:	53                   	push   ebx
c000d10b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d10f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d113:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d117:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d11b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d121:	77 41                	ja     c000d164 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d123:	99                   	cdq    
c000d124:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d12a:	01 c8                	add    eax,ecx
c000d12c:	11 da                	adc    edx,ebx
c000d12e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d134:	19 d7                	sbb    edi,edx
c000d136:	72 33                	jb     c000d16b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d138:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d13e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d144:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d148:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d14c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d152:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d15c:	5b                   	pop    ebx
c000d15d:	5e                   	pop    esi
c000d15e:	5f                   	pop    edi
c000d15f:	e9 92 0a 00 00       	jmp    c000dbf6 <VCache::read(unsigned long long, int, void*)>
c000d164:	b8 05 00 00 00       	mov    eax,0x5
c000d169:	eb 05                	jmp    c000d170 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d16b:	b8 07 00 00 00       	mov    eax,0x7
c000d170:	5b                   	pop    ebx
c000d171:	5e                   	pop    esi
c000d172:	5f                   	pop    edi
c000d173:	c3                   	ret    

c000d174 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d174:	57                   	push   edi
c000d175:	56                   	push   esi
c000d176:	53                   	push   ebx
c000d177:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d17b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d17f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d183:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d187:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d18d:	77 41                	ja     c000d1d0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d18f:	99                   	cdq    
c000d190:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d196:	01 c8                	add    eax,ecx
c000d198:	11 da                	adc    edx,ebx
c000d19a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1a0:	19 d7                	sbb    edi,edx
c000d1a2:	72 33                	jb     c000d1d7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d1a4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1aa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1b4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1b8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1c8:	5b                   	pop    ebx
c000d1c9:	5e                   	pop    esi
c000d1ca:	5f                   	pop    edi
c000d1cb:	e9 2c 09 00 00       	jmp    c000dafc <VCache::write(unsigned long long, int, void*)>
c000d1d0:	b8 05 00 00 00       	mov    eax,0x5
c000d1d5:	eb 05                	jmp    c000d1dc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d1d7:	b8 07 00 00 00       	mov    eax,0x7
c000d1dc:	5b                   	pop    ebx
c000d1dd:	5e                   	pop    esi
c000d1de:	5f                   	pop    edi
c000d1df:	c3                   	ret    

c000d1e0 <Mouse::Mouse(char const*)>:
c000d1e0:	83 ec 1c             	sub    esp,0x1c
c000d1e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d1e7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d1eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1f2:	e8 a3 ed ff ff       	call   c000bf9a <Device::Device(char const*)>
c000d1f7:	ba a0 02 02 c0       	mov    edx,0xc00202a0
c000d1fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d200:	89 10                	mov    DWORD PTR [eax],edx
c000d202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d206:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d210:	90                   	nop
c000d211:	83 c4 1c             	add    esp,0x1c
c000d214:	c3                   	ret    
c000d215:	90                   	nop
c000d216:	66 90                	xchg   ax,ax

c000d218 <Mouse::~Mouse()>:
c000d218:	83 ec 1c             	sub    esp,0x1c
c000d21b:	ba a0 02 02 c0       	mov    edx,0xc00202a0
c000d220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d224:	89 10                	mov    DWORD PTR [eax],edx
c000d226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d22a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d22d:	e8 d4 ea ff ff       	call   c000bd06 <Device::~Device()>
c000d232:	90                   	nop
c000d233:	83 c4 1c             	add    esp,0x1c
c000d236:	c3                   	ret    
c000d237:	90                   	nop

c000d238 <Mouse::~Mouse()>:
c000d238:	83 ec 1c             	sub    esp,0x1c
c000d23b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d23f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d242:	e8 d1 ff ff ff       	call   c000d218 <Mouse::~Mouse()>
c000d247:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d24f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d253:	89 04 24             	mov    DWORD PTR [esp],eax
c000d256:	e8 61 d6 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000d25b:	83 c4 1c             	add    esp,0x1c
c000d25e:	c3                   	ret    
c000d25f:	90                   	nop

c000d260 <NIC::getMAC()>:
c000d260:	31 c0                	xor    eax,eax
c000d262:	31 d2                	xor    edx,edx
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <NIC::write(int, unsigned char*, int*)>:
c000d266:	b8 01 00 00 00       	mov    eax,0x1
c000d26b:	c3                   	ret    

c000d26c <NIC::NIC(char const*)>:
c000d26c:	83 ec 1c             	sub    esp,0x1c
c000d26f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d273:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d277:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d27b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d27e:	e8 17 ed ff ff       	call   c000bf9a <Device::Device(char const*)>
c000d283:	ba cc 02 02 c0       	mov    edx,0xc00202cc
c000d288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d28c:	89 10                	mov    DWORD PTR [eax],edx
c000d28e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d292:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d29c:	90                   	nop
c000d29d:	83 c4 1c             	add    esp,0x1c
c000d2a0:	c3                   	ret    
c000d2a1:	90                   	nop

c000d2a2 <NIC::~NIC()>:
c000d2a2:	83 ec 1c             	sub    esp,0x1c
c000d2a5:	ba cc 02 02 c0       	mov    edx,0xc00202cc
c000d2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ae:	89 10                	mov    DWORD PTR [eax],edx
c000d2b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2b7:	e8 4a ea ff ff       	call   c000bd06 <Device::~Device()>
c000d2bc:	90                   	nop
c000d2bd:	83 c4 1c             	add    esp,0x1c
c000d2c0:	c3                   	ret    
c000d2c1:	90                   	nop

c000d2c2 <NIC::~NIC()>:
c000d2c2:	83 ec 1c             	sub    esp,0x1c
c000d2c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2cc:	e8 d1 ff ff ff       	call   c000d2a2 <NIC::~NIC()>
c000d2d1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d2d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2dd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2e0:	e8 d7 d5 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000d2e5:	83 c4 1c             	add    esp,0x1c
c000d2e8:	c3                   	ret    

c000d2e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d2e9:	55                   	push   ebp
c000d2ea:	57                   	push   edi
c000d2eb:	56                   	push   esi
c000d2ec:	53                   	push   ebx
c000d2ed:	81 ec 28 01 00 00    	sub    esp,0x128
c000d2f3:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d2fa:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d301:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d308:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d30f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d313:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d317:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d31e:	e8 71 ed ff ff       	call   c000c094 <Device::getName()>
c000d323:	5a                   	pop    edx
c000d324:	59                   	pop    ecx
c000d325:	50                   	push   eax
c000d326:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d32a:	55                   	push   ebp
c000d32b:	e8 60 33 ff ff       	call   c0000690 <strcpy>
c000d330:	5b                   	pop    ebx
c000d331:	58                   	pop    eax
c000d332:	68 f8 02 02 c0       	push   0xc00202f8
c000d337:	55                   	push   ebp
c000d338:	e8 63 35 ff ff       	call   c00008a0 <strcat>
c000d33d:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d344:	e8 1d a7 ff ff       	call   c0007a66 <malloc>
c000d349:	83 c4 0c             	add    esp,0xc
c000d34c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d350:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d354:	89 c3                	mov    ebx,eax
c000d356:	57                   	push   edi
c000d357:	56                   	push   esi
c000d358:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d35f:	55                   	push   ebp
c000d360:	50                   	push   eax
c000d361:	e8 68 fb ff ff       	call   c000cece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d366:	83 c4 14             	add    esp,0x14
c000d369:	53                   	push   ebx
c000d36a:	e8 21 fc ff ff       	call   c000cf90 <LogicalDisk::assignDriveLetter()>
c000d36f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d372:	e8 cf fc ff ff       	call   c000d046 <LogicalDisk::mount()>
c000d377:	58                   	pop    eax
c000d378:	5a                   	pop    edx
c000d379:	53                   	push   ebx
c000d37a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d381:	e8 7c ea ff ff       	call   c000be02 <Device::addChild(Device*)>
c000d386:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d38c:	5b                   	pop    ebx
c000d38d:	5e                   	pop    esi
c000d38e:	5f                   	pop    edi
c000d38f:	5d                   	pop    ebp
c000d390:	c3                   	ret    

c000d391 <createPartitionsForDisk(PhysicalDisk*)>:
c000d391:	55                   	push   ebp
c000d392:	57                   	push   edi
c000d393:	56                   	push   esi
c000d394:	53                   	push   ebx
c000d395:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d39b:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d3a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d3a8:	3d 00 02 00 00       	cmp    eax,0x200
c000d3ad:	74 27                	je     c000d3d6 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d3af:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d3b5:	83 ec 10             	sub    esp,0x10
c000d3b8:	99                   	cdq    
c000d3b9:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d3bf:	52                   	push   edx
c000d3c0:	50                   	push   eax
c000d3c1:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d3c5:	c1 e6 0a             	shl    esi,0xa
c000d3c8:	89 fd                	mov    ebp,edi
c000d3ca:	55                   	push   ebp
c000d3cb:	56                   	push   esi
c000d3cc:	e8 2f 0f 01 00       	call   c001e300 <__udivdi3>
c000d3d1:	e9 ae 00 00 00       	jmp    c000d484 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d3d6:	83 ec 0c             	sub    esp,0xc
c000d3d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3db:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d3df:	56                   	push   esi
c000d3e0:	6a 01                	push   0x1
c000d3e2:	6a 00                	push   0x0
c000d3e4:	6a 00                	push   0x0
c000d3e6:	53                   	push   ebx
c000d3e7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d3ea:	83 c4 20             	add    esp,0x20
c000d3ed:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d3f5:	75 0a                	jne    c000d401 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d3f7:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d3ff:	74 2c                	je     c000d42d <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d401:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d407:	83 ec 10             	sub    esp,0x10
c000d40a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d410:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d416:	89 f7                	mov    edi,esi
c000d418:	c1 ff 1f             	sar    edi,0x1f
c000d41b:	57                   	push   edi
c000d41c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d420:	56                   	push   esi
c000d421:	c1 e0 0a             	shl    eax,0xa
c000d424:	52                   	push   edx
c000d425:	50                   	push   eax
c000d426:	e8 d5 0e 01 00       	call   c001e300 <__udivdi3>
c000d42b:	eb 57                	jmp    c000d484 <createPartitionsForDisk(PhysicalDisk*)+0xf3>
c000d42d:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d434:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d43b:	80 e1 7f             	and    cl,0x7f
c000d43e:	24 7f                	and    al,0x7f
c000d440:	00 c1                	add    cl,al
c000d442:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d449:	24 7f                	and    al,0x7f
c000d44b:	00 c1                	add    cl,al
c000d44d:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d454:	24 7f                	and    al,0x7f
c000d456:	00 c1                	add    cl,al
c000d458:	74 41                	je     c000d49b <createPartitionsForDisk(PhysicalDisk*)+0x10a>
c000d45a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d460:	83 ec 10             	sub    esp,0x10
c000d463:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d469:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d46f:	89 f7                	mov    edi,esi
c000d471:	c1 ff 1f             	sar    edi,0x1f
c000d474:	57                   	push   edi
c000d475:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d479:	56                   	push   esi
c000d47a:	c1 e0 0a             	shl    eax,0xa
c000d47d:	52                   	push   edx
c000d47e:	50                   	push   eax
c000d47f:	e8 7c 0e 01 00       	call   c001e300 <__udivdi3>
c000d484:	83 c4 14             	add    esp,0x14
c000d487:	52                   	push   edx
c000d488:	50                   	push   eax
c000d489:	6a 00                	push   0x0
c000d48b:	6a 00                	push   0x0
c000d48d:	53                   	push   ebx
c000d48e:	e8 56 fe ff ff       	call   c000d2e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d493:	83 c4 20             	add    esp,0x20
c000d496:	e9 79 01 00 00       	jmp    c000d614 <createPartitionsForDisk(PhysicalDisk*)+0x283>
c000d49b:	89 f0                	mov    eax,esi
c000d49d:	31 d2                	xor    edx,edx
c000d49f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d4a6:	75 02                	jne    c000d4aa <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d4a8:	88 d1                	mov    cl,dl
c000d4aa:	c7 44 d4 14 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x14],0x0
c000d4b2:	0f b6 b0 c7 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c7]
c000d4b9:	83 c0 10             	add    eax,0x10
c000d4bc:	c7 44 d4 34 00 00 00 00 	mov    DWORD PTR [esp+edx*8+0x34],0x0
c000d4c4:	0f b6 b8 b8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b8]
c000d4cb:	c1 e6 08             	shl    esi,0x8
c000d4ce:	c1 e7 10             	shl    edi,0x10
c000d4d1:	09 fe                	or     esi,edi
c000d4d3:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c000d4da:	09 fe                	or     esi,edi
c000d4dc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d4e3:	c1 e7 18             	shl    edi,0x18
c000d4e6:	09 fe                	or     esi,edi
c000d4e8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d4ef:	89 74 d4 10          	mov    DWORD PTR [esp+edx*8+0x10],esi
c000d4f3:	0f b6 b0 bb 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bb]
c000d4fa:	c1 e7 10             	shl    edi,0x10
c000d4fd:	c1 e6 08             	shl    esi,0x8
c000d500:	09 fe                	or     esi,edi
c000d502:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d509:	09 fe                	or     esi,edi
c000d50b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d512:	c1 e7 18             	shl    edi,0x18
c000d515:	09 fe                	or     esi,edi
c000d517:	89 74 d4 30          	mov    DWORD PTR [esp+edx*8+0x30],esi
c000d51b:	42                   	inc    edx
c000d51c:	83 fa 04             	cmp    edx,0x4
c000d51f:	0f 85 7a ff ff ff    	jne    c000d49f <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d529:	83 f0 01             	xor    eax,0x1
c000d52c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d530:	75 57                	jne    c000d589 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d536:	83 f0 01             	xor    eax,0x1
c000d539:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d53d:	75 4a                	jne    c000d589 <createPartitionsForDisk(PhysicalDisk*)+0x1f8>
c000d53f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d545:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d549:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d54f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d557:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d55d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d565:	89 f7                	mov    edi,esi
c000d567:	c1 ff 1f             	sar    edi,0x1f
c000d56a:	57                   	push   edi
c000d56b:	56                   	push   esi
c000d56c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d570:	52                   	push   edx
c000d571:	c1 e0 0a             	shl    eax,0xa
c000d574:	50                   	push   eax
c000d575:	e8 86 0d 01 00       	call   c001e300 <__udivdi3>
c000d57a:	83 c4 10             	add    esp,0x10
c000d57d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d581:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d585:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d589:	84 c9                	test   cl,cl
c000d58b:	74 53                	je     c000d5e0 <createPartitionsForDisk(PhysicalDisk*)+0x24f>
c000d58d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d591:	0f b6 c9             	movzx  ecx,cl
c000d594:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d598:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d59c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d5a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5a4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d5a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5ac:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d5b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d5b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d5c0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d5c4:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d5c8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d5cc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d5d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5d4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5d8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d5dc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d5e0:	31 ed                	xor    ebp,ebp
c000d5e2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d5e6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d5ea:	89 f8                	mov    eax,edi
c000d5ec:	09 f0                	or     eax,esi
c000d5ee:	74 1e                	je     c000d60e <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d5f0:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d5f4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d5f8:	89 d1                	mov    ecx,edx
c000d5fa:	09 c1                	or     ecx,eax
c000d5fc:	74 10                	je     c000d60e <createPartitionsForDisk(PhysicalDisk*)+0x27d>
c000d5fe:	83 ec 0c             	sub    esp,0xc
c000d601:	57                   	push   edi
c000d602:	56                   	push   esi
c000d603:	52                   	push   edx
c000d604:	50                   	push   eax
c000d605:	53                   	push   ebx
c000d606:	e8 de fc ff ff       	call   c000d2e9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d60b:	83 c4 20             	add    esp,0x20
c000d60e:	45                   	inc    ebp
c000d60f:	83 fd 04             	cmp    ebp,0x4
c000d612:	75 ce                	jne    c000d5e2 <createPartitionsForDisk(PhysicalDisk*)+0x251>
c000d614:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d61a:	5b                   	pop    ebx
c000d61b:	5e                   	pop    esi
c000d61c:	5f                   	pop    edi
c000d61d:	5d                   	pop    ebp
c000d61e:	c3                   	ret    
c000d61f:	90                   	nop

c000d620 <Serial::Serial(char const*)>:
c000d620:	83 ec 1c             	sub    esp,0x1c
c000d623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d627:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d62b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d62f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d632:	e8 63 e9 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000d637:	ba 0c 03 02 c0       	mov    edx,0xc002030c
c000d63c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d640:	89 10                	mov    DWORD PTR [eax],edx
c000d642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d646:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d650:	90                   	nop
c000d651:	83 c4 1c             	add    esp,0x1c
c000d654:	c3                   	ret    
c000d655:	90                   	nop
c000d656:	66 90                	xchg   ax,ax

c000d658 <Serial::~Serial()>:
c000d658:	83 ec 1c             	sub    esp,0x1c
c000d65b:	ba 0c 03 02 c0       	mov    edx,0xc002030c
c000d660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d664:	89 10                	mov    DWORD PTR [eax],edx
c000d666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d66d:	e8 94 e6 ff ff       	call   c000bd06 <Device::~Device()>
c000d672:	90                   	nop
c000d673:	83 c4 1c             	add    esp,0x1c
c000d676:	c3                   	ret    
c000d677:	90                   	nop

c000d678 <Serial::~Serial()>:
c000d678:	83 ec 1c             	sub    esp,0x1c
c000d67b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d682:	e8 d1 ff ff ff       	call   c000d658 <Serial::~Serial()>
c000d687:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d693:	89 04 24             	mov    DWORD PTR [esp],eax
c000d696:	e8 21 d2 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000d69b:	83 c4 1c             	add    esp,0x1c
c000d69e:	c3                   	ret    
c000d69f:	90                   	nop

c000d6a0 <Timer::Timer(char const*)>:
c000d6a0:	83 ec 1c             	sub    esp,0x1c
c000d6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d6ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d6af:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6b2:	e8 e3 e8 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000d6b7:	ba 50 03 02 c0       	mov    edx,0xc0020350
c000d6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c0:	89 10                	mov    DWORD PTR [eax],edx
c000d6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d6d0:	90                   	nop
c000d6d1:	83 c4 1c             	add    esp,0x1c
c000d6d4:	c3                   	ret    
c000d6d5:	90                   	nop
c000d6d6:	66 90                	xchg   ax,ax

c000d6d8 <Timer::~Timer()>:
c000d6d8:	83 ec 1c             	sub    esp,0x1c
c000d6db:	ba 50 03 02 c0       	mov    edx,0xc0020350
c000d6e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e4:	89 10                	mov    DWORD PTR [eax],edx
c000d6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c000d6ed:	e8 14 e6 ff ff       	call   c000bd06 <Device::~Device()>
c000d6f2:	90                   	nop
c000d6f3:	83 c4 1c             	add    esp,0x1c
c000d6f6:	c3                   	ret    
c000d6f7:	90                   	nop

c000d6f8 <Timer::~Timer()>:
c000d6f8:	83 ec 1c             	sub    esp,0x1c
c000d6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d702:	e8 d1 ff ff ff       	call   c000d6d8 <Timer::~Timer()>
c000d707:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d70f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d713:	89 04 24             	mov    DWORD PTR [esp],eax
c000d716:	e8 a1 d1 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000d71b:	83 c4 1c             	add    esp,0x1c
c000d71e:	c3                   	ret    
c000d71f:	90                   	nop

c000d720 <Timer::read()>:
c000d720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d724:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d72a:	c3                   	ret    

c000d72b <setupTimer(int)>:
c000d72b:	53                   	push   ebx
c000d72c:	83 ec 14             	sub    esp,0x14
c000d72f:	68 5c 01 00 00       	push   0x15c
c000d734:	e8 2d a3 ff ff       	call   c0007a66 <malloc>
c000d739:	89 04 24             	mov    DWORD PTR [esp],eax
c000d73c:	89 c3                	mov    ebx,eax
c000d73e:	e8 29 04 01 00       	call   c001db6c <PIT::PIT()>
c000d743:	58                   	pop    eax
c000d744:	5a                   	pop    edx
c000d745:	53                   	push   ebx
c000d746:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d74c:	e8 b1 e6 ff ff       	call   c000be02 <Device::addChild(Device*)>
c000d751:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d753:	6a 00                	push   0x0
c000d755:	6a 00                	push   0x0
c000d757:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d75b:	53                   	push   ebx
c000d75c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d75f:	83 c4 28             	add    esp,0x28
c000d762:	89 d8                	mov    eax,ebx
c000d764:	5b                   	pop    ebx
c000d765:	c3                   	ret    

c000d766 <timerHandler(unsigned int)>:
c000d766:	56                   	push   esi
c000d767:	53                   	push   ebx
c000d768:	51                   	push   ecx
c000d769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76d:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d773:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d77a:	0f 84 48 01 00 00    	je     c000d8c8 <timerHandler(unsigned int)+0x162>
c000d780:	fa                   	cli    
c000d781:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d787:	83 ec 0c             	sub    esp,0xc
c000d78a:	68 78 81 02 c0       	push   0xc0028178
c000d78f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d795:	e8 0e 11 01 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d79a:	83 c4 10             	add    esp,0x10
c000d79d:	84 c0                	test   al,al
c000d79f:	0f 85 9f 00 00 00    	jne    c000d844 <timerHandler(unsigned int)+0xde>
c000d7a5:	83 ec 0c             	sub    esp,0xc
c000d7a8:	68 78 81 02 c0       	push   0xc0028178
c000d7ad:	e8 12 11 01 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7b2:	83 c4 10             	add    esp,0x10
c000d7b5:	89 c6                	mov    esi,eax
c000d7b7:	90                   	nop
c000d7b8:	83 ec 0c             	sub    esp,0xc
c000d7bb:	68 78 81 02 c0       	push   0xc0028178
c000d7c0:	e8 ff 10 01 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7c5:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d7cc:	89 c3                	mov    ebx,eax
c000d7ce:	e8 f9 10 01 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d7d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d7d6:	83 c4 10             	add    esp,0x10
c000d7d9:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d7df:	77 23                	ja     c000d804 <timerHandler(unsigned int)+0x9e>
c000d7e1:	83 ec 0c             	sub    esp,0xc
c000d7e4:	53                   	push   ebx
c000d7e5:	e8 de 7c 00 00       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c000d7ea:	83 c4 10             	add    esp,0x10
c000d7ed:	39 de                	cmp    esi,ebx
c000d7ef:	75 27                	jne    c000d818 <timerHandler(unsigned int)+0xb2>
c000d7f1:	83 ec 0c             	sub    esp,0xc
c000d7f4:	68 78 81 02 c0       	push   0xc0028178
c000d7f9:	e8 c6 10 01 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d7fe:	89 c6                	mov    esi,eax
c000d800:	eb 12                	jmp    c000d814 <timerHandler(unsigned int)+0xae>
c000d802:	66 90                	xchg   ax,ax
c000d804:	52                   	push   edx
c000d805:	52                   	push   edx
c000d806:	53                   	push   ebx
c000d807:	68 78 81 02 c0       	push   0xc0028178
c000d80c:	e8 67 11 01 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d811:	8d 76 00             	lea    esi,[esi+0x0]
c000d814:	83 c4 10             	add    esp,0x10
c000d817:	90                   	nop
c000d818:	83 ec 0c             	sub    esp,0xc
c000d81b:	68 78 81 02 c0       	push   0xc0028178
c000d820:	e8 83 10 01 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	84 c0                	test   al,al
c000d82a:	75 18                	jne    c000d844 <timerHandler(unsigned int)+0xde>
c000d82c:	83 ec 0c             	sub    esp,0xc
c000d82f:	68 78 81 02 c0       	push   0xc0028178
c000d834:	e8 8b 10 01 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d839:	83 c4 10             	add    esp,0x10
c000d83c:	39 f0                	cmp    eax,esi
c000d83e:	0f 85 74 ff ff ff    	jne    c000d7b8 <timerHandler(unsigned int)+0x52>
c000d844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d849:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d84d:	74 41                	je     c000d890 <timerHandler(unsigned int)+0x12a>
c000d84f:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d856:	74 38                	je     c000d890 <timerHandler(unsigned int)+0x12a>
c000d858:	fa                   	cli    
c000d859:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d85f:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d864:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d86a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d86d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d873:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d876:	72 08                	jb     c000d880 <timerHandler(unsigned int)+0x11a>
c000d878:	e8 c3 77 00 00       	call   c0015040 <schedule()>
c000d87d:	8d 76 00             	lea    esi,[esi+0x0]
c000d880:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d885:	48                   	dec    eax
c000d886:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d88b:	75 03                	jne    c000d890 <timerHandler(unsigned int)+0x12a>
c000d88d:	fb                   	sti    
c000d88e:	66 90                	xchg   ax,ax
c000d890:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d895:	48                   	dec    eax
c000d896:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d89b:	75 1b                	jne    c000d8b8 <timerHandler(unsigned int)+0x152>
c000d89d:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d8a4:	74 12                	je     c000d8b8 <timerHandler(unsigned int)+0x152>
c000d8a6:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d8b0:	e8 8b 77 00 00       	call   c0015040 <schedule()>
c000d8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d8bd:	48                   	dec    eax
c000d8be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d8c3:	75 03                	jne    c000d8c8 <timerHandler(unsigned int)+0x162>
c000d8c5:	fb                   	sti    
c000d8c6:	66 90                	xchg   ax,ax
c000d8c8:	58                   	pop    eax
c000d8c9:	5b                   	pop    ebx
c000d8ca:	5e                   	pop    esi
c000d8cb:	c3                   	ret    

c000d8cc <VCache::VCache(PhysicalDisk*)>:
c000d8cc:	53                   	push   ebx
c000d8cd:	83 ec 28             	sub    esp,0x28
c000d8d0:	ba 80 03 02 c0       	mov    edx,0xc0020380
c000d8d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8d9:	89 10                	mov    DWORD PTR [eax],edx
c000d8db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8df:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d8e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8ea:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d8f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d8f5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d8fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d907:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d90e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d915:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d919:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d924:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d928:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d92c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d933:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d93a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d93e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d946:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d94a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d94e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d952:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d956:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d95d:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000d965:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d969:	89 04 24             	mov    DWORD PTR [esp],eax
c000d96c:	e8 f5 a0 ff ff       	call   c0007a66 <malloc>
c000d971:	89 c3                	mov    ebx,eax
c000d973:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d976:	e8 51 74 00 00       	call   c0014dcc <Mutex::Mutex()>
c000d97b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d97f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d982:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d986:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d98a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d98d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d991:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d99c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d9a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9a6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d9a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9ad:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d9b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d9b9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d9bd:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d9c0:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d9c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9c7:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9cf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9d5:	05 00 02 00 00       	add    eax,0x200
c000d9da:	c1 e0 03             	shl    eax,0x3
c000d9dd:	89 04 24             	mov    DWORD PTR [esp],eax
c000d9e0:	e8 81 a0 ff ff       	call   c0007a66 <malloc>
c000d9e5:	89 c2                	mov    edx,eax
c000d9e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d9ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9f2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9fd:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000da05:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da0b:	89 d0                	mov    eax,edx
c000da0d:	c1 e0 02             	shl    eax,0x2
c000da10:	01 d0                	add    eax,edx
c000da12:	c1 e0 04             	shl    eax,0x4
c000da15:	89 04 24             	mov    DWORD PTR [esp],eax
c000da18:	e8 49 a0 ff ff       	call   c0007a66 <malloc>
c000da1d:	89 c2                	mov    edx,eax
c000da1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da23:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000da26:	90                   	nop
c000da27:	83 c4 28             	add    esp,0x28
c000da2a:	5b                   	pop    ebx
c000da2b:	c3                   	ret    

c000da2c <VCache::invalidateReadBuffer()>:
c000da2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000da36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da3a:	c3                   	ret    
c000da3b:	90                   	nop

c000da3c <VCache::writeWriteBuffer()>:
c000da3c:	53                   	push   ebx
c000da3d:	83 ec 08             	sub    esp,0x8
c000da40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000da48:	74 1e                	je     c000da68 <VCache::writeWriteBuffer()+0x2c>
c000da4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000da4d:	83 ec 0c             	sub    esp,0xc
c000da50:	8b 10                	mov    edx,DWORD PTR [eax]
c000da52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000da55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000da58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000da5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da5e:	50                   	push   eax
c000da5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000da62:	83 c4 20             	add    esp,0x20
c000da65:	8d 76 00             	lea    esi,[esi+0x0]
c000da68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000da76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000da7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000da81:	83 c4 08             	add    esp,0x8
c000da84:	5b                   	pop    ebx
c000da85:	c3                   	ret    
c000da86:	66 90                	xchg   ax,ax

c000da88 <VCache::~VCache()>:
c000da88:	83 ec 1c             	sub    esp,0x1c
c000da8b:	ba 80 03 02 c0       	mov    edx,0xc0020380
c000da90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da94:	89 10                	mov    DWORD PTR [eax],edx
c000da96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9a:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000da9e:	84 c0                	test   al,al
c000daa0:	74 0e                	je     c000dab0 <VCache::~VCache()+0x28>
c000daa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daa6:	89 04 24             	mov    DWORD PTR [esp],eax
c000daa9:	e8 8e ff ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c000daae:	66 90                	xchg   ax,ax
c000dab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dab7:	89 04 24             	mov    DWORD PTR [esp],eax
c000daba:	e8 ba 9f ff ff       	call   c0007a79 <free>
c000dabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dac6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dac9:	e8 ab 9f ff ff       	call   c0007a79 <free>
c000dace:	90                   	nop
c000dacf:	83 c4 1c             	add    esp,0x1c
c000dad2:	c3                   	ret    
c000dad3:	90                   	nop

c000dad4 <VCache::~VCache()>:
c000dad4:	83 ec 1c             	sub    esp,0x1c
c000dad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dadb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dade:	e8 a5 ff ff ff       	call   c000da88 <VCache::~VCache()>
c000dae3:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000daeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daef:	89 04 24             	mov    DWORD PTR [esp],eax
c000daf2:	e8 c5 cd ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000daf7:	83 c4 1c             	add    esp,0x1c
c000dafa:	c3                   	ret    
c000dafb:	90                   	nop

c000dafc <VCache::write(unsigned long long, int, void*)>:
c000dafc:	55                   	push   ebp
c000dafd:	57                   	push   edi
c000dafe:	56                   	push   esi
c000daff:	53                   	push   ebx
c000db00:	83 ec 1c             	sub    esp,0x1c
c000db03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000db07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db0b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000db0f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000db13:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000db17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db1b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000db1f:	74 0f                	je     c000db30 <VCache::write(unsigned long long, int, void*)+0x34>
c000db21:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db25:	53                   	push   ebx
c000db26:	e8 01 ff ff ff       	call   c000da2c <VCache::invalidateReadBuffer()>
c000db2b:	58                   	pop    eax
c000db2c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db34:	74 66                	je     c000db9c <VCache::write(unsigned long long, int, void*)+0xa0>
c000db36:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db3d:	99                   	cdq    
c000db3e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000db41:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000db44:	89 c6                	mov    esi,eax
c000db46:	31 ce                	xor    esi,ecx
c000db48:	89 d0                	mov    eax,edx
c000db4a:	31 e8                	xor    eax,ebp
c000db4c:	09 c6                	or     esi,eax
c000db4e:	75 38                	jne    c000db88 <VCache::write(unsigned long long, int, void*)+0x8c>
c000db50:	83 ff 01             	cmp    edi,0x1
c000db53:	75 33                	jne    c000db88 <VCache::write(unsigned long long, int, void*)+0x8c>
c000db55:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db58:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000db5c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000db60:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000db66:	0f af f9             	imul   edi,ecx
c000db69:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000db6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db6e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000db71:	40                   	inc    eax
c000db72:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000db75:	83 f8 50             	cmp    eax,0x50
c000db78:	75 72                	jne    c000dbec <VCache::write(unsigned long long, int, void*)+0xf0>
c000db7a:	83 ec 0c             	sub    esp,0xc
c000db7d:	53                   	push   ebx
c000db7e:	e8 b9 fe ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	eb 64                	jmp    c000dbec <VCache::write(unsigned long long, int, void*)+0xf0>
c000db88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db8c:	83 ec 0c             	sub    esp,0xc
c000db8f:	53                   	push   ebx
c000db90:	e8 a7 fe ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c000db95:	83 c4 10             	add    esp,0x10
c000db98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db9c:	83 ff 4f             	cmp    edi,0x4f
c000db9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dba2:	7f 20                	jg     c000dbc4 <VCache::write(unsigned long long, int, void*)+0xc8>
c000dba4:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dba7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dbab:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000dbae:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dbb1:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dbb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dbb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dbbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbc0:	eb 2a                	jmp    c000dbec <VCache::write(unsigned long long, int, void*)+0xf0>
c000dbc2:	66 90                	xchg   ax,ax
c000dbc4:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dbc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbca:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dbce:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dbd2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dbd6:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000dbda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbde:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dbe1:	83 c4 1c             	add    esp,0x1c
c000dbe4:	5b                   	pop    ebx
c000dbe5:	5e                   	pop    esi
c000dbe6:	5f                   	pop    edi
c000dbe7:	5d                   	pop    ebp
c000dbe8:	ff e0                	jmp    eax
c000dbea:	66 90                	xchg   ax,ax
c000dbec:	83 c4 1c             	add    esp,0x1c
c000dbef:	31 c0                	xor    eax,eax
c000dbf1:	5b                   	pop    ebx
c000dbf2:	5e                   	pop    esi
c000dbf3:	5f                   	pop    edi
c000dbf4:	5d                   	pop    ebp
c000dbf5:	c3                   	ret    

c000dbf6 <VCache::read(unsigned long long, int, void*)>:
c000dbf6:	55                   	push   ebp
c000dbf7:	57                   	push   edi
c000dbf8:	56                   	push   esi
c000dbf9:	53                   	push   ebx
c000dbfa:	83 ec 1c             	sub    esp,0x1c
c000dbfd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dc01:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dc09:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dc0d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dc11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc15:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dc19:	74 0d                	je     c000dc28 <VCache::read(unsigned long long, int, void*)+0x32>
c000dc1b:	83 ec 0c             	sub    esp,0xc
c000dc1e:	57                   	push   edi
c000dc1f:	e8 18 fe ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c000dc24:	83 c4 10             	add    esp,0x10
c000dc27:	90                   	nop
c000dc28:	83 fd 01             	cmp    ebp,0x1
c000dc2b:	0f 85 93 00 00 00    	jne    c000dcc4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc31:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc34:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dc3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc3e:	0f 85 80 00 00 00    	jne    c000dcc4 <VCache::read(unsigned long long, int, void*)+0xce>
c000dc44:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000dc47:	89 cd                	mov    ebp,ecx
c000dc49:	f7 dd                	neg    ebp
c000dc4b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000dc4f:	89 e8                	mov    eax,ebp
c000dc51:	21 dd                	and    ebp,ebx
c000dc53:	c1 f8 1f             	sar    eax,0x1f
c000dc56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc5a:	89 e8                	mov    eax,ebp
c000dc5c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc60:	21 f5                	and    ebp,esi
c000dc62:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dc66:	89 ea                	mov    edx,ebp
c000dc68:	74 2e                	je     c000dc98 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc6a:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000dc6d:	75 29                	jne    c000dc98 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc6f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dc72:	75 24                	jne    c000dc98 <VCache::read(unsigned long long, int, void*)+0xa2>
c000dc74:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc77:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc7d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dc80:	8d 70 ff             	lea    esi,[eax-0x1]
c000dc83:	21 f3                	and    ebx,esi
c000dc85:	0f af d9             	imul   ebx,ecx
c000dc88:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dc8b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dc8f:	89 de                	mov    esi,ebx
c000dc91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc93:	31 c0                	xor    eax,eax
c000dc95:	eb 61                	jmp    c000dcf8 <VCache::read(unsigned long long, int, void*)+0x102>
c000dc97:	90                   	nop
c000dc98:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dc9c:	83 ec 0c             	sub    esp,0xc
c000dc9f:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dca2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dca6:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dca9:	8b 36                	mov    esi,DWORD PTR [esi]
c000dcab:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dcae:	51                   	push   ecx
c000dcaf:	52                   	push   edx
c000dcb0:	50                   	push   eax
c000dcb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcb5:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000dcb8:	83 c4 20             	add    esp,0x20
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	75 39                	jne    c000dcf8 <VCache::read(unsigned long long, int, void*)+0x102>
c000dcbf:	eb b3                	jmp    c000dc74 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dcc1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc4:	83 ec 0c             	sub    esp,0xc
c000dcc7:	57                   	push   edi
c000dcc8:	e8 5f fd ff ff       	call   c000da2c <VCache::invalidateReadBuffer()>
c000dccd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcd0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dcd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcd6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dcda:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dcde:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dce2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dce6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dcea:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dced:	83 c4 2c             	add    esp,0x2c
c000dcf0:	5b                   	pop    ebx
c000dcf1:	5e                   	pop    esi
c000dcf2:	5f                   	pop    edi
c000dcf3:	5d                   	pop    ebp
c000dcf4:	ff e0                	jmp    eax
c000dcf6:	66 90                	xchg   ax,ax
c000dcf8:	83 c4 1c             	add    esp,0x1c
c000dcfb:	5b                   	pop    ebx
c000dcfc:	5e                   	pop    esi
c000dcfd:	5f                   	pop    edi
c000dcfe:	5d                   	pop    ebp
c000dcff:	c3                   	ret    

c000dd00 <Video::putrect(int, int, int, int, unsigned int)>:
c000dd00:	55                   	push   ebp
c000dd01:	57                   	push   edi
c000dd02:	56                   	push   esi
c000dd03:	53                   	push   ebx
c000dd04:	83 ec 1c             	sub    esp,0x1c
c000dd07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000dd13:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dd17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dd1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd1f:	01 df                	add    edi,ebx
c000dd21:	39 fb                	cmp    ebx,edi
c000dd23:	7d 1f                	jge    c000dd44 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dd25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd29:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000dd2d:	7d 12                	jge    c000dd41 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000dd2f:	8b 16                	mov    edx,DWORD PTR [esi]
c000dd31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dd35:	53                   	push   ebx
c000dd36:	55                   	push   ebp
c000dd37:	45                   	inc    ebp
c000dd38:	56                   	push   esi
c000dd39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd3c:	83 c4 10             	add    esp,0x10
c000dd3f:	eb e8                	jmp    c000dd29 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dd41:	43                   	inc    ebx
c000dd42:	eb dd                	jmp    c000dd21 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dd44:	83 c4 1c             	add    esp,0x1c
c000dd47:	5b                   	pop    ebx
c000dd48:	5e                   	pop    esi
c000dd49:	5f                   	pop    edi
c000dd4a:	5d                   	pop    ebp
c000dd4b:	c3                   	ret    

c000dd4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000dd4c:	55                   	push   ebp
c000dd4d:	57                   	push   edi
c000dd4e:	31 ff                	xor    edi,edi
c000dd50:	56                   	push   esi
c000dd51:	53                   	push   ebx
c000dd52:	83 ec 1c             	sub    esp,0x1c
c000dd55:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000dd59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dd5d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000dd64:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000dd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000dd75:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000dd78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dd7c:	01 f9                	add    ecx,edi
c000dd7e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000dd82:	7d 2f                	jge    c000ddb3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000dd84:	31 f6                	xor    esi,esi
c000dd86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dd8a:	01 f2                	add    edx,esi
c000dd8c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000dd90:	7d 1a                	jge    c000ddac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000dd92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dd95:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000dd98:	46                   	inc    esi
c000dd99:	51                   	push   ecx
c000dd9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dd9e:	52                   	push   edx
c000dd9f:	55                   	push   ebp
c000dda0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dda3:	83 c4 10             	add    esp,0x10
c000dda6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddaa:	eb da                	jmp    c000dd86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ddac:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ddb0:	47                   	inc    edi
c000ddb1:	eb c5                	jmp    c000dd78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ddb3:	83 c4 1c             	add    esp,0x1c
c000ddb6:	5b                   	pop    ebx
c000ddb7:	5e                   	pop    esi
c000ddb8:	5f                   	pop    edi
c000ddb9:	5d                   	pop    ebp
c000ddba:	c3                   	ret    
c000ddbb:	90                   	nop

c000ddbc <Video::blit(unsigned int*, int, int, int, int)>:
c000ddbc:	55                   	push   ebp
c000ddbd:	ba 00 00 00 00       	mov    edx,0x0
c000ddc2:	57                   	push   edi
c000ddc3:	56                   	push   esi
c000ddc4:	53                   	push   ebx
c000ddc5:	83 ec 1c             	sub    esp,0x1c
c000ddc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddcc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ddd0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 49 d0             	cmovns edx,eax
c000ddd9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000dde0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000dde4:	89 eb                	mov    ebx,ebp
c000dde6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ddea:	01 ea                	add    edx,ebp
c000ddec:	39 da                	cmp    edx,ebx
c000ddee:	7e 54                	jle    c000de44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ddf0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ddf6:	7c 4c                	jl     c000de44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000ddf8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ddfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de04:	01 c1                	add    ecx,eax
c000de06:	39 f9                	cmp    ecx,edi
c000de08:	7e 2f                	jle    c000de39 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000de0a:	83 c2 04             	add    edx,0x4
c000de0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de13:	7c 21                	jl     c000de36 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000de15:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000de1b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000de1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de22:	55                   	push   ebp
c000de23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000de27:	56                   	push   esi
c000de28:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000de2b:	83 c4 10             	add    esp,0x10
c000de2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de36:	47                   	inc    edi
c000de37:	eb c7                	jmp    c000de00 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000de39:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000de3d:	43                   	inc    ebx
c000de3e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000de42:	eb a2                	jmp    c000dde6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000de44:	83 c4 1c             	add    esp,0x1c
c000de47:	5b                   	pop    ebx
c000de48:	5e                   	pop    esi
c000de49:	5f                   	pop    edi
c000de4a:	5d                   	pop    ebp
c000de4b:	c3                   	ret    

c000de4c <Video::clearScreen(unsigned int)>:
c000de4c:	57                   	push   edi
c000de4d:	56                   	push   esi
c000de4e:	53                   	push   ebx
c000de4f:	31 db                	xor    ebx,ebx
c000de51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de55:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de5b:	7e 1f                	jle    c000de7c <Video::clearScreen(unsigned int)+0x30>
c000de5d:	31 ff                	xor    edi,edi
c000de5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000de65:	7e 12                	jle    c000de79 <Video::clearScreen(unsigned int)+0x2d>
c000de67:	8b 06                	mov    eax,DWORD PTR [esi]
c000de69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6d:	53                   	push   ebx
c000de6e:	57                   	push   edi
c000de6f:	47                   	inc    edi
c000de70:	56                   	push   esi
c000de71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de74:	83 c4 10             	add    esp,0x10
c000de77:	eb e6                	jmp    c000de5f <Video::clearScreen(unsigned int)+0x13>
c000de79:	43                   	inc    ebx
c000de7a:	eb d9                	jmp    c000de55 <Video::clearScreen(unsigned int)+0x9>
c000de7c:	5b                   	pop    ebx
c000de7d:	5e                   	pop    esi
c000de7e:	5f                   	pop    edi
c000de7f:	c3                   	ret    

c000de80 <Video::putpixel(int, int, unsigned int)>:
c000de80:	c7 44 24 04 88 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020388
c000de88:	e9 98 28 00 00       	jmp    c0010725 <KePanic(char const*)>
c000de8d:	90                   	nop

c000de8e <Video::readPixelApprox(int, int)>:
c000de8e:	83 ec 18             	sub    esp,0x18
c000de91:	68 a9 03 02 c0       	push   0xc00203a9
c000de96:	e8 8a 28 00 00       	call   c0010725 <KePanic(char const*)>
c000de9b:	31 c0                	xor    eax,eax
c000de9d:	83 c4 1c             	add    esp,0x1c
c000dea0:	c3                   	ret    
c000dea1:	90                   	nop

c000dea2 <Video::Video(char const*)>:
c000dea2:	83 ec 1c             	sub    esp,0x1c
c000dea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dead:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000deb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000deb4:	e8 e1 e0 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000deb9:	ba 24 04 02 c0       	mov    edx,0xc0020424
c000debe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec2:	89 10                	mov    DWORD PTR [eax],edx
c000dec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dec8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ded2:	90                   	nop
c000ded3:	83 c4 1c             	add    esp,0x1c
c000ded6:	c3                   	ret    
c000ded7:	90                   	nop

c000ded8 <Video::~Video()>:
c000ded8:	83 ec 1c             	sub    esp,0x1c
c000dedb:	ba 24 04 02 c0       	mov    edx,0xc0020424
c000dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee4:	89 10                	mov    DWORD PTR [eax],edx
c000dee6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deea:	89 04 24             	mov    DWORD PTR [esp],eax
c000deed:	e8 14 de ff ff       	call   c000bd06 <Device::~Device()>
c000def2:	90                   	nop
c000def3:	83 c4 1c             	add    esp,0x1c
c000def6:	c3                   	ret    
c000def7:	90                   	nop

c000def8 <Video::~Video()>:
c000def8:	83 ec 1c             	sub    esp,0x1c
c000defb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	e8 d1 ff ff ff       	call   c000ded8 <Video::~Video()>
c000df07:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000df0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df13:	89 04 24             	mov    DWORD PTR [esp],eax
c000df16:	e8 a1 c9 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c000df1b:	83 c4 1c             	add    esp,0x1c
c000df1e:	c3                   	ret    
c000df1f:	90                   	nop

c000df20 <Video::isMonochrome()>:
c000df20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df24:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000df2a:	c3                   	ret    
c000df2b:	90                   	nop

c000df2c <Video::getWidth()>:
c000df2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df30:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000df36:	c3                   	ret    
c000df37:	90                   	nop

c000df38 <Video::getHeight()>:
c000df38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000df42:	c3                   	ret    
c000df43:	90                   	nop

c000df44 <Video::drawCursor(int, int, unsigned int*, int)>:
c000df44:	55                   	push   ebp
c000df45:	57                   	push   edi
c000df46:	56                   	push   esi
c000df47:	53                   	push   ebx
c000df48:	83 ec 2c             	sub    esp,0x2c
c000df4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df4f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000df53:	83 f8 01             	cmp    eax,0x1
c000df56:	19 c9                	sbb    ecx,ecx
c000df58:	31 db                	xor    ebx,ebx
c000df5a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000df5e:	89 ce                	mov    esi,ecx
c000df60:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000df68:	f7 d6                	not    esi
c000df6a:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000df70:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df74:	01 d8                	add    eax,ebx
c000df76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000df7a:	57                   	push   edi
c000df7b:	e8 b8 ff ff ff       	call   c000df38 <Video::getHeight()>
c000df80:	59                   	pop    ecx
c000df81:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000df85:	7e 70                	jle    c000dff7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000df87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df8b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000df8f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000df92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000df9a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dfa1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfa5:	89 e8                	mov    eax,ebp
c000dfa7:	83 c0 20             	add    eax,0x20
c000dfaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfae:	57                   	push   edi
c000dfaf:	e8 78 ff ff ff       	call   c000df2c <Video::getWidth()>
c000dfb4:	5a                   	pop    edx
c000dfb5:	39 c5                	cmp    ebp,eax
c000dfb7:	7d 34                	jge    c000dfed <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dfb9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dfbe:	74 05                	je     c000dfc5 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dfc0:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfc2:	56                   	push   esi
c000dfc3:	eb 0d                	jmp    c000dfd2 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dfc5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dfca:	74 12                	je     c000dfde <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dfcc:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfd2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfd6:	55                   	push   ebp
c000dfd7:	57                   	push   edi
c000dfd8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dfe2:	45                   	inc    ebp
c000dfe3:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dfe7:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000dfeb:	75 c1                	jne    c000dfae <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dfed:	43                   	inc    ebx
c000dfee:	83 fb 20             	cmp    ebx,0x20
c000dff1:	0f 85 79 ff ff ff    	jne    c000df70 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dff7:	83 c4 2c             	add    esp,0x2c
c000dffa:	5b                   	pop    ebx
c000dffb:	5e                   	pop    esi
c000dffc:	5f                   	pop    edi
c000dffd:	5d                   	pop    ebp
c000dffe:	c3                   	ret    
c000dfff:	90                   	nop

c000e000 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e000:	55                   	push   ebp
c000e001:	57                   	push   edi
c000e002:	56                   	push   esi
c000e003:	53                   	push   ebx
c000e004:	83 ec 28             	sub    esp,0x28
c000e007:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e00b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e00f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e013:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e017:	c1 e6 08             	shl    esi,0x8
c000e01a:	01 c6                	add    esi,eax
c000e01c:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e020:	c1 e5 08             	shl    ebp,0x8
c000e023:	01 c5                	add    ebp,eax
c000e025:	89 f0                	mov    eax,esi
c000e027:	0f af c5             	imul   eax,ebp
c000e02a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e031:	50                   	push   eax
c000e032:	e8 2f 9a ff ff       	call   c0007a66 <malloc>
c000e037:	83 c4 10             	add    esp,0x10
c000e03a:	85 c0                	test   eax,eax
c000e03c:	89 c7                	mov    edi,eax
c000e03e:	75 10                	jne    c000e050 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e040:	83 ec 0c             	sub    esp,0xc
c000e043:	68 d4 03 02 c0       	push   0xc00203d4
c000e048:	e8 d8 26 00 00       	call   c0010725 <KePanic(char const*)>
c000e04d:	83 c4 10             	add    esp,0x10
c000e050:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e053:	ba 12 00 00 00       	mov    edx,0x12
c000e058:	84 c0                	test   al,al
c000e05a:	74 11                	je     c000e06d <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e05c:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e060:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e064:	c1 fa 03             	sar    edx,0x3
c000e067:	0f af d1             	imul   edx,ecx
c000e06a:	83 c2 12             	add    edx,0x12
c000e06d:	85 f6                	test   esi,esi
c000e06f:	74 04                	je     c000e075 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e071:	85 ed                	test   ebp,ebp
c000e073:	75 12                	jne    c000e087 <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e075:	83 ec 0c             	sub    esp,0xc
c000e078:	68 e4 03 02 c0       	push   0xc00203e4
c000e07d:	e8 54 c9 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000e082:	e9 c1 00 00 00       	jmp    c000e148 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e087:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e08b:	80 f9 02             	cmp    cl,0x2
c000e08e:	0f 85 9f 00 00 00    	jne    c000e133 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e094:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e099:	75 0f                	jne    c000e0aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e09b:	84 c0                	test   al,al
c000e09d:	75 0b                	jne    c000e0aa <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e09f:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e0a2:	80 e9 18             	sub    cl,0x18
c000e0a5:	f6 c1 f7             	test   cl,0xf7
c000e0a8:	74 0d                	je     c000e0b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e0aa:	83 ec 0c             	sub    esp,0xc
c000e0ad:	68 f9 03 02 c0       	push   0xc00203f9
c000e0b2:	e9 84 00 00 00       	jmp    c000e13b <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e0b7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e0c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0ce:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e0d2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e0da:	75 0c                	jne    c000e0e8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e0dc:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e0e1:	c1 e0 18             	shl    eax,0x18
c000e0e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e0e8:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e0ed:	ff 04 24             	inc    DWORD PTR [esp]
c000e0f0:	c1 e0 10             	shl    eax,0x10
c000e0f3:	89 c1                	mov    ecx,eax
c000e0f5:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e0fa:	c1 e0 08             	shl    eax,0x8
c000e0fd:	09 c8                	or     eax,ecx
c000e0ff:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e103:	09 c8                	or     eax,ecx
c000e105:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e108:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e10c:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e110:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e114:	c1 f8 03             	sar    eax,0x3
c000e117:	01 c2                	add    edx,eax
c000e119:	89 c8                	mov    eax,ecx
c000e11b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e11f:	39 c6                	cmp    esi,eax
c000e121:	7f ab                	jg     c000e0ce <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e123:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e127:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e12b:	7e 22                	jle    c000e14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e12d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e131:	eb 94                	jmp    c000e0c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e133:	50                   	push   eax
c000e134:	50                   	push   eax
c000e135:	51                   	push   ecx
c000e136:	68 07 04 02 c0       	push   0xc0020407
c000e13b:	e8 96 c8 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000e140:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e143:	e8 31 99 ff ff       	call   c0007a79 <free>
c000e148:	83 c4 10             	add    esp,0x10
c000e14b:	31 ff                	xor    edi,edi
c000e14d:	eb 0c                	jmp    c000e15b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e14f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e153:	89 30                	mov    DWORD PTR [eax],esi
c000e155:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e159:	89 28                	mov    DWORD PTR [eax],ebp
c000e15b:	83 c4 1c             	add    esp,0x1c
c000e15e:	89 f8                	mov    eax,edi
c000e160:	5b                   	pop    ebx
c000e161:	5e                   	pop    esi
c000e162:	5f                   	pop    edi
c000e163:	5d                   	pop    ebp
c000e164:	c3                   	ret    
c000e165:	90                   	nop

c000e166 <Video::putTGA(int, int, unsigned char*, int)>:
c000e166:	55                   	push   ebp
c000e167:	57                   	push   edi
c000e168:	56                   	push   esi
c000e169:	53                   	push   ebx
c000e16a:	83 ec 28             	sub    esp,0x28
c000e16d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e171:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e175:	50                   	push   eax
c000e176:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e17a:	50                   	push   eax
c000e17b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e17f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e183:	57                   	push   edi
c000e184:	e8 77 fe ff ff       	call   c000e000 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e189:	83 c4 20             	add    esp,0x20
c000e18c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e190:	85 c0                	test   eax,eax
c000e192:	74 35                	je     c000e1c9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e194:	89 c6                	mov    esi,eax
c000e196:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e19a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e19e:	39 d8                	cmp    eax,ebx
c000e1a0:	7e 27                	jle    c000e1c9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e1a2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e1a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e1aa:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e1ae:	39 e9                	cmp    ecx,ebp
c000e1b0:	7e 14                	jle    c000e1c6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e1b2:	83 c6 04             	add    esi,0x4
c000e1b5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e1b7:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e1ba:	53                   	push   ebx
c000e1bb:	55                   	push   ebp
c000e1bc:	45                   	inc    ebp
c000e1bd:	57                   	push   edi
c000e1be:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e1c1:	83 c4 10             	add    esp,0x10
c000e1c4:	eb e0                	jmp    c000e1a6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e1c6:	43                   	inc    ebx
c000e1c7:	eb cd                	jmp    c000e196 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e1c9:	83 c4 1c             	add    esp,0x1c
c000e1cc:	5b                   	pop    ebx
c000e1cd:	5e                   	pop    esi
c000e1ce:	5f                   	pop    edi
c000e1cf:	5d                   	pop    ebp
c000e1d0:	c3                   	ret    
c000e1d1:	66 90                	xchg   ax,ax
c000e1d3:	90                   	nop

c000e1d4 <ACPI::close(int, int, void*)>:
c000e1d4:	83 ec 2c             	sub    esp,0x2c
c000e1d7:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e1df:	74 0b                	je     c000e1ec <ACPI::close(int, int, void*)+0x18>
c000e1e1:	b8 00 00 00 00       	mov    eax,0x0
c000e1e6:	e9 95 00 00 00       	jmp    c000e280 <ACPI::close(int, int, void*)+0xac>
c000e1eb:	90                   	nop
c000e1ec:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e1f1:	75 25                	jne    c000e218 <ACPI::close(int, int, void*)+0x44>
c000e1f3:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e1f8:	85 c0                	test   eax,eax
c000e1fa:	74 08                	je     c000e204 <ACPI::close(int, int, void*)+0x30>
c000e1fc:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e201:	ff d0                	call   eax
c000e203:	90                   	nop
c000e204:	c7 04 24 68 04 02 c0 	mov    DWORD PTR [esp],0xc0020468
c000e20b:	e8 15 25 00 00       	call   c0010725 <KePanic(char const*)>
c000e210:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e215:	eb 69                	jmp    c000e280 <ACPI::close(int, int, void*)+0xac>
c000e217:	90                   	nop
c000e218:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e21d:	75 59                	jne    c000e278 <ACPI::close(int, int, void*)+0xa4>
c000e21f:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e224:	85 c0                	test   eax,eax
c000e226:	74 08                	je     c000e230 <ACPI::close(int, int, void*)+0x5c>
c000e228:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e22d:	ff d0                	call   eax
c000e22f:	90                   	nop
c000e230:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e235:	8d 76 00             	lea    esi,[esi+0x0]
c000e238:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e23d:	83 e0 02             	and    eax,0x2
c000e240:	74 1e                	je     c000e260 <ACPI::close(int, int, void*)+0x8c>
c000e242:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e24d:	89 c2                	mov    edx,eax
c000e24f:	ec                   	in     al,dx
c000e250:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e254:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e259:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e25d:	eb d9                	jmp    c000e238 <ACPI::close(int, int, void*)+0x64>
c000e25f:	90                   	nop
c000e260:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e267:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e26c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e271:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e275:	ee                   	out    dx,al
c000e276:	66 90                	xchg   ax,ax
c000e278:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e27d:	8d 76 00             	lea    esi,[esi+0x0]
c000e280:	83 c4 2c             	add    esp,0x2c
c000e283:	c3                   	ret    

c000e284 <findRSDP()>:
c000e284:	83 ec 2c             	sub    esp,0x2c
c000e287:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e28c:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e293:	24 04                	and    al,0x4
c000e295:	75 09                	jne    c000e2a0 <findRSDP()+0x1c>
c000e297:	b8 00 00 00 00       	mov    eax,0x0
c000e29c:	eb 7a                	jmp    c000e318 <findRSDP()+0x94>
c000e29e:	66 90                	xchg   ax,ax
c000e2a0:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e2a5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e2aa:	7f 1c                	jg     c000e2c8 <findRSDP()+0x44>
c000e2ac:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e2b1:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e2b8:	80 e2 fb             	and    dl,0xfb
c000e2bb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2c1:	b8 00 00 00 00       	mov    eax,0x0
c000e2c6:	eb 50                	jmp    c000e318 <findRSDP()+0x94>
c000e2c8:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e2d0:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e2d8:	77 36                	ja     c000e310 <findRSDP()+0x8c>
c000e2da:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e2e2:	c7 44 24 04 03 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020503
c000e2ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e2ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2f1:	e8 8a 20 ff ff       	call   c0000380 <memcmp>
c000e2f6:	85 c0                	test   eax,eax
c000e2f8:	0f 94 c0             	sete   al
c000e2fb:	84 c0                	test   al,al
c000e2fd:	74 09                	je     c000e308 <findRSDP()+0x84>
c000e2ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e303:	eb 13                	jmp    c000e318 <findRSDP()+0x94>
c000e305:	8d 76 00             	lea    esi,[esi+0x0]
c000e308:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000e30d:	eb c1                	jmp    c000e2d0 <findRSDP()+0x4c>
c000e30f:	90                   	nop
c000e310:	b8 00 00 00 00       	mov    eax,0x0
c000e315:	8d 76 00             	lea    esi,[esi+0x0]
c000e318:	83 c4 2c             	add    esp,0x2c
c000e31b:	c3                   	ret    

c000e31c <loadACPITables(unsigned char*)>:
c000e31c:	57                   	push   edi
c000e31d:	56                   	push   esi
c000e31e:	53                   	push   ebx
c000e31f:	83 c4 80             	add    esp,0xffffff80
c000e322:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e327:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e32e:	24 04                	and    al,0x4
c000e330:	0f 84 5e 02 00 00    	je     c000e594 <loadACPITables(unsigned char*)+0x278>
c000e336:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000e33d:	84 c0                	test   al,al
c000e33f:	74 7f                	je     c000e3c0 <loadACPITables(unsigned char*)+0xa4>
c000e341:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e348:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000e34c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e350:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e353:	83 e8 24             	sub    eax,0x24
c000e356:	c1 e8 03             	shr    eax,0x3
c000e359:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e35d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000e365:	8d 76 00             	lea    esi,[esi+0x0]
c000e368:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e36c:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000e370:	0f 8d be 00 00 00    	jge    c000e434 <loadACPITables(unsigned char*)+0x118>
c000e376:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e37d:	83 c0 24             	add    eax,0x24
c000e380:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000e384:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000e388:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e38c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e390:	c1 e0 03             	shl    eax,0x3
c000e393:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000e397:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e39b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e39e:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3a0:	89 c1                	mov    ecx,eax
c000e3a2:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e3a7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3aa:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e3b0:	89 ca                	mov    edx,ecx
c000e3b2:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e3b9:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000e3bd:	eb a9                	jmp    c000e368 <loadACPITables(unsigned char*)+0x4c>
c000e3bf:	90                   	nop
c000e3c0:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e3c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e3cb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e3cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3d2:	83 e8 24             	sub    eax,0x24
c000e3d5:	c1 e8 02             	shr    eax,0x2
c000e3d8:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e3dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000e3e4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e3e8:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000e3ec:	7d 46                	jge    c000e434 <loadACPITables(unsigned char*)+0x118>
c000e3ee:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e3f5:	83 c0 24             	add    eax,0x24
c000e3f8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e3fc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000e404:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e408:	c1 e0 02             	shl    eax,0x2
c000e40b:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000e40f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e413:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e415:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e41a:	8d 50 01             	lea    edx,[eax+0x1]
c000e41d:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e423:	89 ca                	mov    edx,ecx
c000e425:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e42c:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000e430:	eb b2                	jmp    c000e3e4 <loadACPITables(unsigned char*)+0xc8>
c000e432:	66 90                	xchg   ax,ax
c000e434:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000e43c:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e441:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000e445:	0f 8d 4d 01 00 00    	jge    c000e598 <loadACPITables(unsigned char*)+0x27c>
c000e44b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e44f:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e456:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e45a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e45e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e462:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e466:	25 ff 0f 00 00       	and    eax,0xfff
c000e46b:	89 c6                	mov    esi,eax
c000e46d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e473:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e47a:	e8 01 b1 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000e47f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e483:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e489:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e491:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000e499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e49d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e4a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4a4:	e8 39 bb ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e4a9:	09 f0                	or     eax,esi
c000e4ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e4af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e4b3:	c1 e0 03             	shl    eax,0x3
c000e4b6:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e4bb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e4bf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4c7:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000e4cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e4d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e4df:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e4e3:	89 c6                	mov    esi,eax
c000e4e5:	89 d7                	mov    edi,edx
c000e4e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4e9:	89 c8                	mov    eax,ecx
c000e4eb:	89 fa                	mov    edx,edi
c000e4ed:	89 f3                	mov    ebx,esi
c000e4ef:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e4f3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e4f7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e4ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e502:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e506:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e50a:	05 00 10 00 00       	add    eax,0x1000
c000e50f:	c1 e8 0c             	shr    eax,0xc
c000e512:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e516:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e51a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e51e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e522:	25 ff 0f 00 00       	and    eax,0xfff
c000e527:	89 c6                	mov    esi,eax
c000e529:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e52f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e533:	89 04 24             	mov    DWORD PTR [esp],eax
c000e536:	e8 45 b0 ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000e53b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e53f:	89 d1                	mov    ecx,edx
c000e541:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000e547:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e54f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e553:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e557:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e55b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e55f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e562:	e8 7b ba ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e567:	09 f0                	or     eax,esi
c000e569:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e56d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e571:	89 04 24             	mov    DWORD PTR [esp],eax
c000e574:	e8 20 b3 ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c000e579:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e57d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000e581:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e588:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000e58c:	e9 ab fe ff ff       	jmp    c000e43c <loadACPITables(unsigned char*)+0x120>
c000e591:	8d 76 00             	lea    esi,[esi+0x0]
c000e594:	90                   	nop
c000e595:	8d 76 00             	lea    esi,[esi+0x0]
c000e598:	83 ec 80             	sub    esp,0xffffff80
c000e59b:	5b                   	pop    ebx
c000e59c:	5e                   	pop    esi
c000e59d:	5f                   	pop    edi
c000e59e:	c3                   	ret    
c000e59f:	90                   	nop

c000e5a0 <findRSDT(unsigned char*)>:
c000e5a0:	57                   	push   edi
c000e5a1:	56                   	push   esi
c000e5a2:	53                   	push   ebx
c000e5a3:	83 ec 70             	sub    esp,0x70
c000e5a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e5ab:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e5b2:	24 04                	and    al,0x4
c000e5b4:	75 0a                	jne    c000e5c0 <findRSDT(unsigned char*)+0x20>
c000e5b6:	b8 00 00 00 00       	mov    eax,0x0
c000e5bb:	e9 44 01 00 00       	jmp    c000e704 <findRSDT(unsigned char*)+0x164>
c000e5c0:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e5c4:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e5c8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000e5cf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e5d3:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000e5db:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e5df:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e5e3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e5e7:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000e5eb:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000e5ef:	89 c6                	mov    esi,eax
c000e5f1:	89 d7                	mov    edi,edx
c000e5f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5f5:	89 c8                	mov    eax,ecx
c000e5f7:	89 fa                	mov    edx,edi
c000e5f9:	89 f3                	mov    ebx,esi
c000e5fb:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000e5ff:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000e603:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e607:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000e60c:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000e610:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000e618:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e61c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e620:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e624:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e628:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e62c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e630:	25 ff 0f 00 00       	and    eax,0xfff
c000e635:	89 c6                	mov    esi,eax
c000e637:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e63d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e644:	e8 37 af ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000e649:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000e64d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e653:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e65b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e663:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e667:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e66b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e66e:	e8 6f b9 ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e673:	09 f0                	or     eax,esi
c000e675:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e679:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e67d:	25 ff 0f 00 00       	and    eax,0xfff
c000e682:	89 c6                	mov    esi,eax
c000e684:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e68a:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e691:	e8 ea ae ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c000e696:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000e69a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6a0:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e6a8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e6b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6bb:	e8 22 b9 ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6c0:	09 f0                	or     eax,esi
c000e6c2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e6c6:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000e6cb:	75 13                	jne    c000e6e0 <findRSDT(unsigned char*)+0x140>
c000e6cd:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e6d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e6d8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e6dc:	eb 22                	jmp    c000e700 <findRSDT(unsigned char*)+0x160>
c000e6de:	66 90                	xchg   ax,ax
c000e6e0:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000e6e5:	75 11                	jne    c000e6f8 <findRSDT(unsigned char*)+0x158>
c000e6e7:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e6ee:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e6f2:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e6f6:	eb 08                	jmp    c000e700 <findRSDT(unsigned char*)+0x160>
c000e6f8:	b8 00 00 00 00       	mov    eax,0x0
c000e6fd:	eb 05                	jmp    c000e704 <findRSDT(unsigned char*)+0x164>
c000e6ff:	90                   	nop
c000e700:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000e704:	83 c4 70             	add    esp,0x70
c000e707:	5b                   	pop    ebx
c000e708:	5e                   	pop    esi
c000e709:	5f                   	pop    edi
c000e70a:	c3                   	ret    
c000e70b:	90                   	nop

c000e70c <findDataTable(unsigned char*, char*)>:
c000e70c:	83 ec 2c             	sub    esp,0x2c
c000e70f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e714:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e71b:	24 04                	and    al,0x4
c000e71d:	75 09                	jne    c000e728 <findDataTable(unsigned char*, char*)+0x1c>
c000e71f:	b8 00 00 00 00       	mov    eax,0x0
c000e724:	eb 62                	jmp    c000e788 <findDataTable(unsigned char*, char*)+0x7c>
c000e726:	66 90                	xchg   ax,ax
c000e728:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e730:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e735:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000e739:	7d 45                	jge    c000e780 <findDataTable(unsigned char*, char*)+0x74>
c000e73b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e73f:	c1 e0 03             	shl    eax,0x3
c000e742:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000e748:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000e750:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e754:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e758:	89 14 24             	mov    DWORD PTR [esp],edx
c000e75b:	e8 20 1c ff ff       	call   c0000380 <memcmp>
c000e760:	85 c0                	test   eax,eax
c000e762:	0f 94 c0             	sete   al
c000e765:	84 c0                	test   al,al
c000e767:	74 0f                	je     c000e778 <findDataTable(unsigned char*, char*)+0x6c>
c000e769:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e76d:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e774:	eb 12                	jmp    c000e788 <findDataTable(unsigned char*, char*)+0x7c>
c000e776:	66 90                	xchg   ax,ax
c000e778:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e77c:	eb b2                	jmp    c000e730 <findDataTable(unsigned char*, char*)+0x24>
c000e77e:	66 90                	xchg   ax,ax
c000e780:	b8 00 00 00 00       	mov    eax,0x0
c000e785:	8d 76 00             	lea    esi,[esi+0x0]
c000e788:	83 c4 2c             	add    esp,0x2c
c000e78b:	c3                   	ret    

c000e78c <scanMADT()>:
c000e78c:	53                   	push   ebx
c000e78d:	83 ec 48             	sub    esp,0x48
c000e790:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e795:	25 00 04 00 00       	and    eax,0x400
c000e79a:	74 18                	je     c000e7b4 <scanMADT()+0x28>
c000e79c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7a1:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e7a8:	80 e2 fb             	and    dl,0xfb
c000e7ab:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e7b4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7b9:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e7c0:	24 04                	and    al,0x4
c000e7c2:	0f 84 7c 04 00 00    	je     c000ec44 <scanMADT()+0x4b8>
c000e7c8:	e8 b7 fa ff ff       	call   c000e284 <findRSDP()>
c000e7cd:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e7d2:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e7d7:	85 c0                	test   eax,eax
c000e7d9:	75 1d                	jne    c000e7f8 <scanMADT()+0x6c>
c000e7db:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7e0:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e7e7:	80 e2 fb             	and    dl,0xfb
c000e7ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e7f0:	e9 57 04 00 00       	jmp    c000ec4c <scanMADT()+0x4c0>
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e7fd:	89 04 24             	mov    DWORD PTR [esp],eax
c000e800:	e8 9b fd ff ff       	call   c000e5a0 <findRSDT(unsigned char*)>
c000e805:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e80a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e80f:	85 c0                	test   eax,eax
c000e811:	75 1d                	jne    c000e830 <scanMADT()+0xa4>
c000e813:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e818:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e81f:	80 e2 fb             	and    dl,0xfb
c000e822:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e828:	e9 1f 04 00 00       	jmp    c000ec4c <scanMADT()+0x4c0>
c000e82d:	8d 76 00             	lea    esi,[esi+0x0]
c000e830:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e835:	89 04 24             	mov    DWORD PTR [esp],eax
c000e838:	e8 df fa ff ff       	call   c000e31c <loadACPITables(unsigned char*)>
c000e83d:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e842:	c7 44 24 04 0c 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc002050c
c000e84a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e84d:	e8 ba fe ff ff       	call   c000e70c <findDataTable(unsigned char*, char*)>
c000e852:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e856:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000e85b:	75 1b                	jne    c000e878 <scanMADT()+0xec>
c000e85d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e862:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e869:	80 e2 fe             	and    dl,0xfe
c000e86c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e872:	e9 d5 03 00 00       	jmp    c000ec4c <scanMADT()+0x4c0>
c000e877:	90                   	nop
c000e878:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000e880:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e884:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e887:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000e88b:	0f 87 bb 03 00 00    	ja     c000ec4c <scanMADT()+0x4c0>
c000e891:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000e899:	0f 87 ad 03 00 00    	ja     c000ec4c <scanMADT()+0x4c0>
c000e89f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8a3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e8a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ae:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e8b2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e8b6:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e8bb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000e8bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e8c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e8ca:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e8ce:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e8d3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000e8d7:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000e8dc:	0f 86 66 03 00 00    	jbe    c000ec48 <scanMADT()+0x4bc>
c000e8e2:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000e8e7:	75 5f                	jne    c000e948 <scanMADT()+0x1bc>
c000e8e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8ed:	8d 50 01             	lea    edx,[eax+0x1]
c000e8f0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e8f4:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e8fb:	0f b6 d2             	movzx  edx,dl
c000e8fe:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e902:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e907:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e90d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e911:	8d 50 01             	lea    edx,[eax+0x1]
c000e914:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e918:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e91f:	88 d1                	mov    cl,dl
c000e921:	fe c1                	inc    cl
c000e923:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e929:	0f b6 d2             	movzx  edx,dl
c000e92c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e930:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e935:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e93b:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000e940:	e9 eb 02 00 00       	jmp    c000ec30 <scanMADT()+0x4a4>
c000e945:	8d 76 00             	lea    esi,[esi+0x0]
c000e948:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000e94d:	0f 85 25 01 00 00    	jne    c000ea78 <scanMADT()+0x2ec>
c000e953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e957:	8d 50 01             	lea    edx,[eax+0x1]
c000e95a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e95e:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000e965:	0f b6 d2             	movzx  edx,dl
c000e968:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e96c:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e971:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000e977:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000e97b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e97f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e983:	01 d0                	add    eax,edx
c000e985:	83 c0 2c             	add    eax,0x2c
c000e988:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000e98b:	0f b6 d0             	movzx  edx,al
c000e98e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e992:	8d 48 01             	lea    ecx,[eax+0x1]
c000e995:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e999:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000e99e:	0f b6 c0             	movzx  eax,al
c000e9a1:	c1 e0 08             	shl    eax,0x8
c000e9a4:	89 d1                	mov    ecx,edx
c000e9a6:	09 c1                	or     ecx,eax
c000e9a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9ac:	8d 50 02             	lea    edx,[eax+0x2]
c000e9af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9b3:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000e9b8:	0f b6 c0             	movzx  eax,al
c000e9bb:	c1 e0 10             	shl    eax,0x10
c000e9be:	09 c1                	or     ecx,eax
c000e9c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9c4:	8d 50 03             	lea    edx,[eax+0x3]
c000e9c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9cb:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000e9d0:	0f b6 c0             	movzx  eax,al
c000e9d3:	c1 e0 18             	shl    eax,0x18
c000e9d6:	09 c1                	or     ecx,eax
c000e9d8:	89 ca                	mov    edx,ecx
c000e9da:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000e9e1:	0f b6 c0             	movzx  eax,al
c000e9e4:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000e9eb:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000e9f0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e9f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9f8:	01 d0                	add    eax,edx
c000e9fa:	83 c0 2c             	add    eax,0x2c
c000e9fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ea00:	0f b6 d0             	movzx  edx,al
c000ea03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea07:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea0e:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ea13:	0f b6 c0             	movzx  eax,al
c000ea16:	c1 e0 08             	shl    eax,0x8
c000ea19:	89 d1                	mov    ecx,edx
c000ea1b:	09 c1                	or     ecx,eax
c000ea1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea21:	8d 50 02             	lea    edx,[eax+0x2]
c000ea24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea28:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea2d:	0f b6 c0             	movzx  eax,al
c000ea30:	c1 e0 10             	shl    eax,0x10
c000ea33:	09 c1                	or     ecx,eax
c000ea35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea39:	8d 50 03             	lea    edx,[eax+0x3]
c000ea3c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea40:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ea45:	0f b6 c0             	movzx  eax,al
c000ea48:	c1 e0 18             	shl    eax,0x18
c000ea4b:	09 c1                	or     ecx,eax
c000ea4d:	89 ca                	mov    edx,ecx
c000ea4f:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ea56:	0f b6 c0             	movzx  eax,al
c000ea59:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000ea60:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea65:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ea6c:	fe c0                	inc    al
c000ea6e:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ea73:	e9 b8 01 00 00       	jmp    c000ec30 <scanMADT()+0x4a4>
c000ea78:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000ea7d:	0f 85 f9 00 00 00    	jne    c000eb7c <scanMADT()+0x3f0>
c000ea83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea87:	8d 50 01             	lea    edx,[eax+0x1]
c000ea8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ea8e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea92:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ea97:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000ea9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea9f:	8d 50 01             	lea    edx,[eax+0x1]
c000eaa2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eaa6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eaaa:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eaaf:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000eab3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eab7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eabb:	01 d0                	add    eax,edx
c000eabd:	83 c0 2c             	add    eax,0x2c
c000eac0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eac3:	0f b6 d0             	movzx  edx,al
c000eac6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaca:	8d 48 01             	lea    ecx,[eax+0x1]
c000eacd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ead1:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ead6:	0f b6 c0             	movzx  eax,al
c000ead9:	c1 e0 08             	shl    eax,0x8
c000eadc:	89 d1                	mov    ecx,edx
c000eade:	09 c1                	or     ecx,eax
c000eae0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eae4:	8d 50 02             	lea    edx,[eax+0x2]
c000eae7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaeb:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eaf0:	0f b6 c0             	movzx  eax,al
c000eaf3:	c1 e0 10             	shl    eax,0x10
c000eaf6:	09 c1                	or     ecx,eax
c000eaf8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eafc:	8d 50 03             	lea    edx,[eax+0x3]
c000eaff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb03:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb08:	0f b6 c0             	movzx  eax,al
c000eb0b:	c1 e0 18             	shl    eax,0x18
c000eb0e:	09 c8                	or     eax,ecx
c000eb10:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000eb14:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eb19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb21:	01 d0                	add    eax,edx
c000eb23:	83 c0 2c             	add    eax,0x2c
c000eb26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eb29:	0f b6 c0             	movzx  eax,al
c000eb2c:	0f bf d0             	movsx  edx,ax
c000eb2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb33:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb3a:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eb3f:	0f b6 c0             	movzx  eax,al
c000eb42:	c1 e0 08             	shl    eax,0x8
c000eb45:	98                   	cwde   
c000eb46:	09 d0                	or     eax,edx
c000eb48:	98                   	cwde   
c000eb49:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000eb4e:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000eb53:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000eb58:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb5c:	88 90 40 1b 02 c0    	mov    BYTE PTR [eax-0x3ffde4c0],dl
c000eb62:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000eb67:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000eb6c:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000eb74:	e9 b7 00 00 00       	jmp    c000ec30 <scanMADT()+0x4a4>
c000eb79:	8d 76 00             	lea    esi,[esi+0x0]
c000eb7c:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000eb81:	0f 85 9d 00 00 00    	jne    c000ec24 <scanMADT()+0x498>
c000eb87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb8b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb8e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb92:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb96:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb9b:	0f b6 c0             	movzx  eax,al
c000eb9e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eba2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eba6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebaa:	01 d0                	add    eax,edx
c000ebac:	83 c0 2c             	add    eax,0x2c
c000ebaf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ebb2:	0f b6 d0             	movzx  edx,al
c000ebb5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebb9:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebc0:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ebc5:	0f b6 c0             	movzx  eax,al
c000ebc8:	c1 e0 08             	shl    eax,0x8
c000ebcb:	09 d0                	or     eax,edx
c000ebcd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ebd1:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ebd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebda:	8d 50 01             	lea    edx,[eax+0x1]
c000ebdd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ebe1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ebe5:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ebea:	0f b6 c0             	movzx  eax,al
c000ebed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ebf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebf5:	c1 e0 08             	shl    eax,0x8
c000ebf8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000ebfc:	89 c1                	mov    ecx,eax
c000ebfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ec02:	c1 e0 18             	shl    eax,0x18
c000ec05:	89 c3                	mov    ebx,eax
c000ec07:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec0c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec0f:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ec15:	09 d9                	or     ecx,ebx
c000ec17:	89 ca                	mov    edx,ecx
c000ec19:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ec20:	eb 0e                	jmp    c000ec30 <scanMADT()+0x4a4>
c000ec22:	66 90                	xchg   ax,ax
c000ec24:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000ec29:	75 05                	jne    c000ec30 <scanMADT()+0x4a4>
c000ec2b:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000ec30:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000ec35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec39:	01 d0                	add    eax,edx
c000ec3b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ec3f:	e9 3c fc ff ff       	jmp    c000e880 <scanMADT()+0xf4>
c000ec44:	90                   	nop
c000ec45:	eb 05                	jmp    c000ec4c <scanMADT()+0x4c0>
c000ec47:	90                   	nop
c000ec48:	90                   	nop
c000ec49:	8d 76 00             	lea    esi,[esi+0x0]
c000ec4c:	83 c4 48             	add    esp,0x48
c000ec4f:	5b                   	pop    ebx
c000ec50:	c3                   	ret    
c000ec51:	90                   	nop
c000ec52:	66 90                	xchg   ax,ax

c000ec54 <ACPI::ACPI()>:
c000ec54:	83 ec 1c             	sub    esp,0x1c
c000ec57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec5b:	c7 44 24 04 11 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020511
c000ec63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec66:	e8 2f d3 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000ec6b:	ba 48 06 02 c0       	mov    edx,0xc0020648
c000ec70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec74:	89 10                	mov    DWORD PTR [eax],edx
c000ec76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec7a:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ec81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec85:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ec8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec93:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ec9d:	e8 ea fa ff ff       	call   c000e78c <scanMADT()>
c000eca2:	90                   	nop
c000eca3:	83 c4 1c             	add    esp,0x1c
c000eca6:	c3                   	ret    
c000eca7:	90                   	nop

c000eca8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000eca8:	83 ec 3c             	sub    esp,0x3c
c000ecab:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000ecaf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ecb3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000ecb7:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ecbb:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000ecc0:	88 c8                	mov    al,cl
c000ecc2:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000ecc6:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000eccb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ecd3:	90                   	nop
c000ecd4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecd8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ecde:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000ece2:	0f 8d 98 00 00 00    	jge    c000ed80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000ece8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ecec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ecf0:	83 c2 2a             	add    edx,0x2a
c000ecf3:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000ecf8:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000ecfd:	39 c2                	cmp    edx,eax
c000ecff:	75 73                	jne    c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ed01:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed05:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed09:	83 c2 2a             	add    edx,0x2a
c000ed0c:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000ed11:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000ed15:	75 5d                	jne    c000ed74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ed17:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ed1c:	74 32                	je     c000ed50 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000ed1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed22:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed26:	83 c2 2a             	add    edx,0x2a
c000ed29:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed34:	39 c2                	cmp    edx,eax
c000ed36:	74 0c                	je     c000ed44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ed38:	c7 04 24 8c 04 02 c0 	mov    DWORD PTR [esp],0xc002048c
c000ed3f:	e8 e1 19 00 00       	call   c0010725 <KePanic(char const*)>
c000ed44:	c7 04 24 16 05 02 c0 	mov    DWORD PTR [esp],0xc0020516
c000ed4b:	e8 d5 19 00 00       	call   c0010725 <KePanic(char const*)>
c000ed50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ed54:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ed5c:	83 c2 2a             	add    edx,0x2a
c000ed5f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ed63:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed65:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ed68:	89 01                	mov    DWORD PTR [ecx],eax
c000ed6a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ed6d:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ed72:	66 90                	xchg   ax,ax
c000ed74:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ed78:	e9 57 ff ff ff       	jmp    c000ecd4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ed7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed80:	90                   	nop
c000ed81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed85:	83 c4 3c             	add    esp,0x3c
c000ed88:	c2 04 00             	ret    0x4
c000ed8b:	90                   	nop

c000ed8c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ed8c:	83 ec 2c             	sub    esp,0x2c
c000ed8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed93:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000ed97:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed9b:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000eda0:	88 c8                	mov    al,cl
c000eda2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000eda6:	88 d0                	mov    al,dl
c000eda8:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000edac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edba:	83 c2 2a             	add    edx,0x2a
c000edbd:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000edc2:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000edc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edca:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd4:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000edd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eddb:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000ede0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ede4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000edea:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000edef:	fe c0                	inc    al
c000edf1:	88 c1                	mov    cl,al
c000edf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf7:	83 c2 2a             	add    edx,0x2a
c000edfa:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000edfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee02:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee0c:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee0f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ee13:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ee17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee21:	8d 50 01             	lea    edx,[eax+0x1]
c000ee24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee28:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ee2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee32:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee38:	3d 00 02 00 00       	cmp    eax,0x200
c000ee3d:	75 0d                	jne    c000ee4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ee3f:	c7 04 24 25 05 02 c0 	mov    DWORD PTR [esp],0xc0020525
c000ee46:	e8 da 18 00 00       	call   c0010725 <KePanic(char const*)>
c000ee4b:	90                   	nop
c000ee4c:	90                   	nop
c000ee4d:	83 c4 2c             	add    esp,0x2c
c000ee50:	c3                   	ret    
c000ee51:	90                   	nop
c000ee52:	66 90                	xchg   ax,ax

c000ee54 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ee54:	b8 00 00 00 00       	mov    eax,0x0
c000ee59:	c3                   	ret    
c000ee5a:	66 90                	xchg   ax,ax

c000ee5c <ACPI::detectPCI()>:
c000ee5c:	53                   	push   ebx
c000ee5d:	83 ec 38             	sub    esp,0x38
c000ee60:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ee65:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000ee6a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ee6f:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ee76:	24 04                	and    al,0x4
c000ee78:	74 2a                	je     c000eea4 <ACPI::detectPCI()+0x48>
c000ee7a:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ee7f:	c7 44 24 04 42 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020542
c000ee87:	89 04 24             	mov    DWORD PTR [esp],eax
c000ee8a:	e8 7d f8 ff ff       	call   c000e70c <findDataTable(unsigned char*, char*)>
c000ee8f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee93:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ee98:	74 0a                	je     c000eea4 <ACPI::detectPCI()+0x48>
c000ee9a:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ee9f:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000eea4:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000eeac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eeb0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eeb3:	3c 01                	cmp    al,0x1
c000eeb5:	75 0d                	jne    c000eec4 <ACPI::detectPCI()+0x68>
c000eeb7:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000eebc:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000eec1:	eb 25                	jmp    c000eee8 <ACPI::detectPCI()+0x8c>
c000eec3:	90                   	nop
c000eec4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eec8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eecb:	3c 02                	cmp    al,0x2
c000eecd:	75 19                	jne    c000eee8 <ACPI::detectPCI()+0x8c>
c000eecf:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000eed4:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000eed9:	74 0d                	je     c000eee8 <ACPI::detectPCI()+0x8c>
c000eedb:	c7 04 24 bc 04 02 c0 	mov    DWORD PTR [esp],0xc00204bc
c000eee2:	e8 3e 18 00 00       	call   c0010725 <KePanic(char const*)>
c000eee7:	90                   	nop
c000eee8:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000eeed:	34 01                	xor    al,0x1
c000eeef:	74 3f                	je     c000ef30 <ACPI::detectPCI()+0xd4>
c000eef1:	e8 3a 12 ff ff       	call   c0000130 <manualPCIProbe>
c000eef6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000eefa:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000eeff:	75 0f                	jne    c000ef10 <ACPI::detectPCI()+0xb4>
c000ef01:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef06:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef0b:	eb 23                	jmp    c000ef30 <ACPI::detectPCI()+0xd4>
c000ef0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef10:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000ef15:	75 19                	jne    c000ef30 <ACPI::detectPCI()+0xd4>
c000ef17:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef1c:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000ef21:	74 0d                	je     c000ef30 <ACPI::detectPCI()+0xd4>
c000ef23:	c7 04 24 bc 04 02 c0 	mov    DWORD PTR [esp],0xc00204bc
c000ef2a:	e8 f6 17 00 00       	call   c0010725 <KePanic(char const*)>
c000ef2f:	90                   	nop
c000ef30:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ef35:	0f 84 89 00 00 00    	je     c000efc4 <ACPI::detectPCI()+0x168>
c000ef3b:	c7 04 24 47 05 02 c0 	mov    DWORD PTR [esp],0xc0020547
c000ef42:	e8 6a 11 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000ef47:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000ef4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef53:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef56:	e8 0b 8b ff ff       	call   c0007a66 <malloc>
c000ef5b:	89 c3                	mov    ebx,eax
c000ef5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef60:	e8 71 ae 00 00       	call   c0019dd6 <PCI::PCI()>
c000ef65:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000ef69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef71:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ef75:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef78:	e8 85 ce ff ff       	call   c000be02 <Device::addChild(Device*)>
c000ef7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ef81:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef83:	83 c0 08             	add    eax,0x8
c000ef86:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef88:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000ef8d:	74 09                	je     c000ef98 <ACPI::detectPCI()+0x13c>
c000ef8f:	ba 01 00 00 00       	mov    edx,0x1
c000ef94:	eb 0a                	jmp    c000efa0 <ACPI::detectPCI()+0x144>
c000ef96:	66 90                	xchg   ax,ax
c000ef98:	ba 02 00 00 00       	mov    edx,0x2
c000ef9d:	8d 76 00             	lea    esi,[esi+0x0]
c000efa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000efa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000efb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000efb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efb8:	89 14 24             	mov    DWORD PTR [esp],edx
c000efbb:	ff d0                	call   eax
c000efbd:	e9 9a 00 00 00       	jmp    c000f05c <ACPI::detectPCI()+0x200>
c000efc2:	66 90                	xchg   ax,ax
c000efc4:	c7 04 24 5f 05 02 c0 	mov    DWORD PTR [esp],0xc002055f
c000efcb:	e8 e1 10 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000efd0:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000efd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efdc:	89 04 24             	mov    DWORD PTR [esp],eax
c000efdf:	e8 82 8a ff ff       	call   c0007a66 <malloc>
c000efe4:	89 c3                	mov    ebx,eax
c000efe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efe9:	e8 48 b9 00 00       	call   c001a936 <IDE::IDE()>
c000efee:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000eff2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eff6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000effa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000effe:	89 04 24             	mov    DWORD PTR [esp],eax
c000f001:	e8 fc cd ff ff       	call   c000be02 <Device::addChild(Device*)>
c000f006:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f00a:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f014:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f018:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f021:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f025:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f02e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f032:	8b 00                	mov    eax,DWORD PTR [eax]
c000f034:	83 c0 08             	add    eax,0x8
c000f037:	8b 00                	mov    eax,DWORD PTR [eax]
c000f039:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f041:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f049:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f051:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f055:	89 14 24             	mov    DWORD PTR [esp],edx
c000f058:	ff d0                	call   eax
c000f05a:	66 90                	xchg   ax,ax
c000f05c:	90                   	nop
c000f05d:	83 c4 38             	add    esp,0x38
c000f060:	5b                   	pop    ebx
c000f061:	c3                   	ret    
c000f062:	66 90                	xchg   ax,ax

c000f064 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f064:	83 ec 2c             	sub    esp,0x2c
c000f067:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f06b:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f06f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f073:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f078:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f07d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f081:	89 04 24             	mov    DWORD PTR [esp],eax
c000f084:	e8 81 80 ff ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c000f089:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f08d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f092:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f09f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0a6:	e8 8d 81 ff ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f0ab:	90                   	nop
c000f0ac:	83 c4 2c             	add    esp,0x2c
c000f0af:	c3                   	ret    

c000f0b0 <ACPI::sleep()>:
c000f0b0:	83 ec 0c             	sub    esp,0xc
c000f0b3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0b8:	85 c0                	test   eax,eax
c000f0ba:	74 08                	je     c000f0c4 <ACPI::sleep()+0x14>
c000f0bc:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f0c1:	ff d0                	call   eax
c000f0c3:	90                   	nop
c000f0c4:	90                   	nop
c000f0c5:	83 c4 0c             	add    esp,0xc
c000f0c8:	c3                   	ret    
c000f0c9:	90                   	nop
c000f0ca:	66 90                	xchg   ax,ax

c000f0cc <ACPI::open(int, int, void*)>:
c000f0cc:	53                   	push   ebx
c000f0cd:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f0d3:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f0da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0dd:	e8 7a fd ff ff       	call   c000ee5c <ACPI::detectPCI()>
c000f0e2:	c7 04 24 e4 04 02 c0 	mov    DWORD PTR [esp],0xc00204e4
c000f0e9:	e8 c3 0f 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000f0ee:	c7 04 24 74 05 02 c0 	mov    DWORD PTR [esp],0xc0020574
c000f0f5:	e8 35 4a 00 00       	call   c0013b2f <Thr::loadKernelSymbolTable(char const*)>
c000f0fa:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f102:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f10d:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f114:	89 04 24             	mov    DWORD PTR [esp],eax
c000f117:	e8 4a 89 ff ff       	call   c0007a66 <malloc>
c000f11c:	89 c3                	mov    ebx,eax
c000f11e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f123:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f127:	c7 44 24 04 92 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020592
c000f12f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f132:	e8 21 be ff ff       	call   c000af58 <File::File(char const*, Process*)>
c000f137:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f13e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f146:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f14d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f150:	e8 c1 be ff ff       	call   c000b016 <File::open(FileOpenMode)>
c000f155:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f15c:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f164:	75 12                	jne    c000f178 <ACPI::open(int, int, void*)+0xac>
c000f166:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f16d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f170:	e8 ff be ff ff       	call   c000b074 <File::close()>
c000f175:	eb 09                	jmp    c000f180 <ACPI::open(int, int, void*)+0xb4>
c000f177:	90                   	nop
c000f178:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f180:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f188:	74 1a                	je     c000f1a4 <ACPI::open(int, int, void*)+0xd8>
c000f18a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f191:	8b 00                	mov    eax,DWORD PTR [eax]
c000f193:	83 c0 08             	add    eax,0x8
c000f196:	8b 00                	mov    eax,DWORD PTR [eax]
c000f198:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f19f:	89 14 24             	mov    DWORD PTR [esp],edx
c000f1a2:	ff d0                	call   eax
c000f1a4:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f1ac:	34 01                	xor    al,0x1
c000f1ae:	74 40                	je     c000f1f0 <ACPI::open(int, int, void*)+0x124>
c000f1b0:	c7 04 24 b0 05 02 c0 	mov    DWORD PTR [esp],0xc00205b0
c000f1b7:	e8 f5 0e 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000f1bc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f1c4:	c7 44 24 04 cb 05 02 c0 	mov    DWORD PTR [esp+0x4],0xc00205cb
c000f1cc:	c7 04 24 dc 05 02 c0 	mov    DWORD PTR [esp],0xc00205dc
c000f1d3:	e8 db 3c 00 00       	call   c0012eb3 <Reg::readIntWithDefault(char*, char*, int)>
c000f1d8:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f1df:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f1e6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1e9:	e8 b4 a5 ff ff       	call   c00097a2 <Virt::setupPageSwapping(int)>
c000f1ee:	66 90                	xchg   ax,ax
c000f1f0:	c7 04 24 55 f6 01 c0 	mov    DWORD PTR [esp],0xc001f655
c000f1f7:	e8 b5 0e 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000f1fc:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f203:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f20b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f20e:	e8 05 cf ff ff       	call   c000c118 <getDevicesOfType(DeviceType)>
c000f213:	83 ec 04             	sub    esp,0x4
c000f216:	66 90                	xchg   ax,ax
c000f218:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f21f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f222:	e8 6d f8 00 00       	call   c001ea94 <LinkedList<Device>::isEmpty()>
c000f227:	34 01                	xor    al,0x1
c000f229:	0f 84 49 01 00 00    	je     c000f378 <ACPI::open(int, int, void*)+0x2ac>
c000f22f:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f236:	89 04 24             	mov    DWORD PTR [esp],eax
c000f239:	e8 72 f8 00 00       	call   c001eab0 <LinkedList<Device>::getFirstElement()>
c000f23e:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f245:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f24c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f24f:	e8 64 f8 00 00       	call   c001eab8 <LinkedList<Device>::removeFirst()>
c000f254:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f25b:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f262:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f269:	b8 24 00 00 00       	mov    eax,0x24
c000f26e:	83 e0 fc             	and    eax,0xfffffffc
c000f271:	89 c3                	mov    ebx,eax
c000f273:	b8 00 00 00 00       	mov    eax,0x0
c000f278:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f27f:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f283:	83 c0 04             	add    eax,0x4
c000f286:	39 d8                	cmp    eax,ebx
c000f288:	72 ee                	jb     c000f278 <ACPI::open(int, int, void*)+0x1ac>
c000f28a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f28e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f292:	b8 24 00 00 00       	mov    eax,0x24
c000f297:	83 e0 fc             	and    eax,0xfffffffc
c000f29a:	89 c1                	mov    ecx,eax
c000f29c:	b8 00 00 00 00       	mov    eax,0x0
c000f2a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a4:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f2a8:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f2ab:	83 c0 04             	add    eax,0x4
c000f2ae:	39 c8                	cmp    eax,ecx
c000f2b0:	72 f2                	jb     c000f2a4 <ACPI::open(int, int, void*)+0x1d8>
c000f2b2:	e8 fd af 00 00       	call   c001a2b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f2b7:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f2be:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f2c6:	0f 84 4c ff ff ff    	je     c000f218 <ACPI::open(int, int, void*)+0x14c>
c000f2cc:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f2d7:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f2de:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2e1:	e8 80 87 ff ff       	call   c0007a66 <malloc>
c000f2e6:	89 c3                	mov    ebx,eax
c000f2e8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f2ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2f1:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f2f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f2fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f2ff:	e8 54 bc ff ff       	call   c000af58 <File::File(char const*, Process*)>
c000f304:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000f30b:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f312:	89 04 24             	mov    DWORD PTR [esp],eax
c000f315:	e8 64 bf ff ff       	call   c000b27e <File::exists()>
c000f31a:	84 c0                	test   al,al
c000f31c:	74 2a                	je     c000f348 <ACPI::open(int, int, void*)+0x27c>
c000f31e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f326:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f32d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f330:	e8 88 52 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000f335:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000f33c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f340:	89 04 24             	mov    DWORD PTR [esp],eax
c000f343:	e8 b1 54 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000f348:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000f350:	0f 84 c2 fe ff ff    	je     c000f218 <ACPI::open(int, int, void*)+0x14c>
c000f356:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f35d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f35f:	83 c0 08             	add    eax,0x8
c000f362:	8b 00                	mov    eax,DWORD PTR [eax]
c000f364:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000f36b:	89 14 24             	mov    DWORD PTR [esp],edx
c000f36e:	ff d0                	call   eax
c000f370:	e9 a3 fe ff ff       	jmp    c000f218 <ACPI::open(int, int, void*)+0x14c>
c000f375:	8d 76 00             	lea    esi,[esi+0x0]
c000f378:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f37f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f382:	e8 09 f7 00 00       	call   c001ea90 <LinkedList<Device>::~LinkedList()>
c000f387:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f38d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f395:	c7 04 24 e3 05 02 c0 	mov    DWORD PTR [esp],0xc00205e3
c000f39c:	e8 1c 52 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000f3a1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000f3a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3a8:	e8 4c 54 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000f3ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f3b2:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f3b9:	24 04                	and    al,0x4
c000f3bb:	0f 84 0b 01 00 00    	je     c000f4cc <ACPI::open(int, int, void*)+0x400>
c000f3c1:	c7 04 24 00 06 02 c0 	mov    DWORD PTR [esp],0xc0020600
c000f3c8:	e8 e4 0c 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000f3cd:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000f3d8:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000f3df:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3e2:	e8 7f 86 ff ff       	call   c0007a66 <malloc>
c000f3e7:	89 c3                	mov    ebx,eax
c000f3e9:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3f2:	c7 44 24 04 1d 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002061d
c000f3fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3fd:	e8 56 bb ff ff       	call   c000af58 <File::File(char const*, Process*)>
c000f402:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000f409:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f411:	74 19                	je     c000f42c <ACPI::open(int, int, void*)+0x360>
c000f413:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f41a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41d:	e8 5c be ff ff       	call   c000b27e <File::exists()>
c000f422:	84 c0                	test   al,al
c000f424:	74 06                	je     c000f42c <ACPI::open(int, int, void*)+0x360>
c000f426:	b0 01                	mov    al,0x1
c000f428:	eb 06                	jmp    c000f430 <ACPI::open(int, int, void*)+0x364>
c000f42a:	66 90                	xchg   ax,ax
c000f42c:	b0 00                	mov    al,0x0
c000f42e:	66 90                	xchg   ax,ax
c000f430:	84 c0                	test   al,al
c000f432:	74 28                	je     c000f45c <ACPI::open(int, int, void*)+0x390>
c000f434:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f43c:	c7 04 24 1d 06 02 c0 	mov    DWORD PTR [esp],0xc002061d
c000f443:	e8 75 51 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c000f448:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000f44f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f453:	89 04 24             	mov    DWORD PTR [esp],eax
c000f456:	e8 9e 53 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c000f45b:	90                   	nop
c000f45c:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f464:	74 26                	je     c000f48c <ACPI::open(int, int, void*)+0x3c0>
c000f466:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f46e:	74 1c                	je     c000f48c <ACPI::open(int, int, void*)+0x3c0>
c000f470:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f477:	8b 00                	mov    eax,DWORD PTR [eax]
c000f479:	83 c0 08             	add    eax,0x8
c000f47c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f47e:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000f485:	89 14 24             	mov    DWORD PTR [esp],edx
c000f488:	ff d0                	call   eax
c000f48a:	66 90                	xchg   ax,ax
c000f48c:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f491:	c7 44 24 04 3a 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002063a
c000f499:	89 04 24             	mov    DWORD PTR [esp],eax
c000f49c:	e8 6b f2 ff ff       	call   c000e70c <findDataTable(unsigned char*, char*)>
c000f4a1:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000f4a8:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000f4b0:	74 1a                	je     c000f4cc <ACPI::open(int, int, void*)+0x400>
c000f4b2:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000f4b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f4bd:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f4c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c7:	e8 98 fb ff ff       	call   c000f064 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f4cc:	b8 00 00 00 00       	mov    eax,0x0
c000f4d1:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000f4d7:	5b                   	pop    ebx
c000f4d8:	c3                   	ret    
c000f4d9:	90                   	nop

c000f4da <CPU::close(int, int, void*)>:
c000f4da:	31 c0                	xor    eax,eax
c000f4dc:	c3                   	ret    
c000f4dd:	90                   	nop

c000f4de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f4de:	60                   	pusha  
c000f4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f4eb:	9c                   	pushf  
c000f4ec:	fa                   	cli    
c000f4ed:	0f 09                	wbinvd 
c000f4ef:	0f 30                	wrmsr  
c000f4f1:	9d                   	popf   
c000f4f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f4f6:	89 02                	mov    DWORD PTR [edx],eax
c000f4f8:	61                   	popa   
c000f4f9:	c3                   	ret    

c000f4fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f4fa:	60                   	pusha  
c000f4fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f4ff:	9c                   	pushf  
c000f500:	fa                   	cli    
c000f501:	0f 09                	wbinvd 
c000f503:	31 c0                	xor    eax,eax
c000f505:	31 d2                	xor    edx,edx
c000f507:	0f 32                	rdmsr  
c000f509:	9d                   	popf   
c000f50a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f50e:	89 02                	mov    DWORD PTR [edx],eax
c000f510:	61                   	popa   
c000f511:	c3                   	ret    

c000f512 <CPU::AMD_K6_writeback(int, int, int)>:
c000f512:	56                   	push   esi
c000f513:	53                   	push   ebx
c000f514:	83 ec 10             	sub    esp,0x10
c000f517:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f520:	75 5d                	jne    c000f57f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f522:	83 f8 08             	cmp    eax,0x8
c000f525:	75 09                	jne    c000f530 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f527:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f52c:	7e 13                	jle    c000f541 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f52e:	eb 30                	jmp    c000f560 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f530:	83 f8 06             	cmp    eax,0x6
c000f533:	7c 4a                	jl     c000f57f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f535:	83 f8 07             	cmp    eax,0x7
c000f538:	7e 07                	jle    c000f541 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f53a:	83 f8 09             	cmp    eax,0x9
c000f53d:	74 21                	je     c000f560 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f53f:	eb 3e                	jmp    c000f57f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f541:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f547:	89 e6                	mov    esi,esp
c000f549:	56                   	push   esi
c000f54a:	68 82 00 00 c0       	push   0xc0000082
c000f54f:	e8 a6 ff ff ff       	call   c000f4fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f554:	c1 eb 15             	shr    ebx,0x15
c000f557:	56                   	push   esi
c000f558:	83 e3 7e             	and    ebx,0x7e
c000f55b:	6a 00                	push   0x0
c000f55d:	53                   	push   ebx
c000f55e:	eb 12                	jmp    c000f572 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f560:	89 e3                	mov    ebx,esp
c000f562:	53                   	push   ebx
c000f563:	68 82 00 00 c0       	push   0xc0000082
c000f568:	e8 8d ff ff ff       	call   c000f4fa <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f56d:	53                   	push   ebx
c000f56e:	6a 00                	push   0x0
c000f570:	6a 00                	push   0x0
c000f572:	68 82 00 00 c0       	push   0xc0000082
c000f577:	e8 62 ff ff ff       	call   c000f4de <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f57c:	83 c4 18             	add    esp,0x18
c000f57f:	83 c4 10             	add    esp,0x10
c000f582:	5b                   	pop    ebx
c000f583:	5e                   	pop    esi
c000f584:	c3                   	ret    
c000f585:	90                   	nop

c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f586:	55                   	push   ebp
c000f587:	57                   	push   edi
c000f588:	56                   	push   esi
c000f589:	53                   	push   ebx
c000f58a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f58e:	39 05 50 1b 02 c0    	cmp    DWORD PTR ds:0xc0021b50,eax
c000f594:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f598:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f59c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f5a0:	75 23                	jne    c000f5c5 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f5a2:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f5a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f5ab:	89 06                	mov    DWORD PTR [esi],eax
c000f5ad:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f5b2:	89 07                	mov    DWORD PTR [edi],eax
c000f5b4:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f5b9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f5bc:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f5c1:	89 02                	mov    DWORD PTR [edx],eax
c000f5c3:	eb 3f                	jmp    c000f604 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f5c5:	31 c9                	xor    ecx,ecx
c000f5c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5cb:	0f a2                	cpuid  
c000f5cd:	89 06                	mov    DWORD PTR [esi],eax
c000f5cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5d3:	89 1f                	mov    DWORD PTR [edi],ebx
c000f5d5:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f5d8:	89 10                	mov    DWORD PTR [eax],edx
c000f5da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f5de:	a3 50 1b 02 c0       	mov    ds:0xc0021b50,eax
c000f5e3:	8b 06                	mov    eax,DWORD PTR [esi]
c000f5e5:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f5ea:	8b 07                	mov    eax,DWORD PTR [edi]
c000f5ec:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f5f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f5f4:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f5f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ff:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f604:	5b                   	pop    ebx
c000f605:	5e                   	pop    esi
c000f606:	5f                   	pop    edi
c000f607:	5d                   	pop    ebp
c000f608:	c3                   	ret    
c000f609:	90                   	nop

c000f60a <CPU::cpuidCheckEDX(unsigned int)>:
c000f60a:	83 ec 10             	sub    esp,0x10
c000f60d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f611:	50                   	push   eax
c000f612:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f616:	50                   	push   eax
c000f617:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f61b:	50                   	push   eax
c000f61c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f620:	50                   	push   eax
c000f621:	6a 01                	push   0x1
c000f623:	e8 5e ff ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f62c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f630:	0f 95 c0             	setne  al
c000f633:	83 c4 24             	add    esp,0x24
c000f636:	c3                   	ret    
c000f637:	90                   	nop

c000f638 <CPU::cpuidCheckECX(unsigned int)>:
c000f638:	83 ec 10             	sub    esp,0x10
c000f63b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f63f:	50                   	push   eax
c000f640:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f644:	50                   	push   eax
c000f645:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f649:	50                   	push   eax
c000f64a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f64e:	50                   	push   eax
c000f64f:	6a 01                	push   0x1
c000f651:	e8 30 ff ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f65a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f65e:	0f 95 c0             	setne  al
c000f661:	83 c4 24             	add    esp,0x24
c000f664:	c3                   	ret    
c000f665:	90                   	nop

c000f666 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f666:	83 ec 10             	sub    esp,0x10
c000f669:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f66d:	50                   	push   eax
c000f66e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f672:	50                   	push   eax
c000f673:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f677:	50                   	push   eax
c000f678:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f67c:	50                   	push   eax
c000f67d:	6a 07                	push   0x7
c000f67f:	e8 02 ff ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f684:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f688:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f68c:	0f 95 c0             	setne  al
c000f68f:	83 c4 24             	add    esp,0x24
c000f692:	c3                   	ret    
c000f693:	90                   	nop

c000f694 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f694:	83 ec 10             	sub    esp,0x10
c000f697:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f69b:	50                   	push   eax
c000f69c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a0:	50                   	push   eax
c000f6a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6a5:	50                   	push   eax
c000f6a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6aa:	50                   	push   eax
c000f6ab:	6a 07                	push   0x7
c000f6ad:	e8 d4 fe ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f6ba:	0f 95 c0             	setne  al
c000f6bd:	83 c4 24             	add    esp,0x24
c000f6c0:	c3                   	ret    
c000f6c1:	90                   	nop

c000f6c2 <CPU::CPU()>:
c000f6c2:	83 ec 1c             	sub    esp,0x1c
c000f6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c9:	c7 44 24 04 5d 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002075d
c000f6d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6d4:	e8 c1 c8 ff ff       	call   c000bf9a <Device::Device(char const*)>
c000f6d9:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c000f6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e2:	89 10                	mov    DWORD PTR [eax],edx
c000f6e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e8:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f6:	05 78 01 00 00       	add    eax,0x178
c000f6fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6fe:	e8 ff 7b ff ff       	call   c0007302 <GDT::GDT()>
c000f703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f707:	05 7c 09 00 00       	add    eax,0x97c
c000f70c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f70f:	e8 2c 7e ff ff       	call   c0007540 <IDT::IDT()>
c000f714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f718:	05 7c 11 00 00       	add    eax,0x117c
c000f71d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f720:	e8 ab 97 ff ff       	call   c0008ed0 <TSS::TSS()>
c000f725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f729:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f734:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f73e:	90                   	nop
c000f73f:	83 c4 1c             	add    esp,0x1c
c000f742:	c3                   	ret    
c000f743:	90                   	nop

c000f744 <CPU::displayFeatures()>:
c000f744:	c3                   	ret    
c000f745:	90                   	nop

c000f746 <CPU::detectFeatures()>:
c000f746:	55                   	push   ebp
c000f747:	57                   	push   edi
c000f748:	56                   	push   esi
c000f749:	53                   	push   ebx
c000f74a:	83 ec 30             	sub    esp,0x30
c000f74d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f751:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f75b:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f761:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f768:	6a 0d                	push   0xd
c000f76a:	6a 00                	push   0x0
c000f76c:	55                   	push   ebp
c000f76d:	e8 7e 0d ff ff       	call   c00004f0 <memset>
c000f772:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f777:	83 c4 10             	add    esp,0x10
c000f77a:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f781:	0f 84 ba 05 00 00    	je     c000fd41 <CPU::detectFeatures()+0x5fb>
c000f787:	83 ec 0c             	sub    esp,0xc
c000f78a:	89 ef                	mov    edi,ebp
c000f78c:	6a 10                	push   0x10
c000f78e:	e8 77 fe ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f793:	24 01                	and    al,0x1
c000f795:	00 c0                	add    al,al
c000f797:	88 c2                	mov    dl,al
c000f799:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f79f:	24 fd                	and    al,0xfd
c000f7a1:	08 d0                	or     al,dl
c000f7a3:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7a9:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f7b0:	e8 55 fe ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f7b5:	24 01                	and    al,0x1
c000f7b7:	c0 e0 02             	shl    al,0x2
c000f7ba:	88 c2                	mov    dl,al
c000f7bc:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7c2:	24 fb                	and    al,0xfb
c000f7c4:	08 d0                	or     al,dl
c000f7c6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7cc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f7d3:	e8 32 fe ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f7d8:	24 01                	and    al,0x1
c000f7da:	c0 e0 03             	shl    al,0x3
c000f7dd:	88 c2                	mov    dl,al
c000f7df:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7e5:	24 f7                	and    al,0xf7
c000f7e7:	08 d0                	or     al,dl
c000f7e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7ef:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f7f6:	e8 0f fe ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f7fb:	24 01                	and    al,0x1
c000f7fd:	c0 e0 04             	shl    al,0x4
c000f800:	88 c2                	mov    dl,al
c000f802:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f808:	24 ef                	and    al,0xef
c000f80a:	08 d0                	or     al,dl
c000f80c:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f812:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f819:	e8 ec fd ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f81e:	24 01                	and    al,0x1
c000f820:	c0 e0 05             	shl    al,0x5
c000f823:	88 c2                	mov    dl,al
c000f825:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f82b:	24 df                	and    al,0xdf
c000f82d:	08 d0                	or     al,dl
c000f82f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f835:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f83c:	e8 c9 fd ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f841:	24 01                	and    al,0x1
c000f843:	00 c0                	add    al,al
c000f845:	88 c2                	mov    dl,al
c000f847:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f84d:	24 fd                	and    al,0xfd
c000f84f:	08 d0                	or     al,dl
c000f851:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f857:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f85e:	e8 a7 fd ff ff       	call   c000f60a <CPU::cpuidCheckEDX(unsigned int)>
c000f863:	24 01                	and    al,0x1
c000f865:	c0 e0 06             	shl    al,0x6
c000f868:	88 c2                	mov    dl,al
c000f86a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f870:	24 bf                	and    al,0xbf
c000f872:	08 d0                	or     al,dl
c000f874:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f87a:	58                   	pop    eax
c000f87b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f87f:	50                   	push   eax
c000f880:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f884:	50                   	push   eax
c000f885:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f889:	56                   	push   esi
c000f88a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f88e:	50                   	push   eax
c000f88f:	6a 00                	push   0x0
c000f891:	e8 f0 fc ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f896:	b8 04 00 00 00       	mov    eax,0x4
c000f89b:	89 c1                	mov    ecx,eax
c000f89d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f89f:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f8a5:	89 c1                	mov    ecx,eax
c000f8a7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f8ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8ad:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f8b3:	89 c1                	mov    ecx,eax
c000f8b5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f8b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f8bb:	83 c4 18             	add    esp,0x18
c000f8be:	68 6c 06 02 c0       	push   0xc002066c
c000f8c3:	55                   	push   ebp
c000f8c4:	e8 e7 0e ff ff       	call   c00007b0 <strcmp>
c000f8c9:	83 c4 10             	add    esp,0x10
c000f8cc:	85 c0                	test   eax,eax
c000f8ce:	75 0f                	jne    c000f8df <CPU::detectFeatures()+0x199>
c000f8d0:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f8da:	e9 22 02 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f8df:	50                   	push   eax
c000f8e0:	50                   	push   eax
c000f8e1:	68 79 06 02 c0       	push   0xc0020679
c000f8e6:	55                   	push   ebp
c000f8e7:	e8 c4 0e ff ff       	call   c00007b0 <strcmp>
c000f8ec:	83 c4 10             	add    esp,0x10
c000f8ef:	85 c0                	test   eax,eax
c000f8f1:	74 dd                	je     c000f8d0 <CPU::detectFeatures()+0x18a>
c000f8f3:	50                   	push   eax
c000f8f4:	50                   	push   eax
c000f8f5:	68 86 06 02 c0       	push   0xc0020686
c000f8fa:	55                   	push   ebp
c000f8fb:	e8 b0 0e ff ff       	call   c00007b0 <strcmp>
c000f900:	83 c4 10             	add    esp,0x10
c000f903:	85 c0                	test   eax,eax
c000f905:	74 2a                	je     c000f931 <CPU::detectFeatures()+0x1eb>
c000f907:	50                   	push   eax
c000f908:	50                   	push   eax
c000f909:	68 93 06 02 c0       	push   0xc0020693
c000f90e:	55                   	push   ebp
c000f90f:	e8 9c 0e ff ff       	call   c00007b0 <strcmp>
c000f914:	83 c4 10             	add    esp,0x10
c000f917:	85 c0                	test   eax,eax
c000f919:	74 16                	je     c000f931 <CPU::detectFeatures()+0x1eb>
c000f91b:	50                   	push   eax
c000f91c:	50                   	push   eax
c000f91d:	68 a0 06 02 c0       	push   0xc00206a0
c000f922:	55                   	push   ebp
c000f923:	e8 88 0e ff ff       	call   c00007b0 <strcmp>
c000f928:	83 c4 10             	add    esp,0x10
c000f92b:	85 c0                	test   eax,eax
c000f92d:	74 48                	je     c000f977 <CPU::detectFeatures()+0x231>
c000f92f:	eb 0f                	jmp    c000f940 <CPU::detectFeatures()+0x1fa>
c000f931:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f93b:	e9 c1 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f940:	50                   	push   eax
c000f941:	50                   	push   eax
c000f942:	68 ad 06 02 c0       	push   0xc00206ad
c000f947:	55                   	push   ebp
c000f948:	e8 63 0e ff ff       	call   c00007b0 <strcmp>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	85 c0                	test   eax,eax
c000f952:	74 23                	je     c000f977 <CPU::detectFeatures()+0x231>
c000f954:	57                   	push   edi
c000f955:	57                   	push   edi
c000f956:	68 ba 06 02 c0       	push   0xc00206ba
c000f95b:	55                   	push   ebp
c000f95c:	e8 4f 0e ff ff       	call   c00007b0 <strcmp>
c000f961:	83 c4 10             	add    esp,0x10
c000f964:	85 c0                	test   eax,eax
c000f966:	75 1e                	jne    c000f986 <CPU::detectFeatures()+0x240>
c000f968:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f972:	e9 8a 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f977:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f981:	e9 7b 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f986:	56                   	push   esi
c000f987:	56                   	push   esi
c000f988:	68 c7 06 02 c0       	push   0xc00206c7
c000f98d:	55                   	push   ebp
c000f98e:	e8 1d 0e ff ff       	call   c00007b0 <strcmp>
c000f993:	83 c4 10             	add    esp,0x10
c000f996:	85 c0                	test   eax,eax
c000f998:	75 0f                	jne    c000f9a9 <CPU::detectFeatures()+0x263>
c000f99a:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f9a4:	e9 58 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f9a9:	51                   	push   ecx
c000f9aa:	51                   	push   ecx
c000f9ab:	68 86 06 02 c0       	push   0xc0020686
c000f9b0:	55                   	push   ebp
c000f9b1:	e8 fa 0d ff ff       	call   c00007b0 <strcmp>
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	85 c0                	test   eax,eax
c000f9bb:	75 0f                	jne    c000f9cc <CPU::detectFeatures()+0x286>
c000f9bd:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f9c7:	e9 35 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f9cc:	52                   	push   edx
c000f9cd:	52                   	push   edx
c000f9ce:	68 d4 06 02 c0       	push   0xc00206d4
c000f9d3:	55                   	push   ebp
c000f9d4:	e8 d7 0d ff ff       	call   c00007b0 <strcmp>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	85 c0                	test   eax,eax
c000f9de:	75 0f                	jne    c000f9ef <CPU::detectFeatures()+0x2a9>
c000f9e0:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f9ea:	e9 12 01 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000f9ef:	50                   	push   eax
c000f9f0:	50                   	push   eax
c000f9f1:	68 e1 06 02 c0       	push   0xc00206e1
c000f9f6:	55                   	push   ebp
c000f9f7:	e8 b4 0d ff ff       	call   c00007b0 <strcmp>
c000f9fc:	83 c4 10             	add    esp,0x10
c000f9ff:	85 c0                	test   eax,eax
c000fa01:	75 0f                	jne    c000fa12 <CPU::detectFeatures()+0x2cc>
c000fa03:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fa0d:	e9 ef 00 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fa12:	50                   	push   eax
c000fa13:	50                   	push   eax
c000fa14:	68 ee 06 02 c0       	push   0xc00206ee
c000fa19:	55                   	push   ebp
c000fa1a:	e8 91 0d ff ff       	call   c00007b0 <strcmp>
c000fa1f:	83 c4 10             	add    esp,0x10
c000fa22:	85 c0                	test   eax,eax
c000fa24:	75 0f                	jne    c000fa35 <CPU::detectFeatures()+0x2ef>
c000fa26:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fa30:	e9 cc 00 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fa35:	50                   	push   eax
c000fa36:	50                   	push   eax
c000fa37:	68 fb 06 02 c0       	push   0xc00206fb
c000fa3c:	55                   	push   ebp
c000fa3d:	e8 6e 0d ff ff       	call   c00007b0 <strcmp>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	85 c0                	test   eax,eax
c000fa47:	75 0f                	jne    c000fa58 <CPU::detectFeatures()+0x312>
c000fa49:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fa53:	e9 a9 00 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fa58:	50                   	push   eax
c000fa59:	50                   	push   eax
c000fa5a:	68 08 07 02 c0       	push   0xc0020708
c000fa5f:	55                   	push   ebp
c000fa60:	e8 4b 0d ff ff       	call   c00007b0 <strcmp>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	85 c0                	test   eax,eax
c000fa6a:	75 0f                	jne    c000fa7b <CPU::detectFeatures()+0x335>
c000fa6c:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fa76:	e9 86 00 00 00       	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fa7b:	50                   	push   eax
c000fa7c:	50                   	push   eax
c000fa7d:	68 15 07 02 c0       	push   0xc0020715
c000fa82:	55                   	push   ebp
c000fa83:	e8 28 0d ff ff       	call   c00007b0 <strcmp>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	85 c0                	test   eax,eax
c000fa8d:	75 0c                	jne    c000fa9b <CPU::detectFeatures()+0x355>
c000fa8f:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fa99:	eb 66                	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fa9b:	50                   	push   eax
c000fa9c:	50                   	push   eax
c000fa9d:	68 22 07 02 c0       	push   0xc0020722
c000faa2:	55                   	push   ebp
c000faa3:	e8 08 0d ff ff       	call   c00007b0 <strcmp>
c000faa8:	83 c4 10             	add    esp,0x10
c000faab:	85 c0                	test   eax,eax
c000faad:	75 0c                	jne    c000fabb <CPU::detectFeatures()+0x375>
c000faaf:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fab9:	eb 46                	jmp    c000fb01 <CPU::detectFeatures()+0x3bb>
c000fabb:	57                   	push   edi
c000fabc:	57                   	push   edi
c000fabd:	68 2f 07 02 c0       	push   0xc002072f
c000fac2:	55                   	push   ebp
c000fac3:	e8 e8 0c ff ff       	call   c00007b0 <strcmp>
c000fac8:	83 c4 10             	add    esp,0x10
c000facb:	85 c0                	test   eax,eax
c000facd:	74 e0                	je     c000faaf <CPU::detectFeatures()+0x369>
c000facf:	56                   	push   esi
c000fad0:	56                   	push   esi
c000fad1:	68 3c 07 02 c0       	push   0xc002073c
c000fad6:	55                   	push   ebp
c000fad7:	e8 d4 0c ff ff       	call   c00007b0 <strcmp>
c000fadc:	83 c4 10             	add    esp,0x10
c000fadf:	85 c0                	test   eax,eax
c000fae1:	74 cc                	je     c000faaf <CPU::detectFeatures()+0x369>
c000fae3:	51                   	push   ecx
c000fae4:	51                   	push   ecx
c000fae5:	68 49 07 02 c0       	push   0xc0020749
c000faea:	55                   	push   ebp
c000faeb:	e8 c0 0c ff ff       	call   c00007b0 <strcmp>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	85 c0                	test   eax,eax
c000faf5:	74 b8                	je     c000faaf <CPU::detectFeatures()+0x369>
c000faf7:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fb01:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fb06:	0f 86 ac 00 00 00    	jbe    c000fbb8 <CPU::detectFeatures()+0x472>
c000fb0c:	83 ec 0c             	sub    esp,0xc
c000fb0f:	68 80 00 00 00       	push   0x80
c000fb14:	e8 4d fb ff ff       	call   c000f666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb19:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fb1f:	80 e2 bf             	and    dl,0xbf
c000fb22:	24 01                	and    al,0x1
c000fb24:	c0 e0 06             	shl    al,0x6
c000fb27:	08 c2                	or     dl,al
c000fb29:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c000fb2f:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fb36:	e8 2b fb ff ff       	call   c000f666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb3b:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fb41:	80 e2 ef             	and    dl,0xef
c000fb44:	24 01                	and    al,0x1
c000fb46:	c0 e0 04             	shl    al,0x4
c000fb49:	08 c2                	or     dl,al
c000fb4b:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fb51:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fb58:	e8 09 fb ff ff       	call   c000f666 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fb5d:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fb63:	80 e2 7f             	and    dl,0x7f
c000fb66:	c0 e0 07             	shl    al,0x7
c000fb69:	08 d0                	or     al,dl
c000fb6b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fb71:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fb78:	e8 17 fb ff ff       	call   c000f694 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fb7d:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fb83:	80 e2 f7             	and    dl,0xf7
c000fb86:	24 01                	and    al,0x1
c000fb88:	c0 e0 03             	shl    al,0x3
c000fb8b:	08 c2                	or     dl,al
c000fb8d:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fb93:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fb9a:	e8 f5 fa ff ff       	call   c000f694 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fb9f:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c000fba5:	83 c4 10             	add    esp,0x10
c000fba8:	80 e2 fb             	and    dl,0xfb
c000fbab:	24 01                	and    al,0x1
c000fbad:	c0 e0 02             	shl    al,0x2
c000fbb0:	08 c2                	or     dl,al
c000fbb2:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbbf:	50                   	push   eax
c000fbc0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbc4:	50                   	push   eax
c000fbc5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fbc9:	56                   	push   esi
c000fbca:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fbce:	50                   	push   eax
c000fbcf:	6a 01                	push   0x1
c000fbd1:	e8 b0 f9 ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fbd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbda:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fbe0:	88 c1                	mov    cl,al
c000fbe2:	80 e1 0f             	and    cl,0xf
c000fbe5:	80 e2 f0             	and    dl,0xf0
c000fbe8:	08 ca                	or     dl,cl
c000fbea:	88 c1                	mov    cl,al
c000fbec:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fbf2:	c0 e9 04             	shr    cl,0x4
c000fbf5:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c000fbf9:	0f b6 d1             	movzx  edx,cl
c000fbfc:	89 d1                	mov    ecx,edx
c000fbfe:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fc04:	c1 e1 06             	shl    ecx,0x6
c000fc07:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fc0d:	09 ca                	or     edx,ecx
c000fc0f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fc16:	89 c2                	mov    edx,eax
c000fc18:	c1 ea 08             	shr    edx,0x8
c000fc1b:	88 d1                	mov    cl,dl
c000fc1d:	c0 e2 06             	shl    dl,0x6
c000fc20:	80 e1 0f             	and    cl,0xf
c000fc23:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c000fc27:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fc2d:	80 e1 3f             	and    cl,0x3f
c000fc30:	08 ca                	or     dl,cl
c000fc32:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fc38:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fc3e:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c000fc42:	83 c4 20             	add    esp,0x20
c000fc45:	80 e2 c0             	and    dl,0xc0
c000fc48:	c0 e9 02             	shr    cl,0x2
c000fc4b:	08 ca                	or     dl,cl
c000fc4d:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fc53:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fc59:	89 c2                	mov    edx,eax
c000fc5b:	c1 ea 0c             	shr    edx,0xc
c000fc5e:	80 e2 03             	and    dl,0x3
c000fc61:	c0 e2 04             	shl    dl,0x4
c000fc64:	80 e1 cf             	and    cl,0xcf
c000fc67:	08 ca                	or     dl,cl
c000fc69:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c000fc6e:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fc74:	74 07                	je     c000fc7d <CPU::detectFeatures()+0x537>
c000fc76:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fc7b:	75 5f                	jne    c000fcdc <CPU::detectFeatures()+0x596>
c000fc7d:	89 c2                	mov    edx,eax
c000fc7f:	c1 ea 10             	shr    edx,0x10
c000fc82:	c0 e2 04             	shl    dl,0x4
c000fc85:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c000fc89:	0f b6 d2             	movzx  edx,dl
c000fc8c:	89 d7                	mov    edi,edx
c000fc8e:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fc94:	c1 e7 06             	shl    edi,0x6
c000fc97:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fc9d:	09 fa                	or     edx,edi
c000fc9f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fca6:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fcab:	75 2f                	jne    c000fcdc <CPU::detectFeatures()+0x596>
c000fcad:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fcb3:	c1 e8 14             	shr    eax,0x14
c000fcb6:	04 0f                	add    al,0xf
c000fcb8:	88 c1                	mov    cl,al
c000fcba:	c0 e1 06             	shl    cl,0x6
c000fcbd:	c0 e8 02             	shr    al,0x2
c000fcc0:	80 e2 3f             	and    dl,0x3f
c000fcc3:	08 ca                	or     dl,cl
c000fcc5:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fccb:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fcd1:	80 e2 c0             	and    dl,0xc0
c000fcd4:	08 d0                	or     al,dl
c000fcd6:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fcdc:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fce3:	83 ec 0c             	sub    esp,0xc
c000fce6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcea:	50                   	push   eax
c000fceb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fcef:	55                   	push   ebp
c000fcf0:	56                   	push   esi
c000fcf1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcf5:	57                   	push   edi
c000fcf6:	68 00 00 00 80       	push   0x80000000
c000fcfb:	e8 86 f8 ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd00:	83 c4 20             	add    esp,0x20
c000fd03:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fd0b:	76 22                	jbe    c000fd2f <CPU::detectFeatures()+0x5e9>
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fd14:	50                   	push   eax
c000fd15:	55                   	push   ebp
c000fd16:	56                   	push   esi
c000fd17:	57                   	push   edi
c000fd18:	68 01 00 00 80       	push   0x80000001
c000fd1d:	e8 64 f8 ff ff       	call   c000f586 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fd22:	83 c4 20             	add    esp,0x20
c000fd25:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fd2f:	52                   	push   edx
c000fd30:	52                   	push   edx
c000fd31:	68 55 07 02 c0       	push   0xc0020755
c000fd36:	53                   	push   ebx
c000fd37:	e8 50 c2 ff ff       	call   c000bf8c <Device::setName(char const*)>
c000fd3c:	83 c4 10             	add    esp,0x10
c000fd3f:	eb 64                	jmp    c000fda5 <CPU::detectFeatures()+0x65f>
c000fd41:	50                   	push   eax
c000fd42:	50                   	push   eax
c000fd43:	68 ba 06 02 c0       	push   0xc00206ba
c000fd48:	55                   	push   ebp
c000fd49:	e8 42 09 ff ff       	call   c0000690 <strcpy>
c000fd4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fd58:	e8 66 04 ff ff       	call   c00001c3 <is486>
c000fd5d:	83 c4 10             	add    esp,0x10
c000fd60:	85 c0                	test   eax,eax
c000fd62:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fd68:	74 1c                	je     c000fd86 <CPU::detectFeatures()+0x640>
c000fd6a:	0c 07                	or     al,0x7
c000fd6c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fd72:	0f 20 c0             	mov    eax,cr0
c000fd75:	83 e0 14             	and    eax,0x14
c000fd78:	83 f8 04             	cmp    eax,0x4
c000fd7b:	75 0d                	jne    c000fd8a <CPU::detectFeatures()+0x644>
c000fd7d:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fd84:	eb 1f                	jmp    c000fda5 <CPU::detectFeatures()+0x65f>
c000fd86:	24 f8                	and    al,0xf8
c000fd88:	eb e2                	jmp    c000fd6c <CPU::detectFeatures()+0x626>
c000fd8a:	e8 0f 04 ff ff       	call   c000019e <hasLegacyFPU>
c000fd8f:	24 01                	and    al,0x1
c000fd91:	00 c0                	add    al,al
c000fd93:	88 c2                	mov    dl,al
c000fd95:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fd9b:	24 fd                	and    al,0xfd
c000fd9d:	08 d0                	or     al,dl
c000fd9f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fda5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fdac:	74 0e                	je     c000fdbc <CPU::detectFeatures()+0x676>
c000fdae:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fdb3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fdba:	eb 1f                	jmp    c000fddb <CPU::detectFeatures()+0x695>
c000fdbc:	e8 dd 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fdc1:	24 01                	and    al,0x1
c000fdc3:	00 c0                	add    al,al
c000fdc5:	88 c2                	mov    dl,al
c000fdc7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fdcd:	24 fd                	and    al,0xfd
c000fdcf:	08 d0                	or     al,dl
c000fdd1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fdd7:	24 02                	and    al,0x2
c000fdd9:	75 d3                	jne    c000fdae <CPU::detectFeatures()+0x668>
c000fddb:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fde2:	83 c4 2c             	add    esp,0x2c
c000fde5:	5b                   	pop    ebx
c000fde6:	5e                   	pop    esi
c000fde7:	5f                   	pop    edi
c000fde8:	5d                   	pop    ebp
c000fde9:	c3                   	ret    

c000fdea <CPU::setupSMEP()>:
c000fdea:	0f 20 e0             	mov    eax,cr4
c000fded:	0d 00 00 10 00       	or     eax,0x100000
c000fdf2:	0f 22 e0             	mov    cr4,eax
c000fdf5:	c3                   	ret    

c000fdf6 <CPU::setupUMIP()>:
c000fdf6:	0f 20 e0             	mov    eax,cr4
c000fdf9:	80 cc 08             	or     ah,0x8
c000fdfc:	0f 22 e0             	mov    cr4,eax
c000fdff:	c3                   	ret    

c000fe00 <CPU::setupTSC()>:
c000fe00:	0f 20 e0             	mov    eax,cr4
c000fe03:	83 c8 04             	or     eax,0x4
c000fe06:	0f 22 e0             	mov    cr4,eax
c000fe09:	c3                   	ret    

c000fe0a <CPU::setupLargePages()>:
c000fe0a:	0f 20 e0             	mov    eax,cr4
c000fe0d:	83 c8 10             	or     eax,0x10
c000fe10:	0f 22 e0             	mov    cr4,eax
c000fe13:	c3                   	ret    

c000fe14 <CPU::setupPAT()>:
c000fe14:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fe19:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fe20:	74 2c                	je     c000fe4e <CPU::setupPAT()+0x3a>
c000fe22:	53                   	push   ebx
c000fe23:	83 ec 10             	sub    esp,0x10
c000fe26:	68 77 02 00 00       	push   0x277
c000fe2b:	50                   	push   eax
c000fe2c:	e8 ff 71 ff ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c000fe31:	83 e2 f8             	and    edx,0xfffffff8
c000fe34:	83 ca 01             	or     edx,0x1
c000fe37:	52                   	push   edx
c000fe38:	50                   	push   eax
c000fe39:	68 77 02 00 00       	push   0x277
c000fe3e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000fe44:	e8 0f 72 ff ff       	call   c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fe49:	83 c4 28             	add    esp,0x28
c000fe4c:	5b                   	pop    ebx
c000fe4d:	c3                   	ret    
c000fe4e:	c3                   	ret    
c000fe4f:	90                   	nop

c000fe50 <CPU::setupMTRR()>:
c000fe50:	c3                   	ret    
c000fe51:	90                   	nop

c000fe52 <CPU::setupGlobalPages()>:
c000fe52:	0f 20 e0             	mov    eax,cr4
c000fe55:	0c 80                	or     al,0x80
c000fe57:	0f 22 e0             	mov    cr4,eax
c000fe5a:	c3                   	ret    
c000fe5b:	90                   	nop

c000fe5c <CPU::allowUsermodeDataAccess()>:
c000fe5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe60:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fe67:	74 03                	je     c000fe6c <CPU::allowUsermodeDataAccess()+0x10>
c000fe69:	0f 01 cb             	stac   
c000fe6c:	c3                   	ret    
c000fe6d:	90                   	nop

c000fe6e <CPU::prohibitUsermodeDataAccess()>:
c000fe6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe72:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fe79:	74 03                	je     c000fe7e <CPU::prohibitUsermodeDataAccess()+0x10>
c000fe7b:	0f 01 ca             	clac   
c000fe7e:	c3                   	ret    
c000fe7f:	90                   	nop

c000fe80 <CPU::setupSMAP()>:
c000fe80:	0f 20 e0             	mov    eax,cr4
c000fe83:	0d 00 00 20 00       	or     eax,0x200000
c000fe88:	0f 22 e0             	mov    cr4,eax
c000fe8b:	eb e1                	jmp    c000fe6e <CPU::prohibitUsermodeDataAccess()>
c000fe8d:	90                   	nop

c000fe8e <CPU::setupFeatures()>:
c000fe8e:	53                   	push   ebx
c000fe8f:	83 ec 08             	sub    esp,0x8
c000fe92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe96:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fe9d:	74 18                	je     c000feb7 <CPU::setupFeatures()+0x29>
c000fe9f:	83 ec 0c             	sub    esp,0xc
c000fea2:	68 61 07 02 c0       	push   0xc0020761
c000fea7:	e8 2a ab ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000feac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000feaf:	e8 42 ff ff ff       	call   c000fdf6 <CPU::setupUMIP()>
c000feb4:	83 c4 10             	add    esp,0x10
c000feb7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000febe:	74 18                	je     c000fed8 <CPU::setupFeatures()+0x4a>
c000fec0:	83 ec 0c             	sub    esp,0xc
c000fec3:	68 6b 07 02 c0       	push   0xc002076b
c000fec8:	e8 09 ab ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000fecd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fed0:	e8 2b ff ff ff       	call   c000fe00 <CPU::setupTSC()>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fedf:	74 18                	je     c000fef9 <CPU::setupFeatures()+0x6b>
c000fee1:	83 ec 0c             	sub    esp,0xc
c000fee4:	68 74 07 02 c0       	push   0xc0020774
c000fee9:	e8 e8 aa ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000feee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fef1:	e8 14 ff ff ff       	call   c000fe0a <CPU::setupLargePages()>
c000fef6:	83 c4 10             	add    esp,0x10
c000fef9:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000ff00:	74 18                	je     c000ff1a <CPU::setupFeatures()+0x8c>
c000ff02:	83 ec 0c             	sub    esp,0xc
c000ff05:	68 7d 07 02 c0       	push   0xc002077d
c000ff0a:	e8 c7 aa ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000ff0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff12:	e8 3b ff ff ff       	call   c000fe52 <CPU::setupGlobalPages()>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000ff21:	74 18                	je     c000ff3b <CPU::setupFeatures()+0xad>
c000ff23:	83 ec 0c             	sub    esp,0xc
c000ff26:	68 8f 07 02 c0       	push   0xc002078f
c000ff2b:	e8 a6 aa ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c000ff30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff33:	e8 dc fe ff ff       	call   c000fe14 <CPU::setupPAT()>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000ff42:	74 11                	je     c000ff55 <CPU::setupFeatures()+0xc7>
c000ff44:	c7 44 24 10 98 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020798
c000ff4c:	83 c4 08             	add    esp,0x8
c000ff4f:	5b                   	pop    ebx
c000ff50:	e9 81 aa ff ff       	jmp    c000a9d6 <Dbg::kprintf(char const*, ...)>
c000ff55:	83 c4 08             	add    esp,0x8
c000ff58:	5b                   	pop    ebx
c000ff59:	c3                   	ret    

c000ff5a <CPU::open(int, int, void*)>:
c000ff5a:	57                   	push   edi
c000ff5b:	56                   	push   esi
c000ff5c:	53                   	push   ebx
c000ff5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff61:	83 ec 0c             	sub    esp,0xc
c000ff64:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ff68:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000ff6e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000ff74:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000ff7a:	50                   	push   eax
c000ff7b:	e8 e4 73 ff ff       	call   c0007364 <GDT::setup()>
c000ff80:	83 c4 0c             	add    esp,0xc
c000ff83:	6a 00                	push   0x0
c000ff85:	68 ef be ad de       	push   0xdeadbeef
c000ff8a:	57                   	push   edi
c000ff8b:	e8 88 8f ff ff       	call   c0008f18 <TSS::setup(unsigned long, unsigned long)>
c000ff90:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ff93:	e8 5c 8f ff ff       	call   c0008ef4 <TSS::flush()>
c000ff98:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000ff9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa1:	e8 10 76 ff ff       	call   c00075b6 <IDT::setup()>
c000ffa6:	b8 00 04 00 00       	mov    eax,0x400
c000ffab:	0f 23 f8             	mov    db7,eax
c000ffae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000ffb8:	e8 af 7d ff ff       	call   c0007d6c <Phys::allocatePage()>
c000ffbd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000ffc3:	89 30                	mov    DWORD PTR [eax],esi
c000ffc5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000ffcb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ffce:	58                   	pop    eax
c000ffcf:	5a                   	pop    edx
c000ffd0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000ffd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffda:	e8 d5 9f ff ff       	call   c0009fb4 <VAS::setCPUSpecific(unsigned long)>
c000ffdf:	c7 04 24 a2 07 02 c0 	mov    DWORD PTR [esp],0xc00207a2
c000ffe6:	e8 c6 00 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000ffeb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffee:	e8 53 f7 ff ff       	call   c000f746 <CPU::detectFeatures()>
c000fff3:	c7 04 24 c5 07 02 c0 	mov    DWORD PTR [esp],0xc00207c5
c000fffa:	e8 b2 00 00 00       	call   c00100b1 <KeSetBootMessage(char const*)>
c000ffff:	e8 ba 6e 00 00       	call   c0016ebe <HalInitialise()>
c0010004:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010009:	83 e0 10             	and    eax,0x10
c001000c:	83 f8 01             	cmp    eax,0x1
c001000f:	19 c0                	sbb    eax,eax
c0010011:	83 e0 46             	and    eax,0x46
c0010014:	83 c0 1e             	add    eax,0x1e
c0010017:	89 04 24             	mov    DWORD PTR [esp],eax
c001001a:	e8 0c d7 ff ff       	call   c000d72b <setupTimer(int)>
c001001f:	83 c4 10             	add    esp,0x10
c0010022:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010029:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001002f:	74 0c                	je     c001003d <CPU::open(int, int, void*)+0xe3>
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	53                   	push   ebx
c0010035:	e8 54 fe ff ff       	call   c000fe8e <CPU::setupFeatures()>
c001003a:	83 c4 10             	add    esp,0x10
c001003d:	5b                   	pop    ebx
c001003e:	31 c0                	xor    eax,eax
c0010040:	5e                   	pop    esi
c0010041:	5f                   	pop    edi
c0010042:	c3                   	ret    

c0010043 <KeDisplaySplashScreen()>:
c0010043:	55                   	push   ebp
c0010044:	bd 05 00 00 00       	mov    ebp,0x5
c0010049:	57                   	push   edi
c001004a:	bf 60 1b 02 c0       	mov    edi,0xc0021b60
c001004f:	56                   	push   esi
c0010050:	be 0a 00 00 00       	mov    esi,0xa
c0010055:	53                   	push   ebx
c0010056:	31 db                	xor    ebx,ebx
c0010058:	83 ec 0c             	sub    esp,0xc
c001005b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001005e:	84 c0                	test   al,al
c0010060:	74 47                	je     c00100a9 <KeDisplaySplashScreen()+0x66>
c0010062:	80 bb 96 1b 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde46a],0xdb
c0010069:	75 13                	jne    c001007e <KeDisplaySplashScreen()+0x3b>
c001006b:	0f b6 93 95 1b 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde46b]
c0010072:	83 e2 fe             	and    edx,0xfffffffe
c0010075:	81 fa ba 00 00 00    	cmp    edx,0xba
c001007b:	75 01                	jne    c001007e <KeDisplaySplashScreen()+0x3b>
c001007d:	46                   	inc    esi
c001007e:	3c 0d                	cmp    al,0xd
c0010080:	74 24                	je     c00100a6 <KeDisplaySplashScreen()+0x63>
c0010082:	3c 0a                	cmp    al,0xa
c0010084:	75 0a                	jne    c0010090 <KeDisplaySplashScreen()+0x4d>
c0010086:	45                   	inc    ebp
c0010087:	be 0a 00 00 00       	mov    esi,0xa
c001008c:	31 db                	xor    ebx,ebx
c001008e:	eb 16                	jmp    c00100a6 <KeDisplaySplashScreen()+0x63>
c0010090:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010093:	83 ec 0c             	sub    esp,0xc
c0010096:	55                   	push   ebp
c0010097:	43                   	inc    ebx
c0010098:	52                   	push   edx
c0010099:	6a 00                	push   0x0
c001009b:	6a 0e                	push   0xe
c001009d:	50                   	push   eax
c001009e:	e8 bd 7a 00 00       	call   c0017b60 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00100a3:	83 c4 20             	add    esp,0x20
c00100a6:	47                   	inc    edi
c00100a7:	eb b2                	jmp    c001005b <KeDisplaySplashScreen()+0x18>
c00100a9:	83 c4 0c             	add    esp,0xc
c00100ac:	5b                   	pop    ebx
c00100ad:	5e                   	pop    esi
c00100ae:	5f                   	pop    edi
c00100af:	5d                   	pop    ebp
c00100b0:	c3                   	ret    

c00100b1 <KeSetBootMessage(char const*)>:
c00100b1:	57                   	push   edi
c00100b2:	56                   	push   esi
c00100b3:	53                   	push   ebx
c00100b4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00100ba:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00100c1:	68 9e 00 00 00       	push   0x9e
c00100c6:	6a 00                	push   0x0
c00100c8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00100cc:	56                   	push   esi
c00100cd:	e8 1e 04 ff ff       	call   c00004f0 <memset>
c00100d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100d5:	e8 b6 04 ff ff       	call   c0000590 <strlen>
c00100da:	ba 50 00 00 00       	mov    edx,0x50
c00100df:	83 c4 10             	add    esp,0x10
c00100e2:	31 c9                	xor    ecx,ecx
c00100e4:	29 c2                	sub    edx,eax
c00100e6:	83 e2 fe             	and    edx,0xfffffffe
c00100e9:	01 f2                	add    edx,esi
c00100eb:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00100f0:	84 c0                	test   al,al
c00100f2:	74 0a                	je     c00100fe <KeSetBootMessage(char const*)+0x4d>
c00100f4:	80 cc 0f             	or     ah,0xf
c00100f7:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00100fb:	41                   	inc    ecx
c00100fc:	eb ed                	jmp    c00100eb <KeSetBootMessage(char const*)+0x3a>
c00100fe:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010103:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010108:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001010a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010110:	5b                   	pop    ebx
c0010111:	5e                   	pop    esi
c0010112:	5f                   	pop    edi
c0010113:	c3                   	ret    

c0010114 <EnvVarContainer::getEnv(char const*)>:
c0010114:	57                   	push   edi
c0010115:	56                   	push   esi
c0010116:	53                   	push   ebx
c0010117:	31 db                	xor    ebx,ebx
c0010119:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001011d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001011f:	7e 2b                	jle    c001014c <EnvVarContainer::getEnv(char const*)+0x38>
c0010121:	50                   	push   eax
c0010122:	50                   	push   eax
c0010123:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010126:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001012d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010130:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010134:	e8 77 06 ff ff       	call   c00007b0 <strcmp>
c0010139:	83 c4 10             	add    esp,0x10
c001013c:	85 c0                	test   eax,eax
c001013e:	75 09                	jne    c0010149 <EnvVarContainer::getEnv(char const*)+0x35>
c0010140:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010143:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010147:	eb 05                	jmp    c001014e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010149:	43                   	inc    ebx
c001014a:	eb d1                	jmp    c001011d <EnvVarContainer::getEnv(char const*)+0x9>
c001014c:	31 c0                	xor    eax,eax
c001014e:	5b                   	pop    ebx
c001014f:	5e                   	pop    esi
c0010150:	5f                   	pop    edi
c0010151:	c3                   	ret    

c0010152 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010152:	55                   	push   ebp
c0010153:	57                   	push   edi
c0010154:	56                   	push   esi
c0010155:	53                   	push   ebx
c0010156:	83 ec 28             	sub    esp,0x28
c0010159:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001015d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010161:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010165:	56                   	push   esi
c0010166:	e8 25 04 ff ff       	call   c0000590 <strlen>
c001016b:	40                   	inc    eax
c001016c:	89 04 24             	mov    DWORD PTR [esp],eax
c001016f:	e8 f2 78 ff ff       	call   c0007a66 <malloc>
c0010174:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010177:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001017b:	e8 10 04 ff ff       	call   c0000590 <strlen>
c0010180:	40                   	inc    eax
c0010181:	89 04 24             	mov    DWORD PTR [esp],eax
c0010184:	e8 dd 78 ff ff       	call   c0007a66 <malloc>
c0010189:	89 34 24             	mov    DWORD PTR [esp],esi
c001018c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010190:	e8 fb 03 ff ff       	call   c0000590 <strlen>
c0010195:	83 c4 0c             	add    esp,0xc
c0010198:	40                   	inc    eax
c0010199:	50                   	push   eax
c001019a:	6a 00                	push   0x0
c001019c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00101a0:	e8 4b 03 ff ff       	call   c00004f0 <memset>
c00101a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00101a8:	e8 e3 03 ff ff       	call   c0000590 <strlen>
c00101ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00101b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00101b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101b9:	89 de                	mov    esi,ebx
c00101bb:	e8 d0 03 ff ff       	call   c0000590 <strlen>
c00101c0:	83 c4 0c             	add    esp,0xc
c00101c3:	40                   	inc    eax
c00101c4:	50                   	push   eax
c00101c5:	6a 00                	push   0x0
c00101c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101cb:	e8 20 03 ff ff       	call   c00004f0 <memset>
c00101d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101d3:	e8 b8 03 ff ff       	call   c0000590 <strlen>
c00101d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00101dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00101df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00101e4:	40                   	inc    eax
c00101e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00101e8:	c1 e0 03             	shl    eax,0x3
c00101eb:	5a                   	pop    edx
c00101ec:	59                   	pop    ecx
c00101ed:	50                   	push   eax
c00101ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00101f1:	e8 55 78 ff ff       	call   c0007a4b <realloc>
c00101f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00101f9:	8d 74 24 18          	lea    esi,[esp+0x18]
c00101fd:	b9 08 00 00 00       	mov    ecx,0x8
c0010202:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010205:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010209:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020b:	83 c4 2c             	add    esp,0x2c
c001020e:	5b                   	pop    ebx
c001020f:	5e                   	pop    esi
c0010210:	5f                   	pop    edi
c0010211:	5d                   	pop    ebp
c0010212:	c3                   	ret    
c0010213:	90                   	nop

c0010214 <EnvVarContainer::deleteEnv(char const*)>:
c0010214:	c3                   	ret    
c0010215:	90                   	nop

c0010216 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010216:	55                   	push   ebp
c0010217:	57                   	push   edi
c0010218:	56                   	push   esi
c0010219:	53                   	push   ebx
c001021a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010220:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010227:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001022e:	68 14 01 00 00       	push   0x114
c0010233:	e8 2e 78 ff ff       	call   c0007a66 <malloc>
c0010238:	83 c4 0c             	add    esp,0xc
c001023b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001023e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010245:	89 c3                	mov    ebx,eax
c0010247:	50                   	push   eax
c0010248:	e8 0b ad ff ff       	call   c000af58 <File::File(char const*, Process*)>
c001024d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010250:	e8 29 b0 ff ff       	call   c000b27e <File::exists()>
c0010255:	83 c4 10             	add    esp,0x10
c0010258:	84 c0                	test   al,al
c001025a:	75 31                	jne    c001028d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001025c:	50                   	push   eax
c001025d:	50                   	push   eax
c001025e:	6a 12                	push   0x12
c0010260:	53                   	push   ebx
c0010261:	e8 b0 ad ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0010266:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010268:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001026b:	89 34 24             	mov    DWORD PTR [esp],esi
c001026e:	e8 1d 03 ff ff       	call   c0000590 <strlen>
c0010273:	5a                   	pop    edx
c0010274:	31 d2                	xor    edx,edx
c0010276:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001027a:	51                   	push   ecx
c001027b:	56                   	push   esi
c001027c:	52                   	push   edx
c001027d:	50                   	push   eax
c001027e:	53                   	push   ebx
c001027f:	ff d7                	call   edi
c0010281:	83 c4 14             	add    esp,0x14
c0010284:	53                   	push   ebx
c0010285:	e8 ea ad ff ff       	call   c000b074 <File::close()>
c001028a:	83 c4 10             	add    esp,0x10
c001028d:	56                   	push   esi
c001028e:	31 f6                	xor    esi,esi
c0010290:	68 00 01 00 00       	push   0x100
c0010295:	6a 00                	push   0x0
c0010297:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001029b:	50                   	push   eax
c001029c:	e8 4f 02 ff ff       	call   c00004f0 <memset>
c00102a1:	5f                   	pop    edi
c00102a2:	58                   	pop    eax
c00102a3:	6a 01                	push   0x1
c00102a5:	53                   	push   ebx
c00102a6:	e8 6b ad ff ff       	call   c000b016 <File::open(FileOpenMode)>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00102b6:	83 ec 0c             	sub    esp,0xc
c00102b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00102bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00102bf:	51                   	push   ecx
c00102c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00102c4:	52                   	push   edx
c00102c5:	6a 00                	push   0x0
c00102c7:	6a 01                	push   0x1
c00102c9:	53                   	push   ebx
c00102ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00102cd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00102d1:	83 c4 20             	add    esp,0x20
c00102d4:	3c 0d                	cmp    al,0xd
c00102d6:	0f 84 09 01 00 00    	je     c00103e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00102dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00102e1:	0f 84 ef 00 00 00    	je     c00103d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00102e7:	3c 0a                	cmp    al,0xa
c00102e9:	74 13                	je     c00102fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00102eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00102f0:	74 0c                	je     c00102fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00102f2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00102f8:	0f 8e d8 00 00 00    	jle    c00103d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00102fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010302:	83 ec 0c             	sub    esp,0xc
c0010305:	8d 78 01             	lea    edi,[eax+0x1]
c0010308:	57                   	push   edi
c0010309:	e8 58 77 ff ff       	call   c0007a66 <malloc>
c001030e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010312:	8d 56 04             	lea    edx,[esi+0x4]
c0010315:	89 14 24             	mov    DWORD PTR [esp],edx
c0010318:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001031c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010320:	e8 41 77 ff ff       	call   c0007a66 <malloc>
c0010325:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010329:	83 c4 0c             	add    esp,0xc
c001032c:	57                   	push   edi
c001032d:	6a 00                	push   0x0
c001032f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010333:	e8 b8 01 ff ff       	call   c00004f0 <memset>
c0010338:	8d 74 24 30          	lea    esi,[esp+0x30]
c001033c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010340:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010344:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010346:	83 c4 0c             	add    esp,0xc
c0010349:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001034d:	52                   	push   edx
c001034e:	6a 00                	push   0x0
c0010350:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010354:	e8 97 01 ff ff       	call   c00004f0 <memset>
c0010359:	8d 74 24 30          	lea    esi,[esp+0x30]
c001035d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010361:	89 34 24             	mov    DWORD PTR [esp],esi
c0010364:	e8 27 02 ff ff       	call   c0000590 <strlen>
c0010369:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001036d:	89 c1                	mov    ecx,eax
c001036f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010371:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001037a:	40                   	inc    eax
c001037b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001037e:	85 d2                	test   edx,edx
c0010380:	75 0c                	jne    c001038e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010382:	83 ec 0c             	sub    esp,0xc
c0010385:	6a 08                	push   0x8
c0010387:	e8 da 76 ff ff       	call   c0007a66 <malloc>
c001038c:	eb 0c                	jmp    c001039a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001038e:	51                   	push   ecx
c001038f:	51                   	push   ecx
c0010390:	c1 e0 03             	shl    eax,0x3
c0010393:	50                   	push   eax
c0010394:	52                   	push   edx
c0010395:	e8 b1 76 ff ff       	call   c0007a4b <realloc>
c001039a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001039d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00103a0:	83 c4 10             	add    esp,0x10
c00103a3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00103a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00103aa:	b9 08 00 00 00       	mov    ecx,0x8
c00103af:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00103b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b5:	50                   	push   eax
c00103b6:	31 f6                	xor    esi,esi
c00103b8:	68 00 01 00 00       	push   0x100
c00103bd:	6a 00                	push   0x0
c00103bf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103c3:	50                   	push   eax
c00103c4:	e8 27 01 ff ff       	call   c00004f0 <memset>
c00103c9:	83 c4 10             	add    esp,0x10
c00103cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103d4:	eb 0f                	jmp    c00103e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103d6:	3c 3d                	cmp    al,0x3d
c00103d8:	74 07                	je     c00103e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00103da:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00103de:	46                   	inc    esi
c00103df:	eb 04                	jmp    c00103e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103e1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00103e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103ea:	0f 85 c6 fe ff ff    	jne    c00102b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00103f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00103f6:	5b                   	pop    ebx
c00103f7:	5e                   	pop    esi
c00103f8:	5f                   	pop    edi
c00103f9:	5d                   	pop    ebp
c00103fa:	c3                   	ret    
c00103fb:	90                   	nop

c00103fc <EnvVarContainer::__loadSystem()>:
c00103fc:	83 ec 10             	sub    esp,0x10
c00103ff:	68 c0 1c 02 c0       	push   0xc0021cc0
c0010404:	68 08 08 02 c0       	push   0xc0020808
c0010409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001040d:	e8 04 fe ff ff       	call   c0010216 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010412:	83 c4 1c             	add    esp,0x1c
c0010415:	c3                   	ret    

c0010416 <EnvVarContainer::__loadUser()>:
c0010416:	c3                   	ret    
c0010417:	90                   	nop

c0010418 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001042a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001042d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010431:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010438:	90                   	nop
c0010439:	c3                   	ret    

c001043a <EnvVarContainer::~EnvVarContainer()>:
c001043a:	83 ec 1c             	sub    esp,0x1c
c001043d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010441:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010444:	85 c0                	test   eax,eax
c0010446:	74 19                	je     c0010461 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010448:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001044c:	8b 00                	mov    eax,DWORD PTR [eax]
c001044e:	85 c0                	test   eax,eax
c0010450:	74 0f                	je     c0010461 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010452:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010459:	89 04 24             	mov    DWORD PTR [esp],eax
c001045c:	e8 18 76 ff ff       	call   c0007a79 <free>
c0010461:	90                   	nop
c0010462:	83 c4 1c             	add    esp,0x1c
c0010465:	c3                   	ret    

c0010466 <Krnl::getEnv(Process*, char const*)>:
c0010466:	53                   	push   ebx
c0010467:	83 ec 08             	sub    esp,0x8
c001046a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001046e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010474:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010478:	74 04                	je     c001047e <Krnl::getEnv(Process*, char const*)+0x18>
c001047a:	85 c0                	test   eax,eax
c001047c:	75 0b                	jne    c0010489 <Krnl::getEnv(Process*, char const*)+0x23>
c001047e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010483:	85 c0                	test   eax,eax
c0010485:	75 19                	jne    c00104a0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010487:	eb 27                	jmp    c00104b0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010489:	52                   	push   edx
c001048a:	52                   	push   edx
c001048b:	53                   	push   ebx
c001048c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010492:	e8 7d fc ff ff       	call   c0010114 <EnvVarContainer::getEnv(char const*)>
c0010497:	83 c4 10             	add    esp,0x10
c001049a:	85 c0                	test   eax,eax
c001049c:	75 28                	jne    c00104c6 <Krnl::getEnv(Process*, char const*)+0x60>
c001049e:	eb de                	jmp    c001047e <Krnl::getEnv(Process*, char const*)+0x18>
c00104a0:	52                   	push   edx
c00104a1:	52                   	push   edx
c00104a2:	53                   	push   ebx
c00104a3:	50                   	push   eax
c00104a4:	e8 6b fc ff ff       	call   c0010114 <EnvVarContainer::getEnv(char const*)>
c00104a9:	83 c4 10             	add    esp,0x10
c00104ac:	85 c0                	test   eax,eax
c00104ae:	75 16                	jne    c00104c6 <Krnl::getEnv(Process*, char const*)+0x60>
c00104b0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104b4:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00104b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104bd:	83 c4 08             	add    esp,0x8
c00104c0:	5b                   	pop    ebx
c00104c1:	e9 4e fc ff ff       	jmp    c0010114 <EnvVarContainer::getEnv(char const*)>
c00104c6:	83 c4 08             	add    esp,0x8
c00104c9:	5b                   	pop    ebx
c00104ca:	c3                   	ret    

c00104cb <Krnl::setEnvSystem(char const*, char const*)>:
c00104cb:	83 ec 10             	sub    esp,0x10
c00104ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104d6:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00104dc:	e8 71 fc ff ff       	call   c0010152 <EnvVarContainer::setEnv(char const*, char const*)>
c00104e1:	83 c4 1c             	add    esp,0x1c
c00104e4:	c3                   	ret    

c00104e5 <Krnl::setEnvUser(char const*, char const*)>:
c00104e5:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00104ea:	85 c0                	test   eax,eax
c00104ec:	74 15                	je     c0010503 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00104ee:	83 ec 10             	sub    esp,0x10
c00104f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104f9:	50                   	push   eax
c00104fa:	e8 53 fc ff ff       	call   c0010152 <EnvVarContainer::setEnv(char const*, char const*)>
c00104ff:	83 c4 1c             	add    esp,0x1c
c0010502:	c3                   	ret    
c0010503:	c3                   	ret    

c0010504 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010508:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001050e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010512:	e9 3b fc ff ff       	jmp    c0010152 <EnvVarContainer::setEnv(char const*, char const*)>

c0010517 <Krnl::deleteEnvSystem(char const*)>:
c0010517:	c3                   	ret    

c0010518 <Krnl::deleteEnvUser(char const*)>:
c0010518:	c3                   	ret    

c0010519 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010519:	c3                   	ret    

c001051a <Krnl::newProcessEnv(Process*)>:
c001051a:	83 ec 28             	sub    esp,0x28
c001051d:	6a 0c                	push   0xc
c001051f:	e8 42 75 ff ff       	call   c0007a66 <malloc>
c0010524:	5a                   	pop    edx
c0010525:	59                   	pop    ecx
c0010526:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001052a:	50                   	push   eax
c001052b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001052f:	e8 e4 fe ff ff       	call   c0010418 <EnvVarContainer::EnvVarContainer(Process*)>
c0010534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010538:	83 c4 2c             	add    esp,0x2c
c001053b:	c3                   	ret    

c001053c <Krnl::copyProcessEnv(Process*, Process*)>:
c001053c:	57                   	push   edi
c001053d:	56                   	push   esi
c001053e:	53                   	push   ebx
c001053f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010543:	83 ec 0c             	sub    esp,0xc
c0010546:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001054c:	6a 0c                	push   0xc
c001054e:	e8 13 75 ff ff       	call   c0007a66 <malloc>
c0010553:	89 c3                	mov    ebx,eax
c0010555:	58                   	pop    eax
c0010556:	5a                   	pop    edx
c0010557:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055b:	53                   	push   ebx
c001055c:	e8 b7 fe ff ff       	call   c0010418 <EnvVarContainer::EnvVarContainer(Process*)>
c0010561:	8b 07                	mov    eax,DWORD PTR [edi]
c0010563:	89 03                	mov    DWORD PTR [ebx],eax
c0010565:	c1 e0 03             	shl    eax,0x3
c0010568:	89 04 24             	mov    DWORD PTR [esp],eax
c001056b:	e8 f6 74 ff ff       	call   c0007a66 <malloc>
c0010570:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010573:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010575:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010578:	89 c7                	mov    edi,eax
c001057a:	c1 e1 03             	shl    ecx,0x3
c001057d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 d8                	mov    eax,ebx
c0010584:	5b                   	pop    ebx
c0010585:	5e                   	pop    esi
c0010586:	5f                   	pop    edi
c0010587:	c3                   	ret    

c0010588 <Krnl::loadSystemEnv()>:
c0010588:	53                   	push   ebx
c0010589:	83 ec 14             	sub    esp,0x14
c001058c:	6a 0c                	push   0xc
c001058e:	e8 d3 74 ff ff       	call   c0007a66 <malloc>
c0010593:	89 c3                	mov    ebx,eax
c0010595:	58                   	pop    eax
c0010596:	5a                   	pop    edx
c0010597:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001059d:	53                   	push   ebx
c001059e:	e8 75 fe ff ff       	call   c0010418 <EnvVarContainer::EnvVarContainer(Process*)>
c00105a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105a6:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00105ac:	e8 4b fe ff ff       	call   c00103fc <EnvVarContainer::__loadSystem()>
c00105b1:	83 c4 18             	add    esp,0x18
c00105b4:	5b                   	pop    ebx
c00105b5:	c3                   	ret    

c00105b6 <Krnl::loadUserEnv()>:
c00105b6:	53                   	push   ebx
c00105b7:	83 ec 14             	sub    esp,0x14
c00105ba:	6a 0c                	push   0xc
c00105bc:	e8 a5 74 ff ff       	call   c0007a66 <malloc>
c00105c1:	89 c3                	mov    ebx,eax
c00105c3:	58                   	pop    eax
c00105c4:	5a                   	pop    edx
c00105c5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00105cb:	53                   	push   ebx
c00105cc:	e8 47 fe ff ff       	call   c0010418 <EnvVarContainer::EnvVarContainer(Process*)>
c00105d1:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00105d7:	83 c4 18             	add    esp,0x18
c00105da:	5b                   	pop    ebx
c00105db:	c3                   	ret    

c00105dc <Krnl::flushEnv()>:
c00105dc:	c3                   	ret    

c00105dd <Krnl::getProcessTotalEnvCount(Process*)>:
c00105dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105e1:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00105e7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00105ed:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00105f4:	03 01                	add    eax,DWORD PTR [ecx]
c00105f6:	85 d2                	test   edx,edx
c00105f8:	74 02                	je     c00105fc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00105fa:	03 02                	add    eax,DWORD PTR [edx]
c00105fc:	c3                   	ret    

c00105fd <Krnl::getProcessEnvPair(Process*, int)>:
c00105fd:	57                   	push   edi
c00105fe:	56                   	push   esi
c00105ff:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010605:	53                   	push   ebx
c0010606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001060a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001060e:	85 f6                	test   esi,esi
c0010610:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010614:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001061a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001061c:	75 16                	jne    c0010634 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001061e:	39 c2                	cmp    edx,eax
c0010620:	7c 16                	jl     c0010638 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010622:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010628:	8b 31                	mov    esi,DWORD PTR [ecx]
c001062a:	01 c6                	add    esi,eax
c001062c:	39 d6                	cmp    esi,edx
c001062e:	7e 3c                	jle    c001066c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010630:	29 c2                	sub    edx,eax
c0010632:	eb 04                	jmp    c0010638 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010634:	39 c2                	cmp    edx,eax
c0010636:	7d 05                	jge    c001063d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010638:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001063b:	eb 20                	jmp    c001065d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001063d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001063f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010642:	39 d1                	cmp    ecx,edx
c0010644:	7e 04                	jle    c001064a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010646:	29 c2                	sub    edx,eax
c0010648:	eb 10                	jmp    c001065a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001064a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010650:	03 0e                	add    ecx,DWORD PTR [esi]
c0010652:	39 d1                	cmp    ecx,edx
c0010654:	7e 16                	jle    c001066c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010656:	29 c2                	sub    edx,eax
c0010658:	29 fa                	sub    edx,edi
c001065a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001065d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010660:	8b 02                	mov    eax,DWORD PTR [edx]
c0010662:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010665:	89 03                	mov    DWORD PTR [ebx],eax
c0010667:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001066a:	eb 1d                	jmp    c0010689 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001066c:	83 ec 0c             	sub    esp,0xc
c001066f:	68 2a 08 02 c0       	push   0xc002082a
c0010674:	e8 ac 00 00 00       	call   c0010725 <KePanic(char const*)>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010682:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010689:	89 d8                	mov    eax,ebx
c001068b:	5b                   	pop    ebx
c001068c:	5e                   	pop    esi
c001068d:	5f                   	pop    edi
c001068e:	c2 04 00             	ret    0x4

c0010691 <CPU::current()>:
c0010691:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010696:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001069c:	c3                   	ret    

c001069d <operator new(unsigned long)>:
c001069d:	e9 c4 73 ff ff       	jmp    c0007a66 <malloc>

c00106a2 <operator delete(void*)>:
c00106a2:	e9 e5 73 ff ff       	jmp    c0007a8c <rfree>

c00106a7 <disableIRQs()>:
c00106a7:	fa                   	cli    
c00106a8:	c3                   	ret    

c00106a9 <enableIRQs()>:
c00106a9:	fb                   	sti    
c00106aa:	c3                   	ret    

c00106ab <lockScheduler()>:
c00106ab:	fa                   	cli    
c00106ac:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00106b2:	c3                   	ret    

c00106b3 <unlockScheduler()>:
c00106b3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00106b8:	48                   	dec    eax
c00106b9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00106be:	75 01                	jne    c00106c1 <unlockScheduler()+0xe>
c00106c0:	fb                   	sti    
c00106c1:	c3                   	ret    

c00106c2 <lockStuff()>:
c00106c2:	fa                   	cli    
c00106c3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00106c9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00106cf:	c3                   	ret    

c00106d0 <unlockStuff()>:
c00106d0:	83 ec 0c             	sub    esp,0xc
c00106d3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00106d8:	48                   	dec    eax
c00106d9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00106de:	75 18                	jne    c00106f8 <unlockStuff()+0x28>
c00106e0:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00106e7:	74 0f                	je     c00106f8 <unlockStuff()+0x28>
c00106e9:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00106f3:	e8 48 49 00 00       	call   c0015040 <schedule()>
c00106f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00106fd:	48                   	dec    eax
c00106fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010703:	75 01                	jne    c0010706 <unlockStuff()+0x36>
c0010705:	fb                   	sti    
c0010706:	83 c4 0c             	add    esp,0xc
c0010709:	c3                   	ret    

c001070a <Virt::getAKernelVAS()>:
c001070a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001070f:	c3                   	ret    

c0010710 <__not_memcpy>:
c0010710:	57                   	push   edi
c0010711:	56                   	push   esi
c0010712:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010716:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001071a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001071e:	89 c7                	mov    edi,eax
c0010720:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010722:	5e                   	pop    esi
c0010723:	5f                   	pop    edi
c0010724:	c3                   	ret    

c0010725 <KePanic(char const*)>:
c0010725:	b0 01                	mov    al,0x1
c0010727:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c001072c:	e9 79 66 00 00       	jmp    c0016daa <HalPanic(char const*)>

c0010731 <Krnl::powerThread(void*)>:
c0010731:	83 ec 0c             	sub    esp,0xc
c0010734:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010739:	48                   	dec    eax
c001073a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001073f:	75 01                	jne    c0010742 <Krnl::powerThread(void*)+0x11>
c0010741:	fb                   	sti    
c0010742:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010749:	83 ec 0c             	sub    esp,0xc
c001074c:	6a 0a                	push   0xa
c001074e:	e8 d9 4b 00 00       	call   c001532c <sleep(unsigned int)>
c0010753:	83 c4 10             	add    esp,0x10
c0010756:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001075d:	eb e3                	jmp    c0010742 <Krnl::powerThread(void*)+0x11>

c001075f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001075f:	57                   	push   edi
c0010760:	b9 09 00 00 00       	mov    ecx,0x9
c0010765:	56                   	push   esi
c0010766:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001076b:	fc                   	cld    
c001076c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010770:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010772:	5e                   	pop    esi
c0010773:	5f                   	pop    edi
c0010774:	c3                   	ret    

c0010775 <Krnl::userIOReceived()>:
c0010775:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001077f:	c3                   	ret    

c0010780 <Krnl::handlePowerButton()>:
c0010780:	83 ec 0c             	sub    esp,0xc
c0010783:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010788:	83 f8 02             	cmp    eax,0x2
c001078b:	75 10                	jne    c001079d <Krnl::handlePowerButton()+0x1d>
c001078d:	83 ec 0c             	sub    esp,0xc
c0010790:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010796:	e8 01 69 ff ff       	call   c000709c <Computer::shutdown()>
c001079b:	eb 11                	jmp    c00107ae <Krnl::handlePowerButton()+0x2e>
c001079d:	48                   	dec    eax
c001079e:	75 11                	jne    c00107b1 <Krnl::handlePowerButton()+0x31>
c00107a0:	83 ec 0c             	sub    esp,0xc
c00107a3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107a9:	e8 3c 69 ff ff       	call   c00070ea <Computer::sleep()>
c00107ae:	83 c4 10             	add    esp,0x10
c00107b1:	83 c4 0c             	add    esp,0xc
c00107b4:	c3                   	ret    

c00107b5 <Krnl::handleSleepButton()>:
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00107bd:	83 f8 02             	cmp    eax,0x2
c00107c0:	75 10                	jne    c00107d2 <Krnl::handleSleepButton()+0x1d>
c00107c2:	83 ec 0c             	sub    esp,0xc
c00107c5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107cb:	e8 cc 68 ff ff       	call   c000709c <Computer::shutdown()>
c00107d0:	eb 11                	jmp    c00107e3 <Krnl::handleSleepButton()+0x2e>
c00107d2:	48                   	dec    eax
c00107d3:	75 11                	jne    c00107e6 <Krnl::handleSleepButton()+0x31>
c00107d5:	83 ec 0c             	sub    esp,0xc
c00107d8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00107de:	e8 07 69 ff ff       	call   c00070ea <Computer::sleep()>
c00107e3:	83 c4 10             	add    esp,0x10
c00107e6:	83 c4 0c             	add    esp,0xc
c00107e9:	c3                   	ret    

c00107ea <Krnl::setupPowerManager()>:
c00107ea:	83 ec 0c             	sub    esp,0xc
c00107ed:	68 f0 00 00 00       	push   0xf0
c00107f2:	6a 00                	push   0x0
c00107f4:	68 31 07 01 c0       	push   0xc0010731
c00107f9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00107ff:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010809:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010810:	e8 d3 45 00 00       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0010815:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001081f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010829:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010833:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001083d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010847:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010851:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001085b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010865:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001086f:	83 c4 1c             	add    esp,0x1c
c0010872:	c3                   	ret    

c0010873 <KeRand()>:
c0010873:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001087d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010887:	53                   	push   ebx
c0010888:	01 c1                	add    ecx,eax
c001088a:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001088f:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010895:	01 ca                	add    edx,ecx
c0010897:	05 ef 04 b5 00       	add    eax,0xb504ef
c001089c:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00108a1:	83 d2 00             	adc    edx,0x0
c00108a4:	0f b7 da             	movzx  ebx,dx
c00108a7:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00108ad:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00108b1:	5b                   	pop    ebx
c00108b2:	c3                   	ret    

c00108b3 <KeSeedRand(unsigned int)>:
c00108b3:	53                   	push   ebx
c00108b4:	83 ec 08             	sub    esp,0x8
c00108b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108bb:	e8 dd 67 00 00       	call   c001709d <HalGetRand()>
c00108c0:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00108ca:	31 d8                	xor    eax,ebx
c00108cc:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00108d1:	e8 9d ff ff ff       	call   c0010873 <KeRand()>
c00108d6:	83 c4 08             	add    esp,0x8
c00108d9:	5b                   	pop    ebx
c00108da:	eb 97                	jmp    c0010873 <KeRand()>

c00108dc <KeInitRand()>:
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	e8 bf 65 00 00       	call   c0016ea3 <HalQueryPerformanceCounter()>
c00108e4:	0f 20 da             	mov    edx,cr3
c00108e7:	0f 22 da             	mov    cr3,edx
c00108ea:	0f 20 da             	mov    edx,cr3
c00108ed:	0f 22 da             	mov    cr3,edx
c00108f0:	0f 20 da             	mov    edx,cr3
c00108f3:	0f 22 da             	mov    cr3,edx
c00108f6:	0f 20 da             	mov    edx,cr3
c00108f9:	0f 22 da             	mov    cr3,edx
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010904:	50                   	push   eax
c0010905:	e8 a9 ff ff ff       	call   c00108b3 <KeSeedRand(unsigned int)>
c001090a:	83 c4 1c             	add    esp,0x1c
c001090d:	c3                   	ret    
c001090e:	66 90                	xchg   ax,ax

c0010910 <KeResolveCompatibilitySymbol(char*)>:
c0010910:	83 ec 1c             	sub    esp,0x1c
c0010913:	c7 44 24 04 44 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020844
c001091b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001091f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010922:	e8 89 fe fe ff       	call   c00007b0 <strcmp>
c0010927:	85 c0                	test   eax,eax
c0010929:	0f 94 c0             	sete   al
c001092c:	84 c0                	test   al,al
c001092e:	74 0c                	je     c001093c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010930:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010935:	e9 62 01 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001093a:	66 90                	xchg   ax,ax
c001093c:	c7 44 24 04 4d 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002084d
c0010944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010948:	89 04 24             	mov    DWORD PTR [esp],eax
c001094b:	e8 60 fe fe ff       	call   c00007b0 <strcmp>
c0010950:	85 c0                	test   eax,eax
c0010952:	0f 94 c0             	sete   al
c0010955:	84 c0                	test   al,al
c0010957:	74 0b                	je     c0010964 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010959:	b8 00 e3 01 c0       	mov    eax,0xc001e300
c001095e:	e9 39 01 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010963:	90                   	nop
c0010964:	c7 44 24 04 57 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020857
c001096c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010970:	89 04 24             	mov    DWORD PTR [esp],eax
c0010973:	e8 38 fe fe ff       	call   c00007b0 <strcmp>
c0010978:	85 c0                	test   eax,eax
c001097a:	0f 94 c0             	sete   al
c001097d:	84 c0                	test   al,al
c001097f:	74 0b                	je     c001098c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010981:	b8 34 e0 01 c0       	mov    eax,0xc001e034
c0010986:	e9 11 01 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001098b:	90                   	nop
c001098c:	c7 44 24 04 60 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020860
c0010994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010998:	89 04 24             	mov    DWORD PTR [esp],eax
c001099b:	e8 10 fe fe ff       	call   c00007b0 <strcmp>
c00109a0:	85 c0                	test   eax,eax
c00109a2:	0f 94 c0             	sete   al
c00109a5:	84 c0                	test   al,al
c00109a7:	74 0b                	je     c00109b4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00109a9:	b8 25 07 01 c0       	mov    eax,0xc0010725
c00109ae:	e9 e9 00 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00109b3:	90                   	nop
c00109b4:	c7 44 24 04 73 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020873
c00109bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c3:	e8 e8 fd fe ff       	call   c00007b0 <strcmp>
c00109c8:	85 c0                	test   eax,eax
c00109ca:	0f 94 c0             	sete   al
c00109cd:	84 c0                	test   al,al
c00109cf:	74 0b                	je     c00109dc <KeResolveCompatibilitySymbol(char*)+0xcc>
c00109d1:	b8 b1 00 01 c0       	mov    eax,0xc00100b1
c00109d6:	e9 c1 00 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00109db:	90                   	nop
c00109dc:	c7 44 24 04 90 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020890
c00109e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00109eb:	e8 c0 fd fe ff       	call   c00007b0 <strcmp>
c00109f0:	85 c0                	test   eax,eax
c00109f2:	0f 94 c0             	sete   al
c00109f5:	84 c0                	test   al,al
c00109f7:	74 0b                	je     c0010a04 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00109f9:	b8 00 e4 01 c0       	mov    eax,0xc001e400
c00109fe:	e9 99 00 00 00       	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a03:	90                   	nop
c0010a04:	c7 44 24 04 9a 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc002089a
c0010a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a10:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a13:	e8 98 fd fe ff       	call   c00007b0 <strcmp>
c0010a18:	85 c0                	test   eax,eax
c0010a1a:	0f 94 c0             	sete   al
c0010a1d:	84 c0                	test   al,al
c0010a1f:	74 07                	je     c0010a28 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010a21:	b8 80 e1 01 c0       	mov    eax,0xc001e180
c0010a26:	eb 74                	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a28:	c7 44 24 04 a3 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208a3
c0010a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a34:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a37:	e8 74 fd fe ff       	call   c00007b0 <strcmp>
c0010a3c:	85 c0                	test   eax,eax
c0010a3e:	0f 94 c0             	sete   al
c0010a41:	84 c0                	test   al,al
c0010a43:	74 07                	je     c0010a4c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010a45:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010a4a:	eb 50                	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a4c:	c7 44 24 04 bb 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208bb
c0010a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a5b:	e8 50 fd fe ff       	call   c00007b0 <strcmp>
c0010a60:	85 c0                	test   eax,eax
c0010a62:	0f 94 c0             	sete   al
c0010a65:	84 c0                	test   al,al
c0010a67:	74 07                	je     c0010a70 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010a69:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010a6e:	eb 2c                	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a70:	c7 44 24 04 c8 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208c8
c0010a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a7f:	e8 2c fd fe ff       	call   c00007b0 <strcmp>
c0010a84:	85 c0                	test   eax,eax
c0010a86:	0f 94 c0             	sete   al
c0010a89:	84 c0                	test   al,al
c0010a8b:	74 07                	je     c0010a94 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010a8d:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010a92:	eb 08                	jmp    c0010a9c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a94:	b8 00 00 00 00       	mov    eax,0x0
c0010a99:	8d 76 00             	lea    esi,[esi+0x0]
c0010a9c:	83 c4 1c             	add    esp,0x1c
c0010a9f:	c3                   	ret    

c0010aa0 <KiSigKill(int)>:
c0010aa0:	83 ec 0c             	sub    esp,0xc
c0010aa3:	6a 00                	push   0x0
c0010aa5:	6a 00                	push   0x0
c0010aa7:	6a ff                	push   0xffffffff
c0010aa9:	6a 01                	push   0x1
c0010aab:	e8 a2 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010ab0:	83 c4 1c             	add    esp,0x1c
c0010ab3:	c3                   	ret    

c0010ab4 <KiDefaultSignalHandlerIgnore(int)>:
c0010ab4:	c3                   	ret    

c0010ab5 <KiDefaultSignalHandlerPause(int)>:
c0010ab5:	57                   	push   edi
c0010ab6:	b9 07 00 00 00       	mov    ecx,0x7
c0010abb:	56                   	push   esi
c0010abc:	be 11 09 02 c0       	mov    esi,0xc0020911
c0010ac1:	83 ec 24             	sub    esp,0x24
c0010ac4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010ac8:	fc                   	cld    
c0010ac9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010acb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010acf:	50                   	push   eax
c0010ad0:	6a 00                	push   0x0
c0010ad2:	6a 00                	push   0x0
c0010ad4:	6a 27                	push   0x27
c0010ad6:	e8 77 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010adb:	83 c4 34             	add    esp,0x34
c0010ade:	5e                   	pop    esi
c0010adf:	5f                   	pop    edi
c0010ae0:	c3                   	ret    

c0010ae1 <KiDefaultSignalHandlerResume(int)>:
c0010ae1:	57                   	push   edi
c0010ae2:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010ae7:	56                   	push   esi
c0010ae8:	be 2d 09 02 c0       	mov    esi,0xc002092d
c0010aed:	83 ec 24             	sub    esp,0x24
c0010af0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010af4:	fc                   	cld    
c0010af5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af7:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010afb:	50                   	push   eax
c0010afc:	6a 00                	push   0x0
c0010afe:	6a 00                	push   0x0
c0010b00:	6a 27                	push   0x27
c0010b02:	e8 4b 25 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010b07:	83 c4 34             	add    esp,0x34
c0010b0a:	5e                   	pop    esi
c0010b0b:	5f                   	pop    edi
c0010b0c:	c3                   	ret    

c0010b0d <KeDeinitSignals(SigHandlerBlock*)>:
c0010b0d:	e9 67 6f ff ff       	jmp    c0007a79 <free>

c0010b12 <KeInitSignals()>:
c0010b12:	53                   	push   ebx
c0010b13:	83 ec 14             	sub    esp,0x14
c0010b16:	68 c8 00 00 00       	push   0xc8
c0010b1b:	e8 46 6f ff ff       	call   c0007a66 <malloc>
c0010b20:	83 c4 0c             	add    esp,0xc
c0010b23:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010b2d:	89 c3                	mov    ebx,eax
c0010b2f:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010b39:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010b3f:	6a 20                	push   0x20
c0010b41:	6a 00                	push   0x0
c0010b43:	50                   	push   eax
c0010b44:	e8 a7 f9 fe ff       	call   c00004f0 <memset>
c0010b49:	83 c4 0c             	add    esp,0xc
c0010b4c:	6a 44                	push   0x44
c0010b4e:	6a 00                	push   0x0
c0010b50:	53                   	push   ebx
c0010b51:	e8 9a f9 fe ff       	call   c00004f0 <memset>
c0010b56:	83 c4 18             	add    esp,0x18
c0010b59:	89 d8                	mov    eax,ebx
c0010b5b:	5b                   	pop    ebx
c0010b5c:	c3                   	ret    

c0010b5d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010b5d:	53                   	push   ebx
c0010b5e:	b8 01 00 00 00       	mov    eax,0x1
c0010b63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b6b:	83 f9 10             	cmp    ecx,0x10
c0010b6e:	7f 21                	jg     c0010b91 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b74:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010b77:	89 03                	mov    DWORD PTR [ebx],eax
c0010b79:	b8 01 00 00 00       	mov    eax,0x1
c0010b7e:	d3 e0                	shl    eax,cl
c0010b80:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010b84:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010b87:	31 c0                	xor    eax,eax
c0010b89:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010b91:	5b                   	pop    ebx
c0010b92:	c3                   	ret    

c0010b93 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010b93:	55                   	push   ebp
c0010b94:	57                   	push   edi
c0010b95:	bf 08 00 00 00       	mov    edi,0x8
c0010b9a:	56                   	push   esi
c0010b9b:	53                   	push   ebx
c0010b9c:	83 ec 18             	sub    esp,0x18
c0010b9f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ba3:	68 4a 09 02 c0       	push   0xc002094a
c0010ba8:	e8 29 9e ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0010bad:	83 c4 10             	add    esp,0x10
c0010bb0:	31 c9                	xor    ecx,ecx
c0010bb2:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010bb9:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010bbf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010bc3:	99                   	cdq    
c0010bc4:	f7 ff                	idiv   edi
c0010bc6:	8d 42 24             	lea    eax,[edx+0x24]
c0010bc9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010bcd:	85 f6                	test   esi,esi
c0010bcf:	75 1a                	jne    c0010beb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010bd1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010bd5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010bd9:	50                   	push   eax
c0010bda:	50                   	push   eax
c0010bdb:	52                   	push   edx
c0010bdc:	68 5b 09 02 c0       	push   0xc002095b
c0010be1:	e8 f0 9d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0010be6:	83 c4 10             	add    esp,0x10
c0010be9:	eb 1b                	jmp    c0010c06 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010beb:	41                   	inc    ecx
c0010bec:	83 f9 08             	cmp    ecx,0x8
c0010bef:	75 ce                	jne    c0010bbf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	be 01 00 00 00       	mov    esi,0x1
c0010bf9:	68 7c 09 02 c0       	push   0xc002097c
c0010bfe:	e8 d3 9d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0010c03:	83 c4 10             	add    esp,0x10
c0010c06:	83 c4 0c             	add    esp,0xc
c0010c09:	89 f0                	mov    eax,esi
c0010c0b:	5b                   	pop    ebx
c0010c0c:	5e                   	pop    esi
c0010c0d:	5f                   	pop    edi
c0010c0e:	5d                   	pop    ebp
c0010c0f:	c3                   	ret    

c0010c10 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010c10:	55                   	push   ebp
c0010c11:	57                   	push   edi
c0010c12:	56                   	push   esi
c0010c13:	53                   	push   ebx
c0010c14:	51                   	push   ecx
c0010c15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010c19:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010c20:	0f 84 b1 00 00 00    	je     c0010cd7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010c26:	31 c9                	xor    ecx,ecx
c0010c28:	bf 08 00 00 00       	mov    edi,0x8
c0010c2d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010c33:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010c36:	99                   	cdq    
c0010c37:	f7 ff                	idiv   edi
c0010c39:	89 d5                	mov    ebp,edx
c0010c3b:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010c42:	85 d2                	test   edx,edx
c0010c44:	0f 84 9e 00 00 00    	je     c0010ce8 <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c0010c4a:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010c50:	88 d1                	mov    cl,dl
c0010c52:	bf 01 00 00 00       	mov    edi,0x1
c0010c57:	d3 e7                	shl    edi,cl
c0010c59:	31 c9                	xor    ecx,ecx
c0010c5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c5e:	b8 01 00 00 00       	mov    eax,0x1
c0010c63:	d3 e0                	shl    eax,cl
c0010c65:	85 04 24             	test   DWORD PTR [esp],eax
c0010c68:	74 06                	je     c0010c70 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c0010c6a:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010c6e:	75 67                	jne    c0010cd7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010c70:	41                   	inc    ecx
c0010c71:	83 f9 11             	cmp    ecx,0x11
c0010c74:	75 e8                	jne    c0010c5e <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c0010c76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010c79:	46                   	inc    esi
c0010c7a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010c80:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c0010c8b:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010c92:	09 f8                	or     eax,edi
c0010c94:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010c9a:	31 c0                	xor    eax,eax
c0010c9c:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010ca4:	74 09                	je     c0010caf <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c0010ca6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cad:	eb 06                	jmp    c0010cb5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010caf:	40                   	inc    eax
c0010cb0:	83 f8 08             	cmp    eax,0x8
c0010cb3:	75 e7                	jne    c0010c9c <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c0010cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010cb9:	83 fa 09             	cmp    edx,0x9
c0010cbc:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010cbf:	89 11                	mov    DWORD PTR [ecx],edx
c0010cc1:	75 07                	jne    c0010cca <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c0010cc3:	b8 a0 0a 01 c0       	mov    eax,0xc0010aa0
c0010cc8:	eb 31                	jmp    c0010cfb <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cca:	83 f8 01             	cmp    eax,0x1
c0010ccd:	75 0c                	jne    c0010cdb <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c0010ccf:	f7 d7                	not    edi
c0010cd1:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010cd7:	31 c0                	xor    eax,eax
c0010cd9:	eb 20                	jmp    c0010cfb <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cdb:	85 c0                	test   eax,eax
c0010cdd:	75 1c                	jne    c0010cfb <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010cdf:	8b 04 95 20 1d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde2e0]
c0010ce6:	eb 13                	jmp    c0010cfb <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010ce8:	41                   	inc    ecx
c0010ce9:	46                   	inc    esi
c0010cea:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010cf0:	83 f9 08             	cmp    ecx,0x8
c0010cf3:	0f 85 34 ff ff ff    	jne    c0010c2d <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010cf9:	eb dc                	jmp    c0010cd7 <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010cfb:	5a                   	pop    edx
c0010cfc:	5b                   	pop    ebx
c0010cfd:	5e                   	pop    esi
c0010cfe:	5f                   	pop    edi
c0010cff:	5d                   	pop    ebp
c0010d00:	c3                   	ret    

c0010d01 <KiCheckSignalZ>:
c0010d01:	83 ec 10             	sub    esp,0x10
c0010d04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010d08:	50                   	push   eax
c0010d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d11:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010d17:	e8 f4 fe ff ff       	call   c0010c10 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010d1c:	5a                   	pop    edx
c0010d1d:	31 d2                	xor    edx,edx
c0010d1f:	59                   	pop    ecx
c0010d20:	85 c0                	test   eax,eax
c0010d22:	74 19                	je     c0010d3d <KiCheckSignalZ+0x3c>
c0010d24:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010d2a:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010d2d:	89 02                	mov    DWORD PTR [edx],eax
c0010d2f:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d3a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010d3d:	89 d0                	mov    eax,edx
c0010d3f:	83 c4 10             	add    esp,0x10
c0010d42:	c3                   	ret    

c0010d43 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010d43:	56                   	push   esi
c0010d44:	53                   	push   ebx
c0010d45:	bb 01 00 00 00       	mov    ebx,0x1
c0010d4a:	52                   	push   edx
c0010d4b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010d4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d53:	d3 e3                	shl    ebx,cl
c0010d55:	83 f9 10             	cmp    ecx,0x10
c0010d58:	7f 08                	jg     c0010d62 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010d5a:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010d60:	75 10                	jne    c0010d72 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010d62:	83 ec 0c             	sub    esp,0xc
c0010d65:	68 8d 09 02 c0       	push   0xc002098d
c0010d6a:	e8 b6 f9 ff ff       	call   c0010725 <KePanic(char const*)>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	f7 d3                	not    ebx
c0010d74:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010d7a:	58                   	pop    eax
c0010d7b:	5b                   	pop    ebx
c0010d7c:	5e                   	pop    esi
c0010d7d:	c3                   	ret    

c0010d7e <KiFinishSignalZ>:
c0010d7e:	53                   	push   ebx
c0010d7f:	83 ec 10             	sub    esp,0x10
c0010d82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d86:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010d89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d91:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010d97:	e8 a7 ff ff ff       	call   c0010d43 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010d9c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010da2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010da9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010db0:	83 c4 18             	add    esp,0x18
c0010db3:	5b                   	pop    ebx
c0010db4:	c3                   	ret    

c0010db5 <SysSeekDir(regs*)>:
c0010db5:	31 c0                	xor    eax,eax
c0010db7:	31 d2                	xor    edx,edx
c0010db9:	c3                   	ret    

c0010dba <SysTellDir(regs*)>:
c0010dba:	31 c0                	xor    eax,eax
c0010dbc:	31 d2                	xor    edx,edx
c0010dbe:	c3                   	ret    

c0010dbf <SysVerify(regs*)>:
c0010dbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc3:	31 d2                	xor    edx,edx
c0010dc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010dc8:	c3                   	ret    

c0010dc9 <SysGetArgc(regs*)>:
c0010dc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dd1:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010dd7:	99                   	cdq    
c0010dd8:	c3                   	ret    

c0010dd9 <SysTTYName(regs*)>:
c0010dd9:	b8 01 00 00 00       	mov    eax,0x1
c0010dde:	31 d2                	xor    edx,edx
c0010de0:	c3                   	ret    

c0010de1 <SysFormatDisk(regs*)>:
c0010de1:	56                   	push   esi
c0010de2:	53                   	push   ebx
c0010de3:	83 ec 24             	sub    esp,0x24
c0010de6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dea:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010df0:	eb 32                	jmp    c0010e24 <SysFormatDisk(regs*)+0x43>
c0010df2:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010df5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010df8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010dfa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010dfe:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010e01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e05:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010e0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e17:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010e1a:	83 f8 08             	cmp    eax,0x8
c0010e1d:	89 c1                	mov    ecx,eax
c0010e1f:	75 14                	jne    c0010e35 <SysFormatDisk(regs*)+0x54>
c0010e21:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010e24:	85 db                	test   ebx,ebx
c0010e26:	75 ca                	jne    c0010df2 <SysFormatDisk(regs*)+0x11>
c0010e28:	b8 03 00 00 00       	mov    eax,0x3
c0010e2d:	31 d2                	xor    edx,edx
c0010e2f:	83 c4 24             	add    esp,0x24
c0010e32:	5b                   	pop    ebx
c0010e33:	5e                   	pop    esi
c0010e34:	c3                   	ret    
c0010e35:	85 c0                	test   eax,eax
c0010e37:	74 13                	je     c0010e4c <SysFormatDisk(regs*)+0x6b>
c0010e39:	31 d2                	xor    edx,edx
c0010e3b:	83 f9 09             	cmp    ecx,0x9
c0010e3e:	b8 01 00 00 00       	mov    eax,0x1
c0010e43:	74 ea                	je     c0010e2f <SysFormatDisk(regs*)+0x4e>
c0010e45:	b8 02 00 00 00       	mov    eax,0x2
c0010e4a:	eb e1                	jmp    c0010e2d <SysFormatDisk(regs*)+0x4c>
c0010e4c:	31 c0                	xor    eax,eax
c0010e4e:	eb dd                	jmp    c0010e2d <SysFormatDisk(regs*)+0x4c>

c0010e50 <SysSetDiskVolumeLabel(regs*)>:
c0010e50:	83 ec 1c             	sub    esp,0x1c
c0010e53:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010e57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010e5b:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010e5f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010e62:	83 f8 19             	cmp    eax,0x19
c0010e65:	77 3d                	ja     c0010ea4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e67:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010e6e:	85 c9                	test   ecx,ecx
c0010e70:	74 32                	je     c0010ea4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e72:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010e75:	85 db                	test   ebx,ebx
c0010e77:	74 2b                	je     c0010ea4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e79:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010e7f:	85 d2                	test   edx,edx
c0010e81:	74 21                	je     c0010ea4 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010e83:	8b 32                	mov    esi,DWORD PTR [edx]
c0010e85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010e89:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010e94:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010e97:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010e9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010e9f:	83 c4 1c             	add    esp,0x1c
c0010ea2:	99                   	cdq    
c0010ea3:	c3                   	ret    
c0010ea4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010ea9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010eae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010eb2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010eb6:	83 c4 1c             	add    esp,0x1c
c0010eb9:	c3                   	ret    

c0010eba <SysGetDiskVolumeLabel(regs*)>:
c0010eba:	83 ec 2c             	sub    esp,0x2c
c0010ebd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ec5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010ec9:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010ecd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ed0:	83 fa 19             	cmp    edx,0x19
c0010ed3:	77 4c                	ja     c0010f21 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ed5:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010edc:	85 c9                	test   ecx,ecx
c0010ede:	74 41                	je     c0010f21 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ee0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ee3:	85 db                	test   ebx,ebx
c0010ee5:	74 3a                	je     c0010f21 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ee7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010eea:	85 f6                	test   esi,esi
c0010eec:	74 33                	je     c0010f21 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010eee:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	74 29                	je     c0010f21 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ef8:	8b 38                	mov    edi,DWORD PTR [eax]
c0010efa:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010efe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f02:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010f06:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f0d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010f10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f14:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f18:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f1c:	83 c4 2c             	add    esp,0x2c
c0010f1f:	99                   	cdq    
c0010f20:	c3                   	ret    
c0010f21:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f26:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f2b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f33:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f37:	83 c4 2c             	add    esp,0x2c
c0010f3a:	c3                   	ret    

c0010f3b <SysShutdown(regs*)>:
c0010f3b:	83 ec 1c             	sub    esp,0x1c
c0010f3e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f46:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010f4a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f4d:	85 c0                	test   eax,eax
c0010f4f:	74 28                	je     c0010f79 <SysShutdown(regs*)+0x3e>
c0010f51:	83 f8 01             	cmp    eax,0x1
c0010f54:	0f 84 8a 00 00 00    	je     c0010fe4 <SysShutdown(regs*)+0xa9>
c0010f5a:	83 f8 02             	cmp    eax,0x2
c0010f5d:	be ff ff ff ff       	mov    esi,0xffffffff
c0010f62:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010f67:	74 49                	je     c0010fb2 <SysShutdown(regs*)+0x77>
c0010f69:	89 f0                	mov    eax,esi
c0010f6b:	89 fa                	mov    edx,edi
c0010f6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010f71:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010f75:	83 c4 1c             	add    esp,0x1c
c0010f78:	c3                   	ret    
c0010f79:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010f7e:	31 f6                	xor    esi,esi
c0010f80:	31 ff                	xor    edi,edi
c0010f82:	31 c9                	xor    ecx,ecx
c0010f84:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f86:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010f8a:	be ff ff ff ff       	mov    esi,0xffffffff
c0010f8f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010f93:	bf ff ff ff ff       	mov    edi,0xffffffff
c0010f98:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fa2:	89 f0                	mov    eax,esi
c0010fa4:	89 fa                	mov    edx,edi
c0010fa6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010faa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fae:	83 c4 1c             	add    esp,0x1c
c0010fb1:	c3                   	ret    
c0010fb2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010fb7:	31 c9                	xor    ecx,ecx
c0010fb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fbb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010fbf:	31 c9                	xor    ecx,ecx
c0010fc1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fc5:	b9 01 00 00 00       	mov    ecx,0x1
c0010fca:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fd1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fd4:	89 f0                	mov    eax,esi
c0010fd6:	89 fa                	mov    edx,edi
c0010fd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010fdc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fe0:	83 c4 1c             	add    esp,0x1c
c0010fe3:	c3                   	ret    
c0010fe4:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c0010fe9:	85 c0                	test   eax,eax
c0010feb:	74 02                	je     c0010fef <SysShutdown(regs*)+0xb4>
c0010fed:	ff d0                	call   eax
c0010fef:	31 f6                	xor    esi,esi
c0010ff1:	31 ff                	xor    edi,edi
c0010ff3:	89 f0                	mov    eax,esi
c0010ff5:	89 fa                	mov    edx,edi
c0010ff7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010ffb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010fff:	83 c4 1c             	add    esp,0x1c
c0011002:	c3                   	ret    

c0011003 <SysRealpath(regs*)>:
c0011003:	53                   	push   ebx
c0011004:	83 ec 18             	sub    esp,0x18
c0011007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001100b:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001100e:	85 c9                	test   ecx,ecx
c0011010:	74 39                	je     c001104b <SysRealpath(regs*)+0x48>
c0011012:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011015:	31 d2                	xor    edx,edx
c0011017:	b8 01 00 00 00       	mov    eax,0x1
c001101c:	85 db                	test   ebx,ebx
c001101e:	75 05                	jne    c0011025 <SysRealpath(regs*)+0x22>
c0011020:	83 c4 18             	add    esp,0x18
c0011023:	5b                   	pop    ebx
c0011024:	c3                   	ret    
c0011025:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001102a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001102d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011031:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011034:	05 0c 01 00 00       	add    eax,0x10c
c0011039:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001103d:	e8 6f 9d ff ff       	call   c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011042:	31 c0                	xor    eax,eax
c0011044:	31 d2                	xor    edx,edx
c0011046:	83 c4 18             	add    esp,0x18
c0011049:	5b                   	pop    ebx
c001104a:	c3                   	ret    
c001104b:	b8 01 00 00 00       	mov    eax,0x1
c0011050:	31 d2                	xor    edx,edx
c0011052:	eb f2                	jmp    c0011046 <SysRealpath(regs*)+0x43>

c0011054 <SysReadDir(regs*)>:
c0011054:	53                   	push   ebx
c0011055:	83 ec 38             	sub    esp,0x38
c0011058:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001105c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001105f:	83 f8 02             	cmp    eax,0x2
c0011062:	76 53                	jbe    c00110b7 <SysReadDir(regs*)+0x63>
c0011064:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001106b:	77 56                	ja     c00110c3 <SysReadDir(regs*)+0x6f>
c001106d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011070:	e8 a2 83 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c0011075:	85 c0                	test   eax,eax
c0011077:	74 4a                	je     c00110c3 <SysReadDir(regs*)+0x6f>
c0011079:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c001107d:	31 d2                	xor    edx,edx
c001107f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011083:	8b 10                	mov    edx,DWORD PTR [eax]
c0011085:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011089:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001108c:	31 db                	xor    ebx,ebx
c001108e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0011092:	89 04 24             	mov    DWORD PTR [esp],eax
c0011095:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011099:	b9 10 01 00 00       	mov    ecx,0x110
c001109e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00110a2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110a5:	85 c0                	test   eax,eax
c00110a7:	89 c1                	mov    ecx,eax
c00110a9:	74 27                	je     c00110d2 <SysReadDir(regs*)+0x7e>
c00110ab:	31 d2                	xor    edx,edx
c00110ad:	83 f9 07             	cmp    ecx,0x7
c00110b0:	b8 02 00 00 00       	mov    eax,0x2
c00110b5:	75 16                	jne    c00110cd <SysReadDir(regs*)+0x79>
c00110b7:	b8 01 00 00 00       	mov    eax,0x1
c00110bc:	31 d2                	xor    edx,edx
c00110be:	83 c4 38             	add    esp,0x38
c00110c1:	5b                   	pop    ebx
c00110c2:	c3                   	ret    
c00110c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110cd:	83 c4 38             	add    esp,0x38
c00110d0:	5b                   	pop    ebx
c00110d1:	c3                   	ret    
c00110d2:	31 c0                	xor    eax,eax
c00110d4:	31 d2                	xor    edx,edx
c00110d6:	eb e6                	jmp    c00110be <SysReadDir(regs*)+0x6a>

c00110d8 <SysIsATTY(regs*)>:
c00110d8:	83 ec 1c             	sub    esp,0x1c
c00110db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110e2:	83 f8 02             	cmp    eax,0x2
c00110e5:	76 07                	jbe    c00110ee <SysIsATTY(regs*)+0x16>
c00110e7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110ec:	75 22                	jne    c0011110 <SysIsATTY(regs*)+0x38>
c00110ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110f3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00110fc:	85 c0                	test   eax,eax
c00110fe:	74 1c                	je     c001111c <SysIsATTY(regs*)+0x44>
c0011100:	8b 10                	mov    edx,DWORD PTR [eax]
c0011102:	89 04 24             	mov    DWORD PTR [esp],eax
c0011105:	ff 12                	call   DWORD PTR [edx]
c0011107:	31 d2                	xor    edx,edx
c0011109:	83 c4 1c             	add    esp,0x1c
c001110c:	0f b6 c0             	movzx  eax,al
c001110f:	c3                   	ret    
c0011110:	89 04 24             	mov    DWORD PTR [esp],eax
c0011113:	e8 ff 82 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c0011118:	85 c0                	test   eax,eax
c001111a:	75 e4                	jne    c0011100 <SysIsATTY(regs*)+0x28>
c001111c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011121:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011126:	83 c4 1c             	add    esp,0x1c
c0011129:	c3                   	ret    

c001112a <SysSeek(regs*)>:
c001112a:	83 ec 1c             	sub    esp,0x1c
c001112d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011131:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011135:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011139:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001113c:	8d 71 fd             	lea    esi,[ecx-0x3]
c001113f:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011145:	77 3a                	ja     c0011181 <SysSeek(regs*)+0x57>
c0011147:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001114a:	e8 c8 82 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c001114f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011152:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011156:	31 d2                	xor    edx,edx
c0011158:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001115c:	89 04 24             	mov    DWORD PTR [esp],eax
c001115f:	e8 70 9f ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011164:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011168:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001116c:	85 c0                	test   eax,eax
c001116e:	0f 95 c0             	setne  al
c0011171:	31 d2                	xor    edx,edx
c0011173:	0f b6 c0             	movzx  eax,al
c0011176:	f7 d8                	neg    eax
c0011178:	83 d2 00             	adc    edx,0x0
c001117b:	83 c4 1c             	add    esp,0x1c
c001117e:	f7 da                	neg    edx
c0011180:	c3                   	ret    
c0011181:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011186:	ba ff ff ff ff       	mov    edx,0xffffffff
c001118b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001118f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011193:	83 c4 1c             	add    esp,0x1c
c0011196:	c3                   	ret    

c0011197 <SysTell(regs*)>:
c0011197:	53                   	push   ebx
c0011198:	83 ec 18             	sub    esp,0x18
c001119b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001119f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111a2:	83 f8 02             	cmp    eax,0x2
c00111a5:	76 4d                	jbe    c00111f4 <SysTell(regs*)+0x5d>
c00111a7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111ac:	76 19                	jbe    c00111c7 <SysTell(regs*)+0x30>
c00111ae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111b1:	31 d2                	xor    edx,edx
c00111b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00111b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111c0:	83 c4 18             	add    esp,0x18
c00111c3:	31 c0                	xor    eax,eax
c00111c5:	5b                   	pop    ebx
c00111c6:	c3                   	ret    
c00111c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00111ca:	e8 48 82 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c00111cf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111d2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00111d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00111d9:	e8 4c 9f ff ff       	call   c000b12a <File::tell(unsigned long long*)>
c00111de:	85 c0                	test   eax,eax
c00111e0:	0f 95 c0             	setne  al
c00111e3:	31 d2                	xor    edx,edx
c00111e5:	0f b6 c0             	movzx  eax,al
c00111e8:	f7 d8                	neg    eax
c00111ea:	83 d2 00             	adc    edx,0x0
c00111ed:	83 c4 18             	add    esp,0x18
c00111f0:	5b                   	pop    ebx
c00111f1:	f7 da                	neg    edx
c00111f3:	c3                   	ret    
c00111f4:	83 c4 18             	add    esp,0x18
c00111f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111fc:	5b                   	pop    ebx
c00111fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011202:	c3                   	ret    

c0011203 <SysSize(regs*)>:
c0011203:	53                   	push   ebx
c0011204:	83 ec 28             	sub    esp,0x28
c0011207:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001120b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001120e:	83 f8 02             	cmp    eax,0x2
c0011211:	76 55                	jbe    c0011268 <SysSize(regs*)+0x65>
c0011213:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011218:	76 19                	jbe    c0011233 <SysSize(regs*)+0x30>
c001121a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001121d:	31 d2                	xor    edx,edx
c001121f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011225:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001122c:	83 c4 28             	add    esp,0x28
c001122f:	31 c0                	xor    eax,eax
c0011231:	5b                   	pop    ebx
c0011232:	c3                   	ret    
c0011233:	89 04 24             	mov    DWORD PTR [esp],eax
c0011236:	e8 dc 81 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c001123b:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c001123f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011243:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011246:	89 04 24             	mov    DWORD PTR [esp],eax
c0011249:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001124d:	e8 6a a0 ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0011252:	85 c0                	test   eax,eax
c0011254:	0f 95 c0             	setne  al
c0011257:	31 d2                	xor    edx,edx
c0011259:	0f b6 c0             	movzx  eax,al
c001125c:	f7 d8                	neg    eax
c001125e:	83 d2 00             	adc    edx,0x0
c0011261:	83 c4 28             	add    esp,0x28
c0011264:	5b                   	pop    ebx
c0011265:	f7 da                	neg    edx
c0011267:	c3                   	ret    
c0011268:	83 c4 28             	add    esp,0x28
c001126b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011270:	5b                   	pop    ebx
c0011271:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011276:	c3                   	ret    

c0011277 <SysSizeFromFilename(regs*)>:
c0011277:	83 ec 2c             	sub    esp,0x2c
c001127a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001127e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011282:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011286:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001128a:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001128d:	83 fb 02             	cmp    ebx,0x2
c0011290:	0f 86 97 00 00 00    	jbe    c001132d <SysSizeFromFilename(regs*)+0xb6>
c0011296:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001129c:	76 24                	jbe    c00112c2 <SysSizeFromFilename(regs*)+0x4b>
c001129e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112a1:	31 d2                	xor    edx,edx
c00112a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112b0:	31 c0                	xor    eax,eax
c00112b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112b6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00112ba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00112be:	83 c4 2c             	add    esp,0x2c
c00112c1:	c3                   	ret    
c00112c2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00112c9:	e8 98 67 ff ff       	call   c0007a66 <malloc>
c00112ce:	89 c7                	mov    edi,eax
c00112d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112d8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00112dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112e3:	e8 70 9c ff ff       	call   c000af58 <File::File(char const*, Process*)>
c00112e8:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00112ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112f0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112fa:	e8 bd 9f ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c00112ff:	85 ff                	test   edi,edi
c0011301:	89 c3                	mov    ebx,eax
c0011303:	74 08                	je     c001130d <SysSizeFromFilename(regs*)+0x96>
c0011305:	8b 07                	mov    eax,DWORD PTR [edi]
c0011307:	89 3c 24             	mov    DWORD PTR [esp],edi
c001130a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001130d:	31 c0                	xor    eax,eax
c001130f:	85 db                	test   ebx,ebx
c0011311:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011315:	0f 95 c0             	setne  al
c0011318:	31 d2                	xor    edx,edx
c001131a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001131e:	f7 d8                	neg    eax
c0011320:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011324:	83 d2 00             	adc    edx,0x0
c0011327:	83 c4 2c             	add    esp,0x2c
c001132a:	f7 da                	neg    edx
c001132c:	c3                   	ret    
c001132d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011332:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011337:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001133b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001133f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011343:	83 c4 2c             	add    esp,0x2c
c0011346:	c3                   	ret    

c0011347 <SysClose(regs*)>:
c0011347:	53                   	push   ebx
c0011348:	83 ec 18             	sub    esp,0x18
c001134b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001134f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011352:	83 f8 02             	cmp    eax,0x2
c0011355:	76 39                	jbe    c0011390 <SysClose(regs*)+0x49>
c0011357:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001135d:	83 fa 01             	cmp    edx,0x1
c0011360:	76 25                	jbe    c0011387 <SysClose(regs*)+0x40>
c0011362:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011367:	77 27                	ja     c0011390 <SysClose(regs*)+0x49>
c0011369:	89 04 24             	mov    DWORD PTR [esp],eax
c001136c:	e8 a6 80 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c0011371:	89 04 24             	mov    DWORD PTR [esp],eax
c0011374:	89 c3                	mov    ebx,eax
c0011376:	e8 f9 9c ff ff       	call   c000b074 <File::close()>
c001137b:	85 db                	test   ebx,ebx
c001137d:	74 08                	je     c0011387 <SysClose(regs*)+0x40>
c001137f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011381:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011384:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011387:	83 c4 18             	add    esp,0x18
c001138a:	31 c0                	xor    eax,eax
c001138c:	5b                   	pop    ebx
c001138d:	31 d2                	xor    edx,edx
c001138f:	c3                   	ret    
c0011390:	83 c4 18             	add    esp,0x18
c0011393:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011398:	5b                   	pop    ebx
c0011399:	ba ff ff ff ff       	mov    edx,0xffffffff
c001139e:	c3                   	ret    

c001139f <SysOpenDir(regs*)>:
c001139f:	83 ec 1c             	sub    esp,0x1c
c00113a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113aa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00113ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00113b1:	85 c0                	test   eax,eax
c00113b3:	74 5c                	je     c0011411 <SysOpenDir(regs*)+0x72>
c00113b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113bc:	e8 a5 66 ff ff       	call   c0007a66 <malloc>
c00113c1:	89 c6                	mov    esi,eax
c00113c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113d9:	e8 9c a0 ff ff       	call   c000b47a <Directory::Directory(char const*, Process*)>
c00113de:	85 f6                	test   esi,esi
c00113e0:	74 2f                	je     c0011411 <SysOpenDir(regs*)+0x72>
c00113e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00113e5:	e8 4e a1 ff ff       	call   c000b538 <Directory::open()>
c00113ea:	85 c0                	test   eax,eax
c00113ec:	75 23                	jne    c0011411 <SysOpenDir(regs*)+0x72>
c00113ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f1:	e8 58 7d ff ff       	call   c000914e <UnixFile::getFileDescriptor()>
c00113f6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113f9:	89 02                	mov    DWORD PTR [edx],eax
c00113fb:	c1 f8 1f             	sar    eax,0x1f
c00113fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011401:	31 c0                	xor    eax,eax
c0011403:	31 d2                	xor    edx,edx
c0011405:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011409:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001140d:	83 c4 1c             	add    esp,0x1c
c0011410:	c3                   	ret    
c0011411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011416:	ba ff ff ff ff       	mov    edx,0xffffffff
c001141b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001141f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011423:	83 c4 1c             	add    esp,0x1c
c0011426:	c3                   	ret    

c0011427 <SysMakeDir(regs*)>:
c0011427:	56                   	push   esi
c0011428:	53                   	push   ebx
c0011429:	83 ec 14             	sub    esp,0x14
c001142c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011433:	e8 2e 66 ff ff       	call   c0007a66 <malloc>
c0011438:	89 c3                	mov    ebx,eax
c001143a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001143f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011442:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011446:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001144a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001144d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011450:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011454:	e8 21 a0 ff ff       	call   c000b47a <Directory::Directory(char const*, Process*)>
c0011459:	85 db                	test   ebx,ebx
c001145b:	74 28                	je     c0011485 <SysMakeDir(regs*)+0x5e>
c001145d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011460:	e8 b3 a2 ff ff       	call   c000b718 <Directory::create()>
c0011465:	89 c6                	mov    esi,eax
c0011467:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001146c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001146f:	31 c0                	xor    eax,eax
c0011471:	85 f6                	test   esi,esi
c0011473:	0f 95 c0             	setne  al
c0011476:	31 d2                	xor    edx,edx
c0011478:	f7 d8                	neg    eax
c001147a:	83 d2 00             	adc    edx,0x0
c001147d:	83 c4 14             	add    esp,0x14
c0011480:	5b                   	pop    ebx
c0011481:	f7 da                	neg    edx
c0011483:	5e                   	pop    esi
c0011484:	c3                   	ret    
c0011485:	83 c4 14             	add    esp,0x14
c0011488:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001148d:	5b                   	pop    ebx
c001148e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011493:	5e                   	pop    esi
c0011494:	c3                   	ret    

c0011495 <SysCloseDir(regs*)>:
c0011495:	53                   	push   ebx
c0011496:	ba ff ff ff ff       	mov    edx,0xffffffff
c001149b:	83 ec 18             	sub    esp,0x18
c001149e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114a2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114a5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114aa:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00114ad:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00114b3:	77 22                	ja     c00114d7 <SysCloseDir(regs*)+0x42>
c00114b5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00114b8:	e8 5a 7f ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c00114bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00114c0:	89 c3                	mov    ebx,eax
c00114c2:	e8 cd a0 ff ff       	call   c000b594 <Directory::close()>
c00114c7:	85 db                	test   ebx,ebx
c00114c9:	74 08                	je     c00114d3 <SysCloseDir(regs*)+0x3e>
c00114cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114d3:	31 c0                	xor    eax,eax
c00114d5:	31 d2                	xor    edx,edx
c00114d7:	83 c4 18             	add    esp,0x18
c00114da:	5b                   	pop    ebx
c00114db:	c3                   	ret    

c00114dc <SysWait(regs*)>:
c00114dc:	83 ec 1c             	sub    esp,0x1c
c00114df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114e3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00114e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00114ea:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00114f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00114f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00114f7:	e8 50 3d 00 00       	call   c001524c <waitTask(int, int*, int)>
c00114fc:	83 c4 1c             	add    esp,0x1c
c00114ff:	99                   	cdq    
c0011500:	c3                   	ret    

c0011501 <SysNotImpl(regs*)>:
c0011501:	83 ec 1c             	sub    esp,0x1c
c0011504:	c7 04 24 9e 09 02 c0 	mov    DWORD PTR [esp],0xc002099e
c001150b:	e8 15 f2 ff ff       	call   c0010725 <KePanic(char const*)>
c0011510:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011515:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151a:	83 c4 1c             	add    esp,0x1c
c001151d:	c3                   	ret    

c001151e <SysPanic(regs*)>:
c001151e:	83 ec 1c             	sub    esp,0x1c
c0011521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011525:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011528:	89 04 24             	mov    DWORD PTR [esp],eax
c001152b:	e8 f5 f1 ff ff       	call   c0010725 <KePanic(char const*)>
c0011530:	b8 01 00 00 00       	mov    eax,0x1
c0011535:	31 d2                	xor    edx,edx
c0011537:	83 c4 1c             	add    esp,0x1c
c001153a:	c3                   	ret    

c001153b <SysRmdir(regs*)>:
c001153b:	56                   	push   esi
c001153c:	53                   	push   ebx
c001153d:	83 ec 14             	sub    esp,0x14
c0011540:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011544:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011547:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001154e:	e8 13 65 ff ff       	call   c0007a66 <malloc>
c0011553:	89 c3                	mov    ebx,eax
c0011555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001155a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001155d:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011561:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011568:	e8 eb 99 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c001156d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011570:	e8 19 9c ff ff       	call   c000b18e <File::unlink()>
c0011575:	85 db                	test   ebx,ebx
c0011577:	89 c6                	mov    esi,eax
c0011579:	74 08                	je     c0011583 <SysRmdir(regs*)+0x48>
c001157b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001157d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011580:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011583:	31 c0                	xor    eax,eax
c0011585:	85 f6                	test   esi,esi
c0011587:	0f 95 c0             	setne  al
c001158a:	31 d2                	xor    edx,edx
c001158c:	f7 d8                	neg    eax
c001158e:	83 d2 00             	adc    edx,0x0
c0011591:	83 c4 14             	add    esp,0x14
c0011594:	5b                   	pop    ebx
c0011595:	f7 da                	neg    edx
c0011597:	5e                   	pop    esi
c0011598:	c3                   	ret    

c0011599 <SysUnlink(regs*)>:
c0011599:	56                   	push   esi
c001159a:	53                   	push   ebx
c001159b:	83 ec 14             	sub    esp,0x14
c001159e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115a2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00115ac:	e8 b5 64 ff ff       	call   c0007a66 <malloc>
c00115b1:	89 c3                	mov    ebx,eax
c00115b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115bb:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00115bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115c6:	e8 8d 99 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c00115cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115ce:	e8 bb 9b ff ff       	call   c000b18e <File::unlink()>
c00115d3:	85 db                	test   ebx,ebx
c00115d5:	89 c6                	mov    esi,eax
c00115d7:	74 08                	je     c00115e1 <SysUnlink(regs*)+0x48>
c00115d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115e1:	31 c0                	xor    eax,eax
c00115e3:	85 f6                	test   esi,esi
c00115e5:	0f 95 c0             	setne  al
c00115e8:	31 d2                	xor    edx,edx
c00115ea:	f7 d8                	neg    eax
c00115ec:	83 d2 00             	adc    edx,0x0
c00115ef:	83 c4 14             	add    esp,0x14
c00115f2:	5b                   	pop    ebx
c00115f3:	f7 da                	neg    edx
c00115f5:	5e                   	pop    esi
c00115f6:	c3                   	ret    

c00115f7 <SysGetArgv(regs*)>:
c00115f7:	83 ec 1c             	sub    esp,0x1c
c00115fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00115fe:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011601:	85 c0                	test   eax,eax
c0011603:	78 2b                	js     c0011630 <SysGetArgv(regs*)+0x39>
c0011605:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001160b:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001160e:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011614:	7d 1a                	jge    c0011630 <SysGetArgv(regs*)+0x39>
c0011616:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001161d:	85 c0                	test   eax,eax
c001161f:	74 17                	je     c0011638 <SysGetArgv(regs*)+0x41>
c0011621:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011625:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011628:	89 04 24             	mov    DWORD PTR [esp],eax
c001162b:	e8 60 f0 fe ff       	call   c0000690 <strcpy>
c0011630:	31 c0                	xor    eax,eax
c0011632:	31 d2                	xor    edx,edx
c0011634:	83 c4 1c             	add    esp,0x1c
c0011637:	c3                   	ret    
c0011638:	b8 01 00 00 00       	mov    eax,0x1
c001163d:	31 d2                	xor    edx,edx
c001163f:	83 c4 1c             	add    esp,0x1c
c0011642:	c3                   	ret    

c0011643 <SysUSleep(regs*)>:
c0011643:	53                   	push   ebx
c0011644:	ba 64 00 00 00       	mov    edx,0x64
c0011649:	83 ec 18             	sub    esp,0x18
c001164c:	31 db                	xor    ebx,ebx
c001164e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011652:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011655:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011658:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001165c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011660:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011664:	89 04 24             	mov    DWORD PTR [esp],eax
c0011667:	e8 94 cc 00 00       	call   c001e300 <__udivdi3>
c001166c:	89 04 24             	mov    DWORD PTR [esp],eax
c001166f:	e8 a8 3c 00 00       	call   c001531c <milliTenthSleep(unsigned int)>
c0011674:	83 c4 18             	add    esp,0x18
c0011677:	31 c0                	xor    eax,eax
c0011679:	5b                   	pop    ebx
c001167a:	31 d2                	xor    edx,edx
c001167c:	c3                   	ret    

c001167d <SysSpawn(regs*)>:
c001167d:	83 ec 1c             	sub    esp,0x1c
c0011680:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011684:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011688:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001168c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001168f:	85 f6                	test   esi,esi
c0011691:	75 10                	jne    c00116a3 <SysSpawn(regs*)+0x26>
c0011693:	31 c0                	xor    eax,eax
c0011695:	31 d2                	xor    edx,edx
c0011697:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001169b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001169f:	83 c4 1c             	add    esp,0x1c
c00116a2:	c3                   	ret    
c00116a3:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00116aa:	e8 b7 63 ff ff       	call   c0007a66 <malloc>
c00116af:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00116b2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116b5:	89 c6                	mov    esi,eax
c00116b7:	31 c0                	xor    eax,eax
c00116b9:	85 c9                	test   ecx,ecx
c00116bb:	75 08                	jne    c00116c5 <SysSpawn(regs*)+0x48>
c00116bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116c5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116cd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00116d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d7:	e8 fc 32 00 00       	call   c00149d8 <Process::Process(char const*, Process*, char**)>
c00116dc:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00116e3:	75 ae                	jne    c0011693 <SysSpawn(regs*)+0x16>
c00116e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e8:	e8 ff 37 00 00       	call   c0014eec <Process::createUserThread()>
c00116ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00116ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00116f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00116f7:	83 c4 1c             	add    esp,0x1c
c00116fa:	99                   	cdq    
c00116fb:	c3                   	ret    

c00116fc <SysGetEnv(regs*)>:
c00116fc:	83 ec 2c             	sub    esp,0x2c
c00116ff:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011703:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011707:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001170b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001170f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011714:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011717:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001171a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001171d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011720:	e8 b8 ee ff ff       	call   c00105dd <Krnl::getProcessTotalEnvCount(Process*)>
c0011725:	39 c7                	cmp    edi,eax
c0011727:	7c 1b                	jl     c0011744 <SysGetEnv(regs*)+0x48>
c0011729:	31 c0                	xor    eax,eax
c001172b:	31 d2                	xor    edx,edx
c001172d:	85 f6                	test   esi,esi
c001172f:	74 03                	je     c0011734 <SysGetEnv(regs*)+0x38>
c0011731:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011734:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011738:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001173c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011740:	83 c4 2c             	add    esp,0x2c
c0011743:	c3                   	ret    
c0011744:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011748:	8d 44 24 18          	lea    eax,[esp+0x18]
c001174c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011752:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011755:	89 04 24             	mov    DWORD PTR [esp],eax
c0011758:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001175c:	e8 9c ee ff ff       	call   c00105fd <Krnl::getProcessEnvPair(Process*, int)>
c0011761:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011764:	83 ec 04             	sub    esp,0x4
c0011767:	85 d2                	test   edx,edx
c0011769:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001176d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011771:	75 28                	jne    c001179b <SysGetEnv(regs*)+0x9f>
c0011773:	89 04 24             	mov    DWORD PTR [esp],eax
c0011776:	e8 15 ee fe ff       	call   c0000590 <strlen>
c001177b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001177e:	89 c3                	mov    ebx,eax
c0011780:	e8 0b ee fe ff       	call   c0000590 <strlen>
c0011785:	31 d2                	xor    edx,edx
c0011787:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001178b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001178f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011793:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011797:	83 c4 2c             	add    esp,0x2c
c001179a:	c3                   	ret    
c001179b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001179e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00117a5:	e8 e6 ee fe ff       	call   c0000690 <strcpy>
c00117aa:	b8 b8 09 02 c0       	mov    eax,0xc00209b8
c00117af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00117b6:	e8 e5 f0 fe ff       	call   c00008a0 <strcat>
c00117bb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00117bf:	89 34 24             	mov    DWORD PTR [esp],esi
c00117c2:	e8 d9 f0 fe ff       	call   c00008a0 <strcat>
c00117c7:	31 c0                	xor    eax,eax
c00117c9:	31 d2                	xor    edx,edx
c00117cb:	eb be                	jmp    c001178b <SysGetEnv(regs*)+0x8f>

c00117cd <SysSetFatAttrib(regs*)>:
c00117cd:	83 ec 1c             	sub    esp,0x1c
c00117d0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00117d4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00117d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00117dc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00117e0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00117e3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00117ea:	e8 77 62 ff ff       	call   c0007a66 <malloc>
c00117ef:	89 c3                	mov    ebx,eax
c00117f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117f9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00117fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011804:	e8 4f 97 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0011809:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001180c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001180f:	0f b6 d4             	movzx  edx,ah
c0011812:	0f b6 c0             	movzx  eax,al
c0011815:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001181d:	e8 06 9a ff ff       	call   c000b228 <File::chfatattr(unsigned char, unsigned char)>
c0011822:	85 db                	test   ebx,ebx
c0011824:	89 c6                	mov    esi,eax
c0011826:	74 08                	je     c0011830 <SysSetFatAttrib(regs*)+0x63>
c0011828:	8b 03                	mov    eax,DWORD PTR [ebx]
c001182a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001182d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011830:	31 c0                	xor    eax,eax
c0011832:	85 f6                	test   esi,esi
c0011834:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011838:	0f 95 c0             	setne  al
c001183b:	31 d2                	xor    edx,edx
c001183d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011841:	f7 d8                	neg    eax
c0011843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011847:	83 d2 00             	adc    edx,0x0
c001184a:	83 c4 1c             	add    esp,0x1c
c001184d:	f7 da                	neg    edx
c001184f:	c3                   	ret    

c0011850 <SysPipe(regs*)>:
c0011850:	83 ec 1c             	sub    esp,0x1c
c0011853:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001185b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001185f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011863:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011866:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011869:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0011870:	e8 f1 61 ff ff       	call   c0007a66 <malloc>
c0011875:	89 c3                	mov    ebx,eax
c0011877:	b8 00 50 00 00       	mov    eax,0x5000
c001187c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011883:	e8 22 6b ff ff       	call   c00083aa <Pipe::Pipe(int)>
c0011888:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001188b:	e8 be 78 ff ff       	call   c000914e <UnixFile::getFileDescriptor()>
c0011890:	89 07                	mov    DWORD PTR [edi],eax
c0011892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011895:	e8 b4 78 ff ff       	call   c000914e <UnixFile::getFileDescriptor()>
c001189a:	31 d2                	xor    edx,edx
c001189c:	89 06                	mov    DWORD PTR [esi],eax
c001189e:	31 c0                	xor    eax,eax
c00118a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00118a8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00118ac:	83 c4 1c             	add    esp,0x1c
c00118af:	c3                   	ret    

c00118b0 <SysGetUnixTime(regs*)>:
c00118b0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118bf:	e9 90 a0 ff ff       	jmp    c000b954 <Clock::timeInSecondsLocal()>

c00118c4 <string_ends_with(char const*, char const*)>:
c00118c4:	83 ec 1c             	sub    esp,0x1c
c00118c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00118cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00118cf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00118d3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00118d7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00118db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118de:	e8 ad ec fe ff       	call   c0000590 <strlen>
c00118e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00118e6:	89 c6                	mov    esi,eax
c00118e8:	e8 a3 ec fe ff       	call   c0000590 <strlen>
c00118ed:	31 d2                	xor    edx,edx
c00118ef:	39 c6                	cmp    esi,eax
c00118f1:	7d 12                	jge    c0011905 <string_ends_with(char const*, char const*)+0x41>
c00118f3:	89 d0                	mov    eax,edx
c00118f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00118fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011901:	83 c4 1c             	add    esp,0x1c
c0011904:	c3                   	ret    
c0011905:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011909:	29 c6                	sub    esi,eax
c001190b:	01 f3                	add    ebx,esi
c001190d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011910:	e8 9b ee fe ff       	call   c00007b0 <strcmp>
c0011915:	31 d2                	xor    edx,edx
c0011917:	85 c0                	test   eax,eax
c0011919:	0f 94 c2             	sete   dl
c001191c:	eb d5                	jmp    c00118f3 <string_ends_with(char const*, char const*)+0x2f>

c001191e <SysOpen(regs*)>:
c001191e:	56                   	push   esi
c001191f:	53                   	push   ebx
c0011920:	81 ec 14 01 00 00    	sub    esp,0x114
c0011926:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c001192d:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c0011930:	85 c9                	test   ecx,ecx
c0011932:	0f 84 c2 01 00 00    	je     c0011afa <SysOpen(regs*)+0x1dc>
c0011938:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001193b:	85 c0                	test   eax,eax
c001193d:	0f 84 b7 01 00 00    	je     c0011afa <SysOpen(regs*)+0x1dc>
c0011943:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011947:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001194b:	ba ba 09 02 c0       	mov    edx,0xc00209ba
c0011950:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011957:	e8 55 94 ff ff       	call   c000adb1 <Fs::standardiseFiles(char*, char const*, char const*)>
c001195c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001195f:	e8 2c ec fe ff       	call   c0000590 <strlen>
c0011964:	48                   	dec    eax
c0011965:	74 29                	je     c0011990 <SysOpen(regs*)+0x72>
c0011967:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c001196c:	80 fa 2e             	cmp    dl,0x2e
c001196f:	74 1a                	je     c001198b <SysOpen(regs*)+0x6d>
c0011971:	80 fa 3a             	cmp    dl,0x3a
c0011974:	74 15                	je     c001198b <SysOpen(regs*)+0x6d>
c0011976:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001197a:	48                   	dec    eax
c001197b:	74 13                	je     c0011990 <SysOpen(regs*)+0x72>
c001197d:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c0011981:	80 fa 3a             	cmp    dl,0x3a
c0011984:	74 05                	je     c001198b <SysOpen(regs*)+0x6d>
c0011986:	80 fa 2e             	cmp    dl,0x2e
c0011989:	75 eb                	jne    c0011976 <SysOpen(regs*)+0x58>
c001198b:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c0011990:	b8 be 09 02 c0       	mov    eax,0xc00209be
c0011995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011999:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001199c:	89 04 24             	mov    DWORD PTR [esp],eax
c001199f:	e8 20 ff ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c00119a4:	85 c0                	test   eax,eax
c00119a6:	74 1d                	je     c00119c5 <SysOpen(regs*)+0xa7>
c00119a8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00119ab:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119b8:	81 c4 14 01 00 00    	add    esp,0x114
c00119be:	31 c0                	xor    eax,eax
c00119c0:	5b                   	pop    ebx
c00119c1:	31 d2                	xor    edx,edx
c00119c3:	5e                   	pop    esi
c00119c4:	c3                   	ret    
c00119c5:	b8 c3 09 02 c0       	mov    eax,0xc00209c3
c00119ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ce:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00119d4:	e8 eb fe ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c00119d9:	85 c0                	test   eax,eax
c00119db:	75 cb                	jne    c00119a8 <SysOpen(regs*)+0x8a>
c00119dd:	b8 bf 09 02 c0       	mov    eax,0xc00209bf
c00119e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119e6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00119e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00119ec:	e8 bf ed fe ff       	call   c00007b0 <strcmp>
c00119f1:	85 c0                	test   eax,eax
c00119f3:	74 b3                	je     c00119a8 <SysOpen(regs*)+0x8a>
c00119f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119f8:	b8 be 09 02 c0       	mov    eax,0xc00209be
c00119fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a01:	e8 be fe ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c0011a06:	85 c0                	test   eax,eax
c0011a08:	75 9e                	jne    c00119a8 <SysOpen(regs*)+0x8a>
c0011a0a:	b8 c8 09 02 c0       	mov    eax,0xc00209c8
c0011a0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a13:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a16:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a19:	e8 a6 fe ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c0011a1e:	85 c0                	test   eax,eax
c0011a20:	0f 85 e7 00 00 00    	jne    c0011b0d <SysOpen(regs*)+0x1ef>
c0011a26:	b9 cd 09 02 c0       	mov    ecx,0xc00209cd
c0011a2b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011a2f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a35:	e8 8a fe ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c0011a3a:	85 c0                	test   eax,eax
c0011a3c:	0f 85 cb 00 00 00    	jne    c0011b0d <SysOpen(regs*)+0x1ef>
c0011a42:	ba c9 09 02 c0       	mov    edx,0xc00209c9
c0011a47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a4b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011a51:	e8 5a ed fe ff       	call   c00007b0 <strcmp>
c0011a56:	85 c0                	test   eax,eax
c0011a58:	0f 84 af 00 00 00    	je     c0011b0d <SysOpen(regs*)+0x1ef>
c0011a5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a61:	b8 c8 09 02 c0       	mov    eax,0xc00209c8
c0011a66:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a6a:	e8 55 fe ff ff       	call   c00118c4 <string_ends_with(char const*, char const*)>
c0011a6f:	85 c0                	test   eax,eax
c0011a71:	0f 85 96 00 00 00    	jne    c0011b0d <SysOpen(regs*)+0x1ef>
c0011a77:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011a7e:	e8 e3 5f ff ff       	call   c0007a66 <malloc>
c0011a83:	89 c3                	mov    ebx,eax
c0011a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a91:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a9b:	e8 b8 94 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0011aa0:	85 db                	test   ebx,ebx
c0011aa2:	74 56                	je     c0011afa <SysOpen(regs*)+0x1dc>
c0011aa4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011aa7:	0f b6 c2             	movzx  eax,dl
c0011aaa:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0011aad:	89 d0                	mov    eax,edx
c0011aaf:	83 e0 01             	and    eax,0x1
c0011ab2:	f6 c2 02             	test   dl,0x2
c0011ab5:	74 03                	je     c0011aba <SysOpen(regs*)+0x19c>
c0011ab7:	83 c8 02             	or     eax,0x2
c0011aba:	f6 c2 04             	test   dl,0x4
c0011abd:	74 03                	je     c0011ac2 <SysOpen(regs*)+0x1a4>
c0011abf:	83 c8 04             	or     eax,0x4
c0011ac2:	f6 c2 08             	test   dl,0x8
c0011ac5:	74 03                	je     c0011aca <SysOpen(regs*)+0x1ac>
c0011ac7:	83 c8 0a             	or     eax,0xa
c0011aca:	f6 c2 10             	test   dl,0x10
c0011acd:	74 03                	je     c0011ad2 <SysOpen(regs*)+0x1b4>
c0011acf:	83 c8 12             	or     eax,0x12
c0011ad2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ad6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ad9:	e8 38 95 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0011ade:	85 c0                	test   eax,eax
c0011ae0:	75 18                	jne    c0011afa <SysOpen(regs*)+0x1dc>
c0011ae2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ae5:	e8 64 76 ff ff       	call   c000914e <UnixFile::getFileDescriptor()>
c0011aea:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0011aed:	89 02                	mov    DWORD PTR [edx],eax
c0011aef:	c1 f8 1f             	sar    eax,0x1f
c0011af2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011af5:	e9 be fe ff ff       	jmp    c00119b8 <SysOpen(regs*)+0x9a>
c0011afa:	81 c4 14 01 00 00    	add    esp,0x114
c0011b00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b05:	5b                   	pop    ebx
c0011b06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b0b:	5e                   	pop    esi
c0011b0c:	c3                   	ret    
c0011b0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011b10:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b16:	e9 96 fe ff ff       	jmp    c00119b1 <SysOpen(regs*)+0x93>

c0011b1b <KeSystemCall(regs*, void*)>:
c0011b1b:	53                   	push   ebx
c0011b1c:	83 ec 08             	sub    esp,0x8
c0011b1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b23:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b26:	83 f8 3b             	cmp    eax,0x3b
c0011b29:	77 16                	ja     c0011b41 <KeSystemCall(regs*, void*)+0x26>
c0011b2b:	8b 14 85 80 1d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde280]
c0011b32:	85 d2                	test   edx,edx
c0011b34:	74 0b                	je     c0011b41 <KeSystemCall(regs*, void*)+0x26>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	53                   	push   ebx
c0011b3a:	ff d2                	call   edx
c0011b3c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b3f:	eb 0d                	jmp    c0011b4e <KeSystemCall(regs*, void*)+0x33>
c0011b41:	52                   	push   edx
c0011b42:	52                   	push   edx
c0011b43:	50                   	push   eax
c0011b44:	68 d2 09 02 c0       	push   0xc00209d2
c0011b49:	e8 88 8e ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b56:	83 c4 08             	add    esp,0x8
c0011b59:	31 d2                	xor    edx,edx
c0011b5b:	5b                   	pop    ebx
c0011b5c:	c3                   	ret    
c0011b5d:	66 90                	xchg   ax,ax
c0011b5f:	90                   	nop

c0011b60 <KeSwitchEndian16(unsigned short)>:
c0011b60:	83 ec 04             	sub    esp,0x4
c0011b63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b67:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b6b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b6f:	c1 f8 08             	sar    eax,0x8
c0011b72:	0f bf d0             	movsx  edx,ax
c0011b75:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b79:	c1 e0 08             	shl    eax,0x8
c0011b7c:	98                   	cwde   
c0011b7d:	09 d0                	or     eax,edx
c0011b7f:	98                   	cwde   
c0011b80:	0f b7 c0             	movzx  eax,ax
c0011b83:	83 c4 04             	add    esp,0x4
c0011b86:	c3                   	ret    
c0011b87:	90                   	nop

c0011b88 <KeSwitchEndian32(unsigned int)>:
c0011b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8c:	c1 e8 18             	shr    eax,0x18
c0011b8f:	89 c2                	mov    edx,eax
c0011b91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b95:	c1 e0 08             	shl    eax,0x8
c0011b98:	25 00 00 ff 00       	and    eax,0xff0000
c0011b9d:	09 c2                	or     edx,eax
c0011b9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ba3:	c1 e8 08             	shr    eax,0x8
c0011ba6:	25 00 ff 00 00       	and    eax,0xff00
c0011bab:	09 c2                	or     edx,eax
c0011bad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb1:	c1 e0 18             	shl    eax,0x18
c0011bb4:	09 d0                	or     eax,edx
c0011bb6:	c3                   	ret    
c0011bb7:	90                   	nop

c0011bb8 <EthernetCRC32(unsigned char*, int)>:
c0011bb8:	83 ec 10             	sub    esp,0x10
c0011bbb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bc0:	75 0a                	jne    c0011bcc <EthernetCRC32(unsigned char*, int)+0x14>
c0011bc2:	b8 00 00 00 00       	mov    eax,0x0
c0011bc7:	e9 8c 00 00 00       	jmp    c0011c58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bcc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bd1:	7f 09                	jg     c0011bdc <EthernetCRC32(unsigned char*, int)+0x24>
c0011bd3:	b8 00 00 00 00       	mov    eax,0x0
c0011bd8:	eb 7e                	jmp    c0011c58 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bda:	66 90                	xchg   ax,ax
c0011bdc:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011be4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011bec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bf0:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011bf4:	7d 5a                	jge    c0011c50 <EthernetCRC32(unsigned char*, int)+0x98>
c0011bf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bfe:	01 d0                	add    eax,edx
c0011c00:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011c03:	0f b6 c0             	movzx  eax,al
c0011c06:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c0a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c12:	66 90                	xchg   ax,ax
c0011c14:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c19:	7f 2d                	jg     c0011c48 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c1f:	83 e0 01             	and    eax,0x1
c0011c22:	74 10                	je     c0011c34 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c28:	d1 e8                	shr    eax,1
c0011c2a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c2f:	eb 0b                	jmp    c0011c3c <EthernetCRC32(unsigned char*, int)+0x84>
c0011c31:	8d 76 00             	lea    esi,[esi+0x0]
c0011c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c38:	d1 e8                	shr    eax,1
c0011c3a:	66 90                	xchg   ax,ax
c0011c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c40:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c44:	eb ce                	jmp    c0011c14 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c46:	66 90                	xchg   ax,ax
c0011c48:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011c4c:	eb 9e                	jmp    c0011bec <EthernetCRC32(unsigned char*, int)+0x34>
c0011c4e:	66 90                	xchg   ax,ax
c0011c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c54:	f7 d0                	not    eax
c0011c56:	66 90                	xchg   ax,ax
c0011c58:	83 c4 10             	add    esp,0x10
c0011c5b:	c3                   	ret    

c0011c5c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c5c:	83 ec 3c             	sub    esp,0x3c
c0011c5f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011c63:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0011c68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011c6c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011c70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c74:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011c78:	3d 06 08 00 00       	cmp    eax,0x806
c0011c7d:	75 11                	jne    c0011c90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011c7f:	c7 04 24 e6 09 02 c0 	mov    DWORD PTR [esp],0xc00209e6
c0011c86:	e8 4b 8d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0011c8b:	eb 1f                	jmp    c0011cac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011c8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c94:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011c98:	3d 00 08 00 00       	cmp    eax,0x800
c0011c9d:	75 0d                	jne    c0011cac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011c9f:	c7 04 24 fc 09 02 c0 	mov    DWORD PTR [esp],0xc00209fc
c0011ca6:	e8 2b 8d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0011cab:	90                   	nop
c0011cac:	90                   	nop
c0011cad:	83 c4 3c             	add    esp,0x3c
c0011cb0:	c3                   	ret    

c0011cb1 <CmOpen(char const*)>:
c0011cb1:	57                   	push   edi
c0011cb2:	56                   	push   esi
c0011cb3:	53                   	push   ebx
c0011cb4:	83 ec 1c             	sub    esp,0x1c
c0011cb7:	6a 30                	push   0x30
c0011cb9:	e8 a8 5d ff ff       	call   c0007a66 <malloc>
c0011cbe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cc5:	89 c3                	mov    ebx,eax
c0011cc7:	e8 9a 5d ff ff       	call   c0007a66 <malloc>
c0011ccc:	83 c4 0c             	add    esp,0xc
c0011ccf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011cd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011cd9:	89 c6                	mov    esi,eax
c0011cdb:	50                   	push   eax
c0011cdc:	e8 77 92 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0011ce1:	83 c4 0c             	add    esp,0xc
c0011ce4:	89 33                	mov    DWORD PTR [ebx],esi
c0011ce6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011cea:	50                   	push   eax
c0011ceb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011cef:	50                   	push   eax
c0011cf0:	56                   	push   esi
c0011cf1:	e8 c6 95 ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0011cf6:	5a                   	pop    edx
c0011cf7:	59                   	pop    ecx
c0011cf8:	6a 01                	push   0x1
c0011cfa:	ff 33                	push   DWORD PTR [ebx]
c0011cfc:	e8 15 93 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0011d01:	5e                   	pop    esi
c0011d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d06:	e8 5b 5d ff ff       	call   c0007a66 <malloc>
c0011d0b:	5a                   	pop    edx
c0011d0c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d10:	89 c7                	mov    edi,eax
c0011d12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d16:	56                   	push   esi
c0011d17:	57                   	push   edi
c0011d18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d20:	50                   	push   eax
c0011d21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d24:	83 c4 14             	add    esp,0x14
c0011d27:	ff 33                	push   DWORD PTR [ebx]
c0011d29:	e8 46 93 ff ff       	call   c000b074 <File::close()>
c0011d2e:	59                   	pop    ecx
c0011d2f:	58                   	pop    eax
c0011d30:	6a 13                	push   0x13
c0011d32:	ff 33                	push   DWORD PTR [ebx]
c0011d34:	e8 dd 92 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0011d39:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d40:	57                   	push   edi
c0011d41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d49:	50                   	push   eax
c0011d4a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d4d:	83 c4 14             	add    esp,0x14
c0011d50:	57                   	push   edi
c0011d51:	e8 23 5d ff ff       	call   c0007a79 <free>
c0011d56:	83 c4 10             	add    esp,0x10
c0011d59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d5c:	75 10                	jne    c0011d6e <CmOpen(char const*)+0xbd>
c0011d5e:	83 ec 0c             	sub    esp,0xc
c0011d61:	68 11 0a 02 c0       	push   0xc0020a11
c0011d66:	e8 ba e9 ff ff       	call   c0010725 <KePanic(char const*)>
c0011d6b:	83 c4 10             	add    esp,0x10
c0011d6e:	50                   	push   eax
c0011d6f:	6a 00                	push   0x0
c0011d71:	6a 00                	push   0x0
c0011d73:	ff 33                	push   DWORD PTR [ebx]
c0011d75:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d78:	e8 57 93 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011d7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d81:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d84:	57                   	push   edi
c0011d85:	6a 00                	push   0x0
c0011d87:	6a 2b                	push   0x2b
c0011d89:	50                   	push   eax
c0011d8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d8d:	83 c4 1c             	add    esp,0x1c
c0011d90:	6a 00                	push   0x0
c0011d92:	6a 00                	push   0x0
c0011d94:	ff 33                	push   DWORD PTR [ebx]
c0011d96:	e8 39 93 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011d9b:	83 c4 0c             	add    esp,0xc
c0011d9e:	6a 08                	push   0x8
c0011da0:	68 22 0a 02 c0       	push   0xc0020a22
c0011da5:	57                   	push   edi
c0011da6:	e8 d5 e5 fe ff       	call   c0000380 <memcmp>
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	85 c0                	test   eax,eax
c0011db0:	74 10                	je     c0011dc2 <CmOpen(char const*)+0x111>
c0011db2:	83 ec 0c             	sub    esp,0xc
c0011db5:	68 2b 0a 02 c0       	push   0xc0020a2b
c0011dba:	e8 66 e9 ff ff       	call   c0010725 <KePanic(char const*)>
c0011dbf:	83 c4 10             	add    esp,0x10
c0011dc2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	89 d8                	mov    eax,ebx
c0011dcb:	5b                   	pop    ebx
c0011dcc:	5e                   	pop    esi
c0011dcd:	5f                   	pop    edi
c0011dce:	c3                   	ret    

c0011dcf <CmClose(Reghive_Tag*)>:
c0011dcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dd3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011dd7:	74 0b                	je     c0011de4 <CmClose(Reghive_Tag*)+0x15>
c0011dd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ddf:	e9 90 92 ff ff       	jmp    c000b074 <File::close()>
c0011de4:	c3                   	ret    

c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011de5:	53                   	push   ebx
c0011de6:	83 ec 18             	sub    esp,0x18
c0011de9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ded:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011df1:	74 29                	je     c0011e1c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011df3:	50                   	push   eax
c0011df4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011df9:	99                   	cdq    
c0011dfa:	52                   	push   edx
c0011dfb:	50                   	push   eax
c0011dfc:	ff 33                	push   DWORD PTR [ebx]
c0011dfe:	e8 d1 92 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011e03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e05:	5a                   	pop    edx
c0011e06:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e0c:	51                   	push   ecx
c0011e0d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e11:	6a 00                	push   0x0
c0011e13:	6a 2b                	push   0x2b
c0011e15:	50                   	push   eax
c0011e16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e19:	83 c4 20             	add    esp,0x20
c0011e1c:	83 c4 18             	add    esp,0x18
c0011e1f:	5b                   	pop    ebx
c0011e20:	c3                   	ret    

c0011e21 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e21:	55                   	push   ebp
c0011e22:	57                   	push   edi
c0011e23:	56                   	push   esi
c0011e24:	53                   	push   ebx
c0011e25:	31 db                	xor    ebx,ebx
c0011e27:	83 ec 70             	sub    esp,0x70
c0011e2a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e2e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e35:	50                   	push   eax
c0011e36:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e3d:	55                   	push   ebp
c0011e3e:	e8 a2 ff ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e4b:	c1 e0 08             	shl    eax,0x8
c0011e4e:	89 c2                	mov    edx,eax
c0011e50:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e55:	09 d0                	or     eax,edx
c0011e57:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e5c:	c1 e0 08             	shl    eax,0x8
c0011e5f:	09 d0                	or     eax,edx
c0011e61:	74 25                	je     c0011e88 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e63:	52                   	push   edx
c0011e64:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e68:	52                   	push   edx
c0011e69:	6b fb 0d             	imul   edi,ebx,0xd
c0011e6c:	50                   	push   eax
c0011e6d:	55                   	push   ebp
c0011e6e:	e8 72 ff ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e73:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e77:	b9 27 00 00 00       	mov    ecx,0x27
c0011e7c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011e83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e85:	83 c4 10             	add    esp,0x10
c0011e88:	83 c3 03             	add    ebx,0x3
c0011e8b:	83 fb 15             	cmp    ebx,0x15
c0011e8e:	75 b6                	jne    c0011e46 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011e90:	83 c4 6c             	add    esp,0x6c
c0011e93:	5b                   	pop    ebx
c0011e94:	5e                   	pop    esi
c0011e95:	5f                   	pop    edi
c0011e96:	5d                   	pop    ebp
c0011e97:	c3                   	ret    

c0011e98 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011e98:	83 ec 40             	sub    esp,0x40
c0011e9b:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e9f:	50                   	push   eax
c0011ea0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ea4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ea8:	e8 38 ff ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	83 c8 ff             	or     eax,0xffffffff
c0011eb3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011eb8:	75 19                	jne    c0011ed3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011eba:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ebf:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ec4:	c1 e0 08             	shl    eax,0x8
c0011ec7:	09 c2                	or     edx,eax
c0011ec9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ece:	c1 e0 10             	shl    eax,0x10
c0011ed1:	09 d0                	or     eax,edx
c0011ed3:	83 c4 3c             	add    esp,0x3c
c0011ed6:	c3                   	ret    

c0011ed7 <CmGetNext(Reghive_Tag*, int)>:
c0011ed7:	83 ec 40             	sub    esp,0x40
c0011eda:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ede:	50                   	push   eax
c0011edf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ee3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ee7:	e8 f9 fe ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011eec:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ef1:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011ef6:	c1 e0 08             	shl    eax,0x8
c0011ef9:	09 c2                	or     edx,eax
c0011efb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f00:	83 c4 4c             	add    esp,0x4c
c0011f03:	c1 e0 10             	shl    eax,0x10
c0011f06:	09 d0                	or     eax,edx
c0011f08:	c3                   	ret    

c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f09:	53                   	push   ebx
c0011f0a:	83 ec 18             	sub    esp,0x18
c0011f0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f11:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f15:	74 29                	je     c0011f40 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f17:	50                   	push   eax
c0011f18:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f1d:	99                   	cdq    
c0011f1e:	52                   	push   edx
c0011f1f:	50                   	push   eax
c0011f20:	ff 33                	push   DWORD PTR [ebx]
c0011f22:	e8 ad 91 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011f27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f29:	5a                   	pop    edx
c0011f2a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f30:	51                   	push   ecx
c0011f31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f35:	6a 00                	push   0x0
c0011f37:	6a 2b                	push   0x2b
c0011f39:	50                   	push   eax
c0011f3a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f3d:	83 c4 20             	add    esp,0x20
c0011f40:	83 c4 18             	add    esp,0x18
c0011f43:	5b                   	pop    ebx
c0011f44:	c3                   	ret    

c0011f45 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f45:	53                   	push   ebx
c0011f46:	83 ec 3c             	sub    esp,0x3c
c0011f49:	6a 2b                	push   0x2b
c0011f4b:	6a 00                	push   0x0
c0011f4d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f51:	53                   	push   ebx
c0011f52:	e8 99 e5 fe ff       	call   c00004f0 <memset>
c0011f57:	83 c4 0c             	add    esp,0xc
c0011f5a:	53                   	push   ebx
c0011f5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f63:	e8 a1 ff ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f68:	83 c4 48             	add    esp,0x48
c0011f6b:	5b                   	pop    ebx
c0011f6c:	c3                   	ret    

c0011f6d <CmUpdateHeader(Reghive_Tag*)>:
c0011f6d:	83 ec 0c             	sub    esp,0xc
c0011f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f74:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f78:	74 10                	je     c0011f8a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f7a:	52                   	push   edx
c0011f7b:	8d 50 05             	lea    edx,[eax+0x5]
c0011f7e:	52                   	push   edx
c0011f7f:	6a 00                	push   0x0
c0011f81:	50                   	push   eax
c0011f82:	e8 82 ff ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	83 c4 0c             	add    esp,0xc
c0011f8d:	c3                   	ret    

c0011f8e <CmExpand(Reghive_Tag*, int)>:
c0011f8e:	55                   	push   ebp
c0011f8f:	57                   	push   edi
c0011f90:	83 cf ff             	or     edi,0xffffffff
c0011f93:	56                   	push   esi
c0011f94:	53                   	push   ebx
c0011f95:	83 ec 3c             	sub    esp,0x3c
c0011f98:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0011f9c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0011fa0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fa4:	74 59                	je     c0011fff <CmExpand(Reghive_Tag*, int)+0x71>
c0011fa6:	50                   	push   eax
c0011fa7:	31 d2                	xor    edx,edx
c0011fa9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fad:	31 ff                	xor    edi,edi
c0011faf:	52                   	push   edx
c0011fb0:	50                   	push   eax
c0011fb1:	ff 33                	push   DWORD PTR [ebx]
c0011fb3:	e8 1c 91 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0011fb8:	83 c4 0c             	add    esp,0xc
c0011fbb:	6a 2b                	push   0x2b
c0011fbd:	6a 00                	push   0x0
c0011fbf:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0011fc3:	55                   	push   ebp
c0011fc4:	e8 27 e5 fe ff       	call   c00004f0 <memset>
c0011fc9:	83 c4 10             	add    esp,0x10
c0011fcc:	39 f7                	cmp    edi,esi
c0011fce:	7d 1b                	jge    c0011feb <CmExpand(Reghive_Tag*, int)+0x5d>
c0011fd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	47                   	inc    edi
c0011fd6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011fda:	8b 10                	mov    edx,DWORD PTR [eax]
c0011fdc:	51                   	push   ecx
c0011fdd:	55                   	push   ebp
c0011fde:	6a 00                	push   0x0
c0011fe0:	6a 2b                	push   0x2b
c0011fe2:	50                   	push   eax
c0011fe3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011fe6:	83 c4 20             	add    esp,0x20
c0011fe9:	eb e1                	jmp    c0011fcc <CmExpand(Reghive_Tag*, int)+0x3e>
c0011feb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	01 fe                	add    esi,edi
c0011ff3:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0011ff6:	53                   	push   ebx
c0011ff7:	e8 71 ff ff ff       	call   c0011f6d <CmUpdateHeader(Reghive_Tag*)>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	83 c4 3c             	add    esp,0x3c
c0012002:	89 f8                	mov    eax,edi
c0012004:	5b                   	pop    ebx
c0012005:	5e                   	pop    esi
c0012006:	5f                   	pop    edi
c0012007:	5d                   	pop    ebp
c0012008:	c3                   	ret    

c0012009 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012009:	55                   	push   ebp
c001200a:	57                   	push   edi
c001200b:	56                   	push   esi
c001200c:	53                   	push   ebx
c001200d:	83 cb ff             	or     ebx,0xffffffff
c0012010:	83 ec 1c             	sub    esp,0x1c
c0012013:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012017:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001201b:	74 68                	je     c0012085 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001201d:	51                   	push   ecx
c001201e:	be 2b 00 00 00       	mov    esi,0x2b
c0012023:	6a 00                	push   0x0
c0012025:	31 ff                	xor    edi,edi
c0012027:	6a 00                	push   0x0
c0012029:	31 db                	xor    ebx,ebx
c001202b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001202e:	e8 a1 90 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0012033:	83 c4 10             	add    esp,0x10
c0012036:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012039:	76 3b                	jbe    c0012076 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001203b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012045:	8b 10                	mov    edx,DWORD PTR [eax]
c0012047:	51                   	push   ecx
c0012048:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001204c:	51                   	push   ecx
c001204d:	6a 00                	push   0x0
c001204f:	6a 01                	push   0x1
c0012051:	50                   	push   eax
c0012052:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012055:	83 c4 20             	add    esp,0x20
c0012058:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001205d:	74 26                	je     c0012085 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001205f:	52                   	push   edx
c0012060:	43                   	inc    ebx
c0012061:	57                   	push   edi
c0012062:	56                   	push   esi
c0012063:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012066:	e8 69 90 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c001206b:	83 c6 2b             	add    esi,0x2b
c001206e:	83 d7 00             	adc    edi,0x0
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	eb c0                	jmp    c0012036 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012076:	50                   	push   eax
c0012077:	50                   	push   eax
c0012078:	6a 40                	push   0x40
c001207a:	55                   	push   ebp
c001207b:	e8 0e ff ff ff       	call   c0011f8e <CmExpand(Reghive_Tag*, int)>
c0012080:	83 c4 10             	add    esp,0x10
c0012083:	89 c3                	mov    ebx,eax
c0012085:	83 c4 1c             	add    esp,0x1c
c0012088:	89 d8                	mov    eax,ebx
c001208a:	5b                   	pop    ebx
c001208b:	5e                   	pop    esi
c001208c:	5f                   	pop    edi
c001208d:	5d                   	pop    ebp
c001208e:	c3                   	ret    

c001208f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001208f:	55                   	push   ebp
c0012090:	57                   	push   edi
c0012091:	56                   	push   esi
c0012092:	53                   	push   ebx
c0012093:	81 ec 88 00 00 00    	sub    esp,0x88
c0012099:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120a7:	e8 5d ff ff ff       	call   c0012009 <CmFindUnusedExtent(Reghive_Tag*)>
c00120ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120b0:	83 c4 0c             	add    esp,0xc
c00120b3:	6a 2b                	push   0x2b
c00120b5:	6a 00                	push   0x0
c00120b7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120bb:	55                   	push   ebp
c00120bc:	e8 2f e4 fe ff       	call   c00004f0 <memset>
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	85 db                	test   ebx,ebx
c00120c6:	74 12                	je     c00120da <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120c8:	51                   	push   ecx
c00120c9:	55                   	push   ebp
c00120ca:	53                   	push   ebx
c00120cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120d2:	e8 0e fd ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00120de:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00120e5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00120ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00120ec:	85 db                	test   ebx,ebx
c00120ee:	74 4c                	je     c001213c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c00120f0:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00120f5:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00120fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120fe:	c1 e0 08             	shl    eax,0x8
c0012101:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012107:	09 c8                	or     eax,ecx
c0012109:	0f b6 ca             	movzx  ecx,dl
c001210c:	74 11                	je     c001211f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c001210e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012112:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012116:	c1 e8 10             	shr    eax,0x10
c0012119:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001211d:	eb 0f                	jmp    c001212e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c001211f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012124:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012129:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001212e:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c0012132:	c1 ea 08             	shr    edx,0x8
c0012135:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001213a:	eb 0f                	jmp    c001214b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c001213c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012141:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012146:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001214b:	52                   	push   edx
c001214c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012150:	50                   	push   eax
c0012151:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012155:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001215c:	e8 a8 fd ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	85 db                	test   ebx,ebx
c0012166:	74 12                	je     c001217a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012168:	50                   	push   eax
c0012169:	55                   	push   ebp
c001216a:	53                   	push   ebx
c001216b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012172:	e8 92 fd ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001217e:	83 c4 7c             	add    esp,0x7c
c0012181:	5b                   	pop    ebx
c0012182:	5e                   	pop    esi
c0012183:	5f                   	pop    edi
c0012184:	5d                   	pop    ebp
c0012185:	c3                   	ret    

c0012186 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012186:	55                   	push   ebp
c0012187:	57                   	push   edi
c0012188:	56                   	push   esi
c0012189:	53                   	push   ebx
c001218a:	bb 27 00 00 00       	mov    ebx,0x27
c001218f:	81 ec 88 00 00 00    	sub    esp,0x88
c0012195:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001219c:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121a3:	e8 e8 e3 fe ff       	call   c0000590 <strlen>
c00121a8:	8d 48 26             	lea    ecx,[eax+0x26]
c00121ab:	89 c8                	mov    eax,ecx
c00121ad:	99                   	cdq    
c00121ae:	f7 fb                	idiv   ebx
c00121b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121b4:	83 c4 10             	add    esp,0x10
c00121b7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121bd:	7e 10                	jle    c00121cf <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121bf:	83 ec 0c             	sub    esp,0xc
c00121c2:	68 3c 0a 02 c0       	push   0xc0020a3c
c00121c7:	e8 59 e5 ff ff       	call   c0010725 <KePanic(char const*)>
c00121cc:	83 c4 10             	add    esp,0x10
c00121cf:	50                   	push   eax
c00121d0:	31 ff                	xor    edi,edi
c00121d2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121d6:	53                   	push   ebx
c00121d7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121de:	56                   	push   esi
c00121df:	e8 01 fc ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121e4:	83 c4 10             	add    esp,0x10
c00121e7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00121eb:	89 d0                	mov    eax,edx
c00121ed:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00121f1:	c1 e0 08             	shl    eax,0x8
c00121f4:	09 c2                	or     edx,eax
c00121f6:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00121fa:	c1 e2 08             	shl    edx,0x8
c00121fd:	09 c2                	or     edx,eax
c00121ff:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012203:	7e 76                	jle    c001227b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012205:	85 d2                	test   edx,edx
c0012207:	75 25                	jne    c001222e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012209:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001220e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012212:	50                   	push   eax
c0012213:	6a 00                	push   0x0
c0012215:	6a 00                	push   0x0
c0012217:	56                   	push   esi
c0012218:	e8 72 fe ff ff       	call   c001208f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012223:	89 c2                	mov    edx,eax
c0012225:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012228:	c1 f8 10             	sar    eax,0x10
c001222b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001222e:	55                   	push   ebp
c001222f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012233:	55                   	push   ebp
c0012234:	52                   	push   edx
c0012235:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012239:	56                   	push   esi
c001223a:	e8 a6 fb ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001223f:	83 c4 0c             	add    esp,0xc
c0012242:	6a 27                	push   0x27
c0012244:	6a 00                	push   0x0
c0012246:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001224a:	51                   	push   ecx
c001224b:	e8 a0 e2 fe ff       	call   c00004f0 <memset>
c0012250:	6b c7 27             	imul   eax,edi,0x27
c0012253:	83 c4 0c             	add    esp,0xc
c0012256:	6a 27                	push   0x27
c0012258:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001225f:	50                   	push   eax
c0012260:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012264:	51                   	push   ecx
c0012265:	e8 56 e4 fe ff       	call   c00006c0 <strncpy>
c001226a:	83 c4 0c             	add    esp,0xc
c001226d:	55                   	push   ebp
c001226e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012272:	52                   	push   edx
c0012273:	56                   	push   esi
c0012274:	e8 90 fc ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012279:	eb 19                	jmp    c0012294 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001227b:	85 d2                	test   edx,edx
c001227d:	74 18                	je     c0012297 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001227f:	51                   	push   ecx
c0012280:	51                   	push   ecx
c0012281:	52                   	push   edx
c0012282:	56                   	push   esi
c0012283:	e8 bd fc ff ff       	call   c0011f45 <CmFreeExtent(Reghive_Tag*, int)>
c0012288:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001228c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012290:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012294:	83 c4 10             	add    esp,0x10
c0012297:	47                   	inc    edi
c0012298:	83 c3 03             	add    ebx,0x3
c001229b:	83 ff 07             	cmp    edi,0x7
c001229e:	0f 85 43 ff ff ff    	jne    c00121e7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122a4:	50                   	push   eax
c00122a5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122a9:	50                   	push   eax
c00122aa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122b1:	56                   	push   esi
c00122b2:	e8 52 fc ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122b7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122bd:	5b                   	pop    ebx
c00122be:	5e                   	pop    esi
c00122bf:	5f                   	pop    edi
c00122c0:	5d                   	pop    ebp
c00122c1:	c3                   	ret    

c00122c2 <CmGetMatch(char*, char*, bool, bool*)>:
c00122c2:	56                   	push   esi
c00122c3:	53                   	push   ebx
c00122c4:	50                   	push   eax
c00122c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122ca:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122ce:	74 25                	je     c00122f5 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122d0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122d3:	31 db                	xor    ebx,ebx
c00122d5:	50                   	push   eax
c00122d6:	50                   	push   eax
c00122d7:	8d 04 9d 80 1e 02 c0 	lea    eax,[ebx*4-0x3ffde180]
c00122de:	50                   	push   eax
c00122df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122e3:	e8 c8 e4 fe ff       	call   c00007b0 <strcmp>
c00122e8:	83 c4 10             	add    esp,0x10
c00122eb:	85 c0                	test   eax,eax
c00122ed:	74 2e                	je     c001231d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00122ef:	43                   	inc    ebx
c00122f0:	83 fb 3f             	cmp    ebx,0x3f
c00122f3:	75 e0                	jne    c00122d5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00122f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122f8:	31 db                	xor    ebx,ebx
c00122fa:	51                   	push   ecx
c00122fb:	51                   	push   ecx
c00122fc:	8d 04 9d 80 1e 02 c0 	lea    eax,[ebx*4-0x3ffde180]
c0012303:	50                   	push   eax
c0012304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012308:	e8 a3 e4 fe ff       	call   c00007b0 <strcmp>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	85 c0                	test   eax,eax
c0012312:	74 09                	je     c001231d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012314:	43                   	inc    ebx
c0012315:	83 fb 3f             	cmp    ebx,0x3f
c0012318:	75 e0                	jne    c00122fa <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001231a:	83 cb ff             	or     ebx,0xffffffff
c001231d:	5a                   	pop    edx
c001231e:	89 d8                	mov    eax,ebx
c0012320:	5b                   	pop    ebx
c0012321:	5e                   	pop    esi
c0012322:	c3                   	ret    

c0012323 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012323:	55                   	push   ebp
c0012324:	31 c0                	xor    eax,eax
c0012326:	57                   	push   edi
c0012327:	56                   	push   esi
c0012328:	53                   	push   ebx
c0012329:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001232d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012331:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012335:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c001233a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001233c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001233f:	83 fd 1f             	cmp    ebp,0x1f
c0012342:	7f 08                	jg     c001234c <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c0012344:	d3 e2                	shl    edx,cl
c0012346:	b0 01                	mov    al,0x1
c0012348:	09 17                	or     DWORD PTR [edi],edx
c001234a:	01 33                	add    DWORD PTR [ebx],esi
c001234c:	5b                   	pop    ebx
c001234d:	5e                   	pop    esi
c001234e:	5f                   	pop    edi
c001234f:	5d                   	pop    ebp
c0012350:	c3                   	ret    

c0012351 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012351:	57                   	push   edi
c0012352:	56                   	push   esi
c0012353:	53                   	push   ebx
c0012354:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012358:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001235c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012360:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012364:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012366:	7c 18                	jl     c0012380 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012368:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001236a:	b8 01 00 00 00       	mov    eax,0x1
c001236f:	d3 e0                	shl    eax,cl
c0012371:	fe c8                	dec    al
c0012373:	22 03                	and    al,BYTE PTR [ebx]
c0012375:	d3 ef                	shr    edi,cl
c0012377:	89 3b                	mov    DWORD PTR [ebx],edi
c0012379:	29 0a                	sub    DWORD PTR [edx],ecx
c001237b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001237e:	eb 05                	jmp    c0012385 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012380:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012383:	31 c0                	xor    eax,eax
c0012385:	5b                   	pop    ebx
c0012386:	5e                   	pop    esi
c0012387:	5f                   	pop    edi
c0012388:	c3                   	ret    

c0012389 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012389:	83 ec 40             	sub    esp,0x40
c001238c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012390:	50                   	push   eax
c0012391:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012395:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012399:	e8 47 fa ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001239e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123a2:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123a6:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123aa:	89 10                	mov    DWORD PTR [eax],edx
c00123ac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123af:	83 c4 4c             	add    esp,0x4c
c00123b2:	c3                   	ret    

c00123b3 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123b3:	55                   	push   ebp
c00123b4:	57                   	push   edi
c00123b5:	56                   	push   esi
c00123b6:	53                   	push   ebx
c00123b7:	83 ec 40             	sub    esp,0x40
c00123ba:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123be:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123c2:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123c6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123ca:	53                   	push   ebx
c00123cb:	56                   	push   esi
c00123cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123d0:	e8 10 fa ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123d5:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123d9:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123dd:	83 c4 0c             	add    esp,0xc
c00123e0:	53                   	push   ebx
c00123e1:	56                   	push   esi
c00123e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123e6:	e8 1e fb ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123eb:	83 c4 4c             	add    esp,0x4c
c00123ee:	5b                   	pop    ebx
c00123ef:	5e                   	pop    esi
c00123f0:	5f                   	pop    edi
c00123f1:	5d                   	pop    ebp
c00123f2:	c3                   	ret    

c00123f3 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00123f3:	55                   	push   ebp
c00123f4:	57                   	push   edi
c00123f5:	56                   	push   esi
c00123f6:	31 f6                	xor    esi,esi
c00123f8:	53                   	push   ebx
c00123f9:	31 db                	xor    ebx,ebx
c00123fb:	83 ec 40             	sub    esp,0x40
c00123fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012406:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001240e:	6a 12                	push   0x12
c0012410:	68 ee 00 00 00       	push   0xee
c0012415:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012419:	e8 d2 e0 fe ff       	call   c00004f0 <memset>
c001241e:	83 c4 10             	add    esp,0x10
c0012421:	6a 08                	push   0x8
c0012423:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012427:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c001242b:	50                   	push   eax
c001242c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012430:	57                   	push   edi
c0012431:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012435:	55                   	push   ebp
c0012436:	e8 e8 fe ff ff       	call   c0012323 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001243b:	83 c4 10             	add    esp,0x10
c001243e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012442:	50                   	push   eax
c0012443:	6a 06                	push   0x6
c0012445:	57                   	push   edi
c0012446:	55                   	push   ebp
c0012447:	e8 05 ff ff ff       	call   c0012351 <CmGetShift(unsigned int*, int*, int, bool*)>
c001244c:	83 c4 10             	add    esp,0x10
c001244f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012454:	74 07                	je     c001245d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012456:	46                   	inc    esi
c0012457:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001245b:	eb e1                	jmp    c001243e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001245d:	43                   	inc    ebx
c001245e:	83 fb 12             	cmp    ebx,0x12
c0012461:	75 be                	jne    c0012421 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012463:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012467:	31 f6                	xor    esi,esi
c0012469:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001246c:	50                   	push   eax
c001246d:	50                   	push   eax
c001246e:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012473:	46                   	inc    esi
c0012474:	8d 04 85 80 1e 02 c0 	lea    eax,[eax*4-0x3ffde180]
c001247b:	50                   	push   eax
c001247c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012480:	e8 1b e4 fe ff       	call   c00008a0 <strcat>
c0012485:	83 c4 10             	add    esp,0x10
c0012488:	83 fe 18             	cmp    esi,0x18
c001248b:	75 df                	jne    c001246c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001248d:	83 c4 3c             	add    esp,0x3c
c0012490:	31 c0                	xor    eax,eax
c0012492:	5b                   	pop    ebx
c0012493:	5e                   	pop    esi
c0012494:	5f                   	pop    edi
c0012495:	5d                   	pop    ebp
c0012496:	c3                   	ret    

c0012497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012497:	83 ec 40             	sub    esp,0x40
c001249a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001249e:	50                   	push   eax
c001249f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124a7:	e8 39 f9 ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ac:	58                   	pop    eax
c00124ad:	5a                   	pop    edx
c00124ae:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124b2:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124b6:	50                   	push   eax
c00124b7:	e8 37 ff ff ff       	call   c00123f3 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124bc:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124c1:	83 c4 4c             	add    esp,0x4c
c00124c4:	c3                   	ret    

c00124c5 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124c5:	55                   	push   ebp
c00124c6:	57                   	push   edi
c00124c7:	56                   	push   esi
c00124c8:	53                   	push   ebx
c00124c9:	31 db                	xor    ebx,ebx
c00124cb:	83 ec 70             	sub    esp,0x70
c00124ce:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124d5:	6a 30                	push   0x30
c00124d7:	6a 00                	push   0x0
c00124d9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124dd:	56                   	push   esi
c00124de:	e8 0d e0 fe ff       	call   c00004f0 <memset>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	83 ec 0c             	sub    esp,0xc
c00124e9:	57                   	push   edi
c00124ea:	e8 a1 e0 fe ff       	call   c0000590 <strlen>
c00124ef:	83 c4 10             	add    esp,0x10
c00124f2:	39 d8                	cmp    eax,ebx
c00124f4:	76 16                	jbe    c001250c <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00124f6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00124fa:	83 ec 0c             	sub    esp,0xc
c00124fd:	50                   	push   eax
c00124fe:	e8 8d e4 fe ff       	call   c0000990 <toupper>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012509:	43                   	inc    ebx
c001250a:	eb da                	jmp    c00124e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001250c:	52                   	push   edx
c001250d:	31 db                	xor    ebx,ebx
c001250f:	6a 18                	push   0x18
c0012511:	31 ff                	xor    edi,edi
c0012513:	6a 3f                	push   0x3f
c0012515:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012519:	50                   	push   eax
c001251a:	e8 d1 df fe ff       	call   c00004f0 <memset>
c001251f:	83 c4 10             	add    esp,0x10
c0012522:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012526:	8d 74 24 10          	lea    esi,[esp+0x10]
c001252a:	84 c0                	test   al,al
c001252c:	0f 84 af 00 00 00    	je     c00125e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012532:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012536:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012541:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012545:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012549:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001254e:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012552:	56                   	push   esi
c0012553:	e8 38 e0 fe ff       	call   c0000590 <strlen>
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	85 c0                	test   eax,eax
c001255d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012561:	74 0b                	je     c001256e <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012563:	50                   	push   eax
c0012564:	6a 01                	push   0x1
c0012566:	56                   	push   esi
c0012567:	8d 44 24 20          	lea    eax,[esp+0x20]
c001256b:	50                   	push   eax
c001256c:	eb 0a                	jmp    c0012578 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001256e:	50                   	push   eax
c001256f:	6a 00                	push   0x0
c0012571:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012575:	50                   	push   eax
c0012576:	6a 00                	push   0x0
c0012578:	e8 45 fd ff ff       	call   c00122c2 <CmGetMatch(char*, char*, bool, bool*)>
c001257d:	83 c4 10             	add    esp,0x10
c0012580:	83 f8 ff             	cmp    eax,0xffffffff
c0012583:	75 1a                	jne    c001259f <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	68 51 0a 02 c0       	push   0xc0020a51
c001258d:	e8 93 e1 ff ff       	call   c0010725 <KePanic(char const*)>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	b8 02 00 00 00       	mov    eax,0x2
c001259a:	e9 bb 00 00 00       	jmp    c001265a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c001259f:	83 ff 18             	cmp    edi,0x18
c00125a2:	75 1a                	jne    c00125be <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125a4:	83 ec 0c             	sub    esp,0xc
c00125a7:	68 66 0a 02 c0       	push   0xc0020a66
c00125ac:	e8 74 e1 ff ff       	call   c0010725 <KePanic(char const*)>
c00125b1:	83 c4 10             	add    esp,0x10
c00125b4:	b8 01 00 00 00       	mov    eax,0x1
c00125b9:	e9 9c 00 00 00       	jmp    c001265a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00125be:	47                   	inc    edi
c00125bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125c4:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125c8:	0f 45 dd             	cmovne ebx,ebp
c00125cb:	83 ec 0c             	sub    esp,0xc
c00125ce:	56                   	push   esi
c00125cf:	e8 bc df fe ff       	call   c0000590 <strlen>
c00125d4:	83 c4 10             	add    esp,0x10
c00125d7:	85 c0                	test   eax,eax
c00125d9:	74 06                	je     c00125e1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00125db:	43                   	inc    ebx
c00125dc:	e9 41 ff ff ff       	jmp    c0012522 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00125e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125e9:	31 db                	xor    ebx,ebx
c00125eb:	31 ff                	xor    edi,edi
c00125ed:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125f5:	50                   	push   eax
c00125f6:	6a 12                	push   0x12
c00125f8:	68 ee 00 00 00       	push   0xee
c00125fd:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012604:	e8 e7 de fe ff       	call   c00004f0 <memset>
c0012609:	83 c4 10             	add    esp,0x10
c001260c:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012610:	83 fb 17             	cmp    ebx,0x17
c0012613:	7e 26                	jle    c001263b <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012615:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012619:	50                   	push   eax
c001261a:	6a 08                	push   0x8
c001261c:	55                   	push   ebp
c001261d:	56                   	push   esi
c001261e:	e8 2e fd ff ff       	call   c0012351 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001262b:	74 26                	je     c0012653 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001262d:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012634:	4b                   	dec    ebx
c0012635:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012638:	47                   	inc    edi
c0012639:	eb 1c                	jmp    c0012657 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001263b:	6a 06                	push   0x6
c001263d:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0012642:	50                   	push   eax
c0012643:	55                   	push   ebp
c0012644:	56                   	push   esi
c0012645:	e8 d9 fc ff ff       	call   c0012323 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	84 c0                	test   al,al
c001264f:	75 06                	jne    c0012657 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012651:	eb c2                	jmp    c0012615 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012653:	31 c0                	xor    eax,eax
c0012655:	eb 03                	jmp    c001265a <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012657:	43                   	inc    ebx
c0012658:	eb b2                	jmp    c001260c <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c001265a:	83 c4 6c             	add    esp,0x6c
c001265d:	5b                   	pop    ebx
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	5d                   	pop    ebp
c0012661:	c3                   	ret    

c0012662 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012662:	53                   	push   ebx
c0012663:	83 ec 3c             	sub    esp,0x3c
c0012666:	6a 2b                	push   0x2b
c0012668:	6a 00                	push   0x0
c001266a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001266e:	53                   	push   ebx
c001266f:	e8 7c de fe ff       	call   c00004f0 <memset>
c0012674:	58                   	pop    eax
c0012675:	5a                   	pop    edx
c0012676:	8d 44 24 11          	lea    eax,[esp+0x11]
c001267a:	50                   	push   eax
c001267b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001267f:	e8 41 fe ff ff       	call   c00124c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012684:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012689:	83 c4 0c             	add    esp,0xc
c001268c:	6a 15                	push   0x15
c001268e:	6a 00                	push   0x0
c0012690:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012694:	50                   	push   eax
c0012695:	e8 56 de fe ff       	call   c00004f0 <memset>
c001269a:	53                   	push   ebx
c001269b:	6a 00                	push   0x0
c001269d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126a1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126a5:	e8 e5 f9 ff ff       	call   c001208f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126aa:	83 c4 58             	add    esp,0x58
c00126ad:	5b                   	pop    ebx
c00126ae:	c3                   	ret    

c00126af <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126af:	56                   	push   esi
c00126b0:	53                   	push   ebx
c00126b1:	83 ec 48             	sub    esp,0x48
c00126b4:	6a 12                	push   0x12
c00126b6:	68 ff 00 00 00       	push   0xff
c00126bb:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126bf:	56                   	push   esi
c00126c0:	e8 2b de fe ff       	call   c00004f0 <memset>
c00126c5:	5a                   	pop    edx
c00126c6:	59                   	pop    ecx
c00126c7:	56                   	push   esi
c00126c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126cc:	e8 f4 fd ff ff       	call   c00124c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126d1:	83 c4 10             	add    esp,0x10
c00126d4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126d8:	85 db                	test   ebx,ebx
c00126da:	74 42                	je     c001271e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126dc:	50                   	push   eax
c00126dd:	8d 44 24 19          	lea    eax,[esp+0x19]
c00126e1:	50                   	push   eax
c00126e2:	53                   	push   ebx
c00126e3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126e7:	e8 f9 f6 ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00126ec:	83 c4 0c             	add    esp,0xc
c00126ef:	6a 12                	push   0x12
c00126f1:	8d 44 24 21          	lea    eax,[esp+0x21]
c00126f5:	50                   	push   eax
c00126f6:	56                   	push   esi
c00126f7:	e8 84 dc fe ff       	call   c0000380 <memcmp>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	85 c0                	test   eax,eax
c0012701:	74 1e                	je     c0012721 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012703:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012708:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001270d:	c1 e3 08             	shl    ebx,0x8
c0012710:	09 d8                	or     eax,ebx
c0012712:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012717:	c1 e3 10             	shl    ebx,0x10
c001271a:	09 c3                	or     ebx,eax
c001271c:	eb ba                	jmp    c00126d8 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001271e:	83 cb ff             	or     ebx,0xffffffff
c0012721:	83 c4 44             	add    esp,0x44
c0012724:	89 d8                	mov    eax,ebx
c0012726:	5b                   	pop    ebx
c0012727:	5e                   	pop    esi
c0012728:	c3                   	ret    

c0012729 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	83 ec 34             	sub    esp,0x34
c001272f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012733:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012737:	6a 2b                	push   0x2b
c0012739:	6a 00                	push   0x0
c001273b:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001273f:	53                   	push   ebx
c0012740:	e8 ab dd fe ff       	call   c00004f0 <memset>
c0012745:	58                   	pop    eax
c0012746:	5a                   	pop    edx
c0012747:	8d 44 24 11          	lea    eax,[esp+0x11]
c001274b:	50                   	push   eax
c001274c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012750:	e8 70 fd ff ff       	call   c00124c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012755:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012759:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001275d:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012761:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012765:	53                   	push   ebx
c0012766:	6a 00                	push   0x0
c0012768:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001276c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012770:	e8 1a f9 ff ff       	call   c001208f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012775:	83 c4 50             	add    esp,0x50
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	c3                   	ret    

c001277c <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001277c:	55                   	push   ebp
c001277d:	57                   	push   edi
c001277e:	56                   	push   esi
c001277f:	53                   	push   ebx
c0012780:	83 ec 40             	sub    esp,0x40
c0012783:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012787:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001278b:	6a 2b                	push   0x2b
c001278d:	6a 00                	push   0x0
c001278f:	8d 74 24 11          	lea    esi,[esp+0x11]
c0012793:	56                   	push   esi
c0012794:	e8 57 dd fe ff       	call   c00004f0 <memset>
c0012799:	5f                   	pop    edi
c001279a:	89 ef                	mov    edi,ebp
c001279c:	58                   	pop    eax
c001279d:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127a1:	50                   	push   eax
c00127a2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127a6:	e8 1a fd ff ff       	call   c00124c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127ab:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127b0:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127b5:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127ba:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	85 ed                	test   ebp,ebp
c00127c4:	74 14                	je     c00127da <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127c6:	51                   	push   ecx
c00127c7:	51                   	push   ecx
c00127c8:	57                   	push   edi
c00127c9:	53                   	push   ebx
c00127ca:	e8 08 f7 ff ff       	call   c0011ed7 <CmGetNext(Reghive_Tag*, int)>
c00127cf:	83 c4 10             	add    esp,0x10
c00127d2:	85 c0                	test   eax,eax
c00127d4:	74 04                	je     c00127da <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127d6:	89 c7                	mov    edi,eax
c00127d8:	eb e8                	jmp    c00127c2 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127da:	56                   	push   esi
c00127db:	6a 00                	push   0x0
c00127dd:	57                   	push   edi
c00127de:	53                   	push   ebx
c00127df:	e8 ab f8 ff ff       	call   c001208f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127e4:	83 c4 0c             	add    esp,0xc
c00127e7:	56                   	push   esi
c00127e8:	50                   	push   eax
c00127e9:	89 c7                	mov    edi,eax
c00127eb:	53                   	push   ebx
c00127ec:	e8 f4 f5 ff ff       	call   c0011de5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127f1:	58                   	pop    eax
c00127f2:	5a                   	pop    edx
c00127f3:	6a 6c                	push   0x6c
c00127f5:	6a 00                	push   0x0
c00127f7:	6a 00                	push   0x0
c00127f9:	68 77 0a 02 c0       	push   0xc0020a77
c00127fe:	57                   	push   edi
c00127ff:	53                   	push   ebx
c0012800:	e8 24 ff ff ff       	call   c0012729 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012805:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012809:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001280d:	c1 e8 10             	shr    eax,0x10
c0012810:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012814:	83 c4 1c             	add    esp,0x1c
c0012817:	56                   	push   esi
c0012818:	57                   	push   edi
c0012819:	53                   	push   ebx
c001281a:	e8 ea f6 ff ff       	call   c0011f09 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001281f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012824:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012829:	c1 e0 08             	shl    eax,0x8
c001282c:	09 c2                	or     edx,eax
c001282e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012833:	83 c4 4c             	add    esp,0x4c
c0012836:	5b                   	pop    ebx
c0012837:	5e                   	pop    esi
c0012838:	c1 e0 10             	shl    eax,0x10
c001283b:	09 d0                	or     eax,edx
c001283d:	5f                   	pop    edi
c001283e:	5d                   	pop    ebp
c001283f:	c3                   	ret    

c0012840 <zStrtok(char*, char const*)>:
c0012840:	57                   	push   edi
c0012841:	56                   	push   esi
c0012842:	53                   	push   ebx
c0012843:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284b:	85 f6                	test   esi,esi
c001284d:	74 2b                	je     c001287a <zStrtok(char*, char const*)+0x3a>
c001284f:	85 c0                	test   eax,eax
c0012851:	75 09                	jne    c001285c <zStrtok(char*, char const*)+0x1c>
c0012853:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012858:	85 c0                	test   eax,eax
c001285a:	74 49                	je     c00128a5 <zStrtok(char*, char const*)+0x65>
c001285c:	31 c9                	xor    ecx,ecx
c001285e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012862:	74 03                	je     c0012867 <zStrtok(char*, char const*)+0x27>
c0012864:	41                   	inc    ecx
c0012865:	eb f7                	jmp    c001285e <zStrtok(char*, char const*)+0x1e>
c0012867:	31 d2                	xor    edx,edx
c0012869:	39 ca                	cmp    edx,ecx
c001286b:	74 11                	je     c001287e <zStrtok(char*, char const*)+0x3e>
c001286d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001286f:	8d 3c 10             	lea    edi,[eax+edx*1]
c0012872:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012875:	74 13                	je     c001288a <zStrtok(char*, char const*)+0x4a>
c0012877:	42                   	inc    edx
c0012878:	eb ef                	jmp    c0012869 <zStrtok(char*, char const*)+0x29>
c001287a:	31 c0                	xor    eax,eax
c001287c:	eb 27                	jmp    c00128a5 <zStrtok(char*, char const*)+0x65>
c001287e:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012888:	eb 1b                	jmp    c00128a5 <zStrtok(char*, char const*)+0x65>
c001288a:	3a 18                	cmp    bl,BYTE PTR [eax]
c001288c:	75 0a                	jne    c0012898 <zStrtok(char*, char const*)+0x58>
c001288e:	40                   	inc    eax
c001288f:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c0012894:	89 f0                	mov    eax,esi
c0012896:	eb 0d                	jmp    c00128a5 <zStrtok(char*, char const*)+0x65>
c0012898:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001289b:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c001289f:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128a5:	5b                   	pop    ebx
c00128a6:	5e                   	pop    esi
c00128a7:	5f                   	pop    edi
c00128a8:	c3                   	ret    

c00128a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128a9:	57                   	push   edi
c00128aa:	56                   	push   esi
c00128ab:	53                   	push   ebx
c00128ac:	81 ec 08 01 00 00    	sub    esp,0x108
c00128b2:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128b9:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128c0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128c4:	53                   	push   ebx
c00128c5:	e8 c6 dd fe ff       	call   c0000690 <strcpy>
c00128ca:	59                   	pop    ecx
c00128cb:	5e                   	pop    esi
c00128cc:	68 db 0d 02 c0       	push   0xc0020ddb
c00128d1:	53                   	push   ebx
c00128d2:	bb 01 00 00 00       	mov    ebx,0x1
c00128d7:	e8 64 ff ff ff       	call   c0012840 <zStrtok(char*, char const*)>
c00128dc:	83 c4 10             	add    esp,0x10
c00128df:	85 c0                	test   eax,eax
c00128e1:	74 3b                	je     c001291e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00128e3:	52                   	push   edx
c00128e4:	50                   	push   eax
c00128e5:	6a 01                	push   0x1
c00128e7:	57                   	push   edi
c00128e8:	e8 c2 fd ff ff       	call   c00126af <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00128ed:	59                   	pop    ecx
c00128ee:	5e                   	pop    esi
c00128ef:	89 c3                	mov    ebx,eax
c00128f1:	68 db 0d 02 c0       	push   0xc0020ddb
c00128f6:	6a 00                	push   0x0
c00128f8:	e8 43 ff ff ff       	call   c0012840 <zStrtok(char*, char const*)>
c00128fd:	83 c4 10             	add    esp,0x10
c0012900:	85 c0                	test   eax,eax
c0012902:	89 c6                	mov    esi,eax
c0012904:	74 18                	je     c001291e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012906:	52                   	push   edx
c0012907:	52                   	push   edx
c0012908:	53                   	push   ebx
c0012909:	57                   	push   edi
c001290a:	e8 89 f5 ff ff       	call   c0011e98 <CmEnterDirectory(Reghive_Tag*, int)>
c001290f:	83 c4 10             	add    esp,0x10
c0012912:	83 f8 ff             	cmp    eax,0xffffffff
c0012915:	89 c3                	mov    ebx,eax
c0012917:	74 05                	je     c001291e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012919:	50                   	push   eax
c001291a:	56                   	push   esi
c001291b:	53                   	push   ebx
c001291c:	eb c9                	jmp    c00128e7 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001291e:	81 c4 00 01 00 00    	add    esp,0x100
c0012924:	89 d8                	mov    eax,ebx
c0012926:	5b                   	pop    ebx
c0012927:	5e                   	pop    esi
c0012928:	5f                   	pop    edi
c0012929:	c3                   	ret    

c001292a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001292a:	55                   	push   ebp
c001292b:	57                   	push   edi
c001292c:	56                   	push   esi
c001292d:	53                   	push   ebx
c001292e:	83 ec 5c             	sub    esp,0x5c
c0012931:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012935:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012939:	85 db                	test   ebx,ebx
c001293b:	0f 8e 84 00 00 00    	jle    c00129c5 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012941:	57                   	push   edi
c0012942:	31 ed                	xor    ebp,ebp
c0012944:	6a 32                	push   0x32
c0012946:	6a 00                	push   0x0
c0012948:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001294c:	57                   	push   edi
c001294d:	e8 9e db fe ff       	call   c00004f0 <memset>
c0012952:	83 c4 0c             	add    esp,0xc
c0012955:	57                   	push   edi
c0012956:	53                   	push   ebx
c0012957:	56                   	push   esi
c0012958:	e8 3a fb ff ff       	call   c0012497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001295d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012961:	83 c4 10             	add    esp,0x10
c0012964:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012968:	7d 13                	jge    c001297d <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c001296a:	83 ec 0c             	sub    esp,0xc
c001296d:	45                   	inc    ebp
c001296e:	68 48 11 02 c0       	push   0xc0021148
c0012973:	e8 5e 80 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0012978:	83 c4 10             	add    esp,0x10
c001297b:	eb e7                	jmp    c0012964 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c001297d:	51                   	push   ecx
c001297e:	57                   	push   edi
c001297f:	53                   	push   ebx
c0012980:	68 7d 0a 02 c0       	push   0xc0020a7d
c0012985:	e8 4c 80 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001298a:	83 c4 10             	add    esp,0x10
c001298d:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012992:	75 1e                	jne    c00129b2 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012994:	52                   	push   edx
c0012995:	52                   	push   edx
c0012996:	53                   	push   ebx
c0012997:	56                   	push   esi
c0012998:	e8 fb f4 ff ff       	call   c0011e98 <CmEnterDirectory(Reghive_Tag*, int)>
c001299d:	83 c4 0c             	add    esp,0xc
c00129a0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129a4:	8d 51 04             	lea    edx,[ecx+0x4]
c00129a7:	52                   	push   edx
c00129a8:	50                   	push   eax
c00129a9:	56                   	push   esi
c00129aa:	e8 7b ff ff ff       	call   c001292a <CmDisplayTree(Reghive_Tag*, int, int)>
c00129af:	83 c4 10             	add    esp,0x10
c00129b2:	50                   	push   eax
c00129b3:	50                   	push   eax
c00129b4:	53                   	push   ebx
c00129b5:	56                   	push   esi
c00129b6:	e8 1c f5 ff ff       	call   c0011ed7 <CmGetNext(Reghive_Tag*, int)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	89 c3                	mov    ebx,eax
c00129c0:	e9 74 ff ff ff       	jmp    c0012939 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129c5:	83 c4 5c             	add    esp,0x5c
c00129c8:	5b                   	pop    ebx
c00129c9:	5e                   	pop    esi
c00129ca:	5f                   	pop    edi
c00129cb:	5d                   	pop    ebp
c00129cc:	c3                   	ret    

c00129cd <CmSplitFinalSlashInPlace(char*)>:
c00129cd:	53                   	push   ebx
c00129ce:	83 ec 14             	sub    esp,0x14
c00129d1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00129d5:	53                   	push   ebx
c00129d6:	e8 b5 db fe ff       	call   c0000590 <strlen>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	48                   	dec    eax
c00129df:	85 c0                	test   eax,eax
c00129e1:	74 15                	je     c00129f8 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00129e3:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00129e7:	8d 14 03             	lea    edx,[ebx+eax*1]
c00129ea:	75 09                	jne    c00129f5 <CmSplitFinalSlashInPlace(char*)+0x28>
c00129ec:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00129ef:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00129f3:	eb 05                	jmp    c00129fa <CmSplitFinalSlashInPlace(char*)+0x2d>
c00129f5:	48                   	dec    eax
c00129f6:	eb e7                	jmp    c00129df <CmSplitFinalSlashInPlace(char*)+0x12>
c00129f8:	31 c0                	xor    eax,eax
c00129fa:	83 c4 08             	add    esp,0x8
c00129fd:	5b                   	pop    ebx
c00129fe:	c3                   	ret    

c00129ff <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00129ff:	55                   	push   ebp
c0012a00:	57                   	push   edi
c0012a01:	56                   	push   esi
c0012a02:	53                   	push   ebx
c0012a03:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a09:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012a10:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012a12:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012a15:	80 fb 40             	cmp    bl,0x40
c0012a18:	75 19                	jne    c0012a33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0012a1a:	8a 06                	mov    al,BYTE PTR [esi]
c0012a1c:	84 c0                	test   al,al
c0012a1e:	74 07                	je     c0012a27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012a20:	3c 3a                	cmp    al,0x3a
c0012a22:	74 03                	je     c0012a27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012a24:	46                   	inc    esi
c0012a25:	eb f3                	jmp    c0012a1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012a27:	84 c0                	test   al,al
c0012a29:	0f 84 2b 01 00 00    	je     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a2f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a32:	46                   	inc    esi
c0012a33:	50                   	push   eax
c0012a34:	6a 40                	push   0x40
c0012a36:	6a 00                	push   0x0
c0012a38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a3c:	50                   	push   eax
c0012a3d:	e8 ae da fe ff       	call   c00004f0 <memset>
c0012a42:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a49:	31 d2                	xor    edx,edx
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	8a 07                	mov    al,BYTE PTR [edi]
c0012a50:	84 c0                	test   al,al
c0012a52:	0f 84 02 01 00 00    	je     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a58:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0012a5e:	0f 8f f6 00 00 00    	jg     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012a64:	3c 0a                	cmp    al,0xa
c0012a66:	0f 85 df 00 00 00    	jne    c0012b4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0012a6c:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0012a71:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012a75:	a8 df                	test   al,0xdf
c0012a77:	0f 94 c1             	sete   cl
c0012a7a:	3c 23                	cmp    al,0x23
c0012a7c:	0f 94 c2             	sete   dl
c0012a7f:	08 d1                	or     cl,dl
c0012a81:	75 50                	jne    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a83:	88 c2                	mov    dl,al
c0012a85:	80 ea 09             	sub    dl,0x9
c0012a88:	80 fa 01             	cmp    dl,0x1
c0012a8b:	76 46                	jbe    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a8d:	3c 5b                	cmp    al,0x5b
c0012a8f:	75 46                	jne    c0012ad7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c0012a91:	80 fb 40             	cmp    bl,0x40
c0012a94:	75 3d                	jne    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012a96:	83 ec 0c             	sub    esp,0xc
c0012a99:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012a9d:	52                   	push   edx
c0012a9e:	e8 ed da fe ff       	call   c0000590 <strlen>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	83 f8 3f             	cmp    eax,0x3f
c0012aa9:	0f 87 ab 00 00 00    	ja     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012aaf:	50                   	push   eax
c0012ab0:	50                   	push   eax
c0012ab1:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012ab5:	52                   	push   edx
c0012ab6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012aba:	52                   	push   edx
c0012abb:	e8 d0 db fe ff       	call   c0000690 <strcpy>
c0012ac0:	58                   	pop    eax
c0012ac1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012ac5:	52                   	push   edx
c0012ac6:	e8 c5 da fe ff       	call   c0000590 <strlen>
c0012acb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	31 c9                	xor    ecx,ecx
c0012ad5:	eb 7b                	jmp    c0012b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0012ad7:	80 fb 40             	cmp    bl,0x40
c0012ada:	74 06                	je     c0012ae2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c0012adc:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012ae0:	eb 16                	jmp    c0012af8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012ae2:	51                   	push   ecx
c0012ae3:	51                   	push   ecx
c0012ae4:	55                   	push   ebp
c0012ae5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ae9:	50                   	push   eax
c0012aea:	e8 c1 dc fe ff       	call   c00007b0 <strcmp>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	85 c0                	test   eax,eax
c0012af4:	75 dd                	jne    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012af6:	eb e4                	jmp    c0012adc <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0012af8:	8a 02                	mov    al,BYTE PTR [edx]
c0012afa:	84 c0                	test   al,al
c0012afc:	0f 94 c1             	sete   cl
c0012aff:	3c 3d                	cmp    al,0x3d
c0012b01:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0012b06:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0012b0a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012b0e:	75 03                	jne    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c0012b10:	42                   	inc    edx
c0012b11:	eb e5                	jmp    c0012af8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012b13:	84 c0                	test   al,al
c0012b15:	74 43                	je     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b1b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b1e:	52                   	push   edx
c0012b1f:	52                   	push   edx
c0012b20:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b24:	50                   	push   eax
c0012b25:	56                   	push   esi
c0012b26:	e8 85 dc fe ff       	call   c00007b0 <strcmp>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b32:	85 c0                	test   eax,eax
c0012b34:	75 9d                	jne    c0012ad3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b36:	50                   	push   eax
c0012b37:	42                   	inc    edx
c0012b38:	50                   	push   eax
c0012b39:	52                   	push   edx
c0012b3a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b41:	e8 4a db fe ff       	call   c0000690 <strcpy>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	eb 14                	jmp    c0012b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0012b4b:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0012b4f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012b52:	47                   	inc    edi
c0012b53:	89 ca                	mov    edx,ecx
c0012b55:	e9 f4 fe ff ff       	jmp    c0012a4e <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0012b5a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012b5f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012b63:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b69:	5b                   	pop    ebx
c0012b6a:	5e                   	pop    esi
c0012b6b:	5f                   	pop    edi
c0012b6c:	5d                   	pop    ebp
c0012b6d:	c3                   	ret    

c0012b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b6e:	57                   	push   edi
c0012b6f:	56                   	push   esi
c0012b70:	53                   	push   ebx
c0012b71:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b77:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012b7e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012b85:	53                   	push   ebx
c0012b86:	e8 05 da fe ff       	call   c0000590 <strlen>
c0012b8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b8e:	89 c7                	mov    edi,eax
c0012b90:	e8 fb d9 fe ff       	call   c0000590 <strlen>
c0012b95:	83 c4 10             	add    esp,0x10
c0012b98:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012b9c:	3d ff 00 00 00       	cmp    eax,0xff
c0012ba1:	0f 87 d3 00 00 00    	ja     c0012c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012ba7:	57                   	push   edi
c0012ba8:	57                   	push   edi
c0012ba9:	56                   	push   esi
c0012baa:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bae:	56                   	push   esi
c0012baf:	e8 dc da fe ff       	call   c0000690 <strcpy>
c0012bb4:	58                   	pop    eax
c0012bb5:	5a                   	pop    edx
c0012bb6:	68 db 0d 02 c0       	push   0xc0020ddb
c0012bbb:	56                   	push   esi
c0012bbc:	e8 df dc fe ff       	call   c00008a0 <strcat>
c0012bc1:	59                   	pop    ecx
c0012bc2:	5f                   	pop    edi
c0012bc3:	53                   	push   ebx
c0012bc4:	56                   	push   esi
c0012bc5:	e8 d6 dc fe ff       	call   c00008a0 <strcat>
c0012bca:	58                   	pop    eax
c0012bcb:	5a                   	pop    edx
c0012bcc:	68 87 0a 02 c0       	push   0xc0020a87
c0012bd1:	56                   	push   esi
c0012bd2:	e8 c9 dc fe ff       	call   c00008a0 <strcat>
c0012bd7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012bde:	e8 83 4e ff ff       	call   c0007a66 <malloc>
c0012be3:	83 c4 0c             	add    esp,0xc
c0012be6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012bec:	56                   	push   esi
c0012bed:	50                   	push   eax
c0012bee:	89 c3                	mov    ebx,eax
c0012bf0:	e8 63 83 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	85 db                	test   ebx,ebx
c0012bfa:	74 7e                	je     c0012c7a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bfc:	51                   	push   ecx
c0012bfd:	51                   	push   ecx
c0012bfe:	6a 01                	push   0x1
c0012c00:	53                   	push   ebx
c0012c01:	e8 10 84 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0012c06:	83 c4 10             	add    esp,0x10
c0012c09:	85 c0                	test   eax,eax
c0012c0b:	74 08                	je     c0012c15 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c0d:	83 ec 0c             	sub    esp,0xc
c0012c10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c12:	53                   	push   ebx
c0012c13:	eb 5f                	jmp    c0012c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c15:	52                   	push   edx
c0012c16:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c1a:	50                   	push   eax
c0012c1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c1f:	50                   	push   eax
c0012c20:	53                   	push   ebx
c0012c21:	e8 96 86 ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0012c26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c2a:	83 c4 10             	add    esp,0x10
c0012c2d:	89 c1                	mov    ecx,eax
c0012c2f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c33:	74 31                	je     c0012c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	50                   	push   eax
c0012c39:	e8 28 4e ff ff       	call   c0007a66 <malloc>
c0012c3e:	89 c6                	mov    esi,eax
c0012c40:	58                   	pop    eax
c0012c41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c43:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c47:	52                   	push   edx
c0012c48:	56                   	push   esi
c0012c49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c51:	53                   	push   ebx
c0012c52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c55:	83 c4 20             	add    esp,0x20
c0012c58:	85 c0                	test   eax,eax
c0012c5a:	75 0a                	jne    c0012c66 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c60:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c64:	74 18                	je     c0012c7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	53                   	push   ebx
c0012c6a:	e8 05 84 ff ff       	call   c000b074 <File::close()>
c0012c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	31 c0                	xor    eax,eax
c0012c7c:	eb 3b                	jmp    c0012cb9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	53                   	push   ebx
c0012c82:	e8 ed 83 ff ff       	call   c000b074 <File::close()>
c0012c87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012c8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c8f:	83 c4 0c             	add    esp,0xc
c0012c92:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012c99:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012ca0:	56                   	push   esi
c0012ca1:	e8 59 fd ff ff       	call   c00129ff <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012ca6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ca9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cad:	e8 c7 4d ff ff       	call   c0007a79 <free>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012cb9:	81 c4 20 01 00 00    	add    esp,0x120
c0012cbf:	5b                   	pop    ebx
c0012cc0:	5e                   	pop    esi
c0012cc1:	5f                   	pop    edi
c0012cc2:	c3                   	ret    

c0012cc3 <Reg::getLine(char*, char*, char*)>:
c0012cc3:	57                   	push   edi
c0012cc4:	56                   	push   esi
c0012cc5:	53                   	push   ebx
c0012cc6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012cca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012cce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cd2:	57                   	push   edi
c0012cd3:	56                   	push   esi
c0012cd4:	53                   	push   ebx
c0012cd5:	68 8c 0a 02 c0       	push   0xc0020a8c
c0012cda:	e8 8f fe ff ff       	call   c0012b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cdf:	83 c4 10             	add    esp,0x10
c0012ce2:	84 c0                	test   al,al
c0012ce4:	75 10                	jne    c0012cf6 <Reg::getLine(char*, char*, char*)+0x33>
c0012ce6:	57                   	push   edi
c0012ce7:	56                   	push   esi
c0012ce8:	53                   	push   ebx
c0012ce9:	68 b1 0a 02 c0       	push   0xc0020ab1
c0012cee:	e8 7b fe ff ff       	call   c0012b6e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	5b                   	pop    ebx
c0012cf7:	5e                   	pop    esi
c0012cf8:	5f                   	pop    edi
c0012cf9:	c3                   	ret    

c0012cfa <Reg::readInt(char*, char*, int*)>:
c0012cfa:	55                   	push   ebp
c0012cfb:	57                   	push   edi
c0012cfc:	56                   	push   esi
c0012cfd:	53                   	push   ebx
c0012cfe:	81 ec e0 00 00 00    	sub    esp,0xe0
c0012d04:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012d08:	56                   	push   esi
c0012d09:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012d10:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012d17:	e8 a7 ff ff ff       	call   c0012cc3 <Reg::getLine(char*, char*, char*)>
c0012d1c:	83 c4 10             	add    esp,0x10
c0012d1f:	84 c0                	test   al,al
c0012d21:	0f 84 a4 00 00 00    	je     c0012dcb <Reg::readInt(char*, char*, int*)+0xd1>
c0012d27:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012d2b:	80 fa 2b             	cmp    dl,0x2b
c0012d2e:	74 0c                	je     c0012d3c <Reg::readInt(char*, char*, int*)+0x42>
c0012d30:	80 fa 2d             	cmp    dl,0x2d
c0012d33:	75 0e                	jne    c0012d43 <Reg::readInt(char*, char*, int*)+0x49>
c0012d35:	ba 01 00 00 00       	mov    edx,0x1
c0012d3a:	eb 0b                	jmp    c0012d47 <Reg::readInt(char*, char*, int*)+0x4d>
c0012d3c:	ba 01 00 00 00       	mov    edx,0x1
c0012d41:	eb 02                	jmp    c0012d45 <Reg::readInt(char*, char*, int*)+0x4b>
c0012d43:	31 d2                	xor    edx,edx
c0012d45:	31 c0                	xor    eax,eax
c0012d47:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0012d4c:	bf 0a 00 00 00       	mov    edi,0xa
c0012d51:	75 20                	jne    c0012d73 <Reg::readInt(char*, char*, int*)+0x79>
c0012d53:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0012d57:	80 f9 78             	cmp    cl,0x78
c0012d5a:	75 0a                	jne    c0012d66 <Reg::readInt(char*, char*, int*)+0x6c>
c0012d5c:	83 c2 02             	add    edx,0x2
c0012d5f:	bf 10 00 00 00       	mov    edi,0x10
c0012d64:	eb 0d                	jmp    c0012d73 <Reg::readInt(char*, char*, int*)+0x79>
c0012d66:	80 f9 62             	cmp    cl,0x62
c0012d69:	75 08                	jne    c0012d73 <Reg::readInt(char*, char*, int*)+0x79>
c0012d6b:	83 c2 02             	add    edx,0x2
c0012d6e:	bf 02 00 00 00       	mov    edi,0x2
c0012d73:	01 d6                	add    esi,edx
c0012d75:	31 ed                	xor    ebp,ebp
c0012d77:	8a 0e                	mov    cl,BYTE PTR [esi]
c0012d79:	84 c9                	test   cl,cl
c0012d7b:	0f 94 c2             	sete   dl
c0012d7e:	80 f9 0d             	cmp    cl,0xd
c0012d81:	0f 94 c3             	sete   bl
c0012d84:	08 d3                	or     bl,dl
c0012d86:	75 32                	jne    c0012dba <Reg::readInt(char*, char*, int*)+0xc0>
c0012d88:	89 ea                	mov    edx,ebp
c0012d8a:	0f be e9             	movsx  ebp,cl
c0012d8d:	0f af d7             	imul   edx,edi
c0012d90:	83 ff 10             	cmp    edi,0x10
c0012d93:	75 1e                	jne    c0012db3 <Reg::readInt(char*, char*, int*)+0xb9>
c0012d95:	88 cb                	mov    bl,cl
c0012d97:	80 eb 41             	sub    bl,0x41
c0012d9a:	80 fb 05             	cmp    bl,0x5
c0012d9d:	77 06                	ja     c0012da5 <Reg::readInt(char*, char*, int*)+0xab>
c0012d9f:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c0012da3:	eb 12                	jmp    c0012db7 <Reg::readInt(char*, char*, int*)+0xbd>
c0012da5:	80 e9 61             	sub    cl,0x61
c0012da8:	80 f9 05             	cmp    cl,0x5
c0012dab:	77 06                	ja     c0012db3 <Reg::readInt(char*, char*, int*)+0xb9>
c0012dad:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c0012db1:	eb 04                	jmp    c0012db7 <Reg::readInt(char*, char*, int*)+0xbd>
c0012db3:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c0012db7:	46                   	inc    esi
c0012db8:	eb bd                	jmp    c0012d77 <Reg::readInt(char*, char*, int*)+0x7d>
c0012dba:	84 c0                	test   al,al
c0012dbc:	74 02                	je     c0012dc0 <Reg::readInt(char*, char*, int*)+0xc6>
c0012dbe:	f7 dd                	neg    ebp
c0012dc0:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c0012dc7:	89 28                	mov    DWORD PTR [eax],ebp
c0012dc9:	88 d8                	mov    al,bl
c0012dcb:	81 c4 dc 00 00 00    	add    esp,0xdc
c0012dd1:	5b                   	pop    ebx
c0012dd2:	5e                   	pop    esi
c0012dd3:	5f                   	pop    edi
c0012dd4:	5d                   	pop    ebp
c0012dd5:	c3                   	ret    

c0012dd6 <Reg::readString(char*, char*, char*, int)>:
c0012dd6:	56                   	push   esi
c0012dd7:	53                   	push   ebx
c0012dd8:	81 ec e8 00 00 00    	sub    esp,0xe8
c0012dde:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012de2:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0012de9:	56                   	push   esi
c0012dea:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012df1:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012df8:	e8 c6 fe ff ff       	call   c0012cc3 <Reg::getLine(char*, char*, char*)>
c0012dfd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012e01:	83 c4 10             	add    esp,0x10
c0012e04:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e09:	74 44                	je     c0012e4f <Reg::readString(char*, char*, char*, int)+0x79>
c0012e0b:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c0012e12:	31 c0                	xor    eax,eax
c0012e14:	4a                   	dec    edx
c0012e15:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0012e18:	84 c9                	test   cl,cl
c0012e1a:	74 0f                	je     c0012e2b <Reg::readString(char*, char*, char*, int)+0x55>
c0012e1c:	39 c2                	cmp    edx,eax
c0012e1e:	7e 0b                	jle    c0012e2b <Reg::readString(char*, char*, char*, int)+0x55>
c0012e20:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e23:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e28:	40                   	inc    eax
c0012e29:	eb ea                	jmp    c0012e15 <Reg::readString(char*, char*, char*, int)+0x3f>
c0012e2b:	83 ec 0c             	sub    esp,0xc
c0012e2e:	53                   	push   ebx
c0012e2f:	e8 5c d7 fe ff       	call   c0000590 <strlen>
c0012e34:	83 c4 10             	add    esp,0x10
c0012e37:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e3c:	75 11                	jne    c0012e4f <Reg::readString(char*, char*, char*, int)+0x79>
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	53                   	push   ebx
c0012e42:	e8 49 d7 fe ff       	call   c0000590 <strlen>
c0012e47:	83 c4 10             	add    esp,0x10
c0012e4a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e4f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e53:	81 c4 e4 00 00 00    	add    esp,0xe4
c0012e59:	5b                   	pop    ebx
c0012e5a:	5e                   	pop    esi
c0012e5b:	c3                   	ret    

c0012e5c <Reg::readBool(char*, char*, bool*)>:
c0012e5c:	83 ec 20             	sub    esp,0x20
c0012e5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e63:	50                   	push   eax
c0012e64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e6c:	e8 89 fe ff ff       	call   c0012cfa <Reg::readInt(char*, char*, int*)>
c0012e71:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012e75:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e7a:	0f 95 02             	setne  BYTE PTR [edx]
c0012e7d:	83 c4 2c             	add    esp,0x2c
c0012e80:	c3                   	ret    

c0012e81 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012e81:	83 ec 30             	sub    esp,0x30
c0012e84:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c0012e88:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012e8c:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c0012e90:	50                   	push   eax
c0012e91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e99:	e8 be ff ff ff       	call   c0012e5c <Reg::readBool(char*, char*, bool*)>
c0012e9e:	83 c4 10             	add    esp,0x10
c0012ea1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012ea5:	84 c0                	test   al,al
c0012ea7:	74 04                	je     c0012ead <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c0012ea9:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c0012ead:	88 d0                	mov    al,dl
c0012eaf:	83 c4 2c             	add    esp,0x2c
c0012eb2:	c3                   	ret    

c0012eb3 <Reg::readIntWithDefault(char*, char*, int)>:
c0012eb3:	53                   	push   ebx
c0012eb4:	83 ec 1c             	sub    esp,0x1c
c0012eb7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ebb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ebf:	50                   	push   eax
c0012ec0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ec4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ec8:	e8 2d fe ff ff       	call   c0012cfa <Reg::readInt(char*, char*, int*)>
c0012ecd:	83 c4 10             	add    esp,0x10
c0012ed0:	84 c0                	test   al,al
c0012ed2:	74 04                	je     c0012ed8 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012ed4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ed8:	83 c4 18             	add    esp,0x18
c0012edb:	89 d8                	mov    eax,ebx
c0012edd:	5b                   	pop    ebx
c0012ede:	c3                   	ret    

c0012edf <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012edf:	57                   	push   edi
c0012ee0:	56                   	push   esi
c0012ee1:	53                   	push   ebx
c0012ee2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ee6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012eea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012eee:	56                   	push   esi
c0012eef:	57                   	push   edi
c0012ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ef8:	e8 d9 fe ff ff       	call   c0012dd6 <Reg::readString(char*, char*, char*, int)>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	84 c0                	test   al,al
c0012f02:	75 16                	jne    c0012f1a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f04:	50                   	push   eax
c0012f05:	56                   	push   esi
c0012f06:	6a 00                	push   0x0
c0012f08:	57                   	push   edi
c0012f09:	e8 e2 d5 fe ff       	call   c00004f0 <memset>
c0012f0e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f11:	89 de                	mov    esi,ebx
c0012f13:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f15:	83 c4 10             	add    esp,0x10
c0012f18:	89 df                	mov    edi,ebx
c0012f1a:	5b                   	pop    ebx
c0012f1b:	89 f8                	mov    eax,edi
c0012f1d:	5e                   	pop    esi
c0012f1e:	5f                   	pop    edi
c0012f1f:	c3                   	ret    

c0012f20 <SysEject(regs*)>:
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	83 ca ff             	or     edx,0xffffffff
c0012f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f2a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f2d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f32:	83 e9 41             	sub    ecx,0x41
c0012f35:	83 f9 19             	cmp    ecx,0x19
c0012f38:	77 18                	ja     c0012f52 <SysEject(regs*)+0x32>
c0012f3a:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f41:	85 c9                	test   ecx,ecx
c0012f43:	74 0d                	je     c0012f52 <SysEject(regs*)+0x32>
c0012f45:	83 ec 0c             	sub    esp,0xc
c0012f48:	51                   	push   ecx
c0012f49:	e8 50 a1 ff ff       	call   c000d09e <LogicalDisk::eject()>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	99                   	cdq    
c0012f52:	83 c4 0c             	add    esp,0xc
c0012f55:	c3                   	ret    

c0012f56 <SysExit(regs*)>:
c0012f56:	83 ec 18             	sub    esp,0x18
c0012f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f5d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f60:	e8 93 29 00 00       	call   c00158f8 <terminateTask(int)>
c0012f65:	83 c8 ff             	or     eax,0xffffffff
c0012f68:	83 c4 1c             	add    esp,0x1c
c0012f6b:	89 c2                	mov    edx,eax
c0012f6d:	c3                   	ret    

c0012f6e <SysGetCwd(regs*)>:
c0012f6e:	83 ec 10             	sub    esp,0x10
c0012f71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f75:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012f78:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f80:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f83:	e8 d5 7d ff ff       	call   c000ad5d <Fs::getcwd(Process*, char*, int)>
c0012f88:	83 c4 1c             	add    esp,0x1c
c0012f8b:	99                   	cdq    
c0012f8c:	c3                   	ret    

c0012f8d <SysGetPID(regs*)>:
c0012f8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f95:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f97:	99                   	cdq    
c0012f98:	c3                   	ret    

c0012f99 <SysGetRAMData(regs*)>:
c0012f99:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012fa3:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fa9:	99                   	cdq    
c0012faa:	f7 f9                	idiv   ecx
c0012fac:	c1 e0 18             	shl    eax,0x18
c0012faf:	09 c8                	or     eax,ecx
c0012fb1:	99                   	cdq    
c0012fb2:	c3                   	ret    

c0012fb3 <SysGetVGAPtr(regs*)>:
c0012fb3:	55                   	push   ebp
c0012fb4:	57                   	push   edi
c0012fb5:	56                   	push   esi
c0012fb6:	53                   	push   ebx
c0012fb7:	83 ec 18             	sub    esp,0x18
c0012fba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fbe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012fc1:	e8 62 24 00 00       	call   c0015428 <Thr::processFromPID(int)>
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	89 c1                	mov    ecx,eax
c0012fcb:	b8 01 00 00 00       	mov    eax,0x1
c0012fd0:	85 c9                	test   ecx,ecx
c0012fd2:	74 57                	je     c001302b <SysGetVGAPtr(regs*)+0x78>
c0012fd4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012fd8:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012fde:	74 0c                	je     c0012fec <SysGetVGAPtr(regs*)+0x39>
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	55                   	push   ebp
c0012fe4:	e8 ea 56 ff ff       	call   c00086d3 <setActiveTerminal(VgaText*)>
c0012fe9:	83 c4 10             	add    esp,0x10
c0012fec:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012fef:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012ff4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ff9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012ffc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012fff:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013005:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013008:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001300b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013011:	50                   	push   eax
c0013012:	50                   	push   eax
c0013013:	68 cc 0a 02 c0       	push   0xc0020acc
c0013018:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001301b:	05 a8 0f 00 00       	add    eax,0xfa8
c0013020:	50                   	push   eax
c0013021:	e8 6a d6 fe ff       	call   c0000690 <strcpy>
c0013026:	83 c4 10             	add    esp,0x10
c0013029:	31 c0                	xor    eax,eax
c001302b:	83 c4 0c             	add    esp,0xc
c001302e:	31 d2                	xor    edx,edx
c0013030:	5b                   	pop    ebx
c0013031:	5e                   	pop    esi
c0013032:	5f                   	pop    edi
c0013033:	5d                   	pop    ebp
c0013034:	c3                   	ret    
c0013035:	66 90                	xchg   ax,ax
c0013037:	90                   	nop

c0013038 <SysKill(regs*)>:
c0013038:	53                   	push   ebx
c0013039:	83 ec 08             	sub    esp,0x8
c001303c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013040:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013044:	75 16                	jne    c001305c <SysKill(regs*)+0x24>
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	68 d6 0a 02 c0       	push   0xc0020ad6
c001304e:	e8 d2 d6 ff ff       	call   c0010725 <KePanic(char const*)>
c0013053:	83 c4 10             	add    esp,0x10
c0013056:	e9 89 00 00 00       	jmp    c00130e4 <SysKill(regs*)+0xac>
c001305b:	90                   	nop
c001305c:	83 ec 0c             	sub    esp,0xc
c001305f:	68 84 81 02 c0       	push   0xc0028184
c0013064:	e8 5b b8 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013069:	8d 76 00             	lea    esi,[esi+0x0]
c001306c:	83 c4 10             	add    esp,0x10
c001306f:	85 c0                	test   eax,eax
c0013071:	74 19                	je     c001308c <SysKill(regs*)+0x54>
c0013073:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013076:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013079:	39 0a                	cmp    DWORD PTR [edx],ecx
c001307b:	74 33                	je     c00130b0 <SysKill(regs*)+0x78>
c001307d:	52                   	push   edx
c001307e:	52                   	push   edx
c001307f:	50                   	push   eax
c0013080:	68 84 81 02 c0       	push   0xc0028184
c0013085:	e8 22 bb 00 00       	call   c001ebac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001308a:	eb e0                	jmp    c001306c <SysKill(regs*)+0x34>
c001308c:	83 ec 0c             	sub    esp,0xc
c001308f:	68 78 81 02 c0       	push   0xc0028178
c0013094:	e8 2b b8 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013099:	8d 76 00             	lea    esi,[esi+0x0]
c001309c:	83 c4 10             	add    esp,0x10
c001309f:	85 c0                	test   eax,eax
c00130a1:	74 41                	je     c00130e4 <SysKill(regs*)+0xac>
c00130a3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130a6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130a9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130ab:	75 27                	jne    c00130d4 <SysKill(regs*)+0x9c>
c00130ad:	8d 76 00             	lea    esi,[esi+0x0]
c00130b0:	51                   	push   ecx
c00130b1:	51                   	push   ecx
c00130b2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130bd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130c3:	e8 cb da ff ff       	call   c0010b93 <KeRaiseSignal(SigHandlerBlock*, int)>
c00130c8:	83 c4 10             	add    esp,0x10
c00130cb:	31 c0                	xor    eax,eax
c00130cd:	31 d2                	xor    edx,edx
c00130cf:	eb 1b                	jmp    c00130ec <SysKill(regs*)+0xb4>
c00130d1:	8d 76 00             	lea    esi,[esi+0x0]
c00130d4:	52                   	push   edx
c00130d5:	52                   	push   edx
c00130d6:	50                   	push   eax
c00130d7:	68 78 81 02 c0       	push   0xc0028178
c00130dc:	e8 cb ba 00 00       	call   c001ebac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130e1:	eb b9                	jmp    c001309c <SysKill(regs*)+0x64>
c00130e3:	90                   	nop
c00130e4:	83 c8 ff             	or     eax,0xffffffff
c00130e7:	89 c2                	mov    edx,eax
c00130e9:	8d 76 00             	lea    esi,[esi+0x0]
c00130ec:	83 c4 08             	add    esp,0x8
c00130ef:	5b                   	pop    ebx
c00130f0:	c3                   	ret    

c00130f1 <SysLoadDLL(regs*)>:
c00130f1:	56                   	push   esi
c00130f2:	31 d2                	xor    edx,edx
c00130f4:	53                   	push   ebx
c00130f5:	b8 01 00 00 00       	mov    eax,0x1
c00130fa:	51                   	push   ecx
c00130fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130ff:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013103:	0f 84 8c 00 00 00    	je     c0013195 <SysLoadDLL(regs*)+0xa4>
c0013109:	83 ec 0c             	sub    esp,0xc
c001310c:	68 14 01 00 00       	push   0x114
c0013111:	e8 50 49 ff ff       	call   c0007a66 <malloc>
c0013116:	83 c4 0c             	add    esp,0xc
c0013119:	89 c3                	mov    ebx,eax
c001311b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013120:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013123:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013126:	53                   	push   ebx
c0013127:	e8 2c 7e ff ff       	call   c000af58 <File::File(char const*, Process*)>
c001312c:	83 c4 10             	add    esp,0x10
c001312f:	31 d2                	xor    edx,edx
c0013131:	85 db                	test   ebx,ebx
c0013133:	b8 02 00 00 00       	mov    eax,0x2
c0013138:	74 5b                	je     c0013195 <SysLoadDLL(regs*)+0xa4>
c001313a:	83 ec 0c             	sub    esp,0xc
c001313d:	53                   	push   ebx
c001313e:	e8 3b 81 ff ff       	call   c000b27e <File::exists()>
c0013143:	83 c4 10             	add    esp,0x10
c0013146:	84 c0                	test   al,al
c0013148:	8b 03                	mov    eax,DWORD PTR [ebx]
c001314a:	75 11                	jne    c001315d <SysLoadDLL(regs*)+0x6c>
c001314c:	83 ec 0c             	sub    esp,0xc
c001314f:	53                   	push   ebx
c0013150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	b8 03 00 00 00       	mov    eax,0x3
c001315b:	eb 36                	jmp    c0013193 <SysLoadDLL(regs*)+0xa2>
c001315d:	83 ec 0c             	sub    esp,0xc
c0013160:	53                   	push   ebx
c0013161:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013164:	58                   	pop    eax
c0013165:	5a                   	pop    edx
c0013166:	6a 00                	push   0x0
c0013168:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001316b:	e8 4d 14 00 00       	call   c00145bd <Thr::loadDLL(char const*, bool)>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	31 d2                	xor    edx,edx
c0013175:	89 c1                	mov    ecx,eax
c0013177:	b8 04 00 00 00       	mov    eax,0x4
c001317c:	85 c9                	test   ecx,ecx
c001317e:	74 15                	je     c0013195 <SysLoadDLL(regs*)+0xa4>
c0013180:	53                   	push   ebx
c0013181:	53                   	push   ebx
c0013182:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013188:	51                   	push   ecx
c0013189:	e8 6b 16 00 00       	call   c00147f9 <Thr::executeDLL(unsigned long, void*)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	31 c0                	xor    eax,eax
c0013193:	31 d2                	xor    edx,edx
c0013195:	59                   	pop    ecx
c0013196:	5b                   	pop    ebx
c0013197:	5e                   	pop    esi
c0013198:	c3                   	ret    

c0013199 <SysRead(regs*)>:
c0013199:	57                   	push   edi
c001319a:	56                   	push   esi
c001319b:	53                   	push   ebx
c001319c:	83 ec 10             	sub    esp,0x10
c001319f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131a6:	83 f8 02             	cmp    eax,0x2
c00131a9:	77 10                	ja     c00131bb <SysRead(regs*)+0x22>
c00131ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131b3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131b9:	eb 0e                	jmp    c00131c9 <SysRead(regs*)+0x30>
c00131bb:	83 ec 0c             	sub    esp,0xc
c00131be:	50                   	push   eax
c00131bf:	e8 53 62 ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c00131c4:	83 c4 10             	add    esp,0x10
c00131c7:	89 c1                	mov    ecx,eax
c00131c9:	83 c8 ff             	or     eax,0xffffffff
c00131cc:	85 c9                	test   ecx,ecx
c00131ce:	89 c2                	mov    edx,eax
c00131d0:	74 28                	je     c00131fa <SysRead(regs*)+0x61>
c00131d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	31 ff                	xor    edi,edi
c00131df:	8d 54 24 18          	lea    edx,[esp+0x18]
c00131e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131e5:	52                   	push   edx
c00131e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00131e9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00131ec:	57                   	push   edi
c00131ed:	56                   	push   esi
c00131ee:	51                   	push   ecx
c00131ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00131f6:	83 c4 20             	add    esp,0x20
c00131f9:	99                   	cdq    
c00131fa:	83 c4 10             	add    esp,0x10
c00131fd:	5b                   	pop    ebx
c00131fe:	5e                   	pop    esi
c00131ff:	5f                   	pop    edi
c0013200:	c3                   	ret    

c0013201 <SysRegisterSignal(regs*)>:
c0013201:	83 ec 18             	sub    esp,0x18
c0013204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013208:	6a 00                	push   0x0
c001320a:	6a 00                	push   0x0
c001320c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001320f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013217:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001321a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013220:	e8 38 d9 ff ff       	call   c0010b5d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013225:	83 c4 2c             	add    esp,0x2c
c0013228:	99                   	cdq    
c0013229:	c3                   	ret    

c001322a <SysRegistryGetTypeFromPath(regs*)>:
c001322a:	57                   	push   edi
c001322b:	56                   	push   esi
c001322c:	53                   	push   ebx
c001322d:	81 ec 38 01 00 00    	sub    esp,0x138
c0013233:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001323a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001323d:	68 f7 0a 02 c0       	push   0xc0020af7
c0013242:	e8 8f 77 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013247:	5a                   	pop    edx
c0013248:	59                   	pop    ecx
c0013249:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001324c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001324f:	e8 55 f6 ff ff       	call   c00128a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013254:	5f                   	pop    edi
c0013255:	5a                   	pop    edx
c0013256:	89 c6                	mov    esi,eax
c0013258:	50                   	push   eax
c0013259:	68 17 0b 02 c0       	push   0xc0020b17
c001325e:	e8 73 77 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013263:	83 c4 10             	add    esp,0x10
c0013266:	85 f6                	test   esi,esi
c0013268:	74 28                	je     c0013292 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001326a:	50                   	push   eax
c001326b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001326f:	57                   	push   edi
c0013270:	56                   	push   esi
c0013271:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013274:	e8 1e f2 ff ff       	call   c0012497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013279:	83 c4 0c             	add    esp,0xc
c001327c:	57                   	push   edi
c001327d:	50                   	push   eax
c001327e:	89 c3                	mov    ebx,eax
c0013280:	68 1f 0b 02 c0       	push   0xc0020b1f
c0013285:	e8 4c 77 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001328a:	89 d8                	mov    eax,ebx
c001328c:	83 c4 10             	add    esp,0x10
c001328f:	99                   	cdq    
c0013290:	eb 05                	jmp    c0013297 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013292:	83 c8 ff             	or     eax,0xffffffff
c0013295:	89 c2                	mov    edx,eax
c0013297:	81 c4 30 01 00 00    	add    esp,0x130
c001329d:	5b                   	pop    ebx
c001329e:	5e                   	pop    esi
c001329f:	5f                   	pop    edi
c00132a0:	c3                   	ret    

c00132a1 <SysRegistryReadExtent(regs*)>:
c00132a1:	83 ec 1c             	sub    esp,0x1c
c00132a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132a8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132ab:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132ae:	85 c0                	test   eax,eax
c00132b0:	79 1f                	jns    c00132d1 <SysRegistryReadExtent(regs*)+0x30>
c00132b2:	52                   	push   edx
c00132b3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132b8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132bc:	52                   	push   edx
c00132bd:	50                   	push   eax
c00132be:	51                   	push   ecx
c00132bf:	e8 c5 f0 ff ff       	call   c0012389 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132cc:	83 c4 10             	add    esp,0x10
c00132cf:	eb 14                	jmp    c00132e5 <SysRegistryReadExtent(regs*)+0x44>
c00132d1:	83 ec 04             	sub    esp,0x4
c00132d4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00132d7:	50                   	push   eax
c00132d8:	51                   	push   ecx
c00132d9:	e8 43 eb ff ff       	call   c0011e21 <CmGetString(Reghive_Tag*, int, char*)>
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	31 c0                	xor    eax,eax
c00132e3:	31 d2                	xor    edx,edx
c00132e5:	83 c4 1c             	add    esp,0x1c
c00132e8:	c3                   	ret    

c00132e9 <SysRegistryPathToExtentLookup(regs*)>:
c00132e9:	53                   	push   ebx
c00132ea:	83 ec 10             	sub    esp,0x10
c00132ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00132f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132f4:	68 35 0b 02 c0       	push   0xc0020b35
c00132f9:	e8 d8 76 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00132fe:	58                   	pop    eax
c00132ff:	5a                   	pop    edx
c0013300:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013303:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013306:	e8 9e f5 ff ff       	call   c00128a9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001330b:	83 c4 18             	add    esp,0x18
c001330e:	5b                   	pop    ebx
c001330f:	99                   	cdq    
c0013310:	c3                   	ret    

c0013311 <SysRegistryEnterDirectory(regs*)>:
c0013311:	53                   	push   ebx
c0013312:	83 ec 10             	sub    esp,0x10
c0013315:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013319:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001331c:	68 58 0b 02 c0       	push   0xc0020b58
c0013321:	e8 b0 76 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013326:	58                   	pop    eax
c0013327:	5a                   	pop    edx
c0013328:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001332b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001332e:	e8 65 eb ff ff       	call   c0011e98 <CmEnterDirectory(Reghive_Tag*, int)>
c0013333:	83 c4 18             	add    esp,0x18
c0013336:	5b                   	pop    ebx
c0013337:	99                   	cdq    
c0013338:	c3                   	ret    

c0013339 <SysRegistryGetNext(regs*)>:
c0013339:	53                   	push   ebx
c001333a:	83 ec 10             	sub    esp,0x10
c001333d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013341:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013344:	68 76 0b 02 c0       	push   0xc0020b76
c0013349:	e8 88 76 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001334e:	58                   	pop    eax
c001334f:	5a                   	pop    edx
c0013350:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013353:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013356:	e8 7c eb ff ff       	call   c0011ed7 <CmGetNext(Reghive_Tag*, int)>
c001335b:	83 c4 18             	add    esp,0x18
c001335e:	5b                   	pop    ebx
c001335f:	99                   	cdq    
c0013360:	c3                   	ret    

c0013361 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013361:	57                   	push   edi
c0013362:	56                   	push   esi
c0013363:	53                   	push   ebx
c0013364:	81 ec 34 01 00 00    	sub    esp,0x134
c001336a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013371:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013375:	57                   	push   edi
c0013376:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013379:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001337c:	e8 16 f1 ff ff       	call   c0012497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013381:	89 c3                	mov    ebx,eax
c0013383:	58                   	pop    eax
c0013384:	5a                   	pop    edx
c0013385:	57                   	push   edi
c0013386:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013389:	e8 02 d3 fe ff       	call   c0000690 <strcpy>
c001338e:	81 c4 40 01 00 00    	add    esp,0x140
c0013394:	89 d8                	mov    eax,ebx
c0013396:	5b                   	pop    ebx
c0013397:	99                   	cdq    
c0013398:	5e                   	pop    esi
c0013399:	5f                   	pop    edi
c001339a:	c3                   	ret    

c001339b <SysRegistryOpen(regs*)>:
c001339b:	83 ec 18             	sub    esp,0x18
c001339e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133a5:	e8 07 e9 ff ff       	call   c0011cb1 <CmOpen(char const*)>
c00133aa:	83 c4 1c             	add    esp,0x1c
c00133ad:	99                   	cdq    
c00133ae:	c3                   	ret    

c00133af <SysRegistryClose(regs*)>:
c00133af:	83 ec 18             	sub    esp,0x18
c00133b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133b9:	e8 11 ea ff ff       	call   c0011dcf <CmClose(Reghive_Tag*)>
c00133be:	31 c0                	xor    eax,eax
c00133c0:	31 d2                	xor    edx,edx
c00133c2:	83 c4 1c             	add    esp,0x1c
c00133c5:	c3                   	ret    

c00133c6 <SysSbrk(regs*)>:
c00133c6:	56                   	push   esi
c00133c7:	53                   	push   ebx
c00133c8:	50                   	push   eax
c00133c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133d5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00133d8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00133de:	85 db                	test   ebx,ebx
c00133e0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00133e3:	74 02                	je     c00133e7 <SysSbrk(regs*)+0x21>
c00133e5:	79 06                	jns    c00133ed <SysSbrk(regs*)+0x27>
c00133e7:	89 f0                	mov    eax,esi
c00133e9:	31 d2                	xor    edx,edx
c00133eb:	eb 2a                	jmp    c0013417 <SysSbrk(regs*)+0x51>
c00133ed:	83 c8 ff             	or     eax,0xffffffff
c00133f0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00133f6:	89 c2                	mov    edx,eax
c00133f8:	77 1d                	ja     c0013417 <SysSbrk(regs*)+0x51>
c00133fa:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013400:	50                   	push   eax
c0013401:	68 07 0c 00 00       	push   0xc07
c0013406:	c1 ea 0c             	shr    edx,0xc
c0013409:	52                   	push   edx
c001340a:	51                   	push   ecx
c001340b:	e8 c6 69 ff ff       	call   c0009dd6 <VAS::allocatePages(int, int)>
c0013410:	89 f0                	mov    eax,esi
c0013412:	31 d2                	xor    edx,edx
c0013414:	83 c4 10             	add    esp,0x10
c0013417:	59                   	pop    ecx
c0013418:	5b                   	pop    ebx
c0013419:	5e                   	pop    esi
c001341a:	c3                   	ret    

c001341b <SysSetCwd(regs*)>:
c001341b:	83 ec 14             	sub    esp,0x14
c001341e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013422:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013425:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001342a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001342d:	e8 eb 7e ff ff       	call   c000b31d <Fs::setcwd(Process*, char*)>
c0013432:	83 c4 1c             	add    esp,0x1c
c0013435:	99                   	cdq    
c0013436:	c3                   	ret    

c0013437 <SysSetTime(regs*)>:
c0013437:	56                   	push   esi
c0013438:	be 0c 00 00 00       	mov    esi,0xc
c001343d:	53                   	push   ebx
c001343e:	83 ec 18             	sub    esp,0x18
c0013441:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013449:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001344d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013455:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013458:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001345b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001345e:	89 c2                	mov    edx,eax
c0013460:	c1 e8 05             	shr    eax,0x5
c0013463:	83 e2 1f             	and    edx,0x1f
c0013466:	42                   	inc    edx
c0013467:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c001346d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013471:	c1 e3 10             	shl    ebx,0x10
c0013474:	31 d2                	xor    edx,edx
c0013476:	f7 f6                	div    esi
c0013478:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001347c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013480:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013486:	88 d4                	mov    ah,dl
c0013488:	31 d2                	xor    edx,edx
c001348a:	0f b7 c0             	movzx  eax,ax
c001348d:	09 d8                	or     eax,ebx
c001348f:	bb 3c 00 00 00       	mov    ebx,0x3c
c0013494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013498:	89 c8                	mov    eax,ecx
c001349a:	f7 f3                	div    ebx
c001349c:	c1 e2 10             	shl    edx,0x10
c001349f:	09 d6                	or     esi,edx
c00134a1:	31 d2                	xor    edx,edx
c00134a3:	f7 f3                	div    ebx
c00134a5:	89 f0                	mov    eax,esi
c00134a7:	bb 10 0e 00 00       	mov    ebx,0xe10
c00134ac:	88 d4                	mov    ah,dl
c00134ae:	31 d2                	xor    edx,edx
c00134b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134b4:	89 c8                	mov    eax,ecx
c00134b6:	b9 18 00 00 00       	mov    ecx,0x18
c00134bb:	f7 f3                	div    ebx
c00134bd:	31 d2                	xor    edx,edx
c00134bf:	f7 f1                	div    ecx
c00134c1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134c6:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00134ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134d2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134d8:	e8 37 86 ff ff       	call   c000bb14 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134dd:	83 c4 24             	add    esp,0x24
c00134e0:	31 d2                	xor    edx,edx
c00134e2:	5b                   	pop    ebx
c00134e3:	5e                   	pop    esi
c00134e4:	34 01                	xor    al,0x1
c00134e6:	0f b6 c0             	movzx  eax,al
c00134e9:	c3                   	ret    

c00134ea <SysTimezone(regs*)>:
c00134ea:	53                   	push   ebx
c00134eb:	83 ec 08             	sub    esp,0x8
c00134ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134f2:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00134f6:	75 17                	jne    c001350f <SysTimezone(regs*)+0x25>
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	68 8d 0b 02 c0       	push   0xc0020b8d
c0013500:	e8 d1 74 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013505:	83 c8 ff             	or     eax,0xffffffff
c0013508:	83 c4 10             	add    esp,0x10
c001350b:	89 c2                	mov    edx,eax
c001350d:	eb 20                	jmp    c001352f <SysTimezone(regs*)+0x45>
c001350f:	83 ec 0c             	sub    esp,0xc
c0013512:	68 a2 0b 02 c0       	push   0xc0020ba2
c0013517:	e8 ba 74 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001351c:	58                   	pop    eax
c001351d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013520:	e8 5f 83 ff ff       	call   c000b884 <User::loadClockSettings(int)>
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	b8 01 00 00 00       	mov    eax,0x1
c001352d:	31 d2                	xor    edx,edx
c001352f:	83 c4 08             	add    esp,0x8
c0013532:	5b                   	pop    ebx
c0013533:	c3                   	ret    

c0013534 <SysWrite(regs*)>:
c0013534:	57                   	push   edi
c0013535:	56                   	push   esi
c0013536:	53                   	push   ebx
c0013537:	83 ec 10             	sub    esp,0x10
c001353a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001353e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013541:	83 f8 02             	cmp    eax,0x2
c0013544:	77 10                	ja     c0013556 <SysWrite(regs*)+0x22>
c0013546:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001354b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001354e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013554:	eb 0e                	jmp    c0013564 <SysWrite(regs*)+0x30>
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	50                   	push   eax
c001355a:	e8 b8 5e ff ff       	call   c0009417 <getFromFileDescriptor(int)>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	89 c1                	mov    ecx,eax
c0013564:	83 c8 ff             	or     eax,0xffffffff
c0013567:	85 c9                	test   ecx,ecx
c0013569:	89 c2                	mov    edx,eax
c001356b:	74 28                	je     c0013595 <SysWrite(regs*)+0x61>
c001356d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013575:	83 ec 0c             	sub    esp,0xc
c0013578:	31 ff                	xor    edi,edi
c001357a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001357e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013580:	52                   	push   edx
c0013581:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013584:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013587:	57                   	push   edi
c0013588:	56                   	push   esi
c0013589:	51                   	push   ecx
c001358a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001358d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013591:	83 c4 20             	add    esp,0x20
c0013594:	99                   	cdq    
c0013595:	83 c4 10             	add    esp,0x10
c0013598:	5b                   	pop    ebx
c0013599:	5e                   	pop    esi
c001359a:	5f                   	pop    edi
c001359b:	c3                   	ret    

c001359c <SysWsbe(regs*)>:
c001359c:	57                   	push   edi
c001359d:	b9 0b 00 00 00       	mov    ecx,0xb
c00135a2:	56                   	push   esi
c00135a3:	be e1 0b 02 c0       	mov    esi,0xc0020be1
c00135a8:	53                   	push   ebx
c00135a9:	83 ec 30             	sub    esp,0x30
c00135ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135b0:	fc                   	cld    
c00135b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135b3:	83 ec 0c             	sub    esp,0xc
c00135b6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135bf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135c2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00135ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135cd:	57                   	push   edi
c00135ce:	e8 bd cf fe ff       	call   c0000590 <strlen>
c00135d3:	5a                   	pop    edx
c00135d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135d8:	52                   	push   edx
c00135d9:	31 d2                	xor    edx,edx
c00135db:	57                   	push   edi
c00135dc:	52                   	push   edx
c00135dd:	50                   	push   eax
c00135de:	56                   	push   esi
c00135df:	ff d3                	call   ebx
c00135e1:	83 c4 14             	add    esp,0x14
c00135e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00135e8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00135eb:	e8 08 23 00 00       	call   c00158f8 <terminateTask(int)>
c00135f0:	83 c4 40             	add    esp,0x40
c00135f3:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00135f8:	5b                   	pop    ebx
c00135f9:	31 d2                	xor    edx,edx
c00135fb:	5e                   	pop    esi
c00135fc:	5f                   	pop    edi
c00135fd:	c3                   	ret    

c00135fe <SysYield(regs*)>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	fa                   	cli    
c0013602:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013608:	e8 33 1a 00 00       	call   c0015040 <schedule()>
c001360d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013612:	48                   	dec    eax
c0013613:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013618:	75 01                	jne    c001361b <SysYield(regs*)+0x1d>
c001361a:	fb                   	sti    
c001361b:	31 c0                	xor    eax,eax
c001361d:	31 d2                	xor    edx,edx
c001361f:	83 c4 0c             	add    esp,0xc
c0013622:	c3                   	ret    

c0013623 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013623:	55                   	push   ebp
c0013624:	57                   	push   edi
c0013625:	56                   	push   esi
c0013626:	53                   	push   ebx
c0013627:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001362d:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013638:	74 3b                	je     c0013675 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001363a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013642:	74 31                	je     c0013675 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013644:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001364c:	75 27                	jne    c0013675 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001364e:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013655:	05 00 10 00 00       	add    eax,0x1000
c001365a:	89 c2                	mov    edx,eax
c001365c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013661:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013668:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001366e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013675:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001367c:	83 ec 0c             	sub    esp,0xc
c001367f:	6a 01                	push   0x1
c0013681:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013687:	e8 f4 5e ff ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013695:	89 c3                	mov    ebx,eax
c0013697:	0f 86 26 01 00 00    	jbe    c00137c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c001369d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136a5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136ac:	c1 ee 0c             	shr    esi,0xc
c00136af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136b3:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136ba:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00136c5:	29 ef                	sub    edi,ebp
c00136c7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00136cb:	0f 83 f9 00 00 00    	jae    c00137ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136d1:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136d7:	b8 00 10 00 00       	mov    eax,0x1000
c00136dc:	0f 47 f8             	cmova  edi,eax
c00136df:	83 ec 0c             	sub    esp,0xc
c00136e2:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00136e9:	31 d2                	xor    edx,edx
c00136eb:	8b 08                	mov    ecx,DWORD PTR [eax]
c00136ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c00136f1:	50                   	push   eax
c00136f2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00136f6:	56                   	push   esi
c00136f7:	52                   	push   edx
c00136f8:	57                   	push   edi
c00136f9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013700:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013703:	83 c4 20             	add    esp,0x20
c0013706:	85 c0                	test   eax,eax
c0013708:	75 06                	jne    c0013710 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001370a:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001370e:	74 13                	je     c0013723 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	53                   	push   ebx
c0013714:	e8 80 61 ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	31 c0                	xor    eax,eax
c001371e:	e9 7c 01 00 00       	jmp    c001389f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013723:	fa                   	cli    
c0013724:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001372a:	e8 3d 46 ff ff       	call   c0007d6c <Phys::allocatePage()>
c001372f:	6a 07                	push   0x7
c0013731:	53                   	push   ebx
c0013732:	50                   	push   eax
c0013733:	89 c7                	mov    edi,eax
c0013735:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001373a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001373d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013743:	e8 5a 65 ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013748:	83 c4 0c             	add    esp,0xc
c001374b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013752:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013758:	6a 00                	push   0x0
c001375a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001375f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013762:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013768:	e8 a1 63 ff ff       	call   c0009b0e <VAS::mapOtherVASIn(bool, VAS*)>
c001376d:	58                   	pop    eax
c001376e:	5a                   	pop    edx
c001376f:	68 07 0c 00 00       	push   0xc07
c0013774:	55                   	push   ebp
c0013775:	57                   	push   edi
c0013776:	89 df                	mov    edi,ebx
c0013778:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001377f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013785:	6a 00                	push   0x0
c0013787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001378f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013795:	e8 16 69 ff ff       	call   c000a0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001379a:	b9 00 10 00 00       	mov    ecx,0x1000
c001379f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137a1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137a6:	83 c4 20             	add    esp,0x20
c00137a9:	48                   	dec    eax
c00137aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137af:	85 c0                	test   eax,eax
c00137b1:	75 01                	jne    c00137b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00137b3:	fb                   	sti    
c00137b4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137b8:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137be:	e9 f0 fe ff ff       	jmp    c00136b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00137c3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137ca:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137d1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137d7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137dd:	0f 86 ae 00 00 00    	jbe    c0013891 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00137e3:	fa                   	cli    
c00137e4:	51                   	push   ecx
c00137e5:	31 ff                	xor    edi,edi
c00137e7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00137ee:	c1 ee 0c             	shr    esi,0xc
c00137f1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00137f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137fd:	6a 00                	push   0x0
c00137ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013804:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013807:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001380d:	e8 fc 62 ff ff       	call   c0009b0e <VAS::mapOtherVASIn(bool, VAS*)>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	e8 52 45 ff ff       	call   c0007d6c <Phys::allocatePage()>
c001381a:	47                   	inc    edi
c001381b:	6a 07                	push   0x7
c001381d:	53                   	push   ebx
c001381e:	50                   	push   eax
c001381f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013823:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013829:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001382c:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013832:	e8 6b 64 ff ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013837:	58                   	pop    eax
c0013838:	5a                   	pop    edx
c0013839:	68 07 0c 00 00       	push   0xc07
c001383e:	55                   	push   ebp
c001383f:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013849:	50                   	push   eax
c001384a:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013851:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013857:	6a 00                	push   0x0
c0013859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001385e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013861:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013867:	e8 44 68 ff ff       	call   c000a0b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001386c:	83 c4 1c             	add    esp,0x1c
c001386f:	68 00 10 00 00       	push   0x1000
c0013874:	6a 00                	push   0x0
c0013876:	53                   	push   ebx
c0013877:	e8 74 cc fe ff       	call   c00004f0 <memset>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	39 fe                	cmp    esi,edi
c0013881:	77 92                	ja     c0013815 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013883:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013888:	48                   	dec    eax
c0013889:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001388e:	75 01                	jne    c0013891 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0013890:	fb                   	sti    
c0013891:	83 ec 0c             	sub    esp,0xc
c0013894:	53                   	push   ebx
c0013895:	e8 ff 5f ff ff       	call   c0009899 <Virt::freeKernelVirtualPages(unsigned long)>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	b0 01                	mov    al,0x1
c001389f:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138a5:	5b                   	pop    ebx
c00138a6:	5e                   	pop    esi
c00138a7:	5f                   	pop    edi
c00138a8:	5d                   	pop    ebp
c00138a9:	c3                   	ret    

c00138aa <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138aa:	55                   	push   ebp
c00138ab:	57                   	push   edi
c00138ac:	56                   	push   esi
c00138ad:	53                   	push   ebx
c00138ae:	83 ec 48             	sub    esp,0x48
c00138b1:	68 14 01 00 00       	push   0x114
c00138b6:	e8 ab 41 ff ff       	call   c0007a66 <malloc>
c00138bb:	83 c4 0c             	add    esp,0xc
c00138be:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138c2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138c6:	89 c7                	mov    edi,eax
c00138c8:	50                   	push   eax
c00138c9:	e8 8a 76 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c00138ce:	58                   	pop    eax
c00138cf:	5a                   	pop    edx
c00138d0:	6a 01                	push   0x1
c00138d2:	57                   	push   edi
c00138d3:	e8 3e 77 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c00138d8:	83 c4 10             	add    esp,0x10
c00138db:	85 c0                	test   eax,eax
c00138dd:	0f 85 4d 01 00 00    	jne    c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00138e3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00138eb:	83 ec 0c             	sub    esp,0xc
c00138ee:	6a 34                	push   0x34
c00138f0:	e8 71 41 ff ff       	call   c0007a66 <malloc>
c00138f5:	89 c3                	mov    ebx,eax
c00138f7:	58                   	pop    eax
c00138f8:	8b 07                	mov    eax,DWORD PTR [edi]
c00138fa:	8d 74 24 38          	lea    esi,[esp+0x38]
c00138fe:	56                   	push   esi
c00138ff:	53                   	push   ebx
c0013900:	6a 00                	push   0x0
c0013902:	6a 34                	push   0x34
c0013904:	57                   	push   edi
c0013905:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013908:	83 c4 20             	add    esp,0x20
c001390b:	85 c0                	test   eax,eax
c001390d:	0f 85 1d 01 00 00    	jne    c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013913:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013919:	0f 85 11 01 00 00    	jne    c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001391f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013922:	85 c0                	test   eax,eax
c0013924:	0f 84 06 01 00 00    	je     c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001392a:	31 d2                	xor    edx,edx
c001392c:	55                   	push   ebp
c001392d:	52                   	push   edx
c001392e:	50                   	push   eax
c001392f:	57                   	push   edi
c0013930:	e8 9f 77 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	85 c0                	test   eax,eax
c001393a:	0f 85 f0 00 00 00    	jne    c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013940:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013943:	83 ec 0c             	sub    esp,0xc
c0013946:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001394a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001394e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013952:	0f af c2             	imul   eax,edx
c0013955:	50                   	push   eax
c0013956:	e8 0b 41 ff ff       	call   c0007a66 <malloc>
c001395b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001395d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013960:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013964:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013968:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001396c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013970:	0f af c2             	imul   eax,edx
c0013973:	99                   	cdq    
c0013974:	52                   	push   edx
c0013975:	50                   	push   eax
c0013976:	57                   	push   edi
c0013977:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001397a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001397d:	83 c4 20             	add    esp,0x20
c0013980:	85 c0                	test   eax,eax
c0013982:	0f 84 a8 00 00 00    	je     c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013988:	31 d2                	xor    edx,edx
c001398a:	51                   	push   ecx
c001398b:	52                   	push   edx
c001398c:	50                   	push   eax
c001398d:	57                   	push   edi
c001398e:	e8 41 77 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	85 c0                	test   eax,eax
c0013998:	0f 85 92 00 00 00    	jne    c0013a30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c001399e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139a2:	83 ec 0c             	sub    esp,0xc
c00139a5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139a9:	0f af c2             	imul   eax,edx
c00139ac:	50                   	push   eax
c00139ad:	e8 b4 40 ff ff       	call   c0007a66 <malloc>
c00139b2:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00139b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00139b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139bf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139c3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139c7:	0f af c2             	imul   eax,edx
c00139ca:	99                   	cdq    
c00139cb:	52                   	push   edx
c00139cc:	50                   	push   eax
c00139cd:	57                   	push   edi
c00139ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139d1:	83 c4 20             	add    esp,0x20
c00139d4:	31 c9                	xor    ecx,ecx
c00139d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139de:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139e2:	39 c8                	cmp    eax,ecx
c00139e4:	0f 86 8b 00 00 00    	jbe    c0013a75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c00139ea:	89 cd                	mov    ebp,ecx
c00139ec:	c1 e5 05             	shl    ebp,0x5
c00139ef:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c00139f3:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00139f7:	75 73                	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c00139f9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00139fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013a00:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013a03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a07:	52                   	push   edx
c0013a08:	31 d2                	xor    edx,edx
c0013a0a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013a0d:	52                   	push   edx
c0013a0e:	50                   	push   eax
c0013a0f:	57                   	push   edi
c0013a10:	e8 bf 76 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a1c:	85 c0                	test   eax,eax
c0013a1e:	74 17                	je     c0013a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	68 0d 0c 02 c0       	push   0xc0020c0d
c0013a28:	e8 a9 6f ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	31 c0                	xor    eax,eax
c0013a32:	e9 8e 00 00 00       	jmp    c0013ac5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0013a37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013a3b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013a3e:	83 ec 0c             	sub    esp,0xc
c0013a41:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013a44:	50                   	push   eax
c0013a45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a49:	56                   	push   esi
c0013a4a:	57                   	push   edi
c0013a4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a4f:	e8 cf fb ff ff       	call   c0013623 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a54:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a58:	83 c4 20             	add    esp,0x20
c0013a5b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013a5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a63:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013a68:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013a6c:	41                   	inc    ecx
c0013a6d:	0f b7 c9             	movzx  ecx,cx
c0013a70:	e9 69 ff ff ff       	jmp    c00139de <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a75:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013a79:	83 ec 0c             	sub    esp,0xc
c0013a7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013a80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a84:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c0013a8a:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013a90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a95:	05 00 10 00 00       	add    eax,0x1000
c0013a9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa1:	e8 d3 3f ff ff       	call   c0007a79 <free>
c0013aa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013aa9:	e8 cb 3f ff ff       	call   c0007a79 <free>
c0013aae:	58                   	pop    eax
c0013aaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ab3:	e8 c1 3f ff ff       	call   c0007a79 <free>
c0013ab8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013abb:	e8 b4 75 ff ff       	call   c000b074 <File::close()>
c0013ac0:	83 c4 10             	add    esp,0x10
c0013ac3:	b0 01                	mov    al,0x1
c0013ac5:	83 c4 3c             	add    esp,0x3c
c0013ac8:	5b                   	pop    ebx
c0013ac9:	5e                   	pop    esi
c0013aca:	5f                   	pop    edi
c0013acb:	5d                   	pop    ebp
c0013acc:	c3                   	ret    

c0013acd <Thr::runtimeReferenceHelper()>:
c0013acd:	83 ec 18             	sub    esp,0x18
c0013ad0:	68 15 0c 02 c0       	push   0xc0020c15
c0013ad5:	e8 fc 6e ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0013ada:	fa                   	cli    
c0013adb:	83 c4 10             	add    esp,0x10
c0013ade:	eb fe                	jmp    c0013ade <Thr::runtimeReferenceHelper()+0x11>

c0013ae0 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013ae0:	57                   	push   edi
c0013ae1:	56                   	push   esi
c0013ae2:	53                   	push   ebx
c0013ae3:	31 db                	xor    ebx,ebx
c0013ae5:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013aeb:	7e 3c                	jle    c0013b29 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013aed:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013af4:	31 ff                	xor    edi,edi
c0013af6:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013afd:	7e 27                	jle    c0013b26 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013aff:	50                   	push   eax
c0013b00:	50                   	push   eax
c0013b01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b07:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b0e:	50                   	push   eax
c0013b0f:	e8 9c cc fe ff       	call   c00007b0 <strcmp>
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	85 c0                	test   eax,eax
c0013b19:	75 05                	jne    c0013b20 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b1e:	eb 0b                	jmp    c0013b2b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b20:	83 c6 10             	add    esi,0x10
c0013b23:	47                   	inc    edi
c0013b24:	eb d0                	jmp    c0013af6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b26:	43                   	inc    ebx
c0013b27:	eb bc                	jmp    c0013ae5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b29:	31 c0                	xor    eax,eax
c0013b2b:	5b                   	pop    ebx
c0013b2c:	5e                   	pop    esi
c0013b2d:	5f                   	pop    edi
c0013b2e:	c3                   	ret    

c0013b2f <Thr::loadKernelSymbolTable(char const*)>:
c0013b2f:	55                   	push   ebp
c0013b30:	57                   	push   edi
c0013b31:	56                   	push   esi
c0013b32:	53                   	push   ebx
c0013b33:	83 ec 68             	sub    esp,0x68
c0013b36:	68 14 01 00 00       	push   0x114
c0013b3b:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b41:	e8 20 3f ff ff       	call   c0007a66 <malloc>
c0013b46:	83 c4 0c             	add    esp,0xc
c0013b49:	56                   	push   esi
c0013b4a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b4e:	89 c3                	mov    ebx,eax
c0013b50:	50                   	push   eax
c0013b51:	e8 02 74 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0013b56:	5e                   	pop    esi
c0013b57:	5f                   	pop    edi
c0013b58:	6a 01                	push   0x1
c0013b5a:	53                   	push   ebx
c0013b5b:	e8 b6 74 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	85 c0                	test   eax,eax
c0013b65:	74 0a                	je     c0013b71 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b67:	83 ec 0c             	sub    esp,0xc
c0013b6a:	68 37 0c 02 c0       	push   0xc0020c37
c0013b6f:	eb 34                	jmp    c0013ba5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b79:	83 ec 0c             	sub    esp,0xc
c0013b7c:	6a 34                	push   0x34
c0013b7e:	e8 e3 3e ff ff       	call   c0007a66 <malloc>
c0013b83:	59                   	pop    ecx
c0013b84:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b88:	89 c7                	mov    edi,eax
c0013b8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b8c:	56                   	push   esi
c0013b8d:	57                   	push   edi
c0013b8e:	6a 00                	push   0x0
c0013b90:	6a 34                	push   0x34
c0013b92:	53                   	push   ebx
c0013b93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b96:	83 c4 20             	add    esp,0x20
c0013b99:	85 c0                	test   eax,eax
c0013b9b:	74 17                	je     c0013bb4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013b9d:	83 ec 0c             	sub    esp,0xc
c0013ba0:	68 4e 0c 02 c0       	push   0xc0020c4e
c0013ba5:	e8 7b cb ff ff       	call   c0010725 <KePanic(char const*)>
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	31 c0                	xor    eax,eax
c0013baf:	e9 34 02 00 00       	jmp    c0013de8 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0013bb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bba:	75 e1                	jne    c0013b9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bbf:	85 c0                	test   eax,eax
c0013bc1:	74 da                	je     c0013b9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bc3:	52                   	push   edx
c0013bc4:	31 d2                	xor    edx,edx
c0013bc6:	52                   	push   edx
c0013bc7:	50                   	push   eax
c0013bc8:	53                   	push   ebx
c0013bc9:	e8 06 75 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013bce:	83 c4 10             	add    esp,0x10
c0013bd1:	85 c0                	test   eax,eax
c0013bd3:	75 c8                	jne    c0013b9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bd5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bd9:	83 ec 0c             	sub    esp,0xc
c0013bdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013be0:	0f af c2             	imul   eax,edx
c0013be3:	50                   	push   eax
c0013be4:	e8 7d 3e ff ff       	call   c0007a66 <malloc>
c0013be9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013beb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013bee:	31 f6                	xor    esi,esi
c0013bf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bf8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013bfc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c00:	0f af c2             	imul   eax,edx
c0013c03:	99                   	cdq    
c0013c04:	52                   	push   edx
c0013c05:	50                   	push   eax
c0013c06:	53                   	push   ebx
c0013c07:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c0a:	83 c4 20             	add    esp,0x20
c0013c0d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c15:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c25:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c2d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c31:	39 f0                	cmp    eax,esi
c0013c33:	0f 86 ab 00 00 00    	jbe    c0013ce4 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c0013c39:	6b ee 28             	imul   ebp,esi,0x28
c0013c3c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0013c40:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0013c43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c47:	50                   	push   eax
c0013c48:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c50:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013c53:	6b c0 28             	imul   eax,eax,0x28
c0013c56:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c5a:	89 d0                	mov    eax,edx
c0013c5c:	31 d2                	xor    edx,edx
c0013c5e:	52                   	push   edx
c0013c5f:	50                   	push   eax
c0013c60:	53                   	push   ebx
c0013c61:	e8 6e 74 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013c66:	83 c4 0c             	add    esp,0xc
c0013c69:	6a 20                	push   0x20
c0013c6b:	6a 00                	push   0x0
c0013c6d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c71:	52                   	push   edx
c0013c72:	e8 79 c8 fe ff       	call   c00004f0 <memset>
c0013c77:	58                   	pop    eax
c0013c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c7a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c7e:	51                   	push   ecx
c0013c7f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c83:	52                   	push   edx
c0013c84:	6a 00                	push   0x0
c0013c86:	6a 1f                	push   0x1f
c0013c88:	53                   	push   ebx
c0013c89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c8c:	83 c4 18             	add    esp,0x18
c0013c8f:	68 65 0c 02 c0       	push   0xc0020c65
c0013c94:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c98:	52                   	push   edx
c0013c99:	e8 12 cb fe ff       	call   c00007b0 <strcmp>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	85 c0                	test   eax,eax
c0013ca3:	75 0f                	jne    c0013cb4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013ca5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013ca8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cb4:	50                   	push   eax
c0013cb5:	50                   	push   eax
c0013cb6:	68 6d 0c 02 c0       	push   0xc0020c6d
c0013cbb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cbf:	50                   	push   eax
c0013cc0:	e8 eb ca fe ff       	call   c00007b0 <strcmp>
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	85 c0                	test   eax,eax
c0013cca:	75 0f                	jne    c0013cdb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013ccc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013ccf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013cd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cdb:	46                   	inc    esi
c0013cdc:	0f b7 f6             	movzx  esi,si
c0013cdf:	e9 49 ff ff ff       	jmp    c0013c2d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013ce4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013ce9:	75 10                	jne    c0013cfb <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0013ceb:	83 ec 0c             	sub    esp,0xc
c0013cee:	68 75 0c 02 c0       	push   0xc0020c75
c0013cf3:	e8 2d ca ff ff       	call   c0010725 <KePanic(char const*)>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d00:	75 10                	jne    c0013d12 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	68 75 0c 02 c0       	push   0xc0020c75
c0013d0a:	e8 16 ca ff ff       	call   c0010725 <KePanic(char const*)>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	50                   	push   eax
c0013d13:	31 d2                	xor    edx,edx
c0013d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d19:	52                   	push   edx
c0013d1a:	50                   	push   eax
c0013d1b:	53                   	push   ebx
c0013d1c:	e8 b3 73 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013d21:	5a                   	pop    edx
c0013d22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d26:	e8 3b 3d ff ff       	call   c0007a66 <malloc>
c0013d2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d2f:	31 c9                	xor    ecx,ecx
c0013d31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d37:	5e                   	pop    esi
c0013d38:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d3c:	55                   	push   ebp
c0013d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d41:	51                   	push   ecx
c0013d42:	52                   	push   edx
c0013d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d47:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d4b:	53                   	push   ebx
c0013d4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d4f:	83 c4 14             	add    esp,0x14
c0013d52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d56:	e8 0b 3d ff ff       	call   c0007a66 <malloc>
c0013d5b:	89 c6                	mov    esi,eax
c0013d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d62:	56                   	push   esi
c0013d63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d67:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d6b:	51                   	push   ecx
c0013d6c:	52                   	push   edx
c0013d6d:	53                   	push   ebx
c0013d6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d75:	83 c4 1c             	add    esp,0x1c
c0013d78:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d7e:	c1 e8 04             	shr    eax,0x4
c0013d81:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d8c:	31 d2                	xor    edx,edx
c0013d8e:	52                   	push   edx
c0013d8f:	50                   	push   eax
c0013d90:	53                   	push   ebx
c0013d91:	e8 3e 73 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013d96:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013d98:	31 d2                	xor    edx,edx
c0013d9a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d9d:	56                   	push   esi
c0013d9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013da2:	52                   	push   edx
c0013da3:	50                   	push   eax
c0013da4:	53                   	push   ebx
c0013da5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013da8:	83 c4 14             	add    esp,0x14
c0013dab:	53                   	push   ebx
c0013dac:	e8 c3 72 ff ff       	call   c000b074 <File::close()>
c0013db1:	5d                   	pop    ebp
c0013db2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013db6:	e8 be 3c ff ff       	call   c0007a79 <free>
c0013dbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dbe:	e8 b6 3c ff ff       	call   c0007a79 <free>
c0013dc3:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013dc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dcc:	83 c4 10             	add    esp,0x10
c0013dcf:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013dd6:	8d 50 01             	lea    edx,[eax+0x1]
c0013dd9:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013de0:	b0 01                	mov    al,0x1
c0013de2:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013de8:	83 c4 5c             	add    esp,0x5c
c0013deb:	5b                   	pop    ebx
c0013dec:	5e                   	pop    esi
c0013ded:	5f                   	pop    edi
c0013dee:	5d                   	pop    ebp
c0013def:	c3                   	ret    

c0013df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013df0:	55                   	push   ebp
c0013df1:	57                   	push   edi
c0013df2:	56                   	push   esi
c0013df3:	53                   	push   ebx
c0013df4:	81 ec 68 03 00 00    	sub    esp,0x368
c0013dfa:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e01:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e07:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0013e0b:	68 14 01 00 00       	push   0x114
c0013e10:	e8 51 3c ff ff       	call   c0007a66 <malloc>
c0013e15:	83 c4 0c             	add    esp,0xc
c0013e18:	53                   	push   ebx
c0013e19:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e20:	50                   	push   eax
c0013e21:	89 c6                	mov    esi,eax
c0013e23:	e8 30 71 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0013e28:	5f                   	pop    edi
c0013e29:	5d                   	pop    ebp
c0013e2a:	6a 01                	push   0x1
c0013e2c:	56                   	push   esi
c0013e2d:	e8 e4 71 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0013e32:	83 c4 10             	add    esp,0x10
c0013e35:	85 c0                	test   eax,eax
c0013e37:	0f 85 bc 06 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e3d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e45:	83 ec 0c             	sub    esp,0xc
c0013e48:	6a 34                	push   0x34
c0013e4a:	e8 17 3c ff ff       	call   c0007a66 <malloc>
c0013e4f:	5b                   	pop    ebx
c0013e50:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e54:	89 c5                	mov    ebp,eax
c0013e56:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e58:	53                   	push   ebx
c0013e59:	55                   	push   ebp
c0013e5a:	6a 00                	push   0x0
c0013e5c:	6a 34                	push   0x34
c0013e5e:	56                   	push   esi
c0013e5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e62:	83 c4 20             	add    esp,0x20
c0013e65:	85 c0                	test   eax,eax
c0013e67:	0f 85 8c 06 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e6d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013e74:	0f 85 7f 06 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e7a:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013e7d:	85 c0                	test   eax,eax
c0013e7f:	0f 84 74 06 00 00    	je     c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e85:	31 d2                	xor    edx,edx
c0013e87:	51                   	push   ecx
c0013e88:	52                   	push   edx
c0013e89:	50                   	push   eax
c0013e8a:	56                   	push   esi
c0013e8b:	e8 44 72 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013e90:	83 c4 10             	add    esp,0x10
c0013e93:	85 c0                	test   eax,eax
c0013e95:	0f 85 5e 06 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013e9b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013e9e:	83 ec 0c             	sub    esp,0xc
c0013ea1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ea5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013ea9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ead:	0f af c2             	imul   eax,edx
c0013eb0:	50                   	push   eax
c0013eb1:	e8 b0 3b ff ff       	call   c0007a66 <malloc>
c0013eb6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013eb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ebf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ec3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013ec7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013ecb:	0f af c2             	imul   eax,edx
c0013ece:	99                   	cdq    
c0013ecf:	52                   	push   edx
c0013ed0:	50                   	push   eax
c0013ed1:	56                   	push   esi
c0013ed2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ed5:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013ed8:	83 c4 20             	add    esp,0x20
c0013edb:	85 c0                	test   eax,eax
c0013edd:	0f 84 16 06 00 00    	je     c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013ee3:	52                   	push   edx
c0013ee4:	31 d2                	xor    edx,edx
c0013ee6:	52                   	push   edx
c0013ee7:	50                   	push   eax
c0013ee8:	56                   	push   esi
c0013ee9:	e8 e6 71 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	85 c0                	test   eax,eax
c0013ef3:	0f 85 00 06 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013ef9:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013efd:	83 ec 0c             	sub    esp,0xc
c0013f00:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f04:	0f af c2             	imul   eax,edx
c0013f07:	50                   	push   eax
c0013f08:	e8 59 3b ff ff       	call   c0007a66 <malloc>
c0013f0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013f0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f1a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0013f1e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f22:	0f af c2             	imul   eax,edx
c0013f25:	99                   	cdq    
c0013f26:	52                   	push   edx
c0013f27:	50                   	push   eax
c0013f28:	56                   	push   esi
c0013f29:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f2c:	83 c4 20             	add    esp,0x20
c0013f2f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f37:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0013f3b:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0013f3f:	0f 86 84 00 00 00    	jbe    c0013fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0013f45:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0013f49:	c1 e7 05             	shl    edi,0x5
c0013f4c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013f50:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013f53:	75 63                	jne    c0013fb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0013f55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013f58:	31 d2                	xor    edx,edx
c0013f5a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013f5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f61:	50                   	push   eax
c0013f62:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013f65:	52                   	push   edx
c0013f66:	50                   	push   eax
c0013f67:	56                   	push   esi
c0013f68:	e8 67 71 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	85 c0                	test   eax,eax
c0013f72:	0f 85 81 05 00 00    	jne    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f78:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f7f:	83 ec 0c             	sub    esp,0xc
c0013f82:	31 d2                	xor    edx,edx
c0013f84:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0013f88:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013f8a:	01 c3                	add    ebx,eax
c0013f8c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f93:	50                   	push   eax
c0013f94:	53                   	push   ebx
c0013f95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013f99:	52                   	push   edx
c0013f9a:	50                   	push   eax
c0013f9b:	56                   	push   esi
c0013f9c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f9f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013fa2:	83 c4 1c             	add    esp,0x1c
c0013fa5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013fa8:	50                   	push   eax
c0013fa9:	6a 00                	push   0x0
c0013fab:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0013faf:	53                   	push   ebx
c0013fb0:	e8 3b c5 fe ff       	call   c00004f0 <memset>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fbc:	40                   	inc    eax
c0013fbd:	0f b7 c0             	movzx  eax,ax
c0013fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fc4:	e9 6e ff ff ff       	jmp    c0013f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c0013fc9:	53                   	push   ebx
c0013fca:	68 00 01 00 00       	push   0x100
c0013fcf:	6a 00                	push   0x0
c0013fd1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fd5:	50                   	push   eax
c0013fd6:	e8 15 c5 fe ff       	call   c00004f0 <memset>
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	68 00 01 00 00       	push   0x100
c0013fe3:	6a 00                	push   0x0
c0013fe5:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013fec:	50                   	push   eax
c0013fed:	e8 fe c4 fe ff       	call   c00004f0 <memset>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013ffd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014005:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001400d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014015:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001401d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014025:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014029:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001402d:	0f 86 25 01 00 00    	jbe    c0014158 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c0014033:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c0014038:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001403c:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c001403f:	52                   	push   edx
c0014040:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014044:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014048:	8b 07                	mov    eax,DWORD PTR [edi]
c001404a:	6b d2 28             	imul   edx,edx,0x28
c001404d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014051:	31 d2                	xor    edx,edx
c0014053:	52                   	push   edx
c0014054:	50                   	push   eax
c0014055:	56                   	push   esi
c0014056:	e8 79 70 ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c001405b:	83 c4 0c             	add    esp,0xc
c001405e:	6a 20                	push   0x20
c0014060:	6a 00                	push   0x0
c0014062:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014069:	51                   	push   ecx
c001406a:	e8 81 c4 fe ff       	call   c00004f0 <memset>
c001406f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014071:	59                   	pop    ecx
c0014072:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014076:	52                   	push   edx
c0014077:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001407e:	51                   	push   ecx
c001407f:	6a 00                	push   0x0
c0014081:	6a 1f                	push   0x1f
c0014083:	56                   	push   esi
c0014084:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014087:	83 c4 1c             	add    esp,0x1c
c001408a:	6a 09                	push   0x9
c001408c:	68 8f 0c 02 c0       	push   0xc0020c8f
c0014091:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014098:	51                   	push   ecx
c0014099:	e8 e2 c2 fe ff       	call   c0000380 <memcmp>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	85 c0                	test   eax,eax
c00140a3:	75 1d                	jne    c00140c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c00140a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140ad:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00140b1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140b4:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00140bb:	89 c8                	mov    eax,ecx
c00140bd:	40                   	inc    eax
c00140be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140c2:	50                   	push   eax
c00140c3:	6a 09                	push   0x9
c00140c5:	68 99 0c 02 c0       	push   0xc0020c99
c00140ca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140d1:	50                   	push   eax
c00140d2:	e8 a9 c2 fe ff       	call   c0000380 <memcmp>
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	85 c0                	test   eax,eax
c00140dc:	75 1d                	jne    c00140fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c00140de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140e6:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00140ea:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140ed:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00140f4:	89 c8                	mov    eax,ecx
c00140f6:	40                   	inc    eax
c00140f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140fb:	50                   	push   eax
c00140fc:	50                   	push   eax
c00140fd:	68 65 0c 02 c0       	push   0xc0020c65
c0014102:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014109:	50                   	push   eax
c001410a:	e8 a1 c6 fe ff       	call   c00007b0 <strcmp>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	85 c0                	test   eax,eax
c0014114:	75 0b                	jne    c0014121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c0014116:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001411a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001411d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014121:	50                   	push   eax
c0014122:	50                   	push   eax
c0014123:	68 6d 0c 02 c0       	push   0xc0020c6d
c0014128:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001412f:	50                   	push   eax
c0014130:	e8 7b c6 fe ff       	call   c00007b0 <strcmp>
c0014135:	83 c4 10             	add    esp,0x10
c0014138:	85 c0                	test   eax,eax
c001413a:	75 0b                	jne    c0014147 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c001413c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014140:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014143:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414b:	40                   	inc    eax
c001414c:	0f b7 c0             	movzx  eax,ax
c001414f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014153:	e9 cd fe ff ff       	jmp    c0014025 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c0014158:	50                   	push   eax
c0014159:	31 d2                	xor    edx,edx
c001415b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001415f:	52                   	push   edx
c0014160:	50                   	push   eax
c0014161:	56                   	push   esi
c0014162:	e8 6d 6f ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0014167:	58                   	pop    eax
c0014168:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001416c:	e8 f5 38 ff ff       	call   c0007a66 <malloc>
c0014171:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014173:	31 d2                	xor    edx,edx
c0014175:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014179:	58                   	pop    eax
c001417a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001417e:	53                   	push   ebx
c001417f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014183:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014187:	52                   	push   edx
c0014188:	50                   	push   eax
c0014189:	56                   	push   esi
c001418a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001418d:	83 c4 14             	add    esp,0x14
c0014190:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014194:	e8 cd 38 ff ff       	call   c0007a66 <malloc>
c0014199:	31 d2                	xor    edx,edx
c001419b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001419f:	83 c4 0c             	add    esp,0xc
c00141a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141a6:	52                   	push   edx
c00141a7:	50                   	push   eax
c00141a8:	56                   	push   esi
c00141a9:	e8 26 6f ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c00141ae:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00141b0:	31 d2                	xor    edx,edx
c00141b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00141b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141bd:	52                   	push   edx
c00141be:	50                   	push   eax
c00141bf:	56                   	push   esi
c00141c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141c3:	83 c4 20             	add    esp,0x20
c00141c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00141ce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141d2:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00141d6:	0f 84 21 03 00 00    	je     c00144fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c00141dc:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00141e3:	31 d2                	xor    edx,edx
c00141e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141e9:	c1 e8 03             	shr    eax,0x3
c00141ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00141f0:	51                   	push   ecx
c00141f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00141f5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00141f9:	52                   	push   edx
c00141fa:	50                   	push   eax
c00141fb:	56                   	push   esi
c00141fc:	e8 d3 6e ff ff       	call   c000b0d4 <File::seek(unsigned long long)>
c0014201:	5b                   	pop    ebx
c0014202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014206:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001420d:	e8 54 38 ff ff       	call   c0007a66 <malloc>
c0014212:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014214:	31 d2                	xor    edx,edx
c0014216:	5f                   	pop    edi
c0014217:	89 c3                	mov    ebx,eax
c0014219:	8d 44 24 58          	lea    eax,[esp+0x58]
c001421d:	50                   	push   eax
c001421e:	53                   	push   ebx
c001421f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014223:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001422a:	52                   	push   edx
c001422b:	50                   	push   eax
c001422c:	56                   	push   esi
c001422d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014230:	83 c4 20             	add    esp,0x20
c0014233:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001423b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001423f:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0014243:	0f 8d 9b 02 00 00    	jge    c00144e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0014249:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c001424e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014252:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0014255:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001425d:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014265:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0014269:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001426d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014271:	c1 e8 08             	shr    eax,0x8
c0014274:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014278:	89 c7                	mov    edi,eax
c001427a:	c1 e7 04             	shl    edi,0x4
c001427d:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c0014281:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c0014284:	85 c9                	test   ecx,ecx
c0014286:	0f 85 bf 00 00 00    	jne    c001434b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001428c:	83 ec 0c             	sub    esp,0xc
c001428f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014293:	03 07                	add    eax,DWORD PTR [edi]
c0014295:	50                   	push   eax
c0014296:	e8 45 f8 ff ff       	call   c0013ae0 <Thr::getAddressOfKernelSymbol(char const*)>
c001429b:	83 c4 10             	add    esp,0x10
c001429e:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00142a3:	85 c0                	test   eax,eax
c00142a5:	89 c1                	mov    ecx,eax
c00142a7:	0f 85 9e 00 00 00    	jne    c001434b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00142ad:	83 ec 0c             	sub    esp,0xc
c00142b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142b4:	03 07                	add    eax,DWORD PTR [edi]
c00142b6:	50                   	push   eax
c00142b7:	e8 54 c6 ff ff       	call   c0010910 <KeResolveCompatibilitySymbol(char*)>
c00142bc:	83 c4 10             	add    esp,0x10
c00142bf:	85 c0                	test   eax,eax
c00142c1:	89 c1                	mov    ecx,eax
c00142c3:	0f 85 82 00 00 00    	jne    c001434b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00142c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00142cd:	50                   	push   eax
c00142ce:	50                   	push   eax
c00142cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142d3:	03 07                	add    eax,DWORD PTR [edi]
c00142d5:	50                   	push   eax
c00142d6:	68 a3 0c 02 c0       	push   0xc0020ca3
c00142db:	e8 f6 66 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00142e0:	58                   	pop    eax
c00142e1:	5a                   	pop    edx
c00142e2:	68 bd 0c 02 c0       	push   0xc0020cbd
c00142e7:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00142ee:	52                   	push   edx
c00142ef:	e8 9c c3 fe ff       	call   c0000690 <strcpy>
c00142f4:	59                   	pop    ecx
c00142f5:	58                   	pop    eax
c00142f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142fa:	03 07                	add    eax,DWORD PTR [edi]
c00142fc:	50                   	push   eax
c00142fd:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014304:	52                   	push   edx
c0014305:	e8 96 c5 fe ff       	call   c00008a0 <strcat>
c001430a:	58                   	pop    eax
c001430b:	5a                   	pop    edx
c001430c:	68 53 0d 02 c0       	push   0xc0020d53
c0014311:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014318:	52                   	push   edx
c0014319:	e8 82 c5 fe ff       	call   c00008a0 <strcat>
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014326:	0f 84 75 01 00 00    	je     c00144a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001432c:	83 ec 0c             	sub    esp,0xc
c001432f:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014336:	52                   	push   edx
c0014337:	e8 e9 c3 ff ff       	call   c0010725 <KePanic(char const*)>
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c0014343:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014347:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001434b:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c0014350:	0f 85 90 00 00 00    	jne    c00143e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c0014356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001435a:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014361:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014365:	01 f8                	add    eax,edi
c0014367:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c001436f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014373:	8b 00                	mov    eax,DWORD PTR [eax]
c0014375:	0f 94 c2             	sete   dl
c0014378:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014380:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014385:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c0014389:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001438e:	74 39                	je     c00143c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c0014390:	8d 3c 08             	lea    edi,[eax+ecx*1]
c0014393:	84 d2                	test   dl,dl
c0014395:	75 15                	jne    c00143ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c0014397:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001439b:	66 83 f8 0c          	cmp    ax,0xc
c001439f:	76 05                	jbe    c00143a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00143a1:	b8 0c 00 00 00       	mov    eax,0xc
c00143a6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143aa:	76 2f                	jbe    c00143db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143ac:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00143b1:	0f 84 ea 00 00 00    	je     c00144a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00143b7:	83 ec 0c             	sub    esp,0xc
c00143ba:	68 d4 0c 02 c0       	push   0xc0020cd4
c00143bf:	e8 61 c3 ff ff       	call   c0010725 <KePanic(char const*)>
c00143c4:	83 c4 10             	add    esp,0x10
c00143c7:	eb 12                	jmp    c00143db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143c9:	01 c7                	add    edi,eax
c00143cb:	84 d2                	test   dl,dl
c00143cd:	75 0c                	jne    c00143db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143cf:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00143d3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143d7:	77 02                	ja     c00143db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00143d9:	01 cf                	add    edi,ecx
c00143db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143df:	89 38                	mov    DWORD PTR [eax],edi
c00143e1:	e9 f5 00 00 00       	jmp    c00144db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00143e6:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c00143eb:	0f 85 82 00 00 00    	jne    c0014473 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c00143f1:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c00143f8:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c00143fc:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0014400:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014408:	74 21                	je     c001442b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c001440a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014412:	74 17                	je     c001442b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014414:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0014418:	b8 0a 00 00 00       	mov    eax,0xa
c001441d:	83 fa 0e             	cmp    edx,0xe
c0014420:	77 03                	ja     c0014425 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c0014422:	8d 42 fc             	lea    eax,[edx-0x4]
c0014425:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014429:	76 1f                	jbe    c001444a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c001442b:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014430:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014434:	74 6b                	je     c00144a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	68 f0 0c 02 c0       	push   0xc0020cf0
c001443e:	e8 e2 c2 ff ff       	call   c0010725 <KePanic(char const*)>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001444a:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001444f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014451:	74 16                	je     c0014469 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c0014453:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014457:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001445e:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014462:	01 c2                	add    edx,eax
c0014464:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014467:	eb 06                	jmp    c001446f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014469:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001446d:	01 c8                	add    eax,ecx
c001446f:	89 07                	mov    DWORD PTR [edi],eax
c0014471:	eb 68                	jmp    c00144db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014473:	57                   	push   edi
c0014474:	57                   	push   edi
c0014475:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001447a:	50                   	push   eax
c001447b:	68 0c 0d 02 c0       	push   0xc0020d0c
c0014480:	e8 51 65 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0014485:	83 c4 10             	add    esp,0x10
c0014488:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c001448d:	74 12                	je     c00144a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001448f:	83 ec 0c             	sub    esp,0xc
c0014492:	68 17 0d 02 c0       	push   0xc0020d17
c0014497:	e8 89 c2 ff ff       	call   c0010725 <KePanic(char const*)>
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	eb 3a                	jmp    c00144db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00144a1:	83 ec 0c             	sub    esp,0xc
c00144a4:	56                   	push   esi
c00144a5:	e8 ca 6b ff ff       	call   c000b074 <File::close()>
c00144aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00144ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00144af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144b5:	e8 bf 35 ff ff       	call   c0007a79 <free>
c00144ba:	59                   	pop    ecx
c00144bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144bf:	e8 b5 35 ff ff       	call   c0007a79 <free>
c00144c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144c7:	e8 ad 35 ff ff       	call   c0007a79 <free>
c00144cc:	5b                   	pop    ebx
c00144cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144d1:	e8 a3 35 ff ff       	call   c0007a79 <free>
c00144d6:	83 c4 10             	add    esp,0x10
c00144d9:	eb 1e                	jmp    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00144db:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00144df:	e9 57 fd ff ff       	jmp    c001423b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c00144e4:	83 ec 0c             	sub    esp,0xc
c00144e7:	53                   	push   ebx
c00144e8:	e8 8c 35 ff ff       	call   c0007a79 <free>
c00144ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00144f1:	83 c4 10             	add    esp,0x10
c00144f4:	e9 d5 fc ff ff       	jmp    c00141ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c00144f9:	31 c0                	xor    eax,eax
c00144fb:	eb 32                	jmp    c001452f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c00144fd:	83 ec 0c             	sub    esp,0xc
c0014500:	56                   	push   esi
c0014501:	e8 6e 6b ff ff       	call   c000b074 <File::close()>
c0014506:	8b 06                	mov    eax,DWORD PTR [esi]
c0014508:	89 34 24             	mov    DWORD PTR [esp],esi
c001450b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001450e:	58                   	pop    eax
c001450f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014513:	e8 61 35 ff ff       	call   c0007a79 <free>
c0014518:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001451b:	e8 59 35 ff ff       	call   c0007a79 <free>
c0014520:	5a                   	pop    edx
c0014521:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014525:	e8 4f 35 ff ff       	call   c0007a79 <free>
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	b0 01                	mov    al,0x1
c001452f:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014535:	5b                   	pop    ebx
c0014536:	5e                   	pop    esi
c0014537:	5f                   	pop    edi
c0014538:	5d                   	pop    ebp
c0014539:	c3                   	ret    

c001453a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001453a:	56                   	push   esi
c001453b:	31 d2                	xor    edx,edx
c001453d:	53                   	push   ebx
c001453e:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014548:	39 d3                	cmp    ebx,edx
c001454a:	7e 1b                	jle    c0014567 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001454c:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014553:	39 c8                	cmp    eax,ecx
c0014555:	77 0d                	ja     c0014564 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014557:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001455e:	01 c6                	add    esi,eax
c0014560:	39 ce                	cmp    esi,ecx
c0014562:	77 05                	ja     c0014569 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014564:	42                   	inc    edx
c0014565:	eb e1                	jmp    c0014548 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014567:	31 c0                	xor    eax,eax
c0014569:	5b                   	pop    ebx
c001456a:	5e                   	pop    esi
c001456b:	c3                   	ret    

c001456c <Thr::getDriverNameFromAddress(unsigned long)>:
c001456c:	53                   	push   ebx
c001456d:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014573:	31 c0                	xor    eax,eax
c0014575:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014579:	39 c3                	cmp    ebx,eax
c001457b:	7e 22                	jle    c001459f <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001457d:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014584:	39 ca                	cmp    edx,ecx
c0014586:	77 14                	ja     c001459c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014588:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c001458f:	39 ca                	cmp    edx,ecx
c0014591:	76 09                	jbe    c001459c <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014593:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c001459a:	eb 05                	jmp    c00145a1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001459c:	40                   	inc    eax
c001459d:	eb da                	jmp    c0014579 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001459f:	31 c0                	xor    eax,eax
c00145a1:	5b                   	pop    ebx
c00145a2:	c3                   	ret    

c00145a3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145a3:	53                   	push   ebx
c00145a4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145a8:	53                   	push   ebx
c00145a9:	e8 8c ff ff ff       	call   c001453a <Thr::getDriverBaseFromAddress(unsigned long)>
c00145ae:	5a                   	pop    edx
c00145af:	31 d2                	xor    edx,edx
c00145b1:	85 c0                	test   eax,eax
c00145b3:	74 04                	je     c00145b9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145b5:	89 da                	mov    edx,ebx
c00145b7:	29 c2                	sub    edx,eax
c00145b9:	5b                   	pop    ebx
c00145ba:	89 d0                	mov    eax,edx
c00145bc:	c3                   	ret    

c00145bd <Thr::loadDLL(char const*, bool)>:
c00145bd:	55                   	push   ebp
c00145be:	57                   	push   edi
c00145bf:	56                   	push   esi
c00145c0:	53                   	push   ebx
c00145c1:	81 ec 34 01 00 00    	sub    esp,0x134
c00145c7:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c00145ce:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c00145d5:	57                   	push   edi
c00145d6:	68 2f 0d 02 c0       	push   0xc0020d2f
c00145db:	e8 f6 63 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00145e0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145e7:	e8 7a 34 ff ff       	call   c0007a66 <malloc>
c00145ec:	83 c4 0c             	add    esp,0xc
c00145ef:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00145f5:	57                   	push   edi
c00145f6:	50                   	push   eax
c00145f7:	89 c6                	mov    esi,eax
c00145f9:	e8 5a 69 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c00145fe:	83 c4 10             	add    esp,0x10
c0014601:	85 f6                	test   esi,esi
c0014603:	75 3a                	jne    c001463f <Thr::loadDLL(char const*, bool)+0x82>
c0014605:	84 db                	test   bl,bl
c0014607:	0f 84 df 01 00 00    	je     c00147ec <Thr::loadDLL(char const*, bool)+0x22f>
c001460d:	50                   	push   eax
c001460e:	50                   	push   eax
c001460f:	68 40 0d 02 c0       	push   0xc0020d40
c0014614:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014618:	55                   	push   ebp
c0014619:	e8 72 c0 fe ff       	call   c0000690 <strcpy>
c001461e:	58                   	pop    eax
c001461f:	5a                   	pop    edx
c0014620:	57                   	push   edi
c0014621:	55                   	push   ebp
c0014622:	e8 79 c2 fe ff       	call   c00008a0 <strcat>
c0014627:	59                   	pop    ecx
c0014628:	58                   	pop    eax
c0014629:	68 53 0d 02 c0       	push   0xc0020d53
c001462e:	55                   	push   ebp
c001462f:	e8 6c c2 fe ff       	call   c00008a0 <strcat>
c0014634:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014637:	e8 e9 c0 ff ff       	call   c0010725 <KePanic(char const*)>
c001463c:	83 c4 10             	add    esp,0x10
c001463f:	50                   	push   eax
c0014640:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014644:	50                   	push   eax
c0014645:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014649:	50                   	push   eax
c001464a:	56                   	push   esi
c001464b:	e8 6c 6c ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0014650:	83 c4 10             	add    esp,0x10
c0014653:	85 f6                	test   esi,esi
c0014655:	74 0c                	je     c0014663 <Thr::loadDLL(char const*, bool)+0xa6>
c0014657:	8b 06                	mov    eax,DWORD PTR [esi]
c0014659:	83 ec 0c             	sub    esp,0xc
c001465c:	56                   	push   esi
c001465d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014668:	75 0a                	jne    c0014674 <Thr::loadDLL(char const*, bool)+0xb7>
c001466a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001466e:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014672:	75 3c                	jne    c00146b0 <Thr::loadDLL(char const*, bool)+0xf3>
c0014674:	31 f6                	xor    esi,esi
c0014676:	84 db                	test   bl,bl
c0014678:	0f 84 6e 01 00 00    	je     c00147ec <Thr::loadDLL(char const*, bool)+0x22f>
c001467e:	50                   	push   eax
c001467f:	50                   	push   eax
c0014680:	68 40 0d 02 c0       	push   0xc0020d40
c0014685:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014689:	56                   	push   esi
c001468a:	e8 01 c0 fe ff       	call   c0000690 <strcpy>
c001468f:	58                   	pop    eax
c0014690:	5a                   	pop    edx
c0014691:	57                   	push   edi
c0014692:	56                   	push   esi
c0014693:	e8 08 c2 fe ff       	call   c00008a0 <strcat>
c0014698:	59                   	pop    ecx
c0014699:	5d                   	pop    ebp
c001469a:	68 53 0d 02 c0       	push   0xc0020d53
c001469f:	56                   	push   esi
c00146a0:	e8 fb c1 fe ff       	call   c00008a0 <strcat>
c00146a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00146a8:	e8 78 c0 ff ff       	call   c0010725 <KePanic(char const*)>
c00146ad:	83 c4 10             	add    esp,0x10
c00146b0:	56                   	push   esi
c00146b1:	6a 03                	push   0x3
c00146b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146bb:	05 ff 0f 00 00       	add    eax,0xfff
c00146c0:	83 d2 00             	adc    edx,0x0
c00146c3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146c7:	50                   	push   eax
c00146c8:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146ce:	e8 03 57 ff ff       	call   c0009dd6 <VAS::allocatePages(int, int)>
c00146d3:	89 c6                	mov    esi,eax
c00146d5:	58                   	pop    eax
c00146d6:	5a                   	pop    edx
c00146d7:	56                   	push   esi
c00146d8:	68 ce f8 01 c0       	push   0xc001f8ce
c00146dd:	e8 f4 62 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00146e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00146e5:	e8 a6 be fe ff       	call   c0000590 <strlen>
c00146ea:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00146f0:	40                   	inc    eax
c00146f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00146f4:	e8 6d 33 ff ff       	call   c0007a66 <malloc>
c00146f9:	59                   	pop    ecx
c00146fa:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014701:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014706:	5d                   	pop    ebp
c0014707:	57                   	push   edi
c0014708:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001470f:	e8 7c bf fe ff       	call   c0000690 <strcpy>
c0014714:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014719:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c0014720:	8d 50 01             	lea    edx,[eax+0x1]
c0014723:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014729:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001472d:	83 c4 0c             	add    esp,0xc
c0014730:	6a 01                	push   0x1
c0014732:	56                   	push   esi
c0014733:	57                   	push   edi
c0014734:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001473b:	e8 b0 f6 ff ff       	call   c0013df0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014740:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014744:	83 c4 10             	add    esp,0x10
c0014747:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001474c:	74 2d                	je     c001477b <Thr::loadDLL(char const*, bool)+0x1be>
c001474e:	84 db                	test   bl,bl
c0014750:	74 12                	je     c0014764 <Thr::loadDLL(char const*, bool)+0x1a7>
c0014752:	83 ec 0c             	sub    esp,0xc
c0014755:	68 55 0d 02 c0       	push   0xc0020d55
c001475a:	e8 c6 bf ff ff       	call   c0010725 <KePanic(char const*)>
c001475f:	83 c4 10             	add    esp,0x10
c0014762:	eb 07                	jmp    c001476b <Thr::loadDLL(char const*, bool)+0x1ae>
c0014764:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0014769:	75 10                	jne    c001477b <Thr::loadDLL(char const*, bool)+0x1be>
c001476b:	83 ec 0c             	sub    esp,0xc
c001476e:	68 74 0d 02 c0       	push   0xc0020d74
c0014773:	e8 ad bf ff ff       	call   c0010725 <KePanic(char const*)>
c0014778:	83 c4 10             	add    esp,0x10
c001477b:	31 ff                	xor    edi,edi
c001477d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014781:	bb 00 00 00 00       	mov    ebx,0x0
c0014786:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001478a:	05 ff 0f 00 00       	add    eax,0xfff
c001478f:	83 d2 00             	adc    edx,0x0
c0014792:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014796:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001479a:	c1 ea 0c             	shr    edx,0xc
c001479d:	89 d8                	mov    eax,ebx
c001479f:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00147a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147a7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147ab:	73 32                	jae    c00147df <Thr::loadDLL(char const*, bool)+0x222>
c00147ad:	50                   	push   eax
c00147ae:	50                   	push   eax
c00147af:	89 f8                	mov    eax,edi
c00147b1:	c1 e0 0c             	shl    eax,0xc
c00147b4:	01 f0                	add    eax,esi
c00147b6:	50                   	push   eax
c00147b7:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147bd:	e8 b8 50 ff ff       	call   c000987a <VAS::getPageTableEntry(unsigned long)>
c00147c2:	83 c4 10             	add    esp,0x10
c00147c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00147c7:	a8 60                	test   al,0x60
c00147c9:	75 11                	jne    c00147dc <Thr::loadDLL(char const*, bool)+0x21f>
c00147cb:	83 ec 0c             	sub    esp,0xc
c00147ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147d3:	50                   	push   eax
c00147d4:	e8 2b 35 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c00147d9:	83 c4 10             	add    esp,0x10
c00147dc:	47                   	inc    edi
c00147dd:	eb 9e                	jmp    c001477d <Thr::loadDLL(char const*, bool)+0x1c0>
c00147df:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00147e4:	b8 00 00 00 00       	mov    eax,0x0
c00147e9:	0f 44 f0             	cmove  esi,eax
c00147ec:	81 c4 2c 01 00 00    	add    esp,0x12c
c00147f2:	89 f0                	mov    eax,esi
c00147f4:	5b                   	pop    ebx
c00147f5:	5e                   	pop    esi
c00147f6:	5f                   	pop    edi
c00147f7:	5d                   	pop    ebp
c00147f8:	c3                   	ret    

c00147f9 <Thr::executeDLL(unsigned long, void*)>:
c00147f9:	56                   	push   esi
c00147fa:	53                   	push   ebx
c00147fb:	52                   	push   edx
c00147fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014800:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014804:	85 db                	test   ebx,ebx
c0014806:	75 10                	jne    c0014818 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	68 90 0d 02 c0       	push   0xc0020d90
c0014810:	e8 10 bf ff ff       	call   c0010725 <KePanic(char const*)>
c0014815:	83 c4 10             	add    esp,0x10
c0014818:	50                   	push   eax
c0014819:	50                   	push   eax
c001481a:	53                   	push   ebx
c001481b:	68 ba 0d 02 c0       	push   0xc0020dba
c0014820:	e8 b1 61 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0014825:	89 d8                	mov    eax,ebx
c0014827:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001482b:	83 c4 14             	add    esp,0x14
c001482e:	5b                   	pop    ebx
c001482f:	5e                   	pop    esi
c0014830:	ff e0                	jmp    eax
c0014832:	66 90                	xchg   ax,ax
c0014834:	66 90                	xchg   ax,ax
c0014836:	66 90                	xchg   ax,ax
c0014838:	66 90                	xchg   ax,ax
c001483a:	66 90                	xchg   ax,ax
c001483c:	66 90                	xchg   ax,ax
c001483e:	66 90                	xchg   ax,ax

c0014840 <userModeEntryPoint(void*)>:
c0014840:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014845:	48                   	dec    eax
c0014846:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001484b:	75 03                	jne    c0014850 <userModeEntryPoint(void*)+0x10>
c001484d:	fb                   	sti    
c001484e:	66 90                	xchg   ax,ax
c0014850:	fb                   	sti    
c0014851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014856:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014859:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001485f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014863:	e9 d7 b9 fe ff       	jmp    c000023f <goToUsermode>

c0014868 <changeTSS>:
c0014868:	83 ec 1c             	sub    esp,0x1c
c001486b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014870:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014873:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014878:	c1 e2 15             	shl    edx,0x15
c001487b:	29 d0                	sub    eax,edx
c001487d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014881:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014886:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001488c:	05 7c 11 00 00       	add    eax,0x117c
c0014891:	89 04 24             	mov    DWORD PTR [esp],eax
c0014894:	e8 47 46 ff ff       	call   c0008ee0 <TSS::setESP(unsigned long)>
c0014899:	83 c4 1c             	add    esp,0x1c
c001489c:	c3                   	ret    
c001489d:	8d 76 00             	lea    esi,[esi+0x0]

c00148a0 <switchToThread(ThreadControlBlock*)>:
c00148a0:	83 ec 1c             	sub    esp,0x1c
c00148a3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00148a7:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c00148ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00148b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00148b5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00148b9:	85 f6                	test   esi,esi
c00148bb:	0f 85 97 00 00 00    	jne    c0014958 <switchToThread(ThreadControlBlock*)+0xb8>
c00148c1:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c00148c5:	3c ff                	cmp    al,0xff
c00148c7:	0f 84 87 00 00 00    	je     c0014954 <switchToThread(ThreadControlBlock*)+0xb4>
c00148cd:	0f b6 d0             	movzx  edx,al
c00148d0:	b8 00 04 00 00       	mov    eax,0x400
c00148d5:	29 d0                	sub    eax,edx
c00148d7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148da:	d1 f8                	sar    eax,1
c00148dc:	01 d0                	add    eax,edx
c00148de:	66 90                	xchg   ax,ax
c00148e0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148e3:	e8 bb 25 00 00       	call   c0016ea3 <HalQueryPerformanceCounter()>
c00148e8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148ed:	89 c6                	mov    esi,eax
c00148ef:	89 d7                	mov    edi,edx
c00148f1:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148f7:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148fc:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014902:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014908:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001490e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014914:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c001491a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014920:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014923:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014926:	01 c6                	add    esi,eax
c0014928:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001492b:	11 d7                	adc    edi,edx
c001492d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014933:	e8 3f b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014938:	0f 20 c0             	mov    eax,cr0
c001493b:	83 c8 08             	or     eax,0x8
c001493e:	0f 22 c0             	mov    cr0,eax
c0014941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014945:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014949:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001494d:	83 c4 1c             	add    esp,0x1c
c0014950:	c3                   	ret    
c0014951:	8d 76 00             	lea    esi,[esi+0x0]
c0014954:	31 c0                	xor    eax,eax
c0014956:	eb 88                	jmp    c00148e0 <switchToThread(ThreadControlBlock*)+0x40>
c0014958:	b9 01 00 00 00       	mov    ecx,0x1
c001495d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014961:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0014967:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001496b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001496f:	83 c4 1c             	add    esp,0x1c
c0014972:	c3                   	ret    
c0014973:	90                   	nop

c0014974 <Process::addArgs(char**)>:
c0014974:	57                   	push   edi
c0014975:	31 c0                	xor    eax,eax
c0014977:	56                   	push   esi
c0014978:	53                   	push   ebx
c0014979:	83 ec 10             	sub    esp,0x10
c001497c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0014980:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014984:	85 ff                	test   edi,edi
c0014986:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c001498c:	74 42                	je     c00149d0 <Process::addArgs(char**)+0x5c>
c001498e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014990:	85 c0                	test   eax,eax
c0014992:	74 3c                	je     c00149d0 <Process::addArgs(char**)+0x5c>
c0014994:	31 db                	xor    ebx,ebx
c0014996:	66 90                	xchg   ax,ax
c0014998:	89 04 24             	mov    DWORD PTR [esp],eax
c001499b:	e8 f0 bb fe ff       	call   c0000590 <strlen>
c00149a0:	40                   	inc    eax
c00149a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00149a4:	e8 bd 30 ff ff       	call   c0007a66 <malloc>
c00149a9:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00149b0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00149b3:	43                   	inc    ebx
c00149b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00149b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00149bb:	e8 d0 bc fe ff       	call   c0000690 <strcpy>
c00149c0:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00149c6:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00149c9:	85 c0                	test   eax,eax
c00149cb:	75 cb                	jne    c0014998 <Process::addArgs(char**)+0x24>
c00149cd:	8d 76 00             	lea    esi,[esi+0x0]
c00149d0:	83 c4 10             	add    esp,0x10
c00149d3:	5b                   	pop    ebx
c00149d4:	5e                   	pop    esi
c00149d5:	5f                   	pop    edi
c00149d6:	c3                   	ret    
c00149d7:	90                   	nop

c00149d8 <Process::Process(char const*, Process*, char**)>:
c00149d8:	56                   	push   esi
c00149d9:	53                   	push   ebx
c00149da:	83 ec 24             	sub    esp,0x24
c00149dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149e1:	05 0c 02 00 00       	add    eax,0x20c
c00149e6:	bb 07 00 00 00       	mov    ebx,0x7
c00149eb:	89 c6                	mov    esi,eax
c00149ed:	8d 76 00             	lea    esi,[esi+0x0]
c00149f0:	85 db                	test   ebx,ebx
c00149f2:	78 10                	js     c0014a04 <Process::Process(char const*, Process*, char**)+0x2c>
c00149f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00149f7:	e8 bc a1 00 00       	call   c001ebb8 <ThreadControlBlock::ThreadControlBlock()>
c00149fc:	83 c6 5f             	add    esi,0x5f
c00149ff:	4b                   	dec    ebx
c0014a00:	eb ee                	jmp    c00149f0 <Process::Process(char const*, Process*, char**)+0x18>
c0014a02:	66 90                	xchg   ax,ax
c0014a04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a21:	e8 f4 ba ff ff       	call   c001051a <Krnl::newProcessEnv(Process*)>
c0014a26:	89 c2                	mov    edx,eax
c0014a28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a3f:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c0014a44:	8d 50 01             	lea    edx,[eax+0x1]
c0014a47:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c0014a4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014a51:	89 02                	mov    DWORD PTR [edx],eax
c0014a53:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c0014a5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a62:	e8 ff 2f ff ff       	call   c0007a66 <malloc>
c0014a67:	89 c3                	mov    ebx,eax
c0014a69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014a71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a74:	e8 5d 57 ff ff       	call   c000a1d6 <VAS::VAS(bool)>
c0014a79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a7d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a87:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a95:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014a99:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a9f:	e8 6e c0 ff ff       	call   c0010b12 <KeInitSignals()>
c0014aa4:	89 c2                	mov    edx,eax
c0014aa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aaa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ab4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aba:	85 c0                	test   eax,eax
c0014abc:	74 42                	je     c0014b00 <Process::Process(char const*, Process*, char**)+0x128>
c0014abe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ac2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ac8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ace:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ad2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ad8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014adc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ae2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014aec:	05 0c 01 00 00       	add    eax,0x10c
c0014af1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014af5:	89 04 24             	mov    DWORD PTR [esp],eax
c0014af8:	e8 93 bb fe ff       	call   c0000690 <strcpy>
c0014afd:	eb 5d                	jmp    c0014b5c <Process::Process(char const*, Process*, char**)+0x184>
c0014aff:	90                   	nop
c0014b00:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0014b08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b0f:	e8 52 2f ff ff       	call   c0007a66 <malloc>
c0014b14:	89 c3                	mov    ebx,eax
c0014b16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b21:	e8 ae 40 ff ff       	call   c0008bd4 <VgaText::VgaText(char const*)>
c0014b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b2a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b3d:	e8 3c 39 ff ff       	call   c000847e <addToTerminalCycle(VgaText*)>
c0014b42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b46:	05 0c 01 00 00       	add    eax,0x10c
c0014b4b:	c7 44 24 04 d9 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dd9
c0014b53:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b56:	e8 35 bb fe ff       	call   c0000690 <strcpy>
c0014b5b:	90                   	nop
c0014b5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b60:	8d 50 0c             	lea    edx,[eax+0xc]
c0014b63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b6b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014b6e:	e8 1d bb fe ff       	call   c0000690 <strcpy>
c0014b73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014b77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b82:	e8 ed fd ff ff       	call   c0014974 <Process::addArgs(char**)>
c0014b87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014b8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b93:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b96:	e8 0f ed ff ff       	call   c00138aa <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b9b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014b9f:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014ba4:	34 01                	xor    al,0x1
c0014ba6:	88 c2                	mov    dl,al
c0014ba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bac:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bb2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014bb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bbb:	c7 04 24 30 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e30
c0014bc2:	e8 0f 5e ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0014bc7:	90                   	nop
c0014bc8:	83 c4 24             	add    esp,0x24
c0014bcb:	5b                   	pop    ebx
c0014bcc:	5e                   	pop    esi
c0014bcd:	c3                   	ret    
c0014bce:	66 90                	xchg   ax,ax

c0014bd0 <Process::Process(bool, char const*, Process*, char**)>:
c0014bd0:	56                   	push   esi
c0014bd1:	53                   	push   ebx
c0014bd2:	83 ec 34             	sub    esp,0x34
c0014bd5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014bd9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014bdd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014be1:	05 0c 02 00 00       	add    eax,0x20c
c0014be6:	bb 07 00 00 00       	mov    ebx,0x7
c0014beb:	89 c6                	mov    esi,eax
c0014bed:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf0:	85 db                	test   ebx,ebx
c0014bf2:	78 10                	js     c0014c04 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0014bf4:	89 34 24             	mov    DWORD PTR [esp],esi
c0014bf7:	e8 bc 9f 00 00       	call   c001ebb8 <ThreadControlBlock::ThreadControlBlock()>
c0014bfc:	83 c6 5f             	add    esi,0x5f
c0014bff:	4b                   	dec    ebx
c0014c00:	eb ee                	jmp    c0014bf0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c02:	66 90                	xchg   ax,ax
c0014c04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c08:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c13:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c21:	e8 f4 b8 ff ff       	call   c001051a <Krnl::newProcessEnv(Process*)>
c0014c26:	89 c2                	mov    edx,eax
c0014c28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c2c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c32:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c36:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c3f:	a1 80 1f 02 c0       	mov    eax,ds:0xc0021f80
c0014c44:	8d 50 01             	lea    edx,[eax+0x1]
c0014c47:	89 15 80 1f 02 c0    	mov    DWORD PTR ds:0xc0021f80,edx
c0014c4d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014c51:	89 02                	mov    DWORD PTR [edx],eax
c0014c53:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c0014c5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c62:	e8 ff 2d ff ff       	call   c0007a66 <malloc>
c0014c67:	89 c3                	mov    ebx,eax
c0014c69:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c75:	e8 5c 55 ff ff       	call   c000a1d6 <VAS::VAS(bool)>
c0014c7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c7e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c88:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014c96:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014c9a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ca0:	e8 6d be ff ff       	call   c0010b12 <KeInitSignals()>
c0014ca5:	89 c2                	mov    edx,eax
c0014ca7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cab:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cb5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cbb:	85 c0                	test   eax,eax
c0014cbd:	74 41                	je     c0014d00 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0014cbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cc3:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cc9:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ccf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cd3:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cd9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cdd:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ce3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ce9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ced:	05 0c 01 00 00       	add    eax,0x10c
c0014cf2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014cf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cf9:	e8 92 b9 fe ff       	call   c0000690 <strcpy>
c0014cfe:	eb 5c                	jmp    c0014d5c <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0014d00:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0014d08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d0f:	e8 52 2d ff ff       	call   c0007a66 <malloc>
c0014d14:	89 c3                	mov    ebx,eax
c0014d16:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d21:	e8 ae 3e ff ff       	call   c0008bd4 <VgaText::VgaText(char const*)>
c0014d26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d2a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d3d:	e8 3c 37 ff ff       	call   c000847e <addToTerminalCycle(VgaText*)>
c0014d42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d46:	05 0c 01 00 00       	add    eax,0x10c
c0014d4b:	c7 44 24 04 d9 0d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020dd9
c0014d53:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d56:	e8 35 b9 fe ff       	call   c0000690 <strcpy>
c0014d5b:	90                   	nop
c0014d5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d60:	8d 50 0c             	lea    edx,[eax+0xc]
c0014d63:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d6b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014d6e:	e8 1d b9 fe ff       	call   c0000690 <strcpy>
c0014d73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d82:	e8 ed fb ff ff       	call   c0014974 <Process::addArgs(char**)>
c0014d87:	90                   	nop
c0014d88:	83 c4 34             	add    esp,0x34
c0014d8b:	5b                   	pop    ebx
c0014d8c:	5e                   	pop    esi
c0014d8d:	c3                   	ret    
c0014d8e:	66 90                	xchg   ax,ax

c0014d90 <taskStartupFunction>:
c0014d90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d95:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d98:	c3                   	ret    
c0014d99:	90                   	nop
c0014d9a:	66 90                	xchg   ax,ax

c0014d9c <Semaphore::Semaphore(int)>:
c0014d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014da4:	89 10                	mov    DWORD PTR [eax],edx
c0014da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014daa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014db1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014dc7:	90                   	nop
c0014dc8:	c3                   	ret    
c0014dc9:	90                   	nop
c0014dca:	66 90                	xchg   ax,ax

c0014dcc <Mutex::Mutex()>:
c0014dcc:	83 ec 08             	sub    esp,0x8
c0014dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014dd3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0014ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dde:	e8 b9 ff ff ff       	call   c0014d9c <Semaphore::Semaphore(int)>
c0014de3:	90                   	nop
c0014de4:	83 c4 08             	add    esp,0x8
c0014de7:	c3                   	ret    

c0014de8 <Process::createThread(void (*)(void*), void*, int)>:
c0014de8:	57                   	push   edi
c0014de9:	31 c9                	xor    ecx,ecx
c0014deb:	56                   	push   esi
c0014dec:	53                   	push   ebx
c0014ded:	83 ec 10             	sub    esp,0x10
c0014df0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014df4:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c0014dfb:	89 d0                	mov    eax,edx
c0014dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0014e00:	a8 01                	test   al,0x1
c0014e02:	74 14                	je     c0014e18 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e04:	d1 e8                	shr    eax,1
c0014e06:	41                   	inc    ecx
c0014e07:	83 f9 10             	cmp    ecx,0x10
c0014e0a:	75 f4                	jne    c0014e00 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	31 db                	xor    ebx,ebx
c0014e11:	89 d8                	mov    eax,ebx
c0014e13:	5b                   	pop    ebx
c0014e14:	5e                   	pop    esi
c0014e15:	5f                   	pop    edi
c0014e16:	c3                   	ret    
c0014e17:	90                   	nop
c0014e18:	b8 01 00 00 00       	mov    eax,0x1
c0014e1d:	d3 e0                	shl    eax,cl
c0014e1f:	09 d0                	or     eax,edx
c0014e21:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014e28:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e2b:	c1 e0 05             	shl    eax,0x5
c0014e2e:	29 c8                	sub    eax,ecx
c0014e30:	01 d8                	add    eax,ebx
c0014e32:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e39:	75 09                	jne    c0014e44 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014e3b:	31 f6                	xor    esi,esi
c0014e3d:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0014e43:	90                   	nop
c0014e44:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e4a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e4d:	c1 e6 05             	shl    esi,0x5
c0014e50:	29 ce                	sub    esi,ecx
c0014e52:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e55:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e58:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e5e:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014e64:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e6a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014e71:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e7b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e81:	89 ca                	mov    edx,ecx
c0014e83:	31 c9                	xor    ecx,ecx
c0014e85:	f7 da                	neg    edx
c0014e87:	c1 e2 15             	shl    edx,0x15
c0014e8a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e90:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e96:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c0014e9b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014ea1:	31 d2                	xor    edx,edx
c0014ea3:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c0014ea9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ead:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014eb3:	31 d2                	xor    edx,edx
c0014eb5:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c0014ebb:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c0014ec1:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014ec8:	e8 99 2b ff ff       	call   c0007a66 <malloc>
c0014ecd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014ed0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014ed4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014edb:	e8 98 9a 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	89 d8                	mov    eax,ebx
c0014ee5:	5b                   	pop    ebx
c0014ee6:	5e                   	pop    esi
c0014ee7:	5f                   	pop    edi
c0014ee8:	c3                   	ret    
c0014ee9:	90                   	nop
c0014eea:	66 90                	xchg   ax,ax

c0014eec <Process::createUserThread()>:
c0014eec:	83 ec 1c             	sub    esp,0x1c
c0014eef:	b8 80 00 00 00       	mov    eax,0x80
c0014ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efc:	31 d2                	xor    edx,edx
c0014efe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0014f02:	b9 40 48 01 c0       	mov    ecx,0xc0014840
c0014f07:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0014f0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f0e:	e8 d5 fe ff ff       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0014f13:	83 c4 1c             	add    esp,0x1c
c0014f16:	c3                   	ret    
c0014f17:	90                   	nop

c0014f18 <setupMultitasking(void (*)())>:
c0014f18:	56                   	push   esi
c0014f19:	53                   	push   ebx
c0014f1a:	83 ec 24             	sub    esp,0x24
c0014f1d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014f21:	eb 0d                	jmp    c0014f30 <setupMultitasking(void (*)())+0x18>
c0014f23:	90                   	nop
c0014f24:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014f2b:	e8 9c 99 00 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f30:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014f37:	e8 6c 99 00 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f3c:	84 c0                	test   al,al
c0014f3e:	74 e4                	je     c0014f24 <setupMultitasking(void (*)())+0xc>
c0014f40:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0014f47:	e8 1a 2b ff ff       	call   c0007a66 <malloc>
c0014f4c:	31 d2                	xor    edx,edx
c0014f4e:	b9 dd 0d 02 c0       	mov    ecx,0xc0020ddd
c0014f53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014f5b:	89 c3                	mov    ebx,eax
c0014f5d:	31 c0                	xor    eax,eax
c0014f5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f63:	b8 01 00 00 00       	mov    eax,0x1
c0014f68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f6f:	e8 5c fc ff ff       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0014f74:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f7a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f80:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f83:	e8 4b 37 ff ff       	call   c00086d3 <setActiveTerminal(VgaText*)>
c0014f88:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c0014f8f:	31 d2                	xor    edx,edx
c0014f91:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c0014f96:	83 c8 01             	or     eax,0x1
c0014f99:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fa0:	31 c0                	xor    eax,eax
c0014fa2:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c0014fa8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fb1:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c0014fb7:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fbd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fc3:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c0014fc8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0014fce:	31 c0                	xor    eax,eax
c0014fd0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0014fd6:	b8 01 00 00 00       	mov    eax,0x1
c0014fdb:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c0014fe1:	31 c0                	xor    eax,eax
c0014fe3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fe9:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fef:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c0014ff5:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c0014ffb:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015002:	e8 5f 2a ff ff       	call   c0007a66 <malloc>
c0015007:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001500d:	b8 d9 0d 02 c0       	mov    eax,0xc0020dd9
c0015012:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015018:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001501c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015022:	89 04 24             	mov    DWORD PTR [esp],eax
c0015025:	e8 66 b6 fe ff       	call   c0000690 <strcpy>
c001502a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015031:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015035:	83 c4 24             	add    esp,0x24
c0015038:	5b                   	pop    ebx
c0015039:	5e                   	pop    esi
c001503a:	e9 2a b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001503f:	90                   	nop

c0015040 <schedule()>:
c0015040:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015046:	85 d2                	test   edx,edx
c0015048:	74 0e                	je     c0015058 <schedule()+0x18>
c001504a:	b8 01 00 00 00       	mov    eax,0x1
c001504f:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015054:	c3                   	ret    
c0015055:	8d 76 00             	lea    esi,[esi+0x0]
c0015058:	53                   	push   ebx
c0015059:	83 ec 18             	sub    esp,0x18
c001505c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015063:	e8 40 98 00 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015068:	84 c0                	test   al,al
c001506a:	75 38                	jne    c00150a4 <schedule()+0x64>
c001506c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015071:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015074:	4a                   	dec    edx
c0015075:	74 35                	je     c00150ac <schedule()+0x6c>
c0015077:	90                   	nop
c0015078:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001507f:	e8 40 98 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015084:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001508b:	89 c3                	mov    ebx,eax
c001508d:	e8 3a 98 00 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015092:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015099:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001509c:	e8 ff f7 ff ff       	call   c00148a0 <switchToThread(ThreadControlBlock*)>
c00150a1:	8d 76 00             	lea    esi,[esi+0x0]
c00150a4:	83 c4 18             	add    esp,0x18
c00150a7:	5b                   	pop    ebx
c00150a8:	c3                   	ret    
c00150a9:	8d 76 00             	lea    esi,[esi+0x0]
c00150ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150b8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00150bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00150c3:	e8 b0 98 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150c8:	eb ae                	jmp    c0015078 <schedule()+0x38>
c00150ca:	66 90                	xchg   ax,ax

c00150cc <Semaphore::tryAcquire()>:
c00150cc:	53                   	push   ebx
c00150cd:	83 ec 08             	sub    esp,0x8
c00150d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150d4:	fa                   	cli    
c00150d5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150db:	8d 42 01             	lea    eax,[edx+0x1]
c00150de:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150e3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150e8:	8d 58 01             	lea    ebx,[eax+0x1]
c00150eb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150f1:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150f4:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150f6:	7c 2c                	jl     c0015124 <Semaphore::tryAcquire()+0x58>
c00150f8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00150fd:	85 c0                	test   eax,eax
c00150ff:	75 0b                	jne    c001510c <Semaphore::tryAcquire()+0x40>
c0015101:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015107:	85 c9                	test   ecx,ecx
c0015109:	75 55                	jne    c0015160 <Semaphore::tryAcquire()+0x94>
c001510b:	90                   	nop
c001510c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015112:	31 c0                	xor    eax,eax
c0015114:	85 d2                	test   edx,edx
c0015116:	75 04                	jne    c001511c <Semaphore::tryAcquire()+0x50>
c0015118:	fb                   	sti    
c0015119:	8d 76 00             	lea    esi,[esi+0x0]
c001511c:	83 c4 08             	add    esp,0x8
c001511f:	5b                   	pop    ebx
c0015120:	c3                   	ret    
c0015121:	8d 76 00             	lea    esi,[esi+0x0]
c0015124:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015129:	43                   	inc    ebx
c001512a:	85 c0                	test   eax,eax
c001512c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001512f:	75 1f                	jne    c0015150 <Semaphore::tryAcquire()+0x84>
c0015131:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015136:	85 c0                	test   eax,eax
c0015138:	74 16                	je     c0015150 <Semaphore::tryAcquire()+0x84>
c001513a:	31 db                	xor    ebx,ebx
c001513c:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c0015142:	e8 f9 fe ff ff       	call   c0015040 <schedule()>
c0015147:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001514c:	8d 50 ff             	lea    edx,[eax-0x1]
c001514f:	90                   	nop
c0015150:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015156:	85 d2                	test   edx,edx
c0015158:	b0 01                	mov    al,0x1
c001515a:	75 c0                	jne    c001511c <Semaphore::tryAcquire()+0x50>
c001515c:	eb ba                	jmp    c0015118 <Semaphore::tryAcquire()+0x4c>
c001515e:	66 90                	xchg   ax,ax
c0015160:	31 c0                	xor    eax,eax
c0015162:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015167:	e8 d4 fe ff ff       	call   c0015040 <schedule()>
c001516c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015171:	8d 50 ff             	lea    edx,[eax-0x1]
c0015174:	31 c0                	xor    eax,eax
c0015176:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001517c:	85 d2                	test   edx,edx
c001517e:	75 9c                	jne    c001511c <Semaphore::tryAcquire()+0x50>
c0015180:	eb 96                	jmp    c0015118 <Semaphore::tryAcquire()+0x4c>
c0015182:	66 90                	xchg   ax,ax

c0015184 <Semaphore::assertLocked(char const*)>:
c0015184:	83 ec 1c             	sub    esp,0x1c
c0015187:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001518b:	fa                   	cli    
c001518c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015191:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015197:	8d 48 01             	lea    ecx,[eax+0x1]
c001519a:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151a2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151a5:	7c 29                	jl     c00151d0 <Semaphore::assertLocked(char const*)+0x4c>
c00151a7:	90                   	nop
c00151a8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151ad:	85 c0                	test   eax,eax
c00151af:	75 0b                	jne    c00151bc <Semaphore::assertLocked(char const*)+0x38>
c00151b1:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00151b7:	85 d2                	test   edx,edx
c00151b9:	75 29                	jne    c00151e4 <Semaphore::assertLocked(char const*)+0x60>
c00151bb:	90                   	nop
c00151bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151c1:	48                   	dec    eax
c00151c2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151c7:	75 03                	jne    c00151cc <Semaphore::assertLocked(char const*)+0x48>
c00151c9:	fb                   	sti    
c00151ca:	66 90                	xchg   ax,ax
c00151cc:	83 c4 1c             	add    esp,0x1c
c00151cf:	c3                   	ret    
c00151d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00151d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00151d7:	e8 49 b5 ff ff       	call   c0010725 <KePanic(char const*)>
c00151dc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151e1:	48                   	dec    eax
c00151e2:	eb c4                	jmp    c00151a8 <Semaphore::assertLocked(char const*)+0x24>
c00151e4:	31 c0                	xor    eax,eax
c00151e6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00151eb:	e8 50 fe ff ff       	call   c0015040 <schedule()>
c00151f0:	eb ca                	jmp    c00151bc <Semaphore::assertLocked(char const*)+0x38>
c00151f2:	66 90                	xchg   ax,ax

c00151f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00151f4:	83 ec 0c             	sub    esp,0xc
c00151f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015200:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015203:	e8 38 fe ff ff       	call   c0015040 <schedule()>
c0015208:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001520d:	48                   	dec    eax
c001520e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015213:	75 03                	jne    c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015215:	fb                   	sti    
c0015216:	66 90                	xchg   ax,ax
c0015218:	83 c4 0c             	add    esp,0xc
c001521b:	c3                   	ret    

c001521c <blockTask(TaskState)>:
c001521c:	83 ec 0c             	sub    esp,0xc
c001521f:	fa                   	cli    
c0015220:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015226:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001522a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015232:	e8 09 fe ff ff       	call   c0015040 <schedule()>
c0015237:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001523c:	48                   	dec    eax
c001523d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015242:	75 04                	jne    c0015248 <blockTask(TaskState)+0x2c>
c0015244:	fb                   	sti    
c0015245:	8d 76 00             	lea    esi,[esi+0x0]
c0015248:	83 c4 0c             	add    esp,0xc
c001524b:	c3                   	ret    

c001524c <waitTask(int, int*, int)>:
c001524c:	83 ec 1c             	sub    esp,0x1c
c001524f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015254:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015258:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001525b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001525f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015264:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015267:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001526e:	e8 a9 ff ff ff       	call   c001521c <blockTask(TaskState)>
c0015273:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015278:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001527b:	85 d2                	test   edx,edx
c001527d:	74 0d                	je     c001528c <waitTask(int, int*, int)+0x40>
c001527f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015282:	89 02                	mov    DWORD PTR [edx],eax
c0015284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015289:	8d 76 00             	lea    esi,[esi+0x0]
c001528c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001528f:	83 c4 1c             	add    esp,0x1c
c0015292:	c3                   	ret    
c0015293:	90                   	nop

c0015294 <milliTenthSleepUntil(unsigned int)>:
c0015294:	83 ec 1c             	sub    esp,0x1c
c0015297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001529b:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152a1:	76 05                	jbe    c00152a8 <milliTenthSleepUntil(unsigned int)+0x14>
c00152a3:	90                   	nop
c00152a4:	83 c4 1c             	add    esp,0x1c
c00152a7:	c3                   	ret    
c00152a8:	fa                   	cli    
c00152a9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00152af:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00152b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152bb:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c3:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00152ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152ce:	e8 a5 96 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152d3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152da:	e8 3d ff ff ff       	call   c001521c <blockTask(TaskState)>
c00152df:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152e4:	48                   	dec    eax
c00152e5:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152ea:	75 0c                	jne    c00152f8 <milliTenthSleepUntil(unsigned int)+0x64>
c00152ec:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00152f2:	85 d2                	test   edx,edx
c00152f4:	75 16                	jne    c001530c <milliTenthSleepUntil(unsigned int)+0x78>
c00152f6:	66 90                	xchg   ax,ax
c00152f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152fd:	48                   	dec    eax
c00152fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015303:	75 9f                	jne    c00152a4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015305:	fb                   	sti    
c0015306:	83 c4 1c             	add    esp,0x1c
c0015309:	c3                   	ret    
c001530a:	66 90                	xchg   ax,ax
c001530c:	31 c0                	xor    eax,eax
c001530e:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015313:	e8 28 fd ff ff       	call   c0015040 <schedule()>
c0015318:	eb de                	jmp    c00152f8 <milliTenthSleepUntil(unsigned int)+0x64>
c001531a:	66 90                	xchg   ax,ax

c001531c <milliTenthSleep(unsigned int)>:
c001531c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015321:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015325:	e9 6a ff ff ff       	jmp    c0015294 <milliTenthSleepUntil(unsigned int)>
c001532a:	66 90                	xchg   ax,ax

c001532c <sleep(unsigned int)>:
c001532c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015334:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015338:	eb e2                	jmp    c001531c <milliTenthSleep(unsigned int)>
c001533a:	66 90                	xchg   ax,ax

c001533c <Semaphore::acquire()>:
c001533c:	83 ec 1c             	sub    esp,0x1c
c001533f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015343:	fa                   	cli    
c0015344:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015349:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001534f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015352:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015358:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001535b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001535d:	7d 2d                	jge    c001538c <Semaphore::acquire()+0x50>
c001535f:	41                   	inc    ecx
c0015360:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015363:	90                   	nop
c0015364:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015369:	85 c0                	test   eax,eax
c001536b:	75 0b                	jne    c0015378 <Semaphore::acquire()+0x3c>
c001536d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015373:	85 d2                	test   edx,edx
c0015375:	75 5d                	jne    c00153d4 <Semaphore::acquire()+0x98>
c0015377:	90                   	nop
c0015378:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001537d:	48                   	dec    eax
c001537e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015383:	75 03                	jne    c0015388 <Semaphore::acquire()+0x4c>
c0015385:	fb                   	sti    
c0015386:	66 90                	xchg   ax,ax
c0015388:	83 c4 1c             	add    esp,0x1c
c001538b:	c3                   	ret    
c001538c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015391:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015398:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001539b:	85 c9                	test   ecx,ecx
c001539d:	74 45                	je     c00153e4 <Semaphore::acquire()+0xa8>
c001539f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153a8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153ab:	90                   	nop
c00153ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153b1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00153b4:	c7 04 24 58 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e58
c00153bb:	e8 16 56 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00153c0:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00153c7:	e8 50 fe ff ff       	call   c001521c <blockTask(TaskState)>
c00153cc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153d1:	48                   	dec    eax
c00153d2:	eb 90                	jmp    c0015364 <Semaphore::acquire()+0x28>
c00153d4:	31 c0                	xor    eax,eax
c00153d6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00153db:	e8 60 fc ff ff       	call   c0015040 <schedule()>
c00153e0:	eb 96                	jmp    c0015378 <Semaphore::acquire()+0x3c>
c00153e2:	66 90                	xchg   ax,ax
c00153e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00153ec:	eb be                	jmp    c00153ac <Semaphore::acquire()+0x70>
c00153ee:	66 90                	xchg   ax,ax

c00153f0 <taskReturned>:
c00153f0:	83 ec 1c             	sub    esp,0x1c
c00153f3:	c7 04 24 78 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e78
c00153fa:	e8 26 b3 ff ff       	call   c0010725 <KePanic(char const*)>
c00153ff:	90                   	nop
c0015400:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0015407:	e8 10 fe ff ff       	call   c001521c <blockTask(TaskState)>
c001540c:	fa                   	cli    
c001540d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015413:	e8 28 fc ff ff       	call   c0015040 <schedule()>
c0015418:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001541d:	48                   	dec    eax
c001541e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015423:	75 db                	jne    c0015400 <taskReturned+0x10>
c0015425:	fb                   	sti    
c0015426:	eb d8                	jmp    c0015400 <taskReturned+0x10>

c0015428 <Thr::processFromPID(int)>:
c0015428:	57                   	push   edi
c0015429:	56                   	push   esi
c001542a:	53                   	push   ebx
c001542b:	83 ec 10             	sub    esp,0x10
c001542e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015432:	fa                   	cli    
c0015433:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001543a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015440:	e8 7f 94 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015445:	89 c7                	mov    edi,eax
c0015447:	eb 13                	jmp    c001545c <Thr::processFromPID(int)+0x34>
c0015449:	8d 76 00             	lea    esi,[esi+0x0]
c001544c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015453:	e8 6c 94 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015458:	39 f8                	cmp    eax,edi
c001545a:	74 50                	je     c00154ac <Thr::processFromPID(int)+0x84>
c001545c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015463:	e8 5c 94 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015468:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001546f:	89 c3                	mov    ebx,eax
c0015471:	e8 56 94 00 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015476:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001547a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015481:	e8 f2 94 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015486:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015489:	39 30                	cmp    DWORD PTR [eax],esi
c001548b:	75 bf                	jne    c001544c <Thr::processFromPID(int)+0x24>
c001548d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015492:	48                   	dec    eax
c0015493:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015498:	74 0e                	je     c00154a8 <Thr::processFromPID(int)+0x80>
c001549a:	66 90                	xchg   ax,ax
c001549c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001549f:	90                   	nop
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	5b                   	pop    ebx
c00154a4:	5e                   	pop    esi
c00154a5:	5f                   	pop    edi
c00154a6:	c3                   	ret    
c00154a7:	90                   	nop
c00154a8:	fb                   	sti    
c00154a9:	eb f1                	jmp    c001549c <Thr::processFromPID(int)+0x74>
c00154ab:	90                   	nop
c00154ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154b1:	8d 50 ff             	lea    edx,[eax-0x1]
c00154b4:	31 c0                	xor    eax,eax
c00154b6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00154bc:	85 d2                	test   edx,edx
c00154be:	75 e0                	jne    c00154a0 <Thr::processFromPID(int)+0x78>
c00154c0:	fb                   	sti    
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	5b                   	pop    ebx
c00154c5:	5e                   	pop    esi
c00154c6:	5f                   	pop    edi
c00154c7:	c3                   	ret    

c00154c8 <unblockTask(ThreadControlBlock*)>:
c00154c8:	53                   	push   ebx
c00154c9:	83 ec 18             	sub    esp,0x18
c00154cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00154d0:	fa                   	cli    
c00154d1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154d4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00154da:	85 c0                	test   eax,eax
c00154dc:	74 5a                	je     c0015538 <unblockTask(ThreadControlBlock*)+0x70>
c00154de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00154e1:	48                   	dec    eax
c00154e2:	74 30                	je     c0015514 <unblockTask(ThreadControlBlock*)+0x4c>
c00154e4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154eb:	e8 d4 93 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154f0:	85 c0                	test   eax,eax
c00154f2:	75 18                	jne    c001550c <unblockTask(ThreadControlBlock*)+0x44>
c00154f4:	eb 52                	jmp    c0015548 <unblockTask(ThreadControlBlock*)+0x80>
c00154f6:	66 90                	xchg   ax,ax
c00154f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154fc:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015503:	e8 a4 96 00 00       	call   c001ebac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015508:	85 c0                	test   eax,eax
c001550a:	74 3c                	je     c0015548 <unblockTask(ThreadControlBlock*)+0x80>
c001550c:	39 c3                	cmp    ebx,eax
c001550e:	75 e8                	jne    c00154f8 <unblockTask(ThreadControlBlock*)+0x30>
c0015510:	eb 0e                	jmp    c0015520 <unblockTask(ThreadControlBlock*)+0x58>
c0015512:	66 90                	xchg   ax,ax
c0015514:	c7 04 24 fb 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dfb
c001551b:	e8 b6 54 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0015520:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015525:	48                   	dec    eax
c0015526:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001552b:	75 03                	jne    c0015530 <unblockTask(ThreadControlBlock*)+0x68>
c001552d:	fb                   	sti    
c001552e:	66 90                	xchg   ax,ax
c0015530:	83 c4 18             	add    esp,0x18
c0015533:	5b                   	pop    ebx
c0015534:	c3                   	ret    
c0015535:	8d 76 00             	lea    esi,[esi+0x0]
c0015538:	c7 04 24 e4 0d 02 c0 	mov    DWORD PTR [esp],0xc0020de4
c001553f:	e8 92 54 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0015544:	eb da                	jmp    c0015520 <unblockTask(ThreadControlBlock*)+0x58>
c0015546:	66 90                	xchg   ax,ax
c0015548:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001554c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015553:	e8 20 94 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015558:	eb c6                	jmp    c0015520 <unblockTask(ThreadControlBlock*)+0x58>
c001555a:	66 90                	xchg   ax,ax

c001555c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001555c:	55                   	push   ebp
c001555d:	57                   	push   edi
c001555e:	56                   	push   esi
c001555f:	53                   	push   ebx
c0015560:	83 ec 2c             	sub    esp,0x2c
c0015563:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015567:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001556a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015570:	85 ff                	test   edi,edi
c0015572:	7e 20                	jle    c0015594 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015574:	31 f6                	xor    esi,esi
c0015576:	66 90                	xchg   ax,ax
c0015578:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001557f:	46                   	inc    esi
c0015580:	89 04 24             	mov    DWORD PTR [esp],eax
c0015583:	e8 f1 24 ff ff       	call   c0007a79 <free>
c0015588:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001558b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015591:	7f e5                	jg     c0015578 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015593:	90                   	nop
c0015594:	31 f6                	xor    esi,esi
c0015596:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c001559c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00155a1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00155a4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00155a7:	d3 c0                	rol    eax,cl
c00155a9:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c00155b0:	21 c8                	and    eax,ecx
c00155b2:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00155b9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155bc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00155c4:	89 f7                	mov    edi,esi
c00155c6:	0f 85 68 01 00 00    	jne    c0015734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00155cc:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00155d2:	85 ed                	test   ebp,ebp
c00155d4:	74 1e                	je     c00155f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c00155d6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155d9:	e8 5c ae ff ff       	call   c001043a <EnvVarContainer::~EnvVarContainer()>
c00155de:	b9 0c 00 00 00       	mov    ecx,0xc
c00155e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00155e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00155ea:	e8 cd 52 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c00155ef:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00155f2:	89 f7                	mov    edi,esi
c00155f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00155fa:	85 c0                	test   eax,eax
c00155fc:	0f 84 ae 00 00 00    	je     c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015602:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015605:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015609:	31 c9                	xor    ecx,ecx
c001560b:	eb 17                	jmp    c0015624 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001560d:	8d 76 00             	lea    esi,[esi+0x0]
c0015610:	41                   	inc    ecx
c0015611:	83 f9 10             	cmp    ecx,0x10
c0015614:	0f 84 96 00 00 00    	je     c00156b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001561a:	66 90                	xchg   ax,ax
c001561c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015622:	66 90                	xchg   ax,ax
c0015624:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001562b:	d3 fa                	sar    edx,cl
c001562d:	f6 c2 01             	test   dl,0x1
c0015630:	74 de                	je     c0015610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015632:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015635:	c1 e2 05             	shl    edx,0x5
c0015638:	29 ca                	sub    edx,ecx
c001563a:	01 d0                	add    eax,edx
c001563c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015642:	83 fd 07             	cmp    ebp,0x7
c0015645:	75 c9                	jne    c0015610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015647:	05 40 02 00 00       	add    eax,0x240
c001564c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001564f:	83 fd ff             	cmp    ebp,0xffffffff
c0015652:	0f 8c e4 00 00 00    	jl     c001573c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015658:	0f 84 9a 01 00 00    	je     c00157f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001565e:	85 ed                	test   ebp,ebp
c0015660:	0f 84 72 01 00 00    	je     c00157d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015666:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015668:	75 a6                	jne    c0015610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001566a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001566e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015674:	01 d0                	add    eax,edx
c0015676:	66 90                	xchg   ax,ax
c0015678:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001567c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015682:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015685:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001568b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015692:	89 04 24             	mov    DWORD PTR [esp],eax
c0015695:	e8 2e fe ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c001569a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001569e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156a1:	41                   	inc    ecx
c00156a2:	83 f9 10             	cmp    ecx,0x10
c00156a5:	89 f7                	mov    edi,esi
c00156a7:	0f 85 6f ff ff ff    	jne    c001561c <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c00156ad:	8d 76 00             	lea    esi,[esi+0x0]
c00156b0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00156b6:	85 c0                	test   eax,eax
c00156b8:	74 56                	je     c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00156ba:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00156c0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00156c6:	74 48                	je     c0015710 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00156c8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156cf:	e8 f0 91 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156d4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00156db:	89 c7                	mov    edi,eax
c00156dd:	e8 c6 91 00 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00156e2:	84 c0                	test   al,al
c00156e4:	0f 84 be 00 00 00    	je     c00157a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00156ea:	66 90                	xchg   ax,ax
c00156ec:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00156ef:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00156f5:	85 d2                	test   edx,edx
c00156f7:	74 0b                	je     c0015704 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c00156f9:	8b 02                	mov    eax,DWORD PTR [edx]
c00156fb:	89 14 24             	mov    DWORD PTR [esp],edx
c00156fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015701:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015704:	31 d2                	xor    edx,edx
c0015706:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001570c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001570f:	90                   	nop
c0015710:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015716:	85 db                	test   ebx,ebx
c0015718:	74 1a                	je     c0015734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c001571a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001571d:	e8 16 44 ff ff       	call   c0009b38 <VAS::~VAS()>
c0015722:	b8 14 00 00 00       	mov    eax,0x14
c0015727:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001572b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001572e:	e8 89 51 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c0015733:	90                   	nop
c0015734:	83 c4 2c             	add    esp,0x2c
c0015737:	5b                   	pop    ebx
c0015738:	5e                   	pop    esi
c0015739:	5f                   	pop    edi
c001573a:	5d                   	pop    ebp
c001573b:	c3                   	ret    
c001573c:	c7 04 24 ac 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eac
c0015743:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015747:	e8 d9 af ff ff       	call   c0010725 <KePanic(char const*)>
c001574c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001574f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015753:	89 f7                	mov    edi,esi
c0015755:	e9 b6 fe ff ff       	jmp    c0015610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001575a:	66 90                	xchg   ax,ax
c001575c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015762:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015768:	75 1a                	jne    c0015784 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c001576a:	c7 04 24 14 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f14
c0015771:	e8 60 52 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0015776:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001577d:	e8 9a fa ff ff       	call   c001521c <blockTask(TaskState)>
c0015782:	66 90                	xchg   ax,ax
c0015784:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015788:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001578f:	e8 e4 91 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015794:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001579b:	e8 24 91 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157a0:	39 f8                	cmp    eax,edi
c00157a2:	0f 84 44 ff ff ff    	je     c00156ec <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c00157a8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157af:	e8 10 91 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157b4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157bb:	89 c6                	mov    esi,eax
c00157bd:	e8 0a 91 00 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00157c2:	39 f3                	cmp    ebx,esi
c00157c4:	74 be                	je     c0015784 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00157c6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00157c9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157cc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00157d2:	75 b0                	jne    c0015784 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00157d4:	eb 86                	jmp    c001575c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00157d6:	66 90                	xchg   ax,ax
c00157d8:	c7 04 24 e0 0e 02 c0 	mov    DWORD PTR [esp],0xc0020ee0
c00157df:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00157e3:	e8 3d af ff ff       	call   c0010725 <KePanic(char const*)>
c00157e8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157ef:	89 f7                	mov    edi,esi
c00157f1:	e9 1a fe ff ff       	jmp    c0015610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c00157f6:	66 90                	xchg   ax,ax
c00157f8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00157fc:	8b 36                	mov    esi,DWORD PTR [esi]
c00157fe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015801:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015804:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001580a:	01 d7                	add    edi,edx
c001580c:	89 f8                	mov    eax,edi
c001580e:	e9 65 fe ff ff       	jmp    c0015678 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015813:	90                   	nop

c0015814 <cleanerTaskFunction(void*)>:
c0015814:	53                   	push   ebx
c0015815:	83 ec 18             	sub    esp,0x18
c0015818:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001581d:	48                   	dec    eax
c001581e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015823:	75 03                	jne    c0015828 <cleanerTaskFunction(void*)+0x14>
c0015825:	fb                   	sti    
c0015826:	66 90                	xchg   ax,ax
c0015828:	fa                   	cli    
c0015829:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001582e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015835:	8d 50 01             	lea    edx,[eax+0x1]
c0015838:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001583e:	0f 84 a0 00 00 00    	je     c00158e4 <cleanerTaskFunction(void*)+0xd0>
c0015844:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015849:	85 c0                	test   eax,eax
c001584b:	75 03                	jne    c0015850 <cleanerTaskFunction(void*)+0x3c>
c001584d:	fb                   	sti    
c001584e:	66 90                	xchg   ax,ax
c0015850:	31 c9                	xor    ecx,ecx
c0015852:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c0015858:	fa                   	cli    
c0015859:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001585f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015865:	fa                   	cli    
c0015866:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001586c:	eb 26                	jmp    c0015894 <cleanerTaskFunction(void*)+0x80>
c001586e:	66 90                	xchg   ax,ax
c0015870:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015877:	e8 48 90 00 00       	call   c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001587c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015883:	89 c3                	mov    ebx,eax
c0015885:	e8 42 90 00 00       	call   c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001588a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001588d:	e8 ca fc ff ff       	call   c001555c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015892:	66 90                	xchg   ax,ax
c0015894:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001589b:	e8 08 90 00 00       	call   c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158a0:	84 c0                	test   al,al
c00158a2:	74 cc                	je     c0015870 <cleanerTaskFunction(void*)+0x5c>
c00158a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158a9:	48                   	dec    eax
c00158aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158af:	75 03                	jne    c00158b4 <cleanerTaskFunction(void*)+0xa0>
c00158b1:	fb                   	sti    
c00158b2:	66 90                	xchg   ax,ax
c00158b4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00158b9:	48                   	dec    eax
c00158ba:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00158bf:	0f 85 53 ff ff ff    	jne    c0015818 <cleanerTaskFunction(void*)+0x4>
c00158c5:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00158cb:	85 d2                	test   edx,edx
c00158cd:	0f 84 45 ff ff ff    	je     c0015818 <cleanerTaskFunction(void*)+0x4>
c00158d3:	31 c0                	xor    eax,eax
c00158d5:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00158da:	e8 61 f7 ff ff       	call   c0015040 <schedule()>
c00158df:	e9 34 ff ff ff       	jmp    c0015818 <cleanerTaskFunction(void*)+0x4>
c00158e4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00158eb:	e8 04 f9 ff ff       	call   c00151f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00158f0:	e9 5b ff ff ff       	jmp    c0015850 <cleanerTaskFunction(void*)+0x3c>
c00158f5:	8d 76 00             	lea    esi,[esi+0x0]

c00158f8 <terminateTask(int)>:
c00158f8:	83 ec 1c             	sub    esp,0x1c
c00158fb:	fa                   	cli    
c00158fc:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015902:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015908:	fa                   	cli    
c0015909:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001590f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015918:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001591b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015920:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015923:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015927:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001592e:	e8 45 90 00 00       	call   c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015938:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001593f:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015944:	85 c0                	test   eax,eax
c0015946:	74 58                	je     c00159a0 <terminateTask(int)+0xa8>
c0015948:	89 04 24             	mov    DWORD PTR [esp],eax
c001594b:	b2 01                	mov    dl,0x1
c001594d:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c0015953:	e8 70 fb ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015958:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001595d:	48                   	dec    eax
c001595e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015963:	75 03                	jne    c0015968 <terminateTask(int)+0x70>
c0015965:	fb                   	sti    
c0015966:	66 90                	xchg   ax,ax
c0015968:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001596d:	48                   	dec    eax
c001596e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015973:	75 0b                	jne    c0015980 <terminateTask(int)+0x88>
c0015975:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c001597c:	75 32                	jne    c00159b0 <terminateTask(int)+0xb8>
c001597e:	66 90                	xchg   ax,ax
c0015980:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015985:	48                   	dec    eax
c0015986:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001598b:	75 03                	jne    c0015990 <terminateTask(int)+0x98>
c001598d:	fb                   	sti    
c001598e:	66 90                	xchg   ax,ax
c0015990:	fa                   	cli    
c0015991:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015997:	90                   	nop
c0015998:	e8 a3 f6 ff ff       	call   c0015040 <schedule()>
c001599d:	eb e1                	jmp    c0015980 <terminateTask(int)+0x88>
c001599f:	90                   	nop
c00159a0:	c7 04 24 12 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e12
c00159a7:	e8 2a 50 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00159ac:	eb aa                	jmp    c0015958 <terminateTask(int)+0x60>
c00159ae:	66 90                	xchg   ax,ax
c00159b0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159ba:	eb dc                	jmp    c0015998 <terminateTask(int)+0xa0>

c00159bc <Thr::terminateFromIRQ(int)>:
c00159bc:	83 ec 1c             	sub    esp,0x1c
c00159bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00159c6:	e8 2d ff ff ff       	call   c00158f8 <terminateTask(int)>
c00159cb:	90                   	nop

c00159cc <Semaphore::release()>:
c00159cc:	83 ec 1c             	sub    esp,0x1c
c00159cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159d3:	fa                   	cli    
c00159d4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159d9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00159df:	8d 48 01             	lea    ecx,[eax+0x1]
c00159e2:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00159eb:	85 c9                	test   ecx,ecx
c00159ed:	74 3d                	je     c0015a2c <Semaphore::release()+0x60>
c00159ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00159f2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00159f5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00159f8:	e8 cb fa ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c00159fd:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a02:	48                   	dec    eax
c0015a03:	90                   	nop
c0015a04:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a09:	85 c0                	test   eax,eax
c0015a0b:	75 0b                	jne    c0015a18 <Semaphore::release()+0x4c>
c0015a0d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015a13:	85 d2                	test   edx,edx
c0015a15:	75 1d                	jne    c0015a34 <Semaphore::release()+0x68>
c0015a17:	90                   	nop
c0015a18:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a1d:	48                   	dec    eax
c0015a1e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a23:	75 03                	jne    c0015a28 <Semaphore::release()+0x5c>
c0015a25:	fb                   	sti    
c0015a26:	66 90                	xchg   ax,ax
c0015a28:	83 c4 1c             	add    esp,0x1c
c0015a2b:	c3                   	ret    
c0015a2c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015a2f:	eb d3                	jmp    c0015a04 <Semaphore::release()+0x38>
c0015a31:	8d 76 00             	lea    esi,[esi+0x0]
c0015a34:	31 c0                	xor    eax,eax
c0015a36:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015a3b:	e8 00 f6 ff ff       	call   c0015040 <schedule()>
c0015a40:	eb d6                	jmp    c0015a18 <Semaphore::release()+0x4c>
c0015a42:	66 90                	xchg   ax,ax

c0015a44 <__static_initialization_and_destruction_0(int, int)>:
c0015a44:	83 ec 1c             	sub    esp,0x1c
c0015a47:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0015a4c:	0f 85 82 00 00 00    	jne    c0015ad4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015a52:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0015a5a:	75 78                	jne    c0015ad4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015a5c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015a63:	e8 9c 91 00 00       	call   c001ec04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015a68:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015a70:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0015a78:	c7 04 24 b4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebb4
c0015a7f:	e8 e8 4d ff ff       	call   c000a86c <__cxa_atexit>
c0015a84:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c0015a8b:	e8 74 91 00 00       	call   c001ec04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015a90:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015a98:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c0015aa0:	c7 04 24 b4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebb4
c0015aa7:	e8 c0 4d ff ff       	call   c000a86c <__cxa_atexit>
c0015aac:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015ab3:	e8 4c 91 00 00       	call   c001ec04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ab8:	c7 44 24 08 a8 1a 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021aa8
c0015ac0:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c0015ac8:	c7 04 24 b4 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebb4
c0015acf:	e8 98 4d ff ff       	call   c000a86c <__cxa_atexit>
c0015ad4:	90                   	nop
c0015ad5:	83 c4 1c             	add    esp,0x1c
c0015ad8:	c3                   	ret    
c0015ad9:	8d 76 00             	lea    esi,[esi+0x0]

c0015adc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015adc:	83 ec 1c             	sub    esp,0x1c
c0015adf:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0015ae7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0015aee:	e8 51 ff ff ff       	call   c0015a44 <__static_initialization_and_destruction_0(int, int)>
c0015af3:	83 c4 1c             	add    esp,0x1c
c0015af6:	c3                   	ret    

c0015af7 <Vm::inbv(unsigned short)>:
c0015af7:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015afc:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015b02:	75 06                	jne    c0015b0a <Vm::inbv(unsigned short)+0x13>
c0015b04:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015b09:	c3                   	ret    
c0015b0a:	ec                   	in     al,dx
c0015b0b:	c3                   	ret    

c0015b0c <Vm::outbv(unsigned short, unsigned char)>:
c0015b0c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015b11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b15:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015b1b:	75 25                	jne    c0015b42 <Vm::outbv(unsigned short, unsigned char)+0x36>
c0015b1d:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015b23:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015b29:	8d 51 01             	lea    edx,[ecx+0x1]
c0015b2c:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015b32:	83 fa 20             	cmp    edx,0x20
c0015b35:	75 0c                	jne    c0015b43 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0015b37:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015b41:	c3                   	ret    
c0015b42:	ee                   	out    dx,al
c0015b43:	c3                   	ret    

c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015b44:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b49:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b4e:	c1 e0 04             	shl    eax,0x4
c0015b51:	01 d0                	add    eax,edx
c0015b53:	c3                   	ret    

c0015b54 <Vm::getSegment(unsigned int)>:
c0015b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b58:	c1 e8 10             	shr    eax,0x10
c0015b5b:	c3                   	ret    

c0015b5c <Vm::getOffset(unsigned int)>:
c0015b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b60:	c3                   	ret    

c0015b61 <Vm::mainloop2()>:
c0015b61:	83 ec 18             	sub    esp,0x18
c0015b64:	fa                   	cli    
c0015b65:	6a 02                	push   0x2
c0015b67:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015b6d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015b74:	e8 7b f6 ff ff       	call   c00151f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b7e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015b82:	52                   	push   edx
c0015b83:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015b87:	52                   	push   edx
c0015b88:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015b8c:	52                   	push   edx
c0015b8d:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015b91:	50                   	push   eax
c0015b92:	e8 78 a6 fe ff       	call   c000020f <goToVM86>
c0015b97:	83 c4 2c             	add    esp,0x2c
c0015b9a:	c3                   	ret    

c0015b9b <Vm::mainVm8086Loop(void*)>:
c0015b9b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ba0:	48                   	dec    eax
c0015ba1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ba6:	75 01                	jne    c0015ba9 <Vm::mainVm8086Loop(void*)+0xe>
c0015ba8:	fb                   	sti    
c0015ba9:	eb b6                	jmp    c0015b61 <Vm::mainloop2()>

c0015bab <Vm::mainloop3(unsigned long)>:
c0015bab:	83 ec 18             	sub    esp,0x18
c0015bae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bb2:	fa                   	cli    
c0015bb3:	6a 02                	push   0x2
c0015bb5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015bbb:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015bc2:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015bc7:	e8 28 f6 ff ff       	call   c00151f4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015bcc:	83 c4 1c             	add    esp,0x1c
c0015bcf:	eb 90                	jmp    c0015b61 <Vm::mainloop2()>

c0015bd1 <Vm::initialise8086()>:
c0015bd1:	83 ec 0c             	sub    esp,0xc
c0015bd4:	68 80 00 00 00       	push   0x80
c0015bd9:	6a 00                	push   0x0
c0015bdb:	68 9b 5b 01 c0       	push   0xc0015b9b
c0015be0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015be6:	e8 fd f1 ff ff       	call   c0014de8 <Process::createThread(void (*)(void*), void*, int)>
c0015beb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015bf2:	68 00 01 00 00       	push   0x100
c0015bf7:	6a 00                	push   0x0
c0015bf9:	6a 00                	push   0x0
c0015bfb:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015c00:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015c05:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c0b:	e8 d2 43 ff ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015c10:	83 c4 2c             	add    esp,0x2c
c0015c13:	c3                   	ret    

c0015c14 <Vm::finish8086()>:
c0015c14:	53                   	push   ebx
c0015c15:	83 ec 08             	sub    esp,0x8
c0015c18:	fa                   	cli    
c0015c19:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c1f:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015c26:	75 15                	jne    c0015c3d <Vm::finish8086()+0x29>
c0015c28:	e8 13 f4 ff ff       	call   c0015040 <schedule()>
c0015c2d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c32:	48                   	dec    eax
c0015c33:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015c38:	75 de                	jne    c0015c18 <Vm::finish8086()+0x4>
c0015c3a:	fb                   	sti    
c0015c3b:	eb db                	jmp    c0015c18 <Vm::finish8086()+0x4>
c0015c3d:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015c44:	83 ec 0c             	sub    esp,0xc
c0015c47:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015c4d:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015c53:	e8 70 f8 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015c58:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c5d:	83 c4 10             	add    esp,0x10
c0015c60:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c63:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015c69:	85 d2                	test   edx,edx
c0015c6b:	75 01                	jne    c0015c6e <Vm::finish8086()+0x5a>
c0015c6d:	fb                   	sti    
c0015c6e:	83 c4 08             	add    esp,0x8
c0015c71:	89 d8                	mov    eax,ebx
c0015c73:	5b                   	pop    ebx
c0015c74:	c3                   	ret    

c0015c75 <Vm::getOutput8086(unsigned char*)>:
c0015c75:	57                   	push   edi
c0015c76:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c7c:	56                   	push   esi
c0015c7d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015c82:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015c86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015c88:	5e                   	pop    esi
c0015c89:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015c8e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015c98:	5f                   	pop    edi
c0015c99:	c3                   	ret    

c0015c9a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015c9a:	55                   	push   ebp
c0015c9b:	57                   	push   edi
c0015c9c:	56                   	push   esi
c0015c9d:	53                   	push   ebx
c0015c9e:	83 ec 0c             	sub    esp,0xc
c0015ca1:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015ca6:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c0015cab:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c0015cb0:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c0015cb5:	fa                   	cli    
c0015cb6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cbc:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015cc3:	75 15                	jne    c0015cda <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c0015cc5:	e8 76 f3 ff ff       	call   c0015040 <schedule()>
c0015cca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ccf:	48                   	dec    eax
c0015cd0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cd5:	75 de                	jne    c0015cb5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015cd7:	fb                   	sti    
c0015cd8:	eb db                	jmp    c0015cb5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015cda:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ce4:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015ce9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ced:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015cf1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015cf5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015cf9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015cfd:	50                   	push   eax
c0015cfe:	6a 20                	push   0x20
c0015d00:	6a 00                	push   0x0
c0015d02:	68 e0 81 02 c0       	push   0xc00281e0
c0015d07:	e8 e4 a7 fe ff       	call   c00004f0 <memset>
c0015d0c:	5a                   	pop    edx
c0015d0d:	59                   	pop    ecx
c0015d0e:	57                   	push   edi
c0015d0f:	56                   	push   esi
c0015d10:	e8 2f fe ff ff       	call   c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015d1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015d20:	89 c7                	mov    edi,eax
c0015d22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d24:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015d2b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d30:	48                   	dec    eax
c0015d31:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d36:	75 01                	jne    c0015d39 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0015d38:	fb                   	sti    
c0015d39:	83 ec 0c             	sub    esp,0xc
c0015d3c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d42:	e8 81 f7 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015d47:	83 c4 1c             	add    esp,0x1c
c0015d4a:	b0 01                	mov    al,0x1
c0015d4c:	5b                   	pop    ebx
c0015d4d:	5e                   	pop    esi
c0015d4e:	5f                   	pop    edi
c0015d4f:	5d                   	pop    ebp
c0015d50:	c3                   	ret    

c0015d51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d51:	55                   	push   ebp
c0015d52:	57                   	push   edi
c0015d53:	56                   	push   esi
c0015d54:	53                   	push   ebx
c0015d55:	83 ec 2c             	sub    esp,0x2c
c0015d58:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c0015d5d:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0015d62:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0015d67:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c0015d6c:	fa                   	cli    
c0015d6d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0015d72:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d78:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d7c:	84 c0                	test   al,al
c0015d7e:	75 15                	jne    c0015d95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015d80:	e8 bb f2 ff ff       	call   c0015040 <schedule()>
c0015d85:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d8a:	48                   	dec    eax
c0015d8b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d90:	75 da                	jne    c0015d6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015d92:	fb                   	sti    
c0015d93:	eb d7                	jmp    c0015d6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015d95:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d9f:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015da4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015da8:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dac:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015db0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015db4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015db8:	50                   	push   eax
c0015db9:	6a 20                	push   0x20
c0015dbb:	6a 00                	push   0x0
c0015dbd:	68 e0 81 02 c0       	push   0xc00281e0
c0015dc2:	e8 29 a7 fe ff       	call   c00004f0 <memset>
c0015dc7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015dce:	e8 93 1c ff ff       	call   c0007a66 <malloc>
c0015dd3:	83 c4 0c             	add    esp,0xc
c0015dd6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ddc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015de0:	89 c3                	mov    ebx,eax
c0015de2:	50                   	push   eax
c0015de3:	e8 70 51 ff ff       	call   c000af58 <File::File(char const*, Process*)>
c0015de8:	83 c4 10             	add    esp,0x10
c0015deb:	85 db                	test   ebx,ebx
c0015ded:	75 0a                	jne    c0015df9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c0015def:	83 ec 0c             	sub    esp,0xc
c0015df2:	68 3c 0f 02 c0       	push   0xc0020f3c
c0015df7:	eb 3e                	jmp    c0015e37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015df9:	55                   	push   ebp
c0015dfa:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015dfe:	50                   	push   eax
c0015dff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015e03:	50                   	push   eax
c0015e04:	53                   	push   ebx
c0015e05:	e8 b2 54 ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0015e0a:	83 c4 10             	add    esp,0x10
c0015e0d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015e12:	74 0a                	je     c0015e1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	68 50 0f 02 c0       	push   0xc0020f50
c0015e1c:	eb 19                	jmp    c0015e37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015e1e:	51                   	push   ecx
c0015e1f:	51                   	push   ecx
c0015e20:	6a 01                	push   0x1
c0015e22:	53                   	push   ebx
c0015e23:	e8 ee 51 ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	85 c0                	test   eax,eax
c0015e2d:	74 27                	je     c0015e56 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c0015e2f:	83 ec 0c             	sub    esp,0xc
c0015e32:	68 69 0f 02 c0       	push   0xc0020f69
c0015e37:	e8 e9 a8 ff ff       	call   c0010725 <KePanic(char const*)>
c0015e3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	48                   	dec    eax
c0015e45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4a:	85 c0                	test   eax,eax
c0015e4c:	75 01                	jne    c0015e4f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c0015e4e:	fb                   	sti    
c0015e4f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015e54:	eb 52                	jmp    c0015ea8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0015e56:	50                   	push   eax
c0015e57:	50                   	push   eax
c0015e58:	57                   	push   edi
c0015e59:	56                   	push   esi
c0015e5a:	e8 e5 fc ff ff       	call   c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e5f:	5a                   	pop    edx
c0015e60:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015e66:	51                   	push   ecx
c0015e67:	50                   	push   eax
c0015e68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e70:	53                   	push   ebx
c0015e71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e74:	83 c4 14             	add    esp,0x14
c0015e77:	53                   	push   ebx
c0015e78:	e8 f7 51 ff ff       	call   c000b074 <File::close()>
c0015e7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e82:	83 c4 10             	add    esp,0x10
c0015e85:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e8c:	48                   	dec    eax
c0015e8d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e92:	85 c0                	test   eax,eax
c0015e94:	75 01                	jne    c0015e97 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c0015e96:	fb                   	sti    
c0015e97:	83 ec 0c             	sub    esp,0xc
c0015e9a:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015ea0:	e8 23 f6 ff ff       	call   c00154c8 <unblockTask(ThreadControlBlock*)>
c0015ea5:	83 c4 10             	add    esp,0x10
c0015ea8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015eac:	83 c4 2c             	add    esp,0x2c
c0015eaf:	5b                   	pop    ebx
c0015eb0:	5e                   	pop    esi
c0015eb1:	5f                   	pop    edi
c0015eb2:	5d                   	pop    ebp
c0015eb3:	c3                   	ret    

c0015eb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015eb4:	57                   	push   edi
c0015eb5:	56                   	push   esi
c0015eb6:	53                   	push   ebx
c0015eb7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ebc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0015ec1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ec5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015ec9:	83 e8 06             	sub    eax,0x6
c0015ecc:	0f b7 c0             	movzx  eax,ax
c0015ecf:	50                   	push   eax
c0015ed0:	52                   	push   edx
c0015ed1:	e8 6e fc ff ff       	call   c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015ed6:	5a                   	pop    edx
c0015ed7:	5e                   	pop    esi
c0015ed8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015edb:	8d 56 fa             	lea    edx,[esi-0x6]
c0015ede:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015ee1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ee7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015eea:	8d 56 02             	lea    edx,[esi+0x2]
c0015eed:	66 89 10             	mov    WORD PTR [eax],dx
c0015ef0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015ef3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015ef7:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c0015efb:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015eff:	89 d6                	mov    esi,edx
c0015f01:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015f07:	81 e6 ff fd 00 00    	and    esi,0xfdff
c0015f0d:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015f11:	74 08                	je     c0015f1b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0015f13:	89 d6                	mov    esi,edx
c0015f15:	81 ce 00 02 00 00    	or     esi,0x200
c0015f1b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f24:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015f28:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015f30:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015f33:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015f3b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015f3e:	5b                   	pop    ebx
c0015f3f:	5e                   	pop    esi
c0015f40:	5f                   	pop    edi
c0015f41:	c3                   	ret    

c0015f42 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015f42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f4c:	c1 e0 04             	shl    eax,0x4
c0015f4f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015f52:	c3                   	ret    

c0015f53 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015f53:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f58:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f5d:	c1 e0 04             	shl    eax,0x4
c0015f60:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015f64:	c3                   	ret    

c0015f65 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015f65:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f6a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f6f:	c1 e0 04             	shl    eax,0x4
c0015f72:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015f75:	c3                   	ret    

c0015f76 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015f76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f80:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0015f84:	c1 e0 04             	shl    eax,0x4
c0015f87:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015f8a:	c3                   	ret    

c0015f8b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015f8b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015f90:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015f95:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c0015f9a:	c1 e0 04             	shl    eax,0x4
c0015f9d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015fa1:	c3                   	ret    

c0015fa2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015fa2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015fa7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015fac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fb0:	c1 e0 04             	shl    eax,0x4
c0015fb3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015fb6:	c3                   	ret    

c0015fb7 <Vm::faultHandler(regs*)>:
c0015fb7:	55                   	push   ebp
c0015fb8:	57                   	push   edi
c0015fb9:	56                   	push   esi
c0015fba:	53                   	push   ebx
c0015fbb:	83 ec 1c             	sub    esp,0x1c
c0015fbe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015fc2:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c0015fc6:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c0015fca:	50                   	push   eax
c0015fcb:	57                   	push   edi
c0015fcc:	e8 73 fb ff ff       	call   c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fd1:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c0015fd5:	59                   	pop    ecx
c0015fd6:	5e                   	pop    esi
c0015fd7:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c0015fda:	89 c1                	mov    ecx,eax
c0015fdc:	0f b7 c6             	movzx  eax,si
c0015fdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fe3:	50                   	push   eax
c0015fe4:	55                   	push   ebp
c0015fe5:	e8 5a fb ff ff       	call   c0015b44 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fea:	5a                   	pop    edx
c0015feb:	5a                   	pop    edx
c0015fec:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c0015ff1:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015ff6:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c0015ffb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015ffe:	80 fa 9d             	cmp    dl,0x9d
c0016001:	0f 84 2c 02 00 00    	je     c0016233 <Vm::faultHandler(regs*)+0x27c>
c0016007:	0f 87 94 00 00 00    	ja     c00160a1 <Vm::faultHandler(regs*)+0xea>
c001600d:	80 fa 66             	cmp    dl,0x66
c0016010:	0f 84 99 01 00 00    	je     c00161af <Vm::faultHandler(regs*)+0x1f8>
c0016016:	77 4a                	ja     c0016062 <Vm::faultHandler(regs*)+0xab>
c0016018:	80 fa 36             	cmp    dl,0x36
c001601b:	0f 84 81 01 00 00    	je     c00161a2 <Vm::faultHandler(regs*)+0x1eb>
c0016021:	77 1d                	ja     c0016040 <Vm::faultHandler(regs*)+0x89>
c0016023:	80 fa 26             	cmp    dl,0x26
c0016026:	0f 84 4f 01 00 00    	je     c001617b <Vm::faultHandler(regs*)+0x1c4>
c001602c:	80 fa 2e             	cmp    dl,0x2e
c001602f:	0f 85 ec 05 00 00    	jne    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016035:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016038:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001603d:	41                   	inc    ecx
c001603e:	eb bb                	jmp    c0015ffb <Vm::faultHandler(regs*)+0x44>
c0016040:	80 fa 64             	cmp    dl,0x64
c0016043:	0f 84 3f 01 00 00    	je     c0016188 <Vm::faultHandler(regs*)+0x1d1>
c0016049:	0f 87 46 01 00 00    	ja     c0016195 <Vm::faultHandler(regs*)+0x1de>
c001604f:	80 fa 3e             	cmp    dl,0x3e
c0016052:	0f 85 c9 05 00 00    	jne    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016058:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001605b:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016060:	eb db                	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c0016062:	80 fa 6d             	cmp    dl,0x6d
c0016065:	0f 84 e3 02 00 00    	je     c001634e <Vm::faultHandler(regs*)+0x397>
c001606b:	77 17                	ja     c0016084 <Vm::faultHandler(regs*)+0xcd>
c001606d:	80 fa 67             	cmp    dl,0x67
c0016070:	0f 84 46 01 00 00    	je     c00161bc <Vm::faultHandler(regs*)+0x205>
c0016076:	80 fa 6c             	cmp    dl,0x6c
c0016079:	0f 84 60 02 00 00    	je     c00162df <Vm::faultHandler(regs*)+0x328>
c001607f:	e9 9d 05 00 00       	jmp    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016084:	80 fa 6f             	cmp    dl,0x6f
c0016087:	0f 84 f1 03 00 00    	je     c001647e <Vm::faultHandler(regs*)+0x4c7>
c001608d:	0f 82 54 03 00 00    	jb     c00163e7 <Vm::faultHandler(regs*)+0x430>
c0016093:	80 fa 9c             	cmp    dl,0x9c
c0016096:	0f 84 2d 01 00 00    	je     c00161c9 <Vm::faultHandler(regs*)+0x212>
c001609c:	e9 80 05 00 00       	jmp    c0016621 <Vm::faultHandler(regs*)+0x66a>
c00160a1:	80 fa ec             	cmp    dl,0xec
c00160a4:	0f 84 19 05 00 00    	je     c00165c3 <Vm::faultHandler(regs*)+0x60c>
c00160aa:	77 79                	ja     c0016125 <Vm::faultHandler(regs*)+0x16e>
c00160ac:	80 fa e4             	cmp    dl,0xe4
c00160af:	0f 84 98 04 00 00    	je     c001654d <Vm::faultHandler(regs*)+0x596>
c00160b5:	77 51                	ja     c0016108 <Vm::faultHandler(regs*)+0x151>
c00160b7:	80 fa cd             	cmp    dl,0xcd
c00160ba:	0f 84 d3 01 00 00    	je     c0016293 <Vm::faultHandler(regs*)+0x2dc>
c00160c0:	80 fa cf             	cmp    dl,0xcf
c00160c3:	0f 85 58 05 00 00    	jne    c0016621 <Vm::faultHandler(regs*)+0x66a>
c00160c9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00160cc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00160cf:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00160d3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00160d6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00160da:	81 ca 00 02 02 00    	or     edx,0x20200
c00160e0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00160e3:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00160e7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00160ed:	c1 e8 09             	shr    eax,0x9
c00160f0:	24 01                	and    al,0x1
c00160f2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00160f5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00160f8:	83 c0 06             	add    eax,0x6
c00160fb:	25 ff ff 00 00       	and    eax,0xffff
c0016100:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016103:	e9 15 05 00 00       	jmp    c001661d <Vm::faultHandler(regs*)+0x666>
c0016108:	80 fa e6             	cmp    dl,0xe6
c001610b:	0f 84 86 04 00 00    	je     c0016597 <Vm::faultHandler(regs*)+0x5e0>
c0016111:	0f 82 52 04 00 00    	jb     c0016569 <Vm::faultHandler(regs*)+0x5b2>
c0016117:	80 fa e7             	cmp    dl,0xe7
c001611a:	0f 84 8e 04 00 00    	je     c00165ae <Vm::faultHandler(regs*)+0x5f7>
c0016120:	e9 fc 04 00 00       	jmp    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016125:	80 fa ef             	cmp    dl,0xef
c0016128:	0f 84 d9 04 00 00    	je     c0016607 <Vm::faultHandler(regs*)+0x650>
c001612e:	77 28                	ja     c0016158 <Vm::faultHandler(regs*)+0x1a1>
c0016130:	80 fa ed             	cmp    dl,0xed
c0016133:	0f 84 a6 04 00 00    	je     c00165df <Vm::faultHandler(regs*)+0x628>
c0016139:	80 fa ee             	cmp    dl,0xee
c001613c:	0f 85 df 04 00 00    	jne    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016142:	50                   	push   eax
c0016143:	50                   	push   eax
c0016144:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016148:	50                   	push   eax
c0016149:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001614d:	50                   	push   eax
c001614e:	e8 b9 f9 ff ff       	call   c0015b0c <Vm::outbv(unsigned short, unsigned char)>
c0016153:	e9 a7 04 00 00       	jmp    c00165ff <Vm::faultHandler(regs*)+0x648>
c0016158:	80 fa fa             	cmp    dl,0xfa
c001615b:	0f 84 62 01 00 00    	je     c00162c3 <Vm::faultHandler(regs*)+0x30c>
c0016161:	80 fa fb             	cmp    dl,0xfb
c0016164:	0f 84 67 01 00 00    	je     c00162d1 <Vm::faultHandler(regs*)+0x31a>
c001616a:	80 fa f3             	cmp    dl,0xf3
c001616d:	0f 85 ae 04 00 00    	jne    c0016621 <Vm::faultHandler(regs*)+0x66a>
c0016173:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016176:	e9 c2 fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c001617b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001617e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c0016183:	e9 b5 fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c0016188:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001618b:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c0016190:	e9 a8 fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c0016195:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016198:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c001619d:	e9 9b fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c00161a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161a5:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c00161aa:	e9 8e fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c00161af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161b2:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c00161b7:	e9 81 fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c00161bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161bf:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00161c4:	e9 74 fe ff ff       	jmp    c001603d <Vm::faultHandler(regs*)+0x86>
c00161c9:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00161ce:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00161d1:	74 30                	je     c0016203 <Vm::faultHandler(regs*)+0x24c>
c00161d3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00161d6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00161dc:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00161e2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00161e5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00161e8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00161ee:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00161f2:	0f 84 22 04 00 00    	je     c001661a <Vm::faultHandler(regs*)+0x663>
c00161f8:	80 ce 02             	or     dh,0x2
c00161fb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00161fe:	e9 17 04 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c0016203:	8d 4e fe             	lea    ecx,[esi-0x2]
c0016206:	0f b7 d2             	movzx  edx,dx
c0016209:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001620f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016212:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016216:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001621c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016220:	74 05                	je     c0016227 <Vm::faultHandler(regs*)+0x270>
c0016222:	80 ce 02             	or     dh,0x2
c0016225:	eb 03                	jmp    c001622a <Vm::faultHandler(regs*)+0x273>
c0016227:	80 e6 fd             	and    dh,0xfd
c001622a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001622e:	e9 e7 03 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c0016233:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016238:	74 29                	je     c0016263 <Vm::faultHandler(regs*)+0x2ac>
c001623a:	8b 10                	mov    edx,DWORD PTR [eax]
c001623c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016242:	81 ca 00 02 02 00    	or     edx,0x20200
c0016248:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001624b:	8b 00                	mov    eax,DWORD PTR [eax]
c001624d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016253:	c1 e8 09             	shr    eax,0x9
c0016256:	24 01                	and    al,0x1
c0016258:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001625b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001625e:	83 c0 04             	add    eax,0x4
c0016261:	eb 23                	jmp    c0016286 <Vm::faultHandler(regs*)+0x2cf>
c0016263:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016266:	81 ca 00 02 02 00    	or     edx,0x20200
c001626c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001626f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016272:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016278:	c1 e8 09             	shr    eax,0x9
c001627b:	24 01                	and    al,0x1
c001627d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016280:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016283:	83 c0 02             	add    eax,0x2
c0016286:	25 ff ff 00 00       	and    eax,0xffff
c001628b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001628e:	e9 87 03 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c0016293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016297:	3c ee                	cmp    al,0xee
c0016299:	75 10                	jne    c00162ab <Vm::faultHandler(regs*)+0x2f4>
c001629b:	83 ec 0c             	sub    esp,0xc
c001629e:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00162a1:	e8 05 f9 ff ff       	call   c0015bab <Vm::mainloop3(unsigned long)>
c00162a6:	e9 57 03 00 00       	jmp    c0016602 <Vm::faultHandler(regs*)+0x64b>
c00162ab:	83 ec 0c             	sub    esp,0xc
c00162ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162b2:	55                   	push   ebp
c00162b3:	51                   	push   ecx
c00162b4:	50                   	push   eax
c00162b5:	53                   	push   ebx
c00162b6:	e8 f9 fb ff ff       	call   c0015eb4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00162bb:	83 c4 20             	add    esp,0x20
c00162be:	e9 5a 03 00 00       	jmp    c001661d <Vm::faultHandler(regs*)+0x666>
c00162c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162c8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00162cc:	e9 49 03 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c00162d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162d6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00162da:	e9 3b 03 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c00162df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00162e4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00162e7:	74 2b                	je     c0016314 <Vm::faultHandler(regs*)+0x35d>
c00162e9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00162f0:	76 22                	jbe    c0016314 <Vm::faultHandler(regs*)+0x35d>
c00162f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00162f6:	50                   	push   eax
c00162f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00162fb:	50                   	push   eax
c00162fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016300:	50                   	push   eax
c0016301:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016305:	50                   	push   eax
c0016306:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001630a:	50                   	push   eax
c001630b:	6a 6c                	push   0x6c
c001630d:	6a 6c                	push   0x6c
c001630f:	e9 c6 01 00 00       	jmp    c00164da <Vm::faultHandler(regs*)+0x523>
c0016314:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	0f b7 f6             	movzx  esi,si
c001631e:	50                   	push   eax
c001631f:	e8 d3 f7 ff ff       	call   c0015af7 <Vm::inbv(unsigned short)>
c0016324:	83 c4 0c             	add    esp,0xc
c0016327:	0f b6 c0             	movzx  eax,al
c001632a:	50                   	push   eax
c001632b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001632f:	50                   	push   eax
c0016330:	56                   	push   esi
c0016331:	e8 40 fc ff ff       	call   c0015f76 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001633c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016340:	74 03                	je     c0016345 <Vm::faultHandler(regs*)+0x38e>
c0016342:	48                   	dec    eax
c0016343:	eb 01                	jmp    c0016346 <Vm::faultHandler(regs*)+0x38f>
c0016345:	40                   	inc    eax
c0016346:	0f b7 c0             	movzx  eax,ax
c0016349:	e9 91 00 00 00       	jmp    c00163df <Vm::faultHandler(regs*)+0x428>
c001634e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016353:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016356:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016359:	74 29                	je     c0016384 <Vm::faultHandler(regs*)+0x3cd>
c001635b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016360:	76 22                	jbe    c0016384 <Vm::faultHandler(regs*)+0x3cd>
c0016362:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016366:	50                   	push   eax
c0016367:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001636b:	50                   	push   eax
c001636c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016370:	50                   	push   eax
c0016371:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016375:	50                   	push   eax
c0016376:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001637a:	50                   	push   eax
c001637b:	6a 6d                	push   0x6d
c001637d:	6a 6d                	push   0x6d
c001637f:	e9 56 01 00 00       	jmp    c00164da <Vm::faultHandler(regs*)+0x523>
c0016384:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016389:	0f b7 c8             	movzx  ecx,ax
c001638c:	0f b7 f6             	movzx  esi,si
c001638f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016393:	74 1e                	je     c00163b3 <Vm::faultHandler(regs*)+0x3fc>
c0016395:	ed                   	in     eax,dx
c0016396:	52                   	push   edx
c0016397:	50                   	push   eax
c0016398:	51                   	push   ecx
c0016399:	56                   	push   esi
c001639a:	e8 03 fc ff ff       	call   c0015fa2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001639f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163a2:	83 c4 10             	add    esp,0x10
c00163a5:	8d 50 04             	lea    edx,[eax+0x4]
c00163a8:	83 e8 04             	sub    eax,0x4
c00163ab:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163b1:	eb 20                	jmp    c00163d3 <Vm::faultHandler(regs*)+0x41c>
c00163b3:	66 ed                	in     ax,dx
c00163b5:	55                   	push   ebp
c00163b6:	0f b7 c0             	movzx  eax,ax
c00163b9:	50                   	push   eax
c00163ba:	51                   	push   ecx
c00163bb:	56                   	push   esi
c00163bc:	e8 ca fb ff ff       	call   c0015f8b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00163c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	8d 50 02             	lea    edx,[eax+0x2]
c00163ca:	83 e8 02             	sub    eax,0x2
c00163cd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00163d3:	25 ff ff 00 00       	and    eax,0xffff
c00163d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00163dc:	0f 44 c2             	cmove  eax,edx
c00163df:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00163e2:	e9 33 02 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c00163e7:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c00163eb:	fe c8                	dec    al
c00163ed:	3c 05                	cmp    al,0x5
c00163ef:	77 23                	ja     c0016414 <Vm::faultHandler(regs*)+0x45d>
c00163f1:	0f b6 c0             	movzx  eax,al
c00163f4:	ff 24 85 dc 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf024]
c00163fb:	89 ef                	mov    edi,ebp
c00163fd:	eb 15                	jmp    c0016414 <Vm::faultHandler(regs*)+0x45d>
c00163ff:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016403:	eb 0f                	jmp    c0016414 <Vm::faultHandler(regs*)+0x45d>
c0016405:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016409:	eb 09                	jmp    c0016414 <Vm::faultHandler(regs*)+0x45d>
c001640b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001640f:	eb 03                	jmp    c0016414 <Vm::faultHandler(regs*)+0x45d>
c0016411:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016414:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016419:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001641c:	74 29                	je     c0016447 <Vm::faultHandler(regs*)+0x490>
c001641e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016423:	76 22                	jbe    c0016447 <Vm::faultHandler(regs*)+0x490>
c0016425:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016429:	50                   	push   eax
c001642a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001642e:	50                   	push   eax
c001642f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016433:	50                   	push   eax
c0016434:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016438:	50                   	push   eax
c0016439:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001643d:	50                   	push   eax
c001643e:	6a 6e                	push   0x6e
c0016440:	6a 6e                	push   0x6e
c0016442:	e9 93 00 00 00       	jmp    c00164da <Vm::faultHandler(regs*)+0x523>
c0016447:	51                   	push   ecx
c0016448:	0f b7 c0             	movzx  eax,ax
c001644b:	51                   	push   ecx
c001644c:	50                   	push   eax
c001644d:	57                   	push   edi
c001644e:	e8 ef fa ff ff       	call   c0015f42 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016453:	5e                   	pop    esi
c0016454:	5f                   	pop    edi
c0016455:	0f b6 c0             	movzx  eax,al
c0016458:	50                   	push   eax
c0016459:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001645d:	50                   	push   eax
c001645e:	e8 a9 f6 ff ff       	call   c0015b0c <Vm::outbv(unsigned short, unsigned char)>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016469:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001646d:	74 03                	je     c0016472 <Vm::faultHandler(regs*)+0x4bb>
c001646f:	48                   	dec    eax
c0016470:	eb 01                	jmp    c0016473 <Vm::faultHandler(regs*)+0x4bc>
c0016472:	40                   	inc    eax
c0016473:	0f b7 c0             	movzx  eax,ax
c0016476:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016479:	e9 9c 01 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c001647e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016482:	fe c8                	dec    al
c0016484:	3c 05                	cmp    al,0x5
c0016486:	77 23                	ja     c00164ab <Vm::faultHandler(regs*)+0x4f4>
c0016488:	0f b6 c0             	movzx  eax,al
c001648b:	ff 24 85 f4 0f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf00c]
c0016492:	89 ef                	mov    edi,ebp
c0016494:	eb 15                	jmp    c00164ab <Vm::faultHandler(regs*)+0x4f4>
c0016496:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001649a:	eb 0f                	jmp    c00164ab <Vm::faultHandler(regs*)+0x4f4>
c001649c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00164a0:	eb 09                	jmp    c00164ab <Vm::faultHandler(regs*)+0x4f4>
c00164a2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00164a6:	eb 03                	jmp    c00164ab <Vm::faultHandler(regs*)+0x4f4>
c00164a8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00164ab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00164b0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00164b3:	74 37                	je     c00164ec <Vm::faultHandler(regs*)+0x535>
c00164b5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00164bb:	76 2f                	jbe    c00164ec <Vm::faultHandler(regs*)+0x535>
c00164bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164c1:	50                   	push   eax
c00164c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164c6:	50                   	push   eax
c00164c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164cb:	50                   	push   eax
c00164cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164d0:	50                   	push   eax
c00164d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164d5:	50                   	push   eax
c00164d6:	6a 6f                	push   0x6f
c00164d8:	6a 6f                	push   0x6f
c00164da:	68 82 0f 02 c0       	push   0xc0020f82
c00164df:	e8 f2 44 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00164e4:	83 c4 20             	add    esp,0x20
c00164e7:	e9 89 01 00 00       	jmp    c0016675 <Vm::faultHandler(regs*)+0x6be>
c00164ec:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00164ef:	0f b7 c6             	movzx  eax,si
c00164f2:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c00164f6:	81 e1 00 04 00 00    	and    ecx,0x400
c00164fc:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016501:	74 1c                	je     c001651f <Vm::faultHandler(regs*)+0x568>
c0016503:	52                   	push   edx
c0016504:	52                   	push   edx
c0016505:	50                   	push   eax
c0016506:	57                   	push   edi
c0016507:	e8 59 fa ff ff       	call   c0015f65 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001650c:	83 c4 10             	add    esp,0x10
c001650f:	89 ea                	mov    edx,ebp
c0016511:	ef                   	out    dx,eax
c0016512:	8d 46 04             	lea    eax,[esi+0x4]
c0016515:	83 ee 04             	sub    esi,0x4
c0016518:	25 ff ff 00 00       	and    eax,0xffff
c001651d:	eb 1b                	jmp    c001653a <Vm::faultHandler(regs*)+0x583>
c001651f:	52                   	push   edx
c0016520:	52                   	push   edx
c0016521:	50                   	push   eax
c0016522:	57                   	push   edi
c0016523:	e8 2b fa ff ff       	call   c0015f53 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016528:	83 c4 10             	add    esp,0x10
c001652b:	89 ea                	mov    edx,ebp
c001652d:	66 ef                	out    dx,ax
c001652f:	8d 46 02             	lea    eax,[esi+0x2]
c0016532:	83 ee 02             	sub    esi,0x2
c0016535:	25 ff ff 00 00       	and    eax,0xffff
c001653a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016540:	85 c9                	test   ecx,ecx
c0016542:	0f 44 f0             	cmove  esi,eax
c0016545:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016548:	e9 cd 00 00 00       	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c001654d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016554:	83 ec 0c             	sub    esp,0xc
c0016557:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001655b:	50                   	push   eax
c001655c:	e8 96 f5 ff ff       	call   c0015af7 <Vm::inbv(unsigned short)>
c0016561:	0f b6 c0             	movzx  eax,al
c0016564:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016567:	eb 3f                	jmp    c00165a8 <Vm::faultHandler(regs*)+0x5f1>
c0016569:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001656e:	74 07                	je     c0016577 <Vm::faultHandler(regs*)+0x5c0>
c0016570:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016574:	ed                   	in     eax,dx
c0016575:	eb 14                	jmp    c001658b <Vm::faultHandler(regs*)+0x5d4>
c0016577:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001657a:	66 31 f6             	xor    si,si
c001657d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016580:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016584:	66 ed                	in     ax,dx
c0016586:	0f b7 c0             	movzx  eax,ax
c0016589:	09 f0                	or     eax,esi
c001658b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001658e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016592:	e9 86 00 00 00       	jmp    c001661d <Vm::faultHandler(regs*)+0x666>
c0016597:	52                   	push   edx
c0016598:	52                   	push   edx
c0016599:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001659d:	50                   	push   eax
c001659e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165a2:	50                   	push   eax
c00165a3:	e8 64 f5 ff ff       	call   c0015b0c <Vm::outbv(unsigned short, unsigned char)>
c00165a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00165ac:	eb 54                	jmp    c0016602 <Vm::faultHandler(regs*)+0x64b>
c00165ae:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00165b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165b6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00165ba:	74 03                	je     c00165bf <Vm::faultHandler(regs*)+0x608>
c00165bc:	ef                   	out    dx,eax
c00165bd:	eb cf                	jmp    c001658e <Vm::faultHandler(regs*)+0x5d7>
c00165bf:	66 ef                	out    dx,ax
c00165c1:	eb cb                	jmp    c001658e <Vm::faultHandler(regs*)+0x5d7>
c00165c3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165c7:	83 ec 0c             	sub    esp,0xc
c00165ca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00165d1:	50                   	push   eax
c00165d2:	e8 20 f5 ff ff       	call   c0015af7 <Vm::inbv(unsigned short)>
c00165d7:	0f b6 c0             	movzx  eax,al
c00165da:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00165dd:	eb 20                	jmp    c00165ff <Vm::faultHandler(regs*)+0x648>
c00165df:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00165e4:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00165e8:	74 03                	je     c00165ed <Vm::faultHandler(regs*)+0x636>
c00165ea:	ed                   	in     eax,dx
c00165eb:	eb 0d                	jmp    c00165fa <Vm::faultHandler(regs*)+0x643>
c00165ed:	66 ed                	in     ax,dx
c00165ef:	0f b7 d0             	movzx  edx,ax
c00165f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00165f5:	66 31 c0             	xor    ax,ax
c00165f8:	09 d0                	or     eax,edx
c00165fa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00165fd:	eb 1b                	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c00165ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016602:	83 c4 10             	add    esp,0x10
c0016605:	eb 16                	jmp    c001661d <Vm::faultHandler(regs*)+0x666>
c0016607:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001660c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001660f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016613:	74 03                	je     c0016618 <Vm::faultHandler(regs*)+0x661>
c0016615:	ef                   	out    dx,eax
c0016616:	eb 02                	jmp    c001661a <Vm::faultHandler(regs*)+0x663>
c0016618:	66 ef                	out    dx,ax
c001661a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001661d:	b0 01                	mov    al,0x1
c001661f:	eb 56                	jmp    c0016677 <Vm::faultHandler(regs*)+0x6c0>
c0016621:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016625:	50                   	push   eax
c0016626:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001662a:	50                   	push   eax
c001662b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001662f:	50                   	push   eax
c0016630:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016634:	50                   	push   eax
c0016635:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016639:	50                   	push   eax
c001663a:	52                   	push   edx
c001663b:	52                   	push   edx
c001663c:	68 af 0f 02 c0       	push   0xc0020faf
c0016641:	e8 90 43 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016646:	83 c4 20             	add    esp,0x20
c0016649:	83 ec 0c             	sub    esp,0xc
c001664c:	6a 60                	push   0x60
c001664e:	e8 a4 f4 ff ff       	call   c0015af7 <Vm::inbv(unsigned short)>
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	3c 1c                	cmp    al,0x1c
c0016658:	74 04                	je     c001665e <Vm::faultHandler(regs*)+0x6a7>
c001665a:	3c 5a                	cmp    al,0x5a
c001665c:	75 eb                	jne    c0016649 <Vm::faultHandler(regs*)+0x692>
c001665e:	3c 1c                	cmp    al,0x1c
c0016660:	74 04                	je     c0016666 <Vm::faultHandler(regs*)+0x6af>
c0016662:	3c 5a                	cmp    al,0x5a
c0016664:	75 0f                	jne    c0016675 <Vm::faultHandler(regs*)+0x6be>
c0016666:	83 ec 0c             	sub    esp,0xc
c0016669:	6a 60                	push   0x60
c001666b:	e8 87 f4 ff ff       	call   c0015af7 <Vm::inbv(unsigned short)>
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	eb e9                	jmp    c001665e <Vm::faultHandler(regs*)+0x6a7>
c0016675:	31 c0                	xor    eax,eax
c0016677:	83 c4 1c             	add    esp,0x1c
c001667a:	5b                   	pop    ebx
c001667b:	5e                   	pop    esi
c001667c:	5f                   	pop    edi
c001667d:	5d                   	pop    ebp
c001667e:	c3                   	ret    

c001667f <noCopro(unsigned long)>:
c001667f:	c3                   	ret    

c0016680 <nmiHandler(regs*, void*)>:
c0016680:	83 ec 1c             	sub    esp,0x1c
c0016683:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016688:	89 04 24             	mov    DWORD PTR [esp],eax
c001668b:	e8 c8 0b ff ff       	call   c0007258 <Computer::handleNMI()>
c0016690:	90                   	nop
c0016691:	83 c4 1c             	add    esp,0x1c
c0016694:	c3                   	ret    

c0016695 <doubleFault(regs*, void*)>:
c0016695:	55                   	push   ebp
c0016696:	89 e5                	mov    ebp,esp
c0016698:	83 ec 18             	sub    esp,0x18
c001669b:	c7 04 24 0c 10 02 c0 	mov    DWORD PTR [esp],0xc002100c
c00166a2:	e8 7e a0 ff ff       	call   c0010725 <KePanic(char const*)>
c00166a7:	90                   	nop
c00166a8:	c9                   	leave  
c00166a9:	c3                   	ret    

c00166aa <displayDebugInfo(regs*)>:
c00166aa:	83 ec 2c             	sub    esp,0x2c
c00166ad:	0f 20 c0             	mov    eax,cr0
c00166b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166b4:	0f 20 d0             	mov    eax,cr2
c00166b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166bb:	0f 20 d8             	mov    eax,cr3
c00166be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00166c2:	0f 20 e0             	mov    eax,cr4
c00166c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166cd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00166d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166d4:	c7 04 24 28 10 02 c0 	mov    DWORD PTR [esp],0xc0021028
c00166db:	e8 f6 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00166e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166e4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00166e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166eb:	c7 04 24 19 10 02 c0 	mov    DWORD PTR [esp],0xc0021019
c00166f2:	e8 df 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00166f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166fb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00166fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016702:	c7 04 24 24 10 02 c0 	mov    DWORD PTR [esp],0xc0021024
c0016709:	e8 c8 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001670e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016712:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016715:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016719:	c7 04 24 33 10 02 c0 	mov    DWORD PTR [esp],0xc0021033
c0016720:	e8 b1 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016729:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001672c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016730:	c7 04 24 3e 10 02 c0 	mov    DWORD PTR [esp],0xc002103e
c0016737:	e8 9a 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001673c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016740:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016744:	c7 04 24 49 10 02 c0 	mov    DWORD PTR [esp],0xc0021049
c001674b:	e8 86 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016754:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016758:	c7 04 24 54 10 02 c0 	mov    DWORD PTR [esp],0xc0021054
c001675f:	e8 72 42 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016764:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016769:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001676f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016772:	e8 5c 1f ff ff       	call   c00086d3 <setActiveTerminal(VgaText*)>
c0016777:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001677c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016782:	c7 44 24 04 5f 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002105f
c001678a:	89 04 24             	mov    DWORD PTR [esp],eax
c001678d:	e8 86 22 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016792:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016797:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001679d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00167a1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00167a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00167a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ab:	e8 22 22 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c00167b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167bb:	c7 44 24 04 6d 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002106d
c00167c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00167c6:	e8 4d 22 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c00167cb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167d6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00167db:	8b 12                	mov    edx,DWORD PTR [edx]
c00167dd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00167e0:	83 c2 0c             	add    edx,0xc
c00167e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00167e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ea:	e8 29 22 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c00167ef:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00167f4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00167fa:	c7 44 24 04 76 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021076
c0016802:	89 04 24             	mov    DWORD PTR [esp],eax
c0016805:	e8 0e 22 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c001680a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001680f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016815:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016819:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001681c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016820:	89 04 24             	mov    DWORD PTR [esp],eax
c0016823:	e8 aa 21 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c0016828:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001682d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016833:	c7 44 24 04 7e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002107e
c001683b:	89 04 24             	mov    DWORD PTR [esp],eax
c001683e:	e8 d5 21 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016843:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016848:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001684e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016852:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016859:	89 04 24             	mov    DWORD PTR [esp],eax
c001685c:	e8 71 21 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c0016861:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016866:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001686c:	c7 44 24 04 86 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021086
c0016874:	89 04 24             	mov    DWORD PTR [esp],eax
c0016877:	e8 9c 21 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c001687c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016881:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016887:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001688b:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001688e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016892:	89 04 24             	mov    DWORD PTR [esp],eax
c0016895:	e8 38 21 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c001689a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001689f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168a5:	c7 44 24 04 8e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002108e
c00168ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00168b0:	e8 63 21 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c00168b5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168c4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00168ce:	e8 ff 20 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c00168d3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168d8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168de:	c7 44 24 04 96 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021096
c00168e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00168e9:	e8 2a 21 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c00168ee:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168fd:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016900:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016904:	89 04 24             	mov    DWORD PTR [esp],eax
c0016907:	e8 c6 20 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c001690c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016911:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016917:	c7 44 24 04 9e 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002109e
c001691f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016922:	e8 f1 20 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016927:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001692c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016932:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016936:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001693d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016940:	e8 8d 20 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c0016945:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001694a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016950:	c7 44 24 04 a6 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210a6
c0016958:	89 04 24             	mov    DWORD PTR [esp],eax
c001695b:	e8 b8 20 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016960:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016965:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001696f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016973:	89 04 24             	mov    DWORD PTR [esp],eax
c0016976:	e8 57 20 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c001697b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016980:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016986:	c7 44 24 04 af 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210af
c001698e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016991:	e8 82 20 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016996:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00169a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00169ac:	e8 21 20 ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c00169b1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169bc:	c7 44 24 04 b7 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210b7
c00169c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00169c7:	e8 4c 20 ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c00169cc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169df:	89 04 24             	mov    DWORD PTR [esp],eax
c00169e2:	e8 eb 1f ff ff       	call   c00089d2 <VgaText::putx(unsigned int)>
c00169e7:	fa                   	cli    
c00169e8:	f4                   	hlt    
c00169e9:	eb fe                	jmp    c00169e9 <displayDebugInfo(regs*)+0x33f>

c00169eb <HalSystemIdle()>:
c00169eb:	56                   	push   esi
c00169ec:	53                   	push   ebx
c00169ed:	83 ec 24             	sub    esp,0x24
c00169f0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00169f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169fb:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0016a02:	24 04                	and    al,0x4
c0016a04:	0f 95 c0             	setne  al
c0016a07:	84 c0                	test   al,al
c0016a09:	74 53                	je     c0016a5e <HalSystemIdle()+0x73>
c0016a0b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a10:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016a18:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a1b:	e8 10 06 ff ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c0016a20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a24:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a28:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016a2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a31:	83 e2 02             	and    edx,0x2
c0016a34:	89 d3                	mov    ebx,edx
c0016a36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a3a:	83 e2 00             	and    edx,0x0
c0016a3d:	89 d6                	mov    esi,edx
c0016a3f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016a43:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016a47:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016a4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a52:	e8 01 06 ff ff       	call   c0007058 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016a57:	e8 38 97 fe ff       	call   c0000194 <doTPAUSE>
c0016a5c:	eb 01                	jmp    c0016a5f <HalSystemIdle()+0x74>
c0016a5e:	f4                   	hlt    
c0016a5f:	90                   	nop
c0016a60:	83 c4 24             	add    esp,0x24
c0016a63:	5b                   	pop    ebx
c0016a64:	5e                   	pop    esi
c0016a65:	c3                   	ret    

c0016a66 <displayProgramFault(char const*)>:
c0016a66:	83 ec 1c             	sub    esp,0x1c
c0016a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a70:	e8 61 3f ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016a75:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a85:	85 c0                	test   eax,eax
c0016a87:	74 30                	je     c0016ab9 <displayProgramFault(char const*)+0x53>
c0016a89:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016a90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016a93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a99:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c0016aa1:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0016aa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016aad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ab4:	e8 d1 1f ff ff       	call   c0008a8a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016ab9:	90                   	nop
c0016aba:	83 c4 1c             	add    esp,0x1c
c0016abd:	c3                   	ret    

c0016abe <gpFault(regs*, void*)>:
c0016abe:	83 ec 2c             	sub    esp,0x2c
c0016ac1:	c7 05 10 82 02 c0 b7 5f 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc0015fb7
c0016acb:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016ad0:	85 c0                	test   eax,eax
c0016ad2:	74 19                	je     c0016aed <gpFault(regs*, void*)+0x2f>
c0016ad4:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016ad9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016add:	89 14 24             	mov    DWORD PTR [esp],edx
c0016ae0:	ff d0                	call   eax
c0016ae2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016ae6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016aeb:	75 26                	jne    c0016b13 <gpFault(regs*, void*)+0x55>
c0016aed:	c7 04 24 bf 10 02 c0 	mov    DWORD PTR [esp],0xc00210bf
c0016af4:	e8 6d ff ff ff       	call   c0016a66 <displayProgramFault(char const*)>
c0016af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016afd:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b00:	e8 a5 fb ff ff       	call   c00166aa <displayDebugInfo(regs*)>
c0016b05:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016b0c:	e8 ab ee ff ff       	call   c00159bc <Thr::terminateFromIRQ(int)>
c0016b11:	eb 01                	jmp    c0016b14 <gpFault(regs*, void*)+0x56>
c0016b13:	90                   	nop
c0016b14:	83 c4 2c             	add    esp,0x2c
c0016b17:	c3                   	ret    

c0016b18 <pgFault(regs*, void*)>:
c0016b18:	83 ec 2c             	sub    esp,0x2c
c0016b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b1f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016b22:	0f 20 d0             	mov    eax,cr2
c0016b25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b2d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016b31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b35:	c7 04 24 9c 11 02 c0 	mov    DWORD PTR [esp],0xc002119c
c0016b3c:	e8 95 3e ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016b41:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b4b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016b51:	0f 20 d2             	mov    edx,cr2
c0016b54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016b60:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b63:	e8 c2 39 ff ff       	call   c000a52a <VAS::tryLoadBackOffDisk(unsigned long)>
c0016b68:	84 c0                	test   al,al
c0016b6a:	75 26                	jne    c0016b92 <pgFault(regs*, void*)+0x7a>
c0016b6c:	c7 04 24 d8 10 02 c0 	mov    DWORD PTR [esp],0xc00210d8
c0016b73:	e8 ee fe ff ff       	call   c0016a66 <displayProgramFault(char const*)>
c0016b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7f:	e8 26 fb ff ff       	call   c00166aa <displayDebugInfo(regs*)>
c0016b84:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016b8b:	e8 2c ee ff ff       	call   c00159bc <Thr::terminateFromIRQ(int)>
c0016b90:	eb 01                	jmp    c0016b93 <pgFault(regs*, void*)+0x7b>
c0016b92:	90                   	nop
c0016b93:	83 c4 2c             	add    esp,0x2c
c0016b96:	c3                   	ret    

c0016b97 <otherISRHandler(regs*, void*)>:
c0016b97:	83 ec 1c             	sub    esp,0x1c
c0016b9a:	c7 04 24 c4 11 02 c0 	mov    DWORD PTR [esp],0xc00211c4
c0016ba1:	e8 c0 fe ff ff       	call   c0016a66 <displayProgramFault(char const*)>
c0016ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016baa:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bad:	e8 f8 fa ff ff       	call   c00166aa <displayDebugInfo(regs*)>
c0016bb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016bb9:	e8 fe ed ff ff       	call   c00159bc <Thr::terminateFromIRQ(int)>
c0016bbe:	90                   	nop
c0016bbf:	83 c4 1c             	add    esp,0x1c
c0016bc2:	c3                   	ret    

c0016bc3 <opcodeFault(regs*, void*)>:
c0016bc3:	55                   	push   ebp
c0016bc4:	89 e5                	mov    ebp,esp
c0016bc6:	83 ec 18             	sub    esp,0x18
c0016bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016bcc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016bcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bd3:	c7 04 24 e3 10 02 c0 	mov    DWORD PTR [esp],0xc00210e3
c0016bda:	e8 f7 3d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016bdf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016be4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bea:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c0016bf1:	84 c0                	test   al,al
c0016bf3:	74 1d                	je     c0016c12 <opcodeFault(regs*, void*)+0x4f>
c0016bf5:	c7 04 24 ec 11 02 c0 	mov    DWORD PTR [esp],0xc00211ec
c0016bfc:	e8 d5 3d ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c04:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c07:	8d 50 19             	lea    edx,[eax+0x19]
c0016c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c10:	eb 23                	jmp    c0016c35 <opcodeFault(regs*, void*)+0x72>
c0016c12:	c7 04 24 f1 10 02 c0 	mov    DWORD PTR [esp],0xc00210f1
c0016c19:	e8 48 fe ff ff       	call   c0016a66 <displayProgramFault(char const*)>
c0016c1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016c21:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c24:	e8 81 fa ff ff       	call   c00166aa <displayDebugInfo(regs*)>
c0016c29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c30:	e8 87 ed ff ff       	call   c00159bc <Thr::terminateFromIRQ(int)>
c0016c35:	c9                   	leave  
c0016c36:	c3                   	ret    

c0016c37 <i386SaveCoprocessor(void*)>:
c0016c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c3b:	83 c0 3f             	add    eax,0x3f
c0016c3e:	83 e0 c0             	and    eax,0xffffffc0
c0016c41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c45:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016c4b <i386LoadCoprocessor(void*)>:
c0016c4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4f:	83 c0 3f             	add    eax,0x3f
c0016c52:	83 e0 c0             	and    eax,0xffffffc0
c0016c55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c59:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016c5f <x87EmulHandler(regs*, void*)>:
c0016c5f:	53                   	push   ebx
c0016c60:	83 ec 08             	sub    esp,0x8
c0016c63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c68:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016c6c:	74 10                	je     c0016c7e <x87EmulHandler(regs*, void*)+0x1f>
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	68 fe 10 02 c0       	push   0xc00210fe
c0016c76:	e8 aa 9a ff ff       	call   c0010725 <KePanic(char const*)>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	0f 20 c0             	mov    eax,cr0
c0016c81:	a8 08                	test   al,0x8
c0016c83:	74 59                	je     c0016cde <x87EmulHandler(regs*, void*)+0x7f>
c0016c85:	0f 06                	clts   
c0016c87:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016c8c:	85 c0                	test   eax,eax
c0016c8e:	74 0e                	je     c0016c9e <x87EmulHandler(regs*, void*)+0x3f>
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016c96:	e8 9c ff ff ff       	call   c0016c37 <i386SaveCoprocessor(void*)>
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016ca4:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016ca8:	75 12                	jne    c0016cbc <x87EmulHandler(regs*, void*)+0x5d>
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	68 40 02 00 00       	push   0x240
c0016cb2:	e8 af 0d ff ff       	call   c0007a66 <malloc>
c0016cb7:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016cba:	eb 10                	jmp    c0016ccc <x87EmulHandler(regs*, void*)+0x6d>
c0016cbc:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016cc1:	83 ec 0c             	sub    esp,0xc
c0016cc4:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016cc7:	e8 7f ff ff ff       	call   c0016c4b <i386LoadCoprocessor(void*)>
c0016ccc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd1:	83 c4 10             	add    esp,0x10
c0016cd4:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016cd9:	83 c4 08             	add    esp,0x8
c0016cdc:	5b                   	pop    ebx
c0016cdd:	c3                   	ret    
c0016cde:	83 ec 0c             	sub    esp,0xc
c0016ce1:	68 12 11 02 c0       	push   0xc0021112
c0016ce6:	e8 eb 3c ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016ceb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016cf3:	83 c4 18             	add    esp,0x18
c0016cf6:	5b                   	pop    ebx
c0016cf7:	e9 c0 ec ff ff       	jmp    c00159bc <Thr::terminateFromIRQ(int)>

c0016cfc <HalInitialiseCoprocessor()>:
c0016cfc:	83 ec 10             	sub    esp,0x10
c0016cff:	6a 00                	push   0x0
c0016d01:	68 5f 6c 01 c0       	push   0xc0016c5f
c0016d06:	6a 07                	push   0x7
c0016d08:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016d12:	e8 04 56 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016d17:	e8 d4 6e 00 00       	call   c001dbf0 <avxDetect>
c0016d1c:	83 c4 10             	add    esp,0x10
c0016d1f:	85 c0                	test   eax,eax
c0016d21:	74 1c                	je     c0016d3f <HalInitialiseCoprocessor()+0x43>
c0016d23:	c7 05 0c 82 02 c0 1a dc 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dc1a
c0016d2d:	c7 05 08 82 02 c0 2b dc 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dc2b
c0016d37:	83 c4 0c             	add    esp,0xc
c0016d3a:	e9 fd 6e 00 00       	jmp    c001dc3c <avxInit>
c0016d3f:	e8 3c 72 00 00       	call   c001df80 <absolutelyNoChanceInHell>
c0016d44:	85 c0                	test   eax,eax
c0016d46:	74 1c                	je     c0016d64 <HalInitialiseCoprocessor()+0x68>
c0016d48:	c7 05 0c 82 02 c0 98 df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001df98
c0016d52:	c7 05 08 82 02 c0 a0 df 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dfa0
c0016d5c:	83 c4 0c             	add    esp,0xc
c0016d5f:	e9 44 72 00 00       	jmp    c001dfa8 <sseInit>
c0016d64:	e8 5d 72 00 00       	call   c001dfc6 <x87Detect>
c0016d69:	85 c0                	test   eax,eax
c0016d6b:	74 1c                	je     c0016d89 <HalInitialiseCoprocessor()+0x8d>
c0016d6d:	c7 05 0c 82 02 c0 e1 df 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dfe1
c0016d77:	c7 05 08 82 02 c0 e8 df 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dfe8
c0016d81:	83 c4 0c             	add    esp,0xc
c0016d84:	e9 66 72 00 00       	jmp    c001dfef <x87Init>
c0016d89:	c7 05 0c 82 02 c0 7f 66 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001667f
c0016d93:	c7 05 08 82 02 c0 7f 66 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001667f
c0016d9d:	0f 20 c0             	mov    eax,cr0
c0016da0:	83 c8 04             	or     eax,0x4
c0016da3:	0f 22 c0             	mov    cr0,eax
c0016da6:	83 c4 0c             	add    esp,0xc
c0016da9:	c3                   	ret    

c0016daa <HalPanic(char const*)>:
c0016daa:	53                   	push   ebx
c0016dab:	83 ec 10             	sub    esp,0x10
c0016dae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016db2:	fa                   	cli    
c0016db3:	53                   	push   ebx
c0016db4:	68 28 11 02 c0       	push   0xc0021128
c0016db9:	e8 18 3c ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0016dbe:	83 c4 0c             	add    esp,0xc
c0016dc1:	6a 01                	push   0x1
c0016dc3:	6a 0f                	push   0xf
c0016dc5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016dcb:	e8 5e 17 ff ff       	call   c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016dd0:	58                   	pop    eax
c0016dd1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016dd7:	e8 42 19 ff ff       	call   c000871e <VgaText::clearScreen()>
c0016ddc:	5a                   	pop    edx
c0016ddd:	59                   	pop    ecx
c0016dde:	68 80 f9 01 c0       	push   0xc001f980
c0016de3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016de9:	e8 78 17 ff ff       	call   c0008566 <VgaText::setTitle(char*)>
c0016dee:	83 c4 0c             	add    esp,0xc
c0016df1:	6a 01                	push   0x1
c0016df3:	6a 0f                	push   0xf
c0016df5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016dfb:	e8 2e 17 ff ff       	call   c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e00:	58                   	pop    eax
c0016e01:	5a                   	pop    edx
c0016e02:	68 41 11 02 c0       	push   0xc0021141
c0016e07:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e0d:	e8 06 1c ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e12:	83 c4 0c             	add    esp,0xc
c0016e15:	6a 0f                	push   0xf
c0016e17:	6a 01                	push   0x1
c0016e19:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e1f:	e8 0a 17 ff ff       	call   c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e24:	59                   	pop    ecx
c0016e25:	58                   	pop    eax
c0016e26:	68 4a 11 02 c0       	push   0xc002114a
c0016e2b:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e31:	e8 e2 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e36:	83 c4 0c             	add    esp,0xc
c0016e39:	6a 01                	push   0x1
c0016e3b:	6a 0f                	push   0xf
c0016e3d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e43:	e8 e6 16 ff ff       	call   c000852e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016e48:	58                   	pop    eax
c0016e49:	5a                   	pop    edx
c0016e4a:	68 8e 11 02 c0       	push   0xc002118e
c0016e4f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e55:	e8 be 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e5a:	59                   	pop    ecx
c0016e5b:	58                   	pop    eax
c0016e5c:	68 57 11 02 c0       	push   0xc0021157
c0016e61:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e67:	e8 ac 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e6c:	58                   	pop    eax
c0016e6d:	5a                   	pop    edx
c0016e6e:	68 91 11 02 c0       	push   0xc0021191
c0016e73:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e79:	e8 9a 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e7e:	59                   	pop    ecx
c0016e7f:	58                   	pop    eax
c0016e80:	53                   	push   ebx
c0016e81:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e87:	e8 8c 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e8c:	58                   	pop    eax
c0016e8d:	5a                   	pop    edx
c0016e8e:	68 8e 11 02 c0       	push   0xc002118e
c0016e93:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016e99:	e8 7a 1b ff ff       	call   c0008a18 <VgaText::puts(char const*)>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	eb fe                	jmp    c0016ea1 <HalPanic(char const*)+0xf7>

c0016ea3 <HalQueryPerformanceCounter()>:
c0016ea3:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ea8:	31 d2                	xor    edx,edx
c0016eaa:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016eb0:	31 c0                	xor    eax,eax
c0016eb2:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016eb9:	74 02                	je     c0016ebd <HalQueryPerformanceCounter()+0x1a>
c0016ebb:	0f 31                	rdtsc  
c0016ebd:	c3                   	ret    

c0016ebe <HalInitialise()>:
c0016ebe:	53                   	push   ebx
c0016ebf:	83 ec 08             	sub    esp,0x8
c0016ec2:	e8 7f 56 ff ff       	call   c000c546 <setupINTS()>
c0016ec7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016ecc:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0016ed3:	75 07                	jne    c0016edc <HalInitialise()+0x1e>
c0016ed5:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016edc:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016ee3:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0016eea:	e8 a9 02 00 00       	call   c0017198 <picOpen()>
c0016eef:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0016ef6:	74 0a                	je     c0016f02 <HalInitialise()+0x44>
c0016ef8:	e8 df 01 00 00       	call   c00170dc <picDisable()>
c0016efd:	e8 47 66 00 00       	call   c001d549 <apicOpen()>
c0016f02:	50                   	push   eax
c0016f03:	bb 0f 00 00 00       	mov    ebx,0xf
c0016f08:	6a 00                	push   0x0
c0016f0a:	68 97 6b 01 c0       	push   0xc0016b97
c0016f0f:	6a 00                	push   0x0
c0016f11:	e8 05 54 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f16:	83 c4 0c             	add    esp,0xc
c0016f19:	6a 00                	push   0x0
c0016f1b:	68 97 6b 01 c0       	push   0xc0016b97
c0016f20:	6a 01                	push   0x1
c0016f22:	e8 f4 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f27:	83 c4 0c             	add    esp,0xc
c0016f2a:	6a 00                	push   0x0
c0016f2c:	68 80 66 01 c0       	push   0xc0016680
c0016f31:	6a 02                	push   0x2
c0016f33:	e8 e3 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f38:	83 c4 0c             	add    esp,0xc
c0016f3b:	6a 00                	push   0x0
c0016f3d:	68 97 6b 01 c0       	push   0xc0016b97
c0016f42:	6a 03                	push   0x3
c0016f44:	e8 d2 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f49:	83 c4 0c             	add    esp,0xc
c0016f4c:	6a 00                	push   0x0
c0016f4e:	68 97 6b 01 c0       	push   0xc0016b97
c0016f53:	6a 04                	push   0x4
c0016f55:	e8 c1 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f5a:	83 c4 0c             	add    esp,0xc
c0016f5d:	6a 00                	push   0x0
c0016f5f:	68 97 6b 01 c0       	push   0xc0016b97
c0016f64:	6a 05                	push   0x5
c0016f66:	e8 b0 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f6b:	83 c4 0c             	add    esp,0xc
c0016f6e:	6a 00                	push   0x0
c0016f70:	68 c3 6b 01 c0       	push   0xc0016bc3
c0016f75:	6a 06                	push   0x6
c0016f77:	e8 9f 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f7c:	83 c4 0c             	add    esp,0xc
c0016f7f:	6a 00                	push   0x0
c0016f81:	68 95 66 01 c0       	push   0xc0016695
c0016f86:	6a 08                	push   0x8
c0016f88:	e8 8e 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f8d:	83 c4 0c             	add    esp,0xc
c0016f90:	6a 00                	push   0x0
c0016f92:	68 97 6b 01 c0       	push   0xc0016b97
c0016f97:	6a 09                	push   0x9
c0016f99:	e8 7d 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016f9e:	83 c4 0c             	add    esp,0xc
c0016fa1:	6a 00                	push   0x0
c0016fa3:	68 97 6b 01 c0       	push   0xc0016b97
c0016fa8:	6a 0a                	push   0xa
c0016faa:	e8 6c 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016faf:	83 c4 0c             	add    esp,0xc
c0016fb2:	6a 00                	push   0x0
c0016fb4:	68 97 6b 01 c0       	push   0xc0016b97
c0016fb9:	6a 0b                	push   0xb
c0016fbb:	e8 5b 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fc0:	83 c4 0c             	add    esp,0xc
c0016fc3:	6a 00                	push   0x0
c0016fc5:	68 be 6a 01 c0       	push   0xc0016abe
c0016fca:	6a 0d                	push   0xd
c0016fcc:	e8 4a 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fd1:	83 c4 0c             	add    esp,0xc
c0016fd4:	6a 00                	push   0x0
c0016fd6:	68 18 6b 01 c0       	push   0xc0016b18
c0016fdb:	6a 0e                	push   0xe
c0016fdd:	e8 39 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016fe2:	83 c4 10             	add    esp,0x10
c0016fe5:	50                   	push   eax
c0016fe6:	6a 00                	push   0x0
c0016fe8:	68 97 6b 01 c0       	push   0xc0016b97
c0016fed:	53                   	push   ebx
c0016fee:	43                   	inc    ebx
c0016fef:	e8 27 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ff4:	83 c4 10             	add    esp,0x10
c0016ff7:	83 fb 1e             	cmp    ebx,0x1e
c0016ffa:	75 e9                	jne    c0016fe5 <HalInitialise()+0x127>
c0016ffc:	50                   	push   eax
c0016ffd:	6a 00                	push   0x0
c0016fff:	68 1b 1b 01 c0       	push   0xc0011b1b
c0017004:	6a 60                	push   0x60
c0017006:	e8 10 53 ff ff       	call   c000c31b <installISRHandler(int, void (*)(regs*, void*), void*)>
c001700b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017010:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001701a:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017021:	e8 40 0a ff ff       	call   c0007a66 <malloc>
c0017026:	89 04 24             	mov    DWORD PTR [esp],eax
c0017029:	89 c3                	mov    ebx,eax
c001702b:	e8 5c 09 00 00       	call   c001798c <RTC::RTC()>
c0017030:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001703a:	5a                   	pop    edx
c001703b:	59                   	pop    ecx
c001703c:	53                   	push   ebx
c001703d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017043:	e8 ba 4d ff ff       	call   c000be02 <Device::addChild(Device*)>
c0017048:	8b 03                	mov    eax,DWORD PTR [ebx]
c001704a:	6a 00                	push   0x0
c001704c:	6a 00                	push   0x0
c001704e:	6a 00                	push   0x0
c0017050:	53                   	push   ebx
c0017051:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017054:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017059:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001705f:	83 c4 28             	add    esp,0x28
c0017062:	5b                   	pop    ebx
c0017063:	c3                   	ret    

c0017064 <HalMakeBeep(int)>:
c0017064:	53                   	push   ebx
c0017065:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017069:	85 db                	test   ebx,ebx
c001706b:	75 06                	jne    c0017073 <HalMakeBeep(int)+0xf>
c001706d:	e4 61                	in     al,0x61
c001706f:	24 fc                	and    al,0xfc
c0017071:	eb 26                	jmp    c0017099 <HalMakeBeep(int)+0x35>
c0017073:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017078:	99                   	cdq    
c0017079:	f7 fb                	idiv   ebx
c001707b:	89 c1                	mov    ecx,eax
c001707d:	b0 b6                	mov    al,0xb6
c001707f:	e6 43                	out    0x43,al
c0017081:	88 c8                	mov    al,cl
c0017083:	e6 42                	out    0x42,al
c0017085:	89 c8                	mov    eax,ecx
c0017087:	c1 e8 08             	shr    eax,0x8
c001708a:	e6 42                	out    0x42,al
c001708c:	e4 61                	in     al,0x61
c001708e:	88 c2                	mov    dl,al
c0017090:	80 ca 03             	or     dl,0x3
c0017093:	38 c2                	cmp    dl,al
c0017095:	74 04                	je     c001709b <HalMakeBeep(int)+0x37>
c0017097:	88 d0                	mov    al,dl
c0017099:	e6 61                	out    0x61,al
c001709b:	5b                   	pop    ebx
c001709c:	c3                   	ret    

c001709d <HalGetRand()>:
c001709d:	31 c0                	xor    eax,eax
c001709f:	c3                   	ret    

c00170a0 <HalEndOfInterrupt(int)>:
c00170a0:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170a7:	74 23                	je     c00170cc <HalEndOfInterrupt(int)+0x2c>
c00170a9:	83 ec 14             	sub    esp,0x14
c00170ac:	6a 1b                	push   0x1b
c00170ae:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00170b4:	e8 77 ff fe ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c00170b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00170be:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00170c8:	83 c4 1c             	add    esp,0x1c
c00170cb:	c3                   	ret    
c00170cc:	e9 5b 02 00 00       	jmp    c001732c <picEOI(int)>

c00170d1 <HalRestart()>:
c00170d1:	c3                   	ret    

c00170d2 <HalShutdown()>:
c00170d2:	c3                   	ret    

c00170d3 <HalSleep()>:
c00170d3:	c3                   	ret    

c00170d4 <picIoWait()>:
c00170d4:	eb 00                	jmp    c00170d6 <picIoWait()+0x2>
c00170d6:	eb 00                	jmp    c00170d8 <picIoWait()+0x4>
c00170d8:	90                   	nop
c00170d9:	c3                   	ret    
c00170da:	66 90                	xchg   ax,ax

c00170dc <picDisable()>:
c00170dc:	83 ec 10             	sub    esp,0x10
c00170df:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00170e6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00170eb:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c00170f0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00170f5:	ee                   	out    dx,al
c00170f6:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00170fd:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017102:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017107:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001710c:	ee                   	out    dx,al
c001710d:	90                   	nop
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	c3                   	ret    
c0017112:	66 90                	xchg   ax,ax

c0017114 <picGetIRQReg(int)>:
c0017114:	83 ec 10             	sub    esp,0x10
c0017117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001711b:	0f b6 c0             	movzx  eax,al
c001711e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017125:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017129:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001712e:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0017133:	ee                   	out    dx,al
c0017134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017138:	0f b6 c0             	movzx  eax,al
c001713b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017142:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017146:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001714b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017150:	ee                   	out    dx,al
c0017151:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017158:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c001715d:	89 c2                	mov    edx,eax
c001715f:	ec                   	in     al,dx
c0017160:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017164:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017169:	0f b6 c0             	movzx  eax,al
c001716c:	c1 e0 08             	shl    eax,0x8
c001716f:	0f bf c8             	movsx  ecx,ax
c0017172:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017179:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001717e:	89 c2                	mov    edx,eax
c0017180:	ec                   	in     al,dx
c0017181:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017185:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001718a:	0f b6 c0             	movzx  eax,al
c001718d:	98                   	cwde   
c001718e:	09 c8                	or     eax,ecx
c0017190:	98                   	cwde   
c0017191:	0f b7 c0             	movzx  eax,ax
c0017194:	83 c4 10             	add    esp,0x10
c0017197:	c3                   	ret    

c0017198 <picOpen()>:
c0017198:	83 ec 50             	sub    esp,0x50
c001719b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00171a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171a7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00171ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00171b0:	ee                   	out    dx,al
c00171b1:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00171b8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00171bd:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00171c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00171c6:	ee                   	out    dx,al
c00171c7:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00171cf:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00171d7:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00171de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171e2:	89 c2                	mov    edx,eax
c00171e4:	ec                   	in     al,dx
c00171e5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00171e9:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00171ee:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00171f2:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00171f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00171fd:	89 c2                	mov    edx,eax
c00171ff:	ec                   	in     al,dx
c0017200:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017204:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017209:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001720d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017214:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017219:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001721e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017222:	ee                   	out    dx,al
c0017223:	e8 ac fe ff ff       	call   c00170d4 <picIoWait()>
c0017228:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001722f:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017234:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0017239:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001723d:	ee                   	out    dx,al
c001723e:	e8 91 fe ff ff       	call   c00170d4 <picIoWait()>
c0017243:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017247:	0f b6 c0             	movzx  eax,al
c001724a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017251:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017255:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001725a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001725e:	ee                   	out    dx,al
c001725f:	e8 70 fe ff ff       	call   c00170d4 <picIoWait()>
c0017264:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017268:	0f b6 c0             	movzx  eax,al
c001726b:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017272:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017276:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c001727b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001727f:	ee                   	out    dx,al
c0017280:	e8 4f fe ff ff       	call   c00170d4 <picIoWait()>
c0017285:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001728c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017291:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0017296:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001729a:	ee                   	out    dx,al
c001729b:	e8 34 fe ff ff       	call   c00170d4 <picIoWait()>
c00172a0:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00172a7:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00172ac:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c00172b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172b5:	ee                   	out    dx,al
c00172b6:	e8 19 fe ff ff       	call   c00170d4 <picIoWait()>
c00172bb:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00172c2:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00172c7:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00172cc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00172d0:	ee                   	out    dx,al
c00172d1:	e8 fe fd ff ff       	call   c00170d4 <picIoWait()>
c00172d6:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00172dd:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00172e2:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00172e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00172eb:	ee                   	out    dx,al
c00172ec:	e8 e3 fd ff ff       	call   c00170d4 <picIoWait()>
c00172f1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00172f6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00172fd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017301:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c0017306:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001730a:	ee                   	out    dx,al
c001730b:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017310:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017317:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001731b:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c0017320:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017324:	ee                   	out    dx,al
c0017325:	90                   	nop
c0017326:	83 c4 50             	add    esp,0x50
c0017329:	c3                   	ret    
c001732a:	66 90                	xchg   ax,ax

c001732c <picEOI(int)>:
c001732c:	83 ec 14             	sub    esp,0x14
c001732f:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017334:	75 1e                	jne    c0017354 <picEOI(int)+0x28>
c0017336:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001733d:	e8 d2 fd ff ff       	call   c0017114 <picGetIRQReg(int)>
c0017342:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017347:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001734c:	25 80 00 00 00       	and    eax,0x80
c0017351:	74 79                	je     c00173cc <picEOI(int)+0xa0>
c0017353:	90                   	nop
c0017354:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c0017359:	75 35                	jne    c0017390 <picEOI(int)+0x64>
c001735b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017362:	e8 ad fd ff ff       	call   c0017114 <picGetIRQReg(int)>
c0017367:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c001736c:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017371:	85 c0                	test   eax,eax
c0017373:	78 1b                	js     c0017390 <picEOI(int)+0x64>
c0017375:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001737c:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c0017381:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017386:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c001738b:	ee                   	out    dx,al
c001738c:	eb 42                	jmp    c00173d0 <picEOI(int)+0xa4>
c001738e:	66 90                	xchg   ax,ax
c0017390:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017395:	7e 19                	jle    c00173b0 <picEOI(int)+0x84>
c0017397:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001739e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00173a3:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c00173a8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00173ad:	ee                   	out    dx,al
c00173ae:	66 90                	xchg   ax,ax
c00173b0:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c00173b7:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00173bc:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c00173c1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00173c6:	ee                   	out    dx,al
c00173c7:	eb 07                	jmp    c00173d0 <picEOI(int)+0xa4>
c00173c9:	8d 76 00             	lea    esi,[esi+0x0]
c00173cc:	90                   	nop
c00173cd:	8d 76 00             	lea    esi,[esi+0x0]
c00173d0:	83 c4 14             	add    esp,0x14
c00173d3:	c3                   	ret    

c00173d4 <RTC::open(int, int, void*)>:
c00173d4:	31 c0                	xor    eax,eax
c00173d6:	c3                   	ret    
c00173d7:	90                   	nop

c00173d8 <RTC::close(int, int, void*)>:
c00173d8:	31 c0                	xor    eax,eax
c00173da:	c3                   	ret    
c00173db:	90                   	nop

c00173dc <RTC::timeInSecondsUTC()>:
c00173dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173e0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00173ec:	c3                   	ret    
c00173ed:	90                   	nop

c00173ee <RTC::timeInDatetimeUTC()>:
c00173ee:	53                   	push   ebx
c00173ef:	83 ec 14             	sub    esp,0x14
c00173f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00173fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00173fc:	50                   	push   eax
c00173fd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017400:	83 c4 0c             	add    esp,0xc
c0017403:	52                   	push   edx
c0017404:	50                   	push   eax
c0017405:	53                   	push   ebx
c0017406:	e8 69 47 ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c001740b:	89 d8                	mov    eax,ebx
c001740d:	83 c4 14             	add    esp,0x14
c0017410:	5b                   	pop    ebx
c0017411:	c2 04 00             	ret    0x4

c0017414 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017414:	56                   	push   esi
c0017415:	53                   	push   ebx
c0017416:	83 ec 14             	sub    esp,0x14
c0017419:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001741d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001741f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017422:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017426:	52                   	push   edx
c0017427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001742b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001742f:	50                   	push   eax
c0017430:	e8 3f 47 ff ff       	call   c000bb74 <secondsToDatetime(unsigned long long)>
c0017435:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001743d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017441:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017445:	89 f0                	mov    eax,esi
c0017447:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001744b:	83 c4 20             	add    esp,0x20
c001744e:	5b                   	pop    ebx
c001744f:	5e                   	pop    esi
c0017450:	ff e0                	jmp    eax

c0017452 <RTC::~RTC()>:
c0017452:	83 ec 1c             	sub    esp,0x1c
c0017455:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c001745a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001745e:	89 10                	mov    DWORD PTR [eax],edx
c0017460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017464:	89 04 24             	mov    DWORD PTR [esp],eax
c0017467:	e8 a0 44 ff ff       	call   c000b90c <Clock::~Clock()>
c001746c:	90                   	nop
c001746d:	83 c4 1c             	add    esp,0x1c
c0017470:	c3                   	ret    
c0017471:	90                   	nop

c0017472 <RTC::~RTC()>:
c0017472:	83 ec 1c             	sub    esp,0x1c
c0017475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017479:	89 04 24             	mov    DWORD PTR [esp],eax
c001747c:	e8 d1 ff ff ff       	call   c0017452 <RTC::~RTC()>
c0017481:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c0017489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001748d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017490:	e8 27 34 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c0017495:	83 c4 1c             	add    esp,0x1c
c0017498:	c3                   	ret    
c0017499:	90                   	nop

c001749a <RTC::get_update_in_progress_flag()>:
c001749a:	83 ec 14             	sub    esp,0x14
c001749d:	6a 0a                	push   0xa
c001749f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00174a5:	e8 60 fc fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00174aa:	83 c4 1c             	add    esp,0x1c
c00174ad:	c0 e8 07             	shr    al,0x7
c00174b0:	c3                   	ret    
c00174b1:	90                   	nop

c00174b2 <RTC::completeRTCRefresh()>:
c00174b2:	57                   	push   edi
c00174b3:	56                   	push   esi
c00174b4:	53                   	push   ebx
c00174b5:	83 ec 20             	sub    esp,0x20
c00174b8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00174bc:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c00174c2:	83 ec 0c             	sub    esp,0xc
c00174c5:	53                   	push   ebx
c00174c6:	e8 cf ff ff ff       	call   c001749a <RTC::get_update_in_progress_flag()>
c00174cb:	83 c4 10             	add    esp,0x10
c00174ce:	84 c0                	test   al,al
c00174d0:	74 0e                	je     c00174e0 <RTC::completeRTCRefresh()+0x2e>
c00174d2:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c00174d8:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c00174de:	73 e2                	jae    c00174c2 <RTC::completeRTCRefresh()+0x10>
c00174e0:	51                   	push   ecx
c00174e1:	51                   	push   ecx
c00174e2:	6a 00                	push   0x0
c00174e4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00174ea:	e8 1b fc fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00174ef:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00174f3:	5e                   	pop    esi
c00174f4:	5f                   	pop    edi
c00174f5:	6a 02                	push   0x2
c00174f7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00174fd:	e8 08 fc fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017502:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017506:	58                   	pop    eax
c0017507:	5a                   	pop    edx
c0017508:	6a 04                	push   0x4
c001750a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017510:	e8 f5 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017515:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0017519:	59                   	pop    ecx
c001751a:	5e                   	pop    esi
c001751b:	6a 07                	push   0x7
c001751d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017523:	e8 e2 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017528:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001752c:	5f                   	pop    edi
c001752d:	58                   	pop    eax
c001752e:	6a 08                	push   0x8
c0017530:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017536:	e8 cf fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001753b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001753f:	58                   	pop    eax
c0017540:	5a                   	pop    edx
c0017541:	6a 09                	push   0x9
c0017543:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017549:	e8 bc fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001754e:	83 c4 10             	add    esp,0x10
c0017551:	0f b6 f0             	movzx  esi,al
c0017554:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c001755a:	83 ec 0c             	sub    esp,0xc
c001755d:	53                   	push   ebx
c001755e:	e8 37 ff ff ff       	call   c001749a <RTC::get_update_in_progress_flag()>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	84 c0                	test   al,al
c0017568:	74 0e                	je     c0017578 <RTC::completeRTCRefresh()+0xc6>
c001756a:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017570:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017576:	73 e2                	jae    c001755a <RTC::completeRTCRefresh()+0xa8>
c0017578:	57                   	push   edi
c0017579:	57                   	push   edi
c001757a:	6a 00                	push   0x0
c001757c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017582:	e8 83 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017587:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001758b:	58                   	pop    eax
c001758c:	5a                   	pop    edx
c001758d:	6a 02                	push   0x2
c001758f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017595:	e8 70 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001759a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001759e:	59                   	pop    ecx
c001759f:	5f                   	pop    edi
c00175a0:	6a 04                	push   0x4
c00175a2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175a8:	e8 5d fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175ad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00175b1:	58                   	pop    eax
c00175b2:	5a                   	pop    edx
c00175b3:	6a 07                	push   0x7
c00175b5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175bb:	e8 4a fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175c0:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00175c4:	59                   	pop    ecx
c00175c5:	5f                   	pop    edi
c00175c6:	6a 08                	push   0x8
c00175c8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175ce:	e8 37 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175d3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00175d7:	58                   	pop    eax
c00175d8:	5a                   	pop    edx
c00175d9:	6a 09                	push   0x9
c00175db:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175e1:	e8 24 fb fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c00175e6:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	0f b6 f8             	movzx  edi,al
c00175f0:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c00175f4:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00175f8:	74 2f                	je     c0017629 <RTC::completeRTCRefresh()+0x177>
c00175fa:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00175fe:	89 fe                	mov    esi,edi
c0017600:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017604:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017608:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001760c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017610:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017614:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017618:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001761c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017620:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017624:	e9 2b ff ff ff       	jmp    c0017554 <RTC::completeRTCRefresh()+0xa2>
c0017629:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001762d:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c0017631:	75 c7                	jne    c00175fa <RTC::completeRTCRefresh()+0x148>
c0017633:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017637:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c001763b:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c001763f:	0f 94 c2             	sete   dl
c0017642:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0017646:	0f 94 c1             	sete   cl
c0017649:	20 d1                	and    cl,dl
c001764b:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c001764f:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017653:	0f 94 c2             	sete   dl
c0017656:	84 d1                	test   cl,dl
c0017658:	74 a0                	je     c00175fa <RTC::completeRTCRefresh()+0x148>
c001765a:	39 fe                	cmp    esi,edi
c001765c:	75 9c                	jne    c00175fa <RTC::completeRTCRefresh()+0x148>
c001765e:	56                   	push   esi
c001765f:	56                   	push   esi
c0017660:	6a 0b                	push   0xb
c0017662:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017668:	e8 9d fa fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c001766d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017671:	24 04                	and    al,0x4
c0017673:	83 c4 10             	add    esp,0x10
c0017676:	84 c0                	test   al,al
c0017678:	0f 85 8c 00 00 00    	jne    c001770a <RTC::completeRTCRefresh()+0x258>
c001767e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017682:	c1 ef 04             	shr    edi,0x4
c0017685:	b1 0a                	mov    cl,0xa
c0017687:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001768b:	6b ff 0a             	imul   edi,edi,0xa
c001768e:	c0 e8 04             	shr    al,0x4
c0017691:	f6 e1                	mul    cl
c0017693:	80 e2 0f             	and    dl,0xf
c0017696:	00 c2                	add    dl,al
c0017698:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001769c:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00176a0:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00176a4:	c0 e8 04             	shr    al,0x4
c00176a7:	f6 e1                	mul    cl
c00176a9:	80 e2 0f             	and    dl,0xf
c00176ac:	00 c2                	add    dl,al
c00176ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00176b2:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00176b6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00176ba:	c0 e8 04             	shr    al,0x4
c00176bd:	24 07                	and    al,0x7
c00176bf:	80 e2 0f             	and    dl,0xf
c00176c2:	f6 e1                	mul    cl
c00176c4:	00 d0                	add    al,dl
c00176c6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00176ca:	80 e2 80             	and    dl,0x80
c00176cd:	08 d0                	or     al,dl
c00176cf:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c00176d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00176d7:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00176db:	80 e2 0f             	and    dl,0xf
c00176de:	c0 e8 04             	shr    al,0x4
c00176e1:	f6 e1                	mul    cl
c00176e3:	00 c2                	add    dl,al
c00176e5:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00176e9:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c00176ed:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c00176f1:	c0 e8 04             	shr    al,0x4
c00176f4:	f6 e1                	mul    cl
c00176f6:	80 e2 0f             	and    dl,0xf
c00176f9:	00 c2                	add    dl,al
c00176fb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00176ff:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017703:	24 0f                	and    al,0xf
c0017705:	0f b6 c0             	movzx  eax,al
c0017708:	01 c7                	add    edi,eax
c001770a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001770e:	24 02                	and    al,0x2
c0017710:	75 20                	jne    c0017732 <RTC::completeRTCRefresh()+0x280>
c0017712:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017717:	79 19                	jns    c0017732 <RTC::completeRTCRefresh()+0x280>
c0017719:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001771d:	b9 18 00 00 00       	mov    ecx,0x18
c0017722:	80 e2 7f             	and    dl,0x7f
c0017725:	0f b6 d2             	movzx  edx,dl
c0017728:	8d 42 0c             	lea    eax,[edx+0xc]
c001772b:	99                   	cdq    
c001772c:	f7 f9                	idiv   ecx
c001772e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0017732:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c0017738:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c001773e:	77 06                	ja     c0017746 <RTC::completeRTCRefresh()+0x294>
c0017740:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c0017746:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001774b:	c1 e6 10             	shl    esi,0x10
c001774e:	31 d2                	xor    edx,edx
c0017750:	89 d7                	mov    edi,edx
c0017752:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0017758:	c1 e0 10             	shl    eax,0x10
c001775b:	89 c1                	mov    ecx,eax
c001775d:	31 c0                	xor    eax,eax
c001775f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017763:	09 cf                	or     edi,ecx
c0017765:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c0017769:	89 fa                	mov    edx,edi
c001776b:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001776f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017773:	0f b7 c8             	movzx  ecx,ax
c0017776:	09 f1                	or     ecx,esi
c0017778:	89 c8                	mov    eax,ecx
c001777a:	51                   	push   ecx
c001777b:	51                   	push   ecx
c001777c:	52                   	push   edx
c001777d:	50                   	push   eax
c001777e:	e8 72 42 ff ff       	call   c000b9f5 <datetimeToSeconds(datetime_t)>
c0017783:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0017789:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001778f:	83 c4 30             	add    esp,0x30
c0017792:	5b                   	pop    ebx
c0017793:	5e                   	pop    esi
c0017794:	5f                   	pop    edi
c0017795:	c3                   	ret    

c0017796 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0017796:	53                   	push   ebx
c0017797:	83 ec 1c             	sub    esp,0x1c
c001779a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001779e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00177a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00177a6:	6a 00                	push   0x0
c00177a8:	6a 00                	push   0x0
c00177aa:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177b0:	e8 83 fa fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00177b5:	83 c4 0c             	add    esp,0xc
c00177b8:	6a 00                	push   0x0
c00177ba:	6a 02                	push   0x2
c00177bc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00177c2:	e8 71 fa fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00177c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177cb:	89 d8                	mov    eax,ebx
c00177cd:	c1 e8 10             	shr    eax,0x10
c00177d0:	b9 64 00 00 00       	mov    ecx,0x64
c00177d5:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00177d9:	0f b6 c7             	movzx  eax,bh
c00177dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00177e0:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00177e4:	0f b6 c6             	movzx  eax,dh
c00177e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177eb:	89 d0                	mov    eax,edx
c00177ed:	31 d2                	xor    edx,edx
c00177ef:	c1 e8 10             	shr    eax,0x10
c00177f2:	f7 f1                	div    ecx
c00177f4:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c00177f8:	59                   	pop    ecx
c00177f9:	58                   	pop    eax
c00177fa:	6a 0b                	push   0xb
c00177fc:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017802:	e8 03 f9 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017807:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001780b:	24 04                	and    al,0x4
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	84 c0                	test   al,al
c0017812:	75 78                	jne    c001788c <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c0017814:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c0017819:	b1 0a                	mov    cl,0xa
c001781b:	f6 f1                	div    cl
c001781d:	88 c2                	mov    dl,al
c001781f:	0f b6 c4             	movzx  eax,ah
c0017822:	c0 e2 04             	shl    dl,0x4
c0017825:	08 c2                	or     dl,al
c0017827:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001782b:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c001782f:	f6 f1                	div    cl
c0017831:	88 c2                	mov    dl,al
c0017833:	0f b6 c4             	movzx  eax,ah
c0017836:	c0 e2 04             	shl    dl,0x4
c0017839:	08 c2                	or     dl,al
c001783b:	0f b6 c3             	movzx  eax,bl
c001783e:	f6 f1                	div    cl
c0017840:	88 14 24             	mov    BYTE PTR [esp],dl
c0017843:	88 c3                	mov    bl,al
c0017845:	0f b6 c4             	movzx  eax,ah
c0017848:	c0 e3 04             	shl    bl,0x4
c001784b:	08 c3                	or     bl,al
c001784d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017852:	f6 f1                	div    cl
c0017854:	88 c2                	mov    dl,al
c0017856:	0f b6 c4             	movzx  eax,ah
c0017859:	c0 e2 04             	shl    dl,0x4
c001785c:	08 c2                	or     dl,al
c001785e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017863:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0017867:	f6 f1                	div    cl
c0017869:	88 c2                	mov    dl,al
c001786b:	0f b6 c4             	movzx  eax,ah
c001786e:	c0 e2 04             	shl    dl,0x4
c0017871:	08 c2                	or     dl,al
c0017873:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0017878:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c001787c:	f6 f1                	div    cl
c001787e:	88 c2                	mov    dl,al
c0017880:	0f b6 c4             	movzx  eax,ah
c0017883:	c0 e2 04             	shl    dl,0x4
c0017886:	08 c2                	or     dl,al
c0017888:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c001788c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017890:	24 02                	and    al,0x2
c0017892:	75 17                	jne    c00178ab <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c0017894:	80 fb 0b             	cmp    bl,0xb
c0017897:	76 0c                	jbe    c00178a5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017899:	80 eb 0c             	sub    bl,0xc
c001789c:	75 02                	jne    c00178a0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001789e:	b3 0c                	mov    bl,0xc
c00178a0:	80 cb 80             	or     bl,0x80
c00178a3:	eb 06                	jmp    c00178ab <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00178a5:	84 db                	test   bl,bl
c00178a7:	75 02                	jne    c00178ab <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00178a9:	b3 0c                	mov    bl,0xc
c00178ab:	50                   	push   eax
c00178ac:	0f b6 db             	movzx  ebx,bl
c00178af:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c00178b4:	50                   	push   eax
c00178b5:	6a 00                	push   0x0
c00178b7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178bd:	e8 76 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178c2:	83 c4 0c             	add    esp,0xc
c00178c5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00178ca:	50                   	push   eax
c00178cb:	6a 02                	push   0x2
c00178cd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178d3:	e8 60 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d8:	83 c4 0c             	add    esp,0xc
c00178db:	53                   	push   ebx
c00178dc:	6a 04                	push   0x4
c00178de:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178e4:	e8 4f f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178e9:	83 c4 0c             	add    esp,0xc
c00178ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00178f1:	50                   	push   eax
c00178f2:	6a 07                	push   0x7
c00178f4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178fa:	e8 39 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178ff:	83 c4 0c             	add    esp,0xc
c0017902:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017907:	50                   	push   eax
c0017908:	6a 08                	push   0x8
c001790a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017910:	e8 23 f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017915:	83 c4 0c             	add    esp,0xc
c0017918:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c001791d:	52                   	push   edx
c001791e:	6a 09                	push   0x9
c0017920:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017926:	e8 0d f9 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c001792b:	5a                   	pop    edx
c001792c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017930:	e8 7d fb ff ff       	call   c00174b2 <RTC::completeRTCRefresh()>
c0017935:	83 c4 28             	add    esp,0x28
c0017938:	b0 01                	mov    al,0x1
c001793a:	5b                   	pop    ebx
c001793b:	c3                   	ret    

c001793c <rtcIRQHandler(regs*, void*)>:
c001793c:	53                   	push   ebx
c001793d:	83 ec 10             	sub    esp,0x10
c0017940:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017944:	6a 0c                	push   0xc
c0017946:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001794c:	e8 b9 f7 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017951:	83 c4 10             	add    esp,0x10
c0017954:	84 c0                	test   al,al
c0017956:	79 2f                	jns    c0017987 <rtcIRQHandler(regs*, void*)+0x4b>
c0017958:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c001795e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017965:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001796c:	40                   	inc    eax
c001796d:	0f b7 c0             	movzx  eax,ax
c0017970:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c0017976:	85 c0                	test   eax,eax
c0017978:	75 0d                	jne    c0017987 <rtcIRQHandler(regs*, void*)+0x4b>
c001797a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001797e:	83 c4 08             	add    esp,0x8
c0017981:	5b                   	pop    ebx
c0017982:	e9 2b fb ff ff       	jmp    c00174b2 <RTC::completeRTCRefresh()>
c0017987:	83 c4 08             	add    esp,0x8
c001798a:	5b                   	pop    ebx
c001798b:	c3                   	ret    

c001798c <RTC::RTC()>:
c001798c:	83 ec 3c             	sub    esp,0x3c
c001798f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017993:	c7 44 24 04 0f 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002120f
c001799b:	89 04 24             	mov    DWORD PTR [esp],eax
c001799e:	e8 33 3f ff ff       	call   c000b8d6 <Clock::Clock(char const*)>
c00179a3:	ba 2c 12 02 c0       	mov    edx,0xc002122c
c00179a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179ac:	89 10                	mov    DWORD PTR [eax],edx
c00179ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179b2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00179b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00179ba:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00179c2:	c7 44 24 08 3c 79 01 c0 	mov    DWORD PTR [esp+0x8],0xc001793c
c00179ca:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c00179d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00179d5:	e8 d6 43 ff ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00179da:	89 c2                	mov    edx,eax
c00179dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00179e0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00179e6:	fa                   	cli    
c00179e7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00179ec:	40                   	inc    eax
c00179ed:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00179f2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00179f7:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c00179ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a02:	e8 03 f7 fe ff       	call   c000710a <Computer::readCMOS(unsigned char)>
c0017a07:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017a0b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017a10:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0017a15:	80 ca 10             	or     dl,0x10
c0017a18:	0f b6 d2             	movzx  edx,dl
c0017a1b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017a1f:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017a27:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a2a:	e8 09 f8 fe ff       	call   c0007238 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a33:	89 04 24             	mov    DWORD PTR [esp],eax
c0017a36:	e8 77 fa ff ff       	call   c00174b2 <RTC::completeRTCRefresh()>
c0017a3b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017a40:	48                   	dec    eax
c0017a41:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017a46:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017a4b:	85 c0                	test   eax,eax
c0017a4d:	75 01                	jne    c0017a50 <RTC::RTC()+0xc4>
c0017a4f:	fb                   	sti    
c0017a50:	90                   	nop
c0017a51:	83 c4 3c             	add    esp,0x3c
c0017a54:	c3                   	ret    
c0017a55:	66 90                	xchg   ax,ax
c0017a57:	90                   	nop

c0017a58 <HalConsoleScroll(int, int)>:
c0017a58:	83 ec 10             	sub    esp,0x10
c0017a5b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017a63:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017a6b:	90                   	nop
c0017a6c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017a71:	0f 8f e1 00 00 00    	jg     c0017b58 <HalConsoleScroll(int, int)+0x100>
c0017a77:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a7f:	90                   	nop
c0017a80:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017a88:	0f 8f be 00 00 00    	jg     c0017b4c <HalConsoleScroll(int, int)+0xf4>
c0017a8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a92:	89 d0                	mov    eax,edx
c0017a94:	c1 e0 02             	shl    eax,0x2
c0017a97:	01 d0                	add    eax,edx
c0017a99:	c1 e0 05             	shl    eax,0x5
c0017a9c:	89 c2                	mov    edx,eax
c0017a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017aa2:	01 d0                	add    eax,edx
c0017aa4:	89 c2                	mov    edx,eax
c0017aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aaa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017aad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ab1:	89 d0                	mov    eax,edx
c0017ab3:	c1 e0 02             	shl    eax,0x2
c0017ab6:	01 d0                	add    eax,edx
c0017ab8:	c1 e0 05             	shl    eax,0x5
c0017abb:	89 c2                	mov    edx,eax
c0017abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ac1:	01 d0                	add    eax,edx
c0017ac3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017acd:	01 d0                	add    eax,edx
c0017acf:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017ad2:	88 10                	mov    BYTE PTR [eax],dl
c0017ad4:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017ad9:	75 65                	jne    c0017b40 <HalConsoleScroll(int, int)+0xe8>
c0017adb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017adf:	83 e0 01             	and    eax,0x1
c0017ae2:	74 38                	je     c0017b1c <HalConsoleScroll(int, int)+0xc4>
c0017ae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ae8:	24 0f                	and    al,0xf
c0017aea:	88 c2                	mov    dl,al
c0017aec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af0:	c1 e0 04             	shl    eax,0x4
c0017af3:	88 d1                	mov    cl,dl
c0017af5:	08 c1                	or     cl,al
c0017af7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017afb:	89 d0                	mov    eax,edx
c0017afd:	c1 e0 02             	shl    eax,0x2
c0017b00:	01 d0                	add    eax,edx
c0017b02:	c1 e0 05             	shl    eax,0x5
c0017b05:	89 c2                	mov    edx,eax
c0017b07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b0b:	01 d0                	add    eax,edx
c0017b0d:	89 c2                	mov    edx,eax
c0017b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b13:	01 d0                	add    eax,edx
c0017b15:	88 ca                	mov    dl,cl
c0017b17:	88 10                	mov    BYTE PTR [eax],dl
c0017b19:	eb 25                	jmp    c0017b40 <HalConsoleScroll(int, int)+0xe8>
c0017b1b:	90                   	nop
c0017b1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b20:	89 d0                	mov    eax,edx
c0017b22:	c1 e0 02             	shl    eax,0x2
c0017b25:	01 d0                	add    eax,edx
c0017b27:	c1 e0 05             	shl    eax,0x5
c0017b2a:	89 c2                	mov    edx,eax
c0017b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b30:	01 d0                	add    eax,edx
c0017b32:	89 c2                	mov    edx,eax
c0017b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b38:	01 d0                	add    eax,edx
c0017b3a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b40:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017b44:	e9 37 ff ff ff       	jmp    c0017a80 <HalConsoleScroll(int, int)+0x28>
c0017b49:	8d 76 00             	lea    esi,[esi+0x0]
c0017b4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017b50:	e9 17 ff ff ff       	jmp    c0017a6c <HalConsoleScroll(int, int)+0x14>
c0017b55:	8d 76 00             	lea    esi,[esi+0x0]
c0017b58:	90                   	nop
c0017b59:	83 c4 10             	add    esp,0x10
c0017b5c:	c3                   	ret    
c0017b5d:	8d 76 00             	lea    esi,[esi+0x0]

c0017b60 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017b60:	83 ec 14             	sub    esp,0x14
c0017b63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b67:	88 04 24             	mov    BYTE PTR [esp],al
c0017b6a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017b6e:	0f b6 c0             	movzx  eax,al
c0017b71:	0f bf d0             	movsx  edx,ax
c0017b74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b78:	83 e0 0f             	and    eax,0xf
c0017b7b:	89 c1                	mov    ecx,eax
c0017b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b81:	c1 e0 04             	shl    eax,0x4
c0017b84:	0f b6 c0             	movzx  eax,al
c0017b87:	09 c8                	or     eax,ecx
c0017b89:	c1 e0 08             	shl    eax,0x8
c0017b8c:	98                   	cwde   
c0017b8d:	09 d0                	or     eax,edx
c0017b8f:	98                   	cwde   
c0017b90:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017b95:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017b9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba1:	89 d0                	mov    eax,edx
c0017ba3:	c1 e0 02             	shl    eax,0x2
c0017ba6:	01 d0                	add    eax,edx
c0017ba8:	c1 e0 04             	shl    eax,0x4
c0017bab:	89 c2                	mov    edx,eax
c0017bad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bb1:	01 d0                	add    eax,edx
c0017bb3:	01 c0                	add    eax,eax
c0017bb5:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017bb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017bbd:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0017bc2:	66 89 10             	mov    WORD PTR [eax],dx
c0017bc5:	90                   	nop
c0017bc6:	83 c4 14             	add    esp,0x14
c0017bc9:	c3                   	ret    
c0017bca:	66 90                	xchg   ax,ax

c0017bcc <HalConsoleCursorUpdate(int, int)>:
c0017bcc:	83 ec 20             	sub    esp,0x20
c0017bcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd3:	0f b7 c0             	movzx  eax,ax
c0017bd6:	89 c2                	mov    edx,eax
c0017bd8:	c1 e2 02             	shl    edx,0x2
c0017bdb:	01 d0                	add    eax,edx
c0017bdd:	c1 e0 04             	shl    eax,0x4
c0017be0:	0f b7 d0             	movzx  edx,ax
c0017be3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017be7:	0f b7 c0             	movzx  eax,ax
c0017bea:	01 d0                	add    eax,edx
c0017bec:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017bf1:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017bf8:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017bfd:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017c02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c06:	ee                   	out    dx,al
c0017c07:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017c0c:	0f b6 c0             	movzx  eax,al
c0017c0f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017c16:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017c1a:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017c1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c23:	ee                   	out    dx,al
c0017c24:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017c2b:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017c30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017c35:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c39:	ee                   	out    dx,al
c0017c3a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017c3f:	c1 e8 08             	shr    eax,0x8
c0017c42:	0f b7 c0             	movzx  eax,ax
c0017c45:	0f b6 c0             	movzx  eax,al
c0017c48:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017c4f:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017c53:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017c58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c5c:	ee                   	out    dx,al
c0017c5d:	90                   	nop
c0017c5e:	83 c4 20             	add    esp,0x20
c0017c61:	c3                   	ret    
c0017c62:	66 90                	xchg   ax,ax

c0017c64 <FAT::getName()>:
c0017c64:	b8 60 12 02 c0       	mov    eax,0xc0021260
c0017c69:	c3                   	ret    
c0017c6a:	66 90                	xchg   ax,ax

c0017c6c <FAT::tell(void*, unsigned long long*)>:
c0017c6c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017c71:	75 09                	jne    c0017c7c <FAT::tell(void*, unsigned long long*)+0x10>
c0017c73:	b8 04 00 00 00       	mov    eax,0x4
c0017c78:	c3                   	ret    
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]
c0017c7c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017c81:	75 09                	jne    c0017c8c <FAT::tell(void*, unsigned long long*)+0x20>
c0017c83:	b8 04 00 00 00       	mov    eax,0x4
c0017c88:	c3                   	ret    
c0017c89:	8d 76 00             	lea    esi,[esi+0x0]
c0017c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c90:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017c93:	ba 00 00 00 00       	mov    edx,0x0
c0017c98:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c9c:	89 01                	mov    DWORD PTR [ecx],eax
c0017c9e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ca1:	b8 00 00 00 00       	mov    eax,0x0
c0017ca6:	c3                   	ret    
c0017ca7:	90                   	nop

c0017ca8 <FAT::stat(void*, unsigned long long*)>:
c0017ca8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017cad:	75 09                	jne    c0017cb8 <FAT::stat(void*, unsigned long long*)+0x10>
c0017caf:	b8 04 00 00 00       	mov    eax,0x4
c0017cb4:	c3                   	ret    
c0017cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cb8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017cbd:	75 09                	jne    c0017cc8 <FAT::stat(void*, unsigned long long*)+0x20>
c0017cbf:	b8 04 00 00 00       	mov    eax,0x4
c0017cc4:	c3                   	ret    
c0017cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ccc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017ccf:	ba 00 00 00 00       	mov    edx,0x0
c0017cd4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cd8:	89 01                	mov    DWORD PTR [ecx],eax
c0017cda:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017cdd:	b8 00 00 00 00       	mov    eax,0x0
c0017ce2:	c3                   	ret    
c0017ce3:	90                   	nop

c0017ce4 <FAT::~FAT()>:
c0017ce4:	83 ec 1c             	sub    esp,0x1c
c0017ce7:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c0017cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf0:	89 10                	mov    DWORD PTR [eax],edx
c0017cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017cf9:	e8 2a 30 ff ff       	call   c000ad28 <Filesystem::~Filesystem()>
c0017cfe:	90                   	nop
c0017cff:	83 c4 1c             	add    esp,0x1c
c0017d02:	c3                   	ret    
c0017d03:	90                   	nop

c0017d04 <FAT::~FAT()>:
c0017d04:	83 ec 1c             	sub    esp,0x1c
c0017d07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d0e:	e8 d1 ff ff ff       	call   c0017ce4 <FAT::~FAT()>
c0017d13:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017d1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d22:	e8 95 2b ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c0017d27:	83 c4 1c             	add    esp,0x1c
c0017d2a:	c3                   	ret    
c0017d2b:	90                   	nop

c0017d2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017d2c:	83 ec 2c             	sub    esp,0x2c
c0017d2f:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c0017d36:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0017d3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d3f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017d46:	83 f8 ff             	cmp    eax,0xffffffff
c0017d49:	75 35                	jne    c0017d80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017d4b:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017d50:	88 c2                	mov    dl,al
c0017d52:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017d57:	00 d0                	add    al,dl
c0017d59:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017d5d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017d63:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d67:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017d6e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017d73:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017d77:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017d7e:	eb 18                	jmp    c0017d98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017d80:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017d85:	88 c2                	mov    dl,al
c0017d87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d8b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017d92:	00 d0                	add    al,dl
c0017d94:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017d98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017da0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017da4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017da8:	8d 44 24 19          	lea    eax,[esp+0x19]
c0017dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0017daf:	e8 85 d1 fe ff       	call   c0004f39 <f_getlabel>
c0017db4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017db8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017dbd:	75 09                	jne    c0017dc8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c0017dbf:	b8 00 00 00 00       	mov    eax,0x0
c0017dc4:	eb 0a                	jmp    c0017dd0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c0017dc6:	66 90                	xchg   ax,ax
c0017dc8:	b8 01 00 00 00       	mov    eax,0x1
c0017dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dd0:	83 c4 2c             	add    esp,0x2c
c0017dd3:	c3                   	ret    

c0017dd4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017dd4:	53                   	push   ebx
c0017dd5:	83 ec 68             	sub    esp,0x68
c0017dd8:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0017de0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017de4:	b9 00 00 00 00       	mov    ecx,0x0
c0017de9:	b8 3c 00 00 00       	mov    eax,0x3c
c0017dee:	83 e0 f8             	and    eax,0xfffffff8
c0017df1:	89 c3                	mov    ebx,eax
c0017df3:	b8 00 00 00 00       	mov    eax,0x0
c0017df8:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0017dfc:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0017e00:	83 c0 08             	add    eax,0x8
c0017e03:	39 d8                	cmp    eax,ebx
c0017e05:	72 f1                	jb     c0017df8 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017e07:	01 c2                	add    edx,eax
c0017e09:	89 0a                	mov    DWORD PTR [edx],ecx
c0017e0b:	83 c2 04             	add    edx,0x4
c0017e0e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e12:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e19:	83 f8 ff             	cmp    eax,0xffffffff
c0017e1c:	75 36                	jne    c0017e54 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017e1e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017e23:	88 c2                	mov    dl,al
c0017e25:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e2a:	00 d0                	add    al,dl
c0017e2c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017e30:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e36:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e3a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e41:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e46:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0017e4a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017e51:	eb 19                	jmp    c0017e6c <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017e53:	90                   	nop
c0017e54:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017e59:	88 c2                	mov    dl,al
c0017e5b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017e5f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e66:	00 d0                	add    al,dl
c0017e68:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017e6c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e74:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e78:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e7b:	e8 20 8a fe ff       	call   c00008a0 <strcat>
c0017e80:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e87:	e8 01 d2 fe ff       	call   c000508d <f_setlabel>
c0017e8c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0017e90:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0017e95:	75 09                	jne    c0017ea0 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c0017e97:	b8 00 00 00 00       	mov    eax,0x0
c0017e9c:	eb 0a                	jmp    c0017ea8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c0017e9e:	66 90                	xchg   ax,ax
c0017ea0:	b8 01 00 00 00       	mov    eax,0x1
c0017ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ea8:	83 c4 68             	add    esp,0x68
c0017eab:	5b                   	pop    ebx
c0017eac:	c3                   	ret    
c0017ead:	90                   	nop
c0017eae:	66 90                	xchg   ax,ax

c0017eb0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017eb0:	83 ec 3c             	sub    esp,0x3c
c0017eb3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ebb:	c7 44 24 04 84 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021284
c0017ec3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ec7:	89 04 24             	mov    DWORD PTR [esp],eax
c0017eca:	e8 e1 88 fe ff       	call   c00007b0 <strcmp>
c0017ecf:	85 c0                	test   eax,eax
c0017ed1:	0f 94 c0             	sete   al
c0017ed4:	84 c0                	test   al,al
c0017ed6:	74 10                	je     c0017ee8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017ed8:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017ee0:	e9 b3 00 00 00       	jmp    c0017f98 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ee8:	c7 44 24 04 76 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021276
c0017ef0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ef7:	e8 b4 88 fe ff       	call   c00007b0 <strcmp>
c0017efc:	85 c0                	test   eax,eax
c0017efe:	0f 94 c0             	sete   al
c0017f01:	84 c0                	test   al,al
c0017f03:	74 0f                	je     c0017f14 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017f05:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017f0d:	e9 86 00 00 00       	jmp    c0017f98 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f12:	66 90                	xchg   ax,ax
c0017f14:	c7 44 24 04 7c 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002127c
c0017f1c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f20:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f23:	e8 88 88 fe ff       	call   c00007b0 <strcmp>
c0017f28:	85 c0                	test   eax,eax
c0017f2a:	0f 94 c0             	sete   al
c0017f2d:	84 c0                	test   al,al
c0017f2f:	74 0b                	je     c0017f3c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017f31:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0017f39:	eb 5d                	jmp    c0017f98 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f3b:	90                   	nop
c0017f3c:	c7 44 24 04 5c f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f05c
c0017f44:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f4b:	e8 60 88 fe ff       	call   c00007b0 <strcmp>
c0017f50:	85 c0                	test   eax,eax
c0017f52:	0f 94 c0             	sete   al
c0017f55:	84 c0                	test   al,al
c0017f57:	74 0b                	je     c0017f64 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017f59:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0017f61:	eb 35                	jmp    c0017f98 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f63:	90                   	nop
c0017f64:	c7 44 24 04 82 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021282
c0017f6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f70:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f73:	e8 38 88 fe ff       	call   c00007b0 <strcmp>
c0017f78:	85 c0                	test   eax,eax
c0017f7a:	0f 94 c0             	sete   al
c0017f7d:	84 c0                	test   al,al
c0017f7f:	74 0b                	je     c0017f8c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017f81:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c0017f89:	eb 0d                	jmp    c0017f98 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017f8b:	90                   	nop
c0017f8c:	b8 08 00 00 00       	mov    eax,0x8
c0017f91:	e9 f2 00 00 00       	jmp    c0018088 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0017f96:	66 90                	xchg   ax,ax
c0017f98:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c0017f9f:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c0017fa4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fa8:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017faf:	83 f8 ff             	cmp    eax,0xffffffff
c0017fb2:	75 38                	jne    c0017fec <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c0017fb4:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0017fb9:	88 c2                	mov    dl,al
c0017fbb:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fc0:	00 d0                	add    al,dl
c0017fc2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017fc6:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017fcc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fd0:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017fd7:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fdc:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017fe0:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fe7:	eb 1b                	jmp    c0018004 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0017ff1:	88 c2                	mov    dl,al
c0017ff3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ff7:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ffe:	00 d0                	add    al,dl
c0018000:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018004:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018008:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001800c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018010:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018014:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001801c:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c0018021:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018029:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018030:	e8 31 fa fe ff       	call   c0007a66 <malloc>
c0018035:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018039:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c0018041:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018045:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018049:	8d 44 24 10          	lea    eax,[esp+0x10]
c001804d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018051:	8d 44 24 21          	lea    eax,[esp+0x21]
c0018055:	89 04 24             	mov    DWORD PTR [esp],eax
c0018058:	e8 1e d3 fe ff       	call   c000537b <f_mkfs>
c001805d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018061:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018066:	75 08                	jne    c0018070 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c0018068:	b8 00 00 00 00       	mov    eax,0x0
c001806d:	eb 19                	jmp    c0018088 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001806f:	90                   	nop
c0018070:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c0018075:	75 09                	jne    c0018080 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0018077:	b8 09 00 00 00       	mov    eax,0x9
c001807c:	eb 0a                	jmp    c0018088 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001807e:	66 90                	xchg   ax,ax
c0018080:	b8 01 00 00 00       	mov    eax,0x1
c0018085:	8d 76 00             	lea    esi,[esi+0x0]
c0018088:	83 c4 3c             	add    esp,0x3c
c001808b:	c3                   	ret    

c001808c <FAT::tryMount(LogicalDisk*, int)>:
c001808c:	81 ec 5c 03 00 00    	sub    esp,0x35c
c0018092:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018097:	83 f8 14             	cmp    eax,0x14
c001809a:	75 14                	jne    c00180b0 <FAT::tryMount(LogicalDisk*, int)+0x24>
c001809c:	c7 04 24 88 12 02 c0 	mov    DWORD PTR [esp],0xc0021288
c00180a3:	e8 7d 86 ff ff       	call   c0010725 <KePanic(char const*)>
c00180a8:	b0 00                	mov    al,0x0
c00180aa:	e9 f1 01 00 00       	jmp    c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00180af:	90                   	nop
c00180b0:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c00180b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00180bd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00180c3:	3d 00 02 00 00       	cmp    eax,0x200
c00180c8:	74 0a                	je     c00180d4 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00180ca:	b0 00                	mov    al,0x0
c00180cc:	e9 cf 01 00 00       	jmp    c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00180d1:	8d 76 00             	lea    esi,[esi+0x0]
c00180d4:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c00180dc:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c00180e3:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180ea:	83 f8 ff             	cmp    eax,0xffffffff
c00180ed:	74 09                	je     c00180f8 <FAT::tryMount(LogicalDisk*, int)+0x6c>
c00180ef:	b0 01                	mov    al,0x1
c00180f1:	e9 aa 01 00 00       	jmp    c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00180f6:	66 90                	xchg   ax,ax
c00180f8:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c0018102:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c001810a:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c0018112:	88 c2                	mov    dl,al
c0018114:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018119:	00 d0                	add    al,dl
c001811b:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c0018122:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018128:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c001812f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018136:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001813b:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c0018142:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018149:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c0018150:	e8 11 f9 fe ff       	call   c0007a66 <malloc>
c0018155:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c001815c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018164:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001816b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001816f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018176:	89 04 24             	mov    DWORD PTR [esp],eax
c0018179:	e8 3d ba fe ff       	call   c0003bbb <f_mount>
c001817e:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c0018185:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c001818d:	74 19                	je     c00181a8 <FAT::tryMount(LogicalDisk*, int)+0x11c>
c001818f:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018196:	89 04 24             	mov    DWORD PTR [esp],eax
c0018199:	e8 ee f8 fe ff       	call   c0007a8c <rfree>
c001819e:	b0 00                	mov    al,0x0
c00181a0:	e9 fb 00 00 00       	jmp    c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181a5:	8d 76 00             	lea    esi,[esi+0x0]
c00181a8:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00181b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00181b8:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00181bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00181c2:	e8 29 83 fe ff       	call   c00004f0 <memset>
c00181c7:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c00181ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181d2:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00181d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00181dc:	e8 bf 86 fe ff       	call   c00008a0 <strcat>
c00181e1:	c7 44 24 04 96 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021296
c00181e9:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00181f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00181f3:	e8 a8 86 fe ff       	call   c00008a0 <strcat>
c00181f8:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018200:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018207:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001820b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001820f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018212:	e8 06 ba fe ff       	call   c0003c1d <f_open>
c0018217:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c001821e:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c0018225:	85 c0                	test   eax,eax
c0018227:	74 0b                	je     c0018234 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c0018229:	78 2d                	js     c0018258 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001822b:	83 e8 04             	sub    eax,0x4
c001822e:	83 f8 01             	cmp    eax,0x1
c0018231:	77 25                	ja     c0018258 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018233:	90                   	nop
c0018234:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c001823c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018240:	89 04 24             	mov    DWORD PTR [esp],eax
c0018243:	e8 65 c1 fe ff       	call   c00043ad <f_close>
c0018248:	90                   	nop
c0018249:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c0018251:	74 45                	je     c0018298 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018253:	eb 37                	jmp    c001828c <FAT::tryMount(LogicalDisk*, int)+0x200>
c0018255:	8d 76 00             	lea    esi,[esi+0x0]
c0018258:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c001825f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018262:	e8 25 f8 fe ff       	call   c0007a8c <rfree>
c0018267:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001826f:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c0018276:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001827a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018281:	e8 35 b9 fe ff       	call   c0003bbb <f_mount>
c0018286:	b0 00                	mov    al,0x0
c0018288:	eb 16                	jmp    c00182a0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001828a:	66 90                	xchg   ax,ax
c001828c:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018291:	40                   	inc    eax
c0018292:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c0018297:	90                   	nop
c0018298:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c00182a0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00182a6:	c3                   	ret    
c00182a7:	90                   	nop

c00182a8 <FAT::allocateSwapfile(char const*, int)>:
c00182a8:	55                   	push   ebp
c00182a9:	57                   	push   edi
c00182aa:	56                   	push   esi
c00182ab:	53                   	push   ebx
c00182ac:	81 ec 5c 04 00 00    	sub    esp,0x45c
c00182b2:	c7 84 24 40 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x440],0x114
c00182bd:	8b 84 24 40 04 00 00 	mov    eax,DWORD PTR [esp+0x440]
c00182c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00182c7:	e8 9a f7 fe ff       	call   c0007a66 <malloc>
c00182cc:	89 c7                	mov    edi,eax
c00182ce:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00182d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182d7:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c00182de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00182e5:	e8 6e 2c ff ff       	call   c000af58 <File::File(char const*, Process*)>
c00182ea:	89 bc 24 4c 04 00 00 	mov    DWORD PTR [esp+0x44c],edi
c00182f1:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c00182f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182f9:	8d 44 24 30          	lea    eax,[esp+0x30]
c00182fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018301:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018308:	89 04 24             	mov    DWORD PTR [esp],eax
c001830b:	e8 ac 2f ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c0018310:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018317:	c1 e0 14             	shl    eax,0x14
c001831a:	89 c7                	mov    edi,eax
c001831c:	89 c5                	mov    ebp,eax
c001831e:	c1 fd 1f             	sar    ebp,0x1f
c0018321:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018325:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018329:	89 f9                	mov    ecx,edi
c001832b:	31 c1                	xor    ecx,eax
c001832d:	89 cb                	mov    ebx,ecx
c001832f:	89 e9                	mov    ecx,ebp
c0018331:	31 d1                	xor    ecx,edx
c0018333:	89 ce                	mov    esi,ecx
c0018335:	89 f0                	mov    eax,esi
c0018337:	09 d8                	or     eax,ebx
c0018339:	0f 84 a9 00 00 00    	je     c00183e8 <FAT::allocateSwapfile(char const*, int)+0x140>
c001833f:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018346:	89 04 24             	mov    DWORD PTR [esp],eax
c0018349:	e8 40 2e ff ff       	call   c000b18e <File::unlink()>
c001834e:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c0018356:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001835d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018360:	e8 b1 2c ff ff       	call   c000b016 <File::open(FileOpenMode)>
c0018365:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c001836c:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018372:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c0018379:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018380:	c1 e0 14             	shl    eax,0x14
c0018383:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c001838b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001838f:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0018396:	89 04 24             	mov    DWORD PTR [esp],eax
c0018399:	e8 7f ce fe ff       	call   c000521d <f_expand>
c001839e:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00183a7:	83 c0 10             	add    eax,0x10
c00183aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00183ac:	8d 54 24 38          	lea    edx,[esp+0x38]
c00183b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00183b4:	8d 54 24 40          	lea    edx,[esp+0x40]
c00183b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183bc:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c00183c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00183cc:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c00183d3:	89 14 24             	mov    DWORD PTR [esp],edx
c00183d6:	ff d0                	call   eax
c00183d8:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183df:	89 04 24             	mov    DWORD PTR [esp],eax
c00183e2:	e8 8d 2c ff ff       	call   c000b074 <File::close()>
c00183e7:	90                   	nop
c00183e8:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00183f0:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c00183f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00183fa:	e8 17 2c ff ff       	call   c000b016 <File::open(FileOpenMode)>
c00183ff:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018406:	8b 00                	mov    eax,DWORD PTR [eax]
c0018408:	83 c0 0c             	add    eax,0xc
c001840b:	8b 00                	mov    eax,DWORD PTR [eax]
c001840d:	8d 54 24 38          	lea    edx,[esp+0x38]
c0018411:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018415:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0018419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001841d:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0018425:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001842d:	8b 94 24 4c 04 00 00 	mov    edx,DWORD PTR [esp+0x44c]
c0018434:	89 14 24             	mov    DWORD PTR [esp],edx
c0018437:	ff d0                	call   eax
c0018439:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018440:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018446:	89 84 24 48 04 00 00 	mov    DWORD PTR [esp+0x448],eax
c001844d:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0018454:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018457:	89 84 24 44 04 00 00 	mov    DWORD PTR [esp+0x444],eax
c001845e:	8b 84 24 4c 04 00 00 	mov    eax,DWORD PTR [esp+0x44c]
c0018465:	89 04 24             	mov    DWORD PTR [esp],eax
c0018468:	e8 07 2c ff ff       	call   c000b074 <File::close()>
c001846d:	8b 84 24 44 04 00 00 	mov    eax,DWORD PTR [esp+0x444]
c0018474:	ba 00 00 00 00       	mov    edx,0x0
c0018479:	81 c4 5c 04 00 00    	add    esp,0x45c
c001847f:	5b                   	pop    ebx
c0018480:	5e                   	pop    esi
c0018481:	5f                   	pop    edi
c0018482:	5d                   	pop    ebp
c0018483:	c3                   	ret    

c0018484 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018484:	57                   	push   edi
c0018485:	56                   	push   esi
c0018486:	53                   	push   ebx
c0018487:	81 ec 60 02 00 00    	sub    esp,0x260
c001848d:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c0018495:	74 0d                	je     c00184a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018497:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c001849f:	75 0f                	jne    c00184b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00184a1:	8d 76 00             	lea    esi,[esi+0x0]
c00184a4:	b8 04 00 00 00       	mov    eax,0x4
c00184a9:	e9 32 01 00 00       	jmp    c00185e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00184ae:	66 90                	xchg   ax,ax
c00184b0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00184b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184bb:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c00184c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00184c5:	e8 a5 c1 fe ff       	call   c000466f <f_readdir>
c00184ca:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c00184d1:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00184d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00184df:	83 c0 16             	add    eax,0x16
c00184e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00184e5:	e8 a6 80 fe ff       	call   c0000590 <strlen>
c00184ea:	ba 00 00 00 00       	mov    edx,0x0
c00184ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00184f3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00184f7:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c00184ff:	0f b6 c0             	movzx  eax,al
c0018502:	83 e0 10             	and    eax,0x10
c0018505:	74 09                	je     c0018510 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c0018507:	b8 02 00 00 00       	mov    eax,0x2
c001850c:	eb 0a                	jmp    c0018518 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c001850e:	66 90                	xchg   ax,ax
c0018510:	b8 01 00 00 00       	mov    eax,0x1
c0018515:	8d 76 00             	lea    esi,[esi+0x0]
c0018518:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001851c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018523:	83 c0 16             	add    eax,0x16
c0018526:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001852a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001852e:	83 c0 10             	add    eax,0x10
c0018531:	89 04 24             	mov    DWORD PTR [esp],eax
c0018534:	e8 57 81 fe ff       	call   c0000690 <strcpy>
c0018539:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c0018540:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c0018547:	8d 44 24 18          	lea    eax,[esp+0x18]
c001854b:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c0018552:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c0018559:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c0018560:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018567:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001856e:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018575:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c001857c:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c0018583:	89 c6                	mov    esi,eax
c0018585:	89 d7                	mov    edi,edx
c0018587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018589:	89 c8                	mov    eax,ecx
c001858b:	89 fa                	mov    edx,edi
c001858d:	89 f3                	mov    ebx,esi
c001858f:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c0018596:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c001859d:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00185a4:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c00185ab:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00185b1:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c00185b9:	84 c0                	test   al,al
c00185bb:	75 07                	jne    c00185c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c00185bd:	b8 07 00 00 00       	mov    eax,0x7
c00185c2:	eb 1c                	jmp    c00185e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185c4:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c00185cb:	85 c0                	test   eax,eax
c00185cd:	75 09                	jne    c00185d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c00185cf:	b8 00 00 00 00       	mov    eax,0x0
c00185d4:	eb 0a                	jmp    c00185e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185d6:	66 90                	xchg   ax,ax
c00185d8:	b8 01 00 00 00       	mov    eax,0x1
c00185dd:	8d 76 00             	lea    esi,[esi+0x0]
c00185e0:	81 c4 60 02 00 00    	add    esp,0x260
c00185e6:	5b                   	pop    ebx
c00185e7:	5e                   	pop    esi
c00185e8:	5f                   	pop    edi
c00185e9:	c3                   	ret    
c00185ea:	66 90                	xchg   ax,ax

c00185ec <FAT::read(void*, unsigned long, void*, int*)>:
c00185ec:	83 ec 2c             	sub    esp,0x2c
c00185ef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00185f4:	74 0a                	je     c0018600 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00185f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00185fb:	75 0b                	jne    c0018608 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00185fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018600:	b8 04 00 00 00       	mov    eax,0x4
c0018605:	eb 4d                	jmp    c0018654 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018607:	90                   	nop
c0018608:	8d 44 24 18          	lea    eax,[esp+0x18]
c001860c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018610:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018614:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001861c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018620:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018624:	89 04 24             	mov    DWORD PTR [esp],eax
c0018627:	e8 bb b8 fe ff       	call   c0003ee7 <f_read>
c001862c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018630:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018634:	89 c2                	mov    edx,eax
c0018636:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001863a:	89 10                	mov    DWORD PTR [eax],edx
c001863c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018640:	85 c0                	test   eax,eax
c0018642:	75 08                	jne    c001864c <FAT::read(void*, unsigned long, void*, int*)+0x60>
c0018644:	b8 00 00 00 00       	mov    eax,0x0
c0018649:	eb 09                	jmp    c0018654 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c001864b:	90                   	nop
c001864c:	b8 01 00 00 00       	mov    eax,0x1
c0018651:	8d 76 00             	lea    esi,[esi+0x0]
c0018654:	83 c4 2c             	add    esp,0x2c
c0018657:	c3                   	ret    

c0018658 <FAT::write(void*, unsigned long, void*, int*)>:
c0018658:	83 ec 2c             	sub    esp,0x2c
c001865b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018660:	74 0a                	je     c001866c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018662:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018667:	75 0b                	jne    c0018674 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018669:	8d 76 00             	lea    esi,[esi+0x0]
c001866c:	b8 04 00 00 00       	mov    eax,0x4
c0018671:	eb 4d                	jmp    c00186c0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018673:	90                   	nop
c0018674:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018678:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001867c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018680:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018684:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001868c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018690:	89 04 24             	mov    DWORD PTR [esp],eax
c0018693:	e8 2b ba fe ff       	call   c00040c3 <f_write>
c0018698:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001869c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00186a0:	89 c2                	mov    edx,eax
c00186a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00186a6:	89 10                	mov    DWORD PTR [eax],edx
c00186a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186ac:	85 c0                	test   eax,eax
c00186ae:	75 08                	jne    c00186b8 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c00186b0:	b8 00 00 00 00       	mov    eax,0x0
c00186b5:	eb 09                	jmp    c00186c0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c00186b7:	90                   	nop
c00186b8:	b8 01 00 00 00       	mov    eax,0x1
c00186bd:	8d 76 00             	lea    esi,[esi+0x0]
c00186c0:	83 c4 2c             	add    esp,0x2c
c00186c3:	c3                   	ret    

c00186c4 <FAT::close(void*)>:
c00186c4:	83 ec 2c             	sub    esp,0x2c
c00186c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00186cc:	75 0a                	jne    c00186d8 <FAT::close(void*)+0x14>
c00186ce:	b8 04 00 00 00       	mov    eax,0x4
c00186d3:	eb 37                	jmp    c001870c <FAT::close(void*)+0x48>
c00186d5:	8d 76 00             	lea    esi,[esi+0x0]
c00186d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00186df:	e8 c9 bc fe ff       	call   c00043ad <f_close>
c00186e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00186ef:	e8 85 f3 fe ff       	call   c0007a79 <free>
c00186f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00186f8:	85 c0                	test   eax,eax
c00186fa:	75 08                	jne    c0018704 <FAT::close(void*)+0x40>
c00186fc:	b8 00 00 00 00       	mov    eax,0x0
c0018701:	eb 09                	jmp    c001870c <FAT::close(void*)+0x48>
c0018703:	90                   	nop
c0018704:	b8 01 00 00 00       	mov    eax,0x1
c0018709:	8d 76 00             	lea    esi,[esi+0x0]
c001870c:	83 c4 2c             	add    esp,0x2c
c001870f:	c3                   	ret    

c0018710 <FAT::closeDir(void*)>:
c0018710:	83 ec 2c             	sub    esp,0x2c
c0018713:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018718:	75 0a                	jne    c0018724 <FAT::closeDir(void*)+0x14>
c001871a:	b8 04 00 00 00       	mov    eax,0x4
c001871f:	eb 37                	jmp    c0018758 <FAT::closeDir(void*)+0x48>
c0018721:	8d 76 00             	lea    esi,[esi+0x0]
c0018724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018728:	89 04 24             	mov    DWORD PTR [esp],eax
c001872b:	e8 1d bf fe ff       	call   c000464d <f_closedir>
c0018730:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018734:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018738:	89 04 24             	mov    DWORD PTR [esp],eax
c001873b:	e8 39 f3 fe ff       	call   c0007a79 <free>
c0018740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018744:	85 c0                	test   eax,eax
c0018746:	75 08                	jne    c0018750 <FAT::closeDir(void*)+0x40>
c0018748:	b8 00 00 00 00       	mov    eax,0x0
c001874d:	eb 09                	jmp    c0018758 <FAT::closeDir(void*)+0x48>
c001874f:	90                   	nop
c0018750:	b8 01 00 00 00       	mov    eax,0x1
c0018755:	8d 76 00             	lea    esi,[esi+0x0]
c0018758:	83 c4 2c             	add    esp,0x2c
c001875b:	c3                   	ret    

c001875c <FAT::seek(void*, unsigned long long)>:
c001875c:	83 ec 3c             	sub    esp,0x3c
c001875f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018763:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018767:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001876b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001876f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018774:	75 0a                	jne    c0018780 <FAT::seek(void*, unsigned long long)+0x24>
c0018776:	b8 04 00 00 00       	mov    eax,0x4
c001877b:	eb 33                	jmp    c00187b0 <FAT::seek(void*, unsigned long long)+0x54>
c001877d:	8d 76 00             	lea    esi,[esi+0x0]
c0018780:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018784:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018788:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001878c:	89 04 24             	mov    DWORD PTR [esp],eax
c001878f:	e8 48 bc fe ff       	call   c00043dc <f_lseek>
c0018794:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018798:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001879c:	85 c0                	test   eax,eax
c001879e:	75 08                	jne    c00187a8 <FAT::seek(void*, unsigned long long)+0x4c>
c00187a0:	b8 00 00 00 00       	mov    eax,0x0
c00187a5:	eb 09                	jmp    c00187b0 <FAT::seek(void*, unsigned long long)+0x54>
c00187a7:	90                   	nop
c00187a8:	b8 01 00 00 00       	mov    eax,0x1
c00187ad:	8d 76 00             	lea    esi,[esi+0x0]
c00187b0:	83 c4 3c             	add    esp,0x3c
c00187b3:	c3                   	ret    

c00187b4 <fatWrapperReadDisk>:
c00187b4:	56                   	push   esi
c00187b5:	53                   	push   ebx
c00187b6:	83 ec 34             	sub    esp,0x34
c00187b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187bd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c6:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c00187cd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00187d1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187d5:	ba 00 00 00 00       	mov    edx,0x0
c00187da:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00187de:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00187e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00187ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00187f1:	e8 12 49 ff ff       	call   c000d108 <LogicalDisk::read(unsigned long long, int, void*)>
c00187f6:	83 c4 34             	add    esp,0x34
c00187f9:	5b                   	pop    ebx
c00187fa:	5e                   	pop    esi
c00187fb:	c3                   	ret    

c00187fc <fatWrapperWriteDisk>:
c00187fc:	56                   	push   esi
c00187fd:	53                   	push   ebx
c00187fe:	83 ec 34             	sub    esp,0x34
c0018801:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018805:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018809:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001880e:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018815:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0018819:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001881d:	ba 00 00 00 00       	mov    edx,0x0
c0018822:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0018826:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001882a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001882e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018832:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018836:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018839:	e8 36 49 ff ff       	call   c000d174 <LogicalDisk::write(unsigned long long, int, void*)>
c001883e:	83 c4 34             	add    esp,0x34
c0018841:	5b                   	pop    ebx
c0018842:	5e                   	pop    esi
c0018843:	c3                   	ret    

c0018844 <fatWrapperIoctl>:
c0018844:	53                   	push   ebx
c0018845:	83 ec 38             	sub    esp,0x38
c0018848:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001884c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018850:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018854:	88 d0                	mov    al,dl
c0018856:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001885a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001885f:	75 37                	jne    c0018898 <fatWrapperIoctl+0x54>
c0018861:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018865:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018869:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001886e:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018875:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001887b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018881:	0f b7 d0             	movzx  edx,ax
c0018884:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018888:	66 89 10             	mov    WORD PTR [eax],dx
c001888b:	b8 00 00 00 00       	mov    eax,0x0
c0018890:	e9 c3 00 00 00       	jmp    c0018958 <fatWrapperIoctl+0x114>
c0018895:	8d 76 00             	lea    esi,[esi+0x0]
c0018898:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001889d:	75 71                	jne    c0018910 <fatWrapperIoctl+0xcc>
c001889f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00188a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188a7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00188ac:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00188b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00188b9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00188bf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00188c5:	89 c8                	mov    eax,ecx
c00188c7:	89 da                	mov    edx,ebx
c00188c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00188cd:	c1 e0 0a             	shl    eax,0xa
c00188d0:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c00188d5:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00188dc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00188e2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00188e8:	89 cb                	mov    ebx,ecx
c00188ea:	c1 fb 1f             	sar    ebx,0x1f
c00188ed:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00188f1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00188f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00188f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00188fc:	e8 ff 59 00 00       	call   c001e300 <__udivdi3>
c0018901:	89 c2                	mov    edx,eax
c0018903:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018907:	89 10                	mov    DWORD PTR [eax],edx
c0018909:	b8 00 00 00 00       	mov    eax,0x0
c001890e:	eb 48                	jmp    c0018958 <fatWrapperIoctl+0x114>
c0018910:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018915:	75 09                	jne    c0018920 <fatWrapperIoctl+0xdc>
c0018917:	b8 00 00 00 00       	mov    eax,0x0
c001891c:	eb 3a                	jmp    c0018958 <fatWrapperIoctl+0x114>
c001891e:	66 90                	xchg   ax,ax
c0018920:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0018925:	75 19                	jne    c0018940 <fatWrapperIoctl+0xfc>
c0018927:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001892b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001892f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018933:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018939:	b8 00 00 00 00       	mov    eax,0x0
c001893e:	eb 18                	jmp    c0018958 <fatWrapperIoctl+0x114>
c0018940:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c0018945:	75 09                	jne    c0018950 <fatWrapperIoctl+0x10c>
c0018947:	b8 00 00 00 00       	mov    eax,0x0
c001894c:	eb 0a                	jmp    c0018958 <fatWrapperIoctl+0x114>
c001894e:	66 90                	xchg   ax,ax
c0018950:	b8 04 00 00 00       	mov    eax,0x4
c0018955:	8d 76 00             	lea    esi,[esi+0x0]
c0018958:	83 c4 38             	add    esp,0x38
c001895b:	5b                   	pop    ebx
c001895c:	c3                   	ret    
c001895d:	90                   	nop
c001895e:	66 90                	xchg   ax,ax

c0018960 <FAT::FAT()>:
c0018960:	83 ec 2c             	sub    esp,0x2c
c0018963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018967:	89 04 24             	mov    DWORD PTR [esp],eax
c001896a:	e8 95 23 ff ff       	call   c000ad04 <Filesystem::Filesystem()>
c001896f:	ba ac 12 02 c0       	mov    edx,0xc00212ac
c0018974:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018978:	89 10                	mov    DWORD PTR [eax],edx
c001897a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018984:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001898c:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c0018991:	7f 15                	jg     c00189a8 <FAT::FAT()+0x48>
c0018993:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018997:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c00189a2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00189a6:	eb e4                	jmp    c001898c <FAT::FAT()+0x2c>
c00189a8:	90                   	nop
c00189a9:	83 c4 2c             	add    esp,0x2c
c00189ac:	c3                   	ret    
c00189ad:	90                   	nop
c00189ae:	66 90                	xchg   ax,ax

c00189b0 <FAT::fixFilepath(char*)>:
c00189b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189b7:	3c 40                	cmp    al,0x40
c00189b9:	7e 2d                	jle    c00189e8 <FAT::fixFilepath(char*)+0x38>
c00189bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189bf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189c2:	2c 41                	sub    al,0x41
c00189c4:	88 c2                	mov    dl,al
c00189c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189ca:	88 10                	mov    BYTE PTR [eax],dl
c00189cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00189d3:	0f be c0             	movsx  eax,al
c00189d6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00189dd:	04 30                	add    al,0x30
c00189df:	88 c2                	mov    dl,al
c00189e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189e5:	88 10                	mov    BYTE PTR [eax],dl
c00189e7:	90                   	nop
c00189e8:	90                   	nop
c00189e9:	c3                   	ret    
c00189ea:	66 90                	xchg   ax,ax

c00189ec <FAT::open(char const*, void**, FileOpenMode)>:
c00189ec:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189f2:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00189fa:	74 0c                	je     c0018a08 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00189fc:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018a04:	75 0e                	jne    c0018a14 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018a06:	66 90                	xchg   ax,ax
c0018a08:	b8 04 00 00 00       	mov    eax,0x4
c0018a0d:	e9 02 01 00 00       	jmp    c0018b14 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018a12:	66 90                	xchg   ax,ax
c0018a14:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018a1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a26:	e8 65 7c fe ff       	call   c0000690 <strcpy>
c0018a2b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a33:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018a3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a3d:	e8 6e ff ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018a42:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018a4a:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a51:	83 e0 01             	and    eax,0x1
c0018a54:	74 0a                	je     c0018a60 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018a56:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018a5e:	66 90                	xchg   ax,ax
c0018a60:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a67:	83 e0 04             	and    eax,0x4
c0018a6a:	74 10                	je     c0018a7c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018a6c:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0018a74:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018a7c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a83:	83 e0 02             	and    eax,0x2
c0018a86:	74 08                	je     c0018a90 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018a88:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018a90:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018a97:	83 e0 08             	and    eax,0x8
c0018a9a:	74 08                	je     c0018aa4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018a9c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018aa4:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018aab:	83 e0 10             	and    eax,0x10
c0018aae:	74 08                	je     c0018ab8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018ab0:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c0018ab8:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c0018abf:	e8 a2 ef fe ff       	call   c0007a66 <malloc>
c0018ac4:	89 c2                	mov    edx,eax
c0018ac6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018acd:	89 10                	mov    DWORD PTR [eax],edx
c0018acf:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c0018ad7:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ae0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018ae4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018ae8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0018aef:	e8 29 b1 fe ff       	call   c0003c1d <f_open>
c0018af4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018afb:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0018b03:	74 07                	je     c0018b0c <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0018b05:	b8 01 00 00 00       	mov    eax,0x1
c0018b0a:	eb 08                	jmp    c0018b14 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018b0c:	b8 00 00 00 00       	mov    eax,0x0
c0018b11:	8d 76 00             	lea    esi,[esi+0x0]
c0018b14:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b1a:	c3                   	ret    
c0018b1b:	90                   	nop

c0018b1c <FAT::openDir(char const*, void**)>:
c0018b1c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018b22:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018b2a:	74 0c                	je     c0018b38 <FAT::openDir(char const*, void**)+0x1c>
c0018b2c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018b34:	75 0e                	jne    c0018b44 <FAT::openDir(char const*, void**)+0x28>
c0018b36:	66 90                	xchg   ax,ax
c0018b38:	b8 04 00 00 00       	mov    eax,0x4
c0018b3d:	e9 82 00 00 00       	jmp    c0018bc4 <FAT::openDir(char const*, void**)+0xa8>
c0018b42:	66 90                	xchg   ax,ax
c0018b44:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018b4b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b4f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018b53:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b56:	e8 35 7b fe ff       	call   c0000690 <strcpy>
c0018b5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018b5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b63:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018b6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b6d:	e8 3e fe ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018b72:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0018b79:	e8 e8 ee fe ff       	call   c0007a66 <malloc>
c0018b7e:	89 c2                	mov    edx,eax
c0018b80:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018b87:	89 10                	mov    DWORD PTR [eax],edx
c0018b89:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b92:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018b96:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018b9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b9d:	e8 e0 b9 fe ff       	call   c0004582 <f_opendir>
c0018ba2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018ba9:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c0018bb1:	74 09                	je     c0018bbc <FAT::openDir(char const*, void**)+0xa0>
c0018bb3:	b8 01 00 00 00       	mov    eax,0x1
c0018bb8:	eb 0a                	jmp    c0018bc4 <FAT::openDir(char const*, void**)+0xa8>
c0018bba:	66 90                	xchg   ax,ax
c0018bbc:	b8 00 00 00 00       	mov    eax,0x0
c0018bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bca:	c3                   	ret    
c0018bcb:	90                   	nop

c0018bcc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018bcc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018bd2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018bda:	75 0c                	jne    c0018be8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018bdc:	b8 04 00 00 00       	mov    eax,0x4
c0018be1:	e9 d2 00 00 00       	jmp    c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018be6:	66 90                	xchg   ax,ax
c0018be8:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0018bf0:	75 0a                	jne    c0018bfc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018bf2:	b8 04 00 00 00       	mov    eax,0x4
c0018bf7:	e9 bc 00 00 00       	jmp    c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018bfc:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0018c04:	75 0a                	jne    c0018c10 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018c06:	b8 04 00 00 00       	mov    eax,0x4
c0018c0b:	e9 a8 00 00 00       	jmp    c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018c10:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018c17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c1b:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c22:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c25:	e8 66 7a fe ff       	call   c0000690 <strcpy>
c0018c2a:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c31:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c35:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0018c3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c3f:	e8 6c fd ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018c44:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c4c:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018c53:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c56:	e8 a6 ba fe ff       	call   c0004701 <f_stat>
c0018c5b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0018c62:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0018c69:	85 c0                	test   eax,eax
c0018c6b:	74 07                	je     c0018c74 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c0018c6d:	83 f8 04             	cmp    eax,0x4
c0018c70:	74 36                	je     c0018ca8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0018c72:	eb 3c                	jmp    c0018cb0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0018c74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018c79:	0f b6 c0             	movzx  eax,al
c0018c7c:	83 e0 10             	and    eax,0x10
c0018c7f:	0f 95 c2             	setne  dl
c0018c82:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018c89:	88 10                	mov    BYTE PTR [eax],dl
c0018c8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c8f:	ba 00 00 00 00       	mov    edx,0x0
c0018c94:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c0018c9b:	89 01                	mov    DWORD PTR [ecx],eax
c0018c9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ca0:	b8 00 00 00 00       	mov    eax,0x0
c0018ca5:	eb 11                	jmp    c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018ca7:	90                   	nop
c0018ca8:	b8 02 00 00 00       	mov    eax,0x2
c0018cad:	eb 09                	jmp    c0018cb8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018caf:	90                   	nop
c0018cb0:	b8 01 00 00 00       	mov    eax,0x1
c0018cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb8:	81 c4 3c 02 00 00    	add    esp,0x23c
c0018cbe:	c3                   	ret    
c0018cbf:	90                   	nop

c0018cc0 <FAT::unlink(char const*)>:
c0018cc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018cc6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018cce:	75 08                	jne    c0018cd8 <FAT::unlink(char const*)+0x18>
c0018cd0:	b8 04 00 00 00       	mov    eax,0x4
c0018cd5:	eb 5d                	jmp    c0018d34 <FAT::unlink(char const*)+0x74>
c0018cd7:	90                   	nop
c0018cd8:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018cdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ce3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018ce7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cea:	e8 a1 79 fe ff       	call   c0000690 <strcpy>
c0018cef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018cf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018cf7:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018cfe:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d01:	e8 aa fc ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018d06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018d0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d0d:	e8 56 bc fe ff       	call   c0004968 <f_unlink>
c0018d12:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018d19:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018d20:	85 c0                	test   eax,eax
c0018d22:	75 08                	jne    c0018d2c <FAT::unlink(char const*)+0x6c>
c0018d24:	b8 00 00 00 00       	mov    eax,0x0
c0018d29:	eb 09                	jmp    c0018d34 <FAT::unlink(char const*)+0x74>
c0018d2b:	90                   	nop
c0018d2c:	b8 01 00 00 00       	mov    eax,0x1
c0018d31:	8d 76 00             	lea    esi,[esi+0x0]
c0018d34:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018d3a:	c3                   	ret    
c0018d3b:	90                   	nop

c0018d3c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018d3c:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0018d42:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018d49:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0018d50:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018d54:	88 d0                	mov    al,dl
c0018d56:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018d5a:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018d62:	75 0c                	jne    c0018d70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018d64:	b8 04 00 00 00       	mov    eax,0x4
c0018d69:	e9 32 01 00 00       	jmp    c0018ea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018d6e:	66 90                	xchg   ax,ax
c0018d70:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018d77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d7b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d82:	e8 09 79 fe ff       	call   c0000690 <strcpy>
c0018d87:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d8f:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018d96:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d99:	e8 12 fc ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018d9e:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c0018da6:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c0018dae:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018db3:	83 e0 01             	and    eax,0x1
c0018db6:	74 08                	je     c0018dc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018db8:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c0018dc0:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018dc5:	83 e0 02             	and    eax,0x2
c0018dc8:	74 0a                	je     c0018dd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c0018dca:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c0018dd2:	66 90                	xchg   ax,ax
c0018dd4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018dd9:	83 e0 04             	and    eax,0x4
c0018ddc:	74 0a                	je     c0018de8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018dde:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0018de6:	66 90                	xchg   ax,ax
c0018de8:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ded:	83 e0 08             	and    eax,0x8
c0018df0:	74 0a                	je     c0018dfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0018df2:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c0018dfa:	66 90                	xchg   ax,ax
c0018dfc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e01:	83 e0 01             	and    eax,0x1
c0018e04:	74 0a                	je     c0018e10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0018e06:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c0018e0e:	66 90                	xchg   ax,ax
c0018e10:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e15:	83 e0 02             	and    eax,0x2
c0018e18:	74 0a                	je     c0018e24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c0018e1a:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0018e22:	66 90                	xchg   ax,ax
c0018e24:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e29:	83 e0 04             	and    eax,0x4
c0018e2c:	74 0a                	je     c0018e38 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018e2e:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0018e36:	66 90                	xchg   ax,ax
c0018e38:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018e3d:	83 e0 08             	and    eax,0x8
c0018e40:	74 0a                	je     c0018e4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0018e42:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c0018e4a:	66 90                	xchg   ax,ax
c0018e4c:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018e54:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c0018e5b:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0018e63:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018e6b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018e6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e73:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e77:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e7a:	e8 5a bf fe ff       	call   c0004dd9 <f_chmod>
c0018e7f:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0018e86:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018e8d:	85 c0                	test   eax,eax
c0018e8f:	75 07                	jne    c0018e98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c0018e91:	b8 00 00 00 00       	mov    eax,0x0
c0018e96:	eb 08                	jmp    c0018ea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018e98:	b8 01 00 00 00       	mov    eax,0x1
c0018e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0018ea6:	c3                   	ret    
c0018ea7:	90                   	nop

c0018ea8 <FAT::rename(char const*, char const*)>:
c0018ea8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018eae:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018eb6:	74 0c                	je     c0018ec4 <FAT::rename(char const*, char const*)+0x1c>
c0018eb8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018ec0:	75 0e                	jne    c0018ed0 <FAT::rename(char const*, char const*)+0x28>
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	b8 04 00 00 00       	mov    eax,0x4
c0018ec9:	e9 9e 00 00 00       	jmp    c0018f6c <FAT::rename(char const*, char const*)+0xc4>
c0018ece:	66 90                	xchg   ax,ax
c0018ed0:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0018ed7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018edb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018ee2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ee5:	e8 a6 77 fe ff       	call   c0000690 <strcpy>
c0018eea:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018ef1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ef5:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018efc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018eff:	e8 ac fa ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018f04:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c0018f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f0f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f13:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f16:	e8 75 77 fe ff       	call   c0000690 <strcpy>
c0018f1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f23:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c0018f2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f2d:	e8 7e fa ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018f32:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f3a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018f41:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f44:	e8 d8 bc fe ff       	call   c0004c21 <f_rename>
c0018f49:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018f50:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018f57:	85 c0                	test   eax,eax
c0018f59:	75 09                	jne    c0018f64 <FAT::rename(char const*, char const*)+0xbc>
c0018f5b:	b8 00 00 00 00       	mov    eax,0x0
c0018f60:	eb 0a                	jmp    c0018f6c <FAT::rename(char const*, char const*)+0xc4>
c0018f62:	66 90                	xchg   ax,ax
c0018f64:	b8 01 00 00 00       	mov    eax,0x1
c0018f69:	8d 76 00             	lea    esi,[esi+0x0]
c0018f6c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <FAT::mkdir(char const*)>:
c0018f74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018f7a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018f82:	75 08                	jne    c0018f8c <FAT::mkdir(char const*)+0x18>
c0018f84:	b8 04 00 00 00       	mov    eax,0x4
c0018f89:	eb 5d                	jmp    c0018fe8 <FAT::mkdir(char const*)+0x74>
c0018f8b:	90                   	nop
c0018f8c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018f93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f97:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f9e:	e8 ed 76 fe ff       	call   c0000690 <strcpy>
c0018fa3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fa7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fab:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018fb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fb5:	e8 f6 f9 ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0018fba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018fbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0018fc1:	e8 c0 ba fe ff       	call   c0004a86 <f_mkdir>
c0018fc6:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018fcd:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018fd4:	85 c0                	test   eax,eax
c0018fd6:	75 08                	jne    c0018fe0 <FAT::mkdir(char const*)+0x6c>
c0018fd8:	b8 00 00 00 00       	mov    eax,0x0
c0018fdd:	eb 09                	jmp    c0018fe8 <FAT::mkdir(char const*)+0x74>
c0018fdf:	90                   	nop
c0018fe0:	b8 01 00 00 00       	mov    eax,0x1
c0018fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fe8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018fee:	c3                   	ret    
c0018fef:	90                   	nop

c0018ff0 <FAT::exists(char const*)>:
c0018ff0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018ff6:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018ffd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019001:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019005:	89 04 24             	mov    DWORD PTR [esp],eax
c0019008:	e8 83 76 fe ff       	call   c0000690 <strcpy>
c001900d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019011:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019015:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c001901c:	89 04 24             	mov    DWORD PTR [esp],eax
c001901f:	e8 8c f9 ff ff       	call   c00189b0 <FAT::fixFilepath(char*)>
c0019024:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001902b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001902f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019033:	89 04 24             	mov    DWORD PTR [esp],eax
c0019036:	e8 c6 b6 fe ff       	call   c0004701 <f_stat>
c001903b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019042:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019049:	85 c0                	test   eax,eax
c001904b:	75 07                	jne    c0019054 <FAT::exists(char const*)+0x64>
c001904d:	b0 01                	mov    al,0x1
c001904f:	eb 07                	jmp    c0019058 <FAT::exists(char const*)+0x68>
c0019051:	8d 76 00             	lea    esi,[esi+0x0]
c0019054:	b0 00                	mov    al,0x0
c0019056:	66 90                	xchg   ax,ax
c0019058:	81 c4 3c 02 00 00    	add    esp,0x23c
c001905e:	c3                   	ret    
c001905f:	90                   	nop

c0019060 <isoReadDiscSectorHelper>:
c0019060:	53                   	push   ebx
c0019061:	83 ec 48             	sub    esp,0x48
c0019064:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019068:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001906c:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c0019071:	83 e8 41             	sub    eax,0x41
c0019074:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001907b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001907f:	ba 00 00 00 00       	mov    edx,0x0
c0019084:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019088:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001908c:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0019090:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019094:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019098:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001909c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001909f:	e8 64 40 ff ff       	call   c000d108 <LogicalDisk::read(unsigned long long, int, void*)>
c00190a4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00190a8:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00190ad:	74 09                	je     c00190b8 <isoReadDiscSectorHelper+0x58>
c00190af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00190b3:	c1 e0 0b             	shl    eax,0xb
c00190b6:	eb 08                	jmp    c00190c0 <isoReadDiscSectorHelper+0x60>
c00190b8:	b8 00 00 00 00       	mov    eax,0x0
c00190bd:	8d 76 00             	lea    esi,[esi+0x0]
c00190c0:	83 c4 48             	add    esp,0x48
c00190c3:	5b                   	pop    ebx
c00190c4:	c3                   	ret    
c00190c5:	8d 76 00             	lea    esi,[esi+0x0]

c00190c8 <iso_kprintf>:
c00190c8:	83 ec 1c             	sub    esp,0x1c
c00190cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00190cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190d3:	c7 04 24 b9 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cb9
c00190da:	e8 f7 18 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00190df:	90                   	nop
c00190e0:	83 c4 1c             	add    esp,0x1c
c00190e3:	c3                   	ret    

c00190e4 <iso_kprintfd>:
c00190e4:	83 ec 1c             	sub    esp,0x1c
c00190e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00190eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190ef:	c7 04 24 d7 fc 01 c0 	mov    DWORD PTR [esp],0xc001fcd7
c00190f6:	e8 db 18 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00190fb:	90                   	nop
c00190fc:	83 c4 1c             	add    esp,0x1c
c00190ff:	c3                   	ret    

c0019100 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019100:	b8 08 00 00 00       	mov    eax,0x8
c0019105:	c3                   	ret    

c0019106 <ISO9660::getName()>:
c0019106:	b8 0c 13 02 c0       	mov    eax,0xc002130c
c001910b:	c3                   	ret    

c001910c <ISO9660::closeDir(void*)>:
c001910c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019110:	8b 00                	mov    eax,DWORD PTR [eax]
c0019112:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019115:	90                   	nop

c0019116 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019116:	b8 01 00 00 00       	mov    eax,0x1
c001911b:	c3                   	ret    

c001911c <ISO9660::unlink(char const*)>:
c001911c:	b8 01 00 00 00       	mov    eax,0x1
c0019121:	c3                   	ret    

c0019122 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019122:	b8 03 00 00 00       	mov    eax,0x3
c0019127:	c3                   	ret    

c0019128 <ISO9660::rename(char const*, char const*)>:
c0019128:	b8 01 00 00 00       	mov    eax,0x1
c001912d:	c3                   	ret    

c001912e <ISO9660::mkdir(char const*)>:
c001912e:	b8 01 00 00 00       	mov    eax,0x1
c0019133:	c3                   	ret    

c0019134 <ISO9660::~ISO9660()>:
c0019134:	83 ec 1c             	sub    esp,0x1c
c0019137:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c001913c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019140:	89 10                	mov    DWORD PTR [eax],edx
c0019142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019146:	89 04 24             	mov    DWORD PTR [esp],eax
c0019149:	e8 da 1b ff ff       	call   c000ad28 <Filesystem::~Filesystem()>
c001914e:	90                   	nop
c001914f:	83 c4 1c             	add    esp,0x1c
c0019152:	c3                   	ret    
c0019153:	90                   	nop

c0019154 <ISO9660::~ISO9660()>:
c0019154:	83 ec 1c             	sub    esp,0x1c
c0019157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001915b:	89 04 24             	mov    DWORD PTR [esp],eax
c001915e:	e8 d1 ff ff ff       	call   c0019134 <ISO9660::~ISO9660()>
c0019163:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c001916b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001916f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019172:	e8 45 17 ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c0019177:	83 c4 1c             	add    esp,0x1c
c001917a:	c3                   	ret    
c001917b:	90                   	nop

c001917c <ISO9660::exists(char const*)>:
c001917c:	83 ec 18             	sub    esp,0x18
c001917f:	68 27 13 02 c0       	push   0xc0021327
c0019184:	e8 9c 75 ff ff       	call   c0010725 <KePanic(char const*)>
c0019189:	31 c0                	xor    eax,eax
c001918b:	83 c4 1c             	add    esp,0x1c
c001918e:	c3                   	ret    
c001918f:	90                   	nop

c0019190 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019190:	56                   	push   esi
c0019191:	53                   	push   ebx
c0019192:	53                   	push   ebx
c0019193:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019197:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001919b:	85 db                	test   ebx,ebx
c001919d:	0f 84 c2 00 00 00    	je     c0019265 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00191a3:	85 f6                	test   esi,esi
c00191a5:	0f 84 ba 00 00 00    	je     c0019265 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00191ab:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00191b0:	b8 03 00 00 00       	mov    eax,0x3
c00191b5:	0f 85 af 00 00 00    	jne    c001926a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00191bb:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00191c0:	38 03                	cmp    BYTE PTR [ebx],al
c00191c2:	74 1b                	je     c00191df <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00191c4:	84 c0                	test   al,al
c00191c6:	74 10                	je     c00191d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00191c8:	83 ec 0c             	sub    esp,0xc
c00191cb:	68 45 13 02 c0       	push   0xc0021345
c00191d0:	e8 50 75 ff ff       	call   c0010725 <KePanic(char const*)>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	8a 03                	mov    al,BYTE PTR [ebx]
c00191da:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00191df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191e2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00191e9:	85 c0                	test   eax,eax
c00191eb:	74 09                	je     c00191f6 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00191ed:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00191f4:	74 48                	je     c001923e <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c00191f6:	83 ec 0c             	sub    esp,0xc
c00191f9:	68 55 13 02 c0       	push   0xc0021355
c00191fe:	e8 d3 17 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0019203:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019210:	85 c0                	test   eax,eax
c0019212:	74 17                	je     c001922b <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0019214:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001921b:	83 ec 0c             	sub    esp,0xc
c001921e:	68 75 13 02 c0       	push   0xc0021375
c0019223:	e8 ae 17 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0019228:	83 c4 10             	add    esp,0x10
c001922b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019232:	83 ec 0c             	sub    esp,0xc
c0019235:	50                   	push   eax
c0019236:	e8 34 d7 fe ff       	call   c000696f <init_percd>
c001923b:	83 c4 10             	add    esp,0x10
c001923e:	51                   	push   ecx
c001923f:	83 c3 03             	add    ebx,0x3
c0019242:	51                   	push   ecx
c0019243:	6a 00                	push   0x0
c0019245:	53                   	push   ebx
c0019246:	e8 e7 d1 fe ff       	call   c0006432 <iso_open>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	89 c2                	mov    edx,eax
c0019250:	b8 01 00 00 00       	mov    eax,0x1
c0019255:	83 fa ff             	cmp    edx,0xffffffff
c0019258:	74 10                	je     c001926a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001925a:	83 c2 32             	add    edx,0x32
c001925d:	31 c0                	xor    eax,eax
c001925f:	01 d2                	add    edx,edx
c0019261:	89 16                	mov    DWORD PTR [esi],edx
c0019263:	eb 05                	jmp    c001926a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019265:	b8 04 00 00 00       	mov    eax,0x4
c001926a:	5a                   	pop    edx
c001926b:	5b                   	pop    ebx
c001926c:	5e                   	pop    esi
c001926d:	c3                   	ret    

c001926e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001926e:	53                   	push   ebx
c001926f:	83 ec 08             	sub    esp,0x8
c0019272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019276:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001927a:	85 c0                	test   eax,eax
c001927c:	74 2d                	je     c00192ab <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001927e:	85 db                	test   ebx,ebx
c0019280:	74 29                	je     c00192ab <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019282:	52                   	push   edx
c0019283:	b9 02 00 00 00       	mov    ecx,0x2
c0019288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001928c:	99                   	cdq    
c001928d:	f7 f9                	idiv   ecx
c001928f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019293:	83 e8 32             	sub    eax,0x32
c0019296:	50                   	push   eax
c0019297:	e8 3c d2 fe ff       	call   c00064d8 <iso_read>
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	89 03                	mov    DWORD PTR [ebx],eax
c00192a1:	09 d0                	or     eax,edx
c00192a3:	0f 94 c0             	sete   al
c00192a6:	0f b6 c0             	movzx  eax,al
c00192a9:	eb 05                	jmp    c00192b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00192ab:	b8 04 00 00 00       	mov    eax,0x4
c00192b0:	83 c4 08             	add    esp,0x8
c00192b3:	5b                   	pop    ebx
c00192b4:	c3                   	ret    
c00192b5:	90                   	nop

c00192b6 <ISO9660::seek(void*, unsigned long long)>:
c00192b6:	57                   	push   edi
c00192b7:	b8 04 00 00 00       	mov    eax,0x4
c00192bc:	56                   	push   esi
c00192bd:	51                   	push   ecx
c00192be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00192c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00192c6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00192ca:	85 d2                	test   edx,edx
c00192cc:	74 26                	je     c00192f4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00192ce:	89 d0                	mov    eax,edx
c00192d0:	b9 02 00 00 00       	mov    ecx,0x2
c00192d5:	6a 00                	push   0x0
c00192d7:	99                   	cdq    
c00192d8:	f7 f9                	idiv   ecx
c00192da:	57                   	push   edi
c00192db:	56                   	push   esi
c00192dc:	83 e8 32             	sub    eax,0x32
c00192df:	50                   	push   eax
c00192e0:	e8 09 d3 fe ff       	call   c00065ee <iso_seek>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	31 f0                	xor    eax,esi
c00192ea:	31 fa                	xor    edx,edi
c00192ec:	09 d0                	or     eax,edx
c00192ee:	0f 95 c0             	setne  al
c00192f1:	0f b6 c0             	movzx  eax,al
c00192f4:	5a                   	pop    edx
c00192f5:	5e                   	pop    esi
c00192f6:	5f                   	pop    edi
c00192f7:	c3                   	ret    

c00192f8 <ISO9660::tell(void*, unsigned long long*)>:
c00192f8:	53                   	push   ebx
c00192f9:	83 ec 08             	sub    esp,0x8
c00192fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019300:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019304:	85 c0                	test   eax,eax
c0019306:	74 24                	je     c001932c <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019308:	85 db                	test   ebx,ebx
c001930a:	74 20                	je     c001932c <ISO9660::tell(void*, unsigned long long*)+0x34>
c001930c:	b9 02 00 00 00       	mov    ecx,0x2
c0019311:	99                   	cdq    
c0019312:	f7 f9                	idiv   ecx
c0019314:	83 ec 0c             	sub    esp,0xc
c0019317:	83 e8 32             	sub    eax,0x32
c001931a:	50                   	push   eax
c001931b:	e8 52 d3 fe ff       	call   c0006672 <iso_tell>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	89 03                	mov    DWORD PTR [ebx],eax
c0019325:	31 c0                	xor    eax,eax
c0019327:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001932a:	eb 05                	jmp    c0019331 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001932c:	b8 04 00 00 00       	mov    eax,0x4
c0019331:	83 c4 08             	add    esp,0x8
c0019334:	5b                   	pop    ebx
c0019335:	c3                   	ret    

c0019336 <ISO9660::stat(void*, unsigned long long*)>:
c0019336:	56                   	push   esi
c0019337:	53                   	push   ebx
c0019338:	83 ec 10             	sub    esp,0x10
c001933b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001933f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0019343:	68 99 13 02 c0       	push   0xc0021399
c0019348:	e8 89 16 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	85 db                	test   ebx,ebx
c0019352:	74 2a                	je     c001937e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019354:	85 f6                	test   esi,esi
c0019356:	74 26                	je     c001937e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019358:	89 d8                	mov    eax,ebx
c001935a:	b9 02 00 00 00       	mov    ecx,0x2
c001935f:	99                   	cdq    
c0019360:	83 ec 0c             	sub    esp,0xc
c0019363:	f7 f9                	idiv   ecx
c0019365:	83 e8 32             	sub    eax,0x32
c0019368:	50                   	push   eax
c0019369:	e8 35 d3 fe ff       	call   c00066a3 <iso_total>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019378:	89 06                	mov    DWORD PTR [esi],eax
c001937a:	31 c0                	xor    eax,eax
c001937c:	eb 05                	jmp    c0019383 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001937e:	b8 04 00 00 00       	mov    eax,0x4
c0019383:	5a                   	pop    edx
c0019384:	5b                   	pop    ebx
c0019385:	5e                   	pop    esi
c0019386:	c3                   	ret    
c0019387:	90                   	nop

c0019388 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019388:	55                   	push   ebp
c0019389:	57                   	push   edi
c001938a:	56                   	push   esi
c001938b:	53                   	push   ebx
c001938c:	83 ec 18             	sub    esp,0x18
c001938f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019393:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019397:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001939b:	68 a1 13 02 c0       	push   0xc00213a1
c00193a0:	e8 31 16 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	85 ff                	test   edi,edi
c00193aa:	0f 94 c2             	sete   dl
c00193ad:	85 f6                	test   esi,esi
c00193af:	0f 94 c0             	sete   al
c00193b2:	08 c2                	or     dl,al
c00193b4:	0f 85 d5 00 00 00    	jne    c001948f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00193ba:	85 db                	test   ebx,ebx
c00193bc:	0f 84 cd 00 00 00    	je     c001948f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00193c2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00193c5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00193cb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00193d2:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00193d7:	38 03                	cmp    BYTE PTR [ebx],al
c00193d9:	74 1b                	je     c00193f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c00193db:	84 c0                	test   al,al
c00193dd:	74 10                	je     c00193ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c00193df:	83 ec 0c             	sub    esp,0xc
c00193e2:	68 45 13 02 c0       	push   0xc0021345
c00193e7:	e8 39 73 ff ff       	call   c0010725 <KePanic(char const*)>
c00193ec:	83 c4 10             	add    esp,0x10
c00193ef:	8a 03                	mov    al,BYTE PTR [ebx]
c00193f1:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193f9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019400:	85 c0                	test   eax,eax
c0019402:	74 09                	je     c001940d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0019404:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001940b:	74 51                	je     c001945e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c001940d:	83 ec 0c             	sub    esp,0xc
c0019410:	68 a9 13 02 c0       	push   0xc00213a9
c0019415:	e8 bc 15 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001941a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019428:	74 21                	je     c001944b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001942a:	83 ec 0c             	sub    esp,0xc
c001942d:	68 c9 13 02 c0       	push   0xc00213c9
c0019432:	e8 9f 15 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c0019437:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019444:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001944b:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019452:	83 ec 0c             	sub    esp,0xc
c0019455:	50                   	push   eax
c0019456:	e8 14 d5 fe ff       	call   c000696f <init_percd>
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	52                   	push   edx
c001945f:	83 c3 03             	add    ebx,0x3
c0019462:	52                   	push   edx
c0019463:	6a 00                	push   0x0
c0019465:	53                   	push   ebx
c0019466:	e8 c7 cf fe ff       	call   c0006432 <iso_open>
c001946b:	83 c4 10             	add    esp,0x10
c001946e:	83 f8 ff             	cmp    eax,0xffffffff
c0019471:	89 c5                	mov    ebp,eax
c0019473:	75 21                	jne    c0019496 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019475:	50                   	push   eax
c0019476:	50                   	push   eax
c0019477:	6a 01                	push   0x1
c0019479:	53                   	push   ebx
c001947a:	e8 b3 cf fe ff       	call   c0006432 <iso_open>
c001947f:	83 c4 10             	add    esp,0x10
c0019482:	ba 02 00 00 00       	mov    edx,0x2
c0019487:	40                   	inc    eax
c0019488:	74 2b                	je     c00194b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001948a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001948d:	eb 24                	jmp    c00194b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c001948f:	ba 04 00 00 00       	mov    edx,0x4
c0019494:	eb 1f                	jmp    c00194b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019496:	83 ec 0c             	sub    esp,0xc
c0019499:	50                   	push   eax
c001949a:	e8 04 d2 fe ff       	call   c00066a3 <iso_total>
c001949f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00194a6:	89 07                	mov    DWORD PTR [edi],eax
c00194a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00194ab:	e8 0a d0 fe ff       	call   c00064ba <iso_close>
c00194b0:	83 c4 10             	add    esp,0x10
c00194b3:	31 d2                	xor    edx,edx
c00194b5:	83 c4 0c             	add    esp,0xc
c00194b8:	89 d0                	mov    eax,edx
c00194ba:	5b                   	pop    ebx
c00194bb:	5e                   	pop    esi
c00194bc:	5f                   	pop    edi
c00194bd:	5d                   	pop    ebp
c00194be:	c3                   	ret    
c00194bf:	90                   	nop

c00194c0 <ISO9660::close(void*)>:
c00194c0:	83 ec 0c             	sub    esp,0xc
c00194c3:	b8 04 00 00 00       	mov    eax,0x4
c00194c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194cc:	85 d2                	test   edx,edx
c00194ce:	74 1b                	je     c00194eb <ISO9660::close(void*)+0x2b>
c00194d0:	89 d0                	mov    eax,edx
c00194d2:	b9 02 00 00 00       	mov    ecx,0x2
c00194d7:	99                   	cdq    
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	f7 f9                	idiv   ecx
c00194dd:	83 e8 32             	sub    eax,0x32
c00194e0:	50                   	push   eax
c00194e1:	e8 d4 cf fe ff       	call   c00064ba <iso_close>
c00194e6:	83 c4 10             	add    esp,0x10
c00194e9:	31 c0                	xor    eax,eax
c00194eb:	83 c4 0c             	add    esp,0xc
c00194ee:	c3                   	ret    
c00194ef:	90                   	nop

c00194f0 <ISO9660::openDir(char const*, void**)>:
c00194f0:	56                   	push   esi
c00194f1:	53                   	push   ebx
c00194f2:	50                   	push   eax
c00194f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00194f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194fb:	85 db                	test   ebx,ebx
c00194fd:	0f 84 b5 00 00 00    	je     c00195b8 <ISO9660::openDir(char const*, void**)+0xc8>
c0019503:	85 f6                	test   esi,esi
c0019505:	0f 84 ad 00 00 00    	je     c00195b8 <ISO9660::openDir(char const*, void**)+0xc8>
c001950b:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c0019510:	38 03                	cmp    BYTE PTR [ebx],al
c0019512:	74 1b                	je     c001952f <ISO9660::openDir(char const*, void**)+0x3f>
c0019514:	84 c0                	test   al,al
c0019516:	74 10                	je     c0019528 <ISO9660::openDir(char const*, void**)+0x38>
c0019518:	83 ec 0c             	sub    esp,0xc
c001951b:	68 45 13 02 c0       	push   0xc0021345
c0019520:	e8 00 72 ff ff       	call   c0010725 <KePanic(char const*)>
c0019525:	83 c4 10             	add    esp,0x10
c0019528:	8a 03                	mov    al,BYTE PTR [ebx]
c001952a:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c001952f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019532:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019539:	85 c0                	test   eax,eax
c001953b:	74 10                	je     c001954d <ISO9660::openDir(char const*, void**)+0x5d>
c001953d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019544:	74 1a                	je     c0019560 <ISO9660::openDir(char const*, void**)+0x70>
c0019546:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001954d:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019554:	83 ec 0c             	sub    esp,0xc
c0019557:	50                   	push   eax
c0019558:	e8 12 d4 fe ff       	call   c000696f <init_percd>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	50                   	push   eax
c0019561:	83 c3 03             	add    ebx,0x3
c0019564:	50                   	push   eax
c0019565:	6a 01                	push   0x1
c0019567:	53                   	push   ebx
c0019568:	e8 c5 ce fe ff       	call   c0006432 <iso_open>
c001956d:	83 c4 10             	add    esp,0x10
c0019570:	83 f8 ff             	cmp    eax,0xffffffff
c0019573:	89 c3                	mov    ebx,eax
c0019575:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001957a:	75 1c                	jne    c0019598 <ISO9660::openDir(char const*, void**)+0xa8>
c001957c:	53                   	push   ebx
c001957d:	53                   	push   ebx
c001957e:	68 ed 13 02 c0       	push   0xc00213ed
c0019583:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019589:	e8 8a f4 fe ff       	call   c0008a18 <VgaText::puts(char const*)>
c001958e:	83 c4 10             	add    esp,0x10
c0019591:	b8 01 00 00 00       	mov    eax,0x1
c0019596:	eb 25                	jmp    c00195bd <ISO9660::openDir(char const*, void**)+0xcd>
c0019598:	51                   	push   ecx
c0019599:	01 db                	add    ebx,ebx
c001959b:	51                   	push   ecx
c001959c:	83 c3 65             	add    ebx,0x65
c001959f:	68 00 14 02 c0       	push   0xc0021400
c00195a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00195aa:	e8 69 f4 fe ff       	call   c0008a18 <VgaText::puts(char const*)>
c00195af:	83 c4 10             	add    esp,0x10
c00195b2:	31 c0                	xor    eax,eax
c00195b4:	89 1e                	mov    DWORD PTR [esi],ebx
c00195b6:	eb 05                	jmp    c00195bd <ISO9660::openDir(char const*, void**)+0xcd>
c00195b8:	b8 04 00 00 00       	mov    eax,0x4
c00195bd:	5a                   	pop    edx
c00195be:	5b                   	pop    ebx
c00195bf:	5e                   	pop    esi
c00195c0:	c3                   	ret    
c00195c1:	90                   	nop

c00195c2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00195c2:	55                   	push   ebp
c00195c3:	57                   	push   edi
c00195c4:	56                   	push   esi
c00195c5:	53                   	push   ebx
c00195c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00195cc:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00195d3:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00195da:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00195e1:	85 db                	test   ebx,ebx
c00195e3:	0f 84 e4 00 00 00    	je     c00196cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00195e9:	85 ed                	test   ebp,ebp
c00195eb:	0f 84 dc 00 00 00    	je     c00196cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00195f1:	83 ec 0c             	sub    esp,0xc
c00195f4:	68 13 14 02 c0       	push   0xc0021413
c00195f9:	e8 d8 13 ff ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c00195fe:	89 d8                	mov    eax,ebx
c0019600:	b9 02 00 00 00       	mov    ecx,0x2
c0019605:	99                   	cdq    
c0019606:	f7 f9                	idiv   ecx
c0019608:	83 e8 32             	sub    eax,0x32
c001960b:	89 04 24             	mov    DWORD PTR [esp],eax
c001960e:	e8 e1 d0 fe ff       	call   c00066f4 <iso_readdir>
c0019613:	83 c4 10             	add    esp,0x10
c0019616:	85 c0                	test   eax,eax
c0019618:	89 c3                	mov    ebx,eax
c001961a:	75 38                	jne    c0019654 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001961c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019621:	53                   	push   ebx
c0019622:	53                   	push   ebx
c0019623:	68 1e 14 02 c0       	push   0xc002141e
c0019628:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001962e:	e8 e5 f3 fe ff       	call   c0008a18 <VgaText::puts(char const*)>
c0019633:	83 c4 0c             	add    esp,0xc
c0019636:	68 10 01 00 00       	push   0x110
c001963b:	6a 00                	push   0x0
c001963d:	57                   	push   edi
c001963e:	e8 ad 6e fe ff       	call   c00004f0 <memset>
c0019643:	83 c4 10             	add    esp,0x10
c0019646:	b8 01 00 00 00       	mov    eax,0x1
c001964b:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c0019652:	eb 7e                	jmp    c00196d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c0019654:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001965a:	8d 70 08             	lea    esi,[eax+0x8]
c001965d:	83 ec 0c             	sub    esp,0xc
c0019660:	56                   	push   esi
c0019661:	e8 2a 6f fe ff       	call   c0000590 <strlen>
c0019666:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001966e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019672:	83 c4 10             	add    esp,0x10
c0019675:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019679:	75 0a                	jne    c0019685 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001967b:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001967e:	b8 02 00 00 00       	mov    eax,0x2
c0019683:	74 05                	je     c001968a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c0019685:	b8 01 00 00 00       	mov    eax,0x1
c001968a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001968e:	50                   	push   eax
c001968f:	50                   	push   eax
c0019690:	56                   	push   esi
c0019691:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019695:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019699:	50                   	push   eax
c001969a:	e8 f1 6f fe ff       	call   c0000690 <strcpy>
c001969f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00196a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00196a8:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00196af:	5a                   	pop    edx
c00196b0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00196b5:	59                   	pop    ecx
c00196b6:	68 31 14 02 c0       	push   0xc0021431
c00196bb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00196c1:	e8 52 f3 fe ff       	call   c0008a18 <VgaText::puts(char const*)>
c00196c6:	83 c4 10             	add    esp,0x10
c00196c9:	31 c0                	xor    eax,eax
c00196cb:	eb 05                	jmp    c00196d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00196cd:	b8 04 00 00 00       	mov    eax,0x4
c00196d2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00196d8:	5b                   	pop    ebx
c00196d9:	5e                   	pop    esi
c00196da:	5f                   	pop    edi
c00196db:	5d                   	pop    ebp
c00196dc:	c3                   	ret    

c00196dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00196dd:	57                   	push   edi
c00196de:	56                   	push   esi
c00196df:	53                   	push   ebx
c00196e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00196e4:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00196ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00196ee:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c00196f2:	75 08                	jne    c00196fc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00196f4:	38 1d 84 1f 02 c0    	cmp    BYTE PTR ds:0xc0021f84,bl
c00196fa:	74 4a                	je     c0019746 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00196fc:	83 ec 0c             	sub    esp,0xc
c00196ff:	31 d2                	xor    edx,edx
c0019701:	68 40 83 02 c0       	push   0xc0028340
c0019706:	0f be c3             	movsx  eax,bl
c0019709:	6a 01                	push   0x1
c001970b:	52                   	push   edx
c001970c:	56                   	push   esi
c001970d:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c0019714:	e8 ef 39 ff ff       	call   c000d108 <LogicalDisk::read(unsigned long long, int, void*)>
c0019719:	83 c4 20             	add    esp,0x20
c001971c:	85 c0                	test   eax,eax
c001971e:	75 0e                	jne    c001972e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0019720:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019726:	88 1d 84 1f 02 c0    	mov    BYTE PTR ds:0xc0021f84,bl
c001972c:	eb 18                	jmp    c0019746 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001972e:	50                   	push   eax
c001972f:	68 00 08 00 00       	push   0x800
c0019734:	6a 00                	push   0x0
c0019736:	57                   	push   edi
c0019737:	e8 b4 6d fe ff       	call   c00004f0 <memset>
c001973c:	83 c4 10             	add    esp,0x10
c001973f:	b8 01 00 00 00       	mov    eax,0x1
c0019744:	eb 0e                	jmp    c0019754 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019746:	be 40 83 02 c0       	mov    esi,0xc0028340
c001974b:	b9 00 08 00 00       	mov    ecx,0x800
c0019750:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019752:	31 c0                	xor    eax,eax
c0019754:	5b                   	pop    ebx
c0019755:	5e                   	pop    esi
c0019756:	5f                   	pop    edi
c0019757:	c3                   	ret    

c0019758 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019758:	53                   	push   ebx
c0019759:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001975f:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019769:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c0019770:	80 c3 41             	add    bl,0x41
c0019773:	0f be db             	movsx  ebx,bl
c0019776:	53                   	push   ebx
c0019777:	8d 44 24 08          	lea    eax,[esp+0x8]
c001977b:	50                   	push   eax
c001977c:	6a 10                	push   0x10
c001977e:	e8 5a ff ff ff       	call   c00196dd <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	31 d2                	xor    edx,edx
c0019788:	85 c0                	test   eax,eax
c001978a:	75 33                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001978c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019791:	75 2c                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019793:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019798:	75 25                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001979a:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001979f:	75 1e                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197a1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00197a6:	75 17                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197a8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00197ad:	75 10                	jne    c00197bf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00197af:	83 ec 0c             	sub    esp,0xc
c00197b2:	53                   	push   ebx
c00197b3:	e8 b7 d1 fe ff       	call   c000696f <init_percd>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	40                   	inc    eax
c00197bc:	0f 95 c2             	setne  dl
c00197bf:	81 c4 08 08 00 00    	add    esp,0x808
c00197c5:	88 d0                	mov    al,dl
c00197c7:	5b                   	pop    ebx
c00197c8:	c3                   	ret    
c00197c9:	90                   	nop

c00197ca <ISO9660::ISO9660()>:
c00197ca:	83 ec 1c             	sub    esp,0x1c
c00197cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197d1:	89 04 24             	mov    DWORD PTR [esp],eax
c00197d4:	e8 2b 15 ff ff       	call   c000ad04 <Filesystem::Filesystem()>
c00197d9:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c00197de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e2:	89 10                	mov    DWORD PTR [eax],edx
c00197e4:	e8 98 d2 fe ff       	call   c0006a81 <fs_iso9660_init>
c00197e9:	90                   	nop
c00197ea:	83 c4 1c             	add    esp,0x1c
c00197ed:	c3                   	ret    

c00197ee <SoundCard::beginPlayback()>:
c00197ee:	c7 44 24 04 ac 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ac
c00197f6:	e9 2a 6f ff ff       	jmp    c0010725 <KePanic(char const*)>
c00197fb:	90                   	nop

c00197fc <SoundCard::stopPlayback()>:
c00197fc:	c7 44 24 04 ac 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ac
c0019804:	e9 1c 6f ff ff       	jmp    c0010725 <KePanic(char const*)>
c0019809:	90                   	nop

c001980a <SoundCard::SoundCard(char const*)>:
c001980a:	83 ec 2c             	sub    esp,0x2c
c001980d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019811:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019815:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019819:	89 04 24             	mov    DWORD PTR [esp],eax
c001981c:	e8 79 27 ff ff       	call   c000bf9a <Device::Device(char const*)>
c0019821:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c0019826:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001982a:	89 10                	mov    DWORD PTR [eax],edx
c001982c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019830:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019837:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001983b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019849:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019857:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019861:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019865:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001986f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019877:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c001987c:	7f 19                	jg     c0019897 <SoundCard::SoundCard(char const*)+0x8d>
c001987e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019882:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019886:	83 c2 54             	add    edx,0x54
c0019889:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019891:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0019895:	eb e0                	jmp    c0019877 <SoundCard::SoundCard(char const*)+0x6d>
c0019897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001989b:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00198a2:	90                   	nop
c00198a3:	83 c4 2c             	add    esp,0x2c
c00198a6:	c3                   	ret    
c00198a7:	90                   	nop

c00198a8 <SoundCard::~SoundCard()>:
c00198a8:	83 ec 1c             	sub    esp,0x1c
c00198ab:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c00198b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198b4:	89 10                	mov    DWORD PTR [eax],edx
c00198b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00198bd:	e8 44 24 ff ff       	call   c000bd06 <Device::~Device()>
c00198c2:	90                   	nop
c00198c3:	83 c4 1c             	add    esp,0x1c
c00198c6:	c3                   	ret    
c00198c7:	90                   	nop

c00198c8 <SoundCard::~SoundCard()>:
c00198c8:	83 ec 1c             	sub    esp,0x1c
c00198cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00198d2:	e8 d1 ff ff ff       	call   c00198a8 <SoundCard::~SoundCard()>
c00198d7:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c00198df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00198e6:	e8 d1 0f ff ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c00198eb:	83 c4 1c             	add    esp,0x1c
c00198ee:	c3                   	ret    
c00198ef:	90                   	nop

c00198f0 <SoundCard::configureRates(int, int, int)>:
c00198f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00198f4:	31 c0                	xor    eax,eax
c00198f6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00198fd:	75 20                	jne    c001991f <SoundCard::configureRates(int, int, int)+0x2f>
c00198ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019903:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001990d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019917:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001991d:	b0 01                	mov    al,0x1
c001991f:	c3                   	ret    

c0019920 <SoundCard::getSamples16(int, short*)>:
c0019920:	55                   	push   ebp
c0019921:	57                   	push   edi
c0019922:	31 ff                	xor    edi,edi
c0019924:	56                   	push   esi
c0019925:	53                   	push   ebx
c0019926:	31 db                	xor    ebx,ebx
c0019928:	83 ec 10             	sub    esp,0x10
c001992b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001992f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019933:	8d 04 36             	lea    eax,[esi+esi*1]
c0019936:	50                   	push   eax
c0019937:	6a 00                	push   0x0
c0019939:	55                   	push   ebp
c001993a:	e8 b1 6b fe ff       	call   c00004f0 <memset>
c001993f:	83 c4 10             	add    esp,0x10
c0019942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019946:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001994d:	85 c0                	test   eax,eax
c001994f:	74 1a                	je     c001996b <SoundCard::getSamples16(int, short*)+0x4b>
c0019951:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019955:	75 14                	jne    c001996b <SoundCard::getSamples16(int, short*)+0x4b>
c0019957:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001995b:	55                   	push   ebp
c001995c:	56                   	push   esi
c001995d:	50                   	push   eax
c001995e:	e8 e5 02 00 00       	call   c0019c48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019963:	83 c4 10             	add    esp,0x10
c0019966:	39 c3                	cmp    ebx,eax
c0019968:	0f 4c d8             	cmovl  ebx,eax
c001996b:	47                   	inc    edi
c001996c:	83 ff 20             	cmp    edi,0x20
c001996f:	75 d1                	jne    c0019942 <SoundCard::getSamples16(int, short*)+0x22>
c0019971:	83 c4 0c             	add    esp,0xc
c0019974:	89 d8                	mov    eax,ebx
c0019976:	5b                   	pop    ebx
c0019977:	5e                   	pop    esi
c0019978:	5f                   	pop    edi
c0019979:	5d                   	pop    ebp
c001997a:	c3                   	ret    
c001997b:	90                   	nop

c001997c <SoundCard::getSamples32(int, int*)>:
c001997c:	55                   	push   ebp
c001997d:	57                   	push   edi
c001997e:	31 ff                	xor    edi,edi
c0019980:	56                   	push   esi
c0019981:	31 f6                	xor    esi,esi
c0019983:	53                   	push   ebx
c0019984:	83 ec 10             	sub    esp,0x10
c0019987:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001998b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001998f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019993:	c1 e0 02             	shl    eax,0x2
c0019996:	50                   	push   eax
c0019997:	6a 00                	push   0x0
c0019999:	55                   	push   ebp
c001999a:	e8 51 6b fe ff       	call   c00004f0 <memset>
c001999f:	83 c4 10             	add    esp,0x10
c00199a2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00199a9:	85 c0                	test   eax,eax
c00199ab:	74 1a                	je     c00199c7 <SoundCard::getSamples32(int, int*)+0x4b>
c00199ad:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00199b1:	75 14                	jne    c00199c7 <SoundCard::getSamples32(int, int*)+0x4b>
c00199b3:	53                   	push   ebx
c00199b4:	55                   	push   ebp
c00199b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00199b9:	50                   	push   eax
c00199ba:	e8 45 03 00 00       	call   c0019d04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00199bf:	83 c4 10             	add    esp,0x10
c00199c2:	39 c6                	cmp    esi,eax
c00199c4:	0f 4c f0             	cmovl  esi,eax
c00199c7:	47                   	inc    edi
c00199c8:	83 ff 20             	cmp    edi,0x20
c00199cb:	75 d5                	jne    c00199a2 <SoundCard::getSamples32(int, int*)+0x26>
c00199cd:	85 f6                	test   esi,esi
c00199cf:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00199d5:	75 0f                	jne    c00199e6 <SoundCard::getSamples32(int, int*)+0x6a>
c00199d7:	84 c0                	test   al,al
c00199d9:	74 1b                	je     c00199f6 <SoundCard::getSamples32(int, int*)+0x7a>
c00199db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199dd:	83 ec 0c             	sub    esp,0xc
c00199e0:	53                   	push   ebx
c00199e1:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00199e4:	eb 0d                	jmp    c00199f3 <SoundCard::getSamples32(int, int*)+0x77>
c00199e6:	84 c0                	test   al,al
c00199e8:	75 0c                	jne    c00199f6 <SoundCard::getSamples32(int, int*)+0x7a>
c00199ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ec:	83 ec 0c             	sub    esp,0xc
c00199ef:	53                   	push   ebx
c00199f0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00199f3:	83 c4 10             	add    esp,0x10
c00199f6:	83 c4 0c             	add    esp,0xc
c00199f9:	89 f0                	mov    eax,esi
c00199fb:	5b                   	pop    ebx
c00199fc:	5e                   	pop    esi
c00199fd:	5f                   	pop    edi
c00199fe:	5d                   	pop    ebp
c00199ff:	c3                   	ret    

c0019a00 <SoundCard::addChannel(SoundPort*)>:
c0019a00:	83 ec 0c             	sub    esp,0xc
c0019a03:	31 c0                	xor    eax,eax
c0019a05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019a09:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019a11:	74 1b                	je     c0019a2e <SoundCard::addChannel(SoundPort*)+0x2e>
c0019a13:	40                   	inc    eax
c0019a14:	83 f8 20             	cmp    eax,0x20
c0019a17:	75 f0                	jne    c0019a09 <SoundCard::addChannel(SoundPort*)+0x9>
c0019a19:	83 ec 0c             	sub    esp,0xc
c0019a1c:	68 d1 14 02 c0       	push   0xc00214d1
c0019a21:	e8 ff 6c ff ff       	call   c0010725 <KePanic(char const*)>
c0019a26:	83 c4 10             	add    esp,0x10
c0019a29:	83 c8 ff             	or     eax,0xffffffff
c0019a2c:	eb 0b                	jmp    c0019a39 <SoundCard::addChannel(SoundPort*)+0x39>
c0019a2e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019a32:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019a39:	83 c4 0c             	add    esp,0xc
c0019a3c:	c3                   	ret    
c0019a3d:	90                   	nop

c0019a3e <SoundCard::removeChannel(int)>:
c0019a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a46:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019a51:	c3                   	ret    
c0019a52:	66 90                	xchg   ax,ax

c0019a54 <SoundPort::SoundPort(int, int, int, int)>:
c0019a54:	83 ec 1c             	sub    esp,0x1c
c0019a57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a5b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a66:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a6e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019a72:	89 10                	mov    DWORD PTR [eax],edx
c0019a74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019a7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a83:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019a87:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019a8a:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0019a8f:	75 13                	jne    c0019aa4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019a91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a97:	05 a0 0f 00 00       	add    eax,0xfa0
c0019a9c:	01 c0                	add    eax,eax
c0019a9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019aa2:	66 90                	xchg   ax,ax
c0019aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019aac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019aaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ab3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019ac1:	c1 e0 02             	shl    eax,0x2
c0019ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ac7:	e8 9a df fe ff       	call   c0007a66 <malloc>
c0019acc:	89 c2                	mov    edx,eax
c0019ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ad2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019ad5:	90                   	nop
c0019ad6:	83 c4 1c             	add    esp,0x1c
c0019ad9:	c3                   	ret    
c0019ada:	66 90                	xchg   ax,ax

c0019adc <SoundPort::~SoundPort()>:
c0019adc:	83 ec 1c             	sub    esp,0x1c
c0019adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ae3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019ae6:	85 c0                	test   eax,eax
c0019ae8:	74 1a                	je     c0019b04 <SoundPort::~SoundPort()+0x28>
c0019aea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019af1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019af4:	e8 80 df fe ff       	call   c0007a79 <free>
c0019af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019b04:	90                   	nop
c0019b05:	83 c4 1c             	add    esp,0x1c
c0019b08:	c3                   	ret    
c0019b09:	90                   	nop
c0019b0a:	66 90                	xchg   ax,ax

c0019b0c <SoundPort::unpause()>:
c0019b0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b10:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019b14:	c3                   	ret    
c0019b15:	90                   	nop
c0019b16:	66 90                	xchg   ax,ax

c0019b18 <SoundPort::pause()>:
c0019b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b1c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019b20:	c3                   	ret    
c0019b21:	90                   	nop
c0019b22:	66 90                	xchg   ax,ax

c0019b24 <SoundPort::getBufferUsed()>:
c0019b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019b2b:	c3                   	ret    

c0019b2c <SoundPort::getBufferSize()>:
c0019b2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019b33:	c3                   	ret    

c0019b34 <SoundPort::buffer16(short*, int)>:
c0019b34:	55                   	push   ebp
c0019b35:	57                   	push   edi
c0019b36:	56                   	push   esi
c0019b37:	53                   	push   ebx
c0019b38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b3c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019b40:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019b43:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019b46:	74 68                	je     c0019bb0 <SoundPort::buffer16(short*, int)+0x7c>
c0019b48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b4c:	85 c9                	test   ecx,ecx
c0019b4e:	7e 60                	jle    c0019bb0 <SoundPort::buffer16(short*, int)+0x7c>
c0019b50:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019b54:	8d 70 01             	lea    esi,[eax+0x1]
c0019b57:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019b5a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019b5d:	c1 e1 0f             	shl    ecx,0xf
c0019b60:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019b63:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019b66:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019b69:	74 4d                	je     c0019bb8 <SoundPort::buffer16(short*, int)+0x84>
c0019b6b:	31 f6                	xor    esi,esi
c0019b6d:	eb 21                	jmp    c0019b90 <SoundPort::buffer16(short*, int)+0x5c>
c0019b6f:	90                   	nop
c0019b70:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019b75:	8d 79 01             	lea    edi,[ecx+0x1]
c0019b78:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019b7b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019b7e:	c1 e3 0f             	shl    ebx,0xf
c0019b81:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019b84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019b87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019b8a:	74 1c                	je     c0019ba8 <SoundPort::buffer16(short*, int)+0x74>
c0019b8c:	89 c6                	mov    esi,eax
c0019b8e:	66 90                	xchg   ax,ax
c0019b90:	8d 46 01             	lea    eax,[esi+0x1]
c0019b93:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019b97:	75 d7                	jne    c0019b70 <SoundPort::buffer16(short*, int)+0x3c>
c0019b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba0:	5b                   	pop    ebx
c0019ba1:	5e                   	pop    esi
c0019ba2:	5f                   	pop    edi
c0019ba3:	5d                   	pop    ebp
c0019ba4:	c3                   	ret    
c0019ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ba8:	5b                   	pop    ebx
c0019ba9:	8d 46 02             	lea    eax,[esi+0x2]
c0019bac:	5e                   	pop    esi
c0019bad:	5f                   	pop    edi
c0019bae:	5d                   	pop    ebp
c0019baf:	c3                   	ret    
c0019bb0:	5b                   	pop    ebx
c0019bb1:	31 c0                	xor    eax,eax
c0019bb3:	5e                   	pop    esi
c0019bb4:	5f                   	pop    edi
c0019bb5:	5d                   	pop    ebp
c0019bb6:	c3                   	ret    
c0019bb7:	90                   	nop
c0019bb8:	b8 01 00 00 00       	mov    eax,0x1
c0019bbd:	eb e1                	jmp    c0019ba0 <SoundPort::buffer16(short*, int)+0x6c>
c0019bbf:	90                   	nop

c0019bc0 <SoundPort::buffer32(int*, int)>:
c0019bc0:	55                   	push   ebp
c0019bc1:	57                   	push   edi
c0019bc2:	56                   	push   esi
c0019bc3:	53                   	push   ebx
c0019bc4:	83 ec 04             	sub    esp,0x4
c0019bc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019bcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bcf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019bd3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019bd6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bdc:	74 5a                	je     c0019c38 <SoundPort::buffer32(int*, int)+0x78>
c0019bde:	85 c0                	test   eax,eax
c0019be0:	7e 56                	jle    c0019c38 <SoundPort::buffer32(int*, int)+0x78>
c0019be2:	8d 71 01             	lea    esi,[ecx+0x1]
c0019be5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019be8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019beb:	8b 37                	mov    esi,DWORD PTR [edi]
c0019bed:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019bf0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019bf3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019bf6:	74 48                	je     c0019c40 <SoundPort::buffer32(int*, int)+0x80>
c0019bf8:	31 f6                	xor    esi,esi
c0019bfa:	eb 1c                	jmp    c0019c18 <SoundPort::buffer32(int*, int)+0x58>
c0019bfc:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019bff:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019c02:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019c05:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019c08:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019c0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c12:	74 18                	je     c0019c2c <SoundPort::buffer32(int*, int)+0x6c>
c0019c14:	89 de                	mov    esi,ebx
c0019c16:	66 90                	xchg   ax,ax
c0019c18:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019c1b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019c1e:	75 dc                	jne    c0019bfc <SoundPort::buffer32(int*, int)+0x3c>
c0019c20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019c23:	90                   	nop
c0019c24:	5a                   	pop    edx
c0019c25:	5b                   	pop    ebx
c0019c26:	5e                   	pop    esi
c0019c27:	5f                   	pop    edi
c0019c28:	5d                   	pop    ebp
c0019c29:	c3                   	ret    
c0019c2a:	66 90                	xchg   ax,ax
c0019c2c:	5a                   	pop    edx
c0019c2d:	8d 46 02             	lea    eax,[esi+0x2]
c0019c30:	5b                   	pop    ebx
c0019c31:	5e                   	pop    esi
c0019c32:	5f                   	pop    edi
c0019c33:	5d                   	pop    ebp
c0019c34:	c3                   	ret    
c0019c35:	8d 76 00             	lea    esi,[esi+0x0]
c0019c38:	5a                   	pop    edx
c0019c39:	31 c0                	xor    eax,eax
c0019c3b:	5b                   	pop    ebx
c0019c3c:	5e                   	pop    esi
c0019c3d:	5f                   	pop    edi
c0019c3e:	5d                   	pop    ebp
c0019c3f:	c3                   	ret    
c0019c40:	b8 01 00 00 00       	mov    eax,0x1
c0019c45:	eb dd                	jmp    c0019c24 <SoundPort::buffer32(int*, int)+0x64>
c0019c47:	90                   	nop

c0019c48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019c48:	55                   	push   ebp
c0019c49:	57                   	push   edi
c0019c4a:	56                   	push   esi
c0019c4b:	53                   	push   ebx
c0019c4c:	83 ec 1c             	sub    esp,0x1c
c0019c4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019c53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019c57:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019c5b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019c5f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019c65:	39 03                	cmp    DWORD PTR [ebx],eax
c0019c67:	74 0f                	je     c0019c78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c0019c69:	c7 04 24 24 15 02 c0 	mov    DWORD PTR [esp],0xc0021524
c0019c70:	e8 b0 6a ff ff       	call   c0010725 <KePanic(char const*)>
c0019c75:	8d 76 00             	lea    esi,[esi+0x0]
c0019c78:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019c7e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019c81:	74 0d                	je     c0019c90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019c83:	c7 04 24 63 15 02 c0 	mov    DWORD PTR [esp],0xc0021563
c0019c8a:	e8 96 6a ff ff       	call   c0010725 <KePanic(char const*)>
c0019c8f:	90                   	nop
c0019c90:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019c96:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019c99:	74 0d                	je     c0019ca8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019c9b:	c7 04 24 63 15 02 c0 	mov    DWORD PTR [esp],0xc0021563
c0019ca2:	e8 7e 6a ff ff       	call   c0010725 <KePanic(char const*)>
c0019ca7:	90                   	nop
c0019ca8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019cab:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019caf:	85 f6                	test   esi,esi
c0019cb1:	7e 25                	jle    c0019cd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019cb3:	31 c0                	xor    eax,eax
c0019cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019cbb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019cbe:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019cc4:	85 c9                	test   ecx,ecx
c0019cc6:	0f 49 d1             	cmovns edx,ecx
c0019cc9:	c1 fa 0f             	sar    edx,0xf
c0019ccc:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c0019cd0:	40                   	inc    eax
c0019cd1:	39 f0                	cmp    eax,esi
c0019cd3:	75 e3                	jne    c0019cb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cdb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019cde:	29 f0                	sub    eax,esi
c0019ce0:	89 14 24             	mov    DWORD PTR [esp],edx
c0019ce3:	c1 e0 02             	shl    eax,0x2
c0019ce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cea:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cf1:	e8 da 66 fe ff       	call   c00003d0 <memmove>
c0019cf6:	89 f0                	mov    eax,esi
c0019cf8:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019cfb:	83 c4 1c             	add    esp,0x1c
c0019cfe:	5b                   	pop    ebx
c0019cff:	5e                   	pop    esi
c0019d00:	5f                   	pop    edi
c0019d01:	5d                   	pop    ebp
c0019d02:	c3                   	ret    
c0019d03:	90                   	nop

c0019d04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019d04:	55                   	push   ebp
c0019d05:	57                   	push   edi
c0019d06:	56                   	push   esi
c0019d07:	53                   	push   ebx
c0019d08:	83 ec 1c             	sub    esp,0x1c
c0019d0b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d13:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019d17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019d1b:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019d21:	39 03                	cmp    DWORD PTR [ebx],eax
c0019d23:	74 0f                	je     c0019d34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c0019d25:	c7 04 24 44 15 02 c0 	mov    DWORD PTR [esp],0xc0021544
c0019d2c:	e8 f4 69 ff ff       	call   c0010725 <KePanic(char const*)>
c0019d31:	8d 76 00             	lea    esi,[esi+0x0]
c0019d34:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019d3a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019d3d:	74 0d                	je     c0019d4c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019d3f:	c7 04 24 7f 15 02 c0 	mov    DWORD PTR [esp],0xc002157f
c0019d46:	e8 da 69 ff ff       	call   c0010725 <KePanic(char const*)>
c0019d4b:	90                   	nop
c0019d4c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019d52:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019d55:	74 0d                	je     c0019d64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c0019d57:	c7 04 24 7f 15 02 c0 	mov    DWORD PTR [esp],0xc002157f
c0019d5e:	e8 c2 69 ff ff       	call   c0010725 <KePanic(char const*)>
c0019d63:	90                   	nop
c0019d64:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019d67:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019d6b:	85 ff                	test   edi,edi
c0019d6d:	7e 19                	jle    c0019d88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019d6f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019d76:	31 c0                	xor    eax,eax
c0019d78:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d7b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019d7e:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019d81:	83 c0 04             	add    eax,0x4
c0019d84:	39 c1                	cmp    ecx,eax
c0019d86:	75 f0                	jne    c0019d78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019d88:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019d8b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019d8e:	29 f8                	sub    eax,edi
c0019d90:	89 14 24             	mov    DWORD PTR [esp],edx
c0019d93:	c1 e0 02             	shl    eax,0x2
c0019d96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019d9a:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019d9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019da1:	e8 2a 66 fe ff       	call   c00003d0 <memmove>
c0019da6:	89 f8                	mov    eax,edi
c0019da8:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019dab:	83 c4 1c             	add    esp,0x1c
c0019dae:	5b                   	pop    ebx
c0019daf:	5e                   	pop    esi
c0019db0:	5f                   	pop    edi
c0019db1:	5d                   	pop    ebp
c0019db2:	c3                   	ret    
c0019db3:	90                   	nop

c0019db4 <PCI::open(int, int, void*)>:
c0019db4:	83 ec 18             	sub    esp,0x18
c0019db7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019dbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019dbf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019dc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0019dc7:	50                   	push   eax
c0019dc8:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019dcb:	31 c0                	xor    eax,eax
c0019dcd:	83 c4 1c             	add    esp,0x1c
c0019dd0:	c3                   	ret    
c0019dd1:	90                   	nop

c0019dd2 <PCI::close(int, int, void*)>:
c0019dd2:	31 c0                	xor    eax,eax
c0019dd4:	c3                   	ret    
c0019dd5:	90                   	nop

c0019dd6 <PCI::PCI()>:
c0019dd6:	83 ec 1c             	sub    esp,0x1c
c0019dd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ddd:	c7 44 24 04 9b 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002159b
c0019de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019de8:	e8 7f 19 ff ff       	call   c000b76c <Bus::Bus(char const*)>
c0019ded:	ba 44 16 02 c0       	mov    edx,0xc0021644
c0019df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019df6:	89 10                	mov    DWORD PTR [eax],edx
c0019df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dfc:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e0a:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019e0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e13:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e1a:	0f b6 d0             	movzx  edx,al
c0019e1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e21:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e2c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e33:	0f b6 d0             	movzx  edx,al
c0019e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e3a:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e43:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019e4a:	88 c1                	mov    cl,al
c0019e4c:	fe c1                	inc    cl
c0019e4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019e52:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0019e58:	0f b6 d0             	movzx  edx,al
c0019e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e5f:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0019e64:	80 c9 c0             	or     cl,0xc0
c0019e67:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019e6b:	90                   	nop
c0019e6c:	83 c4 1c             	add    esp,0x1c
c0019e6f:	c3                   	ret    

c0019e70 <PCI::readBAR8(unsigned int, int)>:
c0019e70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e78:	f6 c2 01             	test   dl,0x1
c0019e7b:	74 07                	je     c0019e84 <PCI::readBAR8(unsigned int, int)+0x14>
c0019e7d:	83 e2 fc             	and    edx,0xfffffffc
c0019e80:	01 c2                	add    edx,eax
c0019e82:	ec                   	in     al,dx
c0019e83:	c3                   	ret    
c0019e84:	83 e2 f0             	and    edx,0xfffffff0
c0019e87:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019e8a:	c3                   	ret    
c0019e8b:	90                   	nop

c0019e8c <PCI::readBAR16(unsigned int, int)>:
c0019e8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e94:	f6 c2 01             	test   dl,0x1
c0019e97:	74 0b                	je     c0019ea4 <PCI::readBAR16(unsigned int, int)+0x18>
c0019e99:	83 e2 fc             	and    edx,0xfffffffc
c0019e9c:	01 c2                	add    edx,eax
c0019e9e:	66 ed                	in     ax,dx
c0019ea0:	0f b7 c0             	movzx  eax,ax
c0019ea3:	c3                   	ret    
c0019ea4:	83 e2 f0             	and    edx,0xfffffff0
c0019ea7:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c0019eab:	c3                   	ret    

c0019eac <PCI::readBAR32(unsigned int, int)>:
c0019eac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019eb4:	f6 c2 01             	test   dl,0x1
c0019eb7:	74 07                	je     c0019ec0 <PCI::readBAR32(unsigned int, int)+0x14>
c0019eb9:	83 e2 fc             	and    edx,0xfffffffc
c0019ebc:	01 c2                	add    edx,eax
c0019ebe:	ed                   	in     eax,dx
c0019ebf:	c3                   	ret    
c0019ec0:	83 e2 f0             	and    edx,0xfffffff0
c0019ec3:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019ec6:	c3                   	ret    
c0019ec7:	90                   	nop

c0019ec8 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019ec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ecc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ed0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ed4:	f6 c2 01             	test   dl,0x1
c0019ed7:	74 07                	je     c0019ee0 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019ed9:	83 e2 fc             	and    edx,0xfffffffc
c0019edc:	01 ca                	add    edx,ecx
c0019ede:	ee                   	out    dx,al
c0019edf:	c3                   	ret    
c0019ee0:	83 e2 f0             	and    edx,0xfffffff0
c0019ee3:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019ee6:	c3                   	ret    
c0019ee7:	90                   	nop

c0019ee8 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ee8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ef0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0019ef5:	f6 c2 01             	test   dl,0x1
c0019ef8:	74 08                	je     c0019f02 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c0019efa:	83 e2 fc             	and    edx,0xfffffffc
c0019efd:	01 ca                	add    edx,ecx
c0019eff:	66 ef                	out    dx,ax
c0019f01:	c3                   	ret    
c0019f02:	83 e2 f0             	and    edx,0xfffffff0
c0019f05:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019f09:	c3                   	ret    

c0019f0a <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019f0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f16:	f6 c2 01             	test   dl,0x1
c0019f19:	74 07                	je     c0019f22 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019f1b:	83 e2 fc             	and    edx,0xfffffffc
c0019f1e:	01 ca                	add    edx,ecx
c0019f20:	ef                   	out    dx,eax
c0019f21:	c3                   	ret    
c0019f22:	83 e2 f0             	and    edx,0xfffffff0
c0019f25:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019f28:	c3                   	ret    
c0019f29:	90                   	nop

c0019f2a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019f2a:	53                   	push   ebx
c0019f2b:	83 ec 18             	sub    esp,0x18
c0019f2e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019f32:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0019f36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f3a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019f3e:	80 fb 07             	cmp    bl,0x7
c0019f41:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019f45:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019f49:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f4d:	76 10                	jbe    c0019f5f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c0019f4f:	83 ec 0c             	sub    esp,0xc
c0019f52:	68 a3 15 02 c0       	push   0xc00215a3
c0019f57:	e8 c9 67 ff ff       	call   c0010725 <KePanic(char const*)>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c0019f64:	76 10                	jbe    c0019f76 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c0019f66:	83 ec 0c             	sub    esp,0xc
c0019f69:	68 d3 15 02 c0       	push   0xc00215d3
c0019f6e:	e8 b2 67 ff ff       	call   c0010725 <KePanic(char const*)>
c0019f73:	83 c4 10             	add    esp,0x10
c0019f76:	88 d8                	mov    al,bl
c0019f78:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019f7d:	00 c0                	add    al,al
c0019f7f:	0c f0                	or     al,0xf0
c0019f81:	ee                   	out    dx,al
c0019f82:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019f87:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0019f8b:	ee                   	out    dx,al
c0019f8c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019f91:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0019f96:	83 c4 18             	add    esp,0x18
c0019f99:	5b                   	pop    ebx
c0019f9a:	c1 e0 08             	shl    eax,0x8
c0019f9d:	83 e2 fc             	and    edx,0xfffffffc
c0019fa0:	09 d0                	or     eax,edx
c0019fa2:	0d 00 c0 ff ff       	or     eax,0xffffc000
c0019fa7:	c3                   	ret    

c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019fa8:	57                   	push   edi
c0019fa9:	56                   	push   esi
c0019faa:	53                   	push   ebx
c0019fab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019faf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0019fb4:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019fb9:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c0019fbe:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019fc4:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c0019fc8:	83 ff 01             	cmp    edi,0x1
c0019fcb:	75 3f                	jne    c001a00c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c0019fcd:	c1 e0 10             	shl    eax,0x10
c0019fd0:	c1 e1 08             	shl    ecx,0x8
c0019fd3:	89 c7                	mov    edi,eax
c0019fd5:	c1 e2 0b             	shl    edx,0xb
c0019fd8:	88 d8                	mov    al,bl
c0019fda:	24 fc                	and    al,0xfc
c0019fdc:	0f b6 f0             	movzx  esi,al
c0019fdf:	89 f8                	mov    eax,edi
c0019fe1:	09 f0                	or     eax,esi
c0019fe3:	09 c8                	or     eax,ecx
c0019fe5:	09 d0                	or     eax,edx
c0019fe7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019fec:	0d 00 00 00 80       	or     eax,0x80000000
c0019ff1:	ef                   	out    dx,eax
c0019ff2:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019ff7:	ed                   	in     eax,dx
c0019ff8:	80 e3 02             	and    bl,0x2
c0019ffb:	0f b6 db             	movzx  ebx,bl
c0019ffe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a005:	d3 e8                	shr    eax,cl
c001a007:	0f b7 c0             	movzx  eax,ax
c001a00a:	eb 41                	jmp    c001a04d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a00c:	83 ff 02             	cmp    edi,0x2
c001a00f:	75 2a                	jne    c001a03b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a011:	83 ec 0c             	sub    esp,0xc
c001a014:	0f b6 fb             	movzx  edi,bl
c001a017:	57                   	push   edi
c001a018:	51                   	push   ecx
c001a019:	52                   	push   edx
c001a01a:	50                   	push   eax
c001a01b:	56                   	push   esi
c001a01c:	e8 09 ff ff ff       	call   c0019f2a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a021:	89 c2                	mov    edx,eax
c001a023:	ed                   	in     eax,dx
c001a024:	80 e3 02             	and    bl,0x2
c001a027:	83 c4 20             	add    esp,0x20
c001a02a:	0f b6 db             	movzx  ebx,bl
c001a02d:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a034:	d3 e8                	shr    eax,cl
c001a036:	0f b7 c0             	movzx  eax,ax
c001a039:	eb 12                	jmp    c001a04d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a03b:	83 ec 0c             	sub    esp,0xc
c001a03e:	68 03 16 02 c0       	push   0xc0021603
c001a043:	e8 dd 66 ff ff       	call   c0010725 <KePanic(char const*)>
c001a048:	83 c4 10             	add    esp,0x10
c001a04b:	31 c0                	xor    eax,eax
c001a04d:	5b                   	pop    ebx
c001a04e:	5e                   	pop    esi
c001a04f:	5f                   	pop    edi
c001a050:	c3                   	ret    
c001a051:	90                   	nop

c001a052 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a052:	83 ec 18             	sub    esp,0x18
c001a055:	6a 00                	push   0x0
c001a057:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a05c:	50                   	push   eax
c001a05d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a062:	50                   	push   eax
c001a063:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a068:	50                   	push   eax
c001a069:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a06d:	e8 36 ff ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a072:	83 c4 2c             	add    esp,0x2c
c001a075:	c3                   	ret    

c001a076 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a076:	83 ec 18             	sub    esp,0x18
c001a079:	6a 0e                	push   0xe
c001a07b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a080:	50                   	push   eax
c001a081:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a086:	50                   	push   eax
c001a087:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a08c:	50                   	push   eax
c001a08d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a091:	e8 12 ff ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a096:	83 c4 2c             	add    esp,0x2c
c001a099:	0f b6 c0             	movzx  eax,al
c001a09c:	c3                   	ret    
c001a09d:	90                   	nop

c001a09e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a09e:	55                   	push   ebp
c001a09f:	57                   	push   edi
c001a0a0:	56                   	push   esi
c001a0a1:	53                   	push   ebx
c001a0a2:	83 ec 18             	sub    esp,0x18
c001a0a5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a0aa:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a0af:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a0b4:	6a 0a                	push   0xa
c001a0b6:	56                   	push   esi
c001a0b7:	55                   	push   ebp
c001a0b8:	57                   	push   edi
c001a0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0bd:	e8 e6 fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0c2:	83 c4 14             	add    esp,0x14
c001a0c5:	6a 0a                	push   0xa
c001a0c7:	56                   	push   esi
c001a0c8:	55                   	push   ebp
c001a0c9:	57                   	push   edi
c001a0ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a0ce:	0f b7 d8             	movzx  ebx,ax
c001a0d1:	0f b6 db             	movzx  ebx,bl
c001a0d4:	e8 cf fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a0d9:	83 c4 2c             	add    esp,0x2c
c001a0dc:	25 00 ff 00 00       	and    eax,0xff00
c001a0e1:	09 d8                	or     eax,ebx
c001a0e3:	5b                   	pop    ebx
c001a0e4:	5e                   	pop    esi
c001a0e5:	5f                   	pop    edi
c001a0e6:	5d                   	pop    ebp
c001a0e7:	c3                   	ret    

c001a0e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a0e8:	83 ec 18             	sub    esp,0x18
c001a0eb:	6a 08                	push   0x8
c001a0ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0f2:	50                   	push   eax
c001a0f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0f8:	50                   	push   eax
c001a0f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a0fe:	50                   	push   eax
c001a0ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a103:	e8 a0 fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a108:	83 c4 2c             	add    esp,0x2c
c001a10b:	0f b6 c4             	movzx  eax,ah
c001a10e:	c3                   	ret    
c001a10f:	90                   	nop

c001a110 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a110:	83 ec 18             	sub    esp,0x18
c001a113:	6a 08                	push   0x8
c001a115:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a11a:	50                   	push   eax
c001a11b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a120:	50                   	push   eax
c001a121:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a126:	50                   	push   eax
c001a127:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a12b:	e8 78 fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a130:	83 c4 2c             	add    esp,0x2c
c001a133:	0f b7 c0             	movzx  eax,ax
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a138:	83 ec 18             	sub    esp,0x18
c001a13b:	6a 3c                	push   0x3c
c001a13d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a142:	50                   	push   eax
c001a143:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a148:	50                   	push   eax
c001a149:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a14e:	50                   	push   eax
c001a14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a153:	e8 50 fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a158:	83 c4 2c             	add    esp,0x2c
c001a15b:	0f b7 c0             	movzx  eax,ax
c001a15e:	c3                   	ret    
c001a15f:	90                   	nop

c001a160 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a160:	83 ec 18             	sub    esp,0x18
c001a163:	6a 18                	push   0x18
c001a165:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a16a:	50                   	push   eax
c001a16b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a170:	50                   	push   eax
c001a171:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a176:	50                   	push   eax
c001a177:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a17b:	e8 28 fe ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a180:	83 c4 2c             	add    esp,0x2c
c001a183:	0f b6 c4             	movzx  eax,ah
c001a186:	c3                   	ret    
c001a187:	90                   	nop

c001a188 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a188:	55                   	push   ebp
c001a189:	57                   	push   edi
c001a18a:	56                   	push   esi
c001a18b:	53                   	push   ebx
c001a18c:	83 ec 28             	sub    esp,0x28
c001a18f:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a193:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a198:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a19d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a1a2:	c0 e3 02             	shl    bl,0x2
c001a1a5:	88 d8                	mov    al,bl
c001a1a7:	80 c3 10             	add    bl,0x10
c001a1aa:	04 12                	add    al,0x12
c001a1ac:	0f b6 db             	movzx  ebx,bl
c001a1af:	0f b6 c0             	movzx  eax,al
c001a1b2:	50                   	push   eax
c001a1b3:	56                   	push   esi
c001a1b4:	57                   	push   edi
c001a1b5:	55                   	push   ebp
c001a1b6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a1ba:	e8 e9 fd ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1bf:	0f b7 c0             	movzx  eax,ax
c001a1c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a1c6:	83 c4 14             	add    esp,0x14
c001a1c9:	53                   	push   ebx
c001a1ca:	56                   	push   esi
c001a1cb:	57                   	push   edi
c001a1cc:	55                   	push   ebp
c001a1cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a1d1:	e8 d2 fd ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1d6:	0f b7 d0             	movzx  edx,ax
c001a1d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a1dd:	83 c4 3c             	add    esp,0x3c
c001a1e0:	5b                   	pop    ebx
c001a1e1:	5e                   	pop    esi
c001a1e2:	c1 e0 10             	shl    eax,0x10
c001a1e5:	09 d0                	or     eax,edx
c001a1e7:	5f                   	pop    edi
c001a1e8:	5d                   	pop    ebp
c001a1e9:	c3                   	ret    

c001a1ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a1ea:	55                   	push   ebp
c001a1eb:	57                   	push   edi
c001a1ec:	56                   	push   esi
c001a1ed:	53                   	push   ebx
c001a1ee:	83 ec 0c             	sub    esp,0xc
c001a1f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a1f5:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a1fa:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a1ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a204:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a20a:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a20f:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a214:	83 fd 01             	cmp    ebp,0x1
c001a217:	75 50                	jne    c001a269 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a219:	c1 e0 08             	shl    eax,0x8
c001a21c:	89 cf                	mov    edi,ecx
c001a21e:	c1 e7 10             	shl    edi,0x10
c001a221:	88 d9                	mov    cl,bl
c001a223:	c1 e2 0b             	shl    edx,0xb
c001a226:	80 e1 fc             	and    cl,0xfc
c001a229:	0f b6 c9             	movzx  ecx,cl
c001a22c:	09 f9                	or     ecx,edi
c001a22e:	09 c1                	or     ecx,eax
c001a230:	09 d1                	or     ecx,edx
c001a232:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a237:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a23d:	89 c8                	mov    eax,ecx
c001a23f:	ef                   	out    dx,eax
c001a240:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a245:	ed                   	in     eax,dx
c001a246:	80 e3 02             	and    bl,0x2
c001a249:	74 08                	je     c001a253 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a24b:	c1 e6 10             	shl    esi,0x10
c001a24e:	0f b7 c0             	movzx  eax,ax
c001a251:	eb 03                	jmp    c001a256 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a253:	66 31 c0             	xor    ax,ax
c001a256:	09 c6                	or     esi,eax
c001a258:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a25d:	89 c8                	mov    eax,ecx
c001a25f:	ef                   	out    dx,eax
c001a260:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a265:	89 f0                	mov    eax,esi
c001a267:	eb 2d                	jmp    c001a296 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a269:	83 fd 02             	cmp    ebp,0x2
c001a26c:	75 31                	jne    c001a29f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a26e:	83 ec 0c             	sub    esp,0xc
c001a271:	53                   	push   ebx
c001a272:	50                   	push   eax
c001a273:	52                   	push   edx
c001a274:	51                   	push   ecx
c001a275:	57                   	push   edi
c001a276:	e8 af fc ff ff       	call   c0019f2a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a27b:	0f b7 c8             	movzx  ecx,ax
c001a27e:	89 ca                	mov    edx,ecx
c001a280:	ed                   	in     eax,dx
c001a281:	83 c4 20             	add    esp,0x20
c001a284:	f6 c1 02             	test   cl,0x2
c001a287:	74 08                	je     c001a291 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a289:	c1 e6 10             	shl    esi,0x10
c001a28c:	0f b7 c0             	movzx  eax,ax
c001a28f:	eb 03                	jmp    c001a294 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a291:	66 31 c0             	xor    ax,ax
c001a294:	09 f0                	or     eax,esi
c001a296:	ef                   	out    dx,eax
c001a297:	83 c4 0c             	add    esp,0xc
c001a29a:	5b                   	pop    ebx
c001a29b:	5e                   	pop    esi
c001a29c:	5f                   	pop    edi
c001a29d:	5d                   	pop    ebp
c001a29e:	c3                   	ret    
c001a29f:	c7 44 24 20 03 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021603
c001a2a7:	83 c4 0c             	add    esp,0xc
c001a2aa:	5b                   	pop    ebx
c001a2ab:	5e                   	pop    esi
c001a2ac:	5f                   	pop    edi
c001a2ad:	5d                   	pop    ebp
c001a2ae:	e9 72 64 ff ff       	jmp    c0010725 <KePanic(char const*)>
c001a2b3:	90                   	nop

c001a2b4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a2b4:	55                   	push   ebp
c001a2b5:	57                   	push   edi
c001a2b6:	56                   	push   esi
c001a2b7:	53                   	push   ebx
c001a2b8:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a2be:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a2c5:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a2cc:	0f 85 bd 00 00 00    	jne    c001a38f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a2d2:	83 ec 0c             	sub    esp,0xc
c001a2d5:	68 14 01 00 00       	push   0x114
c001a2da:	e8 87 d7 fe ff       	call   c0007a66 <malloc>
c001a2df:	83 c4 0c             	add    esp,0xc
c001a2e2:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a2e8:	68 09 16 02 c0       	push   0xc0021609
c001a2ed:	50                   	push   eax
c001a2ee:	89 c3                	mov    ebx,eax
c001a2f0:	e8 63 0c ff ff       	call   c000af58 <File::File(char const*, Process*)>
c001a2f5:	83 c4 10             	add    esp,0x10
c001a2f8:	85 db                	test   ebx,ebx
c001a2fa:	0f 84 4c 02 00 00    	je     c001a54c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a300:	56                   	push   esi
c001a301:	56                   	push   esi
c001a302:	6a 01                	push   0x1
c001a304:	53                   	push   ebx
c001a305:	e8 0c 0d ff ff       	call   c000b016 <File::open(FileOpenMode)>
c001a30a:	83 c4 10             	add    esp,0x10
c001a30d:	85 c0                	test   eax,eax
c001a30f:	0f 85 37 02 00 00    	jne    c001a54c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a315:	52                   	push   edx
c001a316:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001a31a:	50                   	push   eax
c001a31b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a31f:	50                   	push   eax
c001a320:	53                   	push   ebx
c001a321:	e8 96 0f ff ff       	call   c000b2bc <File::stat(unsigned long long*, bool*)>
c001a326:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a32a:	40                   	inc    eax
c001a32b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a32e:	e8 33 d7 fe ff       	call   c0007a66 <malloc>
c001a333:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a337:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a33b:	59                   	pop    ecx
c001a33c:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a341:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a343:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a347:	51                   	push   ecx
c001a348:	50                   	push   eax
c001a349:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a34d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a351:	53                   	push   ebx
c001a352:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a355:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001a359:	83 c4 20             	add    esp,0x20
c001a35c:	89 c8                	mov    eax,ecx
c001a35e:	99                   	cdq    
c001a35f:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001a363:	0f 85 e3 01 00 00    	jne    c001a54c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a369:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001a36d:	0f 85 d9 01 00 00    	jne    c001a54c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a373:	83 ec 0c             	sub    esp,0xc
c001a376:	53                   	push   ebx
c001a377:	e8 f8 0c ff ff       	call   c000b074 <File::close()>
c001a37c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a380:	83 c4 10             	add    esp,0x10
c001a383:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a38a:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a38f:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001a397:	31 db                	xor    ebx,ebx
c001a399:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3a1:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001a3a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3af:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001a3b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a3b9:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001a3c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3c5:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001a3cc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a3d0:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001a3d7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a3db:	39 d9                	cmp    ecx,ebx
c001a3dd:	0f 8e 69 01 00 00    	jle    c001a54c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a3e3:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a3e6:	d4 40                	aam    0x40
c001a3e8:	d5 39                	aad    0x39
c001a3ea:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a3ee:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001a3f2:	d4 40                	aam    0x40
c001a3f4:	d5 39                	aad    0x39
c001a3f6:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a3fa:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001a3fe:	d4 40                	aam    0x40
c001a400:	d5 39                	aad    0x39
c001a402:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a406:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001a40a:	d4 40                	aam    0x40
c001a40c:	d5 39                	aad    0x39
c001a40e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a412:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001a416:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001a41a:	3c 56                	cmp    al,0x56
c001a41c:	74 46                	je     c001a464 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001a41e:	d4 40                	aam    0x40
c001a420:	d5 39                	aad    0x39
c001a422:	2c 30                	sub    al,0x30
c001a424:	0f b6 d0             	movzx  edx,al
c001a427:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001a42b:	c1 e2 04             	shl    edx,0x4
c001a42e:	d4 40                	aam    0x40
c001a430:	d5 39                	aad    0x39
c001a432:	2c 30                	sub    al,0x30
c001a434:	0f b6 c0             	movzx  eax,al
c001a437:	09 c2                	or     edx,eax
c001a439:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001a43d:	c1 e2 04             	shl    edx,0x4
c001a440:	d4 40                	aam    0x40
c001a442:	d5 39                	aad    0x39
c001a444:	2c 30                	sub    al,0x30
c001a446:	0f b6 c0             	movzx  eax,al
c001a449:	09 c2                	or     edx,eax
c001a44b:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001a44f:	c1 e2 04             	shl    edx,0x4
c001a452:	0f b7 d2             	movzx  edx,dx
c001a455:	d4 40                	aam    0x40
c001a457:	d5 39                	aad    0x39
c001a459:	2c 30                	sub    al,0x30
c001a45b:	0f b6 c0             	movzx  eax,al
c001a45e:	09 d0                	or     eax,edx
c001a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a464:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001a468:	80 fa 58             	cmp    dl,0x58
c001a46b:	74 48                	je     c001a4b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001a46d:	88 d0                	mov    al,dl
c001a46f:	d4 40                	aam    0x40
c001a471:	d5 39                	aad    0x39
c001a473:	2c 30                	sub    al,0x30
c001a475:	0f b6 e8             	movzx  ebp,al
c001a478:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001a47c:	c1 e5 04             	shl    ebp,0x4
c001a47f:	d4 40                	aam    0x40
c001a481:	d5 39                	aad    0x39
c001a483:	2c 30                	sub    al,0x30
c001a485:	0f b6 c0             	movzx  eax,al
c001a488:	09 c5                	or     ebp,eax
c001a48a:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001a48e:	c1 e5 04             	shl    ebp,0x4
c001a491:	d4 40                	aam    0x40
c001a493:	d5 39                	aad    0x39
c001a495:	2c 30                	sub    al,0x30
c001a497:	0f b6 c0             	movzx  eax,al
c001a49a:	09 c5                	or     ebp,eax
c001a49c:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001a4a0:	c1 e5 04             	shl    ebp,0x4
c001a4a3:	0f b7 ed             	movzx  ebp,bp
c001a4a6:	d4 40                	aam    0x40
c001a4a8:	d5 39                	aad    0x39
c001a4aa:	2c 30                	sub    al,0x30
c001a4ac:	0f b6 c0             	movzx  eax,al
c001a4af:	09 e8                	or     eax,ebp
c001a4b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b5:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001a4b9:	83 c3 10             	add    ebx,0x10
c001a4bc:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a4bf:	3c 0a                	cmp    al,0xa
c001a4c1:	74 07                	je     c001a4ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001a4c3:	45                   	inc    ebp
c001a4c4:	39 d9                	cmp    ecx,ebx
c001a4c6:	75 15                	jne    c001a4dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001a4c8:	89 cb                	mov    ebx,ecx
c001a4ca:	3c 0a                	cmp    al,0xa
c001a4cc:	0f 94 c0             	sete   al
c001a4cf:	0f b6 c0             	movzx  eax,al
c001a4d2:	01 c3                	add    ebx,eax
c001a4d4:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001a4d9:	75 0c                	jne    c001a4e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001a4db:	eb 18                	jmp    c001a4f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a4dd:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a4e0:	43                   	inc    ebx
c001a4e1:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a4e5:	eb d5                	jmp    c001a4bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a4e7:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a4eb:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001a4ef:	0f 85 e6 fe ff ff    	jne    c001a3db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a4f5:	80 fa 58             	cmp    dl,0x58
c001a4f8:	74 0e                	je     c001a508 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001a4fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a4fe:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001a502:	0f 85 d3 fe ff ff    	jne    c001a3db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a508:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001a50c:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001a510:	c0 e2 04             	shl    dl,0x4
c001a513:	2c 30                	sub    al,0x30
c001a515:	08 d0                	or     al,dl
c001a517:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001a51b:	0f 85 ba fe ff ff    	jne    c001a3db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a521:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001a525:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a529:	c0 e2 04             	shl    dl,0x4
c001a52c:	2c 30                	sub    al,0x30
c001a52e:	08 d0                	or     al,dl
c001a530:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001a534:	0f 85 a1 fe ff ff    	jne    c001a3db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a53a:	50                   	push   eax
c001a53b:	50                   	push   eax
c001a53c:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a540:	50                   	push   eax
c001a541:	57                   	push   edi
c001a542:	e8 49 61 fe ff       	call   c0000690 <strcpy>
c001a547:	83 c4 10             	add    esp,0x10
c001a54a:	eb 05                	jmp    c001a551 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001a54c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a54f:	31 ff                	xor    edi,edi
c001a551:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a557:	89 f8                	mov    eax,edi
c001a559:	5b                   	pop    ebx
c001a55a:	5e                   	pop    esi
c001a55b:	5f                   	pop    edi
c001a55c:	5d                   	pop    ebp
c001a55d:	c3                   	ret    

c001a55e <PCI::checkBus(unsigned char)>:
c001a55e:	56                   	push   esi
c001a55f:	53                   	push   ebx
c001a560:	31 db                	xor    ebx,ebx
c001a562:	51                   	push   ecx
c001a563:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a568:	52                   	push   edx
c001a569:	53                   	push   ebx
c001a56a:	43                   	inc    ebx
c001a56b:	56                   	push   esi
c001a56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a570:	e8 f1 02 00 00       	call   c001a866 <PCI::checkDevice(unsigned char, unsigned char)>
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	83 fb 20             	cmp    ebx,0x20
c001a57b:	75 eb                	jne    c001a568 <PCI::checkBus(unsigned char)+0xa>
c001a57d:	58                   	pop    eax
c001a57e:	5b                   	pop    ebx
c001a57f:	5e                   	pop    esi
c001a580:	c3                   	ret    
c001a581:	90                   	nop

c001a582 <PCI::foundDevice(PCIDeviceInfo)>:
c001a582:	55                   	push   ebp
c001a583:	57                   	push   edi
c001a584:	56                   	push   esi
c001a585:	53                   	push   ebx
c001a586:	83 ec 1c             	sub    esp,0x1c
c001a589:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a58e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a592:	3d ff ff 00 00       	cmp    eax,0xffff
c001a597:	0f 84 54 01 00 00    	je     c001a6f1 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a59d:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001a5a2:	81 ff 06 04 00 00    	cmp    edi,0x406
c001a5a8:	75 2c                	jne    c001a5d6 <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001a5aa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a5af:	50                   	push   eax
c001a5b0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a5b5:	50                   	push   eax
c001a5b6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a5bb:	50                   	push   eax
c001a5bc:	56                   	push   esi
c001a5bd:	e8 9e fb ff ff       	call   c001a160 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a5c2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a5c6:	0f b6 c0             	movzx  eax,al
c001a5c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a5cd:	83 c4 2c             	add    esp,0x2c
c001a5d0:	5b                   	pop    ebx
c001a5d1:	5e                   	pop    esi
c001a5d2:	5f                   	pop    edi
c001a5d3:	5d                   	pop    ebp
c001a5d4:	eb 88                	jmp    c001a55e <PCI::checkBus(unsigned char)>
c001a5d6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a5da:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a5e0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a5e4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a5e8:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	74 33                	je     c001a623 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a5f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a5f3:	85 d2                	test   edx,edx
c001a5f5:	74 28                	je     c001a61f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a5f7:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001a5fd:	31 e9                	xor    ecx,ebp
c001a5ff:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001a605:	75 18                	jne    c001a61f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a607:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001a60d:	75 10                	jne    c001a61f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a60f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a613:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001a619:	0f 84 d2 00 00 00    	je     c001a6f1 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a61f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a621:	eb c9                	jmp    c001a5ec <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001a623:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a627:	81 ff 01 06 00 00    	cmp    edi,0x601
c001a62d:	75 19                	jne    c001a648 <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001a62f:	83 ec 0c             	sub    esp,0xc
c001a632:	68 64 01 00 00       	push   0x164
c001a637:	e8 2a d4 fe ff       	call   c0007a66 <malloc>
c001a63c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a63f:	89 c5                	mov    ebp,eax
c001a641:	e8 36 0e 00 00       	call   c001b47c <SATABus::SATABus()>
c001a646:	eb 1f                	jmp    c001a667 <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001a648:	81 ff 01 01 00 00    	cmp    edi,0x101
c001a64e:	75 60                	jne    c001a6b0 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001a650:	83 ec 0c             	sub    esp,0xc
c001a653:	68 70 02 00 00       	push   0x270
c001a658:	e8 09 d4 fe ff       	call   c0007a66 <malloc>
c001a65d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a660:	89 c5                	mov    ebp,eax
c001a662:	e8 cf 02 00 00       	call   c001a936 <IDE::IDE()>
c001a667:	58                   	pop    eax
c001a668:	5a                   	pop    edx
c001a669:	55                   	push   ebp
c001a66a:	56                   	push   esi
c001a66b:	e8 92 17 ff ff       	call   c000be02 <Device::addChild(Device*)>
c001a670:	83 ec 1c             	sub    esp,0x1c
c001a673:	b9 09 00 00 00       	mov    ecx,0x9
c001a678:	fc                   	cld    
c001a679:	89 e7                	mov    edi,esp
c001a67b:	89 de                	mov    esi,ebx
c001a67d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a67f:	55                   	push   ebp
c001a680:	e8 c5 16 ff ff       	call   c000bd4a <Device::preOpenPCI(PCIDeviceInfo)>
c001a685:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a688:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a68c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a694:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a69c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a6a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a6a7:	83 c4 4c             	add    esp,0x4c
c001a6aa:	5b                   	pop    ebx
c001a6ab:	5e                   	pop    esi
c001a6ac:	5f                   	pop    edi
c001a6ad:	5d                   	pop    ebp
c001a6ae:	ff e0                	jmp    eax
c001a6b0:	83 ec 0c             	sub    esp,0xc
c001a6b3:	68 58 01 00 00       	push   0x158
c001a6b8:	e8 a9 d3 fe ff       	call   c0007a66 <malloc>
c001a6bd:	89 c5                	mov    ebp,eax
c001a6bf:	58                   	pop    eax
c001a6c0:	5a                   	pop    edx
c001a6c1:	68 22 16 02 c0       	push   0xc0021622
c001a6c6:	55                   	push   ebp
c001a6c7:	e8 d2 19 ff ff       	call   c000c09e <DriverlessDevice::DriverlessDevice(char const*)>
c001a6cc:	59                   	pop    ecx
c001a6cd:	5f                   	pop    edi
c001a6ce:	55                   	push   ebp
c001a6cf:	56                   	push   esi
c001a6d0:	e8 2d 17 ff ff       	call   c000be02 <Device::addChild(Device*)>
c001a6d5:	b9 09 00 00 00       	mov    ecx,0x9
c001a6da:	fc                   	cld    
c001a6db:	89 df                	mov    edi,ebx
c001a6dd:	89 de                	mov    esi,ebx
c001a6df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a6e1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a6e5:	83 c4 2c             	add    esp,0x2c
c001a6e8:	5b                   	pop    ebx
c001a6e9:	5e                   	pop    esi
c001a6ea:	5f                   	pop    edi
c001a6eb:	5d                   	pop    ebp
c001a6ec:	e9 59 16 ff ff       	jmp    c000bd4a <Device::preOpenPCI(PCIDeviceInfo)>
c001a6f1:	83 c4 1c             	add    esp,0x1c
c001a6f4:	5b                   	pop    ebx
c001a6f5:	5e                   	pop    esi
c001a6f6:	5f                   	pop    edi
c001a6f7:	5d                   	pop    ebp
c001a6f8:	c3                   	ret    
c001a6f9:	90                   	nop

c001a6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a6fa:	55                   	push   ebp
c001a6fb:	57                   	push   edi
c001a6fc:	56                   	push   esi
c001a6fd:	53                   	push   ebx
c001a6fe:	83 ec 58             	sub    esp,0x58
c001a701:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001a705:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001a70a:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001a70e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001a712:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001a716:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001a71b:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001a71f:	89 f0                	mov    eax,esi
c001a721:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a725:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001a72a:	6a 0c                	push   0xc
c001a72c:	56                   	push   esi
c001a72d:	53                   	push   ebx
c001a72e:	57                   	push   edi
c001a72f:	55                   	push   ebp
c001a730:	e8 73 f8 ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a735:	83 c4 20             	add    esp,0x20
c001a738:	56                   	push   esi
c001a739:	53                   	push   ebx
c001a73a:	57                   	push   edi
c001a73b:	55                   	push   ebp
c001a73c:	e8 5d f9 ff ff       	call   c001a09e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a741:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a746:	56                   	push   esi
c001a747:	53                   	push   ebx
c001a748:	57                   	push   edi
c001a749:	55                   	push   ebp
c001a74a:	e8 e9 f9 ff ff       	call   c001a138 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a74f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a753:	83 c4 14             	add    esp,0x14
c001a756:	6a 3c                	push   0x3c
c001a758:	56                   	push   esi
c001a759:	53                   	push   ebx
c001a75a:	57                   	push   edi
c001a75b:	55                   	push   ebp
c001a75c:	e8 47 f8 ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a761:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a767:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a76d:	0f b6 c4             	movzx  eax,ah
c001a770:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a774:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a778:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001a77c:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001a782:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a786:	83 c4 20             	add    esp,0x20
c001a789:	85 c0                	test   eax,eax
c001a78b:	74 2f                	je     c001a7bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a78d:	31 d2                	xor    edx,edx
c001a78f:	39 14 24             	cmp    DWORD PTR [esp],edx
c001a792:	7e 28                	jle    c001a7bc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a794:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a79c:	39 c3                	cmp    ebx,eax
c001a79e:	75 19                	jne    c001a7b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a7a0:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a7a8:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001a7ac:	75 0b                	jne    c001a7b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a7ae:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a7b5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a7b9:	42                   	inc    edx
c001a7ba:	eb d3                	jmp    c001a78f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001a7bc:	31 d2                	xor    edx,edx
c001a7be:	83 ec 0c             	sub    esp,0xc
c001a7c1:	56                   	push   esi
c001a7c2:	53                   	push   ebx
c001a7c3:	57                   	push   edi
c001a7c4:	52                   	push   edx
c001a7c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a7c9:	55                   	push   ebp
c001a7ca:	e8 b9 f9 ff ff       	call   c001a188 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a7cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a7d3:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001a7d7:	42                   	inc    edx
c001a7d8:	83 c4 20             	add    esp,0x20
c001a7db:	83 fa 06             	cmp    edx,0x6
c001a7de:	75 de                	jne    c001a7be <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001a7e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a7e4:	83 ec 0c             	sub    esp,0xc
c001a7e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7eb:	c1 e2 08             	shl    edx,0x8
c001a7ee:	0f b6 c4             	movzx  eax,ah
c001a7f1:	09 d0                	or     eax,edx
c001a7f3:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001a7f8:	6a 02                	push   0x2
c001a7fa:	56                   	push   esi
c001a7fb:	53                   	push   ebx
c001a7fc:	57                   	push   edi
c001a7fd:	55                   	push   ebp
c001a7fe:	e8 a5 f7 ff ff       	call   c0019fa8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a803:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001a808:	83 c4 20             	add    esp,0x20
c001a80b:	56                   	push   esi
c001a80c:	53                   	push   ebx
c001a80d:	57                   	push   edi
c001a80e:	55                   	push   ebp
c001a80f:	e8 d4 f8 ff ff       	call   c001a0e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a814:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a818:	56                   	push   esi
c001a819:	53                   	push   ebx
c001a81a:	57                   	push   edi
c001a81b:	55                   	push   ebp
c001a81c:	e8 31 f8 ff ff       	call   c001a052 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a821:	b9 09 00 00 00       	mov    ecx,0x9
c001a826:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001a82b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a82f:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001a833:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001a837:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001a83b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001a83f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001a843:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a847:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001a84b:	83 ec 0c             	sub    esp,0xc
c001a84e:	fc                   	cld    
c001a84f:	8d 74 24 48          	lea    esi,[esp+0x48]
c001a853:	89 e7                	mov    edi,esp
c001a855:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a857:	55                   	push   ebp
c001a858:	e8 25 fd ff ff       	call   c001a582 <PCI::foundDevice(PCIDeviceInfo)>
c001a85d:	83 c4 7c             	add    esp,0x7c
c001a860:	5b                   	pop    ebx
c001a861:	5e                   	pop    esi
c001a862:	5f                   	pop    edi
c001a863:	5d                   	pop    ebp
c001a864:	c3                   	ret    
c001a865:	90                   	nop

c001a866 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a866:	55                   	push   ebp
c001a867:	57                   	push   edi
c001a868:	56                   	push   esi
c001a869:	53                   	push   ebx
c001a86a:	83 ec 0c             	sub    esp,0xc
c001a86d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a872:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a877:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a87b:	6a 00                	push   0x0
c001a87d:	56                   	push   esi
c001a87e:	57                   	push   edi
c001a87f:	55                   	push   ebp
c001a880:	e8 cd f7 ff ff       	call   c001a052 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a885:	6a 00                	push   0x0
c001a887:	56                   	push   esi
c001a888:	57                   	push   edi
c001a889:	55                   	push   ebp
c001a88a:	e8 6b fe ff ff       	call   c001a6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a88f:	83 c4 20             	add    esp,0x20
c001a892:	6a 00                	push   0x0
c001a894:	56                   	push   esi
c001a895:	57                   	push   edi
c001a896:	55                   	push   ebp
c001a897:	e8 da f7 ff ff       	call   c001a076 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a89c:	83 c4 10             	add    esp,0x10
c001a89f:	84 c0                	test   al,al
c001a8a1:	79 2d                	jns    c001a8d0 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001a8a3:	bb 01 00 00 00       	mov    ebx,0x1
c001a8a8:	53                   	push   ebx
c001a8a9:	56                   	push   esi
c001a8aa:	57                   	push   edi
c001a8ab:	55                   	push   ebp
c001a8ac:	e8 a1 f7 ff ff       	call   c001a052 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a8b1:	83 c4 10             	add    esp,0x10
c001a8b4:	0f b7 c0             	movzx  eax,ax
c001a8b7:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8bc:	74 0c                	je     c001a8ca <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a8be:	53                   	push   ebx
c001a8bf:	56                   	push   esi
c001a8c0:	57                   	push   edi
c001a8c1:	55                   	push   ebp
c001a8c2:	e8 33 fe ff ff       	call   c001a6fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a8c7:	83 c4 10             	add    esp,0x10
c001a8ca:	43                   	inc    ebx
c001a8cb:	83 fb 08             	cmp    ebx,0x8
c001a8ce:	75 d8                	jne    c001a8a8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a8d0:	83 c4 0c             	add    esp,0xc
c001a8d3:	5b                   	pop    ebx
c001a8d4:	5e                   	pop    esi
c001a8d5:	5f                   	pop    edi
c001a8d6:	5d                   	pop    ebp
c001a8d7:	c3                   	ret    

c001a8d8 <PCI::detect()>:
c001a8d8:	56                   	push   esi
c001a8d9:	53                   	push   ebx
c001a8da:	53                   	push   ebx
c001a8db:	31 db                	xor    ebx,ebx
c001a8dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a8e1:	6a 00                	push   0x0
c001a8e3:	6a 00                	push   0x0
c001a8e5:	6a 00                	push   0x0
c001a8e7:	56                   	push   esi
c001a8e8:	e8 89 f7 ff ff       	call   c001a076 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a8ed:	83 c4 10             	add    esp,0x10
c001a8f0:	a8 80                	test   al,0x80
c001a8f2:	75 21                	jne    c001a915 <PCI::detect()+0x3d>
c001a8f4:	51                   	push   ecx
c001a8f5:	51                   	push   ecx
c001a8f6:	6a 00                	push   0x0
c001a8f8:	56                   	push   esi
c001a8f9:	e8 60 fc ff ff       	call   c001a55e <PCI::checkBus(unsigned char)>
c001a8fe:	83 c4 10             	add    esp,0x10
c001a901:	eb 2a                	jmp    c001a92d <PCI::detect()+0x55>
c001a903:	52                   	push   edx
c001a904:	52                   	push   edx
c001a905:	53                   	push   ebx
c001a906:	43                   	inc    ebx
c001a907:	56                   	push   esi
c001a908:	e8 51 fc ff ff       	call   c001a55e <PCI::checkBus(unsigned char)>
c001a90d:	83 c4 10             	add    esp,0x10
c001a910:	83 fb 08             	cmp    ebx,0x8
c001a913:	74 18                	je     c001a92d <PCI::detect()+0x55>
c001a915:	53                   	push   ebx
c001a916:	6a 00                	push   0x0
c001a918:	6a 00                	push   0x0
c001a91a:	56                   	push   esi
c001a91b:	e8 32 f7 ff ff       	call   c001a052 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a920:	83 c4 10             	add    esp,0x10
c001a923:	0f b7 c0             	movzx  eax,ax
c001a926:	3d ff ff 00 00       	cmp    eax,0xffff
c001a92b:	74 d6                	je     c001a903 <PCI::detect()+0x2b>
c001a92d:	58                   	pop    eax
c001a92e:	5b                   	pop    ebx
c001a92f:	5e                   	pop    esi
c001a930:	c3                   	ret    
c001a931:	90                   	nop

c001a932 <IDE::close(int, int, void*)>:
c001a932:	83 c8 ff             	or     eax,0xffffffff
c001a935:	c3                   	ret    

c001a936 <IDE::IDE()>:
c001a936:	83 ec 1c             	sub    esp,0x1c
c001a939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a93d:	c7 44 24 04 68 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021668
c001a945:	89 04 24             	mov    DWORD PTR [esp],eax
c001a948:	e8 f7 17 ff ff       	call   c000c144 <HardDiskController::HardDiskController(char const*)>
c001a94d:	ba f8 16 02 c0       	mov    edx,0xc00216f8
c001a952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a956:	89 10                	mov    DWORD PTR [eax],edx
c001a958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95c:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a963:	90                   	nop
c001a964:	83 c4 1c             	add    esp,0x1c
c001a967:	c3                   	ret    

c001a968 <IDE::prepareInterrupt(unsigned char)>:
c001a968:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a96d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a971:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a979:	c3                   	ret    

c001a97a <selectDrive(unsigned char, unsigned char)>:
c001a97a:	c3                   	ret    
c001a97b:	90                   	nop

c001a97c <IDE::getBase(unsigned char)>:
c001a97c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a985:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a98d:	c3                   	ret    

c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a98e:	55                   	push   ebp
c001a98f:	57                   	push   edi
c001a990:	56                   	push   esi
c001a991:	53                   	push   ebx
c001a992:	83 ec 1c             	sub    esp,0x1c
c001a995:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001a99a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a99e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a9a2:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001a9a7:	88 d9                	mov    cl,bl
c001a9a9:	80 e9 08             	sub    cl,0x8
c001a9ac:	80 f9 03             	cmp    cl,0x3
c001a9af:	77 4e                	ja     c001a9ff <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001a9b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9b5:	0f b6 fa             	movzx  edi,dl
c001a9b8:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001a9bb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a9bf:	80 ca 80             	or     dl,0x80
c001a9c2:	0f b6 d2             	movzx  edx,dl
c001a9c5:	52                   	push   edx
c001a9c6:	6a 0c                	push   0xc
c001a9c8:	57                   	push   edi
c001a9c9:	56                   	push   esi
c001a9ca:	e8 bf ff ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9cf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a9d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9d8:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a9dc:	ee                   	out    dx,al
c001a9dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a9e2:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001a9e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a9ea:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a9f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a9f6:	83 c4 2c             	add    esp,0x2c
c001a9f9:	5b                   	pop    ebx
c001a9fa:	5e                   	pop    esi
c001a9fb:	5f                   	pop    edi
c001a9fc:	5d                   	pop    ebp
c001a9fd:	eb 8f                	jmp    c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9ff:	80 fb 07             	cmp    bl,0x7
c001aa02:	77 0c                	ja     c001aa10 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001aa04:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001aa0c:	01 da                	add    edx,ebx
c001aa0e:	eb 23                	jmp    c001aa33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aa10:	80 fb 0d             	cmp    bl,0xd
c001aa13:	77 0d                	ja     c001aa22 <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001aa15:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001aa1c:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001aa20:	eb 11                	jmp    c001aa33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001aa22:	80 fb 15             	cmp    bl,0x15
c001aa25:	77 0d                	ja     c001aa34 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa27:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001aa2f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001aa33:	ee                   	out    dx,al
c001aa34:	83 c4 1c             	add    esp,0x1c
c001aa37:	5b                   	pop    ebx
c001aa38:	5e                   	pop    esi
c001aa39:	5f                   	pop    edi
c001aa3a:	5d                   	pop    ebp
c001aa3b:	c3                   	ret    

c001aa3c <IDE::read(unsigned char, unsigned char)>:
c001aa3c:	55                   	push   ebp
c001aa3d:	57                   	push   edi
c001aa3e:	56                   	push   esi
c001aa3f:	53                   	push   ebx
c001aa40:	83 ec 1c             	sub    esp,0x1c
c001aa43:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aa48:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aa4c:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aa51:	88 d8                	mov    al,bl
c001aa53:	2c 08                	sub    al,0x8
c001aa55:	3c 03                	cmp    al,0x3
c001aa57:	77 3f                	ja     c001aa98 <IDE::read(unsigned char, unsigned char)+0x5c>
c001aa59:	0f b6 f2             	movzx  esi,dl
c001aa5c:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001aa5f:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001aa63:	0c 80                	or     al,0x80
c001aa65:	0f b6 c0             	movzx  eax,al
c001aa68:	50                   	push   eax
c001aa69:	6a 0c                	push   0xc
c001aa6b:	56                   	push   esi
c001aa6c:	57                   	push   edi
c001aa6d:	e8 1c ff ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa72:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001aa77:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001aa7b:	ec                   	in     al,dx
c001aa7c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa80:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001aa85:	52                   	push   edx
c001aa86:	6a 0c                	push   0xc
c001aa88:	56                   	push   esi
c001aa89:	57                   	push   edi
c001aa8a:	e8 ff fe ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aa8f:	83 c4 20             	add    esp,0x20
c001aa92:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa96:	eb 38                	jmp    c001aad0 <IDE::read(unsigned char, unsigned char)+0x94>
c001aa98:	80 fb 07             	cmp    bl,0x7
c001aa9b:	77 0d                	ja     c001aaaa <IDE::read(unsigned char, unsigned char)+0x6e>
c001aa9d:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001aaa5:	8d 14 18             	lea    edx,[eax+ebx*1]
c001aaa8:	eb 25                	jmp    c001aacf <IDE::read(unsigned char, unsigned char)+0x93>
c001aaaa:	80 fb 0d             	cmp    bl,0xd
c001aaad:	77 0d                	ja     c001aabc <IDE::read(unsigned char, unsigned char)+0x80>
c001aaaf:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001aab6:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001aaba:	eb 13                	jmp    c001aacf <IDE::read(unsigned char, unsigned char)+0x93>
c001aabc:	31 c0                	xor    eax,eax
c001aabe:	80 fb 15             	cmp    bl,0x15
c001aac1:	77 0d                	ja     c001aad0 <IDE::read(unsigned char, unsigned char)+0x94>
c001aac3:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001aacb:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001aacf:	ec                   	in     al,dx
c001aad0:	83 c4 1c             	add    esp,0x1c
c001aad3:	5b                   	pop    ebx
c001aad4:	5e                   	pop    esi
c001aad5:	5f                   	pop    edi
c001aad6:	5d                   	pop    ebp
c001aad7:	c3                   	ret    

c001aad8 <IDE::waitInterrupt(unsigned char)>:
c001aad8:	57                   	push   edi
c001aad9:	56                   	push   esi
c001aada:	53                   	push   ebx
c001aadb:	31 db                	xor    ebx,ebx
c001aadd:	83 ec 10             	sub    esp,0x10
c001aae0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aae4:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001aae9:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001aaf0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001aaf4:	84 c0                	test   al,al
c001aaf6:	75 32                	jne    c001ab2a <IDE::waitInterrupt(unsigned char)+0x52>
c001aaf8:	50                   	push   eax
c001aaf9:	6a 0c                	push   0xc
c001aafb:	56                   	push   esi
c001aafc:	57                   	push   edi
c001aafd:	e8 3a ff ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001ab02:	83 c4 10             	add    esp,0x10
c001ab05:	24 01                	and    al,0x1
c001ab07:	84 c0                	test   al,al
c001ab09:	75 27                	jne    c001ab32 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ab0b:	f6 c3 04             	test   bl,0x4
c001ab0e:	75 12                	jne    c001ab22 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ab10:	83 fb 32             	cmp    ebx,0x32
c001ab13:	7e 0d                	jle    c001ab22 <IDE::waitInterrupt(unsigned char)+0x4a>
c001ab15:	83 ec 0c             	sub    esp,0xc
c001ab18:	6a 64                	push   0x64
c001ab1a:	e8 fd a7 ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001ab1f:	83 c4 10             	add    esp,0x10
c001ab22:	83 fb 3c             	cmp    ebx,0x3c
c001ab25:	74 0b                	je     c001ab32 <IDE::waitInterrupt(unsigned char)+0x5a>
c001ab27:	43                   	inc    ebx
c001ab28:	eb bf                	jmp    c001aae9 <IDE::waitInterrupt(unsigned char)+0x11>
c001ab2a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ab32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab36:	83 c4 10             	add    esp,0x10
c001ab39:	5b                   	pop    ebx
c001ab3a:	5e                   	pop    esi
c001ab3b:	5f                   	pop    edi
c001ab3c:	c3                   	ret    

c001ab3d <ideChannel0IRQHandler(regs*, void*)>:
c001ab3d:	83 ec 10             	sub    esp,0x10
c001ab40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab44:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ab4b:	6a 07                	push   0x7
c001ab4d:	6a 00                	push   0x0
c001ab4f:	50                   	push   eax
c001ab50:	e8 e7 fe ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001ab55:	83 c4 1c             	add    esp,0x1c
c001ab58:	c3                   	ret    

c001ab59 <ideChannel1IRQHandler(regs*, void*)>:
c001ab59:	83 ec 10             	sub    esp,0x10
c001ab5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab60:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ab67:	6a 07                	push   0x7
c001ab69:	6a 01                	push   0x1
c001ab6b:	50                   	push   eax
c001ab6c:	e8 cb fe ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001ab71:	83 c4 1c             	add    esp,0x1c
c001ab74:	c3                   	ret    
c001ab75:	90                   	nop

c001ab76 <IDE::enableIRQs(unsigned char, bool)>:
c001ab76:	57                   	push   edi
c001ab77:	56                   	push   esi
c001ab78:	be 04 00 00 00       	mov    esi,0x4
c001ab7d:	53                   	push   ebx
c001ab7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ab83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ab87:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ab8c:	0f 94 c0             	sete   al
c001ab8f:	00 c0                	add    al,al
c001ab91:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ab98:	0f b6 c0             	movzx  eax,al
c001ab9b:	50                   	push   eax
c001ab9c:	6a 0c                	push   0xc
c001ab9e:	57                   	push   edi
c001ab9f:	53                   	push   ebx
c001aba0:	e8 e9 fd ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aba5:	83 c4 10             	add    esp,0x10
c001aba8:	50                   	push   eax
c001aba9:	6a 0c                	push   0xc
c001abab:	57                   	push   edi
c001abac:	53                   	push   ebx
c001abad:	e8 8a fe ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	4e                   	dec    esi
c001abb6:	75 f0                	jne    c001aba8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001abb8:	5b                   	pop    ebx
c001abb9:	5e                   	pop    esi
c001abba:	5f                   	pop    edi
c001abbb:	c3                   	ret    

c001abbc <IDE::open(int, int, void*)>:
c001abbc:	55                   	push   ebp
c001abbd:	57                   	push   edi
c001abbe:	56                   	push   esi
c001abbf:	53                   	push   ebx
c001abc0:	83 ec 1c             	sub    esp,0x1c
c001abc3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001abc7:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001abce:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001abd7:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001abe0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001abe7:	0f 85 b7 02 00 00    	jne    c001aea4 <IDE::open(int, int, void*)+0x2e8>
c001abed:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001abf3:	88 c8                	mov    al,cl
c001abf5:	24 7f                	and    al,0x7f
c001abf7:	0f b6 c0             	movzx  eax,al
c001abfa:	83 f8 05             	cmp    eax,0x5
c001abfd:	74 05                	je     c001ac04 <IDE::open(int, int, void*)+0x48>
c001abff:	83 f8 0f             	cmp    eax,0xf
c001ac02:	75 32                	jne    c001ac36 <IDE::open(int, int, void*)+0x7a>
c001ac04:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ac0a:	83 e0 fc             	and    eax,0xfffffffc
c001ac0d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ac14:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ac1a:	83 e0 fc             	and    eax,0xfffffffc
c001ac1d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ac24:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ac2a:	83 e0 fc             	and    eax,0xfffffffc
c001ac2d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ac34:	eb 14                	jmp    c001ac4a <IDE::open(int, int, void*)+0x8e>
c001ac36:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ac40:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ac4a:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001ac51:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ac56:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ac5d:	89 fe                	mov    esi,edi
c001ac5f:	c1 e6 10             	shl    esi,0x10
c001ac62:	89 e8                	mov    eax,ebp
c001ac64:	c1 e0 0b             	shl    eax,0xb
c001ac67:	09 c6                	or     esi,eax
c001ac69:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ac70:	c1 e0 08             	shl    eax,0x8
c001ac73:	09 c6                	or     esi,eax
c001ac75:	89 f0                	mov    eax,esi
c001ac77:	0d 08 00 00 80       	or     eax,0x80000008
c001ac7c:	ef                   	out    dx,eax
c001ac7d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ac82:	ed                   	in     eax,dx
c001ac83:	c1 e8 10             	shr    eax,0x10
c001ac86:	3d ff ff 00 00       	cmp    eax,0xffff
c001ac8b:	0f 84 f9 00 00 00    	je     c001ad8a <IDE::open(int, int, void*)+0x1ce>
c001ac91:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ac97:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ac9c:	89 f0                	mov    eax,esi
c001ac9e:	ef                   	out    dx,eax
c001ac9f:	b0 fe                	mov    al,0xfe
c001aca1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aca6:	ee                   	out    dx,al
c001aca7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001acac:	89 f0                	mov    eax,esi
c001acae:	ef                   	out    dx,eax
c001acaf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001acb4:	ed                   	in     eax,dx
c001acb5:	3c fe                	cmp    al,0xfe
c001acb7:	0f 85 a5 00 00 00    	jne    c001ad62 <IDE::open(int, int, void*)+0x1a6>
c001acbd:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001acc3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001acca:	74 31                	je     c001acfd <IDE::open(int, int, void*)+0x141>
c001accc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001acd2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001acd6:	83 ec 0c             	sub    esp,0xc
c001acd9:	fe c0                	inc    al
c001acdb:	0f b6 c0             	movzx  eax,al
c001acde:	50                   	push   eax
c001acdf:	55                   	push   ebp
c001ace0:	57                   	push   edi
c001ace1:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001ace7:	51                   	push   ecx
c001ace8:	e8 bb 3f ff ff       	call   c000eca8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001aced:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001acf2:	83 c4 1c             	add    esp,0x1c
c001acf5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001acfb:	eb 0a                	jmp    c001ad07 <IDE::open(int, int, void*)+0x14b>
c001acfd:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ad07:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ad0e:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001ad13:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ad1a:	89 ea                	mov    edx,ebp
c001ad1c:	c1 e6 10             	shl    esi,0x10
c001ad1f:	c1 e0 08             	shl    eax,0x8
c001ad22:	09 c6                	or     esi,eax
c001ad24:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ad2b:	c1 e0 0b             	shl    eax,0xb
c001ad2e:	09 c6                	or     esi,eax
c001ad30:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ad36:	89 f0                	mov    eax,esi
c001ad38:	ef                   	out    dx,eax
c001ad39:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001ad3f:	bf fc 0c 00 00       	mov    edi,0xcfc
c001ad44:	89 fa                	mov    edx,edi
c001ad46:	88 c8                	mov    al,cl
c001ad48:	ee                   	out    dx,al
c001ad49:	89 f0                	mov    eax,esi
c001ad4b:	89 ea                	mov    edx,ebp
c001ad4d:	ef                   	out    dx,eax
c001ad4e:	89 fa                	mov    edx,edi
c001ad50:	ed                   	in     eax,dx
c001ad51:	0f b6 c0             	movzx  eax,al
c001ad54:	39 c8                	cmp    eax,ecx
c001ad56:	74 42                	je     c001ad9a <IDE::open(int, int, void*)+0x1de>
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	68 80 16 02 c0       	push   0xc0021680
c001ad60:	eb 30                	jmp    c001ad92 <IDE::open(int, int, void*)+0x1d6>
c001ad62:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ad6b:	75 13                	jne    c001ad80 <IDE::open(int, int, void*)+0x1c4>
c001ad6d:	80 f9 8a             	cmp    cl,0x8a
c001ad70:	74 05                	je     c001ad77 <IDE::open(int, int, void*)+0x1bb>
c001ad72:	80 f9 80             	cmp    cl,0x80
c001ad75:	75 09                	jne    c001ad80 <IDE::open(int, int, void*)+0x1c4>
c001ad77:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ad7e:	eb 1a                	jmp    c001ad9a <IDE::open(int, int, void*)+0x1de>
c001ad80:	83 ec 0c             	sub    esp,0xc
c001ad83:	68 88 16 02 c0       	push   0xc0021688
c001ad88:	eb 08                	jmp    c001ad92 <IDE::open(int, int, void*)+0x1d6>
c001ad8a:	83 ec 0c             	sub    esp,0xc
c001ad8d:	68 b9 16 02 c0       	push   0xc00216b9
c001ad92:	e8 8e 59 ff ff       	call   c0010725 <KePanic(char const*)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ada1:	79 1c                	jns    c001adbf <IDE::open(int, int, void*)+0x203>
c001ada3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ada9:	25 fc ff 00 00       	and    eax,0xfffc
c001adae:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001adb5:	83 c0 08             	add    eax,0x8
c001adb8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001adbf:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001adc6:	89 c2                	mov    edx,eax
c001adc8:	83 e2 0f             	and    edx,0xf
c001adcb:	83 fa 08             	cmp    edx,0x8
c001adce:	75 0a                	jne    c001adda <IDE::open(int, int, void*)+0x21e>
c001add0:	83 e8 02             	sub    eax,0x2
c001add3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001adda:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001ade1:	89 c2                	mov    edx,eax
c001ade3:	83 e2 0f             	and    edx,0xf
c001ade6:	83 fa 08             	cmp    edx,0x8
c001ade9:	75 0a                	jne    c001adf5 <IDE::open(int, int, void*)+0x239>
c001adeb:	83 e8 02             	sub    eax,0x2
c001adee:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001adf5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001adfc:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001ae03:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae06:	89 d0                	mov    eax,edx
c001ae08:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ae0c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ae10:	88 d1                	mov    cl,dl
c001ae12:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ae17:	fe c1                	inc    cl
c001ae19:	0f b6 c9             	movzx  ecx,cl
c001ae1c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ae1f:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001ae26:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ae2a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ae2e:	88 c2                	mov    dl,al
c001ae30:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ae35:	80 c2 02             	add    dl,0x2
c001ae38:	0f b6 d2             	movzx  edx,dl
c001ae3b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae3e:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001ae45:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ae49:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ae4d:	88 c1                	mov    cl,al
c001ae4f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ae54:	80 c1 03             	add    cl,0x3
c001ae57:	0f b6 c9             	movzx  ecx,cl
c001ae5a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ae5d:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001ae64:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ae68:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ae6c:	88 c2                	mov    dl,al
c001ae6e:	80 c2 04             	add    dl,0x4
c001ae71:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ae77:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ae7c:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001ae83:	85 f6                	test   esi,esi
c001ae85:	74 5d                	je     c001aee4 <IDE::open(int, int, void*)+0x328>
c001ae87:	0f b6 d2             	movzx  edx,dl
c001ae8a:	04 05                	add    al,0x5
c001ae8c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ae8f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ae93:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ae97:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ae9d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aea2:	eb 40                	jmp    c001aee4 <IDE::open(int, int, void*)+0x328>
c001aea4:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aeab:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001aeb2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aeb9:	05 06 02 00 00       	add    eax,0x206
c001aebe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aec5:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001aecc:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aed3:	05 06 02 00 00       	add    eax,0x206
c001aed8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aedf:	e9 db fe ff ff       	jmp    c001adbf <IDE::open(int, int, void*)+0x203>
c001aee4:	50                   	push   eax
c001aee5:	50                   	push   eax
c001aee6:	6a 00                	push   0x0
c001aee8:	53                   	push   ebx
c001aee9:	e8 7a fa ff ff       	call   c001a968 <IDE::prepareInterrupt(unsigned char)>
c001aeee:	5a                   	pop    edx
c001aeef:	59                   	pop    ecx
c001aef0:	6a 01                	push   0x1
c001aef2:	53                   	push   ebx
c001aef3:	e8 70 fa ff ff       	call   c001a968 <IDE::prepareInterrupt(unsigned char)>
c001aef8:	83 c4 0c             	add    esp,0xc
c001aefb:	6a 00                	push   0x0
c001aefd:	6a 00                	push   0x0
c001aeff:	53                   	push   ebx
c001af00:	e8 71 fc ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001af05:	83 c4 0c             	add    esp,0xc
c001af08:	6a 00                	push   0x0
c001af0a:	6a 01                	push   0x1
c001af0c:	53                   	push   ebx
c001af0d:	e8 64 fc ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001af1c:	74 34                	je     c001af52 <IDE::open(int, int, void*)+0x396>
c001af1e:	83 ec 0c             	sub    esp,0xc
c001af21:	53                   	push   ebx
c001af22:	6a 01                	push   0x1
c001af24:	68 3d ab 01 c0       	push   0xc001ab3d
c001af29:	6a 0e                	push   0xe
c001af2b:	53                   	push   ebx
c001af2c:	e8 7f 0e ff ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af31:	83 c4 14             	add    esp,0x14
c001af34:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af3a:	53                   	push   ebx
c001af3b:	6a 01                	push   0x1
c001af3d:	68 59 ab 01 c0       	push   0xc001ab59
c001af42:	6a 0f                	push   0xf
c001af44:	53                   	push   ebx
c001af45:	e8 66 0e ff ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af4a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001af50:	eb 38                	jmp    c001af8a <IDE::open(int, int, void*)+0x3ce>
c001af52:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	53                   	push   ebx
c001af60:	6a 00                	push   0x0
c001af62:	68 3d ab 01 c0       	push   0xc001ab3d
c001af67:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001af6d:	53                   	push   ebx
c001af6e:	e8 3d 0e ff ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af73:	83 c4 14             	add    esp,0x14
c001af76:	53                   	push   ebx
c001af77:	6a 00                	push   0x0
c001af79:	68 59 ab 01 c0       	push   0xc001ab59
c001af7e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001af84:	53                   	push   ebx
c001af85:	e8 26 0e ff ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001af8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8c:	83 c4 20             	add    esp,0x20
c001af8f:	83 ec 0c             	sub    esp,0xc
c001af92:	53                   	push   ebx
c001af93:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001af96:	83 c4 0c             	add    esp,0xc
c001af99:	6a 07                	push   0x7
c001af9b:	6a 00                	push   0x0
c001af9d:	53                   	push   ebx
c001af9e:	e8 99 fa ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001afa3:	83 c4 0c             	add    esp,0xc
c001afa6:	6a 07                	push   0x7
c001afa8:	6a 01                	push   0x1
c001afaa:	53                   	push   ebx
c001afab:	e8 8c fa ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001afb0:	83 c4 0c             	add    esp,0xc
c001afb3:	6a 01                	push   0x1
c001afb5:	6a 00                	push   0x0
c001afb7:	53                   	push   ebx
c001afb8:	e8 b9 fb ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001afbd:	83 c4 0c             	add    esp,0xc
c001afc0:	6a 01                	push   0x1
c001afc2:	6a 01                	push   0x1
c001afc4:	53                   	push   ebx
c001afc5:	e8 ac fb ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001afca:	83 c4 2c             	add    esp,0x2c
c001afcd:	31 c0                	xor    eax,eax
c001afcf:	5b                   	pop    ebx
c001afd0:	5e                   	pop    esi
c001afd1:	5f                   	pop    edi
c001afd2:	5d                   	pop    ebp
c001afd3:	c3                   	ret    

c001afd4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001afd4:	55                   	push   ebp
c001afd5:	57                   	push   edi
c001afd6:	56                   	push   esi
c001afd7:	53                   	push   ebx
c001afd8:	83 ec 1c             	sub    esp,0x1c
c001afdb:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001afe0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afe4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001afe8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001afec:	88 d0                	mov    al,dl
c001afee:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001aff3:	2c 08                	sub    al,0x8
c001aff5:	3c 03                	cmp    al,0x3
c001aff7:	77 57                	ja     c001b050 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001aff9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001affd:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b000:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b004:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b008:	0c 80                	or     al,0x80
c001b00a:	0f b6 c0             	movzx  eax,al
c001b00d:	50                   	push   eax
c001b00e:	6a 0c                	push   0xc
c001b010:	53                   	push   ebx
c001b011:	56                   	push   esi
c001b012:	e8 77 f9 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b017:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b01c:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b021:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b025:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b029:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b02b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b030:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b034:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b038:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b040:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b044:	83 c4 2c             	add    esp,0x2c
c001b047:	5b                   	pop    ebx
c001b048:	5e                   	pop    esi
c001b049:	5f                   	pop    edi
c001b04a:	5d                   	pop    ebp
c001b04b:	e9 3e f9 ff ff       	jmp    c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b050:	80 fa 07             	cmp    dl,0x7
c001b053:	77 0c                	ja     c001b061 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b055:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b05d:	01 c2                	add    edx,eax
c001b05f:	eb 23                	jmp    c001b084 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b061:	80 fa 0d             	cmp    dl,0xd
c001b064:	77 0d                	ja     c001b073 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b066:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b06d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b071:	eb 11                	jmp    c001b084 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b073:	80 fa 15             	cmp    dl,0x15
c001b076:	77 0e                	ja     c001b086 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b078:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b080:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b084:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b086:	83 c4 1c             	add    esp,0x1c
c001b089:	5b                   	pop    ebx
c001b08a:	5e                   	pop    esi
c001b08b:	5f                   	pop    edi
c001b08c:	5d                   	pop    ebp
c001b08d:	c3                   	ret    

c001b08e <IDE::detect()>:
c001b08e:	55                   	push   ebp
c001b08f:	57                   	push   edi
c001b090:	56                   	push   esi
c001b091:	53                   	push   ebx
c001b092:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b098:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b09f:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b0a6:	0f 85 91 02 00 00    	jne    c001b33d <IDE::detect()+0x2af>
c001b0ac:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b0b3:	31 db                	xor    ebx,ebx
c001b0b5:	31 ff                	xor    edi,edi
c001b0b7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b0bc:	89 f8                	mov    eax,edi
c001b0be:	c1 e0 06             	shl    eax,0x6
c001b0c1:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b0c9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b0cd:	c0 e0 04             	shl    al,0x4
c001b0d0:	0c a0                	or     al,0xa0
c001b0d2:	0f b6 c0             	movzx  eax,al
c001b0d5:	50                   	push   eax
c001b0d6:	6a 06                	push   0x6
c001b0d8:	53                   	push   ebx
c001b0d9:	56                   	push   esi
c001b0da:	e8 af f8 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0df:	83 c4 0c             	add    esp,0xc
c001b0e2:	6a 0c                	push   0xc
c001b0e4:	53                   	push   ebx
c001b0e5:	56                   	push   esi
c001b0e6:	e8 51 f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b0eb:	83 c4 0c             	add    esp,0xc
c001b0ee:	6a 0c                	push   0xc
c001b0f0:	53                   	push   ebx
c001b0f1:	56                   	push   esi
c001b0f2:	e8 45 f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b0f7:	83 c4 0c             	add    esp,0xc
c001b0fa:	6a 0c                	push   0xc
c001b0fc:	53                   	push   ebx
c001b0fd:	56                   	push   esi
c001b0fe:	e8 39 f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b103:	83 c4 0c             	add    esp,0xc
c001b106:	6a 0c                	push   0xc
c001b108:	53                   	push   ebx
c001b109:	56                   	push   esi
c001b10a:	e8 2d f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b10f:	68 ec 00 00 00       	push   0xec
c001b114:	6a 07                	push   0x7
c001b116:	53                   	push   ebx
c001b117:	56                   	push   esi
c001b118:	e8 71 f8 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b11d:	83 c4 1c             	add    esp,0x1c
c001b120:	6a 0c                	push   0xc
c001b122:	53                   	push   ebx
c001b123:	56                   	push   esi
c001b124:	e8 13 f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b129:	83 c4 0c             	add    esp,0xc
c001b12c:	6a 0c                	push   0xc
c001b12e:	53                   	push   ebx
c001b12f:	56                   	push   esi
c001b130:	e8 07 f9 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b135:	83 c4 0c             	add    esp,0xc
c001b138:	6a 0c                	push   0xc
c001b13a:	53                   	push   ebx
c001b13b:	56                   	push   esi
c001b13c:	e8 fb f8 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b141:	83 c4 0c             	add    esp,0xc
c001b144:	6a 0c                	push   0xc
c001b146:	53                   	push   ebx
c001b147:	56                   	push   esi
c001b148:	e8 ef f8 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b14d:	83 c4 0c             	add    esp,0xc
c001b150:	6a 0c                	push   0xc
c001b152:	53                   	push   ebx
c001b153:	56                   	push   esi
c001b154:	e8 e3 f8 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b159:	83 c4 10             	add    esp,0x10
c001b15c:	84 c0                	test   al,al
c001b15e:	0f 84 62 01 00 00    	je     c001b2c6 <IDE::detect()+0x238>
c001b164:	31 ed                	xor    ebp,ebp
c001b166:	50                   	push   eax
c001b167:	6a 0c                	push   0xc
c001b169:	53                   	push   ebx
c001b16a:	56                   	push   esi
c001b16b:	e8 cc f8 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	88 c2                	mov    dl,al
c001b175:	80 e2 01             	and    dl,0x1
c001b178:	84 d2                	test   dl,dl
c001b17a:	0f 85 64 01 00 00    	jne    c001b2e4 <IDE::detect()+0x256>
c001b180:	84 c0                	test   al,al
c001b182:	78 04                	js     c001b188 <IDE::detect()+0xfa>
c001b184:	24 08                	and    al,0x8
c001b186:	75 23                	jne    c001b1ab <IDE::detect()+0x11d>
c001b188:	45                   	inc    ebp
c001b189:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b18f:	7e d5                	jle    c001b166 <IDE::detect()+0xd8>
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	6a 32                	push   0x32
c001b196:	e8 81 a1 ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001b19b:	83 c4 10             	add    esp,0x10
c001b19e:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b1a4:	75 c0                	jne    c001b166 <IDE::detect()+0xd8>
c001b1a6:	e9 39 01 00 00       	jmp    c001b2e4 <IDE::detect()+0x256>
c001b1ab:	31 d2                	xor    edx,edx
c001b1ad:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b1b1:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b1b5:	83 ec 0c             	sub    esp,0xc
c001b1b8:	68 80 00 00 00       	push   0x80
c001b1bd:	55                   	push   ebp
c001b1be:	6a 00                	push   0x0
c001b1c0:	53                   	push   ebx
c001b1c1:	56                   	push   esi
c001b1c2:	e8 0d fe ff ff       	call   c001afd4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b1c7:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b1cc:	89 f8                	mov    eax,edi
c001b1ce:	c1 e0 06             	shl    eax,0x6
c001b1d1:	01 f0                	add    eax,esi
c001b1d3:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b1da:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b1e1:	89 ca                	mov    edx,ecx
c001b1e3:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b1e7:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b1ed:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b1f3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b1f7:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b1fe:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b206:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b20d:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b215:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b21b:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b222:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b228:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b22c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b230:	83 c4 20             	add    esp,0x20
c001b233:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b236:	83 c5 02             	add    ebp,0x2
c001b239:	83 c0 02             	add    eax,0x2
c001b23c:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b242:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b245:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b24b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b24f:	75 e2                	jne    c001b233 <IDE::detect()+0x1a5>
c001b251:	89 f9                	mov    ecx,edi
c001b253:	c1 e1 06             	shl    ecx,0x6
c001b256:	01 f1                	add    ecx,esi
c001b258:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b25f:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b266:	c1 e8 09             	shr    eax,0x9
c001b269:	24 01                	and    al,0x1
c001b26b:	84 d2                	test   dl,dl
c001b26d:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b273:	75 22                	jne    c001b297 <IDE::detect()+0x209>
c001b275:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b27c:	74 47                	je     c001b2c5 <IDE::detect()+0x237>
c001b27e:	83 ec 0c             	sub    esp,0xc
c001b281:	68 7c 01 00 00       	push   0x17c
c001b286:	e8 db c7 fe ff       	call   c0007a66 <malloc>
c001b28b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b28e:	89 c5                	mov    ebp,eax
c001b290:	e8 3b 05 00 00       	call   c001b7d0 <ATA::ATA()>
c001b295:	eb 17                	jmp    c001b2ae <IDE::detect()+0x220>
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	68 84 01 00 00       	push   0x184
c001b29f:	e8 c2 c7 fe ff       	call   c0007a66 <malloc>
c001b2a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2a7:	89 c5                	mov    ebp,eax
c001b2a9:	e8 7e 0e 00 00       	call   c001c12c <ATAPI::ATAPI()>
c001b2ae:	5a                   	pop    edx
c001b2af:	59                   	pop    ecx
c001b2b0:	55                   	push   ebp
c001b2b1:	56                   	push   esi
c001b2b2:	e8 4b 0b ff ff       	call   c000be02 <Device::addChild(Device*)>
c001b2b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b2ba:	56                   	push   esi
c001b2bb:	57                   	push   edi
c001b2bc:	6a 00                	push   0x0
c001b2be:	55                   	push   ebp
c001b2bf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c2:	83 c4 20             	add    esp,0x20
c001b2c5:	47                   	inc    edi
c001b2c6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b2cb:	74 0a                	je     c001b2d7 <IDE::detect()+0x249>
c001b2cd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b2d2:	e9 e5 fd ff ff       	jmp    c001b0bc <IDE::detect()+0x2e>
c001b2d7:	4b                   	dec    ebx
c001b2d8:	74 63                	je     c001b33d <IDE::detect()+0x2af>
c001b2da:	bb 01 00 00 00       	mov    ebx,0x1
c001b2df:	e9 d3 fd ff ff       	jmp    c001b0b7 <IDE::detect()+0x29>
c001b2e4:	50                   	push   eax
c001b2e5:	6a 04                	push   0x4
c001b2e7:	53                   	push   ebx
c001b2e8:	56                   	push   esi
c001b2e9:	e8 4e f7 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b2ee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b2f2:	83 c4 0c             	add    esp,0xc
c001b2f5:	6a 05                	push   0x5
c001b2f7:	53                   	push   ebx
c001b2f8:	56                   	push   esi
c001b2f9:	e8 3e f7 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b305:	80 fa 14             	cmp    dl,0x14
c001b308:	74 2d                	je     c001b337 <IDE::detect()+0x2a9>
c001b30a:	80 fa 69             	cmp    dl,0x69
c001b30d:	75 b7                	jne    c001b2c6 <IDE::detect()+0x238>
c001b30f:	3c 96                	cmp    al,0x96
c001b311:	75 b3                	jne    c001b2c6 <IDE::detect()+0x238>
c001b313:	68 a1 00 00 00       	push   0xa1
c001b318:	6a 07                	push   0x7
c001b31a:	53                   	push   ebx
c001b31b:	56                   	push   esi
c001b31c:	e8 6d f6 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b321:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b328:	e8 ef 9f ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	b2 01                	mov    dl,0x1
c001b332:	e9 76 fe ff ff       	jmp    c001b1ad <IDE::detect()+0x11f>
c001b337:	3c eb                	cmp    al,0xeb
c001b339:	75 cf                	jne    c001b30a <IDE::detect()+0x27c>
c001b33b:	eb d6                	jmp    c001b313 <IDE::detect()+0x285>
c001b33d:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b343:	5b                   	pop    ebx
c001b344:	5e                   	pop    esi
c001b345:	5f                   	pop    edi
c001b346:	5d                   	pop    ebp
c001b347:	c3                   	ret    

c001b348 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b348:	56                   	push   esi
c001b349:	53                   	push   ebx
c001b34a:	83 ec 14             	sub    esp,0x14
c001b34d:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001b351:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b355:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b359:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b35d:	84 d2                	test   dl,dl
c001b35f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b363:	0f 84 a8 00 00 00    	je     c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b369:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b36d:	83 ec 0c             	sub    esp,0xc
c001b370:	68 e3 16 02 c0       	push   0xc00216e3
c001b375:	e8 5c f6 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001b37a:	83 c4 10             	add    esp,0x10
c001b37d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b381:	80 fa 01             	cmp    dl,0x1
c001b384:	0f 84 81 00 00 00    	je     c001b40b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001b38a:	80 fa 02             	cmp    dl,0x2
c001b38d:	75 6e                	jne    c001b3fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001b38f:	00 db                	add    bl,bl
c001b391:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001b395:	50                   	push   eax
c001b396:	6a 01                	push   0x1
c001b398:	0f b6 db             	movzx  ebx,bl
c001b39b:	c1 e3 06             	shl    ebx,0x6
c001b39e:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001b3a6:	50                   	push   eax
c001b3a7:	56                   	push   esi
c001b3a8:	e8 8f f6 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b3ad:	83 c4 10             	add    esp,0x10
c001b3b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b3b4:	88 c1                	mov    cl,al
c001b3b6:	80 e1 01             	and    cl,0x1
c001b3b9:	84 c9                	test   cl,cl
c001b3bb:	74 02                	je     c001b3bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001b3bd:	b2 07                	mov    dl,0x7
c001b3bf:	88 c1                	mov    cl,al
c001b3c1:	80 e1 02             	and    cl,0x2
c001b3c4:	74 02                	je     c001b3c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b3c6:	b2 03                	mov    dl,0x3
c001b3c8:	88 c1                	mov    cl,al
c001b3ca:	80 e1 04             	and    cl,0x4
c001b3cd:	74 02                	je     c001b3d1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001b3cf:	b2 14                	mov    dl,0x14
c001b3d1:	88 c1                	mov    cl,al
c001b3d3:	80 e1 08             	and    cl,0x8
c001b3d6:	74 02                	je     c001b3da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001b3d8:	b2 03                	mov    dl,0x3
c001b3da:	88 c1                	mov    cl,al
c001b3dc:	80 e1 10             	and    cl,0x10
c001b3df:	74 02                	je     c001b3e3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b3e1:	b2 15                	mov    dl,0x15
c001b3e3:	88 c1                	mov    cl,al
c001b3e5:	80 e1 20             	and    cl,0x20
c001b3e8:	74 02                	je     c001b3ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b3ea:	b2 03                	mov    dl,0x3
c001b3ec:	88 c1                	mov    cl,al
c001b3ee:	80 e1 40             	and    cl,0x40
c001b3f1:	74 02                	je     c001b3f5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b3f3:	b2 16                	mov    dl,0x16
c001b3f5:	84 c0                	test   al,al
c001b3f7:	79 18                	jns    c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b3f9:	b2 0d                	mov    dl,0xd
c001b3fb:	eb 14                	jmp    c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b3fd:	80 fa 03             	cmp    dl,0x3
c001b400:	74 0d                	je     c001b40f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001b402:	80 fa 04             	cmp    dl,0x4
c001b405:	75 0a                	jne    c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b407:	b2 08                	mov    dl,0x8
c001b409:	eb 06                	jmp    c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b40b:	b2 13                	mov    dl,0x13
c001b40d:	eb 02                	jmp    c001b411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b40f:	b2 17                	mov    dl,0x17
c001b411:	83 c4 14             	add    esp,0x14
c001b414:	88 d0                	mov    al,dl
c001b416:	5b                   	pop    ebx
c001b417:	5e                   	pop    esi
c001b418:	c3                   	ret    
c001b419:	90                   	nop

c001b41a <IDE::polling(unsigned char, unsigned int)>:
c001b41a:	57                   	push   edi
c001b41b:	56                   	push   esi
c001b41c:	53                   	push   ebx
c001b41d:	bb 04 00 00 00       	mov    ebx,0x4
c001b422:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b426:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b42b:	52                   	push   edx
c001b42c:	6a 0c                	push   0xc
c001b42e:	56                   	push   esi
c001b42f:	57                   	push   edi
c001b430:	e8 07 f6 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	4b                   	dec    ebx
c001b439:	75 f0                	jne    c001b42b <IDE::polling(unsigned char, unsigned int)+0x11>
c001b43b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b440:	50                   	push   eax
c001b441:	6a 0c                	push   0xc
c001b443:	56                   	push   esi
c001b444:	57                   	push   edi
c001b445:	e8 f2 f5 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b44a:	83 c4 10             	add    esp,0x10
c001b44d:	88 c2                	mov    dl,al
c001b44f:	80 e2 01             	and    dl,0x1
c001b452:	84 d2                	test   dl,dl
c001b454:	75 1a                	jne    c001b470 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b456:	88 c2                	mov    dl,al
c001b458:	80 e2 20             	and    dl,0x20
c001b45b:	75 0f                	jne    c001b46c <IDE::polling(unsigned char, unsigned int)+0x52>
c001b45d:	4b                   	dec    ebx
c001b45e:	74 10                	je     c001b470 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b460:	84 c0                	test   al,al
c001b462:	78 dc                	js     c001b440 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b464:	24 08                	and    al,0x8
c001b466:	74 d8                	je     c001b440 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b468:	31 c0                	xor    eax,eax
c001b46a:	eb 06                	jmp    c001b472 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b46c:	b0 01                	mov    al,0x1
c001b46e:	eb 02                	jmp    c001b472 <IDE::polling(unsigned char, unsigned int)+0x58>
c001b470:	b0 02                	mov    al,0x2
c001b472:	5b                   	pop    ebx
c001b473:	5e                   	pop    esi
c001b474:	5f                   	pop    edi
c001b475:	c3                   	ret    

c001b476 <SATABus::close(int, int, void*)>:
c001b476:	31 c0                	xor    eax,eax
c001b478:	c3                   	ret    
c001b479:	90                   	nop

c001b47a <SATABus::detect()>:
c001b47a:	c3                   	ret    
c001b47b:	90                   	nop

c001b47c <SATABus::SATABus()>:
c001b47c:	83 ec 2c             	sub    esp,0x2c
c001b47f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b483:	c7 44 24 04 1c 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002171c
c001b48b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b48e:	e8 b1 0c ff ff       	call   c000c144 <HardDiskController::HardDiskController(char const*)>
c001b493:	ba 48 17 02 c0       	mov    edx,0xc0021748
c001b498:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b49c:	89 10                	mov    DWORD PTR [eax],edx
c001b49e:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b4a5:	e8 82 c9 fe ff       	call   c0007e2c <Phys::allocateContiguousPages(int)>
c001b4aa:	89 c2                	mov    edx,eax
c001b4ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b4b6:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b4bd:	e8 be e0 fe ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c001b4c2:	89 c2                	mov    edx,eax
c001b4c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b4c8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4ce:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b4d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4d7:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b4dd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4e1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b4e7:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001b4ef:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001b4f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b4fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001b502:	e8 db ea fe ff       	call   c0009fe2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b507:	90                   	nop
c001b508:	83 c4 2c             	add    esp,0x2c
c001b50b:	c3                   	ret    

c001b50c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b50c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b510:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b513:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b516:	09 c2                	or     edx,eax
c001b518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b51c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b522:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b524:	31 c0                	xor    eax,eax
c001b526:	c1 e9 08             	shr    ecx,0x8
c001b529:	83 e1 0f             	and    ecx,0xf
c001b52c:	39 c8                	cmp    eax,ecx
c001b52e:	74 0a                	je     c001b53a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b530:	f6 c2 01             	test   dl,0x1
c001b533:	74 08                	je     c001b53d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b535:	d1 ea                	shr    edx,1
c001b537:	40                   	inc    eax
c001b538:	eb f2                	jmp    c001b52c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b53a:	83 c8 ff             	or     eax,0xffffffff
c001b53d:	c3                   	ret    

c001b53e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b53e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b542:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b545:	89 c2                	mov    edx,eax
c001b547:	c1 ea 08             	shr    edx,0x8
c001b54a:	80 e2 0f             	and    dl,0xf
c001b54d:	fe ca                	dec    dl
c001b54f:	75 30                	jne    c001b581 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b551:	24 0f                	and    al,0xf
c001b553:	3c 03                	cmp    al,0x3
c001b555:	75 2a                	jne    c001b581 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b557:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b55a:	b8 02 00 00 00       	mov    eax,0x2
c001b55f:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b565:	74 1c                	je     c001b583 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b567:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b56d:	b8 04 00 00 00       	mov    eax,0x4
c001b572:	74 0f                	je     c001b583 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b574:	31 c0                	xor    eax,eax
c001b576:	83 fa 03             	cmp    edx,0x3
c001b579:	0f 94 c0             	sete   al
c001b57c:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b580:	c3                   	ret    
c001b581:	31 c0                	xor    eax,eax
c001b583:	c3                   	ret    

c001b584 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b588:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b58b:	0f ba e2 0f          	bt     edx,0xf
c001b58f:	72 f7                	jb     c001b588 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b591:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b594:	83 ca 10             	or     edx,0x10
c001b597:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b59a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b59d:	83 ca 01             	or     edx,0x1
c001b5a0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5a3:	c3                   	ret    

c001b5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b5a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5a8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5ab:	83 e2 fe             	and    edx,0xfffffffe
c001b5ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5b1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5b4:	83 e2 ef             	and    edx,0xffffffef
c001b5b7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b5ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5bd:	0f ba e2 0e          	bt     edx,0xe
c001b5c1:	72 f7                	jb     c001b5ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b5c3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b5c6:	0f ba e2 0f          	bt     edx,0xf
c001b5ca:	72 ee                	jb     c001b5ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b5cc:	c3                   	ret    
c001b5cd:	90                   	nop

c001b5ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b5ce:	55                   	push   ebp
c001b5cf:	57                   	push   edi
c001b5d0:	56                   	push   esi
c001b5d1:	53                   	push   ebx
c001b5d2:	83 ec 1c             	sub    esp,0x1c
c001b5d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b5d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b5dd:	53                   	push   ebx
c001b5de:	57                   	push   edi
c001b5df:	e8 c0 ff ff ff       	call   c001b5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b5e4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b5f1:	c1 e5 0a             	shl    ebp,0xa
c001b5f4:	01 e8                	add    eax,ebp
c001b5f6:	89 03                	mov    DWORD PTR [ebx],eax
c001b5f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5fa:	68 00 04 00 00       	push   0x400
c001b5ff:	6a 00                	push   0x0
c001b601:	50                   	push   eax
c001b602:	e8 e9 4e fe ff       	call   c00004f0 <memset>
c001b607:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b60d:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b611:	83 c4 1c             	add    esp,0x1c
c001b614:	01 e8                	add    eax,ebp
c001b616:	89 03                	mov    DWORD PTR [ebx],eax
c001b618:	c1 e6 08             	shl    esi,0x8
c001b61b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b622:	81 c6 00 80 00 00    	add    esi,0x8000
c001b628:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b62e:	01 f0                	add    eax,esi
c001b630:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b633:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b636:	68 00 01 00 00       	push   0x100
c001b63b:	6a 00                	push   0x0
c001b63d:	50                   	push   eax
c001b63e:	e8 ad 4e fe ff       	call   c00004f0 <memset>
c001b643:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b649:	31 d2                	xor    edx,edx
c001b64b:	01 f0                	add    eax,esi
c001b64d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b650:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b657:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b65d:	01 ee                	add    esi,ebp
c001b65f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	c1 e5 0d             	shl    ebp,0xd
c001b669:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b66f:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b675:	83 c6 20             	add    esi,0x20
c001b678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b67c:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b682:	01 e8                	add    eax,ebp
c001b684:	01 d0                	add    eax,edx
c001b686:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b689:	52                   	push   edx
c001b68a:	68 00 01 00 00       	push   0x100
c001b68f:	6a 00                	push   0x0
c001b691:	50                   	push   eax
c001b692:	e8 59 4e fe ff       	call   c00004f0 <memset>
c001b697:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b69d:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b6a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	01 e8                	add    eax,ebp
c001b6ad:	01 d0                	add    eax,edx
c001b6af:	81 c2 00 01 00 00    	add    edx,0x100
c001b6b5:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b6b8:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b6be:	75 af                	jne    c001b66f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b6c0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b6c7:	50                   	push   eax
c001b6c8:	50                   	push   eax
c001b6c9:	53                   	push   ebx
c001b6ca:	57                   	push   edi
c001b6cb:	e8 b4 fe ff ff       	call   c001b584 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b6d0:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b6d7:	83 c4 2c             	add    esp,0x2c
c001b6da:	5b                   	pop    ebx
c001b6db:	5e                   	pop    esi
c001b6dc:	5f                   	pop    edi
c001b6dd:	5d                   	pop    ebp
c001b6de:	c3                   	ret    
c001b6df:	90                   	nop

c001b6e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b6e0:	55                   	push   ebp
c001b6e1:	57                   	push   edi
c001b6e2:	56                   	push   esi
c001b6e3:	53                   	push   ebx
c001b6e4:	31 db                	xor    ebx,ebx
c001b6e6:	83 ec 0c             	sub    esp,0xc
c001b6e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b6ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b6f1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b6f4:	f7 c7 01 00 00 00    	test   edi,0x1
c001b6fa:	74 7a                	je     c001b776 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b6fc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b700:	89 d8                	mov    eax,ebx
c001b702:	c1 e0 07             	shl    eax,0x7
c001b705:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b70c:	55                   	push   ebp
c001b70d:	56                   	push   esi
c001b70e:	e8 2b fe ff ff       	call   c001b53e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b713:	5a                   	pop    edx
c001b714:	59                   	pop    ecx
c001b715:	83 f8 01             	cmp    eax,0x1
c001b718:	75 21                	jne    c001b73b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b71a:	50                   	push   eax
c001b71b:	53                   	push   ebx
c001b71c:	55                   	push   ebp
c001b71d:	56                   	push   esi
c001b71e:	e8 ab fe ff ff       	call   c001b5ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b723:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b72a:	e8 37 c3 fe ff       	call   c0007a66 <malloc>
c001b72f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b732:	89 c5                	mov    ebp,eax
c001b734:	e8 a5 10 00 00       	call   c001c7de <SATA::SATA()>
c001b739:	eb 24                	jmp    c001b75f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b73b:	83 f8 04             	cmp    eax,0x4
c001b73e:	75 36                	jne    c001b776 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b740:	51                   	push   ecx
c001b741:	53                   	push   ebx
c001b742:	55                   	push   ebp
c001b743:	56                   	push   esi
c001b744:	e8 85 fe ff ff       	call   c001b5ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b749:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b750:	e8 11 c3 fe ff       	call   c0007a66 <malloc>
c001b755:	89 04 24             	mov    DWORD PTR [esp],eax
c001b758:	89 c5                	mov    ebp,eax
c001b75a:	e8 d5 17 00 00       	call   c001cf34 <SATAPI::SATAPI()>
c001b75f:	58                   	pop    eax
c001b760:	5a                   	pop    edx
c001b761:	55                   	push   ebp
c001b762:	56                   	push   esi
c001b763:	e8 9a 06 ff ff       	call   c000be02 <Device::addChild(Device*)>
c001b768:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b76b:	56                   	push   esi
c001b76c:	6a 00                	push   0x0
c001b76e:	53                   	push   ebx
c001b76f:	55                   	push   ebp
c001b770:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b773:	83 c4 20             	add    esp,0x20
c001b776:	d1 ef                	shr    edi,1
c001b778:	43                   	inc    ebx
c001b779:	83 fb 20             	cmp    ebx,0x20
c001b77c:	0f 85 72 ff ff ff    	jne    c001b6f4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b782:	83 c4 0c             	add    esp,0xc
c001b785:	5b                   	pop    ebx
c001b786:	5e                   	pop    esi
c001b787:	5f                   	pop    edi
c001b788:	5d                   	pop    ebp
c001b789:	c3                   	ret    

c001b78a <SATABus::open(int, int, void*)>:
c001b78a:	83 ec 14             	sub    esp,0x14
c001b78d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b791:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b797:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b79d:	52                   	push   edx
c001b79e:	50                   	push   eax
c001b79f:	e8 3c ff ff ff       	call   c001b6e0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b7a4:	31 c0                	xor    eax,eax
c001b7a6:	83 c4 1c             	add    esp,0x1c
c001b7a9:	c3                   	ret    

c001b7aa <ATA::close(int, int, void*)>:
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b7b7:	85 c0                	test   eax,eax
c001b7b9:	74 0c                	je     c001b7c7 <ATA::close(int, int, void*)+0x1d>
c001b7bb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7bd:	83 ec 0c             	sub    esp,0xc
c001b7c0:	50                   	push   eax
c001b7c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b7c4:	83 c4 10             	add    esp,0x10
c001b7c7:	31 c0                	xor    eax,eax
c001b7c9:	83 c4 0c             	add    esp,0xc
c001b7cc:	c3                   	ret    
c001b7cd:	90                   	nop

c001b7ce <ATA::powerSaving(PowerSavingLevel)>:
c001b7ce:	c3                   	ret    
c001b7cf:	90                   	nop

c001b7d0 <ATA::ATA()>:
c001b7d0:	83 ec 1c             	sub    esp,0x1c
c001b7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d7:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001b7df:	c7 44 24 04 15 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021815
c001b7e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7ea:	e8 d9 09 ff ff       	call   c000c1c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b7ef:	ba 88 17 02 c0       	mov    edx,0xc0021788
c001b7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7f8:	89 10                	mov    DWORD PTR [eax],edx
c001b7fa:	90                   	nop
c001b7fb:	83 c4 1c             	add    esp,0x1c
c001b7fe:	c3                   	ret    
c001b7ff:	90                   	nop

c001b800 <ATA::flush(bool)>:
c001b800:	53                   	push   ebx
c001b801:	83 ec 08             	sub    esp,0x8
c001b804:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b80d:	19 c0                	sbb    eax,eax
c001b80f:	83 e0 fd             	and    eax,0xfffffffd
c001b812:	05 ea 00 00 00       	add    eax,0xea
c001b817:	50                   	push   eax
c001b818:	6a 07                	push   0x7
c001b81a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b821:	50                   	push   eax
c001b822:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b828:	e8 61 f1 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b82d:	83 c4 0c             	add    esp,0xc
c001b830:	6a 00                	push   0x0
c001b832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b839:	50                   	push   eax
c001b83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b840:	e8 d5 fb ff ff       	call   c001b41a <IDE::polling(unsigned char, unsigned int)>
c001b845:	83 c4 18             	add    esp,0x18
c001b848:	5b                   	pop    ebx
c001b849:	c3                   	ret    

c001b84a <ATA::readyForCommand()>:
c001b84a:	56                   	push   esi
c001b84b:	53                   	push   ebx
c001b84c:	53                   	push   ebx
c001b84d:	31 db                	xor    ebx,ebx
c001b84f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b853:	51                   	push   ecx
c001b854:	6a 0c                	push   0xc
c001b856:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b85d:	50                   	push   eax
c001b85e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b864:	e8 d3 f1 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001b869:	83 c4 10             	add    esp,0x10
c001b86c:	a8 88                	test   al,0x88
c001b86e:	74 1f                	je     c001b88f <ATA::readyForCommand()+0x45>
c001b870:	43                   	inc    ebx
c001b871:	83 fb 63             	cmp    ebx,0x63
c001b874:	7e dd                	jle    c001b853 <ATA::readyForCommand()+0x9>
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	6a 0a                	push   0xa
c001b87b:	e8 9c 9a ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b889:	75 c8                	jne    c001b853 <ATA::readyForCommand()+0x9>
c001b88b:	31 c0                	xor    eax,eax
c001b88d:	eb 02                	jmp    c001b891 <ATA::readyForCommand()+0x47>
c001b88f:	b0 01                	mov    al,0x1
c001b891:	5a                   	pop    edx
c001b892:	5b                   	pop    ebx
c001b893:	5e                   	pop    esi
c001b894:	c3                   	ret    
c001b895:	90                   	nop

c001b896 <ATA::access(unsigned long long, int, void*, bool)>:
c001b896:	55                   	push   ebp
c001b897:	57                   	push   edi
c001b898:	56                   	push   esi
c001b899:	53                   	push   ebx
c001b89a:	83 ec 2c             	sub    esp,0x2c
c001b89d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b8a1:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001b8a5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001b8a9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b8ad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b8b1:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001b8b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8bb:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b8c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8c5:	c1 e0 06             	shl    eax,0x6
c001b8c8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b8d0:	74 5c                	je     c001b92e <ATA::access(unsigned long long, int, void*, bool)+0x98>
c001b8d2:	89 ea                	mov    edx,ebp
c001b8d4:	89 f8                	mov    eax,edi
c001b8d6:	c1 ea 1c             	shr    edx,0x1c
c001b8d9:	0f ac e8 1c          	shrd   eax,ebp,0x1c
c001b8dd:	89 d1                	mov    ecx,edx
c001b8df:	09 c1                	or     ecx,eax
c001b8e1:	74 25                	je     c001b908 <ATA::access(unsigned long long, int, void*, bool)+0x72>
c001b8e3:	31 db                	xor    ebx,ebx
c001b8e5:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b8ec:	89 ea                	mov    edx,ebp
c001b8ee:	89 f8                	mov    eax,edi
c001b8f0:	0f ad d0             	shrd   eax,edx,cl
c001b8f3:	d3 ea                	shr    edx,cl
c001b8f5:	f6 c1 20             	test   cl,0x20
c001b8f8:	74 02                	je     c001b8fc <ATA::access(unsigned long long, int, void*, bool)+0x66>
c001b8fa:	89 d0                	mov    eax,edx
c001b8fc:	88 44 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],al
c001b900:	43                   	inc    ebx
c001b901:	83 fb 06             	cmp    ebx,0x6
c001b904:	75 df                	jne    c001b8e5 <ATA::access(unsigned long long, int, void*, bool)+0x4f>
c001b906:	eb 73                	jmp    c001b97b <ATA::access(unsigned long long, int, void*, bool)+0xe5>
c001b908:	66 89 7c 24 1a       	mov    WORD PTR [esp+0x1a],di
c001b90d:	89 f8                	mov    eax,edi
c001b90f:	b3 01                	mov    bl,0x1
c001b911:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b918:	0f ac e8 10          	shrd   eax,ebp,0x10
c001b91c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b920:	89 f8                	mov    eax,edi
c001b922:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b927:	c1 e8 18             	shr    eax,0x18
c001b92a:	89 c2                	mov    edx,eax
c001b92c:	eb 51                	jmp    c001b97f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001b92e:	6a 00                	push   0x0
c001b930:	31 db                	xor    ebx,ebx
c001b932:	6a 3f                	push   0x3f
c001b934:	55                   	push   ebp
c001b935:	57                   	push   edi
c001b936:	e8 c5 2a 00 00       	call   c001e400 <__umoddi3>
c001b93b:	83 c4 10             	add    esp,0x10
c001b93e:	fe c0                	inc    al
c001b940:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b944:	6a 00                	push   0x0
c001b946:	68 f0 03 00 00       	push   0x3f0
c001b94b:	55                   	push   ebp
c001b94c:	57                   	push   edi
c001b94d:	e8 ae 29 00 00       	call   c001e300 <__udivdi3>
c001b952:	83 c4 10             	add    esp,0x10
c001b955:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b95a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b961:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b966:	6a 00                	push   0x0
c001b968:	6a 3f                	push   0x3f
c001b96a:	55                   	push   ebp
c001b96b:	57                   	push   edi
c001b96c:	e8 8f 29 00 00       	call   c001e300 <__udivdi3>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	88 c2                	mov    dl,al
c001b976:	80 e2 0f             	and    dl,0xf
c001b979:	eb 04                	jmp    c001b97f <ATA::access(unsigned long long, int, void*, bool)+0xe9>
c001b97b:	31 d2                	xor    edx,edx
c001b97d:	b3 02                	mov    bl,0x2
c001b97f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b983:	50                   	push   eax
c001b984:	6a 00                	push   0x0
c001b986:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b98d:	50                   	push   eax
c001b98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b992:	e8 df f1 ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001b997:	89 34 24             	mov    DWORD PTR [esp],esi
c001b99a:	e8 ab fe ff ff       	call   c001b84a <ATA::readyForCommand()>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b9a6:	84 c0                	test   al,al
c001b9a8:	75 0a                	jne    c001b9b4 <ATA::access(unsigned long long, int, void*, bool)+0x11e>
c001b9aa:	bb 01 00 00 00       	mov    ebx,0x1
c001b9af:	e9 77 02 00 00       	jmp    c001bc2b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001b9b4:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001b9ba:	8b 8e 6c 01 00 00    	mov    ecx,DWORD PTR [esi+0x16c]
c001b9c0:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001b9c7:	c1 e0 04             	shl    eax,0x4
c001b9ca:	08 c2                	or     dl,al
c001b9cc:	84 db                	test   bl,bl
c001b9ce:	75 05                	jne    c001b9d5 <ATA::access(unsigned long long, int, void*, bool)+0x13f>
c001b9d0:	80 ca a0             	or     dl,0xa0
c001b9d3:	eb 03                	jmp    c001b9d8 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001b9d5:	80 ca e0             	or     dl,0xe0
c001b9d8:	0f b6 d2             	movzx  edx,dl
c001b9db:	52                   	push   edx
c001b9dc:	6a 06                	push   0x6
c001b9de:	57                   	push   edi
c001b9df:	51                   	push   ecx
c001b9e0:	e8 a9 ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	6a 00                	push   0x0
c001b9ea:	6a 01                	push   0x1
c001b9ec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b9f3:	50                   	push   eax
c001b9f4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b9fa:	e8 8f ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9ff:	83 c4 10             	add    esp,0x10
c001ba02:	80 fb 02             	cmp    bl,0x2
c001ba05:	75 6e                	jne    c001ba75 <ATA::access(unsigned long long, int, void*, bool)+0x1df>
c001ba07:	6a 00                	push   0x0
c001ba09:	6a 08                	push   0x8
c001ba0b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba12:	50                   	push   eax
c001ba13:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba19:	e8 70 ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba1e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ba23:	50                   	push   eax
c001ba24:	6a 09                	push   0x9
c001ba26:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba2d:	50                   	push   eax
c001ba2e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba34:	e8 55 ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba39:	83 c4 20             	add    esp,0x20
c001ba3c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ba41:	50                   	push   eax
c001ba42:	6a 0a                	push   0xa
c001ba44:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba4b:	50                   	push   eax
c001ba4c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba52:	e8 37 ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba57:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ba5c:	50                   	push   eax
c001ba5d:	6a 0b                	push   0xb
c001ba5f:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba66:	50                   	push   eax
c001ba67:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba6d:	e8 1c ef ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba72:	83 c4 20             	add    esp,0x20
c001ba75:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ba7a:	50                   	push   eax
c001ba7b:	6a 02                	push   0x2
c001ba7d:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba84:	50                   	push   eax
c001ba85:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ba8b:	e8 fe ee ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba90:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001ba95:	50                   	push   eax
c001ba96:	6a 03                	push   0x3
c001ba98:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ba9f:	50                   	push   eax
c001baa0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001baa6:	e8 e3 ee ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001baab:	83 c4 20             	add    esp,0x20
c001baae:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bab3:	50                   	push   eax
c001bab4:	6a 04                	push   0x4
c001bab6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001babd:	50                   	push   eax
c001babe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bac4:	e8 c5 ee ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bac9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bace:	50                   	push   eax
c001bacf:	6a 05                	push   0x5
c001bad1:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bad8:	50                   	push   eax
c001bad9:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001badf:	e8 aa ee ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bae4:	83 c4 20             	add    esp,0x20
c001bae7:	80 fb 02             	cmp    bl,0x2
c001baea:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001baef:	75 07                	jne    c001baf8 <ATA::access(unsigned long long, int, void*, bool)+0x262>
c001baf1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001baf6:	75 41                	jne    c001bb39 <ATA::access(unsigned long long, int, void*, bool)+0x2a3>
c001baf8:	80 fb 02             	cmp    bl,0x2
c001bafb:	0f 95 c1             	setne  cl
c001bafe:	74 0c                	je     c001bb0c <ATA::access(unsigned long long, int, void*, bool)+0x276>
c001bb00:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bb05:	b8 30 00 00 00       	mov    eax,0x30
c001bb0a:	75 32                	jne    c001bb3e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb0c:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001bb10:	80 f2 01             	xor    dl,0x1
c001bb13:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001bb18:	74 09                	je     c001bb23 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001bb1a:	84 d2                	test   dl,dl
c001bb1c:	b8 24 00 00 00       	mov    eax,0x24
c001bb21:	75 1b                	jne    c001bb3e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb23:	84 c9                	test   cl,cl
c001bb25:	0f 84 7f fe ff ff    	je     c001b9aa <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bb2b:	84 d2                	test   dl,dl
c001bb2d:	b8 20 00 00 00       	mov    eax,0x20
c001bb32:	75 0a                	jne    c001bb3e <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bb34:	e9 71 fe ff ff       	jmp    c001b9aa <ATA::access(unsigned long long, int, void*, bool)+0x114>
c001bb39:	b8 34 00 00 00       	mov    eax,0x34
c001bb3e:	50                   	push   eax
c001bb3f:	6a 07                	push   0x7
c001bb41:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb48:	50                   	push   eax
c001bb49:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb4f:	e8 3a ee ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb54:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001bb58:	83 c4 10             	add    esp,0x10
c001bb5b:	85 db                	test   ebx,ebx
c001bb5d:	0f 84 ae 00 00 00    	je     c001bc11 <ATA::access(unsigned long long, int, void*, bool)+0x37b>
c001bb63:	50                   	push   eax
c001bb64:	6a 01                	push   0x1
c001bb66:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb6d:	50                   	push   eax
c001bb6e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb74:	e8 a1 f8 ff ff       	call   c001b41a <IDE::polling(unsigned char, unsigned int)>
c001bb79:	83 c4 10             	add    esp,0x10
c001bb7c:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001bb82:	84 c0                	test   al,al
c001bb84:	74 20                	je     c001bba6 <ATA::access(unsigned long long, int, void*, bool)+0x310>
c001bb86:	0f b6 d8             	movzx  ebx,al
c001bb89:	53                   	push   ebx
c001bb8a:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001bb91:	50                   	push   eax
c001bb92:	0f b6 c2             	movzx  eax,dl
c001bb95:	50                   	push   eax
c001bb96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb9c:	e8 a7 f7 ff ff       	call   c001b348 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bba1:	e9 82 00 00 00       	jmp    c001bc28 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001bba6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bbab:	74 33                	je     c001bbe0 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001bbad:	31 ed                	xor    ebp,ebp
c001bbaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bbb3:	0f b7 3c 68          	movzx  edi,WORD PTR [eax+ebp*2]
c001bbb7:	50                   	push   eax
c001bbb8:	50                   	push   eax
c001bbb9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbc0:	50                   	push   eax
c001bbc1:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbc7:	e8 b0 ed ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001bbcc:	89 c2                	mov    edx,eax
c001bbce:	89 f8                	mov    eax,edi
c001bbd0:	66 ef                	out    dx,ax
c001bbd2:	45                   	inc    ebp
c001bbd3:	83 c4 10             	add    esp,0x10
c001bbd6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001bbdc:	75 d1                	jne    c001bbaf <ATA::access(unsigned long long, int, void*, bool)+0x319>
c001bbde:	eb 23                	jmp    c001bc03 <ATA::access(unsigned long long, int, void*, bool)+0x36d>
c001bbe0:	51                   	push   ecx
c001bbe1:	0f b6 c2             	movzx  eax,dl
c001bbe4:	51                   	push   ecx
c001bbe5:	50                   	push   eax
c001bbe6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbec:	e8 8b ed ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001bbf1:	b9 00 01 00 00       	mov    ecx,0x100
c001bbf6:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bbfa:	89 c2                	mov    edx,eax
c001bbfc:	fc                   	cld    
c001bbfd:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bc00:	83 c4 10             	add    esp,0x10
c001bc03:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bc0b:	4b                   	dec    ebx
c001bc0c:	e9 4a ff ff ff       	jmp    c001bb5b <ATA::access(unsigned long long, int, void*, bool)+0x2c5>
c001bc11:	31 db                	xor    ebx,ebx
c001bc13:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001bc18:	74 11                	je     c001bc2b <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001bc1a:	50                   	push   eax
c001bc1b:	50                   	push   eax
c001bc1c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bc21:	50                   	push   eax
c001bc22:	56                   	push   esi
c001bc23:	e8 d8 fb ff ff       	call   c001b800 <ATA::flush(bool)>
c001bc28:	83 c4 10             	add    esp,0x10
c001bc2b:	83 c4 2c             	add    esp,0x2c
c001bc2e:	89 d8                	mov    eax,ebx
c001bc30:	5b                   	pop    ebx
c001bc31:	5e                   	pop    esi
c001bc32:	5f                   	pop    edi
c001bc33:	5d                   	pop    ebp
c001bc34:	c3                   	ret    
c001bc35:	90                   	nop

c001bc36 <ATA::detectCHS()>:
c001bc36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc3a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bc40:	c1 e0 06             	shl    eax,0x6
c001bc43:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bc49:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bc53:	c7 44 24 04 6c 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002176c
c001bc5b:	e9 c5 4a ff ff       	jmp    c0010725 <KePanic(char const*)>

c001bc60 <ATA::open(int, int, void*)>:
c001bc60:	53                   	push   ebx
c001bc61:	83 ec 08             	sub    esp,0x8
c001bc64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bc70:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bc76:	c1 e0 06             	shl    eax,0x6
c001bc79:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bc7f:	01 d0                	add    eax,edx
c001bc81:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bc88:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bc8e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bc95:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bc9f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bca6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bcac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bcb3:	75 0c                	jne    c001bcc1 <ATA::open(int, int, void*)+0x61>
c001bcb5:	83 ec 0c             	sub    esp,0xc
c001bcb8:	53                   	push   ebx
c001bcb9:	e8 78 ff ff ff       	call   c001bc36 <ATA::detectCHS()>
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bcc7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bccd:	c1 e0 06             	shl    eax,0x6
c001bcd0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bcd7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bce1:	d1 e8                	shr    eax,1
c001bce3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bce9:	6a 04                	push   0x4
c001bceb:	6a 0c                	push   0xc
c001bced:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcf4:	50                   	push   eax
c001bcf5:	52                   	push   edx
c001bcf6:	e8 93 ec ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcfb:	90                   	nop
c001bcfc:	90                   	nop
c001bcfd:	6a 00                	push   0x0
c001bcff:	6a 0c                	push   0xc
c001bd01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd08:	50                   	push   eax
c001bd09:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd0f:	e8 7a ec ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd14:	83 c4 14             	add    esp,0x14
c001bd17:	53                   	push   ebx
c001bd18:	e8 13 05 ff ff       	call   c000c230 <PhysicalDisk::startCache()>
c001bd1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd20:	e8 6c 16 ff ff       	call   c000d391 <createPartitionsForDisk(PhysicalDisk*)>
c001bd25:	83 c4 18             	add    esp,0x18
c001bd28:	31 c0                	xor    eax,eax
c001bd2a:	5b                   	pop    ebx
c001bd2b:	c3                   	ret    

c001bd2c <combineCharAndColour(char, unsigned char)>:
c001bd2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd31:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bd37:	c1 e0 08             	shl    eax,0x8
c001bd3a:	09 d0                	or     eax,edx
c001bd3c:	c3                   	ret    

c001bd3d <combineColours(unsigned char, unsigned char)>:
c001bd3d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd42:	c1 e0 04             	shl    eax,0x4
c001bd45:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001bd49:	c3                   	ret    

c001bd4a <ATA::read(unsigned long long, int, void*)>:
c001bd4a:	55                   	push   ebp
c001bd4b:	57                   	push   edi
c001bd4c:	56                   	push   esi
c001bd4d:	be 04 00 00 00       	mov    esi,0x4
c001bd52:	53                   	push   ebx
c001bd53:	83 ec 0c             	sub    esp,0xc
c001bd56:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bd5a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd5e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd62:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bd66:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bd69:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bd6f:	0f 87 a9 01 00 00    	ja     c001bf1e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bd75:	85 c9                	test   ecx,ecx
c001bd77:	be 06 00 00 00       	mov    esi,0x6
c001bd7c:	0f 84 9c 01 00 00    	je     c001bf1e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bd82:	55                   	push   ebp
c001bd83:	55                   	push   ebp
c001bd84:	6a 00                	push   0x0
c001bd86:	51                   	push   ecx
c001bd87:	53                   	push   ebx
c001bd88:	52                   	push   edx
c001bd89:	50                   	push   eax
c001bd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bd8e:	e8 03 fb ff ff       	call   c001b896 <ATA::access(unsigned long long, int, void*, bool)>
c001bd93:	83 c4 20             	add    esp,0x20
c001bd96:	85 c0                	test   eax,eax
c001bd98:	89 c6                	mov    esi,eax
c001bd9a:	0f 85 79 01 00 00    	jne    c001bf19 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001bda0:	50                   	push   eax
c001bda1:	bd 10 27 00 00       	mov    ebp,0x2710
c001bda6:	50                   	push   eax
c001bda7:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001bdad:	6a 0f                	push   0xf
c001bdaf:	6a 00                	push   0x0
c001bdb1:	89 da                	mov    edx,ebx
c001bdb3:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001bdb9:	e8 7f ff ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001bdbe:	59                   	pop    ecx
c001bdbf:	b9 0a 00 00 00       	mov    ecx,0xa
c001bdc4:	5b                   	pop    ebx
c001bdc5:	0f b6 d8             	movzx  ebx,al
c001bdc8:	89 d0                	mov    eax,edx
c001bdca:	53                   	push   ebx
c001bdcb:	99                   	cdq    
c001bdcc:	f7 fd                	idiv   ebp
c001bdce:	99                   	cdq    
c001bdcf:	f7 f9                	idiv   ecx
c001bdd1:	80 c2 30             	add    dl,0x30
c001bdd4:	0f b6 d2             	movzx  edx,dl
c001bdd7:	52                   	push   edx
c001bdd8:	e8 4f ff ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bddd:	5f                   	pop    edi
c001bdde:	bf e8 03 00 00       	mov    edi,0x3e8
c001bde3:	5a                   	pop    edx
c001bde4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bdea:	53                   	push   ebx
c001bdeb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bdf0:	99                   	cdq    
c001bdf1:	f7 ff                	idiv   edi
c001bdf3:	99                   	cdq    
c001bdf4:	f7 f9                	idiv   ecx
c001bdf6:	88 d0                	mov    al,dl
c001bdf8:	04 30                	add    al,0x30
c001bdfa:	0f b6 c0             	movzx  eax,al
c001bdfd:	50                   	push   eax
c001bdfe:	e8 29 ff ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001be03:	5f                   	pop    edi
c001be04:	bf 64 00 00 00       	mov    edi,0x64
c001be09:	5a                   	pop    edx
c001be0a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001be10:	53                   	push   ebx
c001be11:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be16:	99                   	cdq    
c001be17:	f7 ff                	idiv   edi
c001be19:	99                   	cdq    
c001be1a:	f7 f9                	idiv   ecx
c001be1c:	88 d0                	mov    al,dl
c001be1e:	04 30                	add    al,0x30
c001be20:	0f b6 c0             	movzx  eax,al
c001be23:	50                   	push   eax
c001be24:	e8 03 ff ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001be29:	5a                   	pop    edx
c001be2a:	5a                   	pop    edx
c001be2b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001be31:	53                   	push   ebx
c001be32:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be37:	99                   	cdq    
c001be38:	f7 f9                	idiv   ecx
c001be3a:	99                   	cdq    
c001be3b:	f7 f9                	idiv   ecx
c001be3d:	88 d0                	mov    al,dl
c001be3f:	04 30                	add    al,0x30
c001be41:	0f b6 c0             	movzx  eax,al
c001be44:	50                   	push   eax
c001be45:	e8 e2 fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001be4a:	5a                   	pop    edx
c001be4b:	5a                   	pop    edx
c001be4c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001be52:	53                   	push   ebx
c001be53:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001be58:	99                   	cdq    
c001be59:	f7 f9                	idiv   ecx
c001be5b:	88 d0                	mov    al,dl
c001be5d:	04 30                	add    al,0x30
c001be5f:	0f b6 c0             	movzx  eax,al
c001be62:	50                   	push   eax
c001be63:	e8 c4 fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001be68:	5a                   	pop    edx
c001be69:	5a                   	pop    edx
c001be6a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001be70:	53                   	push   ebx
c001be71:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001be76:	99                   	cdq    
c001be77:	f7 fd                	idiv   ebp
c001be79:	99                   	cdq    
c001be7a:	f7 f9                	idiv   ecx
c001be7c:	88 d0                	mov    al,dl
c001be7e:	04 30                	add    al,0x30
c001be80:	0f b6 c0             	movzx  eax,al
c001be83:	50                   	push   eax
c001be84:	e8 a3 fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001be89:	5d                   	pop    ebp
c001be8a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001be8f:	5a                   	pop    edx
c001be90:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001be96:	53                   	push   ebx
c001be97:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001be9c:	99                   	cdq    
c001be9d:	f7 fd                	idiv   ebp
c001be9f:	99                   	cdq    
c001bea0:	f7 f9                	idiv   ecx
c001bea2:	88 d0                	mov    al,dl
c001bea4:	04 30                	add    al,0x30
c001bea6:	0f b6 c0             	movzx  eax,al
c001bea9:	50                   	push   eax
c001beaa:	e8 7d fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001beaf:	5d                   	pop    ebp
c001beb0:	5a                   	pop    edx
c001beb1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001beb7:	53                   	push   ebx
c001beb8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bebd:	99                   	cdq    
c001bebe:	f7 ff                	idiv   edi
c001bec0:	99                   	cdq    
c001bec1:	f7 f9                	idiv   ecx
c001bec3:	88 d0                	mov    al,dl
c001bec5:	04 30                	add    al,0x30
c001bec7:	0f b6 c0             	movzx  eax,al
c001beca:	50                   	push   eax
c001becb:	e8 5c fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bed0:	5f                   	pop    edi
c001bed1:	5d                   	pop    ebp
c001bed2:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bed8:	53                   	push   ebx
c001bed9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bede:	99                   	cdq    
c001bedf:	f7 f9                	idiv   ecx
c001bee1:	99                   	cdq    
c001bee2:	f7 f9                	idiv   ecx
c001bee4:	88 d0                	mov    al,dl
c001bee6:	04 30                	add    al,0x30
c001bee8:	0f b6 c0             	movzx  eax,al
c001beeb:	50                   	push   eax
c001beec:	e8 3b fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bef1:	5a                   	pop    edx
c001bef2:	5f                   	pop    edi
c001bef3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bef9:	53                   	push   ebx
c001befa:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001beff:	99                   	cdq    
c001bf00:	f7 f9                	idiv   ecx
c001bf02:	80 c2 30             	add    dl,0x30
c001bf05:	0f b6 d2             	movzx  edx,dl
c001bf08:	52                   	push   edx
c001bf09:	e8 1e fe ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bf0e:	83 c4 10             	add    esp,0x10
c001bf11:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bf17:	eb 05                	jmp    c001bf1e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bf19:	be 01 00 00 00       	mov    esi,0x1
c001bf1e:	83 c4 0c             	add    esp,0xc
c001bf21:	89 f0                	mov    eax,esi
c001bf23:	5b                   	pop    ebx
c001bf24:	5e                   	pop    esi
c001bf25:	5f                   	pop    edi
c001bf26:	5d                   	pop    ebp
c001bf27:	c3                   	ret    

c001bf28 <ATA::write(unsigned long long, int, void*)>:
c001bf28:	55                   	push   ebp
c001bf29:	57                   	push   edi
c001bf2a:	56                   	push   esi
c001bf2b:	be 04 00 00 00       	mov    esi,0x4
c001bf30:	53                   	push   ebx
c001bf31:	83 ec 0c             	sub    esp,0xc
c001bf34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bf38:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bf40:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf44:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bf47:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bf4d:	0f 87 a5 01 00 00    	ja     c001c0f8 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001bf53:	85 c9                	test   ecx,ecx
c001bf55:	be 06 00 00 00       	mov    esi,0x6
c001bf5a:	0f 84 98 01 00 00    	je     c001c0f8 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001bf60:	55                   	push   ebp
c001bf61:	55                   	push   ebp
c001bf62:	6a 01                	push   0x1
c001bf64:	51                   	push   ecx
c001bf65:	53                   	push   ebx
c001bf66:	52                   	push   edx
c001bf67:	50                   	push   eax
c001bf68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bf6c:	e8 25 f9 ff ff       	call   c001b896 <ATA::access(unsigned long long, int, void*, bool)>
c001bf71:	83 c4 20             	add    esp,0x20
c001bf74:	85 c0                	test   eax,eax
c001bf76:	89 c6                	mov    esi,eax
c001bf78:	0f 85 75 01 00 00    	jne    c001c0f3 <ATA::write(unsigned long long, int, void*)+0x1cb>
c001bf7e:	50                   	push   eax
c001bf7f:	bd 10 27 00 00       	mov    ebp,0x2710
c001bf84:	50                   	push   eax
c001bf85:	6a 0f                	push   0xf
c001bf87:	6a 00                	push   0x0
c001bf89:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001bf8f:	e8 a9 fd ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001bf94:	5a                   	pop    edx
c001bf95:	59                   	pop    ecx
c001bf96:	b9 0a 00 00 00       	mov    ecx,0xa
c001bf9b:	0f b6 d8             	movzx  ebx,al
c001bf9e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bfa3:	53                   	push   ebx
c001bfa4:	99                   	cdq    
c001bfa5:	f7 fd                	idiv   ebp
c001bfa7:	99                   	cdq    
c001bfa8:	f7 f9                	idiv   ecx
c001bfaa:	88 d0                	mov    al,dl
c001bfac:	04 30                	add    al,0x30
c001bfae:	0f b6 c0             	movzx  eax,al
c001bfb1:	50                   	push   eax
c001bfb2:	e8 75 fd ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bfb7:	5f                   	pop    edi
c001bfb8:	bf e8 03 00 00       	mov    edi,0x3e8
c001bfbd:	5a                   	pop    edx
c001bfbe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bfc4:	53                   	push   ebx
c001bfc5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bfca:	99                   	cdq    
c001bfcb:	f7 ff                	idiv   edi
c001bfcd:	99                   	cdq    
c001bfce:	f7 f9                	idiv   ecx
c001bfd0:	88 d0                	mov    al,dl
c001bfd2:	04 30                	add    al,0x30
c001bfd4:	0f b6 c0             	movzx  eax,al
c001bfd7:	50                   	push   eax
c001bfd8:	e8 4f fd ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001bfdd:	5f                   	pop    edi
c001bfde:	bf 64 00 00 00       	mov    edi,0x64
c001bfe3:	5a                   	pop    edx
c001bfe4:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bfea:	53                   	push   ebx
c001bfeb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bff0:	99                   	cdq    
c001bff1:	f7 ff                	idiv   edi
c001bff3:	99                   	cdq    
c001bff4:	f7 f9                	idiv   ecx
c001bff6:	88 d0                	mov    al,dl
c001bff8:	04 30                	add    al,0x30
c001bffa:	0f b6 c0             	movzx  eax,al
c001bffd:	50                   	push   eax
c001bffe:	e8 29 fd ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c003:	5a                   	pop    edx
c001c004:	5a                   	pop    edx
c001c005:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c00b:	53                   	push   ebx
c001c00c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c011:	99                   	cdq    
c001c012:	f7 f9                	idiv   ecx
c001c014:	99                   	cdq    
c001c015:	f7 f9                	idiv   ecx
c001c017:	88 d0                	mov    al,dl
c001c019:	04 30                	add    al,0x30
c001c01b:	0f b6 c0             	movzx  eax,al
c001c01e:	50                   	push   eax
c001c01f:	e8 08 fd ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c024:	5a                   	pop    edx
c001c025:	5a                   	pop    edx
c001c026:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c02c:	53                   	push   ebx
c001c02d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c032:	99                   	cdq    
c001c033:	f7 f9                	idiv   ecx
c001c035:	88 d0                	mov    al,dl
c001c037:	04 30                	add    al,0x30
c001c039:	0f b6 c0             	movzx  eax,al
c001c03c:	50                   	push   eax
c001c03d:	e8 ea fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c042:	5a                   	pop    edx
c001c043:	5a                   	pop    edx
c001c044:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c04a:	53                   	push   ebx
c001c04b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c050:	99                   	cdq    
c001c051:	f7 fd                	idiv   ebp
c001c053:	99                   	cdq    
c001c054:	f7 f9                	idiv   ecx
c001c056:	88 d0                	mov    al,dl
c001c058:	04 30                	add    al,0x30
c001c05a:	0f b6 c0             	movzx  eax,al
c001c05d:	50                   	push   eax
c001c05e:	e8 c9 fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c063:	5d                   	pop    ebp
c001c064:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c069:	5a                   	pop    edx
c001c06a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c070:	53                   	push   ebx
c001c071:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c076:	99                   	cdq    
c001c077:	f7 fd                	idiv   ebp
c001c079:	99                   	cdq    
c001c07a:	f7 f9                	idiv   ecx
c001c07c:	88 d0                	mov    al,dl
c001c07e:	04 30                	add    al,0x30
c001c080:	0f b6 c0             	movzx  eax,al
c001c083:	50                   	push   eax
c001c084:	e8 a3 fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c089:	5d                   	pop    ebp
c001c08a:	5a                   	pop    edx
c001c08b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c091:	53                   	push   ebx
c001c092:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c097:	99                   	cdq    
c001c098:	f7 ff                	idiv   edi
c001c09a:	99                   	cdq    
c001c09b:	f7 f9                	idiv   ecx
c001c09d:	88 d0                	mov    al,dl
c001c09f:	04 30                	add    al,0x30
c001c0a1:	0f b6 c0             	movzx  eax,al
c001c0a4:	50                   	push   eax
c001c0a5:	e8 82 fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c0aa:	5f                   	pop    edi
c001c0ab:	5d                   	pop    ebp
c001c0ac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c0b2:	53                   	push   ebx
c001c0b3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0b8:	99                   	cdq    
c001c0b9:	f7 f9                	idiv   ecx
c001c0bb:	99                   	cdq    
c001c0bc:	f7 f9                	idiv   ecx
c001c0be:	88 d0                	mov    al,dl
c001c0c0:	04 30                	add    al,0x30
c001c0c2:	0f b6 c0             	movzx  eax,al
c001c0c5:	50                   	push   eax
c001c0c6:	e8 61 fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c0cb:	5a                   	pop    edx
c001c0cc:	5f                   	pop    edi
c001c0cd:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c0d3:	53                   	push   ebx
c001c0d4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c0d9:	99                   	cdq    
c001c0da:	f7 f9                	idiv   ecx
c001c0dc:	80 c2 30             	add    dl,0x30
c001c0df:	0f b6 d2             	movzx  edx,dl
c001c0e2:	52                   	push   edx
c001c0e3:	e8 44 fc ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001c0e8:	83 c4 10             	add    esp,0x10
c001c0eb:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c0f1:	eb 05                	jmp    c001c0f8 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c0f3:	be 01 00 00 00       	mov    esi,0x1
c001c0f8:	83 c4 0c             	add    esp,0xc
c001c0fb:	89 f0                	mov    eax,esi
c001c0fd:	5b                   	pop    ebx
c001c0fe:	5e                   	pop    esi
c001c0ff:	5f                   	pop    edi
c001c100:	5d                   	pop    ebp
c001c101:	c3                   	ret    

c001c102 <ATAPI::write(unsigned long long, int, void*)>:
c001c102:	b8 03 00 00 00       	mov    eax,0x3
c001c107:	c3                   	ret    

c001c108 <ATAPI::close(int, int, void*)>:
c001c108:	83 ec 0c             	sub    esp,0xc
c001c10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c115:	85 c0                	test   eax,eax
c001c117:	74 0c                	je     c001c125 <ATAPI::close(int, int, void*)+0x1d>
c001c119:	8b 10                	mov    edx,DWORD PTR [eax]
c001c11b:	83 ec 0c             	sub    esp,0xc
c001c11e:	50                   	push   eax
c001c11f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c122:	83 c4 10             	add    esp,0x10
c001c125:	31 c0                	xor    eax,eax
c001c127:	83 c4 0c             	add    esp,0xc
c001c12a:	c3                   	ret    
c001c12b:	90                   	nop

c001c12c <ATAPI::ATAPI()>:
c001c12c:	83 ec 1c             	sub    esp,0x1c
c001c12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c133:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c13b:	c7 44 24 04 b5 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218b5
c001c143:	89 04 24             	mov    DWORD PTR [esp],eax
c001c146:	e8 7d 00 ff ff       	call   c000c1c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c14b:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001c150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c154:	89 10                	mov    DWORD PTR [eax],edx
c001c156:	90                   	nop
c001c157:	83 c4 1c             	add    esp,0x1c
c001c15a:	c3                   	ret    
c001c15b:	90                   	nop

c001c15c <ATAPI::readyForCommand()>:
c001c15c:	56                   	push   esi
c001c15d:	53                   	push   ebx
c001c15e:	53                   	push   ebx
c001c15f:	31 db                	xor    ebx,ebx
c001c161:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c165:	51                   	push   ecx
c001c166:	6a 0c                	push   0xc
c001c168:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c16f:	50                   	push   eax
c001c170:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c176:	e8 c1 e8 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001c17b:	83 c4 10             	add    esp,0x10
c001c17e:	a8 88                	test   al,0x88
c001c180:	74 25                	je     c001c1a7 <ATAPI::readyForCommand()+0x4b>
c001c182:	43                   	inc    ebx
c001c183:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c189:	7e da                	jle    c001c165 <ATAPI::readyForCommand()+0x9>
c001c18b:	83 ec 0c             	sub    esp,0xc
c001c18e:	68 5e 01 00 00       	push   0x15e
c001c193:	e8 84 91 ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c1a1:	75 c2                	jne    c001c165 <ATAPI::readyForCommand()+0x9>
c001c1a3:	31 c0                	xor    eax,eax
c001c1a5:	eb 02                	jmp    c001c1a9 <ATAPI::readyForCommand()+0x4d>
c001c1a7:	b0 01                	mov    al,0x1
c001c1a9:	5a                   	pop    edx
c001c1aa:	5b                   	pop    ebx
c001c1ab:	5e                   	pop    esi
c001c1ac:	c3                   	ret    
c001c1ad:	90                   	nop

c001c1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c1ae:	55                   	push   ebp
c001c1af:	57                   	push   edi
c001c1b0:	56                   	push   esi
c001c1b1:	53                   	push   ebx
c001c1b2:	83 ec 20             	sub    esp,0x20
c001c1b5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c1b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c1bd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c1c1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1c5:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c1c9:	6a 01                	push   0x1
c001c1cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c1d2:	50                   	push   eax
c001c1d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c1d9:	e8 98 e9 ff ff       	call   c001ab76 <IDE::enableIRQs(unsigned char, bool)>
c001c1de:	5e                   	pop    esi
c001c1df:	58                   	pop    eax
c001c1e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c1e7:	50                   	push   eax
c001c1e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c1ee:	e8 75 e7 ff ff       	call   c001a968 <IDE::prepareInterrupt(unsigned char)>
c001c1f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1f6:	e8 61 ff ff ff       	call   c001c15c <ATAPI::readyForCommand()>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	84 c0                	test   al,al
c001c200:	75 0a                	jne    c001c20c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c202:	bb 01 00 00 00       	mov    ebx,0x1
c001c207:	e9 57 02 00 00       	jmp    c001c463 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c20c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c212:	c0 e0 04             	shl    al,0x4
c001c215:	0f b6 c0             	movzx  eax,al
c001c218:	50                   	push   eax
c001c219:	6a 06                	push   0x6
c001c21b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c222:	50                   	push   eax
c001c223:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c229:	e8 60 e7 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c22e:	6a 00                	push   0x0
c001c230:	6a 01                	push   0x1
c001c232:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c239:	50                   	push   eax
c001c23a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c240:	e8 49 e7 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c245:	83 c4 20             	add    esp,0x20
c001c248:	0f b6 c3             	movzx  eax,bl
c001c24b:	50                   	push   eax
c001c24c:	0f b6 df             	movzx  ebx,bh
c001c24f:	6a 04                	push   0x4
c001c251:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c258:	50                   	push   eax
c001c259:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c25f:	e8 2a e7 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c264:	53                   	push   ebx
c001c265:	6a 05                	push   0x5
c001c267:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c26e:	50                   	push   eax
c001c26f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c275:	e8 14 e7 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c27a:	83 c4 20             	add    esp,0x20
c001c27d:	68 a0 00 00 00       	push   0xa0
c001c282:	6a 07                	push   0x7
c001c284:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c28b:	50                   	push   eax
c001c28c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c292:	e8 f7 e6 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c297:	83 c4 0c             	add    esp,0xc
c001c29a:	6a 01                	push   0x1
c001c29c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c2a3:	50                   	push   eax
c001c2a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2aa:	e8 6b f1 ff ff       	call   c001b41a <IDE::polling(unsigned char, unsigned int)>
c001c2af:	83 c4 10             	add    esp,0x10
c001c2b2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c2b8:	84 c0                	test   al,al
c001c2ba:	74 23                	je     c001c2df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c2bc:	0f b6 d8             	movzx  ebx,al
c001c2bf:	0f b6 d2             	movzx  edx,dl
c001c2c2:	53                   	push   ebx
c001c2c3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c2ca:	50                   	push   eax
c001c2cb:	52                   	push   edx
c001c2cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2d2:	e8 71 f0 ff ff       	call   c001b348 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	e9 84 01 00 00       	jmp    c001c463 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c2df:	53                   	push   ebx
c001c2e0:	0f b6 d2             	movzx  edx,dl
c001c2e3:	53                   	push   ebx
c001c2e4:	52                   	push   edx
c001c2e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c2eb:	e8 8c e6 ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001c2f0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c2f4:	b9 06 00 00 00       	mov    ecx,0x6
c001c2f9:	89 c2                	mov    edx,eax
c001c2fb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c2fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c302:	83 c4 10             	add    esp,0x10
c001c305:	85 db                	test   ebx,ebx
c001c307:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c30d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c314:	0f 84 e9 00 00 00    	je     c001c403 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001c31a:	51                   	push   ecx
c001c31b:	51                   	push   ecx
c001c31c:	52                   	push   edx
c001c31d:	50                   	push   eax
c001c31e:	e8 b5 e7 ff ff       	call   c001aad8 <IDE::waitInterrupt(unsigned char)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	84 c0                	test   al,al
c001c328:	0f 84 d4 fe ff ff    	je     c001c202 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c32e:	56                   	push   esi
c001c32f:	56                   	push   esi
c001c330:	31 f6                	xor    esi,esi
c001c332:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c339:	50                   	push   eax
c001c33a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c340:	e8 23 e6 ff ff       	call   c001a968 <IDE::prepareInterrupt(unsigned char)>
c001c345:	83 c4 0c             	add    esp,0xc
c001c348:	6a 04                	push   0x4
c001c34a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c351:	50                   	push   eax
c001c352:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c358:	e8 df e6 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001c35d:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001c361:	83 c4 0c             	add    esp,0xc
c001c364:	6a 05                	push   0x5
c001c366:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c36d:	50                   	push   eax
c001c36e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c374:	e8 c3 e6 ff ff       	call   c001aa3c <IDE::read(unsigned char, unsigned char)>
c001c379:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c37e:	0f b6 c0             	movzx  eax,al
c001c381:	c1 e0 08             	shl    eax,0x8
c001c384:	09 d0                	or     eax,edx
c001c386:	d1 f8                	sar    eax,1
c001c388:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c38c:	83 c4 10             	add    esp,0x10
c001c38f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c394:	74 54                	je     c001c3ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001c396:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c39a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c3a0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c3a7:	75 0b                	jne    c001c3b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c3a9:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c3ac:	01 cd                	add    ebp,ecx
c001c3ae:	4b                   	dec    ebx
c001c3af:	e9 51 ff ff ff       	jmp    c001c305 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c3b4:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001c3b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3bd:	51                   	push   ecx
c001c3be:	51                   	push   ecx
c001c3bf:	52                   	push   edx
c001c3c0:	50                   	push   eax
c001c3c1:	e8 b6 e5 ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001c3c6:	89 c2                	mov    edx,eax
c001c3c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3cc:	66 ef                	out    dx,ax
c001c3ce:	46                   	inc    esi
c001c3cf:	83 c4 10             	add    esp,0x10
c001c3d2:	eb c2                	jmp    c001c396 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001c3d4:	51                   	push   ecx
c001c3d5:	51                   	push   ecx
c001c3d6:	52                   	push   edx
c001c3d7:	50                   	push   eax
c001c3d8:	e8 9f e5 ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001c3dd:	89 c2                	mov    edx,eax
c001c3df:	66 ed                	in     ax,dx
c001c3e1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c3e6:	83 c4 10             	add    esp,0x10
c001c3e9:	46                   	inc    esi
c001c3ea:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c3ee:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c3f4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c3fb:	75 d7                	jne    c001c3d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c3fd:	01 f6                	add    esi,esi
c001c3ff:	01 f5                	add    ebp,esi
c001c401:	eb ab                	jmp    c001c3ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001c403:	51                   	push   ecx
c001c404:	51                   	push   ecx
c001c405:	52                   	push   edx
c001c406:	50                   	push   eax
c001c407:	e8 cc e6 ff ff       	call   c001aad8 <IDE::waitInterrupt(unsigned char)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	84 c0                	test   al,al
c001c411:	0f 84 eb fd ff ff    	je     c001c202 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c417:	52                   	push   edx
c001c418:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c41d:	52                   	push   edx
c001c41e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c425:	50                   	push   eax
c001c426:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c42c:	e8 37 e5 ff ff       	call   c001a968 <IDE::prepareInterrupt(unsigned char)>
c001c431:	83 c4 10             	add    esp,0x10
c001c434:	50                   	push   eax
c001c435:	50                   	push   eax
c001c436:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c43d:	50                   	push   eax
c001c43e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c444:	e8 33 e5 ff ff       	call   c001a97c <IDE::getBase(unsigned char)>
c001c449:	0f b7 c0             	movzx  eax,ax
c001c44c:	8d 50 07             	lea    edx,[eax+0x7]
c001c44f:	ec                   	in     al,dx
c001c450:	83 c4 10             	add    esp,0x10
c001c453:	a8 88                	test   al,0x88
c001c455:	74 0a                	je     c001c461 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c457:	4b                   	dec    ebx
c001c458:	75 da                	jne    c001c434 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001c45a:	bb 02 00 00 00       	mov    ebx,0x2
c001c45f:	eb 02                	jmp    c001c463 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c461:	31 db                	xor    ebx,ebx
c001c463:	83 c4 1c             	add    esp,0x1c
c001c466:	89 d8                	mov    eax,ebx
c001c468:	5b                   	pop    ebx
c001c469:	5e                   	pop    esi
c001c46a:	5f                   	pop    edi
c001c46b:	5d                   	pop    ebp
c001c46c:	c3                   	ret    
c001c46d:	90                   	nop

c001c46e <ATAPI::diskRemoved()>:
c001c46e:	53                   	push   ebx
c001c46f:	83 ec 14             	sub    esp,0x14
c001c472:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c476:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c47d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c483:	e8 06 0c ff ff       	call   c000d08e <LogicalDisk::unmount()>
c001c488:	58                   	pop    eax
c001c489:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c48f:	e8 a8 15 ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c001c494:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c49a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c49e:	83 c4 18             	add    esp,0x18
c001c4a1:	5b                   	pop    ebx
c001c4a2:	e9 85 15 ff ff       	jmp    c000da2c <VCache::invalidateReadBuffer()>
c001c4a7:	90                   	nop

c001c4a8 <ATAPI::eject()>:
c001c4a8:	57                   	push   edi
c001c4a9:	b9 03 00 00 00       	mov    ecx,0x3
c001c4ae:	53                   	push   ebx
c001c4af:	83 ec 14             	sub    esp,0x14
c001c4b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c4b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c4ba:	fc                   	cld    
c001c4bb:	31 c0                	xor    eax,eax
c001c4bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c4bf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c4c4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c4c9:	50                   	push   eax
c001c4ca:	50                   	push   eax
c001c4cb:	6a 00                	push   0x0
c001c4cd:	6a 00                	push   0x0
c001c4cf:	6a 00                	push   0x0
c001c4d1:	6a 02                	push   0x2
c001c4d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c4d7:	50                   	push   eax
c001c4d8:	53                   	push   ebx
c001c4d9:	e8 d0 fc ff ff       	call   c001c1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c4de:	83 c4 14             	add    esp,0x14
c001c4e1:	53                   	push   ebx
c001c4e2:	e8 87 ff ff ff       	call   c001c46e <ATAPI::diskRemoved()>
c001c4e7:	83 c4 24             	add    esp,0x24
c001c4ea:	31 c0                	xor    eax,eax
c001c4ec:	5b                   	pop    ebx
c001c4ed:	5f                   	pop    edi
c001c4ee:	c3                   	ret    
c001c4ef:	90                   	nop

c001c4f0 <ATAPI::diskInserted()>:
c001c4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f4:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c4fb:	c3                   	ret    

c001c4fc <ATAPI::detectMedia()>:
c001c4fc:	56                   	push   esi
c001c4fd:	53                   	push   ebx
c001c4fe:	83 ec 28             	sub    esp,0x28
c001c501:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c505:	6a 0c                	push   0xc
c001c507:	6a 00                	push   0x0
c001c509:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c50d:	56                   	push   esi
c001c50e:	e8 dd 3f fe ff       	call   c00004f0 <memset>
c001c513:	58                   	pop    eax
c001c514:	5a                   	pop    edx
c001c515:	6a 00                	push   0x0
c001c517:	6a 00                	push   0x0
c001c519:	6a 00                	push   0x0
c001c51b:	6a 00                	push   0x0
c001c51d:	56                   	push   esi
c001c51e:	53                   	push   ebx
c001c51f:	e8 8a fc ff ff       	call   c001c1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c524:	83 c4 1c             	add    esp,0x1c
c001c527:	6a 0c                	push   0xc
c001c529:	6a 00                	push   0x0
c001c52b:	56                   	push   esi
c001c52c:	e8 bf 3f fe ff       	call   c00004f0 <memset>
c001c531:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c536:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c53b:	59                   	pop    ecx
c001c53c:	58                   	pop    eax
c001c53d:	6a 01                	push   0x1
c001c53f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c543:	50                   	push   eax
c001c544:	6a 00                	push   0x0
c001c546:	6a 12                	push   0x12
c001c548:	56                   	push   esi
c001c549:	53                   	push   ebx
c001c54a:	e8 5f fc ff ff       	call   c001c1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c54f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c553:	83 c4 20             	add    esp,0x20
c001c556:	24 7f                	and    al,0x7f
c001c558:	3c 70                	cmp    al,0x70
c001c55a:	74 15                	je     c001c571 <ATAPI::detectMedia()+0x75>
c001c55c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c563:	75 0c                	jne    c001c571 <ATAPI::detectMedia()+0x75>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	53                   	push   ebx
c001c569:	e8 82 ff ff ff       	call   c001c4f0 <ATAPI::diskInserted()>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c575:	24 0f                	and    al,0xf
c001c577:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c57c:	75 18                	jne    c001c596 <ATAPI::detectMedia()+0x9a>
c001c57e:	3c 02                	cmp    al,0x2
c001c580:	75 14                	jne    c001c596 <ATAPI::detectMedia()+0x9a>
c001c582:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c589:	74 24                	je     c001c5af <ATAPI::detectMedia()+0xb3>
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	53                   	push   ebx
c001c58f:	e8 da fe ff ff       	call   c001c46e <ATAPI::diskRemoved()>
c001c594:	eb 16                	jmp    c001c5ac <ATAPI::detectMedia()+0xb0>
c001c596:	84 c0                	test   al,al
c001c598:	75 15                	jne    c001c5af <ATAPI::detectMedia()+0xb3>
c001c59a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c5a1:	75 0c                	jne    c001c5af <ATAPI::detectMedia()+0xb3>
c001c5a3:	83 ec 0c             	sub    esp,0xc
c001c5a6:	53                   	push   ebx
c001c5a7:	e8 44 ff ff ff       	call   c001c4f0 <ATAPI::diskInserted()>
c001c5ac:	83 c4 10             	add    esp,0x10
c001c5af:	83 c4 24             	add    esp,0x24
c001c5b2:	5b                   	pop    ebx
c001c5b3:	5e                   	pop    esi
c001c5b4:	c3                   	ret    
c001c5b5:	90                   	nop

c001c5b6 <ATAPI::open(int, int, void*)>:
c001c5b6:	56                   	push   esi
c001c5b7:	53                   	push   ebx
c001c5b8:	50                   	push   eax
c001c5b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5c5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c5cb:	c1 e0 06             	shl    eax,0x6
c001c5ce:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c5d4:	01 d0                	add    eax,edx
c001c5d6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c5dd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c5e3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c5ea:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c5f4:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c5fb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c601:	6a 04                	push   0x4
c001c603:	6a 0c                	push   0xc
c001c605:	51                   	push   ecx
c001c606:	52                   	push   edx
c001c607:	e8 82 e3 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c60c:	90                   	nop
c001c60d:	90                   	nop
c001c60e:	6a 00                	push   0x0
c001c610:	6a 0c                	push   0xc
c001c612:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c619:	50                   	push   eax
c001c61a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c620:	e8 69 e3 ff ff       	call   c001a98e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c625:	83 c4 14             	add    esp,0x14
c001c628:	68 78 01 00 00       	push   0x178
c001c62d:	e8 34 b4 fe ff       	call   c0007a66 <malloc>
c001c632:	83 c4 0c             	add    esp,0xc
c001c635:	6a 00                	push   0x0
c001c637:	68 ff ff ff 7f       	push   0x7fffffff
c001c63c:	6a 00                	push   0x0
c001c63e:	6a 00                	push   0x0
c001c640:	53                   	push   ebx
c001c641:	68 67 19 02 c0       	push   0xc0021967
c001c646:	89 c6                	mov    esi,eax
c001c648:	50                   	push   eax
c001c649:	e8 80 08 ff ff       	call   c000cece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c64e:	83 c4 14             	add    esp,0x14
c001c651:	56                   	push   esi
c001c652:	e8 39 09 ff ff       	call   c000cf90 <LogicalDisk::assignDriveLetter()>
c001c657:	5a                   	pop    edx
c001c658:	59                   	pop    ecx
c001c659:	0f be c0             	movsx  eax,al
c001c65c:	50                   	push   eax
c001c65d:	68 b8 17 02 c0       	push   0xc00217b8
c001c662:	e8 6f e3 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001c667:	58                   	pop    eax
c001c668:	5a                   	pop    edx
c001c669:	56                   	push   esi
c001c66a:	53                   	push   ebx
c001c66b:	e8 92 f7 fe ff       	call   c000be02 <Device::addChild(Device*)>
c001c670:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c676:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c679:	e8 b2 fb fe ff       	call   c000c230 <PhysicalDisk::startCache()>
c001c67e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c685:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c688:	e8 6f fe ff ff       	call   c001c4fc <ATAPI::detectMedia()>
c001c68d:	83 c4 14             	add    esp,0x14
c001c690:	31 c0                	xor    eax,eax
c001c692:	5b                   	pop    ebx
c001c693:	5e                   	pop    esi
c001c694:	c3                   	ret    
c001c695:	90                   	nop

c001c696 <ATAPI::read(unsigned long long, int, void*)>:
c001c696:	55                   	push   ebp
c001c697:	57                   	push   edi
c001c698:	56                   	push   esi
c001c699:	53                   	push   ebx
c001c69a:	83 ec 1c             	sub    esp,0x1c
c001c69d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c6a1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c6a5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c6a9:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c6b0:	74 3a                	je     c001c6ec <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c6b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c6b6:	b9 03 00 00 00       	mov    ecx,0x3
c001c6bb:	fc                   	cld    
c001c6bc:	31 c0                	xor    eax,eax
c001c6be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c6c0:	0f ce                	bswap  esi
c001c6c2:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c6c6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c6cb:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c6cf:	50                   	push   eax
c001c6d0:	50                   	push   eax
c001c6d1:	53                   	push   ebx
c001c6d2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c6d6:	c1 e3 0b             	shl    ebx,0xb
c001c6d9:	6a 00                	push   0x0
c001c6db:	53                   	push   ebx
c001c6dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c6e0:	50                   	push   eax
c001c6e1:	55                   	push   ebp
c001c6e2:	e8 c7 fa ff ff       	call   c001c1ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c6e7:	83 c4 20             	add    esp,0x20
c001c6ea:	eb 1a                	jmp    c001c706 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c6ec:	83 ec 0c             	sub    esp,0xc
c001c6ef:	55                   	push   ebp
c001c6f0:	e8 07 fe ff ff       	call   c001c4fc <ATAPI::detectMedia()>
c001c6f5:	83 c4 10             	add    esp,0x10
c001c6f8:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c6ff:	75 b1                	jne    c001c6b2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c701:	b8 02 00 00 00       	mov    eax,0x2
c001c706:	83 c4 1c             	add    esp,0x1c
c001c709:	5b                   	pop    ebx
c001c70a:	5e                   	pop    esi
c001c70b:	5f                   	pop    edi
c001c70c:	5d                   	pop    ebp
c001c70d:	c3                   	ret    

c001c70e <SATA::close(int, int, void*)>:
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c715:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c71b:	85 c0                	test   eax,eax
c001c71d:	74 0c                	je     c001c72b <SATA::close(int, int, void*)+0x1d>
c001c71f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c721:	83 ec 0c             	sub    esp,0xc
c001c724:	50                   	push   eax
c001c725:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c728:	83 c4 10             	add    esp,0x10
c001c72b:	31 c0                	xor    eax,eax
c001c72d:	83 c4 0c             	add    esp,0xc
c001c730:	c3                   	ret    
c001c731:	90                   	nop

c001c732 <SATA::powerSaving(PowerSavingLevel)>:
c001c732:	c3                   	ret    
c001c733:	90                   	nop

c001c734 <SATA::open(int, int, void*)>:
c001c734:	56                   	push   esi
c001c735:	53                   	push   ebx
c001c736:	50                   	push   eax
c001c737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c73b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c73f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c749:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c74f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c753:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c75d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c767:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c76e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c774:	e8 f3 b5 fe ff       	call   c0007d6c <Phys::allocatePage()>
c001c779:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c77f:	89 c6                	mov    esi,eax
c001c781:	e8 e6 b5 fe ff       	call   c0007d6c <Phys::allocatePage()>
c001c786:	81 c6 00 10 00 00    	add    esi,0x1000
c001c78c:	39 c6                	cmp    esi,eax
c001c78e:	74 10                	je     c001c7a0 <SATA::open(int, int, void*)+0x6c>
c001c790:	83 ec 0c             	sub    esp,0xc
c001c793:	68 00 18 02 c0       	push   0xc0021800
c001c798:	e8 88 3f ff ff       	call   c0010725 <KePanic(char const*)>
c001c79d:	83 c4 10             	add    esp,0x10
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	6a 02                	push   0x2
c001c7a5:	e8 d6 cd fe ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c001c7aa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c7b0:	6a 03                	push   0x3
c001c7b2:	50                   	push   eax
c001c7b3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c7b9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001c7bf:	e8 de d4 fe ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c7c4:	83 c4 14             	add    esp,0x14
c001c7c7:	53                   	push   ebx
c001c7c8:	e8 63 fa fe ff       	call   c000c230 <PhysicalDisk::startCache()>
c001c7cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7d0:	e8 bc 0b ff ff       	call   c000d391 <createPartitionsForDisk(PhysicalDisk*)>
c001c7d5:	83 c4 14             	add    esp,0x14
c001c7d8:	31 c0                	xor    eax,eax
c001c7da:	5b                   	pop    ebx
c001c7db:	5e                   	pop    esi
c001c7dc:	c3                   	ret    
c001c7dd:	90                   	nop

c001c7de <SATA::SATA()>:
c001c7de:	83 ec 1c             	sub    esp,0x1c
c001c7e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7e5:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001c7ed:	c7 44 24 04 14 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021814
c001c7f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001c7f8:	e8 cb f9 fe ff       	call   c000c1c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7fd:	ba 84 18 02 c0       	mov    edx,0xc0021884
c001c802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c806:	89 10                	mov    DWORD PTR [eax],edx
c001c808:	90                   	nop
c001c809:	83 c4 1c             	add    esp,0x1c
c001c80c:	c3                   	ret    
c001c80d:	90                   	nop

c001c80e <SATA::access(unsigned long long, int, void*, bool)>:
c001c80e:	55                   	push   ebp
c001c80f:	57                   	push   edi
c001c810:	56                   	push   esi
c001c811:	53                   	push   ebx
c001c812:	83 ec 2c             	sub    esp,0x2c
c001c815:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c819:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c81e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c822:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c826:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c82a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c82e:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001c832:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c836:	7e 10                	jle    c001c848 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c838:	83 ec 0c             	sub    esp,0xc
c001c83b:	68 24 18 02 c0       	push   0xc0021824
c001c840:	e8 e0 3e ff ff       	call   c0010725 <KePanic(char const*)>
c001c845:	83 c4 10             	add    esp,0x10
c001c848:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c84e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001c854:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001c85a:	89 e8                	mov    eax,ebp
c001c85c:	c1 e0 07             	shl    eax,0x7
c001c85f:	01 d0                	add    eax,edx
c001c861:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c86b:	8d 45 02             	lea    eax,[ebp+0x2]
c001c86e:	51                   	push   ecx
c001c86f:	c1 e0 07             	shl    eax,0x7
c001c872:	51                   	push   ecx
c001c873:	01 d0                	add    eax,edx
c001c875:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c879:	50                   	push   eax
c001c87a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c880:	e8 87 ec ff ff       	call   c001b50c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c889:	83 c4 10             	add    esp,0x10
c001c88c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001c891:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c895:	0f 84 4e 01 00 00    	je     c001c9e9 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001c89b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c89f:	c1 e0 09             	shl    eax,0x9
c001c8a2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c8a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8ab:	74 0e                	je     c001c8bb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001c8ad:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c8b3:	89 c1                	mov    ecx,eax
c001c8b5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c8b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c8bf:	8d 45 02             	lea    eax,[ebp+0x2]
c001c8c2:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001c8c6:	c1 e0 07             	shl    eax,0x7
c001c8c9:	01 d0                	add    eax,edx
c001c8cb:	8b 38                	mov    edi,DWORD PTR [eax]
c001c8cd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c8d3:	80 e1 01             	and    cl,0x1
c001c8d6:	c0 e1 06             	shl    cl,0x6
c001c8d9:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001c8df:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001c8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8e9:	c1 e0 05             	shl    eax,0x5
c001c8ec:	01 c7                	add    edi,eax
c001c8ee:	8a 07                	mov    al,BYTE PTR [edi]
c001c8f0:	24 bf                	and    al,0xbf
c001c8f2:	08 c8                	or     al,cl
c001c8f4:	88 07                	mov    BYTE PTR [edi],al
c001c8f6:	8b 07                	mov    eax,DWORD PTR [edi]
c001c8f8:	25 e0 ff 00 00       	and    eax,0xffe0
c001c8fd:	0d 05 00 01 00       	or     eax,0x10005
c001c902:	89 07                	mov    DWORD PTR [edi],eax
c001c904:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c90a:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001c910:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001c916:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001c919:	50                   	push   eax
c001c91a:	68 90 00 00 00       	push   0x90
c001c91f:	6a 00                	push   0x0
c001c921:	56                   	push   esi
c001c922:	e8 c9 3b fe ff       	call   c00004f0 <memset>
c001c927:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c92d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c931:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c937:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	48                   	dec    eax
c001c93f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c944:	89 c1                	mov    ecx,eax
c001c946:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c94c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c951:	09 c8                	or     eax,ecx
c001c953:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c959:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c95c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c963:	25 00 7f 00 00       	and    eax,0x7f00
c001c968:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c96c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001c971:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001c976:	66 89 06             	mov    WORD PTR [esi],ax
c001c979:	19 c0                	sbb    eax,eax
c001c97b:	24 f0                	and    al,0xf0
c001c97d:	04 35                	add    al,0x35
c001c97f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c986:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001c98a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c98e:	c1 e8 10             	shr    eax,0x10
c001c991:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c998:	c1 e8 18             	shr    eax,0x18
c001c99b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c99e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c9a2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c9a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c9a9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c9ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c9b0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c9b4:	89 ee                	mov    esi,ebp
c001c9b6:	31 c0                	xor    eax,eax
c001c9b8:	c1 e6 07             	shl    esi,0x7
c001c9bb:	01 d6                	add    esi,edx
c001c9bd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c9c3:	f6 c1 88             	test   cl,0x88
c001c9c6:	74 0a                	je     c001c9d2 <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001c9c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c9cd:	74 0a                	je     c001c9d9 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001c9cf:	40                   	inc    eax
c001c9d0:	eb eb                	jmp    c001c9bd <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001c9d2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c9d7:	75 17                	jne    c001c9f0 <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001c9d9:	83 ec 0c             	sub    esp,0xc
c001c9dc:	68 5d 18 02 c0       	push   0xc002185d
c001c9e1:	e8 f0 df fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001c9e6:	83 c4 10             	add    esp,0x10
c001c9e9:	b8 01 00 00 00       	mov    eax,0x1
c001c9ee:	eb 5b                	jmp    c001ca4b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001c9f0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c9f4:	c1 e5 07             	shl    ebp,0x7
c001c9f7:	b8 01 00 00 00       	mov    eax,0x1
c001c9fc:	01 d5                	add    ebp,edx
c001c9fe:	d3 e0                	shl    eax,cl
c001ca00:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ca06:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001ca0c:	85 d0                	test   eax,edx
c001ca0e:	74 16                	je     c001ca26 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001ca10:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001ca16:	0f ba e2 1e          	bt     edx,0x1e
c001ca1a:	73 ea                	jae    c001ca06 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ca1c:	83 ec 0c             	sub    esp,0xc
c001ca1f:	68 6b 18 02 c0       	push   0xc002186b
c001ca24:	eb bb                	jmp    c001c9e1 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001ca26:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001ca2c:	0f ba e0 1e          	bt     eax,0x1e
c001ca30:	72 b7                	jb     c001c9e9 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001ca32:	31 c0                	xor    eax,eax
c001ca34:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ca39:	75 10                	jne    c001ca4b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001ca3b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ca41:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ca45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca4b:	83 c4 2c             	add    esp,0x2c
c001ca4e:	5b                   	pop    ebx
c001ca4f:	5e                   	pop    esi
c001ca50:	5f                   	pop    edi
c001ca51:	5d                   	pop    ebp
c001ca52:	c3                   	ret    
c001ca53:	90                   	nop

c001ca54 <SATA::read(unsigned long long, int, void*)>:
c001ca54:	55                   	push   ebp
c001ca55:	57                   	push   edi
c001ca56:	56                   	push   esi
c001ca57:	be 04 00 00 00       	mov    esi,0x4
c001ca5c:	53                   	push   ebx
c001ca5d:	83 ec 0c             	sub    esp,0xc
c001ca60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ca64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ca68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca6c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ca70:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ca73:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ca79:	0f 87 1c 02 00 00    	ja     c001cc9b <SATA::read(unsigned long long, int, void*)+0x247>
c001ca7f:	85 c9                	test   ecx,ecx
c001ca81:	be 06 00 00 00       	mov    esi,0x6
c001ca86:	0f 84 0f 02 00 00    	je     c001cc9b <SATA::read(unsigned long long, int, void*)+0x247>
c001ca8c:	56                   	push   esi
c001ca8d:	56                   	push   esi
c001ca8e:	6a 00                	push   0x0
c001ca90:	51                   	push   ecx
c001ca91:	53                   	push   ebx
c001ca92:	52                   	push   edx
c001ca93:	50                   	push   eax
c001ca94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ca98:	e8 71 fd ff ff       	call   c001c80e <SATA::access(unsigned long long, int, void*, bool)>
c001ca9d:	83 c4 20             	add    esp,0x20
c001caa0:	85 c0                	test   eax,eax
c001caa2:	89 c6                	mov    esi,eax
c001caa4:	0f 85 ec 01 00 00    	jne    c001cc96 <SATA::read(unsigned long long, int, void*)+0x242>
c001caaa:	50                   	push   eax
c001caab:	bd 10 27 00 00       	mov    ebp,0x2710
c001cab0:	50                   	push   eax
c001cab1:	6a 0f                	push   0xf
c001cab3:	6a 00                	push   0x0
c001cab5:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cabb:	bb 0a 00 00 00       	mov    ebx,0xa
c001cac0:	e8 78 f2 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cac5:	5a                   	pop    edx
c001cac6:	59                   	pop    ecx
c001cac7:	0f b6 c0             	movzx  eax,al
c001caca:	50                   	push   eax
c001cacb:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cad0:	99                   	cdq    
c001cad1:	f7 fd                	idiv   ebp
c001cad3:	99                   	cdq    
c001cad4:	f7 fb                	idiv   ebx
c001cad6:	80 c2 30             	add    dl,0x30
c001cad9:	0f b6 d2             	movzx  edx,dl
c001cadc:	52                   	push   edx
c001cadd:	e8 4a f2 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cae2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cae8:	5f                   	pop    edi
c001cae9:	bf e8 03 00 00       	mov    edi,0x3e8
c001caee:	58                   	pop    eax
c001caef:	6a 0f                	push   0xf
c001caf1:	6a 00                	push   0x0
c001caf3:	e8 45 f2 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001caf8:	5a                   	pop    edx
c001caf9:	59                   	pop    ecx
c001cafa:	0f b6 c0             	movzx  eax,al
c001cafd:	50                   	push   eax
c001cafe:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb03:	99                   	cdq    
c001cb04:	f7 ff                	idiv   edi
c001cb06:	99                   	cdq    
c001cb07:	f7 fb                	idiv   ebx
c001cb09:	80 c2 30             	add    dl,0x30
c001cb0c:	0f b6 d2             	movzx  edx,dl
c001cb0f:	52                   	push   edx
c001cb10:	e8 17 f2 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cb15:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cb1b:	58                   	pop    eax
c001cb1c:	5a                   	pop    edx
c001cb1d:	6a 0f                	push   0xf
c001cb1f:	6a 00                	push   0x0
c001cb21:	e8 17 f2 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cb26:	59                   	pop    ecx
c001cb27:	b9 64 00 00 00       	mov    ecx,0x64
c001cb2c:	5a                   	pop    edx
c001cb2d:	0f b6 c0             	movzx  eax,al
c001cb30:	50                   	push   eax
c001cb31:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb36:	99                   	cdq    
c001cb37:	f7 f9                	idiv   ecx
c001cb39:	99                   	cdq    
c001cb3a:	f7 fb                	idiv   ebx
c001cb3c:	80 c2 30             	add    dl,0x30
c001cb3f:	0f b6 d2             	movzx  edx,dl
c001cb42:	52                   	push   edx
c001cb43:	e8 e4 f1 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cb48:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cb4e:	59                   	pop    ecx
c001cb4f:	58                   	pop    eax
c001cb50:	6a 0f                	push   0xf
c001cb52:	6a 00                	push   0x0
c001cb54:	e8 e4 f1 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cb59:	5a                   	pop    edx
c001cb5a:	59                   	pop    ecx
c001cb5b:	0f b6 c0             	movzx  eax,al
c001cb5e:	50                   	push   eax
c001cb5f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb64:	99                   	cdq    
c001cb65:	f7 fb                	idiv   ebx
c001cb67:	99                   	cdq    
c001cb68:	f7 fb                	idiv   ebx
c001cb6a:	80 c2 30             	add    dl,0x30
c001cb6d:	0f b6 d2             	movzx  edx,dl
c001cb70:	52                   	push   edx
c001cb71:	e8 b6 f1 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cb76:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cb7c:	58                   	pop    eax
c001cb7d:	5a                   	pop    edx
c001cb7e:	6a 0f                	push   0xf
c001cb80:	6a 00                	push   0x0
c001cb82:	e8 b6 f1 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cb87:	59                   	pop    ecx
c001cb88:	5a                   	pop    edx
c001cb89:	0f b6 c0             	movzx  eax,al
c001cb8c:	50                   	push   eax
c001cb8d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cb92:	99                   	cdq    
c001cb93:	f7 fb                	idiv   ebx
c001cb95:	80 c2 30             	add    dl,0x30
c001cb98:	0f b6 d2             	movzx  edx,dl
c001cb9b:	52                   	push   edx
c001cb9c:	e8 8b f1 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cba1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cba7:	59                   	pop    ecx
c001cba8:	58                   	pop    eax
c001cba9:	6a 0f                	push   0xf
c001cbab:	6a 00                	push   0x0
c001cbad:	e8 8b f1 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cbb2:	5a                   	pop    edx
c001cbb3:	59                   	pop    ecx
c001cbb4:	0f b6 c0             	movzx  eax,al
c001cbb7:	50                   	push   eax
c001cbb8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cbbd:	99                   	cdq    
c001cbbe:	f7 fd                	idiv   ebp
c001cbc0:	99                   	cdq    
c001cbc1:	f7 fb                	idiv   ebx
c001cbc3:	80 c2 30             	add    dl,0x30
c001cbc6:	0f b6 d2             	movzx  edx,dl
c001cbc9:	52                   	push   edx
c001cbca:	e8 5d f1 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cbcf:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cbd5:	5d                   	pop    ebp
c001cbd6:	58                   	pop    eax
c001cbd7:	6a 0f                	push   0xf
c001cbd9:	6a 00                	push   0x0
c001cbdb:	e8 5d f1 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cbe0:	5a                   	pop    edx
c001cbe1:	59                   	pop    ecx
c001cbe2:	0f b6 c0             	movzx  eax,al
c001cbe5:	50                   	push   eax
c001cbe6:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cbeb:	99                   	cdq    
c001cbec:	f7 ff                	idiv   edi
c001cbee:	99                   	cdq    
c001cbef:	f7 fb                	idiv   ebx
c001cbf1:	80 c2 30             	add    dl,0x30
c001cbf4:	0f b6 d2             	movzx  edx,dl
c001cbf7:	52                   	push   edx
c001cbf8:	e8 2f f1 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cbfd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cc03:	5f                   	pop    edi
c001cc04:	5d                   	pop    ebp
c001cc05:	6a 0f                	push   0xf
c001cc07:	6a 00                	push   0x0
c001cc09:	e8 2f f1 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cc0e:	5a                   	pop    edx
c001cc0f:	59                   	pop    ecx
c001cc10:	b9 64 00 00 00       	mov    ecx,0x64
c001cc15:	0f b6 c0             	movzx  eax,al
c001cc18:	50                   	push   eax
c001cc19:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc1e:	99                   	cdq    
c001cc1f:	f7 f9                	idiv   ecx
c001cc21:	99                   	cdq    
c001cc22:	f7 fb                	idiv   ebx
c001cc24:	88 d0                	mov    al,dl
c001cc26:	04 30                	add    al,0x30
c001cc28:	0f b6 c0             	movzx  eax,al
c001cc2b:	50                   	push   eax
c001cc2c:	e8 fb f0 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cc31:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cc37:	5f                   	pop    edi
c001cc38:	5d                   	pop    ebp
c001cc39:	6a 0f                	push   0xf
c001cc3b:	6a 00                	push   0x0
c001cc3d:	e8 fb f0 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cc42:	5a                   	pop    edx
c001cc43:	59                   	pop    ecx
c001cc44:	0f b6 c0             	movzx  eax,al
c001cc47:	50                   	push   eax
c001cc48:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc4d:	99                   	cdq    
c001cc4e:	f7 fb                	idiv   ebx
c001cc50:	99                   	cdq    
c001cc51:	f7 fb                	idiv   ebx
c001cc53:	88 d0                	mov    al,dl
c001cc55:	04 30                	add    al,0x30
c001cc57:	0f b6 c0             	movzx  eax,al
c001cc5a:	50                   	push   eax
c001cc5b:	e8 cc f0 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cc60:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cc66:	5f                   	pop    edi
c001cc67:	5d                   	pop    ebp
c001cc68:	6a 0f                	push   0xf
c001cc6a:	6a 00                	push   0x0
c001cc6c:	e8 cc f0 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cc71:	5a                   	pop    edx
c001cc72:	59                   	pop    ecx
c001cc73:	0f b6 c0             	movzx  eax,al
c001cc76:	50                   	push   eax
c001cc77:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cc7c:	99                   	cdq    
c001cc7d:	f7 fb                	idiv   ebx
c001cc7f:	80 c2 30             	add    dl,0x30
c001cc82:	0f b6 d2             	movzx  edx,dl
c001cc85:	52                   	push   edx
c001cc86:	e8 a1 f0 ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cc8b:	83 c4 10             	add    esp,0x10
c001cc8e:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cc94:	eb 05                	jmp    c001cc9b <SATA::read(unsigned long long, int, void*)+0x247>
c001cc96:	be 01 00 00 00       	mov    esi,0x1
c001cc9b:	83 c4 0c             	add    esp,0xc
c001cc9e:	89 f0                	mov    eax,esi
c001cca0:	5b                   	pop    ebx
c001cca1:	5e                   	pop    esi
c001cca2:	5f                   	pop    edi
c001cca3:	5d                   	pop    ebp
c001cca4:	c3                   	ret    
c001cca5:	90                   	nop

c001cca6 <SATA::write(unsigned long long, int, void*)>:
c001cca6:	55                   	push   ebp
c001cca7:	57                   	push   edi
c001cca8:	56                   	push   esi
c001cca9:	53                   	push   ebx
c001ccaa:	83 ec 0c             	sub    esp,0xc
c001ccad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ccb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ccb5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ccbd:	8d 70 ff             	lea    esi,[eax-0x1]
c001ccc0:	b8 04 00 00 00       	mov    eax,0x4
c001ccc5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cccb:	0f 87 30 02 00 00    	ja     c001cf01 <SATA::write(unsigned long long, int, void*)+0x25b>
c001ccd1:	85 db                	test   ebx,ebx
c001ccd3:	b8 06 00 00 00       	mov    eax,0x6
c001ccd8:	0f 84 23 02 00 00    	je     c001cf01 <SATA::write(unsigned long long, int, void*)+0x25b>
c001ccde:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cce2:	c1 e6 09             	shl    esi,0x9
c001cce5:	01 de                	add    esi,ebx
c001cce7:	50                   	push   eax
c001cce8:	89 d7                	mov    edi,edx
c001ccea:	50                   	push   eax
c001cceb:	83 c7 01             	add    edi,0x1
c001ccee:	6a 01                	push   0x1
c001ccf0:	89 cd                	mov    ebp,ecx
c001ccf2:	53                   	push   ebx
c001ccf3:	83 d5 00             	adc    ebp,0x0
c001ccf6:	6a 01                	push   0x1
c001ccf8:	81 c3 00 02 00 00    	add    ebx,0x200
c001ccfe:	51                   	push   ecx
c001ccff:	52                   	push   edx
c001cd00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd04:	e8 05 fb ff ff       	call   c001c80e <SATA::access(unsigned long long, int, void*, bool)>
c001cd09:	83 c4 20             	add    esp,0x20
c001cd0c:	39 f3                	cmp    ebx,esi
c001cd0e:	89 fa                	mov    edx,edi
c001cd10:	89 e9                	mov    ecx,ebp
c001cd12:	75 d3                	jne    c001cce7 <SATA::write(unsigned long long, int, void*)+0x41>
c001cd14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cd18:	bd 10 27 00 00       	mov    ebp,0x2710
c001cd1d:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd22:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001cd28:	50                   	push   eax
c001cd29:	50                   	push   eax
c001cd2a:	6a 0f                	push   0xf
c001cd2c:	6a 00                	push   0x0
c001cd2e:	e8 0a f0 ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cd33:	5a                   	pop    edx
c001cd34:	59                   	pop    ecx
c001cd35:	0f b6 c0             	movzx  eax,al
c001cd38:	50                   	push   eax
c001cd39:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd3e:	99                   	cdq    
c001cd3f:	f7 fd                	idiv   ebp
c001cd41:	99                   	cdq    
c001cd42:	f7 fb                	idiv   ebx
c001cd44:	88 d0                	mov    al,dl
c001cd46:	04 30                	add    al,0x30
c001cd48:	0f b6 c0             	movzx  eax,al
c001cd4b:	50                   	push   eax
c001cd4c:	e8 db ef ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cd51:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd57:	5e                   	pop    esi
c001cd58:	5f                   	pop    edi
c001cd59:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd5e:	6a 0f                	push   0xf
c001cd60:	6a 00                	push   0x0
c001cd62:	e8 d6 ef ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cd67:	5a                   	pop    edx
c001cd68:	59                   	pop    ecx
c001cd69:	0f b6 c0             	movzx  eax,al
c001cd6c:	50                   	push   eax
c001cd6d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd72:	99                   	cdq    
c001cd73:	f7 ff                	idiv   edi
c001cd75:	99                   	cdq    
c001cd76:	f7 fb                	idiv   ebx
c001cd78:	80 c2 30             	add    dl,0x30
c001cd7b:	0f b6 d2             	movzx  edx,dl
c001cd7e:	52                   	push   edx
c001cd7f:	e8 a8 ef ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cd84:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd8a:	5e                   	pop    esi
c001cd8b:	be 64 00 00 00       	mov    esi,0x64
c001cd90:	58                   	pop    eax
c001cd91:	6a 0f                	push   0xf
c001cd93:	6a 00                	push   0x0
c001cd95:	e8 a3 ef ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cd9a:	5a                   	pop    edx
c001cd9b:	59                   	pop    ecx
c001cd9c:	0f b6 c0             	movzx  eax,al
c001cd9f:	50                   	push   eax
c001cda0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cda5:	99                   	cdq    
c001cda6:	f7 fe                	idiv   esi
c001cda8:	99                   	cdq    
c001cda9:	f7 fb                	idiv   ebx
c001cdab:	80 c2 30             	add    dl,0x30
c001cdae:	0f b6 d2             	movzx  edx,dl
c001cdb1:	52                   	push   edx
c001cdb2:	e8 75 ef ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cdb7:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdbd:	58                   	pop    eax
c001cdbe:	5a                   	pop    edx
c001cdbf:	6a 0f                	push   0xf
c001cdc1:	6a 00                	push   0x0
c001cdc3:	e8 75 ef ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cdc8:	59                   	pop    ecx
c001cdc9:	5a                   	pop    edx
c001cdca:	0f b6 c0             	movzx  eax,al
c001cdcd:	50                   	push   eax
c001cdce:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdd3:	99                   	cdq    
c001cdd4:	f7 fb                	idiv   ebx
c001cdd6:	99                   	cdq    
c001cdd7:	f7 fb                	idiv   ebx
c001cdd9:	80 c2 30             	add    dl,0x30
c001cddc:	0f b6 d2             	movzx  edx,dl
c001cddf:	52                   	push   edx
c001cde0:	e8 47 ef ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cde5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cdeb:	59                   	pop    ecx
c001cdec:	58                   	pop    eax
c001cded:	6a 0f                	push   0xf
c001cdef:	6a 00                	push   0x0
c001cdf1:	e8 47 ef ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cdf6:	5a                   	pop    edx
c001cdf7:	59                   	pop    ecx
c001cdf8:	0f b6 c0             	movzx  eax,al
c001cdfb:	50                   	push   eax
c001cdfc:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce01:	99                   	cdq    
c001ce02:	f7 fb                	idiv   ebx
c001ce04:	80 c2 30             	add    dl,0x30
c001ce07:	0f b6 d2             	movzx  edx,dl
c001ce0a:	52                   	push   edx
c001ce0b:	e8 1c ef ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001ce10:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce16:	58                   	pop    eax
c001ce17:	5a                   	pop    edx
c001ce18:	6a 0f                	push   0xf
c001ce1a:	6a 00                	push   0x0
c001ce1c:	e8 1c ef ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001ce21:	59                   	pop    ecx
c001ce22:	5a                   	pop    edx
c001ce23:	0f b6 c0             	movzx  eax,al
c001ce26:	50                   	push   eax
c001ce27:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce2c:	99                   	cdq    
c001ce2d:	f7 fd                	idiv   ebp
c001ce2f:	99                   	cdq    
c001ce30:	f7 fb                	idiv   ebx
c001ce32:	80 c2 30             	add    dl,0x30
c001ce35:	0f b6 d2             	movzx  edx,dl
c001ce38:	52                   	push   edx
c001ce39:	e8 ee ee ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001ce3e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce44:	59                   	pop    ecx
c001ce45:	5d                   	pop    ebp
c001ce46:	6a 0f                	push   0xf
c001ce48:	6a 00                	push   0x0
c001ce4a:	e8 ee ee ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001ce4f:	5a                   	pop    edx
c001ce50:	59                   	pop    ecx
c001ce51:	0f b6 c0             	movzx  eax,al
c001ce54:	50                   	push   eax
c001ce55:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce5a:	99                   	cdq    
c001ce5b:	f7 ff                	idiv   edi
c001ce5d:	99                   	cdq    
c001ce5e:	f7 fb                	idiv   ebx
c001ce60:	88 d0                	mov    al,dl
c001ce62:	04 30                	add    al,0x30
c001ce64:	0f b6 c0             	movzx  eax,al
c001ce67:	50                   	push   eax
c001ce68:	e8 bf ee ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001ce6d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ce73:	5f                   	pop    edi
c001ce74:	5d                   	pop    ebp
c001ce75:	6a 0f                	push   0xf
c001ce77:	6a 00                	push   0x0
c001ce79:	e8 bf ee ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001ce7e:	5a                   	pop    edx
c001ce7f:	59                   	pop    ecx
c001ce80:	0f b6 c0             	movzx  eax,al
c001ce83:	50                   	push   eax
c001ce84:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce89:	99                   	cdq    
c001ce8a:	f7 fe                	idiv   esi
c001ce8c:	99                   	cdq    
c001ce8d:	f7 fb                	idiv   ebx
c001ce8f:	88 d0                	mov    al,dl
c001ce91:	04 30                	add    al,0x30
c001ce93:	0f b6 c0             	movzx  eax,al
c001ce96:	50                   	push   eax
c001ce97:	e8 90 ee ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001ce9c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cea2:	5e                   	pop    esi
c001cea3:	5f                   	pop    edi
c001cea4:	6a 0f                	push   0xf
c001cea6:	6a 00                	push   0x0
c001cea8:	e8 90 ee ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cead:	5d                   	pop    ebp
c001ceae:	5a                   	pop    edx
c001ceaf:	0f b6 c0             	movzx  eax,al
c001ceb2:	50                   	push   eax
c001ceb3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ceb8:	99                   	cdq    
c001ceb9:	f7 fb                	idiv   ebx
c001cebb:	99                   	cdq    
c001cebc:	f7 fb                	idiv   ebx
c001cebe:	88 d0                	mov    al,dl
c001cec0:	04 30                	add    al,0x30
c001cec2:	0f b6 c0             	movzx  eax,al
c001cec5:	50                   	push   eax
c001cec6:	e8 61 ee ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cecb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ced1:	59                   	pop    ecx
c001ced2:	5e                   	pop    esi
c001ced3:	6a 0f                	push   0xf
c001ced5:	6a 00                	push   0x0
c001ced7:	e8 61 ee ff ff       	call   c001bd3d <combineColours(unsigned char, unsigned char)>
c001cedc:	5f                   	pop    edi
c001cedd:	5d                   	pop    ebp
c001cede:	0f b6 c0             	movzx  eax,al
c001cee1:	50                   	push   eax
c001cee2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cee7:	99                   	cdq    
c001cee8:	f7 fb                	idiv   ebx
c001ceea:	80 c2 30             	add    dl,0x30
c001ceed:	0f b6 d2             	movzx  edx,dl
c001cef0:	52                   	push   edx
c001cef1:	e8 36 ee ff ff       	call   c001bd2c <combineCharAndColour(char, unsigned char)>
c001cef6:	83 c4 10             	add    esp,0x10
c001cef9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ceff:	31 c0                	xor    eax,eax
c001cf01:	83 c4 0c             	add    esp,0xc
c001cf04:	5b                   	pop    ebx
c001cf05:	5e                   	pop    esi
c001cf06:	5f                   	pop    edi
c001cf07:	5d                   	pop    ebp
c001cf08:	c3                   	ret    
c001cf09:	90                   	nop

c001cf0a <SATAPI::write(unsigned long long, int, void*)>:
c001cf0a:	b8 03 00 00 00       	mov    eax,0x3
c001cf0f:	c3                   	ret    

c001cf10 <SATAPI::close(int, int, void*)>:
c001cf10:	83 ec 0c             	sub    esp,0xc
c001cf13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf1d:	85 c0                	test   eax,eax
c001cf1f:	74 0c                	je     c001cf2d <SATAPI::close(int, int, void*)+0x1d>
c001cf21:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf23:	83 ec 0c             	sub    esp,0xc
c001cf26:	50                   	push   eax
c001cf27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf2a:	83 c4 10             	add    esp,0x10
c001cf2d:	31 c0                	xor    eax,eax
c001cf2f:	83 c4 0c             	add    esp,0xc
c001cf32:	c3                   	ret    
c001cf33:	90                   	nop

c001cf34 <SATAPI::SATAPI()>:
c001cf34:	83 ec 1c             	sub    esp,0x1c
c001cf37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf3b:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001cf43:	c7 44 24 04 b4 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218b4
c001cf4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf4e:	e8 75 f2 fe ff       	call   c000c1c8 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf53:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001cf58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5c:	89 10                	mov    DWORD PTR [eax],edx
c001cf5e:	90                   	nop
c001cf5f:	83 c4 1c             	add    esp,0x1c
c001cf62:	c3                   	ret    
c001cf63:	90                   	nop

c001cf64 <SATAPI::diskRemoved()>:
c001cf64:	c3                   	ret    
c001cf65:	90                   	nop

c001cf66 <SATAPI::diskInserted()>:
c001cf66:	83 ec 18             	sub    esp,0x18
c001cf69:	68 c0 18 02 c0       	push   0xc00218c0
c001cf6e:	e8 63 da fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001cf73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf77:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001cf7e:	83 c4 1c             	add    esp,0x1c
c001cf81:	c3                   	ret    

c001cf82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001cf82:	55                   	push   ebp
c001cf83:	57                   	push   edi
c001cf84:	56                   	push   esi
c001cf85:	53                   	push   ebx
c001cf86:	83 ec 34             	sub    esp,0x34
c001cf89:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cf8d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cf91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf95:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cf99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf9d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001cfa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cfa9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfad:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001cfb3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cfb7:	83 c0 02             	add    eax,0x2
c001cfba:	c1 e0 07             	shl    eax,0x7
c001cfbd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cfc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfc9:	c1 e0 07             	shl    eax,0x7
c001cfcc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cfd0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfd4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cfde:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cfe2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cfe8:	e8 1f e5 ff ff       	call   c001b50c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cfed:	83 c4 10             	add    esp,0x10
c001cff0:	89 c2                	mov    edx,eax
c001cff2:	b8 01 00 00 00       	mov    eax,0x1
c001cff7:	83 fa ff             	cmp    edx,0xffffffff
c001cffa:	0f 84 55 02 00 00    	je     c001d255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d000:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d008:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d00e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d010:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d016:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d01c:	89 d1                	mov    ecx,edx
c001d01e:	c1 e1 05             	shl    ecx,0x5
c001d021:	01 c8                	add    eax,ecx
c001d023:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d025:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d02b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d031:	89 08                	mov    DWORD PTR [eax],ecx
c001d033:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d039:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d03f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d045:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d048:	50                   	push   eax
c001d049:	68 90 00 00 00       	push   0x90
c001d04e:	6a 00                	push   0x0
c001d050:	53                   	push   ebx
c001d051:	e8 9a 34 fe ff       	call   c00004f0 <memset>
c001d056:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d059:	b9 0c 00 00 00       	mov    ecx,0xc
c001d05e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d062:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d064:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d06a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d06e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d072:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d078:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d07c:	48                   	dec    eax
c001d07d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d082:	89 c1                	mov    ecx,eax
c001d084:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d08a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d08f:	09 c8                	or     eax,ecx
c001d091:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d097:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d09a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d0a1:	25 00 7f 00 00       	and    eax,0x7f00
c001d0a6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d0ab:	66 89 03             	mov    WORD PTR [ebx],ax
c001d0ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d0b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ba:	c1 e8 10             	shr    eax,0x10
c001d0bd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0c4:	c1 e8 18             	shr    eax,0x18
c001d0c7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d0ca:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d0ce:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d0d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0d5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d0d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d0e3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d0e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0eb:	31 c0                	xor    eax,eax
c001d0ed:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d0f3:	f6 c1 88             	test   cl,0x88
c001d0f6:	74 0a                	je     c001d102 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d0f8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d0fd:	74 0a                	je     c001d109 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d0ff:	40                   	inc    eax
c001d100:	eb eb                	jmp    c001d0ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d102:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d107:	75 43                	jne    c001d14c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d109:	83 ec 0c             	sub    esp,0xc
c001d10c:	68 d8 18 02 c0       	push   0xc00218d8
c001d111:	e8 c0 d8 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001d116:	58                   	pop    eax
c001d117:	5a                   	pop    edx
c001d118:	68 ed 18 02 c0       	push   0xc00218ed
c001d11d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d123:	e8 f0 b8 fe ff       	call   c0008a18 <VgaText::puts(char const*)>
c001d128:	59                   	pop    ecx
c001d129:	5b                   	pop    ebx
c001d12a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d12e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d134:	e8 6b e4 ff ff       	call   c001b5a4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d139:	5e                   	pop    esi
c001d13a:	5f                   	pop    edi
c001d13b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d13f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d145:	e8 3a e4 ff ff       	call   c001b584 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d14a:	eb 46                	jmp    c001d192 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d14c:	be 01 00 00 00       	mov    esi,0x1
c001d151:	88 d1                	mov    cl,dl
c001d153:	d3 e6                	shl    esi,cl
c001d155:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d15a:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d160:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d164:	c1 e3 07             	shl    ebx,0x7
c001d167:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d16b:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d171:	85 c6                	test   esi,eax
c001d173:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d179:	0f 84 a3 00 00 00    	je     c001d222 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d17f:	0f ba e0 1e          	bt     eax,0x1e
c001d183:	73 1a                	jae    c001d19f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d185:	83 ec 0c             	sub    esp,0xc
c001d188:	68 ff 18 02 c0       	push   0xc00218ff
c001d18d:	e8 44 d8 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001d192:	83 c4 10             	add    esp,0x10
c001d195:	b8 01 00 00 00       	mov    eax,0x1
c001d19a:	e9 b6 00 00 00       	jmp    c001d255 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d19f:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d1a5:	83 f8 0d             	cmp    eax,0xd
c001d1a8:	77 0a                	ja     c001d1b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d1aa:	83 ec 0c             	sub    esp,0xc
c001d1ad:	68 c8 00 00 00       	push   0xc8
c001d1b2:	eb 28                	jmp    c001d1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d1b4:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d1ba:	83 f8 0d             	cmp    eax,0xd
c001d1bd:	77 0a                	ja     c001d1c9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d1bf:	83 ec 0c             	sub    esp,0xc
c001d1c2:	68 58 02 00 00       	push   0x258
c001d1c7:	eb 13                	jmp    c001d1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d1c9:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d1cf:	83 f8 06             	cmp    eax,0x6
c001d1d2:	77 10                	ja     c001d1e4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d1d4:	83 ec 0c             	sub    esp,0xc
c001d1d7:	68 dc 05 00 00       	push   0x5dc
c001d1dc:	e8 3b 81 ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001d1e1:	83 c4 10             	add    esp,0x10
c001d1e4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d1e8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d1eb:	75 06                	jne    c001d1f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d1ed:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d1f1:	74 15                	je     c001d208 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d1f3:	83 ff 06             	cmp    edi,0x6
c001d1f6:	77 10                	ja     c001d208 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	68 c4 09 00 00       	push   0x9c4
c001d200:	e8 17 81 ff ff       	call   c001531c <milliTenthSleep(unsigned int)>
c001d205:	83 c4 10             	add    esp,0x10
c001d208:	47                   	inc    edi
c001d209:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d20f:	0f 85 56 ff ff ff    	jne    c001d16b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d215:	83 ec 0c             	sub    esp,0xc
c001d218:	68 12 19 02 c0       	push   0xc0021912
c001d21d:	e9 6b ff ff ff       	jmp    c001d18d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d222:	0f ba e0 1e          	bt     eax,0x1e
c001d226:	73 0d                	jae    c001d235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	68 26 19 02 c0       	push   0xc0021926
c001d230:	e9 58 ff ff ff       	jmp    c001d18d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d235:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d23a:	74 17                	je     c001d253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d23c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d241:	74 10                	je     c001d253 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d243:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d249:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d24d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d253:	31 c0                	xor    eax,eax
c001d255:	83 c4 2c             	add    esp,0x2c
c001d258:	5b                   	pop    ebx
c001d259:	5e                   	pop    esi
c001d25a:	5f                   	pop    edi
c001d25b:	5d                   	pop    ebp
c001d25c:	c3                   	ret    
c001d25d:	90                   	nop

c001d25e <SATAPI::eject()>:
c001d25e:	57                   	push   edi
c001d25f:	b9 03 00 00 00       	mov    ecx,0x3
c001d264:	83 ec 18             	sub    esp,0x18
c001d267:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d26b:	fc                   	cld    
c001d26c:	31 c0                	xor    eax,eax
c001d26e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d270:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d275:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d27a:	50                   	push   eax
c001d27b:	6a 00                	push   0x0
c001d27d:	6a 00                	push   0x0
c001d27f:	6a 00                	push   0x0
c001d281:	6a 00                	push   0x0
c001d283:	6a 02                	push   0x2
c001d285:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d289:	50                   	push   eax
c001d28a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d28e:	e8 ef fc ff ff       	call   c001cf82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d293:	83 c4 38             	add    esp,0x38
c001d296:	31 c0                	xor    eax,eax
c001d298:	5f                   	pop    edi
c001d299:	c3                   	ret    

c001d29a <SATAPI::detectMedia()>:
c001d29a:	53                   	push   ebx
c001d29b:	83 ec 14             	sub    esp,0x14
c001d29e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d2a2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2a8:	e8 8f 07 ff ff       	call   c000da3c <VCache::writeWriteBuffer()>
c001d2ad:	59                   	pop    ecx
c001d2ae:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2b4:	e8 73 07 ff ff       	call   c000da2c <VCache::invalidateReadBuffer()>
c001d2b9:	c7 04 24 3b 19 02 c0 	mov    DWORD PTR [esp],0xc002193b
c001d2c0:	e8 11 d7 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001d2c5:	83 c4 10             	add    esp,0x10
c001d2c8:	31 c0                	xor    eax,eax
c001d2ca:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d2d1:	85 d2                	test   edx,edx
c001d2d3:	74 0f                	je     c001d2e4 <SATAPI::detectMedia()+0x4a>
c001d2d5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d2db:	75 07                	jne    c001d2e4 <SATAPI::detectMedia()+0x4a>
c001d2dd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d2e4:	40                   	inc    eax
c001d2e5:	83 f8 1a             	cmp    eax,0x1a
c001d2e8:	75 e0                	jne    c001d2ca <SATAPI::detectMedia()+0x30>
c001d2ea:	83 c4 08             	add    esp,0x8
c001d2ed:	5b                   	pop    ebx
c001d2ee:	c3                   	ret    
c001d2ef:	90                   	nop

c001d2f0 <SATAPI::open(int, int, void*)>:
c001d2f0:	56                   	push   esi
c001d2f1:	53                   	push   ebx
c001d2f2:	51                   	push   ecx
c001d2f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d2f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2fb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d305:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d30b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d30f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d319:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d323:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d32a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d330:	e8 37 aa fe ff       	call   c0007d6c <Phys::allocatePage()>
c001d335:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d33b:	89 c6                	mov    esi,eax
c001d33d:	e8 2a aa fe ff       	call   c0007d6c <Phys::allocatePage()>
c001d342:	81 c6 00 10 00 00    	add    esi,0x1000
c001d348:	39 c6                	cmp    esi,eax
c001d34a:	74 10                	je     c001d35c <SATAPI::open(int, int, void*)+0x6c>
c001d34c:	83 ec 0c             	sub    esp,0xc
c001d34f:	68 50 19 02 c0       	push   0xc0021950
c001d354:	e8 cc 33 ff ff       	call   c0010725 <KePanic(char const*)>
c001d359:	83 c4 10             	add    esp,0x10
c001d35c:	83 ec 0c             	sub    esp,0xc
c001d35f:	6a 02                	push   0x2
c001d361:	e8 1a c2 fe ff       	call   c0009580 <Virt::allocateKernelVirtualPages(int)>
c001d366:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d36c:	6a 03                	push   0x3
c001d36e:	50                   	push   eax
c001d36f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d375:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d37b:	e8 22 c9 fe ff       	call   c0009ca2 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d380:	83 c4 14             	add    esp,0x14
c001d383:	68 78 01 00 00       	push   0x178
c001d388:	e8 d9 a6 fe ff       	call   c0007a66 <malloc>
c001d38d:	83 c4 0c             	add    esp,0xc
c001d390:	6a 00                	push   0x0
c001d392:	68 ff ff ff 7f       	push   0x7fffffff
c001d397:	6a 00                	push   0x0
c001d399:	6a 00                	push   0x0
c001d39b:	53                   	push   ebx
c001d39c:	68 66 19 02 c0       	push   0xc0021966
c001d3a1:	89 c6                	mov    esi,eax
c001d3a3:	50                   	push   eax
c001d3a4:	e8 25 fb fe ff       	call   c000cece <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d3a9:	83 c4 14             	add    esp,0x14
c001d3ac:	56                   	push   esi
c001d3ad:	e8 de fb fe ff       	call   c000cf90 <LogicalDisk::assignDriveLetter()>
c001d3b2:	5a                   	pop    edx
c001d3b3:	59                   	pop    ecx
c001d3b4:	0f be c0             	movsx  eax,al
c001d3b7:	50                   	push   eax
c001d3b8:	68 b8 17 02 c0       	push   0xc00217b8
c001d3bd:	e8 14 d6 fe ff       	call   c000a9d6 <Dbg::kprintf(char const*, ...)>
c001d3c2:	58                   	pop    eax
c001d3c3:	5a                   	pop    edx
c001d3c4:	56                   	push   esi
c001d3c5:	53                   	push   ebx
c001d3c6:	e8 37 ea fe ff       	call   c000be02 <Device::addChild(Device*)>
c001d3cb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d3d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3d4:	e8 57 ee fe ff       	call   c000c230 <PhysicalDisk::startCache()>
c001d3d9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d3e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e3:	e8 b2 fe ff ff       	call   c001d29a <SATAPI::detectMedia()>
c001d3e8:	83 c4 14             	add    esp,0x14
c001d3eb:	31 c0                	xor    eax,eax
c001d3ed:	5b                   	pop    ebx
c001d3ee:	5e                   	pop    esi
c001d3ef:	c3                   	ret    

c001d3f0 <SATAPI::read(unsigned long long, int, void*)>:
c001d3f0:	55                   	push   ebp
c001d3f1:	57                   	push   edi
c001d3f2:	56                   	push   esi
c001d3f3:	53                   	push   ebx
c001d3f4:	83 ec 3c             	sub    esp,0x3c
c001d3f7:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001d3fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d3ff:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d403:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d407:	83 fb 04             	cmp    ebx,0x4
c001d40a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d40e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d412:	7e 10                	jle    c001d424 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d414:	83 ec 0c             	sub    esp,0xc
c001d417:	68 74 19 02 c0       	push   0xc0021974
c001d41c:	e8 04 33 ff ff       	call   c0010725 <KePanic(char const*)>
c001d421:	83 c4 10             	add    esp,0x10
c001d424:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001d42a:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001d430:	51                   	push   ecx
c001d431:	50                   	push   eax
c001d432:	83 c0 02             	add    eax,0x2
c001d435:	c1 e0 07             	shl    eax,0x7
c001d438:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d43e:	50                   	push   eax
c001d43f:	52                   	push   edx
c001d440:	e8 89 e1 ff ff       	call   c001b5ce <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d445:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d449:	b9 03 00 00 00       	mov    ecx,0x3
c001d44e:	fc                   	cld    
c001d44f:	31 c0                	xor    eax,eax
c001d451:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d453:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d458:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d45d:	83 c4 0c             	add    esp,0xc
c001d460:	6a 00                	push   0x0
c001d462:	6a 00                	push   0x0
c001d464:	6a 00                	push   0x0
c001d466:	6a 00                	push   0x0
c001d468:	6a 02                	push   0x2
c001d46a:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d46e:	50                   	push   eax
c001d46f:	56                   	push   esi
c001d470:	e8 0d fb ff ff       	call   c001cf82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d475:	83 c4 20             	add    esp,0x20
c001d478:	85 c0                	test   eax,eax
c001d47a:	89 c5                	mov    ebp,eax
c001d47c:	75 44                	jne    c001d4c2 <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001d47e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d482:	b9 03 00 00 00       	mov    ecx,0x3
c001d487:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d489:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d48d:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001d491:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d496:	0f c8                	bswap  eax
c001d498:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d49c:	50                   	push   eax
c001d49d:	53                   	push   ebx
c001d49e:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d4a2:	c1 e3 0b             	shl    ebx,0xb
c001d4a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4ad:	53                   	push   ebx
c001d4ae:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d4b2:	50                   	push   eax
c001d4b3:	56                   	push   esi
c001d4b4:	e8 c9 fa ff ff       	call   c001cf82 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d4b9:	83 c4 20             	add    esp,0x20
c001d4bc:	85 c0                	test   eax,eax
c001d4be:	89 c5                	mov    ebp,eax
c001d4c0:	74 0c                	je     c001d4ce <SATAPI::read(unsigned long long, int, void*)+0xde>
c001d4c2:	83 ec 0c             	sub    esp,0xc
c001d4c5:	56                   	push   esi
c001d4c6:	e8 cf fd ff ff       	call   c001d29a <SATAPI::detectMedia()>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	83 c4 3c             	add    esp,0x3c
c001d4d1:	89 e8                	mov    eax,ebp
c001d4d3:	5b                   	pop    ebx
c001d4d4:	5e                   	pop    esi
c001d4d5:	5f                   	pop    edi
c001d4d6:	5d                   	pop    ebp
c001d4d7:	c3                   	ret    

c001d4d8 <IOAPIC::close(int, int, void*)>:
c001d4d8:	b8 00 00 00 00       	mov    eax,0x0
c001d4dd:	c3                   	ret    

c001d4de <apicGetBase()>:
c001d4de:	55                   	push   ebp
c001d4df:	89 e5                	mov    ebp,esp
c001d4e1:	83 ec 28             	sub    esp,0x28
c001d4e4:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d4e9:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001d4f0:	24 08                	and    al,0x8
c001d4f2:	84 c0                	test   al,al
c001d4f4:	75 07                	jne    c001d4fd <apicGetBase()+0x1f>
c001d4f6:	b8 00 00 00 00       	mov    eax,0x0
c001d4fb:	eb 23                	jmp    c001d520 <apicGetBase()+0x42>
c001d4fd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d502:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001d50a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d50d:	e8 1e 9b fe ff       	call   c0007030 <Computer::rdmsr(unsigned int)>
c001d512:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d515:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d518:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d51b:	25 00 00 ff ff       	and    eax,0xffff0000
c001d520:	c9                   	leave  
c001d521:	c3                   	ret    

c001d522 <IOAPIC::IOAPIC()>:
c001d522:	83 ec 1c             	sub    esp,0x1c
c001d525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d529:	c7 44 24 04 d8 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc00219d8
c001d531:	89 04 24             	mov    DWORD PTR [esp],eax
c001d534:	e8 61 ea fe ff       	call   c000bf9a <Device::Device(char const*)>
c001d539:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c001d53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d542:	89 10                	mov    DWORD PTR [eax],edx
c001d544:	90                   	nop
c001d545:	83 c4 1c             	add    esp,0x1c
c001d548:	c3                   	ret    

c001d549 <apicOpen()>:
c001d549:	55                   	push   ebp
c001d54a:	89 e5                	mov    ebp,esp
c001d54c:	53                   	push   ebx
c001d54d:	83 ec 44             	sub    esp,0x44
c001d550:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001d557:	34 01                	xor    al,0x1
c001d559:	84 c0                	test   al,al
c001d55b:	0f 84 a1 00 00 00    	je     c001d602 <apicOpen()+0xb9>
c001d561:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d565:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001d56c:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d56f:	0f 83 86 00 00 00    	jae    c001d5fb <apicOpen()+0xb2>
c001d575:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d57c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001d57f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d582:	e8 df a4 fe ff       	call   c0007a66 <malloc>
c001d587:	89 c3                	mov    ebx,eax
c001d589:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d58c:	e8 91 ff ff ff       	call   c001d522 <IOAPIC::IOAPIC()>
c001d591:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d594:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d598:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d59b:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d5a2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d5a7:	40                   	inc    eax
c001d5a8:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d5ad:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d5b2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d5b8:	89 c2                	mov    edx,eax
c001d5ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d5bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5c1:	89 14 24             	mov    DWORD PTR [esp],edx
c001d5c4:	e8 39 e8 fe ff       	call   c000be02 <Device::addChild(Device*)>
c001d5c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5ce:	83 c0 08             	add    eax,0x8
c001d5d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5d3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d5d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d5df:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d5e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d5eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d5ee:	89 14 24             	mov    DWORD PTR [esp],edx
c001d5f1:	ff d0                	call   eax
c001d5f3:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d5f6:	e9 6a ff ff ff       	jmp    c001d565 <apicOpen()+0x1c>
c001d5fb:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d602:	e8 d7 fe ff ff       	call   c001d4de <apicGetBase()>
c001d607:	05 f0 00 00 00       	add    eax,0xf0
c001d60c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d60f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d612:	8b 00                	mov    eax,DWORD PTR [eax]
c001d614:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d617:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d61e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d625:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d628:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d62b:	89 10                	mov    DWORD PTR [eax],edx
c001d62d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d634:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d639:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d63c:	7d 70                	jge    c001d6ae <apicOpen()+0x165>
c001d63e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d641:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d648:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d64b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d64e:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d655:	c1 e8 08             	shr    eax,0x8
c001d658:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d65c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d65f:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d666:	c1 e8 18             	shr    eax,0x18
c001d669:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d66c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d670:	75 37                	jne    c001d6a9 <apicOpen()+0x160>
c001d672:	e8 67 fe ff ff       	call   c001d4de <apicGetBase()>
c001d677:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d67b:	75 07                	jne    c001d684 <apicOpen()+0x13b>
c001d67d:	ba 60 03 00 00       	mov    edx,0x360
c001d682:	eb 05                	jmp    c001d689 <apicOpen()+0x140>
c001d684:	ba 50 03 00 00       	mov    edx,0x350
c001d689:	01 d0                	add    eax,edx
c001d68b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d68e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d691:	8b 00                	mov    eax,DWORD PTR [eax]
c001d693:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d696:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d69d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d6a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d6a4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d6a7:	89 10                	mov    DWORD PTR [eax],edx
c001d6a9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d6ac:	eb 86                	jmp    c001d634 <apicOpen()+0xeb>
c001d6ae:	90                   	nop
c001d6af:	83 c4 44             	add    esp,0x44
c001d6b2:	5b                   	pop    ebx
c001d6b3:	5d                   	pop    ebp
c001d6b4:	c3                   	ret    
c001d6b5:	90                   	nop

c001d6b6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d6b6:	55                   	push   ebp
c001d6b7:	89 e5                	mov    ebp,esp
c001d6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d6c2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6c5:	72 1d                	jb     c001d6e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6ca:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6d3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d6d9:	01 d0                	add    eax,edx
c001d6db:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d6de:	73 04                	jae    c001d6e4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d6e0:	b0 01                	mov    al,0x1
c001d6e2:	eb 02                	jmp    c001d6e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d6e4:	b0 00                	mov    al,0x0
c001d6e6:	5d                   	pop    ebp
c001d6e7:	c3                   	ret    

c001d6e8 <IOAPIC::read(int)>:
c001d6e8:	55                   	push   ebp
c001d6e9:	89 e5                	mov    ebp,esp
c001d6eb:	83 ec 10             	sub    esp,0x10
c001d6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d6f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d6fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6fd:	0f b6 d0             	movzx  edx,al
c001d700:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d703:	89 10                	mov    DWORD PTR [eax],edx
c001d705:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d708:	83 c0 10             	add    eax,0x10
c001d70b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70d:	c9                   	leave  
c001d70e:	c3                   	ret    
c001d70f:	90                   	nop

c001d710 <IOAPIC::open(int, int, void*)>:
c001d710:	55                   	push   ebp
c001d711:	89 e5                	mov    ebp,esp
c001d713:	57                   	push   edi
c001d714:	56                   	push   esi
c001d715:	53                   	push   ebx
c001d716:	83 ec 0c             	sub    esp,0xc
c001d719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d71c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d71f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d728:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d72e:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d738:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d73e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d741:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d747:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d751:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d75a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d763:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d76a:	0f b6 f0             	movzx  esi,al
c001d76d:	89 d0                	mov    eax,edx
c001d76f:	ba 00 00 00 00       	mov    edx,0x0
c001d774:	89 c7                	mov    edi,eax
c001d776:	83 e7 ff             	and    edi,0xffffffff
c001d779:	89 f9                	mov    ecx,edi
c001d77b:	0f b6 da             	movzx  ebx,dl
c001d77e:	89 c8                	mov    eax,ecx
c001d780:	89 da                	mov    edx,ebx
c001d782:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d785:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d788:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d78c:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001d791:	24 00                	and    al,0x0
c001d793:	08 d0                	or     al,dl
c001d795:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d79c:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d7a3:	88 c1                	mov    cl,al
c001d7a5:	fe c1                	inc    cl
c001d7a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001d7aa:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001d7b0:	0f b6 d0             	movzx  edx,al
c001d7b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7b6:	83 c2 08             	add    edx,0x8
c001d7b9:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d7bd:	0f b6 c9             	movzx  ecx,cl
c001d7c0:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d7c6:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d7ca:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7d5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7d8:	e8 0b ff ff ff       	call   c001d6e8 <IOAPIC::read(int)>
c001d7dd:	c1 f8 10             	sar    eax,0x10
c001d7e0:	0f b6 c0             	movzx  eax,al
c001d7e3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7e9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d7ef:	b8 00 00 00 00       	mov    eax,0x0
c001d7f4:	83 c4 0c             	add    esp,0xc
c001d7f7:	5b                   	pop    ebx
c001d7f8:	5e                   	pop    esi
c001d7f9:	5f                   	pop    edi
c001d7fa:	5d                   	pop    ebp
c001d7fb:	c3                   	ret    

c001d7fc <IOAPIC::write(int, int)>:
c001d7fc:	55                   	push   ebp
c001d7fd:	89 e5                	mov    ebp,esp
c001d7ff:	83 ec 10             	sub    esp,0x10
c001d802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d805:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d80b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d80e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d811:	0f b6 d0             	movzx  edx,al
c001d814:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d817:	89 10                	mov    DWORD PTR [eax],edx
c001d819:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d81c:	8d 50 10             	lea    edx,[eax+0x10]
c001d81f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d822:	89 02                	mov    DWORD PTR [edx],eax
c001d824:	90                   	nop
c001d825:	c9                   	leave  
c001d826:	c3                   	ret    
c001d827:	90                   	nop

c001d828 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d828:	55                   	push   ebp
c001d829:	89 e5                	mov    ebp,esp
c001d82b:	53                   	push   ebx
c001d82c:	83 ec 38             	sub    esp,0x38
c001d82f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d832:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d835:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d838:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d83b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d83e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d841:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d844:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d847:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d84a:	88 d8                	mov    al,bl
c001d84c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d84f:	88 c8                	mov    al,cl
c001d851:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d854:	88 d0                	mov    al,dl
c001d856:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d859:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d85d:	83 c0 08             	add    eax,0x8
c001d860:	01 c0                	add    eax,eax
c001d862:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d865:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d869:	83 c0 08             	add    eax,0x8
c001d86c:	01 c0                	add    eax,eax
c001d86e:	40                   	inc    eax
c001d86f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d872:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d87f:	e8 64 fe ff ff       	call   c001d6e8 <IOAPIC::read(int)>
c001d884:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d887:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d88e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d891:	c1 e0 18             	shl    eax,0x18
c001d894:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d897:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d89a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d89d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d8a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8ab:	e8 4c ff ff ff       	call   c001d7fc <IOAPIC::write(int, int)>
c001d8b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d8b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001d8bd:	e8 26 fe ff ff       	call   c001d6e8 <IOAPIC::read(int)>
c001d8c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d8c5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d8cc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d8d3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d8da:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d8de:	74 09                	je     c001d8e9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001d8e0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d8e7:	eb 07                	jmp    c001d8f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001d8e9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d8f0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d8f4:	74 09                	je     c001d8ff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001d8f6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d8fd:	eb 07                	jmp    c001d906 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001d8ff:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d906:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d90d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001d911:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d914:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d917:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d91a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d91e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d925:	89 04 24             	mov    DWORD PTR [esp],eax
c001d928:	e8 cf fe ff ff       	call   c001d7fc <IOAPIC::write(int, int)>
c001d92d:	90                   	nop
c001d92e:	83 c4 38             	add    esp,0x38
c001d931:	5b                   	pop    ebx
c001d932:	5d                   	pop    ebp
c001d933:	c3                   	ret    

c001d934 <APICTimer::close(int, int, void*)>:
c001d934:	b8 00 00 00 00       	mov    eax,0x0
c001d939:	c3                   	ret    
c001d93a:	66 90                	xchg   ax,ax

c001d93c <apicTimerHandler(regs*, void*)>:
c001d93c:	83 ec 1c             	sub    esp,0x1c
c001d93f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d943:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d945:	b8 10 27 00 00       	mov    eax,0x2710
c001d94a:	ba 00 00 00 00       	mov    edx,0x0
c001d94f:	f7 f1                	div    ecx
c001d951:	89 04 24             	mov    DWORD PTR [esp],eax
c001d954:	e8 0d fe fe ff       	call   c000d766 <timerHandler(unsigned int)>
c001d959:	90                   	nop
c001d95a:	83 c4 1c             	add    esp,0x1c
c001d95d:	c3                   	ret    
c001d95e:	66 90                	xchg   ax,ax

c001d960 <APICTimer::open(int, int, void*)>:
c001d960:	83 ec 2c             	sub    esp,0x2c
c001d963:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d967:	8b 00                	mov    eax,DWORD PTR [eax]
c001d969:	83 c0 24             	add    eax,0x24
c001d96c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d96e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d972:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d976:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d97a:	89 14 24             	mov    DWORD PTR [esp],edx
c001d97d:	ff d0                	call   eax
c001d97f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d983:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d987:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d98d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d991:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d995:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d99b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d99f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d9a5:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d9a9:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001d9b1:	c7 44 24 08 3c d9 01 c0 	mov    DWORD PTR [esp+0x8],0xc001d93c
c001d9b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d9bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9c0:	e8 eb e3 fe ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d9c5:	89 c2                	mov    edx,eax
c001d9c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9cb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d9d1:	b8 00 00 00 00       	mov    eax,0x0
c001d9d6:	83 c4 2c             	add    esp,0x2c
c001d9d9:	c3                   	ret    
c001d9da:	66 90                	xchg   ax,ax

c001d9dc <APICTimer::write(int)>:
c001d9dc:	83 ec 1c             	sub    esp,0x1c
c001d9df:	c7 04 24 0c 1a 02 c0 	mov    DWORD PTR [esp],0xc0021a0c
c001d9e6:	e8 3a 2d ff ff       	call   c0010725 <KePanic(char const*)>
c001d9eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9ef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d9f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9f9:	90                   	nop
c001d9fa:	83 c4 1c             	add    esp,0x1c
c001d9fd:	c3                   	ret    
c001d9fe:	66 90                	xchg   ax,ax

c001da00 <APICTimer::APICTimer()>:
c001da00:	83 ec 1c             	sub    esp,0x1c
c001da03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da07:	c7 44 24 04 1c 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a1c
c001da0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001da12:	e8 89 fc fe ff       	call   c000d6a0 <Timer::Timer(char const*)>
c001da17:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c001da1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da20:	89 10                	mov    DWORD PTR [eax],edx
c001da22:	90                   	nop
c001da23:	83 c4 1c             	add    esp,0x1c
c001da26:	c3                   	ret    
c001da27:	90                   	nop

c001da28 <PIT::write(int)>:
c001da28:	83 ec 10             	sub    esp,0x10
c001da2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001da33:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da3d:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001da42:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001da47:	99                   	cdq    
c001da48:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001da4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da50:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001da57:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001da5c:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001da61:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001da66:	ee                   	out    dx,al
c001da67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da6b:	0f b6 c0             	movzx  eax,al
c001da6e:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001da75:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001da79:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001da7e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001da83:	ee                   	out    dx,al
c001da84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da88:	c1 f8 08             	sar    eax,0x8
c001da8b:	0f b6 c0             	movzx  eax,al
c001da8e:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001da95:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001da99:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001da9e:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001daa3:	ee                   	out    dx,al
c001daa4:	90                   	nop
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	c3                   	ret    
c001daa9:	8d 76 00             	lea    esi,[esi+0x0]

c001daac <pitHandler(regs*, void*)>:
c001daac:	83 ec 1c             	sub    esp,0x1c
c001daaf:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dab5:	b8 10 27 00 00       	mov    eax,0x2710
c001daba:	99                   	cdq    
c001dabb:	f7 f9                	idiv   ecx
c001dabd:	89 04 24             	mov    DWORD PTR [esp],eax
c001dac0:	e8 a1 fc fe ff       	call   c000d766 <timerHandler(unsigned int)>
c001dac5:	90                   	nop
c001dac6:	83 c4 1c             	add    esp,0x1c
c001dac9:	c3                   	ret    
c001daca:	66 90                	xchg   ax,ax

c001dacc <PIT::open(int, int, void*)>:
c001dacc:	83 ec 2c             	sub    esp,0x2c
c001dacf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dad3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dad5:	83 c0 24             	add    eax,0x24
c001dad8:	8b 00                	mov    eax,DWORD PTR [eax]
c001dada:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dade:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dae2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dae6:	89 14 24             	mov    DWORD PTR [esp],edx
c001dae9:	ff d0                	call   eax
c001daeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001daf7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001daff:	c7 44 24 08 ac da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001daac
c001db07:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001db12:	e8 99 e2 fe ff       	call   c000bdb0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db17:	89 c2                	mov    edx,eax
c001db19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db1d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db23:	b8 00 00 00 00       	mov    eax,0x0
c001db28:	83 c4 2c             	add    esp,0x2c
c001db2b:	c3                   	ret    

c001db2c <PIT::close(int, int, void*)>:
c001db2c:	83 ec 1c             	sub    esp,0x1c
c001db2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db33:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001db3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db41:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001db49:	c7 44 24 08 ac da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001daac
c001db51:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001db59:	89 04 24             	mov    DWORD PTR [esp],eax
c001db5c:	e8 83 e2 fe ff       	call   c000bde4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001db61:	b8 00 00 00 00       	mov    eax,0x0
c001db66:	83 c4 1c             	add    esp,0x1c
c001db69:	c3                   	ret    
c001db6a:	66 90                	xchg   ax,ax

c001db6c <PIT::PIT()>:
c001db6c:	83 ec 1c             	sub    esp,0x1c
c001db6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db73:	c7 44 24 04 58 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a58
c001db7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001db7e:	e8 1d fb fe ff       	call   c000d6a0 <Timer::Timer(char const*)>
c001db83:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001db88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8c:	89 10                	mov    DWORD PTR [eax],edx
c001db8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db92:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001db99:	0f b6 d0             	movzx  edx,al
c001db9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbab:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dbb2:	0f b6 d0             	movzx  edx,al
c001dbb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb9:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dbbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc2:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dbc9:	88 c1                	mov    cl,al
c001dbcb:	fe c1                	inc    cl
c001dbcd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbd1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dbd7:	0f b6 d0             	movzx  edx,al
c001dbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbde:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001dbe3:	80 e1 3f             	and    cl,0x3f
c001dbe6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dbea:	90                   	nop
c001dbeb:	83 c4 1c             	add    esp,0x1c
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <avxDetect>:
c001dbf0:	b8 01 00 00 00       	mov    eax,0x1
c001dbf5:	0f a2                	cpuid  
c001dbf7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dbfd:	74 15                	je     c001dc14 <avxDetect.noAVX>
c001dbff:	b8 01 00 00 00       	mov    eax,0x1
c001dc04:	0f a2                	cpuid  
c001dc06:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dc0c:	74 06                	je     c001dc14 <avxDetect.noAVX>
c001dc0e:	b8 01 00 00 00       	mov    eax,0x1
c001dc13:	c3                   	ret    

c001dc14 <avxDetect.noAVX>:
c001dc14:	b8 00 00 00 00       	mov    eax,0x0
c001dc19:	c3                   	ret    

c001dc1a <avxSave>:
c001dc1a:	53                   	push   ebx
c001dc1b:	52                   	push   edx
c001dc1c:	31 c0                	xor    eax,eax
c001dc1e:	48                   	dec    eax
c001dc1f:	89 c2                	mov    edx,eax
c001dc21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dc25:	0f ae 23             	xsave  [ebx]
c001dc28:	5a                   	pop    edx
c001dc29:	5b                   	pop    ebx
c001dc2a:	c3                   	ret    

c001dc2b <avxLoad>:
c001dc2b:	53                   	push   ebx
c001dc2c:	52                   	push   edx
c001dc2d:	31 c0                	xor    eax,eax
c001dc2f:	48                   	dec    eax
c001dc30:	89 c2                	mov    edx,eax
c001dc32:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dc36:	0f ae 2b             	xrstor [ebx]
c001dc39:	5a                   	pop    edx
c001dc3a:	5b                   	pop    ebx
c001dc3b:	c3                   	ret    

c001dc3c <avxInit>:
c001dc3c:	e8 67 03 00 00       	call   c001dfa8 <sseInit>
c001dc41:	50                   	push   eax
c001dc42:	51                   	push   ecx
c001dc43:	0f 20 e0             	mov    eax,cr4
c001dc46:	0d 00 00 04 00       	or     eax,0x40000
c001dc4b:	0f 22 e0             	mov    cr4,eax
c001dc4e:	31 c9                	xor    ecx,ecx
c001dc50:	0f 01 d0             	xgetbv 
c001dc53:	0d 07 00 00 00       	or     eax,0x7
c001dc58:	0f 01 d1             	xsetbv 
c001dc5b:	59                   	pop    ecx
c001dc5c:	58                   	pop    eax
c001dc5d:	c3                   	ret    

c001dc5e <avxClose>:
c001dc5e:	c3                   	ret    

c001dc5f <wouldSheSayYes>:
c001dc5f:	c3                   	ret    
c001dc60:	49                   	dec    ecx
c001dc61:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dc65:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dc69:	75 20                	jne    c001dc8b <isr0+0xb>
c001dc6b:	4e                   	dec    esi
c001dc6c:	79 61                	jns    c001dccf <isr7+0x3>
c001dc6e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001dc73:	66 90                	xchg   ax,ax
c001dc75:	66 90                	xchg   ax,ax
c001dc77:	66 90                	xchg   ax,ax
c001dc79:	66 90                	xchg   ax,ax
c001dc7b:	66 90                	xchg   ax,ax
c001dc7d:	66 90                	xchg   ax,ax
c001dc7f:	90                   	nop

c001dc80 <isr0>:
c001dc80:	fa                   	cli    
c001dc81:	68 00 00 00 00       	push   0x0
c001dc86:	68 00 00 00 00       	push   0x0
c001dc8b:	e9 56 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dc90 <isr1>:
c001dc90:	fa                   	cli    
c001dc91:	6a 00                	push   0x0
c001dc93:	6a 01                	push   0x1
c001dc95:	e9 4c 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dc9a <isr2>:
c001dc9a:	fa                   	cli    
c001dc9b:	6a 00                	push   0x0
c001dc9d:	6a 02                	push   0x2
c001dc9f:	e9 42 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dca4 <isr3>:
c001dca4:	fa                   	cli    
c001dca5:	6a 00                	push   0x0
c001dca7:	6a 03                	push   0x3
c001dca9:	e9 38 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dcae <isr4>:
c001dcae:	fa                   	cli    
c001dcaf:	6a 00                	push   0x0
c001dcb1:	6a 04                	push   0x4
c001dcb3:	e9 2e 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dcb8 <isr5>:
c001dcb8:	fa                   	cli    
c001dcb9:	6a 00                	push   0x0
c001dcbb:	6a 05                	push   0x5
c001dcbd:	e9 24 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dcc2 <isr6>:
c001dcc2:	fa                   	cli    
c001dcc3:	6a 00                	push   0x0
c001dcc5:	6a 06                	push   0x6
c001dcc7:	e9 1a 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dccc <isr7>:
c001dccc:	fa                   	cli    
c001dccd:	6a 00                	push   0x0
c001dccf:	6a 07                	push   0x7
c001dcd1:	e9 10 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dcd6 <isr8>:
c001dcd6:	fa                   	cli    
c001dcd7:	6a 08                	push   0x8
c001dcd9:	e9 08 01 00 00       	jmp    c001dde6 <int_common_stub>

c001dcde <isr9>:
c001dcde:	fa                   	cli    
c001dcdf:	6a 00                	push   0x0
c001dce1:	6a 09                	push   0x9
c001dce3:	e9 fe 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dce8 <isr10>:
c001dce8:	fa                   	cli    
c001dce9:	6a 0a                	push   0xa
c001dceb:	e9 f6 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dcf0 <isr11>:
c001dcf0:	fa                   	cli    
c001dcf1:	6a 0b                	push   0xb
c001dcf3:	e9 ee 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dcf8 <isr12>:
c001dcf8:	fa                   	cli    
c001dcf9:	6a 0c                	push   0xc
c001dcfb:	e9 e6 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd00 <isr13>:
c001dd00:	fa                   	cli    
c001dd01:	6a 0d                	push   0xd
c001dd03:	53                   	push   ebx
c001dd04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd08:	81 fb d6 de 01 c0    	cmp    ebx,0xc001ded6
c001dd0e:	5b                   	pop    ebx
c001dd0f:	0f 84 c3 01 00 00    	je     c001ded8 <finishSignal2>
c001dd15:	e9 cc 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd1a <isr14>:
c001dd1a:	fa                   	cli    
c001dd1b:	6a 0e                	push   0xe
c001dd1d:	e9 c4 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd22 <isr15>:
c001dd22:	fa                   	cli    
c001dd23:	6a 00                	push   0x0
c001dd25:	6a 0f                	push   0xf
c001dd27:	e9 ba 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd2c <isr16>:
c001dd2c:	fa                   	cli    
c001dd2d:	6a 00                	push   0x0
c001dd2f:	6a 10                	push   0x10
c001dd31:	e9 b0 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd36 <isr17>:
c001dd36:	fa                   	cli    
c001dd37:	6a 00                	push   0x0
c001dd39:	6a 11                	push   0x11
c001dd3b:	e9 a6 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd40 <isr18>:
c001dd40:	fa                   	cli    
c001dd41:	6a 00                	push   0x0
c001dd43:	6a 12                	push   0x12
c001dd45:	e9 9c 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd4a <irq3>:
c001dd4a:	fa                   	cli    
c001dd4b:	6a 00                	push   0x0
c001dd4d:	6a 23                	push   0x23
c001dd4f:	e9 92 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd54 <irq4>:
c001dd54:	fa                   	cli    
c001dd55:	6a 00                	push   0x0
c001dd57:	6a 24                	push   0x24
c001dd59:	e9 88 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd5e <irq5>:
c001dd5e:	fa                   	cli    
c001dd5f:	6a 00                	push   0x0
c001dd61:	6a 25                	push   0x25
c001dd63:	e9 7e 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd68 <irq6>:
c001dd68:	fa                   	cli    
c001dd69:	6a 00                	push   0x0
c001dd6b:	6a 26                	push   0x26
c001dd6d:	e9 74 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd72 <irq7>:
c001dd72:	fa                   	cli    
c001dd73:	6a 00                	push   0x0
c001dd75:	6a 27                	push   0x27
c001dd77:	e9 6a 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd7c <irq8>:
c001dd7c:	fa                   	cli    
c001dd7d:	6a 00                	push   0x0
c001dd7f:	6a 28                	push   0x28
c001dd81:	e9 60 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd86 <irq9>:
c001dd86:	fa                   	cli    
c001dd87:	6a 00                	push   0x0
c001dd89:	6a 29                	push   0x29
c001dd8b:	e9 56 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd90 <irq10>:
c001dd90:	fa                   	cli    
c001dd91:	6a 00                	push   0x0
c001dd93:	6a 2a                	push   0x2a
c001dd95:	e9 4c 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dd9a <irq11>:
c001dd9a:	fa                   	cli    
c001dd9b:	6a 00                	push   0x0
c001dd9d:	6a 2b                	push   0x2b
c001dd9f:	e9 42 00 00 00       	jmp    c001dde6 <int_common_stub>

c001dda4 <irq12>:
c001dda4:	fa                   	cli    
c001dda5:	6a 00                	push   0x0
c001dda7:	6a 2c                	push   0x2c
c001dda9:	e9 38 00 00 00       	jmp    c001dde6 <int_common_stub>

c001ddae <irq13>:
c001ddae:	fa                   	cli    
c001ddaf:	6a 00                	push   0x0
c001ddb1:	6a 2d                	push   0x2d
c001ddb3:	e9 2e 00 00 00       	jmp    c001dde6 <int_common_stub>

c001ddb8 <irq14>:
c001ddb8:	fa                   	cli    
c001ddb9:	6a 00                	push   0x0
c001ddbb:	6a 2e                	push   0x2e
c001ddbd:	e9 24 00 00 00       	jmp    c001dde6 <int_common_stub>

c001ddc2 <irq15>:
c001ddc2:	fa                   	cli    
c001ddc3:	6a 00                	push   0x0
c001ddc5:	6a 2f                	push   0x2f
c001ddc7:	e9 1a 00 00 00       	jmp    c001dde6 <int_common_stub>

c001ddcc <irq1>:
c001ddcc:	fa                   	cli    
c001ddcd:	6a 00                	push   0x0
c001ddcf:	6a 21                	push   0x21
c001ddd1:	eb 13                	jmp    c001dde6 <int_common_stub>

c001ddd3 <irq2>:
c001ddd3:	fa                   	cli    
c001ddd4:	6a 00                	push   0x0
c001ddd6:	6a 22                	push   0x22
c001ddd8:	eb 0c                	jmp    c001dde6 <int_common_stub>

c001ddda <isr96>:
c001ddda:	6a 00                	push   0x0
c001dddc:	6a 60                	push   0x60
c001ddde:	fb                   	sti    
c001dddf:	eb 37                	jmp    c001de18 <syscall_common_stub>

c001dde1 <irq0>:
c001dde1:	fa                   	cli    
c001dde2:	6a 00                	push   0x0
c001dde4:	6a 20                	push   0x20

c001dde6 <int_common_stub>:
c001dde6:	60                   	pusha  
c001dde7:	1e                   	push   ds
c001dde8:	06                   	push   es
c001dde9:	0f a0                	push   fs
c001ddeb:	0f a8                	push   gs
c001dded:	66 b8 10 00          	mov    ax,0x10
c001ddf1:	66 8e d8             	mov    ds,ax
c001ddf4:	66 8e c0             	mov    es,ax
c001ddf7:	66 8e e0             	mov    fs,ax
c001ddfa:	66 8e e8             	mov    gs,ax
c001ddfd:	54                   	push   esp
c001ddfe:	fc                   	cld    
c001ddff:	e8 9c e4 fe ff       	call   c000c2a0 <int_handler>
c001de04:	81 c4 04 00 00 00    	add    esp,0x4
c001de0a:	0f a9                	pop    gs
c001de0c:	0f a1                	pop    fs
c001de0e:	07                   	pop    es
c001de0f:	1f                   	pop    ds
c001de10:	61                   	popa   
c001de11:	81 c4 08 00 00 00    	add    esp,0x8
c001de17:	cf                   	iret   

c001de18 <syscall_common_stub>:
c001de18:	60                   	pusha  
c001de19:	1e                   	push   ds
c001de1a:	06                   	push   es
c001de1b:	0f a0                	push   fs
c001de1d:	0f a8                	push   gs
c001de1f:	66 b8 10 00          	mov    ax,0x10
c001de23:	66 8e d8             	mov    ds,ax
c001de26:	66 8e c0             	mov    es,ax
c001de29:	66 8e e0             	mov    fs,ax
c001de2c:	66 8e e8             	mov    gs,ax
c001de2f:	54                   	push   esp
c001de30:	fc                   	cld    
c001de31:	e8 6a e4 fe ff       	call   c000c2a0 <int_handler>
c001de36:	81 c4 04 00 00 00    	add    esp,0x4
c001de3c:	0f a9                	pop    gs
c001de3e:	0f a1                	pop    fs
c001de40:	07                   	pop    es
c001de41:	1f                   	pop    ds
c001de42:	e8 ba 2e ff ff       	call   c0010d01 <KiCheckSignalZ>
c001de47:	3d 00 00 00 00       	cmp    eax,0x0
c001de4c:	0f 84 c0 00 00 00    	je     c001df12 <skipSignals>
c001de52:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001de57:	61                   	popa   
c001de58:	53                   	push   ebx
c001de59:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001de5f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001de62:	5b                   	pop    ebx
c001de63:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001de68:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001de6b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001de6e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001de71:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001de74:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001de77:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001de7a:	81 c4 08 00 00 00    	add    esp,0x8
c001de80:	5e                   	pop    esi
c001de81:	5b                   	pop    ebx
c001de82:	59                   	pop    ecx
c001de83:	5a                   	pop    edx
c001de84:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001de87:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001de8a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001de8d:	52                   	push   edx
c001de8e:	51                   	push   ecx
c001de8f:	53                   	push   ebx
c001de90:	56                   	push   esi
c001de91:	81 ec 08 00 00 00    	sub    esp,0x8
c001de97:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001de9a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001de9d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001dea0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dea3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dea6:	60                   	pusha  
c001dea7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001dead:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001deb0:	89 e3                	mov    ebx,esp
c001deb2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001deb5:	52                   	push   edx
c001deb6:	68 d6 de 01 c0       	push   0xc001ded6
c001debb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001debe:	89 dc                	mov    esp,ebx
c001dec0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001dec3:	68 23 00 00 00       	push   0x23
c001dec8:	51                   	push   ecx
c001dec9:	68 02 02 00 00       	push   0x202
c001dece:	68 1b 00 00 00       	push   0x1b
c001ded3:	ff 36                	push   DWORD PTR [esi]
c001ded5:	cf                   	iret   

c001ded6 <finishSignal>:
c001ded6:	cd 0f                	int    0xf

c001ded8 <finishSignal2>:
c001ded8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001dede:	e8 9b 2e ff ff       	call   c0010d7e <KiFinishSignalZ>
c001dee3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001dee9:	68 23 00 00 00       	push   0x23
c001deee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001def1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001def4:	68 1b 00 00 00       	push   0x1b
c001def9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001defc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001deff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001df02:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001df05:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001df08:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001df0b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001df0e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001df11:	cf                   	iret   

c001df12 <skipSignals>:
c001df12:	61                   	popa   
c001df13:	81 c4 08 00 00 00    	add    esp,0x8
c001df19:	cf                   	iret   
c001df1a:	90                   	nop
c001df1b:	90                   	nop

c001df1c <irq16>:
c001df1c:	fa                   	cli    
c001df1d:	6a 00                	push   0x0
c001df1f:	6a 30                	push   0x30
c001df21:	e9 c0 fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df26 <irq17>:
c001df26:	fa                   	cli    
c001df27:	6a 00                	push   0x0
c001df29:	6a 31                	push   0x31
c001df2b:	e9 b6 fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df30 <irq18>:
c001df30:	fa                   	cli    
c001df31:	6a 00                	push   0x0
c001df33:	6a 32                	push   0x32
c001df35:	e9 ac fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df3a <irq19>:
c001df3a:	fa                   	cli    
c001df3b:	6a 00                	push   0x0
c001df3d:	6a 33                	push   0x33
c001df3f:	e9 a2 fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df44 <irq20>:
c001df44:	fa                   	cli    
c001df45:	6a 00                	push   0x0
c001df47:	6a 34                	push   0x34
c001df49:	e9 98 fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df4e <irq21>:
c001df4e:	fa                   	cli    
c001df4f:	6a 00                	push   0x0
c001df51:	6a 35                	push   0x35
c001df53:	e9 8e fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df58 <irq22>:
c001df58:	fa                   	cli    
c001df59:	6a 00                	push   0x0
c001df5b:	6a 36                	push   0x36
c001df5d:	e9 84 fe ff ff       	jmp    c001dde6 <int_common_stub>

c001df62 <irq23>:
c001df62:	fa                   	cli    
c001df63:	6a 00                	push   0x0
c001df65:	6a 37                	push   0x37
c001df67:	e9 7a fe ff ff       	jmp    c001dde6 <int_common_stub>
c001df6c:	66 90                	xchg   ax,ax
c001df6e:	66 90                	xchg   ax,ax

c001df70 <i386GetRDRAND>:
c001df70:	b9 64 00 00 00       	mov    ecx,0x64

c001df75 <retry>:
c001df75:	0f c7 f0             	rdrand eax
c001df78:	72 05                	jb     c001df7f <retry.done>
c001df7a:	e2 f9                	loop   c001df75 <retry>

c001df7c <retry.fail>:
c001df7c:	31 c0                	xor    eax,eax
c001df7e:	c3                   	ret    

c001df7f <retry.done>:
c001df7f:	c3                   	ret    

c001df80 <absolutelyNoChanceInHell>:
c001df80:	b8 01 00 00 00       	mov    eax,0x1
c001df85:	0f a2                	cpuid  
c001df87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001df8d:	74 06                	je     c001df95 <sseDetect.noSSE>
c001df8f:	b8 01 00 00 00       	mov    eax,0x1
c001df94:	c3                   	ret    

c001df95 <sseDetect.noSSE>:
c001df95:	31 c0                	xor    eax,eax
c001df97:	c3                   	ret    

c001df98 <sseSave>:
c001df98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9c:	0f ae 00             	fxsave [eax]
c001df9f:	c3                   	ret    

c001dfa0 <sseLoad>:
c001dfa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfa4:	0f ae 08             	fxrstor [eax]
c001dfa7:	c3                   	ret    

c001dfa8 <sseInit>:
c001dfa8:	e8 42 00 00 00       	call   c001dfef <x87Init>
c001dfad:	0f 20 e0             	mov    eax,cr4
c001dfb0:	66 0d 00 06          	or     ax,0x600
c001dfb4:	0f 22 e0             	mov    cr4,eax
c001dfb7:	c3                   	ret    

c001dfb8 <sseClose>:
c001dfb8:	c3                   	ret    
c001dfb9:	66 90                	xchg   ax,ax
c001dfbb:	66 90                	xchg   ax,ax
c001dfbd:	66 90                	xchg   ax,ax
c001dfbf:	90                   	nop

c001dfc0 <value_37F>:
c001dfc0:	7f 03                	jg     c001dfc5 <value_37A+0x1>

c001dfc2 <value_37E>:
c001dfc2:	7e 03                	jle    c001dfc7 <x87Detect+0x1>

c001dfc4 <value_37A>:
c001dfc4:	7a 03                	jp     c001dfc9 <x87Detect+0x3>

c001dfc6 <x87Detect>:
c001dfc6:	b8 01 00 00 00       	mov    eax,0x1
c001dfcb:	0f a2                	cpuid  
c001dfcd:	f7 c2 01 00 00 00    	test   edx,0x1
c001dfd3:	74 06                	je     c001dfdb <x87Detect.nox87>
c001dfd5:	b8 01 00 00 00       	mov    eax,0x1
c001dfda:	c3                   	ret    

c001dfdb <x87Detect.nox87>:
c001dfdb:	b8 00 00 00 00       	mov    eax,0x0
c001dfe0:	c3                   	ret    

c001dfe1 <x87Save>:
c001dfe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe5:	dd 30                	fnsave [eax]
c001dfe7:	c3                   	ret    

c001dfe8 <x87Load>:
c001dfe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfec:	dd 20                	frstor [eax]
c001dfee:	c3                   	ret    

c001dfef <x87Init>:
c001dfef:	0f 20 c0             	mov    eax,cr0
c001dff2:	66 25 fb ff          	and    ax,0xfffb
c001dff6:	66 0d 22 00          	or     ax,0x22
c001dffa:	0f 22 c0             	mov    cr0,eax
c001dffd:	db e3                	fninit 
c001dfff:	0f 06                	clts   
c001e001:	d9 2d c4 df 01 c0    	fldcw  WORD PTR ds:0xc001dfc4
c001e007:	c3                   	ret    

c001e008 <x87Close>:
c001e008:	c3                   	ret    
c001e009:	66 90                	xchg   ax,ax
c001e00b:	90                   	nop

c001e00c <__do_global_ctors_aux>:
c001e00c:	a1 20 ef 01 c0       	mov    eax,ds:0xc001ef20
c001e011:	83 f8 ff             	cmp    eax,0xffffffff
c001e014:	74 1a                	je     c001e030 <__do_global_ctors_aux+0x24>
c001e016:	55                   	push   ebp
c001e017:	89 e5                	mov    ebp,esp
c001e019:	53                   	push   ebx
c001e01a:	52                   	push   edx
c001e01b:	bb 20 ef 01 c0       	mov    ebx,0xc001ef20
c001e020:	ff d0                	call   eax
c001e022:	83 eb 04             	sub    ebx,0x4
c001e025:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e027:	83 f8 ff             	cmp    eax,0xffffffff
c001e02a:	75 f4                	jne    c001e020 <__do_global_ctors_aux+0x14>
c001e02c:	58                   	pop    eax
c001e02d:	5b                   	pop    ebx
c001e02e:	5d                   	pop    ebp
c001e02f:	c3                   	ret    
c001e030:	c3                   	ret    
c001e031:	66 90                	xchg   ax,ax
c001e033:	90                   	nop

c001e034 <__divdi3>:
c001e034:	55                   	push   ebp
c001e035:	57                   	push   edi
c001e036:	56                   	push   esi
c001e037:	53                   	push   ebx
c001e038:	83 ec 1c             	sub    esp,0x1c
c001e03b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e03f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e043:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e046:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e04a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e04e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e052:	85 db                	test   ebx,ebx
c001e054:	0f 88 8e 00 00 00    	js     c001e0e8 <__divdi3+0xb4>
c001e05a:	89 dd                	mov    ebp,ebx
c001e05c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e064:	89 d3                	mov    ebx,edx
c001e066:	85 d2                	test   edx,edx
c001e068:	79 0d                	jns    c001e077 <__divdi3+0x43>
c001e06a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e06e:	f7 d8                	neg    eax
c001e070:	83 d2 00             	adc    edx,0x0
c001e073:	f7 da                	neg    edx
c001e075:	89 d3                	mov    ebx,edx
c001e077:	89 c7                	mov    edi,eax
c001e079:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e07c:	85 db                	test   ebx,ebx
c001e07e:	75 48                	jne    c001e0c8 <__divdi3+0x94>
c001e080:	39 ef                	cmp    edi,ebp
c001e082:	76 24                	jbe    c001e0a8 <__divdi3+0x74>
c001e084:	89 ea                	mov    edx,ebp
c001e086:	f7 f7                	div    edi
c001e088:	89 c1                	mov    ecx,eax
c001e08a:	31 f6                	xor    esi,esi
c001e08c:	89 c8                	mov    eax,ecx
c001e08e:	89 f2                	mov    edx,esi
c001e090:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e094:	85 c9                	test   ecx,ecx
c001e096:	74 07                	je     c001e09f <__divdi3+0x6b>
c001e098:	f7 d8                	neg    eax
c001e09a:	83 d2 00             	adc    edx,0x0
c001e09d:	f7 da                	neg    edx
c001e09f:	83 c4 1c             	add    esp,0x1c
c001e0a2:	5b                   	pop    ebx
c001e0a3:	5e                   	pop    esi
c001e0a4:	5f                   	pop    edi
c001e0a5:	5d                   	pop    ebp
c001e0a6:	c3                   	ret    
c001e0a7:	90                   	nop
c001e0a8:	85 ff                	test   edi,edi
c001e0aa:	75 0b                	jne    c001e0b7 <__divdi3+0x83>
c001e0ac:	b8 01 00 00 00       	mov    eax,0x1
c001e0b1:	31 d2                	xor    edx,edx
c001e0b3:	f7 f3                	div    ebx
c001e0b5:	89 c7                	mov    edi,eax
c001e0b7:	31 d2                	xor    edx,edx
c001e0b9:	89 e8                	mov    eax,ebp
c001e0bb:	f7 f7                	div    edi
c001e0bd:	89 c6                	mov    esi,eax
c001e0bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e0c2:	f7 f7                	div    edi
c001e0c4:	89 c1                	mov    ecx,eax
c001e0c6:	eb c4                	jmp    c001e08c <__divdi3+0x58>
c001e0c8:	39 eb                	cmp    ebx,ebp
c001e0ca:	77 3c                	ja     c001e108 <__divdi3+0xd4>
c001e0cc:	0f bd f3             	bsr    esi,ebx
c001e0cf:	83 f6 1f             	xor    esi,0x1f
c001e0d2:	75 40                	jne    c001e114 <__divdi3+0xe0>
c001e0d4:	39 eb                	cmp    ebx,ebp
c001e0d6:	72 09                	jb     c001e0e1 <__divdi3+0xad>
c001e0d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e0db:	0f 87 97 00 00 00    	ja     c001e178 <__divdi3+0x144>
c001e0e1:	b9 01 00 00 00       	mov    ecx,0x1
c001e0e6:	eb a4                	jmp    c001e08c <__divdi3+0x58>
c001e0e8:	f7 d9                	neg    ecx
c001e0ea:	83 d3 00             	adc    ebx,0x0
c001e0ed:	f7 db                	neg    ebx
c001e0ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e0f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e0f6:	89 dd                	mov    ebp,ebx
c001e0f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e100:	e9 5f ff ff ff       	jmp    c001e064 <__divdi3+0x30>
c001e105:	8d 76 00             	lea    esi,[esi+0x0]
c001e108:	31 f6                	xor    esi,esi
c001e10a:	31 c9                	xor    ecx,ecx
c001e10c:	e9 7b ff ff ff       	jmp    c001e08c <__divdi3+0x58>
c001e111:	8d 76 00             	lea    esi,[esi+0x0]
c001e114:	b8 20 00 00 00       	mov    eax,0x20
c001e119:	29 f0                	sub    eax,esi
c001e11b:	89 f1                	mov    ecx,esi
c001e11d:	d3 e3                	shl    ebx,cl
c001e11f:	89 fa                	mov    edx,edi
c001e121:	88 c1                	mov    cl,al
c001e123:	d3 ea                	shr    edx,cl
c001e125:	09 da                	or     edx,ebx
c001e127:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e12b:	89 f1                	mov    ecx,esi
c001e12d:	d3 e7                	shl    edi,cl
c001e12f:	89 eb                	mov    ebx,ebp
c001e131:	88 c1                	mov    cl,al
c001e133:	d3 eb                	shr    ebx,cl
c001e135:	89 f1                	mov    ecx,esi
c001e137:	d3 e5                	shl    ebp,cl
c001e139:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e13c:	88 c1                	mov    cl,al
c001e13e:	d3 ea                	shr    edx,cl
c001e140:	09 d5                	or     ebp,edx
c001e142:	89 e8                	mov    eax,ebp
c001e144:	89 da                	mov    edx,ebx
c001e146:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e14a:	89 d3                	mov    ebx,edx
c001e14c:	89 c5                	mov    ebp,eax
c001e14e:	f7 e7                	mul    edi
c001e150:	39 d3                	cmp    ebx,edx
c001e152:	72 18                	jb     c001e16c <__divdi3+0x138>
c001e154:	74 0a                	je     c001e160 <__divdi3+0x12c>
c001e156:	89 e9                	mov    ecx,ebp
c001e158:	31 f6                	xor    esi,esi
c001e15a:	e9 2d ff ff ff       	jmp    c001e08c <__divdi3+0x58>
c001e15f:	90                   	nop
c001e160:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e163:	89 f1                	mov    ecx,esi
c001e165:	d3 e7                	shl    edi,cl
c001e167:	39 c7                	cmp    edi,eax
c001e169:	73 eb                	jae    c001e156 <__divdi3+0x122>
c001e16b:	90                   	nop
c001e16c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e16f:	31 f6                	xor    esi,esi
c001e171:	e9 16 ff ff ff       	jmp    c001e08c <__divdi3+0x58>
c001e176:	66 90                	xchg   ax,ax
c001e178:	31 c9                	xor    ecx,ecx
c001e17a:	e9 0d ff ff ff       	jmp    c001e08c <__divdi3+0x58>
c001e17f:	90                   	nop

c001e180 <__moddi3>:
c001e180:	55                   	push   ebp
c001e181:	57                   	push   edi
c001e182:	56                   	push   esi
c001e183:	53                   	push   ebx
c001e184:	83 ec 2c             	sub    esp,0x2c
c001e187:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e18b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e18f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e193:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e197:	85 db                	test   ebx,ebx
c001e199:	0f 88 85 00 00 00    	js     c001e224 <__moddi3+0xa4>
c001e19f:	89 de                	mov    esi,ebx
c001e1a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e1a9:	89 d7                	mov    edi,edx
c001e1ab:	85 d2                	test   edx,edx
c001e1ad:	79 09                	jns    c001e1b8 <__moddi3+0x38>
c001e1af:	f7 d8                	neg    eax
c001e1b1:	83 d2 00             	adc    edx,0x0
c001e1b4:	f7 da                	neg    edx
c001e1b6:	89 d7                	mov    edi,edx
c001e1b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1bc:	89 cd                	mov    ebp,ecx
c001e1be:	85 ff                	test   edi,edi
c001e1c0:	75 52                	jne    c001e214 <__moddi3+0x94>
c001e1c2:	89 c3                	mov    ebx,eax
c001e1c4:	39 f0                	cmp    eax,esi
c001e1c6:	76 24                	jbe    c001e1ec <__moddi3+0x6c>
c001e1c8:	89 c8                	mov    eax,ecx
c001e1ca:	89 f2                	mov    edx,esi
c001e1cc:	f7 f3                	div    ebx
c001e1ce:	89 d6                	mov    esi,edx
c001e1d0:	89 f0                	mov    eax,esi
c001e1d2:	31 d2                	xor    edx,edx
c001e1d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e1d8:	85 c9                	test   ecx,ecx
c001e1da:	74 07                	je     c001e1e3 <__moddi3+0x63>
c001e1dc:	f7 d8                	neg    eax
c001e1de:	83 d2 00             	adc    edx,0x0
c001e1e1:	f7 da                	neg    edx
c001e1e3:	83 c4 2c             	add    esp,0x2c
c001e1e6:	5b                   	pop    ebx
c001e1e7:	5e                   	pop    esi
c001e1e8:	5f                   	pop    edi
c001e1e9:	5d                   	pop    ebp
c001e1ea:	c3                   	ret    
c001e1eb:	90                   	nop
c001e1ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e1f0:	85 db                	test   ebx,ebx
c001e1f2:	75 0d                	jne    c001e201 <__moddi3+0x81>
c001e1f4:	b8 01 00 00 00       	mov    eax,0x1
c001e1f9:	31 d2                	xor    edx,edx
c001e1fb:	f7 f7                	div    edi
c001e1fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e201:	89 f0                	mov    eax,esi
c001e203:	31 d2                	xor    edx,edx
c001e205:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e209:	f7 f7                	div    edi
c001e20b:	89 e8                	mov    eax,ebp
c001e20d:	f7 f7                	div    edi
c001e20f:	89 d6                	mov    esi,edx
c001e211:	eb bd                	jmp    c001e1d0 <__moddi3+0x50>
c001e213:	90                   	nop
c001e214:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e218:	39 f7                	cmp    edi,esi
c001e21a:	76 20                	jbe    c001e23c <__moddi3+0xbc>
c001e21c:	89 c8                	mov    eax,ecx
c001e21e:	89 f2                	mov    edx,esi
c001e220:	eb b2                	jmp    c001e1d4 <__moddi3+0x54>
c001e222:	66 90                	xchg   ax,ax
c001e224:	f7 d9                	neg    ecx
c001e226:	83 d3 00             	adc    ebx,0x0
c001e229:	f7 db                	neg    ebx
c001e22b:	89 de                	mov    esi,ebx
c001e22d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e235:	e9 6f ff ff ff       	jmp    c001e1a9 <__moddi3+0x29>
c001e23a:	66 90                	xchg   ax,ax
c001e23c:	0f bd c7             	bsr    eax,edi
c001e23f:	83 f0 1f             	xor    eax,0x1f
c001e242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e246:	75 24                	jne    c001e26c <__moddi3+0xec>
c001e248:	39 f7                	cmp    edi,esi
c001e24a:	72 06                	jb     c001e252 <__moddi3+0xd2>
c001e24c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e250:	77 0c                	ja     c001e25e <__moddi3+0xde>
c001e252:	89 e9                	mov    ecx,ebp
c001e254:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e258:	19 fe                	sbb    esi,edi
c001e25a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e25e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e262:	89 f2                	mov    edx,esi
c001e264:	e9 6b ff ff ff       	jmp    c001e1d4 <__moddi3+0x54>
c001e269:	8d 76 00             	lea    esi,[esi+0x0]
c001e26c:	b8 20 00 00 00       	mov    eax,0x20
c001e271:	89 c2                	mov    edx,eax
c001e273:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e277:	29 da                	sub    edx,ebx
c001e279:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e27d:	88 d9                	mov    cl,bl
c001e27f:	d3 e7                	shl    edi,cl
c001e281:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e285:	88 d1                	mov    cl,dl
c001e287:	d3 e8                	shr    eax,cl
c001e289:	09 c7                	or     edi,eax
c001e28b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e28f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e293:	89 d8                	mov    eax,ebx
c001e295:	88 d9                	mov    cl,bl
c001e297:	d3 e7                	shl    edi,cl
c001e299:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e29d:	89 f3                	mov    ebx,esi
c001e29f:	88 d1                	mov    cl,dl
c001e2a1:	d3 eb                	shr    ebx,cl
c001e2a3:	89 c7                	mov    edi,eax
c001e2a5:	88 c1                	mov    cl,al
c001e2a7:	d3 e6                	shl    esi,cl
c001e2a9:	89 e8                	mov    eax,ebp
c001e2ab:	88 d1                	mov    cl,dl
c001e2ad:	d3 e8                	shr    eax,cl
c001e2af:	09 f0                	or     eax,esi
c001e2b1:	89 f9                	mov    ecx,edi
c001e2b3:	d3 e5                	shl    ebp,cl
c001e2b5:	89 da                	mov    edx,ebx
c001e2b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e2bb:	89 d3                	mov    ebx,edx
c001e2bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2c1:	89 c6                	mov    esi,eax
c001e2c3:	89 d1                	mov    ecx,edx
c001e2c5:	39 d3                	cmp    ebx,edx
c001e2c7:	72 27                	jb     c001e2f0 <__moddi3+0x170>
c001e2c9:	74 21                	je     c001e2ec <__moddi3+0x16c>
c001e2cb:	29 f5                	sub    ebp,esi
c001e2cd:	19 cb                	sbb    ebx,ecx
c001e2cf:	89 de                	mov    esi,ebx
c001e2d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e2d5:	d3 e6                	shl    esi,cl
c001e2d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e2db:	89 f9                	mov    ecx,edi
c001e2dd:	d3 ed                	shr    ebp,cl
c001e2df:	09 ee                	or     esi,ebp
c001e2e1:	89 f0                	mov    eax,esi
c001e2e3:	d3 eb                	shr    ebx,cl
c001e2e5:	89 da                	mov    edx,ebx
c001e2e7:	e9 e8 fe ff ff       	jmp    c001e1d4 <__moddi3+0x54>
c001e2ec:	39 c5                	cmp    ebp,eax
c001e2ee:	73 db                	jae    c001e2cb <__moddi3+0x14b>
c001e2f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e2f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e2f8:	89 d1                	mov    ecx,edx
c001e2fa:	89 c6                	mov    esi,eax
c001e2fc:	eb cd                	jmp    c001e2cb <__moddi3+0x14b>
c001e2fe:	66 90                	xchg   ax,ax

c001e300 <__udivdi3>:
c001e300:	55                   	push   ebp
c001e301:	57                   	push   edi
c001e302:	56                   	push   esi
c001e303:	53                   	push   ebx
c001e304:	83 ec 1c             	sub    esp,0x1c
c001e307:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e30b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e30f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e313:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e317:	85 d2                	test   edx,edx
c001e319:	75 41                	jne    c001e35c <__udivdi3+0x5c>
c001e31b:	39 f7                	cmp    edi,esi
c001e31d:	76 15                	jbe    c001e334 <__udivdi3+0x34>
c001e31f:	89 e8                	mov    eax,ebp
c001e321:	89 f2                	mov    edx,esi
c001e323:	f7 f7                	div    edi
c001e325:	31 db                	xor    ebx,ebx
c001e327:	89 da                	mov    edx,ebx
c001e329:	83 c4 1c             	add    esp,0x1c
c001e32c:	5b                   	pop    ebx
c001e32d:	5e                   	pop    esi
c001e32e:	5f                   	pop    edi
c001e32f:	5d                   	pop    ebp
c001e330:	c3                   	ret    
c001e331:	8d 76 00             	lea    esi,[esi+0x0]
c001e334:	89 f9                	mov    ecx,edi
c001e336:	85 ff                	test   edi,edi
c001e338:	75 0b                	jne    c001e345 <__udivdi3+0x45>
c001e33a:	b8 01 00 00 00       	mov    eax,0x1
c001e33f:	31 d2                	xor    edx,edx
c001e341:	f7 f7                	div    edi
c001e343:	89 c1                	mov    ecx,eax
c001e345:	31 d2                	xor    edx,edx
c001e347:	89 f0                	mov    eax,esi
c001e349:	f7 f1                	div    ecx
c001e34b:	89 c3                	mov    ebx,eax
c001e34d:	89 e8                	mov    eax,ebp
c001e34f:	f7 f1                	div    ecx
c001e351:	89 da                	mov    edx,ebx
c001e353:	83 c4 1c             	add    esp,0x1c
c001e356:	5b                   	pop    ebx
c001e357:	5e                   	pop    esi
c001e358:	5f                   	pop    edi
c001e359:	5d                   	pop    ebp
c001e35a:	c3                   	ret    
c001e35b:	90                   	nop
c001e35c:	39 f2                	cmp    edx,esi
c001e35e:	77 1c                	ja     c001e37c <__udivdi3+0x7c>
c001e360:	0f bd da             	bsr    ebx,edx
c001e363:	83 f3 1f             	xor    ebx,0x1f
c001e366:	75 24                	jne    c001e38c <__udivdi3+0x8c>
c001e368:	39 f2                	cmp    edx,esi
c001e36a:	72 08                	jb     c001e374 <__udivdi3+0x74>
c001e36c:	39 ef                	cmp    edi,ebp
c001e36e:	0f 87 84 00 00 00    	ja     c001e3f8 <__udivdi3+0xf8>
c001e374:	b8 01 00 00 00       	mov    eax,0x1
c001e379:	eb ac                	jmp    c001e327 <__udivdi3+0x27>
c001e37b:	90                   	nop
c001e37c:	31 db                	xor    ebx,ebx
c001e37e:	31 c0                	xor    eax,eax
c001e380:	89 da                	mov    edx,ebx
c001e382:	83 c4 1c             	add    esp,0x1c
c001e385:	5b                   	pop    ebx
c001e386:	5e                   	pop    esi
c001e387:	5f                   	pop    edi
c001e388:	5d                   	pop    ebp
c001e389:	c3                   	ret    
c001e38a:	66 90                	xchg   ax,ax
c001e38c:	b8 20 00 00 00       	mov    eax,0x20
c001e391:	29 d8                	sub    eax,ebx
c001e393:	88 d9                	mov    cl,bl
c001e395:	d3 e2                	shl    edx,cl
c001e397:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e39b:	89 fa                	mov    edx,edi
c001e39d:	88 c1                	mov    cl,al
c001e39f:	d3 ea                	shr    edx,cl
c001e3a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e3a5:	09 d1                	or     ecx,edx
c001e3a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3ab:	88 d9                	mov    cl,bl
c001e3ad:	d3 e7                	shl    edi,cl
c001e3af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3b3:	89 f7                	mov    edi,esi
c001e3b5:	88 c1                	mov    cl,al
c001e3b7:	d3 ef                	shr    edi,cl
c001e3b9:	88 d9                	mov    cl,bl
c001e3bb:	d3 e6                	shl    esi,cl
c001e3bd:	89 ea                	mov    edx,ebp
c001e3bf:	88 c1                	mov    cl,al
c001e3c1:	d3 ea                	shr    edx,cl
c001e3c3:	09 d6                	or     esi,edx
c001e3c5:	89 f0                	mov    eax,esi
c001e3c7:	89 fa                	mov    edx,edi
c001e3c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e3cd:	89 d7                	mov    edi,edx
c001e3cf:	89 c6                	mov    esi,eax
c001e3d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e3d5:	39 d7                	cmp    edi,edx
c001e3d7:	72 13                	jb     c001e3ec <__udivdi3+0xec>
c001e3d9:	74 09                	je     c001e3e4 <__udivdi3+0xe4>
c001e3db:	89 f0                	mov    eax,esi
c001e3dd:	31 db                	xor    ebx,ebx
c001e3df:	e9 43 ff ff ff       	jmp    c001e327 <__udivdi3+0x27>
c001e3e4:	88 d9                	mov    cl,bl
c001e3e6:	d3 e5                	shl    ebp,cl
c001e3e8:	39 c5                	cmp    ebp,eax
c001e3ea:	73 ef                	jae    c001e3db <__udivdi3+0xdb>
c001e3ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001e3ef:	31 db                	xor    ebx,ebx
c001e3f1:	e9 31 ff ff ff       	jmp    c001e327 <__udivdi3+0x27>
c001e3f6:	66 90                	xchg   ax,ax
c001e3f8:	31 c0                	xor    eax,eax
c001e3fa:	e9 28 ff ff ff       	jmp    c001e327 <__udivdi3+0x27>
c001e3ff:	90                   	nop

c001e400 <__umoddi3>:
c001e400:	55                   	push   ebp
c001e401:	57                   	push   edi
c001e402:	56                   	push   esi
c001e403:	53                   	push   ebx
c001e404:	83 ec 1c             	sub    esp,0x1c
c001e407:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e40b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e40f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e413:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e417:	89 da                	mov    edx,ebx
c001e419:	85 c0                	test   eax,eax
c001e41b:	75 37                	jne    c001e454 <__umoddi3+0x54>
c001e41d:	39 df                	cmp    edi,ebx
c001e41f:	76 13                	jbe    c001e434 <__umoddi3+0x34>
c001e421:	89 f0                	mov    eax,esi
c001e423:	f7 f7                	div    edi
c001e425:	89 d0                	mov    eax,edx
c001e427:	31 d2                	xor    edx,edx
c001e429:	83 c4 1c             	add    esp,0x1c
c001e42c:	5b                   	pop    ebx
c001e42d:	5e                   	pop    esi
c001e42e:	5f                   	pop    edi
c001e42f:	5d                   	pop    ebp
c001e430:	c3                   	ret    
c001e431:	8d 76 00             	lea    esi,[esi+0x0]
c001e434:	89 fd                	mov    ebp,edi
c001e436:	85 ff                	test   edi,edi
c001e438:	75 0b                	jne    c001e445 <__umoddi3+0x45>
c001e43a:	b8 01 00 00 00       	mov    eax,0x1
c001e43f:	31 d2                	xor    edx,edx
c001e441:	f7 f7                	div    edi
c001e443:	89 c5                	mov    ebp,eax
c001e445:	89 d8                	mov    eax,ebx
c001e447:	31 d2                	xor    edx,edx
c001e449:	f7 f5                	div    ebp
c001e44b:	89 f0                	mov    eax,esi
c001e44d:	f7 f5                	div    ebp
c001e44f:	89 d0                	mov    eax,edx
c001e451:	eb d4                	jmp    c001e427 <__umoddi3+0x27>
c001e453:	90                   	nop
c001e454:	89 f1                	mov    ecx,esi
c001e456:	39 d8                	cmp    eax,ebx
c001e458:	76 0a                	jbe    c001e464 <__umoddi3+0x64>
c001e45a:	89 f0                	mov    eax,esi
c001e45c:	83 c4 1c             	add    esp,0x1c
c001e45f:	5b                   	pop    ebx
c001e460:	5e                   	pop    esi
c001e461:	5f                   	pop    edi
c001e462:	5d                   	pop    ebp
c001e463:	c3                   	ret    
c001e464:	0f bd e8             	bsr    ebp,eax
c001e467:	83 f5 1f             	xor    ebp,0x1f
c001e46a:	75 1c                	jne    c001e488 <__umoddi3+0x88>
c001e46c:	39 d8                	cmp    eax,ebx
c001e46e:	72 04                	jb     c001e474 <__umoddi3+0x74>
c001e470:	39 f7                	cmp    edi,esi
c001e472:	77 08                	ja     c001e47c <__umoddi3+0x7c>
c001e474:	89 da                	mov    edx,ebx
c001e476:	29 fe                	sub    esi,edi
c001e478:	19 c2                	sbb    edx,eax
c001e47a:	89 f1                	mov    ecx,esi
c001e47c:	89 c8                	mov    eax,ecx
c001e47e:	83 c4 1c             	add    esp,0x1c
c001e481:	5b                   	pop    ebx
c001e482:	5e                   	pop    esi
c001e483:	5f                   	pop    edi
c001e484:	5d                   	pop    ebp
c001e485:	c3                   	ret    
c001e486:	66 90                	xchg   ax,ax
c001e488:	ba 20 00 00 00       	mov    edx,0x20
c001e48d:	29 ea                	sub    edx,ebp
c001e48f:	89 e9                	mov    ecx,ebp
c001e491:	d3 e0                	shl    eax,cl
c001e493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e497:	89 f8                	mov    eax,edi
c001e499:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e49d:	88 d1                	mov    cl,dl
c001e49f:	d3 e8                	shr    eax,cl
c001e4a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4a5:	09 c1                	or     ecx,eax
c001e4a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4ab:	89 e9                	mov    ecx,ebp
c001e4ad:	d3 e7                	shl    edi,cl
c001e4af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4b3:	89 d8                	mov    eax,ebx
c001e4b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e4b9:	88 d1                	mov    cl,dl
c001e4bb:	d3 e8                	shr    eax,cl
c001e4bd:	89 c7                	mov    edi,eax
c001e4bf:	89 e9                	mov    ecx,ebp
c001e4c1:	d3 e3                	shl    ebx,cl
c001e4c3:	89 f0                	mov    eax,esi
c001e4c5:	88 d1                	mov    cl,dl
c001e4c7:	d3 e8                	shr    eax,cl
c001e4c9:	09 d8                	or     eax,ebx
c001e4cb:	89 e9                	mov    ecx,ebp
c001e4cd:	d3 e6                	shl    esi,cl
c001e4cf:	89 f3                	mov    ebx,esi
c001e4d1:	89 fa                	mov    edx,edi
c001e4d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e4d7:	89 d1                	mov    ecx,edx
c001e4d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e4dd:	89 c6                	mov    esi,eax
c001e4df:	89 d7                	mov    edi,edx
c001e4e1:	39 d1                	cmp    ecx,edx
c001e4e3:	72 27                	jb     c001e50c <__umoddi3+0x10c>
c001e4e5:	74 21                	je     c001e508 <__umoddi3+0x108>
c001e4e7:	89 ca                	mov    edx,ecx
c001e4e9:	29 f3                	sub    ebx,esi
c001e4eb:	19 fa                	sbb    edx,edi
c001e4ed:	89 d0                	mov    eax,edx
c001e4ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e4f3:	d3 e0                	shl    eax,cl
c001e4f5:	89 e9                	mov    ecx,ebp
c001e4f7:	d3 eb                	shr    ebx,cl
c001e4f9:	09 d8                	or     eax,ebx
c001e4fb:	d3 ea                	shr    edx,cl
c001e4fd:	83 c4 1c             	add    esp,0x1c
c001e500:	5b                   	pop    ebx
c001e501:	5e                   	pop    esi
c001e502:	5f                   	pop    edi
c001e503:	5d                   	pop    ebp
c001e504:	c3                   	ret    
c001e505:	8d 76 00             	lea    esi,[esi+0x0]
c001e508:	39 c3                	cmp    ebx,eax
c001e50a:	73 db                	jae    c001e4e7 <__umoddi3+0xe7>
c001e50c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e510:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e514:	89 d7                	mov    edi,edx
c001e516:	89 c6                	mov    esi,eax
c001e518:	eb cd                	jmp    c001e4e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e51a <_init>:
c001e51a:	55                   	push   ebp
c001e51b:	89 e5                	mov    ebp,esp
c001e51d:	e8 d2 1b fe ff       	call   c00000f4 <frame_dummy>
c001e522:	e8 e5 fa ff ff       	call   c001e00c <__do_global_ctors_aux>
c001e527:	5d                   	pop    ebp
c001e528:	c3                   	ret    

Disassembly of section .fini:

c001e529 <_fini>:
c001e529:	55                   	push   ebp
c001e52a:	89 e5                	mov    ebp,esp
c001e52c:	e8 53 1b fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e531:	5d                   	pop    ebp
c001e532:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e534 <Computer::~Computer()>:
c001e534:	83 ec 1c             	sub    esp,0x1c
c001e537:	ba 90 f7 01 c0       	mov    edx,0xc001f790
c001e53c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e540:	89 10                	mov    DWORD PTR [eax],edx
c001e542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e546:	89 04 24             	mov    DWORD PTR [esp],eax
c001e549:	e8 b8 d7 fe ff       	call   c000bd06 <Device::~Device()>
c001e54e:	90                   	nop
c001e54f:	83 c4 1c             	add    esp,0x1c
c001e552:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e554 <Computer::~Computer()>:
c001e554:	83 ec 1c             	sub    esp,0x1c
c001e557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e55b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e55e:	e8 d1 ff ff ff       	call   c001e534 <Computer::~Computer()>
c001e563:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001e56b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e56f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e572:	e8 45 c3 fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001e577:	83 c4 1c             	add    esp,0x1c
c001e57a:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e57b <idleCommon()>:
c001e57b:	83 ec 0c             	sub    esp,0xc
c001e57e:	fa                   	cli    
c001e57f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e585:	e8 b6 6a ff ff       	call   c0015040 <schedule()>
c001e58a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e58f:	48                   	dec    eax
c001e590:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e595:	75 01                	jne    c001e598 <idleCommon()+0x1d>
c001e597:	fb                   	sti    
c001e598:	83 c4 0c             	add    esp,0xc
c001e59b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e59c <LinkedList<UnixFile>::~LinkedList()>:
c001e59c:	90                   	nop
c001e59d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e59e <LinkedList<UnixFile>::LinkedList()>:
c001e59e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e5d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5de:	90                   	nop
c001e5df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e5e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e5e0:	83 ec 1c             	sub    esp,0x1c
c001e5e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e5e8:	75 0c                	jne    c001e5f6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e5ea:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e5f1:	e8 2f 21 ff ff       	call   c0010725 <KePanic(char const*)>
c001e5f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5fc:	85 c0                	test   eax,eax
c001e5fe:	74 34                	je     c001e634 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e604:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e607:	85 c0                	test   eax,eax
c001e609:	74 29                	je     c001e634 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e60b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e60f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e612:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e616:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e61d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e621:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e62b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e632:	eb 5d                	jmp    c001e691 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e634:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e638:	8b 00                	mov    eax,DWORD PTR [eax]
c001e63a:	85 c0                	test   eax,eax
c001e63c:	75 47                	jne    c001e685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e63e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e642:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e645:	85 c0                	test   eax,eax
c001e647:	75 3c                	jne    c001e685 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e64d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e651:	89 10                	mov    DWORD PTR [eax],edx
c001e653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e657:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e65b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e65e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e662:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e665:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e66c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e670:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e673:	85 c0                	test   eax,eax
c001e675:	74 1a                	je     c001e691 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e677:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001e67e:	e8 a2 20 ff ff       	call   c0010725 <KePanic(char const*)>
c001e683:	eb 0c                	jmp    c001e691 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e685:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001e68c:	e8 94 20 ff ff       	call   c0010725 <KePanic(char const*)>
c001e691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e695:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e698:	8d 50 01             	lea    edx,[eax+0x1]
c001e69b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6a2:	90                   	nop
c001e6a3:	83 c4 1c             	add    esp,0x1c
c001e6a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e6a8 <LinkedList<UnixFile>::getFirstElement()>:
c001e6a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e6b0 <LinkedList<UnixFile>::removeFirst()>:
c001e6b0:	83 ec 1c             	sub    esp,0x1c
c001e6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6b9:	85 c0                	test   eax,eax
c001e6bb:	75 0e                	jne    c001e6cb <LinkedList<UnixFile>::removeFirst()+0x1b>
c001e6bd:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001e6c4:	e8 5c 20 ff ff       	call   c0010725 <KePanic(char const*)>
c001e6c9:	eb 76                	jmp    c001e741 <LinkedList<UnixFile>::removeFirst()+0x91>
c001e6cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6d5:	85 c0                	test   eax,eax
c001e6d7:	74 0c                	je     c001e6e5 <LinkedList<UnixFile>::removeFirst()+0x35>
c001e6d9:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001e6e0:	e8 40 20 ff ff       	call   c0010725 <KePanic(char const*)>
c001e6e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6ee:	85 c0                	test   eax,eax
c001e6f0:	75 2f                	jne    c001e721 <LinkedList<UnixFile>::removeFirst()+0x71>
c001e6f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e700:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e707:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e70b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e70e:	83 f8 01             	cmp    eax,0x1
c001e711:	74 1d                	je     c001e730 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e713:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001e71a:	e8 06 20 ff ff       	call   c0010725 <KePanic(char const*)>
c001e71f:	eb 0f                	jmp    c001e730 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e725:	8b 00                	mov    eax,DWORD PTR [eax]
c001e727:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e72a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72e:	89 10                	mov    DWORD PTR [eax],edx
c001e730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e734:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e737:	8d 50 ff             	lea    edx,[eax-0x1]
c001e73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e741:	83 c4 1c             	add    esp,0x1c
c001e744:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e746 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e74a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e74d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e74e <DriverlessDevice::~DriverlessDevice()>:
c001e74e:	83 ec 04             	sub    esp,0x4
c001e751:	ba 7c 00 02 c0       	mov    edx,0xc002007c
c001e756:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e75a:	89 10                	mov    DWORD PTR [eax],edx
c001e75c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e760:	89 04 24             	mov    DWORD PTR [esp],eax
c001e763:	e8 9e d5 fe ff       	call   c000bd06 <Device::~Device()>
c001e768:	90                   	nop
c001e769:	83 c4 04             	add    esp,0x4
c001e76c:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e76e <DriverlessDevice::~DriverlessDevice()>:
c001e76e:	83 ec 1c             	sub    esp,0x1c
c001e771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e775:	89 04 24             	mov    DWORD PTR [esp],eax
c001e778:	e8 d1 ff ff ff       	call   c001e74e <DriverlessDevice::~DriverlessDevice()>
c001e77d:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001e785:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e789:	89 04 24             	mov    DWORD PTR [esp],eax
c001e78c:	e8 2b c1 fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001e791:	83 c4 1c             	add    esp,0x1c
c001e794:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e796 <LinkedList<Device>::addElement(Device*)>:
c001e796:	83 ec 1c             	sub    esp,0x1c
c001e799:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e79e:	75 0c                	jne    c001e7ac <LinkedList<Device>::addElement(Device*)+0x16>
c001e7a0:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e7a7:	e8 79 1f ff ff       	call   c0010725 <KePanic(char const*)>
c001e7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7b2:	85 c0                	test   eax,eax
c001e7b4:	74 3a                	je     c001e7f0 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e7b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7bd:	85 c0                	test   eax,eax
c001e7bf:	74 2f                	je     c001e7f0 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e7c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7cc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e7da:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7e4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e7ee:	eb 60                	jmp    c001e850 <LinkedList<Device>::addElement(Device*)+0xba>
c001e7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7f6:	85 c0                	test   eax,eax
c001e7f8:	75 4a                	jne    c001e844 <LinkedList<Device>::addElement(Device*)+0xae>
c001e7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e801:	85 c0                	test   eax,eax
c001e803:	75 3f                	jne    c001e844 <LinkedList<Device>::addElement(Device*)+0xae>
c001e805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e809:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e80d:	89 10                	mov    DWORD PTR [eax],edx
c001e80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e813:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e817:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e821:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e82f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e832:	85 c0                	test   eax,eax
c001e834:	74 1a                	je     c001e850 <LinkedList<Device>::addElement(Device*)+0xba>
c001e836:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001e83d:	e8 e3 1e ff ff       	call   c0010725 <KePanic(char const*)>
c001e842:	eb 0c                	jmp    c001e850 <LinkedList<Device>::addElement(Device*)+0xba>
c001e844:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001e84b:	e8 d5 1e ff ff       	call   c0010725 <KePanic(char const*)>
c001e850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e854:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e857:	8d 50 01             	lea    edx,[eax+0x1]
c001e85a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e85e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e861:	90                   	nop
c001e862:	83 c4 1c             	add    esp,0x1c
c001e865:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e866 <LinkedList<Device>::LinkedList()>:
c001e866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e86a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e87b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e894:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e89b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8a6:	90                   	nop
c001e8a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e8a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ae:	85 c0                	test   eax,eax
c001e8b0:	75 0e                	jne    c001e8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8b9:	85 c0                	test   eax,eax
c001e8bb:	75 03                	jne    c001e8c0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e8bd:	b0 01                	mov    al,0x1
c001e8bf:	c3                   	ret    
c001e8c0:	b0 00                	mov    al,0x0
c001e8c2:	90                   	nop
c001e8c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e8c4 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e8c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e8cc:	83 ec 1c             	sub    esp,0x1c
c001e8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8d3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d5:	85 c0                	test   eax,eax
c001e8d7:	75 13                	jne    c001e8ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001e8d9:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001e8e0:	e8 40 1e ff ff       	call   c0010725 <KePanic(char const*)>
c001e8e5:	e9 8a 00 00 00       	jmp    c001e974 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001e8ea:	66 90                	xchg   ax,ax
c001e8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8f3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e8f6:	85 c0                	test   eax,eax
c001e8f8:	0f 95 c0             	setne  al
c001e8fb:	84 c0                	test   al,al
c001e8fd:	74 0d                	je     c001e90c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001e8ff:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001e906:	e8 1a 1e ff ff       	call   c0010725 <KePanic(char const*)>
c001e90b:	90                   	nop
c001e90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e910:	8b 00                	mov    eax,DWORD PTR [eax]
c001e912:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e915:	85 c0                	test   eax,eax
c001e917:	0f 94 c0             	sete   al
c001e91a:	84 c0                	test   al,al
c001e91c:	74 32                	je     c001e950 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001e91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e922:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e92c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e933:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e937:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e93a:	83 f8 01             	cmp    eax,0x1
c001e93d:	74 21                	je     c001e960 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e93f:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001e946:	e8 da 1d ff ff       	call   c0010725 <KePanic(char const*)>
c001e94b:	eb 13                	jmp    c001e960 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001e94d:	8d 76 00             	lea    esi,[esi+0x0]
c001e950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e954:	8b 00                	mov    eax,DWORD PTR [eax]
c001e956:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e95d:	89 10                	mov    DWORD PTR [eax],edx
c001e95f:	90                   	nop
c001e960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e967:	8d 50 ff             	lea    edx,[eax-0x1]
c001e96a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e971:	8d 76 00             	lea    esi,[esi+0x0]
c001e974:	83 c4 1c             	add    esp,0x1c
c001e977:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e978 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e978:	83 ec 1c             	sub    esp,0x1c
c001e97b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e980:	75 0e                	jne    c001e990 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001e982:	c7 04 24 a4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a4
c001e989:	e8 97 1d ff ff       	call   c0010725 <KePanic(char const*)>
c001e98e:	66 90                	xchg   ax,ax
c001e990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e994:	8b 00                	mov    eax,DWORD PTR [eax]
c001e996:	85 c0                	test   eax,eax
c001e998:	74 36                	je     c001e9d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9a1:	85 c0                	test   eax,eax
c001e9a3:	74 2b                	je     c001e9d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001e9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9b0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e9b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9c5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9cc:	eb 62                	jmp    c001ea30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001e9ce:	66 90                	xchg   ax,ax
c001e9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d6:	85 c0                	test   eax,eax
c001e9d8:	75 4a                	jne    c001ea24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001e9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9e1:	85 c0                	test   eax,eax
c001e9e3:	75 3f                	jne    c001ea24 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001e9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9ed:	89 10                	mov    DWORD PTR [eax],edx
c001e9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea0f:	85 c0                	test   eax,eax
c001ea11:	74 1d                	je     c001ea30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001ea13:	c7 04 24 c6 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c6
c001ea1a:	e8 06 1d ff ff       	call   c0010725 <KePanic(char const*)>
c001ea1f:	eb 0f                	jmp    c001ea30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001ea21:	8d 76 00             	lea    esi,[esi+0x0]
c001ea24:	c7 04 24 d0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9d0
c001ea2b:	e8 f5 1c ff ff       	call   c0010725 <KePanic(char const*)>
c001ea30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea37:	8d 50 01             	lea    edx,[eax+0x1]
c001ea3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea41:	90                   	nop
c001ea42:	83 c4 1c             	add    esp,0x1c
c001ea45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ea48 <ACPI::~ACPI()>:
c001ea48:	83 ec 1c             	sub    esp,0x1c
c001ea4b:	ba 48 06 02 c0       	mov    edx,0xc0020648
c001ea50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea54:	89 10                	mov    DWORD PTR [eax],edx
c001ea56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea5d:	e8 a4 d2 fe ff       	call   c000bd06 <Device::~Device()>
c001ea62:	90                   	nop
c001ea63:	83 c4 1c             	add    esp,0x1c
c001ea66:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ea68 <ACPI::~ACPI()>:
c001ea68:	83 ec 1c             	sub    esp,0x1c
c001ea6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea72:	e8 d1 ff ff ff       	call   c001ea48 <ACPI::~ACPI()>
c001ea77:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001ea7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea83:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea86:	e8 31 be fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ea8b:	83 c4 1c             	add    esp,0x1c
c001ea8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ea90 <LinkedList<Device>::~LinkedList()>:
c001ea90:	90                   	nop
c001ea91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ea94 <LinkedList<Device>::isEmpty()>:
c001ea94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea9a:	85 c0                	test   eax,eax
c001ea9c:	75 0e                	jne    c001eaac <LinkedList<Device>::isEmpty()+0x18>
c001ea9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaa5:	85 c0                	test   eax,eax
c001eaa7:	75 03                	jne    c001eaac <LinkedList<Device>::isEmpty()+0x18>
c001eaa9:	b0 01                	mov    al,0x1
c001eaab:	c3                   	ret    
c001eaac:	b0 00                	mov    al,0x0
c001eaae:	90                   	nop
c001eaaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001eab0 <LinkedList<Device>::getFirstElement()>:
c001eab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eab4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eab6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001eab8 <LinkedList<Device>::removeFirst()>:
c001eab8:	83 ec 1c             	sub    esp,0x1c
c001eabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eabf:	8b 00                	mov    eax,DWORD PTR [eax]
c001eac1:	85 c0                	test   eax,eax
c001eac3:	75 13                	jne    c001ead8 <LinkedList<Device>::removeFirst()+0x20>
c001eac5:	c7 04 24 dc f9 01 c0 	mov    DWORD PTR [esp],0xc001f9dc
c001eacc:	e8 54 1c ff ff       	call   c0010725 <KePanic(char const*)>
c001ead1:	e9 8a 00 00 00       	jmp    c001eb60 <LinkedList<Device>::removeFirst()+0xa8>
c001ead6:	66 90                	xchg   ax,ax
c001ead8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eadc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eadf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eae5:	85 c0                	test   eax,eax
c001eae7:	74 0f                	je     c001eaf8 <LinkedList<Device>::removeFirst()+0x40>
c001eae9:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c001eaf0:	e8 30 1c ff ff       	call   c0010725 <KePanic(char const*)>
c001eaf5:	8d 76 00             	lea    esi,[esi+0x0]
c001eaf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eafc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eafe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001eb04:	85 c0                	test   eax,eax
c001eb06:	75 30                	jne    c001eb38 <LinkedList<Device>::removeFirst()+0x80>
c001eb08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb24:	83 f8 01             	cmp    eax,0x1
c001eb27:	74 23                	je     c001eb4c <LinkedList<Device>::removeFirst()+0x94>
c001eb29:	c7 04 24 00 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa00
c001eb30:	e8 f0 1b ff ff       	call   c0010725 <KePanic(char const*)>
c001eb35:	eb 15                	jmp    c001eb4c <LinkedList<Device>::removeFirst()+0x94>
c001eb37:	90                   	nop
c001eb38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001eb44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb48:	89 10                	mov    DWORD PTR [eax],edx
c001eb4a:	66 90                	xchg   ax,ax
c001eb4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb53:	8d 50 ff             	lea    edx,[eax-0x1]
c001eb56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb5a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c001eb60:	83 c4 1c             	add    esp,0x1c
c001eb63:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eb64 <CPU::~CPU()>:
c001eb64:	83 ec 1c             	sub    esp,0x1c
c001eb67:	ba e4 07 02 c0       	mov    edx,0xc00207e4
c001eb6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb70:	89 10                	mov    DWORD PTR [eax],edx
c001eb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb76:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb79:	e8 88 d1 fe ff       	call   c000bd06 <Device::~Device()>
c001eb7e:	90                   	nop
c001eb7f:	83 c4 1c             	add    esp,0x1c
c001eb82:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eb84 <CPU::~CPU()>:
c001eb84:	83 ec 1c             	sub    esp,0x1c
c001eb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb8b:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb8e:	e8 d1 ff ff ff       	call   c001eb64 <CPU::~CPU()>
c001eb93:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001eb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9f:	89 04 24             	mov    DWORD PTR [esp],eax
c001eba2:	e8 15 bd fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001eba7:	83 c4 1c             	add    esp,0x1c
c001ebaa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ebac <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ebac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ebb4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ebb4:	90                   	nop
c001ebb5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ebb8 <ThreadControlBlock::ThreadControlBlock()>:
c001ebb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebbc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ebc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ebd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebdd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ebe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ebef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ebf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebfb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ebff:	90                   	nop
c001ec00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ec04 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ec04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec32:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec3d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ec44:	90                   	nop
c001ec45:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ec46 <PCI::~PCI()>:
c001ec46:	83 ec 1c             	sub    esp,0x1c
c001ec49:	ba 44 16 02 c0       	mov    edx,0xc0021644
c001ec4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec52:	89 10                	mov    DWORD PTR [eax],edx
c001ec54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec58:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec5b:	e8 44 cb fe ff       	call   c000b7a4 <Bus::~Bus()>
c001ec60:	90                   	nop
c001ec61:	83 c4 1c             	add    esp,0x1c
c001ec64:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ec66 <PCI::~PCI()>:
c001ec66:	83 ec 1c             	sub    esp,0x1c
c001ec69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec70:	e8 d1 ff ff ff       	call   c001ec46 <PCI::~PCI()>
c001ec75:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ec7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec81:	89 04 24             	mov    DWORD PTR [esp],eax
c001ec84:	e8 33 bc fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ec89:	83 c4 1c             	add    esp,0x1c
c001ec8c:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ec8e <IDE::~IDE()>:
c001ec8e:	83 ec 1c             	sub    esp,0x1c
c001ec91:	ba f8 16 02 c0       	mov    edx,0xc00216f8
c001ec96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec9a:	89 10                	mov    DWORD PTR [eax],edx
c001ec9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eca0:	89 04 24             	mov    DWORD PTR [esp],eax
c001eca3:	e8 d4 d4 fe ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c001eca8:	90                   	nop
c001eca9:	83 c4 1c             	add    esp,0x1c
c001ecac:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ecae <IDE::~IDE()>:
c001ecae:	83 ec 1c             	sub    esp,0x1c
c001ecb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb5:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb8:	e8 d1 ff ff ff       	call   c001ec8e <IDE::~IDE()>
c001ecbd:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001ecc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecc9:	89 04 24             	mov    DWORD PTR [esp],eax
c001eccc:	e8 eb bb fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ecd1:	83 c4 1c             	add    esp,0x1c
c001ecd4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ecd6 <SATABus::~SATABus()>:
c001ecd6:	83 ec 1c             	sub    esp,0x1c
c001ecd9:	ba 48 17 02 c0       	mov    edx,0xc0021748
c001ecde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ece2:	89 10                	mov    DWORD PTR [eax],edx
c001ece4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ece8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eceb:	e8 8c d4 fe ff       	call   c000c17c <HardDiskController::~HardDiskController()>
c001ecf0:	90                   	nop
c001ecf1:	83 c4 1c             	add    esp,0x1c
c001ecf4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ecf6 <SATABus::~SATABus()>:
c001ecf6:	83 ec 1c             	sub    esp,0x1c
c001ecf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecfd:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed00:	e8 d1 ff ff ff       	call   c001ecd6 <SATABus::~SATABus()>
c001ed05:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001ed0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed11:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed14:	e8 a3 bb fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ed19:	83 c4 1c             	add    esp,0x1c
c001ed1c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ed1e <ATA::~ATA()>:
c001ed1e:	83 ec 1c             	sub    esp,0x1c
c001ed21:	ba 88 17 02 c0       	mov    edx,0xc0021788
c001ed26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed2a:	89 10                	mov    DWORD PTR [eax],edx
c001ed2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed30:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed33:	e8 20 d5 fe ff       	call   c000c258 <PhysicalDisk::~PhysicalDisk()>
c001ed38:	90                   	nop
c001ed39:	83 c4 1c             	add    esp,0x1c
c001ed3c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ed3e <ATA::~ATA()>:
c001ed3e:	83 ec 1c             	sub    esp,0x1c
c001ed41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed45:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed48:	e8 d1 ff ff ff       	call   c001ed1e <ATA::~ATA()>
c001ed4d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ed55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed59:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed5c:	e8 5b bb fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ed61:	83 c4 1c             	add    esp,0x1c
c001ed64:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ed66 <ATAPI::~ATAPI()>:
c001ed66:	83 ec 1c             	sub    esp,0x1c
c001ed69:	ba d0 17 02 c0       	mov    edx,0xc00217d0
c001ed6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed72:	89 10                	mov    DWORD PTR [eax],edx
c001ed74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed78:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed7b:	e8 d8 d4 fe ff       	call   c000c258 <PhysicalDisk::~PhysicalDisk()>
c001ed80:	90                   	nop
c001ed81:	83 c4 1c             	add    esp,0x1c
c001ed84:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ed86 <ATAPI::~ATAPI()>:
c001ed86:	83 ec 1c             	sub    esp,0x1c
c001ed89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed90:	e8 d1 ff ff ff       	call   c001ed66 <ATAPI::~ATAPI()>
c001ed95:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ed9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eda1:	89 04 24             	mov    DWORD PTR [esp],eax
c001eda4:	e8 13 bb fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001eda9:	83 c4 1c             	add    esp,0x1c
c001edac:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001edae <SATA::~SATA()>:
c001edae:	83 ec 1c             	sub    esp,0x1c
c001edb1:	ba 84 18 02 c0       	mov    edx,0xc0021884
c001edb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edba:	89 10                	mov    DWORD PTR [eax],edx
c001edbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc0:	89 04 24             	mov    DWORD PTR [esp],eax
c001edc3:	e8 90 d4 fe ff       	call   c000c258 <PhysicalDisk::~PhysicalDisk()>
c001edc8:	90                   	nop
c001edc9:	83 c4 1c             	add    esp,0x1c
c001edcc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001edce <SATA::~SATA()>:
c001edce:	83 ec 1c             	sub    esp,0x1c
c001edd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edd5:	89 04 24             	mov    DWORD PTR [esp],eax
c001edd8:	e8 d1 ff ff ff       	call   c001edae <SATA::~SATA()>
c001eddd:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ede5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede9:	89 04 24             	mov    DWORD PTR [esp],eax
c001edec:	e8 cb ba fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001edf1:	83 c4 1c             	add    esp,0x1c
c001edf4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001edf6 <SATAPI::~SATAPI()>:
c001edf6:	83 ec 1c             	sub    esp,0x1c
c001edf9:	ba a8 19 02 c0       	mov    edx,0xc00219a8
c001edfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee02:	89 10                	mov    DWORD PTR [eax],edx
c001ee04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee08:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee0b:	e8 48 d4 fe ff       	call   c000c258 <PhysicalDisk::~PhysicalDisk()>
c001ee10:	90                   	nop
c001ee11:	83 c4 1c             	add    esp,0x1c
c001ee14:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ee16 <SATAPI::~SATAPI()>:
c001ee16:	83 ec 1c             	sub    esp,0x1c
c001ee19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee20:	e8 d1 ff ff ff       	call   c001edf6 <SATAPI::~SATAPI()>
c001ee25:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ee2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee31:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee34:	e8 83 ba fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ee39:	83 c4 1c             	add    esp,0x1c
c001ee3c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ee3e <IOAPIC::~IOAPIC()>:
c001ee3e:	83 ec 1c             	sub    esp,0x1c
c001ee41:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c001ee46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee4a:	89 10                	mov    DWORD PTR [eax],edx
c001ee4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee50:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee53:	e8 ae ce fe ff       	call   c000bd06 <Device::~Device()>
c001ee58:	90                   	nop
c001ee59:	83 c4 1c             	add    esp,0x1c
c001ee5c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ee5e <IOAPIC::~IOAPIC()>:
c001ee5e:	83 ec 1c             	sub    esp,0x1c
c001ee61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee65:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee68:	e8 d1 ff ff ff       	call   c001ee3e <IOAPIC::~IOAPIC()>
c001ee6d:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ee75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee79:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee7c:	e8 3b ba fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ee81:	83 c4 1c             	add    esp,0x1c
c001ee84:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ee88 <APICTimer::~APICTimer()>:
c001ee88:	83 ec 1c             	sub    esp,0x1c
c001ee8b:	ba 30 1a 02 c0       	mov    edx,0xc0021a30
c001ee90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee94:	89 10                	mov    DWORD PTR [eax],edx
c001ee96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee9a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee9d:	e8 36 e8 fe ff       	call   c000d6d8 <Timer::~Timer()>
c001eea2:	90                   	nop
c001eea3:	83 c4 1c             	add    esp,0x1c
c001eea6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001eea8 <APICTimer::~APICTimer()>:
c001eea8:	83 ec 1c             	sub    esp,0x1c
c001eeab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeb2:	e8 d1 ff ff ff       	call   c001ee88 <APICTimer::~APICTimer()>
c001eeb7:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001eebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eec3:	89 04 24             	mov    DWORD PTR [esp],eax
c001eec6:	e8 f1 b9 fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001eecb:	83 c4 1c             	add    esp,0x1c
c001eece:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001eed0 <PIT::~PIT()>:
c001eed0:	83 ec 1c             	sub    esp,0x1c
c001eed3:	ba 80 1a 02 c0       	mov    edx,0xc0021a80
c001eed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eedc:	89 10                	mov    DWORD PTR [eax],edx
c001eede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eee2:	89 04 24             	mov    DWORD PTR [esp],eax
c001eee5:	e8 ee e7 fe ff       	call   c000d6d8 <Timer::~Timer()>
c001eeea:	90                   	nop
c001eeeb:	83 c4 1c             	add    esp,0x1c
c001eeee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001eef0 <PIT::~PIT()>:
c001eef0:	83 ec 1c             	sub    esp,0x1c
c001eef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eef7:	89 04 24             	mov    DWORD PTR [esp],eax
c001eefa:	e8 d1 ff ff ff       	call   c001eed0 <PIT::~PIT()>
c001eeff:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001ef07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef0e:	e8 a9 b9 fe ff       	call   c000a8bc <operator delete(void*, unsigned long)>
c001ef13:	83 c4 1c             	add    esp,0x1c
c001ef16:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be d5 08 02 c0       	mov    esi,0xc00208d5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be f1 08 02 c0       	mov    esi,0xc00208f1
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
