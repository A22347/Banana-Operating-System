
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 af 78 00 00       	call   c00078cf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 14 02 c0       	mov    eax,0xc00214e8
c0000025:	3d e8 14 02 c0       	cmp    eax,0xc00214e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 14 02 c0       	push   0xc00214e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 14 02 c0       	mov    eax,0xc00214e8
c0000051:	2d e8 14 02 c0       	sub    eax,0xc00214e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 14 02 c0       	push   0xc00214e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb f8 e4 01 c0       	mov    ebx,0xc001e4f8
c0000097:	81 eb f4 e4 01 c0    	sub    ebx,0xc001e4f4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f4 e4 01 c0       	mov    esi,0xc001e4f4
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 14 02 c0       	push   0xc00214e8
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 e8 14 02 c0       	push   0xc00214e8
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 cc 3b 01 00       	call   c0013e7c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 06 a1 00 00       	call   c000a3ce <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 aa 3b 01 00       	call   c0013e7c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 b3 40 01 00       	call   c00143a4 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 02 47 01 00       	call   c00149fc <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 74 ff 00 00       	jmp    c00102f6 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 00 e5 01 c0 02 	test   BYTE PTR [edx-0x3ffe1b00],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 00 e5 01 c0 01 	test   BYTE PTR [edx-0x3ffe1b00],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 00 e5 01 c0 08 	test   BYTE PTR [edx-0x3ffe1b00],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 00 e5 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1b00],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 00 e5 01 c0 01 	test   BYTE PTR [edx-0x3ffe1b00],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d3d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 2e 69 00 00       	call   c000774c <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 70 68 00 00       	call   c000774c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 5a 68 00 00       	call   c000774c <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 36 68 00 00       	call   c000774c <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010bf:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010fb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001100:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c000110e:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000115f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000117a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001234:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000123a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001241:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c0001307:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c000130d:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001314:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 04 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe19fc]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 de 60 01 00       	jmp    c0017dc8 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 0c 61 01 00       	jmp    c0017e0c <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 31 61 01 00       	jmp    c0017e50 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 60 e7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe18a0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 60 e7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe18a0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba f8 07 02 c0       	mov    edx,0xc00207f8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 1c e6 01 c0       	mov    edx,0xc001e61c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 22 e6 01 c0       	mov    eax,0xc001e622
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad e0 e6 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1920]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 2b e6 01 c0       	mov    eax,0xc001e62b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 60 e7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe18a0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 b0 e6 01 c0       	mov    eax,0xc001e6b0
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb a0 e6 01 c0       	mov    ebx,0xc001e6a0
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 80 e6 01 c0       	mov    edx,0xc001e680
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 90 e6 01 c0       	mov    edx,0xc001e690
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 32 e6 01 c0       	mov    edx,0xc001e632
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 3e e6 01 c0       	mov    edx,0xc001e63e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 52 e6 01 c0       	mov    edx,0xc001e652
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 fa 1d 00 00       	call   c0007875 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 f2 1d 00 00       	call   c0007885 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 80 ea 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ea80
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 80 ea 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ea80
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 80 e8 01 c0       	mov    eax,0xc001e880
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 c0 e7 01 c0       	mov    eax,0xc001e7c0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 80 e7 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1880]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bgrad_cache>:
c0005e15:	83 fa 0e             	cmp    edx,0xe
c0005e18:	77 16                	ja     c0005e30 <bgrad_cache+0x1b>
c0005e1a:	53                   	push   ebx
c0005e1b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e1e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e22:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e25:	42                   	inc    edx
c0005e26:	83 fa 0f             	cmp    edx,0xf
c0005e29:	75 f3                	jne    c0005e1e <bgrad_cache+0x9>
c0005e2b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e2e:	5b                   	pop    ebx
c0005e2f:	c3                   	ret    
c0005e30:	c3                   	ret    

c0005e31 <ucscompare>:
c0005e31:	55                   	push   ebp
c0005e32:	57                   	push   edi
c0005e33:	89 c7                	mov    edi,eax
c0005e35:	56                   	push   esi
c0005e36:	89 d6                	mov    esi,edx
c0005e38:	53                   	push   ebx
c0005e39:	31 d2                	xor    edx,edx
c0005e3b:	83 ec 1c             	sub    esp,0x1c
c0005e3e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e42:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e47:	c1 e3 08             	shl    ebx,0x8
c0005e4a:	09 c3                	or     ebx,eax
c0005e4c:	39 ca                	cmp    edx,ecx
c0005e4e:	7d 42                	jge    c0005e92 <ucscompare+0x61>
c0005e50:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e54:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e59:	c1 e0 08             	shl    eax,0x8
c0005e5c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e60:	09 e8                	or     eax,ebp
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	83 f8 3b             	cmp    eax,0x3b
c0005e69:	74 27                	je     c0005e92 <ucscompare+0x61>
c0005e6b:	83 ec 0c             	sub    esp,0xc
c0005e6e:	50                   	push   eax
c0005e6f:	e8 5c aa ff ff       	call   c00008d0 <tolower>
c0005e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e77:	89 c5                	mov    ebp,eax
c0005e79:	e8 52 aa ff ff       	call   c00008d0 <tolower>
c0005e7e:	83 c4 10             	add    esp,0x10
c0005e81:	39 c5                	cmp    ebp,eax
c0005e83:	75 20                	jne    c0005ea5 <ucscompare+0x74>
c0005e85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e8d:	83 c2 02             	add    edx,0x2
c0005e90:	eb ac                	jmp    c0005e3e <ucscompare+0xd>
c0005e92:	85 db                	test   ebx,ebx
c0005e94:	0f 95 c2             	setne  dl
c0005e97:	31 c0                	xor    eax,eax
c0005e99:	83 fb 2f             	cmp    ebx,0x2f
c0005e9c:	0f 95 c0             	setne  al
c0005e9f:	21 d0                	and    eax,edx
c0005ea1:	f7 d8                	neg    eax
c0005ea3:	eb 03                	jmp    c0005ea8 <ucscompare+0x77>
c0005ea5:	83 c8 ff             	or     eax,0xffffffff
c0005ea8:	83 c4 1c             	add    esp,0x1c
c0005eab:	5b                   	pop    ebx
c0005eac:	5e                   	pop    esi
c0005ead:	5f                   	pop    edi
c0005eae:	5d                   	pop    ebp
c0005eaf:	c3                   	ret    

c0005eb0 <fncompare>:
c0005eb0:	55                   	push   ebp
c0005eb1:	57                   	push   edi
c0005eb2:	89 c7                	mov    edi,eax
c0005eb4:	56                   	push   esi
c0005eb5:	89 ce                	mov    esi,ecx
c0005eb7:	53                   	push   ebx
c0005eb8:	31 db                	xor    ebx,ebx
c0005eba:	83 ec 1c             	sub    esp,0x1c
c0005ebd:	39 d3                	cmp    ebx,edx
c0005ebf:	7d 43                	jge    c0005f04 <fncompare+0x54>
c0005ec1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005ec5:	3c 3b                	cmp    al,0x3b
c0005ec7:	74 3b                	je     c0005f04 <fncompare+0x54>
c0005ec9:	3c 2e                	cmp    al,0x2e
c0005ecb:	75 0e                	jne    c0005edb <fncompare+0x2b>
c0005ecd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ed0:	39 d9                	cmp    ecx,ebx
c0005ed2:	74 30                	je     c0005f04 <fncompare+0x54>
c0005ed4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ed9:	74 29                	je     c0005f04 <fncompare+0x54>
c0005edb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005edf:	83 ec 0c             	sub    esp,0xc
c0005ee2:	50                   	push   eax
c0005ee3:	e8 e8 a9 ff ff       	call   c00008d0 <tolower>
c0005ee8:	89 c5                	mov    ebp,eax
c0005eea:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005eee:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ef1:	e8 da a9 ff ff       	call   c00008d0 <tolower>
c0005ef6:	83 c4 10             	add    esp,0x10
c0005ef9:	39 c5                	cmp    ebp,eax
c0005efb:	75 1d                	jne    c0005f1a <fncompare+0x6a>
c0005efd:	43                   	inc    ebx
c0005efe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f02:	eb b9                	jmp    c0005ebd <fncompare+0xd>
c0005f04:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f07:	84 d2                	test   dl,dl
c0005f09:	0f 95 c1             	setne  cl
c0005f0c:	31 c0                	xor    eax,eax
c0005f0e:	80 fa 2f             	cmp    dl,0x2f
c0005f11:	0f 95 c0             	setne  al
c0005f14:	21 c8                	and    eax,ecx
c0005f16:	f7 d8                	neg    eax
c0005f18:	eb 03                	jmp    c0005f1d <fncompare+0x6d>
c0005f1a:	83 c8 ff             	or     eax,0xffffffff
c0005f1d:	83 c4 1c             	add    esp,0x1c
c0005f20:	5b                   	pop    ebx
c0005f21:	5e                   	pop    esi
c0005f22:	5f                   	pop    edi
c0005f23:	5d                   	pop    ebp
c0005f24:	c3                   	ret    

c0005f25 <bclear_cache>:
c0005f25:	83 ec 18             	sub    esp,0x18
c0005f28:	68 80 eb 01 c0       	push   0xc001eb80
c0005f2d:	e8 ce 27 01 00       	call   c0018700 <iso_kprintf>
c0005f32:	83 c4 10             	add    esp,0x10
c0005f35:	31 c0                	xor    eax,eax
c0005f37:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f3e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f44:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f4b:	40                   	inc    eax
c0005f4c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f52:	83 f8 10             	cmp    eax,0x10
c0005f55:	75 e0                	jne    c0005f37 <bclear_cache+0x12>
c0005f57:	83 c4 0c             	add    esp,0xc
c0005f5a:	c3                   	ret    

c0005f5b <bclear>:
c0005f5b:	eb c8                	jmp    c0005f25 <bclear_cache>

c0005f5d <iso_break_all>:
c0005f5d:	83 ec 18             	sub    esp,0x18
c0005f60:	68 8e eb 01 c0       	push   0xc001eb8e
c0005f65:	e8 96 27 01 00       	call   c0018700 <iso_kprintf>
c0005f6a:	83 c4 10             	add    esp,0x10
c0005f6d:	31 c0                	xor    eax,eax
c0005f6f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f79:	05 94 00 00 00       	add    eax,0x94
c0005f7e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f83:	75 ea                	jne    c0005f6f <iso_break_all+0x12>
c0005f85:	83 c4 0c             	add    esp,0xc
c0005f88:	c3                   	ret    

c0005f89 <isoReadDiscSector>:
c0005f89:	83 ec 0c             	sub    esp,0xc
c0005f8c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f93:	50                   	push   eax
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005fa0:	e8 ff 26 01 00       	call   c00186a4 <isoReadDiscSectorHelper>
c0005fa5:	83 c4 1c             	add    esp,0x1c
c0005fa8:	c3                   	ret    

c0005fa9 <bread_cache>:
c0005fa9:	55                   	push   ebp
c0005faa:	57                   	push   edi
c0005fab:	89 d7                	mov    edi,edx
c0005fad:	56                   	push   esi
c0005fae:	ba 0f 00 00 00       	mov    edx,0xf
c0005fb3:	53                   	push   ebx
c0005fb4:	89 c6                	mov    esi,eax
c0005fb6:	83 ec 0c             	sub    esp,0xc
c0005fb9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fbc:	39 38                	cmp    DWORD PTR [eax],edi
c0005fbe:	74 3c                	je     c0005ffc <bread_cache+0x53>
c0005fc0:	4a                   	dec    edx
c0005fc1:	83 fa ff             	cmp    edx,0xffffffff
c0005fc4:	75 f3                	jne    c0005fb9 <bread_cache+0x10>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fcb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fce:	74 08                	je     c0005fd8 <bread_cache+0x2f>
c0005fd0:	43                   	inc    ebx
c0005fd1:	83 fb 10             	cmp    ebx,0x10
c0005fd4:	75 f2                	jne    c0005fc8 <bread_cache+0x1f>
c0005fd6:	31 db                	xor    ebx,ebx
c0005fd8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fdb:	50                   	push   eax
c0005fdc:	6a 01                	push   0x1
c0005fde:	57                   	push   edi
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	83 c0 04             	add    eax,0x4
c0005fe5:	50                   	push   eax
c0005fe6:	e8 9e ff ff ff       	call   c0005f89 <isoReadDiscSector>
c0005feb:	83 c4 10             	add    esp,0x10
c0005fee:	83 c9 ff             	or     ecx,0xffffffff
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	78 13                	js     c0006008 <bread_cache+0x5f>
c0005ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff8:	89 da                	mov    edx,ebx
c0005ffa:	89 38                	mov    DWORD PTR [eax],edi
c0005ffc:	89 f0                	mov    eax,esi
c0005ffe:	e8 12 fe ff ff       	call   c0005e15 <bgrad_cache>
c0006003:	b9 0f 00 00 00       	mov    ecx,0xf
c0006008:	83 c4 0c             	add    esp,0xc
c000600b:	89 c8                	mov    eax,ecx
c000600d:	5b                   	pop    ebx
c000600e:	5e                   	pop    esi
c000600f:	5f                   	pop    edi
c0006010:	5d                   	pop    ebp
c0006011:	c3                   	ret    

c0006012 <biread>:
c0006012:	89 c2                	mov    edx,eax
c0006014:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006019:	eb 8e                	jmp    c0005fa9 <bread_cache>

c000601b <bdread>:
c000601b:	89 c2                	mov    edx,eax
c000601d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006022:	eb 85                	jmp    c0005fa9 <bread_cache>

c0006024 <strnicmp>:
c0006024:	55                   	push   ebp
c0006025:	57                   	push   edi
c0006026:	56                   	push   esi
c0006027:	31 f6                	xor    esi,esi
c0006029:	53                   	push   ebx
c000602a:	83 ec 0c             	sub    esp,0xc
c000602d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006031:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006035:	74 42                	je     c0006079 <strnicmp+0x55>
c0006037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000603b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000603f:	84 c0                	test   al,al
c0006041:	74 36                	je     c0006079 <strnicmp+0x55>
c0006043:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006046:	84 d2                	test   dl,dl
c0006048:	74 2f                	je     c0006079 <strnicmp+0x55>
c000604a:	38 d0                	cmp    al,dl
c000604c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000604f:	75 04                	jne    c0006055 <strnicmp+0x31>
c0006051:	89 ee                	mov    esi,ebp
c0006053:	eb dc                	jmp    c0006031 <strnicmp+0xd>
c0006055:	83 ec 0c             	sub    esp,0xc
c0006058:	50                   	push   eax
c0006059:	e8 72 a8 ff ff       	call   c00008d0 <tolower>
c000605e:	89 c7                	mov    edi,eax
c0006060:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006064:	89 ee                	mov    esi,ebp
c0006066:	89 04 24             	mov    DWORD PTR [esp],eax
c0006069:	e8 62 a8 ff ff       	call   c00008d0 <tolower>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	29 c7                	sub    edi,eax
c0006073:	89 f8                	mov    eax,edi
c0006075:	74 ba                	je     c0006031 <strnicmp+0xd>
c0006077:	eb 02                	jmp    c000607b <strnicmp+0x57>
c0006079:	31 c0                	xor    eax,eax
c000607b:	83 c4 0c             	add    esp,0xc
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	5d                   	pop    ebp
c0006082:	c3                   	ret    

c0006083 <find_object>:
c0006083:	55                   	push   ebp
c0006084:	89 c5                	mov    ebp,eax
c0006086:	57                   	push   edi
c0006087:	56                   	push   esi
c0006088:	53                   	push   ebx
c0006089:	89 d3                	mov    ebx,edx
c000608b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006091:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006098:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a0:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00060a7:	74 0b                	je     c00060b4 <find_object+0x31>
c00060a9:	89 ea                	mov    edx,ebp
c00060ab:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060af:	e8 90 fc ff ff       	call   c0005d44 <utf2ucs>
c00060b4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060c0:	7e 11                	jle    c00060d3 <find_object+0x50>
c00060c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060c6:	e8 47 ff ff ff       	call   c0006012 <biread>
c00060cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060cf:	85 c0                	test   eax,eax
c00060d1:	79 07                	jns    c00060da <find_object+0x57>
c00060d3:	31 db                	xor    ebx,ebx
c00060d5:	e9 5b 01 00 00       	jmp    c0006235 <find_object+0x1b2>
c00060da:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060ea:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060f1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060f5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060f7:	84 c0                	test   al,al
c00060f9:	75 0e                	jne    c0006109 <find_object+0x86>
c00060fb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ff:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c0006107:	eb b2                	jmp    c00060bb <find_object+0x38>
c0006109:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c000610f:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006113:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006117:	89 ca                	mov    edx,ecx
c0006119:	85 f6                	test   esi,esi
c000611b:	74 2b                	je     c0006148 <find_object+0xc5>
c000611d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006120:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006124:	e8 08 fd ff ff       	call   c0005e31 <ucscompare>
c0006129:	85 c0                	test   eax,eax
c000612b:	0f 84 c1 00 00 00    	je     c00061f2 <find_object+0x16f>
c0006131:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006134:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006138:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006140:	0f 8e dc 00 00 00    	jle    c0006222 <find_object+0x19f>
c0006146:	eb b3                	jmp    c00060fb <find_object+0x78>
c0006148:	0f b6 f0             	movzx  esi,al
c000614b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000614f:	29 ce                	sub    esi,ecx
c0006151:	80 e2 01             	and    dl,0x1
c0006154:	74 05                	je     c000615b <find_object+0xd8>
c0006156:	83 ee 21             	sub    esi,0x21
c0006159:	eb 55                	jmp    c00061b0 <find_object+0x12d>
c000615b:	47                   	inc    edi
c000615c:	83 ee 22             	sub    esi,0x22
c000615f:	eb 4f                	jmp    c00061b0 <find_object+0x12d>
c0006161:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006164:	48                   	dec    eax
c0006165:	3c 01                	cmp    al,0x1
c0006167:	77 4c                	ja     c00061b5 <find_object+0x132>
c0006169:	50                   	push   eax
c000616a:	6a 02                	push   0x2
c000616c:	68 9d eb 01 c0       	push   0xc001eb9d
c0006171:	57                   	push   edi
c0006172:	e8 e9 a5 ff ff       	call   c0000760 <strncmp>
c0006177:	83 c4 10             	add    esp,0x10
c000617a:	85 c0                	test   eax,eax
c000617c:	75 2a                	jne    c00061a8 <find_object+0x125>
c000617e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006182:	8d 42 fb             	lea    eax,[edx-0x5]
c0006185:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006189:	50                   	push   eax
c000618a:	8d 47 05             	lea    eax,[edi+0x5]
c000618d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006191:	50                   	push   eax
c0006192:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006196:	50                   	push   eax
c0006197:	e8 94 a4 ff ff       	call   c0000630 <strncpy>
c000619c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061a0:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c00061a5:	83 c4 10             	add    esp,0x10
c00061a8:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061ac:	29 c6                	sub    esi,eax
c00061ae:	01 c7                	add    edi,eax
c00061b0:	83 fe 03             	cmp    esi,0x3
c00061b3:	7f ac                	jg     c0006161 <find_object+0xde>
c00061b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061ba:	7e 40                	jle    c00061fc <find_object+0x179>
c00061bc:	51                   	push   ecx
c00061bd:	51                   	push   ecx
c00061be:	6a 2f                	push   0x2f
c00061c0:	55                   	push   ebp
c00061c1:	e8 6a a5 ff ff       	call   c0000730 <strchr>
c00061c6:	83 c4 10             	add    esp,0x10
c00061c9:	85 c0                	test   eax,eax
c00061cb:	74 04                	je     c00061d1 <find_object+0x14e>
c00061cd:	29 e8                	sub    eax,ebp
c00061cf:	eb 0c                	jmp    c00061dd <find_object+0x15a>
c00061d1:	83 ec 0c             	sub    esp,0xc
c00061d4:	55                   	push   ebp
c00061d5:	e8 66 a3 ff ff       	call   c0000540 <strlen>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	52                   	push   edx
c00061de:	50                   	push   eax
c00061df:	55                   	push   ebp
c00061e0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061e4:	50                   	push   eax
c00061e5:	e8 3a fe ff ff       	call   c0006024 <strnicmp>
c00061ea:	83 c4 10             	add    esp,0x10
c00061ed:	e9 37 ff ff ff       	jmp    c0006129 <find_object+0xa6>
c00061f2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061fa:	eb 1e                	jmp    c000621a <find_object+0x197>
c00061fc:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006200:	8d 43 21             	lea    eax,[ebx+0x21]
c0006203:	89 e9                	mov    ecx,ebp
c0006205:	e8 a6 fc ff ff       	call   c0005eb0 <fncompare>
c000620a:	85 c0                	test   eax,eax
c000620c:	0f 85 1f ff ff ff    	jne    c0006131 <find_object+0xae>
c0006212:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006216:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000621a:	0f 85 11 ff ff ff    	jne    c0006131 <find_object+0xae>
c0006220:	eb 13                	jmp    c0006235 <find_object+0x1b2>
c0006222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006226:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000622a:	0f 8f b2 fe ff ff    	jg     c00060e2 <find_object+0x5f>
c0006230:	e9 c6 fe ff ff       	jmp    c00060fb <find_object+0x78>
c0006235:	81 c4 2c 01 00 00    	add    esp,0x12c
c000623b:	89 d8                	mov    eax,ebx
c000623d:	5b                   	pop    ebx
c000623e:	5e                   	pop    esi
c000623f:	5f                   	pop    edi
c0006240:	5d                   	pop    ebp
c0006241:	c3                   	ret    

c0006242 <find_object_path>:
c0006242:	55                   	push   ebp
c0006243:	57                   	push   edi
c0006244:	89 d7                	mov    edi,edx
c0006246:	56                   	push   esi
c0006247:	89 c6                	mov    esi,eax
c0006249:	53                   	push   ebx
c000624a:	89 cb                	mov    ebx,ecx
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	50                   	push   eax
c0006250:	50                   	push   eax
c0006251:	6a 2f                	push   0x2f
c0006253:	56                   	push   esi
c0006254:	e8 d7 a4 ff ff       	call   c0000730 <strchr>
c0006259:	83 c4 10             	add    esp,0x10
c000625c:	89 c5                	mov    ebp,eax
c000625e:	85 c0                	test   eax,eax
c0006260:	74 3a                	je     c000629c <find_object_path+0x5a>
c0006262:	39 ee                	cmp    esi,ebp
c0006264:	74 31                	je     c0006297 <find_object_path+0x55>
c0006266:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006269:	e8 a5 fb ff ff       	call   c0005e13 <iso_733>
c000626e:	89 c2                	mov    edx,eax
c0006270:	8d 43 02             	lea    eax,[ebx+0x2]
c0006273:	e8 9b fb ff ff       	call   c0005e13 <iso_733>
c0006278:	83 ec 0c             	sub    esp,0xc
c000627b:	89 c1                	mov    ecx,eax
c000627d:	52                   	push   edx
c000627e:	89 f0                	mov    eax,esi
c0006280:	ba 01 00 00 00       	mov    edx,0x1
c0006285:	e8 f9 fd ff ff       	call   c0006083 <find_object>
c000628a:	83 c4 10             	add    esp,0x10
c000628d:	89 c3                	mov    ebx,eax
c000628f:	85 c0                	test   eax,eax
c0006291:	75 04                	jne    c0006297 <find_object_path+0x55>
c0006293:	31 db                	xor    ebx,ebx
c0006295:	eb 36                	jmp    c00062cd <find_object_path+0x8b>
c0006297:	8d 75 01             	lea    esi,[ebp+0x1]
c000629a:	eb b3                	jmp    c000624f <find_object_path+0xd>
c000629c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000629f:	74 28                	je     c00062c9 <find_object_path+0x87>
c00062a1:	8d 43 0a             	lea    eax,[ebx+0xa]
c00062a4:	e8 6a fb ff ff       	call   c0005e13 <iso_733>
c00062a9:	89 c2                	mov    edx,eax
c00062ab:	8d 43 02             	lea    eax,[ebx+0x2]
c00062ae:	e8 60 fb ff ff       	call   c0005e13 <iso_733>
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 c1                	mov    ecx,eax
c00062b8:	52                   	push   edx
c00062b9:	89 f0                	mov    eax,esi
c00062bb:	89 fa                	mov    edx,edi
c00062bd:	e8 c1 fd ff ff       	call   c0006083 <find_object>
c00062c2:	83 c4 10             	add    esp,0x10
c00062c5:	89 c3                	mov    ebx,eax
c00062c7:	eb 04                	jmp    c00062cd <find_object_path+0x8b>
c00062c9:	85 ff                	test   edi,edi
c00062cb:	74 c6                	je     c0006293 <find_object_path+0x51>
c00062cd:	83 c4 0c             	add    esp,0xc
c00062d0:	89 d8                	mov    eax,ebx
c00062d2:	5b                   	pop    ebx
c00062d3:	5e                   	pop    esi
c00062d4:	5f                   	pop    edi
c00062d5:	5d                   	pop    ebp
c00062d6:	c3                   	ret    

c00062d7 <stricmp>:
c00062d7:	57                   	push   edi
c00062d8:	56                   	push   esi
c00062d9:	31 f6                	xor    esi,esi
c00062db:	53                   	push   ebx
c00062dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e0:	83 ec 0c             	sub    esp,0xc
c00062e3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062eb:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062ef:	50                   	push   eax
c00062f0:	e8 bb a5 ff ff       	call   c00008b0 <toupper>
c00062f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f8:	e8 d3 a5 ff ff       	call   c00008d0 <tolower>
c00062fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006300:	89 c3                	mov    ebx,eax
c0006302:	e8 a9 a5 ff ff       	call   c00008b0 <toupper>
c0006307:	89 04 24             	mov    DWORD PTR [esp],eax
c000630a:	e8 c1 a5 ff ff       	call   c00008d0 <tolower>
c000630f:	83 c4 10             	add    esp,0x10
c0006312:	39 c3                	cmp    ebx,eax
c0006314:	75 05                	jne    c000631b <stricmp+0x44>
c0006316:	46                   	inc    esi
c0006317:	85 db                	test   ebx,ebx
c0006319:	75 c1                	jne    c00062dc <stricmp+0x5>
c000631b:	29 c3                	sub    ebx,eax
c000631d:	89 d8                	mov    eax,ebx
c000631f:	5b                   	pop    ebx
c0006320:	5e                   	pop    esi
c0006321:	5f                   	pop    edi
c0006322:	c3                   	ret    

c0006323 <iso_open>:
c0006323:	57                   	push   edi
c0006324:	31 c0                	xor    eax,eax
c0006326:	56                   	push   esi
c0006327:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000632c:	53                   	push   ebx
c000632d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006332:	0f 95 c0             	setne  al
c0006335:	89 c2                	mov    edx,eax
c0006337:	89 c6                	mov    esi,eax
c0006339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000633d:	e8 00 ff ff ff       	call   c0006242 <find_object_path>
c0006342:	83 ca ff             	or     edx,0xffffffff
c0006345:	85 c0                	test   eax,eax
c0006347:	74 5e                	je     c00063a7 <iso_open+0x84>
c0006349:	89 c1                	mov    ecx,eax
c000634b:	31 d2                	xor    edx,edx
c000634d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006353:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000635a:	75 42                	jne    c000639e <iso_open+0x7b>
c000635c:	8d 41 02             	lea    eax,[ecx+0x2]
c000635f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006369:	e8 a5 fa ff ff       	call   c0005e13 <iso_733>
c000636e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006374:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000637a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006384:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006387:	e8 87 fa ff ff       	call   c0005e13 <iso_733>
c000638c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006396:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000639c:	eb 09                	jmp    c00063a7 <iso_open+0x84>
c000639e:	42                   	inc    edx
c000639f:	83 fa 10             	cmp    edx,0x10
c00063a2:	75 a9                	jne    c000634d <iso_open+0x2a>
c00063a4:	83 ca ff             	or     edx,0xffffffff
c00063a7:	5b                   	pop    ebx
c00063a8:	89 d0                	mov    eax,edx
c00063aa:	5e                   	pop    esi
c00063ab:	5f                   	pop    edi
c00063ac:	c3                   	ret    

c00063ad <iso_close>:
c00063ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063b1:	83 f8 0f             	cmp    eax,0xf
c00063b4:	7f 10                	jg     c00063c6 <iso_close+0x19>
c00063b6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063bc:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063c6:	e9 5a fb ff ff       	jmp    c0005f25 <bclear_cache>

c00063cb <iso_read>:
c00063cb:	55                   	push   ebp
c00063cc:	57                   	push   edi
c00063cd:	56                   	push   esi
c00063ce:	53                   	push   ebx
c00063cf:	83 ec 1c             	sub    esp,0x1c
c00063d2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063d6:	83 fd 0f             	cmp    ebp,0xf
c00063d9:	7e 0a                	jle    c00063e5 <iso_read+0x1a>
c00063db:	83 c8 ff             	or     eax,0xffffffff
c00063de:	89 c2                	mov    edx,eax
c00063e0:	e9 f4 00 00 00       	jmp    c00064d9 <iso_read+0x10e>
c00063e5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063eb:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063f2:	74 e7                	je     c00063db <iso_read+0x10>
c00063f4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063fa:	85 d2                	test   edx,edx
c00063fc:	75 dd                	jne    c00063db <iso_read+0x10>
c00063fe:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006403:	0f 84 cd 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006409:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c000640f:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006415:	29 c1                	sub    ecx,eax
c0006417:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000641b:	76 04                	jbe    c0006421 <iso_read+0x56>
c000641d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006421:	85 c9                	test   ecx,ecx
c0006423:	0f 84 ad 00 00 00    	je     c00064d6 <iso_read+0x10b>
c0006429:	89 c6                	mov    esi,eax
c000642b:	bb 00 08 00 00       	mov    ebx,0x800
c0006430:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006436:	c1 e8 0b             	shr    eax,0xb
c0006439:	29 f3                	sub    ebx,esi
c000643b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006441:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006447:	7e 3f                	jle    c0006488 <iso_read+0xbd>
c0006449:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000644f:	75 37                	jne    c0006488 <iso_read+0xbd>
c0006451:	be 20 00 00 00       	mov    esi,0x20
c0006456:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000645c:	7f 05                	jg     c0006463 <iso_read+0x98>
c000645e:	89 ce                	mov    esi,ecx
c0006460:	c1 fe 0b             	sar    esi,0xb
c0006463:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006467:	89 f3                	mov    ebx,esi
c0006469:	c1 e3 0b             	shl    ebx,0xb
c000646c:	52                   	push   edx
c000646d:	56                   	push   esi
c000646e:	50                   	push   eax
c000646f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006473:	e8 11 fb ff ff       	call   c0005f89 <isoReadDiscSector>
c0006478:	83 c4 10             	add    esp,0x10
c000647b:	85 c0                	test   eax,eax
c000647d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006481:	7f 3e                	jg     c00064c1 <iso_read+0xf6>
c0006483:	e9 53 ff ff ff       	jmp    c00063db <iso_read+0x10>
c0006488:	39 cb                	cmp    ebx,ecx
c000648a:	7e 02                	jle    c000648e <iso_read+0xc3>
c000648c:	89 cb                	mov    ebx,ecx
c000648e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006492:	e8 84 fb ff ff       	call   c000601b <bdread>
c0006497:	85 c0                	test   eax,eax
c0006499:	0f 88 3c ff ff ff    	js     c00063db <iso_read+0x10>
c000649f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c00064a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00064aa:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064b0:	25 ff 07 00 00       	and    eax,0x7ff
c00064b5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064b9:	89 d9                	mov    ecx,ebx
c00064bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064c1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064c5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064cb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064cf:	01 da                	add    edx,ebx
c00064d1:	e9 28 ff ff ff       	jmp    c00063fe <iso_read+0x33>
c00064d6:	89 d0                	mov    eax,edx
c00064d8:	99                   	cdq    
c00064d9:	83 c4 1c             	add    esp,0x1c
c00064dc:	5b                   	pop    ebx
c00064dd:	5e                   	pop    esi
c00064de:	5f                   	pop    edi
c00064df:	5d                   	pop    ebp
c00064e0:	c3                   	ret    

c00064e1 <iso_seek>:
c00064e1:	55                   	push   ebp
c00064e2:	83 c8 ff             	or     eax,0xffffffff
c00064e5:	57                   	push   edi
c00064e6:	89 c2                	mov    edx,eax
c00064e8:	56                   	push   esi
c00064e9:	53                   	push   ebx
c00064ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064ee:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064f6:	83 fe 0f             	cmp    esi,0xf
c00064f9:	7f 65                	jg     c0006560 <iso_seek+0x7f>
c00064fb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006501:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c0006507:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c000650e:	74 50                	je     c0006560 <iso_seek+0x7f>
c0006510:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006517:	75 47                	jne    c0006560 <iso_seek+0x7f>
c0006519:	83 fb 01             	cmp    ebx,0x1
c000651c:	74 0e                	je     c000652c <iso_seek+0x4b>
c000651e:	83 fb 02             	cmp    ebx,0x2
c0006521:	74 0e                	je     c0006531 <iso_seek+0x50>
c0006523:	85 db                	test   ebx,ebx
c0006525:	75 39                	jne    c0006560 <iso_seek+0x7f>
c0006527:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000652a:	eb 0d                	jmp    c0006539 <iso_seek+0x58>
c000652c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000652f:	eb 08                	jmp    c0006539 <iso_seek+0x58>
c0006531:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006534:	01 f8                	add    eax,edi
c0006536:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006539:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000653f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006545:	05 40 35 02 c0       	add    eax,0xc0023540
c000654a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000654d:	76 03                	jbe    c0006552 <iso_seek+0x71>
c000654f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006552:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006558:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000655e:	31 d2                	xor    edx,edx
c0006560:	5b                   	pop    ebx
c0006561:	5e                   	pop    esi
c0006562:	5f                   	pop    edi
c0006563:	5d                   	pop    ebp
c0006564:	c3                   	ret    

c0006565 <iso_tell>:
c0006565:	83 c8 ff             	or     eax,0xffffffff
c0006568:	53                   	push   ebx
c0006569:	89 c2                	mov    edx,eax
c000656b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000656f:	83 f9 0f             	cmp    ecx,0xf
c0006572:	7f 20                	jg     c0006594 <iso_tell+0x2f>
c0006574:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000657a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006581:	74 11                	je     c0006594 <iso_tell+0x2f>
c0006583:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000658a:	75 08                	jne    c0006594 <iso_tell+0x2f>
c000658c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006592:	31 d2                	xor    edx,edx
c0006594:	5b                   	pop    ebx
c0006595:	c3                   	ret    

c0006596 <iso_total>:
c0006596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659a:	83 c8 ff             	or     eax,0xffffffff
c000659d:	83 fa 0f             	cmp    edx,0xf
c00065a0:	7f 1e                	jg     c00065c0 <iso_total+0x2a>
c00065a2:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00065a8:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c00065af:	74 0f                	je     c00065c0 <iso_total+0x2a>
c00065b1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065b8:	75 06                	jne    c00065c0 <iso_total+0x2a>
c00065ba:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065c0:	c3                   	ret    

c00065c1 <fn_postprocess>:
c00065c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065c5:	89 d0                	mov    eax,edx
c00065c7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065c9:	80 f9 3b             	cmp    cl,0x3b
c00065cc:	74 07                	je     c00065d5 <fn_postprocess+0x14>
c00065ce:	84 c9                	test   cl,cl
c00065d0:	74 03                	je     c00065d5 <fn_postprocess+0x14>
c00065d2:	40                   	inc    eax
c00065d3:	eb f2                	jmp    c00065c7 <fn_postprocess+0x6>
c00065d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065d8:	39 d0                	cmp    eax,edx
c00065da:	76 0a                	jbe    c00065e6 <fn_postprocess+0x25>
c00065dc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065e0:	75 04                	jne    c00065e6 <fn_postprocess+0x25>
c00065e2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065e6:	c3                   	ret    

c00065e7 <iso_readdir>:
c00065e7:	55                   	push   ebp
c00065e8:	57                   	push   edi
c00065e9:	56                   	push   esi
c00065ea:	53                   	push   ebx
c00065eb:	83 ec 1c             	sub    esp,0x1c
c00065ee:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065f2:	83 fb 0f             	cmp    ebx,0xf
c00065f5:	7f 28                	jg     c000661f <iso_readdir+0x38>
c00065f7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065fd:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c0006603:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c000660a:	74 13                	je     c000661f <iso_readdir+0x38>
c000660c:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006610:	74 0d                	je     c000661f <iso_readdir+0x38>
c0006612:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006619:	0f 84 b1 00 00 00    	je     c00066d0 <iso_readdir+0xe9>
c000661f:	83 ec 0c             	sub    esp,0xc
c0006622:	68 a0 eb 01 c0       	push   0xc001eba0
c0006627:	e8 d4 20 01 00       	call   c0018700 <iso_kprintf>
c000662c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000662f:	e8 e8 20 01 00       	call   c001871c <iso_kprintfd>
c0006634:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000663a:	c7 04 24 a5 eb 01 c0 	mov    DWORD PTR [esp],0xc001eba5
c0006641:	e8 ba 20 01 00       	call   c0018700 <iso_kprintf>
c0006646:	5d                   	pop    ebp
c0006647:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000664d:	e8 ca 20 01 00       	call   c001871c <iso_kprintfd>
c0006652:	c7 04 24 ab eb 01 c0 	mov    DWORD PTR [esp],0xc001ebab
c0006659:	e8 a2 20 01 00       	call   c0018700 <iso_kprintf>
c000665e:	58                   	pop    eax
c000665f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006665:	e8 b2 20 01 00       	call   c001871c <iso_kprintfd>
c000666a:	c7 04 24 b1 eb 01 c0 	mov    DWORD PTR [esp],0xc001ebb1
c0006671:	e8 8a 20 01 00       	call   c0018700 <iso_kprintf>
c0006676:	58                   	pop    eax
c0006677:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000667d:	e8 9a 20 01 00       	call   c001871c <iso_kprintfd>
c0006682:	83 c4 10             	add    esp,0x10
c0006685:	eb 42                	jmp    c00066c9 <iso_readdir+0xe2>
c0006687:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000668a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006691:	89 d1                	mov    ecx,edx
c0006693:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006699:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000669d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00066a0:	75 35                	jne    c00066d7 <iso_readdir+0xf0>
c00066a2:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00066a8:	81 c2 00 08 00 00    	add    edx,0x800
c00066ae:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066b1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066b4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066b7:	73 1e                	jae    c00066d7 <iso_readdir+0xf0>
c00066b9:	c1 ea 0b             	shr    edx,0xb
c00066bc:	8b 07                	mov    eax,DWORD PTR [edi]
c00066be:	01 d0                	add    eax,edx
c00066c0:	e8 4d f9 ff ff       	call   c0006012 <biread>
c00066c5:	85 c0                	test   eax,eax
c00066c7:	79 be                	jns    c0006687 <iso_readdir+0xa0>
c00066c9:	31 c0                	xor    eax,eax
c00066cb:	e9 66 01 00 00       	jmp    c0006836 <iso_readdir+0x24f>
c00066d0:	31 f6                	xor    esi,esi
c00066d2:	83 c8 ff             	or     eax,0xffffffff
c00066d5:	eb da                	jmp    c00066b1 <iso_readdir+0xca>
c00066d7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066dd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066e3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066e9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066ec:	73 db                	jae    c00066c9 <iso_readdir+0xe2>
c00066ee:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066f2:	75 34                	jne    c0006728 <iso_readdir+0x141>
c00066f4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066f8:	75 2e                	jne    c0006728 <iso_readdir+0x141>
c00066fa:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066fd:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006704:	01 f9                	add    ecx,edi
c0006706:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006709:	89 c8                	mov    eax,ecx
c000670b:	25 ff 07 00 00       	and    eax,0x7ff
c0006710:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006715:	01 c8                	add    eax,ecx
c0006717:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000671a:	25 ff 07 00 00       	and    eax,0x7ff
c000671f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006723:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006726:	74 a1                	je     c00066c9 <iso_readdir+0xe2>
c0006728:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000672e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006732:	8d 56 21             	lea    edx,[esi+0x21]
c0006735:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006739:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000673f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006746:	74 0c                	je     c0006754 <iso_readdir+0x16d>
c0006748:	89 e8                	mov    eax,ebp
c000674a:	e8 17 f6 ff ff       	call   c0005d66 <ucs2utfn>
c000674f:	e9 a6 00 00 00       	jmp    c00067fa <iso_readdir+0x213>
c0006754:	57                   	push   edi
c0006755:	51                   	push   ecx
c0006756:	52                   	push   edx
c0006757:	55                   	push   ebp
c0006758:	e8 d3 9e ff ff       	call   c0000630 <strncpy>
c000675d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006761:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006767:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000676a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006772:	e8 4a fe ff ff       	call   c00065c1 <fn_postprocess>
c0006777:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000677b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000677e:	83 c4 10             	add    esp,0x10
c0006781:	29 d0                	sub    eax,edx
c0006783:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006787:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000678b:	74 05                	je     c0006792 <iso_readdir+0x1ab>
c000678d:	83 e8 21             	sub    eax,0x21
c0006790:	eb 04                	jmp    c0006796 <iso_readdir+0x1af>
c0006792:	47                   	inc    edi
c0006793:	83 e8 22             	sub    eax,0x22
c0006796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000679a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00067a4:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00067a9:	7e 4f                	jle    c00067fa <iso_readdir+0x213>
c00067ab:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c00067ae:	48                   	dec    eax
c00067af:	3c 01                	cmp    al,0x1
c00067b1:	77 47                	ja     c00067fa <iso_readdir+0x213>
c00067b3:	52                   	push   edx
c00067b4:	6a 02                	push   0x2
c00067b6:	68 9d eb 01 c0       	push   0xc001eb9d
c00067bb:	57                   	push   edi
c00067bc:	e8 9f 9f ff ff       	call   c0000760 <strncmp>
c00067c1:	83 c4 10             	add    esp,0x10
c00067c4:	85 c0                	test   eax,eax
c00067c6:	75 26                	jne    c00067ee <iso_readdir+0x207>
c00067c8:	50                   	push   eax
c00067c9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067cd:	83 e8 05             	sub    eax,0x5
c00067d0:	50                   	push   eax
c00067d1:	8d 47 05             	lea    eax,[edi+0x5]
c00067d4:	50                   	push   eax
c00067d5:	55                   	push   ebp
c00067d6:	e8 55 9e ff ff       	call   c0000630 <strncpy>
c00067db:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067df:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e3:	83 c4 10             	add    esp,0x10
c00067e6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067ee:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067f2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067f6:	01 c7                	add    edi,eax
c00067f8:	eb aa                	jmp    c00067a4 <iso_readdir+0x1bd>
c00067fa:	83 c8 ff             	or     eax,0xffffffff
c00067fd:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006801:	89 c2                	mov    edx,eax
c0006803:	75 0a                	jne    c000680f <iso_readdir+0x228>
c0006805:	8d 46 0a             	lea    eax,[esi+0xa]
c0006808:	e8 06 f6 ff ff       	call   c0005e13 <iso_733>
c000680d:	31 d2                	xor    edx,edx
c000680f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006815:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000681b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006821:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006827:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000682a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000682d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006831:	05 50 35 02 c0       	add    eax,0xc0023550
c0006836:	83 c4 1c             	add    esp,0x1c
c0006839:	5b                   	pop    ebx
c000683a:	5e                   	pop    esi
c000683b:	5f                   	pop    edi
c000683c:	5d                   	pop    ebp
c000683d:	c3                   	ret    

c000683e <iso_reset>:
c000683e:	83 ec 18             	sub    esp,0x18
c0006841:	68 ba eb 01 c0       	push   0xc001ebba
c0006846:	e8 b5 1e 01 00       	call   c0018700 <iso_kprintf>
c000684b:	e8 0d f7 ff ff       	call   c0005f5d <iso_break_all>
c0006850:	e8 06 f7 ff ff       	call   c0005f5b <bclear>
c0006855:	31 c0                	xor    eax,eax
c0006857:	83 c4 1c             	add    esp,0x1c
c000685a:	c3                   	ret    

c000685b <init_percd>:
c000685b:	57                   	push   edi
c000685c:	56                   	push   esi
c000685d:	53                   	push   ebx
c000685e:	bb 01 00 00 00       	mov    ebx,0x1
c0006863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006867:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000686c:	e8 cd ff ff ff       	call   c000683e <iso_reset>
c0006871:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000687b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006880:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006884:	e8 89 f7 ff ff       	call   c0006012 <biread>
c0006889:	89 c6                	mov    esi,eax
c000688b:	85 c0                	test   eax,eax
c000688d:	0f 88 ba 00 00 00    	js     c000694d <init_percd+0xf2>
c0006893:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000689a:	83 c0 04             	add    eax,0x4
c000689d:	52                   	push   edx
c000689e:	6a 06                	push   0x6
c00068a0:	68 c5 eb 01 c0       	push   0xc001ebc5
c00068a5:	50                   	push   eax
c00068a6:	e8 e5 9a ff ff       	call   c0000390 <memcmp>
c00068ab:	83 c4 10             	add    esp,0x10
c00068ae:	85 c0                	test   eax,eax
c00068b0:	74 08                	je     c00068ba <init_percd+0x5f>
c00068b2:	43                   	inc    ebx
c00068b3:	83 fb 04             	cmp    ebx,0x4
c00068b6:	75 c3                	jne    c000687b <init_percd+0x20>
c00068b8:	eb 1a                	jmp    c00068d4 <init_percd+0x79>
c00068ba:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068c1:	83 c0 5c             	add    eax,0x5c
c00068c4:	e8 1b f5 ff ff       	call   c0005de4 <isjoliet>
c00068c9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068ce:	85 c0                	test   eax,eax
c00068d0:	74 e0                	je     c00068b2 <init_percd+0x57>
c00068d2:	eb 3e                	jmp    c0006912 <init_percd+0xb7>
c00068d4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068db:	75 35                	jne    c0006912 <init_percd+0xb7>
c00068dd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068e2:	83 c0 10             	add    eax,0x10
c00068e5:	e8 28 f7 ff ff       	call   c0006012 <biread>
c00068ea:	89 c6                	mov    esi,eax
c00068ec:	85 c0                	test   eax,eax
c00068ee:	78 5f                	js     c000694f <init_percd+0xf4>
c00068f0:	83 cb ff             	or     ebx,0xffffffff
c00068f3:	50                   	push   eax
c00068f4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068fb:	6a 06                	push   0x6
c00068fd:	83 c0 04             	add    eax,0x4
c0006900:	68 cc eb 01 c0       	push   0xc001ebcc
c0006905:	50                   	push   eax
c0006906:	e8 85 9a ff ff       	call   c0000390 <memcmp>
c000690b:	83 c4 10             	add    esp,0x10
c000690e:	85 c0                	test   eax,eax
c0006910:	75 3d                	jne    c000694f <init_percd+0xf4>
c0006912:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006919:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000691e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006924:	b9 22 00 00 00       	mov    ecx,0x22
c0006929:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000692b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006930:	31 db                	xor    ebx,ebx
c0006932:	e8 dc f4 ff ff       	call   c0005e13 <iso_733>
c0006937:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000693c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006941:	e8 cd f4 ff ff       	call   c0005e13 <iso_733>
c0006946:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000694b:	eb 02                	jmp    c000694f <init_percd+0xf4>
c000694d:	89 c3                	mov    ebx,eax
c000694f:	89 d8                	mov    eax,ebx
c0006951:	5b                   	pop    ebx
c0006952:	5e                   	pop    esi
c0006953:	5f                   	pop    edi
c0006954:	c3                   	ret    

c0006955 <iso_ioctl>:
c0006955:	83 ec 18             	sub    esp,0x18
c0006958:	68 d3 eb 01 c0       	push   0xc001ebd3
c000695d:	e8 9e 1d 01 00       	call   c0018700 <iso_kprintf>
c0006962:	e8 d7 fe ff ff       	call   c000683e <iso_reset>
c0006967:	31 c0                	xor    eax,eax
c0006969:	83 c4 1c             	add    esp,0x1c
c000696c:	c3                   	ret    

c000696d <fs_iso9660_init>:
c000696d:	53                   	push   ebx
c000696e:	31 db                	xor    ebx,ebx
c0006970:	83 ec 14             	sub    esp,0x14
c0006973:	68 de eb 01 c0       	push   0xc001ebde
c0006978:	e8 83 1d 01 00       	call   c0018700 <iso_kprintf>
c000697d:	83 c4 0c             	add    esp,0xc
c0006980:	68 40 09 00 00       	push   0x940
c0006985:	6a 00                	push   0x0
c0006987:	68 40 35 02 c0       	push   0xc0023540
c000698c:	e8 3f 9b ff ff       	call   c00004d0 <memset>
c0006991:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006998:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c00069a2:	e8 ce 0e 00 00       	call   c0007875 <malloc>
c00069a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00069ae:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069b3:	e8 bd 0e 00 00       	call   c0007875 <malloc>
c00069b8:	83 c4 10             	add    esp,0x10
c00069bb:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069c0:	83 ec 0c             	sub    esp,0xc
c00069c3:	68 04 08 00 00       	push   0x804
c00069c8:	e8 a8 0e 00 00       	call   c0007875 <malloc>
c00069cd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069d4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069da:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069e1:	e8 8f 0e 00 00       	call   c0007875 <malloc>
c00069e6:	83 c4 10             	add    esp,0x10
c00069e9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069f0:	43                   	inc    ebx
c00069f1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069f7:	83 fb 10             	cmp    ebx,0x10
c00069fa:	75 c4                	jne    c00069c0 <fs_iso9660_init+0x53>
c00069fc:	31 c0                	xor    eax,eax
c00069fe:	83 c4 08             	add    esp,0x8
c0006a01:	5b                   	pop    ebx
c0006a02:	c3                   	ret    

c0006a03 <fs_iso9660_shutdown>:
c0006a03:	53                   	push   ebx
c0006a04:	31 db                	xor    ebx,ebx
c0006a06:	83 ec 08             	sub    esp,0x8
c0006a09:	83 ec 0c             	sub    esp,0xc
c0006a0c:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a13:	e8 6d 0e 00 00       	call   c0007885 <free>
c0006a18:	58                   	pop    eax
c0006a19:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a20:	43                   	inc    ebx
c0006a21:	e8 5f 0e 00 00       	call   c0007885 <free>
c0006a26:	83 c4 10             	add    esp,0x10
c0006a29:	83 fb 10             	cmp    ebx,0x10
c0006a2c:	75 db                	jne    c0006a09 <fs_iso9660_shutdown+0x6>
c0006a2e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a33:	85 c0                	test   eax,eax
c0006a35:	74 0c                	je     c0006a43 <fs_iso9660_shutdown+0x40>
c0006a37:	83 ec 0c             	sub    esp,0xc
c0006a3a:	50                   	push   eax
c0006a3b:	e8 45 0e 00 00       	call   c0007885 <free>
c0006a40:	83 c4 10             	add    esp,0x10
c0006a43:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a48:	85 c0                	test   eax,eax
c0006a4a:	74 0c                	je     c0006a58 <fs_iso9660_shutdown+0x55>
c0006a4c:	83 ec 0c             	sub    esp,0xc
c0006a4f:	50                   	push   eax
c0006a50:	e8 30 0e 00 00       	call   c0007885 <free>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a62:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a6c:	31 c0                	xor    eax,eax
c0006a6e:	83 c4 08             	add    esp,0x8
c0006a71:	5b                   	pop    ebx
c0006a72:	c3                   	ret    
c0006a73:	90                   	nop

c0006a74 <Computer::close(int, int, void*)>:
c0006a74:	57                   	push   edi
c0006a75:	56                   	push   esi
c0006a76:	53                   	push   ebx
c0006a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a83:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a89:	83 ec 0c             	sub    esp,0xc
c0006a8c:	50                   	push   eax
c0006a8d:	e8 d4 50 00 00       	call   c000bb66 <Device::closeAll()>
c0006a92:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a98:	83 c4 10             	add    esp,0x10
c0006a9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006aa1:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006aa9:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ab1:	5b                   	pop    ebx
c0006ab2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ab5:	5e                   	pop    esi
c0006ab6:	5f                   	pop    edi
c0006ab7:	ff e0                	jmp    eax

c0006ab9 <Krnl::firstTask()>:
c0006ab9:	53                   	push   ebx
c0006aba:	83 ec 14             	sub    esp,0x14
c0006abd:	fb                   	sti    
c0006abe:	68 ef eb 01 c0       	push   0xc001ebef
c0006ac3:	e8 cb 91 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006ac8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006acf:	e8 a1 0d 00 00       	call   c0007875 <malloc>
c0006ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006adb:	89 c3                	mov    ebx,eax
c0006add:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ae2:	50                   	push   eax
c0006ae3:	68 08 ec 01 c0       	push   0xc001ec08
c0006ae8:	6a 01                	push   0x1
c0006aea:	53                   	push   ebx
c0006aeb:	e8 dc d6 00 00       	call   c00141cc <Process::Process(bool, char const*, Process*, char**)>
c0006af0:	83 c4 20             	add    esp,0x20
c0006af3:	68 ff 00 00 00       	push   0xff
c0006af8:	6a 00                	push   0x0
c0006afa:	68 c9 72 00 c0       	push   0xc00072c9
c0006aff:	53                   	push   ebx
c0006b00:	e8 ef d8 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c0006b05:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006b0b:	6a 7a                	push   0x7a
c0006b0d:	6a 00                	push   0x0
c0006b0f:	68 48 4e 01 c0       	push   0xc0014e48
c0006b14:	52                   	push   edx
c0006b15:	e8 da d8 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c0006b1a:	83 c4 14             	add    esp,0x14
c0006b1d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b22:	68 04 ed 01 c0       	push   0xc001ed04
c0006b27:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b2e:	e8 60 91 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006b33:	e8 ef e6 00 00       	call   c0015227 <Vm::initialise8086()>
c0006b38:	e8 6f 3e 00 00       	call   c000a9ac <Fs::initVFS()>
c0006b3d:	c7 04 24 15 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec15
c0006b44:	e8 4a 91 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006b49:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b4e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b54:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b56:	6a 00                	push   0x0
c0006b58:	6a 00                	push   0x0
c0006b5a:	6a 00                	push   0x0
c0006b5c:	50                   	push   eax
c0006b5d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b60:	83 c4 14             	add    esp,0x14
c0006b63:	68 04 ed 01 c0       	push   0xc001ed04
c0006b68:	e8 26 91 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006b6d:	e8 fc 95 00 00       	call   c001016e <Krnl::loadSystemEnv()>
c0006b72:	e8 59 98 00 00       	call   c00103d0 <Krnl::setupPowerManager()>
c0006b77:	83 c4 0c             	add    esp,0xc
c0006b7a:	6a 3a                	push   0x3a
c0006b7c:	68 2f ec 01 c0       	push   0xc001ec2f
c0006b81:	68 38 ec 01 c0       	push   0xc001ec38
c0006b86:	e8 e7 bb 00 00       	call   c0012772 <Reg::readIntWithDefault(char*, char*, int)>
c0006b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b8e:	e8 25 49 00 00       	call   c000b4b8 <User::loadClockSettings(int)>
c0006b93:	c7 04 24 28 ed 01 c0 	mov    DWORD PTR [esp],0xc001ed28
c0006b9a:	e8 f4 90 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006b9f:	59                   	pop    ecx
c0006ba0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006ba5:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006bab:	53                   	push   ebx
c0006bac:	e8 b3 4f 00 00       	call   c000bb64 <Device::loadDriversForAll()>
c0006bb1:	c7 04 24 40 ec 01 c0 	mov    DWORD PTR [esp],0xc001ec40
c0006bb8:	e8 d6 90 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006bbd:	58                   	pop    eax
c0006bbe:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bc4:	5a                   	pop    edx
c0006bc5:	6a 01                	push   0x1
c0006bc7:	68 51 ec 01 c0       	push   0xc001ec51
c0006bcc:	e8 16 d0 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c0006bd1:	59                   	pop    ecx
c0006bd2:	5a                   	pop    edx
c0006bd3:	53                   	push   ebx
c0006bd4:	50                   	push   eax
c0006bd5:	e8 3e d2 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c0006bda:	83 c4 10             	add    esp,0x10
c0006bdd:	83 ec 0c             	sub    esp,0xc
c0006be0:	6a 02                	push   0x2
c0006be2:	e8 29 dc 00 00       	call   c0014810 <blockTask(TaskState)>
c0006be7:	83 c4 10             	add    esp,0x10
c0006bea:	eb f1                	jmp    c0006bdd <Krnl::firstTask()+0x124>

c0006bec <Computer::Computer()>:
c0006bec:	83 ec 0c             	sub    esp,0xc
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	83 ec 08             	sub    esp,0x8
c0006bf6:	68 6d ec 01 c0       	push   0xc001ec6d
c0006bfb:	50                   	push   eax
c0006bfc:	e8 df 4f 00 00       	call   c000bbe0 <Device::Device(char const*)>
c0006c01:	83 c4 10             	add    esp,0x10
c0006c04:	ba 74 ed 01 c0       	mov    edx,0xc001ed74
c0006c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0d:	89 10                	mov    DWORD PTR [eax],edx
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c21:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c35:	83 ca 04             	or     edx,0x4
c0006c38:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c48:	31 d2                	xor    edx,edx
c0006c4a:	88 c2                	mov    dl,al
c0006c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c50:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c61:	31 d2                	xor    edx,edx
c0006c63:	88 c2                	mov    dl,al
c0006c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c69:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c72:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c78:	8d 50 01             	lea    edx,[eax+0x1]
c0006c7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c7f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c85:	31 d2                	xor    edx,edx
c0006c87:	88 c2                	mov    dl,al
c0006c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c8d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c91:	83 e1 3f             	and    ecx,0x3f
c0006c94:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c98:	90                   	nop
c0006c99:	83 c4 0c             	add    esp,0xc
c0006c9c:	c3                   	ret    
c0006c9d:	90                   	nop

c0006c9e <Computer::setBootMessage(char const*)>:
c0006c9e:	c3                   	ret    
c0006c9f:	90                   	nop

c0006ca0 <Computer::detectFeatures()>:
c0006ca0:	55                   	push   ebp
c0006ca1:	57                   	push   edi
c0006ca2:	56                   	push   esi
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 1c             	sub    esp,0x1c
c0006ca7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006cab:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cb5:	e8 3f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cc2:	0f 95 c2             	setne  dl
c0006cc5:	83 e0 fd             	and    eax,0xfffffffd
c0006cc8:	01 d2                	add    edx,edx
c0006cca:	09 d0                	or     eax,edx
c0006ccc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cd2:	a8 02                	test   al,0x2
c0006cd4:	75 46                	jne    c0006d1c <Computer::detectFeatures()+0x7c>
c0006cd6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006cdd:	74 07                	je     c0006ce6 <Computer::detectFeatures()+0x46>
c0006cdf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ce6:	e8 0b 68 01 00       	call   c001d4f6 <x87Detect>
c0006ceb:	83 e0 01             	and    eax,0x1
c0006cee:	c1 e0 04             	shl    eax,0x4
c0006cf1:	88 c2                	mov    dl,al
c0006cf3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf9:	83 e0 ef             	and    eax,0xffffffef
c0006cfc:	09 d0                	or     eax,edx
c0006cfe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d04:	a8 10                	test   al,0x10
c0006d06:	0f 85 2a 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x196>
c0006d0c:	84 c0                	test   al,al
c0006d0e:	0f 88 45 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1b9>
c0006d14:	83 c4 1c             	add    esp,0x1c
c0006d17:	5b                   	pop    ebx
c0006d18:	5e                   	pop    esi
c0006d19:	5f                   	pop    edi
c0006d1a:	5d                   	pop    ebp
c0006d1b:	c3                   	ret    
c0006d1c:	83 ec 0c             	sub    esp,0xc
c0006d1f:	6a 20                	push   0x20
c0006d21:	e8 9a 84 00 00       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006d26:	83 e0 01             	and    eax,0x1
c0006d29:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d30:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d36:	83 e0 f7             	and    eax,0xfffffff7
c0006d39:	09 d0                	or     eax,edx
c0006d3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d41:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d48:	e8 73 84 00 00       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006d4d:	83 e0 01             	and    eax,0x1
c0006d50:	88 c2                	mov    dl,al
c0006d52:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d58:	83 e0 fe             	and    eax,0xfffffffe
c0006d5b:	09 d0                	or     eax,edx
c0006d5d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d63:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d6a:	e8 51 84 00 00       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006d6f:	c1 e0 07             	shl    eax,0x7
c0006d72:	88 c2                	mov    dl,al
c0006d74:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d7a:	83 e0 7f             	and    eax,0x7f
c0006d7d:	09 d0                	or     eax,edx
c0006d7f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d85:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d8c:	e8 2f 84 00 00       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006d91:	83 c4 10             	add    esp,0x10
c0006d94:	83 e0 01             	and    eax,0x1
c0006d97:	c1 e0 05             	shl    eax,0x5
c0006d9a:	88 c2                	mov    dl,al
c0006d9c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006da2:	83 e0 df             	and    eax,0xffffffdf
c0006da5:	09 d0                	or     eax,edx
c0006da7:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006db1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db7:	0f 84 c2 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1df>
c0006dbd:	83 e0 fe             	and    eax,0xfffffffe
c0006dc0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dc6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dcc:	88 c2                	mov    dl,al
c0006dce:	83 e2 09             	and    edx,0x9
c0006dd1:	fe ca                	dec    dl
c0006dd3:	75 09                	jne    c0006dde <Computer::detectFeatures()+0x13e>
c0006dd5:	83 e0 fe             	and    eax,0xfffffffe
c0006dd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006de5:	50                   	push   eax
c0006de6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dea:	55                   	push   ebp
c0006deb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006def:	57                   	push   edi
c0006df0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006df4:	56                   	push   esi
c0006df5:	68 00 00 00 80       	push   0x80000000
c0006dfa:	e8 3d 83 00 00       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006dff:	83 c4 20             	add    esp,0x20
c0006e02:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e0d:	0f 86 c3 fe ff ff    	jbe    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e13:	83 ec 0c             	sub    esp,0xc
c0006e16:	50                   	push   eax
c0006e17:	55                   	push   ebp
c0006e18:	57                   	push   edi
c0006e19:	56                   	push   esi
c0006e1a:	68 01 00 00 80       	push   0x80000001
c0006e1f:	e8 18 83 00 00       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e24:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e2e:	83 c4 20             	add    esp,0x20
c0006e31:	e9 a0 fe ff ff       	jmp    c0006cd6 <Computer::detectFeatures()+0x36>
c0006e36:	e8 75 66 01 00       	call   c001d4b0 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 bb fe ff ff    	jns    c0006d14 <Computer::detectFeatures()+0x74>
c0006e59:	e8 72 63 01 00       	call   c001d1d0 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 34 83 00 00       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 c4 10             	add    esp,0x10
c0006e8f:	83 e0 01             	and    eax,0x1
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 1c ff ff ff       	jmp    c0006dc6 <Computer::detectFeatures()+0x126>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 76 ec 01 c0       	push   0xc001ec76
c0006ece:	e8 38 94 00 00       	call   c001030b <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 7c ec 01 c0       	push   0xc001ec7c
c0006f06:	e8 00 94 00 00       	call   c001030b <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 e5 7c 00 00       	jmp    c000ec38 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6b:	19 c0                	sbb    eax,eax
c0006f6d:	83 e0 80             	and    eax,0xffffff80
c0006f70:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f74:	e6 70                	out    0x70,al
c0006f76:	e4 71                	in     al,0x71
c0006f78:	c3                   	ret    
c0006f79:	90                   	nop

c0006f7a <Computer::enableNMI(bool)>:
c0006f7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f82:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f88:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f90:	eb ce                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f92 <Computer::open(int, int, void*)>:
c0006f92:	56                   	push   esi
c0006f93:	53                   	push   ebx
c0006f94:	83 ec 10             	sub    esp,0x10
c0006f97:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f9b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006fa2:	68 82 ec 01 c0       	push   0xc001ec82
c0006fa7:	0f 94 05 40 10 02 c0 	sete   BYTE PTR ds:0xc0021040
c0006fae:	e8 e0 8c 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006fb3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fba:	e8 b6 08 00 00       	call   c0007875 <malloc>
c0006fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc2:	89 c6                	mov    esi,eax
c0006fc4:	e8 07 78 00 00       	call   c000e7d0 <ACPI::ACPI()>
c0006fc9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fcf:	58                   	pop    eax
c0006fd0:	5a                   	pop    edx
c0006fd1:	56                   	push   esi
c0006fd2:	53                   	push   ebx
c0006fd3:	e8 70 4a 00 00       	call   c000ba48 <Device::addChild(Device*)>
c0006fd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdb:	e8 c0 fc ff ff       	call   c0006ca0 <Computer::detectFeatures()>
c0006fe0:	59                   	pop    ecx
c0006fe1:	5e                   	pop    esi
c0006fe2:	6a 01                	push   0x1
c0006fe4:	53                   	push   ebx
c0006fe5:	e8 90 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0006fea:	c7 04 24 9a ec 01 c0 	mov    DWORD PTR [esp],0xc001ec9a
c0006ff1:	e8 9d 8c 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c0006ff6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006ffd:	e8 73 08 00 00       	call   c0007875 <malloc>
c0007002:	89 04 24             	mov    DWORD PTR [esp],eax
c0007005:	89 c6                	mov    esi,eax
c0007007:	e8 6c 82 00 00       	call   c000f278 <CPU::CPU()>
c000700c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007012:	58                   	pop    eax
c0007013:	5a                   	pop    edx
c0007014:	56                   	push   esi
c0007015:	53                   	push   ebx
c0007016:	e8 2d 4a 00 00       	call   c000ba48 <Device::addChild(Device*)>
c000701b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007021:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007025:	8b 10                	mov    edx,DWORD PTR [eax]
c0007027:	51                   	push   ecx
c0007028:	6a 00                	push   0x0
c000702a:	6a 00                	push   0x0
c000702c:	50                   	push   eax
c000702d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007030:	83 c4 14             	add    esp,0x14
c0007033:	68 48 ed 01 c0       	push   0xc001ed48
c0007038:	e8 56 8c 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000703d:	e8 57 f3 00 00       	call   c0016399 <HalInitialiseCoprocessor()>
c0007042:	c7 04 24 b4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecb4
c0007049:	e8 45 8c 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000704e:	c7 04 24 b9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006ab9
c0007055:	e8 b2 d4 00 00       	call   c001450c <setupMultitasking(void (*)())>
c000705a:	83 c4 14             	add    esp,0x14
c000705d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007062:	5b                   	pop    ebx
c0007063:	5e                   	pop    esi
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::disableNMI()>:
c0007066:	6a 00                	push   0x0
c0007068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000706c:	50                   	push   eax
c000706d:	e8 08 ff ff ff       	call   c0006f7a <Computer::enableNMI(bool)>
c0007072:	5a                   	pop    edx
c0007073:	59                   	pop    ecx
c0007074:	c3                   	ret    
c0007075:	90                   	nop

c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007081:	19 c0                	sbb    eax,eax
c0007083:	83 e0 80             	and    eax,0xffffff80
c0007086:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000708a:	e6 70                	out    0x70,al
c000708c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007090:	e6 71                	out    0x71,al
c0007092:	c3                   	ret    
c0007093:	90                   	nop

c0007094 <Computer::handleNMI()>:
c0007094:	56                   	push   esi
c0007095:	53                   	push   ebx
c0007096:	83 ec 10             	sub    esp,0x10
c0007099:	e4 92                	in     al,0x92
c000709b:	89 c6                	mov    esi,eax
c000709d:	e4 61                	in     al,0x61
c000709f:	68 cf ec 01 c0       	push   0xc001eccf
c00070a4:	88 c3                	mov    bl,al
c00070a6:	e8 5f 35 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00070ab:	83 c4 10             	add    esp,0x10
c00070ae:	83 e6 10             	and    esi,0x10
c00070b1:	75 0d                	jne    c00070c0 <Computer::handleNMI()+0x2c>
c00070b3:	f6 c3 40             	test   bl,0x40
c00070b6:	75 1d                	jne    c00070d5 <Computer::handleNMI()+0x41>
c00070b8:	84 db                	test   bl,bl
c00070ba:	78 2d                	js     c00070e9 <Computer::handleNMI()+0x55>
c00070bc:	58                   	pop    eax
c00070bd:	5b                   	pop    ebx
c00070be:	5e                   	pop    esi
c00070bf:	c3                   	ret    
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	68 e0 ec 01 c0       	push   0xc001ece0
c00070c8:	e8 3e 92 00 00       	call   c001030b <KePanic(char const*)>
c00070cd:	83 c4 10             	add    esp,0x10
c00070d0:	f6 c3 40             	test   bl,0x40
c00070d3:	74 e3                	je     c00070b8 <Computer::handleNMI()+0x24>
c00070d5:	83 ec 0c             	sub    esp,0xc
c00070d8:	68 ed ec 01 c0       	push   0xc001eced
c00070dd:	e8 29 92 00 00       	call   c001030b <KePanic(char const*)>
c00070e2:	83 c4 10             	add    esp,0x10
c00070e5:	84 db                	test   bl,bl
c00070e7:	79 d3                	jns    c00070bc <Computer::handleNMI()+0x28>
c00070e9:	c7 44 24 10 f7 ec 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ecf7
c00070f1:	5a                   	pop    edx
c00070f2:	5b                   	pop    ebx
c00070f3:	5e                   	pop    esi
c00070f4:	e9 12 92 00 00       	jmp    c001030b <KePanic(char const*)>
c00070f9:	90                   	nop

c00070fa <GDTEntry::setBase(unsigned int)>:
c00070fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007102:	89 c1                	mov    ecx,eax
c0007104:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007108:	c1 e9 10             	shr    ecx,0x10
c000710b:	c1 e8 18             	shr    eax,0x18
c000710e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007111:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007114:	c3                   	ret    
c0007115:	90                   	nop

c0007116 <GDTEntry::setLimit(unsigned int)>:
c0007116:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007121:	66 89 01             	mov    WORD PTR [ecx],ax
c0007124:	83 e2 f0             	and    edx,0xfffffff0
c0007127:	c1 e8 10             	shr    eax,0x10
c000712a:	83 e0 0f             	and    eax,0xf
c000712d:	09 d0                	or     eax,edx
c000712f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007132:	c3                   	ret    
c0007133:	90                   	nop

c0007134 <GDT::GDT()>:
c0007134:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007138:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000713e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007142:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007148:	90                   	nop
c0007149:	c3                   	ret    

c000714a <GDT::addEntry(GDTEntry)>:
c000714a:	53                   	push   ebx
c000714b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000714f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007153:	8b 02                	mov    eax,DWORD PTR [edx]
c0007155:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007159:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000715d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007161:	8d 48 01             	lea    ecx,[eax+0x1]
c0007164:	c1 e0 03             	shl    eax,0x3
c0007167:	89 0a                	mov    DWORD PTR [edx],ecx
c0007169:	5b                   	pop    ebx
c000716a:	c3                   	ret    
c000716b:	90                   	nop

c000716c <GDT::getNumberOfEntries()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8b 00                	mov    eax,DWORD PTR [eax]
c0007172:	c3                   	ret    
c0007173:	90                   	nop

c0007174 <GDT::flush()>:
c0007174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007178:	8b 10                	mov    edx,DWORD PTR [eax]
c000717a:	83 c0 04             	add    eax,0x4
c000717d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007184:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007189:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007190:	e9 c8 91 ff ff       	jmp    c000035d <loadGDT>
c0007195:	90                   	nop

c0007196 <GDT::setup()>:
c0007196:	57                   	push   edi
c0007197:	56                   	push   esi
c0007198:	53                   	push   ebx
c0007199:	83 ec 30             	sub    esp,0x30
c000719c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a0:	6a 00                	push   0x0
c00071a2:	8d 74 24 14          	lea    esi,[esp+0x14]
c00071a6:	56                   	push   esi
c00071a7:	e8 4e ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071ac:	6a 00                	push   0x0
c00071ae:	56                   	push   esi
c00071af:	e8 62 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071b4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071bc:	6a 00                	push   0x0
c00071be:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071c2:	56                   	push   esi
c00071c3:	e8 32 ff ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c00071c8:	68 ff ff ff 00       	push   0xffffff
c00071cd:	56                   	push   esi
c00071ce:	e8 43 ff ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c00071d3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071db:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071df:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071e3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071ed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071f5:	89 f8                	mov    eax,edi
c00071f7:	89 fa                	mov    edx,edi
c00071f9:	80 e4 f7             	and    ah,0xf7
c00071fc:	80 ce 60             	or     dh,0x60
c00071ff:	89 c7                	mov    edi,eax
c0007201:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007205:	80 cc 60             	or     ah,0x60
c0007208:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000720c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007210:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007214:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007218:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000721c:	83 c4 20             	add    esp,0x20
c000721f:	6a 00                	push   0x0
c0007221:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007225:	50                   	push   eax
c0007226:	e8 cf fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c000722b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000722f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007233:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007238:	6a 00                	push   0x0
c000723a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000723e:	50                   	push   eax
c000723f:	e8 b6 fe ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0007244:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007249:	83 c4 0c             	add    esp,0xc
c000724c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007250:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007254:	53                   	push   ebx
c0007255:	e8 f0 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000725a:	83 c4 0c             	add    esp,0xc
c000725d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007265:	53                   	push   ebx
c0007266:	e8 df fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c000726b:	83 c4 0c             	add    esp,0xc
c000726e:	57                   	push   edi
c000726f:	56                   	push   esi
c0007270:	53                   	push   ebx
c0007271:	e8 d4 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007276:	83 c4 0c             	add    esp,0xc
c0007279:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000727d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007281:	53                   	push   ebx
c0007282:	e8 c3 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007287:	83 c4 0c             	add    esp,0xc
c000728a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000728e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007292:	53                   	push   ebx
c0007293:	e8 b2 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0007298:	83 c4 0c             	add    esp,0xc
c000729b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000729f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072a3:	53                   	push   ebx
c00072a4:	e8 a1 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072a9:	83 c4 0c             	add    esp,0xc
c00072ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072b4:	53                   	push   ebx
c00072b5:	e8 90 fe ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c00072ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072bd:	e8 b2 fe ff ff       	call   c0007174 <GDT::flush()>
c00072c2:	83 c4 40             	add    esp,0x40
c00072c5:	5b                   	pop    ebx
c00072c6:	5e                   	pop    esi
c00072c7:	5f                   	pop    edi
c00072c8:	c3                   	ret    

c00072c9 <idleFunction(void*)>:
c00072c9:	83 ec 0c             	sub    esp,0xc
c00072cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072d1:	48                   	dec    eax
c00072d2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072d7:	75 01                	jne    c00072da <idleFunction(void*)+0x11>
c00072d9:	fb                   	sti    
c00072da:	e8 94 ed 00 00       	call   c0016073 <HalSystemIdle()>
c00072df:	e8 ce 67 01 00       	call   c001dab2 <idleCommon()>
c00072e4:	eb f4                	jmp    c00072da <idleFunction(void*)+0x11>
c00072e6:	66 90                	xchg   ax,ax

c00072e8 <IDTEntry::IDTEntry(bool)>:
c00072e8:	83 ec 04             	sub    esp,0x4
c00072eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072ef:	88 04 24             	mov    BYTE PTR [esp],al
c00072f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 f0             	and    edx,0xfffffff0
c000730e:	83 ca 0e             	or     edx,0xe
c0007311:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007318:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000731b:	83 e2 ef             	and    edx,0xffffffef
c000731e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007321:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007325:	74 05                	je     c000732c <IDTEntry::IDTEntry(bool)+0x44>
c0007327:	b2 03                	mov    dl,0x3
c0007329:	eb 05                	jmp    c0007330 <IDTEntry::IDTEntry(bool)+0x48>
c000732b:	90                   	nop
c000732c:	b2 00                	mov    dl,0x0
c000732e:	66 90                	xchg   ax,ax
c0007330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007334:	83 e2 03             	and    edx,0x3
c0007337:	88 d1                	mov    cl,dl
c0007339:	c1 e1 05             	shl    ecx,0x5
c000733c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733f:	83 e2 9f             	and    edx,0xffffff9f
c0007342:	09 ca                	or     edx,ecx
c0007344:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007347:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000734b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000734e:	83 ca 80             	or     edx,0xffffff80
c0007351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007354:	90                   	nop
c0007355:	83 c4 04             	add    esp,0x4
c0007358:	c3                   	ret    
c0007359:	90                   	nop

c000735a <IDTEntry::setOffset(unsigned int)>:
c000735a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	66 89 02             	mov    WORD PTR [edx],ax
c0007365:	c1 e8 10             	shr    eax,0x10
c0007368:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000736c:	c3                   	ret    
c000736d:	90                   	nop
c000736e:	66 90                	xchg   ax,ax

c0007370 <IDT::IDT()>:
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007376:	83 c0 30             	add    eax,0x30
c0007379:	c3                   	ret    

c000737a <IDT::addEntry(IDTEntry, int)>:
c000737a:	53                   	push   ebx
c000737b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000737f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007387:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000738b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000738e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007392:	5b                   	pop    ebx
c0007393:	c3                   	ret    

c0007394 <IDT::addEntry(int, void (*)(), bool)>:
c0007394:	53                   	push   ebx
c0007395:	83 ec 10             	sub    esp,0x10
c0007398:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000739d:	50                   	push   eax
c000739e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00073a2:	53                   	push   ebx
c00073a3:	e8 40 ff ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c00073a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073ac:	53                   	push   ebx
c00073ad:	e8 a8 ff ff ff       	call   c000735a <IDTEntry::setOffset(unsigned int)>
c00073b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073b6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073c2:	e8 b3 ff ff ff       	call   c000737a <IDT::addEntry(IDTEntry, int)>
c00073c7:	83 c4 30             	add    esp,0x30
c00073ca:	5b                   	pop    ebx
c00073cb:	c3                   	ret    

c00073cc <IDT::flush()>:
c00073cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073d9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073de:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073e5:	c3                   	ret    

c00073e6 <IDT::setup()>:
c00073e6:	57                   	push   edi
c00073e7:	56                   	push   esi
c00073e8:	53                   	push   ebx
c00073e9:	83 ec 10             	sub    esp,0x10
c00073ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073f0:	6a 00                	push   0x0
c00073f2:	68 60 d2 01 c0       	push   0xc001d260
c00073f7:	6a 00                	push   0x0
c00073f9:	53                   	push   ebx
c00073fa:	e8 95 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00073ff:	6a 00                	push   0x0
c0007401:	68 70 d2 01 c0       	push   0xc001d270
c0007406:	6a 01                	push   0x1
c0007408:	53                   	push   ebx
c0007409:	e8 86 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000740e:	83 c4 20             	add    esp,0x20
c0007411:	6a 00                	push   0x0
c0007413:	68 7a d2 01 c0       	push   0xc001d27a
c0007418:	6a 02                	push   0x2
c000741a:	53                   	push   ebx
c000741b:	e8 74 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007420:	6a 00                	push   0x0
c0007422:	68 84 d2 01 c0       	push   0xc001d284
c0007427:	6a 03                	push   0x3
c0007429:	53                   	push   ebx
c000742a:	e8 65 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000742f:	83 c4 20             	add    esp,0x20
c0007432:	6a 00                	push   0x0
c0007434:	68 8e d2 01 c0       	push   0xc001d28e
c0007439:	6a 04                	push   0x4
c000743b:	53                   	push   ebx
c000743c:	e8 53 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007441:	6a 00                	push   0x0
c0007443:	68 98 d2 01 c0       	push   0xc001d298
c0007448:	6a 05                	push   0x5
c000744a:	53                   	push   ebx
c000744b:	e8 44 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007450:	83 c4 20             	add    esp,0x20
c0007453:	6a 00                	push   0x0
c0007455:	68 a2 d2 01 c0       	push   0xc001d2a2
c000745a:	6a 06                	push   0x6
c000745c:	53                   	push   ebx
c000745d:	e8 32 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007462:	6a 00                	push   0x0
c0007464:	68 ac d2 01 c0       	push   0xc001d2ac
c0007469:	6a 07                	push   0x7
c000746b:	53                   	push   ebx
c000746c:	e8 23 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	6a 00                	push   0x0
c0007476:	68 b6 d2 01 c0       	push   0xc001d2b6
c000747b:	6a 08                	push   0x8
c000747d:	53                   	push   ebx
c000747e:	e8 11 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007483:	6a 00                	push   0x0
c0007485:	68 be d2 01 c0       	push   0xc001d2be
c000748a:	6a 09                	push   0x9
c000748c:	53                   	push   ebx
c000748d:	e8 02 ff ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007492:	83 c4 20             	add    esp,0x20
c0007495:	6a 00                	push   0x0
c0007497:	68 c8 d2 01 c0       	push   0xc001d2c8
c000749c:	6a 0a                	push   0xa
c000749e:	53                   	push   ebx
c000749f:	e8 f0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074a4:	6a 00                	push   0x0
c00074a6:	68 d0 d2 01 c0       	push   0xc001d2d0
c00074ab:	6a 0b                	push   0xb
c00074ad:	53                   	push   ebx
c00074ae:	e8 e1 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074b3:	83 c4 20             	add    esp,0x20
c00074b6:	6a 00                	push   0x0
c00074b8:	68 d8 d2 01 c0       	push   0xc001d2d8
c00074bd:	6a 0c                	push   0xc
c00074bf:	53                   	push   ebx
c00074c0:	e8 cf fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074c5:	6a 00                	push   0x0
c00074c7:	68 e0 d2 01 c0       	push   0xc001d2e0
c00074cc:	6a 0d                	push   0xd
c00074ce:	53                   	push   ebx
c00074cf:	e8 c0 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074d4:	83 c4 20             	add    esp,0x20
c00074d7:	6a 00                	push   0x0
c00074d9:	68 e8 d2 01 c0       	push   0xc001d2e8
c00074de:	6a 0e                	push   0xe
c00074e0:	53                   	push   ebx
c00074e1:	e8 ae fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074e6:	6a 00                	push   0x0
c00074e8:	68 f0 d2 01 c0       	push   0xc001d2f0
c00074ed:	6a 0f                	push   0xf
c00074ef:	53                   	push   ebx
c00074f0:	e8 9f fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00074f5:	83 c4 20             	add    esp,0x20
c00074f8:	6a 00                	push   0x0
c00074fa:	68 fa d2 01 c0       	push   0xc001d2fa
c00074ff:	6a 10                	push   0x10
c0007501:	53                   	push   ebx
c0007502:	e8 8d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007507:	6a 00                	push   0x0
c0007509:	68 04 d3 01 c0       	push   0xc001d304
c000750e:	6a 11                	push   0x11
c0007510:	53                   	push   ebx
c0007511:	e8 7e fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007516:	83 c4 20             	add    esp,0x20
c0007519:	6a 00                	push   0x0
c000751b:	68 0e d3 01 c0       	push   0xc001d30e
c0007520:	6a 12                	push   0x12
c0007522:	53                   	push   ebx
c0007523:	e8 6c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007528:	6a 01                	push   0x1
c000752a:	68 a8 d3 01 c0       	push   0xc001d3a8
c000752f:	6a 60                	push   0x60
c0007531:	53                   	push   ebx
c0007532:	e8 5d fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007537:	83 c4 20             	add    esp,0x20
c000753a:	6a 00                	push   0x0
c000753c:	68 af d3 01 c0       	push   0xc001d3af
c0007541:	6a 20                	push   0x20
c0007543:	53                   	push   ebx
c0007544:	e8 4b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007549:	6a 00                	push   0x0
c000754b:	68 9a d3 01 c0       	push   0xc001d39a
c0007550:	6a 21                	push   0x21
c0007552:	53                   	push   ebx
c0007553:	e8 3c fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007558:	83 c4 20             	add    esp,0x20
c000755b:	6a 00                	push   0x0
c000755d:	68 a1 d3 01 c0       	push   0xc001d3a1
c0007562:	6a 22                	push   0x22
c0007564:	53                   	push   ebx
c0007565:	e8 2a fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000756a:	6a 00                	push   0x0
c000756c:	68 18 d3 01 c0       	push   0xc001d318
c0007571:	6a 23                	push   0x23
c0007573:	53                   	push   ebx
c0007574:	e8 1b fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007579:	83 c4 20             	add    esp,0x20
c000757c:	6a 00                	push   0x0
c000757e:	68 22 d3 01 c0       	push   0xc001d322
c0007583:	6a 24                	push   0x24
c0007585:	53                   	push   ebx
c0007586:	e8 09 fe ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000758b:	6a 00                	push   0x0
c000758d:	68 2c d3 01 c0       	push   0xc001d32c
c0007592:	6a 25                	push   0x25
c0007594:	53                   	push   ebx
c0007595:	e8 fa fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000759a:	83 c4 20             	add    esp,0x20
c000759d:	6a 00                	push   0x0
c000759f:	68 36 d3 01 c0       	push   0xc001d336
c00075a4:	6a 26                	push   0x26
c00075a6:	53                   	push   ebx
c00075a7:	e8 e8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ac:	6a 00                	push   0x0
c00075ae:	68 40 d3 01 c0       	push   0xc001d340
c00075b3:	6a 27                	push   0x27
c00075b5:	53                   	push   ebx
c00075b6:	e8 d9 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075bb:	83 c4 20             	add    esp,0x20
c00075be:	6a 00                	push   0x0
c00075c0:	68 4a d3 01 c0       	push   0xc001d34a
c00075c5:	6a 28                	push   0x28
c00075c7:	53                   	push   ebx
c00075c8:	e8 c7 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075cd:	6a 00                	push   0x0
c00075cf:	68 54 d3 01 c0       	push   0xc001d354
c00075d4:	6a 29                	push   0x29
c00075d6:	53                   	push   ebx
c00075d7:	e8 b8 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075dc:	83 c4 20             	add    esp,0x20
c00075df:	6a 00                	push   0x0
c00075e1:	68 5e d3 01 c0       	push   0xc001d35e
c00075e6:	6a 2a                	push   0x2a
c00075e8:	53                   	push   ebx
c00075e9:	e8 a6 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075ee:	6a 00                	push   0x0
c00075f0:	68 68 d3 01 c0       	push   0xc001d368
c00075f5:	6a 2b                	push   0x2b
c00075f7:	53                   	push   ebx
c00075f8:	e8 97 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00075fd:	83 c4 20             	add    esp,0x20
c0007600:	6a 00                	push   0x0
c0007602:	68 72 d3 01 c0       	push   0xc001d372
c0007607:	6a 2c                	push   0x2c
c0007609:	53                   	push   ebx
c000760a:	e8 85 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000760f:	6a 00                	push   0x0
c0007611:	68 7c d3 01 c0       	push   0xc001d37c
c0007616:	6a 2d                	push   0x2d
c0007618:	53                   	push   ebx
c0007619:	e8 76 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000761e:	83 c4 20             	add    esp,0x20
c0007621:	6a 00                	push   0x0
c0007623:	68 86 d3 01 c0       	push   0xc001d386
c0007628:	6a 2e                	push   0x2e
c000762a:	53                   	push   ebx
c000762b:	e8 64 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007630:	6a 00                	push   0x0
c0007632:	68 90 d3 01 c0       	push   0xc001d390
c0007637:	6a 2f                	push   0x2f
c0007639:	53                   	push   ebx
c000763a:	e8 55 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c000763f:	83 c4 20             	add    esp,0x20
c0007642:	6a 00                	push   0x0
c0007644:	68 41 d4 01 c0       	push   0xc001d441
c0007649:	6a 30                	push   0x30
c000764b:	53                   	push   ebx
c000764c:	e8 43 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007651:	6a 00                	push   0x0
c0007653:	68 4b d4 01 c0       	push   0xc001d44b
c0007658:	6a 31                	push   0x31
c000765a:	53                   	push   ebx
c000765b:	e8 34 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007660:	83 c4 20             	add    esp,0x20
c0007663:	6a 00                	push   0x0
c0007665:	68 55 d4 01 c0       	push   0xc001d455
c000766a:	6a 32                	push   0x32
c000766c:	53                   	push   ebx
c000766d:	e8 22 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007672:	6a 00                	push   0x0
c0007674:	68 5f d4 01 c0       	push   0xc001d45f
c0007679:	6a 33                	push   0x33
c000767b:	53                   	push   ebx
c000767c:	e8 13 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007681:	83 c4 20             	add    esp,0x20
c0007684:	6a 00                	push   0x0
c0007686:	68 69 d4 01 c0       	push   0xc001d469
c000768b:	6a 34                	push   0x34
c000768d:	53                   	push   ebx
c000768e:	e8 01 fd ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c0007693:	6a 00                	push   0x0
c0007695:	68 73 d4 01 c0       	push   0xc001d473
c000769a:	6a 35                	push   0x35
c000769c:	53                   	push   ebx
c000769d:	e8 f2 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076a2:	83 c4 20             	add    esp,0x20
c00076a5:	6a 00                	push   0x0
c00076a7:	68 7d d4 01 c0       	push   0xc001d47d
c00076ac:	6a 36                	push   0x36
c00076ae:	53                   	push   ebx
c00076af:	e8 e0 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076b4:	6a 00                	push   0x0
c00076b6:	68 87 d4 01 c0       	push   0xc001d487
c00076bb:	6a 37                	push   0x37
c00076bd:	53                   	push   ebx
c00076be:	e8 d1 fc ff ff       	call   c0007394 <IDT::addEntry(int, void (*)(), bool)>
c00076c3:	83 c4 1c             	add    esp,0x1c
c00076c6:	6a 03                	push   0x3
c00076c8:	6a 02                	push   0x2
c00076ca:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076d0:	e8 3f 24 00 00       	call   c0009b14 <VAS::allocatePages(int, int)>
c00076d5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076dc:	89 c6                	mov    esi,eax
c00076de:	e8 92 01 00 00       	call   c0007875 <malloc>
c00076e3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ec:	89 c7                	mov    edi,eax
c00076ee:	e8 9d 15 00 00       	call   c0008c90 <TSS::TSS()>
c00076f3:	83 c4 0c             	add    esp,0xc
c00076f6:	68 b6 d2 01 c0       	push   0xc001d2b6
c00076fb:	56                   	push   esi
c00076fc:	57                   	push   edi
c00076fd:	e8 d2 15 00 00       	call   c0008cd4 <TSS::setup(unsigned long, unsigned long)>
c0007702:	89 c6                	mov    esi,eax
c0007704:	58                   	pop    eax
c0007705:	5a                   	pop    edx
c0007706:	6a 00                	push   0x0
c0007708:	8d 44 24 14          	lea    eax,[esp+0x14]
c000770c:	50                   	push   eax
c000770d:	e8 d6 fb ff ff       	call   c00072e8 <IDTEntry::IDTEntry(bool)>
c0007712:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007716:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000771b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007722:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007728:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772c:	80 ce 05             	or     dh,0x5
c000772f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007736:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000773a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000773d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007740:	e8 87 fc ff ff       	call   c00073cc <IDT::flush()>
c0007745:	83 c4 20             	add    esp,0x20
c0007748:	5b                   	pop    ebx
c0007749:	5e                   	pop    esi
c000774a:	5f                   	pop    edi
c000774b:	c3                   	ret    

c000774c <sbrk>:
c000774c:	55                   	push   ebp
c000774d:	57                   	push   edi
c000774e:	56                   	push   esi
c000774f:	53                   	push   ebx
c0007750:	83 ec 1c             	sub    esp,0x1c
c0007753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007757:	85 c0                	test   eax,eax
c0007759:	74 5f                	je     c00077ba <sbrk+0x6e>
c000775b:	78 64                	js     c00077c1 <sbrk+0x75>
c000775d:	8b 15 20 10 02 c0    	mov    edx,DWORD PTR ds:0xc0021020
c0007763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007767:	05 ff 0f 00 00       	add    eax,0xfff
c000776c:	89 c5                	mov    ebp,eax
c000776e:	78 69                	js     c00077d9 <sbrk+0x8d>
c0007770:	c1 fd 0c             	sar    ebp,0xc
c0007773:	bb 00 00 00 00       	mov    ebx,0x0
c0007778:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000777e:	8b 3d 20 10 02 c0    	mov    edi,DWORD PTR ds:0xc0021020
c0007784:	e8 c8 03 00 00       	call   c0007b51 <Phys::allocatePage()>
c0007789:	68 01 04 00 00       	push   0x401
c000778e:	57                   	push   edi
c000778f:	50                   	push   eax
c0007790:	56                   	push   esi
c0007791:	e8 7a 22 00 00       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007796:	81 05 20 10 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021020,0x1000
c00077a0:	43                   	inc    ebx
c00077a1:	83 c4 10             	add    esp,0x10
c00077a4:	39 dd                	cmp    ebp,ebx
c00077a6:	75 d0                	jne    c0007778 <sbrk+0x2c>
c00077a8:	0f 20 d8             	mov    eax,cr3
c00077ab:	0f 22 d8             	mov    cr3,eax
c00077ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077b2:	83 c4 1c             	add    esp,0x1c
c00077b5:	5b                   	pop    ebx
c00077b6:	5e                   	pop    esi
c00077b7:	5f                   	pop    edi
c00077b8:	5d                   	pop    ebp
c00077b9:	c3                   	ret    
c00077ba:	a1 20 10 02 c0       	mov    eax,ds:0xc0021020
c00077bf:	eb f1                	jmp    c00077b2 <sbrk+0x66>
c00077c1:	83 ec 08             	sub    esp,0x8
c00077c4:	50                   	push   eax
c00077c5:	68 98 ed 01 c0       	push   0xc001ed98
c00077ca:	e8 3b 2e 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00077cf:	83 c4 10             	add    esp,0x10
c00077d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077d7:	eb d9                	jmp    c00077b2 <sbrk+0x66>
c00077d9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077df:	eb 8f                	jmp    c0007770 <sbrk+0x24>

c00077e1 <mmap>:
c00077e1:	83 ec 18             	sub    esp,0x18
c00077e4:	68 c8 ed 01 c0       	push   0xc001edc8
c00077e9:	e8 1d 8b 00 00       	call   c001030b <KePanic(char const*)>
c00077ee:	b8 00 00 00 00       	mov    eax,0x0
c00077f3:	83 c4 1c             	add    esp,0x1c
c00077f6:	c3                   	ret    

c00077f7 <munmap>:
c00077f7:	83 ec 18             	sub    esp,0x18
c00077fa:	68 cd ed 01 c0       	push   0xc001edcd
c00077ff:	e8 07 8b 00 00       	call   c001030b <KePanic(char const*)>
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	83 c4 1c             	add    esp,0x1c
c000780c:	c3                   	ret    

c000780d <liballoc_lock()>:
c000780d:	fa                   	cli    
c000780e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007814:	b8 00 00 00 00       	mov    eax,0x0
c0007819:	c3                   	ret    

c000781a <liballoc_unlock()>:
c000781a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000781f:	48                   	dec    eax
c0007820:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007825:	75 01                	jne    c0007828 <liballoc_unlock()+0xe>
c0007827:	fb                   	sti    
c0007828:	b8 00 00 00 00       	mov    eax,0x0
c000782d:	c3                   	ret    

c000782e <liballoc_alloc(int)>:
c000782e:	83 ec 10             	sub    esp,0x10
c0007831:	6a 01                	push   0x1
c0007833:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007837:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000783d:	e8 d2 22 00 00       	call   c0009b14 <VAS::allocatePages(int, int)>
c0007842:	83 c4 1c             	add    esp,0x1c
c0007845:	c3                   	ret    

c0007846 <liballoc_free(void*, int)>:
c0007846:	83 ec 14             	sub    esp,0x14
c0007849:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000784d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007853:	e8 0e 1f 00 00       	call   c0009766 <VAS::freeAllocatedPages(unsigned long)>
c0007858:	b8 00 00 00 00       	mov    eax,0x0
c000785d:	83 c4 1c             	add    esp,0x1c
c0007860:	c3                   	ret    

c0007861 <realloc>:
c0007861:	83 ec 14             	sub    esp,0x14
c0007864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 c0 9c ff ff       	call   c0001531 <dlrealloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <malloc>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 73 97 ff ff       	call   c0000ff4 <dlmalloc>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <free>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 08 94 ff ff       	call   c0000c99 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <rfree>:
c0007895:	83 ec 18             	sub    esp,0x18
c0007898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000789c:	e8 f8 93 ff ff       	call   c0000c99 <dlfree>
c00078a1:	83 c4 1c             	add    esp,0x1c
c00078a4:	c3                   	ret    

c00078a5 <calloc>:
c00078a5:	56                   	push   esi
c00078a6:	53                   	push   ebx
c00078a7:	83 ec 10             	sub    esp,0x10
c00078aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078ae:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078b3:	53                   	push   ebx
c00078b4:	e8 bc ff ff ff       	call   c0007875 <malloc>
c00078b9:	89 c6                	mov    esi,eax
c00078bb:	83 c4 0c             	add    esp,0xc
c00078be:	53                   	push   ebx
c00078bf:	6a 00                	push   0x0
c00078c1:	50                   	push   eax
c00078c2:	e8 09 8c ff ff       	call   c00004d0 <memset>
c00078c7:	89 f0                	mov    eax,esi
c00078c9:	83 c4 14             	add    esp,0x14
c00078cc:	5b                   	pop    ebx
c00078cd:	5e                   	pop    esi
c00078ce:	c3                   	ret    

c00078cf <KeEntryPoint>:
c00078cf:	57                   	push   edi
c00078d0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078d5:	56                   	push   esi
c00078d6:	89 fa                	mov    edx,edi
c00078d8:	53                   	push   ebx
c00078d9:	31 f6                	xor    esi,esi
c00078db:	83 ec 2c             	sub    esp,0x2c
c00078de:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078e3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078e8:	89 f0                	mov    eax,esi
c00078ea:	ee                   	out    dx,al
c00078eb:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078f0:	b0 80                	mov    al,0x80
c00078f2:	89 da                	mov    edx,ebx
c00078f4:	ee                   	out    dx,al
c00078f5:	b1 03                	mov    cl,0x3
c00078f7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078fc:	88 c8                	mov    al,cl
c00078fe:	ee                   	out    dx,al
c00078ff:	89 f0                	mov    eax,esi
c0007901:	89 fa                	mov    edx,edi
c0007903:	ee                   	out    dx,al
c0007904:	88 c8                	mov    al,cl
c0007906:	89 da                	mov    edx,ebx
c0007908:	ee                   	out    dx,al
c0007909:	b0 c7                	mov    al,0xc7
c000790b:	ba fa 03 00 00       	mov    edx,0x3fa
c0007910:	ee                   	out    dx,al
c0007911:	b0 0b                	mov    al,0xb
c0007913:	ba fc 03 00 00       	mov    edx,0x3fc
c0007918:	ee                   	out    dx,al
c0007919:	68 d4 ed 01 c0       	push   0xc001edd4
c000791e:	e8 e7 2c 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007923:	e8 fd 82 00 00       	call   c000fc25 <KeDisplaySplashScreen()>
c0007928:	a1 24 05 00 00       	mov    eax,ds:0x524
c000792d:	05 ff 0f 00 00       	add    eax,0xfff
c0007932:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007937:	89 04 24             	mov    DWORD PTR [esp],eax
c000793a:	e8 64 03 00 00       	call   c0007ca3 <Phys::physicalMemorySetup(unsigned int)>
c000793f:	e8 c8 1b 00 00       	call   c000950c <Virt::virtualMemorySetup()>
c0007944:	58                   	pop    eax
c0007945:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007949:	53                   	push   ebx
c000794a:	e8 95 1e 00 00       	call   c00097e4 <VAS::VAS()>
c000794f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007955:	e8 f0 60 01 00       	call   c001da4a <_init>
c000795a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007961:	e8 0f ff ff ff       	call   c0007875 <malloc>
c0007966:	89 04 24             	mov    DWORD PTR [esp],eax
c0007969:	89 c6                	mov    esi,eax
c000796b:	e8 7c f2 ff ff       	call   c0006bec <Computer::Computer()>
c0007970:	6a 00                	push   0x0
c0007972:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007978:	6a 00                	push   0x0
c000797a:	6a 00                	push   0x0
c000797c:	56                   	push   esi
c000797d:	e8 10 f6 ff ff       	call   c0006f92 <Computer::open(int, int, void*)>
c0007982:	83 c4 14             	add    esp,0x14
c0007985:	53                   	push   ebx
c0007986:	e8 21 1f 00 00       	call   c00098ac <VAS::~VAS()>
c000798b:	83 c4 30             	add    esp,0x30
c000798e:	5b                   	pop    ebx
c000798f:	5e                   	pop    esi
c0007990:	5f                   	pop    edi
c0007991:	c3                   	ret    

c0007992 <Phys::allocateDMA(unsigned long)>:
c0007992:	55                   	push   ebp
c0007993:	31 ed                	xor    ebp,ebp
c0007995:	57                   	push   edi
c0007996:	56                   	push   esi
c0007997:	53                   	push   ebx
c0007998:	31 db                	xor    ebx,ebx
c000799a:	83 ec 1c             	sub    esp,0x1c
c000799d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079a1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a9:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079af:	31 c0                	xor    eax,eax
c00079b1:	c1 ef 0c             	shr    edi,0xc
c00079b4:	eb 19                	jmp    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079b6:	85 c0                	test   eax,eax
c00079b8:	75 06                	jne    c00079c0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079ba:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079be:	89 dd                	mov    ebp,ebx
c00079c0:	8d 70 01             	lea    esi,[eax+0x1]
c00079c3:	39 f7                	cmp    edi,esi
c00079c5:	74 33                	je     c00079fa <Phys::allocateDMA(unsigned long)+0x68>
c00079c7:	89 f0                	mov    eax,esi
c00079c9:	43                   	inc    ebx
c00079ca:	83 fb 0f             	cmp    ebx,0xf
c00079cd:	7f 11                	jg     c00079e0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079cf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079d6:	74 de                	je     c00079b6 <Phys::allocateDMA(unsigned long)+0x24>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	43                   	inc    ebx
c00079db:	83 fb 0f             	cmp    ebx,0xf
c00079de:	7e ef                	jle    c00079cf <Phys::allocateDMA(unsigned long)+0x3d>
c00079e0:	83 ec 0c             	sub    esp,0xc
c00079e3:	68 ec ed 01 c0       	push   0xc001edec
c00079e8:	e8 1e 89 00 00       	call   c001030b <KePanic(char const*)>
c00079ed:	83 c4 10             	add    esp,0x10
c00079f0:	31 c0                	xor    eax,eax
c00079f2:	83 c4 1c             	add    esp,0x1c
c00079f5:	5b                   	pop    ebx
c00079f6:	5e                   	pop    esi
c00079f7:	5f                   	pop    edi
c00079f8:	5d                   	pop    ebp
c00079f9:	c3                   	ret    
c00079fa:	89 e9                	mov    ecx,ebp
c00079fc:	c1 f9 04             	sar    ecx,0x4
c00079ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007a03:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007a07:	89 ca                	mov    edx,ecx
c0007a09:	4a                   	dec    edx
c0007a0a:	79 03                	jns    c0007a0f <Phys::allocateDMA(unsigned long)+0x7d>
c0007a0c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a0f:	c1 fa 04             	sar    edx,0x4
c0007a12:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a16:	74 08                	je     c0007a20 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a18:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a1c:	31 c0                	xor    eax,eax
c0007a1e:	eb ba                	jmp    c00079da <Phys::allocateDMA(unsigned long)+0x48>
c0007a20:	85 f6                	test   esi,esi
c0007a22:	74 15                	je     c0007a39 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a24:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a2a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a31:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a34:	42                   	inc    edx
c0007a35:	39 d0                	cmp    eax,edx
c0007a37:	75 f8                	jne    c0007a31 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a39:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a43:	85 c0                	test   eax,eax
c0007a45:	74 17                	je     c0007a5e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a47:	83 ec 0c             	sub    esp,0xc
c0007a4a:	68 ec ed 01 c0       	push   0xc001edec
c0007a4f:	e8 b7 88 00 00       	call   c001030b <KePanic(char const*)>
c0007a54:	83 c4 10             	add    esp,0x10
c0007a57:	89 f0                	mov    eax,esi
c0007a59:	e9 6b ff ff ff       	jmp    c00079c9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a5e:	c1 e5 0c             	shl    ebp,0xc
c0007a61:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a67:	eb 89                	jmp    c00079f2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a69:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a6d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a77:	c1 ea 0c             	shr    edx,0xc
c0007a7a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a7f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a85:	c1 e8 0c             	shr    eax,0xc
c0007a88:	85 d2                	test   edx,edx
c0007a8a:	74 0f                	je     c0007a9b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a8c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a91:	01 c2                	add    edx,eax
c0007a93:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a96:	40                   	inc    eax
c0007a97:	39 d0                	cmp    eax,edx
c0007a99:	75 f8                	jne    c0007a93 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a9b:	c3                   	ret    

c0007a9c <Phys::setPageState(unsigned long, bool)>:
c0007a9c:	56                   	push   esi
c0007a9d:	ba 01 00 00 00       	mov    edx,0x1
c0007aa2:	53                   	push   ebx
c0007aa3:	8b 35 24 10 02 c0    	mov    esi,DWORD PTR ds:0xc0021024
c0007aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ab1:	89 c8                	mov    eax,ecx
c0007ab3:	83 e1 07             	and    ecx,0x7
c0007ab6:	c1 e8 03             	shr    eax,0x3
c0007ab9:	d3 e3                	shl    ebx,cl
c0007abb:	01 c6                	add    esi,eax
c0007abd:	d3 e2                	shl    edx,cl
c0007abf:	f7 d2                	not    edx
c0007ac1:	20 16                	and    BYTE PTR [esi],dl
c0007ac3:	03 05 24 10 02 c0    	add    eax,DWORD PTR ds:0xc0021024
c0007ac9:	08 18                	or     BYTE PTR [eax],bl
c0007acb:	5b                   	pop    ebx
c0007acc:	5e                   	pop    esi
c0007acd:	c3                   	ret    

c0007ace <Phys::getPageState(unsigned long)>:
c0007ace:	53                   	push   ebx
c0007acf:	8b 15 24 10 02 c0    	mov    edx,DWORD PTR ds:0xc0021024
c0007ad5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ad9:	31 db                	xor    ebx,ebx
c0007adb:	89 c8                	mov    eax,ecx
c0007add:	83 e1 07             	and    ecx,0x7
c0007ae0:	c1 e8 03             	shr    eax,0x3
c0007ae3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ae6:	89 d8                	mov    eax,ebx
c0007ae8:	5b                   	pop    ebx
c0007ae9:	d3 f8                	sar    eax,cl
c0007aeb:	83 e0 01             	and    eax,0x1
c0007aee:	c3                   	ret    

c0007aef <Phys::freePage(unsigned long)>:
c0007aef:	53                   	push   ebx
c0007af0:	83 ec 08             	sub    esp,0x8
c0007af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007af7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007afd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b03:	76 3a                	jbe    c0007b3f <Phys::freePage(unsigned long)+0x50>
c0007b05:	c1 e8 0c             	shr    eax,0xc
c0007b08:	50                   	push   eax
c0007b09:	89 c3                	mov    ebx,eax
c0007b0b:	e8 be ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b10:	5a                   	pop    edx
c0007b11:	84 c0                	test   al,al
c0007b13:	74 19                	je     c0007b2e <Phys::freePage(unsigned long)+0x3f>
c0007b15:	83 ec 08             	sub    esp,0x8
c0007b18:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b1e:	6a 00                	push   0x0
c0007b20:	53                   	push   ebx
c0007b21:	e8 76 ff ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007b26:	83 c4 10             	add    esp,0x10
c0007b29:	83 c4 08             	add    esp,0x8
c0007b2c:	5b                   	pop    ebx
c0007b2d:	c3                   	ret    
c0007b2e:	c7 44 24 10 91 ee 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ee91
c0007b36:	83 c4 08             	add    esp,0x8
c0007b39:	5b                   	pop    ebx
c0007b3a:	e9 cc 87 00 00       	jmp    c001030b <KePanic(char const*)>
c0007b3f:	68 00 10 00 00       	push   0x1000
c0007b44:	50                   	push   eax
c0007b45:	e8 1f ff ff ff       	call   c0007a69 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b4a:	59                   	pop    ecx
c0007b4b:	5b                   	pop    ebx
c0007b4c:	83 c4 08             	add    esp,0x8
c0007b4f:	5b                   	pop    ebx
c0007b50:	c3                   	ret    

c0007b51 <Phys::allocatePage()>:
c0007b51:	56                   	push   esi
c0007b52:	53                   	push   ebx
c0007b53:	83 ec 14             	sub    esp,0x14
c0007b56:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b5c:	89 f3                	mov    ebx,esi
c0007b5e:	eb 0a                	jmp    c0007b6a <Phys::allocatePage()+0x19>
c0007b60:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b66:	39 de                	cmp    esi,ebx
c0007b68:	74 24                	je     c0007b8e <Phys::allocatePage()+0x3d>
c0007b6a:	53                   	push   ebx
c0007b6b:	e8 5e ff ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007b70:	5a                   	pop    edx
c0007b71:	84 c0                	test   al,al
c0007b73:	74 5f                	je     c0007bd4 <Phys::allocatePage()+0x83>
c0007b75:	43                   	inc    ebx
c0007b76:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b7c:	75 e2                	jne    c0007b60 <Phys::allocatePage()+0xf>
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b8a:	39 de                	cmp    esi,ebx
c0007b8c:	75 dc                	jne    c0007b6a <Phys::allocatePage()+0x19>
c0007b8e:	83 ec 0c             	sub    esp,0xc
c0007b91:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ba0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007ba6:	50                   	push   eax
c0007ba7:	e8 42 27 00 00       	call   c000a2ee <VAS::scanForEviction()>
c0007bac:	83 c4 10             	add    esp,0x10
c0007baf:	85 c0                	test   eax,eax
c0007bb1:	75 3f                	jne    c0007bf2 <Phys::allocatePage()+0xa1>
c0007bb3:	83 ec 0c             	sub    esp,0xc
c0007bb6:	68 14 ee 01 c0       	push   0xc001ee14
c0007bbb:	e8 4b 87 00 00       	call   c001030b <KePanic(char const*)>
c0007bc0:	83 c4 10             	add    esp,0x10
c0007bc3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bc9:	53                   	push   ebx
c0007bca:	e8 ff fe ff ff       	call   c0007ace <Phys::getPageState(unsigned long)>
c0007bcf:	5a                   	pop    edx
c0007bd0:	84 c0                	test   al,al
c0007bd2:	75 a1                	jne    c0007b75 <Phys::allocatePage()+0x24>
c0007bd4:	6a 01                	push   0x1
c0007bd6:	53                   	push   ebx
c0007bd7:	e8 c0 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007bdc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007be1:	5a                   	pop    edx
c0007be2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007be8:	c1 e0 0c             	shl    eax,0xc
c0007beb:	59                   	pop    ecx
c0007bec:	83 c4 14             	add    esp,0x14
c0007bef:	5b                   	pop    ebx
c0007bf0:	5e                   	pop    esi
c0007bf1:	c3                   	ret    
c0007bf2:	83 ec 08             	sub    esp,0x8
c0007bf5:	89 c2                	mov    edx,eax
c0007bf7:	6a 01                	push   0x1
c0007bf9:	c1 ea 0c             	shr    edx,0xc
c0007bfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c00:	52                   	push   edx
c0007c01:	e8 96 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c06:	83 c4 10             	add    esp,0x10
c0007c09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c0d:	eb dd                	jmp    c0007bec <Phys::allocatePage()+0x9b>

c0007c0f <Phys::allocateContiguousPages(int)>:
c0007c0f:	57                   	push   edi
c0007c10:	56                   	push   esi
c0007c11:	53                   	push   ebx
c0007c12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c16:	fa                   	cli    
c0007c17:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c1d:	31 db                	xor    ebx,ebx
c0007c1f:	85 db                	test   ebx,ebx
c0007c21:	75 11                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c23:	e8 29 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c28:	83 fe 01             	cmp    esi,0x1
c0007c2b:	89 c7                	mov    edi,eax
c0007c2d:	74 21                	je     c0007c50 <Phys::allocateContiguousPages(int)+0x41>
c0007c2f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c34:	e8 18 ff ff ff       	call   c0007b51 <Phys::allocatePage()>
c0007c39:	89 da                	mov    edx,ebx
c0007c3b:	c1 e2 0c             	shl    edx,0xc
c0007c3e:	01 fa                	add    edx,edi
c0007c40:	39 c2                	cmp    edx,eax
c0007c42:	74 20                	je     c0007c64 <Phys::allocateContiguousPages(int)+0x55>
c0007c44:	bb 01 00 00 00       	mov    ebx,0x1
c0007c49:	89 c7                	mov    edi,eax
c0007c4b:	83 fe 01             	cmp    esi,0x1
c0007c4e:	75 e4                	jne    c0007c34 <Phys::allocateContiguousPages(int)+0x25>
c0007c50:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c55:	48                   	dec    eax
c0007c56:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c5b:	75 01                	jne    c0007c5e <Phys::allocateContiguousPages(int)+0x4f>
c0007c5d:	fb                   	sti    
c0007c5e:	89 f8                	mov    eax,edi
c0007c60:	5b                   	pop    ebx
c0007c61:	5e                   	pop    esi
c0007c62:	5f                   	pop    edi
c0007c63:	c3                   	ret    
c0007c64:	43                   	inc    ebx
c0007c65:	39 f3                	cmp    ebx,esi
c0007c67:	75 b6                	jne    c0007c1f <Phys::allocateContiguousPages(int)+0x10>
c0007c69:	eb e5                	jmp    c0007c50 <Phys::allocateContiguousPages(int)+0x41>

c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c6b:	56                   	push   esi
c0007c6c:	53                   	push   ebx
c0007c6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c71:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c77:	73 06                	jae    c0007c7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c79:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c83:	c1 eb 0c             	shr    ebx,0xc
c0007c86:	c1 e8 0c             	shr    eax,0xc
c0007c89:	39 d8                	cmp    eax,ebx
c0007c8b:	73 13                	jae    c0007ca0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c8d:	6a 00                	push   0x0
c0007c8f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c92:	50                   	push   eax
c0007c93:	e8 04 fe ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007c98:	5a                   	pop    edx
c0007c99:	89 f0                	mov    eax,esi
c0007c9b:	59                   	pop    ecx
c0007c9c:	39 f3                	cmp    ebx,esi
c0007c9e:	75 ed                	jne    c0007c8d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007ca0:	5b                   	pop    ebx
c0007ca1:	5e                   	pop    esi
c0007ca2:	c3                   	ret    

c0007ca3 <Phys::physicalMemorySetup(unsigned int)>:
c0007ca3:	55                   	push   ebp
c0007ca4:	57                   	push   edi
c0007ca5:	56                   	push   esi
c0007ca6:	53                   	push   ebx
c0007ca7:	31 db                	xor    ebx,ebx
c0007ca9:	83 ec 40             	sub    esp,0x40
c0007cac:	6a 10                	push   0x10
c0007cae:	6a 00                	push   0x0
c0007cb0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007cb5:	e8 16 88 ff ff       	call   c00004d0 <memset>
c0007cba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cbe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cc3:	05 00 10 00 00       	add    eax,0x1000
c0007cc8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ccc:	5a                   	pop    edx
c0007ccd:	59                   	pop    ecx
c0007cce:	50                   	push   eax
c0007ccf:	68 a7 ee 01 c0       	push   0xc001eea7
c0007cd4:	e8 31 29 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007cd9:	83 c4 10             	add    esp,0x10
c0007cdc:	83 ec 08             	sub    esp,0x8
c0007cdf:	6a 01                	push   0x1
c0007ce1:	53                   	push   ebx
c0007ce2:	43                   	inc    ebx
c0007ce3:	e8 b4 fd ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ce8:	83 c4 10             	add    esp,0x10
c0007ceb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007cf1:	75 e9                	jne    c0007cdc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007cf3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007cf9:	66 85 c0             	test   ax,ax
c0007cfc:	0f 84 97 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007d02:	89 c7                	mov    edi,eax
c0007d04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d0c:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d12:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d17:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d1b:	eb 15                	jmp    c0007d32 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d21:	83 c3 18             	add    ebx,0x18
c0007d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d28:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d2c:	0f 84 77 01 00 00    	je     c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d32:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d35:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d3b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d3f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d43:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d45:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d48:	01 f0                	add    eax,esi
c0007d4a:	55                   	push   ebp
c0007d4b:	11 fa                	adc    edx,edi
c0007d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d51:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d59:	50                   	push   eax
c0007d5a:	56                   	push   esi
c0007d5b:	68 44 ee 01 c0       	push   0xc001ee44
c0007d60:	e8 a5 28 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007d65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	09 f8                	or     eax,edi
c0007d6e:	0f 85 35 01 00 00    	jne    c0007ea9 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d74:	4d                   	dec    ebp
c0007d75:	75 a6                	jne    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d77:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d7b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d80:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d84:	39 f2                	cmp    edx,esi
c0007d86:	89 c1                	mov    ecx,eax
c0007d88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d90:	19 f9                	sbb    ecx,edi
c0007d92:	0f 82 a7 00 00 00    	jb     c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d9c:	89 c1                	mov    ecx,eax
c0007d9e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007da2:	0f 83 97 00 00 00    	jae    c0007e3f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007da8:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007dad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db5:	39 fa                	cmp    edx,edi
c0007db7:	19 e8                	sbb    eax,ebp
c0007db9:	0f 82 9a 01 00 00    	jb     c0007f59 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007dbf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dc3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dc7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dcd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dd2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dd5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dd9:	31 c0                	xor    eax,eax
c0007ddb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007ddf:	39 fa                	cmp    edx,edi
c0007de1:	89 c1                	mov    ecx,eax
c0007de3:	19 e9                	sbb    ecx,ebp
c0007de5:	0f 83 32 ff ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007deb:	be 00 00 08 00       	mov    esi,0x80000
c0007df0:	51                   	push   ecx
c0007df1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007df5:	57                   	push   edi
c0007df6:	56                   	push   esi
c0007df7:	68 68 ee 01 c0       	push   0xc001ee68
c0007dfc:	e8 09 28 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007e01:	5d                   	pop    ebp
c0007e02:	58                   	pop    eax
c0007e03:	57                   	push   edi
c0007e04:	56                   	push   esi
c0007e05:	e8 61 fe ff ff       	call   c0007c6b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007e0a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e12:	83 c4 0c             	add    esp,0xc
c0007e15:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e19:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e1f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e26:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e2b:	52                   	push   edx
c0007e2c:	50                   	push   eax
c0007e2d:	68 cd ee 01 c0       	push   0xc001eecd
c0007e32:	e8 d3 27 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0007e37:	83 c4 10             	add    esp,0x10
c0007e3a:	e9 de fe ff ff       	jmp    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e3f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e4b:	39 ea                	cmp    edx,ebp
c0007e4d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e51:	0f 82 c6 fe ff ff    	jb     c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e57:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e5c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e60:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e64:	0f 83 b3 fe ff ff    	jae    c0007d1d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e6a:	39 ee                	cmp    esi,ebp
c0007e6c:	89 f8                	mov    eax,edi
c0007e6e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e72:	0f 83 78 ff ff ff    	jae    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e80:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e84:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e88:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e94:	e9 57 ff ff ff       	jmp    c0007df0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e99:	83 ec 0c             	sub    esp,0xc
c0007e9c:	68 bf ee 01 c0       	push   0xc001eebf
c0007ea1:	e8 65 84 00 00       	call   c001030b <KePanic(char const*)>
c0007ea6:	83 c4 10             	add    esp,0x10
c0007ea9:	83 ec 08             	sub    esp,0x8
c0007eac:	bb 60 00 00 00       	mov    ebx,0x60
c0007eb1:	6a 00                	push   0x0
c0007eb3:	6a 06                	push   0x6
c0007eb5:	e8 e2 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007eba:	58                   	pop    eax
c0007ebb:	5a                   	pop    edx
c0007ebc:	6a 00                	push   0x0
c0007ebe:	6a 07                	push   0x7
c0007ec0:	e8 d7 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007ec5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ecc:	83 c4 10             	add    esp,0x10
c0007ecf:	83 ec 08             	sub    esp,0x8
c0007ed2:	6a 00                	push   0x0
c0007ed4:	53                   	push   ebx
c0007ed5:	43                   	inc    ebx
c0007ed6:	e8 c1 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ee4:	75 e9                	jne    c0007ecf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ee6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007eeb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ef0:	83 c0 20             	add    eax,0x20
c0007ef3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ef8:	eb 22                	jmp    c0007f1c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007efa:	83 ec 08             	sub    esp,0x8
c0007efd:	6a 00                	push   0x0
c0007eff:	53                   	push   ebx
c0007f00:	43                   	inc    ebx
c0007f01:	e8 96 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f06:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f0b:	83 c4 10             	add    esp,0x10
c0007f0e:	40                   	inc    eax
c0007f0f:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f15:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f1a:	74 07                	je     c0007f23 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f1c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f21:	7e d7                	jle    c0007efa <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f23:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f28:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f2d:	7f 22                	jg     c0007f51 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f2f:	83 ec 08             	sub    esp,0x8
c0007f32:	6a 00                	push   0x0
c0007f34:	53                   	push   ebx
c0007f35:	43                   	inc    ebx
c0007f36:	e8 61 fb ff ff       	call   c0007a9c <Phys::setPageState(unsigned long, bool)>
c0007f3b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f40:	83 c4 10             	add    esp,0x10
c0007f43:	40                   	inc    eax
c0007f44:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f4a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f4f:	75 d7                	jne    c0007f28 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f51:	83 c4 3c             	add    esp,0x3c
c0007f54:	5b                   	pop    ebx
c0007f55:	5e                   	pop    esi
c0007f56:	5f                   	pop    edi
c0007f57:	5d                   	pop    ebp
c0007f58:	c3                   	ret    
c0007f59:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f69:	e9 51 fe ff ff       	jmp    c0007dbf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f6e <Pipe::isAtty()>:
c0007f6e:	31 c0                	xor    eax,eax
c0007f70:	c3                   	ret    
c0007f71:	90                   	nop

c0007f72 <Pipe::~Pipe()>:
c0007f72:	83 ec 0c             	sub    esp,0xc
c0007f75:	ba 2c ef 01 c0       	mov    edx,0xc001ef2c
c0007f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7e:	89 10                	mov    DWORD PTR [eax],edx
c0007f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f84:	83 ec 0c             	sub    esp,0xc
c0007f87:	50                   	push   eax
c0007f88:	e8 5f 11 00 00       	call   c00090ec <UnixFile::~UnixFile()>
c0007f8d:	83 c4 10             	add    esp,0x10
c0007f90:	90                   	nop
c0007f91:	83 c4 0c             	add    esp,0xc
c0007f94:	c3                   	ret    
c0007f95:	90                   	nop

c0007f96 <Pipe::~Pipe()>:
c0007f96:	83 ec 0c             	sub    esp,0xc
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa0:	e8 cd ff ff ff       	call   c0007f72 <Pipe::~Pipe()>
c0007fa5:	83 c4 10             	add    esp,0x10
c0007fa8:	83 ec 08             	sub    esp,0x8
c0007fab:	6a 20                	push   0x20
c0007fad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fb1:	e8 5e 25 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c0007fb6:	83 c4 10             	add    esp,0x10
c0007fb9:	83 c4 0c             	add    esp,0xc
c0007fbc:	c3                   	ret    
c0007fbd:	90                   	nop

c0007fbe <Pipe::write(unsigned long long, void*, int*)>:
c0007fbe:	55                   	push   ebp
c0007fbf:	57                   	push   edi
c0007fc0:	56                   	push   esi
c0007fc1:	53                   	push   ebx
c0007fc2:	83 ec 1c             	sub    esp,0x1c
c0007fc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fcd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fd0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fd4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fdb:	89 d8                	mov    eax,ebx
c0007fdd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fe0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fe4:	89 d6                	mov    esi,edx
c0007fe6:	89 d7                	mov    edi,edx
c0007fe8:	c1 ff 1f             	sar    edi,0x1f
c0007feb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fee:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007ff2:	c1 f8 1f             	sar    eax,0x1f
c0007ff5:	39 f3                	cmp    ebx,esi
c0007ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fff:	19 f8                	sbb    eax,edi
c0008001:	b8 01 00 00 00       	mov    eax,0x1
c0008006:	72 6e                	jb     c0008076 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008008:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000800b:	01 d0                	add    eax,edx
c000800d:	99                   	cdq    
c000800e:	f7 fb                	idiv   ebx
c0008010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008014:	29 d3                	sub    ebx,edx
c0008016:	89 d7                	mov    edi,edx
c0008018:	89 de                	mov    esi,ebx
c000801a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000801d:	c1 fb 1f             	sar    ebx,0x1f
c0008020:	39 f2                	cmp    edx,esi
c0008022:	19 d8                	sbb    eax,ebx
c0008024:	b8 00 00 00 00       	mov    eax,0x0
c0008029:	72 04                	jb     c000802f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000802b:	89 d0                	mov    eax,edx
c000802d:	29 f0                	sub    eax,esi
c000802f:	89 d3                	mov    ebx,edx
c0008031:	29 c3                	sub    ebx,eax
c0008033:	74 0b                	je     c0008040 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008035:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008038:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000803c:	89 d9                	mov    ecx,ebx
c000803e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008040:	85 c0                	test   eax,eax
c0008042:	74 0d                	je     c0008051 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008044:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008048:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000804b:	89 de                	mov    esi,ebx
c000804d:	89 c1                	mov    ecx,eax
c000804f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008051:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008054:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008059:	75 10                	jne    c000806b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000805b:	83 ec 0c             	sub    esp,0xc
c000805e:	68 e9 ee 01 c0       	push   0xc001eee9
c0008063:	e8 a3 82 00 00       	call   c001030b <KePanic(char const*)>
c0008068:	83 c4 10             	add    esp,0x10
c000806b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000806f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008072:	89 08                	mov    DWORD PTR [eax],ecx
c0008074:	31 c0                	xor    eax,eax
c0008076:	83 c4 1c             	add    esp,0x1c
c0008079:	5b                   	pop    ebx
c000807a:	5e                   	pop    esi
c000807b:	5f                   	pop    edi
c000807c:	5d                   	pop    ebp
c000807d:	c3                   	ret    

c000807e <Pipe::read(unsigned long long, void*, int*)>:
c000807e:	55                   	push   ebp
c000807f:	57                   	push   edi
c0008080:	56                   	push   esi
c0008081:	53                   	push   ebx
c0008082:	83 ec 1c             	sub    esp,0x1c
c0008085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000808d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008094:	89 c8                	mov    eax,ecx
c0008096:	99                   	cdq    
c0008097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000809b:	74 24                	je     c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000809d:	39 f9                	cmp    ecx,edi
c000809f:	89 d1                	mov    ecx,edx
c00080a1:	19 f1                	sbb    ecx,esi
c00080a3:	73 1c                	jae    c00080c1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080a5:	fa                   	cli    
c00080a6:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00080ac:	e8 63 c5 00 00       	call   c0014614 <schedule()>
c00080b1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080b6:	48                   	dec    eax
c00080b7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080bc:	75 d3                	jne    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080be:	fb                   	sti    
c00080bf:	eb d0                	jmp    c0008091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080c1:	39 f8                	cmp    eax,edi
c00080c3:	89 d1                	mov    ecx,edx
c00080c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080c8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080cc:	19 f1                	sbb    ecx,esi
c00080ce:	73 07                	jae    c00080d7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080d7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080da:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080dd:	29 f7                	sub    edi,esi
c00080df:	89 f8                	mov    eax,edi
c00080e1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080e5:	99                   	cdq    
c00080e6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080ed:	19 d0                	sbb    eax,edx
c00080ef:	73 07                	jae    c00080f8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080f8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080fb:	89 ea                	mov    edx,ebp
c00080fd:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008101:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008106:	74 0d                	je     c0008115 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008108:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000810b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000810f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008113:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008115:	85 d2                	test   edx,edx
c0008117:	74 11                	je     c000812a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000811d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008120:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008124:	89 d1                	mov    ecx,edx
c0008126:	89 c7                	mov    edi,eax
c0008128:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000812a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000812d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008130:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008133:	99                   	cdq    
c0008134:	89 f7                	mov    edi,esi
c0008136:	03 04 24             	add    eax,DWORD PTR [esp]
c0008139:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000813d:	c1 ff 1f             	sar    edi,0x1f
c0008140:	57                   	push   edi
c0008141:	56                   	push   esi
c0008142:	52                   	push   edx
c0008143:	50                   	push   eax
c0008144:	e8 e7 57 01 00       	call   c001d930 <__umoddi3>
c0008149:	83 c4 10             	add    esp,0x10
c000814c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000814f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008154:	75 10                	jne    c0008166 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008156:	83 ec 0c             	sub    esp,0xc
c0008159:	68 06 ef 01 c0       	push   0xc001ef06
c000815e:	e8 a8 81 00 00       	call   c001030b <KePanic(char const*)>
c0008163:	83 c4 10             	add    esp,0x10
c0008166:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000816a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000816d:	89 10                	mov    DWORD PTR [eax],edx
c000816f:	83 c4 1c             	add    esp,0x1c
c0008172:	31 c0                	xor    eax,eax
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    
c0008179:	90                   	nop

c000817a <Pipe::Pipe(int)>:
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008181:	83 ec 08             	sub    esp,0x8
c0008184:	6a 00                	push   0x0
c0008186:	50                   	push   eax
c0008187:	e8 7e 0d 00 00       	call   c0008f0a <UnixFile::UnixFile(int)>
c000818c:	83 c4 10             	add    esp,0x10
c000818f:	ba 2c ef 01 c0       	mov    edx,0xc001ef2c
c0008194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008198:	89 10                	mov    DWORD PTR [eax],edx
c000819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081bf:	83 ec 0c             	sub    esp,0xc
c00081c2:	50                   	push   eax
c00081c3:	e8 ad f6 ff ff       	call   c0007875 <malloc>
c00081c8:	83 c4 10             	add    esp,0x10
c00081cb:	89 c2                	mov    edx,eax
c00081cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081dc:	90                   	nop
c00081dd:	83 c4 0c             	add    esp,0xc
c00081e0:	c3                   	ret    
c00081e1:	90                   	nop

c00081e2 <VgaText::isAtty()>:
c00081e2:	b0 01                	mov    al,0x1
c00081e4:	c3                   	ret    
c00081e5:	90                   	nop

c00081e6 <VgaText::~VgaText()>:
c00081e6:	83 ec 0c             	sub    esp,0xc
c00081e9:	ba 74 ef 01 c0       	mov    edx,0xc001ef74
c00081ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f2:	89 10                	mov    DWORD PTR [eax],edx
c00081f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f8:	83 ec 0c             	sub    esp,0xc
c00081fb:	50                   	push   eax
c00081fc:	e8 eb 0e 00 00       	call   c00090ec <UnixFile::~UnixFile()>
c0008201:	83 c4 10             	add    esp,0x10
c0008204:	90                   	nop
c0008205:	83 c4 0c             	add    esp,0xc
c0008208:	c3                   	ret    
c0008209:	90                   	nop

c000820a <VgaText::~VgaText()>:
c000820a:	83 ec 0c             	sub    esp,0xc
c000820d:	83 ec 0c             	sub    esp,0xc
c0008210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008214:	e8 cd ff ff ff       	call   c00081e6 <VgaText::~VgaText()>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	83 ec 08             	sub    esp,0x8
c000821f:	68 84 01 00 00       	push   0x184
c0008224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008228:	e8 e7 22 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c000822d:	83 c4 10             	add    esp,0x10
c0008230:	83 c4 0c             	add    esp,0xc
c0008233:	c3                   	ret    

c0008234 <VgaText::read(unsigned long long, void*, int*)>:
c0008234:	83 ec 10             	sub    esp,0x10
c0008237:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000823b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000823f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008243:	e8 20 46 00 00       	call   c000c868 <readKeyboard(VgaText*, char*, unsigned long)>
c0008248:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000824c:	89 02                	mov    DWORD PTR [edx],eax
c000824e:	31 c0                	xor    eax,eax
c0008250:	83 c4 1c             	add    esp,0x1c
c0008253:	c3                   	ret    

c0008254 <setTerminalScrollLock(bool)>:
c0008254:	c3                   	ret    

c0008255 <doTerminalCycle()>:
c0008255:	c3                   	ret    

c0008256 <addToTerminalCycle(VgaText*)>:
c0008256:	c3                   	ret    

c0008257 <scrollTerminalScrollLock(int)>:
c0008257:	c3                   	ret    

c0008258 <VgaText::updateTitle()>:
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::load()>:
c000825a:	c3                   	ret    
c000825b:	90                   	nop

c000825c <VgaText::updateCursor()>:
c000825c:	83 ec 14             	sub    esp,0x14
c000825f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008263:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008266:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008269:	e8 be ef 00 00       	call   c001722c <HalConsoleCursorUpdate(int, int)>
c000826e:	83 c4 1c             	add    esp,0x1c
c0008271:	c3                   	ret    

c0008272 <VgaText::doANSI_SGR(int)>:
c0008272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	85 d2                	test   edx,edx
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x17>
c000827e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008281:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008284:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008287:	eb 59                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 07             	cmp    edx,0x7
c000828c:	75 0b                	jne    c0008299 <VgaText::doANSI_SGR(int)+0x27>
c000828e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008291:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008294:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008297:	eb 49                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c0008299:	83 fa 1b             	cmp    edx,0x1b
c000829c:	74 e0                	je     c000827e <VgaText::doANSI_SGR(int)+0xc>
c000829e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082a1:	83 f9 07             	cmp    ecx,0x7
c00082a4:	77 09                	ja     c00082af <VgaText::doANSI_SGR(int)+0x3d>
c00082a6:	8b 14 8d 60 10 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdefa0]
c00082ad:	eb 20                	jmp    c00082cf <VgaText::doANSI_SGR(int)+0x5d>
c00082af:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082b2:	83 f9 07             	cmp    ecx,0x7
c00082b5:	77 09                	ja     c00082c0 <VgaText::doANSI_SGR(int)+0x4e>
c00082b7:	8b 14 8d 60 10 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdefa0]
c00082be:	eb 22                	jmp    c00082e2 <VgaText::doANSI_SGR(int)+0x70>
c00082c0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082c3:	83 f9 07             	cmp    ecx,0x7
c00082c6:	77 0b                	ja     c00082d3 <VgaText::doANSI_SGR(int)+0x61>
c00082c8:	8b 14 95 18 0f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf0e8]
c00082cf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082d2:	c3                   	ret    
c00082d3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082d6:	83 f9 07             	cmp    ecx,0x7
c00082d9:	77 0a                	ja     c00082e5 <VgaText::doANSI_SGR(int)+0x73>
c00082db:	8b 14 95 f0 0e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdf110]
c00082e2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e5:	c3                   	ret    

c00082e6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082f1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082fe:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008301:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008304:	c3                   	ret    
c0008305:	90                   	nop

c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008306:	53                   	push   ebx
c0008307:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000830b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000830f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008313:	51                   	push   ecx
c0008314:	e8 cd ff ff ff       	call   c00082e6 <VgaText::setDefaultBgColour(VgaColour)>
c0008319:	58                   	pop    eax
c000831a:	5a                   	pop    edx
c000831b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000831f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008323:	5b                   	pop    ebx
c0008324:	eb d0                	jmp    c00082f6 <VgaText::setDefaultFgColour(VgaColour)>

c0008326 <VgaText::setTitleTextColour(VgaColour)>:
c0008326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000832a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008331:	c3                   	ret    

c0008332 <VgaText::setTitleColour(VgaColour)>:
c0008332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008336:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000833a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000833d:	c3                   	ret    

c000833e <VgaText::setTitle(char*)>:
c000833e:	c3                   	ret    
c000833f:	90                   	nop

c0008340 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008340:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008344:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008349:	83 e0 0f             	and    eax,0xf
c000834c:	c1 e2 04             	shl    edx,0x4
c000834f:	09 d0                	or     eax,edx
c0008351:	c3                   	ret    

c0008352 <VgaText::scrollScreen()>:
c0008352:	55                   	push   ebp
c0008353:	57                   	push   edi
c0008354:	56                   	push   esi
c0008355:	be 01 00 00 00       	mov    esi,0x1
c000835a:	53                   	push   ebx
c000835b:	83 ec 0c             	sub    esp,0xc
c000835e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008362:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008365:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000836b:	31 ff                	xor    edi,edi
c000836d:	01 e9                	add    ecx,ebp
c000836f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008371:	83 fe 18             	cmp    esi,0x18
c0008374:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000837a:	75 20                	jne    c000839c <VgaText::scrollScreen()+0x4a>
c000837c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008382:	74 15                	je     c0008399 <VgaText::scrollScreen()+0x47>
c0008384:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008388:	50                   	push   eax
c0008389:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000838d:	50                   	push   eax
c000838e:	e8 ad ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008393:	5a                   	pop    edx
c0008394:	5a                   	pop    edx
c0008395:	88 01                	mov    BYTE PTR [ecx],al
c0008397:	eb 03                	jmp    c000839c <VgaText::scrollScreen()+0x4a>
c0008399:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000839c:	47                   	inc    edi
c000839d:	41                   	inc    ecx
c000839e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083a4:	75 c9                	jne    c000836f <VgaText::scrollScreen()+0x1d>
c00083a6:	46                   	inc    esi
c00083a7:	83 fe 19             	cmp    esi,0x19
c00083aa:	75 b9                	jne    c0008365 <VgaText::scrollScreen()+0x13>
c00083ac:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083b2:	75 1f                	jne    c00083d3 <VgaText::scrollScreen()+0x81>
c00083b4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083b8:	74 05                	je     c00083bf <VgaText::scrollScreen()+0x6d>
c00083ba:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083bd:	eb 14                	jmp    c00083d3 <VgaText::scrollScreen()+0x81>
c00083bf:	50                   	push   eax
c00083c0:	50                   	push   eax
c00083c1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083c5:	50                   	push   eax
c00083c6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ca:	50                   	push   eax
c00083cb:	e8 e8 ec 00 00       	call   c00170b8 <HalConsoleScroll(int, int)>
c00083d0:	83 c4 10             	add    esp,0x10
c00083d3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083d7:	83 c4 0c             	add    esp,0xc
c00083da:	5b                   	pop    ebx
c00083db:	5e                   	pop    esi
c00083dc:	5f                   	pop    edi
c00083dd:	5d                   	pop    ebp
c00083de:	e9 79 fe ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00083e3:	90                   	nop

c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083e4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083e9:	c1 e0 08             	shl    eax,0x8
c00083ec:	89 c2                	mov    edx,eax
c00083ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083f3:	09 d0                	or     eax,edx
c00083f5:	c3                   	ret    

c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083f6:	55                   	push   ebp
c00083f7:	57                   	push   edi
c00083f8:	56                   	push   esi
c00083f9:	53                   	push   ebx
c00083fa:	83 ec 1c             	sub    esp,0x1c
c00083fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008401:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008405:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000840d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008411:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008415:	0f b6 c3             	movzx  eax,bl
c0008418:	50                   	push   eax
c0008419:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000841e:	50                   	push   eax
c000841f:	e8 1c ff ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008424:	5a                   	pop    edx
c0008425:	0f b6 c0             	movzx  eax,al
c0008428:	59                   	pop    ecx
c0008429:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000842e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008432:	50                   	push   eax
c0008433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008437:	e8 a8 ff ff ff       	call   c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>
c000843c:	5a                   	pop    edx
c000843d:	66 6b d7 50          	imul   dx,di,0x50
c0008441:	59                   	pop    ecx
c0008442:	01 f2                	add    edx,esi
c0008444:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008447:	0f b7 d2             	movzx  edx,dx
c000844a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000844e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008454:	75 28                	jne    c000847e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000845a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000845e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008462:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008466:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000846a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000846e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008472:	83 c4 1c             	add    esp,0x1c
c0008475:	5b                   	pop    ebx
c0008476:	5e                   	pop    esi
c0008477:	5f                   	pop    edi
c0008478:	5d                   	pop    ebp
c0008479:	e9 42 ed 00 00       	jmp    c00171c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000847e:	83 c4 1c             	add    esp,0x1c
c0008481:	5b                   	pop    ebx
c0008482:	5e                   	pop    esi
c0008483:	5f                   	pop    edi
c0008484:	5d                   	pop    ebp
c0008485:	c3                   	ret    

c0008486 <VgaText::getCursorX()>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000848d:	c3                   	ret    

c000848e <VgaText::getCursorY()>:
c000848e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008492:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008495:	c3                   	ret    

c0008496 <VgaText::setCursor(int, int)>:
c0008496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000849a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000849e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084a5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084a8:	e9 af fd ff ff       	jmp    c000825c <VgaText::updateCursor()>

c00084ad <setActiveTerminal(VgaText*)>:
c00084ad:	53                   	push   ebx
c00084ae:	83 ec 08             	sub    esp,0x8
c00084b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b5:	85 db                	test   ebx,ebx
c00084b7:	75 11                	jne    c00084ca <setActiveTerminal(VgaText*)+0x1d>
c00084b9:	c7 44 24 10 40 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ef40
c00084c1:	83 c4 08             	add    esp,0x8
c00084c4:	5b                   	pop    ebx
c00084c5:	e9 41 7e 00 00       	jmp    c001030b <KePanic(char const*)>
c00084ca:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084cf:	85 c0                	test   eax,eax
c00084d1:	74 0c                	je     c00084df <setActiveTerminal(VgaText*)+0x32>
c00084d3:	83 ec 0c             	sub    esp,0xc
c00084d6:	50                   	push   eax
c00084d7:	e8 80 fd ff ff       	call   c000825c <VgaText::updateCursor()>
c00084dc:	83 c4 10             	add    esp,0x10
c00084df:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084e5:	50                   	push   eax
c00084e6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084e9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084ec:	53                   	push   ebx
c00084ed:	e8 a4 ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c00084f2:	83 c4 18             	add    esp,0x18
c00084f5:	5b                   	pop    ebx
c00084f6:	c3                   	ret    
c00084f7:	90                   	nop

c00084f8 <VgaText::clearScreen()>:
c00084f8:	57                   	push   edi
c00084f9:	56                   	push   esi
c00084fa:	31 f6                	xor    esi,esi
c00084fc:	53                   	push   ebx
c00084fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008501:	52                   	push   edx
c0008502:	6a 00                	push   0x0
c0008504:	6a 00                	push   0x0
c0008506:	53                   	push   ebx
c0008507:	e8 8a ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000850c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008513:	83 c4 10             	add    esp,0x10
c0008516:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008519:	7e 20                	jle    c000853b <VgaText::clearScreen()+0x43>
c000851b:	31 ff                	xor    edi,edi
c000851d:	50                   	push   eax
c000851e:	50                   	push   eax
c000851f:	56                   	push   esi
c0008520:	57                   	push   edi
c0008521:	47                   	inc    edi
c0008522:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008525:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008528:	6a 20                	push   0x20
c000852a:	53                   	push   ebx
c000852b:	e8 c6 fe ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008530:	83 c4 20             	add    esp,0x20
c0008533:	83 ff 50             	cmp    edi,0x50
c0008536:	75 e5                	jne    c000851d <VgaText::clearScreen()+0x25>
c0008538:	46                   	inc    esi
c0008539:	eb db                	jmp    c0008516 <VgaText::clearScreen()+0x1e>
c000853b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008542:	5b                   	pop    ebx
c0008543:	5e                   	pop    esi
c0008544:	5f                   	pop    edi
c0008545:	c3                   	ret    

c0008546 <VgaText::setCursorX(int)>:
c0008546:	83 ec 10             	sub    esp,0x10
c0008549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000854d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008554:	50                   	push   eax
c0008555:	e8 3c ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000855a:	83 c4 1c             	add    esp,0x1c
c000855d:	c3                   	ret    

c000855e <VgaText::setCursorY(int)>:
c000855e:	83 ec 10             	sub    esp,0x10
c0008561:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008565:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008569:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000856c:	50                   	push   eax
c000856d:	e8 24 ff ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c0008572:	83 c4 1c             	add    esp,0x1c
c0008575:	c3                   	ret    

c0008576 <VgaText::incrementCursor(bool)>:
c0008576:	56                   	push   esi
c0008577:	53                   	push   ebx
c0008578:	51                   	push   ecx
c0008579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000857d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008581:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008584:	40                   	inc    eax
c0008585:	83 f8 50             	cmp    eax,0x50
c0008588:	74 05                	je     c000858f <VgaText::incrementCursor(bool)+0x19>
c000858a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000858d:	eb 24                	jmp    c00085b3 <VgaText::incrementCursor(bool)+0x3d>
c000858f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008592:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008599:	8d 50 01             	lea    edx,[eax+0x1]
c000859c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000859f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a2:	75 0f                	jne    c00085b3 <VgaText::incrementCursor(bool)+0x3d>
c00085a4:	83 ec 0c             	sub    esp,0xc
c00085a7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085aa:	53                   	push   ebx
c00085ab:	e8 a2 fd ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00085b0:	83 c4 10             	add    esp,0x10
c00085b3:	89 f0                	mov    eax,esi
c00085b5:	84 c0                	test   al,al
c00085b7:	74 0c                	je     c00085c5 <VgaText::incrementCursor(bool)+0x4f>
c00085b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085bd:	5a                   	pop    edx
c00085be:	5b                   	pop    ebx
c00085bf:	5e                   	pop    esi
c00085c0:	e9 97 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085c5:	58                   	pop    eax
c00085c6:	5b                   	pop    ebx
c00085c7:	5e                   	pop    esi
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::decrementCursor(bool)>:
c00085ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085d2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085d5:	85 c0                	test   eax,eax
c00085d7:	74 04                	je     c00085dd <VgaText::decrementCursor(bool)+0x13>
c00085d9:	48                   	dec    eax
c00085da:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085dd:	84 c9                	test   cl,cl
c00085df:	74 09                	je     c00085ea <VgaText::decrementCursor(bool)+0x20>
c00085e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085e5:	e9 72 fc ff ff       	jmp    c000825c <VgaText::updateCursor()>
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085ec:	53                   	push   ebx
c00085ed:	83 ec 08             	sub    esp,0x8
c00085f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008600:	3c 07                	cmp    al,0x7
c0008602:	75 21                	jne    c0008625 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008604:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000860c:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008614:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000861c:	83 c4 08             	add    esp,0x8
c000861f:	5b                   	pop    ebx
c0008620:	e9 3a 2e 00 00       	jmp    c000b45f <Krnl::beep(int, int, bool)>
c0008625:	3c 0d                	cmp    al,0xd
c0008627:	75 09                	jne    c0008632 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	eb 2c                	jmp    c000865e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008632:	3c 0a                	cmp    al,0xa
c0008634:	75 31                	jne    c0008667 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008636:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008639:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008640:	8d 50 01             	lea    edx,[eax+0x1]
c0008643:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008646:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008649:	75 0f                	jne    c000865a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000864b:	83 ec 0c             	sub    esp,0xc
c000864e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008651:	53                   	push   ebx
c0008652:	e8 fb fc ff ff       	call   c0008352 <VgaText::scrollScreen()>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000865e:	83 c4 08             	add    esp,0x8
c0008661:	5b                   	pop    ebx
c0008662:	e9 f5 fb ff ff       	jmp    c000825c <VgaText::updateCursor()>
c0008667:	3c 08                	cmp    al,0x8
c0008669:	75 25                	jne    c0008690 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000866b:	50                   	push   eax
c000866c:	50                   	push   eax
c000866d:	6a 01                	push   0x1
c000866f:	53                   	push   ebx
c0008670:	e8 55 ff ff ff       	call   c00085ca <VgaText::decrementCursor(bool)>
c0008675:	5a                   	pop    edx
c0008676:	59                   	pop    ecx
c0008677:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000867a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000867d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008680:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008683:	6a 20                	push   0x20
c0008685:	53                   	push   ebx
c0008686:	e8 6b fd ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000868b:	83 c4 28             	add    esp,0x28
c000868e:	5b                   	pop    ebx
c000868f:	c3                   	ret    
c0008690:	83 ec 08             	sub    esp,0x8
c0008693:	0f be c0             	movsx  eax,al
c0008696:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008699:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000869c:	51                   	push   ecx
c000869d:	52                   	push   edx
c000869e:	50                   	push   eax
c000869f:	53                   	push   ebx
c00086a0:	e8 51 fd ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086a5:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086a9:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086b1:	83 c4 28             	add    esp,0x28
c00086b4:	5b                   	pop    ebx
c00086b5:	e9 bc fe ff ff       	jmp    c0008576 <VgaText::incrementCursor(bool)>

c00086ba <VgaText::putchar(char)>:
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 14             	sub    esp,0x14
c00086bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086c7:	3c 5b                	cmp    al,0x5b
c00086c9:	75 18                	jne    c00086e3 <VgaText::putchar(char)+0x29>
c00086cb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086cf:	74 1f                	je     c00086f0 <VgaText::putchar(char)+0x36>
c00086d1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086d7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086de:	e9 bd 00 00 00       	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c00086e3:	3c 1b                	cmp    al,0x1b
c00086e5:	75 09                	jne    c00086f0 <VgaText::putchar(char)+0x36>
c00086e7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086eb:	e9 b0 00 00 00       	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c00086f0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086f3:	84 c9                	test   cl,cl
c00086f5:	0f 84 92 00 00 00    	je     c000878d <VgaText::putchar(char)+0xd3>
c00086fb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086fe:	80 fa 3e             	cmp    dl,0x3e
c0008701:	77 76                	ja     c0008779 <VgaText::putchar(char)+0xbf>
c0008703:	3c 6d                	cmp    al,0x6d
c0008705:	75 47                	jne    c000874e <VgaText::putchar(char)+0x94>
c0008707:	31 f6                	xor    esi,esi
c0008709:	31 d2                	xor    edx,edx
c000870b:	31 c0                	xor    eax,eax
c000870d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008710:	7e 2d                	jle    c000873f <VgaText::putchar(char)+0x85>
c0008712:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008717:	80 fa 3b             	cmp    dl,0x3b
c000871a:	75 17                	jne    c0008733 <VgaText::putchar(char)+0x79>
c000871c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008720:	50                   	push   eax
c0008721:	53                   	push   ebx
c0008722:	e8 4b fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c0008727:	59                   	pop    ecx
c0008728:	31 d2                	xor    edx,edx
c000872a:	58                   	pop    eax
c000872b:	31 c0                	xor    eax,eax
c000872d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008731:	eb 09                	jmp    c000873c <VgaText::putchar(char)+0x82>
c0008733:	6b c0 0a             	imul   eax,eax,0xa
c0008736:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000873a:	88 ca                	mov    dl,cl
c000873c:	46                   	inc    esi
c000873d:	eb ce                	jmp    c000870d <VgaText::putchar(char)+0x53>
c000873f:	84 d2                	test   dl,dl
c0008741:	74 2e                	je     c0008771 <VgaText::putchar(char)+0xb7>
c0008743:	50                   	push   eax
c0008744:	53                   	push   ebx
c0008745:	e8 28 fb ff ff       	call   c0008272 <VgaText::doANSI_SGR(int)>
c000874a:	58                   	pop    eax
c000874b:	5a                   	pop    edx
c000874c:	eb 23                	jmp    c0008771 <VgaText::putchar(char)+0xb7>
c000874e:	3c 4a                	cmp    al,0x4a
c0008750:	75 1f                	jne    c0008771 <VgaText::putchar(char)+0xb7>
c0008752:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008756:	75 19                	jne    c0008771 <VgaText::putchar(char)+0xb7>
c0008758:	83 ec 0c             	sub    esp,0xc
c000875b:	53                   	push   ebx
c000875c:	e8 97 fd ff ff       	call   c00084f8 <VgaText::clearScreen()>
c0008761:	83 c4 0c             	add    esp,0xc
c0008764:	6a 00                	push   0x0
c0008766:	6a 00                	push   0x0
c0008768:	53                   	push   ebx
c0008769:	e8 28 fd ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c000876e:	83 c4 10             	add    esp,0x10
c0008771:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008777:	eb 27                	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c0008779:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000877c:	83 fa 0e             	cmp    edx,0xe
c000877f:	7f 1f                	jg     c00087a0 <VgaText::putchar(char)+0xe6>
c0008781:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008784:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008787:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000878b:	eb 13                	jmp    c00087a0 <VgaText::putchar(char)+0xe6>
c000878d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008790:	0f be c0             	movsx  eax,al
c0008793:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008796:	50                   	push   eax
c0008797:	53                   	push   ebx
c0008798:	e8 4f fe ff ff       	call   c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	83 c4 14             	add    esp,0x14
c00087a3:	5b                   	pop    ebx
c00087a4:	5e                   	pop    esi
c00087a5:	c3                   	ret    

c00087a6 <VgaText::putx(unsigned int)>:
c00087a6:	57                   	push   edi
c00087a7:	b9 11 00 00 00       	mov    ecx,0x11
c00087ac:	56                   	push   esi
c00087ad:	be 4e ef 01 c0       	mov    esi,0xc001ef4e
c00087b2:	53                   	push   ebx
c00087b3:	83 ec 20             	sub    esp,0x20
c00087b6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087ba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087be:	fc                   	cld    
c00087bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087c1:	be 08 00 00 00       	mov    esi,0x8
c00087c6:	50                   	push   eax
c00087c7:	50                   	push   eax
c00087c8:	89 d8                	mov    eax,ebx
c00087ca:	c1 e3 04             	shl    ebx,0x4
c00087cd:	c1 e8 1c             	shr    eax,0x1c
c00087d0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087d5:	50                   	push   eax
c00087d6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087da:	e8 db fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c00087df:	83 c4 10             	add    esp,0x10
c00087e2:	4e                   	dec    esi
c00087e3:	75 e1                	jne    c00087c6 <VgaText::putx(unsigned int)+0x20>
c00087e5:	83 c4 20             	add    esp,0x20
c00087e8:	5b                   	pop    ebx
c00087e9:	5e                   	pop    esi
c00087ea:	5f                   	pop    edi
c00087eb:	c3                   	ret    

c00087ec <VgaText::puts(char const*)>:
c00087ec:	53                   	push   ebx
c00087ed:	83 ec 08             	sub    esp,0x8
c00087f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087f4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087f7:	84 c0                	test   al,al
c00087f9:	74 12                	je     c000880d <VgaText::puts(char const*)+0x21>
c00087fb:	43                   	inc    ebx
c00087fc:	51                   	push   ecx
c00087fd:	51                   	push   ecx
c00087fe:	50                   	push   eax
c00087ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008803:	e8 b2 fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008808:	83 c4 10             	add    esp,0x10
c000880b:	eb e7                	jmp    c00087f4 <VgaText::puts(char const*)+0x8>
c000880d:	83 c4 08             	add    esp,0x8
c0008810:	5b                   	pop    ebx
c0008811:	c3                   	ret    

c0008812 <VgaText::write(unsigned long long, void*, int*)>:
c0008812:	55                   	push   ebp
c0008813:	57                   	push   edi
c0008814:	56                   	push   esi
c0008815:	53                   	push   ebx
c0008816:	83 ec 0c             	sub    esp,0xc
c0008819:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000881d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008821:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008825:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000882c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000882f:	39 eb                	cmp    ebx,ebp
c0008831:	74 13                	je     c0008846 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008833:	43                   	inc    ebx
c0008834:	50                   	push   eax
c0008835:	50                   	push   eax
c0008836:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000883a:	50                   	push   eax
c000883b:	56                   	push   esi
c000883c:	e8 79 fe ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008841:	83 c4 10             	add    esp,0x10
c0008844:	eb e9                	jmp    c000882f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008846:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000884d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008851:	89 38                	mov    DWORD PTR [eax],edi
c0008853:	83 c4 0c             	add    esp,0xc
c0008856:	31 c0                	xor    eax,eax
c0008858:	5b                   	pop    ebx
c0008859:	5e                   	pop    esi
c000885a:	5f                   	pop    edi
c000885b:	5d                   	pop    ebp
c000885c:	c3                   	ret    
c000885d:	90                   	nop

c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000885e:	55                   	push   ebp
c000885f:	57                   	push   edi
c0008860:	56                   	push   esi
c0008861:	53                   	push   ebx
c0008862:	83 ec 0c             	sub    esp,0xc
c0008865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008869:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008875:	50                   	push   eax
c0008876:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000887b:	50                   	push   eax
c000887c:	e8 bf fa ff ff       	call   c0008340 <VgaText::combineColours(unsigned char, unsigned char)>
c0008881:	5a                   	pop    edx
c0008882:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008887:	59                   	pop    ecx
c0008888:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000888b:	89 c5                	mov    ebp,eax
c000888d:	0f b7 f6             	movzx  esi,si
c0008890:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008894:	01 f6                	add    esi,esi
c0008896:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008899:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000889c:	84 c0                	test   al,al
c000889e:	0f 84 f4 00 00 00    	je     c0008998 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088a4:	3c 0d                	cmp    al,0xd
c00088a6:	75 0c                	jne    c00088b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088af:	e9 de 00 00 00       	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088b4:	3c 0a                	cmp    al,0xa
c00088b6:	75 45                	jne    c00088fd <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088b8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088bb:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088c5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088c8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088cb:	75 0f                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088cd:	83 ec 0c             	sub    esp,0xc
c00088d0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d3:	53                   	push   ebx
c00088d4:	e8 79 fa ff ff       	call   c0008352 <VgaText::scrollScreen()>
c00088d9:	83 c4 10             	add    esp,0x10
c00088dc:	83 ec 0c             	sub    esp,0xc
c00088df:	53                   	push   ebx
c00088e0:	e8 77 f9 ff ff       	call   c000825c <VgaText::updateCursor()>
c00088e5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088ea:	83 c4 10             	add    esp,0x10
c00088ed:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088f0:	0f b7 f6             	movzx  esi,si
c00088f3:	01 f6                	add    esi,esi
c00088f5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088f8:	e9 95 00 00 00       	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088fd:	3c 08                	cmp    al,0x8
c00088ff:	75 35                	jne    c0008936 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008901:	51                   	push   ecx
c0008902:	51                   	push   ecx
c0008903:	6a 01                	push   0x1
c0008905:	53                   	push   ebx
c0008906:	e8 bf fc ff ff       	call   c00085ca <VgaText::decrementCursor(bool)>
c000890b:	5e                   	pop    esi
c000890c:	58                   	pop    eax
c000890d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008910:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008913:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008916:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008919:	6a 20                	push   0x20
c000891b:	53                   	push   ebx
c000891c:	e8 d5 fa ff ff       	call   c00083f6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008921:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008926:	83 c4 20             	add    esp,0x20
c0008929:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000892c:	0f b7 f6             	movzx  esi,si
c000892f:	01 f6                	add    esi,esi
c0008931:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008934:	eb 5c                	jmp    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008936:	52                   	push   edx
c0008937:	52                   	push   edx
c0008938:	89 ea                	mov    edx,ebp
c000893a:	0f b6 ca             	movzx  ecx,dl
c000893d:	51                   	push   ecx
c000893e:	50                   	push   eax
c000893f:	e8 a0 fa ff ff       	call   c00083e4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008944:	83 c4 10             	add    esp,0x10
c0008947:	66 89 06             	mov    WORD PTR [esi],ax
c000894a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008950:	75 1d                	jne    c000896f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008952:	83 ec 0c             	sub    esp,0xc
c0008955:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008958:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000895b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000895f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008963:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008966:	50                   	push   eax
c0008967:	e8 54 e8 00 00       	call   c00171c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000896c:	83 c4 20             	add    esp,0x20
c000896f:	83 c6 02             	add    esi,0x2
c0008972:	50                   	push   eax
c0008973:	50                   	push   eax
c0008974:	6a 00                	push   0x0
c0008976:	53                   	push   ebx
c0008977:	e8 fa fb ff ff       	call   c0008576 <VgaText::incrementCursor(bool)>
c000897c:	83 c4 10             	add    esp,0x10
c000897f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008983:	75 0d                	jne    c0008992 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008985:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000898a:	0f b7 f6             	movzx  esi,si
c000898d:	01 f6                	add    esi,esi
c000898f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008992:	47                   	inc    edi
c0008993:	e9 01 ff ff ff       	jmp    c0008899 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008998:	83 ec 0c             	sub    esp,0xc
c000899b:	53                   	push   ebx
c000899c:	e8 bb f8 ff ff       	call   c000825c <VgaText::updateCursor()>
c00089a1:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089a8:	83 c4 1c             	add    esp,0x1c
c00089ab:	5b                   	pop    ebx
c00089ac:	5e                   	pop    esi
c00089ad:	5f                   	pop    edi
c00089ae:	5d                   	pop    ebp
c00089af:	c3                   	ret    

c00089b0 <VgaText::VgaText(char const*)>:
c00089b0:	56                   	push   esi
c00089b1:	53                   	push   ebx
c00089b2:	83 ec 04             	sub    esp,0x4
c00089b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b9:	83 ec 08             	sub    esp,0x8
c00089bc:	6a 00                	push   0x0
c00089be:	50                   	push   eax
c00089bf:	e8 46 05 00 00       	call   c0008f0a <UnixFile::UnixFile(int)>
c00089c4:	83 c4 10             	add    esp,0x10
c00089c7:	ba 74 ef 01 c0       	mov    edx,0xc001ef74
c00089cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d0:	89 10                	mov    DWORD PTR [eax],edx
c00089d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a07:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a12:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a28:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	6a 01                	push   0x1
c0008a34:	e8 14 09 00 00       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0008a39:	83 c4 10             	add    esp,0x10
c0008a3c:	89 c2                	mov    edx,eax
c0008a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a45:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a52:	89 c6                	mov    esi,eax
c0008a54:	e8 f8 f0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0008a59:	68 05 0c 00 00       	push   0xc05
c0008a5e:	56                   	push   esi
c0008a5f:	50                   	push   eax
c0008a60:	53                   	push   ebx
c0008a61:	e8 aa 0f 00 00       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a66:	83 c4 10             	add    esp,0x10
c0008a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a6d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a70:	83 ec 04             	sub    esp,0x4
c0008a73:	68 a0 0f 00 00       	push   0xfa0
c0008a78:	6a 00                	push   0x0
c0008a7a:	50                   	push   eax
c0008a7b:	e8 50 7a ff ff       	call   c00004d0 <memset>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	83 ec 04             	sub    esp,0x4
c0008a86:	6a 00                	push   0x0
c0008a88:	6a 07                	push   0x7
c0008a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a8e:	e8 73 f8 ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a93:	83 c4 10             	add    esp,0x10
c0008a96:	83 ec 04             	sub    esp,0x4
c0008a99:	6a 00                	push   0x0
c0008a9b:	6a 00                	push   0x0
c0008a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa1:	e8 f0 f9 ff ff       	call   c0008496 <VgaText::setCursor(int, int)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	83 ec 0c             	sub    esp,0xc
c0008aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ab0:	e8 43 fa ff ff       	call   c00084f8 <VgaText::clearScreen()>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abc:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ac4:	05 82 00 00 00       	add    eax,0x82
c0008ac9:	83 ec 04             	sub    esp,0x4
c0008acc:	68 80 00 00 00       	push   0x80
c0008ad1:	6a 00                	push   0x0
c0008ad3:	50                   	push   eax
c0008ad4:	e8 f7 79 ff ff       	call   c00004d0 <memset>
c0008ad9:	83 c4 10             	add    esp,0x10
c0008adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae0:	05 02 01 00 00       	add    eax,0x102
c0008ae5:	83 ec 04             	sub    esp,0x4
c0008ae8:	68 80 00 00 00       	push   0x80
c0008aed:	6a 00                	push   0x0
c0008aef:	50                   	push   eax
c0008af0:	e8 db 79 ff ff       	call   c00004d0 <memset>
c0008af5:	83 c4 10             	add    esp,0x10
c0008af8:	90                   	nop
c0008af9:	83 c4 04             	add    esp,0x4
c0008afc:	5b                   	pop    ebx
c0008afd:	5e                   	pop    esi
c0008afe:	c3                   	ret    
c0008aff:	90                   	nop

c0008b00 <VgaText::receiveKey(unsigned char)>:
c0008b00:	55                   	push   ebp
c0008b01:	57                   	push   edi
c0008b02:	56                   	push   esi
c0008b03:	53                   	push   ebx
c0008b04:	83 ec 1c             	sub    esp,0x1c
c0008b07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b0f:	89 f0                	mov    eax,esi
c0008b11:	84 c0                	test   al,al
c0008b13:	0f 84 47 01 00 00    	je     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008b19:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b1f:	3c 08                	cmp    al,0x8
c0008b21:	75 6b                	jne    c0008b8e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b23:	83 ec 0c             	sub    esp,0xc
c0008b26:	57                   	push   edi
c0008b27:	e8 14 7a ff ff       	call   c0000540 <strlen>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	85 c0                	test   eax,eax
c0008b31:	0f 84 ee 00 00 00    	je     c0008c25 <VgaText::receiveKey(unsigned char)+0x125>
c0008b37:	50                   	push   eax
c0008b38:	50                   	push   eax
c0008b39:	6a 08                	push   0x8
c0008b3b:	53                   	push   ebx
c0008b3c:	e8 79 fb ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008b41:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b44:	e8 f7 79 ff ff       	call   c0000540 <strlen>
c0008b49:	83 c4 10             	add    esp,0x10
c0008b4c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b53:	3c 0d                	cmp    al,0xd
c0008b55:	0f 95 c1             	setne  cl
c0008b58:	3c 18                	cmp    al,0x18
c0008b5a:	0f 9e c2             	setle  dl
c0008b5d:	84 d1                	test   cl,dl
c0008b5f:	74 17                	je     c0008b78 <VgaText::receiveKey(unsigned char)+0x78>
c0008b61:	83 e8 08             	sub    eax,0x8
c0008b64:	3c 02                	cmp    al,0x2
c0008b66:	76 10                	jbe    c0008b78 <VgaText::receiveKey(unsigned char)+0x78>
c0008b68:	55                   	push   ebp
c0008b69:	55                   	push   ebp
c0008b6a:	68 5f ef 01 c0       	push   0xc001ef5f
c0008b6f:	53                   	push   ebx
c0008b70:	e8 77 fc ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0008b75:	83 c4 10             	add    esp,0x10
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	57                   	push   edi
c0008b7c:	e8 bf 79 ff ff       	call   c0000540 <strlen>
c0008b81:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b89:	e9 94 00 00 00       	jmp    c0008c22 <VgaText::receiveKey(unsigned char)+0x122>
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b97:	50                   	push   eax
c0008b98:	e8 a3 79 ff ff       	call   c0000540 <strlen>
c0008b9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ba0:	89 c5                	mov    ebp,eax
c0008ba2:	e8 99 79 ff ff       	call   c0000540 <strlen>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bae:	3d 80 00 00 00       	cmp    eax,0x80
c0008bb3:	0f 87 a7 00 00 00    	ja     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008bb9:	89 f0                	mov    eax,esi
c0008bbb:	3c 18                	cmp    al,0x18
c0008bbd:	0f 96 c2             	setbe  dl
c0008bc0:	3c 0d                	cmp    al,0xd
c0008bc2:	0f 95 c0             	setne  al
c0008bc5:	84 c2                	test   dl,al
c0008bc7:	74 30                	je     c0008bf9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bc9:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bcc:	3c 01                	cmp    al,0x1
c0008bce:	76 29                	jbe    c0008bf9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bd0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd6:	68 65 ef 01 c0       	push   0xc001ef65
c0008bdb:	53                   	push   ebx
c0008bdc:	e8 7d fc ff ff       	call   c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008be1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008be4:	8d 46 40             	lea    eax,[esi+0x40]
c0008be7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bea:	0f b6 c0             	movzx  eax,al
c0008bed:	50                   	push   eax
c0008bee:	53                   	push   ebx
c0008bef:	e8 f8 f9 ff ff       	call   c00085ec <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bf4:	83 c4 20             	add    esp,0x20
c0008bf7:	eb 11                	jmp    c0008c0a <VgaText::receiveKey(unsigned char)+0x10a>
c0008bf9:	89 f0                	mov    eax,esi
c0008bfb:	51                   	push   ecx
c0008bfc:	0f be c0             	movsx  eax,al
c0008bff:	51                   	push   ecx
c0008c00:	50                   	push   eax
c0008c01:	53                   	push   ebx
c0008c02:	e8 b3 fa ff ff       	call   c00086ba <VgaText::putchar(char)>
c0008c07:	83 c4 10             	add    esp,0x10
c0008c0a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c0f:	89 f0                	mov    eax,esi
c0008c11:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c15:	52                   	push   edx
c0008c16:	52                   	push   edx
c0008c17:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c1b:	50                   	push   eax
c0008c1c:	57                   	push   edi
c0008c1d:	e8 9e 7b ff ff       	call   c00007c0 <strcat>
c0008c22:	83 c4 10             	add    esp,0x10
c0008c25:	89 f0                	mov    eax,esi
c0008c27:	3c 03                	cmp    al,0x3
c0008c29:	0f 94 c2             	sete   dl
c0008c2c:	3c 0a                	cmp    al,0xa
c0008c2e:	0f 94 c0             	sete   al
c0008c31:	08 c2                	or     dl,al
c0008c33:	75 09                	jne    c0008c3e <VgaText::receiveKey(unsigned char)+0x13e>
c0008c35:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c3c:	74 22                	je     c0008c60 <VgaText::receiveKey(unsigned char)+0x160>
c0008c3e:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c44:	50                   	push   eax
c0008c45:	50                   	push   eax
c0008c46:	57                   	push   edi
c0008c47:	53                   	push   ebx
c0008c48:	e8 73 7b ff ff       	call   c00007c0 <strcat>
c0008c4d:	83 c4 0c             	add    esp,0xc
c0008c50:	68 80 00 00 00       	push   0x80
c0008c55:	6a 00                	push   0x0
c0008c57:	57                   	push   edi
c0008c58:	e8 73 78 ff ff       	call   c00004d0 <memset>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	83 c4 1c             	add    esp,0x1c
c0008c63:	5b                   	pop    ebx
c0008c64:	5e                   	pop    esi
c0008c65:	5f                   	pop    edi
c0008c66:	5d                   	pop    ebp
c0008c67:	c3                   	ret    

c0008c68 <VgaText::doUpdate()>:
c0008c68:	c3                   	ret    

c0008c69 <newTerminal(char*)>:
c0008c69:	83 ec 28             	sub    esp,0x28
c0008c6c:	68 84 01 00 00       	push   0x184
c0008c71:	e8 ff eb ff ff       	call   c0007875 <malloc>
c0008c76:	5a                   	pop    edx
c0008c77:	59                   	pop    ecx
c0008c78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c7c:	50                   	push   eax
c0008c7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c81:	e8 2a fd ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c0008c86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c8a:	83 c4 2c             	add    esp,0x2c
c0008c8d:	c3                   	ret    
c0008c8e:	66 90                	xchg   ax,ax

c0008c90 <TSS::TSS()>:
c0008c90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c9b:	90                   	nop
c0008c9c:	c3                   	ret    
c0008c9d:	90                   	nop
c0008c9e:	66 90                	xchg   ax,ax

c0008ca0 <TSS::setESP(unsigned long)>:
c0008ca0:	55                   	push   ebp
c0008ca1:	89 e5                	mov    ebp,esp
c0008ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008caf:	90                   	nop
c0008cb0:	5d                   	pop    ebp
c0008cb1:	c3                   	ret    
c0008cb2:	66 90                	xchg   ax,ax

c0008cb4 <TSS::flush()>:
c0008cb4:	55                   	push   ebp
c0008cb5:	89 e5                	mov    ebp,esp
c0008cb7:	83 ec 10             	sub    esp,0x10
c0008cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cbf:	83 c8 03             	or     eax,0x3
c0008cc2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cc6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cca:	66 89 d0             	mov    ax,dx
c0008ccd:	0f 00 d8             	ltr    ax
c0008cd0:	90                   	nop
c0008cd1:	c9                   	leave  
c0008cd2:	c3                   	ret    
c0008cd3:	90                   	nop

c0008cd4 <TSS::setup(unsigned long, unsigned long)>:
c0008cd4:	55                   	push   ebp
c0008cd5:	89 e5                	mov    ebp,esp
c0008cd7:	83 ec 18             	sub    esp,0x18
c0008cda:	83 ec 0c             	sub    esp,0xc
c0008cdd:	6a 68                	push   0x68
c0008cdf:	e8 91 eb ff ff       	call   c0007875 <malloc>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	89 c2                	mov    edx,eax
c0008ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf5:	83 ec 04             	sub    esp,0x4
c0008cf8:	6a 68                	push   0x68
c0008cfa:	6a 00                	push   0x0
c0008cfc:	50                   	push   eax
c0008cfd:	e8 ce 77 ff ff       	call   c00004d0 <memset>
c0008d02:	83 c4 10             	add    esp,0x10
c0008d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d17:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d23:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d26:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d47:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d53:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d77:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9c:	0f 20 da             	mov    edx,cr3
c0008d9f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008da2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dae:	83 ec 08             	sub    esp,0x8
c0008db1:	50                   	push   eax
c0008db2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db5:	50                   	push   eax
c0008db6:	e8 3f e3 ff ff       	call   c00070fa <GDTEntry::setBase(unsigned int)>
c0008dbb:	83 c4 10             	add    esp,0x10
c0008dbe:	83 ec 08             	sub    esp,0x8
c0008dc1:	6a 68                	push   0x68
c0008dc3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dc6:	50                   	push   eax
c0008dc7:	e8 4a e3 ff ff       	call   c0007116 <GDTEntry::setLimit(unsigned int)>
c0008dcc:	83 c4 10             	add    esp,0x10
c0008dcf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dd3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dd6:	83 e0 0f             	and    eax,0xf
c0008dd9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008ddc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008ddf:	83 c8 40             	or     eax,0x40
c0008de2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008df0:	05 78 01 00 00       	add    eax,0x178
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dfb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dfe:	50                   	push   eax
c0008dff:	e8 46 e3 ff ff       	call   c000714a <GDT::addEntry(GDTEntry)>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	89 c2                	mov    edx,eax
c0008e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e0c:	89 10                	mov    DWORD PTR [eax],edx
c0008e0e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e19:	05 78 01 00 00       	add    eax,0x178
c0008e1e:	83 ec 0c             	sub    esp,0xc
c0008e21:	50                   	push   eax
c0008e22:	e8 4d e3 ff ff       	call   c0007174 <GDT::flush()>
c0008e27:	83 c4 10             	add    esp,0x10
c0008e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e2f:	c9                   	leave  
c0008e30:	c3                   	ret    
c0008e31:	90                   	nop

c0008e32 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e36:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e3d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e42:	75 08                	jne    c0008e4c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e44:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e4a:	eb 38                	jmp    c0008e84 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e4c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e51:	75 17                	jne    c0008e6a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e5b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e61:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e67:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e6a:	89 c1                	mov    ecx,eax
c0008e6c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e6f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e75:	74 cd                	je     c0008e44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e77:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e7c:	83 e0 ef             	and    eax,0xffffffef
c0008e7f:	83 f8 08             	cmp    eax,0x8
c0008e82:	76 c0                	jbe    c0008e44 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e84:	31 c0                	xor    eax,eax
c0008e86:	c3                   	ret    
c0008e87:	90                   	nop

c0008e88 <ReservedFilename::isAtty()>:
c0008e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e8c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e8f:	31 c0                	xor    eax,eax
c0008e91:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e97:	74 09                	je     c0008ea2 <ReservedFilename::isAtty()+0x1a>
c0008e99:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e9f:	0f 94 c0             	sete   al
c0008ea2:	c3                   	ret    
c0008ea3:	90                   	nop

c0008ea4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eb3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008eb8:	75 08                	jne    c0008ec2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eba:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ec0:	eb 3d                	jmp    c0008eff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ec2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ec7:	75 17                	jne    c0008ee0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ec9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ece:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ed1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ed7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ed9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008edd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ee0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee5:	75 04                	jne    c0008eeb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ee7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ee9:	eb 14                	jmp    c0008eff <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eeb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ef0:	74 c8                	je     c0008eba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ef2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ef7:	83 e0 ef             	and    eax,0xffffffef
c0008efa:	83 f8 08             	cmp    eax,0x8
c0008efd:	76 bb                	jbe    c0008eba <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eff:	31 c0                	xor    eax,eax
c0008f01:	c3                   	ret    

c0008f02 <UnixFile::getFileDescriptor()>:
c0008f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f09:	c3                   	ret    

c0008f0a <UnixFile::UnixFile(int)>:
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 28             	sub    esp,0x28
c0008f0e:	ba 3c f0 01 c0       	mov    edx,0xc001f03c
c0008f13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f17:	89 10                	mov    DWORD PTR [eax],edx
c0008f19:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f21:	0f 8f 8c 01 00 00    	jg     c00090b3 <UnixFile::UnixFile(int)+0x1a9>
c0008f27:	a1 a0 10 02 c0       	mov    eax,ds:0xc00210a0
c0008f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f2f:	89 15 a0 10 02 c0    	mov    DWORD PTR ds:0xc00210a0,edx
c0008f35:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f39:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f3c:	83 ec 08             	sub    esp,0x8
c0008f3f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f43:	68 98 3f 02 c0       	push   0xc0023f98
c0008f48:	e8 cb 4b 01 00       	call   c001db18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f55:	83 f0 01             	xor    eax,0x1
c0008f58:	84 c0                	test   al,al
c0008f5a:	0f 84 54 01 00 00    	je     c00090b4 <UnixFile::UnixFile(int)+0x1aa>
c0008f60:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f67:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f6f:	83 ec 0c             	sub    esp,0xc
c0008f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f76:	e8 fa e8 ff ff       	call   c0007875 <malloc>
c0008f7b:	83 c4 10             	add    esp,0x10
c0008f7e:	89 c3                	mov    ebx,eax
c0008f80:	83 ec 08             	sub    esp,0x8
c0008f83:	68 03 ff ff 0f       	push   0xfffff03
c0008f88:	53                   	push   ebx
c0008f89:	e8 2c 01 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008f8e:	83 c4 10             	add    esp,0x10
c0008f91:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f97:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f9f:	83 ec 0c             	sub    esp,0xc
c0008fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fa6:	e8 ca e8 ff ff       	call   c0007875 <malloc>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	89 c3                	mov    ebx,eax
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	68 01 ff ff 0f       	push   0xfffff01
c0008fb8:	53                   	push   ebx
c0008fb9:	e8 fc 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fc7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fcf:	83 ec 0c             	sub    esp,0xc
c0008fd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fd6:	e8 9a e8 ff ff       	call   c0007875 <malloc>
c0008fdb:	83 c4 10             	add    esp,0x10
c0008fde:	89 c3                	mov    ebx,eax
c0008fe0:	83 ec 08             	sub    esp,0x8
c0008fe3:	68 00 ff ff 0f       	push   0xfffff00
c0008fe8:	53                   	push   ebx
c0008fe9:	e8 cc 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0008fee:	83 c4 10             	add    esp,0x10
c0008ff1:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008ff7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008fff:	83 ec 0c             	sub    esp,0xc
c0009002:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009006:	e8 6a e8 ff ff       	call   c0007875 <malloc>
c000900b:	83 c4 10             	add    esp,0x10
c000900e:	89 c3                	mov    ebx,eax
c0009010:	83 ec 08             	sub    esp,0x8
c0009013:	68 02 ff ff 0f       	push   0xfffff02
c0009018:	53                   	push   ebx
c0009019:	e8 9c 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c000901e:	83 c4 10             	add    esp,0x10
c0009021:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009027:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000902f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009034:	7f 7e                	jg     c00090b4 <UnixFile::UnixFile(int)+0x1aa>
c0009036:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000903e:	83 ec 0c             	sub    esp,0xc
c0009041:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009045:	e8 2b e8 ff ff       	call   c0007875 <malloc>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	89 c3                	mov    ebx,eax
c000904f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009053:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009058:	83 ec 08             	sub    esp,0x8
c000905b:	50                   	push   eax
c000905c:	53                   	push   ebx
c000905d:	e8 58 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009069:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009070:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009078:	83 ec 0c             	sub    esp,0xc
c000907b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000907f:	e8 f1 e7 ff ff       	call   c0007875 <malloc>
c0009084:	83 c4 10             	add    esp,0x10
c0009087:	89 c3                	mov    ebx,eax
c0009089:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000908d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009092:	83 ec 08             	sub    esp,0x8
c0009095:	50                   	push   eax
c0009096:	53                   	push   ebx
c0009097:	e8 1e 00 00 00       	call   c00090ba <ReservedFilename::ReservedFilename(int)>
c000909c:	83 c4 10             	add    esp,0x10
c000909f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a3:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090ae:	e9 7c ff ff ff       	jmp    c000902f <UnixFile::UnixFile(int)+0x125>
c00090b3:	90                   	nop
c00090b4:	83 c4 28             	add    esp,0x28
c00090b7:	5b                   	pop    ebx
c00090b8:	c3                   	ret    
c00090b9:	90                   	nop

c00090ba <ReservedFilename::ReservedFilename(int)>:
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c1:	83 ec 08             	sub    esp,0x8
c00090c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c8:	50                   	push   eax
c00090c9:	e8 3c fe ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	ba 58 f0 01 c0       	mov    edx,0xc001f058
c00090d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090da:	89 10                	mov    DWORD PTR [eax],edx
c00090dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090e7:	90                   	nop
c00090e8:	83 c4 0c             	add    esp,0xc
c00090eb:	c3                   	ret    

c00090ec <UnixFile::~UnixFile()>:
c00090ec:	83 ec 1c             	sub    esp,0x1c
c00090ef:	ba 3c f0 01 c0       	mov    edx,0xc001f03c
c00090f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009101:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009106:	7f 73                	jg     c000917b <UnixFile::~UnixFile()+0x8f>
c0009108:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	68 98 3f 02 c0       	push   0xc0023f98
c0009118:	e8 cf 4a 01 00       	call   c001dbec <LinkedList<UnixFile>::getFirstElement()>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009124:	83 ec 0c             	sub    esp,0xc
c0009127:	68 98 3f 02 c0       	push   0xc0023f98
c000912c:	e8 c3 4a 01 00       	call   c001dbf4 <LinkedList<UnixFile>::removeFirst()>
c0009131:	83 c4 10             	add    esp,0x10
c0009134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009138:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000913c:	74 40                	je     c000917e <UnixFile::~UnixFile()+0x92>
c000913e:	83 ec 08             	sub    esp,0x8
c0009141:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009145:	68 98 3f 02 c0       	push   0xc0023f98
c000914a:	e8 c9 49 01 00       	call   c001db18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000914f:	83 c4 10             	add    esp,0x10
c0009152:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009156:	8d 50 01             	lea    edx,[eax+0x1]
c0009159:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000915d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009162:	0f 94 c0             	sete   al
c0009165:	84 c0                	test   al,al
c0009167:	74 a7                	je     c0009110 <UnixFile::~UnixFile()+0x24>
c0009169:	83 ec 0c             	sub    esp,0xc
c000916c:	68 14 f0 01 c0       	push   0xc001f014
c0009171:	e8 95 71 00 00       	call   c001030b <KePanic(char const*)>
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	eb 95                	jmp    c0009110 <UnixFile::~UnixFile()+0x24>
c000917b:	90                   	nop
c000917c:	eb 01                	jmp    c000917f <UnixFile::~UnixFile()+0x93>
c000917e:	90                   	nop
c000917f:	90                   	nop
c0009180:	83 c4 1c             	add    esp,0x1c
c0009183:	c3                   	ret    

c0009184 <UnixFile::~UnixFile()>:
c0009184:	83 ec 0c             	sub    esp,0xc
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918e:	e8 59 ff ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c0009193:	83 c4 10             	add    esp,0x10
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	6a 0c                	push   0xc
c000919b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919f:	e8 70 13 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c00091a4:	83 c4 10             	add    esp,0x10
c00091a7:	83 c4 0c             	add    esp,0xc
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <ReservedFilename::~ReservedFilename()>:
c00091ac:	83 ec 0c             	sub    esp,0xc
c00091af:	ba 58 f0 01 c0       	mov    edx,0xc001f058
c00091b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091b8:	89 10                	mov    DWORD PTR [eax],edx
c00091ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091be:	83 ec 0c             	sub    esp,0xc
c00091c1:	50                   	push   eax
c00091c2:	e8 25 ff ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	90                   	nop
c00091cb:	83 c4 0c             	add    esp,0xc
c00091ce:	c3                   	ret    
c00091cf:	90                   	nop

c00091d0 <ReservedFilename::~ReservedFilename()>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 ec 0c             	sub    esp,0xc
c00091d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091da:	e8 cd ff ff ff       	call   c00091ac <ReservedFilename::~ReservedFilename()>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	83 ec 08             	sub    esp,0x8
c00091e5:	6a 0c                	push   0xc
c00091e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091eb:	e8 24 13 00 00       	call   c000a514 <operator delete(void*, unsigned long)>
c00091f0:	83 c4 10             	add    esp,0x10
c00091f3:	83 c4 0c             	add    esp,0xc
c00091f6:	c3                   	ret    

c00091f7 <getFromFileDescriptor(int)>:
c00091f7:	53                   	push   ebx
c00091f8:	83 ec 08             	sub    esp,0x8
c00091fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ff:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009205:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000920b:	7f 2c                	jg     c0009239 <getFromFileDescriptor(int)+0x42>
c000920d:	83 ec 0c             	sub    esp,0xc
c0009210:	68 98 3f 02 c0       	push   0xc0023f98
c0009215:	e8 d2 49 01 00       	call   c001dbec <LinkedList<UnixFile>::getFirstElement()>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	85 c0                	test   eax,eax
c000921f:	75 04                	jne    c0009225 <getFromFileDescriptor(int)+0x2e>
c0009221:	31 c0                	xor    eax,eax
c0009223:	eb 6e                	jmp    c0009293 <getFromFileDescriptor(int)+0x9c>
c0009225:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009228:	74 69                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c000922a:	52                   	push   edx
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	68 98 3f 02 c0       	push   0xc0023f98
c0009232:	e8 5f 4a 01 00       	call   c001dc96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009237:	eb e1                	jmp    c000921a <getFromFileDescriptor(int)+0x23>
c0009239:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000923e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009244:	74 4d                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009246:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000924b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009251:	74 40                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009253:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009258:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000925e:	74 33                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c0009260:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009265:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000926b:	74 26                	je     c0009293 <getFromFileDescriptor(int)+0x9c>
c000926d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009273:	83 f8 08             	cmp    eax,0x8
c0009276:	77 09                	ja     c0009281 <getFromFileDescriptor(int)+0x8a>
c0009278:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000927f:	eb 12                	jmp    c0009293 <getFromFileDescriptor(int)+0x9c>
c0009281:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009287:	83 fb 08             	cmp    ebx,0x8
c000928a:	77 95                	ja     c0009221 <getFromFileDescriptor(int)+0x2a>
c000928c:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009293:	83 c4 08             	add    esp,0x8
c0009296:	5b                   	pop    ebx
c0009297:	c3                   	ret    

c0009298 <__static_initialization_and_destruction_0(int, int)>:
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092a0:	75 34                	jne    c00092d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092aa:	75 2a                	jne    c00092d6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092ac:	83 ec 0c             	sub    esp,0xc
c00092af:	68 98 3f 02 c0       	push   0xc0023f98
c00092b4:	e8 1d 48 01 00       	call   c001dad6 <LinkedList<UnixFile>::LinkedList()>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	83 ec 04             	sub    esp,0x4
c00092bf:	68 1c 10 02 c0       	push   0xc002101c
c00092c4:	68 98 3f 02 c0       	push   0xc0023f98
c00092c9:	68 d4 da 01 c0       	push   0xc001dad4
c00092ce:	e8 f1 11 00 00       	call   c000a4c4 <__cxa_atexit>
c00092d3:	83 c4 10             	add    esp,0x10
c00092d6:	90                   	nop
c00092d7:	83 c4 0c             	add    esp,0xc
c00092da:	c3                   	ret    

c00092db <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092db:	83 ec 0c             	sub    esp,0xc
c00092de:	83 ec 08             	sub    esp,0x8
c00092e1:	68 ff ff 00 00       	push   0xffff
c00092e6:	6a 01                	push   0x1
c00092e8:	e8 ab ff ff ff       	call   c0009298 <__static_initialization_and_destruction_0(int, int)>
c00092ed:	83 c4 10             	add    esp,0x10
c00092f0:	83 c4 0c             	add    esp,0xc
c00092f3:	c3                   	ret    

c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f4:	53                   	push   ebx
c00092f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092fd:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009303:	89 c8                	mov    eax,ecx
c0009305:	d1 e8                	shr    eax,1
c0009307:	03 05 a8 10 02 c0    	add    eax,DWORD PTR ds:0xc00210a8
c000930d:	83 e1 01             	and    ecx,0x1
c0009310:	8a 10                	mov    dl,BYTE PTR [eax]
c0009312:	75 09                	jne    c000931d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009314:	83 e2 f0             	and    edx,0xfffffff0
c0009317:	09 da                	or     edx,ebx
c0009319:	88 10                	mov    BYTE PTR [eax],dl
c000931b:	5b                   	pop    ebx
c000931c:	c3                   	ret    
c000931d:	c1 e3 04             	shl    ebx,0x4
c0009320:	83 e2 0f             	and    edx,0xf
c0009323:	09 da                	or     edx,ebx
c0009325:	88 10                	mov    BYTE PTR [eax],dl
c0009327:	5b                   	pop    ebx
c0009328:	c3                   	ret    

c0009329 <Virt::getPageState(unsigned long)>:
c0009329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932d:	8b 0d a8 10 02 c0    	mov    ecx,DWORD PTR ds:0xc00210a8
c0009333:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009339:	89 d0                	mov    eax,edx
c000933b:	d1 e8                	shr    eax,1
c000933d:	83 e2 01             	and    edx,0x1
c0009340:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009343:	75 04                	jne    c0009349 <Virt::getPageState(unsigned long)+0x20>
c0009345:	83 e0 0f             	and    eax,0xf
c0009348:	c3                   	ret    
c0009349:	c0 e8 04             	shr    al,0x4
c000934c:	c3                   	ret    

c000934d <Virt::allocateKernelVirtualPages(int)>:
c000934d:	55                   	push   ebp
c000934e:	31 ed                	xor    ebp,ebp
c0009350:	57                   	push   edi
c0009351:	56                   	push   esi
c0009352:	53                   	push   ebx
c0009353:	31 db                	xor    ebx,ebx
c0009355:	83 ec 1c             	sub    esp,0x1c
c0009358:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000935c:	8b 3d a4 10 02 c0    	mov    edi,DWORD PTR ds:0xc00210a4
c0009362:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009367:	57                   	push   edi
c0009368:	e8 bc ff ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c000936d:	5a                   	pop    edx
c000936e:	84 c0                	test   al,al
c0009370:	75 3a                	jne    c00093ac <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009372:	85 db                	test   ebx,ebx
c0009374:	75 02                	jne    c0009378 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009376:	89 fd                	mov    ebp,edi
c0009378:	43                   	inc    ebx
c0009379:	39 f3                	cmp    ebx,esi
c000937b:	74 5a                	je     c00093d7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000937d:	47                   	inc    edi
c000937e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009384:	76 31                	jbe    c00093b7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009386:	c7 05 a4 10 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00210a4,0xc8000
c0009390:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009395:	75 28                	jne    c00093bf <Virt::allocateKernelVirtualPages(int)+0x72>
c0009397:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000939c:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093a1:	57                   	push   edi
c00093a2:	e8 82 ff ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c00093a7:	5a                   	pop    edx
c00093a8:	84 c0                	test   al,al
c00093aa:	74 c6                	je     c0009372 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093ac:	31 db                	xor    ebx,ebx
c00093ae:	47                   	inc    edi
c00093af:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b5:	77 cf                	ja     c0009386 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093b7:	89 3d a4 10 02 c0    	mov    DWORD PTR ds:0xc00210a4,edi
c00093bd:	eb a8                	jmp    c0009367 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093bf:	83 ec 0c             	sub    esp,0xc
c00093c2:	68 6c f0 01 c0       	push   0xc001f06c
c00093c7:	e8 3f 6f 00 00       	call   c001030b <KePanic(char const*)>
c00093cc:	8b 3d a4 10 02 c0    	mov    edi,DWORD PTR ds:0xc00210a4
c00093d2:	83 c4 10             	add    esp,0x10
c00093d5:	eb 90                	jmp    c0009367 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093d7:	89 2d a4 10 02 c0    	mov    DWORD PTR ds:0xc00210a4,ebp
c00093dd:	4b                   	dec    ebx
c00093de:	74 5f                	je     c000943f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093e0:	85 f6                	test   esi,esi
c00093e2:	74 3d                	je     c0009421 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e4:	89 e8                	mov    eax,ebp
c00093e6:	31 db                	xor    ebx,ebx
c00093e8:	8d 7e ff             	lea    edi,[esi-0x1]
c00093eb:	eb 14                	jmp    c0009401 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093ed:	6a 01                	push   0x1
c00093ef:	43                   	inc    ebx
c00093f0:	50                   	push   eax
c00093f1:	e8 fe fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093f6:	58                   	pop    eax
c00093f7:	39 f3                	cmp    ebx,esi
c00093f9:	5a                   	pop    edx
c00093fa:	74 25                	je     c0009421 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093fc:	a1 a4 10 02 c0       	mov    eax,ds:0xc00210a4
c0009401:	8d 50 01             	lea    edx,[eax+0x1]
c0009404:	85 db                	test   ebx,ebx
c0009406:	89 15 a4 10 02 c0    	mov    DWORD PTR ds:0xc00210a4,edx
c000940c:	74 20                	je     c000942e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000940e:	39 df                	cmp    edi,ebx
c0009410:	75 db                	jne    c00093ed <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009412:	6a 03                	push   0x3
c0009414:	43                   	inc    ebx
c0009415:	50                   	push   eax
c0009416:	e8 d9 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941b:	59                   	pop    ecx
c000941c:	39 f3                	cmp    ebx,esi
c000941e:	58                   	pop    eax
c000941f:	75 db                	jne    c00093fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009421:	83 c4 1c             	add    esp,0x1c
c0009424:	89 e8                	mov    eax,ebp
c0009426:	5b                   	pop    ebx
c0009427:	c1 e0 0c             	shl    eax,0xc
c000942a:	5e                   	pop    esi
c000942b:	5f                   	pop    edi
c000942c:	5d                   	pop    ebp
c000942d:	c3                   	ret    
c000942e:	6a 02                	push   0x2
c0009430:	bb 01 00 00 00       	mov    ebx,0x1
c0009435:	50                   	push   eax
c0009436:	e8 b9 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943b:	58                   	pop    eax
c000943c:	5a                   	pop    edx
c000943d:	eb bd                	jmp    c00093fc <Virt::allocateKernelVirtualPages(int)+0xaf>
c000943f:	6a 04                	push   0x4
c0009441:	8d 45 01             	lea    eax,[ebp+0x1]
c0009444:	55                   	push   ebp
c0009445:	a3 a4 10 02 c0       	mov    ds:0xc00210a4,eax
c000944a:	e8 a5 fe ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000944f:	59                   	pop    ecx
c0009450:	89 e8                	mov    eax,ebp
c0009452:	5b                   	pop    ebx
c0009453:	c1 e0 0c             	shl    eax,0xc
c0009456:	83 c4 1c             	add    esp,0x1c
c0009459:	5b                   	pop    ebx
c000945a:	5e                   	pop    esi
c000945b:	5f                   	pop    edi
c000945c:	5d                   	pop    ebp
c000945d:	c3                   	ret    

c000945e <Virt::freeSwapfilePage(unsigned long)>:
c000945e:	53                   	push   ebx
c000945f:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009465:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009469:	b8 01 00 00 00       	mov    eax,0x1
c000946e:	89 cb                	mov    ebx,ecx
c0009470:	d3 e0                	shl    eax,cl
c0009472:	c1 eb 05             	shr    ebx,0x5
c0009475:	f7 d0                	not    eax
c0009477:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <Virt::swapIDToSector(unsigned long)>:
c000947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009480:	0f af 05 ac 10 02 c0 	imul   eax,DWORD PTR ds:0xc00210ac
c0009487:	03 05 b4 10 02 c0    	add    eax,DWORD PTR ds:0xc00210b4
c000948d:	c3                   	ret    

c000948e <Virt::allocateSwapfilePage()>:
c000948e:	55                   	push   ebp
c000948f:	31 d2                	xor    edx,edx
c0009491:	57                   	push   edi
c0009492:	56                   	push   esi
c0009493:	53                   	push   ebx
c0009494:	83 ec 0c             	sub    esp,0xc
c0009497:	8b 0d ac 10 02 c0    	mov    ecx,DWORD PTR ds:0xc00210ac
c000949d:	a1 b0 10 02 c0       	mov    eax,ds:0xc00210b0
c00094a2:	f7 f1                	div    ecx
c00094a4:	39 0d b0 10 02 c0    	cmp    DWORD PTR ds:0xc00210b0,ecx
c00094aa:	72 2d                	jb     c00094d9 <Virt::allocateSwapfilePage()+0x4b>
c00094ac:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094b2:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b4:	f6 c2 01             	test   dl,0x1
c00094b7:	74 3c                	je     c00094f5 <Virt::allocateSwapfilePage()+0x67>
c00094b9:	31 c9                	xor    ecx,ecx
c00094bb:	bf 01 00 00 00       	mov    edi,0x1
c00094c0:	eb 12                	jmp    c00094d4 <Virt::allocateSwapfilePage()+0x46>
c00094c2:	89 fd                	mov    ebp,edi
c00094c4:	89 ca                	mov    edx,ecx
c00094c6:	d3 e5                	shl    ebp,cl
c00094c8:	c1 ea 05             	shr    edx,0x5
c00094cb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094d0:	85 ea                	test   edx,ebp
c00094d2:	74 2a                	je     c00094fe <Virt::allocateSwapfilePage()+0x70>
c00094d4:	41                   	inc    ecx
c00094d5:	39 c8                	cmp    eax,ecx
c00094d7:	77 e9                	ja     c00094c2 <Virt::allocateSwapfilePage()+0x34>
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	68 d3 f1 01 c0       	push   0xc001f1d3
c00094e1:	e8 25 6e 00 00       	call   c001030b <KePanic(char const*)>
c00094e6:	83 c4 10             	add    esp,0x10
c00094e9:	31 c9                	xor    ecx,ecx
c00094eb:	83 c4 0c             	add    esp,0xc
c00094ee:	89 c8                	mov    eax,ecx
c00094f0:	5b                   	pop    ebx
c00094f1:	5e                   	pop    esi
c00094f2:	5f                   	pop    edi
c00094f3:	5d                   	pop    ebp
c00094f4:	c3                   	ret    
c00094f5:	89 f3                	mov    ebx,esi
c00094f7:	bd 01 00 00 00       	mov    ebp,0x1
c00094fc:	31 c9                	xor    ecx,ecx
c00094fe:	09 ea                	or     edx,ebp
c0009500:	89 c8                	mov    eax,ecx
c0009502:	89 13                	mov    DWORD PTR [ebx],edx
c0009504:	83 c4 0c             	add    esp,0xc
c0009507:	5b                   	pop    ebx
c0009508:	5e                   	pop    esi
c0009509:	5f                   	pop    edi
c000950a:	5d                   	pop    ebp
c000950b:	c3                   	ret    

c000950c <Virt::virtualMemorySetup()>:
c000950c:	53                   	push   ebx
c000950d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009512:	6a 0f                	push   0xf
c0009514:	53                   	push   ebx
c0009515:	43                   	inc    ebx
c0009516:	e8 d9 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000951b:	58                   	pop    eax
c000951c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009522:	5a                   	pop    edx
c0009523:	75 ed                	jne    c0009512 <Virt::virtualMemorySetup()+0x6>
c0009525:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000952a:	6a 00                	push   0x0
c000952c:	53                   	push   ebx
c000952d:	43                   	inc    ebx
c000952e:	e8 c1 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009533:	59                   	pop    ecx
c0009534:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000953a:	58                   	pop    eax
c000953b:	75 ed                	jne    c000952a <Virt::virtualMemorySetup()+0x1e>
c000953d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009542:	6a 0f                	push   0xf
c0009544:	53                   	push   ebx
c0009545:	43                   	inc    ebx
c0009546:	e8 a9 fd ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954b:	58                   	pop    eax
c000954c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009552:	5a                   	pop    edx
c0009553:	75 ed                	jne    c0009542 <Virt::virtualMemorySetup()+0x36>
c0009555:	5b                   	pop    ebx
c0009556:	c3                   	ret    

c0009557 <Virt::setupPageSwapping(int)>:
c0009557:	53                   	push   ebx
c0009558:	83 ec 0c             	sub    esp,0xc
c000955b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000955f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009564:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000956a:	8b 10                	mov    edx,DWORD PTR [eax]
c000956c:	53                   	push   ebx
c000956d:	c1 e3 0b             	shl    ebx,0xb
c0009570:	68 ea f1 01 c0       	push   0xc001f1ea
c0009575:	50                   	push   eax
c0009576:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009579:	89 1d b0 10 02 c0    	mov    DWORD PTR ds:0xc00210b0,ebx
c000957f:	c6 05 b8 10 02 c0 43 	mov    BYTE PTR ds:0xc00210b8,0x43
c0009586:	c1 eb 08             	shr    ebx,0x8
c0009589:	a3 b4 10 02 c0       	mov    ds:0xc00210b4,eax
c000958e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009591:	c7 05 ac 10 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00210ac,0x8
c000959b:	e8 d5 e2 ff ff       	call   c0007875 <malloc>
c00095a0:	83 c4 0c             	add    esp,0xc
c00095a3:	89 c1                	mov    ecx,eax
c00095a5:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095aa:	31 d2                	xor    edx,edx
c00095ac:	a1 b0 10 02 c0       	mov    eax,ds:0xc00210b0
c00095b1:	f7 35 ac 10 02 c0    	div    DWORD PTR ds:0xc00210ac
c00095b7:	c1 e8 05             	shr    eax,0x5
c00095ba:	50                   	push   eax
c00095bb:	6a 00                	push   0x0
c00095bd:	51                   	push   ecx
c00095be:	e8 0d 6f ff ff       	call   c00004d0 <memset>
c00095c3:	83 c4 18             	add    esp,0x18
c00095c6:	5b                   	pop    ebx
c00095c7:	c3                   	ret    

c00095c8 <VAS::VAS(VAS*)>:
c00095c8:	83 ec 0c             	sub    esp,0xc
c00095cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095cf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095e1:	83 ec 0c             	sub    esp,0xc
c00095e4:	68 8c f0 01 c0       	push   0xc001f08c
c00095e9:	e8 1d 6d 00 00       	call   c001030b <KePanic(char const*)>
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	90                   	nop
c00095f2:	83 c4 0c             	add    esp,0xc
c00095f5:	c3                   	ret    

c00095f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095fa:	89 c2                	mov    edx,eax
c00095fc:	c1 e8 0a             	shr    eax,0xa
c00095ff:	c1 ea 16             	shr    edx,0x16
c0009602:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009607:	19 c9                	sbb    ecx,ecx
c0009609:	c1 e2 0c             	shl    edx,0xc
c000960c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009612:	25 fc 0f 00 00       	and    eax,0xffc
c0009617:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000961e:	01 d0                	add    eax,edx
c0009620:	c3                   	ret    
c0009621:	90                   	nop

c0009622 <VAS::getPageTableEntry(unsigned long)>:
c0009622:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009626:	89 ca                	mov    edx,ecx
c0009628:	c1 e9 0a             	shr    ecx,0xa
c000962b:	c1 ea 16             	shr    edx,0x16
c000962e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009634:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000963a:	c1 e0 0c             	shl    eax,0xc
c000963d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009640:	c3                   	ret    

c0009641 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009641:	57                   	push   edi
c0009642:	56                   	push   esi
c0009643:	be 01 00 00 00       	mov    esi,0x1
c0009648:	53                   	push   ebx
c0009649:	83 ec 10             	sub    esp,0x10
c000964c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009650:	c1 eb 0c             	shr    ebx,0xc
c0009653:	eb 3f                	jmp    c0009694 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009655:	83 ec 08             	sub    esp,0x8
c0009658:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000965d:	57                   	push   edi
c000965e:	50                   	push   eax
c000965f:	e8 be ff ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0009664:	83 c4 10             	add    esp,0x10
c0009667:	8b 00                	mov    eax,DWORD PTR [eax]
c0009669:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000966d:	f6 c4 04             	test   ah,0x4
c0009670:	75 60                	jne    c00096d2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009672:	80 fa 04             	cmp    dl,0x4
c0009675:	74 79                	je     c00096f0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009677:	80 fa 02             	cmp    dl,0x2
c000967a:	0f 84 89 00 00 00    	je     c0009709 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009680:	80 fa 03             	cmp    dl,0x3
c0009683:	0f 84 ae 00 00 00    	je     c0009737 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009689:	fe ca                	dec    dl
c000968b:	0f 84 93 00 00 00    	je     c0009724 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009691:	43                   	inc    ebx
c0009692:	31 f6                	xor    esi,esi
c0009694:	53                   	push   ebx
c0009695:	89 df                	mov    edi,ebx
c0009697:	e8 8d fc ff ff       	call   c0009329 <Virt::getPageState(unsigned long)>
c000969c:	c1 e7 0c             	shl    edi,0xc
c000969f:	5a                   	pop    edx
c00096a0:	84 c0                	test   al,al
c00096a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096a6:	75 ad                	jne    c0009655 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096a8:	83 ec 0c             	sub    esp,0xc
c00096ab:	68 01 f2 01 c0       	push   0xc001f201
c00096b0:	e8 56 6c 00 00       	call   c001030b <KePanic(char const*)>
c00096b5:	5a                   	pop    edx
c00096b6:	59                   	pop    ecx
c00096b7:	57                   	push   edi
c00096b8:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096be:	57                   	push   edi
c00096bf:	e8 5e ff ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00096c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096cd:	f6 c4 04             	test   ah,0x4
c00096d0:	74 bf                	je     c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096d6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 0b e4 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096eb:	80 fa 04             	cmp    dl,0x4
c00096ee:	75 87                	jne    c0009677 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096f0:	89 f0                	mov    eax,esi
c00096f2:	84 c0                	test   al,al
c00096f4:	75 47                	jne    c000973d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096f6:	c7 44 24 20 b0 f0 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f0b0
c00096fe:	83 c4 10             	add    esp,0x10
c0009701:	5b                   	pop    ebx
c0009702:	5e                   	pop    esi
c0009703:	5f                   	pop    edi
c0009704:	e9 02 6c 00 00       	jmp    c001030b <KePanic(char const*)>
c0009709:	89 f0                	mov    eax,esi
c000970b:	84 c0                	test   al,al
c000970d:	75 15                	jne    c0009724 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000970f:	83 ec 0c             	sub    esp,0xc
c0009712:	68 1d f2 01 c0       	push   0xc001f21d
c0009717:	e8 ef 6b 00 00       	call   c001030b <KePanic(char const*)>
c000971c:	83 c4 10             	add    esp,0x10
c000971f:	e9 6d ff ff ff       	jmp    c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009724:	83 ec 08             	sub    esp,0x8
c0009727:	6a 00                	push   0x0
c0009729:	53                   	push   ebx
c000972a:	e8 c5 fb ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972f:	83 c4 10             	add    esp,0x10
c0009732:	e9 5a ff ff ff       	jmp    c0009691 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009737:	89 f0                	mov    eax,esi
c0009739:	84 c0                	test   al,al
c000973b:	75 15                	jne    c0009752 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000973d:	83 ec 08             	sub    esp,0x8
c0009740:	6a 00                	push   0x0
c0009742:	53                   	push   ebx
c0009743:	e8 ac fb ff ff       	call   c00092f4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009748:	83 c4 10             	add    esp,0x10
c000974b:	83 c4 10             	add    esp,0x10
c000974e:	5b                   	pop    ebx
c000974f:	5e                   	pop    esi
c0009750:	5f                   	pop    edi
c0009751:	c3                   	ret    
c0009752:	c7 44 24 20 39 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f239
c000975a:	83 c4 10             	add    esp,0x10
c000975d:	5b                   	pop    ebx
c000975e:	5e                   	pop    esi
c000975f:	5f                   	pop    edi
c0009760:	e9 a6 6b 00 00       	jmp    c001030b <KePanic(char const*)>
c0009765:	90                   	nop

c0009766 <VAS::freeAllocatedPages(unsigned long)>:
c0009766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000976e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009772:	74 09                	je     c000977d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009774:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009778:	e9 c4 fe ff ff       	jmp    c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c000977d:	c7 44 24 04 d4 f0 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f0d4
c0009785:	e9 80 0e 00 00       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>

c000978a <VAS::virtualToPhysical(unsigned long)>:
c000978a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000978e:	50                   	push   eax
c000978f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009793:	52                   	push   edx
c0009794:	e8 89 fe ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0009799:	59                   	pop    ecx
c000979a:	8b 00                	mov    eax,DWORD PTR [eax]
c000979c:	5a                   	pop    edx
c000979d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097a2:	c3                   	ret    
c00097a3:	90                   	nop

c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a4:	55                   	push   ebp
c00097a5:	57                   	push   edi
c00097a6:	56                   	push   esi
c00097a7:	53                   	push   ebx
c00097a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097ac:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097b8:	85 db                	test   ebx,ebx
c00097ba:	7e 22                	jle    c00097de <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097bc:	c1 e3 0c             	shl    ebx,0xc
c00097bf:	01 f3                	add    ebx,esi
c00097c1:	56                   	push   esi
c00097c2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097c8:	55                   	push   ebp
c00097c9:	e8 54 fe ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c00097ce:	5a                   	pop    edx
c00097cf:	59                   	pop    ecx
c00097d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097d2:	21 f9                	and    ecx,edi
c00097d4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097d8:	39 f3                	cmp    ebx,esi
c00097da:	89 08                	mov    DWORD PTR [eax],ecx
c00097dc:	75 e3                	jne    c00097c1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097de:	5b                   	pop    ebx
c00097df:	5e                   	pop    esi
c00097e0:	5f                   	pop    edi
c00097e1:	5d                   	pop    ebp
c00097e2:	c3                   	ret    
c00097e3:	90                   	nop

c00097e4 <VAS::VAS()>:
c00097e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fe:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0009803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009807:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000980b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009812:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009816:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000981d:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009822:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009827:	29 c2                	sub    edx,eax
c0009829:	89 d0                	mov    eax,edx
c000982b:	05 ff 0f 00 00       	add    eax,0xfff
c0009830:	c1 e8 0c             	shr    eax,0xc
c0009833:	89 c2                	mov    edx,eax
c0009835:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000983a:	6a 04                	push   0x4
c000983c:	6a ff                	push   0xffffffff
c000983e:	52                   	push   edx
c000983f:	50                   	push   eax
c0009840:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009844:	e8 5b ff ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c0009849:	83 c4 14             	add    esp,0x14
c000984c:	90                   	nop
c000984d:	c3                   	ret    

c000984e <VAS::setToWriteCombining(unsigned long, int)>:
c000984e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009859:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009860:	75 01                	jne    c0009863 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009862:	c3                   	ret    
c0009863:	68 80 00 00 00       	push   0x80
c0009868:	6a ff                	push   0xffffffff
c000986a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000986e:	50                   	push   eax
c000986f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009873:	52                   	push   edx
c0009874:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009878:	51                   	push   ecx
c0009879:	e8 26 ff ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000987e:	83 c4 14             	add    esp,0x14
c0009881:	c3                   	ret    

c0009882 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009882:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000988b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000988e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009892:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009895:	19 c0                	sbb    eax,eax
c0009897:	83 ca 03             	or     edx,0x3
c000989a:	83 e0 fc             	and    eax,0xfffffffc
c000989d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a4:	0f 20 d8             	mov    eax,cr3
c00098a7:	0f 22 d8             	mov    cr3,eax
c00098aa:	c3                   	ret    
c00098ab:	90                   	nop

c00098ac <VAS::~VAS()>:
c00098ac:	83 ec 2c             	sub    esp,0x2c
c00098af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098b7:	fa                   	cli    
c00098b8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098bd:	40                   	inc    eax
c00098be:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098c3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098cd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098d7:	6a 01                	push   0x1
c00098d9:	50                   	push   eax
c00098da:	e8 a3 ff ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c00098df:	83 c4 0c             	add    esp,0xc
c00098e2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098ea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098f2:	0f 8f d4 00 00 00    	jg     c00099cc <VAS::~VAS()+0x120>
c00098f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009903:	c1 e2 02             	shl    edx,0x2
c0009906:	01 d0                	add    eax,edx
c0009908:	8b 00                	mov    eax,DWORD PTR [eax]
c000990a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000990e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009912:	83 e0 01             	and    eax,0x1
c0009915:	0f 84 a8 00 00 00    	je     c00099c3 <VAS::~VAS()+0x117>
c000991b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009923:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000992b:	7f 72                	jg     c000999f <VAS::~VAS()+0xf3>
c000992d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009931:	c1 e0 0a             	shl    eax,0xa
c0009934:	89 c2                	mov    edx,eax
c0009936:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000993a:	01 d0                	add    eax,edx
c000993c:	c1 e0 0c             	shl    eax,0xc
c000993f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009943:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009948:	8b 00                	mov    eax,DWORD PTR [eax]
c000994a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000994d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009953:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009957:	6a 01                	push   0x1
c0009959:	50                   	push   eax
c000995a:	e8 97 fc ff ff       	call   c00095f6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000995f:	83 c4 0c             	add    esp,0xc
c0009962:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996a:	8b 00                	mov    eax,DWORD PTR [eax]
c000996c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	25 01 04 00 00       	and    eax,0x401
c0009979:	3d 01 04 00 00       	cmp    eax,0x401
c000997e:	75 19                	jne    c0009999 <VAS::~VAS()+0xed>
c0009980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009984:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009989:	83 ec 0c             	sub    esp,0xc
c000998c:	50                   	push   eax
c000998d:	e8 5d e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0009992:	83 c4 10             	add    esp,0x10
c0009995:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009999:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000999d:	eb 84                	jmp    c0009923 <VAS::~VAS()+0x77>
c000999f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a3:	25 00 04 00 00       	and    eax,0x400
c00099a8:	74 19                	je     c00099c3 <VAS::~VAS()+0x117>
c00099aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b3:	83 ec 0c             	sub    esp,0xc
c00099b6:	50                   	push   eax
c00099b7:	e8 33 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099bc:	83 c4 10             	add    esp,0x10
c00099bf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099c3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099c7:	e9 1e ff ff ff       	jmp    c00098ea <VAS::~VAS()+0x3e>
c00099cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	50                   	push   eax
c00099d7:	e8 65 fc ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099e6:	83 ec 0c             	sub    esp,0xc
c00099e9:	50                   	push   eax
c00099ea:	e8 00 e1 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c00099ef:	83 c4 10             	add    esp,0x10
c00099f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099f6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099fb:	48                   	dec    eax
c00099fc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a01:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a06:	85 c0                	test   eax,eax
c0009a08:	75 01                	jne    c0009a0b <VAS::~VAS()+0x15f>
c0009a0a:	fb                   	sti    
c0009a0b:	90                   	nop
c0009a0c:	83 c4 2c             	add    esp,0x2c
c0009a0f:	c3                   	ret    

c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a10:	55                   	push   ebp
c0009a11:	57                   	push   edi
c0009a12:	56                   	push   esi
c0009a13:	53                   	push   ebx
c0009a14:	83 ec 1c             	sub    esp,0x1c
c0009a17:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a1f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a25:	77 0b                	ja     c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a27:	0f 20 d8             	mov    eax,cr3
c0009a2a:	0f 20 d8             	mov    eax,cr3
c0009a2d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a30:	75 47                	jne    c0009a79 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a32:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a36:	09 d8                	or     eax,ebx
c0009a38:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a3d:	75 57                	jne    c0009a96 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a3f:	89 de                	mov    esi,ebx
c0009a41:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a44:	c1 ee 16             	shr    esi,0x16
c0009a47:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a4e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a52:	74 54                	je     c0009aa8 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a58:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a5e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a62:	c1 e6 0c             	shl    esi,0xc
c0009a65:	c1 eb 0a             	shr    ebx,0xa
c0009a68:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a6e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a71:	83 c4 1c             	add    esp,0x1c
c0009a74:	5b                   	pop    ebx
c0009a75:	5e                   	pop    esi
c0009a76:	5f                   	pop    edi
c0009a77:	5d                   	pop    ebp
c0009a78:	c3                   	ret    
c0009a79:	83 ec 0c             	sub    esp,0xc
c0009a7c:	68 f8 f0 01 c0       	push   0xc001f0f8
c0009a81:	e8 84 0b 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0009a86:	83 c4 10             	add    esp,0x10
c0009a89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a8d:	09 d8                	or     eax,ebx
c0009a8f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a94:	74 a9                	je     c0009a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a96:	83 ec 0c             	sub    esp,0xc
c0009a99:	68 60 f1 01 c0       	push   0xc001f160
c0009a9e:	e8 68 68 00 00       	call   c001030b <KePanic(char const*)>
c0009aa3:	83 c4 10             	add    esp,0x10
c0009aa6:	eb 97                	jmp    c0009a3f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aa8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009aac:	e8 a0 e0 ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ab1:	83 ec 0c             	sub    esp,0xc
c0009ab4:	89 c5                	mov    ebp,eax
c0009ab6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009abc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ac0:	6a 01                	push   0x1
c0009ac2:	e8 86 f8 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009ac7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ace:	6a 01                	push   0x1
c0009ad0:	50                   	push   eax
c0009ad1:	55                   	push   ebp
c0009ad2:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ad8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009adc:	51                   	push   ecx
c0009add:	e8 28 02 00 00       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ae2:	83 c4 1c             	add    esp,0x1c
c0009ae5:	68 00 10 00 00       	push   0x1000
c0009aea:	6a 00                	push   0x0
c0009aec:	50                   	push   eax
c0009aed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009af1:	e8 da 69 ff ff       	call   c00004d0 <memset>
c0009af6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009afa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009afd:	e8 3f fb ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b06:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b09:	83 c4 10             	add    esp,0x10
c0009b0c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b0f:	e9 40 ff ff ff       	jmp    c0009a54 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b14 <VAS::allocatePages(int, int)>:
c0009b14:	55                   	push   ebp
c0009b15:	57                   	push   edi
c0009b16:	56                   	push   esi
c0009b17:	53                   	push   ebx
c0009b18:	83 ec 1c             	sub    esp,0x1c
c0009b1b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b1f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b24:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b30:	83 e0 01             	and    eax,0x1
c0009b33:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b37:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b3b:	0f 85 cc 00 00 00    	jne    c0009c0d <VAS::allocatePages(int, int)+0xf9>
c0009b41:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b48:	85 c0                	test   eax,eax
c0009b4a:	0f 84 a1 00 00 00    	je     c0009bf1 <VAS::allocatePages(int, int)+0xdd>
c0009b50:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b58:	c1 e6 0c             	shl    esi,0xc
c0009b5b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b5f:	85 c0                	test   eax,eax
c0009b61:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b64:	7e 33                	jle    c0009b99 <VAS::allocatePages(int, int)+0x85>
c0009b66:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b6a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b6e:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b74:	e8 d8 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009b79:	55                   	push   ebp
c0009b7a:	53                   	push   ebx
c0009b7b:	50                   	push   eax
c0009b7c:	57                   	push   edi
c0009b7d:	e8 8e fe ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8a:	74 03                	je     c0009b8f <VAS::allocatePages(int, int)+0x7b>
c0009b8c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b8f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b95:	39 de                	cmp    esi,ebx
c0009b97:	75 db                	jne    c0009b74 <VAS::allocatePages(int, int)+0x60>
c0009b99:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b9e:	75 12                	jne    c0009bb2 <VAS::allocatePages(int, int)+0x9e>
c0009ba0:	0f 20 d8             	mov    eax,cr3
c0009ba3:	0f 22 d8             	mov    cr3,eax
c0009ba6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009baa:	83 c4 1c             	add    esp,0x1c
c0009bad:	5b                   	pop    ebx
c0009bae:	5e                   	pop    esi
c0009baf:	5f                   	pop    edi
c0009bb0:	5d                   	pop    ebp
c0009bb1:	c3                   	ret    
c0009bb2:	c1 ee 0a             	shr    esi,0xa
c0009bb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bb9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bbf:	c1 eb 0a             	shr    ebx,0xa
c0009bc2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bc8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bce:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd4:	39 c3                	cmp    ebx,eax
c0009bd6:	77 ce                	ja     c0009ba6 <VAS::allocatePages(int, int)+0x92>
c0009bd8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be1:	39 d8                	cmp    eax,ebx
c0009be3:	73 f3                	jae    c0009bd8 <VAS::allocatePages(int, int)+0xc4>
c0009be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009be9:	83 c4 1c             	add    esp,0x1c
c0009bec:	5b                   	pop    ebx
c0009bed:	5e                   	pop    esi
c0009bee:	5f                   	pop    edi
c0009bef:	5d                   	pop    ebp
c0009bf0:	c3                   	ret    
c0009bf1:	83 ec 0c             	sub    esp,0xc
c0009bf4:	68 84 f1 01 c0       	push   0xc001f184
c0009bf9:	e8 0d 67 00 00       	call   c001030b <KePanic(char const*)>
c0009bfe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c05:	83 c4 10             	add    esp,0x10
c0009c08:	e9 43 ff ff ff       	jmp    c0009b50 <VAS::allocatePages(int, int)+0x3c>
c0009c0d:	83 ec 0c             	sub    esp,0xc
c0009c10:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c14:	51                   	push   ecx
c0009c15:	e8 33 f7 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009c1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c1e:	83 c4 10             	add    esp,0x10
c0009c21:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c26:	0f 87 9b 00 00 00    	ja     c0009cc7 <VAS::allocatePages(int, int)+0x1b3>
c0009c2c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c30:	85 d2                	test   edx,edx
c0009c32:	7e 3c                	jle    c0009c70 <VAS::allocatePages(int, int)+0x15c>
c0009c34:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c38:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c3c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c40:	c1 e5 0c             	shl    ebp,0xc
c0009c43:	81 ce 00 04 00 00    	or     esi,0x400
c0009c49:	01 dd                	add    ebp,ebx
c0009c4b:	e8 01 df ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009c50:	56                   	push   esi
c0009c51:	53                   	push   ebx
c0009c52:	50                   	push   eax
c0009c53:	57                   	push   edi
c0009c54:	e8 b7 fd ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c61:	74 03                	je     c0009c66 <VAS::allocatePages(int, int)+0x152>
c0009c63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c6c:	39 dd                	cmp    ebp,ebx
c0009c6e:	75 db                	jne    c0009c4b <VAS::allocatePages(int, int)+0x137>
c0009c70:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c75:	0f 84 25 ff ff ff    	je     c0009ba0 <VAS::allocatePages(int, int)+0x8c>
c0009c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c83:	89 d3                	mov    ebx,edx
c0009c85:	c1 e0 0c             	shl    eax,0xc
c0009c88:	c1 eb 0a             	shr    ebx,0xa
c0009c8b:	01 d0                	add    eax,edx
c0009c8d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c93:	c1 e8 0a             	shr    eax,0xa
c0009c96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca1:	2d 00 00 40 00       	sub    eax,0x400000
c0009ca6:	39 c3                	cmp    ebx,eax
c0009ca8:	0f 87 f8 fe ff ff    	ja     c0009ba6 <VAS::allocatePages(int, int)+0x92>
c0009cae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb7:	39 d8                	cmp    eax,ebx
c0009cb9:	73 f3                	jae    c0009cae <VAS::allocatePages(int, int)+0x19a>
c0009cbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cbf:	83 c4 1c             	add    esp,0x1c
c0009cc2:	5b                   	pop    ebx
c0009cc3:	5e                   	pop    esi
c0009cc4:	5f                   	pop    edi
c0009cc5:	5d                   	pop    ebp
c0009cc6:	c3                   	ret    
c0009cc7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009ccc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cd9:	0f 84 4d ff ff ff    	je     c0009c2c <VAS::allocatePages(int, int)+0x118>
c0009cdf:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ce7:	e9 40 ff ff ff       	jmp    c0009c2c <VAS::allocatePages(int, int)+0x118>

c0009cec <VAS::setCPUSpecific(unsigned long)>:
c0009cec:	83 ec 0c             	sub    esp,0xc
c0009cef:	6a 05                	push   0x5
c0009cf1:	68 00 00 40 c2       	push   0xc2400000
c0009cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfa:	50                   	push   eax
c0009cfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cff:	52                   	push   edx
c0009d00:	e8 0b fd ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d05:	83 c4 1c             	add    esp,0x1c
c0009d08:	c3                   	ret    
c0009d09:	90                   	nop

c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d0a:	55                   	push   ebp
c0009d0b:	57                   	push   edi
c0009d0c:	56                   	push   esi
c0009d0d:	53                   	push   ebx
c0009d0e:	83 ec 1c             	sub    esp,0x1c
c0009d11:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d16:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d1a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d20:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d24:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d2a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d2e:	83 e0 01             	and    eax,0x1
c0009d31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d35:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d39:	85 c0                	test   eax,eax
c0009d3b:	7e 39                	jle    c0009d76 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d41:	89 f3                	mov    ebx,esi
c0009d43:	c1 e0 0c             	shl    eax,0xc
c0009d46:	01 f0                	add    eax,esi
c0009d48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d4c:	55                   	push   ebp
c0009d4d:	53                   	push   ebx
c0009d4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d52:	29 f0                	sub    eax,esi
c0009d54:	01 d8                	add    eax,ebx
c0009d56:	50                   	push   eax
c0009d57:	57                   	push   edi
c0009d58:	e8 b3 fc ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d5d:	83 c4 10             	add    esp,0x10
c0009d60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d65:	74 03                	je     c0009d6a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d70:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d74:	75 d6                	jne    c0009d4c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d7b:	75 10                	jne    c0009d8d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d7d:	0f 20 d8             	mov    eax,cr3
c0009d80:	0f 22 d8             	mov    cr3,eax
c0009d83:	83 c4 1c             	add    esp,0x1c
c0009d86:	89 f0                	mov    eax,esi
c0009d88:	5b                   	pop    ebx
c0009d89:	5e                   	pop    esi
c0009d8a:	5f                   	pop    edi
c0009d8b:	5d                   	pop    ebp
c0009d8c:	c3                   	ret    
c0009d8d:	89 f3                	mov    ebx,esi
c0009d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d93:	c1 eb 0a             	shr    ebx,0xa
c0009d96:	c1 e0 0c             	shl    eax,0xc
c0009d99:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d9f:	01 f0                	add    eax,esi
c0009da1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009da7:	c1 e8 0a             	shr    eax,0xa
c0009daa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009daf:	2d 00 00 40 00       	sub    eax,0x400000
c0009db4:	39 c3                	cmp    ebx,eax
c0009db6:	77 cb                	ja     c0009d83 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009db8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dbb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc1:	39 d8                	cmp    eax,ebx
c0009dc3:	73 f3                	jae    c0009db8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc5:	83 c4 1c             	add    esp,0x1c
c0009dc8:	89 f0                	mov    eax,esi
c0009dca:	5b                   	pop    ebx
c0009dcb:	5e                   	pop    esi
c0009dcc:	5f                   	pop    edi
c0009dcd:	5d                   	pop    ebp
c0009dce:	c3                   	ret    
c0009dcf:	90                   	nop

c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dd0:	55                   	push   ebp
c0009dd1:	57                   	push   edi
c0009dd2:	56                   	push   esi
c0009dd3:	53                   	push   ebx
c0009dd4:	83 ec 1c             	sub    esp,0x1c
c0009dd7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ddf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009de3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009de7:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dec:	75 4a                	jne    c0009e38 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009df2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df5:	c1 eb 16             	shr    ebx,0x16
c0009df8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009dff:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e03:	74 4d                	je     c0009e52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e09:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e0d:	c1 e8 0a             	shr    eax,0xa
c0009e10:	80 fa 01             	cmp    dl,0x1
c0009e13:	19 d2                	sbb    edx,edx
c0009e15:	c1 e3 0c             	shl    ebx,0xc
c0009e18:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e1c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e22:	25 fc 0f 00 00       	and    eax,0xffc
c0009e27:	01 d8                	add    eax,ebx
c0009e29:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e30:	83 c4 1c             	add    esp,0x1c
c0009e33:	5b                   	pop    ebx
c0009e34:	5e                   	pop    esi
c0009e35:	5f                   	pop    edi
c0009e36:	5d                   	pop    ebp
c0009e37:	c3                   	ret    
c0009e38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e3c:	83 ec 0c             	sub    esp,0xc
c0009e3f:	68 b0 f1 01 c0       	push   0xc001f1b0
c0009e44:	e8 c2 64 00 00       	call   c001030b <KePanic(char const*)>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e50:	eb 9c                	jmp    c0009dee <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e56:	e8 f6 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009e5b:	83 ec 0c             	sub    esp,0xc
c0009e5e:	89 c5                	mov    ebp,eax
c0009e60:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e6a:	6a 01                	push   0x1
c0009e6c:	e8 dc f4 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009e71:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e78:	6a 01                	push   0x1
c0009e7a:	50                   	push   eax
c0009e7b:	55                   	push   ebp
c0009e7c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e82:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e86:	51                   	push   ecx
c0009e87:	e8 7e fe ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e8c:	83 c4 1c             	add    esp,0x1c
c0009e8f:	68 00 10 00 00       	push   0x1000
c0009e94:	6a 00                	push   0x0
c0009e96:	50                   	push   eax
c0009e97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9b:	e8 30 66 ff ff       	call   c00004d0 <memset>
c0009ea0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ea7:	e8 95 f7 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0009eac:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eaf:	83 c4 10             	add    esp,0x10
c0009eb2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eb9:	e9 47 ff ff ff       	jmp    c0009e05 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009ebe <VAS::VAS(bool)>:
c0009ebe:	53                   	push   ebx
c0009ebf:	83 ec 28             	sub    esp,0x28
c0009ec2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009eca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ece:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ee8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009eeb:	e8 61 dc ff ff       	call   c0007b51 <Phys::allocatePage()>
c0009ef0:	89 c2                	mov    edx,eax
c0009ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ef9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009eff:	83 ec 0c             	sub    esp,0xc
c0009f02:	6a 01                	push   0x1
c0009f04:	e8 44 f4 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0009f09:	83 c4 10             	add    esp,0x10
c0009f0c:	89 c2                	mov    edx,eax
c0009f0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f15:	83 ec 0c             	sub    esp,0xc
c0009f18:	6a 03                	push   0x3
c0009f1a:	6a 01                	push   0x1
c0009f1c:	52                   	push   edx
c0009f1d:	50                   	push   eax
c0009f1e:	53                   	push   ebx
c0009f1f:	e8 e6 fd ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f24:	83 c4 20             	add    esp,0x20
c0009f27:	89 c2                	mov    edx,eax
c0009f29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f2d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f30:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f38:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f40:	7f 1c                	jg     c0009f5e <VAS::VAS(bool)+0xa0>
c0009f42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f4d:	c1 e2 02             	shl    edx,0x2
c0009f50:	01 d0                	add    eax,edx
c0009f52:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f58:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f5c:	eb da                	jmp    c0009f38 <VAS::VAS(bool)+0x7a>
c0009f5e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f66:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f6e:	7f 7a                	jg     c0009fea <VAS::VAS(bool)+0x12c>
c0009f70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f74:	2d 00 02 00 00       	sub    eax,0x200
c0009f79:	c1 e0 0c             	shl    eax,0xc
c0009f7c:	83 c8 05             	or     eax,0x5
c0009f7f:	89 c2                	mov    edx,eax
c0009f81:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f8c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f92:	83 e0 10             	and    eax,0x10
c0009f95:	84 c0                	test   al,al
c0009f97:	74 07                	je     c0009fa0 <VAS::VAS(bool)+0xe2>
c0009f99:	b8 00 01 00 00       	mov    eax,0x100
c0009f9e:	eb 05                	jmp    c0009fa5 <VAS::VAS(bool)+0xe7>
c0009fa0:	b8 00 00 00 00       	mov    eax,0x0
c0009fa5:	09 d0                	or     eax,edx
c0009fa7:	89 c1                	mov    ecx,eax
c0009fa9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb4:	c1 e2 02             	shl    edx,0x2
c0009fb7:	01 d0                	add    eax,edx
c0009fb9:	89 ca                	mov    edx,ecx
c0009fbb:	89 10                	mov    DWORD PTR [eax],edx
c0009fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc1:	2d 40 03 00 00       	sub    eax,0x340
c0009fc6:	83 f8 7f             	cmp    eax,0x7f
c0009fc9:	77 16                	ja     c0009fe1 <VAS::VAS(bool)+0x123>
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fd6:	c1 e2 02             	shl    edx,0x2
c0009fd9:	01 d0                	add    eax,edx
c0009fdb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fe1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe5:	e9 7c ff ff ff       	jmp    c0009f66 <VAS::VAS(bool)+0xa8>
c0009fea:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ffb:	83 e0 10             	and    eax,0x10
c0009ffe:	84 c0                	test   al,al
c000a000:	74 07                	je     c000a009 <VAS::VAS(bool)+0x14b>
c000a002:	b8 03 41 00 00       	mov    eax,0x4103
c000a007:	eb 05                	jmp    c000a00e <VAS::VAS(bool)+0x150>
c000a009:	b8 03 40 00 00       	mov    eax,0x4003
c000a00e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a012:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a015:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a01b:	89 02                	mov    DWORD PTR [edx],eax
c000a01d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a02e:	83 ec 08             	sub    esp,0x8
c000a031:	50                   	push   eax
c000a032:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a036:	e8 b1 fc ff ff       	call   c0009cec <VAS::setCPUSpecific(unsigned long)>
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a042:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a045:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a04a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a050:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a056:	83 e0 10             	and    eax,0x10
c000a059:	84 c0                	test   al,al
c000a05b:	74 07                	je     c000a064 <VAS::VAS(bool)+0x1a6>
c000a05d:	b8 00 01 00 00       	mov    eax,0x100
c000a062:	eb 05                	jmp    c000a069 <VAS::VAS(bool)+0x1ab>
c000a064:	b8 00 00 00 00       	mov    eax,0x0
c000a069:	09 c2                	or     edx,eax
c000a06b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a072:	05 fc 0f 00 00       	add    eax,0xffc
c000a077:	83 ca 03             	or     edx,0x3
c000a07a:	89 10                	mov    DWORD PTR [eax],edx
c000a07c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a081:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a087:	83 ec 0c             	sub    esp,0xc
c000a08a:	50                   	push   eax
c000a08b:	e8 4c 1c 00 00       	call   c000bcdc <Device::getName()>
c000a090:	83 c4 10             	add    esp,0x10
c000a093:	83 ec 08             	sub    esp,0x8
c000a096:	68 53 f2 01 c0       	push   0xc001f253
c000a09b:	50                   	push   eax
c000a09c:	e8 3f 66 ff ff       	call   c00006e0 <strcmp>
c000a0a1:	83 c4 10             	add    esp,0x10
c000a0a4:	85 c0                	test   eax,eax
c000a0a6:	0f 94 c0             	sete   al
c000a0a9:	84 c0                	test   al,al
c000a0ab:	0f 84 87 00 00 00    	je     c000a138 <VAS::VAS(bool)+0x27a>
c000a0b1:	fa                   	cli    
c000a0b2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0b7:	40                   	inc    eax
c000a0b8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0bd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0c8:	05 7c 09 00 00       	add    eax,0x97c
c000a0cd:	83 ec 0c             	sub    esp,0xc
c000a0d0:	50                   	push   eax
c000a0d1:	e8 9c d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0d6:	83 c4 10             	add    esp,0x10
c000a0d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0de:	89 c3                	mov    ebx,eax
c000a0e0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0eb:	05 7c 09 00 00       	add    eax,0x97c
c000a0f0:	83 ec 0c             	sub    esp,0xc
c000a0f3:	50                   	push   eax
c000a0f4:	e8 79 d2 ff ff       	call   c0007372 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0f9:	83 c4 10             	add    esp,0x10
c000a0fc:	83 ec 08             	sub    esp,0x8
c000a0ff:	50                   	push   eax
c000a100:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a104:	e8 19 f5 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a109:	83 c4 10             	add    esp,0x10
c000a10c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a10e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a113:	6a 11                	push   0x11
c000a115:	53                   	push   ebx
c000a116:	50                   	push   eax
c000a117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a11b:	e8 f0 f8 ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a120:	83 c4 10             	add    esp,0x10
c000a123:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a128:	48                   	dec    eax
c000a129:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a12e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a133:	85 c0                	test   eax,eax
c000a135:	75 01                	jne    c000a138 <VAS::VAS(bool)+0x27a>
c000a137:	fb                   	sti    
c000a138:	90                   	nop
c000a139:	83 c4 28             	add    esp,0x28
c000a13c:	5b                   	pop    ebx
c000a13d:	c3                   	ret    

c000a13e <VAS::evict(unsigned long)>:
c000a13e:	55                   	push   ebp
c000a13f:	57                   	push   edi
c000a140:	56                   	push   esi
c000a141:	53                   	push   ebx
c000a142:	83 ec 1c             	sub    esp,0x1c
c000a145:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a149:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a14d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a151:	e8 38 f3 ff ff       	call   c000948e <Virt::allocateSwapfilePage()>
c000a156:	8b 0d ac 10 02 c0    	mov    ecx,DWORD PTR ds:0xc00210ac
c000a15c:	89 c7                	mov    edi,eax
c000a15e:	85 c9                	test   ecx,ecx
c000a160:	7e 3e                	jle    c000a1a0 <VAS::evict(unsigned long)+0x62>
c000a162:	89 ee                	mov    esi,ebp
c000a164:	31 db                	xor    ebx,ebx
c000a166:	83 ec 0c             	sub    esp,0xc
c000a169:	57                   	push   edi
c000a16a:	e8 0d f3 ff ff       	call   c000947c <Virt::swapIDToSector(unsigned long)>
c000a16f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a172:	01 d8                	add    eax,ebx
c000a174:	6a 01                	push   0x1
c000a176:	31 d2                	xor    edx,edx
c000a178:	43                   	inc    ebx
c000a179:	52                   	push   edx
c000a17a:	81 c6 00 02 00 00    	add    esi,0x200
c000a180:	50                   	push   eax
c000a181:	0f be 05 b8 10 02 c0 	movsx  eax,BYTE PTR ds:0xc00210b8
c000a188:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a18f:	52                   	push   edx
c000a190:	e8 01 2c 00 00       	call   c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>
c000a195:	83 c4 20             	add    esp,0x20
c000a198:	39 1d ac 10 02 c0    	cmp    DWORD PTR ds:0xc00210ac,ebx
c000a19e:	7f c6                	jg     c000a166 <VAS::evict(unsigned long)+0x28>
c000a1a0:	83 ec 08             	sub    esp,0x8
c000a1a3:	c1 e7 0b             	shl    edi,0xb
c000a1a6:	55                   	push   ebp
c000a1a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1ab:	50                   	push   eax
c000a1ac:	e8 71 f4 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a1b1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b3:	89 d1                	mov    ecx,edx
c000a1b5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1bb:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1c1:	09 cf                	or     edi,ecx
c000a1c3:	89 38                	mov    DWORD PTR [eax],edi
c000a1c5:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1c8:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1ce:	e8 1c d9 ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c000a1d3:	0f 20 d8             	mov    eax,cr3
c000a1d6:	0f 22 d8             	mov    cr3,eax
c000a1d9:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1de:	c7 44 24 40 61 f2 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f261
c000a1e6:	8d 50 01             	lea    edx,[eax+0x1]
c000a1e9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1ed:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1f3:	83 c4 2c             	add    esp,0x2c
c000a1f6:	5b                   	pop    ebx
c000a1f7:	5e                   	pop    esi
c000a1f8:	5f                   	pop    edi
c000a1f9:	5d                   	pop    ebp
c000a1fa:	e9 0b 04 00 00       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000a1ff:	90                   	nop

c000a200 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a200:	55                   	push   ebp
c000a201:	57                   	push   edi
c000a202:	56                   	push   esi
c000a203:	53                   	push   ebx
c000a204:	83 ec 14             	sub    esp,0x14
c000a207:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a20b:	53                   	push   ebx
c000a20c:	68 72 f2 01 c0       	push   0xc001f272
c000a211:	e8 f4 03 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a216:	83 c4 10             	add    esp,0x10
c000a219:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a21f:	74 21                	je     c000a242 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a221:	83 ec 08             	sub    esp,0x8
c000a224:	53                   	push   ebx
c000a225:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a229:	57                   	push   edi
c000a22a:	e8 f3 f3 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 c6                	mov    esi,eax
c000a234:	85 c0                	test   eax,eax
c000a236:	74 0a                	je     c000a242 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a238:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a23a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a240:	74 0a                	je     c000a24c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a242:	31 c0                	xor    eax,eax
c000a244:	83 c4 0c             	add    esp,0xc
c000a247:	5b                   	pop    ebx
c000a248:	5e                   	pop    esi
c000a249:	5f                   	pop    edi
c000a24a:	5d                   	pop    ebp
c000a24b:	c3                   	ret    
c000a24c:	e8 00 d9 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a251:	c1 ed 0b             	shr    ebp,0xb
c000a254:	8b 16                	mov    edx,DWORD PTR [esi]
c000a256:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a25c:	09 c2                	or     edx,eax
c000a25e:	81 ca 01 08 00 00    	or     edx,0x801
c000a264:	89 16                	mov    DWORD PTR [esi],edx
c000a266:	8b 35 ac 10 02 c0    	mov    esi,DWORD PTR ds:0xc00210ac
c000a26c:	85 f6                	test   esi,esi
c000a26e:	7e 3e                	jle    c000a2ae <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a270:	89 df                	mov    edi,ebx
c000a272:	31 f6                	xor    esi,esi
c000a274:	83 ec 0c             	sub    esp,0xc
c000a277:	55                   	push   ebp
c000a278:	e8 ff f1 ff ff       	call   c000947c <Virt::swapIDToSector(unsigned long)>
c000a27d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a280:	01 f0                	add    eax,esi
c000a282:	6a 01                	push   0x1
c000a284:	31 d2                	xor    edx,edx
c000a286:	46                   	inc    esi
c000a287:	52                   	push   edx
c000a288:	81 c7 00 02 00 00    	add    edi,0x200
c000a28e:	50                   	push   eax
c000a28f:	0f be 05 b8 10 02 c0 	movsx  eax,BYTE PTR ds:0xc00210b8
c000a296:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a29d:	51                   	push   ecx
c000a29e:	e8 87 2a 00 00       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c000a2a3:	83 c4 20             	add    esp,0x20
c000a2a6:	39 35 ac 10 02 c0    	cmp    DWORD PTR ds:0xc00210ac,esi
c000a2ac:	7f c6                	jg     c000a274 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2ae:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2b3:	48                   	dec    eax
c000a2b4:	52                   	push   edx
c000a2b5:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2ba:	50                   	push   eax
c000a2bb:	53                   	push   ebx
c000a2bc:	68 85 f2 01 c0       	push   0xc001f285
c000a2c1:	e8 44 03 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a2c6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2c9:	e8 90 f1 ff ff       	call   c000945e <Virt::freeSwapfilePage(unsigned long)>
c000a2ce:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2d3:	83 c4 10             	add    esp,0x10
c000a2d6:	48                   	dec    eax
c000a2d7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2dc:	85 c0                	test   eax,eax
c000a2de:	75 01                	jne    c000a2e1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2e0:	fb                   	sti    
c000a2e1:	0f 20 d8             	mov    eax,cr3
c000a2e4:	0f 22 d8             	mov    cr3,eax
c000a2e7:	b0 01                	mov    al,0x1
c000a2e9:	e9 56 ff ff ff       	jmp    c000a244 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2ee <VAS::scanForEviction()>:
c000a2ee:	57                   	push   edi
c000a2ef:	31 ff                	xor    edi,edi
c000a2f1:	56                   	push   esi
c000a2f2:	53                   	push   ebx
c000a2f3:	83 ec 10             	sub    esp,0x10
c000a2f6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2fa:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2fd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a303:	75 0e                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a305:	89 da                	mov    edx,ebx
c000a307:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a30a:	c1 ea 16             	shr    edx,0x16
c000a30d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a311:	74 4e                	je     c000a361 <VAS::scanForEviction()+0x73>
c000a313:	53                   	push   ebx
c000a314:	56                   	push   esi
c000a315:	e8 08 f3 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c000a31a:	5a                   	pop    edx
c000a31b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a31d:	59                   	pop    ecx
c000a31e:	89 d1                	mov    ecx,edx
c000a320:	81 e1 01 08 00 00    	and    ecx,0x801
c000a326:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a32c:	74 3e                	je     c000a36c <VAS::scanForEviction()+0x7e>
c000a32e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a334:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a33a:	76 2b                	jbe    c000a367 <VAS::scanForEviction()+0x79>
c000a33c:	47                   	inc    edi
c000a33d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a344:	83 ff 03             	cmp    edi,0x3
c000a347:	74 32                	je     c000a37b <VAS::scanForEviction()+0x8d>
c000a349:	31 db                	xor    ebx,ebx
c000a34b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a351:	75 c0                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a353:	89 da                	mov    edx,ebx
c000a355:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a358:	c1 ea 16             	shr    edx,0x16
c000a35b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a35f:	75 b2                	jne    c000a313 <VAS::scanForEviction()+0x25>
c000a361:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a367:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a36a:	eb 91                	jmp    c000a2fd <VAS::scanForEviction()+0xf>
c000a36c:	f6 c2 20             	test   dl,0x20
c000a36f:	74 13                	je     c000a384 <VAS::scanForEviction()+0x96>
c000a371:	83 e2 df             	and    edx,0xffffffdf
c000a374:	89 10                	mov    DWORD PTR [eax],edx
c000a376:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a379:	eb b3                	jmp    c000a32e <VAS::scanForEviction()+0x40>
c000a37b:	83 c4 10             	add    esp,0x10
c000a37e:	31 c0                	xor    eax,eax
c000a380:	5b                   	pop    ebx
c000a381:	5e                   	pop    esi
c000a382:	5f                   	pop    edi
c000a383:	c3                   	ret    
c000a384:	83 ec 08             	sub    esp,0x8
c000a387:	89 d0                	mov    eax,edx
c000a389:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a38e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a392:	53                   	push   ebx
c000a393:	68 9a f2 01 c0       	push   0xc001f29a
c000a398:	e8 6d 02 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a39d:	58                   	pop    eax
c000a39e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3a1:	5a                   	pop    edx
c000a3a2:	51                   	push   ecx
c000a3a3:	56                   	push   esi
c000a3a4:	e8 95 fd ff ff       	call   c000a13e <VAS::evict(unsigned long)>
c000a3a9:	5b                   	pop    ebx
c000a3aa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3ad:	5f                   	pop    edi
c000a3ae:	50                   	push   eax
c000a3af:	68 ae f2 01 c0       	push   0xc001f2ae
c000a3b4:	e8 51 02 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a3b9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3c0:	83 c4 10             	add    esp,0x10
c000a3c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	5b                   	pop    ebx
c000a3cb:	5e                   	pop    esi
c000a3cc:	5f                   	pop    edi
c000a3cd:	c3                   	ret    

c000a3ce <mapVASFirstTime>:
c000a3ce:	55                   	push   ebp
c000a3cf:	57                   	push   edi
c000a3d0:	56                   	push   esi
c000a3d1:	53                   	push   ebx
c000a3d2:	83 ec 0c             	sub    esp,0xc
c000a3d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3dd:	4a                   	dec    edx
c000a3de:	0f 84 c8 00 00 00    	je     c000a4ac <mapVASFirstTime+0xde>
c000a3e4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3e7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3ea:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3ef:	c1 e5 15             	shl    ebp,0x15
c000a3f2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3f7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3fd:	29 eb                	sub    ebx,ebp
c000a3ff:	29 ef                	sub    edi,ebp
c000a401:	e8 4b d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a406:	83 ec 0c             	sub    esp,0xc
c000a409:	68 03 04 00 00       	push   0x403
c000a40e:	6a 01                	push   0x1
c000a410:	53                   	push   ebx
c000a411:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a417:	50                   	push   eax
c000a418:	56                   	push   esi
c000a419:	e8 ec f8 ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a41e:	83 c4 20             	add    esp,0x20
c000a421:	39 fb                	cmp    ebx,edi
c000a423:	75 dc                	jne    c000a401 <mapVASFirstTime+0x33>
c000a425:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a42a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a42f:	29 eb                	sub    ebx,ebp
c000a431:	29 ef                	sub    edi,ebp
c000a433:	e8 19 d7 ff ff       	call   c0007b51 <Phys::allocatePage()>
c000a438:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a43c:	19 d2                	sbb    edx,edx
c000a43e:	83 ec 0c             	sub    esp,0xc
c000a441:	83 e2 04             	and    edx,0x4
c000a444:	81 c2 03 04 00 00    	add    edx,0x403
c000a44a:	52                   	push   edx
c000a44b:	6a 01                	push   0x1
c000a44d:	53                   	push   ebx
c000a44e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a454:	50                   	push   eax
c000a455:	56                   	push   esi
c000a456:	e8 af f8 ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a45b:	83 c4 20             	add    esp,0x20
c000a45e:	39 df                	cmp    edi,ebx
c000a460:	75 d1                	jne    c000a433 <mapVASFirstTime+0x65>
c000a462:	83 ec 0c             	sub    esp,0xc
c000a465:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a46a:	6a 04                	push   0x4
c000a46c:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a472:	6a ff                	push   0xffffffff
c000a474:	c1 eb 0c             	shr    ebx,0xc
c000a477:	53                   	push   ebx
c000a478:	68 00 20 02 c0       	push   0xc0022000
c000a47d:	56                   	push   esi
c000a47e:	e8 21 f3 ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a483:	83 c4 14             	add    esp,0x14
c000a486:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a48b:	6a 04                	push   0x4
c000a48d:	6a ff                	push   0xffffffff
c000a48f:	53                   	push   ebx
c000a490:	68 00 20 02 c0       	push   0xc0022000
c000a495:	50                   	push   eax
c000a496:	e8 09 f3 ff ff       	call   c00097a4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a49b:	0f 20 d8             	mov    eax,cr3
c000a49e:	0f 22 d8             	mov    cr3,eax
c000a4a1:	83 c4 20             	add    esp,0x20
c000a4a4:	83 c4 0c             	add    esp,0xc
c000a4a7:	5b                   	pop    ebx
c000a4a8:	5e                   	pop    esi
c000a4a9:	5f                   	pop    edi
c000a4aa:	5d                   	pop    ebp
c000a4ab:	c3                   	ret    
c000a4ac:	83 ec 0c             	sub    esp,0xc
c000a4af:	68 c1 f2 01 c0       	push   0xc001f2c1
c000a4b4:	e8 51 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	83 c4 0c             	add    esp,0xc
c000a4bf:	5b                   	pop    ebx
c000a4c0:	5e                   	pop    esi
c000a4c1:	5f                   	pop    edi
c000a4c2:	5d                   	pop    ebp
c000a4c3:	c3                   	ret    

c000a4c4 <__cxa_atexit>:
c000a4c4:	31 c0                	xor    eax,eax
c000a4c6:	c3                   	ret    

c000a4c7 <__cxa_finalize>:
c000a4c7:	c3                   	ret    

c000a4c8 <__stack_chk_fail>:
c000a4c8:	55                   	push   ebp
c000a4c9:	89 e5                	mov    ebp,esp
c000a4cb:	83 ec 10             	sub    esp,0x10
c000a4ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4d1:	68 da f2 01 c0       	push   0xc001f2da
c000a4d6:	e8 2f 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4db:	58                   	pop    eax
c000a4dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4df:	5a                   	pop    edx
c000a4e0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4e3:	68 da f2 01 c0       	push   0xc001f2da
c000a4e8:	e8 1d 01 00 00       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000a4ed:	c7 04 24 e2 f2 01 c0 	mov    DWORD PTR [esp],0xc001f2e2
c000a4f4:	e8 12 5e 00 00       	call   c001030b <KePanic(char const*)>
c000a4f9:	83 c4 10             	add    esp,0x10
c000a4fc:	c9                   	leave  
c000a4fd:	c3                   	ret    

c000a4fe <__cxa_pure_virtual>:
c000a4fe:	83 ec 18             	sub    esp,0x18
c000a501:	68 fa f2 01 c0       	push   0xc001f2fa
c000a506:	e8 00 5e 00 00       	call   c001030b <KePanic(char const*)>
c000a50b:	83 c4 1c             	add    esp,0x1c
c000a50e:	c3                   	ret    

c000a50f <operator new[](unsigned long)>:
c000a50f:	e9 61 d3 ff ff       	jmp    c0007875 <malloc>

c000a514 <operator delete(void*, unsigned long)>:
c000a514:	e9 7c d3 ff ff       	jmp    c0007895 <rfree>

c000a519 <operator delete[](void*)>:
c000a519:	e9 77 d3 ff ff       	jmp    c0007895 <rfree>

c000a51e <operator delete[](void*, unsigned long)>:
c000a51e:	e9 72 d3 ff ff       	jmp    c0007895 <rfree>

c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a523:	55                   	push   ebp
c000a524:	b9 04 00 00 00       	mov    ecx,0x4
c000a529:	57                   	push   edi
c000a52a:	56                   	push   esi
c000a52b:	be 4f ef 01 c0       	mov    esi,0xc001ef4f
c000a530:	53                   	push   ebx
c000a531:	83 ec 20             	sub    esp,0x20
c000a534:	a1 4e ef 01 c0       	mov    eax,ds:0xc001ef4e
c000a539:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a53d:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a541:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a545:	a1 5b ef 01 c0       	mov    eax,ds:0xc001ef5b
c000a54a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a54e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a552:	fc                   	cld    
c000a553:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a555:	89 ee                	mov    esi,ebp
c000a557:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a55b:	eb 02                	jmp    c000a55f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a55d:	89 c6                	mov    esi,eax
c000a55f:	31 d2                	xor    edx,edx
c000a561:	41                   	inc    ecx
c000a562:	89 f0                	mov    eax,esi
c000a564:	f7 f3                	div    ebx
c000a566:	39 de                	cmp    esi,ebx
c000a568:	73 f3                	jae    c000a55d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a56a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a56d:	eb 02                	jmp    c000a571 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a56f:	89 c5                	mov    ebp,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	49                   	dec    ecx
c000a574:	89 e8                	mov    eax,ebp
c000a576:	f7 f3                	div    ebx
c000a578:	39 dd                	cmp    ebp,ebx
c000a57a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a57e:	88 11                	mov    BYTE PTR [ecx],dl
c000a580:	73 ed                	jae    c000a56f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a582:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a586:	83 c4 20             	add    esp,0x20
c000a589:	5b                   	pop    ebx
c000a58a:	5e                   	pop    esi
c000a58b:	5f                   	pop    edi
c000a58c:	5d                   	pop    ebp
c000a58d:	c3                   	ret    

c000a58e <Dbg::logc(char)>:
c000a58e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a592:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a599:	75 12                	jne    c000a5ad <Dbg::logc(char)+0x1f>
c000a59b:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5a0:	ec                   	in     al,dx
c000a5a1:	a8 20                	test   al,0x20
c000a5a3:	74 fb                	je     c000a5a0 <Dbg::logc(char)+0x12>
c000a5a5:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5aa:	88 c8                	mov    al,cl
c000a5ac:	ee                   	out    dx,al
c000a5ad:	c3                   	ret    

c000a5ae <Dbg::logs(char*)>:
c000a5ae:	53                   	push   ebx
c000a5af:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b6:	84 c0                	test   al,al
c000a5b8:	74 0f                	je     c000a5c9 <Dbg::logs(char*)+0x1b>
c000a5ba:	50                   	push   eax
c000a5bb:	43                   	inc    ebx
c000a5bc:	e8 cd ff ff ff       	call   c000a58e <Dbg::logc(char)>
c000a5c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c4:	5a                   	pop    edx
c000a5c5:	84 c0                	test   al,al
c000a5c7:	75 f1                	jne    c000a5ba <Dbg::logs(char*)+0xc>
c000a5c9:	5b                   	pop    ebx
c000a5ca:	c3                   	ret    

c000a5cb <Dbg::logWriteInt(unsigned int)>:
c000a5cb:	83 ec 10             	sub    esp,0x10
c000a5ce:	6a 0a                	push   0xa
c000a5d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d4:	50                   	push   eax
c000a5d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d9:	50                   	push   eax
c000a5da:	e8 44 ff ff ff       	call   c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5df:	50                   	push   eax
c000a5e0:	e8 c9 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	c3                   	ret    

c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5e9:	83 ec 10             	sub    esp,0x10
c000a5ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5f0:	50                   	push   eax
c000a5f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f5:	50                   	push   eax
c000a5f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5fa:	52                   	push   edx
c000a5fb:	e8 23 ff ff ff       	call   c000a523 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a600:	50                   	push   eax
c000a601:	e8 a8 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a606:	83 c4 20             	add    esp,0x20
c000a609:	c3                   	ret    

c000a60a <Dbg::kprintf(char const*, ...)>:
c000a60a:	55                   	push   ebp
c000a60b:	57                   	push   edi
c000a60c:	56                   	push   esi
c000a60d:	53                   	push   ebx
c000a60e:	83 ec 0c             	sub    esp,0xc
c000a611:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a615:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a61c:	74 08                	je     c000a626 <Dbg::kprintf(char const*, ...)+0x1c>
c000a61e:	83 c4 0c             	add    esp,0xc
c000a621:	5b                   	pop    ebx
c000a622:	5e                   	pop    esi
c000a623:	5f                   	pop    edi
c000a624:	5d                   	pop    ebp
c000a625:	c3                   	ret    
c000a626:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a62a:	31 ff                	xor    edi,edi
c000a62c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a630:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a633:	84 c0                	test   al,al
c000a635:	74 e7                	je     c000a61e <Dbg::kprintf(char const*, ...)+0x14>
c000a637:	8d 77 01             	lea    esi,[edi+0x1]
c000a63a:	3c 25                	cmp    al,0x25
c000a63c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a63f:	75 47                	jne    c000a688 <Dbg::kprintf(char const*, ...)+0x7e>
c000a641:	83 c7 02             	add    edi,0x2
c000a644:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a647:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a64a:	83 e8 25             	sub    eax,0x25
c000a64d:	3c 53                	cmp    al,0x53
c000a64f:	0f 87 d2 00 00 00    	ja     c000a727 <Dbg::kprintf(char const*, ...)+0x11d>
c000a655:	25 ff 00 00 00       	and    eax,0xff
c000a65a:	ff 24 85 10 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0cf0]
c000a661:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a665:	89 c8                	mov    eax,ecx
c000a667:	83 c1 04             	add    ecx,0x4
c000a66a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a66e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a670:	55                   	push   ebp
c000a671:	e8 55 ff ff ff       	call   c000a5cb <Dbg::logWriteInt(unsigned int)>
c000a676:	58                   	pop    eax
c000a677:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a67a:	84 c0                	test   al,al
c000a67c:	74 a0                	je     c000a61e <Dbg::kprintf(char const*, ...)+0x14>
c000a67e:	8d 77 01             	lea    esi,[edi+0x1]
c000a681:	3c 25                	cmp    al,0x25
c000a683:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a686:	74 b9                	je     c000a641 <Dbg::kprintf(char const*, ...)+0x37>
c000a688:	50                   	push   eax
c000a689:	89 f7                	mov    edi,esi
c000a68b:	e8 fe fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a690:	89 ee                	mov    esi,ebp
c000a692:	58                   	pop    eax
c000a693:	eb e2                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a695:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a699:	89 c8                	mov    eax,ecx
c000a69b:	83 c1 04             	add    ecx,0x4
c000a69e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a4:	50                   	push   eax
c000a6a5:	e8 04 ff ff ff       	call   c000a5ae <Dbg::logs(char*)>
c000a6aa:	58                   	pop    eax
c000a6ab:	eb ca                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b1:	89 d0                	mov    eax,edx
c000a6b3:	83 c2 04             	add    edx,0x4
c000a6b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6bc:	50                   	push   eax
c000a6bd:	e8 09 ff ff ff       	call   c000a5cb <Dbg::logWriteInt(unsigned int)>
c000a6c2:	58                   	pop    eax
c000a6c3:	eb b2                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6c9:	89 d0                	mov    eax,edx
c000a6cb:	83 c2 04             	add    edx,0x4
c000a6ce:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d5:	50                   	push   eax
c000a6d6:	e8 b3 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a6db:	58                   	pop    eax
c000a6dc:	eb 99                	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e2:	89 c8                	mov    eax,ecx
c000a6e4:	83 c1 04             	add    ecx,0x4
c000a6e7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6eb:	6a 10                	push   0x10
c000a6ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ef:	51                   	push   ecx
c000a6f0:	e8 f4 fe ff ff       	call   c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f5:	5d                   	pop    ebp
c000a6f6:	58                   	pop    eax
c000a6f7:	e9 7b ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a700:	89 d0                	mov    eax,edx
c000a702:	83 c2 08             	add    edx,0x8
c000a705:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a709:	6a 10                	push   0x10
c000a70b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a70d:	50                   	push   eax
c000a70e:	e8 d6 fe ff ff       	call   c000a5e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a713:	58                   	pop    eax
c000a714:	5a                   	pop    edx
c000a715:	e9 5d ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a71a:	6a 25                	push   0x25
c000a71c:	e8 6d fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a721:	5a                   	pop    edx
c000a722:	e9 50 ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a727:	6a 25                	push   0x25
c000a729:	e8 60 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a72e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a732:	50                   	push   eax
c000a733:	e8 56 fe ff ff       	call   c000a58e <Dbg::logc(char)>
c000a738:	5a                   	pop    edx
c000a739:	59                   	pop    ecx
c000a73a:	e9 38 ff ff ff       	jmp    c000a677 <Dbg::kprintf(char const*, ...)+0x6d>
c000a73f:	90                   	nop

c000a740 <File::read(unsigned long long, void*, int*)>:
c000a740:	53                   	push   ebx
c000a741:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a745:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a749:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a750:	3c 19                	cmp    al,0x19
c000a752:	77 35                	ja     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a754:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a75b:	85 c0                	test   eax,eax
c000a75d:	74 2a                	je     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a75f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a765:	85 c0                	test   eax,eax
c000a767:	74 20                	je     c000a789 <File::read(unsigned long long, void*, int*)+0x49>
c000a769:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a76d:	74 21                	je     c000a790 <File::read(unsigned long long, void*, int*)+0x50>
c000a76f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a771:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a775:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a77f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a783:	5b                   	pop    ebx
c000a784:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a787:	ff e0                	jmp    eax
c000a789:	b8 0b 00 00 00       	mov    eax,0xb
c000a78e:	eb 05                	jmp    c000a795 <File::read(unsigned long long, void*, int*)+0x55>
c000a790:	b8 05 00 00 00       	mov    eax,0x5
c000a795:	5b                   	pop    ebx
c000a796:	c3                   	ret    
c000a797:	90                   	nop

c000a798 <File::write(unsigned long long, void*, int*)>:
c000a798:	53                   	push   ebx
c000a799:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a79d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7a8:	3c 19                	cmp    al,0x19
c000a7aa:	77 35                	ja     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7ac:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7b3:	85 c0                	test   eax,eax
c000a7b5:	74 2a                	je     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7bd:	85 c0                	test   eax,eax
c000a7bf:	74 20                	je     c000a7e1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c5:	74 21                	je     c000a7e8 <File::write(unsigned long long, void*, int*)+0x50>
c000a7c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7cd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7db:	5b                   	pop    ebx
c000a7dc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7df:	ff e0                	jmp    eax
c000a7e1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7e6:	eb 05                	jmp    c000a7ed <File::write(unsigned long long, void*, int*)+0x55>
c000a7e8:	b8 05 00 00 00       	mov    eax,0x5
c000a7ed:	5b                   	pop    ebx
c000a7ee:	c3                   	ret    
c000a7ef:	90                   	nop

c000a7f0 <Directory::read(unsigned long long, void*, int*)>:
c000a7f0:	53                   	push   ebx
c000a7f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a800:	3c 19                	cmp    al,0x19
c000a802:	77 35                	ja     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a804:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a80b:	85 c0                	test   eax,eax
c000a80d:	74 2a                	je     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a80f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a815:	85 c0                	test   eax,eax
c000a817:	74 20                	je     c000a839 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a81d:	74 21                	je     c000a840 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a81f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a821:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a825:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a82f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a833:	5b                   	pop    ebx
c000a834:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a837:	ff e0                	jmp    eax
c000a839:	b8 0b 00 00 00       	mov    eax,0xb
c000a83e:	eb 05                	jmp    c000a845 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a840:	b8 05 00 00 00       	mov    eax,0x5
c000a845:	5b                   	pop    ebx
c000a846:	c3                   	ret    
c000a847:	90                   	nop

c000a848 <Directory::write(unsigned long long, void*, int*)>:
c000a848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a84c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a853:	b8 0b 00 00 00       	mov    eax,0xb
c000a858:	80 fa 19             	cmp    dl,0x19
c000a85b:	77 18                	ja     c000a875 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a85d:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a864:	85 d2                	test   edx,edx
c000a866:	74 0d                	je     c000a875 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a868:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a86f:	19 c0                	sbb    eax,eax
c000a871:	83 e0 0a             	and    eax,0xa
c000a874:	40                   	inc    eax
c000a875:	c3                   	ret    

c000a876 <File::isAtty()>:
c000a876:	31 c0                	xor    eax,eax
c000a878:	c3                   	ret    
c000a879:	90                   	nop

c000a87a <Directory::isAtty()>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a87e:	b8 0a 00 00 00       	mov    eax,0xa
c000a883:	c3                   	ret    

c000a884 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a884:	b8 0a 00 00 00       	mov    eax,0xa
c000a889:	c3                   	ret    

c000a88a <Filesystem::allocateSwapfile(char const*, int)>:
c000a88a:	31 c0                	xor    eax,eax
c000a88c:	31 d2                	xor    edx,edx
c000a88e:	c3                   	ret    
c000a88f:	90                   	nop

c000a890 <File::~File()>:
c000a890:	83 ec 0c             	sub    esp,0xc
c000a893:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c000a898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a89c:	89 10                	mov    DWORD PTR [eax],edx
c000a89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a2:	83 ec 0c             	sub    esp,0xc
c000a8a5:	50                   	push   eax
c000a8a6:	e8 41 e8 ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c000a8ab:	83 c4 10             	add    esp,0x10
c000a8ae:	90                   	nop
c000a8af:	83 c4 0c             	add    esp,0xc
c000a8b2:	c3                   	ret    
c000a8b3:	90                   	nop

c000a8b4 <File::~File()>:
c000a8b4:	83 ec 0c             	sub    esp,0xc
c000a8b7:	83 ec 0c             	sub    esp,0xc
c000a8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8be:	e8 cd ff ff ff       	call   c000a890 <File::~File()>
c000a8c3:	83 c4 10             	add    esp,0x10
c000a8c6:	83 ec 08             	sub    esp,0x8
c000a8c9:	68 14 01 00 00       	push   0x114
c000a8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d2:	e8 3d fc ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	83 c4 0c             	add    esp,0xc
c000a8dd:	c3                   	ret    

c000a8de <Directory::~Directory()>:
c000a8de:	83 ec 0c             	sub    esp,0xc
c000a8e1:	ba ec f4 01 c0       	mov    edx,0xc001f4ec
c000a8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ea:	89 10                	mov    DWORD PTR [eax],edx
c000a8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f0:	83 ec 0c             	sub    esp,0xc
c000a8f3:	50                   	push   eax
c000a8f4:	e8 f3 e7 ff ff       	call   c00090ec <UnixFile::~UnixFile()>
c000a8f9:	83 c4 10             	add    esp,0x10
c000a8fc:	90                   	nop
c000a8fd:	83 c4 0c             	add    esp,0xc
c000a900:	c3                   	ret    
c000a901:	90                   	nop

c000a902 <Directory::~Directory()>:
c000a902:	83 ec 0c             	sub    esp,0xc
c000a905:	83 ec 0c             	sub    esp,0xc
c000a908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90c:	e8 cd ff ff ff       	call   c000a8de <Directory::~Directory()>
c000a911:	83 c4 10             	add    esp,0x10
c000a914:	83 ec 08             	sub    esp,0x8
c000a917:	68 14 01 00 00       	push   0x114
c000a91c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a920:	e8 ef fb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a925:	83 c4 10             	add    esp,0x10
c000a928:	83 c4 0c             	add    esp,0xc
c000a92b:	c3                   	ret    

c000a92c <Filesystem::Filesystem()>:
c000a92c:	ba 68 f4 01 c0       	mov    edx,0xc001f468
c000a931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a935:	89 10                	mov    DWORD PTR [eax],edx
c000a937:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a93d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a941:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a948:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a94d:	90                   	nop
c000a94e:	c3                   	ret    
c000a94f:	90                   	nop

c000a950 <Filesystem::~Filesystem()>:
c000a950:	ba 68 f4 01 c0       	mov    edx,0xc001f468
c000a955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a959:	89 10                	mov    DWORD PTR [eax],edx
c000a95b:	90                   	nop
c000a95c:	c3                   	ret    
c000a95d:	90                   	nop

c000a95e <Filesystem::~Filesystem()>:
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a965:	e8 e6 ff ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c000a96a:	83 c4 04             	add    esp,0x4
c000a96d:	83 ec 08             	sub    esp,0x8
c000a970:	6a 08                	push   0x8
c000a972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a976:	e8 99 fb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	83 c4 0c             	add    esp,0xc
c000a981:	c3                   	ret    

c000a982 <Fs::getcwd(Process*, char*, int)>:
c000a982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a986:	31 c0                	xor    eax,eax
c000a988:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a98b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a98f:	7d 15                	jge    c000a9a6 <Fs::getcwd(Process*, char*, int)+0x24>
c000a991:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a995:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a99c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a99f:	84 c9                	test   cl,cl
c000a9a1:	74 06                	je     c000a9a9 <Fs::getcwd(Process*, char*, int)+0x27>
c000a9a3:	40                   	inc    eax
c000a9a4:	eb e2                	jmp    c000a988 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9a6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9a9:	31 c0                	xor    eax,eax
c000a9ab:	c3                   	ret    

c000a9ac <Fs::initVFS()>:
c000a9ac:	83 ec 18             	sub    esp,0x18
c000a9af:	6a 08                	push   0x8
c000a9b1:	e8 bf ce ff ff       	call   c0007875 <malloc>
c000a9b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b9:	e8 ae d5 00 00       	call   c0017f6c <FAT::FAT()>
c000a9be:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c5:	e8 ab ce ff ff       	call   c0007875 <malloc>
c000a9ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9cd:	e8 36 e4 00 00       	call   c0018e08 <ISO9660::ISO9660()>
c000a9d2:	83 c4 1c             	add    esp,0x1c
c000a9d5:	c3                   	ret    

c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9d6:	55                   	push   ebp
c000a9d7:	57                   	push   edi
c000a9d8:	56                   	push   esi
c000a9d9:	53                   	push   ebx
c000a9da:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9e0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9e7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9ee:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f5:	68 00 04 00 00       	push   0x400
c000a9fa:	6a 00                	push   0x0
c000a9fc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa00:	56                   	push   esi
c000aa01:	e8 ca 5a ff ff       	call   c00004d0 <memset>
c000aa06:	83 c4 10             	add    esp,0x10
c000aa09:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa0d:	75 0b                	jne    c000aa1a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa0f:	50                   	push   eax
c000aa10:	50                   	push   eax
c000aa11:	57                   	push   edi
c000aa12:	56                   	push   esi
c000aa13:	e8 e8 5b ff ff       	call   c0000600 <strcpy>
c000aa18:	eb 41                	jmp    c000aa5b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa1a:	8a 07                	mov    al,BYTE PTR [edi]
c000aa1c:	3c 5c                	cmp    al,0x5c
c000aa1e:	74 04                	je     c000aa24 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa20:	3c 2f                	cmp    al,0x2f
c000aa22:	75 18                	jne    c000aa3c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa24:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa27:	3c 60                	cmp    al,0x60
c000aa29:	7e 03                	jle    c000aa2e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa2b:	83 e8 20             	sub    eax,0x20
c000aa2e:	88 04 24             	mov    BYTE PTR [esp],al
c000aa31:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa38:	50                   	push   eax
c000aa39:	50                   	push   eax
c000aa3a:	eb 18                	jmp    c000aa54 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	55                   	push   ebp
c000aa3f:	56                   	push   esi
c000aa40:	e8 bb 5b ff ff       	call   c0000600 <strcpy>
c000aa45:	5a                   	pop    edx
c000aa46:	59                   	pop    ecx
c000aa47:	68 4c 03 02 c0       	push   0xc002034c
c000aa4c:	56                   	push   esi
c000aa4d:	e8 6e 5d ff ff       	call   c00007c0 <strcat>
c000aa52:	5d                   	pop    ebp
c000aa53:	58                   	pop    eax
c000aa54:	57                   	push   edi
c000aa55:	56                   	push   esi
c000aa56:	e8 65 5d ff ff       	call   c00007c0 <strcat>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa61:	3c 60                	cmp    al,0x60
c000aa63:	7e 03                	jle    c000aa68 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa65:	83 e8 20             	sub    eax,0x20
c000aa68:	88 04 24             	mov    BYTE PTR [esp],al
c000aa6b:	88 03                	mov    BYTE PTR [ebx],al
c000aa6d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa74:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa7a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa7e:	bf 03 00 00 00       	mov    edi,0x3
c000aa83:	b8 03 00 00 00       	mov    eax,0x3
c000aa88:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa8b:	84 d2                	test   dl,dl
c000aa8d:	0f 84 91 00 00 00    	je     c000ab24 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa93:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa96:	80 fa 5c             	cmp    dl,0x5c
c000aa99:	74 05                	je     c000aaa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa9b:	80 fa 2f             	cmp    dl,0x2f
c000aa9e:	75 12                	jne    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa0:	89 c5                	mov    ebp,eax
c000aaa2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaa7:	74 09                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa9:	40                   	inc    eax
c000aaaa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaae:	89 cf                	mov    edi,ecx
c000aab0:	eb d6                	jmp    c000aa88 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aab2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aab7:	75 5b                	jne    c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aab9:	80 fa 2e             	cmp    dl,0x2e
c000aabc:	75 56                	jne    c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aabe:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aac2:	74 19                	je     c000aadd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aac9:	74 53                	je     c000ab1e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aacb:	89 f9                	mov    ecx,edi
c000aacd:	41                   	inc    ecx
c000aace:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad1:	80 fa 2f             	cmp    dl,0x2f
c000aad4:	74 f7                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aad6:	80 fa 5c             	cmp    dl,0x5c
c000aad9:	74 f2                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aadb:	eb d1                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aadd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aae2:	74 3a                	je     c000ab1e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae4:	83 f8 03             	cmp    eax,0x3
c000aae7:	74 c5                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae9:	41                   	inc    ecx
c000aaea:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aaed:	80 fa 2f             	cmp    dl,0x2f
c000aaf0:	74 f7                	je     c000aae9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf2:	80 fa 5c             	cmp    dl,0x5c
c000aaf5:	74 f2                	je     c000aae9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf7:	48                   	dec    eax
c000aaf8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aafc:	75 06                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aafe:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab02:	eb f3                	jmp    c000aaf7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab04:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab08:	74 07                	je     c000ab11 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab0a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab0e:	48                   	dec    eax
c000ab0f:	eb f3                	jmp    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab11:	40                   	inc    eax
c000ab12:	eb 9a                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab14:	80 fa 2f             	cmp    dl,0x2f
c000ab17:	74 95                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab19:	80 fa 5c             	cmp    dl,0x5c
c000ab1c:	74 90                	je     c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab21:	40                   	inc    eax
c000ab22:	eb 8a                	jmp    c000aaae <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab24:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	53                   	push   ebx
c000ab2c:	e8 0f 5a ff ff       	call   c0000540 <strlen>
c000ab31:	83 c4 10             	add    esp,0x10
c000ab34:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab39:	75 26                	jne    c000ab61 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab3b:	83 ec 0c             	sub    esp,0xc
c000ab3e:	53                   	push   ebx
c000ab3f:	e8 fc 59 ff ff       	call   c0000540 <strlen>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab4c:	74 26                	je     c000ab74 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab4e:	83 ec 0c             	sub    esp,0xc
c000ab51:	53                   	push   ebx
c000ab52:	e8 e9 59 ff ff       	call   c0000540 <strlen>
c000ab57:	83 c4 10             	add    esp,0x10
c000ab5a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab5f:	eb c7                	jmp    c000ab28 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab61:	83 ec 0c             	sub    esp,0xc
c000ab64:	53                   	push   ebx
c000ab65:	e8 d6 59 ff ff       	call   c0000540 <strlen>
c000ab6a:	83 c4 10             	add    esp,0x10
c000ab6d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab72:	74 c7                	je     c000ab3b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab74:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab7a:	5b                   	pop    ebx
c000ab7b:	5e                   	pop    esi
c000ab7c:	5f                   	pop    edi
c000ab7d:	5d                   	pop    ebp
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <File::File(char const*, Process*)>:
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	6a 00                	push   0x0
c000ab8c:	50                   	push   eax
c000ab8d:	e8 78 e3 ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c000ab92:	83 c4 10             	add    esp,0x10
c000ab95:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c000ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9e:	89 10                	mov    DWORD PTR [eax],edx
c000aba0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abae:	83 c0 0d             	add    eax,0xd
c000abb1:	83 ec 04             	sub    esp,0x4
c000abb4:	52                   	push   edx
c000abb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abb9:	50                   	push   eax
c000abba:	e8 17 fe ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abbf:	83 c4 10             	add    esp,0x10
c000abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abc9:	8d 50 bf             	lea    edx,[eax-0x41]
c000abcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abe8:	25 ff 00 00 00       	and    eax,0xff
c000abed:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abf4:	85 c0                	test   eax,eax
c000abf6:	74 42                	je     c000ac3a <File::File(char const*, Process*)+0xba>
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac02:	25 ff 00 00 00       	and    eax,0xff
c000ac07:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac0e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac14:	85 c0                	test   eax,eax
c000ac16:	75 22                	jne    c000ac3a <File::File(char const*, Process*)+0xba>
c000ac18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac22:	25 ff 00 00 00       	and    eax,0xff
c000ac27:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac2e:	83 ec 0c             	sub    esp,0xc
c000ac31:	50                   	push   eax
c000ac32:	e8 31 20 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	90                   	nop
c000ac3b:	83 c4 0c             	add    esp,0xc
c000ac3e:	c3                   	ret    
c000ac3f:	90                   	nop

c000ac40 <File::open(FileOpenMode)>:
c000ac40:	53                   	push   ebx
c000ac41:	b8 0b 00 00 00       	mov    eax,0xb
c000ac46:	83 ec 08             	sub    esp,0x8
c000ac49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac4d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac54:	80 fa 19             	cmp    dl,0x19
c000ac57:	77 40                	ja     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac59:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac60:	85 d2                	test   edx,edx
c000ac62:	74 35                	je     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac64:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac6a:	85 d2                	test   edx,edx
c000ac6c:	74 2b                	je     c000ac99 <File::open(FileOpenMode)+0x59>
c000ac6e:	b8 06 00 00 00       	mov    eax,0x6
c000ac73:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac77:	75 20                	jne    c000ac99 <File::open(FileOpenMode)+0x59>
c000ac79:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac85:	51                   	push   ecx
c000ac86:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac89:	51                   	push   ecx
c000ac8a:	52                   	push   edx
c000ac8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac8e:	83 c4 10             	add    esp,0x10
c000ac91:	85 c0                	test   eax,eax
c000ac93:	75 04                	jne    c000ac99 <File::open(FileOpenMode)+0x59>
c000ac95:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac99:	83 c4 08             	add    esp,0x8
c000ac9c:	5b                   	pop    ebx
c000ac9d:	c3                   	ret    

c000ac9e <File::close()>:
c000ac9e:	53                   	push   ebx
c000ac9f:	b8 0b 00 00 00       	mov    eax,0xb
c000aca4:	83 ec 08             	sub    esp,0x8
c000aca7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acb2:	80 fa 19             	cmp    dl,0x19
c000acb5:	77 41                	ja     c000acf8 <File::close()+0x5a>
c000acb7:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acbe:	85 db                	test   ebx,ebx
c000acc0:	74 36                	je     c000acf8 <File::close()+0x5a>
c000acc2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acc9:	74 2d                	je     c000acf8 <File::close()+0x5a>
c000accb:	b8 05 00 00 00       	mov    eax,0x5
c000acd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd4:	74 22                	je     c000acf8 <File::close()+0x5a>
c000acd6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acda:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ace1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ace7:	53                   	push   ebx
c000ace8:	53                   	push   ebx
c000ace9:	8b 10                	mov    edx,DWORD PTR [eax]
c000aceb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acf1:	50                   	push   eax
c000acf2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf5:	83 c4 10             	add    esp,0x10
c000acf8:	83 c4 08             	add    esp,0x8
c000acfb:	5b                   	pop    ebx
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <File::seek(unsigned long long)>:
c000acfe:	56                   	push   esi
c000acff:	53                   	push   ebx
c000ad00:	b8 0b 00 00 00       	mov    eax,0xb
c000ad05:	51                   	push   ecx
c000ad06:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad0e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad15:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad19:	80 fa 19             	cmp    dl,0x19
c000ad1c:	77 31                	ja     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad1e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad25:	85 d2                	test   edx,edx
c000ad27:	74 26                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad29:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad2f:	85 d2                	test   edx,edx
c000ad31:	74 1c                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad33:	b8 05 00 00 00       	mov    eax,0x5
c000ad38:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad3c:	74 11                	je     c000ad4f <File::seek(unsigned long long)+0x51>
c000ad3e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad40:	53                   	push   ebx
c000ad41:	51                   	push   ecx
c000ad42:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad48:	52                   	push   edx
c000ad49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad4c:	83 c4 10             	add    esp,0x10
c000ad4f:	5a                   	pop    edx
c000ad50:	5b                   	pop    ebx
c000ad51:	5e                   	pop    esi
c000ad52:	c3                   	ret    
c000ad53:	90                   	nop

c000ad54 <File::tell(unsigned long long*)>:
c000ad54:	83 ec 0c             	sub    esp,0xc
c000ad57:	b8 0b 00 00 00       	mov    eax,0xb
c000ad5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad60:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad67:	80 fa 19             	cmp    dl,0x19
c000ad6a:	77 34                	ja     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad6c:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad73:	85 d2                	test   edx,edx
c000ad75:	74 29                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad77:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad7d:	85 d2                	test   edx,edx
c000ad7f:	74 1f                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad81:	b8 05 00 00 00       	mov    eax,0x5
c000ad86:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad8a:	74 14                	je     c000ada0 <File::tell(unsigned long long*)+0x4c>
c000ad8c:	50                   	push   eax
c000ad8d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad93:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad99:	52                   	push   edx
c000ad9a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad9d:	83 c4 10             	add    esp,0x10
c000ada0:	83 c4 0c             	add    esp,0xc
c000ada3:	c3                   	ret    

c000ada4 <File::rewind()>:
c000ada4:	83 ec 10             	sub    esp,0x10
c000ada7:	6a 00                	push   0x0
c000ada9:	6a 00                	push   0x0
c000adab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adaf:	e8 4a ff ff ff       	call   c000acfe <File::seek(unsigned long long)>
c000adb4:	83 c4 1c             	add    esp,0x1c
c000adb7:	c3                   	ret    

c000adb8 <File::unlink()>:
c000adb8:	83 ec 0c             	sub    esp,0xc
c000adbb:	b8 0b 00 00 00       	mov    eax,0xb
c000adc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adcb:	80 f9 19             	cmp    cl,0x19
c000adce:	77 2f                	ja     c000adff <File::unlink()+0x47>
c000add0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000add7:	85 c9                	test   ecx,ecx
c000add9:	74 24                	je     c000adff <File::unlink()+0x47>
c000addb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ade1:	85 c9                	test   ecx,ecx
c000ade3:	74 1a                	je     c000adff <File::unlink()+0x47>
c000ade5:	b8 06 00 00 00       	mov    eax,0x6
c000adea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adee:	75 0f                	jne    c000adff <File::unlink()+0x47>
c000adf0:	83 c2 0d             	add    edx,0xd
c000adf3:	50                   	push   eax
c000adf4:	50                   	push   eax
c000adf5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf7:	52                   	push   edx
c000adf8:	51                   	push   ecx
c000adf9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adfc:	83 c4 10             	add    esp,0x10
c000adff:	83 c4 0c             	add    esp,0xc
c000ae02:	c3                   	ret    
c000ae03:	90                   	nop

c000ae04 <File::rename(char const*)>:
c000ae04:	83 ec 0c             	sub    esp,0xc
c000ae07:	b8 0b 00 00 00       	mov    eax,0xb
c000ae0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae17:	80 f9 19             	cmp    cl,0x19
c000ae1a:	77 32                	ja     c000ae4e <File::rename(char const*)+0x4a>
c000ae1c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae23:	85 c9                	test   ecx,ecx
c000ae25:	74 27                	je     c000ae4e <File::rename(char const*)+0x4a>
c000ae27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae2d:	85 c9                	test   ecx,ecx
c000ae2f:	74 1d                	je     c000ae4e <File::rename(char const*)+0x4a>
c000ae31:	b8 06 00 00 00       	mov    eax,0x6
c000ae36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae3a:	75 12                	jne    c000ae4e <File::rename(char const*)+0x4a>
c000ae3c:	83 c2 0d             	add    edx,0xd
c000ae3f:	50                   	push   eax
c000ae40:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae46:	52                   	push   edx
c000ae47:	51                   	push   ecx
c000ae48:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae4b:	83 c4 10             	add    esp,0x10
c000ae4e:	83 c4 0c             	add    esp,0xc
c000ae51:	c3                   	ret    

c000ae52 <File::chfatattr(unsigned char, unsigned char)>:
c000ae52:	57                   	push   edi
c000ae53:	b8 0b 00 00 00       	mov    eax,0xb
c000ae58:	56                   	push   esi
c000ae59:	53                   	push   ebx
c000ae5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae5e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae62:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae6d:	80 f9 19             	cmp    cl,0x19
c000ae70:	77 37                	ja     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae72:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae79:	85 c9                	test   ecx,ecx
c000ae7b:	74 2c                	je     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae83:	85 c9                	test   ecx,ecx
c000ae85:	74 22                	je     c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae87:	b8 06 00 00 00       	mov    eax,0x6
c000ae8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae90:	75 17                	jne    c000aea9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae92:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae94:	89 f0                	mov    eax,esi
c000ae96:	83 c2 0d             	add    edx,0xd
c000ae99:	0f b6 f0             	movzx  esi,al
c000ae9c:	0f b6 db             	movzx  ebx,bl
c000ae9f:	56                   	push   esi
c000aea0:	53                   	push   ebx
c000aea1:	52                   	push   edx
c000aea2:	51                   	push   ecx
c000aea3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aea6:	83 c4 10             	add    esp,0x10
c000aea9:	5b                   	pop    ebx
c000aeaa:	5e                   	pop    esi
c000aeab:	5f                   	pop    edi
c000aeac:	c3                   	ret    
c000aead:	90                   	nop

c000aeae <File::exists()>:
c000aeae:	83 ec 0c             	sub    esp,0xc
c000aeb1:	31 c0                	xor    eax,eax
c000aeb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aebe:	80 f9 19             	cmp    cl,0x19
c000aec1:	77 24                	ja     c000aee7 <File::exists()+0x39>
c000aec3:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aeca:	85 c9                	test   ecx,ecx
c000aecc:	74 19                	je     c000aee7 <File::exists()+0x39>
c000aece:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed4:	85 c9                	test   ecx,ecx
c000aed6:	74 0f                	je     c000aee7 <File::exists()+0x39>
c000aed8:	83 c2 0d             	add    edx,0xd
c000aedb:	50                   	push   eax
c000aedc:	50                   	push   eax
c000aedd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aedf:	52                   	push   edx
c000aee0:	51                   	push   ecx
c000aee1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	83 c4 0c             	add    esp,0xc
c000aeea:	c3                   	ret    
c000aeeb:	90                   	nop

c000aeec <File::stat(unsigned long long*, bool*)>:
c000aeec:	56                   	push   esi
c000aeed:	53                   	push   ebx
c000aeee:	50                   	push   eax
c000aeef:	b8 0b 00 00 00       	mov    eax,0xb
c000aef4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aef8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aefc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af03:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af07:	80 f9 19             	cmp    cl,0x19
c000af0a:	77 3d                	ja     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af0c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af13:	85 c9                	test   ecx,ecx
c000af15:	74 32                	je     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af1d:	85 c9                	test   ecx,ecx
c000af1f:	74 28                	je     c000af49 <File::stat(unsigned long long*, bool*)+0x5d>
c000af21:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af23:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af27:	74 13                	je     c000af3c <File::stat(unsigned long long*, bool*)+0x50>
c000af29:	83 ec 04             	sub    esp,0x4
c000af2c:	56                   	push   esi
c000af2d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af33:	51                   	push   ecx
c000af34:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af37:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af3a:	eb 0a                	jmp    c000af46 <File::stat(unsigned long long*, bool*)+0x5a>
c000af3c:	53                   	push   ebx
c000af3d:	83 c2 0d             	add    edx,0xd
c000af40:	56                   	push   esi
c000af41:	52                   	push   edx
c000af42:	51                   	push   ecx
c000af43:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af46:	83 c4 10             	add    esp,0x10
c000af49:	5a                   	pop    edx
c000af4a:	5b                   	pop    ebx
c000af4b:	5e                   	pop    esi
c000af4c:	c3                   	ret    

c000af4d <Fs::setcwd(Process*, char*)>:
c000af4d:	55                   	push   ebp
c000af4e:	57                   	push   edi
c000af4f:	56                   	push   esi
c000af50:	53                   	push   ebx
c000af51:	81 ec 20 02 00 00    	sub    esp,0x220
c000af57:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af5e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af64:	57                   	push   edi
c000af65:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af6c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af70:	56                   	push   esi
c000af71:	e8 60 fa ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af76:	89 34 24             	mov    DWORD PTR [esp],esi
c000af79:	e8 c2 55 ff ff       	call   c0000540 <strlen>
c000af7e:	83 c4 10             	add    esp,0x10
c000af81:	83 f8 02             	cmp    eax,0x2
c000af84:	77 15                	ja     c000af9b <Fs::setcwd(Process*, char*)+0x4e>
c000af86:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af8b:	83 eb 41             	sub    ebx,0x41
c000af8e:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af95:	85 c0                	test   eax,eax
c000af97:	75 1c                	jne    c000afb5 <Fs::setcwd(Process*, char*)+0x68>
c000af99:	eb 2f                	jmp    c000afca <Fs::setcwd(Process*, char*)+0x7d>
c000af9b:	83 ec 0c             	sub    esp,0xc
c000af9e:	56                   	push   esi
c000af9f:	e8 9c 55 ff ff       	call   c0000540 <strlen>
c000afa4:	83 c4 10             	add    esp,0x10
c000afa7:	83 f8 03             	cmp    eax,0x3
c000afaa:	75 57                	jne    c000b003 <Fs::setcwd(Process*, char*)+0xb6>
c000afac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afb1:	75 50                	jne    c000b003 <Fs::setcwd(Process*, char*)+0xb6>
c000afb3:	eb d1                	jmp    c000af86 <Fs::setcwd(Process*, char*)+0x39>
c000afb5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afbc:	75 0c                	jne    c000afca <Fs::setcwd(Process*, char*)+0x7d>
c000afbe:	83 ec 0c             	sub    esp,0xc
c000afc1:	50                   	push   eax
c000afc2:	e8 a1 1c 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	b8 03 00 00 00       	mov    eax,0x3
c000afcf:	83 fb 19             	cmp    ebx,0x19
c000afd2:	0f 87 c6 00 00 00    	ja     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000afd8:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afdf:	b8 05 00 00 00       	mov    eax,0x5
c000afe4:	85 d2                	test   edx,edx
c000afe6:	0f 84 b2 00 00 00    	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000afec:	b8 06 00 00 00       	mov    eax,0x6
c000aff1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000aff8:	0f 85 92 00 00 00    	jne    c000b090 <Fs::setcwd(Process*, char*)+0x143>
c000affe:	e9 9b 00 00 00       	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b003:	83 ec 0c             	sub    esp,0xc
c000b006:	68 14 01 00 00       	push   0x114
c000b00b:	e8 65 c8 ff ff       	call   c0007875 <malloc>
c000b010:	83 c4 0c             	add    esp,0xc
c000b013:	89 c3                	mov    ebx,eax
c000b015:	55                   	push   ebp
c000b016:	56                   	push   esi
c000b017:	50                   	push   eax
c000b018:	e8 63 fb ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000b01d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b022:	83 c4 0c             	add    esp,0xc
c000b025:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b029:	50                   	push   eax
c000b02a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b02e:	50                   	push   eax
c000b02f:	53                   	push   ebx
c000b030:	e8 b7 fe ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c000b035:	83 c4 10             	add    esp,0x10
c000b038:	83 f8 02             	cmp    eax,0x2
c000b03b:	74 27                	je     c000b064 <Fs::setcwd(Process*, char*)+0x117>
c000b03d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b042:	75 1c                	jne    c000b060 <Fs::setcwd(Process*, char*)+0x113>
c000b044:	b8 02 00 00 00       	mov    eax,0x2
c000b049:	85 db                	test   ebx,ebx
c000b04b:	74 51                	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b04d:	83 ec 0c             	sub    esp,0xc
c000b050:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b052:	53                   	push   ebx
c000b053:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	b8 02 00 00 00       	mov    eax,0x2
c000b05e:	eb 3e                	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b060:	85 c0                	test   eax,eax
c000b062:	74 1c                	je     c000b080 <Fs::setcwd(Process*, char*)+0x133>
c000b064:	b8 01 00 00 00       	mov    eax,0x1
c000b069:	85 db                	test   ebx,ebx
c000b06b:	74 31                	je     c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b06d:	83 ec 0c             	sub    esp,0xc
c000b070:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b072:	53                   	push   ebx
c000b073:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b076:	83 c4 10             	add    esp,0x10
c000b079:	b8 01 00 00 00       	mov    eax,0x1
c000b07e:	eb 1e                	jmp    c000b09e <Fs::setcwd(Process*, char*)+0x151>
c000b080:	85 db                	test   ebx,ebx
c000b082:	74 0c                	je     c000b090 <Fs::setcwd(Process*, char*)+0x143>
c000b084:	83 ec 0c             	sub    esp,0xc
c000b087:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b089:	53                   	push   ebx
c000b08a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	50                   	push   eax
c000b091:	50                   	push   eax
c000b092:	56                   	push   esi
c000b093:	57                   	push   edi
c000b094:	e8 67 55 ff ff       	call   c0000600 <strcpy>
c000b099:	83 c4 10             	add    esp,0x10
c000b09c:	31 c0                	xor    eax,eax
c000b09e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a4:	5b                   	pop    ebx
c000b0a5:	5e                   	pop    esi
c000b0a6:	5f                   	pop    edi
c000b0a7:	5d                   	pop    ebp
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop

c000b0aa <Directory::Directory(char const*, Process*)>:
c000b0aa:	83 ec 0c             	sub    esp,0xc
c000b0ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b1:	83 ec 08             	sub    esp,0x8
c000b0b4:	6a 00                	push   0x0
c000b0b6:	50                   	push   eax
c000b0b7:	e8 4e de ff ff       	call   c0008f0a <UnixFile::UnixFile(int)>
c000b0bc:	83 c4 10             	add    esp,0x10
c000b0bf:	ba ec f4 01 c0       	mov    edx,0xc001f4ec
c000b0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d8:	83 c0 0d             	add    eax,0xd
c000b0db:	83 ec 04             	sub    esp,0x4
c000b0de:	52                   	push   edx
c000b0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e3:	50                   	push   eax
c000b0e4:	e8 ed f8 ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0e9:	83 c4 10             	add    esp,0x10
c000b0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0f3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fa:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b104:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b112:	25 ff 00 00 00       	and    eax,0xff
c000b117:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b11e:	85 c0                	test   eax,eax
c000b120:	74 42                	je     c000b164 <Directory::Directory(char const*, Process*)+0xba>
c000b122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b126:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b12c:	25 ff 00 00 00       	and    eax,0xff
c000b131:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b138:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b13e:	85 c0                	test   eax,eax
c000b140:	75 22                	jne    c000b164 <Directory::Directory(char const*, Process*)+0xba>
c000b142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b146:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b14c:	25 ff 00 00 00       	and    eax,0xff
c000b151:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b158:	83 ec 0c             	sub    esp,0xc
c000b15b:	50                   	push   eax
c000b15c:	e8 07 1b 00 00       	call   c000cc68 <LogicalDisk::mount()>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	90                   	nop
c000b165:	83 c4 0c             	add    esp,0xc
c000b168:	c3                   	ret    
c000b169:	90                   	nop

c000b16a <Directory::open()>:
c000b16a:	53                   	push   ebx
c000b16b:	b8 0b 00 00 00       	mov    eax,0xb
c000b170:	83 ec 08             	sub    esp,0x8
c000b173:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b177:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b17e:	80 fa 19             	cmp    dl,0x19
c000b181:	77 3d                	ja     c000b1c0 <Directory::open()+0x56>
c000b183:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b18a:	85 d2                	test   edx,edx
c000b18c:	74 32                	je     c000b1c0 <Directory::open()+0x56>
c000b18e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b194:	85 d2                	test   edx,edx
c000b196:	74 28                	je     c000b1c0 <Directory::open()+0x56>
c000b198:	b8 06 00 00 00       	mov    eax,0x6
c000b19d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1a1:	75 1d                	jne    c000b1c0 <Directory::open()+0x56>
c000b1a3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1a9:	50                   	push   eax
c000b1aa:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1ac:	51                   	push   ecx
c000b1ad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1b0:	51                   	push   ecx
c000b1b1:	52                   	push   edx
c000b1b2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b5:	83 c4 10             	add    esp,0x10
c000b1b8:	85 c0                	test   eax,eax
c000b1ba:	75 04                	jne    c000b1c0 <Directory::open()+0x56>
c000b1bc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1c0:	83 c4 08             	add    esp,0x8
c000b1c3:	5b                   	pop    ebx
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Directory::close()>:
c000b1c6:	53                   	push   ebx
c000b1c7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1cc:	83 ec 08             	sub    esp,0x8
c000b1cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1da:	80 fa 19             	cmp    dl,0x19
c000b1dd:	77 41                	ja     c000b220 <Directory::close()+0x5a>
c000b1df:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1e6:	85 db                	test   ebx,ebx
c000b1e8:	74 36                	je     c000b220 <Directory::close()+0x5a>
c000b1ea:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1f1:	74 2d                	je     c000b220 <Directory::close()+0x5a>
c000b1f3:	b8 05 00 00 00       	mov    eax,0x5
c000b1f8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1fc:	74 22                	je     c000b220 <Directory::close()+0x5a>
c000b1fe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b202:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b209:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b20f:	53                   	push   ebx
c000b210:	53                   	push   ebx
c000b211:	8b 10                	mov    edx,DWORD PTR [eax]
c000b213:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b219:	50                   	push   eax
c000b21a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	83 c4 08             	add    esp,0x8
c000b223:	5b                   	pop    ebx
c000b224:	c3                   	ret    
c000b225:	90                   	nop

c000b226 <Directory::unlink()>:
c000b226:	83 ec 0c             	sub    esp,0xc
c000b229:	b8 0b 00 00 00       	mov    eax,0xb
c000b22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b232:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b239:	80 f9 19             	cmp    cl,0x19
c000b23c:	77 2f                	ja     c000b26d <Directory::unlink()+0x47>
c000b23e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b245:	85 c9                	test   ecx,ecx
c000b247:	74 24                	je     c000b26d <Directory::unlink()+0x47>
c000b249:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b24f:	85 c9                	test   ecx,ecx
c000b251:	74 1a                	je     c000b26d <Directory::unlink()+0x47>
c000b253:	b8 06 00 00 00       	mov    eax,0x6
c000b258:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25c:	75 0f                	jne    c000b26d <Directory::unlink()+0x47>
c000b25e:	83 c2 0d             	add    edx,0xd
c000b261:	50                   	push   eax
c000b262:	50                   	push   eax
c000b263:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b265:	52                   	push   edx
c000b266:	51                   	push   ecx
c000b267:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b26a:	83 c4 10             	add    esp,0x10
c000b26d:	83 c4 0c             	add    esp,0xc
c000b270:	c3                   	ret    
c000b271:	90                   	nop

c000b272 <Directory::rename(char const*)>:
c000b272:	83 ec 0c             	sub    esp,0xc
c000b275:	b8 0b 00 00 00       	mov    eax,0xb
c000b27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b285:	80 f9 19             	cmp    cl,0x19
c000b288:	77 32                	ja     c000b2bc <Directory::rename(char const*)+0x4a>
c000b28a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b291:	85 c9                	test   ecx,ecx
c000b293:	74 27                	je     c000b2bc <Directory::rename(char const*)+0x4a>
c000b295:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b29b:	85 c9                	test   ecx,ecx
c000b29d:	74 1d                	je     c000b2bc <Directory::rename(char const*)+0x4a>
c000b29f:	b8 06 00 00 00       	mov    eax,0x6
c000b2a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a8:	75 12                	jne    c000b2bc <Directory::rename(char const*)+0x4a>
c000b2aa:	83 c2 0d             	add    edx,0xd
c000b2ad:	50                   	push   eax
c000b2ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b4:	52                   	push   edx
c000b2b5:	51                   	push   ecx
c000b2b6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2b9:	83 c4 10             	add    esp,0x10
c000b2bc:	83 c4 0c             	add    esp,0xc
c000b2bf:	c3                   	ret    

c000b2c0 <Directory::exists()>:
c000b2c0:	83 ec 0c             	sub    esp,0xc
c000b2c3:	31 c0                	xor    eax,eax
c000b2c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d0:	80 f9 19             	cmp    cl,0x19
c000b2d3:	77 24                	ja     c000b2f9 <Directory::exists()+0x39>
c000b2d5:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2dc:	85 c9                	test   ecx,ecx
c000b2de:	74 19                	je     c000b2f9 <Directory::exists()+0x39>
c000b2e0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e6:	85 c9                	test   ecx,ecx
c000b2e8:	74 0f                	je     c000b2f9 <Directory::exists()+0x39>
c000b2ea:	83 c2 0d             	add    edx,0xd
c000b2ed:	50                   	push   eax
c000b2ee:	50                   	push   eax
c000b2ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f1:	52                   	push   edx
c000b2f2:	51                   	push   ecx
c000b2f3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2f6:	83 c4 10             	add    esp,0x10
c000b2f9:	83 c4 0c             	add    esp,0xc
c000b2fc:	c3                   	ret    
c000b2fd:	90                   	nop

c000b2fe <Directory::read(dirent*)>:
c000b2fe:	83 ec 1c             	sub    esp,0x1c
c000b301:	b8 0b 00 00 00       	mov    eax,0xb
c000b306:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b311:	80 fa 19             	cmp    dl,0x19
c000b314:	77 30                	ja     c000b346 <Directory::read(dirent*)+0x48>
c000b316:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b31d:	85 d2                	test   edx,edx
c000b31f:	74 25                	je     c000b346 <Directory::read(dirent*)+0x48>
c000b321:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b328:	74 1c                	je     c000b346 <Directory::read(dirent*)+0x48>
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b32f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b333:	52                   	push   edx
c000b334:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b338:	6a 00                	push   0x0
c000b33a:	68 10 01 00 00       	push   0x110
c000b33f:	51                   	push   ecx
c000b340:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b343:	83 c4 20             	add    esp,0x20
c000b346:	83 c4 1c             	add    esp,0x1c
c000b349:	c3                   	ret    

c000b34a <Directory::create()>:
c000b34a:	83 ec 0c             	sub    esp,0xc
c000b34d:	b8 0b 00 00 00       	mov    eax,0xb
c000b352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b35d:	80 f9 19             	cmp    cl,0x19
c000b360:	77 2f                	ja     c000b391 <Directory::create()+0x47>
c000b362:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b369:	85 c9                	test   ecx,ecx
c000b36b:	74 24                	je     c000b391 <Directory::create()+0x47>
c000b36d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b373:	85 c9                	test   ecx,ecx
c000b375:	74 1a                	je     c000b391 <Directory::create()+0x47>
c000b377:	b8 06 00 00 00       	mov    eax,0x6
c000b37c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b380:	75 0f                	jne    c000b391 <Directory::create()+0x47>
c000b382:	83 c2 0d             	add    edx,0xd
c000b385:	50                   	push   eax
c000b386:	50                   	push   eax
c000b387:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b389:	52                   	push   edx
c000b38a:	51                   	push   ecx
c000b38b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	83 c4 0c             	add    esp,0xc
c000b394:	c3                   	ret    
c000b395:	90                   	nop

c000b396 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b396:	b8 0a 00 00 00       	mov    eax,0xa
c000b39b:	c3                   	ret    

c000b39c <Bus::Bus(char const*)>:
c000b39c:	83 ec 0c             	sub    esp,0xc
c000b39f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a3:	83 ec 08             	sub    esp,0x8
c000b3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3aa:	50                   	push   eax
c000b3ab:	e8 30 08 00 00       	call   c000bbe0 <Device::Device(char const*)>
c000b3b0:	83 c4 10             	add    esp,0x10
c000b3b3:	ba 08 f5 01 c0       	mov    edx,0xc001f508
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	89 10                	mov    DWORD PTR [eax],edx
c000b3be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3cc:	90                   	nop
c000b3cd:	83 c4 0c             	add    esp,0xc
c000b3d0:	c3                   	ret    
c000b3d1:	90                   	nop
c000b3d2:	66 90                	xchg   ax,ax

c000b3d4 <Bus::~Bus()>:
c000b3d4:	83 ec 0c             	sub    esp,0xc
c000b3d7:	ba 08 f5 01 c0       	mov    edx,0xc001f508
c000b3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e0:	89 10                	mov    DWORD PTR [eax],edx
c000b3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e6:	83 ec 0c             	sub    esp,0xc
c000b3e9:	50                   	push   eax
c000b3ea:	e8 5b 05 00 00       	call   c000b94a <Device::~Device()>
c000b3ef:	83 c4 10             	add    esp,0x10
c000b3f2:	90                   	nop
c000b3f3:	83 c4 0c             	add    esp,0xc
c000b3f6:	c3                   	ret    
c000b3f7:	90                   	nop

c000b3f8 <Bus::~Bus()>:
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 cd ff ff ff       	call   c000b3d4 <Bus::~Bus()>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 ec 08             	sub    esp,0x8
c000b40d:	68 58 01 00 00       	push   0x158
c000b412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b416:	e8 f9 f0 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b41b:	83 c4 10             	add    esp,0x10
c000b41e:	83 c4 0c             	add    esp,0xc
c000b421:	c3                   	ret    

c000b422 <beepThread(void*)>:
c000b422:	83 ec 0c             	sub    esp,0xc
c000b425:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b42a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b42e:	48                   	dec    eax
c000b42f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b434:	75 01                	jne    c000b437 <beepThread(void*)+0x15>
c000b436:	fb                   	sti    
c000b437:	83 ec 0c             	sub    esp,0xc
c000b43a:	6b c2 0a             	imul   eax,edx,0xa
c000b43d:	50                   	push   eax
c000b43e:	e8 d1 94 00 00       	call   c0014914 <milliTenthSleep(unsigned int)>
c000b443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b44a:	e8 b2 b2 00 00       	call   c0016701 <HalMakeBeep(int)>
c000b44f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b457:	83 c4 1c             	add    esp,0x1c
c000b45a:	e9 b1 93 00 00       	jmp    c0014810 <blockTask(TaskState)>

c000b45f <Krnl::beep(int, int, bool)>:
c000b45f:	56                   	push   esi
c000b460:	53                   	push   ebx
c000b461:	83 ec 10             	sub    esp,0x10
c000b464:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b468:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	e8 8c b2 00 00       	call   c0016701 <HalMakeBeep(int)>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	89 f0                	mov    eax,esi
c000b47a:	84 c0                	test   al,al
c000b47c:	74 1e                	je     c000b49c <Krnl::beep(int, int, bool)+0x3d>
c000b47e:	83 ec 0c             	sub    esp,0xc
c000b481:	6b db 0a             	imul   ebx,ebx,0xa
c000b484:	53                   	push   ebx
c000b485:	e8 8a 94 00 00       	call   c0014914 <milliTenthSleep(unsigned int)>
c000b48a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b492:	83 c4 14             	add    esp,0x14
c000b495:	5b                   	pop    ebx
c000b496:	5e                   	pop    esi
c000b497:	e9 65 b2 00 00       	jmp    c0016701 <HalMakeBeep(int)>
c000b49c:	68 e6 00 00 00       	push   0xe6
c000b4a1:	53                   	push   ebx
c000b4a2:	68 22 b4 00 c0       	push   0xc000b422
c000b4a7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4ad:	e8 42 8f 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c000b4b2:	83 c4 14             	add    esp,0x14
c000b4b5:	5b                   	pop    ebx
c000b4b6:	5e                   	pop    esi
c000b4b7:	c3                   	ret    

c000b4b8 <User::loadClockSettings(int)>:
c000b4b8:	53                   	push   ebx
c000b4b9:	83 ec 14             	sub    esp,0x14
c000b4bc:	68 14 01 00 00       	push   0x114
c000b4c1:	e8 af c3 ff ff       	call   c0007875 <malloc>
c000b4c6:	83 c4 0c             	add    esp,0xc
c000b4c9:	89 c3                	mov    ebx,eax
c000b4cb:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4d1:	68 2c f5 01 c0       	push   0xc001f52c
c000b4d6:	50                   	push   eax
c000b4d7:	e8 a4 f6 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000b4dc:	58                   	pop    eax
c000b4dd:	5a                   	pop    edx
c000b4de:	6a 01                	push   0x1
c000b4e0:	53                   	push   ebx
c000b4e1:	e8 5a f7 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000b4e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4e9:	e8 b0 f7 ff ff       	call   c000ac9e <File::close()>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	85 db                	test   ebx,ebx
c000b4f3:	74 0f                	je     c000b504 <User::loadClockSettings(int)+0x4c>
c000b4f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4fe:	83 c4 08             	add    esp,0x8
c000b501:	5b                   	pop    ebx
c000b502:	ff e0                	jmp    eax
c000b504:	83 c4 08             	add    esp,0x8
c000b507:	5b                   	pop    ebx
c000b508:	c3                   	ret    
c000b509:	90                   	nop

c000b50a <Clock::Clock(char const*)>:
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b511:	83 ec 08             	sub    esp,0x8
c000b514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b518:	50                   	push   eax
c000b519:	e8 c2 06 00 00       	call   c000bbe0 <Device::Device(char const*)>
c000b51e:	83 c4 10             	add    esp,0x10
c000b521:	ba 54 f5 01 c0       	mov    edx,0xc001f554
c000b526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52a:	89 10                	mov    DWORD PTR [eax],edx
c000b52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b530:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b53a:	90                   	nop
c000b53b:	83 c4 0c             	add    esp,0xc
c000b53e:	c3                   	ret    
c000b53f:	90                   	nop

c000b540 <Clock::~Clock()>:
c000b540:	83 ec 0c             	sub    esp,0xc
c000b543:	ba 54 f5 01 c0       	mov    edx,0xc001f554
c000b548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b54c:	89 10                	mov    DWORD PTR [eax],edx
c000b54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b552:	83 ec 0c             	sub    esp,0xc
c000b555:	50                   	push   eax
c000b556:	e8 ef 03 00 00       	call   c000b94a <Device::~Device()>
c000b55b:	83 c4 10             	add    esp,0x10
c000b55e:	90                   	nop
c000b55f:	83 c4 0c             	add    esp,0xc
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Clock::~Clock()>:
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	83 ec 0c             	sub    esp,0xc
c000b56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56e:	e8 cd ff ff ff       	call   c000b540 <Clock::~Clock()>
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	83 ec 08             	sub    esp,0x8
c000b579:	68 58 01 00 00       	push   0x158
c000b57e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b582:	e8 8d ef ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	83 c4 0c             	add    esp,0xc
c000b58d:	c3                   	ret    

c000b58e <Clock::timeInSecondsLocal()>:
c000b58e:	53                   	push   ebx
c000b58f:	83 ec 14             	sub    esp,0x14
c000b592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b596:	8b 10                	mov    edx,DWORD PTR [eax]
c000b598:	50                   	push   eax
c000b599:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b59c:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b5a3:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5a9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5af:	89 cb                	mov    ebx,ecx
c000b5b1:	c1 fb 1f             	sar    ebx,0x1f
c000b5b4:	01 c8                	add    eax,ecx
c000b5b6:	11 da                	adc    edx,ebx
c000b5b8:	83 c4 10             	add    esp,0x10
c000b5bb:	31 c9                	xor    ecx,ecx
c000b5bd:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5c4:	74 05                	je     c000b5cb <Clock::timeInSecondsLocal()+0x3d>
c000b5c6:	b9 08 07 00 00       	mov    ecx,0x708
c000b5cb:	31 db                	xor    ebx,ebx
c000b5cd:	01 c8                	add    eax,ecx
c000b5cf:	11 da                	adc    edx,ebx
c000b5d1:	83 c4 08             	add    esp,0x8
c000b5d4:	5b                   	pop    ebx
c000b5d5:	c3                   	ret    

c000b5d6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5d6:	57                   	push   edi
c000b5d7:	56                   	push   esi
c000b5d8:	53                   	push   ebx
c000b5d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5e7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5ea:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5f1:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5f7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5fd:	99                   	cdq    
c000b5fe:	29 c6                	sub    esi,eax
c000b600:	19 d7                	sbb    edi,edx
c000b602:	89 f0                	mov    eax,esi
c000b604:	89 fa                	mov    edx,edi
c000b606:	31 f6                	xor    esi,esi
c000b608:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60f:	74 05                	je     c000b616 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b611:	be 08 07 00 00       	mov    esi,0x708
c000b616:	31 ff                	xor    edi,edi
c000b618:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b61c:	29 f0                	sub    eax,esi
c000b61e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b622:	19 fa                	sbb    edx,edi
c000b624:	89 d8                	mov    eax,ebx
c000b626:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b62a:	5b                   	pop    ebx
c000b62b:	5e                   	pop    esi
c000b62c:	5f                   	pop    edi
c000b62d:	ff e0                	jmp    eax

c000b62f <datetimeToSeconds(datetime_t)>:
c000b62f:	55                   	push   ebp
c000b630:	57                   	push   edi
c000b631:	56                   	push   esi
c000b632:	53                   	push   ebx
c000b633:	83 ec 14             	sub    esp,0x14
c000b636:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b63a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b63e:	89 d3                	mov    ebx,edx
c000b640:	0f b6 c6             	movzx  eax,dh
c000b643:	c1 eb 10             	shr    ebx,0x10
c000b646:	48                   	dec    eax
c000b647:	66 81 eb 6c 07       	sub    bx,0x76c
c000b64c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b650:	0f b6 f5             	movzx  esi,ch
c000b653:	89 cf                	mov    edi,ecx
c000b655:	6b f6 3c             	imul   esi,esi,0x3c
c000b658:	c1 ef 10             	shr    edi,0x10
c000b65b:	0f b6 c9             	movzx  ecx,cl
c000b65e:	89 f8                	mov    eax,edi
c000b660:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b666:	0f b6 f8             	movzx  edi,al
c000b669:	0f b6 d2             	movzx  edx,dl
c000b66c:	01 fe                	add    esi,edi
c000b66e:	01 f1                	add    ecx,esi
c000b670:	0f b7 f3             	movzx  esi,bx
c000b673:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b677:	c1 f9 1f             	sar    ecx,0x1f
c000b67a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b67f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b683:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b688:	8b 0c 8d a0 f5 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe0a60]
c000b68f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b693:	76 29                	jbe    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b695:	f6 c3 03             	test   bl,0x3
c000b698:	75 24                	jne    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b69a:	31 d2                	xor    edx,edx
c000b69c:	bf 64 00 00 00       	mov    edi,0x64
c000b6a1:	89 d8                	mov    eax,ebx
c000b6a3:	66 f7 f7             	div    di
c000b6a6:	66 85 d2             	test   dx,dx
c000b6a9:	75 12                	jne    c000b6bd <datetimeToSeconds(datetime_t)+0x8e>
c000b6ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6b1:	bf 90 01 00 00       	mov    edi,0x190
c000b6b6:	99                   	cdq    
c000b6b7:	f7 ff                	idiv   edi
c000b6b9:	85 d2                	test   edx,edx
c000b6bb:	75 01                	jne    c000b6be <datetimeToSeconds(datetime_t)+0x8f>
c000b6bd:	41                   	inc    ecx
c000b6be:	66 83 fb 46          	cmp    bx,0x46
c000b6c2:	76 45                	jbe    c000b709 <datetimeToSeconds(datetime_t)+0xda>
c000b6c4:	bb 46 00 00 00       	mov    ebx,0x46
c000b6c9:	bf 64 00 00 00       	mov    edi,0x64
c000b6ce:	bd 90 01 00 00       	mov    ebp,0x190
c000b6d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6d8:	f6 c3 03             	test   bl,0x3
c000b6db:	75 23                	jne    c000b700 <datetimeToSeconds(datetime_t)+0xd1>
c000b6dd:	89 d8                	mov    eax,ebx
c000b6df:	99                   	cdq    
c000b6e0:	f7 ff                	idiv   edi
c000b6e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6e7:	85 d2                	test   edx,edx
c000b6e9:	75 15                	jne    c000b700 <datetimeToSeconds(datetime_t)+0xd1>
c000b6eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6f1:	99                   	cdq    
c000b6f2:	f7 fd                	idiv   ebp
c000b6f4:	31 c0                	xor    eax,eax
c000b6f6:	85 d2                	test   edx,edx
c000b6f8:	0f 94 c0             	sete   al
c000b6fb:	05 6d 01 00 00       	add    eax,0x16d
c000b700:	01 c1                	add    ecx,eax
c000b702:	43                   	inc    ebx
c000b703:	39 f3                	cmp    ebx,esi
c000b705:	7c cc                	jl     c000b6d3 <datetimeToSeconds(datetime_t)+0xa4>
c000b707:	eb 3b                	jmp    c000b744 <datetimeToSeconds(datetime_t)+0x115>
c000b709:	74 39                	je     c000b744 <datetimeToSeconds(datetime_t)+0x115>
c000b70b:	b8 45 00 00 00       	mov    eax,0x45
c000b710:	89 c2                	mov    edx,eax
c000b712:	83 e2 03             	and    edx,0x3
c000b715:	39 f0                	cmp    eax,esi
c000b717:	7e 13                	jle    c000b72c <datetimeToSeconds(datetime_t)+0xfd>
c000b719:	85 d2                	test   edx,edx
c000b71b:	0f 94 c2             	sete   dl
c000b71e:	48                   	dec    eax
c000b71f:	0f b6 d2             	movzx  edx,dl
c000b722:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b728:	29 d1                	sub    ecx,edx
c000b72a:	eb e4                	jmp    c000b710 <datetimeToSeconds(datetime_t)+0xe1>
c000b72c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b731:	85 d2                	test   edx,edx
c000b733:	75 0d                	jne    c000b742 <datetimeToSeconds(datetime_t)+0x113>
c000b735:	31 c0                	xor    eax,eax
c000b737:	66 85 db             	test   bx,bx
c000b73a:	0f 95 c0             	setne  al
c000b73d:	05 6d 01 00 00       	add    eax,0x16d
c000b742:	29 c1                	sub    ecx,eax
c000b744:	b8 80 51 01 00       	mov    eax,0x15180
c000b749:	f7 e9                	imul   ecx
c000b74b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b74f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b753:	83 c4 14             	add    esp,0x14
c000b756:	5b                   	pop    ebx
c000b757:	5e                   	pop    esi
c000b758:	5f                   	pop    edi
c000b759:	5d                   	pop    ebp
c000b75a:	c3                   	ret    
c000b75b:	90                   	nop

c000b75c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b75c:	57                   	push   edi
c000b75d:	56                   	push   esi
c000b75e:	53                   	push   ebx
c000b75f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b763:	8b 06                	mov    eax,DWORD PTR [esi]
c000b765:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b768:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b770:	e8 ba fe ff ff       	call   c000b62f <datetimeToSeconds(datetime_t)>
c000b775:	59                   	pop    ecx
c000b776:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b77d:	5b                   	pop    ebx
c000b77e:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b784:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b78a:	89 cb                	mov    ebx,ecx
c000b78c:	c1 fb 1f             	sar    ebx,0x1f
c000b78f:	29 c8                	sub    eax,ecx
c000b791:	19 da                	sbb    edx,ebx
c000b793:	31 c9                	xor    ecx,ecx
c000b795:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b79c:	74 05                	je     c000b7a3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b79e:	b9 08 07 00 00       	mov    ecx,0x708
c000b7a3:	31 db                	xor    ebx,ebx
c000b7a5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7a9:	29 c8                	sub    eax,ecx
c000b7ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7af:	19 da                	sbb    edx,ebx
c000b7b1:	89 f8                	mov    eax,edi
c000b7b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7b7:	5b                   	pop    ebx
c000b7b8:	5e                   	pop    esi
c000b7b9:	5f                   	pop    edi
c000b7ba:	ff e0                	jmp    eax

c000b7bc <secondsToDatetime(unsigned long long)>:
c000b7bc:	55                   	push   ebp
c000b7bd:	57                   	push   edi
c000b7be:	56                   	push   esi
c000b7bf:	53                   	push   ebx
c000b7c0:	83 ec 1c             	sub    esp,0x1c
c000b7c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7c7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7cf:	6a 00                	push   0x0
c000b7d1:	68 80 51 01 00       	push   0x15180
c000b7d6:	55                   	push   ebp
c000b7d7:	57                   	push   edi
c000b7d8:	e8 53 20 01 00       	call   c001d830 <__udivdi3>
c000b7dd:	83 c4 10             	add    esp,0x10
c000b7e0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ea:	6a 00                	push   0x0
c000b7ec:	68 80 51 01 00       	push   0x15180
c000b7f1:	55                   	push   ebp
c000b7f2:	57                   	push   edi
c000b7f3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7f8:	e8 33 21 01 00       	call   c001d930 <__umoddi3>
c000b7fd:	83 c4 10             	add    esp,0x10
c000b800:	99                   	cdq    
c000b801:	f7 ff                	idiv   edi
c000b803:	bf 3c 00 00 00       	mov    edi,0x3c
c000b808:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b80b:	89 d0                	mov    eax,edx
c000b80d:	99                   	cdq    
c000b80e:	f7 ff                	idiv   edi
c000b810:	85 db                	test   ebx,ebx
c000b812:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b815:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b818:	79 11                	jns    c000b82b <secondsToDatetime(unsigned long long)+0x6f>
c000b81a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b81e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b824:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b829:	eb 07                	jmp    c000b832 <secondsToDatetime(unsigned long long)+0x76>
c000b82b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b830:	89 d8                	mov    eax,ebx
c000b832:	bf b4 05 00 00       	mov    edi,0x5b4
c000b837:	99                   	cdq    
c000b838:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b83d:	f7 f9                	idiv   ecx
c000b83f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b844:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b848:	31 d2                	xor    edx,edx
c000b84a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b852:	01 c3                	add    ebx,eax
c000b854:	89 d8                	mov    eax,ebx
c000b856:	f7 f1                	div    ecx
c000b858:	31 d2                	xor    edx,edx
c000b85a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b85d:	89 d8                	mov    eax,ebx
c000b85f:	f7 f7                	div    edi
c000b861:	31 d2                	xor    edx,edx
c000b863:	29 c1                	sub    ecx,eax
c000b865:	89 d8                	mov    eax,ebx
c000b867:	f7 f5                	div    ebp
c000b869:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b86e:	29 c1                	sub    ecx,eax
c000b870:	31 d2                	xor    edx,edx
c000b872:	89 c8                	mov    eax,ecx
c000b874:	f7 f5                	div    ebp
c000b876:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b87f:	31 d2                	xor    edx,edx
c000b881:	89 c8                	mov    eax,ecx
c000b883:	f7 f5                	div    ebp
c000b885:	31 d2                	xor    edx,edx
c000b887:	01 c3                	add    ebx,eax
c000b889:	89 c8                	mov    eax,ecx
c000b88b:	f7 f7                	div    edi
c000b88d:	bf 99 00 00 00       	mov    edi,0x99
c000b892:	29 c3                	sub    ebx,eax
c000b894:	31 d2                	xor    edx,edx
c000b896:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b89e:	29 c3                	sub    ebx,eax
c000b8a0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8a3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8a6:	bb 05 00 00 00       	mov    ebx,0x5
c000b8ab:	83 c1 02             	add    ecx,0x2
c000b8ae:	89 c8                	mov    eax,ecx
c000b8b0:	f7 f7                	div    edi
c000b8b2:	31 d2                	xor    edx,edx
c000b8b4:	89 c7                	mov    edi,eax
c000b8b6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8bc:	83 c0 02             	add    eax,0x2
c000b8bf:	f7 f3                	div    ebx
c000b8c1:	89 eb                	mov    ebx,ebp
c000b8c3:	29 c3                	sub    ebx,eax
c000b8c5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8cb:	88 1e                	mov    BYTE PTR [esi],bl
c000b8cd:	19 c0                	sbb    eax,eax
c000b8cf:	31 d2                	xor    edx,edx
c000b8d1:	83 e0 0c             	and    eax,0xc
c000b8d4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8d8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e4:	83 f9 01             	cmp    ecx,0x1
c000b8e7:	0f 96 c2             	setbe  dl
c000b8ea:	41                   	inc    ecx
c000b8eb:	01 d0                	add    eax,edx
c000b8ed:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8f0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f4:	83 c4 1c             	add    esp,0x1c
c000b8f7:	89 f0                	mov    eax,esi
c000b8f9:	5b                   	pop    ebx
c000b8fa:	5e                   	pop    esi
c000b8fb:	5f                   	pop    edi
c000b8fc:	5d                   	pop    ebp
c000b8fd:	c2 04 00             	ret    0x4

c000b900 <Clock::timeInDatetimeLocal()>:
c000b900:	53                   	push   ebx
c000b901:	83 ec 14             	sub    esp,0x14
c000b904:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b908:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b90c:	e8 7d fc ff ff       	call   c000b58e <Clock::timeInSecondsLocal()>
c000b911:	83 c4 0c             	add    esp,0xc
c000b914:	52                   	push   edx
c000b915:	50                   	push   eax
c000b916:	53                   	push   ebx
c000b917:	e8 a0 fe ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c000b91c:	89 d8                	mov    eax,ebx
c000b91e:	83 c4 14             	add    esp,0x14
c000b921:	5b                   	pop    ebx
c000b922:	c2 04 00             	ret    0x4
c000b925:	90                   	nop

c000b926 <Device::hibernate()>:
c000b926:	c3                   	ret    
c000b927:	90                   	nop

c000b928 <Device::wake()>:
c000b928:	c3                   	ret    
c000b929:	90                   	nop

c000b92a <Device::detect()>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::disableLegacy()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::powerSaving(PowerSavingLevel)>:
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <DriverlessDevice::close(int, int, void*)>:
c000b930:	31 c0                	xor    eax,eax
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <DriverlessDevice::detect()>:
c000b934:	c3                   	ret    
c000b935:	90                   	nop

c000b936 <DriverlessDevice::open(int, int, void*)>:
c000b936:	83 ec 18             	sub    esp,0x18
c000b939:	68 d0 f5 01 c0       	push   0xc001f5d0
c000b93e:	e8 c8 49 00 00       	call   c001030b <KePanic(char const*)>
c000b943:	83 c8 ff             	or     eax,0xffffffff
c000b946:	83 c4 1c             	add    esp,0x1c
c000b949:	c3                   	ret    

c000b94a <Device::~Device()>:
c000b94a:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c000b94f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b953:	89 10                	mov    DWORD PTR [eax],edx
c000b955:	90                   	nop
c000b956:	c3                   	ret    
c000b957:	90                   	nop

c000b958 <Device::~Device()>:
c000b958:	83 ec 0c             	sub    esp,0xc
c000b95b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b95f:	e8 e6 ff ff ff       	call   c000b94a <Device::~Device()>
c000b964:	83 c4 04             	add    esp,0x4
c000b967:	83 ec 08             	sub    esp,0x8
c000b96a:	68 58 01 00 00       	push   0x158
c000b96f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b973:	e8 9c eb ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000b978:	83 c4 10             	add    esp,0x10
c000b97b:	83 c4 0c             	add    esp,0xc
c000b97e:	c3                   	ret    
c000b97f:	90                   	nop

c000b980 <Device::findAndLoadDriver()>:
c000b980:	c7 44 24 04 ee f5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f5ee
c000b988:	e9 7d ec ff ff       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000b98d:	90                   	nop

c000b98e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b98e:	57                   	push   edi
c000b98f:	b9 09 00 00 00       	mov    ecx,0x9
c000b994:	56                   	push   esi
c000b995:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b999:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b99d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9a7:	81 c7 18 01 00 00    	add    edi,0x118
c000b9ad:	fc                   	cld    
c000b9ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9b0:	5e                   	pop    esi
c000b9b1:	5f                   	pop    edi
c000b9b2:	c3                   	ret    
c000b9b3:	90                   	nop

c000b9b4 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b4:	57                   	push   edi
c000b9b5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9ba:	56                   	push   esi
c000b9bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9cd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9d3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9df:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9ea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9f0:	5e                   	pop    esi
c000b9f1:	5f                   	pop    edi
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f4:	53                   	push   ebx
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba05:	0f b6 c0             	movzx  eax,al
c000ba08:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba14:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba18:	5b                   	pop    ebx
c000ba19:	e9 a6 05 00 00       	jmp    c000bfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba1e <Device::getParent()>:
c000ba1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba22:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba28:	c3                   	ret    
c000ba29:	90                   	nop

c000ba2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba32:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba37:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba43:	e9 e8 06 00 00       	jmp    c000c130 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba48 <Device::addChild(Device*)>:
c000ba48:	53                   	push   ebx
c000ba49:	83 ec 08             	sub    esp,0x8
c000ba4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba54:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba5a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba60:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba62:	85 d2                	test   edx,edx
c000ba64:	74 04                	je     c000ba6a <Device::addChild(Device*)+0x22>
c000ba66:	89 d3                	mov    ebx,edx
c000ba68:	eb f6                	jmp    c000ba60 <Device::addChild(Device*)+0x18>
c000ba6a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba6d:	83 ec 0c             	sub    esp,0xc
c000ba70:	6a 08                	push   0x8
c000ba72:	e8 fe bd ff ff       	call   c0007875 <malloc>
c000ba77:	89 03                	mov    DWORD PTR [ebx],eax
c000ba79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba86:	83 c4 18             	add    esp,0x18
c000ba89:	5b                   	pop    ebx
c000ba8a:	c3                   	ret    
c000ba8b:	90                   	nop

c000ba8c <Device::removeAllChildren()>:
c000ba8c:	56                   	push   esi
c000ba8d:	53                   	push   ebx
c000ba8e:	52                   	push   edx
c000ba8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba93:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba9c:	74 17                	je     c000bab5 <Device::removeAllChildren()+0x29>
c000ba9e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baa1:	85 c0                	test   eax,eax
c000baa3:	74 0c                	je     c000bab1 <Device::removeAllChildren()+0x25>
c000baa5:	83 ec 0c             	sub    esp,0xc
c000baa8:	8b 10                	mov    edx,DWORD PTR [eax]
c000baaa:	50                   	push   eax
c000baab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baae:	83 c4 10             	add    esp,0x10
c000bab1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab3:	eb e4                	jmp    c000ba99 <Device::removeAllChildren()+0xd>
c000bab5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bace:	58                   	pop    eax
c000bacf:	5b                   	pop    ebx
c000bad0:	5e                   	pop    esi
c000bad1:	c3                   	ret    

c000bad2 <Device::hibernateAll()>:
c000bad2:	53                   	push   ebx
c000bad3:	83 ec 14             	sub    esp,0x14
c000bad6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bada:	8b 03                	mov    eax,DWORD PTR [ebx]
c000badc:	53                   	push   ebx
c000badd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bae0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bae6:	83 c4 10             	add    esp,0x10
c000bae9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baec:	74 0f                	je     c000bafd <Device::hibernateAll()+0x2b>
c000baee:	83 ec 0c             	sub    esp,0xc
c000baf1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf4:	e8 d9 ff ff ff       	call   c000bad2 <Device::hibernateAll()>
c000baf9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bafb:	eb e9                	jmp    c000bae6 <Device::hibernateAll()+0x14>
c000bafd:	83 c4 08             	add    esp,0x8
c000bb00:	5b                   	pop    ebx
c000bb01:	c3                   	ret    

c000bb02 <Device::wakeAll()>:
c000bb02:	53                   	push   ebx
c000bb03:	83 ec 14             	sub    esp,0x14
c000bb06:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb0c:	53                   	push   ebx
c000bb0d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb10:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb1c:	74 0f                	je     c000bb2d <Device::wakeAll()+0x2b>
c000bb1e:	83 ec 0c             	sub    esp,0xc
c000bb21:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb24:	e8 d9 ff ff ff       	call   c000bb02 <Device::wakeAll()>
c000bb29:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb2b:	eb e9                	jmp    c000bb16 <Device::wakeAll()+0x14>
c000bb2d:	83 c4 08             	add    esp,0x8
c000bb30:	5b                   	pop    ebx
c000bb31:	c3                   	ret    

c000bb32 <Device::detectAll()>:
c000bb32:	53                   	push   ebx
c000bb33:	83 ec 14             	sub    esp,0x14
c000bb36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb3c:	53                   	push   ebx
c000bb3d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb40:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb4c:	74 0f                	je     c000bb5d <Device::detectAll()+0x2b>
c000bb4e:	83 ec 0c             	sub    esp,0xc
c000bb51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb54:	e8 d9 ff ff ff       	call   c000bb32 <Device::detectAll()>
c000bb59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5b:	eb e9                	jmp    c000bb46 <Device::detectAll()+0x14>
c000bb5d:	83 c4 08             	add    esp,0x8
c000bb60:	5b                   	pop    ebx
c000bb61:	c3                   	ret    

c000bb62 <Device::disableLegacyAll()>:
c000bb62:	c3                   	ret    
c000bb63:	90                   	nop

c000bb64 <Device::loadDriversForAll()>:
c000bb64:	c3                   	ret    
c000bb65:	90                   	nop

c000bb66 <Device::closeAll()>:
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 08             	sub    esp,0x8
c000bb6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb70:	6a 00                	push   0x0
c000bb72:	6a 00                	push   0x0
c000bb74:	6a 00                	push   0x0
c000bb76:	53                   	push   ebx
c000bb77:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb7a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb86:	74 0f                	je     c000bb97 <Device::closeAll()+0x31>
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb8e:	e8 d3 ff ff ff       	call   c000bb66 <Device::closeAll()>
c000bb93:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb95:	eb e9                	jmp    c000bb80 <Device::closeAll()+0x1a>
c000bb97:	83 c4 08             	add    esp,0x8
c000bb9a:	5b                   	pop    ebx
c000bb9b:	c3                   	ret    

c000bb9c <Device::powerSavingAll(PowerSavingLevel)>:
c000bb9c:	56                   	push   esi
c000bb9d:	53                   	push   ebx
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbab:	56                   	push   esi
c000bbac:	53                   	push   ebx
c000bbad:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbb0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbb6:	83 c4 10             	add    esp,0x10
c000bbb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbbc:	74 0f                	je     c000bbcd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbbe:	52                   	push   edx
c000bbbf:	52                   	push   edx
c000bbc0:	56                   	push   esi
c000bbc1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc4:	e8 d3 ff ff ff       	call   c000bb9c <Device::powerSavingAll(PowerSavingLevel)>
c000bbc9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcb:	eb e9                	jmp    c000bbb6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbcd:	58                   	pop    eax
c000bbce:	5b                   	pop    ebx
c000bbcf:	5e                   	pop    esi
c000bbd0:	c3                   	ret    
c000bbd1:	90                   	nop

c000bbd2 <Device::setName(char const*)>:
c000bbd2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbda:	e9 21 4a ff ff       	jmp    c0000600 <strcpy>
c000bbdf:	90                   	nop

c000bbe0 <Device::Device(char const*)>:
c000bbe0:	83 ec 1c             	sub    esp,0x1c
c000bbe3:	ba 30 f6 01 c0       	mov    edx,0xc001f630
c000bbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbec:	89 10                	mov    DWORD PTR [eax],edx
c000bbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc00:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc1c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc26:	83 ec 08             	sub    esp,0x8
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 9c ff ff ff       	call   c000bbd2 <Device::setName(char const*)>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc41:	83 ec 0c             	sub    esp,0xc
c000bc44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc48:	e8 28 bc ff ff       	call   c0007875 <malloc>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc61:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc71:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc97:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bccc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bcd6:	90                   	nop
c000bcd7:	83 c4 1c             	add    esp,0x1c
c000bcda:	c3                   	ret    
c000bcdb:	90                   	nop

c000bcdc <Device::getName()>:
c000bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce0:	05 d0 00 00 00       	add    eax,0xd0
c000bce5:	c3                   	ret    

c000bce6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bce6:	83 ec 0c             	sub    esp,0xc
c000bce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bced:	83 ec 08             	sub    esp,0x8
c000bcf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf4:	50                   	push   eax
c000bcf5:	e8 e6 fe ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000bcfa:	83 c4 10             	add    esp,0x10
c000bcfd:	ba 5c f6 01 c0       	mov    edx,0xc001f65c
c000bd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd06:	89 10                	mov    DWORD PTR [eax],edx
c000bd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd16:	90                   	nop
c000bd17:	83 c4 0c             	add    esp,0xc
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd1c:	57                   	push   edi
c000bd1d:	56                   	push   esi
c000bd1e:	53                   	push   ebx
c000bd1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd23:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd2b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd31:	75 0c                	jne    c000bd3f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd33:	52                   	push   edx
c000bd34:	52                   	push   edx
c000bd35:	53                   	push   ebx
c000bd36:	56                   	push   esi
c000bd37:	e8 a6 1f 01 00       	call   c001dce2 <LinkedList<Device>::addElement(Device*)>
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd45:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd48:	74 12                	je     c000bd5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd4a:	50                   	push   eax
c000bd4b:	57                   	push   edi
c000bd4c:	56                   	push   esi
c000bd4d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd50:	e8 c7 ff ff ff       	call   c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd57:	83 c4 10             	add    esp,0x10
c000bd5a:	eb e9                	jmp    c000bd45 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd5c:	5b                   	pop    ebx
c000bd5d:	5e                   	pop    esi
c000bd5e:	5f                   	pop    edi
c000bd5f:	c3                   	ret    

c000bd60 <getDevicesOfType(DeviceType)>:
c000bd60:	53                   	push   ebx
c000bd61:	83 ec 14             	sub    esp,0x14
c000bd64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd68:	53                   	push   ebx
c000bd69:	e8 50 20 01 00       	call   c001ddbe <LinkedList<Device>::LinkedList()>
c000bd6e:	83 c4 0c             	add    esp,0xc
c000bd71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd75:	53                   	push   ebx
c000bd76:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd7c:	e8 9b ff ff ff       	call   c000bd1c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd81:	89 d8                	mov    eax,ebx
c000bd83:	83 c4 18             	add    esp,0x18
c000bd86:	5b                   	pop    ebx
c000bd87:	c2 04 00             	ret    0x4
c000bd8a:	66 90                	xchg   ax,ax

c000bd8c <HardDiskController::HardDiskController(char const*)>:
c000bd8c:	83 ec 0c             	sub    esp,0xc
c000bd8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd93:	83 ec 08             	sub    esp,0x8
c000bd96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9a:	50                   	push   eax
c000bd9b:	e8 40 fe ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	ba 88 f6 01 c0       	mov    edx,0xc001f688
c000bda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdac:	89 10                	mov    DWORD PTR [eax],edx
c000bdae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdbc:	90                   	nop
c000bdbd:	83 c4 0c             	add    esp,0xc
c000bdc0:	c3                   	ret    
c000bdc1:	90                   	nop
c000bdc2:	66 90                	xchg   ax,ax

c000bdc4 <HardDiskController::~HardDiskController()>:
c000bdc4:	83 ec 0c             	sub    esp,0xc
c000bdc7:	ba 88 f6 01 c0       	mov    edx,0xc001f688
c000bdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd0:	89 10                	mov    DWORD PTR [eax],edx
c000bdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	50                   	push   eax
c000bdda:	e8 6b fb ff ff       	call   c000b94a <Device::~Device()>
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	90                   	nop
c000bde3:	83 c4 0c             	add    esp,0xc
c000bde6:	c3                   	ret    
c000bde7:	90                   	nop

c000bde8 <HardDiskController::~HardDiskController()>:
c000bde8:	83 ec 0c             	sub    esp,0xc
c000bdeb:	83 ec 0c             	sub    esp,0xc
c000bdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf2:	e8 cd ff ff ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	83 ec 08             	sub    esp,0x8
c000bdfd:	68 58 01 00 00       	push   0x158
c000be02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be06:	e8 09 e7 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	83 c4 0c             	add    esp,0xc
c000be11:	c3                   	ret    

c000be12 <PhysicalDisk::eject()>:
c000be12:	83 c8 ff             	or     eax,0xffffffff
c000be15:	c3                   	ret    

c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be16:	83 ec 0c             	sub    esp,0xc
c000be19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1d:	83 ec 08             	sub    esp,0x8
c000be20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be24:	50                   	push   eax
c000be25:	e8 b6 fd ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	ba b4 f6 01 c0       	mov    edx,0xc001f6b4
c000be32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be36:	89 10                	mov    DWORD PTR [eax],edx
c000be38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be52:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be78:	90                   	nop
c000be79:	83 c4 0c             	add    esp,0xc
c000be7c:	c3                   	ret    
c000be7d:	90                   	nop

c000be7e <PhysicalDisk::startCache()>:
c000be7e:	56                   	push   esi
c000be7f:	53                   	push   ebx
c000be80:	83 ec 10             	sub    esp,0x10
c000be83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be87:	6a 44                	push   0x44
c000be89:	e8 e7 b9 ff ff       	call   c0007875 <malloc>
c000be8e:	89 c6                	mov    esi,eax
c000be90:	58                   	pop    eax
c000be91:	5a                   	pop    edx
c000be92:	53                   	push   ebx
c000be93:	56                   	push   esi
c000be94:	e8 e7 15 00 00       	call   c000d480 <VCache::VCache(PhysicalDisk*)>
c000be99:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be9f:	83 c4 14             	add    esp,0x14
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	c3                   	ret    
c000bea5:	90                   	nop

c000bea6 <PhysicalDisk::~PhysicalDisk()>:
c000bea6:	83 ec 0c             	sub    esp,0xc
c000bea9:	ba b4 f6 01 c0       	mov    edx,0xc001f6b4
c000beae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb2:	89 10                	mov    DWORD PTR [eax],edx
c000beb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb8:	83 ec 0c             	sub    esp,0xc
c000bebb:	50                   	push   eax
c000bebc:	e8 89 fa ff ff       	call   c000b94a <Device::~Device()>
c000bec1:	83 c4 10             	add    esp,0x10
c000bec4:	90                   	nop
c000bec5:	83 c4 0c             	add    esp,0xc
c000bec8:	c3                   	ret    
c000bec9:	90                   	nop

c000beca <PhysicalDisk::~PhysicalDisk()>:
c000beca:	83 ec 0c             	sub    esp,0xc
c000becd:	83 ec 0c             	sub    esp,0xc
c000bed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed4:	e8 cd ff ff ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	83 ec 08             	sub    esp,0x8
c000bedf:	68 6c 01 00 00       	push   0x16c
c000bee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bee8:	e8 27 e6 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	83 c4 0c             	add    esp,0xc
c000bef3:	c3                   	ret    

c000bef4 <int_handler>:
c000bef4:	55                   	push   ebp
c000bef5:	57                   	push   edi
c000bef6:	56                   	push   esi
c000bef7:	53                   	push   ebx
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beff:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf06:	74 0b                	je     c000bf13 <int_handler+0x1f>
c000bf08:	fa                   	cli    
c000bf09:	f4                   	hlt    
c000bf0a:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf11:	75 f5                	jne    c000bf08 <int_handler+0x14>
c000bf13:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf16:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf19:	83 f8 17             	cmp    eax,0x17
c000bf1c:	76 3e                	jbe    c000bf5c <int_handler+0x68>
c000bf1e:	c1 e6 04             	shl    esi,0x4
c000bf21:	31 db                	xor    ebx,ebx
c000bf23:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf29:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf33:	85 c0                	test   eax,eax
c000bf35:	74 13                	je     c000bf4a <int_handler+0x56>
c000bf37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf3a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf3e:	74 2a                	je     c000bf6a <int_handler+0x76>
c000bf40:	83 ec 08             	sub    esp,0x8
c000bf43:	52                   	push   edx
c000bf44:	57                   	push   edi
c000bf45:	ff d0                	call   eax
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	43                   	inc    ebx
c000bf4b:	83 fb 04             	cmp    ebx,0x4
c000bf4e:	75 df                	jne    c000bf2f <int_handler+0x3b>
c000bf50:	83 c4 0c             	add    esp,0xc
c000bf53:	31 c0                	xor    eax,eax
c000bf55:	5b                   	pop    ebx
c000bf56:	31 d2                	xor    edx,edx
c000bf58:	5e                   	pop    esi
c000bf59:	5f                   	pop    edi
c000bf5a:	5d                   	pop    ebp
c000bf5b:	c3                   	ret    
c000bf5c:	83 ec 0c             	sub    esp,0xc
c000bf5f:	50                   	push   eax
c000bf60:	e8 d9 a7 00 00       	call   c001673e <HalEndOfInterrupt(int)>
c000bf65:	83 c4 10             	add    esp,0x10
c000bf68:	eb b4                	jmp    c000bf1e <int_handler+0x2a>
c000bf6a:	83 ec 08             	sub    esp,0x8
c000bf6d:	52                   	push   edx
c000bf6e:	57                   	push   edi
c000bf6f:	ff d0                	call   eax
c000bf71:	83 c4 10             	add    esp,0x10
c000bf74:	83 c4 0c             	add    esp,0xc
c000bf77:	5b                   	pop    ebx
c000bf78:	5e                   	pop    esi
c000bf79:	5f                   	pop    edi
c000bf7a:	5d                   	pop    ebp
c000bf7b:	c3                   	ret    

c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf7c:	56                   	push   esi
c000bf7d:	31 c0                	xor    eax,eax
c000bf7f:	53                   	push   ebx
c000bf80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf88:	89 ca                	mov    edx,ecx
c000bf8a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf8e:	c1 e2 04             	shl    edx,0x4
c000bf91:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf99:	74 15                	je     c000bfb0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf9b:	40                   	inc    eax
c000bf9c:	83 f8 04             	cmp    eax,0x4
c000bf9f:	75 f0                	jne    c000bf91 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfa1:	c7 44 24 0c e4 f6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f6e4
c000bfa9:	5b                   	pop    ebx
c000bfaa:	5e                   	pop    esi
c000bfab:	e9 5b 43 00 00       	jmp    c001030b <KePanic(char const*)>
c000bfb0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfb3:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfba:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfc1:	5b                   	pop    ebx
c000bfc2:	5e                   	pop    esi
c000bfc3:	c3                   	ret    

c000bfc4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc4:	57                   	push   edi
c000bfc5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfcb:	56                   	push   esi
c000bfcc:	53                   	push   ebx
c000bfcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfdc:	74 5b                	je     c000c039 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfde:	89 c7                	mov    edi,eax
c000bfe0:	84 c0                	test   al,al
c000bfe2:	74 24                	je     c000c008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe4:	83 fe 0f             	cmp    esi,0xf
c000bfe7:	0f 8f d9 00 00 00    	jg     c000c0c6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfed:	8a 86 c0 10 02 c0    	mov    al,BYTE PTR [esi-0x3ffdef40]
c000bff3:	25 ff 00 00 00       	and    eax,0xff
c000bff8:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000c000:	89 c6                	mov    esi,eax
c000c002:	66 d1 ef             	shr    di,1
c000c005:	83 e7 01             	and    edi,0x1
c000c008:	83 ec 08             	sub    esp,0x8
c000c00b:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c010:	31 db                	xor    ebx,ebx
c000c012:	50                   	push   eax
c000c013:	68 f1 f6 01 c0       	push   0xc001f6f1
c000c018:	e8 ed e5 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c025:	85 c0                	test   eax,eax
c000c027:	7f 51                	jg     c000c07a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c029:	83 ec 0c             	sub    esp,0xc
c000c02c:	68 08 f7 01 c0       	push   0xc001f708
c000c031:	e8 d5 42 00 00       	call   c001030b <KePanic(char const*)>
c000c036:	83 c4 10             	add    esp,0x10
c000c039:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c03c:	31 d2                	xor    edx,edx
c000c03e:	89 c8                	mov    eax,ecx
c000c040:	c1 e0 04             	shl    eax,0x4
c000c043:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c04a:	85 db                	test   ebx,ebx
c000c04c:	0f 84 8b 00 00 00    	je     c000c0dd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c052:	42                   	inc    edx
c000c053:	83 fa 04             	cmp    edx,0x4
c000c056:	75 eb                	jne    c000c043 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	68 5c f7 01 c0       	push   0xc001f75c
c000c060:	e8 a6 42 00 00       	call   c001030b <KePanic(char const*)>
c000c065:	83 c4 10             	add    esp,0x10
c000c068:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c06d:	5b                   	pop    ebx
c000c06e:	5e                   	pop    esi
c000c06f:	5f                   	pop    edi
c000c070:	c3                   	ret    
c000c071:	43                   	inc    ebx
c000c072:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c078:	7e af                	jle    c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c07a:	83 ec 08             	sub    esp,0x8
c000c07d:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c084:	56                   	push   esi
c000c085:	50                   	push   eax
c000c086:	e8 23 0c 01 00       	call   c001ccae <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c08b:	83 c4 10             	add    esp,0x10
c000c08e:	84 c0                	test   al,al
c000c090:	74 df                	je     c000c071 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c092:	81 e7 ff 00 00 00    	and    edi,0xff
c000c098:	50                   	push   eax
c000c099:	8d 46 20             	lea    eax,[esi+0x20]
c000c09c:	57                   	push   edi
c000c09d:	25 ff 00 00 00       	and    eax,0xff
c000c0a2:	6a 00                	push   0x0
c000c0a4:	50                   	push   eax
c000c0a5:	89 f0                	mov    eax,esi
c000c0a7:	6a 00                	push   0x0
c000c0a9:	25 ff 00 00 00       	and    eax,0xff
c000c0ae:	6a 00                	push   0x0
c000c0b0:	50                   	push   eax
c000c0b1:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0b8:	50                   	push   eax
c000c0b9:	e8 6a 0d 01 00       	call   c001ce28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0be:	83 c4 20             	add    esp,0x20
c000c0c1:	e9 73 ff ff ff       	jmp    c000c039 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0c6:	83 ec 0c             	sub    esp,0xc
c000c0c9:	31 ff                	xor    edi,edi
c000c0cb:	68 24 f7 01 c0       	push   0xc001f724
c000c0d0:	e8 36 42 00 00       	call   c001030b <KePanic(char const*)>
c000c0d5:	83 c4 10             	add    esp,0x10
c000c0d8:	e9 2b ff ff ff       	jmp    c000c008 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0dd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0ef:	5b                   	pop    ebx
c000c0f0:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0f7:	89 f0                	mov    eax,esi
c000c0f9:	5e                   	pop    esi
c000c0fa:	5f                   	pop    edi
c000c0fb:	c3                   	ret    

c000c0fc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c100:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c104:	c1 e0 04             	shl    eax,0x4
c000c107:	8d 50 10             	lea    edx,[eax+0x10]
c000c10a:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c110:	74 08                	je     c000c11a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c112:	83 c0 04             	add    eax,0x4
c000c115:	39 d0                	cmp    eax,edx
c000c117:	75 f1                	jne    c000c10a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c119:	c3                   	ret    
c000c11a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c124:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c12e:	eb e2                	jmp    c000c112 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c130 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c130:	53                   	push   ebx
c000c131:	83 ec 08             	sub    esp,0x8
c000c134:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c138:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c13d:	74 0e                	je     c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c13f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c144:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c14b:	75 37                	jne    c000c184 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c151:	83 c0 20             	add    eax,0x20
c000c154:	c1 e0 04             	shl    eax,0x4
c000c157:	8d 50 10             	lea    edx,[eax+0x10]
c000c15a:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c160:	74 0c                	je     c000c16e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c162:	83 c0 04             	add    eax,0x4
c000c165:	39 d0                	cmp    eax,edx
c000c167:	75 f1                	jne    c000c15a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c169:	83 c4 08             	add    esp,0x8
c000c16c:	5b                   	pop    ebx
c000c16d:	c3                   	ret    
c000c16e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c178:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c182:	eb de                	jmp    c000c162 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c184:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c189:	7f 12                	jg     c000c19d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c18b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c18f:	31 c0                	xor    eax,eax
c000c191:	8a 81 c0 10 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdef40]
c000c197:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c19b:	eb b0                	jmp    c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c19d:	83 ec 0c             	sub    esp,0xc
c000c1a0:	68 15 f7 01 c0       	push   0xc001f715
c000c1a5:	e8 61 41 00 00       	call   c001030b <KePanic(char const*)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	eb 9e                	jmp    c000c14d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1af <setupINTS()>:
c000c1af:	31 c0                	xor    eax,eax
c000c1b1:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1bb:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c5:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1cf:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1d9:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1e3:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1ed:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1f7:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c201:	83 c0 10             	add    eax,0x10
c000c204:	3d 00 10 00 00       	cmp    eax,0x1000
c000c209:	75 a6                	jne    c000c1b1 <setupINTS()+0x2>
c000c20b:	c3                   	ret    

c000c20c <convertLegacyIRQNumber(int)>:
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c219:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c220:	74 0f                	je     c000c231 <convertLegacyIRQNumber(int)+0x25>
c000c222:	83 f8 0f             	cmp    eax,0xf
c000c225:	7f 0e                	jg     c000c235 <convertLegacyIRQNumber(int)+0x29>
c000c227:	31 c9                	xor    ecx,ecx
c000c229:	8a 88 c0 10 02 c0    	mov    cl,BYTE PTR [eax-0x3ffdef40]
c000c22f:	89 c8                	mov    eax,ecx
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	68 24 f7 01 c0       	push   0xc001f724
c000c241:	e8 c5 40 00 00       	call   c001030b <KePanic(char const*)>
c000c246:	83 c4 10             	add    esp,0x10
c000c249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24d:	83 c4 0c             	add    esp,0xc
c000c250:	c3                   	ret    
c000c251:	90                   	nop

c000c252 <startGUI(void*)>:
c000c252:	55                   	push   ebp
c000c253:	89 e5                	mov    ebp,esp
c000c255:	53                   	push   ebx
c000c256:	83 ec 04             	sub    esp,0x4
c000c259:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c25e:	48                   	dec    eax
c000c25f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c264:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c269:	85 c0                	test   eax,eax
c000c26b:	75 01                	jne    c000c26e <startGUI(void*)+0x1c>
c000c26d:	fb                   	sti    
c000c26e:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c274:	83 ec 08             	sub    esp,0x8
c000c277:	6a 01                	push   0x1
c000c279:	68 81 f7 01 c0       	push   0xc001f781
c000c27e:	e8 64 79 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	83 ec 08             	sub    esp,0x8
c000c289:	53                   	push   ebx
c000c28a:	50                   	push   eax
c000c28b:	e8 88 7b 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c299:	83 ec 08             	sub    esp,0x8
c000c29c:	6a 01                	push   0x1
c000c29e:	68 9b f7 01 c0       	push   0xc001f79b
c000c2a3:	e8 3f 79 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000c2a8:	83 c4 10             	add    esp,0x10
c000c2ab:	83 ec 08             	sub    esp,0x8
c000c2ae:	53                   	push   ebx
c000c2af:	50                   	push   eax
c000c2b0:	e8 63 7b 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000c2b5:	83 c4 10             	add    esp,0x10
c000c2b8:	90                   	nop
c000c2b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2bc:	c9                   	leave  
c000c2bd:	c3                   	ret    

c000c2be <startGUIVESA(void*)>:
c000c2be:	55                   	push   ebp
c000c2bf:	89 e5                	mov    ebp,esp
c000c2c1:	53                   	push   ebx
c000c2c2:	83 ec 04             	sub    esp,0x4
c000c2c5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ca:	48                   	dec    eax
c000c2cb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2d0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2d5:	85 c0                	test   eax,eax
c000c2d7:	75 01                	jne    c000c2da <startGUIVESA(void*)+0x1c>
c000c2d9:	fb                   	sti    
c000c2da:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2e0:	83 ec 08             	sub    esp,0x8
c000c2e3:	6a 01                	push   0x1
c000c2e5:	68 b9 f7 01 c0       	push   0xc001f7b9
c000c2ea:	e8 f8 78 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000c2ef:	83 c4 10             	add    esp,0x10
c000c2f2:	83 ec 08             	sub    esp,0x8
c000c2f5:	53                   	push   ebx
c000c2f6:	50                   	push   eax
c000c2f7:	e8 1c 7b 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000c2fc:	83 c4 10             	add    esp,0x10
c000c2ff:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c305:	83 ec 08             	sub    esp,0x8
c000c308:	6a 01                	push   0x1
c000c30a:	68 9b f7 01 c0       	push   0xc001f79b
c000c30f:	e8 d3 78 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	83 ec 08             	sub    esp,0x8
c000c31a:	53                   	push   ebx
c000c31b:	50                   	push   eax
c000c31c:	e8 f7 7a 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000c321:	83 c4 10             	add    esp,0x10
c000c324:	90                   	nop
c000c325:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c328:	c9                   	leave  
c000c329:	c3                   	ret    

c000c32a <sendKeyToTerminal(unsigned char)>:
c000c32a:	55                   	push   ebp
c000c32b:	89 e5                	mov    ebp,esp
c000c32d:	83 ec 28             	sub    esp,0x28
c000c330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c333:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c336:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c33c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c33f:	25 ff 00 00 00       	and    eax,0xff
c000c344:	83 ec 08             	sub    esp,0x8
c000c347:	50                   	push   eax
c000c348:	52                   	push   edx
c000c349:	e8 b2 c7 ff ff       	call   c0008b00 <VgaText::receiveKey(unsigned char)>
c000c34e:	83 c4 10             	add    esp,0x10
c000c351:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c355:	74 0a                	je     c000c361 <sendKeyToTerminal(unsigned char)+0x37>
c000c357:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c35b:	0f 85 8f 00 00 00    	jne    c000c3f0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c361:	fa                   	cli    
c000c362:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c367:	40                   	inc    eax
c000c368:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c36d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c372:	40                   	inc    eax
c000c373:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c378:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c37d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c380:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c38a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c38e:	74 1f                	je     c000c3af <sendKeyToTerminal(unsigned char)+0x85>
c000c390:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c393:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c399:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c39c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c39f:	83 ec 0c             	sub    esp,0xc
c000c3a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3a5:	e8 2e 87 00 00       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	eb db                	jmp    c000c38a <sendKeyToTerminal(unsigned char)+0x60>
c000c3af:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b4:	48                   	dec    eax
c000c3b5:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3ba:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3bf:	85 c0                	test   eax,eax
c000c3c1:	75 18                	jne    c000c3db <sendKeyToTerminal(unsigned char)+0xb1>
c000c3c3:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3c8:	85 c0                	test   eax,eax
c000c3ca:	74 0f                	je     c000c3db <sendKeyToTerminal(unsigned char)+0xb1>
c000c3cc:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3d6:	e8 39 82 00 00       	call   c0014614 <schedule()>
c000c3db:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3e0:	48                   	dec    eax
c000c3e1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3eb:	85 c0                	test   eax,eax
c000c3ed:	75 01                	jne    c000c3f0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3ef:	fb                   	sti    
c000c3f0:	90                   	nop
c000c3f1:	c9                   	leave  
c000c3f2:	c3                   	ret    

c000c3f3 <sendKeyboardToken(KeyboardToken)>:
c000c3f3:	55                   	push   ebp
c000c3f4:	89 e5                	mov    ebp,esp
c000c3f6:	83 ec 18             	sub    esp,0x18
c000c3f9:	e8 5d 3f 00 00       	call   c001035b <Krnl::userIOReceived()>
c000c3fe:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c404:	25 ff ff 00 00       	and    eax,0xffff
c000c409:	83 f2 01             	xor    edx,0x1
c000c40c:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c412:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c417:	85 c0                	test   eax,eax
c000c419:	74 24                	je     c000c43f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c41b:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c421:	83 ec 04             	sub    esp,0x4
c000c424:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c429:	83 ec 08             	sub    esp,0x8
c000c42c:	89 e2                	mov    edx,esp
c000c42e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c431:	89 02                	mov    DWORD PTR [edx],eax
c000c433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c436:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c43a:	ff d1                	call   ecx
c000c43c:	83 c4 10             	add    esp,0x10
c000c43f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c443:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c446:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c44b:	38 c2                	cmp    dl,al
c000c44d:	74 1e                	je     c000c46d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c44f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c452:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c457:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c45c:	25 ff 00 00 00       	and    eax,0xff
c000c461:	83 ec 0c             	sub    esp,0xc
c000c464:	50                   	push   eax
c000c465:	e8 ea bd ff ff       	call   c0008254 <setTerminalScrollLock(bool)>
c000c46a:	83 c4 10             	add    esp,0x10
c000c46d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c470:	84 c0                	test   al,al
c000c472:	0f 84 ae 00 00 00    	je     c000c526 <sendKeyboardToken(KeyboardToken)+0x133>
c000c478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47b:	66 3d 10 03          	cmp    ax,0x310
c000c47f:	75 06                	jne    c000c487 <sendKeyboardToken(KeyboardToken)+0x94>
c000c481:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48a:	66 3d 11 03          	cmp    ax,0x311
c000c48e:	75 06                	jne    c000c496 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c490:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c499:	66 3d 12 03          	cmp    ax,0x312
c000c49d:	75 06                	jne    c000c4a5 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c49f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a8:	66 3d 13 03          	cmp    ax,0x313
c000c4ac:	75 06                	jne    c000c4b4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4ae:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b7:	66 3d 14 03          	cmp    ax,0x314
c000c4bb:	75 06                	jne    c000c4c3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4bd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c6:	66 3d 15 03          	cmp    ax,0x315
c000c4ca:	75 06                	jne    c000c4d2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4cc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d5:	66 3d 16 03          	cmp    ax,0x316
c000c4d9:	75 06                	jne    c000c4e1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4db:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e4:	66 3d 17 03          	cmp    ax,0x317
c000c4e8:	75 06                	jne    c000c4f0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4ea:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f3:	66 3d 18 03          	cmp    ax,0x318
c000c4f7:	75 06                	jne    c000c4ff <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4f9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c502:	66 3d 19 03          	cmp    ax,0x319
c000c506:	75 06                	jne    c000c50e <sendKeyboardToken(KeyboardToken)+0x11b>
c000c508:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c50e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c511:	66 3d 1a 03          	cmp    ax,0x31a
c000c515:	0f 85 c9 00 00 00    	jne    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c521:	e9 be 00 00 00       	jmp    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c529:	66 3d 10 03          	cmp    ax,0x310
c000c52d:	75 0a                	jne    c000c539 <sendKeyboardToken(KeyboardToken)+0x146>
c000c52f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c535:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53c:	66 3d 11 03          	cmp    ax,0x311
c000c540:	75 0a                	jne    c000c54c <sendKeyboardToken(KeyboardToken)+0x159>
c000c542:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c548:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54f:	66 3d 12 03          	cmp    ax,0x312
c000c553:	75 0a                	jne    c000c55f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c555:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c55b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c562:	66 3d 13 03          	cmp    ax,0x313
c000c566:	75 0a                	jne    c000c572 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c568:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c56e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c575:	66 3d 14 03          	cmp    ax,0x314
c000c579:	75 0a                	jne    c000c585 <sendKeyboardToken(KeyboardToken)+0x192>
c000c57b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c581:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c588:	66 3d 15 03          	cmp    ax,0x315
c000c58c:	75 0a                	jne    c000c598 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c58e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c594:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59b:	66 3d 16 03          	cmp    ax,0x316
c000c59f:	75 0a                	jne    c000c5ab <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5a1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ae:	66 3d 17 03          	cmp    ax,0x317
c000c5b2:	75 0a                	jne    c000c5be <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5b4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5ba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c1:	66 3d 18 03          	cmp    ax,0x318
c000c5c5:	75 0a                	jne    c000c5d1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5c7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5cd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d4:	66 3d 19 03          	cmp    ax,0x319
c000c5d8:	75 0a                	jne    c000c5e4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5da:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5e0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e7:	66 3d 00 02          	cmp    ax,0x200
c000c5eb:	75 2c                	jne    c000c619 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5ed:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5f2:	83 f0 01             	xor    eax,0x1
c000c5f5:	84 c0                	test   al,al
c000c5f7:	74 20                	je     c000c619 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c5fe:	6a 01                	push   0x1
c000c600:	6a 00                	push   0x0
c000c602:	68 52 c2 00 c0       	push   0xc000c252
c000c607:	50                   	push   eax
c000c608:	e8 e7 7d 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c617:	eb 33                	jmp    c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61c:	66 3d 01 02          	cmp    ax,0x201
c000c620:	75 2a                	jne    c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c622:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c627:	83 f0 01             	xor    eax,0x1
c000c62a:	84 c0                	test   al,al
c000c62c:	74 1e                	je     c000c64c <sendKeyboardToken(KeyboardToken)+0x259>
c000c62e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c633:	6a 01                	push   0x1
c000c635:	6a 00                	push   0x0
c000c637:	68 be c2 00 c0       	push   0xc000c2be
c000c63c:	50                   	push   eax
c000c63d:	e8 b2 7d 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c000c642:	83 c4 10             	add    esp,0x10
c000c645:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64f:	66 3d 1d 03          	cmp    ax,0x31d
c000c653:	75 06                	jne    c000c65b <sendKeyboardToken(KeyboardToken)+0x268>
c000c655:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65e:	66 3d 1c 03          	cmp    ax,0x31c
c000c662:	75 06                	jne    c000c66a <sendKeyboardToken(KeyboardToken)+0x277>
c000c664:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c66a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66d:	66 3d 1b 03          	cmp    ax,0x31b
c000c671:	75 06                	jne    c000c679 <sendKeyboardToken(KeyboardToken)+0x286>
c000c673:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	66 3d 1e 03          	cmp    ax,0x31e
c000c680:	75 06                	jne    c000c688 <sendKeyboardToken(KeyboardToken)+0x295>
c000c682:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c688:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68b:	66 3d 1f 03          	cmp    ax,0x31f
c000c68f:	75 06                	jne    c000c697 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c691:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69a:	66 3d 1a 03          	cmp    ax,0x31a
c000c69e:	75 06                	jne    c000c6a6 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6a0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6a6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6aa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6ad:	83 f0 01             	xor    eax,0x1
c000c6b0:	84 c0                	test   al,al
c000c6b2:	74 7b                	je     c000c72f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6b4:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6b9:	84 c0                	test   al,al
c000c6bb:	74 43                	je     c000c700 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6bd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6c1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6c5:	74 2d                	je     c000c6f4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6c7:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6cd:	89 d0                	mov    eax,edx
c000c6cf:	c1 e0 02             	shl    eax,0x2
c000c6d2:	01 d0                	add    eax,edx
c000c6d4:	01 c0                	add    eax,eax
c000c6d6:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6de:	25 ff ff 00 00       	and    eax,0xffff
c000c6e3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6e6:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6eb:	01 d0                	add    eax,edx
c000c6ed:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6f2:	eb 71                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f4:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c6fe:	eb 65                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c700:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c705:	85 c0                	test   eax,eax
c000c707:	74 1a                	je     c000c723 <sendKeyboardToken(KeyboardToken)+0x330>
c000c709:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c70e:	25 ff 00 00 00       	and    eax,0xff
c000c713:	83 ec 0c             	sub    esp,0xc
c000c716:	50                   	push   eax
c000c717:	e8 0e fc ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c71c:	83 c4 10             	add    esp,0x10
c000c71f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c723:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c72d:	eb 36                	jmp    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c732:	66 3d 01 01          	cmp    ax,0x101
c000c736:	75 2d                	jne    c000c765 <sendKeyboardToken(KeyboardToken)+0x372>
c000c738:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c73d:	85 c0                	test   eax,eax
c000c73f:	74 1a                	je     c000c75b <sendKeyboardToken(KeyboardToken)+0x368>
c000c741:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c746:	25 ff 00 00 00       	and    eax,0xff
c000c74b:	83 ec 0c             	sub    esp,0xc
c000c74e:	50                   	push   eax
c000c74f:	e8 d6 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c754:	83 c4 10             	add    esp,0x10
c000c757:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c75b:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c765:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c768:	83 f0 01             	xor    eax,0x1
c000c76b:	84 c0                	test   al,al
c000c76d:	74 4e                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c76f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c772:	83 f0 01             	xor    eax,0x1
c000c775:	84 c0                	test   al,al
c000c777:	74 44                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c779:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c77e:	83 f0 01             	xor    eax,0x1
c000c781:	84 c0                	test   al,al
c000c783:	74 38                	je     c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c788:	66 83 f8 1f          	cmp    ax,0x1f
c000c78c:	76 09                	jbe    c000c797 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c78e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c791:	66 83 f8 7e          	cmp    ax,0x7e
c000c795:	76 12                	jbe    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79a:	66 83 f8 0a          	cmp    ax,0xa
c000c79e:	74 09                	je     c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a3:	66 83 f8 08          	cmp    ax,0x8
c000c7a7:	75 14                	jne    c000c7bd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ac:	25 ff 00 00 00       	and    eax,0xff
c000c7b1:	83 ec 0c             	sub    esp,0xc
c000c7b4:	50                   	push   eax
c000c7b5:	e8 70 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c7ba:	83 c4 10             	add    esp,0x10
c000c7bd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7c0:	83 f0 01             	xor    eax,0x1
c000c7c3:	84 c0                	test   al,al
c000c7c5:	74 51                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7ca:	83 f0 01             	xor    eax,0x1
c000c7cd:	84 c0                	test   al,al
c000c7cf:	74 47                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d1:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7d6:	84 c0                	test   al,al
c000c7d8:	74 3e                	je     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7dd:	66 83 f8 3f          	cmp    ax,0x3f
c000c7e1:	76 35                	jbe    c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e6:	66 83 f8 7f          	cmp    ax,0x7f
c000c7ea:	77 2c                	ja     c000c818 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ef:	88 c2                	mov    dl,al
c000c7f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f4:	66 83 f8 5f          	cmp    ax,0x5f
c000c7f8:	76 04                	jbe    c000c7fe <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7fa:	b0 20                	mov    al,0x20
c000c7fc:	eb 02                	jmp    c000c800 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7fe:	b0 00                	mov    al,0x0
c000c800:	29 c2                	sub    edx,eax
c000c802:	88 d0                	mov    al,dl
c000c804:	83 e8 40             	sub    eax,0x40
c000c807:	25 ff 00 00 00       	and    eax,0xff
c000c80c:	83 ec 0c             	sub    esp,0xc
c000c80f:	50                   	push   eax
c000c810:	e8 15 fb ff ff       	call   c000c32a <sendKeyToTerminal(unsigned char)>
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81b:	66 3d 00 03          	cmp    ax,0x300
c000c81f:	75 0f                	jne    c000c830 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c821:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c824:	83 f0 01             	xor    eax,0x1
c000c827:	84 c0                	test   al,al
c000c829:	74 05                	je     c000c830 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82b:	e8 25 ba ff ff       	call   c0008255 <doTerminalCycle()>
c000c830:	90                   	nop
c000c831:	c9                   	leave  
c000c832:	c3                   	ret    

c000c833 <clearInternalKeybuffer(VgaText*)>:
c000c833:	55                   	push   ebp
c000c834:	89 e5                	mov    ebp,esp
c000c836:	83 ec 08             	sub    esp,0x8
c000c839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83c:	05 02 01 00 00       	add    eax,0x102
c000c841:	83 ec 0c             	sub    esp,0xc
c000c844:	50                   	push   eax
c000c845:	e8 f6 3c ff ff       	call   c0000540 <strlen>
c000c84a:	83 c4 10             	add    esp,0x10
c000c84d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c850:	81 c2 02 01 00 00    	add    edx,0x102
c000c856:	83 ec 04             	sub    esp,0x4
c000c859:	50                   	push   eax
c000c85a:	6a 00                	push   0x0
c000c85c:	52                   	push   edx
c000c85d:	e8 6e 3c ff ff       	call   c00004d0 <memset>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	90                   	nop
c000c866:	c9                   	leave  
c000c867:	c3                   	ret    

c000c868 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c868:	55                   	push   ebp
c000c869:	89 e5                	mov    ebp,esp
c000c86b:	83 ec 18             	sub    esp,0x18
c000c86e:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c873:	85 c0                	test   eax,eax
c000c875:	74 2a                	je     c000c8a1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c877:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c87d:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c883:	83 ec 04             	sub    esp,0x4
c000c886:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c88b:	83 ec 08             	sub    esp,0x8
c000c88e:	89 e2                	mov    edx,esp
c000c890:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c893:	89 02                	mov    DWORD PTR [edx],eax
c000c895:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c898:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c89c:	ff d1                	call   ecx
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	fb                   	sti    
c000c8a2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8a9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8ad:	0f 84 cb 00 00 00    	je     c000c97e <readKeyboard(VgaText*, char*, unsigned long)+0x116>
c000c8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8bc:	84 c0                	test   al,al
c000c8be:	75 28                	jne    c000c8e8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8c0:	fa                   	cli    
c000c8c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8c6:	40                   	inc    eax
c000c8c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8cc:	e8 43 7d 00 00       	call   c0014614 <schedule()>
c000c8d1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d6:	48                   	dec    eax
c000c8d7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8e1:	85 c0                	test   eax,eax
c000c8e3:	75 ce                	jne    c000c8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e5:	fb                   	sti    
c000c8e6:	eb cb                	jmp    c000c8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8eb:	8d 50 01             	lea    edx,[eax+0x1]
c000c8ee:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8f4:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8fa:	88 10                	mov    BYTE PTR [eax],dl
c000c8fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ff:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c905:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c908:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c90c:	75 1e                	jne    c000c92c <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c90e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c913:	8b 00                	mov    eax,DWORD PTR [eax]
c000c915:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c918:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c91e:	83 ec 08             	sub    esp,0x8
c000c921:	6a 02                	push   0x2
c000c923:	50                   	push   eax
c000c924:	e8 ce 3d 00 00       	call   c00106f7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c929:	83 c4 10             	add    esp,0x10
c000c92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92f:	05 02 01 00 00       	add    eax,0x102
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	50                   	push   eax
c000c938:	e8 03 3c ff ff       	call   c0000540 <strlen>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c943:	81 c2 02 01 00 00    	add    edx,0x102
c000c949:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c94c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c94f:	81 c2 02 01 00 00    	add    edx,0x102
c000c955:	83 ec 04             	sub    esp,0x4
c000c958:	50                   	push   eax
c000c959:	51                   	push   ecx
c000c95a:	52                   	push   edx
c000c95b:	e8 80 3a ff ff       	call   c00003e0 <memmove>
c000c960:	83 c4 10             	add    esp,0x10
c000c963:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c966:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c969:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c96d:	74 0a                	je     c000c979 <readKeyboard(VgaText*, char*, unsigned long)+0x111>
c000c96f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c973:	0f 85 30 ff ff ff    	jne    c000c8a9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c979:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c97c:	eb 03                	jmp    c000c981 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c000c97e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c981:	c9                   	leave  
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <Keyboard::Keyboard(char const*)>:
c000c984:	83 ec 0c             	sub    esp,0xc
c000c987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c98b:	83 ec 08             	sub    esp,0x8
c000c98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c992:	50                   	push   eax
c000c993:	e8 48 f2 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	ba dc f7 01 c0       	mov    edx,0xc001f7dc
c000c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a4:	89 10                	mov    DWORD PTR [eax],edx
c000c9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9aa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9b4:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9bb:	90                   	nop
c000c9bc:	83 c4 0c             	add    esp,0xc
c000c9bf:	c3                   	ret    

c000c9c0 <Keyboard::~Keyboard()>:
c000c9c0:	83 ec 0c             	sub    esp,0xc
c000c9c3:	ba dc f7 01 c0       	mov    edx,0xc001f7dc
c000c9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9cc:	89 10                	mov    DWORD PTR [eax],edx
c000c9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d2:	83 ec 0c             	sub    esp,0xc
c000c9d5:	50                   	push   eax
c000c9d6:	e8 6f ef ff ff       	call   c000b94a <Device::~Device()>
c000c9db:	83 c4 10             	add    esp,0x10
c000c9de:	90                   	nop
c000c9df:	83 c4 0c             	add    esp,0xc
c000c9e2:	c3                   	ret    
c000c9e3:	90                   	nop

c000c9e4 <Keyboard::~Keyboard()>:
c000c9e4:	83 ec 0c             	sub    esp,0xc
c000c9e7:	83 ec 0c             	sub    esp,0xc
c000c9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ee:	e8 cd ff ff ff       	call   c000c9c0 <Keyboard::~Keyboard()>
c000c9f3:	83 c4 10             	add    esp,0x10
c000c9f6:	83 ec 08             	sub    esp,0x8
c000c9f9:	68 5c 01 00 00       	push   0x15c
c000c9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca02:	e8 0d db ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	83 c4 0c             	add    esp,0xc
c000ca0d:	c3                   	ret    

c000ca0e <LogicalDisk::close(int, int, void*)>:
c000ca0e:	83 c8 ff             	or     eax,0xffffffff
c000ca11:	c3                   	ret    

c000ca12 <LogicalDisk::~LogicalDisk()>:
c000ca12:	83 ec 0c             	sub    esp,0xc
c000ca15:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c000ca1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1e:	89 10                	mov    DWORD PTR [eax],edx
c000ca20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca24:	83 ec 0c             	sub    esp,0xc
c000ca27:	50                   	push   eax
c000ca28:	e8 1d ef ff ff       	call   c000b94a <Device::~Device()>
c000ca2d:	83 c4 10             	add    esp,0x10
c000ca30:	90                   	nop
c000ca31:	83 c4 0c             	add    esp,0xc
c000ca34:	c3                   	ret    
c000ca35:	90                   	nop

c000ca36 <LogicalDisk::~LogicalDisk()>:
c000ca36:	83 ec 0c             	sub    esp,0xc
c000ca39:	83 ec 0c             	sub    esp,0xc
c000ca3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca40:	e8 cd ff ff ff       	call   c000ca12 <LogicalDisk::~LogicalDisk()>
c000ca45:	83 c4 10             	add    esp,0x10
c000ca48:	83 ec 08             	sub    esp,0x8
c000ca4b:	68 78 01 00 00       	push   0x178
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 bb da ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	83 c4 0c             	add    esp,0xc
c000ca5f:	c3                   	ret    

c000ca60 <LogicalDisk::open(int, int, void*)>:
c000ca60:	83 ec 18             	sub    esp,0x18
c000ca63:	68 08 f8 01 c0       	push   0xc001f808
c000ca68:	e8 9e 38 00 00       	call   c001030b <KePanic(char const*)>
c000ca6d:	83 c8 ff             	or     eax,0xffffffff
c000ca70:	83 c4 1c             	add    esp,0x1c
c000ca73:	c3                   	ret    

c000ca74 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca74:	53                   	push   ebx
c000ca75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca81:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca87:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca8d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca93:	77 10                	ja     c000caa5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca95:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca9b:	89 d3                	mov    ebx,edx
c000ca9d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000caa3:	72 05                	jb     c000caaa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caa5:	83 c8 ff             	or     eax,0xffffffff
c000caa8:	89 c2                	mov    edx,eax
c000caaa:	5b                   	pop    ebx
c000caab:	c3                   	ret    

c000caac <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000caac:	56                   	push   esi
c000caad:	83 c8 ff             	or     eax,0xffffffff
c000cab0:	53                   	push   ebx
c000cab1:	89 c2                	mov    edx,eax
c000cab3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cab7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cabb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cabf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cac5:	77 27                	ja     c000caee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cac7:	89 d8                	mov    eax,ebx
c000cac9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cacf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cad5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cada:	89 c2                	mov    edx,eax
c000cadc:	73 10                	jae    c000caee <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cade:	89 c8                	mov    eax,ecx
c000cae0:	89 da                	mov    edx,ebx
c000cae2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cae8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caee:	5b                   	pop    ebx
c000caef:	5e                   	pop    esi
c000caf0:	c3                   	ret    
c000caf1:	90                   	nop

c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caf2:	83 ec 1c             	sub    esp,0x1c
c000caf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb09:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb18:	83 ec 08             	sub    esp,0x8
c000cb1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1f:	50                   	push   eax
c000cb20:	e8 bb f0 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000cb25:	83 c4 10             	add    esp,0x10
c000cb28:	ba 54 f8 01 c0       	mov    edx,0xc001f854
c000cb2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb31:	89 10                	mov    DWORD PTR [eax],edx
c000cb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb37:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb42:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb58:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb62:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb6e:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb74:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb7a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb7e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb85:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb8b:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb95:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb99:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbad:	90                   	nop
c000cbae:	83 c4 1c             	add    esp,0x1c
c000cbb1:	c3                   	ret    

c000cbb2 <LogicalDisk::assignDriveLetter()>:
c000cbb2:	55                   	push   ebp
c000cbb3:	57                   	push   edi
c000cbb4:	56                   	push   esi
c000cbb5:	53                   	push   ebx
c000cbb6:	83 ec 14             	sub    esp,0x14
c000cbb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbbd:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbc3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbc9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbcd:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbd3:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cbd9:	3c 01                	cmp    al,0x1
c000cbdb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbdf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbe3:	19 c0                	sbb    eax,eax
c000cbe5:	83 e0 02             	and    eax,0x2
c000cbe8:	83 c0 41             	add    eax,0x41
c000cbeb:	0f be e8             	movsx  ebp,al
c000cbee:	3c 43                	cmp    al,0x43
c000cbf0:	75 10                	jne    c000cc02 <LogicalDisk::assignDriveLetter()+0x50>
c000cbf2:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbf9:	75 5d                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cbfb:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc00:	75 56                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc02:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc05:	ba 01 00 00 00       	mov    edx,0x1
c000cc0a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc0e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc12:	d3 e2                	shl    edx,cl
c000cc14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc18:	89 d7                	mov    edi,edx
c000cc1a:	89 d6                	mov    esi,edx
c000cc1c:	c1 ff 1f             	sar    edi,0x1f
c000cc1f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc23:	21 f9                	and    ecx,edi
c000cc25:	09 d1                	or     ecx,edx
c000cc27:	75 2f                	jne    c000cc58 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc31:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc37:	09 f2                	or     edx,esi
c000cc39:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc43:	09 fa                	or     edx,edi
c000cc45:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc49:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc4f:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc56:	eb 08                	jmp    c000cc60 <LogicalDisk::assignDriveLetter()+0xae>
c000cc58:	45                   	inc    ebp
c000cc59:	40                   	inc    eax
c000cc5a:	3c 5b                	cmp    al,0x5b
c000cc5c:	75 90                	jne    c000cbee <LogicalDisk::assignDriveLetter()+0x3c>
c000cc5e:	31 c0                	xor    eax,eax
c000cc60:	83 c4 14             	add    esp,0x14
c000cc63:	5b                   	pop    ebx
c000cc64:	5e                   	pop    esi
c000cc65:	5f                   	pop    edi
c000cc66:	5d                   	pop    ebp
c000cc67:	c3                   	ret    

c000cc68 <LogicalDisk::mount()>:
c000cc68:	56                   	push   esi
c000cc69:	53                   	push   ebx
c000cc6a:	53                   	push   ebx
c000cc6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc6f:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cc75:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cc7f:	85 db                	test   ebx,ebx
c000cc81:	74 27                	je     c000ccaa <LogicalDisk::mount()+0x42>
c000cc83:	51                   	push   ecx
c000cc84:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc8b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc8d:	83 e8 41             	sub    eax,0x41
c000cc90:	50                   	push   eax
c000cc91:	56                   	push   esi
c000cc92:	53                   	push   ebx
c000cc93:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc96:	83 c4 10             	add    esp,0x10
c000cc99:	84 c0                	test   al,al
c000cc9b:	74 08                	je     c000cca5 <LogicalDisk::mount()+0x3d>
c000cc9d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cca3:	eb 07                	jmp    c000ccac <LogicalDisk::mount()+0x44>
c000cca5:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cca8:	eb d5                	jmp    c000cc7f <LogicalDisk::mount()+0x17>
c000ccaa:	31 c0                	xor    eax,eax
c000ccac:	5a                   	pop    edx
c000ccad:	5b                   	pop    ebx
c000ccae:	5e                   	pop    esi
c000ccaf:	c3                   	ret    

c000ccb0 <LogicalDisk::unmount()>:
c000ccb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb4:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccbe:	c3                   	ret    
c000ccbf:	90                   	nop

c000ccc0 <LogicalDisk::eject()>:
c000ccc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccca:	8b 10                	mov    edx,DWORD PTR [eax]
c000cccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccd0:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccd3:	90                   	nop

c000ccd4 <LogicalDisk::unassignDriveLetter()>:
c000ccd4:	57                   	push   edi
c000ccd5:	56                   	push   esi
c000ccd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccda:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cce1:	84 c9                	test   cl,cl
c000cce3:	75 0f                	jne    c000ccf4 <LogicalDisk::unassignDriveLetter()+0x20>
c000cce5:	c7 44 24 0c 2c f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f82c
c000cced:	5e                   	pop    esi
c000ccee:	5f                   	pop    edi
c000ccef:	e9 17 36 00 00       	jmp    c001030b <KePanic(char const*)>
c000ccf4:	83 e9 41             	sub    ecx,0x41
c000ccf7:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ccfe:	b8 01 00 00 00       	mov    eax,0x1
c000cd03:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd0e:	d3 e0                	shl    eax,cl
c000cd10:	89 c7                	mov    edi,eax
c000cd12:	f7 d0                	not    eax
c000cd14:	c1 ff 1f             	sar    edi,0x1f
c000cd17:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd1d:	89 fe                	mov    esi,edi
c000cd1f:	f7 d6                	not    esi
c000cd21:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd27:	5e                   	pop    esi
c000cd28:	5f                   	pop    edi
c000cd29:	c3                   	ret    

c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd2a:	57                   	push   edi
c000cd2b:	56                   	push   esi
c000cd2c:	53                   	push   ebx
c000cd2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd35:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd3d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd43:	77 41                	ja     c000cd86 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd45:	99                   	cdq    
c000cd46:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd4c:	01 c8                	add    eax,ecx
c000cd4e:	11 da                	adc    edx,ebx
c000cd50:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd56:	19 d7                	sbb    edi,edx
c000cd58:	72 33                	jb     c000cd8d <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd5a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd60:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd66:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd6a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd6e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd7e:	5b                   	pop    ebx
c000cd7f:	5e                   	pop    esi
c000cd80:	5f                   	pop    edi
c000cd81:	e9 30 0a 00 00       	jmp    c000d7b6 <VCache::read(unsigned long long, int, void*)>
c000cd86:	b8 05 00 00 00       	mov    eax,0x5
c000cd8b:	eb 05                	jmp    c000cd92 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd8d:	b8 07 00 00 00       	mov    eax,0x7
c000cd92:	5b                   	pop    ebx
c000cd93:	5e                   	pop    esi
c000cd94:	5f                   	pop    edi
c000cd95:	c3                   	ret    

c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd96:	57                   	push   edi
c000cd97:	56                   	push   esi
c000cd98:	53                   	push   ebx
c000cd99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd9d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cda1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cda9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdaf:	77 41                	ja     c000cdf2 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdb1:	99                   	cdq    
c000cdb2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdb8:	01 c8                	add    eax,ecx
c000cdba:	11 da                	adc    edx,ebx
c000cdbc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc2:	19 d7                	sbb    edi,edx
c000cdc4:	72 33                	jb     c000cdf9 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdc6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdcc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdda:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cde0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdea:	5b                   	pop    ebx
c000cdeb:	5e                   	pop    esi
c000cdec:	5f                   	pop    edi
c000cded:	e9 d6 08 00 00       	jmp    c000d6c8 <VCache::write(unsigned long long, int, void*)>
c000cdf2:	b8 05 00 00 00       	mov    eax,0x5
c000cdf7:	eb 05                	jmp    c000cdfe <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdf9:	b8 07 00 00 00       	mov    eax,0x7
c000cdfe:	5b                   	pop    ebx
c000cdff:	5e                   	pop    esi
c000ce00:	5f                   	pop    edi
c000ce01:	c3                   	ret    
c000ce02:	66 90                	xchg   ax,ax

c000ce04 <Mouse::Mouse(char const*)>:
c000ce04:	83 ec 0c             	sub    esp,0xc
c000ce07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0b:	83 ec 08             	sub    esp,0x8
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	50                   	push   eax
c000ce13:	e8 c8 ed ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	ba 80 f8 01 c0       	mov    edx,0xc001f880
c000ce20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce24:	89 10                	mov    DWORD PTR [eax],edx
c000ce26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce2a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce34:	90                   	nop
c000ce35:	83 c4 0c             	add    esp,0xc
c000ce38:	c3                   	ret    
c000ce39:	90                   	nop
c000ce3a:	66 90                	xchg   ax,ax

c000ce3c <Mouse::~Mouse()>:
c000ce3c:	83 ec 0c             	sub    esp,0xc
c000ce3f:	ba 80 f8 01 c0       	mov    edx,0xc001f880
c000ce44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce48:	89 10                	mov    DWORD PTR [eax],edx
c000ce4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce4e:	83 ec 0c             	sub    esp,0xc
c000ce51:	50                   	push   eax
c000ce52:	e8 f3 ea ff ff       	call   c000b94a <Device::~Device()>
c000ce57:	83 c4 10             	add    esp,0x10
c000ce5a:	90                   	nop
c000ce5b:	83 c4 0c             	add    esp,0xc
c000ce5e:	c3                   	ret    
c000ce5f:	90                   	nop

c000ce60 <Mouse::~Mouse()>:
c000ce60:	83 ec 0c             	sub    esp,0xc
c000ce63:	83 ec 0c             	sub    esp,0xc
c000ce66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6a:	e8 cd ff ff ff       	call   c000ce3c <Mouse::~Mouse()>
c000ce6f:	83 c4 10             	add    esp,0x10
c000ce72:	83 ec 08             	sub    esp,0x8
c000ce75:	68 58 01 00 00       	push   0x158
c000ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7e:	e8 91 d6 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	83 c4 0c             	add    esp,0xc
c000ce89:	c3                   	ret    

c000ce8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce8a:	55                   	push   ebp
c000ce8b:	57                   	push   edi
c000ce8c:	56                   	push   esi
c000ce8d:	53                   	push   ebx
c000ce8e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce94:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce9b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cea2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cea9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ceb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ceb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ceb8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cebf:	e8 18 ee ff ff       	call   c000bcdc <Device::getName()>
c000cec4:	5a                   	pop    edx
c000cec5:	59                   	pop    ecx
c000cec6:	50                   	push   eax
c000cec7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cecb:	55                   	push   ebp
c000cecc:	e8 2f 37 ff ff       	call   c0000600 <strcpy>
c000ced1:	5b                   	pop    ebx
c000ced2:	58                   	pop    eax
c000ced3:	68 a4 f8 01 c0       	push   0xc001f8a4
c000ced8:	55                   	push   ebp
c000ced9:	e8 e2 38 ff ff       	call   c00007c0 <strcat>
c000cede:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cee5:	e8 8b a9 ff ff       	call   c0007875 <malloc>
c000ceea:	83 c4 0c             	add    esp,0xc
c000ceed:	89 c3                	mov    ebx,eax
c000ceef:	57                   	push   edi
c000cef0:	56                   	push   esi
c000cef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cef9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cf00:	55                   	push   ebp
c000cf01:	50                   	push   eax
c000cf02:	e8 eb fb ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf07:	83 c4 14             	add    esp,0x14
c000cf0a:	53                   	push   ebx
c000cf0b:	e8 a2 fc ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c000cf10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf13:	e8 50 fd ff ff       	call   c000cc68 <LogicalDisk::mount()>
c000cf18:	58                   	pop    eax
c000cf19:	5a                   	pop    edx
c000cf1a:	53                   	push   ebx
c000cf1b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf22:	e8 21 eb ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000cf27:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf2d:	5b                   	pop    ebx
c000cf2e:	5e                   	pop    esi
c000cf2f:	5f                   	pop    edi
c000cf30:	5d                   	pop    ebp
c000cf31:	c3                   	ret    

c000cf32 <createPartitionsForDisk(PhysicalDisk*)>:
c000cf32:	55                   	push   ebp
c000cf33:	57                   	push   edi
c000cf34:	56                   	push   esi
c000cf35:	53                   	push   ebx
c000cf36:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf3c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf43:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf49:	3d 00 02 00 00       	cmp    eax,0x200
c000cf4e:	74 27                	je     c000cf77 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf50:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf56:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf5c:	83 ec 10             	sub    esp,0x10
c000cf5f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf63:	99                   	cdq    
c000cf64:	c1 e6 0a             	shl    esi,0xa
c000cf67:	52                   	push   edx
c000cf68:	89 fd                	mov    ebp,edi
c000cf6a:	50                   	push   eax
c000cf6b:	55                   	push   ebp
c000cf6c:	56                   	push   esi
c000cf6d:	e8 be 08 01 00       	call   c001d830 <__udivdi3>
c000cf72:	e9 b1 00 00 00       	jmp    c000d028 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf77:	83 ec 0c             	sub    esp,0xc
c000cf7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf7c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf80:	56                   	push   esi
c000cf81:	6a 01                	push   0x1
c000cf83:	6a 00                	push   0x0
c000cf85:	6a 00                	push   0x0
c000cf87:	53                   	push   ebx
c000cf88:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf8b:	83 c4 20             	add    esp,0x20
c000cf8e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf96:	75 0a                	jne    c000cfa2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf98:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cfa0:	74 2c                	je     c000cfce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cfa2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfa8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfb4:	83 ec 10             	sub    esp,0x10
c000cfb7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfbb:	89 f7                	mov    edi,esi
c000cfbd:	c1 e0 0a             	shl    eax,0xa
c000cfc0:	c1 ff 1f             	sar    edi,0x1f
c000cfc3:	57                   	push   edi
c000cfc4:	56                   	push   esi
c000cfc5:	52                   	push   edx
c000cfc6:	50                   	push   eax
c000cfc7:	e8 64 08 01 00       	call   c001d830 <__udivdi3>
c000cfcc:	eb 5a                	jmp    c000d028 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfd5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cfdc:	83 e1 7f             	and    ecx,0x7f
c000cfdf:	83 e0 7f             	and    eax,0x7f
c000cfe2:	01 c1                	add    ecx,eax
c000cfe4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfeb:	83 e0 7f             	and    eax,0x7f
c000cfee:	01 c1                	add    ecx,eax
c000cff0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cff7:	83 e0 7f             	and    eax,0x7f
c000cffa:	00 c1                	add    cl,al
c000cffc:	74 41                	je     c000d03f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cffe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d004:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d00a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d010:	83 ec 10             	sub    esp,0x10
c000d013:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d017:	89 f7                	mov    edi,esi
c000d019:	c1 e0 0a             	shl    eax,0xa
c000d01c:	c1 ff 1f             	sar    edi,0x1f
c000d01f:	57                   	push   edi
c000d020:	56                   	push   esi
c000d021:	52                   	push   edx
c000d022:	50                   	push   eax
c000d023:	e8 08 08 01 00       	call   c001d830 <__udivdi3>
c000d028:	83 c4 14             	add    esp,0x14
c000d02b:	52                   	push   edx
c000d02c:	50                   	push   eax
c000d02d:	6a 00                	push   0x0
c000d02f:	6a 00                	push   0x0
c000d031:	53                   	push   ebx
c000d032:	e8 53 fe ff ff       	call   c000ce8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d037:	83 c4 20             	add    esp,0x20
c000d03a:	e9 79 01 00 00       	jmp    c000d1b8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d03f:	89 f0                	mov    eax,esi
c000d041:	31 f6                	xor    esi,esi
c000d043:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d04a:	75 02                	jne    c000d04e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d04c:	89 f1                	mov    ecx,esi
c000d04e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d055:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d05c:	c1 e2 08             	shl    edx,0x8
c000d05f:	c1 e7 10             	shl    edi,0x10
c000d062:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d06a:	09 fa                	or     edx,edi
c000d06c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d074:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d07b:	83 c0 10             	add    eax,0x10
c000d07e:	09 fa                	or     edx,edi
c000d080:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d087:	c1 e7 18             	shl    edi,0x18
c000d08a:	09 fa                	or     edx,edi
c000d08c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d093:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d097:	c1 e7 10             	shl    edi,0x10
c000d09a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d0a1:	c1 e2 08             	shl    edx,0x8
c000d0a4:	09 fa                	or     edx,edi
c000d0a6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d0ad:	09 fa                	or     edx,edi
c000d0af:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0b6:	c1 e7 18             	shl    edi,0x18
c000d0b9:	09 fa                	or     edx,edi
c000d0bb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0bf:	46                   	inc    esi
c000d0c0:	83 fe 04             	cmp    esi,0x4
c000d0c3:	0f 85 7a ff ff ff    	jne    c000d043 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0cd:	83 f0 01             	xor    eax,0x1
c000d0d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0d4:	75 57                	jne    c000d12d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0da:	83 f0 01             	xor    eax,0x1
c000d0dd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0e1:	75 4a                	jne    c000d12d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0e3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d103:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d109:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d10d:	89 f7                	mov    edi,esi
c000d10f:	c1 e0 0a             	shl    eax,0xa
c000d112:	c1 ff 1f             	sar    edi,0x1f
c000d115:	57                   	push   edi
c000d116:	56                   	push   esi
c000d117:	52                   	push   edx
c000d118:	50                   	push   eax
c000d119:	e8 12 07 01 00       	call   c001d830 <__udivdi3>
c000d11e:	83 c4 10             	add    esp,0x10
c000d121:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d125:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d129:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d12d:	84 c9                	test   cl,cl
c000d12f:	74 53                	je     c000d184 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d131:	0f b6 c9             	movzx  ecx,cl
c000d134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d138:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d13c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d140:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d148:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d14c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d150:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d158:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d15c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d160:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d164:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d168:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d16c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d170:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d174:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d178:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d17c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d180:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d184:	31 ed                	xor    ebp,ebp
c000d186:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d18a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d18e:	89 f8                	mov    eax,edi
c000d190:	09 f0                	or     eax,esi
c000d192:	74 1e                	je     c000d1b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d194:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d198:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d19c:	89 d1                	mov    ecx,edx
c000d19e:	09 c1                	or     ecx,eax
c000d1a0:	74 10                	je     c000d1b2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d1a2:	83 ec 0c             	sub    esp,0xc
c000d1a5:	57                   	push   edi
c000d1a6:	56                   	push   esi
c000d1a7:	52                   	push   edx
c000d1a8:	50                   	push   eax
c000d1a9:	53                   	push   ebx
c000d1aa:	e8 db fc ff ff       	call   c000ce8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d1af:	83 c4 20             	add    esp,0x20
c000d1b2:	45                   	inc    ebp
c000d1b3:	83 fd 04             	cmp    ebp,0x4
c000d1b6:	75 ce                	jne    c000d186 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1b8:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1be:	5b                   	pop    ebx
c000d1bf:	5e                   	pop    esi
c000d1c0:	5f                   	pop    edi
c000d1c1:	5d                   	pop    ebp
c000d1c2:	c3                   	ret    
c000d1c3:	90                   	nop

c000d1c4 <Serial::Serial(char const*)>:
c000d1c4:	83 ec 0c             	sub    esp,0xc
c000d1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1cb:	83 ec 08             	sub    esp,0x8
c000d1ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1d2:	50                   	push   eax
c000d1d3:	e8 08 ea ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000d1d8:	83 c4 10             	add    esp,0x10
c000d1db:	ba b8 f8 01 c0       	mov    edx,0xc001f8b8
c000d1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e4:	89 10                	mov    DWORD PTR [eax],edx
c000d1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d1f4:	90                   	nop
c000d1f5:	83 c4 0c             	add    esp,0xc
c000d1f8:	c3                   	ret    
c000d1f9:	90                   	nop
c000d1fa:	66 90                	xchg   ax,ax

c000d1fc <Serial::~Serial()>:
c000d1fc:	83 ec 0c             	sub    esp,0xc
c000d1ff:	ba b8 f8 01 c0       	mov    edx,0xc001f8b8
c000d204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d208:	89 10                	mov    DWORD PTR [eax],edx
c000d20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	50                   	push   eax
c000d212:	e8 33 e7 ff ff       	call   c000b94a <Device::~Device()>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	90                   	nop
c000d21b:	83 c4 0c             	add    esp,0xc
c000d21e:	c3                   	ret    
c000d21f:	90                   	nop

c000d220 <Serial::~Serial()>:
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	83 ec 0c             	sub    esp,0xc
c000d226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22a:	e8 cd ff ff ff       	call   c000d1fc <Serial::~Serial()>
c000d22f:	83 c4 10             	add    esp,0x10
c000d232:	83 ec 08             	sub    esp,0x8
c000d235:	68 58 01 00 00       	push   0x158
c000d23a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d23e:	e8 d1 d2 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d243:	83 c4 10             	add    esp,0x10
c000d246:	83 c4 0c             	add    esp,0xc
c000d249:	c3                   	ret    
c000d24a:	66 90                	xchg   ax,ax

c000d24c <Timer::Timer(char const*)>:
c000d24c:	83 ec 0c             	sub    esp,0xc
c000d24f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d253:	83 ec 08             	sub    esp,0x8
c000d256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d25a:	50                   	push   eax
c000d25b:	e8 80 e9 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c000d268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26c:	89 10                	mov    DWORD PTR [eax],edx
c000d26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d272:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d27c:	90                   	nop
c000d27d:	83 c4 0c             	add    esp,0xc
c000d280:	c3                   	ret    
c000d281:	90                   	nop
c000d282:	66 90                	xchg   ax,ax

c000d284 <Timer::~Timer()>:
c000d284:	83 ec 0c             	sub    esp,0xc
c000d287:	ba fc f8 01 c0       	mov    edx,0xc001f8fc
c000d28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d290:	89 10                	mov    DWORD PTR [eax],edx
c000d292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d296:	83 ec 0c             	sub    esp,0xc
c000d299:	50                   	push   eax
c000d29a:	e8 ab e6 ff ff       	call   c000b94a <Device::~Device()>
c000d29f:	83 c4 10             	add    esp,0x10
c000d2a2:	90                   	nop
c000d2a3:	83 c4 0c             	add    esp,0xc
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <Timer::~Timer()>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	83 ec 0c             	sub    esp,0xc
c000d2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b2:	e8 cd ff ff ff       	call   c000d284 <Timer::~Timer()>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	83 ec 08             	sub    esp,0x8
c000d2bd:	68 5c 01 00 00       	push   0x15c
c000d2c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c6:	e8 49 d2 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d2cb:	83 c4 10             	add    esp,0x10
c000d2ce:	83 c4 0c             	add    esp,0xc
c000d2d1:	c3                   	ret    

c000d2d2 <Timer::read()>:
c000d2d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2dc:	c3                   	ret    

c000d2dd <setupTimer(int)>:
c000d2dd:	53                   	push   ebx
c000d2de:	83 ec 14             	sub    esp,0x14
c000d2e1:	68 5c 01 00 00       	push   0x15c
c000d2e6:	e8 8a a5 ff ff       	call   c0007875 <malloc>
c000d2eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2ee:	89 c3                	mov    ebx,eax
c000d2f0:	e8 53 fe 00 00       	call   c001d148 <PIT::PIT()>
c000d2f5:	58                   	pop    eax
c000d2f6:	5a                   	pop    edx
c000d2f7:	53                   	push   ebx
c000d2f8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d2fe:	e8 45 e7 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000d303:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d305:	6a 00                	push   0x0
c000d307:	6a 00                	push   0x0
c000d309:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d30d:	53                   	push   ebx
c000d30e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d311:	89 d8                	mov    eax,ebx
c000d313:	83 c4 28             	add    esp,0x28
c000d316:	5b                   	pop    ebx
c000d317:	c3                   	ret    

c000d318 <timerHandler(unsigned int)>:
c000d318:	56                   	push   esi
c000d319:	53                   	push   ebx
c000d31a:	51                   	push   ecx
c000d31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d31f:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d325:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d32c:	0f 84 4a 01 00 00    	je     c000d47c <timerHandler(unsigned int)+0x164>
c000d332:	fa                   	cli    
c000d333:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d339:	83 ec 0c             	sub    esp,0xc
c000d33c:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d342:	68 78 71 02 c0       	push   0xc0027178
c000d347:	e8 b4 0a 01 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d34c:	83 c4 10             	add    esp,0x10
c000d34f:	84 c0                	test   al,al
c000d351:	0f 85 a1 00 00 00    	jne    c000d3f8 <timerHandler(unsigned int)+0xe0>
c000d357:	83 ec 0c             	sub    esp,0xc
c000d35a:	68 78 71 02 c0       	push   0xc0027178
c000d35f:	e8 b8 0a 01 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d364:	83 c4 10             	add    esp,0x10
c000d367:	89 c6                	mov    esi,eax
c000d369:	8d 76 00             	lea    esi,[esi+0x0]
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	68 78 71 02 c0       	push   0xc0027178
c000d374:	e8 a3 0a 01 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d379:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d380:	89 c3                	mov    ebx,eax
c000d382:	e8 9d 0a 01 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d387:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d393:	77 23                	ja     c000d3b8 <timerHandler(unsigned int)+0xa0>
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	53                   	push   ebx
c000d399:	e8 3a 77 00 00       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c000d39e:	83 c4 10             	add    esp,0x10
c000d3a1:	39 de                	cmp    esi,ebx
c000d3a3:	75 27                	jne    c000d3cc <timerHandler(unsigned int)+0xb4>
c000d3a5:	83 ec 0c             	sub    esp,0xc
c000d3a8:	68 78 71 02 c0       	push   0xc0027178
c000d3ad:	e8 6a 0a 01 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3b2:	89 c6                	mov    esi,eax
c000d3b4:	eb 12                	jmp    c000d3c8 <timerHandler(unsigned int)+0xb0>
c000d3b6:	66 90                	xchg   ax,ax
c000d3b8:	52                   	push   edx
c000d3b9:	52                   	push   edx
c000d3ba:	53                   	push   ebx
c000d3bb:	68 78 71 02 c0       	push   0xc0027178
c000d3c0:	e8 17 0b 01 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3c8:	83 c4 10             	add    esp,0x10
c000d3cb:	90                   	nop
c000d3cc:	83 ec 0c             	sub    esp,0xc
c000d3cf:	68 78 71 02 c0       	push   0xc0027178
c000d3d4:	e8 27 0a 01 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	84 c0                	test   al,al
c000d3de:	75 18                	jne    c000d3f8 <timerHandler(unsigned int)+0xe0>
c000d3e0:	83 ec 0c             	sub    esp,0xc
c000d3e3:	68 78 71 02 c0       	push   0xc0027178
c000d3e8:	e8 2f 0a 01 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3ed:	83 c4 10             	add    esp,0x10
c000d3f0:	39 f0                	cmp    eax,esi
c000d3f2:	0f 85 74 ff ff ff    	jne    c000d36c <timerHandler(unsigned int)+0x54>
c000d3f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d3fd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d401:	74 41                	je     c000d444 <timerHandler(unsigned int)+0x12c>
c000d403:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d40a:	74 38                	je     c000d444 <timerHandler(unsigned int)+0x12c>
c000d40c:	fa                   	cli    
c000d40d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d413:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d418:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d41e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d421:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d427:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d42a:	72 08                	jb     c000d434 <timerHandler(unsigned int)+0x11c>
c000d42c:	e8 e3 71 00 00       	call   c0014614 <schedule()>
c000d431:	8d 76 00             	lea    esi,[esi+0x0]
c000d434:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d439:	48                   	dec    eax
c000d43a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d43f:	75 03                	jne    c000d444 <timerHandler(unsigned int)+0x12c>
c000d441:	fb                   	sti    
c000d442:	66 90                	xchg   ax,ax
c000d444:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d449:	48                   	dec    eax
c000d44a:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d44f:	75 1b                	jne    c000d46c <timerHandler(unsigned int)+0x154>
c000d451:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d458:	74 12                	je     c000d46c <timerHandler(unsigned int)+0x154>
c000d45a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d464:	e8 ab 71 00 00       	call   c0014614 <schedule()>
c000d469:	8d 76 00             	lea    esi,[esi+0x0]
c000d46c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d471:	48                   	dec    eax
c000d472:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d477:	75 03                	jne    c000d47c <timerHandler(unsigned int)+0x164>
c000d479:	fb                   	sti    
c000d47a:	66 90                	xchg   ax,ax
c000d47c:	58                   	pop    eax
c000d47d:	5b                   	pop    ebx
c000d47e:	5e                   	pop    esi
c000d47f:	c3                   	ret    

c000d480 <VCache::VCache(PhysicalDisk*)>:
c000d480:	53                   	push   ebx
c000d481:	83 ec 18             	sub    esp,0x18
c000d484:	ba 2c f9 01 c0       	mov    edx,0xc001f92c
c000d489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48d:	89 10                	mov    DWORD PTR [eax],edx
c000d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d493:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d49a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d49e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d4a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4c2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4cd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4e7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d4fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d502:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d511:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d519:	83 ec 0c             	sub    esp,0xc
c000d51c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d520:	e8 50 a3 ff ff       	call   c0007875 <malloc>
c000d525:	83 c4 10             	add    esp,0x10
c000d528:	89 c3                	mov    ebx,eax
c000d52a:	83 ec 0c             	sub    esp,0xc
c000d52d:	53                   	push   ebx
c000d52e:	e8 ad 6e 00 00       	call   c00143e0 <Mutex::Mutex()>
c000d533:	83 c4 10             	add    esp,0x10
c000d536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d541:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d545:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d553:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d557:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d55d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d561:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d564:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d568:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d56e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d574:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d578:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d57b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d582:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d586:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d58a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d590:	05 00 02 00 00       	add    eax,0x200
c000d595:	c1 e0 03             	shl    eax,0x3
c000d598:	83 ec 0c             	sub    esp,0xc
c000d59b:	50                   	push   eax
c000d59c:	e8 d4 a2 ff ff       	call   c0007875 <malloc>
c000d5a1:	83 c4 10             	add    esp,0x10
c000d5a4:	89 c2                	mov    edx,eax
c000d5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5c0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5c4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d5ca:	89 d0                	mov    eax,edx
c000d5cc:	c1 e0 02             	shl    eax,0x2
c000d5cf:	01 d0                	add    eax,edx
c000d5d1:	c1 e0 04             	shl    eax,0x4
c000d5d4:	83 ec 0c             	sub    esp,0xc
c000d5d7:	50                   	push   eax
c000d5d8:	e8 98 a2 ff ff       	call   c0007875 <malloc>
c000d5dd:	83 c4 10             	add    esp,0x10
c000d5e0:	89 c2                	mov    edx,eax
c000d5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5e9:	90                   	nop
c000d5ea:	83 c4 18             	add    esp,0x18
c000d5ed:	5b                   	pop    ebx
c000d5ee:	c3                   	ret    
c000d5ef:	90                   	nop

c000d5f0 <VCache::invalidateReadBuffer()>:
c000d5f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5f4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d5fa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5fe:	c3                   	ret    
c000d5ff:	90                   	nop

c000d600 <VCache::writeWriteBuffer()>:
c000d600:	53                   	push   ebx
c000d601:	83 ec 08             	sub    esp,0x8
c000d604:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d608:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d60c:	74 1e                	je     c000d62c <VCache::writeWriteBuffer()+0x2c>
c000d60e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d611:	83 ec 0c             	sub    esp,0xc
c000d614:	8b 10                	mov    edx,DWORD PTR [eax]
c000d616:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d619:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d61c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d61f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d622:	50                   	push   eax
c000d623:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d626:	83 c4 20             	add    esp,0x20
c000d629:	8d 76 00             	lea    esi,[esi+0x0]
c000d62c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d633:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d63a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d63e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d645:	83 c4 08             	add    esp,0x8
c000d648:	5b                   	pop    ebx
c000d649:	c3                   	ret    
c000d64a:	66 90                	xchg   ax,ax

c000d64c <VCache::~VCache()>:
c000d64c:	83 ec 0c             	sub    esp,0xc
c000d64f:	ba 2c f9 01 c0       	mov    edx,0xc001f92c
c000d654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d658:	89 10                	mov    DWORD PTR [eax],edx
c000d65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d65e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d661:	84 c0                	test   al,al
c000d663:	74 0f                	je     c000d674 <VCache::~VCache()+0x28>
c000d665:	83 ec 0c             	sub    esp,0xc
c000d668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d66c:	e8 8f ff ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c000d671:	83 c4 10             	add    esp,0x10
c000d674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d678:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	50                   	push   eax
c000d67f:	e8 01 a2 ff ff       	call   c0007885 <free>
c000d684:	83 c4 10             	add    esp,0x10
c000d687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d68e:	83 ec 0c             	sub    esp,0xc
c000d691:	50                   	push   eax
c000d692:	e8 ee a1 ff ff       	call   c0007885 <free>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	90                   	nop
c000d69b:	83 c4 0c             	add    esp,0xc
c000d69e:	c3                   	ret    
c000d69f:	90                   	nop

c000d6a0 <VCache::~VCache()>:
c000d6a0:	83 ec 0c             	sub    esp,0xc
c000d6a3:	83 ec 0c             	sub    esp,0xc
c000d6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6aa:	e8 9d ff ff ff       	call   c000d64c <VCache::~VCache()>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	83 ec 08             	sub    esp,0x8
c000d6b5:	6a 44                	push   0x44
c000d6b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6bb:	e8 54 ce ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000d6c0:	83 c4 10             	add    esp,0x10
c000d6c3:	83 c4 0c             	add    esp,0xc
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <VCache::write(unsigned long long, int, void*)>:
c000d6c8:	55                   	push   ebp
c000d6c9:	57                   	push   edi
c000d6ca:	56                   	push   esi
c000d6cb:	53                   	push   ebx
c000d6cc:	83 ec 1c             	sub    esp,0x1c
c000d6cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6d7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6df:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d6e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6e7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d6eb:	74 07                	je     c000d6f4 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d6ed:	53                   	push   ebx
c000d6ee:	e8 fd fe ff ff       	call   c000d5f0 <VCache::invalidateReadBuffer()>
c000d6f3:	58                   	pop    eax
c000d6f4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6f8:	74 62                	je     c000d75c <VCache::write(unsigned long long, int, void*)+0x94>
c000d6fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d6fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d701:	99                   	cdq    
c000d702:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d706:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d709:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d70c:	31 c1                	xor    ecx,eax
c000d70e:	89 d0                	mov    eax,edx
c000d710:	89 ca                	mov    edx,ecx
c000d712:	31 e8                	xor    eax,ebp
c000d714:	09 c2                	or     edx,eax
c000d716:	75 38                	jne    c000d750 <VCache::write(unsigned long long, int, void*)+0x88>
c000d718:	83 ff 01             	cmp    edi,0x1
c000d71b:	75 33                	jne    c000d750 <VCache::write(unsigned long long, int, void*)+0x88>
c000d71d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d720:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d724:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d72a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d72d:	0f af c8             	imul   ecx,eax
c000d730:	01 cf                	add    edi,ecx
c000d732:	89 c1                	mov    ecx,eax
c000d734:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d736:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d739:	40                   	inc    eax
c000d73a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d73d:	83 f8 50             	cmp    eax,0x50
c000d740:	75 6a                	jne    c000d7ac <VCache::write(unsigned long long, int, void*)+0xe4>
c000d742:	83 ec 0c             	sub    esp,0xc
c000d745:	53                   	push   ebx
c000d746:	e8 b5 fe ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c000d74b:	83 c4 10             	add    esp,0x10
c000d74e:	eb 5c                	jmp    c000d7ac <VCache::write(unsigned long long, int, void*)+0xe4>
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	53                   	push   ebx
c000d754:	e8 a7 fe ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d75f:	83 ff 4f             	cmp    edi,0x4f
c000d762:	7f 20                	jg     c000d784 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d764:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d76b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d76e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d771:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d775:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d778:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d77e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d780:	eb 2a                	jmp    c000d7ac <VCache::write(unsigned long long, int, void*)+0xe4>
c000d782:	66 90                	xchg   ax,ax
c000d784:	8b 10                	mov    edx,DWORD PTR [eax]
c000d786:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d78a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d78e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d792:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d796:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d79a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d79e:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7a1:	83 c4 1c             	add    esp,0x1c
c000d7a4:	5b                   	pop    ebx
c000d7a5:	5e                   	pop    esi
c000d7a6:	5f                   	pop    edi
c000d7a7:	5d                   	pop    ebp
c000d7a8:	ff e0                	jmp    eax
c000d7aa:	66 90                	xchg   ax,ax
c000d7ac:	83 c4 1c             	add    esp,0x1c
c000d7af:	31 c0                	xor    eax,eax
c000d7b1:	5b                   	pop    ebx
c000d7b2:	5e                   	pop    esi
c000d7b3:	5f                   	pop    edi
c000d7b4:	5d                   	pop    ebp
c000d7b5:	c3                   	ret    

c000d7b6 <VCache::read(unsigned long long, int, void*)>:
c000d7b6:	55                   	push   ebp
c000d7b7:	57                   	push   edi
c000d7b8:	56                   	push   esi
c000d7b9:	53                   	push   ebx
c000d7ba:	83 ec 1c             	sub    esp,0x1c
c000d7bd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d7c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d7c9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d7cd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d7d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7d5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d7d9:	74 0d                	je     c000d7e8 <VCache::read(unsigned long long, int, void*)+0x32>
c000d7db:	83 ec 0c             	sub    esp,0xc
c000d7de:	57                   	push   edi
c000d7df:	e8 1c fe ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c000d7e4:	83 c4 10             	add    esp,0x10
c000d7e7:	90                   	nop
c000d7e8:	83 fd 01             	cmp    ebp,0x1
c000d7eb:	0f 85 93 00 00 00    	jne    c000d884 <VCache::read(unsigned long long, int, void*)+0xce>
c000d7f1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d7f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7f7:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d7fe:	0f 85 80 00 00 00    	jne    c000d884 <VCache::read(unsigned long long, int, void*)+0xce>
c000d804:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d807:	89 e9                	mov    ecx,ebp
c000d809:	f7 d9                	neg    ecx
c000d80b:	89 c8                	mov    eax,ecx
c000d80d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d811:	c1 f8 1f             	sar    eax,0x1f
c000d814:	21 d9                	and    ecx,ebx
c000d816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d81a:	89 c8                	mov    eax,ecx
c000d81c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d820:	21 f1                	and    ecx,esi
c000d822:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d826:	89 ca                	mov    edx,ecx
c000d828:	74 2e                	je     c000d858 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d82a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d82d:	75 29                	jne    c000d858 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d82f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d832:	75 24                	jne    c000d858 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d834:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d837:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d83d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d840:	8d 70 ff             	lea    esi,[eax-0x1]
c000d843:	21 f3                	and    ebx,esi
c000d845:	0f af d9             	imul   ebx,ecx
c000d848:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d84b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d84f:	89 de                	mov    esi,ebx
c000d851:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d853:	31 c0                	xor    eax,eax
c000d855:	eb 61                	jmp    c000d8b8 <VCache::read(unsigned long long, int, void*)+0x102>
c000d857:	90                   	nop
c000d858:	83 ec 0c             	sub    esp,0xc
c000d85b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d85f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d863:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d866:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d869:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d86b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d86e:	55                   	push   ebp
c000d86f:	52                   	push   edx
c000d870:	50                   	push   eax
c000d871:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d875:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d878:	83 c4 20             	add    esp,0x20
c000d87b:	85 c0                	test   eax,eax
c000d87d:	75 39                	jne    c000d8b8 <VCache::read(unsigned long long, int, void*)+0x102>
c000d87f:	eb b3                	jmp    c000d834 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d881:	8d 76 00             	lea    esi,[esi+0x0]
c000d884:	83 ec 0c             	sub    esp,0xc
c000d887:	57                   	push   edi
c000d888:	e8 63 fd ff ff       	call   c000d5f0 <VCache::invalidateReadBuffer()>
c000d88d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d890:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d894:	8b 10                	mov    edx,DWORD PTR [eax]
c000d896:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d89a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d89e:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d8a2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d8a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8aa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d8ad:	83 c4 2c             	add    esp,0x2c
c000d8b0:	5b                   	pop    ebx
c000d8b1:	5e                   	pop    esi
c000d8b2:	5f                   	pop    edi
c000d8b3:	5d                   	pop    ebp
c000d8b4:	ff e0                	jmp    eax
c000d8b6:	66 90                	xchg   ax,ax
c000d8b8:	83 c4 1c             	add    esp,0x1c
c000d8bb:	5b                   	pop    ebx
c000d8bc:	5e                   	pop    esi
c000d8bd:	5f                   	pop    edi
c000d8be:	5d                   	pop    ebp
c000d8bf:	c3                   	ret    

c000d8c0 <Video::putrect(int, int, int, int, unsigned int)>:
c000d8c0:	55                   	push   ebp
c000d8c1:	57                   	push   edi
c000d8c2:	56                   	push   esi
c000d8c3:	53                   	push   ebx
c000d8c4:	83 ec 1c             	sub    esp,0x1c
c000d8c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d8cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d8cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d8d3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d8d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8df:	01 df                	add    edi,ebx
c000d8e1:	39 fb                	cmp    ebx,edi
c000d8e3:	7d 1f                	jge    c000d904 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d8e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d8e9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d8ed:	7d 12                	jge    c000d901 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d8ef:	8b 16                	mov    edx,DWORD PTR [esi]
c000d8f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f5:	53                   	push   ebx
c000d8f6:	55                   	push   ebp
c000d8f7:	45                   	inc    ebp
c000d8f8:	56                   	push   esi
c000d8f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	eb e8                	jmp    c000d8e9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d901:	43                   	inc    ebx
c000d902:	eb dd                	jmp    c000d8e1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d904:	83 c4 1c             	add    esp,0x1c
c000d907:	5b                   	pop    ebx
c000d908:	5e                   	pop    esi
c000d909:	5f                   	pop    edi
c000d90a:	5d                   	pop    ebp
c000d90b:	c3                   	ret    

c000d90c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d90c:	55                   	push   ebp
c000d90d:	57                   	push   edi
c000d90e:	31 ff                	xor    edi,edi
c000d910:	56                   	push   esi
c000d911:	53                   	push   ebx
c000d912:	83 ec 1c             	sub    esp,0x1c
c000d915:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d919:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d91d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d924:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d929:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d92d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d931:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d935:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d938:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d93c:	01 f9                	add    ecx,edi
c000d93e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d942:	7d 2f                	jge    c000d973 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d944:	31 f6                	xor    esi,esi
c000d946:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d94a:	01 f2                	add    edx,esi
c000d94c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d950:	7d 1a                	jge    c000d96c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d952:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d955:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d958:	46                   	inc    esi
c000d959:	51                   	push   ecx
c000d95a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d95e:	52                   	push   edx
c000d95f:	55                   	push   ebp
c000d960:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d963:	83 c4 10             	add    esp,0x10
c000d966:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d96a:	eb da                	jmp    c000d946 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d96c:	47                   	inc    edi
c000d96d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d971:	eb c5                	jmp    c000d938 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d973:	83 c4 1c             	add    esp,0x1c
c000d976:	5b                   	pop    ebx
c000d977:	5e                   	pop    esi
c000d978:	5f                   	pop    edi
c000d979:	5d                   	pop    ebp
c000d97a:	c3                   	ret    
c000d97b:	90                   	nop

c000d97c <Video::blit(unsigned int*, int, int, int, int)>:
c000d97c:	55                   	push   ebp
c000d97d:	57                   	push   edi
c000d97e:	56                   	push   esi
c000d97f:	53                   	push   ebx
c000d980:	83 ec 1c             	sub    esp,0x1c
c000d983:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d987:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d98b:	85 c0                	test   eax,eax
c000d98d:	79 02                	jns    c000d991 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d98f:	31 c0                	xor    eax,eax
c000d991:	c1 e0 02             	shl    eax,0x2
c000d994:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d998:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d99c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d9a0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d9a4:	39 d8                	cmp    eax,ebx
c000d9a6:	7e 49                	jle    c000d9f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9a8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d9ae:	7c 41                	jl     c000d9f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d9b0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d9b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9b8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9bc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d9c0:	39 f9                	cmp    ecx,edi
c000d9c2:	7e 22                	jle    c000d9e6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d9c4:	83 c5 04             	add    ebp,0x4
c000d9c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d9cd:	7c 14                	jl     c000d9e3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d9cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d9d1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d9d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d9dc:	56                   	push   esi
c000d9dd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	47                   	inc    edi
c000d9e4:	eb d2                	jmp    c000d9b8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d9e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d9ea:	43                   	inc    ebx
c000d9eb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d9ef:	eb ab                	jmp    c000d99c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d9f1:	83 c4 1c             	add    esp,0x1c
c000d9f4:	5b                   	pop    ebx
c000d9f5:	5e                   	pop    esi
c000d9f6:	5f                   	pop    edi
c000d9f7:	5d                   	pop    ebp
c000d9f8:	c3                   	ret    
c000d9f9:	90                   	nop

c000d9fa <Video::clearScreen(unsigned int)>:
c000d9fa:	57                   	push   edi
c000d9fb:	56                   	push   esi
c000d9fc:	53                   	push   ebx
c000d9fd:	31 db                	xor    ebx,ebx
c000d9ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da03:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da09:	7e 1f                	jle    c000da2a <Video::clearScreen(unsigned int)+0x30>
c000da0b:	31 ff                	xor    edi,edi
c000da0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da13:	7e 12                	jle    c000da27 <Video::clearScreen(unsigned int)+0x2d>
c000da15:	8b 06                	mov    eax,DWORD PTR [esi]
c000da17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da1b:	53                   	push   ebx
c000da1c:	57                   	push   edi
c000da1d:	47                   	inc    edi
c000da1e:	56                   	push   esi
c000da1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da22:	83 c4 10             	add    esp,0x10
c000da25:	eb e6                	jmp    c000da0d <Video::clearScreen(unsigned int)+0x13>
c000da27:	43                   	inc    ebx
c000da28:	eb d9                	jmp    c000da03 <Video::clearScreen(unsigned int)+0x9>
c000da2a:	5b                   	pop    ebx
c000da2b:	5e                   	pop    esi
c000da2c:	5f                   	pop    edi
c000da2d:	c3                   	ret    

c000da2e <Video::putpixel(int, int, unsigned int)>:
c000da2e:	c7 44 24 04 34 f9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f934
c000da36:	e9 d0 28 00 00       	jmp    c001030b <KePanic(char const*)>
c000da3b:	90                   	nop

c000da3c <Video::readPixelApprox(int, int)>:
c000da3c:	83 ec 18             	sub    esp,0x18
c000da3f:	68 55 f9 01 c0       	push   0xc001f955
c000da44:	e8 c2 28 00 00       	call   c001030b <KePanic(char const*)>
c000da49:	31 c0                	xor    eax,eax
c000da4b:	83 c4 1c             	add    esp,0x1c
c000da4e:	c3                   	ret    
c000da4f:	90                   	nop

c000da50 <Video::Video(char const*)>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da57:	83 ec 08             	sub    esp,0x8
c000da5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5e:	50                   	push   eax
c000da5f:	e8 7c e1 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000da64:	83 c4 10             	add    esp,0x10
c000da67:	ba d0 f9 01 c0       	mov    edx,0xc001f9d0
c000da6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da70:	89 10                	mov    DWORD PTR [eax],edx
c000da72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da76:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000da80:	90                   	nop
c000da81:	83 c4 0c             	add    esp,0xc
c000da84:	c3                   	ret    
c000da85:	90                   	nop

c000da86 <Video::~Video()>:
c000da86:	83 ec 0c             	sub    esp,0xc
c000da89:	ba d0 f9 01 c0       	mov    edx,0xc001f9d0
c000da8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da92:	89 10                	mov    DWORD PTR [eax],edx
c000da94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	50                   	push   eax
c000da9c:	e8 a9 de ff ff       	call   c000b94a <Device::~Device()>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	90                   	nop
c000daa5:	83 c4 0c             	add    esp,0xc
c000daa8:	c3                   	ret    
c000daa9:	90                   	nop

c000daaa <Video::~Video()>:
c000daaa:	83 ec 0c             	sub    esp,0xc
c000daad:	83 ec 0c             	sub    esp,0xc
c000dab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab4:	e8 cd ff ff ff       	call   c000da86 <Video::~Video()>
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	83 ec 08             	sub    esp,0x8
c000dabf:	68 64 01 00 00       	push   0x164
c000dac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac8:	e8 47 ca ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	83 c4 0c             	add    esp,0xc
c000dad3:	c3                   	ret    

c000dad4 <Video::isMonochrome()>:
c000dad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dade:	c3                   	ret    
c000dadf:	90                   	nop

c000dae0 <Video::getWidth()>:
c000dae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dae4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daea:	c3                   	ret    
c000daeb:	90                   	nop

c000daec <Video::getHeight()>:
c000daec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <Video::drawCursor(int, int, unsigned int*, int)>:
c000daf8:	55                   	push   ebp
c000daf9:	57                   	push   edi
c000dafa:	56                   	push   esi
c000dafb:	53                   	push   ebx
c000dafc:	83 ec 2c             	sub    esp,0x2c
c000daff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000db03:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000db07:	83 f8 01             	cmp    eax,0x1
c000db0a:	19 c9                	sbb    ecx,ecx
c000db0c:	31 db                	xor    ebx,ebx
c000db0e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000db12:	89 cd                	mov    ebp,ecx
c000db14:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000db1c:	f7 d5                	not    ebp
c000db1e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000db24:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000db28:	01 d8                	add    eax,ebx
c000db2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db2e:	56                   	push   esi
c000db2f:	e8 b8 ff ff ff       	call   c000daec <Video::getHeight()>
c000db34:	59                   	pop    ecx
c000db35:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000db39:	7e 70                	jle    c000dbab <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000db3b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000db43:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000db46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000db4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000db4e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000db55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db59:	89 f8                	mov    eax,edi
c000db5b:	83 c0 20             	add    eax,0x20
c000db5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db62:	56                   	push   esi
c000db63:	e8 78 ff ff ff       	call   c000dae0 <Video::getWidth()>
c000db68:	5a                   	pop    edx
c000db69:	39 c7                	cmp    edi,eax
c000db6b:	7d 34                	jge    c000dba1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000db6d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000db72:	74 05                	je     c000db79 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000db74:	8b 06                	mov    eax,DWORD PTR [esi]
c000db76:	55                   	push   ebp
c000db77:	eb 0d                	jmp    c000db86 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000db79:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000db7e:	74 12                	je     c000db92 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000db80:	8b 06                	mov    eax,DWORD PTR [esi]
c000db82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000db8a:	57                   	push   edi
c000db8b:	56                   	push   esi
c000db8c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db8f:	83 c4 10             	add    esp,0x10
c000db92:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db96:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db9a:	47                   	inc    edi
c000db9b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db9f:	75 c1                	jne    c000db62 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dba1:	43                   	inc    ebx
c000dba2:	83 fb 20             	cmp    ebx,0x20
c000dba5:	0f 85 79 ff ff ff    	jne    c000db24 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dbab:	83 c4 2c             	add    esp,0x2c
c000dbae:	5b                   	pop    ebx
c000dbaf:	5e                   	pop    esi
c000dbb0:	5f                   	pop    edi
c000dbb1:	5d                   	pop    ebp
c000dbb2:	c3                   	ret    
c000dbb3:	90                   	nop

c000dbb4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dbb4:	55                   	push   ebp
c000dbb5:	57                   	push   edi
c000dbb6:	56                   	push   esi
c000dbb7:	53                   	push   ebx
c000dbb8:	83 ec 28             	sub    esp,0x28
c000dbbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dbbf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dbc3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dbc7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dbcb:	c1 e6 08             	shl    esi,0x8
c000dbce:	01 c6                	add    esi,eax
c000dbd0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dbd4:	c1 e0 08             	shl    eax,0x8
c000dbd7:	01 d0                	add    eax,edx
c000dbd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbe1:	0f af c6             	imul   eax,esi
c000dbe4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dbeb:	50                   	push   eax
c000dbec:	e8 84 9c ff ff       	call   c0007875 <malloc>
c000dbf1:	83 c4 10             	add    esp,0x10
c000dbf4:	89 c7                	mov    edi,eax
c000dbf6:	85 c0                	test   eax,eax
c000dbf8:	75 10                	jne    c000dc0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dbfa:	83 ec 0c             	sub    esp,0xc
c000dbfd:	68 80 f9 01 c0       	push   0xc001f980
c000dc02:	e8 04 27 00 00       	call   c001030b <KePanic(char const*)>
c000dc07:	83 c4 10             	add    esp,0x10
c000dc0a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dc0d:	ba 12 00 00 00       	mov    edx,0x12
c000dc12:	84 c0                	test   al,al
c000dc14:	74 11                	je     c000dc27 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dc16:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dc1a:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dc1e:	c1 fa 03             	sar    edx,0x3
c000dc21:	0f af d1             	imul   edx,ecx
c000dc24:	83 c2 12             	add    edx,0x12
c000dc27:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dc2b:	74 04                	je     c000dc31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dc2d:	85 f6                	test   esi,esi
c000dc2f:	75 12                	jne    c000dc43 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dc31:	83 ec 0c             	sub    esp,0xc
c000dc34:	68 90 f9 01 c0       	push   0xc001f990
c000dc39:	e8 cc c9 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000dc3e:	e9 b8 00 00 00       	jmp    c000dcfb <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dc43:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dc47:	80 f9 02             	cmp    cl,0x2
c000dc4a:	0f 85 96 00 00 00    	jne    c000dce6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dc50:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dc55:	75 0e                	jne    c000dc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc57:	84 c0                	test   al,al
c000dc59:	75 0a                	jne    c000dc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dc5b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dc5e:	83 e8 18             	sub    eax,0x18
c000dc61:	a8 f7                	test   al,0xf7
c000dc63:	74 0a                	je     c000dc6f <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dc65:	83 ec 0c             	sub    esp,0xc
c000dc68:	68 a5 f9 01 c0       	push   0xc001f9a5
c000dc6d:	eb 7f                	jmp    c000dcee <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dc6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dc77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dc7f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dc83:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc8b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dc8f:	75 0c                	jne    c000dc9d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dc91:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc96:	c1 e0 18             	shl    eax,0x18
c000dc99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc9d:	45                   	inc    ebp
c000dc9e:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dca3:	c1 e1 10             	shl    ecx,0x10
c000dca6:	89 c8                	mov    eax,ecx
c000dca8:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dcad:	c1 e1 08             	shl    ecx,0x8
c000dcb0:	09 c1                	or     ecx,eax
c000dcb2:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dcb6:	09 c1                	or     ecx,eax
c000dcb8:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dcbc:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dcc0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dcc4:	c1 f8 03             	sar    eax,0x3
c000dcc7:	01 c2                	add    edx,eax
c000dcc9:	89 e8                	mov    eax,ebp
c000dccb:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dccf:	39 c6                	cmp    esi,eax
c000dcd1:	7f b0                	jg     c000dc83 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dcd3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dcd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dcdb:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dcde:	7e 22                	jle    c000dd02 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dce0:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dce4:	eb 99                	jmp    c000dc7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dce6:	50                   	push   eax
c000dce7:	50                   	push   eax
c000dce8:	51                   	push   ecx
c000dce9:	68 b3 f9 01 c0       	push   0xc001f9b3
c000dcee:	e8 17 c9 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000dcf3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dcf6:	e8 8a 9b ff ff       	call   c0007885 <free>
c000dcfb:	83 c4 10             	add    esp,0x10
c000dcfe:	31 ff                	xor    edi,edi
c000dd00:	eb 0f                	jmp    c000dd11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dd02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dd06:	89 30                	mov    DWORD PTR [eax],esi
c000dd08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dd0f:	89 30                	mov    DWORD PTR [eax],esi
c000dd11:	83 c4 1c             	add    esp,0x1c
c000dd14:	89 f8                	mov    eax,edi
c000dd16:	5b                   	pop    ebx
c000dd17:	5e                   	pop    esi
c000dd18:	5f                   	pop    edi
c000dd19:	5d                   	pop    ebp
c000dd1a:	c3                   	ret    
c000dd1b:	90                   	nop

c000dd1c <Video::putTGA(int, int, unsigned char*, int)>:
c000dd1c:	55                   	push   ebp
c000dd1d:	57                   	push   edi
c000dd1e:	56                   	push   esi
c000dd1f:	53                   	push   ebx
c000dd20:	83 ec 28             	sub    esp,0x28
c000dd23:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd27:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd2b:	50                   	push   eax
c000dd2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dd30:	50                   	push   eax
c000dd31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd35:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd39:	56                   	push   esi
c000dd3a:	e8 75 fe ff ff       	call   c000dbb4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dd3f:	83 c4 20             	add    esp,0x20
c000dd42:	85 c0                	test   eax,eax
c000dd44:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dd48:	74 35                	je     c000dd7f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd4a:	89 c7                	mov    edi,eax
c000dd4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd50:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd54:	39 d8                	cmp    eax,ebx
c000dd56:	7e 27                	jle    c000dd7f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dd58:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dd5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd60:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dd64:	39 e8                	cmp    eax,ebp
c000dd66:	7e 14                	jle    c000dd7c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dd68:	8b 06                	mov    eax,DWORD PTR [esi]
c000dd6a:	83 c7 04             	add    edi,0x4
c000dd6d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dd70:	53                   	push   ebx
c000dd71:	55                   	push   ebp
c000dd72:	45                   	inc    ebp
c000dd73:	56                   	push   esi
c000dd74:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dd77:	83 c4 10             	add    esp,0x10
c000dd7a:	eb e0                	jmp    c000dd5c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dd7c:	43                   	inc    ebx
c000dd7d:	eb cd                	jmp    c000dd4c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dd7f:	83 c4 1c             	add    esp,0x1c
c000dd82:	5b                   	pop    ebx
c000dd83:	5e                   	pop    esi
c000dd84:	5f                   	pop    edi
c000dd85:	5d                   	pop    ebp
c000dd86:	c3                   	ret    
c000dd87:	90                   	nop

c000dd88 <ACPI::close(int, int, void*)>:
c000dd88:	83 ec 1c             	sub    esp,0x1c
c000dd8b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dd93:	74 0b                	je     c000dda0 <ACPI::close(int, int, void*)+0x18>
c000dd95:	b8 00 00 00 00       	mov    eax,0x0
c000dd9a:	e9 9d 00 00 00       	jmp    c000de3c <ACPI::close(int, int, void*)+0xb4>
c000dd9f:	90                   	nop
c000dda0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dda5:	75 29                	jne    c000ddd0 <ACPI::close(int, int, void*)+0x48>
c000dda7:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000ddac:	85 c0                	test   eax,eax
c000ddae:	74 08                	je     c000ddb8 <ACPI::close(int, int, void*)+0x30>
c000ddb0:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000ddb5:	ff d0                	call   eax
c000ddb7:	90                   	nop
c000ddb8:	83 ec 0c             	sub    esp,0xc
c000ddbb:	68 14 fa 01 c0       	push   0xc001fa14
c000ddc0:	e8 46 25 00 00       	call   c001030b <KePanic(char const*)>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ddcd:	eb 6d                	jmp    c000de3c <ACPI::close(int, int, void*)+0xb4>
c000ddcf:	90                   	nop
c000ddd0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ddd5:	75 5d                	jne    c000de34 <ACPI::close(int, int, void*)+0xac>
c000ddd7:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dddc:	85 c0                	test   eax,eax
c000ddde:	74 08                	je     c000dde8 <ACPI::close(int, int, void*)+0x60>
c000dde0:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dde5:	ff d0                	call   eax
c000dde7:	90                   	nop
c000dde8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ddf4:	25 ff 00 00 00       	and    eax,0xff
c000ddf9:	83 e0 02             	and    eax,0x2
c000ddfc:	74 1e                	je     c000de1c <ACPI::close(int, int, void*)+0x94>
c000ddfe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000de05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de09:	89 c2                	mov    edx,eax
c000de0b:	ec                   	in     al,dx
c000de0c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000de10:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000de14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000de18:	eb d6                	jmp    c000ddf0 <ACPI::close(int, int, void*)+0x68>
c000de1a:	66 90                	xchg   ax,ax
c000de1c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000de23:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000de28:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000de2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de30:	ee                   	out    dx,al
c000de31:	8d 76 00             	lea    esi,[esi+0x0]
c000de34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de39:	8d 76 00             	lea    esi,[esi+0x0]
c000de3c:	83 c4 1c             	add    esp,0x1c
c000de3f:	c3                   	ret    

c000de40 <findRSDP()>:
c000de40:	83 ec 1c             	sub    esp,0x1c
c000de43:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000de48:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de4e:	83 e0 04             	and    eax,0x4
c000de51:	84 c0                	test   al,al
c000de53:	75 07                	jne    c000de5c <findRSDP()+0x1c>
c000de55:	b8 00 00 00 00       	mov    eax,0x0
c000de5a:	eb 70                	jmp    c000decc <findRSDP()+0x8c>
c000de5c:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000de61:	3d ff 07 00 00       	cmp    eax,0x7ff
c000de66:	7f 1c                	jg     c000de84 <findRSDP()+0x44>
c000de68:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000de6d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000de73:	83 e2 fb             	and    edx,0xfffffffb
c000de76:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000de7c:	b8 00 00 00 00       	mov    eax,0x0
c000de81:	eb 49                	jmp    c000decc <findRSDP()+0x8c>
c000de83:	90                   	nop
c000de84:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000de8c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de94:	77 2e                	ja     c000dec4 <findRSDP()+0x84>
c000de96:	83 ec 04             	sub    esp,0x4
c000de99:	6a 08                	push   0x8
c000de9b:	68 af fa 01 c0       	push   0xc001faaf
c000dea0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dea4:	e8 e7 24 ff ff       	call   c0000390 <memcmp>
c000dea9:	83 c4 10             	add    esp,0x10
c000deac:	85 c0                	test   eax,eax
c000deae:	0f 94 c0             	sete   al
c000deb1:	84 c0                	test   al,al
c000deb3:	74 07                	je     c000debc <findRSDP()+0x7c>
c000deb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deb9:	eb 11                	jmp    c000decc <findRSDP()+0x8c>
c000debb:	90                   	nop
c000debc:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dec1:	eb c9                	jmp    c000de8c <findRSDP()+0x4c>
c000dec3:	90                   	nop
c000dec4:	b8 00 00 00 00       	mov    eax,0x0
c000dec9:	8d 76 00             	lea    esi,[esi+0x0]
c000decc:	83 c4 1c             	add    esp,0x1c
c000decf:	c3                   	ret    

c000ded0 <loadACPITables(unsigned char*)>:
c000ded0:	57                   	push   edi
c000ded1:	56                   	push   esi
c000ded2:	53                   	push   ebx
c000ded3:	83 ec 60             	sub    esp,0x60
c000ded6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000dedb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dee1:	83 e0 04             	and    eax,0x4
c000dee4:	84 c0                	test   al,al
c000dee6:	0f 84 3c 02 00 00    	je     c000e128 <loadACPITables(unsigned char*)+0x258>
c000deec:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000def1:	84 c0                	test   al,al
c000def3:	74 77                	je     c000df6c <loadACPITables(unsigned char*)+0x9c>
c000def5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000def9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000defd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000df01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df04:	83 e8 24             	sub    eax,0x24
c000df07:	c1 e8 03             	shr    eax,0x3
c000df0a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000df0e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000df16:	66 90                	xchg   ax,ax
c000df18:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df1c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000df20:	0f 8d b6 00 00 00    	jge    c000dfdc <loadACPITables(unsigned char*)+0x10c>
c000df26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df2a:	83 c0 24             	add    eax,0x24
c000df2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000df31:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000df35:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df39:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000df3d:	c1 e0 03             	shl    eax,0x3
c000df40:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000df44:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df48:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000df4b:	8b 00                	mov    eax,DWORD PTR [eax]
c000df4d:	89 c1                	mov    ecx,eax
c000df4f:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000df54:	8d 50 01             	lea    edx,[eax+0x1]
c000df57:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000df5d:	89 ca                	mov    edx,ecx
c000df5f:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000df66:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000df6a:	eb ac                	jmp    c000df18 <loadACPITables(unsigned char*)+0x48>
c000df6c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df70:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df7b:	83 e8 24             	sub    eax,0x24
c000df7e:	c1 e8 02             	shr    eax,0x2
c000df81:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df85:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000df8d:	8d 76 00             	lea    esi,[esi+0x0]
c000df90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df94:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df98:	7d 42                	jge    c000dfdc <loadACPITables(unsigned char*)+0x10c>
c000df9a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df9e:	83 c0 24             	add    eax,0x24
c000dfa1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfa5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfa9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dfad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dfb1:	c1 e0 02             	shl    eax,0x2
c000dfb4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dfb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dfbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dfbe:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000dfc3:	8d 50 01             	lea    edx,[eax+0x1]
c000dfc6:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000dfcc:	89 ca                	mov    edx,ecx
c000dfce:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000dfd5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dfd9:	eb b5                	jmp    c000df90 <loadACPITables(unsigned char*)+0xc0>
c000dfdb:	90                   	nop
c000dfdc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dfe4:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000dfe9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dfed:	0f 8d 39 01 00 00    	jge    c000e12c <loadACPITables(unsigned char*)+0x25c>
c000dff3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dff7:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000dffe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e006:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e00a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e00e:	25 ff 0f 00 00       	and    eax,0xfff
c000e013:	89 c6                	mov    esi,eax
c000e015:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e01b:	83 ec 0c             	sub    esp,0xc
c000e01e:	6a 01                	push   0x1
c000e020:	e8 28 b3 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e025:	83 c4 10             	add    esp,0x10
c000e028:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e02c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e032:	83 ec 0c             	sub    esp,0xc
c000e035:	6a 01                	push   0x1
c000e037:	6a 01                	push   0x1
c000e039:	50                   	push   eax
c000e03a:	52                   	push   edx
c000e03b:	53                   	push   ebx
c000e03c:	e8 c9 bc ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e041:	83 c4 20             	add    esp,0x20
c000e044:	09 f0                	or     eax,esi
c000e046:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e04a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e04e:	c1 e0 03             	shl    eax,0x3
c000e051:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e056:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e05a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e05e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e062:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e06a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e06e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e072:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e076:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e07a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e07e:	89 c6                	mov    esi,eax
c000e080:	89 d7                	mov    edi,edx
c000e082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e084:	89 c8                	mov    eax,ecx
c000e086:	89 fa                	mov    edx,edi
c000e088:	89 f3                	mov    ebx,esi
c000e08a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e08e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e096:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e09a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e09d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e0a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e0a5:	05 00 10 00 00       	add    eax,0x1000
c000e0aa:	c1 e8 0c             	shr    eax,0xc
c000e0ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0bd:	25 ff 0f 00 00       	and    eax,0xfff
c000e0c2:	89 c6                	mov    esi,eax
c000e0c4:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e0d1:	e8 77 b2 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e0d6:	83 c4 10             	add    esp,0x10
c000e0d9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0e3:	83 ec 0c             	sub    esp,0xc
c000e0e6:	6a 01                	push   0x1
c000e0e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e0ec:	50                   	push   eax
c000e0ed:	52                   	push   edx
c000e0ee:	53                   	push   ebx
c000e0ef:	e8 16 bc ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0f4:	83 c4 20             	add    esp,0x20
c000e0f7:	09 f0                	or     eax,esi
c000e0f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e101:	83 ec 0c             	sub    esp,0xc
c000e104:	50                   	push   eax
c000e105:	e8 37 b5 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c000e10a:	83 c4 10             	add    esp,0x10
c000e10d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e111:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e115:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e11c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e120:	e9 bf fe ff ff       	jmp    c000dfe4 <loadACPITables(unsigned char*)+0x114>
c000e125:	8d 76 00             	lea    esi,[esi+0x0]
c000e128:	90                   	nop
c000e129:	8d 76 00             	lea    esi,[esi+0x0]
c000e12c:	83 c4 60             	add    esp,0x60
c000e12f:	5b                   	pop    ebx
c000e130:	5e                   	pop    esi
c000e131:	5f                   	pop    edi
c000e132:	c3                   	ret    
c000e133:	90                   	nop

c000e134 <findRSDT(unsigned char*)>:
c000e134:	57                   	push   edi
c000e135:	56                   	push   esi
c000e136:	53                   	push   ebx
c000e137:	83 ec 50             	sub    esp,0x50
c000e13a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e13f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e145:	83 e0 04             	and    eax,0x4
c000e148:	84 c0                	test   al,al
c000e14a:	75 0c                	jne    c000e158 <findRSDT(unsigned char*)+0x24>
c000e14c:	b8 00 00 00 00       	mov    eax,0x0
c000e151:	e9 26 01 00 00       	jmp    c000e27c <findRSDT(unsigned char*)+0x148>
c000e156:	66 90                	xchg   ax,ax
c000e158:	89 e0                	mov    eax,esp
c000e15a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e15e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e162:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e166:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e16e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e172:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e176:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e17a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e17e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e182:	89 c6                	mov    esi,eax
c000e184:	89 d7                	mov    edi,edx
c000e186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e188:	89 c8                	mov    eax,ecx
c000e18a:	89 fa                	mov    edx,edi
c000e18c:	89 f3                	mov    ebx,esi
c000e18e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e192:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e196:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e19a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e19e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e1a2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e1aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e1ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e1b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1c2:	25 ff 0f 00 00       	and    eax,0xfff
c000e1c7:	89 c6                	mov    esi,eax
c000e1c9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e1cf:	83 ec 0c             	sub    esp,0xc
c000e1d2:	6a 02                	push   0x2
c000e1d4:	e8 74 b1 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e1d9:	83 c4 10             	add    esp,0x10
c000e1dc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e1e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1e6:	83 ec 0c             	sub    esp,0xc
c000e1e9:	6a 01                	push   0x1
c000e1eb:	6a 02                	push   0x2
c000e1ed:	50                   	push   eax
c000e1ee:	52                   	push   edx
c000e1ef:	53                   	push   ebx
c000e1f0:	e8 15 bb ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1f5:	83 c4 20             	add    esp,0x20
c000e1f8:	09 f0                	or     eax,esi
c000e1fa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e1fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e202:	25 ff 0f 00 00       	and    eax,0xfff
c000e207:	89 c6                	mov    esi,eax
c000e209:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e20f:	83 ec 0c             	sub    esp,0xc
c000e212:	6a 02                	push   0x2
c000e214:	e8 34 b1 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c000e219:	83 c4 10             	add    esp,0x10
c000e21c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e220:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e226:	83 ec 0c             	sub    esp,0xc
c000e229:	6a 01                	push   0x1
c000e22b:	6a 02                	push   0x2
c000e22d:	50                   	push   eax
c000e22e:	52                   	push   edx
c000e22f:	53                   	push   ebx
c000e230:	e8 d5 ba ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e235:	83 c4 20             	add    esp,0x20
c000e238:	09 f0                	or     eax,esi
c000e23a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e23e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e243:	75 13                	jne    c000e258 <findRSDT(unsigned char*)+0x124>
c000e245:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e24c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e250:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e254:	eb 22                	jmp    c000e278 <findRSDT(unsigned char*)+0x144>
c000e256:	66 90                	xchg   ax,ax
c000e258:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e25d:	75 11                	jne    c000e270 <findRSDT(unsigned char*)+0x13c>
c000e25f:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e266:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e26a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e26e:	eb 08                	jmp    c000e278 <findRSDT(unsigned char*)+0x144>
c000e270:	b8 00 00 00 00       	mov    eax,0x0
c000e275:	eb 05                	jmp    c000e27c <findRSDT(unsigned char*)+0x148>
c000e277:	90                   	nop
c000e278:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e27c:	83 c4 50             	add    esp,0x50
c000e27f:	5b                   	pop    ebx
c000e280:	5e                   	pop    esi
c000e281:	5f                   	pop    edi
c000e282:	c3                   	ret    
c000e283:	90                   	nop

c000e284 <findDataTable(unsigned char*, char*)>:
c000e284:	83 ec 1c             	sub    esp,0x1c
c000e287:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e28c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e292:	83 e0 04             	and    eax,0x4
c000e295:	84 c0                	test   al,al
c000e297:	75 07                	jne    c000e2a0 <findDataTable(unsigned char*, char*)+0x1c>
c000e299:	b8 00 00 00 00       	mov    eax,0x0
c000e29e:	eb 58                	jmp    c000e2f8 <findDataTable(unsigned char*, char*)+0x74>
c000e2a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e2a8:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e2ad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2b1:	7d 3d                	jge    c000e2f0 <findDataTable(unsigned char*, char*)+0x6c>
c000e2b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b7:	c1 e0 03             	shl    eax,0x3
c000e2ba:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e2bf:	83 ec 04             	sub    esp,0x4
c000e2c2:	6a 04                	push   0x4
c000e2c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2c8:	50                   	push   eax
c000e2c9:	e8 c2 20 ff ff       	call   c0000390 <memcmp>
c000e2ce:	83 c4 10             	add    esp,0x10
c000e2d1:	85 c0                	test   eax,eax
c000e2d3:	0f 94 c0             	sete   al
c000e2d6:	84 c0                	test   al,al
c000e2d8:	74 0e                	je     c000e2e8 <findDataTable(unsigned char*, char*)+0x64>
c000e2da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2de:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e2e5:	eb 11                	jmp    c000e2f8 <findDataTable(unsigned char*, char*)+0x74>
c000e2e7:	90                   	nop
c000e2e8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e2ec:	eb ba                	jmp    c000e2a8 <findDataTable(unsigned char*, char*)+0x24>
c000e2ee:	66 90                	xchg   ax,ax
c000e2f0:	b8 00 00 00 00       	mov    eax,0x0
c000e2f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2f8:	83 c4 1c             	add    esp,0x1c
c000e2fb:	c3                   	ret    

c000e2fc <scanMADT()>:
c000e2fc:	53                   	push   ebx
c000e2fd:	83 ec 38             	sub    esp,0x38
c000e300:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e305:	25 00 04 00 00       	and    eax,0x400
c000e30a:	74 14                	je     c000e320 <scanMADT()+0x24>
c000e30c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e311:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e317:	83 e2 fb             	and    edx,0xfffffffb
c000e31a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e320:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e325:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e32b:	83 e0 04             	and    eax,0x4
c000e32e:	84 c0                	test   al,al
c000e330:	0f 84 8a 04 00 00    	je     c000e7c0 <scanMADT()+0x4c4>
c000e336:	e8 05 fb ff ff       	call   c000de40 <findRSDP()>
c000e33b:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e340:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e345:	85 c0                	test   eax,eax
c000e347:	75 1b                	jne    c000e364 <scanMADT()+0x68>
c000e349:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e34e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e354:	83 e2 fb             	and    edx,0xfffffffb
c000e357:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e35d:	e9 66 04 00 00       	jmp    c000e7c8 <scanMADT()+0x4cc>
c000e362:	66 90                	xchg   ax,ax
c000e364:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e369:	83 ec 0c             	sub    esp,0xc
c000e36c:	50                   	push   eax
c000e36d:	e8 c2 fd ff ff       	call   c000e134 <findRSDT(unsigned char*)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e37a:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e37f:	85 c0                	test   eax,eax
c000e381:	75 19                	jne    c000e39c <scanMADT()+0xa0>
c000e383:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e388:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e38e:	83 e2 fb             	and    edx,0xfffffffb
c000e391:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e397:	e9 2c 04 00 00       	jmp    c000e7c8 <scanMADT()+0x4cc>
c000e39c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e3a1:	83 ec 0c             	sub    esp,0xc
c000e3a4:	50                   	push   eax
c000e3a5:	e8 26 fb ff ff       	call   c000ded0 <loadACPITables(unsigned char*)>
c000e3aa:	83 c4 10             	add    esp,0x10
c000e3ad:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e3b2:	83 ec 08             	sub    esp,0x8
c000e3b5:	68 b8 fa 01 c0       	push   0xc001fab8
c000e3ba:	50                   	push   eax
c000e3bb:	e8 c4 fe ff ff       	call   c000e284 <findDataTable(unsigned char*, char*)>
c000e3c0:	83 c4 10             	add    esp,0x10
c000e3c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e3c7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e3cc:	75 1a                	jne    c000e3e8 <scanMADT()+0xec>
c000e3ce:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3d3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3d9:	83 e2 fe             	and    edx,0xfffffffe
c000e3dc:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3e2:	e9 e1 03 00 00       	jmp    c000e7c8 <scanMADT()+0x4cc>
c000e3e7:	90                   	nop
c000e3e8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e3f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3f7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e3fb:	0f 87 c7 03 00 00    	ja     c000e7c8 <scanMADT()+0x4cc>
c000e401:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e409:	0f 87 b9 03 00 00    	ja     c000e7c8 <scanMADT()+0x4cc>
c000e40f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e413:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e417:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e41b:	8d 50 01             	lea    edx,[eax+0x1]
c000e41e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e422:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e426:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e42a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e42e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e432:	8d 50 01             	lea    edx,[eax+0x1]
c000e435:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e43d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e441:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e445:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e44a:	0f 86 74 03 00 00    	jbe    c000e7c4 <scanMADT()+0x4c8>
c000e450:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e455:	75 5d                	jne    c000e4b4 <scanMADT()+0x1b8>
c000e457:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45b:	8d 50 01             	lea    edx,[eax+0x1]
c000e45e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e462:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e468:	81 e2 ff 00 00 00    	and    edx,0xff
c000e46e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e472:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e476:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e47c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e480:	8d 42 01             	lea    eax,[edx+0x1]
c000e483:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e487:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e48c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e48f:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e495:	25 ff 00 00 00       	and    eax,0xff
c000e49a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e49e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e4a2:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e4a8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4ad:	e9 f6 02 00 00       	jmp    c000e7a8 <scanMADT()+0x4ac>
c000e4b2:	66 90                	xchg   ax,ax
c000e4b4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e4b9:	0f 85 29 01 00 00    	jne    c000e5e8 <scanMADT()+0x2ec>
c000e4bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e4c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4ca:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e4d0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e4d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e4da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e4de:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e4e4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e4e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f0:	01 d0                	add    eax,edx
c000e4f2:	83 c0 2c             	add    eax,0x2c
c000e4f5:	8a 00                	mov    al,BYTE PTR [eax]
c000e4f7:	31 d2                	xor    edx,edx
c000e4f9:	88 c2                	mov    dl,al
c000e4fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ff:	8d 48 01             	lea    ecx,[eax+0x1]
c000e502:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e506:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e50a:	25 ff 00 00 00       	and    eax,0xff
c000e50f:	c1 e0 08             	shl    eax,0x8
c000e512:	89 d1                	mov    ecx,edx
c000e514:	09 c1                	or     ecx,eax
c000e516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e51a:	8d 50 02             	lea    edx,[eax+0x2]
c000e51d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e521:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e525:	25 ff 00 00 00       	and    eax,0xff
c000e52a:	c1 e0 10             	shl    eax,0x10
c000e52d:	09 c1                	or     ecx,eax
c000e52f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e533:	8d 50 03             	lea    edx,[eax+0x3]
c000e536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e53a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e53e:	25 ff 00 00 00       	and    eax,0xff
c000e543:	c1 e0 18             	shl    eax,0x18
c000e546:	09 c1                	or     ecx,eax
c000e548:	89 ca                	mov    edx,ecx
c000e54a:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e54f:	25 ff 00 00 00       	and    eax,0xff
c000e554:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e55b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e560:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e568:	01 d0                	add    eax,edx
c000e56a:	83 c0 2c             	add    eax,0x2c
c000e56d:	8a 00                	mov    al,BYTE PTR [eax]
c000e56f:	31 d2                	xor    edx,edx
c000e571:	88 c2                	mov    dl,al
c000e573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e577:	8d 48 01             	lea    ecx,[eax+0x1]
c000e57a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e57e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e582:	25 ff 00 00 00       	and    eax,0xff
c000e587:	c1 e0 08             	shl    eax,0x8
c000e58a:	89 d1                	mov    ecx,edx
c000e58c:	09 c1                	or     ecx,eax
c000e58e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e592:	8d 50 02             	lea    edx,[eax+0x2]
c000e595:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e599:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e59d:	25 ff 00 00 00       	and    eax,0xff
c000e5a2:	c1 e0 10             	shl    eax,0x10
c000e5a5:	09 c1                	or     ecx,eax
c000e5a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ab:	8d 50 03             	lea    edx,[eax+0x3]
c000e5ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5b6:	25 ff 00 00 00       	and    eax,0xff
c000e5bb:	c1 e0 18             	shl    eax,0x18
c000e5be:	09 c1                	or     ecx,eax
c000e5c0:	89 ca                	mov    edx,ecx
c000e5c2:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e5c7:	25 ff 00 00 00       	and    eax,0xff
c000e5cc:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e5d3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5d8:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e5dd:	40                   	inc    eax
c000e5de:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e5e3:	e9 c0 01 00 00       	jmp    c000e7a8 <scanMADT()+0x4ac>
c000e5e8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e5ed:	0f 85 fd 00 00 00    	jne    c000e6f0 <scanMADT()+0x3f4>
c000e5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f7:	8d 50 01             	lea    edx,[eax+0x1]
c000e5fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e602:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e606:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e60a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60e:	8d 50 01             	lea    edx,[eax+0x1]
c000e611:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e615:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e619:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e61d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e625:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e629:	01 d0                	add    eax,edx
c000e62b:	83 c0 2c             	add    eax,0x2c
c000e62e:	8a 00                	mov    al,BYTE PTR [eax]
c000e630:	31 d2                	xor    edx,edx
c000e632:	88 c2                	mov    dl,al
c000e634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e638:	8d 48 01             	lea    ecx,[eax+0x1]
c000e63b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e643:	25 ff 00 00 00       	and    eax,0xff
c000e648:	c1 e0 08             	shl    eax,0x8
c000e64b:	89 d1                	mov    ecx,edx
c000e64d:	09 c1                	or     ecx,eax
c000e64f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e653:	8d 50 02             	lea    edx,[eax+0x2]
c000e656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e65a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e65e:	25 ff 00 00 00       	and    eax,0xff
c000e663:	c1 e0 10             	shl    eax,0x10
c000e666:	09 c1                	or     ecx,eax
c000e668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66c:	8d 50 03             	lea    edx,[eax+0x3]
c000e66f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e673:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e677:	25 ff 00 00 00       	and    eax,0xff
c000e67c:	c1 e0 18             	shl    eax,0x18
c000e67f:	09 c8                	or     eax,ecx
c000e681:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e685:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e68a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e68e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e692:	01 d0                	add    eax,edx
c000e694:	83 c0 2c             	add    eax,0x2c
c000e697:	8a 00                	mov    al,BYTE PTR [eax]
c000e699:	25 ff 00 00 00       	and    eax,0xff
c000e69e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e6a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e6a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6a9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e6ad:	81 e2 ff 00 00 00    	and    edx,0xff
c000e6b3:	c1 e2 08             	shl    edx,0x8
c000e6b6:	09 d0                	or     eax,edx
c000e6b8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e6bd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6c2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6c6:	25 ff 00 00 00       	and    eax,0xff
c000e6cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6cf:	88 90 c0 10 02 c0    	mov    BYTE PTR [eax-0x3ffdef40],dl
c000e6d5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e6d9:	31 d2                	xor    edx,edx
c000e6db:	88 c2                	mov    dl,al
c000e6dd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e6e2:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e6ea:	e9 b9 00 00 00       	jmp    c000e7a8 <scanMADT()+0x4ac>
c000e6ef:	90                   	nop
c000e6f0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e6f5:	0f 85 a1 00 00 00    	jne    c000e79c <scanMADT()+0x4a0>
c000e6fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e702:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e706:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e70a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e70e:	25 ff 00 00 00       	and    eax,0xff
c000e713:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e717:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e71b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e71f:	01 d0                	add    eax,edx
c000e721:	83 c0 2c             	add    eax,0x2c
c000e724:	8a 00                	mov    al,BYTE PTR [eax]
c000e726:	31 d2                	xor    edx,edx
c000e728:	88 c2                	mov    dl,al
c000e72a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e72e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e731:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e735:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e739:	25 ff 00 00 00       	and    eax,0xff
c000e73e:	c1 e0 08             	shl    eax,0x8
c000e741:	09 d0                	or     eax,edx
c000e743:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e747:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e74c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e750:	8d 50 01             	lea    edx,[eax+0x1]
c000e753:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e757:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e75b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e75f:	25 ff 00 00 00       	and    eax,0xff
c000e764:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76c:	c1 e0 08             	shl    eax,0x8
c000e76f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e773:	89 c1                	mov    ecx,eax
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	c1 e0 18             	shl    eax,0x18
c000e77c:	89 c3                	mov    ebx,eax
c000e77e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e783:	8d 50 01             	lea    edx,[eax+0x1]
c000e786:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e78c:	09 d9                	or     ecx,ebx
c000e78e:	89 ca                	mov    edx,ecx
c000e790:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e797:	eb 0f                	jmp    c000e7a8 <scanMADT()+0x4ac>
c000e799:	8d 76 00             	lea    esi,[esi+0x0]
c000e79c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e7a1:	75 05                	jne    c000e7a8 <scanMADT()+0x4ac>
c000e7a3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e7a8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e7ac:	31 d2                	xor    edx,edx
c000e7ae:	88 c2                	mov    dl,al
c000e7b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e7b4:	01 d0                	add    eax,edx
c000e7b6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e7ba:	e9 31 fc ff ff       	jmp    c000e3f0 <scanMADT()+0xf4>
c000e7bf:	90                   	nop
c000e7c0:	90                   	nop
c000e7c1:	eb 05                	jmp    c000e7c8 <scanMADT()+0x4cc>
c000e7c3:	90                   	nop
c000e7c4:	90                   	nop
c000e7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c8:	83 c4 38             	add    esp,0x38
c000e7cb:	5b                   	pop    ebx
c000e7cc:	c3                   	ret    
c000e7cd:	90                   	nop
c000e7ce:	66 90                	xchg   ax,ax

c000e7d0 <ACPI::ACPI()>:
c000e7d0:	83 ec 0c             	sub    esp,0xc
c000e7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d7:	83 ec 08             	sub    esp,0x8
c000e7da:	68 bd fa 01 c0       	push   0xc001fabd
c000e7df:	50                   	push   eax
c000e7e0:	e8 fb d3 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000e7e5:	83 c4 10             	add    esp,0x10
c000e7e8:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c000e7ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f1:	89 10                	mov    DWORD PTR [eax],edx
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e802:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e810:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e81a:	e8 dd fa ff ff       	call   c000e2fc <scanMADT()>
c000e81f:	90                   	nop
c000e820:	83 c4 0c             	add    esp,0xc
c000e823:	c3                   	ret    

c000e824 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e824:	83 ec 2c             	sub    esp,0x2c
c000e827:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e82b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e82f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e833:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e837:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e83c:	88 d0                	mov    al,dl
c000e83e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e842:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e847:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e84f:	90                   	nop
c000e850:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e854:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e85a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e85e:	0f 8d 9c 00 00 00    	jge    c000e900 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e864:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e868:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e86c:	83 c2 2a             	add    edx,0x2a
c000e86f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e873:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e878:	75 7a                	jne    c000e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e87a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e87e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e882:	83 c2 2a             	add    edx,0x2a
c000e885:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e889:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e88d:	75 65                	jne    c000e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e88f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e894:	74 3a                	je     c000e8d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e896:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e89a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e89e:	83 c2 2a             	add    edx,0x2a
c000e8a1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e8a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8ac:	39 c2                	cmp    edx,eax
c000e8ae:	74 10                	je     c000e8c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e8b0:	83 ec 0c             	sub    esp,0xc
c000e8b3:	68 38 fa 01 c0       	push   0xc001fa38
c000e8b8:	e8 4e 1a 00 00       	call   c001030b <KePanic(char const*)>
c000e8bd:	83 c4 10             	add    esp,0x10
c000e8c0:	83 ec 0c             	sub    esp,0xc
c000e8c3:	68 c2 fa 01 c0       	push   0xc001fac2
c000e8c8:	e8 3e 1a 00 00       	call   c001030b <KePanic(char const*)>
c000e8cd:	83 c4 10             	add    esp,0x10
c000e8d0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e8d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8dc:	83 c2 2a             	add    edx,0x2a
c000e8df:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e8e3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e8e5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e8e8:	89 01                	mov    DWORD PTR [ecx],eax
c000e8ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e8ed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8f2:	66 90                	xchg   ax,ax
c000e8f4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e8f8:	e9 53 ff ff ff       	jmp    c000e850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e900:	90                   	nop
c000e901:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e905:	83 c4 2c             	add    esp,0x2c
c000e908:	c2 04 00             	ret    0x4
c000e90b:	90                   	nop

c000e90c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e90c:	83 ec 1c             	sub    esp,0x1c
c000e90f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e913:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e917:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e91b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e920:	88 c8                	mov    al,cl
c000e922:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e926:	88 d0                	mov    al,dl
c000e928:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e930:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e93a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e93d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e941:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e949:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e94f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e953:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e95a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e963:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e969:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e96d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e970:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e974:	83 c2 2a             	add    edx,0x2a
c000e977:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e97b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e97f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e989:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e98c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e990:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e998:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e99e:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9a5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e9ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9af:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9b5:	3d 00 02 00 00       	cmp    eax,0x200
c000e9ba:	75 10                	jne    c000e9cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	68 d1 fa 01 c0       	push   0xc001fad1
c000e9c4:	e8 42 19 00 00       	call   c001030b <KePanic(char const*)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	90                   	nop
c000e9cd:	83 c4 1c             	add    esp,0x1c
c000e9d0:	c3                   	ret    
c000e9d1:	90                   	nop
c000e9d2:	66 90                	xchg   ax,ax

c000e9d4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e9d4:	b8 00 00 00 00       	mov    eax,0x0
c000e9d9:	c3                   	ret    
c000e9da:	66 90                	xchg   ax,ax

c000e9dc <ACPI::detectPCI()>:
c000e9dc:	53                   	push   ebx
c000e9dd:	83 ec 28             	sub    esp,0x28
c000e9e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e9e5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e9ea:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e9ef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e9f5:	83 e0 04             	and    eax,0x4
c000e9f8:	84 c0                	test   al,al
c000e9fa:	74 2c                	je     c000ea28 <ACPI::detectPCI()+0x4c>
c000e9fc:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000ea01:	83 ec 08             	sub    esp,0x8
c000ea04:	68 ee fa 01 c0       	push   0xc001faee
c000ea09:	50                   	push   eax
c000ea0a:	e8 75 f8 ff ff       	call   c000e284 <findDataTable(unsigned char*, char*)>
c000ea0f:	83 c4 10             	add    esp,0x10
c000ea12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea16:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ea1b:	74 0b                	je     c000ea28 <ACPI::detectPCI()+0x4c>
c000ea1d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea22:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea27:	90                   	nop
c000ea28:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ea30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea34:	8a 00                	mov    al,BYTE PTR [eax]
c000ea36:	3c 01                	cmp    al,0x1
c000ea38:	75 0e                	jne    c000ea48 <ACPI::detectPCI()+0x6c>
c000ea3a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea3f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea44:	eb 2a                	jmp    c000ea70 <ACPI::detectPCI()+0x94>
c000ea46:	66 90                	xchg   ax,ax
c000ea48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea4c:	8a 00                	mov    al,BYTE PTR [eax]
c000ea4e:	3c 02                	cmp    al,0x2
c000ea50:	75 1e                	jne    c000ea70 <ACPI::detectPCI()+0x94>
c000ea52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea57:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea5c:	74 12                	je     c000ea70 <ACPI::detectPCI()+0x94>
c000ea5e:	83 ec 0c             	sub    esp,0xc
c000ea61:	68 68 fa 01 c0       	push   0xc001fa68
c000ea66:	e8 a0 18 00 00       	call   c001030b <KePanic(char const*)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	66 90                	xchg   ax,ax
c000ea70:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ea74:	83 f0 01             	xor    eax,0x1
c000ea77:	84 c0                	test   al,al
c000ea79:	74 41                	je     c000eabc <ACPI::detectPCI()+0xe0>
c000ea7b:	e8 b0 16 ff ff       	call   c0000130 <manualPCIProbe>
c000ea80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea84:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ea89:	75 0d                	jne    c000ea98 <ACPI::detectPCI()+0xbc>
c000ea8b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea90:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea95:	eb 25                	jmp    c000eabc <ACPI::detectPCI()+0xe0>
c000ea97:	90                   	nop
c000ea98:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea9d:	75 1d                	jne    c000eabc <ACPI::detectPCI()+0xe0>
c000ea9f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eaa4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eaa9:	74 11                	je     c000eabc <ACPI::detectPCI()+0xe0>
c000eaab:	83 ec 0c             	sub    esp,0xc
c000eaae:	68 68 fa 01 c0       	push   0xc001fa68
c000eab3:	e8 53 18 00 00       	call   c001030b <KePanic(char const*)>
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	90                   	nop
c000eabc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eac1:	0f 84 85 00 00 00    	je     c000eb4c <ACPI::detectPCI()+0x170>
c000eac7:	83 ec 0c             	sub    esp,0xc
c000eaca:	68 f3 fa 01 c0       	push   0xc001faf3
c000eacf:	e8 bf 11 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000ead4:	83 c4 10             	add    esp,0x10
c000ead7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eae6:	e8 8a 8d ff ff       	call   c0007875 <malloc>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	89 c3                	mov    ebx,eax
c000eaf0:	83 ec 0c             	sub    esp,0xc
c000eaf3:	53                   	push   ebx
c000eaf4:	e8 3d a9 00 00       	call   c0019436 <PCI::PCI()>
c000eaf9:	83 c4 10             	add    esp,0x10
c000eafc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eb00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb04:	83 ec 08             	sub    esp,0x8
c000eb07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb0b:	50                   	push   eax
c000eb0c:	e8 37 cf ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb18:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb1a:	83 c0 08             	add    eax,0x8
c000eb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb1f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb24:	74 0a                	je     c000eb30 <ACPI::detectPCI()+0x154>
c000eb26:	ba 01 00 00 00       	mov    edx,0x1
c000eb2b:	eb 0b                	jmp    c000eb38 <ACPI::detectPCI()+0x15c>
c000eb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb30:	ba 02 00 00 00       	mov    edx,0x2
c000eb35:	8d 76 00             	lea    esi,[esi+0x0]
c000eb38:	6a 00                	push   0x0
c000eb3a:	6a 00                	push   0x0
c000eb3c:	52                   	push   edx
c000eb3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb41:	ff d0                	call   eax
c000eb43:	83 c4 10             	add    esp,0x10
c000eb46:	e9 91 00 00 00       	jmp    c000ebdc <ACPI::detectPCI()+0x200>
c000eb4b:	90                   	nop
c000eb4c:	83 ec 0c             	sub    esp,0xc
c000eb4f:	68 0b fb 01 c0       	push   0xc001fb0b
c000eb54:	e8 3a 11 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eb63:	83 ec 0c             	sub    esp,0xc
c000eb66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000eb6a:	e8 06 8d ff ff       	call   c0007875 <malloc>
c000eb6f:	83 c4 10             	add    esp,0x10
c000eb72:	89 c3                	mov    ebx,eax
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	53                   	push   ebx
c000eb78:	e8 e5 b3 00 00       	call   c0019f62 <IDE::IDE()>
c000eb7d:	83 c4 10             	add    esp,0x10
c000eb80:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eb84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb8f:	50                   	push   eax
c000eb90:	e8 b3 ce ff ff       	call   c000ba48 <Device::addChild(Device*)>
c000eb95:	83 c4 10             	add    esp,0x10
c000eb98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb9c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebaa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ebb3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebb7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ebc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebc6:	83 c0 08             	add    eax,0x8
c000ebc9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebcb:	6a 00                	push   0x0
c000ebcd:	6a 00                	push   0x0
c000ebcf:	6a 00                	push   0x0
c000ebd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebd5:	ff d0                	call   eax
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	66 90                	xchg   ax,ax
c000ebdc:	90                   	nop
c000ebdd:	83 c4 28             	add    esp,0x28
c000ebe0:	5b                   	pop    ebx
c000ebe1:	c3                   	ret    
c000ebe2:	66 90                	xchg   ax,ax

c000ebe4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ebe4:	83 ec 1c             	sub    esp,0x1c
c000ebe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ebeb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ebee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebf2:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ebf8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ebfc:	25 ff 00 00 00       	and    eax,0xff
c000ec01:	83 ec 08             	sub    esp,0x8
c000ec04:	50                   	push   eax
c000ec05:	52                   	push   edx
c000ec06:	e8 55 83 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ec0b:	83 c4 10             	add    esp,0x10
c000ec0e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ec12:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ec18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ec1c:	25 ff 00 00 00       	and    eax,0xff
c000ec21:	83 ec 04             	sub    esp,0x4
c000ec24:	6a 01                	push   0x1
c000ec26:	50                   	push   eax
c000ec27:	52                   	push   edx
c000ec28:	e8 49 84 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ec2d:	83 c4 10             	add    esp,0x10
c000ec30:	90                   	nop
c000ec31:	83 c4 1c             	add    esp,0x1c
c000ec34:	c3                   	ret    
c000ec35:	90                   	nop
c000ec36:	66 90                	xchg   ax,ax

c000ec38 <ACPI::sleep()>:
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ec40:	85 c0                	test   eax,eax
c000ec42:	74 08                	je     c000ec4c <ACPI::sleep()+0x14>
c000ec44:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ec49:	ff d0                	call   eax
c000ec4b:	90                   	nop
c000ec4c:	90                   	nop
c000ec4d:	83 c4 0c             	add    esp,0xc
c000ec50:	c3                   	ret    
c000ec51:	90                   	nop
c000ec52:	66 90                	xchg   ax,ax

c000ec54 <ACPI::open(int, int, void*)>:
c000ec54:	57                   	push   edi
c000ec55:	56                   	push   esi
c000ec56:	53                   	push   ebx
c000ec57:	81 ec 70 01 00 00    	sub    esp,0x170
c000ec5d:	83 ec 0c             	sub    esp,0xc
c000ec60:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ec67:	e8 70 fd ff ff       	call   c000e9dc <ACPI::detectPCI()>
c000ec6c:	83 c4 10             	add    esp,0x10
c000ec6f:	83 ec 0c             	sub    esp,0xc
c000ec72:	68 90 fa 01 c0       	push   0xc001fa90
c000ec77:	e8 17 10 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000ec7c:	83 c4 10             	add    esp,0x10
c000ec7f:	83 ec 0c             	sub    esp,0xc
c000ec82:	68 20 fb 01 c0       	push   0xc001fb20
c000ec87:	e8 e4 44 00 00       	call   c0013170 <Thr::loadKernelSymbolTable(char const*)>
c000ec8c:	83 c4 10             	add    esp,0x10
c000ec8f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec97:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eca2:	83 ec 0c             	sub    esp,0xc
c000eca5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ecac:	e8 c4 8b ff ff       	call   c0007875 <malloc>
c000ecb1:	83 c4 10             	add    esp,0x10
c000ecb4:	89 c3                	mov    ebx,eax
c000ecb6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ecbb:	83 ec 04             	sub    esp,0x4
c000ecbe:	50                   	push   eax
c000ecbf:	68 3e fb 01 c0       	push   0xc001fb3e
c000ecc4:	53                   	push   ebx
c000ecc5:	e8 b6 be ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000ecca:	83 c4 10             	add    esp,0x10
c000eccd:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ecd4:	83 ec 08             	sub    esp,0x8
c000ecd7:	6a 01                	push   0x1
c000ecd9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ece0:	e8 5b bf ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000ece5:	83 c4 10             	add    esp,0x10
c000ece8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ecef:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ecf7:	75 17                	jne    c000ed10 <ACPI::open(int, int, void*)+0xbc>
c000ecf9:	83 ec 0c             	sub    esp,0xc
c000ecfc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed03:	e8 96 bf ff ff       	call   c000ac9e <File::close()>
c000ed08:	83 c4 10             	add    esp,0x10
c000ed0b:	eb 0b                	jmp    c000ed18 <ACPI::open(int, int, void*)+0xc4>
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ed18:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ed20:	74 1e                	je     c000ed40 <ACPI::open(int, int, void*)+0xec>
c000ed22:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ed29:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed2b:	83 c0 08             	add    eax,0x8
c000ed2e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed3a:	ff d0                	call   eax
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	90                   	nop
c000ed40:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ed47:	83 f0 01             	xor    eax,0x1
c000ed4a:	84 c0                	test   al,al
c000ed4c:	74 42                	je     c000ed90 <ACPI::open(int, int, void*)+0x13c>
c000ed4e:	83 ec 0c             	sub    esp,0xc
c000ed51:	68 5c fb 01 c0       	push   0xc001fb5c
c000ed56:	e8 38 0f 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000ed5b:	83 c4 10             	add    esp,0x10
c000ed5e:	83 ec 04             	sub    esp,0x4
c000ed61:	6a 0c                	push   0xc
c000ed63:	68 77 fb 01 c0       	push   0xc001fb77
c000ed68:	68 88 fb 01 c0       	push   0xc001fb88
c000ed6d:	e8 00 3a 00 00       	call   c0012772 <Reg::readIntWithDefault(char*, char*, int)>
c000ed72:	83 c4 10             	add    esp,0x10
c000ed75:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ed86:	e8 cc a7 ff ff       	call   c0009557 <Virt::setupPageSwapping(int)>
c000ed8b:	83 c4 10             	add    esp,0x10
c000ed8e:	66 90                	xchg   ax,ax
c000ed90:	83 ec 0c             	sub    esp,0xc
c000ed93:	68 15 ec 01 c0       	push   0xc001ec15
c000ed98:	e8 f6 0e 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000ed9d:	83 c4 10             	add    esp,0x10
c000eda0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eda7:	83 ec 08             	sub    esp,0x8
c000edaa:	6a 12                	push   0x12
c000edac:	50                   	push   eax
c000edad:	e8 ae cf ff ff       	call   c000bd60 <getDevicesOfType(DeviceType)>
c000edb2:	83 c4 0c             	add    esp,0xc
c000edb5:	8d 76 00             	lea    esi,[esi+0x0]
c000edb8:	83 ec 0c             	sub    esp,0xc
c000edbb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edc2:	50                   	push   eax
c000edc3:	e8 44 f2 00 00       	call   c001e00c <LinkedList<Device>::isEmpty()>
c000edc8:	83 c4 10             	add    esp,0x10
c000edcb:	83 f0 01             	xor    eax,0x1
c000edce:	84 c0                	test   al,al
c000edd0:	0f 84 46 01 00 00    	je     c000ef1c <ACPI::open(int, int, void*)+0x2c8>
c000edd6:	83 ec 0c             	sub    esp,0xc
c000edd9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ede0:	50                   	push   eax
c000ede1:	e8 42 f2 00 00       	call   c001e028 <LinkedList<Device>::getFirstElement()>
c000ede6:	83 c4 10             	add    esp,0x10
c000ede9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000edf0:	83 ec 0c             	sub    esp,0xc
c000edf3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000edfa:	50                   	push   eax
c000edfb:	e8 30 f2 00 00       	call   c001e030 <LinkedList<Device>::removeFirst()>
c000ee00:	83 c4 10             	add    esp,0x10
c000ee03:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ee0a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ee11:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ee18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ee1c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ee22:	ba 09 00 00 00       	mov    edx,0x9
c000ee27:	fc                   	cld    
c000ee28:	89 c7                	mov    edi,eax
c000ee2a:	89 de                	mov    esi,ebx
c000ee2c:	89 d1                	mov    ecx,edx
c000ee2e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee30:	83 ec 08             	sub    esp,0x8
c000ee33:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ee37:	50                   	push   eax
c000ee38:	83 ec 24             	sub    esp,0x24
c000ee3b:	89 e0                	mov    eax,esp
c000ee3d:	89 c3                	mov    ebx,eax
c000ee3f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ee43:	ba 09 00 00 00       	mov    edx,0x9
c000ee48:	89 df                	mov    edi,ebx
c000ee4a:	89 c6                	mov    esi,eax
c000ee4c:	89 d1                	mov    ecx,edx
c000ee4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ee50:	e8 c3 aa 00 00       	call   c0019918 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ee55:	83 c4 30             	add    esp,0x30
c000ee58:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ee5f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ee67:	0f 84 4b ff ff ff    	je     c000edb8 <ACPI::open(int, int, void*)+0x164>
c000ee6d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ee78:	83 ec 0c             	sub    esp,0xc
c000ee7b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ee82:	e8 ee 89 ff ff       	call   c0007875 <malloc>
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	89 c3                	mov    ebx,eax
c000ee8c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ee91:	83 ec 04             	sub    esp,0x4
c000ee94:	50                   	push   eax
c000ee95:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee9c:	53                   	push   ebx
c000ee9d:	e8 de bc ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000eea2:	83 c4 10             	add    esp,0x10
c000eea5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000eeb6:	e8 f3 bf ff ff       	call   c000aeae <File::exists()>
c000eebb:	83 c4 10             	add    esp,0x10
c000eebe:	84 c0                	test   al,al
c000eec0:	74 2a                	je     c000eeec <ACPI::open(int, int, void*)+0x298>
c000eec2:	83 ec 08             	sub    esp,0x8
c000eec5:	6a 01                	push   0x1
c000eec7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eece:	e8 14 4d 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000eed3:	83 c4 10             	add    esp,0x10
c000eed6:	83 ec 08             	sub    esp,0x8
c000eed9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eee0:	50                   	push   eax
c000eee1:	e8 32 4f 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000eee6:	83 c4 10             	add    esp,0x10
c000eee9:	8d 76 00             	lea    esi,[esi+0x0]
c000eeec:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eef4:	0f 84 be fe ff ff    	je     c000edb8 <ACPI::open(int, int, void*)+0x164>
c000eefa:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ef01:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef03:	83 c0 08             	add    eax,0x8
c000ef06:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef08:	83 ec 0c             	sub    esp,0xc
c000ef0b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef12:	ff d0                	call   eax
c000ef14:	83 c4 10             	add    esp,0x10
c000ef17:	e9 9c fe ff ff       	jmp    c000edb8 <ACPI::open(int, int, void*)+0x164>
c000ef1c:	83 ec 0c             	sub    esp,0xc
c000ef1f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ef26:	50                   	push   eax
c000ef27:	e8 dc f0 00 00       	call   c001e008 <LinkedList<Device>::~LinkedList()>
c000ef2c:	83 c4 10             	add    esp,0x10
c000ef2f:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000ef35:	83 ec 08             	sub    esp,0x8
c000ef38:	6a 01                	push   0x1
c000ef3a:	68 8f fb 01 c0       	push   0xc001fb8f
c000ef3f:	e8 a3 4c 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000ef44:	83 c4 10             	add    esp,0x10
c000ef47:	83 ec 08             	sub    esp,0x8
c000ef4a:	53                   	push   ebx
c000ef4b:	50                   	push   eax
c000ef4c:	e8 c7 4e 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000ef51:	83 c4 10             	add    esp,0x10
c000ef54:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000ef59:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef5f:	83 e0 04             	and    eax,0x4
c000ef62:	84 c0                	test   al,al
c000ef64:	0f 84 16 01 00 00    	je     c000f080 <ACPI::open(int, int, void*)+0x42c>
c000ef6a:	83 ec 0c             	sub    esp,0xc
c000ef6d:	68 ac fb 01 c0       	push   0xc001fbac
c000ef72:	e8 1c 0d 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000ef77:	83 c4 10             	add    esp,0x10
c000ef7a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ef85:	83 ec 0c             	sub    esp,0xc
c000ef88:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ef8f:	e8 e1 88 ff ff       	call   c0007875 <malloc>
c000ef94:	83 c4 10             	add    esp,0x10
c000ef97:	89 c3                	mov    ebx,eax
c000ef99:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef9e:	83 ec 04             	sub    esp,0x4
c000efa1:	50                   	push   eax
c000efa2:	68 c9 fb 01 c0       	push   0xc001fbc9
c000efa7:	53                   	push   ebx
c000efa8:	e8 d3 bb ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000efad:	83 c4 10             	add    esp,0x10
c000efb0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000efb7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000efbf:	74 1b                	je     c000efdc <ACPI::open(int, int, void*)+0x388>
c000efc1:	83 ec 0c             	sub    esp,0xc
c000efc4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efcb:	e8 de be ff ff       	call   c000aeae <File::exists()>
c000efd0:	83 c4 10             	add    esp,0x10
c000efd3:	84 c0                	test   al,al
c000efd5:	74 05                	je     c000efdc <ACPI::open(int, int, void*)+0x388>
c000efd7:	b0 01                	mov    al,0x1
c000efd9:	eb 05                	jmp    c000efe0 <ACPI::open(int, int, void*)+0x38c>
c000efdb:	90                   	nop
c000efdc:	b0 00                	mov    al,0x0
c000efde:	66 90                	xchg   ax,ax
c000efe0:	84 c0                	test   al,al
c000efe2:	74 28                	je     c000f00c <ACPI::open(int, int, void*)+0x3b8>
c000efe4:	83 ec 08             	sub    esp,0x8
c000efe7:	6a 01                	push   0x1
c000efe9:	68 c9 fb 01 c0       	push   0xc001fbc9
c000efee:	e8 f4 4b 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c000eff3:	83 c4 10             	add    esp,0x10
c000eff6:	83 ec 08             	sub    esp,0x8
c000eff9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f000:	50                   	push   eax
c000f001:	e8 12 4e 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c000f006:	83 c4 10             	add    esp,0x10
c000f009:	8d 76 00             	lea    esi,[esi+0x0]
c000f00c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f014:	74 2a                	je     c000f040 <ACPI::open(int, int, void*)+0x3ec>
c000f016:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f01e:	74 20                	je     c000f040 <ACPI::open(int, int, void*)+0x3ec>
c000f020:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f027:	8b 00                	mov    eax,DWORD PTR [eax]
c000f029:	83 c0 08             	add    eax,0x8
c000f02c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02e:	83 ec 0c             	sub    esp,0xc
c000f031:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f038:	ff d0                	call   eax
c000f03a:	83 c4 10             	add    esp,0x10
c000f03d:	8d 76 00             	lea    esi,[esi+0x0]
c000f040:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f045:	83 ec 08             	sub    esp,0x8
c000f048:	68 e6 fb 01 c0       	push   0xc001fbe6
c000f04d:	50                   	push   eax
c000f04e:	e8 31 f2 ff ff       	call   c000e284 <findDataTable(unsigned char*, char*)>
c000f053:	83 c4 10             	add    esp,0x10
c000f056:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f05d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f065:	74 19                	je     c000f080 <ACPI::open(int, int, void*)+0x42c>
c000f067:	83 ec 08             	sub    esp,0x8
c000f06a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f071:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f078:	e8 67 fb ff ff       	call   c000ebe4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f07d:	83 c4 10             	add    esp,0x10
c000f080:	b8 00 00 00 00       	mov    eax,0x0
c000f085:	81 c4 70 01 00 00    	add    esp,0x170
c000f08b:	5b                   	pop    ebx
c000f08c:	5e                   	pop    esi
c000f08d:	5f                   	pop    edi
c000f08e:	c3                   	ret    
c000f08f:	90                   	nop

c000f090 <CPU::close(int, int, void*)>:
c000f090:	31 c0                	xor    eax,eax
c000f092:	c3                   	ret    
c000f093:	90                   	nop

c000f094 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f094:	60                   	pusha  
c000f095:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f099:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f09d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f0a1:	9c                   	pushf  
c000f0a2:	fa                   	cli    
c000f0a3:	0f 09                	wbinvd 
c000f0a5:	0f 30                	wrmsr  
c000f0a7:	9d                   	popf   
c000f0a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f0ac:	89 02                	mov    DWORD PTR [edx],eax
c000f0ae:	61                   	popa   
c000f0af:	c3                   	ret    

c000f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f0b0:	60                   	pusha  
c000f0b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0b5:	9c                   	pushf  
c000f0b6:	fa                   	cli    
c000f0b7:	0f 09                	wbinvd 
c000f0b9:	31 c0                	xor    eax,eax
c000f0bb:	31 d2                	xor    edx,edx
c000f0bd:	0f 32                	rdmsr  
c000f0bf:	9d                   	popf   
c000f0c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f0c4:	89 02                	mov    DWORD PTR [edx],eax
c000f0c6:	61                   	popa   
c000f0c7:	c3                   	ret    

c000f0c8 <CPU::AMD_K6_writeback(int, int, int)>:
c000f0c8:	56                   	push   esi
c000f0c9:	53                   	push   ebx
c000f0ca:	83 ec 10             	sub    esp,0x10
c000f0cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0d1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f0d6:	75 5d                	jne    c000f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0d8:	83 f8 08             	cmp    eax,0x8
c000f0db:	75 09                	jne    c000f0e6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f0dd:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f0e2:	7e 13                	jle    c000f0f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0e4:	eb 30                	jmp    c000f116 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0e6:	83 f8 06             	cmp    eax,0x6
c000f0e9:	7c 4a                	jl     c000f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0eb:	83 f8 07             	cmp    eax,0x7
c000f0ee:	7e 07                	jle    c000f0f7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f0f0:	83 f8 09             	cmp    eax,0x9
c000f0f3:	74 21                	je     c000f116 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f0f5:	eb 3e                	jmp    c000f135 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f0f7:	89 e6                	mov    esi,esp
c000f0f9:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f0ff:	56                   	push   esi
c000f100:	c1 eb 15             	shr    ebx,0x15
c000f103:	68 82 00 00 c0       	push   0xc0000082
c000f108:	83 e3 7e             	and    ebx,0x7e
c000f10b:	e8 a0 ff ff ff       	call   c000f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f110:	56                   	push   esi
c000f111:	6a 00                	push   0x0
c000f113:	53                   	push   ebx
c000f114:	eb 12                	jmp    c000f128 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f116:	89 e3                	mov    ebx,esp
c000f118:	53                   	push   ebx
c000f119:	68 82 00 00 c0       	push   0xc0000082
c000f11e:	e8 8d ff ff ff       	call   c000f0b0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f123:	53                   	push   ebx
c000f124:	6a 00                	push   0x0
c000f126:	6a 00                	push   0x0
c000f128:	68 82 00 00 c0       	push   0xc0000082
c000f12d:	e8 62 ff ff ff       	call   c000f094 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f132:	83 c4 18             	add    esp,0x18
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	5b                   	pop    ebx
c000f139:	5e                   	pop    esi
c000f13a:	c3                   	ret    
c000f13b:	90                   	nop

c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f13c:	55                   	push   ebp
c000f13d:	57                   	push   edi
c000f13e:	56                   	push   esi
c000f13f:	53                   	push   ebx
c000f140:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f144:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f148:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f14c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f150:	39 05 d0 10 02 c0    	cmp    DWORD PTR ds:0xc00210d0,eax
c000f156:	75 23                	jne    c000f17b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f158:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f15d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f161:	89 06                	mov    DWORD PTR [esi],eax
c000f163:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f168:	89 07                	mov    DWORD PTR [edi],eax
c000f16a:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f16f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f172:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f177:	89 02                	mov    DWORD PTR [edx],eax
c000f179:	eb 3f                	jmp    c000f1ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f17b:	31 c9                	xor    ecx,ecx
c000f17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f181:	0f a2                	cpuid  
c000f183:	89 06                	mov    DWORD PTR [esi],eax
c000f185:	89 1f                	mov    DWORD PTR [edi],ebx
c000f187:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f18b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f18e:	89 10                	mov    DWORD PTR [eax],edx
c000f190:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f194:	a3 d0 10 02 c0       	mov    ds:0xc00210d0,eax
c000f199:	8b 06                	mov    eax,DWORD PTR [esi]
c000f19b:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f1a0:	8b 07                	mov    eax,DWORD PTR [edi]
c000f1a2:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f1a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1aa:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f1af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b5:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f1ba:	5b                   	pop    ebx
c000f1bb:	5e                   	pop    esi
c000f1bc:	5f                   	pop    edi
c000f1bd:	5d                   	pop    ebp
c000f1be:	c3                   	ret    
c000f1bf:	90                   	nop

c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>:
c000f1c0:	83 ec 10             	sub    esp,0x10
c000f1c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c7:	50                   	push   eax
c000f1c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1cc:	50                   	push   eax
c000f1cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d1:	50                   	push   eax
c000f1d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1d6:	50                   	push   eax
c000f1d7:	6a 01                	push   0x1
c000f1d9:	e8 5e ff ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1e2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f1e6:	0f 95 c0             	setne  al
c000f1e9:	83 c4 24             	add    esp,0x24
c000f1ec:	c3                   	ret    
c000f1ed:	90                   	nop

c000f1ee <CPU::cpuidCheckECX(unsigned int)>:
c000f1ee:	83 ec 10             	sub    esp,0x10
c000f1f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1f5:	50                   	push   eax
c000f1f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1fa:	50                   	push   eax
c000f1fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1ff:	50                   	push   eax
c000f200:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f204:	50                   	push   eax
c000f205:	6a 01                	push   0x1
c000f207:	e8 30 ff ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f20c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f210:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f214:	0f 95 c0             	setne  al
c000f217:	83 c4 24             	add    esp,0x24
c000f21a:	c3                   	ret    
c000f21b:	90                   	nop

c000f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f21c:	83 ec 10             	sub    esp,0x10
c000f21f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f223:	50                   	push   eax
c000f224:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f228:	50                   	push   eax
c000f229:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f22d:	50                   	push   eax
c000f22e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f232:	50                   	push   eax
c000f233:	6a 07                	push   0x7
c000f235:	e8 02 ff ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f23a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f242:	0f 95 c0             	setne  al
c000f245:	83 c4 24             	add    esp,0x24
c000f248:	c3                   	ret    
c000f249:	90                   	nop

c000f24a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f24a:	83 ec 10             	sub    esp,0x10
c000f24d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f251:	50                   	push   eax
c000f252:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f256:	50                   	push   eax
c000f257:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f25b:	50                   	push   eax
c000f25c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f260:	50                   	push   eax
c000f261:	6a 07                	push   0x7
c000f263:	e8 d4 fe ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f268:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f26c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f270:	0f 95 c0             	setne  al
c000f273:	83 c4 24             	add    esp,0x24
c000f276:	c3                   	ret    
c000f277:	90                   	nop

c000f278 <CPU::CPU()>:
c000f278:	83 ec 0c             	sub    esp,0xc
c000f27b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27f:	83 ec 08             	sub    esp,0x8
c000f282:	68 09 fd 01 c0       	push   0xc001fd09
c000f287:	50                   	push   eax
c000f288:	e8 53 c9 ff ff       	call   c000bbe0 <Device::Device(char const*)>
c000f28d:	83 c4 10             	add    esp,0x10
c000f290:	ba 90 fd 01 c0       	mov    edx,0xc001fd90
c000f295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f299:	89 10                	mov    DWORD PTR [eax],edx
c000f29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f29f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f2a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ad:	05 78 01 00 00       	add    eax,0x178
c000f2b2:	83 ec 0c             	sub    esp,0xc
c000f2b5:	50                   	push   eax
c000f2b6:	e8 79 7e ff ff       	call   c0007134 <GDT::GDT()>
c000f2bb:	83 c4 10             	add    esp,0x10
c000f2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2c2:	05 7c 09 00 00       	add    eax,0x97c
c000f2c7:	83 ec 0c             	sub    esp,0xc
c000f2ca:	50                   	push   eax
c000f2cb:	e8 a0 80 ff ff       	call   c0007370 <IDT::IDT()>
c000f2d0:	83 c4 10             	add    esp,0x10
c000f2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d7:	05 7c 11 00 00       	add    eax,0x117c
c000f2dc:	83 ec 0c             	sub    esp,0xc
c000f2df:	50                   	push   eax
c000f2e0:	e8 ab 99 ff ff       	call   c0008c90 <TSS::TSS()>
c000f2e5:	83 c4 10             	add    esp,0x10
c000f2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ec:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2f7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f301:	90                   	nop
c000f302:	83 c4 0c             	add    esp,0xc
c000f305:	c3                   	ret    

c000f306 <CPU::displayFeatures()>:
c000f306:	c3                   	ret    
c000f307:	90                   	nop

c000f308 <CPU::detectFeatures()>:
c000f308:	55                   	push   ebp
c000f309:	57                   	push   edi
c000f30a:	56                   	push   esi
c000f30b:	53                   	push   ebx
c000f30c:	83 ec 30             	sub    esp,0x30
c000f30f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f313:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f31d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f324:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f32a:	6a 0d                	push   0xd
c000f32c:	6a 00                	push   0x0
c000f32e:	55                   	push   ebp
c000f32f:	e8 9c 11 ff ff       	call   c00004d0 <memset>
c000f334:	83 c4 10             	add    esp,0x10
c000f337:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f33c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f343:	0f 84 d5 05 00 00    	je     c000f91e <CPU::detectFeatures()+0x616>
c000f349:	83 ec 0c             	sub    esp,0xc
c000f34c:	89 ef                	mov    edi,ebp
c000f34e:	6a 10                	push   0x10
c000f350:	e8 6b fe ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f355:	83 e0 01             	and    eax,0x1
c000f358:	8d 14 00             	lea    edx,[eax+eax*1]
c000f35b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f361:	83 e0 fd             	and    eax,0xfffffffd
c000f364:	09 d0                	or     eax,edx
c000f366:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f36c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f373:	e8 48 fe ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f378:	83 e0 01             	and    eax,0x1
c000f37b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f382:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f388:	83 e0 fb             	and    eax,0xfffffffb
c000f38b:	09 d0                	or     eax,edx
c000f38d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f393:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f39a:	e8 21 fe ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f39f:	83 e0 01             	and    eax,0x1
c000f3a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f3a9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3af:	83 e0 f7             	and    eax,0xfffffff7
c000f3b2:	09 d0                	or     eax,edx
c000f3b4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3ba:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f3c1:	e8 fa fd ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f3c6:	83 e0 01             	and    eax,0x1
c000f3c9:	c1 e0 04             	shl    eax,0x4
c000f3cc:	88 c2                	mov    dl,al
c000f3ce:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3d4:	83 e0 ef             	and    eax,0xffffffef
c000f3d7:	09 d0                	or     eax,edx
c000f3d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f3df:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f3e6:	e8 d5 fd ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f3eb:	83 e0 01             	and    eax,0x1
c000f3ee:	c1 e0 05             	shl    eax,0x5
c000f3f1:	88 c2                	mov    dl,al
c000f3f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f3f9:	83 e0 df             	and    eax,0xffffffdf
c000f3fc:	09 d0                	or     eax,edx
c000f3fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f404:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f40b:	e8 b0 fd ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f410:	83 e0 01             	and    eax,0x1
c000f413:	8d 14 00             	lea    edx,[eax+eax*1]
c000f416:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f41c:	83 e0 fd             	and    eax,0xfffffffd
c000f41f:	09 d0                	or     eax,edx
c000f421:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f427:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f42e:	e8 8d fd ff ff       	call   c000f1c0 <CPU::cpuidCheckEDX(unsigned int)>
c000f433:	83 e0 01             	and    eax,0x1
c000f436:	c1 e0 06             	shl    eax,0x6
c000f439:	88 c2                	mov    dl,al
c000f43b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f441:	83 e0 bf             	and    eax,0xffffffbf
c000f444:	09 d0                	or     eax,edx
c000f446:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f44c:	58                   	pop    eax
c000f44d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f451:	50                   	push   eax
c000f452:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f456:	50                   	push   eax
c000f457:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f45b:	56                   	push   esi
c000f45c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f460:	50                   	push   eax
c000f461:	6a 00                	push   0x0
c000f463:	e8 d4 fc ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f468:	b8 04 00 00 00       	mov    eax,0x4
c000f46d:	89 c1                	mov    ecx,eax
c000f46f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f471:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f477:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f47b:	89 c1                	mov    ecx,eax
c000f47d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f47f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f485:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f489:	89 c1                	mov    ecx,eax
c000f48b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f48d:	83 c4 18             	add    esp,0x18
c000f490:	68 18 fc 01 c0       	push   0xc001fc18
c000f495:	55                   	push   ebp
c000f496:	e8 45 12 ff ff       	call   c00006e0 <strcmp>
c000f49b:	83 c4 10             	add    esp,0x10
c000f49e:	85 c0                	test   eax,eax
c000f4a0:	75 0f                	jne    c000f4b1 <CPU::detectFeatures()+0x1a9>
c000f4a2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f4ac:	e9 22 02 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f4b1:	50                   	push   eax
c000f4b2:	50                   	push   eax
c000f4b3:	68 25 fc 01 c0       	push   0xc001fc25
c000f4b8:	55                   	push   ebp
c000f4b9:	e8 22 12 ff ff       	call   c00006e0 <strcmp>
c000f4be:	83 c4 10             	add    esp,0x10
c000f4c1:	85 c0                	test   eax,eax
c000f4c3:	74 dd                	je     c000f4a2 <CPU::detectFeatures()+0x19a>
c000f4c5:	50                   	push   eax
c000f4c6:	50                   	push   eax
c000f4c7:	68 32 fc 01 c0       	push   0xc001fc32
c000f4cc:	55                   	push   ebp
c000f4cd:	e8 0e 12 ff ff       	call   c00006e0 <strcmp>
c000f4d2:	83 c4 10             	add    esp,0x10
c000f4d5:	85 c0                	test   eax,eax
c000f4d7:	74 2a                	je     c000f503 <CPU::detectFeatures()+0x1fb>
c000f4d9:	50                   	push   eax
c000f4da:	50                   	push   eax
c000f4db:	68 3f fc 01 c0       	push   0xc001fc3f
c000f4e0:	55                   	push   ebp
c000f4e1:	e8 fa 11 ff ff       	call   c00006e0 <strcmp>
c000f4e6:	83 c4 10             	add    esp,0x10
c000f4e9:	85 c0                	test   eax,eax
c000f4eb:	74 16                	je     c000f503 <CPU::detectFeatures()+0x1fb>
c000f4ed:	50                   	push   eax
c000f4ee:	50                   	push   eax
c000f4ef:	68 4c fc 01 c0       	push   0xc001fc4c
c000f4f4:	55                   	push   ebp
c000f4f5:	e8 e6 11 ff ff       	call   c00006e0 <strcmp>
c000f4fa:	83 c4 10             	add    esp,0x10
c000f4fd:	85 c0                	test   eax,eax
c000f4ff:	74 48                	je     c000f549 <CPU::detectFeatures()+0x241>
c000f501:	eb 0f                	jmp    c000f512 <CPU::detectFeatures()+0x20a>
c000f503:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f50d:	e9 c1 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f512:	50                   	push   eax
c000f513:	50                   	push   eax
c000f514:	68 59 fc 01 c0       	push   0xc001fc59
c000f519:	55                   	push   ebp
c000f51a:	e8 c1 11 ff ff       	call   c00006e0 <strcmp>
c000f51f:	83 c4 10             	add    esp,0x10
c000f522:	85 c0                	test   eax,eax
c000f524:	74 23                	je     c000f549 <CPU::detectFeatures()+0x241>
c000f526:	57                   	push   edi
c000f527:	57                   	push   edi
c000f528:	68 66 fc 01 c0       	push   0xc001fc66
c000f52d:	55                   	push   ebp
c000f52e:	e8 ad 11 ff ff       	call   c00006e0 <strcmp>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	85 c0                	test   eax,eax
c000f538:	75 1e                	jne    c000f558 <CPU::detectFeatures()+0x250>
c000f53a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f544:	e9 8a 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f549:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f553:	e9 7b 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f558:	56                   	push   esi
c000f559:	56                   	push   esi
c000f55a:	68 73 fc 01 c0       	push   0xc001fc73
c000f55f:	55                   	push   ebp
c000f560:	e8 7b 11 ff ff       	call   c00006e0 <strcmp>
c000f565:	83 c4 10             	add    esp,0x10
c000f568:	85 c0                	test   eax,eax
c000f56a:	75 0f                	jne    c000f57b <CPU::detectFeatures()+0x273>
c000f56c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f576:	e9 58 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f57b:	51                   	push   ecx
c000f57c:	51                   	push   ecx
c000f57d:	68 32 fc 01 c0       	push   0xc001fc32
c000f582:	55                   	push   ebp
c000f583:	e8 58 11 ff ff       	call   c00006e0 <strcmp>
c000f588:	83 c4 10             	add    esp,0x10
c000f58b:	85 c0                	test   eax,eax
c000f58d:	75 0f                	jne    c000f59e <CPU::detectFeatures()+0x296>
c000f58f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f599:	e9 35 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f59e:	52                   	push   edx
c000f59f:	52                   	push   edx
c000f5a0:	68 80 fc 01 c0       	push   0xc001fc80
c000f5a5:	55                   	push   ebp
c000f5a6:	e8 35 11 ff ff       	call   c00006e0 <strcmp>
c000f5ab:	83 c4 10             	add    esp,0x10
c000f5ae:	85 c0                	test   eax,eax
c000f5b0:	75 0f                	jne    c000f5c1 <CPU::detectFeatures()+0x2b9>
c000f5b2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f5bc:	e9 12 01 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f5c1:	50                   	push   eax
c000f5c2:	50                   	push   eax
c000f5c3:	68 8d fc 01 c0       	push   0xc001fc8d
c000f5c8:	55                   	push   ebp
c000f5c9:	e8 12 11 ff ff       	call   c00006e0 <strcmp>
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	85 c0                	test   eax,eax
c000f5d3:	75 0f                	jne    c000f5e4 <CPU::detectFeatures()+0x2dc>
c000f5d5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f5df:	e9 ef 00 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f5e4:	50                   	push   eax
c000f5e5:	50                   	push   eax
c000f5e6:	68 9a fc 01 c0       	push   0xc001fc9a
c000f5eb:	55                   	push   ebp
c000f5ec:	e8 ef 10 ff ff       	call   c00006e0 <strcmp>
c000f5f1:	83 c4 10             	add    esp,0x10
c000f5f4:	85 c0                	test   eax,eax
c000f5f6:	75 0f                	jne    c000f607 <CPU::detectFeatures()+0x2ff>
c000f5f8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f602:	e9 cc 00 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f607:	50                   	push   eax
c000f608:	50                   	push   eax
c000f609:	68 a7 fc 01 c0       	push   0xc001fca7
c000f60e:	55                   	push   ebp
c000f60f:	e8 cc 10 ff ff       	call   c00006e0 <strcmp>
c000f614:	83 c4 10             	add    esp,0x10
c000f617:	85 c0                	test   eax,eax
c000f619:	75 0f                	jne    c000f62a <CPU::detectFeatures()+0x322>
c000f61b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f625:	e9 a9 00 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f62a:	50                   	push   eax
c000f62b:	50                   	push   eax
c000f62c:	68 b4 fc 01 c0       	push   0xc001fcb4
c000f631:	55                   	push   ebp
c000f632:	e8 a9 10 ff ff       	call   c00006e0 <strcmp>
c000f637:	83 c4 10             	add    esp,0x10
c000f63a:	85 c0                	test   eax,eax
c000f63c:	75 0f                	jne    c000f64d <CPU::detectFeatures()+0x345>
c000f63e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f648:	e9 86 00 00 00       	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f64d:	50                   	push   eax
c000f64e:	50                   	push   eax
c000f64f:	68 c1 fc 01 c0       	push   0xc001fcc1
c000f654:	55                   	push   ebp
c000f655:	e8 86 10 ff ff       	call   c00006e0 <strcmp>
c000f65a:	83 c4 10             	add    esp,0x10
c000f65d:	85 c0                	test   eax,eax
c000f65f:	75 0c                	jne    c000f66d <CPU::detectFeatures()+0x365>
c000f661:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f66b:	eb 66                	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f66d:	50                   	push   eax
c000f66e:	50                   	push   eax
c000f66f:	68 ce fc 01 c0       	push   0xc001fcce
c000f674:	55                   	push   ebp
c000f675:	e8 66 10 ff ff       	call   c00006e0 <strcmp>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	85 c0                	test   eax,eax
c000f67f:	75 0c                	jne    c000f68d <CPU::detectFeatures()+0x385>
c000f681:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f68b:	eb 46                	jmp    c000f6d3 <CPU::detectFeatures()+0x3cb>
c000f68d:	57                   	push   edi
c000f68e:	57                   	push   edi
c000f68f:	68 db fc 01 c0       	push   0xc001fcdb
c000f694:	55                   	push   ebp
c000f695:	e8 46 10 ff ff       	call   c00006e0 <strcmp>
c000f69a:	83 c4 10             	add    esp,0x10
c000f69d:	85 c0                	test   eax,eax
c000f69f:	74 e0                	je     c000f681 <CPU::detectFeatures()+0x379>
c000f6a1:	56                   	push   esi
c000f6a2:	56                   	push   esi
c000f6a3:	68 e8 fc 01 c0       	push   0xc001fce8
c000f6a8:	55                   	push   ebp
c000f6a9:	e8 32 10 ff ff       	call   c00006e0 <strcmp>
c000f6ae:	83 c4 10             	add    esp,0x10
c000f6b1:	85 c0                	test   eax,eax
c000f6b3:	74 cc                	je     c000f681 <CPU::detectFeatures()+0x379>
c000f6b5:	51                   	push   ecx
c000f6b6:	51                   	push   ecx
c000f6b7:	68 f5 fc 01 c0       	push   0xc001fcf5
c000f6bc:	55                   	push   ebp
c000f6bd:	e8 1e 10 ff ff       	call   c00006e0 <strcmp>
c000f6c2:	83 c4 10             	add    esp,0x10
c000f6c5:	85 c0                	test   eax,eax
c000f6c7:	74 b8                	je     c000f681 <CPU::detectFeatures()+0x379>
c000f6c9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f6d3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f6d8:	0f 86 be 00 00 00    	jbe    c000f79c <CPU::detectFeatures()+0x494>
c000f6de:	83 ec 0c             	sub    esp,0xc
c000f6e1:	68 80 00 00 00       	push   0x80
c000f6e6:	e8 31 fb ff ff       	call   c000f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6eb:	83 e0 01             	and    eax,0x1
c000f6ee:	c1 e0 06             	shl    eax,0x6
c000f6f1:	88 c2                	mov    dl,al
c000f6f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6f9:	83 e0 bf             	and    eax,0xffffffbf
c000f6fc:	09 d0                	or     eax,edx
c000f6fe:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f704:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f70b:	e8 0c fb ff ff       	call   c000f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f710:	83 e0 01             	and    eax,0x1
c000f713:	c1 e0 04             	shl    eax,0x4
c000f716:	88 c2                	mov    dl,al
c000f718:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f71e:	83 e0 ef             	and    eax,0xffffffef
c000f721:	09 d0                	or     eax,edx
c000f723:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f729:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f730:	e8 e7 fa ff ff       	call   c000f21c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f735:	c1 e0 07             	shl    eax,0x7
c000f738:	88 c2                	mov    dl,al
c000f73a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f740:	83 e0 7f             	and    eax,0x7f
c000f743:	09 d0                	or     eax,edx
c000f745:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f74b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f752:	e8 f3 fa ff ff       	call   c000f24a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f757:	83 e0 01             	and    eax,0x1
c000f75a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f761:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f767:	83 e0 f7             	and    eax,0xfffffff7
c000f76a:	09 d0                	or     eax,edx
c000f76c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f772:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f779:	e8 cc fa ff ff       	call   c000f24a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	83 e0 01             	and    eax,0x1
c000f784:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f78b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f791:	83 e0 fb             	and    eax,0xfffffffb
c000f794:	09 d0                	or     eax,edx
c000f796:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f79c:	83 ec 0c             	sub    esp,0xc
c000f79f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7a3:	50                   	push   eax
c000f7a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7a8:	50                   	push   eax
c000f7a9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f7ad:	56                   	push   esi
c000f7ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7b2:	50                   	push   eax
c000f7b3:	6a 01                	push   0x1
c000f7b5:	e8 82 f9 ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7ba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f7be:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f7c4:	88 ca                	mov    dl,cl
c000f7c6:	83 e0 f0             	and    eax,0xfffffff0
c000f7c9:	83 e2 0f             	and    edx,0xf
c000f7cc:	09 d0                	or     eax,edx
c000f7ce:	88 ca                	mov    dl,cl
c000f7d0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f7d6:	c0 ea 04             	shr    dl,0x4
c000f7d9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f7dd:	0f b6 c2             	movzx  eax,dl
c000f7e0:	83 c4 20             	add    esp,0x20
c000f7e3:	c1 e0 06             	shl    eax,0x6
c000f7e6:	89 c7                	mov    edi,eax
c000f7e8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f7ee:	66 25 3f c0          	and    ax,0xc03f
c000f7f2:	09 f8                	or     eax,edi
c000f7f4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f7fb:	89 c8                	mov    eax,ecx
c000f7fd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f804:	c1 e8 08             	shr    eax,0x8
c000f807:	83 e5 3f             	and    ebp,0x3f
c000f80a:	83 e0 0f             	and    eax,0xf
c000f80d:	89 c7                	mov    edi,eax
c000f80f:	c1 e7 06             	shl    edi,0x6
c000f812:	09 ef                	or     edi,ebp
c000f814:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f81b:	89 fa                	mov    edx,edi
c000f81d:	83 e5 c0             	and    ebp,0xffffffc0
c000f820:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f826:	88 c2                	mov    dl,al
c000f828:	c0 ea 02             	shr    dl,0x2
c000f82b:	89 d7                	mov    edi,edx
c000f82d:	09 ef                	or     edi,ebp
c000f82f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f835:	89 fa                	mov    edx,edi
c000f837:	83 e5 cf             	and    ebp,0xffffffcf
c000f83a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f840:	89 cf                	mov    edi,ecx
c000f842:	c1 ef 0c             	shr    edi,0xc
c000f845:	83 e7 03             	and    edi,0x3
c000f848:	c1 e7 04             	shl    edi,0x4
c000f84b:	09 ef                	or     edi,ebp
c000f84d:	3c 06                	cmp    al,0x6
c000f84f:	89 fa                	mov    edx,edi
c000f851:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f857:	74 04                	je     c000f85d <CPU::detectFeatures()+0x555>
c000f859:	3c 0f                	cmp    al,0xf
c000f85b:	75 5c                	jne    c000f8b9 <CPU::detectFeatures()+0x5b1>
c000f85d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f861:	89 cf                	mov    edi,ecx
c000f863:	c1 ef 10             	shr    edi,0x10
c000f866:	c1 e7 04             	shl    edi,0x4
c000f869:	09 fa                	or     edx,edi
c000f86b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f871:	0f b6 d2             	movzx  edx,dl
c000f874:	66 81 e7 3f c0       	and    di,0xc03f
c000f879:	c1 e2 06             	shl    edx,0x6
c000f87c:	09 fa                	or     edx,edi
c000f87e:	3c 0f                	cmp    al,0xf
c000f880:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f887:	75 30                	jne    c000f8b9 <CPU::detectFeatures()+0x5b1>
c000f889:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f88f:	c1 e9 14             	shr    ecx,0x14
c000f892:	83 e0 3f             	and    eax,0x3f
c000f895:	83 c1 0f             	add    ecx,0xf
c000f898:	88 ca                	mov    dl,cl
c000f89a:	c0 e9 02             	shr    cl,0x2
c000f89d:	c1 e2 06             	shl    edx,0x6
c000f8a0:	09 d0                	or     eax,edx
c000f8a2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f8a8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f8ae:	83 e0 c0             	and    eax,0xffffffc0
c000f8b1:	09 c1                	or     ecx,eax
c000f8b3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f8b9:	83 ec 0c             	sub    esp,0xc
c000f8bc:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f8c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8c7:	50                   	push   eax
c000f8c8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f8cc:	55                   	push   ebp
c000f8cd:	56                   	push   esi
c000f8ce:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f8d2:	57                   	push   edi
c000f8d3:	68 00 00 00 80       	push   0x80000000
c000f8d8:	e8 5f f8 ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8dd:	83 c4 20             	add    esp,0x20
c000f8e0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f8e8:	76 22                	jbe    c000f90c <CPU::detectFeatures()+0x604>
c000f8ea:	83 ec 0c             	sub    esp,0xc
c000f8ed:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8f1:	50                   	push   eax
c000f8f2:	55                   	push   ebp
c000f8f3:	56                   	push   esi
c000f8f4:	57                   	push   edi
c000f8f5:	68 01 00 00 80       	push   0x80000001
c000f8fa:	e8 3d f8 ff ff       	call   c000f13c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8ff:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f909:	83 c4 20             	add    esp,0x20
c000f90c:	52                   	push   edx
c000f90d:	52                   	push   edx
c000f90e:	68 01 fd 01 c0       	push   0xc001fd01
c000f913:	53                   	push   ebx
c000f914:	e8 b9 c2 ff ff       	call   c000bbd2 <Device::setName(char const*)>
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	eb 67                	jmp    c000f985 <CPU::detectFeatures()+0x67d>
c000f91e:	50                   	push   eax
c000f91f:	50                   	push   eax
c000f920:	68 66 fc 01 c0       	push   0xc001fc66
c000f925:	55                   	push   ebp
c000f926:	e8 d5 0c ff ff       	call   c0000600 <strcpy>
c000f92b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f935:	e8 89 08 ff ff       	call   c00001c3 <is486>
c000f93a:	83 c4 10             	add    esp,0x10
c000f93d:	85 c0                	test   eax,eax
c000f93f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f945:	74 1d                	je     c000f964 <CPU::detectFeatures()+0x65c>
c000f947:	83 c8 07             	or     eax,0x7
c000f94a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f950:	0f 20 c0             	mov    eax,cr0
c000f953:	83 e0 14             	and    eax,0x14
c000f956:	83 f8 04             	cmp    eax,0x4
c000f959:	75 0e                	jne    c000f969 <CPU::detectFeatures()+0x661>
c000f95b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f962:	eb 21                	jmp    c000f985 <CPU::detectFeatures()+0x67d>
c000f964:	83 e0 f8             	and    eax,0xfffffff8
c000f967:	eb e1                	jmp    c000f94a <CPU::detectFeatures()+0x642>
c000f969:	e8 30 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f96e:	83 e0 01             	and    eax,0x1
c000f971:	8d 14 00             	lea    edx,[eax+eax*1]
c000f974:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f97a:	83 e0 fd             	and    eax,0xfffffffd
c000f97d:	09 d0                	or     eax,edx
c000f97f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f985:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f98c:	74 0e                	je     c000f99c <CPU::detectFeatures()+0x694>
c000f98e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f993:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f99a:	eb 20                	jmp    c000f9bc <CPU::detectFeatures()+0x6b4>
c000f99c:	e8 fd 07 ff ff       	call   c000019e <hasLegacyFPU>
c000f9a1:	83 e0 01             	and    eax,0x1
c000f9a4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f9a7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f9ad:	83 e0 fd             	and    eax,0xfffffffd
c000f9b0:	09 d0                	or     eax,edx
c000f9b2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f9b8:	a8 02                	test   al,0x2
c000f9ba:	75 d2                	jne    c000f98e <CPU::detectFeatures()+0x686>
c000f9bc:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f9c3:	83 c4 2c             	add    esp,0x2c
c000f9c6:	5b                   	pop    ebx
c000f9c7:	5e                   	pop    esi
c000f9c8:	5f                   	pop    edi
c000f9c9:	5d                   	pop    ebp
c000f9ca:	c3                   	ret    
c000f9cb:	90                   	nop

c000f9cc <CPU::setupSMEP()>:
c000f9cc:	0f 20 e0             	mov    eax,cr4
c000f9cf:	0d 00 00 10 00       	or     eax,0x100000
c000f9d4:	0f 22 e0             	mov    cr4,eax
c000f9d7:	c3                   	ret    

c000f9d8 <CPU::setupUMIP()>:
c000f9d8:	0f 20 e0             	mov    eax,cr4
c000f9db:	80 cc 08             	or     ah,0x8
c000f9de:	0f 22 e0             	mov    cr4,eax
c000f9e1:	c3                   	ret    

c000f9e2 <CPU::setupTSC()>:
c000f9e2:	0f 20 e0             	mov    eax,cr4
c000f9e5:	83 c8 04             	or     eax,0x4
c000f9e8:	0f 22 e0             	mov    cr4,eax
c000f9eb:	c3                   	ret    

c000f9ec <CPU::setupLargePages()>:
c000f9ec:	0f 20 e0             	mov    eax,cr4
c000f9ef:	83 c8 10             	or     eax,0x10
c000f9f2:	0f 22 e0             	mov    cr4,eax
c000f9f5:	c3                   	ret    

c000f9f6 <CPU::setupPAT()>:
c000f9f6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f9fb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fa02:	74 2c                	je     c000fa30 <CPU::setupPAT()+0x3a>
c000fa04:	53                   	push   ebx
c000fa05:	83 ec 10             	sub    esp,0x10
c000fa08:	68 77 02 00 00       	push   0x277
c000fa0d:	50                   	push   eax
c000fa0e:	e8 99 74 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000fa13:	83 e2 f8             	and    edx,0xfffffff8
c000fa16:	83 ca 01             	or     edx,0x1
c000fa19:	52                   	push   edx
c000fa1a:	50                   	push   eax
c000fa1b:	68 77 02 00 00       	push   0x277
c000fa20:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fa26:	e8 ad 74 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fa2b:	83 c4 28             	add    esp,0x28
c000fa2e:	5b                   	pop    ebx
c000fa2f:	c3                   	ret    
c000fa30:	c3                   	ret    
c000fa31:	90                   	nop

c000fa32 <CPU::setupMTRR()>:
c000fa32:	c3                   	ret    
c000fa33:	90                   	nop

c000fa34 <CPU::setupGlobalPages()>:
c000fa34:	0f 20 e0             	mov    eax,cr4
c000fa37:	0c 80                	or     al,0x80
c000fa39:	0f 22 e0             	mov    cr4,eax
c000fa3c:	c3                   	ret    
c000fa3d:	90                   	nop

c000fa3e <CPU::allowUsermodeDataAccess()>:
c000fa3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa42:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa49:	74 03                	je     c000fa4e <CPU::allowUsermodeDataAccess()+0x10>
c000fa4b:	0f 01 cb             	stac   
c000fa4e:	c3                   	ret    
c000fa4f:	90                   	nop

c000fa50 <CPU::prohibitUsermodeDataAccess()>:
c000fa50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa54:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fa5b:	74 03                	je     c000fa60 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fa5d:	0f 01 ca             	clac   
c000fa60:	c3                   	ret    
c000fa61:	90                   	nop

c000fa62 <CPU::setupSMAP()>:
c000fa62:	0f 20 e0             	mov    eax,cr4
c000fa65:	0d 00 00 20 00       	or     eax,0x200000
c000fa6a:	0f 22 e0             	mov    cr4,eax
c000fa6d:	eb e1                	jmp    c000fa50 <CPU::prohibitUsermodeDataAccess()>
c000fa6f:	90                   	nop

c000fa70 <CPU::setupFeatures()>:
c000fa70:	53                   	push   ebx
c000fa71:	83 ec 08             	sub    esp,0x8
c000fa74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa78:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fa7f:	74 18                	je     c000fa99 <CPU::setupFeatures()+0x29>
c000fa81:	83 ec 0c             	sub    esp,0xc
c000fa84:	68 0d fd 01 c0       	push   0xc001fd0d
c000fa89:	e8 7c ab ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fa8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa91:	e8 42 ff ff ff       	call   c000f9d8 <CPU::setupUMIP()>
c000fa96:	83 c4 10             	add    esp,0x10
c000fa99:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000faa0:	74 18                	je     c000faba <CPU::setupFeatures()+0x4a>
c000faa2:	83 ec 0c             	sub    esp,0xc
c000faa5:	68 17 fd 01 c0       	push   0xc001fd17
c000faaa:	e8 5b ab ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000faaf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fab2:	e8 2b ff ff ff       	call   c000f9e2 <CPU::setupTSC()>
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fac1:	74 18                	je     c000fadb <CPU::setupFeatures()+0x6b>
c000fac3:	83 ec 0c             	sub    esp,0xc
c000fac6:	68 20 fd 01 c0       	push   0xc001fd20
c000facb:	e8 3a ab ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fad0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fad3:	e8 14 ff ff ff       	call   c000f9ec <CPU::setupLargePages()>
c000fad8:	83 c4 10             	add    esp,0x10
c000fadb:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fae2:	74 18                	je     c000fafc <CPU::setupFeatures()+0x8c>
c000fae4:	83 ec 0c             	sub    esp,0xc
c000fae7:	68 29 fd 01 c0       	push   0xc001fd29
c000faec:	e8 19 ab ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000faf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faf4:	e8 3b ff ff ff       	call   c000fa34 <CPU::setupGlobalPages()>
c000faf9:	83 c4 10             	add    esp,0x10
c000fafc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fb03:	74 18                	je     c000fb1d <CPU::setupFeatures()+0xad>
c000fb05:	83 ec 0c             	sub    esp,0xc
c000fb08:	68 3b fd 01 c0       	push   0xc001fd3b
c000fb0d:	e8 f8 aa ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c000fb12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb15:	e8 dc fe ff ff       	call   c000f9f6 <CPU::setupPAT()>
c000fb1a:	83 c4 10             	add    esp,0x10
c000fb1d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fb24:	74 11                	je     c000fb37 <CPU::setupFeatures()+0xc7>
c000fb26:	c7 44 24 10 44 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fd44
c000fb2e:	83 c4 08             	add    esp,0x8
c000fb31:	5b                   	pop    ebx
c000fb32:	e9 d3 aa ff ff       	jmp    c000a60a <Dbg::kprintf(char const*, ...)>
c000fb37:	83 c4 08             	add    esp,0x8
c000fb3a:	5b                   	pop    ebx
c000fb3b:	c3                   	ret    

c000fb3c <CPU::open(int, int, void*)>:
c000fb3c:	57                   	push   edi
c000fb3d:	56                   	push   esi
c000fb3e:	53                   	push   ebx
c000fb3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fb47:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fb4d:	83 ec 0c             	sub    esp,0xc
c000fb50:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fb56:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fb5c:	50                   	push   eax
c000fb5d:	e8 34 76 ff ff       	call   c0007196 <GDT::setup()>
c000fb62:	83 c4 0c             	add    esp,0xc
c000fb65:	6a 00                	push   0x0
c000fb67:	68 ef be ad de       	push   0xdeadbeef
c000fb6c:	57                   	push   edi
c000fb6d:	e8 62 91 ff ff       	call   c0008cd4 <TSS::setup(unsigned long, unsigned long)>
c000fb72:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fb75:	e8 3a 91 ff ff       	call   c0008cb4 <TSS::flush()>
c000fb7a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fb80:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb83:	e8 5e 78 ff ff       	call   c00073e6 <IDT::setup()>
c000fb88:	b8 00 04 00 00       	mov    eax,0x400
c000fb8d:	0f 23 f8             	mov    db7,eax
c000fb90:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb9a:	e8 b2 7f ff ff       	call   c0007b51 <Phys::allocatePage()>
c000fb9f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fba5:	89 30                	mov    DWORD PTR [eax],esi
c000fba7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fbad:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fbb0:	58                   	pop    eax
c000fbb1:	5a                   	pop    edx
c000fbb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fbb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fbbc:	e8 2b a1 ff ff       	call   c0009cec <VAS::setCPUSpecific(unsigned long)>
c000fbc1:	c7 04 24 4e fd 01 c0 	mov    DWORD PTR [esp],0xc001fd4e
c000fbc8:	e8 c6 00 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000fbcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd0:	e8 33 f7 ff ff       	call   c000f308 <CPU::detectFeatures()>
c000fbd5:	c7 04 24 71 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd71
c000fbdc:	e8 b2 00 00 00       	call   c000fc93 <KeSetBootMessage(char const*)>
c000fbe1:	e8 75 69 00 00       	call   c001655b <HalInitialise()>
c000fbe6:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fbeb:	83 e0 10             	and    eax,0x10
c000fbee:	83 f8 01             	cmp    eax,0x1
c000fbf1:	19 c0                	sbb    eax,eax
c000fbf3:	83 e0 46             	and    eax,0x46
c000fbf6:	83 c0 1e             	add    eax,0x1e
c000fbf9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbfc:	e8 dc d6 ff ff       	call   c000d2dd <setupTimer(int)>
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fc0a:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fc11:	74 0c                	je     c000fc1f <CPU::open(int, int, void*)+0xe3>
c000fc13:	83 ec 0c             	sub    esp,0xc
c000fc16:	53                   	push   ebx
c000fc17:	e8 54 fe ff ff       	call   c000fa70 <CPU::setupFeatures()>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	5b                   	pop    ebx
c000fc20:	31 c0                	xor    eax,eax
c000fc22:	5e                   	pop    esi
c000fc23:	5f                   	pop    edi
c000fc24:	c3                   	ret    

c000fc25 <KeDisplaySplashScreen()>:
c000fc25:	55                   	push   ebp
c000fc26:	bd 05 00 00 00       	mov    ebp,0x5
c000fc2b:	57                   	push   edi
c000fc2c:	bf e0 10 02 c0       	mov    edi,0xc00210e0
c000fc31:	56                   	push   esi
c000fc32:	be 0a 00 00 00       	mov    esi,0xa
c000fc37:	53                   	push   ebx
c000fc38:	31 db                	xor    ebx,ebx
c000fc3a:	83 ec 0c             	sub    esp,0xc
c000fc3d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fc40:	84 c0                	test   al,al
c000fc42:	74 47                	je     c000fc8b <KeDisplaySplashScreen()+0x66>
c000fc44:	80 bb 16 11 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdeeea],0xdb
c000fc4b:	75 13                	jne    c000fc60 <KeDisplaySplashScreen()+0x3b>
c000fc4d:	0f b6 93 15 11 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdeeeb]
c000fc54:	83 e2 fe             	and    edx,0xfffffffe
c000fc57:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fc5d:	75 01                	jne    c000fc60 <KeDisplaySplashScreen()+0x3b>
c000fc5f:	46                   	inc    esi
c000fc60:	3c 0d                	cmp    al,0xd
c000fc62:	74 24                	je     c000fc88 <KeDisplaySplashScreen()+0x63>
c000fc64:	3c 0a                	cmp    al,0xa
c000fc66:	75 0a                	jne    c000fc72 <KeDisplaySplashScreen()+0x4d>
c000fc68:	45                   	inc    ebp
c000fc69:	be 0a 00 00 00       	mov    esi,0xa
c000fc6e:	31 db                	xor    ebx,ebx
c000fc70:	eb 16                	jmp    c000fc88 <KeDisplaySplashScreen()+0x63>
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fc78:	55                   	push   ebp
c000fc79:	43                   	inc    ebx
c000fc7a:	52                   	push   edx
c000fc7b:	6a 00                	push   0x0
c000fc7d:	6a 0e                	push   0xe
c000fc7f:	50                   	push   eax
c000fc80:	e8 3b 75 00 00       	call   c00171c0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fc85:	83 c4 20             	add    esp,0x20
c000fc88:	47                   	inc    edi
c000fc89:	eb b2                	jmp    c000fc3d <KeDisplaySplashScreen()+0x18>
c000fc8b:	83 c4 0c             	add    esp,0xc
c000fc8e:	5b                   	pop    ebx
c000fc8f:	5e                   	pop    esi
c000fc90:	5f                   	pop    edi
c000fc91:	5d                   	pop    ebp
c000fc92:	c3                   	ret    

c000fc93 <KeSetBootMessage(char const*)>:
c000fc93:	57                   	push   edi
c000fc94:	56                   	push   esi
c000fc95:	53                   	push   ebx
c000fc96:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc9c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fca3:	68 9e 00 00 00       	push   0x9e
c000fca8:	6a 00                	push   0x0
c000fcaa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fcae:	56                   	push   esi
c000fcaf:	e8 1c 08 ff ff       	call   c00004d0 <memset>
c000fcb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcb7:	e8 84 08 ff ff       	call   c0000540 <strlen>
c000fcbc:	ba 50 00 00 00       	mov    edx,0x50
c000fcc1:	83 c4 10             	add    esp,0x10
c000fcc4:	29 c2                	sub    edx,eax
c000fcc6:	31 c9                	xor    ecx,ecx
c000fcc8:	83 e2 fe             	and    edx,0xfffffffe
c000fccb:	01 f2                	add    edx,esi
c000fccd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fcd2:	84 c0                	test   al,al
c000fcd4:	74 0a                	je     c000fce0 <KeSetBootMessage(char const*)+0x4d>
c000fcd6:	80 cc 0f             	or     ah,0xf
c000fcd9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fcdd:	41                   	inc    ecx
c000fcde:	eb ed                	jmp    c000fccd <KeSetBootMessage(char const*)+0x3a>
c000fce0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fce5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fcea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcec:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fcf2:	5b                   	pop    ebx
c000fcf3:	5e                   	pop    esi
c000fcf4:	5f                   	pop    edi
c000fcf5:	c3                   	ret    

c000fcf6 <EnvVarContainer::getEnv(char const*)>:
c000fcf6:	57                   	push   edi
c000fcf7:	56                   	push   esi
c000fcf8:	53                   	push   ebx
c000fcf9:	31 db                	xor    ebx,ebx
c000fcfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcff:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd01:	7e 2b                	jle    c000fd2e <EnvVarContainer::getEnv(char const*)+0x38>
c000fd03:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd0a:	50                   	push   eax
c000fd0b:	50                   	push   eax
c000fd0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd0f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fd12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fd16:	e8 c5 09 ff ff       	call   c00006e0 <strcmp>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	85 c0                	test   eax,eax
c000fd20:	75 09                	jne    c000fd2b <EnvVarContainer::getEnv(char const*)+0x35>
c000fd22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd25:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd29:	eb 05                	jmp    c000fd30 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd2b:	43                   	inc    ebx
c000fd2c:	eb d1                	jmp    c000fcff <EnvVarContainer::getEnv(char const*)+0x9>
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	5b                   	pop    ebx
c000fd31:	5e                   	pop    esi
c000fd32:	5f                   	pop    edi
c000fd33:	c3                   	ret    

c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd34:	55                   	push   ebp
c000fd35:	57                   	push   edi
c000fd36:	56                   	push   esi
c000fd37:	53                   	push   ebx
c000fd38:	83 ec 28             	sub    esp,0x28
c000fd3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd43:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd47:	56                   	push   esi
c000fd48:	e8 f3 07 ff ff       	call   c0000540 <strlen>
c000fd4d:	40                   	inc    eax
c000fd4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd51:	e8 1f 7b ff ff       	call   c0007875 <malloc>
c000fd56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd5d:	e8 de 07 ff ff       	call   c0000540 <strlen>
c000fd62:	40                   	inc    eax
c000fd63:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd66:	e8 0a 7b ff ff       	call   c0007875 <malloc>
c000fd6b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd72:	e8 c9 07 ff ff       	call   c0000540 <strlen>
c000fd77:	83 c4 0c             	add    esp,0xc
c000fd7a:	40                   	inc    eax
c000fd7b:	50                   	push   eax
c000fd7c:	6a 00                	push   0x0
c000fd7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd82:	e8 49 07 ff ff       	call   c00004d0 <memset>
c000fd87:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd8a:	e8 b1 07 ff ff       	call   c0000540 <strlen>
c000fd8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd93:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd9b:	89 de                	mov    esi,ebx
c000fd9d:	e8 9e 07 ff ff       	call   c0000540 <strlen>
c000fda2:	83 c4 0c             	add    esp,0xc
c000fda5:	40                   	inc    eax
c000fda6:	50                   	push   eax
c000fda7:	6a 00                	push   0x0
c000fda9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdad:	e8 1e 07 ff ff       	call   c00004d0 <memset>
c000fdb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdb5:	e8 86 07 ff ff       	call   c0000540 <strlen>
c000fdba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdbe:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdc6:	40                   	inc    eax
c000fdc7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdca:	c1 e0 03             	shl    eax,0x3
c000fdcd:	5a                   	pop    edx
c000fdce:	59                   	pop    ecx
c000fdcf:	50                   	push   eax
c000fdd0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fdd3:	e8 89 7a ff ff       	call   c0007861 <realloc>
c000fdd8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fddc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fddf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fde2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde6:	b9 08 00 00 00       	mov    ecx,0x8
c000fdeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fded:	83 c4 2c             	add    esp,0x2c
c000fdf0:	5b                   	pop    ebx
c000fdf1:	5e                   	pop    esi
c000fdf2:	5f                   	pop    edi
c000fdf3:	5d                   	pop    ebp
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <EnvVarContainer::deleteEnv(char const*)>:
c000fdf6:	c3                   	ret    
c000fdf7:	90                   	nop

c000fdf8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fdf8:	55                   	push   ebp
c000fdf9:	57                   	push   edi
c000fdfa:	56                   	push   esi
c000fdfb:	53                   	push   ebx
c000fdfc:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe02:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe09:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fe10:	68 14 01 00 00       	push   0x114
c000fe15:	e8 5b 7a ff ff       	call   c0007875 <malloc>
c000fe1a:	83 c4 0c             	add    esp,0xc
c000fe1d:	89 c3                	mov    ebx,eax
c000fe1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe29:	50                   	push   eax
c000fe2a:	e8 51 ad ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c000fe2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe32:	e8 77 b0 ff ff       	call   c000aeae <File::exists()>
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	84 c0                	test   al,al
c000fe3c:	75 31                	jne    c000fe6f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe3e:	50                   	push   eax
c000fe3f:	50                   	push   eax
c000fe40:	6a 12                	push   0x12
c000fe42:	53                   	push   ebx
c000fe43:	e8 f8 ad ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000fe48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe4a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe4d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe50:	e8 eb 06 ff ff       	call   c0000540 <strlen>
c000fe55:	5a                   	pop    edx
c000fe56:	31 d2                	xor    edx,edx
c000fe58:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe5c:	51                   	push   ecx
c000fe5d:	56                   	push   esi
c000fe5e:	52                   	push   edx
c000fe5f:	50                   	push   eax
c000fe60:	53                   	push   ebx
c000fe61:	ff d7                	call   edi
c000fe63:	83 c4 14             	add    esp,0x14
c000fe66:	53                   	push   ebx
c000fe67:	e8 32 ae ff ff       	call   c000ac9e <File::close()>
c000fe6c:	83 c4 10             	add    esp,0x10
c000fe6f:	56                   	push   esi
c000fe70:	31 f6                	xor    esi,esi
c000fe72:	68 00 01 00 00       	push   0x100
c000fe77:	6a 00                	push   0x0
c000fe79:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe7d:	50                   	push   eax
c000fe7e:	e8 4d 06 ff ff       	call   c00004d0 <memset>
c000fe83:	5f                   	pop    edi
c000fe84:	58                   	pop    eax
c000fe85:	6a 01                	push   0x1
c000fe87:	53                   	push   ebx
c000fe88:	e8 b3 ad ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe9d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fea1:	51                   	push   ecx
c000fea2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fea6:	52                   	push   edx
c000fea7:	6a 00                	push   0x0
c000fea9:	6a 01                	push   0x1
c000feab:	53                   	push   ebx
c000feac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000feaf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000feb3:	83 c4 20             	add    esp,0x20
c000feb6:	3c 0d                	cmp    al,0xd
c000feb8:	0f 84 09 01 00 00    	je     c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000febe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fec3:	0f 84 ef 00 00 00    	je     c000ffb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fec9:	3c 0a                	cmp    al,0xa
c000fecb:	74 13                	je     c000fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fecd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fed2:	74 0c                	je     c000fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fed4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000feda:	0f 8e d8 00 00 00    	jle    c000ffb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	8d 78 01             	lea    edi,[eax+0x1]
c000feea:	57                   	push   edi
c000feeb:	e8 85 79 ff ff       	call   c0007875 <malloc>
c000fef0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fef4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fef8:	8d 56 04             	lea    edx,[esi+0x4]
c000fefb:	89 14 24             	mov    DWORD PTR [esp],edx
c000fefe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff02:	e8 6e 79 ff ff       	call   c0007875 <malloc>
c000ff07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff0b:	83 c4 0c             	add    esp,0xc
c000ff0e:	57                   	push   edi
c000ff0f:	6a 00                	push   0x0
c000ff11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff15:	e8 b6 05 ff ff       	call   c00004d0 <memset>
c000ff1a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff1e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff28:	83 c4 0c             	add    esp,0xc
c000ff2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff2f:	52                   	push   edx
c000ff30:	6a 00                	push   0x0
c000ff32:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff36:	e8 95 05 ff ff       	call   c00004d0 <memset>
c000ff3b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff3f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff43:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff46:	e8 f5 05 ff ff       	call   c0000540 <strlen>
c000ff4b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff4f:	89 c1                	mov    ecx,eax
c000ff51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff56:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff59:	40                   	inc    eax
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff60:	85 d2                	test   edx,edx
c000ff62:	75 0c                	jne    c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff64:	83 ec 0c             	sub    esp,0xc
c000ff67:	6a 08                	push   0x8
c000ff69:	e8 07 79 ff ff       	call   c0007875 <malloc>
c000ff6e:	eb 0c                	jmp    c000ff7c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff70:	c1 e0 03             	shl    eax,0x3
c000ff73:	51                   	push   ecx
c000ff74:	51                   	push   ecx
c000ff75:	50                   	push   eax
c000ff76:	52                   	push   edx
c000ff77:	e8 e5 78 ff ff       	call   c0007861 <realloc>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff82:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff85:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff88:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff8c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff90:	b9 08 00 00 00       	mov    ecx,0x8
c000ff95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff97:	31 f6                	xor    esi,esi
c000ff99:	50                   	push   eax
c000ff9a:	68 00 01 00 00       	push   0x100
c000ff9f:	6a 00                	push   0x0
c000ffa1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ffa5:	50                   	push   eax
c000ffa6:	e8 25 05 ff ff       	call   c00004d0 <memset>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffb6:	eb 0f                	jmp    c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffb8:	3c 3d                	cmp    al,0x3d
c000ffba:	74 07                	je     c000ffc3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffbc:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ffc0:	46                   	inc    esi
c000ffc1:	eb 04                	jmp    c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffc3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ffc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffcc:	0f 85 c6 fe ff ff    	jne    c000fe98 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ffd2:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ffd8:	5b                   	pop    ebx
c000ffd9:	5e                   	pop    esi
c000ffda:	5f                   	pop    edi
c000ffdb:	5d                   	pop    ebp
c000ffdc:	c3                   	ret    
c000ffdd:	90                   	nop

c000ffde <EnvVarContainer::__loadSystem()>:
c000ffde:	83 ec 10             	sub    esp,0x10
c000ffe1:	68 40 12 02 c0       	push   0xc0021240
c000ffe6:	68 b4 fd 01 c0       	push   0xc001fdb4
c000ffeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffef:	e8 04 fe ff ff       	call   c000fdf8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fff4:	83 c4 1c             	add    esp,0x1c
c000fff7:	c3                   	ret    

c000fff8 <EnvVarContainer::__loadUser()>:
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <EnvVarContainer::EnvVarContainer(Process*)>:
c000fffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fffe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001000c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001000f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010013:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001001a:	90                   	nop
c001001b:	c3                   	ret    

c001001c <EnvVarContainer::~EnvVarContainer()>:
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010023:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010026:	85 c0                	test   eax,eax
c0010028:	74 1d                	je     c0010047 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001002a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010030:	85 c0                	test   eax,eax
c0010032:	74 13                	je     c0010047 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	50                   	push   eax
c001003f:	e8 41 78 ff ff       	call   c0007885 <free>
c0010044:	83 c4 10             	add    esp,0x10
c0010047:	90                   	nop
c0010048:	83 c4 0c             	add    esp,0xc
c001004b:	c3                   	ret    

c001004c <Krnl::getEnv(Process*, char const*)>:
c001004c:	53                   	push   ebx
c001004d:	83 ec 08             	sub    esp,0x8
c0010050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010054:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010058:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001005e:	74 04                	je     c0010064 <Krnl::getEnv(Process*, char const*)+0x18>
c0010060:	85 c0                	test   eax,eax
c0010062:	75 0b                	jne    c001006f <Krnl::getEnv(Process*, char const*)+0x23>
c0010064:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010069:	85 c0                	test   eax,eax
c001006b:	75 19                	jne    c0010086 <Krnl::getEnv(Process*, char const*)+0x3a>
c001006d:	eb 27                	jmp    c0010096 <Krnl::getEnv(Process*, char const*)+0x4a>
c001006f:	52                   	push   edx
c0010070:	52                   	push   edx
c0010071:	53                   	push   ebx
c0010072:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010078:	e8 79 fc ff ff       	call   c000fcf6 <EnvVarContainer::getEnv(char const*)>
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	85 c0                	test   eax,eax
c0010082:	75 28                	jne    c00100ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010084:	eb de                	jmp    c0010064 <Krnl::getEnv(Process*, char const*)+0x18>
c0010086:	52                   	push   edx
c0010087:	52                   	push   edx
c0010088:	53                   	push   ebx
c0010089:	50                   	push   eax
c001008a:	e8 67 fc ff ff       	call   c000fcf6 <EnvVarContainer::getEnv(char const*)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	85 c0                	test   eax,eax
c0010094:	75 16                	jne    c00100ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010096:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001009a:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001009f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100a3:	83 c4 08             	add    esp,0x8
c00100a6:	5b                   	pop    ebx
c00100a7:	e9 4a fc ff ff       	jmp    c000fcf6 <EnvVarContainer::getEnv(char const*)>
c00100ac:	83 c4 08             	add    esp,0x8
c00100af:	5b                   	pop    ebx
c00100b0:	c3                   	ret    

c00100b1 <Krnl::setEnvSystem(char const*, char const*)>:
c00100b1:	83 ec 10             	sub    esp,0x10
c00100b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100bc:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c00100c2:	e8 6d fc ff ff       	call   c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>
c00100c7:	83 c4 1c             	add    esp,0x1c
c00100ca:	c3                   	ret    

c00100cb <Krnl::setEnvUser(char const*, char const*)>:
c00100cb:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c00100d0:	85 c0                	test   eax,eax
c00100d2:	74 15                	je     c00100e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00100d4:	83 ec 10             	sub    esp,0x10
c00100d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100df:	50                   	push   eax
c00100e0:	e8 4f fc ff ff       	call   c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>
c00100e5:	83 c4 1c             	add    esp,0x1c
c00100e8:	c3                   	ret    
c00100e9:	c3                   	ret    

c00100ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00100ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00100f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100f8:	e9 37 fc ff ff       	jmp    c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>

c00100fd <Krnl::deleteEnvSystem(char const*)>:
c00100fd:	c3                   	ret    

c00100fe <Krnl::deleteEnvUser(char const*)>:
c00100fe:	c3                   	ret    

c00100ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c00100ff:	c3                   	ret    

c0010100 <Krnl::newProcessEnv(Process*)>:
c0010100:	83 ec 28             	sub    esp,0x28
c0010103:	6a 0c                	push   0xc
c0010105:	e8 6b 77 ff ff       	call   c0007875 <malloc>
c001010a:	5a                   	pop    edx
c001010b:	59                   	pop    ecx
c001010c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010110:	50                   	push   eax
c0010111:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010115:	e8 e0 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c001011a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011e:	83 c4 2c             	add    esp,0x2c
c0010121:	c3                   	ret    

c0010122 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010122:	57                   	push   edi
c0010123:	56                   	push   esi
c0010124:	53                   	push   ebx
c0010125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010132:	6a 0c                	push   0xc
c0010134:	e8 3c 77 ff ff       	call   c0007875 <malloc>
c0010139:	89 c3                	mov    ebx,eax
c001013b:	58                   	pop    eax
c001013c:	5a                   	pop    edx
c001013d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010141:	53                   	push   ebx
c0010142:	e8 b3 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c0010147:	8b 07                	mov    eax,DWORD PTR [edi]
c0010149:	89 03                	mov    DWORD PTR [ebx],eax
c001014b:	c1 e0 03             	shl    eax,0x3
c001014e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010151:	e8 1f 77 ff ff       	call   c0007875 <malloc>
c0010156:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010159:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001015b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001015e:	c1 e1 03             	shl    ecx,0x3
c0010161:	89 c7                	mov    edi,eax
c0010163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	89 d8                	mov    eax,ebx
c001016a:	5b                   	pop    ebx
c001016b:	5e                   	pop    esi
c001016c:	5f                   	pop    edi
c001016d:	c3                   	ret    

c001016e <Krnl::loadSystemEnv()>:
c001016e:	53                   	push   ebx
c001016f:	83 ec 14             	sub    esp,0x14
c0010172:	6a 0c                	push   0xc
c0010174:	e8 fc 76 ff ff       	call   c0007875 <malloc>
c0010179:	89 c3                	mov    ebx,eax
c001017b:	58                   	pop    eax
c001017c:	5a                   	pop    edx
c001017d:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010183:	53                   	push   ebx
c0010184:	e8 71 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c0010189:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001018c:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010192:	e8 47 fe ff ff       	call   c000ffde <EnvVarContainer::__loadSystem()>
c0010197:	83 c4 18             	add    esp,0x18
c001019a:	5b                   	pop    ebx
c001019b:	c3                   	ret    

c001019c <Krnl::loadUserEnv()>:
c001019c:	53                   	push   ebx
c001019d:	83 ec 14             	sub    esp,0x14
c00101a0:	6a 0c                	push   0xc
c00101a2:	e8 ce 76 ff ff       	call   c0007875 <malloc>
c00101a7:	89 c3                	mov    ebx,eax
c00101a9:	58                   	pop    eax
c00101aa:	5a                   	pop    edx
c00101ab:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00101b1:	53                   	push   ebx
c00101b2:	e8 43 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c00101b7:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c00101bd:	83 c4 18             	add    esp,0x18
c00101c0:	5b                   	pop    ebx
c00101c1:	c3                   	ret    

c00101c2 <Krnl::flushEnv()>:
c00101c2:	c3                   	ret    

c00101c3 <Krnl::getProcessTotalEnvCount(Process*)>:
c00101c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c7:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c00101cd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101d3:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c00101d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101da:	03 01                	add    eax,DWORD PTR [ecx]
c00101dc:	85 d2                	test   edx,edx
c00101de:	74 02                	je     c00101e2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00101e0:	03 02                	add    eax,DWORD PTR [edx]
c00101e2:	c3                   	ret    

c00101e3 <Krnl::getProcessEnvPair(Process*, int)>:
c00101e3:	57                   	push   edi
c00101e4:	56                   	push   esi
c00101e5:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00101eb:	53                   	push   ebx
c00101ec:	85 f6                	test   esi,esi
c00101ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010200:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010202:	75 16                	jne    c001021a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010204:	39 c2                	cmp    edx,eax
c0010206:	7c 16                	jl     c001021e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010208:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c001020e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010210:	01 c6                	add    esi,eax
c0010212:	39 d6                	cmp    esi,edx
c0010214:	7e 3c                	jle    c0010252 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010216:	29 c2                	sub    edx,eax
c0010218:	eb 04                	jmp    c001021e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001021a:	39 c2                	cmp    edx,eax
c001021c:	7d 05                	jge    c0010223 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001021e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010221:	eb 20                	jmp    c0010243 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010223:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010225:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010228:	39 d1                	cmp    ecx,edx
c001022a:	7e 04                	jle    c0010230 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001022c:	29 c2                	sub    edx,eax
c001022e:	eb 10                	jmp    c0010240 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010230:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c0010236:	03 0e                	add    ecx,DWORD PTR [esi]
c0010238:	39 d1                	cmp    ecx,edx
c001023a:	7e 16                	jle    c0010252 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001023c:	29 c2                	sub    edx,eax
c001023e:	29 fa                	sub    edx,edi
c0010240:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010243:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010246:	8b 02                	mov    eax,DWORD PTR [edx]
c0010248:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001024b:	89 03                	mov    DWORD PTR [ebx],eax
c001024d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010250:	eb 1d                	jmp    c001026f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	68 d6 fd 01 c0       	push   0xc001fdd6
c001025a:	e8 ac 00 00 00       	call   c001030b <KePanic(char const*)>
c001025f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010265:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	89 d8                	mov    eax,ebx
c0010271:	5b                   	pop    ebx
c0010272:	5e                   	pop    esi
c0010273:	5f                   	pop    edi
c0010274:	c2 04 00             	ret    0x4

c0010277 <CPU::current()>:
c0010277:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001027c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010282:	c3                   	ret    

c0010283 <operator new(unsigned long)>:
c0010283:	e9 ed 75 ff ff       	jmp    c0007875 <malloc>

c0010288 <operator delete(void*)>:
c0010288:	e9 08 76 ff ff       	jmp    c0007895 <rfree>

c001028d <disableIRQs()>:
c001028d:	fa                   	cli    
c001028e:	c3                   	ret    

c001028f <enableIRQs()>:
c001028f:	fb                   	sti    
c0010290:	c3                   	ret    

c0010291 <lockScheduler()>:
c0010291:	fa                   	cli    
c0010292:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010298:	c3                   	ret    

c0010299 <unlockScheduler()>:
c0010299:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001029e:	48                   	dec    eax
c001029f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00102a4:	75 01                	jne    c00102a7 <unlockScheduler()+0xe>
c00102a6:	fb                   	sti    
c00102a7:	c3                   	ret    

c00102a8 <lockStuff()>:
c00102a8:	fa                   	cli    
c00102a9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00102af:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00102b5:	c3                   	ret    

c00102b6 <unlockStuff()>:
c00102b6:	83 ec 0c             	sub    esp,0xc
c00102b9:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00102be:	48                   	dec    eax
c00102bf:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00102c4:	75 18                	jne    c00102de <unlockStuff()+0x28>
c00102c6:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c00102cd:	74 0f                	je     c00102de <unlockStuff()+0x28>
c00102cf:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00102d9:	e8 36 43 00 00       	call   c0014614 <schedule()>
c00102de:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00102e3:	48                   	dec    eax
c00102e4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00102e9:	75 01                	jne    c00102ec <unlockStuff()+0x36>
c00102eb:	fb                   	sti    
c00102ec:	83 c4 0c             	add    esp,0xc
c00102ef:	c3                   	ret    

c00102f0 <Virt::getAKernelVAS()>:
c00102f0:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00102f5:	c3                   	ret    

c00102f6 <__not_memcpy>:
c00102f6:	57                   	push   edi
c00102f7:	56                   	push   esi
c00102f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010300:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010304:	89 c7                	mov    edi,eax
c0010306:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010308:	5e                   	pop    esi
c0010309:	5f                   	pop    edi
c001030a:	c3                   	ret    

c001030b <KePanic(char const*)>:
c001030b:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c0010312:	e9 30 61 00 00       	jmp    c0016447 <HalPanic(char const*)>

c0010317 <Krnl::powerThread(void*)>:
c0010317:	83 ec 0c             	sub    esp,0xc
c001031a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001031f:	48                   	dec    eax
c0010320:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010325:	75 01                	jne    c0010328 <Krnl::powerThread(void*)+0x11>
c0010327:	fb                   	sti    
c0010328:	83 ec 0c             	sub    esp,0xc
c001032b:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c0010332:	6a 0a                	push   0xa
c0010334:	e8 eb 45 00 00       	call   c0014924 <sleep(unsigned int)>
c0010339:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c0010340:	83 c4 10             	add    esp,0x10
c0010343:	eb e3                	jmp    c0010328 <Krnl::powerThread(void*)+0x11>

c0010345 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010345:	57                   	push   edi
c0010346:	b9 09 00 00 00       	mov    ecx,0x9
c001034b:	56                   	push   esi
c001034c:	bf 60 69 02 c0       	mov    edi,0xc0026960
c0010351:	fc                   	cld    
c0010352:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010356:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010358:	5e                   	pop    esi
c0010359:	5f                   	pop    edi
c001035a:	c3                   	ret    

c001035b <Krnl::userIOReceived()>:
c001035b:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010365:	c3                   	ret    

c0010366 <Krnl::handlePowerButton()>:
c0010366:	83 ec 0c             	sub    esp,0xc
c0010369:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001036e:	83 f8 02             	cmp    eax,0x2
c0010371:	75 10                	jne    c0010383 <Krnl::handlePowerButton()+0x1d>
c0010373:	83 ec 0c             	sub    esp,0xc
c0010376:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001037c:	e8 8f 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c0010381:	eb 11                	jmp    c0010394 <Krnl::handlePowerButton()+0x2e>
c0010383:	48                   	dec    eax
c0010384:	75 11                	jne    c0010397 <Krnl::handlePowerButton()+0x31>
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001038f:	e8 ac 6b ff ff       	call   c0006f40 <Computer::sleep()>
c0010394:	83 c4 10             	add    esp,0x10
c0010397:	83 c4 0c             	add    esp,0xc
c001039a:	c3                   	ret    

c001039b <Krnl::handleSleepButton()>:
c001039b:	83 ec 0c             	sub    esp,0xc
c001039e:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c00103a3:	83 f8 02             	cmp    eax,0x2
c00103a6:	75 10                	jne    c00103b8 <Krnl::handleSleepButton()+0x1d>
c00103a8:	83 ec 0c             	sub    esp,0xc
c00103ab:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00103b1:	e8 5a 6b ff ff       	call   c0006f10 <Computer::shutdown()>
c00103b6:	eb 11                	jmp    c00103c9 <Krnl::handleSleepButton()+0x2e>
c00103b8:	48                   	dec    eax
c00103b9:	75 11                	jne    c00103cc <Krnl::handleSleepButton()+0x31>
c00103bb:	83 ec 0c             	sub    esp,0xc
c00103be:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00103c4:	e8 77 6b ff ff       	call   c0006f40 <Computer::sleep()>
c00103c9:	83 c4 10             	add    esp,0x10
c00103cc:	83 c4 0c             	add    esp,0xc
c00103cf:	c3                   	ret    

c00103d0 <Krnl::setupPowerManager()>:
c00103d0:	83 ec 0c             	sub    esp,0xc
c00103d3:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00103dd:	68 f0 00 00 00       	push   0xf0
c00103e2:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103e9:	6a 00                	push   0x0
c00103eb:	68 17 03 01 c0       	push   0xc0010317
c00103f0:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00103f6:	e8 f9 3f 00 00       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c00103fb:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c0010405:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c001040f:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c0010419:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c0010423:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c001042d:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c0010437:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c0010441:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c001044b:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010455:	83 c4 1c             	add    esp,0x1c
c0010458:	c3                   	ret    
c0010459:	66 90                	xchg   ax,ax
c001045b:	90                   	nop

c001045c <KeResolveCompatibilitySymbol(char*)>:
c001045c:	83 ec 0c             	sub    esp,0xc
c001045f:	83 ec 08             	sub    esp,0x8
c0010462:	68 f0 fd 01 c0       	push   0xc001fdf0
c0010467:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001046b:	e8 70 02 ff ff       	call   c00006e0 <strcmp>
c0010470:	83 c4 10             	add    esp,0x10
c0010473:	85 c0                	test   eax,eax
c0010475:	0f 94 c0             	sete   al
c0010478:	84 c0                	test   al,al
c001047a:	74 0c                	je     c0010488 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001047c:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010481:	e9 62 01 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010486:	66 90                	xchg   ax,ax
c0010488:	83 ec 08             	sub    esp,0x8
c001048b:	68 f9 fd 01 c0       	push   0xc001fdf9
c0010490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010494:	e8 47 02 ff ff       	call   c00006e0 <strcmp>
c0010499:	83 c4 10             	add    esp,0x10
c001049c:	85 c0                	test   eax,eax
c001049e:	0f 94 c0             	sete   al
c00104a1:	84 c0                	test   al,al
c00104a3:	74 0b                	je     c00104b0 <KeResolveCompatibilitySymbol(char*)+0x54>
c00104a5:	b8 30 d8 01 c0       	mov    eax,0xc001d830
c00104aa:	e9 39 01 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104af:	90                   	nop
c00104b0:	83 ec 08             	sub    esp,0x8
c00104b3:	68 03 fe 01 c0       	push   0xc001fe03
c00104b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104bc:	e8 1f 02 ff ff       	call   c00006e0 <strcmp>
c00104c1:	83 c4 10             	add    esp,0x10
c00104c4:	85 c0                	test   eax,eax
c00104c6:	0f 94 c0             	sete   al
c00104c9:	84 c0                	test   al,al
c00104cb:	74 0b                	je     c00104d8 <KeResolveCompatibilitySymbol(char*)+0x7c>
c00104cd:	b8 64 d5 01 c0       	mov    eax,0xc001d564
c00104d2:	e9 11 01 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104d7:	90                   	nop
c00104d8:	83 ec 08             	sub    esp,0x8
c00104db:	68 0c fe 01 c0       	push   0xc001fe0c
c00104e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e4:	e8 f7 01 ff ff       	call   c00006e0 <strcmp>
c00104e9:	83 c4 10             	add    esp,0x10
c00104ec:	85 c0                	test   eax,eax
c00104ee:	0f 94 c0             	sete   al
c00104f1:	84 c0                	test   al,al
c00104f3:	74 0b                	je     c0010500 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00104f5:	b8 0b 03 01 c0       	mov    eax,0xc001030b
c00104fa:	e9 e9 00 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104ff:	90                   	nop
c0010500:	83 ec 08             	sub    esp,0x8
c0010503:	68 1f fe 01 c0       	push   0xc001fe1f
c0010508:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050c:	e8 cf 01 ff ff       	call   c00006e0 <strcmp>
c0010511:	83 c4 10             	add    esp,0x10
c0010514:	85 c0                	test   eax,eax
c0010516:	0f 94 c0             	sete   al
c0010519:	84 c0                	test   al,al
c001051b:	74 0b                	je     c0010528 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001051d:	b8 93 fc 00 c0       	mov    eax,0xc000fc93
c0010522:	e9 c1 00 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010527:	90                   	nop
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	68 3c fe 01 c0       	push   0xc001fe3c
c0010530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010534:	e8 a7 01 ff ff       	call   c00006e0 <strcmp>
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	85 c0                	test   eax,eax
c001053e:	0f 94 c0             	sete   al
c0010541:	84 c0                	test   al,al
c0010543:	74 0b                	je     c0010550 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010545:	b8 30 d9 01 c0       	mov    eax,0xc001d930
c001054a:	e9 99 00 00 00       	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001054f:	90                   	nop
c0010550:	83 ec 08             	sub    esp,0x8
c0010553:	68 46 fe 01 c0       	push   0xc001fe46
c0010558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055c:	e8 7f 01 ff ff       	call   c00006e0 <strcmp>
c0010561:	83 c4 10             	add    esp,0x10
c0010564:	85 c0                	test   eax,eax
c0010566:	0f 94 c0             	sete   al
c0010569:	84 c0                	test   al,al
c001056b:	74 07                	je     c0010574 <KeResolveCompatibilitySymbol(char*)+0x118>
c001056d:	b8 b0 d6 01 c0       	mov    eax,0xc001d6b0
c0010572:	eb 74                	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010574:	83 ec 08             	sub    esp,0x8
c0010577:	68 4f fe 01 c0       	push   0xc001fe4f
c001057c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010580:	e8 5b 01 ff ff       	call   c00006e0 <strcmp>
c0010585:	83 c4 10             	add    esp,0x10
c0010588:	85 c0                	test   eax,eax
c001058a:	0f 94 c0             	sete   al
c001058d:	84 c0                	test   al,al
c001058f:	74 07                	je     c0010598 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010591:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010596:	eb 50                	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010598:	83 ec 08             	sub    esp,0x8
c001059b:	68 67 fe 01 c0       	push   0xc001fe67
c00105a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a4:	e8 37 01 ff ff       	call   c00006e0 <strcmp>
c00105a9:	83 c4 10             	add    esp,0x10
c00105ac:	85 c0                	test   eax,eax
c00105ae:	0f 94 c0             	sete   al
c00105b1:	84 c0                	test   al,al
c00105b3:	74 07                	je     c00105bc <KeResolveCompatibilitySymbol(char*)+0x160>
c00105b5:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c00105ba:	eb 2c                	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105bc:	83 ec 08             	sub    esp,0x8
c00105bf:	68 74 fe 01 c0       	push   0xc001fe74
c00105c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c8:	e8 13 01 ff ff       	call   c00006e0 <strcmp>
c00105cd:	83 c4 10             	add    esp,0x10
c00105d0:	85 c0                	test   eax,eax
c00105d2:	0f 94 c0             	sete   al
c00105d5:	84 c0                	test   al,al
c00105d7:	74 07                	je     c00105e0 <KeResolveCompatibilitySymbol(char*)+0x184>
c00105d9:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c00105de:	eb 08                	jmp    c00105e8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105e0:	b8 00 00 00 00       	mov    eax,0x0
c00105e5:	8d 76 00             	lea    esi,[esi+0x0]
c00105e8:	83 c4 0c             	add    esp,0xc
c00105eb:	c3                   	ret    

c00105ec <KiSigKill(int)>:
c00105ec:	57                   	push   edi
c00105ed:	b9 0a 00 00 00       	mov    ecx,0xa
c00105f2:	56                   	push   esi
c00105f3:	be bd fe 01 c0       	mov    esi,0xc001febd
c00105f8:	83 ec 14             	sub    esp,0x14
c00105fb:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00105ff:	fc                   	cld    
c0010600:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010602:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010606:	50                   	push   eax
c0010607:	6a 00                	push   0x0
c0010609:	6a 00                	push   0x0
c001060b:	6a 27                	push   0x27
c001060d:	e8 40 1a 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010612:	83 c4 24             	add    esp,0x24
c0010615:	5e                   	pop    esi
c0010616:	5f                   	pop    edi
c0010617:	c3                   	ret    

c0010618 <KiDefaultSignalHandlerIgnore(int)>:
c0010618:	c3                   	ret    

c0010619 <KiDefaultSignalHandlerPause(int)>:
c0010619:	57                   	push   edi
c001061a:	b9 07 00 00 00       	mov    ecx,0x7
c001061f:	56                   	push   esi
c0010620:	be c7 fe 01 c0       	mov    esi,0xc001fec7
c0010625:	83 ec 24             	sub    esp,0x24
c0010628:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001062c:	fc                   	cld    
c001062d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001062f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010633:	50                   	push   eax
c0010634:	6a 00                	push   0x0
c0010636:	6a 00                	push   0x0
c0010638:	6a 27                	push   0x27
c001063a:	e8 13 1a 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001063f:	83 c4 34             	add    esp,0x34
c0010642:	5e                   	pop    esi
c0010643:	5f                   	pop    edi
c0010644:	c3                   	ret    

c0010645 <KiDefaultSignalHandlerResume(int)>:
c0010645:	57                   	push   edi
c0010646:	b9 1d 00 00 00       	mov    ecx,0x1d
c001064b:	56                   	push   esi
c001064c:	be e3 fe 01 c0       	mov    esi,0xc001fee3
c0010651:	83 ec 24             	sub    esp,0x24
c0010654:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010658:	fc                   	cld    
c0010659:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001065b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001065f:	50                   	push   eax
c0010660:	6a 00                	push   0x0
c0010662:	6a 00                	push   0x0
c0010664:	6a 27                	push   0x27
c0010666:	e8 e7 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001066b:	83 c4 34             	add    esp,0x34
c001066e:	5e                   	pop    esi
c001066f:	5f                   	pop    edi
c0010670:	c3                   	ret    

c0010671 <KeDeinitSignals(SigHandlerBlock*)>:
c0010671:	e9 0f 72 ff ff       	jmp    c0007885 <free>

c0010676 <KeInitSignals()>:
c0010676:	53                   	push   ebx
c0010677:	83 ec 14             	sub    esp,0x14
c001067a:	68 c8 00 00 00       	push   0xc8
c001067f:	e8 f1 71 ff ff       	call   c0007875 <malloc>
c0010684:	83 c4 0c             	add    esp,0xc
c0010687:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010691:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001069b:	89 c3                	mov    ebx,eax
c001069d:	6a 20                	push   0x20
c001069f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00106a5:	6a 00                	push   0x0
c00106a7:	50                   	push   eax
c00106a8:	e8 23 fe fe ff       	call   c00004d0 <memset>
c00106ad:	83 c4 0c             	add    esp,0xc
c00106b0:	6a 44                	push   0x44
c00106b2:	6a 00                	push   0x0
c00106b4:	53                   	push   ebx
c00106b5:	e8 16 fe fe ff       	call   c00004d0 <memset>
c00106ba:	89 d8                	mov    eax,ebx
c00106bc:	83 c4 18             	add    esp,0x18
c00106bf:	5b                   	pop    ebx
c00106c0:	c3                   	ret    

c00106c1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00106c1:	53                   	push   ebx
c00106c2:	b8 01 00 00 00       	mov    eax,0x1
c00106c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00106cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106cf:	83 f9 10             	cmp    ecx,0x10
c00106d2:	7f 21                	jg     c00106f5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00106d4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00106d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106db:	89 03                	mov    DWORD PTR [ebx],eax
c00106dd:	b8 01 00 00 00       	mov    eax,0x1
c00106e2:	d3 e0                	shl    eax,cl
c00106e4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00106e8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00106eb:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00106f3:	31 c0                	xor    eax,eax
c00106f5:	5b                   	pop    ebx
c00106f6:	c3                   	ret    

c00106f7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00106f7:	55                   	push   ebp
c00106f8:	57                   	push   edi
c00106f9:	bf 08 00 00 00       	mov    edi,0x8
c00106fe:	56                   	push   esi
c00106ff:	53                   	push   ebx
c0010700:	83 ec 18             	sub    esp,0x18
c0010703:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010707:	68 00 ff 01 c0       	push   0xc001ff00
c001070c:	e8 f9 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0010711:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010718:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001071e:	83 c4 10             	add    esp,0x10
c0010721:	31 c9                	xor    ecx,ecx
c0010723:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010727:	99                   	cdq    
c0010728:	f7 ff                	idiv   edi
c001072a:	8d 42 24             	lea    eax,[edx+0x24]
c001072d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010731:	85 f6                	test   esi,esi
c0010733:	75 1a                	jne    c001074f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010735:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010739:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c001073d:	50                   	push   eax
c001073e:	50                   	push   eax
c001073f:	52                   	push   edx
c0010740:	68 11 ff 01 c0       	push   0xc001ff11
c0010745:	e8 c0 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001074a:	83 c4 10             	add    esp,0x10
c001074d:	eb 1b                	jmp    c001076a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001074f:	41                   	inc    ecx
c0010750:	83 f9 08             	cmp    ecx,0x8
c0010753:	75 ce                	jne    c0010723 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010755:	83 ec 0c             	sub    esp,0xc
c0010758:	be 01 00 00 00       	mov    esi,0x1
c001075d:	68 32 ff 01 c0       	push   0xc001ff32
c0010762:	e8 a3 9e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	83 c4 0c             	add    esp,0xc
c001076d:	89 f0                	mov    eax,esi
c001076f:	5b                   	pop    ebx
c0010770:	5e                   	pop    esi
c0010771:	5f                   	pop    edi
c0010772:	5d                   	pop    ebp
c0010773:	c3                   	ret    

c0010774 <KeCheckSignal(SigHandlerBlock*)>:
c0010774:	55                   	push   ebp
c0010775:	57                   	push   edi
c0010776:	56                   	push   esi
c0010777:	53                   	push   ebx
c0010778:	51                   	push   ecx
c0010779:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001077d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010784:	75 07                	jne    c001078d <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010786:	31 c0                	xor    eax,eax
c0010788:	e9 cc 00 00 00       	jmp    c0010859 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001078d:	31 c9                	xor    ecx,ecx
c001078f:	bf 08 00 00 00       	mov    edi,0x8
c0010794:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001079a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001079d:	99                   	cdq    
c001079e:	f7 ff                	idiv   edi
c00107a0:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c00107a7:	85 d2                	test   edx,edx
c00107a9:	0f 84 94 00 00 00    	je     c0010843 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c00107af:	88 d1                	mov    cl,dl
c00107b1:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00107b7:	bf 01 00 00 00       	mov    edi,0x1
c00107bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00107bf:	d3 e7                	shl    edi,cl
c00107c1:	bd 01 00 00 00       	mov    ebp,0x1
c00107c6:	31 c9                	xor    ecx,ecx
c00107c8:	89 e8                	mov    eax,ebp
c00107ca:	d3 e0                	shl    eax,cl
c00107cc:	85 04 24             	test   DWORD PTR [esp],eax
c00107cf:	74 06                	je     c00107d7 <KeCheckSignal(SigHandlerBlock*)+0x63>
c00107d1:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00107d5:	75 af                	jne    c0010786 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107d7:	41                   	inc    ecx
c00107d8:	83 f9 11             	cmp    ecx,0x11
c00107db:	75 eb                	jne    c00107c8 <KeCheckSignal(SigHandlerBlock*)+0x54>
c00107dd:	8d 4e 01             	lea    ecx,[esi+0x1]
c00107e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107e3:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00107e9:	09 f8                	or     eax,edi
c00107eb:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00107f6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00107fc:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010803:	31 c0                	xor    eax,eax
c0010805:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001080d:	74 09                	je     c0010818 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001080f:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010816:	eb 06                	jmp    c001081e <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010818:	40                   	inc    eax
c0010819:	83 f8 08             	cmp    eax,0x8
c001081c:	75 e7                	jne    c0010805 <KeCheckSignal(SigHandlerBlock*)+0x91>
c001081e:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010821:	83 fa 09             	cmp    edx,0x9
c0010824:	75 07                	jne    c001082d <KeCheckSignal(SigHandlerBlock*)+0xb9>
c0010826:	b8 ec 05 01 c0       	mov    eax,0xc00105ec
c001082b:	eb 2c                	jmp    c0010859 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001082d:	83 f8 01             	cmp    eax,0x1
c0010830:	0f 84 50 ff ff ff    	je     c0010786 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010836:	85 c0                	test   eax,eax
c0010838:	75 1f                	jne    c0010859 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001083a:	8b 04 95 a0 12 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffded60]
c0010841:	eb 16                	jmp    c0010859 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010843:	46                   	inc    esi
c0010844:	41                   	inc    ecx
c0010845:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001084b:	83 f9 08             	cmp    ecx,0x8
c001084e:	0f 85 40 ff ff ff    	jne    c0010794 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010854:	e9 2d ff ff ff       	jmp    c0010786 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010859:	5a                   	pop    edx
c001085a:	5b                   	pop    ebx
c001085b:	5e                   	pop    esi
c001085c:	5f                   	pop    edi
c001085d:	5d                   	pop    ebp
c001085e:	c3                   	ret    

c001085f <KiCheckSignalZ>:
c001085f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010867:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001086d:	e8 02 ff ff ff       	call   c0010774 <KeCheckSignal(SigHandlerBlock*)>
c0010872:	5a                   	pop    edx
c0010873:	c3                   	ret    

c0010874 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010874:	56                   	push   esi
c0010875:	53                   	push   ebx
c0010876:	bb 01 00 00 00       	mov    ebx,0x1
c001087b:	52                   	push   edx
c001087c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010880:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010884:	d3 e3                	shl    ebx,cl
c0010886:	83 f9 10             	cmp    ecx,0x10
c0010889:	7f 08                	jg     c0010893 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001088b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010891:	75 10                	jne    c00108a3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010893:	83 ec 0c             	sub    esp,0xc
c0010896:	68 43 ff 01 c0       	push   0xc001ff43
c001089b:	e8 6b fa ff ff       	call   c001030b <KePanic(char const*)>
c00108a0:	83 c4 10             	add    esp,0x10
c00108a3:	f7 d3                	not    ebx
c00108a5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00108ab:	58                   	pop    eax
c00108ac:	5b                   	pop    ebx
c00108ad:	5e                   	pop    esi
c00108ae:	c3                   	ret    

c00108af <SysSeekDir(regs*)>:
c00108af:	31 c0                	xor    eax,eax
c00108b1:	31 d2                	xor    edx,edx
c00108b3:	c3                   	ret    

c00108b4 <SysTellDir(regs*)>:
c00108b4:	31 c0                	xor    eax,eax
c00108b6:	31 d2                	xor    edx,edx
c00108b8:	c3                   	ret    

c00108b9 <SysVerify(regs*)>:
c00108b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108bd:	31 d2                	xor    edx,edx
c00108bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108c2:	c3                   	ret    

c00108c3 <SysGetArgc(regs*)>:
c00108c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108cb:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00108d1:	99                   	cdq    
c00108d2:	c3                   	ret    

c00108d3 <SysTTYName(regs*)>:
c00108d3:	b8 01 00 00 00       	mov    eax,0x1
c00108d8:	31 d2                	xor    edx,edx
c00108da:	c3                   	ret    

c00108db <SysFormatDisk(regs*)>:
c00108db:	56                   	push   esi
c00108dc:	53                   	push   ebx
c00108dd:	50                   	push   eax
c00108de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00108e2:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c00108e8:	eb 28                	jmp    c0010912 <SysFormatDisk(regs*)+0x37>
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00108f0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00108f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108f5:	51                   	push   ecx
c00108f6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00108f9:	51                   	push   ecx
c00108fa:	50                   	push   eax
c00108fb:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010902:	50                   	push   eax
c0010903:	53                   	push   ebx
c0010904:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010907:	83 c4 20             	add    esp,0x20
c001090a:	83 f8 08             	cmp    eax,0x8
c001090d:	75 12                	jne    c0010921 <SysFormatDisk(regs*)+0x46>
c001090f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010912:	85 db                	test   ebx,ebx
c0010914:	75 d4                	jne    c00108ea <SysFormatDisk(regs*)+0xf>
c0010916:	59                   	pop    ecx
c0010917:	b8 03 00 00 00       	mov    eax,0x3
c001091c:	31 d2                	xor    edx,edx
c001091e:	5b                   	pop    ebx
c001091f:	5e                   	pop    esi
c0010920:	c3                   	ret    
c0010921:	85 c0                	test   eax,eax
c0010923:	74 1b                	je     c0010940 <SysFormatDisk(regs*)+0x65>
c0010925:	83 f8 09             	cmp    eax,0x9
c0010928:	74 0b                	je     c0010935 <SysFormatDisk(regs*)+0x5a>
c001092a:	59                   	pop    ecx
c001092b:	b8 02 00 00 00       	mov    eax,0x2
c0010930:	31 d2                	xor    edx,edx
c0010932:	5b                   	pop    ebx
c0010933:	5e                   	pop    esi
c0010934:	c3                   	ret    
c0010935:	59                   	pop    ecx
c0010936:	b8 01 00 00 00       	mov    eax,0x1
c001093b:	31 d2                	xor    edx,edx
c001093d:	5b                   	pop    ebx
c001093e:	5e                   	pop    esi
c001093f:	c3                   	ret    
c0010940:	59                   	pop    ecx
c0010941:	31 c0                	xor    eax,eax
c0010943:	31 d2                	xor    edx,edx
c0010945:	5b                   	pop    ebx
c0010946:	5e                   	pop    esi
c0010947:	c3                   	ret    

c0010948 <SysSetDiskVolumeLabel(regs*)>:
c0010948:	56                   	push   esi
c0010949:	53                   	push   ebx
c001094a:	53                   	push   ebx
c001094b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001094f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010952:	83 f8 19             	cmp    eax,0x19
c0010955:	77 2d                	ja     c0010984 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010957:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c001095e:	85 c9                	test   ecx,ecx
c0010960:	74 22                	je     c0010984 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010962:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010965:	85 db                	test   ebx,ebx
c0010967:	74 1b                	je     c0010984 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010969:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001096f:	85 d2                	test   edx,edx
c0010971:	74 11                	je     c0010984 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010973:	8b 32                	mov    esi,DWORD PTR [edx]
c0010975:	53                   	push   ebx
c0010976:	50                   	push   eax
c0010977:	51                   	push   ecx
c0010978:	52                   	push   edx
c0010979:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001097c:	83 c4 10             	add    esp,0x10
c001097f:	99                   	cdq    
c0010980:	59                   	pop    ecx
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	c3                   	ret    
c0010984:	59                   	pop    ecx
c0010985:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001098a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001098f:	5b                   	pop    ebx
c0010990:	5e                   	pop    esi
c0010991:	c3                   	ret    

c0010992 <SysGetDiskVolumeLabel(regs*)>:
c0010992:	57                   	push   edi
c0010993:	56                   	push   esi
c0010994:	53                   	push   ebx
c0010995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010999:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001099c:	83 fa 19             	cmp    edx,0x19
c001099f:	77 38                	ja     c00109d9 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109a1:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c00109a8:	85 c9                	test   ecx,ecx
c00109aa:	74 2d                	je     c00109d9 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109ac:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00109af:	85 db                	test   ebx,ebx
c00109b1:	74 26                	je     c00109d9 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109b3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00109b6:	85 f6                	test   esi,esi
c00109b8:	74 1f                	je     c00109d9 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109ba:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00109c0:	85 c0                	test   eax,eax
c00109c2:	74 15                	je     c00109d9 <SysGetDiskVolumeLabel(regs*)+0x47>
c00109c4:	83 ec 0c             	sub    esp,0xc
c00109c7:	8b 38                	mov    edi,DWORD PTR [eax]
c00109c9:	56                   	push   esi
c00109ca:	53                   	push   ebx
c00109cb:	52                   	push   edx
c00109cc:	51                   	push   ecx
c00109cd:	50                   	push   eax
c00109ce:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00109d1:	83 c4 20             	add    esp,0x20
c00109d4:	99                   	cdq    
c00109d5:	5b                   	pop    ebx
c00109d6:	5e                   	pop    esi
c00109d7:	5f                   	pop    edi
c00109d8:	c3                   	ret    
c00109d9:	5b                   	pop    ebx
c00109da:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109e4:	5e                   	pop    esi
c00109e5:	5f                   	pop    edi
c00109e6:	c3                   	ret    

c00109e7 <SysShutdown(regs*)>:
c00109e7:	83 ec 0c             	sub    esp,0xc
c00109ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ee:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109f1:	85 c0                	test   eax,eax
c00109f3:	74 18                	je     c0010a0d <SysShutdown(regs*)+0x26>
c00109f5:	83 f8 01             	cmp    eax,0x1
c00109f8:	74 38                	je     c0010a32 <SysShutdown(regs*)+0x4b>
c00109fa:	83 f8 02             	cmp    eax,0x2
c00109fd:	74 24                	je     c0010a23 <SysShutdown(regs*)+0x3c>
c00109ff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a09:	83 c4 0c             	add    esp,0xc
c0010a0c:	c3                   	ret    
c0010a0d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010a12:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a14:	6a 00                	push   0x0
c0010a16:	6a 00                	push   0x0
c0010a18:	6a 00                	push   0x0
c0010a1a:	50                   	push   eax
c0010a1b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a1e:	83 c4 10             	add    esp,0x10
c0010a21:	eb dc                	jmp    c00109ff <SysShutdown(regs*)+0x18>
c0010a23:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010a28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a2a:	6a 00                	push   0x0
c0010a2c:	6a 00                	push   0x0
c0010a2e:	6a 01                	push   0x1
c0010a30:	eb e8                	jmp    c0010a1a <SysShutdown(regs*)+0x33>
c0010a32:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010a37:	85 c0                	test   eax,eax
c0010a39:	74 02                	je     c0010a3d <SysShutdown(regs*)+0x56>
c0010a3b:	ff d0                	call   eax
c0010a3d:	31 c0                	xor    eax,eax
c0010a3f:	31 d2                	xor    edx,edx
c0010a41:	83 c4 0c             	add    esp,0xc
c0010a44:	c3                   	ret    

c0010a45 <SysRealpath(regs*)>:
c0010a45:	83 ec 0c             	sub    esp,0xc
c0010a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a4f:	85 d2                	test   edx,edx
c0010a51:	74 07                	je     c0010a5a <SysRealpath(regs*)+0x15>
c0010a53:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a56:	85 c0                	test   eax,eax
c0010a58:	75 0b                	jne    c0010a65 <SysRealpath(regs*)+0x20>
c0010a5a:	b8 01 00 00 00       	mov    eax,0x1
c0010a5f:	31 d2                	xor    edx,edx
c0010a61:	83 c4 0c             	add    esp,0xc
c0010a64:	c3                   	ret    
c0010a65:	51                   	push   ecx
c0010a66:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010a6c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010a6f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010a75:	51                   	push   ecx
c0010a76:	52                   	push   edx
c0010a77:	50                   	push   eax
c0010a78:	e8 59 9f ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010a7d:	83 c4 10             	add    esp,0x10
c0010a80:	31 c0                	xor    eax,eax
c0010a82:	31 d2                	xor    edx,edx
c0010a84:	83 c4 0c             	add    esp,0xc
c0010a87:	c3                   	ret    

c0010a88 <SysReadDir(regs*)>:
c0010a88:	53                   	push   ebx
c0010a89:	83 ec 18             	sub    esp,0x18
c0010a8c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010a90:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a93:	83 f8 02             	cmp    eax,0x2
c0010a96:	76 61                	jbe    c0010af9 <SysReadDir(regs*)+0x71>
c0010a98:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a9f:	77 49                	ja     c0010aea <SysReadDir(regs*)+0x62>
c0010aa1:	83 ec 0c             	sub    esp,0xc
c0010aa4:	50                   	push   eax
c0010aa5:	e8 4d 87 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010aaa:	83 c4 10             	add    esp,0x10
c0010aad:	85 c0                	test   eax,eax
c0010aaf:	74 39                	je     c0010aea <SysReadDir(regs*)+0x62>
c0010ab1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ab9:	83 ec 0c             	sub    esp,0xc
c0010abc:	8b 10                	mov    edx,DWORD PTR [eax]
c0010abe:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010ac2:	51                   	push   ecx
c0010ac3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ac6:	51                   	push   ecx
c0010ac7:	6a 00                	push   0x0
c0010ac9:	68 10 01 00 00       	push   0x110
c0010ace:	50                   	push   eax
c0010acf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010ad2:	83 c4 20             	add    esp,0x20
c0010ad5:	85 c0                	test   eax,eax
c0010ad7:	74 29                	je     c0010b02 <SysReadDir(regs*)+0x7a>
c0010ad9:	83 f8 07             	cmp    eax,0x7
c0010adc:	74 1b                	je     c0010af9 <SysReadDir(regs*)+0x71>
c0010ade:	b8 02 00 00 00       	mov    eax,0x2
c0010ae3:	31 d2                	xor    edx,edx
c0010ae5:	83 c4 18             	add    esp,0x18
c0010ae8:	5b                   	pop    ebx
c0010ae9:	c3                   	ret    
c0010aea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af4:	83 c4 18             	add    esp,0x18
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	b8 01 00 00 00       	mov    eax,0x1
c0010afe:	31 d2                	xor    edx,edx
c0010b00:	eb e3                	jmp    c0010ae5 <SysReadDir(regs*)+0x5d>
c0010b02:	31 c0                	xor    eax,eax
c0010b04:	31 d2                	xor    edx,edx
c0010b06:	eb dd                	jmp    c0010ae5 <SysReadDir(regs*)+0x5d>

c0010b08 <SysIsATTY(regs*)>:
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010b12:	83 f8 02             	cmp    eax,0x2
c0010b15:	76 07                	jbe    c0010b1e <SysIsATTY(regs*)+0x16>
c0010b17:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010b1c:	75 28                	jne    c0010b46 <SysIsATTY(regs*)+0x3e>
c0010b1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b23:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b26:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010b2c:	85 c0                	test   eax,eax
c0010b2e:	74 26                	je     c0010b56 <SysIsATTY(regs*)+0x4e>
c0010b30:	83 ec 0c             	sub    esp,0xc
c0010b33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b35:	50                   	push   eax
c0010b36:	ff 12                	call   DWORD PTR [edx]
c0010b38:	31 d2                	xor    edx,edx
c0010b3a:	25 ff 00 00 00       	and    eax,0xff
c0010b3f:	83 c4 10             	add    esp,0x10
c0010b42:	83 c4 0c             	add    esp,0xc
c0010b45:	c3                   	ret    
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	50                   	push   eax
c0010b4a:	e8 a8 86 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010b4f:	83 c4 10             	add    esp,0x10
c0010b52:	85 c0                	test   eax,eax
c0010b54:	75 da                	jne    c0010b30 <SysIsATTY(regs*)+0x28>
c0010b56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b60:	83 c4 0c             	add    esp,0xc
c0010b63:	c3                   	ret    

c0010b64 <SysSeek(regs*)>:
c0010b64:	53                   	push   ebx
c0010b65:	83 ec 08             	sub    esp,0x8
c0010b68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b6c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b6f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010b72:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010b78:	77 34                	ja     c0010bae <SysSeek(regs*)+0x4a>
c0010b7a:	83 ec 0c             	sub    esp,0xc
c0010b7d:	50                   	push   eax
c0010b7e:	e8 74 86 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010b83:	83 c4 0c             	add    esp,0xc
c0010b86:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010b89:	31 db                	xor    ebx,ebx
c0010b8b:	53                   	push   ebx
c0010b8c:	51                   	push   ecx
c0010b8d:	50                   	push   eax
c0010b8e:	e8 6b a1 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0010b93:	83 c4 10             	add    esp,0x10
c0010b96:	85 c0                	test   eax,eax
c0010b98:	0f 95 c0             	setne  al
c0010b9b:	31 d2                	xor    edx,edx
c0010b9d:	25 ff 00 00 00       	and    eax,0xff
c0010ba2:	f7 d8                	neg    eax
c0010ba4:	83 d2 00             	adc    edx,0x0
c0010ba7:	83 c4 08             	add    esp,0x8
c0010baa:	f7 da                	neg    edx
c0010bac:	5b                   	pop    ebx
c0010bad:	c3                   	ret    
c0010bae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bb8:	83 c4 08             	add    esp,0x8
c0010bbb:	5b                   	pop    ebx
c0010bbc:	c3                   	ret    

c0010bbd <SysTell(regs*)>:
c0010bbd:	53                   	push   ebx
c0010bbe:	83 ec 08             	sub    esp,0x8
c0010bc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bc8:	83 f8 02             	cmp    eax,0x2
c0010bcb:	76 50                	jbe    c0010c1d <SysTell(regs*)+0x60>
c0010bcd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bd2:	76 19                	jbe    c0010bed <SysTell(regs*)+0x30>
c0010bd4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bd7:	31 d2                	xor    edx,edx
c0010bd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010be6:	31 c0                	xor    eax,eax
c0010be8:	83 c4 08             	add    esp,0x8
c0010beb:	5b                   	pop    ebx
c0010bec:	c3                   	ret    
c0010bed:	83 ec 0c             	sub    esp,0xc
c0010bf0:	50                   	push   eax
c0010bf1:	e8 01 86 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010bf6:	5a                   	pop    edx
c0010bf7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010bfa:	59                   	pop    ecx
c0010bfb:	53                   	push   ebx
c0010bfc:	50                   	push   eax
c0010bfd:	e8 52 a1 ff ff       	call   c000ad54 <File::tell(unsigned long long*)>
c0010c02:	83 c4 10             	add    esp,0x10
c0010c05:	85 c0                	test   eax,eax
c0010c07:	0f 95 c0             	setne  al
c0010c0a:	31 d2                	xor    edx,edx
c0010c0c:	25 ff 00 00 00       	and    eax,0xff
c0010c11:	f7 d8                	neg    eax
c0010c13:	83 d2 00             	adc    edx,0x0
c0010c16:	83 c4 08             	add    esp,0x8
c0010c19:	f7 da                	neg    edx
c0010c1b:	5b                   	pop    ebx
c0010c1c:	c3                   	ret    
c0010c1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c22:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c27:	83 c4 08             	add    esp,0x8
c0010c2a:	5b                   	pop    ebx
c0010c2b:	c3                   	ret    

c0010c2c <SysSize(regs*)>:
c0010c2c:	53                   	push   ebx
c0010c2d:	83 ec 18             	sub    esp,0x18
c0010c30:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c37:	83 f8 02             	cmp    eax,0x2
c0010c3a:	76 56                	jbe    c0010c92 <SysSize(regs*)+0x66>
c0010c3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c41:	76 19                	jbe    c0010c5c <SysSize(regs*)+0x30>
c0010c43:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c46:	31 d2                	xor    edx,edx
c0010c48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c4e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c55:	31 c0                	xor    eax,eax
c0010c57:	83 c4 18             	add    esp,0x18
c0010c5a:	5b                   	pop    ebx
c0010c5b:	c3                   	ret    
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	50                   	push   eax
c0010c60:	e8 92 85 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010c65:	83 c4 0c             	add    esp,0xc
c0010c68:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010c6c:	52                   	push   edx
c0010c6d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c70:	52                   	push   edx
c0010c71:	50                   	push   eax
c0010c72:	e8 75 a2 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0010c77:	83 c4 10             	add    esp,0x10
c0010c7a:	85 c0                	test   eax,eax
c0010c7c:	0f 95 c0             	setne  al
c0010c7f:	31 d2                	xor    edx,edx
c0010c81:	25 ff 00 00 00       	and    eax,0xff
c0010c86:	f7 d8                	neg    eax
c0010c88:	83 d2 00             	adc    edx,0x0
c0010c8b:	83 c4 18             	add    esp,0x18
c0010c8e:	f7 da                	neg    edx
c0010c90:	5b                   	pop    ebx
c0010c91:	c3                   	ret    
c0010c92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c9c:	83 c4 18             	add    esp,0x18
c0010c9f:	5b                   	pop    ebx
c0010ca0:	c3                   	ret    

c0010ca1 <SysSizeFromFilename(regs*)>:
c0010ca1:	57                   	push   edi
c0010ca2:	56                   	push   esi
c0010ca3:	53                   	push   ebx
c0010ca4:	83 ec 20             	sub    esp,0x20
c0010ca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cab:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010cae:	83 fb 02             	cmp    ebx,0x2
c0010cb1:	0f 86 8c 00 00 00    	jbe    c0010d43 <SysSizeFromFilename(regs*)+0xa2>
c0010cb7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010cbd:	76 1b                	jbe    c0010cda <SysSizeFromFilename(regs*)+0x39>
c0010cbf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010cc2:	31 d2                	xor    edx,edx
c0010cc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cd1:	83 c4 20             	add    esp,0x20
c0010cd4:	31 c0                	xor    eax,eax
c0010cd6:	5b                   	pop    ebx
c0010cd7:	5e                   	pop    esi
c0010cd8:	5f                   	pop    edi
c0010cd9:	c3                   	ret    
c0010cda:	83 ec 0c             	sub    esp,0xc
c0010cdd:	68 14 01 00 00       	push   0x114
c0010ce2:	e8 8e 6b ff ff       	call   c0007875 <malloc>
c0010ce7:	83 c4 0c             	add    esp,0xc
c0010cea:	89 c7                	mov    edi,eax
c0010cec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cf1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cf4:	50                   	push   eax
c0010cf5:	53                   	push   ebx
c0010cf6:	57                   	push   edi
c0010cf7:	e8 84 9e ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0010cfc:	83 c4 0c             	add    esp,0xc
c0010cff:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010d03:	50                   	push   eax
c0010d04:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010d07:	52                   	push   edx
c0010d08:	57                   	push   edi
c0010d09:	e8 de a1 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	85 ff                	test   edi,edi
c0010d13:	74 14                	je     c0010d29 <SysSizeFromFilename(regs*)+0x88>
c0010d15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d19:	8b 17                	mov    edx,DWORD PTR [edi]
c0010d1b:	83 ec 0c             	sub    esp,0xc
c0010d1e:	57                   	push   edi
c0010d1f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d22:	83 c4 10             	add    esp,0x10
c0010d25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d29:	85 c0                	test   eax,eax
c0010d2b:	0f 95 c0             	setne  al
c0010d2e:	31 d2                	xor    edx,edx
c0010d30:	25 ff 00 00 00       	and    eax,0xff
c0010d35:	f7 d8                	neg    eax
c0010d37:	83 d2 00             	adc    edx,0x0
c0010d3a:	83 c4 20             	add    esp,0x20
c0010d3d:	f7 da                	neg    edx
c0010d3f:	5b                   	pop    ebx
c0010d40:	5e                   	pop    esi
c0010d41:	5f                   	pop    edi
c0010d42:	c3                   	ret    
c0010d43:	83 c4 20             	add    esp,0x20
c0010d46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d4b:	5b                   	pop    ebx
c0010d4c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d51:	5e                   	pop    esi
c0010d52:	5f                   	pop    edi
c0010d53:	c3                   	ret    

c0010d54 <SysClose(regs*)>:
c0010d54:	53                   	push   ebx
c0010d55:	83 ec 08             	sub    esp,0x8
c0010d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d5f:	83 f8 02             	cmp    eax,0x2
c0010d62:	76 41                	jbe    c0010da5 <SysClose(regs*)+0x51>
c0010d64:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010d6a:	83 fa 01             	cmp    edx,0x1
c0010d6d:	76 2d                	jbe    c0010d9c <SysClose(regs*)+0x48>
c0010d6f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d74:	77 2f                	ja     c0010da5 <SysClose(regs*)+0x51>
c0010d76:	83 ec 0c             	sub    esp,0xc
c0010d79:	50                   	push   eax
c0010d7a:	e8 78 84 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010d7f:	89 c3                	mov    ebx,eax
c0010d81:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d84:	e8 15 9f ff ff       	call   c000ac9e <File::close()>
c0010d89:	83 c4 10             	add    esp,0x10
c0010d8c:	85 db                	test   ebx,ebx
c0010d8e:	74 0c                	je     c0010d9c <SysClose(regs*)+0x48>
c0010d90:	83 ec 0c             	sub    esp,0xc
c0010d93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d95:	53                   	push   ebx
c0010d96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d99:	83 c4 10             	add    esp,0x10
c0010d9c:	31 c0                	xor    eax,eax
c0010d9e:	31 d2                	xor    edx,edx
c0010da0:	83 c4 08             	add    esp,0x8
c0010da3:	5b                   	pop    ebx
c0010da4:	c3                   	ret    
c0010da5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010daa:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010daf:	83 c4 08             	add    esp,0x8
c0010db2:	5b                   	pop    ebx
c0010db3:	c3                   	ret    

c0010db4 <SysOpenDir(regs*)>:
c0010db4:	56                   	push   esi
c0010db5:	53                   	push   ebx
c0010db6:	50                   	push   eax
c0010db7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dbb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dbe:	85 c0                	test   eax,eax
c0010dc0:	74 5b                	je     c0010e1d <SysOpenDir(regs*)+0x69>
c0010dc2:	83 ec 0c             	sub    esp,0xc
c0010dc5:	68 14 01 00 00       	push   0x114
c0010dca:	e8 a6 6a ff ff       	call   c0007875 <malloc>
c0010dcf:	83 c4 0c             	add    esp,0xc
c0010dd2:	89 c6                	mov    esi,eax
c0010dd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ddc:	50                   	push   eax
c0010ddd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010de0:	50                   	push   eax
c0010de1:	56                   	push   esi
c0010de2:	e8 c3 a2 ff ff       	call   c000b0aa <Directory::Directory(char const*, Process*)>
c0010de7:	83 c4 10             	add    esp,0x10
c0010dea:	85 f6                	test   esi,esi
c0010dec:	74 2f                	je     c0010e1d <SysOpenDir(regs*)+0x69>
c0010dee:	83 ec 0c             	sub    esp,0xc
c0010df1:	56                   	push   esi
c0010df2:	e8 73 a3 ff ff       	call   c000b16a <Directory::open()>
c0010df7:	83 c4 10             	add    esp,0x10
c0010dfa:	85 c0                	test   eax,eax
c0010dfc:	75 1f                	jne    c0010e1d <SysOpenDir(regs*)+0x69>
c0010dfe:	83 ec 0c             	sub    esp,0xc
c0010e01:	56                   	push   esi
c0010e02:	e8 fb 80 ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c0010e07:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	89 02                	mov    DWORD PTR [edx],eax
c0010e0f:	c1 f8 1f             	sar    eax,0x1f
c0010e12:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e15:	31 c0                	xor    eax,eax
c0010e17:	59                   	pop    ecx
c0010e18:	31 d2                	xor    edx,edx
c0010e1a:	5b                   	pop    ebx
c0010e1b:	5e                   	pop    esi
c0010e1c:	c3                   	ret    
c0010e1d:	59                   	pop    ecx
c0010e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e28:	5b                   	pop    ebx
c0010e29:	5e                   	pop    esi
c0010e2a:	c3                   	ret    

c0010e2b <SysMakeDir(regs*)>:
c0010e2b:	56                   	push   esi
c0010e2c:	53                   	push   ebx
c0010e2d:	83 ec 10             	sub    esp,0x10
c0010e30:	68 14 01 00 00       	push   0x114
c0010e35:	e8 3b 6a ff ff       	call   c0007875 <malloc>
c0010e3a:	83 c4 0c             	add    esp,0xc
c0010e3d:	89 c3                	mov    ebx,eax
c0010e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e44:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010e47:	56                   	push   esi
c0010e48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010e4c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e4f:	50                   	push   eax
c0010e50:	53                   	push   ebx
c0010e51:	e8 54 a2 ff ff       	call   c000b0aa <Directory::Directory(char const*, Process*)>
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	85 db                	test   ebx,ebx
c0010e5b:	74 2a                	je     c0010e87 <SysMakeDir(regs*)+0x5c>
c0010e5d:	83 ec 0c             	sub    esp,0xc
c0010e60:	53                   	push   ebx
c0010e61:	e8 e4 a4 ff ff       	call   c000b34a <Directory::create()>
c0010e66:	89 c6                	mov    esi,eax
c0010e68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e70:	83 c4 10             	add    esp,0x10
c0010e73:	31 c0                	xor    eax,eax
c0010e75:	59                   	pop    ecx
c0010e76:	85 f6                	test   esi,esi
c0010e78:	5b                   	pop    ebx
c0010e79:	0f 95 c0             	setne  al
c0010e7c:	5e                   	pop    esi
c0010e7d:	31 d2                	xor    edx,edx
c0010e7f:	f7 d8                	neg    eax
c0010e81:	83 d2 00             	adc    edx,0x0
c0010e84:	f7 da                	neg    edx
c0010e86:	c3                   	ret    
c0010e87:	59                   	pop    ecx
c0010e88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e92:	5b                   	pop    ebx
c0010e93:	5e                   	pop    esi
c0010e94:	c3                   	ret    

c0010e95 <SysCloseDir(regs*)>:
c0010e95:	53                   	push   ebx
c0010e96:	83 ec 08             	sub    esp,0x8
c0010e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ea0:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ea3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ea9:	77 2f                	ja     c0010eda <SysCloseDir(regs*)+0x45>
c0010eab:	83 ec 0c             	sub    esp,0xc
c0010eae:	50                   	push   eax
c0010eaf:	e8 43 83 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0010eb4:	89 c3                	mov    ebx,eax
c0010eb6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010eb9:	e8 08 a3 ff ff       	call   c000b1c6 <Directory::close()>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	85 db                	test   ebx,ebx
c0010ec3:	74 0c                	je     c0010ed1 <SysCloseDir(regs*)+0x3c>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010eca:	53                   	push   ebx
c0010ecb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	31 c0                	xor    eax,eax
c0010ed3:	31 d2                	xor    edx,edx
c0010ed5:	83 c4 08             	add    esp,0x8
c0010ed8:	5b                   	pop    ebx
c0010ed9:	c3                   	ret    
c0010eda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010edf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ee4:	83 c4 08             	add    esp,0x8
c0010ee7:	5b                   	pop    ebx
c0010ee8:	c3                   	ret    

c0010ee9 <SysWait(regs*)>:
c0010ee9:	83 ec 10             	sub    esp,0x10
c0010eec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ef0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ef3:	52                   	push   edx
c0010ef4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010ef7:	51                   	push   ecx
c0010ef8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010efb:	50                   	push   eax
c0010efc:	e8 3f 39 00 00       	call   c0014840 <waitTask(int, int*, int)>
c0010f01:	83 c4 1c             	add    esp,0x1c
c0010f04:	99                   	cdq    
c0010f05:	c3                   	ret    

c0010f06 <SysNotImpl(regs*)>:
c0010f06:	83 ec 18             	sub    esp,0x18
c0010f09:	68 54 ff 01 c0       	push   0xc001ff54
c0010f0e:	e8 f8 f3 ff ff       	call   c001030b <KePanic(char const*)>
c0010f13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f18:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f1d:	83 c4 1c             	add    esp,0x1c
c0010f20:	c3                   	ret    

c0010f21 <SysPanic(regs*)>:
c0010f21:	83 ec 18             	sub    esp,0x18
c0010f24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f28:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f2b:	50                   	push   eax
c0010f2c:	e8 da f3 ff ff       	call   c001030b <KePanic(char const*)>
c0010f31:	b8 01 00 00 00       	mov    eax,0x1
c0010f36:	31 d2                	xor    edx,edx
c0010f38:	83 c4 1c             	add    esp,0x1c
c0010f3b:	c3                   	ret    

c0010f3c <SysRmdir(regs*)>:
c0010f3c:	56                   	push   esi
c0010f3d:	53                   	push   ebx
c0010f3e:	83 ec 20             	sub    esp,0x20
c0010f41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f45:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f48:	68 14 01 00 00       	push   0x114
c0010f4d:	e8 23 69 ff ff       	call   c0007875 <malloc>
c0010f52:	83 c4 0c             	add    esp,0xc
c0010f55:	89 c3                	mov    ebx,eax
c0010f57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f5f:	50                   	push   eax
c0010f60:	56                   	push   esi
c0010f61:	53                   	push   ebx
c0010f62:	e8 19 9c ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0010f67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f6a:	e8 49 9e ff ff       	call   c000adb8 <File::unlink()>
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	85 db                	test   ebx,ebx
c0010f74:	74 14                	je     c0010f8a <SysRmdir(regs*)+0x4e>
c0010f76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f7c:	83 ec 0c             	sub    esp,0xc
c0010f7f:	53                   	push   ebx
c0010f80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f8a:	85 c0                	test   eax,eax
c0010f8c:	0f 95 c0             	setne  al
c0010f8f:	31 d2                	xor    edx,edx
c0010f91:	25 ff 00 00 00       	and    eax,0xff
c0010f96:	f7 d8                	neg    eax
c0010f98:	83 d2 00             	adc    edx,0x0
c0010f9b:	83 c4 14             	add    esp,0x14
c0010f9e:	f7 da                	neg    edx
c0010fa0:	5b                   	pop    ebx
c0010fa1:	5e                   	pop    esi
c0010fa2:	c3                   	ret    

c0010fa3 <SysUnlink(regs*)>:
c0010fa3:	56                   	push   esi
c0010fa4:	53                   	push   ebx
c0010fa5:	83 ec 20             	sub    esp,0x20
c0010fa8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fac:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010faf:	68 14 01 00 00       	push   0x114
c0010fb4:	e8 bc 68 ff ff       	call   c0007875 <malloc>
c0010fb9:	83 c4 0c             	add    esp,0xc
c0010fbc:	89 c3                	mov    ebx,eax
c0010fbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fc3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fc6:	50                   	push   eax
c0010fc7:	56                   	push   esi
c0010fc8:	53                   	push   ebx
c0010fc9:	e8 b2 9b ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0010fce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fd1:	e8 e2 9d ff ff       	call   c000adb8 <File::unlink()>
c0010fd6:	83 c4 10             	add    esp,0x10
c0010fd9:	85 db                	test   ebx,ebx
c0010fdb:	74 14                	je     c0010ff1 <SysUnlink(regs*)+0x4e>
c0010fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fe1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010fe3:	83 ec 0c             	sub    esp,0xc
c0010fe6:	53                   	push   ebx
c0010fe7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010fea:	83 c4 10             	add    esp,0x10
c0010fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ff1:	85 c0                	test   eax,eax
c0010ff3:	0f 95 c0             	setne  al
c0010ff6:	31 d2                	xor    edx,edx
c0010ff8:	25 ff 00 00 00       	and    eax,0xff
c0010ffd:	f7 d8                	neg    eax
c0010fff:	83 d2 00             	adc    edx,0x0
c0011002:	83 c4 14             	add    esp,0x14
c0011005:	f7 da                	neg    edx
c0011007:	5b                   	pop    ebx
c0011008:	5e                   	pop    esi
c0011009:	c3                   	ret    

c001100a <SysGetArgv(regs*)>:
c001100a:	83 ec 0c             	sub    esp,0xc
c001100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011011:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011014:	85 c0                	test   eax,eax
c0011016:	78 2c                	js     c0011044 <SysGetArgv(regs*)+0x3a>
c0011018:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001101e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011021:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011027:	7d 1b                	jge    c0011044 <SysGetArgv(regs*)+0x3a>
c0011029:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011030:	85 c0                	test   eax,eax
c0011032:	74 18                	je     c001104c <SysGetArgv(regs*)+0x42>
c0011034:	83 ec 08             	sub    esp,0x8
c0011037:	50                   	push   eax
c0011038:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001103b:	50                   	push   eax
c001103c:	e8 bf f5 fe ff       	call   c0000600 <strcpy>
c0011041:	83 c4 10             	add    esp,0x10
c0011044:	31 c0                	xor    eax,eax
c0011046:	31 d2                	xor    edx,edx
c0011048:	83 c4 0c             	add    esp,0xc
c001104b:	c3                   	ret    
c001104c:	b8 01 00 00 00       	mov    eax,0x1
c0011051:	31 d2                	xor    edx,edx
c0011053:	83 c4 0c             	add    esp,0xc
c0011056:	c3                   	ret    

c0011057 <SysUSleep(regs*)>:
c0011057:	83 ec 1c             	sub    esp,0x1c
c001105a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001105e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011061:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011064:	6a 00                	push   0x0
c0011066:	6a 64                	push   0x64
c0011068:	52                   	push   edx
c0011069:	50                   	push   eax
c001106a:	e8 c1 c7 00 00       	call   c001d830 <__udivdi3>
c001106f:	83 c4 14             	add    esp,0x14
c0011072:	50                   	push   eax
c0011073:	e8 9c 38 00 00       	call   c0014914 <milliTenthSleep(unsigned int)>
c0011078:	31 c0                	xor    eax,eax
c001107a:	31 d2                	xor    edx,edx
c001107c:	83 c4 1c             	add    esp,0x1c
c001107f:	c3                   	ret    

c0011080 <SysSpawn(regs*)>:
c0011080:	56                   	push   esi
c0011081:	53                   	push   ebx
c0011082:	50                   	push   eax
c0011083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011087:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001108a:	85 c0                	test   eax,eax
c001108c:	75 08                	jne    c0011096 <SysSpawn(regs*)+0x16>
c001108e:	59                   	pop    ecx
c001108f:	31 c0                	xor    eax,eax
c0011091:	31 d2                	xor    edx,edx
c0011093:	5b                   	pop    ebx
c0011094:	5e                   	pop    esi
c0011095:	c3                   	ret    
c0011096:	83 ec 0c             	sub    esp,0xc
c0011099:	68 24 07 00 00       	push   0x724
c001109e:	e8 d2 67 ff ff       	call   c0007875 <malloc>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	89 c6                	mov    esi,eax
c00110a8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110ae:	85 c0                	test   eax,eax
c00110b0:	75 33                	jne    c00110e5 <SysSpawn(regs*)+0x65>
c00110b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110b7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110ba:	52                   	push   edx
c00110bb:	50                   	push   eax
c00110bc:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110bf:	53                   	push   ebx
c00110c0:	56                   	push   esi
c00110c1:	e8 fa 2e 00 00       	call   c0013fc0 <Process::Process(char const*, Process*, char**)>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00110d0:	75 bc                	jne    c001108e <SysSpawn(regs*)+0xe>
c00110d2:	83 ec 0c             	sub    esp,0xc
c00110d5:	56                   	push   esi
c00110d6:	e8 11 34 00 00       	call   c00144ec <Process::createUserThread()>
c00110db:	8b 06                	mov    eax,DWORD PTR [esi]
c00110dd:	83 c4 10             	add    esp,0x10
c00110e0:	99                   	cdq    
c00110e1:	59                   	pop    ecx
c00110e2:	5b                   	pop    ebx
c00110e3:	5e                   	pop    esi
c00110e4:	c3                   	ret    
c00110e5:	31 c0                	xor    eax,eax
c00110e7:	eb d1                	jmp    c00110ba <SysSpawn(regs*)+0x3a>

c00110e9 <SysGetEnv(regs*)>:
c00110e9:	57                   	push   edi
c00110ea:	56                   	push   esi
c00110eb:	53                   	push   ebx
c00110ec:	83 ec 1c             	sub    esp,0x1c
c00110ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00110f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110f8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00110fb:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00110fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011101:	50                   	push   eax
c0011102:	e8 bc f0 ff ff       	call   c00101c3 <Krnl::getProcessTotalEnvCount(Process*)>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	39 c7                	cmp    edi,eax
c001110c:	7c 14                	jl     c0011122 <SysGetEnv(regs*)+0x39>
c001110e:	85 f6                	test   esi,esi
c0011110:	75 0b                	jne    c001111d <SysGetEnv(regs*)+0x34>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	31 c0                	xor    eax,eax
c0011117:	5b                   	pop    ebx
c0011118:	31 d2                	xor    edx,edx
c001111a:	5e                   	pop    esi
c001111b:	5f                   	pop    edi
c001111c:	c3                   	ret    
c001111d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011120:	eb f0                	jmp    c0011112 <SysGetEnv(regs*)+0x29>
c0011122:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011126:	52                   	push   edx
c0011127:	57                   	push   edi
c0011128:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001112e:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011131:	51                   	push   ecx
c0011132:	50                   	push   eax
c0011133:	e8 ab f0 ff ff       	call   c00101e3 <Krnl::getProcessEnvPair(Process*, int)>
c0011138:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001113b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001113f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011143:	83 c4 0c             	add    esp,0xc
c0011146:	85 db                	test   ebx,ebx
c0011148:	75 23                	jne    c001116d <SysGetEnv(regs*)+0x84>
c001114a:	83 ec 0c             	sub    esp,0xc
c001114d:	50                   	push   eax
c001114e:	e8 ed f3 fe ff       	call   c0000540 <strlen>
c0011153:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011156:	89 c3                	mov    ebx,eax
c0011158:	e8 e3 f3 fe ff       	call   c0000540 <strlen>
c001115d:	31 d2                	xor    edx,edx
c001115f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011163:	83 c4 10             	add    esp,0x10
c0011166:	83 c4 10             	add    esp,0x10
c0011169:	5b                   	pop    ebx
c001116a:	5e                   	pop    esi
c001116b:	5f                   	pop    edi
c001116c:	c3                   	ret    
c001116d:	83 ec 08             	sub    esp,0x8
c0011170:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011173:	50                   	push   eax
c0011174:	56                   	push   esi
c0011175:	e8 86 f4 fe ff       	call   c0000600 <strcpy>
c001117a:	58                   	pop    eax
c001117b:	5a                   	pop    edx
c001117c:	68 6e ff 01 c0       	push   0xc001ff6e
c0011181:	56                   	push   esi
c0011182:	e8 39 f6 fe ff       	call   c00007c0 <strcat>
c0011187:	59                   	pop    ecx
c0011188:	5b                   	pop    ebx
c0011189:	57                   	push   edi
c001118a:	56                   	push   esi
c001118b:	e8 30 f6 fe ff       	call   c00007c0 <strcat>
c0011190:	83 c4 10             	add    esp,0x10
c0011193:	e9 7a ff ff ff       	jmp    c0011112 <SysGetEnv(regs*)+0x29>

c0011198 <SysSetFatAttrib(regs*)>:
c0011198:	57                   	push   edi
c0011199:	56                   	push   esi
c001119a:	53                   	push   ebx
c001119b:	83 ec 1c             	sub    esp,0x1c
c001119e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111a2:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111a5:	68 14 01 00 00       	push   0x114
c00111aa:	e8 c6 66 ff ff       	call   c0007875 <malloc>
c00111af:	83 c4 0c             	add    esp,0xc
c00111b2:	89 c3                	mov    ebx,eax
c00111b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111bc:	50                   	push   eax
c00111bd:	57                   	push   edi
c00111be:	53                   	push   ebx
c00111bf:	e8 bc 99 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c00111c4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111c7:	83 c4 0c             	add    esp,0xc
c00111ca:	0f b6 d4             	movzx  edx,ah
c00111cd:	25 ff 00 00 00       	and    eax,0xff
c00111d2:	52                   	push   edx
c00111d3:	50                   	push   eax
c00111d4:	53                   	push   ebx
c00111d5:	e8 78 9c ff ff       	call   c000ae52 <File::chfatattr(unsigned char, unsigned char)>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	85 db                	test   ebx,ebx
c00111df:	74 14                	je     c00111f5 <SysSetFatAttrib(regs*)+0x5d>
c00111e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111e7:	83 ec 0c             	sub    esp,0xc
c00111ea:	53                   	push   ebx
c00111eb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111f5:	85 c0                	test   eax,eax
c00111f7:	0f 95 c0             	setne  al
c00111fa:	31 d2                	xor    edx,edx
c00111fc:	25 ff 00 00 00       	and    eax,0xff
c0011201:	f7 d8                	neg    eax
c0011203:	83 d2 00             	adc    edx,0x0
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	f7 da                	neg    edx
c001120b:	5b                   	pop    ebx
c001120c:	5e                   	pop    esi
c001120d:	5f                   	pop    edi
c001120e:	c3                   	ret    

c001120f <SysPipe(regs*)>:
c001120f:	57                   	push   edi
c0011210:	56                   	push   esi
c0011211:	53                   	push   ebx
c0011212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011216:	83 ec 0c             	sub    esp,0xc
c0011219:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001121c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001121f:	6a 20                	push   0x20
c0011221:	e8 4f 66 ff ff       	call   c0007875 <malloc>
c0011226:	89 c3                	mov    ebx,eax
c0011228:	58                   	pop    eax
c0011229:	5a                   	pop    edx
c001122a:	68 00 50 00 00       	push   0x5000
c001122f:	53                   	push   ebx
c0011230:	e8 45 6f ff ff       	call   c000817a <Pipe::Pipe(int)>
c0011235:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011238:	e8 c5 7c ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c001123d:	89 07                	mov    DWORD PTR [edi],eax
c001123f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011242:	e8 bb 7c ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c0011247:	83 c4 10             	add    esp,0x10
c001124a:	89 06                	mov    DWORD PTR [esi],eax
c001124c:	31 d2                	xor    edx,edx
c001124e:	5b                   	pop    ebx
c001124f:	31 c0                	xor    eax,eax
c0011251:	5e                   	pop    esi
c0011252:	5f                   	pop    edi
c0011253:	c3                   	ret    

c0011254 <SysGetUnixTime(regs*)>:
c0011254:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011259:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001125f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011263:	e9 26 a3 ff ff       	jmp    c000b58e <Clock::timeInSecondsLocal()>

c0011268 <string_ends_with(char const*, char const*)>:
c0011268:	57                   	push   edi
c0011269:	56                   	push   esi
c001126a:	53                   	push   ebx
c001126b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001126f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011273:	83 ec 0c             	sub    esp,0xc
c0011276:	53                   	push   ebx
c0011277:	e8 c4 f2 fe ff       	call   c0000540 <strlen>
c001127c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001127f:	89 c6                	mov    esi,eax
c0011281:	e8 ba f2 fe ff       	call   c0000540 <strlen>
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	39 c6                	cmp    esi,eax
c001128b:	7d 06                	jge    c0011293 <string_ends_with(char const*, char const*)+0x2b>
c001128d:	5b                   	pop    ebx
c001128e:	31 c0                	xor    eax,eax
c0011290:	5e                   	pop    esi
c0011291:	5f                   	pop    edi
c0011292:	c3                   	ret    
c0011293:	83 ec 08             	sub    esp,0x8
c0011296:	29 c6                	sub    esi,eax
c0011298:	57                   	push   edi
c0011299:	01 f3                	add    ebx,esi
c001129b:	53                   	push   ebx
c001129c:	e8 3f f4 fe ff       	call   c00006e0 <strcmp>
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	85 c0                	test   eax,eax
c00112a6:	5b                   	pop    ebx
c00112a7:	0f 94 c0             	sete   al
c00112aa:	5e                   	pop    esi
c00112ab:	25 ff 00 00 00       	and    eax,0xff
c00112b0:	5f                   	pop    edi
c00112b1:	c3                   	ret    

c00112b2 <SysOpen(regs*)>:
c00112b2:	56                   	push   esi
c00112b3:	53                   	push   ebx
c00112b4:	81 ec 04 01 00 00    	sub    esp,0x104
c00112ba:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112c1:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00112c4:	85 c9                	test   ecx,ecx
c00112c6:	0f 84 b9 01 00 00    	je     c0011485 <SysOpen(regs*)+0x1d3>
c00112cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112cf:	85 c0                	test   eax,eax
c00112d1:	0f 84 ae 01 00 00    	je     c0011485 <SysOpen(regs*)+0x1d3>
c00112d7:	52                   	push   edx
c00112d8:	68 70 ff 01 c0       	push   0xc001ff70
c00112dd:	50                   	push   eax
c00112de:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112e2:	56                   	push   esi
c00112e3:	e8 ee 96 ff ff       	call   c000a9d6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00112e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00112eb:	e8 50 f2 fe ff       	call   c0000540 <strlen>
c00112f0:	83 c4 10             	add    esp,0x10
c00112f3:	48                   	dec    eax
c00112f4:	74 1d                	je     c0011313 <SysOpen(regs*)+0x61>
c00112f6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00112f9:	eb 0f                	jmp    c001130a <SysOpen(regs*)+0x58>
c00112fb:	80 fa 3a             	cmp    dl,0x3a
c00112fe:	74 0f                	je     c001130f <SysOpen(regs*)+0x5d>
c0011300:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011304:	48                   	dec    eax
c0011305:	74 0c                	je     c0011313 <SysOpen(regs*)+0x61>
c0011307:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001130a:	80 fa 2e             	cmp    dl,0x2e
c001130d:	75 ec                	jne    c00112fb <SysOpen(regs*)+0x49>
c001130f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011313:	83 ec 08             	sub    esp,0x8
c0011316:	68 74 ff 01 c0       	push   0xc001ff74
c001131b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001131e:	50                   	push   eax
c001131f:	e8 44 ff ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	85 c0                	test   eax,eax
c0011329:	74 1d                	je     c0011348 <SysOpen(regs*)+0x96>
c001132b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001132e:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011334:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001133b:	81 c4 04 01 00 00    	add    esp,0x104
c0011341:	31 c0                	xor    eax,eax
c0011343:	31 d2                	xor    edx,edx
c0011345:	5b                   	pop    ebx
c0011346:	5e                   	pop    esi
c0011347:	c3                   	ret    
c0011348:	83 ec 08             	sub    esp,0x8
c001134b:	68 79 ff 01 c0       	push   0xc001ff79
c0011350:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011353:	50                   	push   eax
c0011354:	e8 0f ff ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c0011359:	83 c4 10             	add    esp,0x10
c001135c:	85 c0                	test   eax,eax
c001135e:	75 cb                	jne    c001132b <SysOpen(regs*)+0x79>
c0011360:	83 ec 08             	sub    esp,0x8
c0011363:	68 75 ff 01 c0       	push   0xc001ff75
c0011368:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001136b:	50                   	push   eax
c001136c:	e8 6f f3 fe ff       	call   c00006e0 <strcmp>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	85 c0                	test   eax,eax
c0011376:	74 b3                	je     c001132b <SysOpen(regs*)+0x79>
c0011378:	83 ec 08             	sub    esp,0x8
c001137b:	68 74 ff 01 c0       	push   0xc001ff74
c0011380:	56                   	push   esi
c0011381:	e8 e2 fe ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	85 c0                	test   eax,eax
c001138b:	75 9e                	jne    c001132b <SysOpen(regs*)+0x79>
c001138d:	83 ec 08             	sub    esp,0x8
c0011390:	68 7e ff 01 c0       	push   0xc001ff7e
c0011395:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011398:	50                   	push   eax
c0011399:	e8 ca fe ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	85 c0                	test   eax,eax
c00113a3:	0f 85 ef 00 00 00    	jne    c0011498 <SysOpen(regs*)+0x1e6>
c00113a9:	83 ec 08             	sub    esp,0x8
c00113ac:	68 83 ff 01 c0       	push   0xc001ff83
c00113b1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113b4:	50                   	push   eax
c00113b5:	e8 ae fe ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c00113ba:	83 c4 10             	add    esp,0x10
c00113bd:	85 c0                	test   eax,eax
c00113bf:	0f 85 d3 00 00 00    	jne    c0011498 <SysOpen(regs*)+0x1e6>
c00113c5:	83 ec 08             	sub    esp,0x8
c00113c8:	68 7f ff 01 c0       	push   0xc001ff7f
c00113cd:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113d0:	51                   	push   ecx
c00113d1:	e8 0a f3 fe ff       	call   c00006e0 <strcmp>
c00113d6:	83 c4 10             	add    esp,0x10
c00113d9:	85 c0                	test   eax,eax
c00113db:	0f 84 b7 00 00 00    	je     c0011498 <SysOpen(regs*)+0x1e6>
c00113e1:	83 ec 08             	sub    esp,0x8
c00113e4:	68 7e ff 01 c0       	push   0xc001ff7e
c00113e9:	56                   	push   esi
c00113ea:	e8 79 fe ff ff       	call   c0011268 <string_ends_with(char const*, char const*)>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	85 c0                	test   eax,eax
c00113f4:	0f 85 9e 00 00 00    	jne    c0011498 <SysOpen(regs*)+0x1e6>
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	68 14 01 00 00       	push   0x114
c0011402:	e8 6e 64 ff ff       	call   c0007875 <malloc>
c0011407:	83 c4 0c             	add    esp,0xc
c001140a:	89 c6                	mov    esi,eax
c001140c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011411:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011414:	50                   	push   eax
c0011415:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011418:	52                   	push   edx
c0011419:	56                   	push   esi
c001141a:	e8 61 97 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	85 f6                	test   esi,esi
c0011424:	74 5f                	je     c0011485 <SysOpen(regs*)+0x1d3>
c0011426:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011429:	89 d0                	mov    eax,edx
c001142b:	25 ff 00 00 00       	and    eax,0xff
c0011430:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011433:	89 d0                	mov    eax,edx
c0011435:	83 e0 01             	and    eax,0x1
c0011438:	f6 c2 02             	test   dl,0x2
c001143b:	74 03                	je     c0011440 <SysOpen(regs*)+0x18e>
c001143d:	83 c8 02             	or     eax,0x2
c0011440:	f6 c2 04             	test   dl,0x4
c0011443:	74 03                	je     c0011448 <SysOpen(regs*)+0x196>
c0011445:	83 c8 04             	or     eax,0x4
c0011448:	f6 c2 08             	test   dl,0x8
c001144b:	74 03                	je     c0011450 <SysOpen(regs*)+0x19e>
c001144d:	83 c8 0a             	or     eax,0xa
c0011450:	83 e2 10             	and    edx,0x10
c0011453:	74 03                	je     c0011458 <SysOpen(regs*)+0x1a6>
c0011455:	83 c8 12             	or     eax,0x12
c0011458:	83 ec 08             	sub    esp,0x8
c001145b:	50                   	push   eax
c001145c:	56                   	push   esi
c001145d:	e8 de 97 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0011462:	83 c4 10             	add    esp,0x10
c0011465:	85 c0                	test   eax,eax
c0011467:	75 1c                	jne    c0011485 <SysOpen(regs*)+0x1d3>
c0011469:	83 ec 0c             	sub    esp,0xc
c001146c:	56                   	push   esi
c001146d:	e8 90 7a ff ff       	call   c0008f02 <UnixFile::getFileDescriptor()>
c0011472:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	89 02                	mov    DWORD PTR [edx],eax
c001147a:	c1 f8 1f             	sar    eax,0x1f
c001147d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011480:	e9 b6 fe ff ff       	jmp    c001133b <SysOpen(regs*)+0x89>
c0011485:	81 c4 04 01 00 00    	add    esp,0x104
c001148b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011490:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011495:	5b                   	pop    ebx
c0011496:	5e                   	pop    esi
c0011497:	c3                   	ret    
c0011498:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001149b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114a1:	e9 8e fe ff ff       	jmp    c0011334 <SysOpen(regs*)+0x82>

c00114a6 <KeSystemCall(regs*, void*)>:
c00114a6:	53                   	push   ebx
c00114a7:	83 ec 08             	sub    esp,0x8
c00114aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00114ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00114b1:	83 f8 32             	cmp    eax,0x32
c00114b4:	77 16                	ja     c00114cc <KeSystemCall(regs*, void*)+0x26>
c00114b6:	8b 14 85 00 13 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffded00]
c00114bd:	85 d2                	test   edx,edx
c00114bf:	74 0b                	je     c00114cc <KeSystemCall(regs*, void*)+0x26>
c00114c1:	83 ec 0c             	sub    esp,0xc
c00114c4:	53                   	push   ebx
c00114c5:	ff d2                	call   edx
c00114c7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00114ca:	eb 0d                	jmp    c00114d9 <KeSystemCall(regs*, void*)+0x33>
c00114cc:	52                   	push   edx
c00114cd:	52                   	push   edx
c00114ce:	50                   	push   eax
c00114cf:	68 88 ff 01 c0       	push   0xc001ff88
c00114d4:	e8 31 91 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00114d9:	83 c4 10             	add    esp,0x10
c00114dc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00114e1:	31 d2                	xor    edx,edx
c00114e3:	83 c4 08             	add    esp,0x8
c00114e6:	5b                   	pop    ebx
c00114e7:	c3                   	ret    

c00114e8 <CmOpen(char const*)>:
c00114e8:	57                   	push   edi
c00114e9:	56                   	push   esi
c00114ea:	53                   	push   ebx
c00114eb:	83 ec 1c             	sub    esp,0x1c
c00114ee:	6a 30                	push   0x30
c00114f0:	e8 80 63 ff ff       	call   c0007875 <malloc>
c00114f5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00114fc:	89 c3                	mov    ebx,eax
c00114fe:	e8 72 63 ff ff       	call   c0007875 <malloc>
c0011503:	83 c4 0c             	add    esp,0xc
c0011506:	89 c6                	mov    esi,eax
c0011508:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001150e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011512:	50                   	push   eax
c0011513:	e8 68 96 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0011518:	83 c4 0c             	add    esp,0xc
c001151b:	89 33                	mov    DWORD PTR [ebx],esi
c001151d:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011521:	50                   	push   eax
c0011522:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011526:	50                   	push   eax
c0011527:	56                   	push   esi
c0011528:	e8 bf 99 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c001152d:	5a                   	pop    edx
c001152e:	59                   	pop    ecx
c001152f:	6a 01                	push   0x1
c0011531:	ff 33                	push   DWORD PTR [ebx]
c0011533:	e8 08 97 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0011538:	5e                   	pop    esi
c0011539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001153d:	e8 33 63 ff ff       	call   c0007875 <malloc>
c0011542:	5a                   	pop    edx
c0011543:	89 c7                	mov    edi,eax
c0011545:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011549:	8b 03                	mov    eax,DWORD PTR [ebx]
c001154b:	8b 10                	mov    edx,DWORD PTR [eax]
c001154d:	56                   	push   esi
c001154e:	57                   	push   edi
c001154f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011553:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011557:	50                   	push   eax
c0011558:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001155b:	83 c4 18             	add    esp,0x18
c001155e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011562:	68 9c ff 01 c0       	push   0xc001ff9c
c0011567:	e8 9e 90 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001156c:	59                   	pop    ecx
c001156d:	58                   	pop    eax
c001156e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011572:	68 b7 ff 01 c0       	push   0xc001ffb7
c0011577:	e8 8e 90 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001157c:	58                   	pop    eax
c001157d:	ff 33                	push   DWORD PTR [ebx]
c001157f:	e8 1a 97 ff ff       	call   c000ac9e <File::close()>
c0011584:	58                   	pop    eax
c0011585:	5a                   	pop    edx
c0011586:	6a 13                	push   0x13
c0011588:	ff 33                	push   DWORD PTR [ebx]
c001158a:	e8 b1 96 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c001158f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011591:	8b 10                	mov    edx,DWORD PTR [eax]
c0011593:	89 34 24             	mov    DWORD PTR [esp],esi
c0011596:	57                   	push   edi
c0011597:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001159b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001159f:	50                   	push   eax
c00115a0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00115a3:	83 c4 18             	add    esp,0x18
c00115a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00115aa:	68 c0 ff 01 c0       	push   0xc001ffc0
c00115af:	e8 56 90 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00115b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115b7:	e8 c9 62 ff ff       	call   c0007885 <free>
c00115bc:	83 c4 10             	add    esp,0x10
c00115bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00115c2:	75 10                	jne    c00115d4 <CmOpen(char const*)+0xec>
c00115c4:	83 ec 0c             	sub    esp,0xc
c00115c7:	68 d1 ff 01 c0       	push   0xc001ffd1
c00115cc:	e8 3a ed ff ff       	call   c001030b <KePanic(char const*)>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	8d 7b 05             	lea    edi,[ebx+0x5]
c00115d7:	50                   	push   eax
c00115d8:	6a 00                	push   0x0
c00115da:	6a 00                	push   0x0
c00115dc:	ff 33                	push   DWORD PTR [ebx]
c00115de:	e8 1b 97 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00115e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00115e7:	89 34 24             	mov    DWORD PTR [esp],esi
c00115ea:	57                   	push   edi
c00115eb:	6a 00                	push   0x0
c00115ed:	6a 2b                	push   0x2b
c00115ef:	50                   	push   eax
c00115f0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00115f3:	83 c4 1c             	add    esp,0x1c
c00115f6:	6a 00                	push   0x0
c00115f8:	6a 00                	push   0x0
c00115fa:	ff 33                	push   DWORD PTR [ebx]
c00115fc:	e8 fd 96 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011601:	83 c4 0c             	add    esp,0xc
c0011604:	6a 08                	push   0x8
c0011606:	68 e2 ff 01 c0       	push   0xc001ffe2
c001160b:	57                   	push   edi
c001160c:	e8 7f ed fe ff       	call   c0000390 <memcmp>
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	85 c0                	test   eax,eax
c0011616:	74 10                	je     c0011628 <CmOpen(char const*)+0x140>
c0011618:	83 ec 0c             	sub    esp,0xc
c001161b:	68 eb ff 01 c0       	push   0xc001ffeb
c0011620:	e8 e6 ec ff ff       	call   c001030b <KePanic(char const*)>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001162c:	89 d8                	mov    eax,ebx
c001162e:	83 c4 10             	add    esp,0x10
c0011631:	5b                   	pop    ebx
c0011632:	5e                   	pop    esi
c0011633:	5f                   	pop    edi
c0011634:	c3                   	ret    

c0011635 <CmClose(Reghive_Tag*)>:
c0011635:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011639:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001163d:	74 0b                	je     c001164a <CmClose(Reghive_Tag*)+0x15>
c001163f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011641:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011645:	e9 54 96 ff ff       	jmp    c000ac9e <File::close()>
c001164a:	c3                   	ret    

c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c001164b:	57                   	push   edi
c001164c:	56                   	push   esi
c001164d:	53                   	push   ebx
c001164e:	83 ec 10             	sub    esp,0x10
c0011651:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011655:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0011659:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001165d:	80 7f 04 00          	cmp    BYTE PTR [edi+0x4],0x0
c0011661:	74 4f                	je     c00116b2 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011663:	50                   	push   eax
c0011664:	6b c3 2b             	imul   eax,ebx,0x2b
c0011667:	99                   	cdq    
c0011668:	52                   	push   edx
c0011669:	50                   	push   eax
c001166a:	ff 37                	push   DWORD PTR [edi]
c001166c:	e8 8d 96 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011671:	5a                   	pop    edx
c0011672:	8b 07                	mov    eax,DWORD PTR [edi]
c0011674:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011678:	8b 10                	mov    edx,DWORD PTR [eax]
c001167a:	51                   	push   ecx
c001167b:	56                   	push   esi
c001167c:	6a 00                	push   0x0
c001167e:	6a 2b                	push   0x2b
c0011680:	50                   	push   eax
c0011681:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011684:	83 c4 20             	add    esp,0x20
c0011687:	85 db                	test   ebx,ebx
c0011689:	74 27                	je     c00116b2 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c001168b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001168d:	89 c8                	mov    eax,ecx
c001168f:	85 c9                	test   ecx,ecx
c0011691:	74 1d                	je     c00116b0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x65>
c0011693:	6a 00                	push   0x0
c0011695:	b8 49 91 17 17       	mov    eax,0x17179149
c001169a:	68 00 28 6b ee       	push   0xee6b2800
c001169f:	f7 e1                	mul    ecx
c00116a1:	52                   	push   edx
c00116a2:	50                   	push   eax
c00116a3:	e8 88 c2 00 00       	call   c001d930 <__umoddi3>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	6b cb 13             	imul   ecx,ebx,0x13
c00116ae:	29 c8                	sub    eax,ecx
c00116b0:	89 06                	mov    DWORD PTR [esi],eax
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	5b                   	pop    ebx
c00116b6:	5e                   	pop    esi
c00116b7:	5f                   	pop    edi
c00116b8:	c3                   	ret    

c00116b9 <CmGetString(Reghive_Tag*, int, char*)>:
c00116b9:	55                   	push   ebp
c00116ba:	57                   	push   edi
c00116bb:	56                   	push   esi
c00116bc:	53                   	push   ebx
c00116bd:	31 db                	xor    ebx,ebx
c00116bf:	83 ec 70             	sub    esp,0x70
c00116c2:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00116c9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00116cd:	50                   	push   eax
c00116ce:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00116d5:	55                   	push   ebp
c00116d6:	e8 70 ff ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00116e3:	c1 e0 08             	shl    eax,0x8
c00116e6:	89 c2                	mov    edx,eax
c00116e8:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00116ed:	09 d0                	or     eax,edx
c00116ef:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00116f4:	c1 e0 08             	shl    eax,0x8
c00116f7:	09 d0                	or     eax,edx
c00116f9:	74 25                	je     c0011720 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00116fb:	6b fb 0d             	imul   edi,ebx,0xd
c00116fe:	52                   	push   edx
c00116ff:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011703:	52                   	push   edx
c0011704:	50                   	push   eax
c0011705:	55                   	push   ebp
c0011706:	e8 40 ff ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001170b:	8d 74 24 49          	lea    esi,[esp+0x49]
c001170f:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011716:	b9 27 00 00 00       	mov    ecx,0x27
c001171b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001171d:	83 c4 10             	add    esp,0x10
c0011720:	83 c3 03             	add    ebx,0x3
c0011723:	83 fb 15             	cmp    ebx,0x15
c0011726:	75 b6                	jne    c00116de <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011728:	83 c4 6c             	add    esp,0x6c
c001172b:	5b                   	pop    ebx
c001172c:	5e                   	pop    esi
c001172d:	5f                   	pop    edi
c001172e:	5d                   	pop    ebp
c001172f:	c3                   	ret    

c0011730 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011730:	83 ec 40             	sub    esp,0x40
c0011733:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011737:	50                   	push   eax
c0011738:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001173c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011740:	e8 06 ff ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	83 c8 ff             	or     eax,0xffffffff
c001174b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011750:	75 19                	jne    c001176b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011752:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011757:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001175c:	c1 e0 08             	shl    eax,0x8
c001175f:	09 c2                	or     edx,eax
c0011761:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011766:	c1 e0 10             	shl    eax,0x10
c0011769:	09 d0                	or     eax,edx
c001176b:	83 c4 3c             	add    esp,0x3c
c001176e:	c3                   	ret    

c001176f <CmGetNext(Reghive_Tag*, int)>:
c001176f:	83 ec 40             	sub    esp,0x40
c0011772:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011776:	50                   	push   eax
c0011777:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001177b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001177f:	e8 c7 fe ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011784:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011789:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001178e:	c1 e0 08             	shl    eax,0x8
c0011791:	09 c2                	or     edx,eax
c0011793:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011798:	83 c4 4c             	add    esp,0x4c
c001179b:	c1 e0 10             	shl    eax,0x10
c001179e:	09 d0                	or     eax,edx
c00117a0:	c3                   	ret    

c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00117a1:	55                   	push   ebp
c00117a2:	57                   	push   edi
c00117a3:	56                   	push   esi
c00117a4:	53                   	push   ebx
c00117a5:	83 ec 1c             	sub    esp,0x1c
c00117a8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00117ac:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00117b0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00117b4:	74 69                	je     c001181f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x7e>
c00117b6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00117bb:	74 3c                	je     c00117f9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x58>
c00117bd:	31 d2                	xor    edx,edx
c00117bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00117c2:	89 d7                	mov    edi,edx
c00117c4:	09 c7                	or     edi,eax
c00117c6:	74 2e                	je     c00117f6 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x55>
c00117c8:	6b 74 24 34 13       	imul   esi,DWORD PTR [esp+0x34],0x13
c00117cd:	6a 00                	push   0x0
c00117cf:	89 f7                	mov    edi,esi
c00117d1:	68 00 28 6b ee       	push   0xee6b2800
c00117d6:	c1 ff 1f             	sar    edi,0x1f
c00117d9:	01 f0                	add    eax,esi
c00117db:	be f9 e0 66 d1       	mov    esi,0xd166e0f9
c00117e0:	11 fa                	adc    edx,edi
c00117e2:	69 ca f9 e0 66 d1    	imul   ecx,edx,0xd166e0f9
c00117e8:	f7 e6                	mul    esi
c00117ea:	01 ca                	add    edx,ecx
c00117ec:	52                   	push   edx
c00117ed:	50                   	push   eax
c00117ee:	e8 3d c1 00 00       	call   c001d930 <__umoddi3>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00117f9:	50                   	push   eax
c00117fa:	6b 44 24 38 2b       	imul   eax,DWORD PTR [esp+0x38],0x2b
c00117ff:	99                   	cdq    
c0011800:	52                   	push   edx
c0011801:	50                   	push   eax
c0011802:	ff 33                	push   DWORD PTR [ebx]
c0011804:	e8 f5 94 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011809:	5a                   	pop    edx
c001180a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001180c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011810:	8b 10                	mov    edx,DWORD PTR [eax]
c0011812:	51                   	push   ecx
c0011813:	55                   	push   ebp
c0011814:	6a 00                	push   0x0
c0011816:	6a 2b                	push   0x2b
c0011818:	50                   	push   eax
c0011819:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001181c:	83 c4 20             	add    esp,0x20
c001181f:	83 c4 1c             	add    esp,0x1c
c0011822:	5b                   	pop    ebx
c0011823:	5e                   	pop    esi
c0011824:	5f                   	pop    edi
c0011825:	5d                   	pop    ebp
c0011826:	c3                   	ret    

c0011827 <CmFreeExtent(Reghive_Tag*, int)>:
c0011827:	53                   	push   ebx
c0011828:	83 ec 3c             	sub    esp,0x3c
c001182b:	6a 2b                	push   0x2b
c001182d:	6a 00                	push   0x0
c001182f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011833:	53                   	push   ebx
c0011834:	e8 97 ec fe ff       	call   c00004d0 <memset>
c0011839:	83 c4 0c             	add    esp,0xc
c001183c:	53                   	push   ebx
c001183d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011841:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011845:	e8 57 ff ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001184a:	83 c4 48             	add    esp,0x48
c001184d:	5b                   	pop    ebx
c001184e:	c3                   	ret    

c001184f <CmUpdateHeader(Reghive_Tag*)>:
c001184f:	83 ec 0c             	sub    esp,0xc
c0011852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011856:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001185a:	74 10                	je     c001186c <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001185c:	52                   	push   edx
c001185d:	8d 50 05             	lea    edx,[eax+0x5]
c0011860:	52                   	push   edx
c0011861:	6a 00                	push   0x0
c0011863:	50                   	push   eax
c0011864:	e8 38 ff ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011869:	83 c4 10             	add    esp,0x10
c001186c:	83 c4 0c             	add    esp,0xc
c001186f:	c3                   	ret    

c0011870 <CmExpand(Reghive_Tag*, int)>:
c0011870:	57                   	push   edi
c0011871:	56                   	push   esi
c0011872:	83 ce ff             	or     esi,0xffffffff
c0011875:	53                   	push   ebx
c0011876:	83 ec 30             	sub    esp,0x30
c0011879:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001187d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011881:	74 5f                	je     c00118e2 <CmExpand(Reghive_Tag*, int)+0x72>
c0011883:	31 d2                	xor    edx,edx
c0011885:	31 f6                	xor    esi,esi
c0011887:	50                   	push   eax
c0011888:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001188c:	52                   	push   edx
c001188d:	50                   	push   eax
c001188e:	ff 33                	push   DWORD PTR [ebx]
c0011890:	e8 69 94 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	6a 2b                	push   0x2b
c001189a:	6a 00                	push   0x0
c001189c:	8d 7c 24 11          	lea    edi,[esp+0x11]
c00118a0:	57                   	push   edi
c00118a1:	e8 2a ec fe ff       	call   c00004d0 <memset>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00118ad:	7d 1b                	jge    c00118ca <CmExpand(Reghive_Tag*, int)+0x5a>
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118b4:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00118b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00118ba:	46                   	inc    esi
c00118bb:	51                   	push   ecx
c00118bc:	57                   	push   edi
c00118bd:	6a 00                	push   0x0
c00118bf:	6a 2b                	push   0x2b
c00118c1:	50                   	push   eax
c00118c2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00118c5:	83 c4 20             	add    esp,0x20
c00118c8:	eb df                	jmp    c00118a9 <CmExpand(Reghive_Tag*, int)+0x39>
c00118ca:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00118ce:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	01 f2                	add    edx,esi
c00118d6:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00118d9:	53                   	push   ebx
c00118da:	e8 70 ff ff ff       	call   c001184f <CmUpdateHeader(Reghive_Tag*)>
c00118df:	83 c4 10             	add    esp,0x10
c00118e2:	83 c4 30             	add    esp,0x30
c00118e5:	89 f0                	mov    eax,esi
c00118e7:	5b                   	pop    ebx
c00118e8:	5e                   	pop    esi
c00118e9:	5f                   	pop    edi
c00118ea:	c3                   	ret    

c00118eb <CmFindUnusedExtent(Reghive_Tag*)>:
c00118eb:	55                   	push   ebp
c00118ec:	57                   	push   edi
c00118ed:	56                   	push   esi
c00118ee:	53                   	push   ebx
c00118ef:	83 cb ff             	or     ebx,0xffffffff
c00118f2:	83 ec 1c             	sub    esp,0x1c
c00118f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00118f9:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00118fd:	74 68                	je     c0011967 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00118ff:	be 2b 00 00 00       	mov    esi,0x2b
c0011904:	51                   	push   ecx
c0011905:	31 ff                	xor    edi,edi
c0011907:	6a 00                	push   0x0
c0011909:	31 db                	xor    ebx,ebx
c001190b:	6a 00                	push   0x0
c001190d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011910:	e8 e9 93 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001191b:	76 3b                	jbe    c0011958 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011923:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011927:	8b 10                	mov    edx,DWORD PTR [eax]
c0011929:	51                   	push   ecx
c001192a:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001192e:	51                   	push   ecx
c001192f:	6a 00                	push   0x0
c0011931:	6a 01                	push   0x1
c0011933:	50                   	push   eax
c0011934:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011937:	83 c4 20             	add    esp,0x20
c001193a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001193f:	74 26                	je     c0011967 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011941:	43                   	inc    ebx
c0011942:	52                   	push   edx
c0011943:	57                   	push   edi
c0011944:	56                   	push   esi
c0011945:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011948:	e8 b1 93 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001194d:	83 c6 2b             	add    esi,0x2b
c0011950:	83 d7 00             	adc    edi,0x0
c0011953:	83 c4 10             	add    esp,0x10
c0011956:	eb c0                	jmp    c0011918 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011958:	50                   	push   eax
c0011959:	50                   	push   eax
c001195a:	6a 40                	push   0x40
c001195c:	55                   	push   ebp
c001195d:	e8 0e ff ff ff       	call   c0011870 <CmExpand(Reghive_Tag*, int)>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	89 c3                	mov    ebx,eax
c0011967:	83 c4 1c             	add    esp,0x1c
c001196a:	89 d8                	mov    eax,ebx
c001196c:	5b                   	pop    ebx
c001196d:	5e                   	pop    esi
c001196e:	5f                   	pop    edi
c001196f:	5d                   	pop    ebp
c0011970:	c3                   	ret    

c0011971 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011971:	55                   	push   ebp
c0011972:	57                   	push   edi
c0011973:	56                   	push   esi
c0011974:	53                   	push   ebx
c0011975:	81 ec 88 00 00 00    	sub    esp,0x88
c001197b:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011982:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011989:	e8 5d ff ff ff       	call   c00118eb <CmFindUnusedExtent(Reghive_Tag*)>
c001198e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011992:	83 c4 0c             	add    esp,0xc
c0011995:	6a 2b                	push   0x2b
c0011997:	6a 00                	push   0x0
c0011999:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001199d:	55                   	push   ebp
c001199e:	e8 2d eb fe ff       	call   c00004d0 <memset>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	85 db                	test   ebx,ebx
c00119a8:	74 12                	je     c00119bc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00119aa:	51                   	push   ecx
c00119ab:	55                   	push   ebp
c00119ac:	53                   	push   ebx
c00119ad:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00119b4:	e8 92 fc ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00119c0:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00119c7:	b9 2b 00 00 00       	mov    ecx,0x2b
c00119cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119ce:	85 db                	test   ebx,ebx
c00119d0:	74 49                	je     c0011a1b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00119d2:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00119d7:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00119dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00119e0:	c1 e0 08             	shl    eax,0x8
c00119e3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00119e9:	09 c8                	or     eax,ecx
c00119eb:	74 11                	je     c00119fe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00119ed:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00119f1:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00119f5:	c1 e8 10             	shr    eax,0x10
c00119f8:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00119fc:	eb 0f                	jmp    c0011a0d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c00119fe:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011a03:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011a08:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011a0d:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011a11:	c1 ea 08             	shr    edx,0x8
c0011a14:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011a19:	eb 0f                	jmp    c0011a2a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011a1b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011a20:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011a25:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011a2a:	52                   	push   edx
c0011a2b:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011a2f:	50                   	push   eax
c0011a30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011a34:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011a3b:	e8 61 fd ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a40:	83 c4 10             	add    esp,0x10
c0011a43:	85 db                	test   ebx,ebx
c0011a45:	74 12                	je     c0011a59 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011a47:	50                   	push   eax
c0011a48:	55                   	push   ebp
c0011a49:	53                   	push   ebx
c0011a4a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011a51:	e8 4b fd ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a5d:	83 c4 7c             	add    esp,0x7c
c0011a60:	5b                   	pop    ebx
c0011a61:	5e                   	pop    esi
c0011a62:	5f                   	pop    edi
c0011a63:	5d                   	pop    ebp
c0011a64:	c3                   	ret    

c0011a65 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011a65:	55                   	push   ebp
c0011a66:	57                   	push   edi
c0011a67:	56                   	push   esi
c0011a68:	53                   	push   ebx
c0011a69:	bb 27 00 00 00       	mov    ebx,0x27
c0011a6e:	81 ec 88 00 00 00    	sub    esp,0x88
c0011a74:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011a7b:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011a82:	e8 b9 ea fe ff       	call   c0000540 <strlen>
c0011a87:	8d 48 26             	lea    ecx,[eax+0x26]
c0011a8a:	89 c8                	mov    eax,ecx
c0011a8c:	99                   	cdq    
c0011a8d:	f7 fb                	idiv   ebx
c0011a8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011a9c:	7e 10                	jle    c0011aae <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011a9e:	83 ec 0c             	sub    esp,0xc
c0011aa1:	68 fc ff 01 c0       	push   0xc001fffc
c0011aa6:	e8 60 e8 ff ff       	call   c001030b <KePanic(char const*)>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	31 ff                	xor    edi,edi
c0011ab0:	50                   	push   eax
c0011ab1:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011ab5:	53                   	push   ebx
c0011ab6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011abd:	56                   	push   esi
c0011abe:	e8 88 fb ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ac3:	83 c4 10             	add    esp,0x10
c0011ac6:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011aca:	89 d0                	mov    eax,edx
c0011acc:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011ad0:	c1 e0 08             	shl    eax,0x8
c0011ad3:	09 c2                	or     edx,eax
c0011ad5:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011ad9:	c1 e2 08             	shl    edx,0x8
c0011adc:	09 c2                	or     edx,eax
c0011ade:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011ae2:	7e 76                	jle    c0011b5a <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011ae4:	85 d2                	test   edx,edx
c0011ae6:	75 25                	jne    c0011b0d <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011ae8:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011aed:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011af1:	50                   	push   eax
c0011af2:	6a 00                	push   0x0
c0011af4:	6a 00                	push   0x0
c0011af6:	56                   	push   esi
c0011af7:	e8 75 fe ff ff       	call   c0011971 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011afc:	83 c4 10             	add    esp,0x10
c0011aff:	89 c2                	mov    edx,eax
c0011b01:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011b04:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011b07:	c1 f8 10             	sar    eax,0x10
c0011b0a:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011b0d:	55                   	push   ebp
c0011b0e:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011b12:	55                   	push   ebp
c0011b13:	52                   	push   edx
c0011b14:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011b18:	56                   	push   esi
c0011b19:	e8 2d fb ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011b1e:	83 c4 0c             	add    esp,0xc
c0011b21:	6a 27                	push   0x27
c0011b23:	6a 00                	push   0x0
c0011b25:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011b29:	51                   	push   ecx
c0011b2a:	e8 a1 e9 fe ff       	call   c00004d0 <memset>
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	6b c7 27             	imul   eax,edi,0x27
c0011b35:	6a 27                	push   0x27
c0011b37:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011b3e:	50                   	push   eax
c0011b3f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011b43:	51                   	push   ecx
c0011b44:	e8 e7 ea fe ff       	call   c0000630 <strncpy>
c0011b49:	83 c4 0c             	add    esp,0xc
c0011b4c:	55                   	push   ebp
c0011b4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b51:	52                   	push   edx
c0011b52:	56                   	push   esi
c0011b53:	e8 49 fc ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011b58:	eb 19                	jmp    c0011b73 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011b5a:	85 d2                	test   edx,edx
c0011b5c:	74 18                	je     c0011b76 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011b5e:	51                   	push   ecx
c0011b5f:	51                   	push   ecx
c0011b60:	52                   	push   edx
c0011b61:	56                   	push   esi
c0011b62:	e8 c0 fc ff ff       	call   c0011827 <CmFreeExtent(Reghive_Tag*, int)>
c0011b67:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011b6b:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011b6f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	47                   	inc    edi
c0011b77:	83 c3 03             	add    ebx,0x3
c0011b7a:	83 ff 07             	cmp    edi,0x7
c0011b7d:	0f 85 43 ff ff ff    	jne    c0011ac6 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011b83:	50                   	push   eax
c0011b84:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011b88:	50                   	push   eax
c0011b89:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b90:	56                   	push   esi
c0011b91:	e8 0b fc ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011b96:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011b9c:	5b                   	pop    ebx
c0011b9d:	5e                   	pop    esi
c0011b9e:	5f                   	pop    edi
c0011b9f:	5d                   	pop    ebp
c0011ba0:	c3                   	ret    

c0011ba1 <CmGetMatch(char*, char*, bool, bool*)>:
c0011ba1:	56                   	push   esi
c0011ba2:	53                   	push   ebx
c0011ba3:	50                   	push   eax
c0011ba4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011ba8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011bad:	74 25                	je     c0011bd4 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011baf:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011bb2:	31 db                	xor    ebx,ebx
c0011bb4:	50                   	push   eax
c0011bb5:	50                   	push   eax
c0011bb6:	8d 04 9d e0 13 02 c0 	lea    eax,[ebx*4-0x3ffdec20]
c0011bbd:	50                   	push   eax
c0011bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011bc2:	e8 19 eb fe ff       	call   c00006e0 <strcmp>
c0011bc7:	83 c4 10             	add    esp,0x10
c0011bca:	85 c0                	test   eax,eax
c0011bcc:	74 2e                	je     c0011bfc <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011bce:	43                   	inc    ebx
c0011bcf:	83 fb 3f             	cmp    ebx,0x3f
c0011bd2:	75 e0                	jne    c0011bb4 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011bd4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011bd7:	31 db                	xor    ebx,ebx
c0011bd9:	8d 04 9d e0 13 02 c0 	lea    eax,[ebx*4-0x3ffdec20]
c0011be0:	51                   	push   ecx
c0011be1:	51                   	push   ecx
c0011be2:	50                   	push   eax
c0011be3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011be7:	e8 f4 ea fe ff       	call   c00006e0 <strcmp>
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	85 c0                	test   eax,eax
c0011bf1:	74 09                	je     c0011bfc <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011bf3:	43                   	inc    ebx
c0011bf4:	83 fb 3f             	cmp    ebx,0x3f
c0011bf7:	75 e0                	jne    c0011bd9 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011bf9:	83 cb ff             	or     ebx,0xffffffff
c0011bfc:	89 d8                	mov    eax,ebx
c0011bfe:	5a                   	pop    edx
c0011bff:	5b                   	pop    ebx
c0011c00:	5e                   	pop    esi
c0011c01:	c3                   	ret    

c0011c02 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011c02:	55                   	push   ebp
c0011c03:	31 c0                	xor    eax,eax
c0011c05:	57                   	push   edi
c0011c06:	56                   	push   esi
c0011c07:	53                   	push   ebx
c0011c08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c0c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011c10:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011c12:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011c16:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011c19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011c1d:	83 fd 1f             	cmp    ebp,0x1f
c0011c20:	7f 0b                	jg     c0011c2d <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011c22:	0f b6 c2             	movzx  eax,dl
c0011c25:	d3 e0                	shl    eax,cl
c0011c27:	09 07                	or     DWORD PTR [edi],eax
c0011c29:	b0 01                	mov    al,0x1
c0011c2b:	01 33                	add    DWORD PTR [ebx],esi
c0011c2d:	5b                   	pop    ebx
c0011c2e:	5e                   	pop    esi
c0011c2f:	5f                   	pop    edi
c0011c30:	5d                   	pop    ebp
c0011c31:	c3                   	ret    

c0011c32 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011c32:	57                   	push   edi
c0011c33:	56                   	push   esi
c0011c34:	53                   	push   ebx
c0011c35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011c39:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011c3d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011c41:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011c45:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011c47:	7c 17                	jl     c0011c60 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011c49:	8b 17                	mov    edx,DWORD PTR [edi]
c0011c4b:	b8 01 00 00 00       	mov    eax,0x1
c0011c50:	d3 e0                	shl    eax,cl
c0011c52:	48                   	dec    eax
c0011c53:	21 d0                	and    eax,edx
c0011c55:	d3 ea                	shr    edx,cl
c0011c57:	89 17                	mov    DWORD PTR [edi],edx
c0011c59:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011c5b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011c5e:	eb 05                	jmp    c0011c65 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011c60:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011c63:	31 c0                	xor    eax,eax
c0011c65:	5b                   	pop    ebx
c0011c66:	5e                   	pop    esi
c0011c67:	5f                   	pop    edi
c0011c68:	c3                   	ret    

c0011c69 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011c69:	83 ec 40             	sub    esp,0x40
c0011c6c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011c70:	50                   	push   eax
c0011c71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011c79:	e8 cd f9 ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011c7e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011c82:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011c86:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011c8a:	89 10                	mov    DWORD PTR [eax],edx
c0011c8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011c8f:	83 c4 4c             	add    esp,0x4c
c0011c92:	c3                   	ret    

c0011c93 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011c93:	55                   	push   ebp
c0011c94:	57                   	push   edi
c0011c95:	56                   	push   esi
c0011c96:	53                   	push   ebx
c0011c97:	83 ec 40             	sub    esp,0x40
c0011c9a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011c9e:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011ca2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011ca6:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011caa:	53                   	push   ebx
c0011cab:	56                   	push   esi
c0011cac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011cb0:	e8 96 f9 ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cb5:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011cb9:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011cbd:	83 c4 0c             	add    esp,0xc
c0011cc0:	53                   	push   ebx
c0011cc1:	56                   	push   esi
c0011cc2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011cc6:	e8 d6 fa ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ccb:	83 c4 4c             	add    esp,0x4c
c0011cce:	5b                   	pop    ebx
c0011ccf:	5e                   	pop    esi
c0011cd0:	5f                   	pop    edi
c0011cd1:	5d                   	pop    ebp
c0011cd2:	c3                   	ret    

c0011cd3 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011cd3:	55                   	push   ebp
c0011cd4:	57                   	push   edi
c0011cd5:	56                   	push   esi
c0011cd6:	31 f6                	xor    esi,esi
c0011cd8:	53                   	push   ebx
c0011cd9:	31 db                	xor    ebx,ebx
c0011cdb:	83 ec 40             	sub    esp,0x40
c0011cde:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ce6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011cee:	6a 12                	push   0x12
c0011cf0:	68 ee 00 00 00       	push   0xee
c0011cf5:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011cf9:	e8 d2 e7 fe ff       	call   c00004d0 <memset>
c0011cfe:	83 c4 10             	add    esp,0x10
c0011d01:	6a 08                	push   0x8
c0011d03:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d07:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011d0b:	50                   	push   eax
c0011d0c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011d10:	57                   	push   edi
c0011d11:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011d15:	55                   	push   ebp
c0011d16:	e8 e7 fe ff ff       	call   c0011c02 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011d22:	50                   	push   eax
c0011d23:	6a 06                	push   0x6
c0011d25:	57                   	push   edi
c0011d26:	55                   	push   ebp
c0011d27:	e8 06 ff ff ff       	call   c0011c32 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011d34:	74 07                	je     c0011d3d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011d36:	46                   	inc    esi
c0011d37:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011d3b:	eb e1                	jmp    c0011d1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011d3d:	43                   	inc    ebx
c0011d3e:	83 fb 12             	cmp    ebx,0x12
c0011d41:	75 be                	jne    c0011d01 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011d43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d47:	31 db                	xor    ebx,ebx
c0011d49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011d4c:	50                   	push   eax
c0011d4d:	50                   	push   eax
c0011d4e:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011d53:	43                   	inc    ebx
c0011d54:	8d 04 85 e0 13 02 c0 	lea    eax,[eax*4-0x3ffdec20]
c0011d5b:	50                   	push   eax
c0011d5c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011d60:	e8 5b ea fe ff       	call   c00007c0 <strcat>
c0011d65:	83 c4 10             	add    esp,0x10
c0011d68:	83 fb 18             	cmp    ebx,0x18
c0011d6b:	75 df                	jne    c0011d4c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011d6d:	83 c4 3c             	add    esp,0x3c
c0011d70:	31 c0                	xor    eax,eax
c0011d72:	5b                   	pop    ebx
c0011d73:	5e                   	pop    esi
c0011d74:	5f                   	pop    edi
c0011d75:	5d                   	pop    ebp
c0011d76:	c3                   	ret    

c0011d77 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011d77:	83 ec 40             	sub    esp,0x40
c0011d7a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011d7e:	50                   	push   eax
c0011d7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d87:	e8 bf f8 ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d8c:	58                   	pop    eax
c0011d8d:	5a                   	pop    edx
c0011d8e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011d92:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011d96:	50                   	push   eax
c0011d97:	e8 37 ff ff ff       	call   c0011cd3 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011d9c:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011da1:	83 c4 4c             	add    esp,0x4c
c0011da4:	c3                   	ret    

c0011da5 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011da5:	55                   	push   ebp
c0011da6:	57                   	push   edi
c0011da7:	56                   	push   esi
c0011da8:	53                   	push   ebx
c0011da9:	31 db                	xor    ebx,ebx
c0011dab:	83 ec 74             	sub    esp,0x74
c0011dae:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0011db5:	57                   	push   edi
c0011db6:	68 11 00 02 c0       	push   0xc0020011
c0011dbb:	e8 4a 88 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0011dc0:	83 c4 0c             	add    esp,0xc
c0011dc3:	6a 30                	push   0x30
c0011dc5:	6a 00                	push   0x0
c0011dc7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011dcb:	56                   	push   esi
c0011dcc:	e8 ff e6 fe ff       	call   c00004d0 <memset>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	83 ec 0c             	sub    esp,0xc
c0011dd7:	57                   	push   edi
c0011dd8:	e8 63 e7 fe ff       	call   c0000540 <strlen>
c0011ddd:	83 c4 10             	add    esp,0x10
c0011de0:	39 d8                	cmp    eax,ebx
c0011de2:	76 16                	jbe    c0011dfa <CmConvertToInternalFilename(char const*, unsigned char*)+0x55>
c0011de4:	83 ec 0c             	sub    esp,0xc
c0011de7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011deb:	50                   	push   eax
c0011dec:	e8 bf ea fe ff       	call   c00008b0 <toupper>
c0011df1:	83 c4 10             	add    esp,0x10
c0011df4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011df7:	43                   	inc    ebx
c0011df8:	eb da                	jmp    c0011dd4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x2f>
c0011dfa:	31 ff                	xor    edi,edi
c0011dfc:	52                   	push   edx
c0011dfd:	52                   	push   edx
c0011dfe:	56                   	push   esi
c0011dff:	31 f6                	xor    esi,esi
c0011e01:	68 11 00 02 c0       	push   0xc0020011
c0011e06:	e8 ff 87 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0011e0b:	83 c4 0c             	add    esp,0xc
c0011e0e:	6a 18                	push   0x18
c0011e10:	6a 3f                	push   0x3f
c0011e12:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011e16:	50                   	push   eax
c0011e17:	e8 b4 e6 fe ff       	call   c00004d0 <memset>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011e23:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011e27:	84 c0                	test   al,al
c0011e29:	0f 84 b0 00 00 00    	je     c0011edf <CmConvertToInternalFilename(char const*, unsigned char*)+0x13a>
c0011e2f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0011e33:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0011e38:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0011e3c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0011e41:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011e44:	83 ec 0c             	sub    esp,0xc
c0011e47:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0011e4b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0011e4f:	53                   	push   ebx
c0011e50:	e8 eb e6 fe ff       	call   c0000540 <strlen>
c0011e55:	83 c4 10             	add    esp,0x10
c0011e58:	85 c0                	test   eax,eax
c0011e5a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011e5e:	74 0b                	je     c0011e6b <CmConvertToInternalFilename(char const*, unsigned char*)+0xc6>
c0011e60:	50                   	push   eax
c0011e61:	6a 01                	push   0x1
c0011e63:	53                   	push   ebx
c0011e64:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011e68:	50                   	push   eax
c0011e69:	eb 0a                	jmp    c0011e75 <CmConvertToInternalFilename(char const*, unsigned char*)+0xd0>
c0011e6b:	50                   	push   eax
c0011e6c:	6a 00                	push   0x0
c0011e6e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0011e72:	50                   	push   eax
c0011e73:	6a 00                	push   0x0
c0011e75:	e8 27 fd ff ff       	call   c0011ba1 <CmGetMatch(char*, char*, bool, bool*)>
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	83 f8 ff             	cmp    eax,0xffffffff
c0011e80:	75 1a                	jne    c0011e9c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf7>
c0011e82:	83 ec 0c             	sub    esp,0xc
c0011e85:	68 1e 00 02 c0       	push   0xc002001e
c0011e8a:	e8 7c e4 ff ff       	call   c001030b <KePanic(char const*)>
c0011e8f:	83 c4 10             	add    esp,0x10
c0011e92:	b8 02 00 00 00       	mov    eax,0x2
c0011e97:	e9 bc 00 00 00       	jmp    c0011f58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1b3>
c0011e9c:	83 ff 18             	cmp    edi,0x18
c0011e9f:	75 1a                	jne    c0011ebb <CmConvertToInternalFilename(char const*, unsigned char*)+0x116>
c0011ea1:	83 ec 0c             	sub    esp,0xc
c0011ea4:	68 33 00 02 c0       	push   0xc0020033
c0011ea9:	e8 5d e4 ff ff       	call   c001030b <KePanic(char const*)>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	b8 01 00 00 00       	mov    eax,0x1
c0011eb6:	e9 9d 00 00 00       	jmp    c0011f58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1b3>
c0011ebb:	47                   	inc    edi
c0011ebc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011ec1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0011ec5:	74 02                	je     c0011ec9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x124>
c0011ec7:	89 ee                	mov    esi,ebp
c0011ec9:	83 ec 0c             	sub    esp,0xc
c0011ecc:	53                   	push   ebx
c0011ecd:	e8 6e e6 fe ff       	call   c0000540 <strlen>
c0011ed2:	83 c4 10             	add    esp,0x10
c0011ed5:	85 c0                	test   eax,eax
c0011ed7:	74 06                	je     c0011edf <CmConvertToInternalFilename(char const*, unsigned char*)+0x13a>
c0011ed9:	46                   	inc    esi
c0011eda:	e9 40 ff ff ff       	jmp    c0011e1f <CmConvertToInternalFilename(char const*, unsigned char*)+0x7a>
c0011edf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011ee7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011eef:	31 f6                	xor    esi,esi
c0011ef1:	50                   	push   eax
c0011ef2:	31 ff                	xor    edi,edi
c0011ef4:	6a 12                	push   0x12
c0011ef6:	68 ee 00 00 00       	push   0xee
c0011efb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0011f02:	e8 c9 e5 fe ff       	call   c00004d0 <memset>
c0011f07:	83 c4 10             	add    esp,0x10
c0011f0a:	83 fe 17             	cmp    esi,0x17
c0011f0d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0011f11:	7e 26                	jle    c0011f39 <CmConvertToInternalFilename(char const*, unsigned char*)+0x194>
c0011f13:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f17:	50                   	push   eax
c0011f18:	6a 08                	push   0x8
c0011f1a:	55                   	push   ebp
c0011f1b:	53                   	push   ebx
c0011f1c:	e8 11 fd ff ff       	call   c0011c32 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f21:	83 c4 10             	add    esp,0x10
c0011f24:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f29:	74 26                	je     c0011f51 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1ac>
c0011f2b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0011f32:	4e                   	dec    esi
c0011f33:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0011f36:	47                   	inc    edi
c0011f37:	eb 1c                	jmp    c0011f55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1b0>
c0011f39:	6a 06                	push   0x6
c0011f3b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0011f40:	50                   	push   eax
c0011f41:	55                   	push   ebp
c0011f42:	53                   	push   ebx
c0011f43:	e8 ba fc ff ff       	call   c0011c02 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	84 c0                	test   al,al
c0011f4d:	75 06                	jne    c0011f55 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1b0>
c0011f4f:	eb c2                	jmp    c0011f13 <CmConvertToInternalFilename(char const*, unsigned char*)+0x16e>
c0011f51:	31 c0                	xor    eax,eax
c0011f53:	eb 03                	jmp    c0011f58 <CmConvertToInternalFilename(char const*, unsigned char*)+0x1b3>
c0011f55:	46                   	inc    esi
c0011f56:	eb b2                	jmp    c0011f0a <CmConvertToInternalFilename(char const*, unsigned char*)+0x165>
c0011f58:	83 c4 6c             	add    esp,0x6c
c0011f5b:	5b                   	pop    ebx
c0011f5c:	5e                   	pop    esi
c0011f5d:	5f                   	pop    edi
c0011f5e:	5d                   	pop    ebp
c0011f5f:	c3                   	ret    

c0011f60 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0011f60:	53                   	push   ebx
c0011f61:	83 ec 3c             	sub    esp,0x3c
c0011f64:	6a 2b                	push   0x2b
c0011f66:	6a 00                	push   0x0
c0011f68:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f6c:	53                   	push   ebx
c0011f6d:	e8 5e e5 fe ff       	call   c00004d0 <memset>
c0011f72:	58                   	pop    eax
c0011f73:	5a                   	pop    edx
c0011f74:	8d 44 24 11          	lea    eax,[esp+0x11]
c0011f78:	50                   	push   eax
c0011f79:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011f7d:	e8 23 fe ff ff       	call   c0011da5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0011f82:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0011f87:	83 c4 0c             	add    esp,0xc
c0011f8a:	6a 15                	push   0x15
c0011f8c:	6a 00                	push   0x0
c0011f8e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0011f92:	50                   	push   eax
c0011f93:	e8 38 e5 fe ff       	call   c00004d0 <memset>
c0011f98:	53                   	push   ebx
c0011f99:	6a 00                	push   0x0
c0011f9b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f9f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011fa3:	e8 c9 f9 ff ff       	call   c0011971 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011fa8:	83 c4 58             	add    esp,0x58
c0011fab:	5b                   	pop    ebx
c0011fac:	c3                   	ret    

c0011fad <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0011fad:	56                   	push   esi
c0011fae:	53                   	push   ebx
c0011faf:	83 ec 4c             	sub    esp,0x4c
c0011fb2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0011fb6:	53                   	push   ebx
c0011fb7:	68 44 00 02 c0       	push   0xc0020044
c0011fbc:	e8 49 86 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0011fc1:	83 c4 0c             	add    esp,0xc
c0011fc4:	6a 12                	push   0x12
c0011fc6:	68 ff 00 00 00       	push   0xff
c0011fcb:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0011fcf:	56                   	push   esi
c0011fd0:	e8 fb e4 fe ff       	call   c00004d0 <memset>
c0011fd5:	5a                   	pop    edx
c0011fd6:	59                   	pop    ecx
c0011fd7:	56                   	push   esi
c0011fd8:	53                   	push   ebx
c0011fd9:	e8 c7 fd ff ff       	call   c0011da5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0011fde:	83 c4 10             	add    esp,0x10
c0011fe1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0011fe5:	85 db                	test   ebx,ebx
c0011fe7:	74 42                	je     c001202b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x7e>
c0011fe9:	50                   	push   eax
c0011fea:	8d 44 24 19          	lea    eax,[esp+0x19]
c0011fee:	50                   	push   eax
c0011fef:	53                   	push   ebx
c0011ff0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011ff4:	e8 52 f6 ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ff9:	83 c4 0c             	add    esp,0xc
c0011ffc:	6a 12                	push   0x12
c0011ffe:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012002:	50                   	push   eax
c0012003:	56                   	push   esi
c0012004:	e8 87 e3 fe ff       	call   c0000390 <memcmp>
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	85 c0                	test   eax,eax
c001200e:	74 1e                	je     c001202e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x81>
c0012010:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012015:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001201a:	c1 e3 08             	shl    ebx,0x8
c001201d:	09 d8                	or     eax,ebx
c001201f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012024:	c1 e3 10             	shl    ebx,0x10
c0012027:	09 c3                	or     ebx,eax
c0012029:	eb ba                	jmp    c0011fe5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x38>
c001202b:	83 cb ff             	or     ebx,0xffffffff
c001202e:	89 d8                	mov    eax,ebx
c0012030:	83 c4 44             	add    esp,0x44
c0012033:	5b                   	pop    ebx
c0012034:	5e                   	pop    esi
c0012035:	c3                   	ret    

c0012036 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012036:	57                   	push   edi
c0012037:	56                   	push   esi
c0012038:	53                   	push   ebx
c0012039:	83 ec 34             	sub    esp,0x34
c001203c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012040:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012044:	6a 2b                	push   0x2b
c0012046:	6a 00                	push   0x0
c0012048:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001204c:	53                   	push   ebx
c001204d:	e8 7e e4 fe ff       	call   c00004d0 <memset>
c0012052:	58                   	pop    eax
c0012053:	5a                   	pop    edx
c0012054:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012058:	50                   	push   eax
c0012059:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001205d:	e8 43 fd ff ff       	call   c0011da5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012062:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012066:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001206a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001206e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012072:	53                   	push   ebx
c0012073:	6a 00                	push   0x0
c0012075:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012079:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001207d:	e8 ef f8 ff ff       	call   c0011971 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012082:	83 c4 50             	add    esp,0x50
c0012085:	5b                   	pop    ebx
c0012086:	5e                   	pop    esi
c0012087:	5f                   	pop    edi
c0012088:	c3                   	ret    

c0012089 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012089:	57                   	push   edi
c001208a:	56                   	push   esi
c001208b:	53                   	push   ebx
c001208c:	83 ec 38             	sub    esp,0x38
c001208f:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0012093:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0012097:	57                   	push   edi
c0012098:	68 5a 00 02 c0       	push   0xc002005a
c001209d:	e8 68 85 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00120a2:	83 c4 0c             	add    esp,0xc
c00120a5:	6a 2b                	push   0x2b
c00120a7:	6a 00                	push   0x0
c00120a9:	8d 74 24 11          	lea    esi,[esp+0x11]
c00120ad:	56                   	push   esi
c00120ae:	e8 1d e4 fe ff       	call   c00004d0 <memset>
c00120b3:	58                   	pop    eax
c00120b4:	5a                   	pop    edx
c00120b5:	8d 44 24 11          	lea    eax,[esp+0x11]
c00120b9:	50                   	push   eax
c00120ba:	57                   	push   edi
c00120bb:	e8 e5 fc ff ff       	call   c0011da5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00120c0:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00120c5:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00120ca:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00120cf:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00120d4:	56                   	push   esi
c00120d5:	6a 00                	push   0x0
c00120d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120db:	53                   	push   ebx
c00120dc:	e8 90 f8 ff ff       	call   c0011971 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00120e1:	83 c4 1c             	add    esp,0x1c
c00120e4:	89 c7                	mov    edi,eax
c00120e6:	56                   	push   esi
c00120e7:	50                   	push   eax
c00120e8:	53                   	push   ebx
c00120e9:	e8 5d f5 ff ff       	call   c001164b <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120ee:	59                   	pop    ecx
c00120ef:	58                   	pop    eax
c00120f0:	6a 6c                	push   0x6c
c00120f2:	6a 00                	push   0x0
c00120f4:	6a 00                	push   0x0
c00120f6:	68 6b 00 02 c0       	push   0xc002006b
c00120fb:	57                   	push   edi
c00120fc:	53                   	push   ebx
c00120fd:	e8 34 ff ff ff       	call   c0012036 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012102:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012106:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001210a:	c1 e8 10             	shr    eax,0x10
c001210d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012111:	83 c4 1c             	add    esp,0x1c
c0012114:	56                   	push   esi
c0012115:	57                   	push   edi
c0012116:	53                   	push   ebx
c0012117:	e8 85 f6 ff ff       	call   c00117a1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001211c:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012121:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012126:	c1 e0 08             	shl    eax,0x8
c0012129:	09 c2                	or     edx,eax
c001212b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012130:	83 c4 40             	add    esp,0x40
c0012133:	c1 e0 10             	shl    eax,0x10
c0012136:	5b                   	pop    ebx
c0012137:	09 d0                	or     eax,edx
c0012139:	5e                   	pop    esi
c001213a:	5f                   	pop    edi
c001213b:	c3                   	ret    

c001213c <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c001213c:	57                   	push   edi
c001213d:	56                   	push   esi
c001213e:	53                   	push   ebx
c001213f:	81 ec 08 01 00 00    	sub    esp,0x108
c0012145:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001214c:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012153:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012157:	53                   	push   ebx
c0012158:	e8 a3 e4 fe ff       	call   c0000600 <strcpy>
c001215d:	5e                   	pop    esi
c001215e:	58                   	pop    eax
c001215f:	53                   	push   ebx
c0012160:	68 71 00 02 c0       	push   0xc0020071
c0012165:	e8 a0 84 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001216a:	58                   	pop    eax
c001216b:	5a                   	pop    edx
c001216c:	68 4c 03 02 c0       	push   0xc002034c
c0012171:	53                   	push   ebx
c0012172:	e8 39 e4 fe ff       	call   c00005b0 <strtok>
c0012177:	59                   	pop    ecx
c0012178:	89 c3                	mov    ebx,eax
c001217a:	5e                   	pop    esi
c001217b:	50                   	push   eax
c001217c:	68 8a 00 02 c0       	push   0xc002008a
c0012181:	e8 84 84 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012186:	83 c4 0c             	add    esp,0xc
c0012189:	53                   	push   ebx
c001218a:	6a 01                	push   0x1
c001218c:	57                   	push   edi
c001218d:	e8 1b fe ff ff       	call   c0011fad <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012192:	89 c3                	mov    ebx,eax
c0012194:	58                   	pop    eax
c0012195:	5a                   	pop    edx
c0012196:	68 4c 03 02 c0       	push   0xc002034c
c001219b:	6a 00                	push   0x0
c001219d:	e8 0e e4 fe ff       	call   c00005b0 <strtok>
c00121a2:	59                   	pop    ecx
c00121a3:	89 c6                	mov    esi,eax
c00121a5:	58                   	pop    eax
c00121a6:	56                   	push   esi
c00121a7:	68 93 00 02 c0       	push   0xc0020093
c00121ac:	e8 59 84 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00121b1:	83 c4 10             	add    esp,0x10
c00121b4:	85 f6                	test   esi,esi
c00121b6:	74 38                	je     c00121f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0xb4>
c00121b8:	51                   	push   ecx
c00121b9:	51                   	push   ecx
c00121ba:	53                   	push   ebx
c00121bb:	57                   	push   edi
c00121bc:	e8 6f f5 ff ff       	call   c0011730 <CmEnterDirectory(Reghive_Tag*, int)>
c00121c1:	83 c4 10             	add    esp,0x10
c00121c4:	89 c3                	mov    ebx,eax
c00121c6:	83 f8 ff             	cmp    eax,0xffffffff
c00121c9:	74 25                	je     c00121f0 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0xb4>
c00121cb:	50                   	push   eax
c00121cc:	56                   	push   esi
c00121cd:	53                   	push   ebx
c00121ce:	57                   	push   edi
c00121cf:	e8 d9 fd ff ff       	call   c0011fad <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00121d4:	5a                   	pop    edx
c00121d5:	89 c3                	mov    ebx,eax
c00121d7:	59                   	pop    ecx
c00121d8:	68 4c 03 02 c0       	push   0xc002034c
c00121dd:	6a 00                	push   0x0
c00121df:	e8 cc e3 fe ff       	call   c00005b0 <strtok>
c00121e4:	89 c6                	mov    esi,eax
c00121e6:	58                   	pop    eax
c00121e7:	5a                   	pop    edx
c00121e8:	56                   	push   esi
c00121e9:	68 9c 00 02 c0       	push   0xc002009c
c00121ee:	eb bc                	jmp    c00121ac <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x70>
c00121f0:	81 c4 00 01 00 00    	add    esp,0x100
c00121f6:	89 d8                	mov    eax,ebx
c00121f8:	5b                   	pop    ebx
c00121f9:	5e                   	pop    esi
c00121fa:	5f                   	pop    edi
c00121fb:	c3                   	ret    

c00121fc <tree(Reghive_Tag*, int, int)>:
c00121fc:	55                   	push   ebp
c00121fd:	57                   	push   edi
c00121fe:	56                   	push   esi
c00121ff:	53                   	push   ebx
c0012200:	83 ec 5c             	sub    esp,0x5c
c0012203:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012207:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001220b:	85 db                	test   ebx,ebx
c001220d:	0f 8e 84 00 00 00    	jle    c0012297 <tree(Reghive_Tag*, int, int)+0x9b>
c0012213:	31 ed                	xor    ebp,ebp
c0012215:	57                   	push   edi
c0012216:	6a 32                	push   0x32
c0012218:	6a 00                	push   0x0
c001221a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001221e:	57                   	push   edi
c001221f:	e8 ac e2 fe ff       	call   c00004d0 <memset>
c0012224:	83 c4 0c             	add    esp,0xc
c0012227:	57                   	push   edi
c0012228:	53                   	push   ebx
c0012229:	56                   	push   esi
c001222a:	e8 48 fb ff ff       	call   c0011d77 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001222f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012233:	83 c4 10             	add    esp,0x10
c0012236:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001223a:	7d 13                	jge    c001224f <tree(Reghive_Tag*, int, int)+0x53>
c001223c:	83 ec 0c             	sub    esp,0xc
c001223f:	45                   	inc    ebp
c0012240:	68 bc 06 02 c0       	push   0xc00206bc
c0012245:	e8 c0 83 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001224a:	83 c4 10             	add    esp,0x10
c001224d:	eb e7                	jmp    c0012236 <tree(Reghive_Tag*, int, int)+0x3a>
c001224f:	51                   	push   ecx
c0012250:	57                   	push   edi
c0012251:	53                   	push   ebx
c0012252:	68 a5 00 02 c0       	push   0xc00200a5
c0012257:	e8 ae 83 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001225c:	83 c4 10             	add    esp,0x10
c001225f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012264:	75 1e                	jne    c0012284 <tree(Reghive_Tag*, int, int)+0x88>
c0012266:	52                   	push   edx
c0012267:	52                   	push   edx
c0012268:	53                   	push   ebx
c0012269:	56                   	push   esi
c001226a:	e8 c1 f4 ff ff       	call   c0011730 <CmEnterDirectory(Reghive_Tag*, int)>
c001226f:	83 c4 0c             	add    esp,0xc
c0012272:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012276:	8d 51 04             	lea    edx,[ecx+0x4]
c0012279:	52                   	push   edx
c001227a:	50                   	push   eax
c001227b:	56                   	push   esi
c001227c:	e8 7b ff ff ff       	call   c00121fc <tree(Reghive_Tag*, int, int)>
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	50                   	push   eax
c0012285:	50                   	push   eax
c0012286:	53                   	push   ebx
c0012287:	56                   	push   esi
c0012288:	e8 e2 f4 ff ff       	call   c001176f <CmGetNext(Reghive_Tag*, int)>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	89 c3                	mov    ebx,eax
c0012292:	e9 74 ff ff ff       	jmp    c001220b <tree(Reghive_Tag*, int, int)+0xf>
c0012297:	83 c4 5c             	add    esp,0x5c
c001229a:	5b                   	pop    ebx
c001229b:	5e                   	pop    esi
c001229c:	5f                   	pop    edi
c001229d:	5d                   	pop    ebp
c001229e:	c3                   	ret    

c001229f <CmSplitFinalSlashInPlace(char*)>:
c001229f:	53                   	push   ebx
c00122a0:	83 ec 14             	sub    esp,0x14
c00122a3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00122a7:	53                   	push   ebx
c00122a8:	e8 93 e2 fe ff       	call   c0000540 <strlen>
c00122ad:	83 c4 10             	add    esp,0x10
c00122b0:	48                   	dec    eax
c00122b1:	85 c0                	test   eax,eax
c00122b3:	74 15                	je     c00122ca <CmSplitFinalSlashInPlace(char*)+0x2b>
c00122b5:	8d 14 03             	lea    edx,[ebx+eax*1]
c00122b8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00122bc:	75 09                	jne    c00122c7 <CmSplitFinalSlashInPlace(char*)+0x28>
c00122be:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00122c1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00122c5:	eb 05                	jmp    c00122cc <CmSplitFinalSlashInPlace(char*)+0x2d>
c00122c7:	48                   	dec    eax
c00122c8:	eb e7                	jmp    c00122b1 <CmSplitFinalSlashInPlace(char*)+0x12>
c00122ca:	31 c0                	xor    eax,eax
c00122cc:	83 c4 08             	add    esp,0x8
c00122cf:	5b                   	pop    ebx
c00122d0:	c3                   	ret    

c00122d1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00122d1:	55                   	push   ebp
c00122d2:	57                   	push   edi
c00122d3:	56                   	push   esi
c00122d4:	53                   	push   ebx
c00122d5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00122db:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00122e2:	8a 1e                	mov    bl,BYTE PTR [esi]
c00122e4:	8d 6e 01             	lea    ebp,[esi+0x1]
c00122e7:	80 fb 40             	cmp    bl,0x40
c00122ea:	75 1b                	jne    c0012307 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00122ec:	8a 16                	mov    dl,BYTE PTR [esi]
c00122ee:	84 d2                	test   dl,dl
c00122f0:	0f 84 f1 00 00 00    	je     c00123e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00122f6:	8d 46 01             	lea    eax,[esi+0x1]
c00122f9:	80 fa 3a             	cmp    dl,0x3a
c00122fc:	74 04                	je     c0012302 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00122fe:	89 c6                	mov    esi,eax
c0012300:	eb ea                	jmp    c00122ec <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012302:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012305:	89 c6                	mov    esi,eax
c0012307:	50                   	push   eax
c0012308:	6a 40                	push   0x40
c001230a:	6a 00                	push   0x0
c001230c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012310:	50                   	push   eax
c0012311:	e8 ba e1 fe ff       	call   c00004d0 <memset>
c0012316:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001231d:	31 c0                	xor    eax,eax
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012324:	84 c9                	test   cl,cl
c0012326:	0f 84 bb 00 00 00    	je     c00123e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001232c:	3d c7 00 00 00       	cmp    eax,0xc7
c0012331:	0f 8f b0 00 00 00    	jg     c00123e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012337:	80 f9 0a             	cmp    cl,0xa
c001233a:	0f 85 98 00 00 00    	jne    c00123d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0012340:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012345:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012349:	a8 df                	test   al,0xdf
c001234b:	0f 94 c1             	sete   cl
c001234e:	3c 23                	cmp    al,0x23
c0012350:	0f 94 c2             	sete   dl
c0012353:	08 d1                	or     cl,dl
c0012355:	75 4a                	jne    c00123a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012357:	8d 50 f7             	lea    edx,[eax-0x9]
c001235a:	80 fa 01             	cmp    dl,0x1
c001235d:	76 42                	jbe    c00123a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001235f:	3c 5b                	cmp    al,0x5b
c0012361:	75 42                	jne    c00123a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012363:	80 fb 40             	cmp    bl,0x40
c0012366:	75 39                	jne    c00123a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012368:	83 ec 0c             	sub    esp,0xc
c001236b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001236f:	52                   	push   edx
c0012370:	e8 cb e1 fe ff       	call   c0000540 <strlen>
c0012375:	83 c4 10             	add    esp,0x10
c0012378:	83 f8 3f             	cmp    eax,0x3f
c001237b:	77 6a                	ja     c00123e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001237d:	50                   	push   eax
c001237e:	50                   	push   eax
c001237f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012383:	52                   	push   edx
c0012384:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012388:	52                   	push   edx
c0012389:	e8 72 e2 fe ff       	call   c0000600 <strcpy>
c001238e:	58                   	pop    eax
c001238f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012393:	52                   	push   edx
c0012394:	e8 a7 e1 fe ff       	call   c0000540 <strlen>
c0012399:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001239e:	83 c4 10             	add    esp,0x10
c00123a1:	31 d2                	xor    edx,edx
c00123a3:	eb 3a                	jmp    c00123df <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00123a5:	80 fb 40             	cmp    bl,0x40
c00123a8:	74 06                	je     c00123b0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00123aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00123ae:	eb 20                	jmp    c00123d0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00123b0:	50                   	push   eax
c00123b1:	50                   	push   eax
c00123b2:	55                   	push   ebp
c00123b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00123b7:	50                   	push   eax
c00123b8:	e8 23 e3 fe ff       	call   c00006e0 <strcmp>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	85 c0                	test   eax,eax
c00123c2:	75 dd                	jne    c00123a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00123c4:	eb e4                	jmp    c00123aa <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00123c6:	8d 50 01             	lea    edx,[eax+0x1]
c00123c9:	80 f9 3d             	cmp    cl,0x3d
c00123cc:	74 1d                	je     c00123eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00123ce:	89 d0                	mov    eax,edx
c00123d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00123d2:	84 c9                	test   cl,cl
c00123d4:	75 f0                	jne    c00123c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00123d6:	eb 0f                	jmp    c00123e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00123d8:	8d 50 01             	lea    edx,[eax+0x1]
c00123db:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00123df:	47                   	inc    edi
c00123e0:	89 d0                	mov    eax,edx
c00123e2:	e9 3b ff ff ff       	jmp    c0012322 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00123e7:	31 c0                	xor    eax,eax
c00123e9:	eb 33                	jmp    c001241e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00123eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123ef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00123f2:	50                   	push   eax
c00123f3:	50                   	push   eax
c00123f4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00123f8:	50                   	push   eax
c00123f9:	56                   	push   esi
c00123fa:	e8 e1 e2 fe ff       	call   c00006e0 <strcmp>
c00123ff:	83 c4 10             	add    esp,0x10
c0012402:	85 c0                	test   eax,eax
c0012404:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012408:	75 97                	jne    c00123a1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001240a:	51                   	push   ecx
c001240b:	51                   	push   ecx
c001240c:	52                   	push   edx
c001240d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012414:	e8 e7 e1 fe ff       	call   c0000600 <strcpy>
c0012419:	83 c4 10             	add    esp,0x10
c001241c:	b0 01                	mov    al,0x1
c001241e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012424:	5b                   	pop    ebx
c0012425:	5e                   	pop    esi
c0012426:	5f                   	pop    edi
c0012427:	5d                   	pop    ebp
c0012428:	c3                   	ret    

c0012429 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012429:	57                   	push   edi
c001242a:	56                   	push   esi
c001242b:	53                   	push   ebx
c001242c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012432:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012439:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012440:	53                   	push   ebx
c0012441:	e8 fa e0 fe ff       	call   c0000540 <strlen>
c0012446:	89 34 24             	mov    DWORD PTR [esp],esi
c0012449:	89 c7                	mov    edi,eax
c001244b:	e8 f0 e0 fe ff       	call   c0000540 <strlen>
c0012450:	83 c4 10             	add    esp,0x10
c0012453:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012457:	3d ff 00 00 00       	cmp    eax,0xff
c001245c:	0f 87 d3 00 00 00    	ja     c0012535 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012462:	57                   	push   edi
c0012463:	57                   	push   edi
c0012464:	56                   	push   esi
c0012465:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012469:	56                   	push   esi
c001246a:	e8 91 e1 fe ff       	call   c0000600 <strcpy>
c001246f:	58                   	pop    eax
c0012470:	5a                   	pop    edx
c0012471:	68 4c 03 02 c0       	push   0xc002034c
c0012476:	56                   	push   esi
c0012477:	e8 44 e3 fe ff       	call   c00007c0 <strcat>
c001247c:	59                   	pop    ecx
c001247d:	5f                   	pop    edi
c001247e:	53                   	push   ebx
c001247f:	56                   	push   esi
c0012480:	e8 3b e3 fe ff       	call   c00007c0 <strcat>
c0012485:	58                   	pop    eax
c0012486:	5a                   	pop    edx
c0012487:	68 af 00 02 c0       	push   0xc00200af
c001248c:	56                   	push   esi
c001248d:	e8 2e e3 fe ff       	call   c00007c0 <strcat>
c0012492:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012499:	e8 d7 53 ff ff       	call   c0007875 <malloc>
c001249e:	83 c4 0c             	add    esp,0xc
c00124a1:	89 c3                	mov    ebx,eax
c00124a3:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00124a9:	56                   	push   esi
c00124aa:	50                   	push   eax
c00124ab:	e8 d0 86 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c00124b0:	83 c4 10             	add    esp,0x10
c00124b3:	85 db                	test   ebx,ebx
c00124b5:	74 7e                	je     c0012535 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00124b7:	51                   	push   ecx
c00124b8:	51                   	push   ecx
c00124b9:	6a 01                	push   0x1
c00124bb:	53                   	push   ebx
c00124bc:	e8 7f 87 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	85 c0                	test   eax,eax
c00124c6:	74 08                	je     c00124d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124cd:	53                   	push   ebx
c00124ce:	eb 5f                	jmp    c001252f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00124d0:	52                   	push   edx
c00124d1:	8d 44 24 17          	lea    eax,[esp+0x17]
c00124d5:	50                   	push   eax
c00124d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00124da:	50                   	push   eax
c00124db:	53                   	push   ebx
c00124dc:	e8 0b 8a ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c00124e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124e5:	83 c4 10             	add    esp,0x10
c00124e8:	89 c1                	mov    ecx,eax
c00124ea:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00124ee:	74 31                	je     c0012521 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	50                   	push   eax
c00124f4:	e8 7c 53 ff ff       	call   c0007875 <malloc>
c00124f9:	89 c6                	mov    esi,eax
c00124fb:	58                   	pop    eax
c00124fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124fe:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012502:	52                   	push   edx
c0012503:	56                   	push   esi
c0012504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012508:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001250c:	53                   	push   ebx
c001250d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012510:	83 c4 20             	add    esp,0x20
c0012513:	85 c0                	test   eax,eax
c0012515:	75 0a                	jne    c0012521 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001251b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001251f:	74 18                	je     c0012539 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012521:	83 ec 0c             	sub    esp,0xc
c0012524:	53                   	push   ebx
c0012525:	e8 74 87 ff ff       	call   c000ac9e <File::close()>
c001252a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001252c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001252f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012532:	83 c4 10             	add    esp,0x10
c0012535:	31 c0                	xor    eax,eax
c0012537:	eb 3b                	jmp    c0012574 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	53                   	push   ebx
c001253d:	e8 5c 87 ff ff       	call   c000ac9e <File::close()>
c0012542:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012544:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012547:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001254a:	83 c4 0c             	add    esp,0xc
c001254d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012554:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001255b:	56                   	push   esi
c001255c:	e8 70 fd ff ff       	call   c00122d1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012561:	89 34 24             	mov    DWORD PTR [esp],esi
c0012564:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012568:	e8 18 53 ff ff       	call   c0007885 <free>
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012574:	81 c4 20 01 00 00    	add    esp,0x120
c001257a:	5b                   	pop    ebx
c001257b:	5e                   	pop    esi
c001257c:	5f                   	pop    edi
c001257d:	c3                   	ret    

c001257e <Reg::getLine(char*, char*, char*)>:
c001257e:	57                   	push   edi
c001257f:	56                   	push   esi
c0012580:	53                   	push   ebx
c0012581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012585:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012589:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001258d:	57                   	push   edi
c001258e:	56                   	push   esi
c001258f:	53                   	push   ebx
c0012590:	68 b4 00 02 c0       	push   0xc00200b4
c0012595:	e8 8f fe ff ff       	call   c0012429 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001259a:	83 c4 10             	add    esp,0x10
c001259d:	84 c0                	test   al,al
c001259f:	75 10                	jne    c00125b1 <Reg::getLine(char*, char*, char*)+0x33>
c00125a1:	57                   	push   edi
c00125a2:	56                   	push   esi
c00125a3:	53                   	push   ebx
c00125a4:	68 d9 00 02 c0       	push   0xc00200d9
c00125a9:	e8 7b fe ff ff       	call   c0012429 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00125ae:	83 c4 10             	add    esp,0x10
c00125b1:	5b                   	pop    ebx
c00125b2:	5e                   	pop    esi
c00125b3:	5f                   	pop    edi
c00125b4:	c3                   	ret    

c00125b5 <Reg::readInt(char*, char*, int*)>:
c00125b5:	55                   	push   ebp
c00125b6:	57                   	push   edi
c00125b7:	56                   	push   esi
c00125b8:	53                   	push   ebx
c00125b9:	81 ec f0 00 00 00    	sub    esp,0xf0
c00125bf:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00125c3:	57                   	push   edi
c00125c4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00125cb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00125d2:	e8 a7 ff ff ff       	call   c001257e <Reg::getLine(char*, char*, char*)>
c00125d7:	83 c4 10             	add    esp,0x10
c00125da:	84 c0                	test   al,al
c00125dc:	0f 84 b3 00 00 00    	je     c0012695 <Reg::readInt(char*, char*, int*)+0xe0>
c00125e2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00125e6:	80 fa 2b             	cmp    dl,0x2b
c00125e9:	74 0c                	je     c00125f7 <Reg::readInt(char*, char*, int*)+0x42>
c00125eb:	80 fa 2d             	cmp    dl,0x2d
c00125ee:	75 0e                	jne    c00125fe <Reg::readInt(char*, char*, int*)+0x49>
c00125f0:	ba 01 00 00 00       	mov    edx,0x1
c00125f5:	eb 0b                	jmp    c0012602 <Reg::readInt(char*, char*, int*)+0x4d>
c00125f7:	ba 01 00 00 00       	mov    edx,0x1
c00125fc:	eb 02                	jmp    c0012600 <Reg::readInt(char*, char*, int*)+0x4b>
c00125fe:	31 d2                	xor    edx,edx
c0012600:	31 c0                	xor    eax,eax
c0012602:	be 0a 00 00 00       	mov    esi,0xa
c0012607:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001260c:	75 20                	jne    c001262e <Reg::readInt(char*, char*, int*)+0x79>
c001260e:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012612:	80 f9 78             	cmp    cl,0x78
c0012615:	75 0a                	jne    c0012621 <Reg::readInt(char*, char*, int*)+0x6c>
c0012617:	83 c2 02             	add    edx,0x2
c001261a:	be 10 00 00 00       	mov    esi,0x10
c001261f:	eb 0d                	jmp    c001262e <Reg::readInt(char*, char*, int*)+0x79>
c0012621:	80 f9 62             	cmp    cl,0x62
c0012624:	75 08                	jne    c001262e <Reg::readInt(char*, char*, int*)+0x79>
c0012626:	83 c2 02             	add    edx,0x2
c0012629:	be 02 00 00 00       	mov    esi,0x2
c001262e:	01 d7                	add    edi,edx
c0012630:	31 d2                	xor    edx,edx
c0012632:	8a 1f                	mov    bl,BYTE PTR [edi]
c0012634:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0012638:	80 fb 0d             	cmp    bl,0xd
c001263b:	0f 94 c3             	sete   bl
c001263e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012643:	0f 94 c1             	sete   cl
c0012646:	08 cb                	or     bl,cl
c0012648:	75 3a                	jne    c0012684 <Reg::readInt(char*, char*, int*)+0xcf>
c001264a:	0f af d6             	imul   edx,esi
c001264d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0012652:	83 fe 10             	cmp    esi,0x10
c0012655:	75 26                	jne    c001267d <Reg::readInt(char*, char*, int*)+0xc8>
c0012657:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001265b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001265e:	89 e9                	mov    ecx,ebp
c0012660:	80 f9 05             	cmp    cl,0x5
c0012663:	77 06                	ja     c001266b <Reg::readInt(char*, char*, int*)+0xb6>
c0012665:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012669:	eb 16                	jmp    c0012681 <Reg::readInt(char*, char*, int*)+0xcc>
c001266b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001266f:	83 e9 61             	sub    ecx,0x61
c0012672:	80 f9 05             	cmp    cl,0x5
c0012675:	77 06                	ja     c001267d <Reg::readInt(char*, char*, int*)+0xc8>
c0012677:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001267b:	eb 04                	jmp    c0012681 <Reg::readInt(char*, char*, int*)+0xcc>
c001267d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012681:	47                   	inc    edi
c0012682:	eb ae                	jmp    c0012632 <Reg::readInt(char*, char*, int*)+0x7d>
c0012684:	84 c0                	test   al,al
c0012686:	74 02                	je     c001268a <Reg::readInt(char*, char*, int*)+0xd5>
c0012688:	f7 da                	neg    edx
c001268a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012691:	89 10                	mov    DWORD PTR [eax],edx
c0012693:	88 d8                	mov    al,bl
c0012695:	81 c4 ec 00 00 00    	add    esp,0xec
c001269b:	5b                   	pop    ebx
c001269c:	5e                   	pop    esi
c001269d:	5f                   	pop    edi
c001269e:	5d                   	pop    ebp
c001269f:	c3                   	ret    

c00126a0 <Reg::readString(char*, char*, char*, int)>:
c00126a0:	57                   	push   edi
c00126a1:	56                   	push   esi
c00126a2:	53                   	push   ebx
c00126a3:	81 ec d4 00 00 00    	sub    esp,0xd4
c00126a9:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00126b0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00126b4:	57                   	push   edi
c00126b5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00126bc:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00126c3:	e8 b6 fe ff ff       	call   c001257e <Reg::getLine(char*, char*, char*)>
c00126c8:	83 c4 10             	add    esp,0x10
c00126cb:	89 c6                	mov    esi,eax
c00126cd:	84 c0                	test   al,al
c00126cf:	74 44                	je     c0012715 <Reg::readString(char*, char*, char*, int)+0x75>
c00126d1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00126d8:	31 c0                	xor    eax,eax
c00126da:	4a                   	dec    edx
c00126db:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00126de:	84 c9                	test   cl,cl
c00126e0:	74 0f                	je     c00126f1 <Reg::readString(char*, char*, char*, int)+0x51>
c00126e2:	39 c2                	cmp    edx,eax
c00126e4:	7e 0b                	jle    c00126f1 <Reg::readString(char*, char*, char*, int)+0x51>
c00126e6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00126e9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00126ee:	40                   	inc    eax
c00126ef:	eb ea                	jmp    c00126db <Reg::readString(char*, char*, char*, int)+0x3b>
c00126f1:	83 ec 0c             	sub    esp,0xc
c00126f4:	53                   	push   ebx
c00126f5:	e8 46 de fe ff       	call   c0000540 <strlen>
c00126fa:	83 c4 10             	add    esp,0x10
c00126fd:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012702:	75 11                	jne    c0012715 <Reg::readString(char*, char*, char*, int)+0x75>
c0012704:	83 ec 0c             	sub    esp,0xc
c0012707:	53                   	push   ebx
c0012708:	e8 33 de fe ff       	call   c0000540 <strlen>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012715:	81 c4 d0 00 00 00    	add    esp,0xd0
c001271b:	89 f0                	mov    eax,esi
c001271d:	5b                   	pop    ebx
c001271e:	5e                   	pop    esi
c001271f:	5f                   	pop    edi
c0012720:	c3                   	ret    

c0012721 <Reg::readBool(char*, char*, bool*)>:
c0012721:	83 ec 20             	sub    esp,0x20
c0012724:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012728:	50                   	push   eax
c0012729:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001272d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012731:	e8 7f fe ff ff       	call   c00125b5 <Reg::readInt(char*, char*, int*)>
c0012736:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001273b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001273f:	0f 95 02             	setne  BYTE PTR [edx]
c0012742:	83 c4 2c             	add    esp,0x2c
c0012745:	c3                   	ret    

c0012746 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012746:	53                   	push   ebx
c0012747:	83 ec 1c             	sub    esp,0x1c
c001274a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001274e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012752:	50                   	push   eax
c0012753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012757:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001275b:	e8 c1 ff ff ff       	call   c0012721 <Reg::readBool(char*, char*, bool*)>
c0012760:	83 c4 10             	add    esp,0x10
c0012763:	84 c0                	test   al,al
c0012765:	74 04                	je     c001276b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012767:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001276b:	88 d8                	mov    al,bl
c001276d:	83 c4 18             	add    esp,0x18
c0012770:	5b                   	pop    ebx
c0012771:	c3                   	ret    

c0012772 <Reg::readIntWithDefault(char*, char*, int)>:
c0012772:	53                   	push   ebx
c0012773:	83 ec 1c             	sub    esp,0x1c
c0012776:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001277a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001277e:	50                   	push   eax
c001277f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012787:	e8 29 fe ff ff       	call   c00125b5 <Reg::readInt(char*, char*, int*)>
c001278c:	83 c4 10             	add    esp,0x10
c001278f:	84 c0                	test   al,al
c0012791:	74 04                	je     c0012797 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012793:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012797:	89 d8                	mov    eax,ebx
c0012799:	83 c4 18             	add    esp,0x18
c001279c:	5b                   	pop    ebx
c001279d:	c3                   	ret    

c001279e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001279e:	57                   	push   edi
c001279f:	56                   	push   esi
c00127a0:	56                   	push   esi
c00127a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00127a9:	56                   	push   esi
c00127aa:	57                   	push   edi
c00127ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b3:	e8 e8 fe ff ff       	call   c00126a0 <Reg::readString(char*, char*, char*, int)>
c00127b8:	83 c4 10             	add    esp,0x10
c00127bb:	84 c0                	test   al,al
c00127bd:	75 1a                	jne    c00127d9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00127bf:	51                   	push   ecx
c00127c0:	56                   	push   esi
c00127c1:	6a 00                	push   0x0
c00127c3:	57                   	push   edi
c00127c4:	e8 07 dd fe ff       	call   c00004d0 <memset>
c00127c9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00127cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00127d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127d2:	83 c4 10             	add    esp,0x10
c00127d5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00127d9:	89 f8                	mov    eax,edi
c00127db:	5a                   	pop    edx
c00127dc:	5e                   	pop    esi
c00127dd:	5f                   	pop    edi
c00127de:	c3                   	ret    

c00127df <SysEject(regs*)>:
c00127df:	83 ec 0c             	sub    esp,0xc
c00127e2:	83 ca ff             	or     edx,0xffffffff
c00127e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00127ec:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00127f1:	83 e9 41             	sub    ecx,0x41
c00127f4:	83 f9 19             	cmp    ecx,0x19
c00127f7:	77 18                	ja     c0012811 <SysEject(regs*)+0x32>
c00127f9:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012800:	85 c9                	test   ecx,ecx
c0012802:	74 0d                	je     c0012811 <SysEject(regs*)+0x32>
c0012804:	83 ec 0c             	sub    esp,0xc
c0012807:	51                   	push   ecx
c0012808:	e8 b3 a4 ff ff       	call   c000ccc0 <LogicalDisk::eject()>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	99                   	cdq    
c0012811:	83 c4 0c             	add    esp,0xc
c0012814:	c3                   	ret    

c0012815 <SysExit(regs*)>:
c0012815:	83 ec 18             	sub    esp,0x18
c0012818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001281c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001281f:	e8 14 27 00 00       	call   c0014f38 <terminateTask(int)>
c0012824:	83 c8 ff             	or     eax,0xffffffff
c0012827:	83 c4 1c             	add    esp,0x1c
c001282a:	89 c2                	mov    edx,eax
c001282c:	c3                   	ret    

c001282d <SysGetCwd(regs*)>:
c001282d:	83 ec 10             	sub    esp,0x10
c0012830:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012834:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012837:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001283a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001283f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012842:	e8 3b 81 ff ff       	call   c000a982 <Fs::getcwd(Process*, char*, int)>
c0012847:	83 c4 1c             	add    esp,0x1c
c001284a:	99                   	cdq    
c001284b:	c3                   	ret    

c001284c <SysGetPID(regs*)>:
c001284c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012851:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012854:	8b 00                	mov    eax,DWORD PTR [eax]
c0012856:	99                   	cdq    
c0012857:	c3                   	ret    

c0012858 <SysGetRAMData(regs*)>:
c0012858:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c001285e:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012868:	99                   	cdq    
c0012869:	f7 f9                	idiv   ecx
c001286b:	c1 e0 18             	shl    eax,0x18
c001286e:	09 c8                	or     eax,ecx
c0012870:	99                   	cdq    
c0012871:	c3                   	ret    

c0012872 <SysGetVGAPtr(regs*)>:
c0012872:	55                   	push   ebp
c0012873:	57                   	push   edi
c0012874:	56                   	push   esi
c0012875:	53                   	push   ebx
c0012876:	83 ec 18             	sub    esp,0x18
c0012879:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001287d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012880:	e8 b3 21 00 00       	call   c0014a38 <Thr::processFromPID(int)>
c0012885:	83 c4 10             	add    esp,0x10
c0012888:	89 c1                	mov    ecx,eax
c001288a:	b8 01 00 00 00       	mov    eax,0x1
c001288f:	85 c9                	test   ecx,ecx
c0012891:	74 57                	je     c00128ea <SysGetVGAPtr(regs*)+0x78>
c0012893:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012899:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001289d:	74 0c                	je     c00128ab <SysGetVGAPtr(regs*)+0x39>
c001289f:	83 ec 0c             	sub    esp,0xc
c00128a2:	55                   	push   ebp
c00128a3:	e8 05 5c ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00128ae:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00128b1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00128b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00128bb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128be:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00128c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128c7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00128ca:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00128d0:	50                   	push   eax
c00128d1:	50                   	push   eax
c00128d2:	68 f4 00 02 c0       	push   0xc00200f4
c00128d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128da:	05 a8 0f 00 00       	add    eax,0xfa8
c00128df:	50                   	push   eax
c00128e0:	e8 1b dd fe ff       	call   c0000600 <strcpy>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	31 c0                	xor    eax,eax
c00128ea:	83 c4 0c             	add    esp,0xc
c00128ed:	31 d2                	xor    edx,edx
c00128ef:	5b                   	pop    ebx
c00128f0:	5e                   	pop    esi
c00128f1:	5f                   	pop    edi
c00128f2:	5d                   	pop    ebp
c00128f3:	c3                   	ret    

c00128f4 <SysLoadDLL(regs*)>:
c00128f4:	56                   	push   esi
c00128f5:	53                   	push   ebx
c00128f6:	31 d2                	xor    edx,edx
c00128f8:	51                   	push   ecx
c00128f9:	b8 01 00 00 00       	mov    eax,0x1
c00128fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012902:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012906:	0f 84 8c 00 00 00    	je     c0012998 <SysLoadDLL(regs*)+0xa4>
c001290c:	83 ec 0c             	sub    esp,0xc
c001290f:	68 14 01 00 00       	push   0x114
c0012914:	e8 5c 4f ff ff       	call   c0007875 <malloc>
c0012919:	83 c4 0c             	add    esp,0xc
c001291c:	89 c3                	mov    ebx,eax
c001291e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012923:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012926:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012929:	53                   	push   ebx
c001292a:	e8 51 82 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001292f:	83 c4 10             	add    esp,0x10
c0012932:	31 d2                	xor    edx,edx
c0012934:	b8 02 00 00 00       	mov    eax,0x2
c0012939:	85 db                	test   ebx,ebx
c001293b:	74 5b                	je     c0012998 <SysLoadDLL(regs*)+0xa4>
c001293d:	83 ec 0c             	sub    esp,0xc
c0012940:	53                   	push   ebx
c0012941:	e8 68 85 ff ff       	call   c000aeae <File::exists()>
c0012946:	83 c4 10             	add    esp,0x10
c0012949:	84 c0                	test   al,al
c001294b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001294d:	75 11                	jne    c0012960 <SysLoadDLL(regs*)+0x6c>
c001294f:	83 ec 0c             	sub    esp,0xc
c0012952:	53                   	push   ebx
c0012953:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012956:	83 c4 10             	add    esp,0x10
c0012959:	b8 03 00 00 00       	mov    eax,0x3
c001295e:	eb 36                	jmp    c0012996 <SysLoadDLL(regs*)+0xa2>
c0012960:	83 ec 0c             	sub    esp,0xc
c0012963:	53                   	push   ebx
c0012964:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012967:	58                   	pop    eax
c0012968:	5a                   	pop    edx
c0012969:	6a 00                	push   0x0
c001296b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001296e:	e8 74 12 00 00       	call   c0013be7 <Thr::loadDLL(char const*, bool)>
c0012973:	83 c4 10             	add    esp,0x10
c0012976:	89 c1                	mov    ecx,eax
c0012978:	31 d2                	xor    edx,edx
c001297a:	b8 04 00 00 00       	mov    eax,0x4
c001297f:	85 c9                	test   ecx,ecx
c0012981:	74 15                	je     c0012998 <SysLoadDLL(regs*)+0xa4>
c0012983:	53                   	push   ebx
c0012984:	53                   	push   ebx
c0012985:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001298b:	51                   	push   ecx
c001298c:	e8 87 14 00 00       	call   c0013e18 <Thr::executeDLL(unsigned long, void*)>
c0012991:	83 c4 10             	add    esp,0x10
c0012994:	31 c0                	xor    eax,eax
c0012996:	31 d2                	xor    edx,edx
c0012998:	59                   	pop    ecx
c0012999:	5b                   	pop    ebx
c001299a:	5e                   	pop    esi
c001299b:	c3                   	ret    

c001299c <SysRead(regs*)>:
c001299c:	57                   	push   edi
c001299d:	56                   	push   esi
c001299e:	53                   	push   ebx
c001299f:	83 ec 10             	sub    esp,0x10
c00129a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129a6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00129a9:	83 f8 02             	cmp    eax,0x2
c00129ac:	77 10                	ja     c00129be <SysRead(regs*)+0x22>
c00129ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129b6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00129bc:	eb 0e                	jmp    c00129cc <SysRead(regs*)+0x30>
c00129be:	83 ec 0c             	sub    esp,0xc
c00129c1:	50                   	push   eax
c00129c2:	e8 30 68 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c00129c7:	83 c4 10             	add    esp,0x10
c00129ca:	89 c1                	mov    ecx,eax
c00129cc:	83 c8 ff             	or     eax,0xffffffff
c00129cf:	85 c9                	test   ecx,ecx
c00129d1:	89 c2                	mov    edx,eax
c00129d3:	74 28                	je     c00129fd <SysRead(regs*)+0x61>
c00129d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00129dd:	31 ff                	xor    edi,edi
c00129df:	83 ec 0c             	sub    esp,0xc
c00129e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00129e8:	52                   	push   edx
c00129e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00129ec:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00129ef:	57                   	push   edi
c00129f0:	56                   	push   esi
c00129f1:	51                   	push   ecx
c00129f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00129f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00129f9:	83 c4 20             	add    esp,0x20
c00129fc:	99                   	cdq    
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	5b                   	pop    ebx
c0012a01:	5e                   	pop    esi
c0012a02:	5f                   	pop    edi
c0012a03:	c3                   	ret    

c0012a04 <SysRegisterSignal(regs*)>:
c0012a04:	83 ec 18             	sub    esp,0x18
c0012a07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a0b:	6a 00                	push   0x0
c0012a0d:	6a 00                	push   0x0
c0012a0f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012a12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a1d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012a23:	e8 99 dc ff ff       	call   c00106c1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012a28:	83 c4 2c             	add    esp,0x2c
c0012a2b:	99                   	cdq    
c0012a2c:	c3                   	ret    

c0012a2d <SysSbrk(regs*)>:
c0012a2d:	56                   	push   esi
c0012a2e:	53                   	push   ebx
c0012a2f:	50                   	push   eax
c0012a30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012a3c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012a3f:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012a45:	85 db                	test   ebx,ebx
c0012a47:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012a4a:	74 02                	je     c0012a4e <SysSbrk(regs*)+0x21>
c0012a4c:	79 06                	jns    c0012a54 <SysSbrk(regs*)+0x27>
c0012a4e:	89 f0                	mov    eax,esi
c0012a50:	31 d2                	xor    edx,edx
c0012a52:	eb 2a                	jmp    c0012a7e <SysSbrk(regs*)+0x51>
c0012a54:	83 c8 ff             	or     eax,0xffffffff
c0012a57:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012a5d:	89 c2                	mov    edx,eax
c0012a5f:	77 1d                	ja     c0012a7e <SysSbrk(regs*)+0x51>
c0012a61:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012a67:	50                   	push   eax
c0012a68:	c1 ea 0c             	shr    edx,0xc
c0012a6b:	68 07 0c 00 00       	push   0xc07
c0012a70:	52                   	push   edx
c0012a71:	51                   	push   ecx
c0012a72:	e8 9d 70 ff ff       	call   c0009b14 <VAS::allocatePages(int, int)>
c0012a77:	89 f0                	mov    eax,esi
c0012a79:	31 d2                	xor    edx,edx
c0012a7b:	83 c4 10             	add    esp,0x10
c0012a7e:	59                   	pop    ecx
c0012a7f:	5b                   	pop    ebx
c0012a80:	5e                   	pop    esi
c0012a81:	c3                   	ret    

c0012a82 <SysSetCwd(regs*)>:
c0012a82:	83 ec 14             	sub    esp,0x14
c0012a85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012a8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a91:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012a94:	e8 b4 84 ff ff       	call   c000af4d <Fs::setcwd(Process*, char*)>
c0012a99:	83 c4 1c             	add    esp,0x1c
c0012a9c:	99                   	cdq    
c0012a9d:	c3                   	ret    

c0012a9e <SysSetTime(regs*)>:
c0012a9e:	55                   	push   ebp
c0012a9f:	31 c9                	xor    ecx,ecx
c0012aa1:	57                   	push   edi
c0012aa2:	bd 0c 00 00 00       	mov    ebp,0xc
c0012aa7:	56                   	push   esi
c0012aa8:	53                   	push   ebx
c0012aa9:	31 db                	xor    ebx,ebx
c0012aab:	83 ec 10             	sub    esp,0x10
c0012aae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012ab2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012ab5:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012ab8:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012abb:	89 c2                	mov    edx,eax
c0012abd:	66 81 ef 6c 07       	sub    di,0x76c
c0012ac2:	83 e2 1f             	and    edx,0x1f
c0012ac5:	c1 e7 10             	shl    edi,0x10
c0012ac8:	42                   	inc    edx
c0012ac9:	c1 e8 05             	shr    eax,0x5
c0012acc:	88 d1                	mov    cl,dl
c0012ace:	31 d2                	xor    edx,edx
c0012ad0:	f7 f5                	div    ebp
c0012ad2:	89 dd                	mov    ebp,ebx
c0012ad4:	88 d5                	mov    ch,dl
c0012ad6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012adc:	0f b7 c1             	movzx  eax,cx
c0012adf:	31 d2                	xor    edx,edx
c0012ae1:	09 f8                	or     eax,edi
c0012ae3:	bf 3c 00 00 00       	mov    edi,0x3c
c0012ae8:	89 c1                	mov    ecx,eax
c0012aea:	89 f0                	mov    eax,esi
c0012aec:	f7 f7                	div    edi
c0012aee:	c1 e2 10             	shl    edx,0x10
c0012af1:	09 d5                	or     ebp,edx
c0012af3:	31 d2                	xor    edx,edx
c0012af5:	89 eb                	mov    ebx,ebp
c0012af7:	f7 f7                	div    edi
c0012af9:	bf 10 0e 00 00       	mov    edi,0xe10
c0012afe:	88 d7                	mov    bh,dl
c0012b00:	89 f0                	mov    eax,esi
c0012b02:	31 d2                	xor    edx,edx
c0012b04:	f7 f7                	div    edi
c0012b06:	bf 18 00 00 00       	mov    edi,0x18
c0012b0b:	31 d2                	xor    edx,edx
c0012b0d:	f7 f7                	div    edi
c0012b0f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012b14:	88 d3                	mov    bl,dl
c0012b16:	53                   	push   ebx
c0012b17:	51                   	push   ecx
c0012b18:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012b1e:	e8 39 8c ff ff       	call   c000b75c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012b23:	83 c4 1c             	add    esp,0x1c
c0012b26:	83 f0 01             	xor    eax,0x1
c0012b29:	5b                   	pop    ebx
c0012b2a:	0f b6 c0             	movzx  eax,al
c0012b2d:	5e                   	pop    esi
c0012b2e:	31 d2                	xor    edx,edx
c0012b30:	5f                   	pop    edi
c0012b31:	5d                   	pop    ebp
c0012b32:	c3                   	ret    

c0012b33 <SysTimezone(regs*)>:
c0012b33:	53                   	push   ebx
c0012b34:	83 ec 08             	sub    esp,0x8
c0012b37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b3b:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012b3f:	75 17                	jne    c0012b58 <SysTimezone(regs*)+0x25>
c0012b41:	83 ec 0c             	sub    esp,0xc
c0012b44:	68 fe 00 02 c0       	push   0xc00200fe
c0012b49:	e8 bc 7a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012b4e:	83 c8 ff             	or     eax,0xffffffff
c0012b51:	83 c4 10             	add    esp,0x10
c0012b54:	89 c2                	mov    edx,eax
c0012b56:	eb 20                	jmp    c0012b78 <SysTimezone(regs*)+0x45>
c0012b58:	83 ec 0c             	sub    esp,0xc
c0012b5b:	68 13 01 02 c0       	push   0xc0020113
c0012b60:	e8 a5 7a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0012b65:	58                   	pop    eax
c0012b66:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012b69:	e8 4a 89 ff ff       	call   c000b4b8 <User::loadClockSettings(int)>
c0012b6e:	83 c4 10             	add    esp,0x10
c0012b71:	b8 01 00 00 00       	mov    eax,0x1
c0012b76:	31 d2                	xor    edx,edx
c0012b78:	83 c4 08             	add    esp,0x8
c0012b7b:	5b                   	pop    ebx
c0012b7c:	c3                   	ret    

c0012b7d <SysWrite(regs*)>:
c0012b7d:	57                   	push   edi
c0012b7e:	56                   	push   esi
c0012b7f:	53                   	push   ebx
c0012b80:	83 ec 10             	sub    esp,0x10
c0012b83:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b87:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b8a:	83 f8 02             	cmp    eax,0x2
c0012b8d:	77 10                	ja     c0012b9f <SysWrite(regs*)+0x22>
c0012b8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b97:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012b9d:	eb 0e                	jmp    c0012bad <SysWrite(regs*)+0x30>
c0012b9f:	83 ec 0c             	sub    esp,0xc
c0012ba2:	50                   	push   eax
c0012ba3:	e8 4f 66 ff ff       	call   c00091f7 <getFromFileDescriptor(int)>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	89 c1                	mov    ecx,eax
c0012bad:	83 c8 ff             	or     eax,0xffffffff
c0012bb0:	85 c9                	test   ecx,ecx
c0012bb2:	89 c2                	mov    edx,eax
c0012bb4:	74 28                	je     c0012bde <SysWrite(regs*)+0x61>
c0012bb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012bbe:	31 ff                	xor    edi,edi
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012bc5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012bc9:	52                   	push   edx
c0012bca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012bcd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012bd0:	57                   	push   edi
c0012bd1:	56                   	push   esi
c0012bd2:	51                   	push   ecx
c0012bd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012bd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012bda:	83 c4 20             	add    esp,0x20
c0012bdd:	99                   	cdq    
c0012bde:	83 c4 10             	add    esp,0x10
c0012be1:	5b                   	pop    ebx
c0012be2:	5e                   	pop    esi
c0012be3:	5f                   	pop    edi
c0012be4:	c3                   	ret    

c0012be5 <SysWsbe(regs*)>:
c0012be5:	57                   	push   edi
c0012be6:	b9 0b 00 00 00       	mov    ecx,0xb
c0012beb:	56                   	push   esi
c0012bec:	be 52 01 02 c0       	mov    esi,0xc0020152
c0012bf1:	53                   	push   ebx
c0012bf2:	83 ec 30             	sub    esp,0x30
c0012bf5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012bf9:	fc                   	cld    
c0012bfa:	83 ec 0c             	sub    esp,0xc
c0012bfd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012bff:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c0b:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012c11:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c13:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012c16:	57                   	push   edi
c0012c17:	e8 24 d9 fe ff       	call   c0000540 <strlen>
c0012c1c:	5a                   	pop    edx
c0012c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012c21:	52                   	push   edx
c0012c22:	31 d2                	xor    edx,edx
c0012c24:	57                   	push   edi
c0012c25:	52                   	push   edx
c0012c26:	50                   	push   eax
c0012c27:	56                   	push   esi
c0012c28:	ff d3                	call   ebx
c0012c2a:	83 c4 14             	add    esp,0x14
c0012c2d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c31:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012c34:	e8 ff 22 00 00       	call   c0014f38 <terminateTask(int)>
c0012c39:	83 c4 40             	add    esp,0x40
c0012c3c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012c41:	5b                   	pop    ebx
c0012c42:	31 d2                	xor    edx,edx
c0012c44:	5e                   	pop    esi
c0012c45:	5f                   	pop    edi
c0012c46:	c3                   	ret    

c0012c47 <SysYield(regs*)>:
c0012c47:	83 ec 0c             	sub    esp,0xc
c0012c4a:	fa                   	cli    
c0012c4b:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012c51:	e8 be 19 00 00       	call   c0014614 <schedule()>
c0012c56:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012c5b:	48                   	dec    eax
c0012c5c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012c61:	75 01                	jne    c0012c64 <SysYield(regs*)+0x1d>
c0012c63:	fb                   	sti    
c0012c64:	31 c0                	xor    eax,eax
c0012c66:	31 d2                	xor    edx,edx
c0012c68:	83 c4 0c             	add    esp,0xc
c0012c6b:	c3                   	ret    

c0012c6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012c6c:	55                   	push   ebp
c0012c6d:	57                   	push   edi
c0012c6e:	56                   	push   esi
c0012c6f:	53                   	push   ebx
c0012c70:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012c76:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012c7e:	0f 95 c2             	setne  dl
c0012c81:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012c89:	0f 94 c0             	sete   al
c0012c8c:	84 c2                	test   dl,al
c0012c8e:	74 34                	je     c0012cc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012c90:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012c9b:	74 27                	je     c0012cc4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012c9d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012ca4:	05 00 10 00 00       	add    eax,0x1000
c0012ca9:	89 c1                	mov    ecx,eax
c0012cab:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cb0:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012cb6:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012cbd:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012cc4:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012cd4:	6a 01                	push   0x1
c0012cd6:	e8 72 66 ff ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c0012cdb:	83 c4 10             	add    esp,0x10
c0012cde:	89 c3                	mov    ebx,eax
c0012ce0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012ce6:	0f 86 25 01 00 00    	jbe    c0012e11 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012cec:	c1 ee 0c             	shr    esi,0xc
c0012cef:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012cf6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012cfa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012d02:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012d09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d0d:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012d14:	29 ef                	sub    edi,ebp
c0012d16:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012d1a:	0f 83 f8 00 00 00    	jae    c0012e18 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012d20:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012d26:	76 05                	jbe    c0012d2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012d28:	bf 00 10 00 00       	mov    edi,0x1000
c0012d2d:	83 ec 0c             	sub    esp,0xc
c0012d30:	31 d2                	xor    edx,edx
c0012d32:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012d39:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d3b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012d3f:	50                   	push   eax
c0012d40:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012d44:	56                   	push   esi
c0012d45:	52                   	push   edx
c0012d46:	57                   	push   edi
c0012d47:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012d4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012d51:	83 c4 20             	add    esp,0x20
c0012d54:	85 c0                	test   eax,eax
c0012d56:	75 06                	jne    c0012d5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012d58:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012d5c:	74 13                	je     c0012d71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012d5e:	83 ec 0c             	sub    esp,0xc
c0012d61:	53                   	push   ebx
c0012d62:	e8 da 68 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0012d67:	83 c4 10             	add    esp,0x10
c0012d6a:	31 c0                	xor    eax,eax
c0012d6c:	e9 7c 01 00 00       	jmp    c0012eed <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012d71:	fa                   	cli    
c0012d72:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012d78:	e8 d4 4d ff ff       	call   c0007b51 <Phys::allocatePage()>
c0012d7d:	6a 07                	push   0x7
c0012d7f:	89 c7                	mov    edi,eax
c0012d81:	53                   	push   ebx
c0012d82:	50                   	push   eax
c0012d83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d8b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012d91:	e8 7a 6c ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012d96:	83 c4 0c             	add    esp,0xc
c0012d99:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012da0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012da6:	6a 00                	push   0x0
c0012da8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012db0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012db6:	e8 c7 6a ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c0012dbb:	58                   	pop    eax
c0012dbc:	5a                   	pop    edx
c0012dbd:	68 07 0c 00 00       	push   0xc07
c0012dc2:	55                   	push   ebp
c0012dc3:	57                   	push   edi
c0012dc4:	89 df                	mov    edi,ebx
c0012dc6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012dcd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012dd3:	6a 00                	push   0x0
c0012dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ddd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012de3:	e8 e8 6f ff ff       	call   c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012de8:	b9 00 10 00 00       	mov    ecx,0x1000
c0012ded:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012def:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012df4:	83 c4 20             	add    esp,0x20
c0012df7:	48                   	dec    eax
c0012df8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012dfd:	85 c0                	test   eax,eax
c0012dff:	75 01                	jne    c0012e02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012e01:	fb                   	sti    
c0012e02:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012e08:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012e0c:	e9 f1 fe ff ff       	jmp    c0012d02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012e11:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012e18:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012e1f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012e25:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012e2b:	0f 86 ae 00 00 00    	jbe    c0012edf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012e31:	fa                   	cli    
c0012e32:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012e38:	c1 ee 0c             	shr    esi,0xc
c0012e3b:	51                   	push   ecx
c0012e3c:	31 ff                	xor    edi,edi
c0012e3e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012e45:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e4b:	6a 00                	push   0x0
c0012e4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e55:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012e5b:	e8 22 6a ff ff       	call   c0009882 <VAS::mapOtherVASIn(bool, VAS*)>
c0012e60:	83 c4 10             	add    esp,0x10
c0012e63:	e8 e9 4c ff ff       	call   c0007b51 <Phys::allocatePage()>
c0012e68:	47                   	inc    edi
c0012e69:	6a 07                	push   0x7
c0012e6b:	53                   	push   ebx
c0012e6c:	50                   	push   eax
c0012e6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e71:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012e77:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012e7a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012e80:	e8 8b 6b ff ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e85:	58                   	pop    eax
c0012e86:	5a                   	pop    edx
c0012e87:	68 07 0c 00 00       	push   0xc07
c0012e8c:	55                   	push   ebp
c0012e8d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e97:	50                   	push   eax
c0012e98:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012e9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012ea5:	6a 00                	push   0x0
c0012ea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012eac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012eaf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012eb5:	e8 16 6f ff ff       	call   c0009dd0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012eba:	83 c4 1c             	add    esp,0x1c
c0012ebd:	68 00 10 00 00       	push   0x1000
c0012ec2:	6a 00                	push   0x0
c0012ec4:	53                   	push   ebx
c0012ec5:	e8 06 d6 fe ff       	call   c00004d0 <memset>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	39 fe                	cmp    esi,edi
c0012ecf:	77 92                	ja     c0012e63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0012ed1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012ed6:	48                   	dec    eax
c0012ed7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012edc:	75 01                	jne    c0012edf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012ede:	fb                   	sti    
c0012edf:	83 ec 0c             	sub    esp,0xc
c0012ee2:	53                   	push   ebx
c0012ee3:	e8 59 67 ff ff       	call   c0009641 <Virt::freeKernelVirtualPages(unsigned long)>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	b0 01                	mov    al,0x1
c0012eed:	81 c4 2c 10 00 00    	add    esp,0x102c
c0012ef3:	5b                   	pop    ebx
c0012ef4:	5e                   	pop    esi
c0012ef5:	5f                   	pop    edi
c0012ef6:	5d                   	pop    ebp
c0012ef7:	c3                   	ret    

c0012ef8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012ef8:	55                   	push   ebp
c0012ef9:	57                   	push   edi
c0012efa:	56                   	push   esi
c0012efb:	53                   	push   ebx
c0012efc:	83 ec 48             	sub    esp,0x48
c0012eff:	68 14 01 00 00       	push   0x114
c0012f04:	e8 6c 49 ff ff       	call   c0007875 <malloc>
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	89 c6                	mov    esi,eax
c0012f0e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012f12:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012f16:	50                   	push   eax
c0012f17:	e8 64 7c ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0012f1c:	58                   	pop    eax
c0012f1d:	5a                   	pop    edx
c0012f1e:	6a 01                	push   0x1
c0012f20:	56                   	push   esi
c0012f21:	e8 1a 7d ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0012f26:	83 c4 10             	add    esp,0x10
c0012f29:	85 c0                	test   eax,eax
c0012f2b:	0f 85 47 01 00 00    	jne    c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f31:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012f39:	83 ec 0c             	sub    esp,0xc
c0012f3c:	6a 34                	push   0x34
c0012f3e:	e8 32 49 ff ff       	call   c0007875 <malloc>
c0012f43:	89 c3                	mov    ebx,eax
c0012f45:	58                   	pop    eax
c0012f46:	8b 06                	mov    eax,DWORD PTR [esi]
c0012f48:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0012f4c:	57                   	push   edi
c0012f4d:	53                   	push   ebx
c0012f4e:	6a 00                	push   0x0
c0012f50:	6a 34                	push   0x34
c0012f52:	56                   	push   esi
c0012f53:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f56:	83 c4 20             	add    esp,0x20
c0012f59:	85 c0                	test   eax,eax
c0012f5b:	0f 85 17 01 00 00    	jne    c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f61:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012f67:	0f 85 0b 01 00 00    	jne    c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012f70:	85 c0                	test   eax,eax
c0012f72:	0f 84 00 01 00 00    	je     c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f78:	31 d2                	xor    edx,edx
c0012f7a:	55                   	push   ebp
c0012f7b:	52                   	push   edx
c0012f7c:	50                   	push   eax
c0012f7d:	56                   	push   esi
c0012f7e:	e8 7b 7d ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	85 c0                	test   eax,eax
c0012f88:	0f 85 ea 00 00 00    	jne    c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012f8e:	83 ec 0c             	sub    esp,0xc
c0012f91:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012f94:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012f98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012f9c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012fa0:	0f af c2             	imul   eax,edx
c0012fa3:	50                   	push   eax
c0012fa4:	e8 cc 48 ff ff       	call   c0007875 <malloc>
c0012fa9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012fab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012faf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012fb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fb6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012fba:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012fbe:	0f af c2             	imul   eax,edx
c0012fc1:	99                   	cdq    
c0012fc2:	52                   	push   edx
c0012fc3:	50                   	push   eax
c0012fc4:	56                   	push   esi
c0012fc5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012fc8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012fcb:	83 c4 20             	add    esp,0x20
c0012fce:	85 c0                	test   eax,eax
c0012fd0:	0f 84 a2 00 00 00    	je     c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012fd6:	31 d2                	xor    edx,edx
c0012fd8:	51                   	push   ecx
c0012fd9:	52                   	push   edx
c0012fda:	50                   	push   eax
c0012fdb:	56                   	push   esi
c0012fdc:	e8 1d 7d ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	85 c0                	test   eax,eax
c0012fe6:	0f 85 8c 00 00 00    	jne    c0013078 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012fec:	83 ec 0c             	sub    esp,0xc
c0012fef:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012ff3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012ff7:	31 ed                	xor    ebp,ebp
c0012ff9:	0f af c2             	imul   eax,edx
c0012ffc:	50                   	push   eax
c0012ffd:	e8 73 48 ff ff       	call   c0007875 <malloc>
c0013002:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013004:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013008:	89 3c 24             	mov    DWORD PTR [esp],edi
c001300b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300f:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013013:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013017:	0f af c2             	imul   eax,edx
c001301a:	99                   	cdq    
c001301b:	52                   	push   edx
c001301c:	50                   	push   eax
c001301d:	56                   	push   esi
c001301e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013021:	83 c4 20             	add    esp,0x20
c0013024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001302c:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0013030:	0f 86 80 00 00 00    	jbe    c00130b6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0013036:	0f b7 fd             	movzx  edi,bp
c0013039:	c1 e7 05             	shl    edi,0x5
c001303c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013040:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013043:	75 6b                	jne    c00130b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013045:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013048:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001304c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001304f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013053:	52                   	push   edx
c0013054:	31 d2                	xor    edx,edx
c0013056:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013059:	52                   	push   edx
c001305a:	50                   	push   eax
c001305b:	56                   	push   esi
c001305c:	e8 9d 7c ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	85 c0                	test   eax,eax
c0013066:	74 17                	je     c001307f <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0013068:	83 ec 0c             	sub    esp,0xc
c001306b:	68 7e 01 02 c0       	push   0xc002017e
c0013070:	e8 95 75 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	31 c0                	xor    eax,eax
c001307a:	e9 87 00 00 00       	jmp    c0013106 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001307f:	83 ec 0c             	sub    esp,0xc
c0013082:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013085:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013088:	50                   	push   eax
c0013089:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001308d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013091:	56                   	push   esi
c0013092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013096:	e8 d1 fb ff ff       	call   c0012c6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001309b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001309f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00130a3:	83 c4 20             	add    esp,0x20
c00130a6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00130aa:	73 04                	jae    c00130b0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00130ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130b0:	45                   	inc    ebp
c00130b1:	e9 76 ff ff ff       	jmp    c001302c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00130b6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00130ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00130c2:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00130c8:	83 ec 0c             	sub    esp,0xc
c00130cb:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00130d1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130d6:	05 00 10 00 00       	add    eax,0x1000
c00130db:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00130de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e2:	e8 9e 47 ff ff       	call   c0007885 <free>
c00130e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00130ea:	e8 96 47 ff ff       	call   c0007885 <free>
c00130ef:	58                   	pop    eax
c00130f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130f4:	e8 8c 47 ff ff       	call   c0007885 <free>
c00130f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00130fc:	e8 9d 7b ff ff       	call   c000ac9e <File::close()>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	b0 01                	mov    al,0x1
c0013106:	83 c4 3c             	add    esp,0x3c
c0013109:	5b                   	pop    ebx
c001310a:	5e                   	pop    esi
c001310b:	5f                   	pop    edi
c001310c:	5d                   	pop    ebp
c001310d:	c3                   	ret    

c001310e <Thr::runtimeReferenceHelper()>:
c001310e:	83 ec 18             	sub    esp,0x18
c0013111:	68 86 01 02 c0       	push   0xc0020186
c0013116:	e8 ef 74 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001311b:	fa                   	cli    
c001311c:	83 c4 10             	add    esp,0x10
c001311f:	eb fe                	jmp    c001311f <Thr::runtimeReferenceHelper()+0x11>

c0013121 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013121:	57                   	push   edi
c0013122:	56                   	push   esi
c0013123:	53                   	push   ebx
c0013124:	31 db                	xor    ebx,ebx
c0013126:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c001312c:	7e 3c                	jle    c001316a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001312e:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c0013135:	31 ff                	xor    edi,edi
c0013137:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c001313e:	7e 27                	jle    c0013167 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013140:	50                   	push   eax
c0013141:	50                   	push   eax
c0013142:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013146:	8b 06                	mov    eax,DWORD PTR [esi]
c0013148:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c001314f:	50                   	push   eax
c0013150:	e8 8b d5 fe ff       	call   c00006e0 <strcmp>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	85 c0                	test   eax,eax
c001315a:	75 05                	jne    c0013161 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001315c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001315f:	eb 0b                	jmp    c001316c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013161:	83 c6 10             	add    esi,0x10
c0013164:	47                   	inc    edi
c0013165:	eb d0                	jmp    c0013137 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013167:	43                   	inc    ebx
c0013168:	eb bc                	jmp    c0013126 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001316a:	31 c0                	xor    eax,eax
c001316c:	5b                   	pop    ebx
c001316d:	5e                   	pop    esi
c001316e:	5f                   	pop    edi
c001316f:	c3                   	ret    

c0013170 <Thr::loadKernelSymbolTable(char const*)>:
c0013170:	55                   	push   ebp
c0013171:	57                   	push   edi
c0013172:	56                   	push   esi
c0013173:	53                   	push   ebx
c0013174:	83 ec 68             	sub    esp,0x68
c0013177:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c001317d:	68 14 01 00 00       	push   0x114
c0013182:	e8 ee 46 ff ff       	call   c0007875 <malloc>
c0013187:	83 c4 0c             	add    esp,0xc
c001318a:	89 c3                	mov    ebx,eax
c001318c:	56                   	push   esi
c001318d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013191:	50                   	push   eax
c0013192:	e8 e9 79 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0013197:	5e                   	pop    esi
c0013198:	5f                   	pop    edi
c0013199:	6a 01                	push   0x1
c001319b:	53                   	push   ebx
c001319c:	e8 9f 7a ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	85 c0                	test   eax,eax
c00131a6:	74 0a                	je     c00131b2 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00131a8:	83 ec 0c             	sub    esp,0xc
c00131ab:	68 a8 01 02 c0       	push   0xc00201a8
c00131b0:	eb 34                	jmp    c00131e6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00131b2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00131ba:	83 ec 0c             	sub    esp,0xc
c00131bd:	6a 34                	push   0x34
c00131bf:	e8 b1 46 ff ff       	call   c0007875 <malloc>
c00131c4:	59                   	pop    ecx
c00131c5:	89 c7                	mov    edi,eax
c00131c7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00131cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131cd:	56                   	push   esi
c00131ce:	57                   	push   edi
c00131cf:	6a 00                	push   0x0
c00131d1:	6a 34                	push   0x34
c00131d3:	53                   	push   ebx
c00131d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00131d7:	83 c4 20             	add    esp,0x20
c00131da:	85 c0                	test   eax,eax
c00131dc:	74 17                	je     c00131f5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	68 bf 01 02 c0       	push   0xc00201bf
c00131e6:	e8 20 d1 ff ff       	call   c001030b <KePanic(char const*)>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	31 c0                	xor    eax,eax
c00131f0:	e9 31 02 00 00       	jmp    c0013426 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00131f5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00131fb:	75 e1                	jne    c00131de <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00131fd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013200:	85 c0                	test   eax,eax
c0013202:	74 da                	je     c00131de <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013204:	52                   	push   edx
c0013205:	31 d2                	xor    edx,edx
c0013207:	52                   	push   edx
c0013208:	50                   	push   eax
c0013209:	53                   	push   ebx
c001320a:	e8 ef 7a ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001320f:	83 c4 10             	add    esp,0x10
c0013212:	85 c0                	test   eax,eax
c0013214:	75 c8                	jne    c00131de <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001321d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013221:	31 ed                	xor    ebp,ebp
c0013223:	0f af c2             	imul   eax,edx
c0013226:	50                   	push   eax
c0013227:	e8 49 46 ff ff       	call   c0007875 <malloc>
c001322c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001322e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013232:	89 34 24             	mov    DWORD PTR [esp],esi
c0013235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013239:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001323d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013241:	0f af c2             	imul   eax,edx
c0013244:	99                   	cdq    
c0013245:	52                   	push   edx
c0013246:	50                   	push   eax
c0013247:	53                   	push   ebx
c0013248:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001324b:	83 c4 20             	add    esp,0x20
c001324e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013256:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001325e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013266:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001326e:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013272:	0f 86 aa 00 00 00    	jbe    c0013322 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013278:	0f b7 f5             	movzx  esi,bp
c001327b:	6b f6 28             	imul   esi,esi,0x28
c001327e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013282:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013285:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013289:	50                   	push   eax
c001328a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001328e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013292:	8b 16                	mov    edx,DWORD PTR [esi]
c0013294:	6b c0 28             	imul   eax,eax,0x28
c0013297:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001329b:	89 d0                	mov    eax,edx
c001329d:	31 d2                	xor    edx,edx
c001329f:	52                   	push   edx
c00132a0:	50                   	push   eax
c00132a1:	53                   	push   ebx
c00132a2:	e8 57 7a ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00132a7:	83 c4 0c             	add    esp,0xc
c00132aa:	6a 20                	push   0x20
c00132ac:	6a 00                	push   0x0
c00132ae:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00132b2:	52                   	push   edx
c00132b3:	e8 18 d2 fe ff       	call   c00004d0 <memset>
c00132b8:	58                   	pop    eax
c00132b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132bb:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00132bf:	51                   	push   ecx
c00132c0:	8d 54 24 40          	lea    edx,[esp+0x40]
c00132c4:	52                   	push   edx
c00132c5:	6a 00                	push   0x0
c00132c7:	6a 1f                	push   0x1f
c00132c9:	53                   	push   ebx
c00132ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132cd:	83 c4 18             	add    esp,0x18
c00132d0:	68 d6 01 02 c0       	push   0xc00201d6
c00132d5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00132d9:	52                   	push   edx
c00132da:	e8 01 d4 fe ff       	call   c00006e0 <strcmp>
c00132df:	83 c4 10             	add    esp,0x10
c00132e2:	85 c0                	test   eax,eax
c00132e4:	75 0f                	jne    c00132f5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00132e6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00132e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00132ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132f5:	50                   	push   eax
c00132f6:	50                   	push   eax
c00132f7:	68 de 01 02 c0       	push   0xc00201de
c00132fc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013300:	50                   	push   eax
c0013301:	e8 da d3 fe ff       	call   c00006e0 <strcmp>
c0013306:	83 c4 10             	add    esp,0x10
c0013309:	85 c0                	test   eax,eax
c001330b:	75 0f                	jne    c001331c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001330d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013310:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013314:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013318:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001331c:	45                   	inc    ebp
c001331d:	e9 4c ff ff ff       	jmp    c001326e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013322:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013327:	75 10                	jne    c0013339 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013329:	83 ec 0c             	sub    esp,0xc
c001332c:	68 e6 01 02 c0       	push   0xc00201e6
c0013331:	e8 d5 cf ff ff       	call   c001030b <KePanic(char const*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001333e:	75 10                	jne    c0013350 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	68 e6 01 02 c0       	push   0xc00201e6
c0013348:	e8 be cf ff ff       	call   c001030b <KePanic(char const*)>
c001334d:	83 c4 10             	add    esp,0x10
c0013350:	31 d2                	xor    edx,edx
c0013352:	50                   	push   eax
c0013353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013357:	52                   	push   edx
c0013358:	50                   	push   eax
c0013359:	53                   	push   ebx
c001335a:	e8 9f 79 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001335f:	5a                   	pop    edx
c0013360:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013364:	e8 0c 45 ff ff       	call   c0007875 <malloc>
c0013369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001336d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013371:	31 c9                	xor    ecx,ecx
c0013373:	5e                   	pop    esi
c0013374:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013376:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001337a:	55                   	push   ebp
c001337b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001337f:	51                   	push   ecx
c0013380:	52                   	push   edx
c0013381:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013385:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013389:	53                   	push   ebx
c001338a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001338d:	83 c4 14             	add    esp,0x14
c0013390:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013394:	e8 dc 44 ff ff       	call   c0007875 <malloc>
c0013399:	89 c6                	mov    esi,eax
c001339b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001339d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00133a0:	56                   	push   esi
c00133a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00133a5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00133a9:	51                   	push   ecx
c00133aa:	52                   	push   edx
c00133ab:	53                   	push   ebx
c00133ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00133b3:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c00133b9:	83 c4 1c             	add    esp,0x1c
c00133bc:	c1 e8 04             	shr    eax,0x4
c00133bf:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c00133c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133ca:	31 d2                	xor    edx,edx
c00133cc:	52                   	push   edx
c00133cd:	50                   	push   eax
c00133ce:	53                   	push   ebx
c00133cf:	e8 2a 79 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00133d4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133d6:	31 d2                	xor    edx,edx
c00133d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00133db:	56                   	push   esi
c00133dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00133e0:	52                   	push   edx
c00133e1:	50                   	push   eax
c00133e2:	53                   	push   ebx
c00133e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133e6:	83 c4 14             	add    esp,0x14
c00133e9:	53                   	push   ebx
c00133ea:	e8 af 78 ff ff       	call   c000ac9e <File::close()>
c00133ef:	5d                   	pop    ebp
c00133f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133f4:	e8 8c 44 ff ff       	call   c0007885 <free>
c00133f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00133fc:	e8 84 44 ff ff       	call   c0007885 <free>
c0013401:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c0013406:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001340a:	8d 50 01             	lea    edx,[eax+0x1]
c001340d:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c0013414:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c001341b:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013421:	83 c4 10             	add    esp,0x10
c0013424:	b0 01                	mov    al,0x1
c0013426:	83 c4 5c             	add    esp,0x5c
c0013429:	5b                   	pop    ebx
c001342a:	5e                   	pop    esi
c001342b:	5f                   	pop    edi
c001342c:	5d                   	pop    ebp
c001342d:	c3                   	ret    

c001342e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001342e:	55                   	push   ebp
c001342f:	57                   	push   edi
c0013430:	56                   	push   esi
c0013431:	53                   	push   ebx
c0013432:	81 ec 68 03 00 00    	sub    esp,0x368
c0013438:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001343f:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c0013445:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0013449:	68 14 01 00 00       	push   0x114
c001344e:	e8 22 44 ff ff       	call   c0007875 <malloc>
c0013453:	83 c4 0c             	add    esp,0xc
c0013456:	89 c5                	mov    ebp,eax
c0013458:	53                   	push   ebx
c0013459:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013460:	50                   	push   eax
c0013461:	e8 1a 77 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0013466:	5e                   	pop    esi
c0013467:	5f                   	pop    edi
c0013468:	6a 01                	push   0x1
c001346a:	55                   	push   ebp
c001346b:	e8 d0 77 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0013470:	83 c4 10             	add    esp,0x10
c0013473:	85 c0                	test   eax,eax
c0013475:	0f 85 a7 06 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001347b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013483:	83 ec 0c             	sub    esp,0xc
c0013486:	6a 34                	push   0x34
c0013488:	e8 e8 43 ff ff       	call   c0007875 <malloc>
c001348d:	5b                   	pop    ebx
c001348e:	89 c7                	mov    edi,eax
c0013490:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013494:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013497:	53                   	push   ebx
c0013498:	57                   	push   edi
c0013499:	6a 00                	push   0x0
c001349b:	6a 34                	push   0x34
c001349d:	55                   	push   ebp
c001349e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134a1:	83 c4 20             	add    esp,0x20
c00134a4:	85 c0                	test   eax,eax
c00134a6:	0f 85 76 06 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134ac:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00134b2:	0f 85 6a 06 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134b8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00134bb:	85 c0                	test   eax,eax
c00134bd:	0f 84 5f 06 00 00    	je     c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134c3:	31 d2                	xor    edx,edx
c00134c5:	51                   	push   ecx
c00134c6:	52                   	push   edx
c00134c7:	50                   	push   eax
c00134c8:	55                   	push   ebp
c00134c9:	e8 30 78 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	85 c0                	test   eax,eax
c00134d3:	0f 85 49 06 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00134d9:	83 ec 0c             	sub    esp,0xc
c00134dc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00134df:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00134e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00134e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00134eb:	0f af c2             	imul   eax,edx
c00134ee:	50                   	push   eax
c00134ef:	e8 81 43 ff ff       	call   c0007875 <malloc>
c00134f4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00134f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013502:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013506:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001350a:	0f af c2             	imul   eax,edx
c001350d:	99                   	cdq    
c001350e:	52                   	push   edx
c001350f:	50                   	push   eax
c0013510:	55                   	push   ebp
c0013511:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013514:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013517:	83 c4 20             	add    esp,0x20
c001351a:	85 c0                	test   eax,eax
c001351c:	0f 84 00 06 00 00    	je     c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013522:	52                   	push   edx
c0013523:	31 d2                	xor    edx,edx
c0013525:	52                   	push   edx
c0013526:	50                   	push   eax
c0013527:	55                   	push   ebp
c0013528:	e8 d1 77 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c001352d:	83 c4 10             	add    esp,0x10
c0013530:	85 c0                	test   eax,eax
c0013532:	0f 85 ea 05 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001353f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013543:	31 f6                	xor    esi,esi
c0013545:	0f af c2             	imul   eax,edx
c0013548:	50                   	push   eax
c0013549:	e8 27 43 ff ff       	call   c0007875 <malloc>
c001354e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013551:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013555:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013558:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001355c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013560:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013564:	0f af c2             	imul   eax,edx
c0013567:	99                   	cdq    
c0013568:	52                   	push   edx
c0013569:	50                   	push   eax
c001356a:	55                   	push   ebp
c001356b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001356e:	83 c4 20             	add    esp,0x20
c0013571:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013575:	0f 86 8a 00 00 00    	jbe    c0013605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001357b:	0f b7 de             	movzx  ebx,si
c001357e:	c1 e3 05             	shl    ebx,0x5
c0013581:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013585:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013588:	75 75                	jne    c00135ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001358a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001358d:	31 d2                	xor    edx,edx
c001358f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013593:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013596:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001359a:	50                   	push   eax
c001359b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001359e:	52                   	push   edx
c001359f:	50                   	push   eax
c00135a0:	55                   	push   ebp
c00135a1:	e8 58 77 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00135a6:	83 c4 10             	add    esp,0x10
c00135a9:	85 c0                	test   eax,eax
c00135ab:	0f 85 71 05 00 00    	jne    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00135b1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00135b8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00135bb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00135bf:	31 d2                	xor    edx,edx
c00135c1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00135c5:	83 ec 0c             	sub    esp,0xc
c00135c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135cc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00135d3:	50                   	push   eax
c00135d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135dc:	52                   	push   edx
c00135dd:	50                   	push   eax
c00135de:	55                   	push   ebp
c00135df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00135e2:	83 c4 1c             	add    esp,0x1c
c00135e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00135e8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00135eb:	50                   	push   eax
c00135ec:	6a 00                	push   0x0
c00135ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00135f6:	50                   	push   eax
c00135f7:	e8 d4 ce fe ff       	call   c00004d0 <memset>
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	46                   	inc    esi
c0013600:	e9 6c ff ff ff       	jmp    c0013571 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013605:	53                   	push   ebx
c0013606:	31 db                	xor    ebx,ebx
c0013608:	68 00 01 00 00       	push   0x100
c001360d:	6a 00                	push   0x0
c001360f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013613:	50                   	push   eax
c0013614:	e8 b7 ce fe ff       	call   c00004d0 <memset>
c0013619:	83 c4 0c             	add    esp,0xc
c001361c:	68 00 01 00 00       	push   0x100
c0013621:	6a 00                	push   0x0
c0013623:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001362a:	50                   	push   eax
c001362b:	e8 a0 ce fe ff       	call   c00004d0 <memset>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001363b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013643:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001364b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013653:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001365b:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001365f:	0f 86 30 01 00 00    	jbe    c0013795 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013665:	0f b7 f3             	movzx  esi,bx
c0013668:	6b f6 28             	imul   esi,esi,0x28
c001366b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001366f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013672:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013676:	52                   	push   edx
c0013677:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001367b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001367f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013681:	6b d2 28             	imul   edx,edx,0x28
c0013684:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013688:	31 d2                	xor    edx,edx
c001368a:	52                   	push   edx
c001368b:	50                   	push   eax
c001368c:	55                   	push   ebp
c001368d:	e8 6c 76 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013692:	83 c4 0c             	add    esp,0xc
c0013695:	6a 20                	push   0x20
c0013697:	6a 00                	push   0x0
c0013699:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00136a0:	51                   	push   ecx
c00136a1:	e8 2a ce fe ff       	call   c00004d0 <memset>
c00136a6:	59                   	pop    ecx
c00136a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00136aa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00136ae:	52                   	push   edx
c00136af:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00136b6:	51                   	push   ecx
c00136b7:	6a 00                	push   0x0
c00136b9:	6a 1f                	push   0x1f
c00136bb:	55                   	push   ebp
c00136bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136bf:	83 c4 1c             	add    esp,0x1c
c00136c2:	6a 09                	push   0x9
c00136c4:	68 00 02 02 c0       	push   0xc0020200
c00136c9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00136d0:	51                   	push   ecx
c00136d1:	e8 ba cc fe ff       	call   c0000390 <memcmp>
c00136d6:	83 c4 10             	add    esp,0x10
c00136d9:	85 c0                	test   eax,eax
c00136db:	75 21                	jne    c00136fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00136dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136e5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00136e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00136ed:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00136f0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00136f7:	89 d0                	mov    eax,edx
c00136f9:	40                   	inc    eax
c00136fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136fe:	50                   	push   eax
c00136ff:	6a 09                	push   0x9
c0013701:	68 0a 02 02 c0       	push   0xc002020a
c0013706:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001370d:	50                   	push   eax
c001370e:	e8 7d cc fe ff       	call   c0000390 <memcmp>
c0013713:	83 c4 10             	add    esp,0x10
c0013716:	85 c0                	test   eax,eax
c0013718:	75 21                	jne    c001373b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001371a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001371e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013722:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013726:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001372a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001372d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013734:	89 d0                	mov    eax,edx
c0013736:	40                   	inc    eax
c0013737:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001373b:	50                   	push   eax
c001373c:	50                   	push   eax
c001373d:	68 d6 01 02 c0       	push   0xc00201d6
c0013742:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013749:	50                   	push   eax
c001374a:	e8 91 cf fe ff       	call   c00006e0 <strcmp>
c001374f:	83 c4 10             	add    esp,0x10
c0013752:	85 c0                	test   eax,eax
c0013754:	75 0f                	jne    c0013765 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013756:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001375d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013761:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013765:	50                   	push   eax
c0013766:	50                   	push   eax
c0013767:	68 de 01 02 c0       	push   0xc00201de
c001376c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013773:	50                   	push   eax
c0013774:	e8 67 cf fe ff       	call   c00006e0 <strcmp>
c0013779:	83 c4 10             	add    esp,0x10
c001377c:	85 c0                	test   eax,eax
c001377e:	75 0f                	jne    c001378f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013780:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013783:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001378b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001378f:	43                   	inc    ebx
c0013790:	e9 c6 fe ff ff       	jmp    c001365b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013795:	31 d2                	xor    edx,edx
c0013797:	50                   	push   eax
c0013798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001379c:	52                   	push   edx
c001379d:	50                   	push   eax
c001379e:	55                   	push   ebp
c001379f:	e8 5a 75 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00137a4:	58                   	pop    eax
c00137a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137a9:	e8 c7 40 ff ff       	call   c0007875 <malloc>
c00137ae:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00137b1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00137b5:	31 d2                	xor    edx,edx
c00137b7:	58                   	pop    eax
c00137b8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00137bc:	53                   	push   ebx
c00137bd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00137c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137c5:	52                   	push   edx
c00137c6:	50                   	push   eax
c00137c7:	55                   	push   ebp
c00137c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00137cb:	83 c4 14             	add    esp,0x14
c00137ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137d2:	e8 9e 40 ff ff       	call   c0007875 <malloc>
c00137d7:	31 d2                	xor    edx,edx
c00137d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00137dd:	83 c4 0c             	add    esp,0xc
c00137e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137e4:	52                   	push   edx
c00137e5:	50                   	push   eax
c00137e6:	55                   	push   ebp
c00137e7:	e8 12 75 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c00137ec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00137ef:	31 d2                	xor    edx,edx
c00137f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137f4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00137f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137fc:	52                   	push   edx
c00137fd:	50                   	push   eax
c00137fe:	55                   	push   ebp
c00137ff:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013802:	83 c4 20             	add    esp,0x20
c0013805:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001380d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013811:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013815:	0f 84 0b 03 00 00    	je     c0013b26 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001381b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013822:	31 d2                	xor    edx,edx
c0013824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013828:	c1 e8 03             	shr    eax,0x3
c001382b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001382f:	51                   	push   ecx
c0013830:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013834:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013838:	52                   	push   edx
c0013839:	50                   	push   eax
c001383a:	55                   	push   ebp
c001383b:	e8 be 74 ff ff       	call   c000acfe <File::seek(unsigned long long)>
c0013840:	5b                   	pop    ebx
c0013841:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013845:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001384c:	e8 24 40 ff ff       	call   c0007875 <malloc>
c0013851:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013854:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013858:	31 d2                	xor    edx,edx
c001385a:	5e                   	pop    esi
c001385b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001385f:	50                   	push   eax
c0013860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013864:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013868:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001386f:	52                   	push   edx
c0013870:	50                   	push   eax
c0013871:	55                   	push   ebp
c0013872:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013875:	83 c4 20             	add    esp,0x20
c0013878:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013880:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013884:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0013888:	0f 8d 7c 02 00 00    	jge    c0013b0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001388e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013896:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001389b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001389e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00138a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a6:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00138aa:	89 d8                	mov    eax,ebx
c00138ac:	c1 e8 08             	shr    eax,0x8
c00138af:	89 c6                	mov    esi,eax
c00138b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138b5:	c1 e6 04             	shl    esi,0x4
c00138b8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00138bc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00138bf:	85 d2                	test   edx,edx
c00138c1:	0f 85 bf 00 00 00    	jne    c0013986 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00138c7:	83 ec 0c             	sub    esp,0xc
c00138ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138ce:	03 06                	add    eax,DWORD PTR [esi]
c00138d0:	50                   	push   eax
c00138d1:	e8 4b f8 ff ff       	call   c0013121 <Thr::getAddressOfKernelSymbol(char const*)>
c00138d6:	83 c4 10             	add    esp,0x10
c00138d9:	89 c2                	mov    edx,eax
c00138db:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00138e0:	85 c0                	test   eax,eax
c00138e2:	0f 85 9e 00 00 00    	jne    c0013986 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138ef:	03 06                	add    eax,DWORD PTR [esi]
c00138f1:	50                   	push   eax
c00138f2:	e8 65 cb ff ff       	call   c001045c <KeResolveCompatibilitySymbol(char*)>
c00138f7:	83 c4 10             	add    esp,0x10
c00138fa:	89 c2                	mov    edx,eax
c00138fc:	85 c0                	test   eax,eax
c00138fe:	0f 85 82 00 00 00    	jne    c0013986 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013904:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013908:	50                   	push   eax
c0013909:	50                   	push   eax
c001390a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001390e:	03 06                	add    eax,DWORD PTR [esi]
c0013910:	50                   	push   eax
c0013911:	68 14 02 02 c0       	push   0xc0020214
c0013916:	e8 ef 6c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001391b:	58                   	pop    eax
c001391c:	5a                   	pop    edx
c001391d:	68 2e 02 02 c0       	push   0xc002022e
c0013922:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013929:	50                   	push   eax
c001392a:	e8 d1 cc fe ff       	call   c0000600 <strcpy>
c001392f:	59                   	pop    ecx
c0013930:	58                   	pop    eax
c0013931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013935:	03 06                	add    eax,DWORD PTR [esi]
c0013937:	50                   	push   eax
c0013938:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001393f:	50                   	push   eax
c0013940:	e8 7b ce fe ff       	call   c00007c0 <strcat>
c0013945:	58                   	pop    eax
c0013946:	5a                   	pop    edx
c0013947:	68 c4 02 02 c0       	push   0xc00202c4
c001394c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013953:	50                   	push   eax
c0013954:	e8 67 ce fe ff       	call   c00007c0 <strcat>
c0013959:	83 c4 10             	add    esp,0x10
c001395c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013961:	0f 84 5d 01 00 00    	je     c0013ac4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013967:	83 ec 0c             	sub    esp,0xc
c001396a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013971:	50                   	push   eax
c0013972:	e8 94 c9 ff ff       	call   c001030b <KePanic(char const*)>
c0013977:	83 c4 10             	add    esp,0x10
c001397a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001397e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013982:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013986:	80 fb 01             	cmp    bl,0x1
c0013989:	0f 85 88 00 00 00    	jne    c0013a17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001398f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013996:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001399a:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001399e:	01 ce                	add    esi,ecx
c00139a0:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00139a6:	0f 94 c0             	sete   al
c00139a9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00139af:	0f 94 c3             	sete   bl
c00139b2:	09 c3                	or     ebx,eax
c00139b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00139b6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00139bb:	74 41                	je     c00139fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00139bd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00139c0:	84 db                	test   bl,bl
c00139c2:	75 15                	jne    c00139d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00139c4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139c8:	66 83 f8 0c          	cmp    ax,0xc
c00139cc:	76 05                	jbe    c00139d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00139ce:	b8 0c 00 00 00       	mov    eax,0xc
c00139d3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00139d7:	76 37                	jbe    c0013a10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139d9:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00139dd:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00139e2:	0f 84 dc 00 00 00    	je     c0013ac4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	68 45 02 02 c0       	push   0xc0020245
c00139f0:	e8 16 c9 ff ff       	call   c001030b <KePanic(char const*)>
c00139f5:	83 c4 10             	add    esp,0x10
c00139f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00139fc:	eb 12                	jmp    c0013a10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00139fe:	01 c1                	add    ecx,eax
c0013a00:	84 db                	test   bl,bl
c0013a02:	75 0c                	jne    c0013a10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013a04:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013a08:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013a0c:	77 02                	ja     c0013a10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013a0e:	01 d1                	add    ecx,edx
c0013a10:	89 0e                	mov    DWORD PTR [esi],ecx
c0013a12:	e9 ea 00 00 00       	jmp    c0013b01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013a17:	80 fb 02             	cmp    bl,0x2
c0013a1a:	75 7c                	jne    c0013a98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013a1c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013a23:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013a27:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013a2b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013a31:	74 20                	je     c0013a53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013a33:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013a39:	74 18                	je     c0013a53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013a3b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013a3f:	b9 0a 00 00 00       	mov    ecx,0xa
c0013a44:	66 83 f8 0e          	cmp    ax,0xe
c0013a48:	77 03                	ja     c0013a4d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013a4a:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013a4d:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013a51:	76 1f                	jbe    c0013a72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013a53:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013a57:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013a5c:	74 66                	je     c0013ac4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013a5e:	83 ec 0c             	sub    esp,0xc
c0013a61:	68 61 02 02 c0       	push   0xc0020261
c0013a66:	e8 a0 c8 ff ff       	call   c001030b <KePanic(char const*)>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013a72:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a74:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013a79:	74 13                	je     c0013a8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013a7b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013a7f:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013a86:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013a8a:	01 c8                	add    eax,ecx
c0013a8c:	eb 04                	jmp    c0013a92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013a8e:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013a92:	01 c2                	add    edx,eax
c0013a94:	89 16                	mov    DWORD PTR [esi],edx
c0013a96:	eb 69                	jmp    c0013b01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013a98:	0f b6 db             	movzx  ebx,bl
c0013a9b:	50                   	push   eax
c0013a9c:	50                   	push   eax
c0013a9d:	53                   	push   ebx
c0013a9e:	68 7d 02 02 c0       	push   0xc002027d
c0013aa3:	e8 62 6b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013aa8:	83 c4 10             	add    esp,0x10
c0013aab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ab0:	74 12                	je     c0013ac4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ab2:	83 ec 0c             	sub    esp,0xc
c0013ab5:	68 88 02 02 c0       	push   0xc0020288
c0013aba:	e8 4c c8 ff ff       	call   c001030b <KePanic(char const*)>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	eb 3d                	jmp    c0013b01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013ac4:	83 ec 0c             	sub    esp,0xc
c0013ac7:	55                   	push   ebp
c0013ac8:	e8 d1 71 ff ff       	call   c000ac9e <File::close()>
c0013acd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ad0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ad3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ad6:	59                   	pop    ecx
c0013ad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013adb:	e8 a5 3d ff ff       	call   c0007885 <free>
c0013ae0:	5b                   	pop    ebx
c0013ae1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ae5:	e8 9b 3d ff ff       	call   c0007885 <free>
c0013aea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013aed:	e8 93 3d ff ff       	call   c0007885 <free>
c0013af2:	5e                   	pop    esi
c0013af3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af7:	e8 89 3d ff ff       	call   c0007885 <free>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	eb 21                	jmp    c0013b22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013b01:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013b05:	e9 76 fd ff ff       	jmp    c0013880 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b11:	e8 6f 3d ff ff       	call   c0007885 <free>
c0013b16:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013b1a:	83 c4 10             	add    esp,0x10
c0013b1d:	e9 eb fc ff ff       	jmp    c001380d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013b22:	31 c0                	xor    eax,eax
c0013b24:	eb 33                	jmp    c0013b59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013b26:	83 ec 0c             	sub    esp,0xc
c0013b29:	55                   	push   ebp
c0013b2a:	e8 6f 71 ff ff       	call   c000ac9e <File::close()>
c0013b2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b32:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013b35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b38:	58                   	pop    eax
c0013b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b3d:	e8 43 3d ff ff       	call   c0007885 <free>
c0013b42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013b45:	e8 3b 3d ff ff       	call   c0007885 <free>
c0013b4a:	5a                   	pop    edx
c0013b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4f:	e8 31 3d ff ff       	call   c0007885 <free>
c0013b54:	83 c4 10             	add    esp,0x10
c0013b57:	b0 01                	mov    al,0x1
c0013b59:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013b5f:	5b                   	pop    ebx
c0013b60:	5e                   	pop    esi
c0013b61:	5f                   	pop    edi
c0013b62:	5d                   	pop    ebp
c0013b63:	c3                   	ret    

c0013b64 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013b64:	56                   	push   esi
c0013b65:	31 d2                	xor    edx,edx
c0013b67:	53                   	push   ebx
c0013b68:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013b6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b72:	39 d3                	cmp    ebx,edx
c0013b74:	7e 1b                	jle    c0013b91 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013b76:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013b7d:	39 c8                	cmp    eax,ecx
c0013b7f:	77 0d                	ja     c0013b8e <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013b81:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013b88:	01 c6                	add    esi,eax
c0013b8a:	39 ce                	cmp    esi,ecx
c0013b8c:	77 05                	ja     c0013b93 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013b8e:	42                   	inc    edx
c0013b8f:	eb e1                	jmp    c0013b72 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013b91:	31 c0                	xor    eax,eax
c0013b93:	5b                   	pop    ebx
c0013b94:	5e                   	pop    esi
c0013b95:	c3                   	ret    

c0013b96 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013b96:	53                   	push   ebx
c0013b97:	31 c0                	xor    eax,eax
c0013b99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013b9d:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013ba3:	39 c3                	cmp    ebx,eax
c0013ba5:	7e 22                	jle    c0013bc9 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013ba7:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013bae:	39 ca                	cmp    edx,ecx
c0013bb0:	77 14                	ja     c0013bc6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013bb2:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013bb9:	39 ca                	cmp    edx,ecx
c0013bbb:	76 09                	jbe    c0013bc6 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013bbd:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013bc4:	eb 05                	jmp    c0013bcb <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013bc6:	40                   	inc    eax
c0013bc7:	eb da                	jmp    c0013ba3 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013bc9:	31 c0                	xor    eax,eax
c0013bcb:	5b                   	pop    ebx
c0013bcc:	c3                   	ret    

c0013bcd <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013bcd:	53                   	push   ebx
c0013bce:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013bd2:	53                   	push   ebx
c0013bd3:	e8 8c ff ff ff       	call   c0013b64 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013bd8:	5a                   	pop    edx
c0013bd9:	31 d2                	xor    edx,edx
c0013bdb:	85 c0                	test   eax,eax
c0013bdd:	74 04                	je     c0013be3 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013bdf:	89 da                	mov    edx,ebx
c0013be1:	29 c2                	sub    edx,eax
c0013be3:	89 d0                	mov    eax,edx
c0013be5:	5b                   	pop    ebx
c0013be6:	c3                   	ret    

c0013be7 <Thr::loadDLL(char const*, bool)>:
c0013be7:	55                   	push   ebp
c0013be8:	57                   	push   edi
c0013be9:	56                   	push   esi
c0013bea:	53                   	push   ebx
c0013beb:	81 ec 34 01 00 00    	sub    esp,0x134
c0013bf1:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013bf8:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013bff:	56                   	push   esi
c0013c00:	68 a0 02 02 c0       	push   0xc00202a0
c0013c05:	e8 00 6a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013c0a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013c11:	e8 5f 3c ff ff       	call   c0007875 <malloc>
c0013c16:	83 c4 0c             	add    esp,0xc
c0013c19:	89 c3                	mov    ebx,eax
c0013c1b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0013c21:	56                   	push   esi
c0013c22:	50                   	push   eax
c0013c23:	e8 58 6f ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0013c28:	83 c4 10             	add    esp,0x10
c0013c2b:	85 db                	test   ebx,ebx
c0013c2d:	75 3c                	jne    c0013c6b <Thr::loadDLL(char const*, bool)+0x84>
c0013c2f:	89 f8                	mov    eax,edi
c0013c31:	84 c0                	test   al,al
c0013c33:	0f 84 d2 01 00 00    	je     c0013e0b <Thr::loadDLL(char const*, bool)+0x224>
c0013c39:	55                   	push   ebp
c0013c3a:	55                   	push   ebp
c0013c3b:	68 b1 02 02 c0       	push   0xc00202b1
c0013c40:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013c44:	55                   	push   ebp
c0013c45:	e8 b6 c9 fe ff       	call   c0000600 <strcpy>
c0013c4a:	58                   	pop    eax
c0013c4b:	5a                   	pop    edx
c0013c4c:	56                   	push   esi
c0013c4d:	55                   	push   ebp
c0013c4e:	e8 6d cb fe ff       	call   c00007c0 <strcat>
c0013c53:	59                   	pop    ecx
c0013c54:	58                   	pop    eax
c0013c55:	68 c4 02 02 c0       	push   0xc00202c4
c0013c5a:	55                   	push   ebp
c0013c5b:	e8 60 cb fe ff       	call   c00007c0 <strcat>
c0013c60:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c63:	e8 a3 c6 ff ff       	call   c001030b <KePanic(char const*)>
c0013c68:	83 c4 10             	add    esp,0x10
c0013c6b:	51                   	push   ecx
c0013c6c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013c70:	50                   	push   eax
c0013c71:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013c75:	50                   	push   eax
c0013c76:	53                   	push   ebx
c0013c77:	e8 70 72 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	85 db                	test   ebx,ebx
c0013c81:	74 0c                	je     c0013c8f <Thr::loadDLL(char const*, bool)+0xa8>
c0013c83:	83 ec 0c             	sub    esp,0xc
c0013c86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c88:	53                   	push   ebx
c0013c89:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013c94:	75 0a                	jne    c0013ca0 <Thr::loadDLL(char const*, bool)+0xb9>
c0013c96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c9a:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013c9e:	75 3c                	jne    c0013cdc <Thr::loadDLL(char const*, bool)+0xf5>
c0013ca0:	89 f8                	mov    eax,edi
c0013ca2:	84 c0                	test   al,al
c0013ca4:	0f 84 49 01 00 00    	je     c0013df3 <Thr::loadDLL(char const*, bool)+0x20c>
c0013caa:	51                   	push   ecx
c0013cab:	51                   	push   ecx
c0013cac:	68 b1 02 02 c0       	push   0xc00202b1
c0013cb1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013cb5:	53                   	push   ebx
c0013cb6:	e8 45 c9 fe ff       	call   c0000600 <strcpy>
c0013cbb:	5d                   	pop    ebp
c0013cbc:	58                   	pop    eax
c0013cbd:	56                   	push   esi
c0013cbe:	53                   	push   ebx
c0013cbf:	e8 fc ca fe ff       	call   c00007c0 <strcat>
c0013cc4:	58                   	pop    eax
c0013cc5:	5a                   	pop    edx
c0013cc6:	68 c4 02 02 c0       	push   0xc00202c4
c0013ccb:	53                   	push   ebx
c0013ccc:	e8 ef ca fe ff       	call   c00007c0 <strcat>
c0013cd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cd4:	e8 32 c6 ff ff       	call   c001030b <KePanic(char const*)>
c0013cd9:	83 c4 10             	add    esp,0x10
c0013cdc:	52                   	push   edx
c0013cdd:	6a 03                	push   0x3
c0013cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ce7:	05 ff 0f 00 00       	add    eax,0xfff
c0013cec:	83 d2 00             	adc    edx,0x0
c0013cef:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013cf3:	50                   	push   eax
c0013cf4:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013cfa:	e8 15 5e ff ff       	call   c0009b14 <VAS::allocatePages(int, int)>
c0013cff:	59                   	pop    ecx
c0013d00:	89 c3                	mov    ebx,eax
c0013d02:	5d                   	pop    ebp
c0013d03:	50                   	push   eax
c0013d04:	68 b2 ee 01 c0       	push   0xc001eeb2
c0013d09:	e8 fc 68 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013d0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013d11:	e8 2a c8 fe ff       	call   c0000540 <strlen>
c0013d16:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c0013d1c:	40                   	inc    eax
c0013d1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d20:	e8 50 3b ff ff       	call   c0007875 <malloc>
c0013d25:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c0013d2c:	58                   	pop    eax
c0013d2d:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013d32:	5a                   	pop    edx
c0013d33:	56                   	push   esi
c0013d34:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c0013d3b:	e8 c0 c8 fe ff       	call   c0000600 <strcpy>
c0013d40:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013d45:	8d 50 01             	lea    edx,[eax+0x1]
c0013d48:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0013d4f:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0013d55:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d59:	83 c4 0c             	add    esp,0xc
c0013d5c:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0013d63:	6a 01                	push   0x1
c0013d65:	53                   	push   ebx
c0013d66:	56                   	push   esi
c0013d67:	e8 c2 f6 ff ff       	call   c001342e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013d6c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013d78:	0f 85 89 00 00 00    	jne    c0013e07 <Thr::loadDLL(char const*, bool)+0x220>
c0013d7e:	89 f8                	mov    eax,edi
c0013d80:	84 c0                	test   al,al
c0013d82:	74 73                	je     c0013df7 <Thr::loadDLL(char const*, bool)+0x210>
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	68 c6 02 02 c0       	push   0xc00202c6
c0013d8c:	e8 7a c5 ff ff       	call   c001030b <KePanic(char const*)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	eb 61                	jmp    c0013df7 <Thr::loadDLL(char const*, bool)+0x210>
c0013d96:	50                   	push   eax
c0013d97:	50                   	push   eax
c0013d98:	89 e8                	mov    eax,ebp
c0013d9a:	c1 e0 0c             	shl    eax,0xc
c0013d9d:	01 d8                	add    eax,ebx
c0013d9f:	50                   	push   eax
c0013da0:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013da6:	e8 77 58 ff ff       	call   c0009622 <VAS::getPageTableEntry(unsigned long)>
c0013dab:	83 c4 10             	add    esp,0x10
c0013dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0013db0:	a8 60                	test   al,0x60
c0013db2:	75 11                	jne    c0013dc5 <Thr::loadDLL(char const*, bool)+0x1de>
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013dbc:	50                   	push   eax
c0013dbd:	e8 2d 3d ff ff       	call   c0007aef <Phys::freePage(unsigned long)>
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	45                   	inc    ebp
c0013dc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013dce:	05 ff 0f 00 00       	add    eax,0xfff
c0013dd3:	bf 00 00 00 00       	mov    edi,0x0
c0013dd8:	83 d2 00             	adc    edx,0x0
c0013ddb:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013ddf:	c1 ea 0c             	shr    edx,0xc
c0013de2:	39 c5                	cmp    ebp,eax
c0013de4:	89 d1                	mov    ecx,edx
c0013de6:	89 f8                	mov    eax,edi
c0013de8:	19 c8                	sbb    eax,ecx
c0013dea:	72 aa                	jb     c0013d96 <Thr::loadDLL(char const*, bool)+0x1af>
c0013dec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013df1:	75 18                	jne    c0013e0b <Thr::loadDLL(char const*, bool)+0x224>
c0013df3:	31 db                	xor    ebx,ebx
c0013df5:	eb 14                	jmp    c0013e0b <Thr::loadDLL(char const*, bool)+0x224>
c0013df7:	83 ec 0c             	sub    esp,0xc
c0013dfa:	68 e5 02 02 c0       	push   0xc00202e5
c0013dff:	e8 07 c5 ff ff       	call   c001030b <KePanic(char const*)>
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	31 ed                	xor    ebp,ebp
c0013e09:	eb bb                	jmp    c0013dc6 <Thr::loadDLL(char const*, bool)+0x1df>
c0013e0b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013e11:	89 d8                	mov    eax,ebx
c0013e13:	5b                   	pop    ebx
c0013e14:	5e                   	pop    esi
c0013e15:	5f                   	pop    edi
c0013e16:	5d                   	pop    ebp
c0013e17:	c3                   	ret    

c0013e18 <Thr::executeDLL(unsigned long, void*)>:
c0013e18:	56                   	push   esi
c0013e19:	53                   	push   ebx
c0013e1a:	52                   	push   edx
c0013e1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e1f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e23:	85 db                	test   ebx,ebx
c0013e25:	75 10                	jne    c0013e37 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013e27:	83 ec 0c             	sub    esp,0xc
c0013e2a:	68 01 03 02 c0       	push   0xc0020301
c0013e2f:	e8 d7 c4 ff ff       	call   c001030b <KePanic(char const*)>
c0013e34:	83 c4 10             	add    esp,0x10
c0013e37:	50                   	push   eax
c0013e38:	50                   	push   eax
c0013e39:	53                   	push   ebx
c0013e3a:	68 2b 03 02 c0       	push   0xc002032b
c0013e3f:	e8 c6 67 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0013e44:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013e48:	89 d8                	mov    eax,ebx
c0013e4a:	83 c4 14             	add    esp,0x14
c0013e4d:	5b                   	pop    ebx
c0013e4e:	5e                   	pop    esi
c0013e4f:	ff e0                	jmp    eax
c0013e51:	66 90                	xchg   ax,ax
c0013e53:	90                   	nop

c0013e54 <userModeEntryPoint(void*)>:
c0013e54:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013e59:	48                   	dec    eax
c0013e5a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013e5f:	75 03                	jne    c0013e64 <userModeEntryPoint(void*)+0x10>
c0013e61:	fb                   	sti    
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	fb                   	sti    
c0013e65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e6d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e77:	e9 c3 c3 fe ff       	jmp    c000023f <goToUsermode>

c0013e7c <changeTSS>:
c0013e7c:	83 ec 14             	sub    esp,0x14
c0013e7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e84:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013e87:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013e8c:	c1 e2 15             	shl    edx,0x15
c0013e8f:	29 d0                	sub    eax,edx
c0013e91:	50                   	push   eax
c0013e92:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0013e97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e9d:	05 7c 11 00 00       	add    eax,0x117c
c0013ea2:	50                   	push   eax
c0013ea3:	e8 f8 4d ff ff       	call   c0008ca0 <TSS::setESP(unsigned long)>
c0013ea8:	83 c4 1c             	add    esp,0x1c
c0013eab:	c3                   	ret    

c0013eac <switchToThread(ThreadControlBlock*)>:
c0013eac:	57                   	push   edi
c0013ead:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0013eb2:	56                   	push   esi
c0013eb3:	85 c0                	test   eax,eax
c0013eb5:	53                   	push   ebx
c0013eb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eba:	0f 85 90 00 00 00    	jne    c0013f50 <switchToThread(ThreadControlBlock*)+0xa4>
c0013ec0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0013ec3:	80 fa ff             	cmp    dl,0xff
c0013ec6:	0f 84 80 00 00 00    	je     c0013f4c <switchToThread(ThreadControlBlock*)+0xa0>
c0013ecc:	81 e2 ff 00 00 00    	and    edx,0xff
c0013ed2:	b8 00 04 00 00       	mov    eax,0x400
c0013ed7:	29 d0                	sub    eax,edx
c0013ed9:	d1 f8                	sar    eax,1
c0013edb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013ede:	66 90                	xchg   ax,ax
c0013ee0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0013ee3:	e8 58 26 00 00       	call   c0016540 <HalQueryPerformanceCounter()>
c0013ee8:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c0013eed:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0013ef3:	89 c6                	mov    esi,eax
c0013ef5:	89 d7                	mov    edi,edx
c0013ef7:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c0013efd:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0013f02:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c0013f08:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c0013f0e:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0013f14:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013f1a:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0013f20:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0013f23:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0013f26:	01 c6                	add    esi,eax
c0013f28:	11 d7                	adc    edi,edx
c0013f2a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013f2d:	83 ec 0c             	sub    esp,0xc
c0013f30:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0013f33:	53                   	push   ebx
c0013f34:	e8 3e c3 fe ff       	call   c0000277 <switchToThreadASM>
c0013f39:	0f 20 c0             	mov    eax,cr0
c0013f3c:	83 c8 08             	or     eax,0x8
c0013f3f:	0f 22 c0             	mov    cr0,eax
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	5b                   	pop    ebx
c0013f46:	5e                   	pop    esi
c0013f47:	5f                   	pop    edi
c0013f48:	c3                   	ret    
c0013f49:	8d 76 00             	lea    esi,[esi+0x0]
c0013f4c:	31 c0                	xor    eax,eax
c0013f4e:	eb 90                	jmp    c0013ee0 <switchToThread(ThreadControlBlock*)+0x34>
c0013f50:	5b                   	pop    ebx
c0013f51:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0013f5b:	5e                   	pop    esi
c0013f5c:	5f                   	pop    edi
c0013f5d:	c3                   	ret    
c0013f5e:	66 90                	xchg   ax,ax

c0013f60 <Process::addArgs(char**)>:
c0013f60:	57                   	push   edi
c0013f61:	56                   	push   esi
c0013f62:	53                   	push   ebx
c0013f63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f67:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013f6b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013f75:	85 ff                	test   edi,edi
c0013f77:	74 43                	je     c0013fbc <Process::addArgs(char**)+0x5c>
c0013f79:	8b 07                	mov    eax,DWORD PTR [edi]
c0013f7b:	85 c0                	test   eax,eax
c0013f7d:	74 3d                	je     c0013fbc <Process::addArgs(char**)+0x5c>
c0013f7f:	31 db                	xor    ebx,ebx
c0013f81:	8d 76 00             	lea    esi,[esi+0x0]
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	50                   	push   eax
c0013f88:	e8 b3 c5 fe ff       	call   c0000540 <strlen>
c0013f8d:	40                   	inc    eax
c0013f8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f91:	e8 df 38 ff ff       	call   c0007875 <malloc>
c0013f96:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013f9d:	5a                   	pop    edx
c0013f9e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013fa1:	59                   	pop    ecx
c0013fa2:	43                   	inc    ebx
c0013fa3:	52                   	push   edx
c0013fa4:	50                   	push   eax
c0013fa5:	e8 56 c6 fe ff       	call   c0000600 <strcpy>
c0013faa:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013fb6:	85 c0                	test   eax,eax
c0013fb8:	75 ca                	jne    c0013f84 <Process::addArgs(char**)+0x24>
c0013fba:	66 90                	xchg   ax,ax
c0013fbc:	5b                   	pop    ebx
c0013fbd:	5e                   	pop    esi
c0013fbe:	5f                   	pop    edi
c0013fbf:	c3                   	ret    

c0013fc0 <Process::Process(char const*, Process*, char**)>:
c0013fc0:	56                   	push   esi
c0013fc1:	53                   	push   ebx
c0013fc2:	83 ec 14             	sub    esp,0x14
c0013fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc9:	05 0c 02 00 00       	add    eax,0x20c
c0013fce:	bb 07 00 00 00       	mov    ebx,0x7
c0013fd3:	89 c6                	mov    esi,eax
c0013fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd8:	85 db                	test   ebx,ebx
c0013fda:	78 14                	js     c0013ff0 <Process::Process(char const*, Process*, char**)+0x30>
c0013fdc:	83 ec 0c             	sub    esp,0xc
c0013fdf:	56                   	push   esi
c0013fe0:	e8 57 a1 00 00       	call   c001e13c <ThreadControlBlock::ThreadControlBlock()>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	83 c6 5f             	add    esi,0x5f
c0013feb:	4b                   	dec    ebx
c0013fec:	eb ea                	jmp    c0013fd8 <Process::Process(char const*, Process*, char**)+0x18>
c0013fee:	66 90                	xchg   ax,ax
c0013ff0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fff:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014006:	83 ec 0c             	sub    esp,0xc
c0014009:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001400d:	e8 ee c0 ff ff       	call   c0010100 <Krnl::newProcessEnv(Process*)>
c0014012:	83 c4 10             	add    esp,0x10
c0014015:	89 c2                	mov    edx,eax
c0014017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001401b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014025:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001402e:	a1 e0 14 02 c0       	mov    eax,ds:0xc00214e0
c0014033:	8d 50 01             	lea    edx,[eax+0x1]
c0014036:	89 15 e0 14 02 c0    	mov    DWORD PTR ds:0xc00214e0,edx
c001403c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014040:	89 02                	mov    DWORD PTR [edx],eax
c0014042:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001404a:	83 ec 0c             	sub    esp,0xc
c001404d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014051:	e8 1f 38 ff ff       	call   c0007875 <malloc>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	89 c3                	mov    ebx,eax
c001405b:	83 ec 08             	sub    esp,0x8
c001405e:	6a 00                	push   0x0
c0014060:	53                   	push   ebx
c0014061:	e8 58 5e ff ff       	call   c0009ebe <VAS::VAS(bool)>
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001406d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014077:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014085:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014089:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001408f:	e8 e2 c5 ff ff       	call   c0010676 <KeInitSignals()>
c0014094:	89 c2                	mov    edx,eax
c0014096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001409a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00140a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140aa:	85 c0                	test   eax,eax
c00140ac:	74 42                	je     c00140f0 <Process::Process(char const*, Process*, char**)+0x130>
c00140ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140b2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140b8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00140be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00140c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140cc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00140d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00140d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140dc:	05 0c 01 00 00       	add    eax,0x10c
c00140e1:	83 ec 08             	sub    esp,0x8
c00140e4:	52                   	push   edx
c00140e5:	50                   	push   eax
c00140e6:	e8 15 c5 fe ff       	call   c0000600 <strcpy>
c00140eb:	83 c4 10             	add    esp,0x10
c00140ee:	eb 64                	jmp    c0014154 <Process::Process(char const*, Process*, char**)+0x194>
c00140f0:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140ff:	e8 71 37 ff ff       	call   c0007875 <malloc>
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	89 c3                	mov    ebx,eax
c0014109:	83 ec 08             	sub    esp,0x8
c001410c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014110:	53                   	push   ebx
c0014111:	e8 9a 48 ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c0014116:	83 c4 10             	add    esp,0x10
c0014119:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001411d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014127:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	50                   	push   eax
c0014131:	e8 20 41 ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0014136:	83 c4 10             	add    esp,0x10
c0014139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413d:	05 0c 01 00 00       	add    eax,0x10c
c0014142:	83 ec 08             	sub    esp,0x8
c0014145:	68 4a 03 02 c0       	push   0xc002034a
c001414a:	50                   	push   eax
c001414b:	e8 b0 c4 fe ff       	call   c0000600 <strcpy>
c0014150:	83 c4 10             	add    esp,0x10
c0014153:	90                   	nop
c0014154:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014158:	83 c0 0c             	add    eax,0xc
c001415b:	83 ec 08             	sub    esp,0x8
c001415e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014162:	50                   	push   eax
c0014163:	e8 98 c4 fe ff       	call   c0000600 <strcpy>
c0014168:	83 c4 10             	add    esp,0x10
c001416b:	83 ec 08             	sub    esp,0x8
c001416e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014176:	e8 e5 fd ff ff       	call   c0013f60 <Process::addArgs(char**)>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	83 ec 08             	sub    esp,0x8
c0014181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014189:	e8 6a ed ff ff       	call   c0012ef8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001418e:	83 c4 10             	add    esp,0x10
c0014191:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014195:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014199:	83 f0 01             	xor    eax,0x1
c001419c:	88 c2                	mov    dl,al
c001419e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141a2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00141a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00141ac:	25 ff 00 00 00       	and    eax,0xff
c00141b1:	83 ec 08             	sub    esp,0x8
c00141b4:	50                   	push   eax
c00141b5:	68 a4 03 02 c0       	push   0xc00203a4
c00141ba:	e8 4b 64 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00141bf:	83 c4 10             	add    esp,0x10
c00141c2:	90                   	nop
c00141c3:	83 c4 14             	add    esp,0x14
c00141c6:	5b                   	pop    ebx
c00141c7:	5e                   	pop    esi
c00141c8:	c3                   	ret    
c00141c9:	90                   	nop
c00141ca:	66 90                	xchg   ax,ax

c00141cc <Process::Process(bool, char const*, Process*, char**)>:
c00141cc:	56                   	push   esi
c00141cd:	53                   	push   ebx
c00141ce:	83 ec 24             	sub    esp,0x24
c00141d1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00141d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141dd:	05 0c 02 00 00       	add    eax,0x20c
c00141e2:	bb 07 00 00 00       	mov    ebx,0x7
c00141e7:	89 c6                	mov    esi,eax
c00141e9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ec:	85 db                	test   ebx,ebx
c00141ee:	78 14                	js     c0014204 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	56                   	push   esi
c00141f4:	e8 43 9f 00 00       	call   c001e13c <ThreadControlBlock::ThreadControlBlock()>
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	83 c6 5f             	add    esi,0x5f
c00141ff:	4b                   	dec    ebx
c0014200:	eb ea                	jmp    c00141ec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014202:	66 90                	xchg   ax,ax
c0014204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014208:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001420f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014213:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001421a:	83 ec 0c             	sub    esp,0xc
c001421d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014221:	e8 da be ff ff       	call   c0010100 <Krnl::newProcessEnv(Process*)>
c0014226:	83 c4 10             	add    esp,0x10
c0014229:	89 c2                	mov    edx,eax
c001422b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001422f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014235:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014239:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014242:	a1 e0 14 02 c0       	mov    eax,ds:0xc00214e0
c0014247:	8d 50 01             	lea    edx,[eax+0x1]
c001424a:	89 15 e0 14 02 c0    	mov    DWORD PTR ds:0xc00214e0,edx
c0014250:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014254:	89 02                	mov    DWORD PTR [edx],eax
c0014256:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001425e:	83 ec 0c             	sub    esp,0xc
c0014261:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014265:	e8 0b 36 ff ff       	call   c0007875 <malloc>
c001426a:	83 c4 10             	add    esp,0x10
c001426d:	89 c3                	mov    ebx,eax
c001426f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014273:	25 ff 00 00 00       	and    eax,0xff
c0014278:	83 ec 08             	sub    esp,0x8
c001427b:	50                   	push   eax
c001427c:	53                   	push   ebx
c001427d:	e8 3c 5c ff ff       	call   c0009ebe <VAS::VAS(bool)>
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014289:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001428f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014293:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001429d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00142a5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00142ab:	e8 c6 c3 ff ff       	call   c0010676 <KeInitSignals()>
c00142b0:	89 c2                	mov    edx,eax
c00142b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142b6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00142bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142c0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142c6:	85 c0                	test   eax,eax
c00142c8:	74 42                	je     c001430c <Process::Process(bool, char const*, Process*, char**)+0x140>
c00142ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142ce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142d4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00142da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142de:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00142e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142e8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00142ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00142f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142f8:	05 0c 01 00 00       	add    eax,0x10c
c00142fd:	83 ec 08             	sub    esp,0x8
c0014300:	52                   	push   edx
c0014301:	50                   	push   eax
c0014302:	e8 f9 c2 fe ff       	call   c0000600 <strcpy>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	eb 64                	jmp    c0014370 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001430c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014314:	83 ec 0c             	sub    esp,0xc
c0014317:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001431b:	e8 55 35 ff ff       	call   c0007875 <malloc>
c0014320:	83 c4 10             	add    esp,0x10
c0014323:	89 c3                	mov    ebx,eax
c0014325:	83 ec 08             	sub    esp,0x8
c0014328:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001432c:	53                   	push   ebx
c001432d:	e8 7e 46 ff ff       	call   c00089b0 <VgaText::VgaText(char const*)>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014339:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001433f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014343:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	50                   	push   eax
c001434d:	e8 04 3f ff ff       	call   c0008256 <addToTerminalCycle(VgaText*)>
c0014352:	83 c4 10             	add    esp,0x10
c0014355:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014359:	05 0c 01 00 00       	add    eax,0x10c
c001435e:	83 ec 08             	sub    esp,0x8
c0014361:	68 4a 03 02 c0       	push   0xc002034a
c0014366:	50                   	push   eax
c0014367:	e8 94 c2 fe ff       	call   c0000600 <strcpy>
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	90                   	nop
c0014370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014374:	83 c0 0c             	add    eax,0xc
c0014377:	83 ec 08             	sub    esp,0x8
c001437a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001437e:	50                   	push   eax
c001437f:	e8 7c c2 fe ff       	call   c0000600 <strcpy>
c0014384:	83 c4 10             	add    esp,0x10
c0014387:	83 ec 08             	sub    esp,0x8
c001438a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001438e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014392:	e8 c9 fb ff ff       	call   c0013f60 <Process::addArgs(char**)>
c0014397:	83 c4 10             	add    esp,0x10
c001439a:	90                   	nop
c001439b:	83 c4 24             	add    esp,0x24
c001439e:	5b                   	pop    ebx
c001439f:	5e                   	pop    esi
c00143a0:	c3                   	ret    
c00143a1:	8d 76 00             	lea    esi,[esi+0x0]

c00143a4 <taskStartupFunction>:
c00143a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00143ac:	c3                   	ret    
c00143ad:	90                   	nop
c00143ae:	66 90                	xchg   ax,ax

c00143b0 <Semaphore::Semaphore(int)>:
c00143b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00143b8:	89 10                	mov    DWORD PTR [eax],edx
c00143ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143be:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00143c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00143db:	90                   	nop
c00143dc:	c3                   	ret    
c00143dd:	90                   	nop
c00143de:	66 90                	xchg   ax,ax

c00143e0 <Mutex::Mutex()>:
c00143e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143e4:	6a 01                	push   0x1
c00143e6:	50                   	push   eax
c00143e7:	e8 c4 ff ff ff       	call   c00143b0 <Semaphore::Semaphore(int)>
c00143ec:	83 c4 08             	add    esp,0x8
c00143ef:	90                   	nop
c00143f0:	c3                   	ret    
c00143f1:	90                   	nop
c00143f2:	66 90                	xchg   ax,ax

c00143f4 <Process::createThread(void (*)(void*), void*, int)>:
c00143f4:	57                   	push   edi
c00143f5:	31 c9                	xor    ecx,ecx
c00143f7:	56                   	push   esi
c00143f8:	53                   	push   ebx
c00143f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143fd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014404:	89 f2                	mov    edx,esi
c0014406:	66 90                	xchg   ax,ax
c0014408:	31 c0                	xor    eax,eax
c001440a:	66 89 d0             	mov    ax,dx
c001440d:	83 e2 01             	and    edx,0x1
c0014410:	74 12                	je     c0014424 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014412:	d1 f8                	sar    eax,1
c0014414:	41                   	inc    ecx
c0014415:	89 c2                	mov    edx,eax
c0014417:	83 f9 10             	cmp    ecx,0x10
c001441a:	75 ec                	jne    c0014408 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001441c:	31 db                	xor    ebx,ebx
c001441e:	89 d8                	mov    eax,ebx
c0014420:	5b                   	pop    ebx
c0014421:	5e                   	pop    esi
c0014422:	5f                   	pop    edi
c0014423:	c3                   	ret    
c0014424:	b8 01 00 00 00       	mov    eax,0x1
c0014429:	d3 e0                	shl    eax,cl
c001442b:	09 c6                	or     esi,eax
c001442d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014430:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014437:	01 c0                	add    eax,eax
c0014439:	01 c8                	add    eax,ecx
c001443b:	8d 04 80             	lea    eax,[eax+eax*4]
c001443e:	01 d8                	add    eax,ebx
c0014440:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014447:	75 0b                	jne    c0014454 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014449:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014453:	90                   	nop
c0014454:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001445a:	83 ec 08             	sub    esp,0x8
c001445d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014460:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014463:	01 c0                	add    eax,eax
c0014465:	01 c8                	add    eax,ecx
c0014467:	8d 3c 80             	lea    edi,[eax+eax*4]
c001446a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001446d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014473:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014479:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001447d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014483:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014489:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014490:	89 ca                	mov    edx,ecx
c0014492:	f7 da                	neg    edx
c0014494:	c1 e2 15             	shl    edx,0x15
c0014497:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001449d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00144a3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00144a7:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00144b1:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00144b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00144bb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00144c1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00144cb:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00144d5:	53                   	push   ebx
c00144d6:	68 84 71 02 c0       	push   0xc0027184
c00144db:	e8 fc 99 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00144e0:	83 c4 10             	add    esp,0x10
c00144e3:	89 d8                	mov    eax,ebx
c00144e5:	5b                   	pop    ebx
c00144e6:	5e                   	pop    esi
c00144e7:	5f                   	pop    edi
c00144e8:	c3                   	ret    
c00144e9:	90                   	nop
c00144ea:	66 90                	xchg   ax,ax

c00144ec <Process::createUserThread()>:
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 80 00 00 00       	push   0x80
c00144f4:	6a 00                	push   0x0
c00144f6:	68 54 3e 01 c0       	push   0xc0013e54
c00144fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144ff:	50                   	push   eax
c0014500:	e8 ef fe ff ff       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c0014505:	83 c4 1c             	add    esp,0x1c
c0014508:	c3                   	ret    
c0014509:	8d 76 00             	lea    esi,[esi+0x0]

c001450c <setupMultitasking(void (*)())>:
c001450c:	56                   	push   esi
c001450d:	53                   	push   ebx
c001450e:	53                   	push   ebx
c001450f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014513:	eb 13                	jmp    c0014528 <setupMultitasking(void (*)())+0x1c>
c0014515:	8d 76 00             	lea    esi,[esi+0x0]
c0014518:	83 ec 0c             	sub    esp,0xc
c001451b:	68 84 71 02 c0       	push   0xc0027184
c0014520:	e8 ff 98 00 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014525:	83 c4 10             	add    esp,0x10
c0014528:	83 ec 0c             	sub    esp,0xc
c001452b:	68 84 71 02 c0       	push   0xc0027184
c0014530:	e8 cb 98 00 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014535:	83 c4 10             	add    esp,0x10
c0014538:	84 c0                	test   al,al
c001453a:	74 dc                	je     c0014518 <setupMultitasking(void (*)())+0xc>
c001453c:	83 ec 0c             	sub    esp,0xc
c001453f:	68 24 07 00 00       	push   0x724
c0014544:	e8 2c 33 ff ff       	call   c0007875 <malloc>
c0014549:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014550:	89 c3                	mov    ebx,eax
c0014552:	6a 00                	push   0x0
c0014554:	68 4e 03 02 c0       	push   0xc002034e
c0014559:	6a 01                	push   0x1
c001455b:	50                   	push   eax
c001455c:	e8 6b fc ff ff       	call   c00141cc <Process::Process(bool, char const*, Process*, char**)>
c0014561:	83 c4 14             	add    esp,0x14
c0014564:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001456a:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014570:	50                   	push   eax
c0014571:	e8 37 3f ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c0014576:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001457e:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014588:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001458e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014591:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001459b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00145a1:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00145a7:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00145b1:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00145bb:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00145c5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00145cb:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00145d1:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00145db:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00145e1:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00145eb:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00145f1:	5a                   	pop    edx
c00145f2:	59                   	pop    ecx
c00145f3:	68 4a 03 02 c0       	push   0xc002034a
c00145f8:	50                   	push   eax
c00145f9:	e8 02 c0 fe ff       	call   c0000600 <strcpy>
c00145fe:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014605:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014609:	83 c4 14             	add    esp,0x14
c001460c:	5b                   	pop    ebx
c001460d:	5e                   	pop    esi
c001460e:	e9 56 bc fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014613:	90                   	nop

c0014614 <schedule()>:
c0014614:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c001461a:	85 d2                	test   edx,edx
c001461c:	74 0e                	je     c001462c <schedule()+0x18>
c001461e:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014628:	c3                   	ret    
c0014629:	8d 76 00             	lea    esi,[esi+0x0]
c001462c:	53                   	push   ebx
c001462d:	83 ec 14             	sub    esp,0x14
c0014630:	68 84 71 02 c0       	push   0xc0027184
c0014635:	e8 c6 97 00 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001463a:	83 c4 10             	add    esp,0x10
c001463d:	84 c0                	test   al,al
c001463f:	75 3b                	jne    c001467c <schedule()+0x68>
c0014641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014646:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014649:	4a                   	dec    edx
c001464a:	74 38                	je     c0014684 <schedule()+0x70>
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	68 84 71 02 c0       	push   0xc0027184
c0014654:	e8 c3 97 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014659:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014660:	89 c3                	mov    ebx,eax
c0014662:	e8 bd 97 00 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014667:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001466e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014671:	e8 36 f8 ff ff       	call   c0013eac <switchToThread(ThreadControlBlock*)>
c0014676:	83 c4 10             	add    esp,0x10
c0014679:	8d 76 00             	lea    esi,[esi+0x0]
c001467c:	83 c4 08             	add    esp,0x8
c001467f:	5b                   	pop    ebx
c0014680:	c3                   	ret    
c0014681:	8d 76 00             	lea    esi,[esi+0x0]
c0014684:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001468b:	83 ec 08             	sub    esp,0x8
c001468e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014693:	50                   	push   eax
c0014694:	68 84 71 02 c0       	push   0xc0027184
c0014699:	e8 3e 98 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	eb a9                	jmp    c001464c <schedule()+0x38>
c00146a3:	90                   	nop

c00146a4 <Semaphore::tryAcquire()>:
c00146a4:	53                   	push   ebx
c00146a5:	83 ec 08             	sub    esp,0x8
c00146a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146ac:	fa                   	cli    
c00146ad:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00146b2:	8d 50 01             	lea    edx,[eax+0x1]
c00146b5:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00146bb:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00146c1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00146c4:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c00146ca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00146cd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00146cf:	7c 33                	jl     c0014704 <Semaphore::tryAcquire()+0x60>
c00146d1:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c00146d7:	85 d2                	test   edx,edx
c00146d9:	75 0d                	jne    c00146e8 <Semaphore::tryAcquire()+0x44>
c00146db:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c00146e1:	85 d2                	test   edx,edx
c00146e3:	75 6b                	jne    c0014750 <Semaphore::tryAcquire()+0xac>
c00146e5:	8d 76 00             	lea    esi,[esi+0x0]
c00146e8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00146ed:	85 c0                	test   eax,eax
c00146ef:	74 0b                	je     c00146fc <Semaphore::tryAcquire()+0x58>
c00146f1:	8d 76 00             	lea    esi,[esi+0x0]
c00146f4:	31 c0                	xor    eax,eax
c00146f6:	83 c4 08             	add    esp,0x8
c00146f9:	5b                   	pop    ebx
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop
c00146fc:	fb                   	sti    
c00146fd:	83 c4 08             	add    esp,0x8
c0014700:	5b                   	pop    ebx
c0014701:	c3                   	ret    
c0014702:	66 90                	xchg   ax,ax
c0014704:	43                   	inc    ebx
c0014705:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c001470b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001470e:	85 d2                	test   edx,edx
c0014710:	75 22                	jne    c0014734 <Semaphore::tryAcquire()+0x90>
c0014712:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c0014718:	85 c9                	test   ecx,ecx
c001471a:	74 18                	je     c0014734 <Semaphore::tryAcquire()+0x90>
c001471c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014726:	e8 e9 fe ff ff       	call   c0014614 <schedule()>
c001472b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014730:	48                   	dec    eax
c0014731:	8d 76 00             	lea    esi,[esi+0x0]
c0014734:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014739:	85 c0                	test   eax,eax
c001473b:	75 0b                	jne    c0014748 <Semaphore::tryAcquire()+0xa4>
c001473d:	fb                   	sti    
c001473e:	b0 01                	mov    al,0x1
c0014740:	83 c4 08             	add    esp,0x8
c0014743:	5b                   	pop    ebx
c0014744:	c3                   	ret    
c0014745:	8d 76 00             	lea    esi,[esi+0x0]
c0014748:	b0 01                	mov    al,0x1
c001474a:	83 c4 08             	add    esp,0x8
c001474d:	5b                   	pop    ebx
c001474e:	c3                   	ret    
c001474f:	90                   	nop
c0014750:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001475a:	e8 b5 fe ff ff       	call   c0014614 <schedule()>
c001475f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014764:	48                   	dec    eax
c0014765:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001476a:	85 c0                	test   eax,eax
c001476c:	75 86                	jne    c00146f4 <Semaphore::tryAcquire()+0x50>
c001476e:	eb 8c                	jmp    c00146fc <Semaphore::tryAcquire()+0x58>

c0014770 <Semaphore::assertLocked(char const*)>:
c0014770:	83 ec 0c             	sub    esp,0xc
c0014773:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014777:	fa                   	cli    
c0014778:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001477e:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014783:	8d 48 01             	lea    ecx,[eax+0x1]
c0014786:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c001478c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001478e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014791:	7c 29                	jl     c00147bc <Semaphore::assertLocked(char const*)+0x4c>
c0014793:	90                   	nop
c0014794:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014799:	85 c0                	test   eax,eax
c001479b:	75 0b                	jne    c00147a8 <Semaphore::assertLocked(char const*)+0x38>
c001479d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00147a2:	85 c0                	test   eax,eax
c00147a4:	75 2e                	jne    c00147d4 <Semaphore::assertLocked(char const*)+0x64>
c00147a6:	66 90                	xchg   ax,ax
c00147a8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00147ad:	48                   	dec    eax
c00147ae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00147b3:	75 03                	jne    c00147b8 <Semaphore::assertLocked(char const*)+0x48>
c00147b5:	fb                   	sti    
c00147b6:	66 90                	xchg   ax,ax
c00147b8:	83 c4 0c             	add    esp,0xc
c00147bb:	c3                   	ret    
c00147bc:	83 ec 0c             	sub    esp,0xc
c00147bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00147c3:	52                   	push   edx
c00147c4:	e8 42 bb ff ff       	call   c001030b <KePanic(char const*)>
c00147c9:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00147ce:	83 c4 10             	add    esp,0x10
c00147d1:	48                   	dec    eax
c00147d2:	eb c0                	jmp    c0014794 <Semaphore::assertLocked(char const*)+0x24>
c00147d4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00147de:	e8 31 fe ff ff       	call   c0014614 <schedule()>
c00147e3:	eb c3                	jmp    c00147a8 <Semaphore::assertLocked(char const*)+0x38>
c00147e5:	8d 76 00             	lea    esi,[esi+0x0]

c00147e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00147e8:	83 ec 0c             	sub    esp,0xc
c00147eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00147f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00147f7:	e8 18 fe ff ff       	call   c0014614 <schedule()>
c00147fc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014801:	48                   	dec    eax
c0014802:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014807:	75 03                	jne    c001480c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014809:	fb                   	sti    
c001480a:	66 90                	xchg   ax,ax
c001480c:	83 c4 0c             	add    esp,0xc
c001480f:	c3                   	ret    

c0014810 <blockTask(TaskState)>:
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	fa                   	cli    
c0014814:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001481a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001481e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014823:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014826:	e8 e9 fd ff ff       	call   c0014614 <schedule()>
c001482b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014830:	48                   	dec    eax
c0014831:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014836:	75 04                	jne    c001483c <blockTask(TaskState)+0x2c>
c0014838:	fb                   	sti    
c0014839:	8d 76 00             	lea    esi,[esi+0x0]
c001483c:	83 c4 0c             	add    esp,0xc
c001483f:	c3                   	ret    

c0014840 <waitTask(int, int*, int)>:
c0014840:	83 ec 18             	sub    esp,0x18
c0014843:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014848:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001484c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001484f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014858:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001485b:	6a 07                	push   0x7
c001485d:	e8 ae ff ff ff       	call   c0014810 <blockTask(TaskState)>
c0014862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014867:	83 c4 10             	add    esp,0x10
c001486a:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001486d:	85 d2                	test   edx,edx
c001486f:	74 0b                	je     c001487c <waitTask(int, int*, int)+0x3c>
c0014871:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014874:	89 02                	mov    DWORD PTR [edx],eax
c0014876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001487b:	90                   	nop
c001487c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001487f:	83 c4 0c             	add    esp,0xc
c0014882:	c3                   	ret    
c0014883:	90                   	nop

c0014884 <milliTenthSleepUntil(unsigned int)>:
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488b:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014891:	76 05                	jbe    c0014898 <milliTenthSleepUntil(unsigned int)+0x14>
c0014893:	90                   	nop
c0014894:	83 c4 0c             	add    esp,0xc
c0014897:	c3                   	ret    
c0014898:	fa                   	cli    
c0014899:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001489f:	83 ec 08             	sub    esp,0x8
c00148a2:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00148a8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148ae:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00148b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148b7:	52                   	push   edx
c00148b8:	68 78 71 02 c0       	push   0xc0027178
c00148bd:	e8 1a 96 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00148c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00148c9:	e8 42 ff ff ff       	call   c0014810 <blockTask(TaskState)>
c00148ce:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00148d3:	83 c4 10             	add    esp,0x10
c00148d6:	48                   	dec    eax
c00148d7:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00148dc:	85 c0                	test   eax,eax
c00148de:	75 0c                	jne    c00148ec <milliTenthSleepUntil(unsigned int)+0x68>
c00148e0:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00148e5:	85 c0                	test   eax,eax
c00148e7:	75 17                	jne    c0014900 <milliTenthSleepUntil(unsigned int)+0x7c>
c00148e9:	8d 76 00             	lea    esi,[esi+0x0]
c00148ec:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148f1:	48                   	dec    eax
c00148f2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00148f7:	75 9b                	jne    c0014894 <milliTenthSleepUntil(unsigned int)+0x10>
c00148f9:	fb                   	sti    
c00148fa:	83 c4 0c             	add    esp,0xc
c00148fd:	c3                   	ret    
c00148fe:	66 90                	xchg   ax,ax
c0014900:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001490a:	e8 05 fd ff ff       	call   c0014614 <schedule()>
c001490f:	eb db                	jmp    c00148ec <milliTenthSleepUntil(unsigned int)+0x68>
c0014911:	8d 76 00             	lea    esi,[esi+0x0]

c0014914 <milliTenthSleep(unsigned int)>:
c0014914:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014919:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001491d:	e9 62 ff ff ff       	jmp    c0014884 <milliTenthSleepUntil(unsigned int)>
c0014922:	66 90                	xchg   ax,ax

c0014924 <sleep(unsigned int)>:
c0014924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014928:	8d 04 80             	lea    eax,[eax+eax*4]
c001492b:	8d 04 80             	lea    eax,[eax+eax*4]
c001492e:	8d 04 80             	lea    eax,[eax+eax*4]
c0014931:	8d 04 80             	lea    eax,[eax+eax*4]
c0014934:	c1 e0 04             	shl    eax,0x4
c0014937:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001493b:	eb d7                	jmp    c0014914 <milliTenthSleep(unsigned int)>
c001493d:	90                   	nop
c001493e:	66 90                	xchg   ax,ax

c0014940 <Semaphore::acquire()>:
c0014940:	83 ec 0c             	sub    esp,0xc
c0014943:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014947:	fa                   	cli    
c0014948:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001494d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014953:	8d 48 01             	lea    ecx,[eax+0x1]
c0014956:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c001495c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001495f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014961:	7d 2d                	jge    c0014990 <Semaphore::acquire()+0x50>
c0014963:	41                   	inc    ecx
c0014964:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014967:	90                   	nop
c0014968:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001496d:	85 c0                	test   eax,eax
c001496f:	75 0b                	jne    c001497c <Semaphore::acquire()+0x3c>
c0014971:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014976:	85 c0                	test   eax,eax
c0014978:	75 62                	jne    c00149dc <Semaphore::acquire()+0x9c>
c001497a:	66 90                	xchg   ax,ax
c001497c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014981:	48                   	dec    eax
c0014982:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014987:	75 03                	jne    c001498c <Semaphore::acquire()+0x4c>
c0014989:	fb                   	sti    
c001498a:	66 90                	xchg   ax,ax
c001498c:	83 c4 0c             	add    esp,0xc
c001498f:	c3                   	ret    
c0014990:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014995:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001499c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001499f:	85 c9                	test   ecx,ecx
c00149a1:	74 4d                	je     c00149f0 <Semaphore::acquire()+0xb0>
c00149a3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00149a6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149ac:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00149af:	90                   	nop
c00149b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b5:	83 ec 0c             	sub    esp,0xc
c00149b8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00149bb:	68 cc 03 02 c0       	push   0xc00203cc
c00149c0:	e8 45 5c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00149c5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00149cc:	e8 3f fe ff ff       	call   c0014810 <blockTask(TaskState)>
c00149d1:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00149d6:	83 c4 10             	add    esp,0x10
c00149d9:	48                   	dec    eax
c00149da:	eb 8c                	jmp    c0014968 <Semaphore::acquire()+0x28>
c00149dc:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00149e6:	e8 29 fc ff ff       	call   c0014614 <schedule()>
c00149eb:	eb 8f                	jmp    c001497c <Semaphore::acquire()+0x3c>
c00149ed:	8d 76 00             	lea    esi,[esi+0x0]
c00149f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00149f8:	eb b6                	jmp    c00149b0 <Semaphore::acquire()+0x70>
c00149fa:	66 90                	xchg   ax,ax

c00149fc <taskReturned>:
c00149fc:	83 ec 18             	sub    esp,0x18
c00149ff:	68 ec 03 02 c0       	push   0xc00203ec
c0014a04:	e8 02 b9 ff ff       	call   c001030b <KePanic(char const*)>
c0014a09:	83 c4 10             	add    esp,0x10
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	6a 02                	push   0x2
c0014a11:	e8 fa fd ff ff       	call   c0014810 <blockTask(TaskState)>
c0014a16:	fa                   	cli    
c0014a17:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a1d:	e8 f2 fb ff ff       	call   c0014614 <schedule()>
c0014a22:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a27:	83 c4 10             	add    esp,0x10
c0014a2a:	48                   	dec    eax
c0014a2b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014a30:	85 c0                	test   eax,eax
c0014a32:	75 d8                	jne    c0014a0c <taskReturned+0x10>
c0014a34:	fb                   	sti    
c0014a35:	eb d5                	jmp    c0014a0c <taskReturned+0x10>
c0014a37:	90                   	nop

c0014a38 <Thr::processFromPID(int)>:
c0014a38:	57                   	push   edi
c0014a39:	56                   	push   esi
c0014a3a:	53                   	push   ebx
c0014a3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a3f:	fa                   	cli    
c0014a40:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a46:	83 ec 0c             	sub    esp,0xc
c0014a49:	68 84 71 02 c0       	push   0xc0027184
c0014a4e:	e8 c9 93 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	89 c7                	mov    edi,eax
c0014a58:	eb 16                	jmp    c0014a70 <Thr::processFromPID(int)+0x38>
c0014a5a:	66 90                	xchg   ax,ax
c0014a5c:	83 ec 0c             	sub    esp,0xc
c0014a5f:	68 84 71 02 c0       	push   0xc0027184
c0014a64:	e8 b3 93 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a69:	83 c4 10             	add    esp,0x10
c0014a6c:	39 f8                	cmp    eax,edi
c0014a6e:	74 4c                	je     c0014abc <Thr::processFromPID(int)+0x84>
c0014a70:	83 ec 0c             	sub    esp,0xc
c0014a73:	68 84 71 02 c0       	push   0xc0027184
c0014a78:	e8 9f 93 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014a7d:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014a84:	89 c3                	mov    ebx,eax
c0014a86:	e8 99 93 00 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014a8b:	58                   	pop    eax
c0014a8c:	5a                   	pop    edx
c0014a8d:	53                   	push   ebx
c0014a8e:	68 84 71 02 c0       	push   0xc0027184
c0014a93:	e8 44 94 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a98:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014a9b:	83 c4 10             	add    esp,0x10
c0014a9e:	39 30                	cmp    DWORD PTR [eax],esi
c0014aa0:	75 ba                	jne    c0014a5c <Thr::processFromPID(int)+0x24>
c0014aa2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014aa7:	48                   	dec    eax
c0014aa8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014aad:	74 09                	je     c0014ab8 <Thr::processFromPID(int)+0x80>
c0014aaf:	90                   	nop
c0014ab0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ab3:	5b                   	pop    ebx
c0014ab4:	5e                   	pop    esi
c0014ab5:	5f                   	pop    edi
c0014ab6:	c3                   	ret    
c0014ab7:	90                   	nop
c0014ab8:	fb                   	sti    
c0014ab9:	eb f5                	jmp    c0014ab0 <Thr::processFromPID(int)+0x78>
c0014abb:	90                   	nop
c0014abc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ac1:	48                   	dec    eax
c0014ac2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ac7:	75 07                	jne    c0014ad0 <Thr::processFromPID(int)+0x98>
c0014ac9:	fb                   	sti    
c0014aca:	5b                   	pop    ebx
c0014acb:	5e                   	pop    esi
c0014acc:	5f                   	pop    edi
c0014acd:	c3                   	ret    
c0014ace:	66 90                	xchg   ax,ax
c0014ad0:	5b                   	pop    ebx
c0014ad1:	31 c0                	xor    eax,eax
c0014ad3:	5e                   	pop    esi
c0014ad4:	5f                   	pop    edi
c0014ad5:	c3                   	ret    
c0014ad6:	66 90                	xchg   ax,ax

c0014ad8 <unblockTask(ThreadControlBlock*)>:
c0014ad8:	53                   	push   ebx
c0014ad9:	83 ec 08             	sub    esp,0x8
c0014adc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ae0:	fa                   	cli    
c0014ae1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014ae7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014aea:	85 c0                	test   eax,eax
c0014aec:	74 66                	je     c0014b54 <unblockTask(ThreadControlBlock*)+0x7c>
c0014aee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014af1:	48                   	dec    eax
c0014af2:	74 38                	je     c0014b2c <unblockTask(ThreadControlBlock*)+0x54>
c0014af4:	83 ec 0c             	sub    esp,0xc
c0014af7:	68 84 71 02 c0       	push   0xc0027184
c0014afc:	e8 1b 93 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b01:	83 c4 10             	add    esp,0x10
c0014b04:	85 c0                	test   eax,eax
c0014b06:	75 1c                	jne    c0014b24 <unblockTask(ThreadControlBlock*)+0x4c>
c0014b08:	eb 5e                	jmp    c0014b68 <unblockTask(ThreadControlBlock*)+0x90>
c0014b0a:	66 90                	xchg   ax,ax
c0014b0c:	83 ec 08             	sub    esp,0x8
c0014b0f:	50                   	push   eax
c0014b10:	68 84 71 02 c0       	push   0xc0027184
c0014b15:	e8 b2 96 00 00       	call   c001e1cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	85 c0                	test   eax,eax
c0014b1f:	74 47                	je     c0014b68 <unblockTask(ThreadControlBlock*)+0x90>
c0014b21:	8d 76 00             	lea    esi,[esi+0x0]
c0014b24:	39 c3                	cmp    ebx,eax
c0014b26:	75 e4                	jne    c0014b0c <unblockTask(ThreadControlBlock*)+0x34>
c0014b28:	eb 12                	jmp    c0014b3c <unblockTask(ThreadControlBlock*)+0x64>
c0014b2a:	66 90                	xchg   ax,ax
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	68 6c 03 02 c0       	push   0xc002036c
c0014b34:	e8 d1 5a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014b39:	83 c4 10             	add    esp,0x10
c0014b3c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b41:	48                   	dec    eax
c0014b42:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b47:	75 03                	jne    c0014b4c <unblockTask(ThreadControlBlock*)+0x74>
c0014b49:	fb                   	sti    
c0014b4a:	66 90                	xchg   ax,ax
c0014b4c:	83 c4 08             	add    esp,0x8
c0014b4f:	5b                   	pop    ebx
c0014b50:	c3                   	ret    
c0014b51:	8d 76 00             	lea    esi,[esi+0x0]
c0014b54:	83 ec 0c             	sub    esp,0xc
c0014b57:	68 55 03 02 c0       	push   0xc0020355
c0014b5c:	e8 a9 5a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	eb d6                	jmp    c0014b3c <unblockTask(ThreadControlBlock*)+0x64>
c0014b66:	66 90                	xchg   ax,ax
c0014b68:	83 ec 08             	sub    esp,0x8
c0014b6b:	53                   	push   ebx
c0014b6c:	68 84 71 02 c0       	push   0xc0027184
c0014b71:	e8 66 93 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	eb c1                	jmp    c0014b3c <unblockTask(ThreadControlBlock*)+0x64>
c0014b7b:	90                   	nop

c0014b7c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014b7c:	55                   	push   ebp
c0014b7d:	57                   	push   edi
c0014b7e:	56                   	push   esi
c0014b7f:	53                   	push   ebx
c0014b80:	83 ec 1c             	sub    esp,0x1c
c0014b83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014b87:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014b8a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014b90:	85 ed                	test   ebp,ebp
c0014b92:	7e 24                	jle    c0014bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014b94:	31 f6                	xor    esi,esi
c0014b96:	66 90                	xchg   ax,ax
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014ba2:	46                   	inc    esi
c0014ba3:	57                   	push   edi
c0014ba4:	e8 dc 2c ff ff       	call   c0007885 <free>
c0014ba9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014bac:	83 c4 10             	add    esp,0x10
c0014baf:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014bb5:	7f e1                	jg     c0014b98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014bb7:	90                   	nop
c0014bb8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014bc2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014bc7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014bca:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014bcd:	d3 c0                	rol    eax,cl
c0014bcf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014bd6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014bd9:	89 f7                	mov    edi,esi
c0014bdb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014be3:	0f 85 77 01 00 00    	jne    c0014d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014be9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014bef:	85 ed                	test   ebp,ebp
c0014bf1:	74 1d                	je     c0014c10 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014bf3:	83 ec 0c             	sub    esp,0xc
c0014bf6:	55                   	push   ebp
c0014bf7:	e8 20 b4 ff ff       	call   c001001c <EnvVarContainer::~EnvVarContainer()>
c0014bfc:	59                   	pop    ecx
c0014bfd:	5e                   	pop    esi
c0014bfe:	6a 0c                	push   0xc
c0014c00:	55                   	push   ebp
c0014c01:	e8 0e 59 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0014c06:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014c09:	83 c4 10             	add    esp,0x10
c0014c0c:	89 f7                	mov    edi,esi
c0014c0e:	66 90                	xchg   ax,ax
c0014c10:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014c16:	85 c0                	test   eax,eax
c0014c18:	0f 84 b6 00 00 00    	je     c0014cd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014c1e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014c21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014c25:	31 c9                	xor    ecx,ecx
c0014c27:	eb 17                	jmp    c0014c40 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014c29:	8d 76 00             	lea    esi,[esi+0x0]
c0014c2c:	41                   	inc    ecx
c0014c2d:	83 f9 10             	cmp    ecx,0x10
c0014c30:	0f 84 9e 00 00 00    	je     c0014cd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014c36:	66 90                	xchg   ax,ax
c0014c38:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014c3e:	66 90                	xchg   ax,ax
c0014c40:	31 d2                	xor    edx,edx
c0014c42:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014c49:	d3 fa                	sar    edx,cl
c0014c4b:	83 e2 01             	and    edx,0x1
c0014c4e:	74 dc                	je     c0014c2c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c50:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014c53:	01 d2                	add    edx,edx
c0014c55:	01 ca                	add    edx,ecx
c0014c57:	8d 14 92             	lea    edx,[edx+edx*4]
c0014c5a:	01 d0                	add    eax,edx
c0014c5c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014c62:	83 fd 07             	cmp    ebp,0x7
c0014c65:	75 c5                	jne    c0014c2c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c67:	05 40 02 00 00       	add    eax,0x240
c0014c6c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014c6f:	83 fd ff             	cmp    ebp,0xffffffff
c0014c72:	0f 8c f0 00 00 00    	jl     c0014d68 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014c78:	0f 84 ae 01 00 00    	je     c0014e2c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014c7e:	85 ed                	test   ebp,ebp
c0014c80:	0f 84 92 01 00 00    	je     c0014e18 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014c86:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014c88:	75 a2                	jne    c0014c2c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014c8a:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014c90:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014c94:	01 d0                	add    eax,edx
c0014c96:	66 90                	xchg   ax,ax
c0014c98:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014c9c:	83 ec 0c             	sub    esp,0xc
c0014c9f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014ca5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ca8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014cb5:	50                   	push   eax
c0014cb6:	e8 1d fe ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c0014cbb:	83 c4 10             	add    esp,0x10
c0014cbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014cc1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cc5:	89 f7                	mov    edi,esi
c0014cc7:	41                   	inc    ecx
c0014cc8:	83 f9 10             	cmp    ecx,0x10
c0014ccb:	0f 85 67 ff ff ff    	jne    c0014c38 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014cda:	85 c0                	test   eax,eax
c0014cdc:	74 62                	je     c0014d40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014cde:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014ce4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014cea:	74 54                	je     c0014d40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	68 84 71 02 c0       	push   0xc0027184
c0014cf4:	e8 23 91 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014cf9:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014d00:	89 c7                	mov    edi,eax
c0014d02:	e8 f9 90 00 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014d07:	83 c4 10             	add    esp,0x10
c0014d0a:	84 c0                	test   al,al
c0014d0c:	0f 84 ce 00 00 00    	je     c0014de0 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014d12:	66 90                	xchg   ax,ax
c0014d14:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d17:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014d1d:	85 d2                	test   edx,edx
c0014d1f:	74 0f                	je     c0014d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014d21:	83 ec 0c             	sub    esp,0xc
c0014d24:	8b 02                	mov    eax,DWORD PTR [edx]
c0014d26:	52                   	push   edx
c0014d27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014d2a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d2d:	83 c4 10             	add    esp,0x10
c0014d30:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014d3a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d40:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014d46:	85 db                	test   ebx,ebx
c0014d48:	74 16                	je     c0014d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014d4a:	83 ec 0c             	sub    esp,0xc
c0014d4d:	53                   	push   ebx
c0014d4e:	e8 59 4b ff ff       	call   c00098ac <VAS::~VAS()>
c0014d53:	58                   	pop    eax
c0014d54:	5a                   	pop    edx
c0014d55:	6a 14                	push   0x14
c0014d57:	53                   	push   ebx
c0014d58:	e8 b7 57 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	83 c4 1c             	add    esp,0x1c
c0014d63:	5b                   	pop    ebx
c0014d64:	5e                   	pop    esi
c0014d65:	5f                   	pop    edi
c0014d66:	5d                   	pop    ebp
c0014d67:	c3                   	ret    
c0014d68:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014d6c:	83 ec 0c             	sub    esp,0xc
c0014d6f:	68 20 04 02 c0       	push   0xc0020420
c0014d74:	e8 92 b5 ff ff       	call   c001030b <KePanic(char const*)>
c0014d79:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d7c:	83 c4 10             	add    esp,0x10
c0014d7f:	89 f7                	mov    edi,esi
c0014d81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014d85:	e9 a2 fe ff ff       	jmp    c0014c2c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014d8a:	66 90                	xchg   ax,ax
c0014d8c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d92:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014d98:	75 1e                	jne    c0014db8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014d9a:	83 ec 0c             	sub    esp,0xc
c0014d9d:	68 88 04 02 c0       	push   0xc0020488
c0014da2:	e8 63 58 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014da7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014dae:	e8 5d fa ff ff       	call   c0014810 <blockTask(TaskState)>
c0014db3:	83 c4 10             	add    esp,0x10
c0014db6:	66 90                	xchg   ax,ax
c0014db8:	83 ec 08             	sub    esp,0x8
c0014dbb:	56                   	push   esi
c0014dbc:	68 84 71 02 c0       	push   0xc0027184
c0014dc1:	e8 16 91 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014dc6:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014dcd:	e8 4a 90 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	39 f8                	cmp    eax,edi
c0014dd7:	0f 84 37 ff ff ff    	je     c0014d14 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	68 84 71 02 c0       	push   0xc0027184
c0014de8:	e8 2f 90 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014ded:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014df4:	89 c6                	mov    esi,eax
c0014df6:	e8 29 90 00 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	39 f3                	cmp    ebx,esi
c0014e00:	74 b6                	je     c0014db8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014e02:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014e05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e08:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014e0e:	75 a8                	jne    c0014db8 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014e10:	e9 77 ff ff ff       	jmp    c0014d8c <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014e15:	8d 76 00             	lea    esi,[esi+0x0]
c0014e18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e1c:	83 ec 0c             	sub    esp,0xc
c0014e1f:	68 54 04 02 c0       	push   0xc0020454
c0014e24:	e9 4b ff ff ff       	jmp    c0014d74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014e29:	8d 76 00             	lea    esi,[esi+0x0]
c0014e2c:	8b 36                	mov    esi,DWORD PTR [esi]
c0014e2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e32:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014e35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e38:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014e3e:	01 d7                	add    edi,edx
c0014e40:	89 f8                	mov    eax,edi
c0014e42:	e9 51 fe ff ff       	jmp    c0014c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014e47:	90                   	nop

c0014e48 <cleanerTaskFunction(void*)>:
c0014e48:	53                   	push   ebx
c0014e49:	83 ec 08             	sub    esp,0x8
c0014e4c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e51:	48                   	dec    eax
c0014e52:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e57:	75 03                	jne    c0014e5c <cleanerTaskFunction(void*)+0x14>
c0014e59:	fb                   	sti    
c0014e5a:	66 90                	xchg   ax,ax
c0014e5c:	fa                   	cli    
c0014e5d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e62:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0014e69:	8d 50 01             	lea    edx,[eax+0x1]
c0014e6c:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014e72:	0f 84 ac 00 00 00    	je     c0014f24 <cleanerTaskFunction(void*)+0xdc>
c0014e78:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e7d:	85 c0                	test   eax,eax
c0014e7f:	75 03                	jne    c0014e84 <cleanerTaskFunction(void*)+0x3c>
c0014e81:	fb                   	sti    
c0014e82:	66 90                	xchg   ax,ax
c0014e84:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0014e8b:	fa                   	cli    
c0014e8c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e92:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014e98:	fa                   	cli    
c0014e99:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e9f:	eb 2b                	jmp    c0014ecc <cleanerTaskFunction(void*)+0x84>
c0014ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	68 6c 71 02 c0       	push   0xc002716c
c0014eac:	e8 6b 8f 00 00       	call   c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014eb1:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0014eb8:	89 c3                	mov    ebx,eax
c0014eba:	e8 65 8f 00 00       	call   c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014ebf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ec2:	e8 b5 fc ff ff       	call   c0014b7c <cleanupTerminatedTask(ThreadControlBlock*)>
c0014ec7:	83 c4 10             	add    esp,0x10
c0014eca:	66 90                	xchg   ax,ax
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	68 6c 71 02 c0       	push   0xc002716c
c0014ed4:	e8 27 8f 00 00       	call   c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	84 c0                	test   al,al
c0014ede:	74 c4                	je     c0014ea4 <cleanerTaskFunction(void*)+0x5c>
c0014ee0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ee5:	48                   	dec    eax
c0014ee6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014eeb:	75 03                	jne    c0014ef0 <cleanerTaskFunction(void*)+0xa8>
c0014eed:	fb                   	sti    
c0014eee:	66 90                	xchg   ax,ax
c0014ef0:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ef5:	48                   	dec    eax
c0014ef6:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014efb:	0f 85 4b ff ff ff    	jne    c0014e4c <cleanerTaskFunction(void*)+0x4>
c0014f01:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014f06:	85 c0                	test   eax,eax
c0014f08:	0f 84 3e ff ff ff    	je     c0014e4c <cleanerTaskFunction(void*)+0x4>
c0014f0e:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014f18:	e8 f7 f6 ff ff       	call   c0014614 <schedule()>
c0014f1d:	e9 2a ff ff ff       	jmp    c0014e4c <cleanerTaskFunction(void*)+0x4>
c0014f22:	66 90                	xchg   ax,ax
c0014f24:	83 ec 0c             	sub    esp,0xc
c0014f27:	6a 02                	push   0x2
c0014f29:	e8 ba f8 ff ff       	call   c00147e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	e9 4e ff ff ff       	jmp    c0014e84 <cleanerTaskFunction(void*)+0x3c>
c0014f36:	66 90                	xchg   ax,ax

c0014f38 <terminateTask(int)>:
c0014f38:	83 ec 14             	sub    esp,0x14
c0014f3b:	fa                   	cli    
c0014f3c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f42:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014f48:	fa                   	cli    
c0014f49:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f58:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014f5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f60:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014f63:	50                   	push   eax
c0014f64:	68 6c 71 02 c0       	push   0xc002716c
c0014f69:	e8 6e 8f 00 00       	call   c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014f7d:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0014f82:	85 c0                	test   eax,eax
c0014f84:	74 5e                	je     c0014fe4 <terminateTask(int)+0xac>
c0014f86:	83 ec 0c             	sub    esp,0xc
c0014f89:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0014f90:	50                   	push   eax
c0014f91:	e8 42 fb ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c0014f96:	83 c4 10             	add    esp,0x10
c0014f99:	8d 76 00             	lea    esi,[esi+0x0]
c0014f9c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fa1:	48                   	dec    eax
c0014fa2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014fa7:	75 03                	jne    c0014fac <terminateTask(int)+0x74>
c0014fa9:	fb                   	sti    
c0014faa:	66 90                	xchg   ax,ax
c0014fac:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014fb1:	48                   	dec    eax
c0014fb2:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014fb7:	75 0b                	jne    c0014fc4 <terminateTask(int)+0x8c>
c0014fb9:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0014fc0:	75 36                	jne    c0014ff8 <terminateTask(int)+0xc0>
c0014fc2:	66 90                	xchg   ax,ax
c0014fc4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fc9:	48                   	dec    eax
c0014fca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014fcf:	75 03                	jne    c0014fd4 <terminateTask(int)+0x9c>
c0014fd1:	fb                   	sti    
c0014fd2:	66 90                	xchg   ax,ax
c0014fd4:	fa                   	cli    
c0014fd5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014fdb:	90                   	nop
c0014fdc:	e8 33 f6 ff ff       	call   c0014614 <schedule()>
c0014fe1:	eb e1                	jmp    c0014fc4 <terminateTask(int)+0x8c>
c0014fe3:	90                   	nop
c0014fe4:	83 ec 0c             	sub    esp,0xc
c0014fe7:	68 83 03 02 c0       	push   0xc0020383
c0014fec:	e8 19 56 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0014ff1:	83 c4 10             	add    esp,0x10
c0014ff4:	eb a6                	jmp    c0014f9c <terminateTask(int)+0x64>
c0014ff6:	66 90                	xchg   ax,ax
c0014ff8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015002:	eb d8                	jmp    c0014fdc <terminateTask(int)+0xa4>

c0015004 <Thr::terminateFromIRQ(int)>:
c0015004:	83 ec 18             	sub    esp,0x18
c0015007:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001500b:	50                   	push   eax
c001500c:	e8 27 ff ff ff       	call   c0014f38 <terminateTask(int)>
c0015011:	90                   	nop
c0015012:	66 90                	xchg   ax,ax

c0015014 <Semaphore::release()>:
c0015014:	83 ec 0c             	sub    esp,0xc
c0015017:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001501b:	fa                   	cli    
c001501c:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015021:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015027:	8d 48 01             	lea    ecx,[eax+0x1]
c001502a:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0015030:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015033:	85 c9                	test   ecx,ecx
c0015035:	74 41                	je     c0015078 <Semaphore::release()+0x64>
c0015037:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001503a:	83 ec 0c             	sub    esp,0xc
c001503d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015040:	51                   	push   ecx
c0015041:	e8 92 fa ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c0015046:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001504b:	83 c4 10             	add    esp,0x10
c001504e:	48                   	dec    eax
c001504f:	90                   	nop
c0015050:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015055:	85 c0                	test   eax,eax
c0015057:	75 0b                	jne    c0015064 <Semaphore::release()+0x50>
c0015059:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001505e:	85 c0                	test   eax,eax
c0015060:	75 1e                	jne    c0015080 <Semaphore::release()+0x6c>
c0015062:	66 90                	xchg   ax,ax
c0015064:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015069:	48                   	dec    eax
c001506a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001506f:	75 03                	jne    c0015074 <Semaphore::release()+0x60>
c0015071:	fb                   	sti    
c0015072:	66 90                	xchg   ax,ax
c0015074:	83 c4 0c             	add    esp,0xc
c0015077:	c3                   	ret    
c0015078:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001507b:	eb d3                	jmp    c0015050 <Semaphore::release()+0x3c>
c001507d:	8d 76 00             	lea    esi,[esi+0x0]
c0015080:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001508a:	e8 85 f5 ff ff       	call   c0014614 <schedule()>
c001508f:	eb d3                	jmp    c0015064 <Semaphore::release()+0x50>
c0015091:	8d 76 00             	lea    esi,[esi+0x0]

c0015094 <__static_initialization_and_destruction_0(int, int)>:
c0015094:	83 ec 0c             	sub    esp,0xc
c0015097:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001509c:	0f 85 8e 00 00 00    	jne    c0015130 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00150a2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00150aa:	0f 85 80 00 00 00    	jne    c0015130 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00150b0:	83 ec 0c             	sub    esp,0xc
c00150b3:	68 84 71 02 c0       	push   0xc0027184
c00150b8:	e8 cb 90 00 00       	call   c001e188 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	83 ec 04             	sub    esp,0x4
c00150c3:	68 1c 10 02 c0       	push   0xc002101c
c00150c8:	68 84 71 02 c0       	push   0xc0027184
c00150cd:	68 38 e1 01 c0       	push   0xc001e138
c00150d2:	e8 ed 53 ff ff       	call   c000a4c4 <__cxa_atexit>
c00150d7:	83 c4 10             	add    esp,0x10
c00150da:	83 ec 0c             	sub    esp,0xc
c00150dd:	68 78 71 02 c0       	push   0xc0027178
c00150e2:	e8 a1 90 00 00       	call   c001e188 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	83 ec 04             	sub    esp,0x4
c00150ed:	68 1c 10 02 c0       	push   0xc002101c
c00150f2:	68 78 71 02 c0       	push   0xc0027178
c00150f7:	68 38 e1 01 c0       	push   0xc001e138
c00150fc:	e8 c3 53 ff ff       	call   c000a4c4 <__cxa_atexit>
c0015101:	83 c4 10             	add    esp,0x10
c0015104:	83 ec 0c             	sub    esp,0xc
c0015107:	68 6c 71 02 c0       	push   0xc002716c
c001510c:	e8 77 90 00 00       	call   c001e188 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015111:	83 c4 10             	add    esp,0x10
c0015114:	83 ec 04             	sub    esp,0x4
c0015117:	68 1c 10 02 c0       	push   0xc002101c
c001511c:	68 6c 71 02 c0       	push   0xc002716c
c0015121:	68 38 e1 01 c0       	push   0xc001e138
c0015126:	e8 99 53 ff ff       	call   c000a4c4 <__cxa_atexit>
c001512b:	83 c4 10             	add    esp,0x10
c001512e:	66 90                	xchg   ax,ax
c0015130:	90                   	nop
c0015131:	83 c4 0c             	add    esp,0xc
c0015134:	c3                   	ret    
c0015135:	8d 76 00             	lea    esi,[esi+0x0]

c0015138 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015138:	83 ec 0c             	sub    esp,0xc
c001513b:	83 ec 08             	sub    esp,0x8
c001513e:	68 ff ff 00 00       	push   0xffff
c0015143:	6a 01                	push   0x1
c0015145:	e8 4a ff ff ff       	call   c0015094 <__static_initialization_and_destruction_0(int, int)>
c001514a:	83 c4 10             	add    esp,0x10
c001514d:	83 c4 0c             	add    esp,0xc
c0015150:	c3                   	ret    

c0015151 <Vm::inbv(unsigned short)>:
c0015151:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015155:	66 81 fa fe fe       	cmp    dx,0xfefe
c001515a:	75 06                	jne    c0015162 <Vm::inbv(unsigned short)+0x11>
c001515c:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c0015161:	c3                   	ret    
c0015162:	ec                   	in     al,dx
c0015163:	c3                   	ret    

c0015164 <Vm::outbv(unsigned short, unsigned char)>:
c0015164:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001516c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015171:	75 25                	jne    c0015198 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015173:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015179:	8d 51 01             	lea    edx,[ecx+0x1]
c001517c:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c0015182:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015188:	83 fa 20             	cmp    edx,0x20
c001518b:	75 0c                	jne    c0015199 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001518d:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c0015197:	c3                   	ret    
c0015198:	ee                   	out    dx,al
c0015199:	c3                   	ret    

c001519a <Vm::realToLinear(unsigned short, unsigned short)>:
c001519a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001519f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00151a4:	c1 e0 04             	shl    eax,0x4
c00151a7:	01 d0                	add    eax,edx
c00151a9:	c3                   	ret    

c00151aa <Vm::getSegment(unsigned int)>:
c00151aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151ae:	c1 e8 10             	shr    eax,0x10
c00151b1:	c3                   	ret    

c00151b2 <Vm::getOffset(unsigned int)>:
c00151b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151b6:	c3                   	ret    

c00151b7 <Vm::mainloop2()>:
c00151b7:	83 ec 18             	sub    esp,0x18
c00151ba:	fa                   	cli    
c00151bb:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00151c1:	6a 02                	push   0x2
c00151c3:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c00151ca:	e8 19 f6 ff ff       	call   c00147e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00151cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d4:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00151d8:	52                   	push   edx
c00151d9:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00151dd:	52                   	push   edx
c00151de:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00151e2:	52                   	push   edx
c00151e3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00151e7:	50                   	push   eax
c00151e8:	e8 22 b0 fe ff       	call   c000020f <goToVM86>
c00151ed:	83 c4 2c             	add    esp,0x2c
c00151f0:	c3                   	ret    

c00151f1 <Vm::mainVm8086Loop(void*)>:
c00151f1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00151f6:	48                   	dec    eax
c00151f7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00151fc:	75 01                	jne    c00151ff <Vm::mainVm8086Loop(void*)+0xe>
c00151fe:	fb                   	sti    
c00151ff:	eb b6                	jmp    c00151b7 <Vm::mainloop2()>

c0015201 <Vm::mainloop3(unsigned long)>:
c0015201:	83 ec 18             	sub    esp,0x18
c0015204:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015208:	fa                   	cli    
c0015209:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001520f:	6a 02                	push   0x2
c0015211:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c0015218:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c001521d:	e8 c6 f5 ff ff       	call   c00147e8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015222:	83 c4 1c             	add    esp,0x1c
c0015225:	eb 90                	jmp    c00151b7 <Vm::mainloop2()>

c0015227 <Vm::initialise8086()>:
c0015227:	83 ec 0c             	sub    esp,0xc
c001522a:	68 80 00 00 00       	push   0x80
c001522f:	6a 00                	push   0x0
c0015231:	68 f1 51 01 c0       	push   0xc00151f1
c0015236:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001523c:	e8 b3 f1 ff ff       	call   c00143f4 <Process::createThread(void (*)(void*), void*, int)>
c0015241:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015248:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c001524d:	68 00 01 00 00       	push   0x100
c0015252:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015257:	6a 00                	push   0x0
c0015259:	6a 00                	push   0x0
c001525b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015261:	e8 a4 4a ff ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015266:	83 c4 2c             	add    esp,0x2c
c0015269:	c3                   	ret    

c001526a <Vm::finish8086()>:
c001526a:	53                   	push   ebx
c001526b:	83 ec 08             	sub    esp,0x8
c001526e:	fa                   	cli    
c001526f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015275:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c001527c:	75 15                	jne    c0015293 <Vm::finish8086()+0x29>
c001527e:	e8 91 f3 ff ff       	call   c0014614 <schedule()>
c0015283:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015288:	48                   	dec    eax
c0015289:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001528e:	75 de                	jne    c001526e <Vm::finish8086()+0x4>
c0015290:	fb                   	sti    
c0015291:	eb db                	jmp    c001526e <Vm::finish8086()+0x4>
c0015293:	83 ec 0c             	sub    esp,0xc
c0015296:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c001529c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00152a2:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c00152a9:	e8 2a f8 ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c00152ae:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00152b3:	83 c4 10             	add    esp,0x10
c00152b6:	8d 50 ff             	lea    edx,[eax-0x1]
c00152b9:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00152bf:	85 d2                	test   edx,edx
c00152c1:	75 01                	jne    c00152c4 <Vm::finish8086()+0x5a>
c00152c3:	fb                   	sti    
c00152c4:	89 d8                	mov    eax,ebx
c00152c6:	83 c4 08             	add    esp,0x8
c00152c9:	5b                   	pop    ebx
c00152ca:	c3                   	ret    

c00152cb <Vm::getOutput8086(unsigned char*)>:
c00152cb:	57                   	push   edi
c00152cc:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c00152d2:	56                   	push   esi
c00152d3:	be e0 71 02 c0       	mov    esi,0xc00271e0
c00152d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00152dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152de:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c00152e3:	5e                   	pop    esi
c00152e4:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00152ee:	5f                   	pop    edi
c00152ef:	c3                   	ret    

c00152f0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00152f0:	55                   	push   ebp
c00152f1:	57                   	push   edi
c00152f2:	56                   	push   esi
c00152f3:	53                   	push   ebx
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00152fb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00152ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015303:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015307:	fa                   	cli    
c0015308:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001530e:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c0015315:	75 15                	jne    c001532c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015317:	e8 f8 f2 ff ff       	call   c0014614 <schedule()>
c001531c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015321:	48                   	dec    eax
c0015322:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015327:	75 de                	jne    c0015307 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015329:	fb                   	sti    
c001532a:	eb db                	jmp    c0015307 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001532c:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c0015331:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c001533b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001533f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015343:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015347:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001534b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001534f:	0f b7 ff             	movzx  edi,di
c0015352:	0f b7 f6             	movzx  esi,si
c0015355:	50                   	push   eax
c0015356:	6a 20                	push   0x20
c0015358:	6a 00                	push   0x0
c001535a:	68 e0 71 02 c0       	push   0xc00271e0
c001535f:	e8 6c b1 fe ff       	call   c00004d0 <memset>
c0015364:	5a                   	pop    edx
c0015365:	59                   	pop    ecx
c0015366:	57                   	push   edi
c0015367:	56                   	push   esi
c0015368:	e8 2d fe ff ff       	call   c001519a <Vm::realToLinear(unsigned short, unsigned short)>
c001536d:	83 c4 10             	add    esp,0x10
c0015370:	89 c7                	mov    edi,eax
c0015372:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015376:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001537a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001537c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015381:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015388:	48                   	dec    eax
c0015389:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001538e:	75 01                	jne    c0015391 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015390:	fb                   	sti    
c0015391:	83 ec 0c             	sub    esp,0xc
c0015394:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001539a:	e8 39 f7 ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c001539f:	83 c4 1c             	add    esp,0x1c
c00153a2:	b0 01                	mov    al,0x1
c00153a4:	5b                   	pop    ebx
c00153a5:	5e                   	pop    esi
c00153a6:	5f                   	pop    edi
c00153a7:	5d                   	pop    ebp
c00153a8:	c3                   	ret    

c00153a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00153a9:	55                   	push   ebp
c00153aa:	57                   	push   edi
c00153ab:	56                   	push   esi
c00153ac:	53                   	push   ebx
c00153ad:	83 ec 2c             	sub    esp,0x2c
c00153b0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00153b4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00153b8:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00153bc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00153c0:	fa                   	cli    
c00153c1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153c7:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c00153ce:	89 f0                	mov    eax,esi
c00153d0:	84 c0                	test   al,al
c00153d2:	75 1d                	jne    c00153f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00153d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153d8:	e8 37 f2 ff ff       	call   c0014614 <schedule()>
c00153dd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153e6:	48                   	dec    eax
c00153e7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153ec:	75 d2                	jne    c00153c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00153ee:	fb                   	sti    
c00153ef:	eb cf                	jmp    c00153c0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00153f1:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00153f6:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015400:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015404:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015408:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001540c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015410:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015414:	50                   	push   eax
c0015415:	6a 20                	push   0x20
c0015417:	6a 00                	push   0x0
c0015419:	68 e0 71 02 c0       	push   0xc00271e0
c001541e:	e8 ad b0 fe ff       	call   c00004d0 <memset>
c0015423:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001542a:	e8 46 24 ff ff       	call   c0007875 <malloc>
c001542f:	83 c4 0c             	add    esp,0xc
c0015432:	89 c3                	mov    ebx,eax
c0015434:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001543a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001543e:	50                   	push   eax
c001543f:	e8 3c 57 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	85 db                	test   ebx,ebx
c0015449:	75 0a                	jne    c0015455 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001544b:	83 ec 0c             	sub    esp,0xc
c001544e:	68 b0 04 02 c0       	push   0xc00204b0
c0015453:	eb 3e                	jmp    c0015493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015455:	50                   	push   eax
c0015456:	8d 44 24 17          	lea    eax,[esp+0x17]
c001545a:	50                   	push   eax
c001545b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001545f:	50                   	push   eax
c0015460:	53                   	push   ebx
c0015461:	e8 86 5a ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001546e:	74 0a                	je     c001547a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	68 c4 04 02 c0       	push   0xc00204c4
c0015478:	eb 19                	jmp    c0015493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001547a:	51                   	push   ecx
c001547b:	51                   	push   ecx
c001547c:	6a 01                	push   0x1
c001547e:	53                   	push   ebx
c001547f:	e8 bc 57 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0015484:	83 c4 10             	add    esp,0x10
c0015487:	85 c0                	test   eax,eax
c0015489:	74 24                	je     c00154af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001548b:	83 ec 0c             	sub    esp,0xc
c001548e:	68 dd 04 02 c0       	push   0xc00204dd
c0015493:	e8 73 ae ff ff       	call   c001030b <KePanic(char const*)>
c0015498:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001549d:	83 c4 10             	add    esp,0x10
c00154a0:	48                   	dec    eax
c00154a1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154a6:	85 c0                	test   eax,eax
c00154a8:	75 01                	jne    c00154ab <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00154aa:	fb                   	sti    
c00154ab:	31 f6                	xor    esi,esi
c00154ad:	eb 58                	jmp    c0015507 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00154af:	0f b7 ed             	movzx  ebp,bp
c00154b2:	50                   	push   eax
c00154b3:	0f b7 ff             	movzx  edi,di
c00154b6:	50                   	push   eax
c00154b7:	55                   	push   ebp
c00154b8:	57                   	push   edi
c00154b9:	e8 dc fc ff ff       	call   c001519a <Vm::realToLinear(unsigned short, unsigned short)>
c00154be:	5a                   	pop    edx
c00154bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00154c1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00154c5:	51                   	push   ecx
c00154c6:	50                   	push   eax
c00154c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00154cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00154cf:	53                   	push   ebx
c00154d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154d3:	83 c4 14             	add    esp,0x14
c00154d6:	53                   	push   ebx
c00154d7:	e8 c2 57 ff ff       	call   c000ac9e <File::close()>
c00154dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154e1:	83 c4 10             	add    esp,0x10
c00154e4:	48                   	dec    eax
c00154e5:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00154ec:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154f1:	85 c0                	test   eax,eax
c00154f3:	75 01                	jne    c00154f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00154f5:	fb                   	sti    
c00154f6:	83 ec 0c             	sub    esp,0xc
c00154f9:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00154ff:	e8 d4 f5 ff ff       	call   c0014ad8 <unblockTask(ThreadControlBlock*)>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	83 c4 2c             	add    esp,0x2c
c001550a:	89 f0                	mov    eax,esi
c001550c:	5b                   	pop    ebx
c001550d:	5e                   	pop    esi
c001550e:	5f                   	pop    edi
c001550f:	5d                   	pop    ebp
c0015510:	c3                   	ret    

c0015511 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015511:	57                   	push   edi
c0015512:	56                   	push   esi
c0015513:	53                   	push   ebx
c0015514:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001551c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015520:	83 e8 06             	sub    eax,0x6
c0015523:	0f b7 c0             	movzx  eax,ax
c0015526:	50                   	push   eax
c0015527:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001552c:	50                   	push   eax
c001552d:	e8 68 fc ff ff       	call   c001519a <Vm::realToLinear(unsigned short, unsigned short)>
c0015532:	5a                   	pop    edx
c0015533:	5e                   	pop    esi
c0015534:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015537:	8d 56 fa             	lea    edx,[esi-0x6]
c001553a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015540:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015543:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0015546:	83 c2 02             	add    edx,0x2
c0015549:	66 89 10             	mov    WORD PTR [eax],dx
c001554c:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001554f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015553:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015556:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001555a:	89 d6                	mov    esi,edx
c001555c:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015562:	66 81 e6 ff fd       	and    si,0xfdff
c0015567:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001556b:	74 07                	je     c0015574 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001556d:	89 d6                	mov    esi,edx
c001556f:	66 81 ce 00 02       	or     si,0x200
c0015574:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001557d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015581:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015589:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001558c:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015594:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015597:	5b                   	pop    ebx
c0015598:	5e                   	pop    esi
c0015599:	5f                   	pop    edi
c001559a:	c3                   	ret    

c001559b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001559b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155a5:	c1 e0 04             	shl    eax,0x4
c00155a8:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00155ab:	c3                   	ret    

c00155ac <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00155ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155b6:	c1 e0 04             	shl    eax,0x4
c00155b9:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00155bd:	c3                   	ret    

c00155be <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00155be:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155c8:	c1 e0 04             	shl    eax,0x4
c00155cb:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00155ce:	c3                   	ret    

c00155cf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00155cf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155d4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155d9:	c1 e0 04             	shl    eax,0x4
c00155dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155e0:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00155e3:	c3                   	ret    

c00155e4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00155e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00155ee:	c1 e0 04             	shl    eax,0x4
c00155f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155f5:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00155f9:	c3                   	ret    

c00155fa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00155fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00155ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015604:	c1 e0 04             	shl    eax,0x4
c0015607:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001560b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001560e:	c3                   	ret    

c001560f <Vm::faultHandler(regs*)>:
c001560f:	55                   	push   ebp
c0015610:	57                   	push   edi
c0015611:	56                   	push   esi
c0015612:	53                   	push   ebx
c0015613:	83 ec 1c             	sub    esp,0x1c
c0015616:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001561a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001561d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015621:	0f b7 f8             	movzx  edi,ax
c0015624:	52                   	push   edx
c0015625:	0f b7 c0             	movzx  eax,ax
c0015628:	50                   	push   eax
c0015629:	e8 6c fb ff ff       	call   c001519a <Vm::realToLinear(unsigned short, unsigned short)>
c001562e:	5a                   	pop    edx
c001562f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015632:	59                   	pop    ecx
c0015633:	89 c1                	mov    ecx,eax
c0015635:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015638:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001563c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015645:	0f b7 c5             	movzx  eax,bp
c0015648:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001564c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015650:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015654:	e8 41 fb ff ff       	call   c001519a <Vm::realToLinear(unsigned short, unsigned short)>
c0015659:	5e                   	pop    esi
c001565a:	be 06 00 00 00       	mov    esi,0x6
c001565f:	5a                   	pop    edx
c0015660:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015665:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001566a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001566d:	80 fa 9d             	cmp    dl,0x9d
c0015670:	0f 84 2c 02 00 00    	je     c00158a2 <Vm::faultHandler(regs*)+0x293>
c0015676:	0f 87 91 00 00 00    	ja     c001570d <Vm::faultHandler(regs*)+0xfe>
c001567c:	80 fa 66             	cmp    dl,0x66
c001567f:	0f 84 98 01 00 00    	je     c001581d <Vm::faultHandler(regs*)+0x20e>
c0015685:	77 47                	ja     c00156ce <Vm::faultHandler(regs*)+0xbf>
c0015687:	80 fa 36             	cmp    dl,0x36
c001568a:	0f 84 80 01 00 00    	je     c0015810 <Vm::faultHandler(regs*)+0x201>
c0015690:	77 1a                	ja     c00156ac <Vm::faultHandler(regs*)+0x9d>
c0015692:	80 fa 26             	cmp    dl,0x26
c0015695:	0f 84 4e 01 00 00    	je     c00157e9 <Vm::faultHandler(regs*)+0x1da>
c001569b:	80 fa 2e             	cmp    dl,0x2e
c001569e:	0f 85 e2 05 00 00    	jne    c0015c86 <Vm::faultHandler(regs*)+0x677>
c00156a4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00156a7:	31 f6                	xor    esi,esi
c00156a9:	41                   	inc    ecx
c00156aa:	eb be                	jmp    c001566a <Vm::faultHandler(regs*)+0x5b>
c00156ac:	80 fa 64             	cmp    dl,0x64
c00156af:	0f 84 41 01 00 00    	je     c00157f6 <Vm::faultHandler(regs*)+0x1e7>
c00156b5:	0f 87 48 01 00 00    	ja     c0015803 <Vm::faultHandler(regs*)+0x1f4>
c00156bb:	80 fa 3e             	cmp    dl,0x3e
c00156be:	0f 85 c2 05 00 00    	jne    c0015c86 <Vm::faultHandler(regs*)+0x677>
c00156c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00156c7:	be 01 00 00 00       	mov    esi,0x1
c00156cc:	eb db                	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c00156ce:	80 fa 6d             	cmp    dl,0x6d
c00156d1:	0f 84 ec 02 00 00    	je     c00159c3 <Vm::faultHandler(regs*)+0x3b4>
c00156d7:	77 17                	ja     c00156f0 <Vm::faultHandler(regs*)+0xe1>
c00156d9:	80 fa 67             	cmp    dl,0x67
c00156dc:	0f 84 48 01 00 00    	je     c001582a <Vm::faultHandler(regs*)+0x21b>
c00156e2:	80 fa 6c             	cmp    dl,0x6c
c00156e5:	0f 84 69 02 00 00    	je     c0015954 <Vm::faultHandler(regs*)+0x345>
c00156eb:	e9 96 05 00 00       	jmp    c0015c86 <Vm::faultHandler(regs*)+0x677>
c00156f0:	80 fa 6f             	cmp    dl,0x6f
c00156f3:	0f 84 f4 03 00 00    	je     c0015aed <Vm::faultHandler(regs*)+0x4de>
c00156f9:	0f 82 59 03 00 00    	jb     c0015a58 <Vm::faultHandler(regs*)+0x449>
c00156ff:	80 fa 9c             	cmp    dl,0x9c
c0015702:	0f 84 2f 01 00 00    	je     c0015837 <Vm::faultHandler(regs*)+0x228>
c0015708:	e9 79 05 00 00       	jmp    c0015c86 <Vm::faultHandler(regs*)+0x677>
c001570d:	80 fa ec             	cmp    dl,0xec
c0015710:	0f 84 14 05 00 00    	je     c0015c2a <Vm::faultHandler(regs*)+0x61b>
c0015716:	77 7b                	ja     c0015793 <Vm::faultHandler(regs*)+0x184>
c0015718:	80 fa e4             	cmp    dl,0xe4
c001571b:	0f 84 93 04 00 00    	je     c0015bb4 <Vm::faultHandler(regs*)+0x5a5>
c0015721:	77 53                	ja     c0015776 <Vm::faultHandler(regs*)+0x167>
c0015723:	80 fa cd             	cmp    dl,0xcd
c0015726:	0f 84 d9 01 00 00    	je     c0015905 <Vm::faultHandler(regs*)+0x2f6>
c001572c:	80 fa cf             	cmp    dl,0xcf
c001572f:	0f 85 51 05 00 00    	jne    c0015c86 <Vm::faultHandler(regs*)+0x677>
c0015735:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015738:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001573b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001573f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015742:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015746:	81 ca 00 02 02 00    	or     edx,0x20200
c001574c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001574f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015753:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015759:	66 c1 e8 09          	shr    ax,0x9
c001575d:	83 e0 01             	and    eax,0x1
c0015760:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015763:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015766:	83 c0 06             	add    eax,0x6
c0015769:	25 ff ff 00 00       	and    eax,0xffff
c001576e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015771:	e9 0c 05 00 00       	jmp    c0015c82 <Vm::faultHandler(regs*)+0x673>
c0015776:	80 fa e6             	cmp    dl,0xe6
c0015779:	0f 84 7f 04 00 00    	je     c0015bfe <Vm::faultHandler(regs*)+0x5ef>
c001577f:	0f 82 4b 04 00 00    	jb     c0015bd0 <Vm::faultHandler(regs*)+0x5c1>
c0015785:	80 fa e7             	cmp    dl,0xe7
c0015788:	0f 84 87 04 00 00    	je     c0015c15 <Vm::faultHandler(regs*)+0x606>
c001578e:	e9 f3 04 00 00       	jmp    c0015c86 <Vm::faultHandler(regs*)+0x677>
c0015793:	80 fa ef             	cmp    dl,0xef
c0015796:	0f 84 d1 04 00 00    	je     c0015c6d <Vm::faultHandler(regs*)+0x65e>
c001579c:	77 28                	ja     c00157c6 <Vm::faultHandler(regs*)+0x1b7>
c001579e:	80 fa ed             	cmp    dl,0xed
c00157a1:	0f 84 9f 04 00 00    	je     c0015c46 <Vm::faultHandler(regs*)+0x637>
c00157a7:	80 fa ee             	cmp    dl,0xee
c00157aa:	0f 85 d6 04 00 00    	jne    c0015c86 <Vm::faultHandler(regs*)+0x677>
c00157b0:	50                   	push   eax
c00157b1:	50                   	push   eax
c00157b2:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00157b6:	50                   	push   eax
c00157b7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00157bb:	50                   	push   eax
c00157bc:	e8 a3 f9 ff ff       	call   c0015164 <Vm::outbv(unsigned short, unsigned char)>
c00157c1:	e9 9f 04 00 00       	jmp    c0015c65 <Vm::faultHandler(regs*)+0x656>
c00157c6:	80 fa fa             	cmp    dl,0xfa
c00157c9:	0f 84 69 01 00 00    	je     c0015938 <Vm::faultHandler(regs*)+0x329>
c00157cf:	80 fa fb             	cmp    dl,0xfb
c00157d2:	0f 84 6e 01 00 00    	je     c0015946 <Vm::faultHandler(regs*)+0x337>
c00157d8:	80 fa f3             	cmp    dl,0xf3
c00157db:	0f 85 a5 04 00 00    	jne    c0015c86 <Vm::faultHandler(regs*)+0x677>
c00157e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157e4:	e9 c0 fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c00157e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157ec:	be 02 00 00 00       	mov    esi,0x2
c00157f1:	e9 b3 fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c00157f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00157f9:	be 03 00 00 00       	mov    esi,0x3
c00157fe:	e9 a6 fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c0015803:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015806:	be 04 00 00 00       	mov    esi,0x4
c001580b:	e9 99 fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c0015810:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015813:	be 05 00 00 00       	mov    esi,0x5
c0015818:	e9 8c fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c001581d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015820:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015825:	e9 7f fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c001582a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001582d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015832:	e9 72 fe ff ff       	jmp    c00156a9 <Vm::faultHandler(regs*)+0x9a>
c0015837:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001583a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001583e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015843:	74 30                	je     c0015875 <Vm::faultHandler(regs*)+0x266>
c0015845:	83 e9 04             	sub    ecx,0x4
c0015848:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001584e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015854:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015857:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001585a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015860:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015864:	0f 84 15 04 00 00    	je     c0015c7f <Vm::faultHandler(regs*)+0x670>
c001586a:	80 ce 02             	or     dh,0x2
c001586d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015870:	e9 0a 04 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015875:	83 e9 02             	sub    ecx,0x2
c0015878:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001587e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015881:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015885:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001588b:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001588f:	74 05                	je     c0015896 <Vm::faultHandler(regs*)+0x287>
c0015891:	80 ce 02             	or     dh,0x2
c0015894:	eb 03                	jmp    c0015899 <Vm::faultHandler(regs*)+0x28a>
c0015896:	80 e6 fd             	and    dh,0xfd
c0015899:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001589d:	e9 dd 03 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c00158a2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00158a7:	74 2a                	je     c00158d3 <Vm::faultHandler(regs*)+0x2c4>
c00158a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00158ab:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00158b1:	81 ca 00 02 02 00    	or     edx,0x20200
c00158b7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158c2:	c1 e8 09             	shr    eax,0x9
c00158c5:	83 e0 01             	and    eax,0x1
c00158c8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158cb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158ce:	83 c0 04             	add    eax,0x4
c00158d1:	eb 25                	jmp    c00158f8 <Vm::faultHandler(regs*)+0x2e9>
c00158d3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00158d6:	81 ca 00 02 02 00    	or     edx,0x20200
c00158dc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158df:	66 8b 00             	mov    ax,WORD PTR [eax]
c00158e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158e8:	66 c1 e8 09          	shr    ax,0x9
c00158ec:	83 e0 01             	and    eax,0x1
c00158ef:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158f2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158f5:	83 c0 02             	add    eax,0x2
c00158f8:	25 ff ff 00 00       	and    eax,0xffff
c00158fd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015900:	e9 7a 03 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015905:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015909:	3c ee                	cmp    al,0xee
c001590b:	75 10                	jne    c001591d <Vm::faultHandler(regs*)+0x30e>
c001590d:	83 ec 0c             	sub    esp,0xc
c0015910:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015913:	e8 e9 f8 ff ff       	call   c0015201 <Vm::mainloop3(unsigned long)>
c0015918:	e9 4b 03 00 00       	jmp    c0015c68 <Vm::faultHandler(regs*)+0x659>
c001591d:	83 ec 0c             	sub    esp,0xc
c0015920:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015928:	51                   	push   ecx
c0015929:	50                   	push   eax
c001592a:	53                   	push   ebx
c001592b:	e8 e1 fb ff ff       	call   c0015511 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015930:	83 c4 20             	add    esp,0x20
c0015933:	e9 4a 03 00 00       	jmp    c0015c82 <Vm::faultHandler(regs*)+0x673>
c0015938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001593d:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015941:	e9 39 03 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015946:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001594b:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001594f:	e9 2b 03 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015954:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015957:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001595c:	74 2b                	je     c0015989 <Vm::faultHandler(regs*)+0x37a>
c001595e:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015965:	76 22                	jbe    c0015989 <Vm::faultHandler(regs*)+0x37a>
c0015967:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001596b:	50                   	push   eax
c001596c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015970:	50                   	push   eax
c0015971:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015975:	50                   	push   eax
c0015976:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001597a:	50                   	push   eax
c001597b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001597f:	50                   	push   eax
c0015980:	6a 6c                	push   0x6c
c0015982:	6a 6c                	push   0x6c
c0015984:	e9 b9 01 00 00       	jmp    c0015b42 <Vm::faultHandler(regs*)+0x533>
c0015989:	83 ec 0c             	sub    esp,0xc
c001598c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015990:	0f b7 f6             	movzx  esi,si
c0015993:	50                   	push   eax
c0015994:	e8 b8 f7 ff ff       	call   c0015151 <Vm::inbv(unsigned short)>
c0015999:	83 c4 0c             	add    esp,0xc
c001599c:	0f b6 c0             	movzx  eax,al
c001599f:	50                   	push   eax
c00159a0:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00159a4:	50                   	push   eax
c00159a5:	56                   	push   esi
c00159a6:	e8 24 fc ff ff       	call   c00155cf <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00159b1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00159b5:	74 03                	je     c00159ba <Vm::faultHandler(regs*)+0x3ab>
c00159b7:	48                   	dec    eax
c00159b8:	eb 01                	jmp    c00159bb <Vm::faultHandler(regs*)+0x3ac>
c00159ba:	40                   	inc    eax
c00159bb:	0f b7 c0             	movzx  eax,ax
c00159be:	e9 8d 00 00 00       	jmp    c0015a50 <Vm::faultHandler(regs*)+0x441>
c00159c3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00159c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00159c9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00159ce:	74 29                	je     c00159f9 <Vm::faultHandler(regs*)+0x3ea>
c00159d0:	3d ff ff 00 00       	cmp    eax,0xffff
c00159d5:	76 22                	jbe    c00159f9 <Vm::faultHandler(regs*)+0x3ea>
c00159d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00159db:	50                   	push   eax
c00159dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00159e0:	50                   	push   eax
c00159e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00159e5:	50                   	push   eax
c00159e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00159ea:	50                   	push   eax
c00159eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00159ef:	50                   	push   eax
c00159f0:	6a 6d                	push   0x6d
c00159f2:	6a 6d                	push   0x6d
c00159f4:	e9 49 01 00 00       	jmp    c0015b42 <Vm::faultHandler(regs*)+0x533>
c00159f9:	0f b7 c8             	movzx  ecx,ax
c00159fc:	0f b7 f6             	movzx  esi,si
c00159ff:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015a02:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015a07:	74 20                	je     c0015a29 <Vm::faultHandler(regs*)+0x41a>
c0015a09:	ed                   	in     eax,dx
c0015a0a:	55                   	push   ebp
c0015a0b:	50                   	push   eax
c0015a0c:	51                   	push   ecx
c0015a0d:	56                   	push   esi
c0015a0e:	e8 e7 fb ff ff       	call   c00155fa <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015a19:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015a1d:	74 05                	je     c0015a24 <Vm::faultHandler(regs*)+0x415>
c0015a1f:	83 e8 04             	sub    eax,0x4
c0015a22:	eb 27                	jmp    c0015a4b <Vm::faultHandler(regs*)+0x43c>
c0015a24:	83 c0 04             	add    eax,0x4
c0015a27:	eb 22                	jmp    c0015a4b <Vm::faultHandler(regs*)+0x43c>
c0015a29:	66 ed                	in     ax,dx
c0015a2b:	0f b7 c0             	movzx  eax,ax
c0015a2e:	57                   	push   edi
c0015a2f:	50                   	push   eax
c0015a30:	51                   	push   ecx
c0015a31:	56                   	push   esi
c0015a32:	e8 ad fb ff ff       	call   c00155e4 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015a3d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015a41:	74 05                	je     c0015a48 <Vm::faultHandler(regs*)+0x439>
c0015a43:	83 e8 02             	sub    eax,0x2
c0015a46:	eb 03                	jmp    c0015a4b <Vm::faultHandler(regs*)+0x43c>
c0015a48:	83 c0 02             	add    eax,0x2
c0015a4b:	25 ff ff 00 00       	and    eax,0xffff
c0015a50:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015a53:	e9 27 02 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015a58:	8d 46 ff             	lea    eax,[esi-0x1]
c0015a5b:	3c 05                	cmp    al,0x5
c0015a5d:	77 24                	ja     c0015a83 <Vm::faultHandler(regs*)+0x474>
c0015a5f:	0f b6 c0             	movzx  eax,al
c0015a62:	ff 24 85 50 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfab0]
c0015a69:	0f b7 fd             	movzx  edi,bp
c0015a6c:	eb 15                	jmp    c0015a83 <Vm::faultHandler(regs*)+0x474>
c0015a6e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015a72:	eb 0f                	jmp    c0015a83 <Vm::faultHandler(regs*)+0x474>
c0015a74:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015a78:	eb 09                	jmp    c0015a83 <Vm::faultHandler(regs*)+0x474>
c0015a7a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015a7e:	eb 03                	jmp    c0015a83 <Vm::faultHandler(regs*)+0x474>
c0015a80:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015a83:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015a86:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015a8b:	74 29                	je     c0015ab6 <Vm::faultHandler(regs*)+0x4a7>
c0015a8d:	3d ff ff 00 00       	cmp    eax,0xffff
c0015a92:	76 22                	jbe    c0015ab6 <Vm::faultHandler(regs*)+0x4a7>
c0015a94:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015a98:	50                   	push   eax
c0015a99:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015a9d:	50                   	push   eax
c0015a9e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015aa2:	50                   	push   eax
c0015aa3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015aa7:	50                   	push   eax
c0015aa8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015aac:	50                   	push   eax
c0015aad:	6a 6e                	push   0x6e
c0015aaf:	6a 6e                	push   0x6e
c0015ab1:	e9 8c 00 00 00       	jmp    c0015b42 <Vm::faultHandler(regs*)+0x533>
c0015ab6:	0f b7 c0             	movzx  eax,ax
c0015ab9:	52                   	push   edx
c0015aba:	52                   	push   edx
c0015abb:	50                   	push   eax
c0015abc:	57                   	push   edi
c0015abd:	e8 d9 fa ff ff       	call   c001559b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015ac2:	59                   	pop    ecx
c0015ac3:	0f b6 c0             	movzx  eax,al
c0015ac6:	5e                   	pop    esi
c0015ac7:	50                   	push   eax
c0015ac8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015acc:	50                   	push   eax
c0015acd:	e8 92 f6 ff ff       	call   c0015164 <Vm::outbv(unsigned short, unsigned char)>
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015ad8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015adc:	74 03                	je     c0015ae1 <Vm::faultHandler(regs*)+0x4d2>
c0015ade:	48                   	dec    eax
c0015adf:	eb 01                	jmp    c0015ae2 <Vm::faultHandler(regs*)+0x4d3>
c0015ae1:	40                   	inc    eax
c0015ae2:	0f b7 c0             	movzx  eax,ax
c0015ae5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015ae8:	e9 92 01 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015aed:	8d 46 ff             	lea    eax,[esi-0x1]
c0015af0:	3c 05                	cmp    al,0x5
c0015af2:	77 1f                	ja     c0015b13 <Vm::faultHandler(regs*)+0x504>
c0015af4:	0f b6 c0             	movzx  eax,al
c0015af7:	ff 24 85 68 05 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfa98]
c0015afe:	89 ef                	mov    edi,ebp
c0015b00:	eb 11                	jmp    c0015b13 <Vm::faultHandler(regs*)+0x504>
c0015b02:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015b05:	eb 0c                	jmp    c0015b13 <Vm::faultHandler(regs*)+0x504>
c0015b07:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015b0a:	eb 07                	jmp    c0015b13 <Vm::faultHandler(regs*)+0x504>
c0015b0c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015b0f:	eb 02                	jmp    c0015b13 <Vm::faultHandler(regs*)+0x504>
c0015b11:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015b13:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015b16:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b1b:	74 37                	je     c0015b54 <Vm::faultHandler(regs*)+0x545>
c0015b1d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015b23:	76 2f                	jbe    c0015b54 <Vm::faultHandler(regs*)+0x545>
c0015b25:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b29:	50                   	push   eax
c0015b2a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b2e:	50                   	push   eax
c0015b2f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b33:	50                   	push   eax
c0015b34:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b38:	50                   	push   eax
c0015b39:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b3d:	50                   	push   eax
c0015b3e:	6a 6f                	push   0x6f
c0015b40:	6a 6f                	push   0x6f
c0015b42:	68 f6 04 02 c0       	push   0xc00204f6
c0015b47:	e8 be 4a ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015b4c:	83 c4 20             	add    esp,0x20
c0015b4f:	e9 86 01 00 00       	jmp    c0015cda <Vm::faultHandler(regs*)+0x6cb>
c0015b54:	0f b7 d7             	movzx  edx,di
c0015b57:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015b5a:	0f b7 c6             	movzx  eax,si
c0015b5d:	81 e1 00 04 00 00    	and    ecx,0x400
c0015b63:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015b66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015b6b:	74 1d                	je     c0015b8a <Vm::faultHandler(regs*)+0x57b>
c0015b6d:	55                   	push   ebp
c0015b6e:	55                   	push   ebp
c0015b6f:	50                   	push   eax
c0015b70:	52                   	push   edx
c0015b71:	e8 48 fa ff ff       	call   c00155be <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	89 fa                	mov    edx,edi
c0015b7b:	ef                   	out    dx,eax
c0015b7c:	85 c9                	test   ecx,ecx
c0015b7e:	74 05                	je     c0015b85 <Vm::faultHandler(regs*)+0x576>
c0015b80:	83 ee 04             	sub    esi,0x4
c0015b83:	eb 21                	jmp    c0015ba6 <Vm::faultHandler(regs*)+0x597>
c0015b85:	83 c6 04             	add    esi,0x4
c0015b88:	eb 1c                	jmp    c0015ba6 <Vm::faultHandler(regs*)+0x597>
c0015b8a:	55                   	push   ebp
c0015b8b:	55                   	push   ebp
c0015b8c:	50                   	push   eax
c0015b8d:	52                   	push   edx
c0015b8e:	e8 19 fa ff ff       	call   c00155ac <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015b93:	83 c4 10             	add    esp,0x10
c0015b96:	89 fa                	mov    edx,edi
c0015b98:	66 ef                	out    dx,ax
c0015b9a:	85 c9                	test   ecx,ecx
c0015b9c:	74 05                	je     c0015ba3 <Vm::faultHandler(regs*)+0x594>
c0015b9e:	83 ee 02             	sub    esi,0x2
c0015ba1:	eb 03                	jmp    c0015ba6 <Vm::faultHandler(regs*)+0x597>
c0015ba3:	83 c6 02             	add    esi,0x2
c0015ba6:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015bac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015baf:	e9 cb 00 00 00       	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015bb4:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015bbb:	83 ec 0c             	sub    esp,0xc
c0015bbe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015bc2:	50                   	push   eax
c0015bc3:	e8 89 f5 ff ff       	call   c0015151 <Vm::inbv(unsigned short)>
c0015bc8:	0f b6 c0             	movzx  eax,al
c0015bcb:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015bce:	eb 3f                	jmp    c0015c0f <Vm::faultHandler(regs*)+0x600>
c0015bd0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015bd5:	74 07                	je     c0015bde <Vm::faultHandler(regs*)+0x5cf>
c0015bd7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015bdb:	ed                   	in     eax,dx
c0015bdc:	eb 14                	jmp    c0015bf2 <Vm::faultHandler(regs*)+0x5e3>
c0015bde:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015be1:	66 31 f6             	xor    si,si
c0015be4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015be7:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015beb:	66 ed                	in     ax,dx
c0015bed:	0f b7 c0             	movzx  eax,ax
c0015bf0:	09 f0                	or     eax,esi
c0015bf2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015bf5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015bf9:	e9 84 00 00 00       	jmp    c0015c82 <Vm::faultHandler(regs*)+0x673>
c0015bfe:	52                   	push   edx
c0015bff:	52                   	push   edx
c0015c00:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015c04:	50                   	push   eax
c0015c05:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c09:	50                   	push   eax
c0015c0a:	e8 55 f5 ff ff       	call   c0015164 <Vm::outbv(unsigned short, unsigned char)>
c0015c0f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015c13:	eb 53                	jmp    c0015c68 <Vm::faultHandler(regs*)+0x659>
c0015c15:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015c18:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015c1c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c21:	74 03                	je     c0015c26 <Vm::faultHandler(regs*)+0x617>
c0015c23:	ef                   	out    dx,eax
c0015c24:	eb cf                	jmp    c0015bf5 <Vm::faultHandler(regs*)+0x5e6>
c0015c26:	66 ef                	out    dx,ax
c0015c28:	eb cb                	jmp    c0015bf5 <Vm::faultHandler(regs*)+0x5e6>
c0015c2a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015c31:	83 ec 0c             	sub    esp,0xc
c0015c34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c38:	50                   	push   eax
c0015c39:	e8 13 f5 ff ff       	call   c0015151 <Vm::inbv(unsigned short)>
c0015c3e:	0f b6 c0             	movzx  eax,al
c0015c41:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015c44:	eb 1f                	jmp    c0015c65 <Vm::faultHandler(regs*)+0x656>
c0015c46:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015c49:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c4e:	74 03                	je     c0015c53 <Vm::faultHandler(regs*)+0x644>
c0015c50:	ed                   	in     eax,dx
c0015c51:	eb 0d                	jmp    c0015c60 <Vm::faultHandler(regs*)+0x651>
c0015c53:	66 ed                	in     ax,dx
c0015c55:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015c58:	0f b7 c0             	movzx  eax,ax
c0015c5b:	66 31 d2             	xor    dx,dx
c0015c5e:	09 d0                	or     eax,edx
c0015c60:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015c63:	eb 1a                	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015c65:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c68:	83 c4 10             	add    esp,0x10
c0015c6b:	eb 15                	jmp    c0015c82 <Vm::faultHandler(regs*)+0x673>
c0015c6d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015c70:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015c73:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015c78:	74 03                	je     c0015c7d <Vm::faultHandler(regs*)+0x66e>
c0015c7a:	ef                   	out    dx,eax
c0015c7b:	eb 02                	jmp    c0015c7f <Vm::faultHandler(regs*)+0x670>
c0015c7d:	66 ef                	out    dx,ax
c0015c7f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c82:	b0 01                	mov    al,0x1
c0015c84:	eb 56                	jmp    c0015cdc <Vm::faultHandler(regs*)+0x6cd>
c0015c86:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015c8a:	50                   	push   eax
c0015c8b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015c8f:	50                   	push   eax
c0015c90:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015c94:	50                   	push   eax
c0015c95:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015c99:	50                   	push   eax
c0015c9a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c9e:	50                   	push   eax
c0015c9f:	52                   	push   edx
c0015ca0:	52                   	push   edx
c0015ca1:	68 23 05 02 c0       	push   0xc0020523
c0015ca6:	e8 5f 49 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015cab:	83 c4 20             	add    esp,0x20
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	6a 60                	push   0x60
c0015cb3:	e8 99 f4 ff ff       	call   c0015151 <Vm::inbv(unsigned short)>
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	3c 1c                	cmp    al,0x1c
c0015cbd:	74 04                	je     c0015cc3 <Vm::faultHandler(regs*)+0x6b4>
c0015cbf:	3c 5a                	cmp    al,0x5a
c0015cc1:	75 eb                	jne    c0015cae <Vm::faultHandler(regs*)+0x69f>
c0015cc3:	3c 1c                	cmp    al,0x1c
c0015cc5:	74 04                	je     c0015ccb <Vm::faultHandler(regs*)+0x6bc>
c0015cc7:	3c 5a                	cmp    al,0x5a
c0015cc9:	75 0f                	jne    c0015cda <Vm::faultHandler(regs*)+0x6cb>
c0015ccb:	83 ec 0c             	sub    esp,0xc
c0015cce:	6a 60                	push   0x60
c0015cd0:	e8 7c f4 ff ff       	call   c0015151 <Vm::inbv(unsigned short)>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	eb e9                	jmp    c0015cc3 <Vm::faultHandler(regs*)+0x6b4>
c0015cda:	31 c0                	xor    eax,eax
c0015cdc:	83 c4 1c             	add    esp,0x1c
c0015cdf:	5b                   	pop    ebx
c0015ce0:	5e                   	pop    esi
c0015ce1:	5f                   	pop    edi
c0015ce2:	5d                   	pop    ebp
c0015ce3:	c3                   	ret    

c0015ce4 <noCopro(unsigned long)>:
c0015ce4:	c3                   	ret    

c0015ce5 <nmiHandler(regs*, void*)>:
c0015ce5:	83 ec 0c             	sub    esp,0xc
c0015ce8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0015ced:	83 ec 0c             	sub    esp,0xc
c0015cf0:	50                   	push   eax
c0015cf1:	e8 9e 13 ff ff       	call   c0007094 <Computer::handleNMI()>
c0015cf6:	83 c4 10             	add    esp,0x10
c0015cf9:	90                   	nop
c0015cfa:	83 c4 0c             	add    esp,0xc
c0015cfd:	c3                   	ret    

c0015cfe <doubleFault(regs*, void*)>:
c0015cfe:	55                   	push   ebp
c0015cff:	89 e5                	mov    ebp,esp
c0015d01:	83 ec 08             	sub    esp,0x8
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	68 80 05 02 c0       	push   0xc0020580
c0015d0c:	e8 fa a5 ff ff       	call   c001030b <KePanic(char const*)>
c0015d11:	83 c4 10             	add    esp,0x10
c0015d14:	90                   	nop
c0015d15:	c9                   	leave  
c0015d16:	c3                   	ret    

c0015d17 <displayDebugInfo(regs*)>:
c0015d17:	83 ec 1c             	sub    esp,0x1c
c0015d1a:	0f 20 c0             	mov    eax,cr0
c0015d1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d21:	0f 20 d0             	mov    eax,cr2
c0015d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d28:	0f 20 d8             	mov    eax,cr3
c0015d2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d2f:	0f 20 e0             	mov    eax,cr4
c0015d32:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d39:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015d3c:	83 ec 08             	sub    esp,0x8
c0015d3f:	50                   	push   eax
c0015d40:	68 9c 05 02 c0       	push   0xc002059c
c0015d45:	e8 c0 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d51:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015d54:	83 ec 08             	sub    esp,0x8
c0015d57:	50                   	push   eax
c0015d58:	68 8d 05 02 c0       	push   0xc002058d
c0015d5d:	e8 a8 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d62:	83 c4 10             	add    esp,0x10
c0015d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d69:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015d6c:	83 ec 08             	sub    esp,0x8
c0015d6f:	50                   	push   eax
c0015d70:	68 98 05 02 c0       	push   0xc0020598
c0015d75:	e8 90 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d7a:	83 c4 10             	add    esp,0x10
c0015d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d81:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015d84:	83 ec 08             	sub    esp,0x8
c0015d87:	50                   	push   eax
c0015d88:	68 a7 05 02 c0       	push   0xc00205a7
c0015d8d:	e8 78 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d99:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015d9c:	83 ec 08             	sub    esp,0x8
c0015d9f:	50                   	push   eax
c0015da0:	68 b2 05 02 c0       	push   0xc00205b2
c0015da5:	e8 60 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	83 ec 08             	sub    esp,0x8
c0015db0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015db4:	68 bd 05 02 c0       	push   0xc00205bd
c0015db9:	e8 4c 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015dbe:	83 c4 10             	add    esp,0x10
c0015dc1:	83 ec 08             	sub    esp,0x8
c0015dc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015dc8:	68 c8 05 02 c0       	push   0xc00205c8
c0015dcd:	e8 38 48 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015dda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015de0:	83 ec 0c             	sub    esp,0xc
c0015de3:	50                   	push   eax
c0015de4:	e8 c4 26 ff ff       	call   c00084ad <setActiveTerminal(VgaText*)>
c0015de9:	83 c4 10             	add    esp,0x10
c0015dec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015df1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015df7:	83 ec 08             	sub    esp,0x8
c0015dfa:	68 d3 05 02 c0       	push   0xc00205d3
c0015dff:	50                   	push   eax
c0015e00:	e8 e7 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e17:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0015e1a:	83 ec 08             	sub    esp,0x8
c0015e1d:	52                   	push   edx
c0015e1e:	50                   	push   eax
c0015e1f:	e8 82 29 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015e24:	83 c4 10             	add    esp,0x10
c0015e27:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e32:	83 ec 08             	sub    esp,0x8
c0015e35:	68 e1 05 02 c0       	push   0xc00205e1
c0015e3a:	50                   	push   eax
c0015e3b:	e8 ac 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e40:	83 c4 10             	add    esp,0x10
c0015e43:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e4e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015e53:	8b 12                	mov    edx,DWORD PTR [edx]
c0015e55:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015e58:	83 c2 0c             	add    edx,0xc
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	52                   	push   edx
c0015e5f:	50                   	push   eax
c0015e60:	e8 87 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e65:	83 c4 10             	add    esp,0x10
c0015e68:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e6d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e73:	83 ec 08             	sub    esp,0x8
c0015e76:	68 ea 05 02 c0       	push   0xc00205ea
c0015e7b:	50                   	push   eax
c0015e7c:	e8 6b 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015e81:	83 c4 10             	add    esp,0x10
c0015e84:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015e89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015e8f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e93:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015e96:	83 ec 08             	sub    esp,0x8
c0015e99:	52                   	push   edx
c0015e9a:	50                   	push   eax
c0015e9b:	e8 06 29 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015ea0:	83 c4 10             	add    esp,0x10
c0015ea3:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015eae:	83 ec 08             	sub    esp,0x8
c0015eb1:	68 f2 05 02 c0       	push   0xc00205f2
c0015eb6:	50                   	push   eax
c0015eb7:	e8 30 29 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015ebc:	83 c4 10             	add    esp,0x10
c0015ebf:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ec4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015eca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ece:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015ed1:	83 ec 08             	sub    esp,0x8
c0015ed4:	52                   	push   edx
c0015ed5:	50                   	push   eax
c0015ed6:	e8 cb 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015edb:	83 c4 10             	add    esp,0x10
c0015ede:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015ee3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ee9:	83 ec 08             	sub    esp,0x8
c0015eec:	68 fa 05 02 c0       	push   0xc00205fa
c0015ef1:	50                   	push   eax
c0015ef2:	e8 f5 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015ef7:	83 c4 10             	add    esp,0x10
c0015efa:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015eff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f09:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015f0c:	83 ec 08             	sub    esp,0x8
c0015f0f:	52                   	push   edx
c0015f10:	50                   	push   eax
c0015f11:	e8 90 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015f16:	83 c4 10             	add    esp,0x10
c0015f19:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f24:	83 ec 08             	sub    esp,0x8
c0015f27:	68 02 06 02 c0       	push   0xc0020602
c0015f2c:	50                   	push   eax
c0015f2d:	e8 ba 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015f32:	83 c4 10             	add    esp,0x10
c0015f35:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f44:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015f47:	83 ec 08             	sub    esp,0x8
c0015f4a:	52                   	push   edx
c0015f4b:	50                   	push   eax
c0015f4c:	e8 55 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f59:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f5f:	83 ec 08             	sub    esp,0x8
c0015f62:	68 0a 06 02 c0       	push   0xc002060a
c0015f67:	50                   	push   eax
c0015f68:	e8 7f 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f7b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f7f:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0015f82:	83 ec 08             	sub    esp,0x8
c0015f85:	52                   	push   edx
c0015f86:	50                   	push   eax
c0015f87:	e8 1a 28 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015f8c:	83 c4 10             	add    esp,0x10
c0015f8f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f9a:	83 ec 08             	sub    esp,0x8
c0015f9d:	68 12 06 02 c0       	push   0xc0020612
c0015fa2:	50                   	push   eax
c0015fa3:	e8 44 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fba:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015fbd:	83 ec 08             	sub    esp,0x8
c0015fc0:	52                   	push   edx
c0015fc1:	50                   	push   eax
c0015fc2:	e8 df 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015fc7:	83 c4 10             	add    esp,0x10
c0015fca:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fcf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fd5:	83 ec 08             	sub    esp,0x8
c0015fd8:	68 1a 06 02 c0       	push   0xc002061a
c0015fdd:	50                   	push   eax
c0015fde:	e8 09 28 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0015fe3:	83 c4 10             	add    esp,0x10
c0015fe6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015feb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015ff1:	83 ec 08             	sub    esp,0x8
c0015ff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ff8:	50                   	push   eax
c0015ff9:	e8 a8 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0015ffe:	83 c4 10             	add    esp,0x10
c0016001:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016006:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001600c:	83 ec 08             	sub    esp,0x8
c001600f:	68 23 06 02 c0       	push   0xc0020623
c0016014:	50                   	push   eax
c0016015:	e8 d2 27 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c001601a:	83 c4 10             	add    esp,0x10
c001601d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016022:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016028:	83 ec 08             	sub    esp,0x8
c001602b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001602f:	50                   	push   eax
c0016030:	e8 71 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c0016035:	83 c4 10             	add    esp,0x10
c0016038:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001603d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016043:	83 ec 08             	sub    esp,0x8
c0016046:	68 2b 06 02 c0       	push   0xc002062b
c001604b:	50                   	push   eax
c001604c:	e8 9b 27 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0016051:	83 c4 10             	add    esp,0x10
c0016054:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016059:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001605f:	83 ec 08             	sub    esp,0x8
c0016062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016066:	50                   	push   eax
c0016067:	e8 3a 27 ff ff       	call   c00087a6 <VgaText::putx(unsigned int)>
c001606c:	83 c4 10             	add    esp,0x10
c001606f:	fa                   	cli    
c0016070:	f4                   	hlt    
c0016071:	eb fe                	jmp    c0016071 <displayDebugInfo(regs*)+0x35a>

c0016073 <HalSystemIdle()>:
c0016073:	56                   	push   esi
c0016074:	53                   	push   ebx
c0016075:	83 ec 14             	sub    esp,0x14
c0016078:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001607d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016083:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016089:	83 e0 04             	and    eax,0x4
c001608c:	84 c0                	test   al,al
c001608e:	0f 95 c0             	setne  al
c0016091:	84 c0                	test   al,al
c0016093:	74 4c                	je     c00160e1 <HalSystemIdle()+0x6e>
c0016095:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001609a:	83 ec 08             	sub    esp,0x8
c001609d:	68 e1 00 00 00       	push   0xe1
c00160a2:	50                   	push   eax
c00160a3:	e8 04 0e ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c00160a8:	83 c4 10             	add    esp,0x10
c00160ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00160af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00160b3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00160b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160bc:	83 e2 02             	and    edx,0x2
c00160bf:	89 d3                	mov    ebx,edx
c00160c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160c5:	83 e2 00             	and    edx,0x0
c00160c8:	89 d6                	mov    esi,edx
c00160ca:	56                   	push   esi
c00160cb:	53                   	push   ebx
c00160cc:	68 e1 00 00 00       	push   0xe1
c00160d1:	50                   	push   eax
c00160d2:	e8 01 0e ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c00160d7:	83 c4 10             	add    esp,0x10
c00160da:	e8 b5 a0 fe ff       	call   c0000194 <doTPAUSE>
c00160df:	eb 01                	jmp    c00160e2 <HalSystemIdle()+0x6f>
c00160e1:	f4                   	hlt    
c00160e2:	90                   	nop
c00160e3:	83 c4 14             	add    esp,0x14
c00160e6:	5b                   	pop    ebx
c00160e7:	5e                   	pop    esi
c00160e8:	c3                   	ret    

c00160e9 <displayProgramFault(char const*)>:
c00160e9:	83 ec 0c             	sub    esp,0xc
c00160ec:	83 ec 0c             	sub    esp,0xc
c00160ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160f3:	e8 12 45 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00160f8:	83 c4 10             	add    esp,0x10
c00160fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016100:	8b 00                	mov    eax,DWORD PTR [eax]
c0016102:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016105:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001610b:	85 c0                	test   eax,eax
c001610d:	74 21                	je     c0016130 <displayProgramFault(char const*)+0x47>
c001610f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016114:	8b 00                	mov    eax,DWORD PTR [eax]
c0016116:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016119:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001611f:	6a 04                	push   0x4
c0016121:	6a 0f                	push   0xf
c0016123:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016127:	50                   	push   eax
c0016128:	e8 31 27 ff ff       	call   c000885e <VgaText::puts(char const*, VgaColour, VgaColour)>
c001612d:	83 c4 10             	add    esp,0x10
c0016130:	90                   	nop
c0016131:	83 c4 0c             	add    esp,0xc
c0016134:	c3                   	ret    

c0016135 <gpFault(regs*, void*)>:
c0016135:	83 ec 1c             	sub    esp,0x1c
c0016138:	c7 05 10 72 02 c0 0f 56 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc001560f
c0016142:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016147:	85 c0                	test   eax,eax
c0016149:	74 1c                	je     c0016167 <gpFault(regs*, void*)+0x32>
c001614b:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016157:	ff d0                	call   eax
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016160:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016165:	75 2e                	jne    c0016195 <gpFault(regs*, void*)+0x60>
c0016167:	83 ec 0c             	sub    esp,0xc
c001616a:	68 33 06 02 c0       	push   0xc0020633
c001616f:	e8 75 ff ff ff       	call   c00160e9 <displayProgramFault(char const*)>
c0016174:	83 c4 10             	add    esp,0x10
c0016177:	83 ec 0c             	sub    esp,0xc
c001617a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617e:	e8 94 fb ff ff       	call   c0015d17 <displayDebugInfo(regs*)>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	83 ec 0c             	sub    esp,0xc
c0016189:	6a 00                	push   0x0
c001618b:	e8 74 ee ff ff       	call   c0015004 <Thr::terminateFromIRQ(int)>
c0016190:	83 c4 10             	add    esp,0x10
c0016193:	eb 01                	jmp    c0016196 <gpFault(regs*, void*)+0x61>
c0016195:	90                   	nop
c0016196:	83 c4 1c             	add    esp,0x1c
c0016199:	c3                   	ret    

c001619a <pgFault(regs*, void*)>:
c001619a:	83 ec 1c             	sub    esp,0x1c
c001619d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00161a4:	0f 20 d0             	mov    eax,cr2
c00161a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00161ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00161af:	83 ec 04             	sub    esp,0x4
c00161b2:	52                   	push   edx
c00161b3:	50                   	push   eax
c00161b4:	68 10 07 02 c0       	push   0xc0020710
c00161b9:	e8 4c 44 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00161be:	83 c4 10             	add    esp,0x10
c00161c1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00161c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00161c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00161cb:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00161d1:	0f 20 d2             	mov    edx,cr2
c00161d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00161d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161dc:	83 ec 08             	sub    esp,0x8
c00161df:	52                   	push   edx
c00161e0:	50                   	push   eax
c00161e1:	e8 1a 40 ff ff       	call   c000a200 <VAS::tryLoadBackOffDisk(unsigned long)>
c00161e6:	83 c4 10             	add    esp,0x10
c00161e9:	84 c0                	test   al,al
c00161eb:	75 2e                	jne    c001621b <pgFault(regs*, void*)+0x81>
c00161ed:	83 ec 0c             	sub    esp,0xc
c00161f0:	68 4c 06 02 c0       	push   0xc002064c
c00161f5:	e8 ef fe ff ff       	call   c00160e9 <displayProgramFault(char const*)>
c00161fa:	83 c4 10             	add    esp,0x10
c00161fd:	83 ec 0c             	sub    esp,0xc
c0016200:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016204:	e8 0e fb ff ff       	call   c0015d17 <displayDebugInfo(regs*)>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	6a 00                	push   0x0
c0016211:	e8 ee ed ff ff       	call   c0015004 <Thr::terminateFromIRQ(int)>
c0016216:	83 c4 10             	add    esp,0x10
c0016219:	eb 01                	jmp    c001621c <pgFault(regs*, void*)+0x82>
c001621b:	90                   	nop
c001621c:	83 c4 1c             	add    esp,0x1c
c001621f:	c3                   	ret    

c0016220 <otherISRHandler(regs*, void*)>:
c0016220:	83 ec 0c             	sub    esp,0xc
c0016223:	83 ec 0c             	sub    esp,0xc
c0016226:	68 38 07 02 c0       	push   0xc0020738
c001622b:	e8 b9 fe ff ff       	call   c00160e9 <displayProgramFault(char const*)>
c0016230:	83 c4 10             	add    esp,0x10
c0016233:	83 ec 0c             	sub    esp,0xc
c0016236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001623a:	e8 d8 fa ff ff       	call   c0015d17 <displayDebugInfo(regs*)>
c001623f:	83 c4 10             	add    esp,0x10
c0016242:	83 ec 0c             	sub    esp,0xc
c0016245:	6a 00                	push   0x0
c0016247:	e8 b8 ed ff ff       	call   c0015004 <Thr::terminateFromIRQ(int)>
c001624c:	83 c4 10             	add    esp,0x10
c001624f:	90                   	nop
c0016250:	83 c4 0c             	add    esp,0xc
c0016253:	c3                   	ret    

c0016254 <opcodeFault(regs*, void*)>:
c0016254:	55                   	push   ebp
c0016255:	89 e5                	mov    ebp,esp
c0016257:	83 ec 08             	sub    esp,0x8
c001625a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001625d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016260:	83 ec 08             	sub    esp,0x8
c0016263:	50                   	push   eax
c0016264:	68 57 06 02 c0       	push   0xc0020657
c0016269:	e8 9c 43 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016276:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001627c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016282:	84 c0                	test   al,al
c0016284:	74 21                	je     c00162a7 <opcodeFault(regs*, void*)+0x53>
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	68 60 07 02 c0       	push   0xc0020760
c001628e:	e8 77 43 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0016293:	83 c4 10             	add    esp,0x10
c0016296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016299:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001629c:	8d 50 19             	lea    edx,[eax+0x19]
c001629f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00162a5:	eb 2b                	jmp    c00162d2 <opcodeFault(regs*, void*)+0x7e>
c00162a7:	83 ec 0c             	sub    esp,0xc
c00162aa:	68 65 06 02 c0       	push   0xc0020665
c00162af:	e8 35 fe ff ff       	call   c00160e9 <displayProgramFault(char const*)>
c00162b4:	83 c4 10             	add    esp,0x10
c00162b7:	83 ec 0c             	sub    esp,0xc
c00162ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00162bd:	e8 55 fa ff ff       	call   c0015d17 <displayDebugInfo(regs*)>
c00162c2:	83 c4 10             	add    esp,0x10
c00162c5:	83 ec 0c             	sub    esp,0xc
c00162c8:	6a 00                	push   0x0
c00162ca:	e8 35 ed ff ff       	call   c0015004 <Thr::terminateFromIRQ(int)>
c00162cf:	83 c4 10             	add    esp,0x10
c00162d2:	c9                   	leave  
c00162d3:	c3                   	ret    

c00162d4 <i386SaveCoprocessor(void*)>:
c00162d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162d8:	83 c0 3f             	add    eax,0x3f
c00162db:	83 e0 c0             	and    eax,0xffffffc0
c00162de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162e2:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c00162e8 <i386LoadCoprocessor(void*)>:
c00162e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ec:	83 c0 3f             	add    eax,0x3f
c00162ef:	83 e0 c0             	and    eax,0xffffffc0
c00162f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162f6:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c00162fc <x87EmulHandler(regs*, void*)>:
c00162fc:	53                   	push   ebx
c00162fd:	83 ec 08             	sub    esp,0x8
c0016300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016305:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016309:	74 10                	je     c001631b <x87EmulHandler(regs*, void*)+0x1f>
c001630b:	83 ec 0c             	sub    esp,0xc
c001630e:	68 72 06 02 c0       	push   0xc0020672
c0016313:	e8 f3 9f ff ff       	call   c001030b <KePanic(char const*)>
c0016318:	83 c4 10             	add    esp,0x10
c001631b:	0f 20 c0             	mov    eax,cr0
c001631e:	a8 08                	test   al,0x8
c0016320:	74 59                	je     c001637b <x87EmulHandler(regs*, void*)+0x7f>
c0016322:	0f 06                	clts   
c0016324:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016329:	85 c0                	test   eax,eax
c001632b:	74 0e                	je     c001633b <x87EmulHandler(regs*, void*)+0x3f>
c001632d:	83 ec 0c             	sub    esp,0xc
c0016330:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016333:	e8 9c ff ff ff       	call   c00162d4 <i386SaveCoprocessor(void*)>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016341:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016345:	75 12                	jne    c0016359 <x87EmulHandler(regs*, void*)+0x5d>
c0016347:	83 ec 0c             	sub    esp,0xc
c001634a:	68 40 02 00 00       	push   0x240
c001634f:	e8 21 15 ff ff       	call   c0007875 <malloc>
c0016354:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016357:	eb 10                	jmp    c0016369 <x87EmulHandler(regs*, void*)+0x6d>
c0016359:	83 ec 0c             	sub    esp,0xc
c001635c:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016361:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016364:	e8 7f ff ff ff       	call   c00162e8 <i386LoadCoprocessor(void*)>
c0016369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001636e:	83 c4 10             	add    esp,0x10
c0016371:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c0016376:	83 c4 08             	add    esp,0x8
c0016379:	5b                   	pop    ebx
c001637a:	c3                   	ret    
c001637b:	83 ec 0c             	sub    esp,0xc
c001637e:	68 86 06 02 c0       	push   0xc0020686
c0016383:	e8 82 42 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0016388:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016390:	83 c4 18             	add    esp,0x18
c0016393:	5b                   	pop    ebx
c0016394:	e9 6b ec ff ff       	jmp    c0015004 <Thr::terminateFromIRQ(int)>

c0016399 <HalInitialiseCoprocessor()>:
c0016399:	83 ec 10             	sub    esp,0x10
c001639c:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c00163a6:	6a 00                	push   0x0
c00163a8:	68 fc 62 01 c0       	push   0xc00162fc
c00163ad:	6a 07                	push   0x7
c00163af:	e8 c8 5b ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00163b4:	e8 17 6e 00 00       	call   c001d1d0 <avxDetect>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	85 c0                	test   eax,eax
c00163be:	74 1c                	je     c00163dc <HalInitialiseCoprocessor()+0x43>
c00163c0:	c7 05 0c 72 02 c0 fa d1 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d1fa
c00163ca:	c7 05 08 72 02 c0 0b d2 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d20b
c00163d4:	83 c4 0c             	add    esp,0xc
c00163d7:	e9 40 6e 00 00       	jmp    c001d21c <avxInit>
c00163dc:	e8 cf 70 00 00       	call   c001d4b0 <absolutelyNoChanceInHell>
c00163e1:	85 c0                	test   eax,eax
c00163e3:	74 1c                	je     c0016401 <HalInitialiseCoprocessor()+0x68>
c00163e5:	c7 05 0c 72 02 c0 c8 d4 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d4c8
c00163ef:	c7 05 08 72 02 c0 d0 d4 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d4d0
c00163f9:	83 c4 0c             	add    esp,0xc
c00163fc:	e9 d7 70 00 00       	jmp    c001d4d8 <sseInit>
c0016401:	e8 f0 70 00 00       	call   c001d4f6 <x87Detect>
c0016406:	85 c0                	test   eax,eax
c0016408:	74 1c                	je     c0016426 <HalInitialiseCoprocessor()+0x8d>
c001640a:	c7 05 0c 72 02 c0 11 d5 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d511
c0016414:	c7 05 08 72 02 c0 18 d5 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d518
c001641e:	83 c4 0c             	add    esp,0xc
c0016421:	e9 f9 70 00 00       	jmp    c001d51f <x87Init>
c0016426:	c7 05 0c 72 02 c0 e4 5c 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc0015ce4
c0016430:	c7 05 08 72 02 c0 e4 5c 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc0015ce4
c001643a:	0f 20 c0             	mov    eax,cr0
c001643d:	83 c8 04             	or     eax,0x4
c0016440:	0f 22 c0             	mov    cr0,eax
c0016443:	83 c4 0c             	add    esp,0xc
c0016446:	c3                   	ret    

c0016447 <HalPanic(char const*)>:
c0016447:	53                   	push   ebx
c0016448:	83 ec 10             	sub    esp,0x10
c001644b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001644f:	fa                   	cli    
c0016450:	53                   	push   ebx
c0016451:	68 9c 06 02 c0       	push   0xc002069c
c0016456:	e8 af 41 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001645b:	83 c4 0c             	add    esp,0xc
c001645e:	6a 01                	push   0x1
c0016460:	6a 0f                	push   0xf
c0016462:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016468:	e8 99 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001646d:	58                   	pop    eax
c001646e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016474:	e8 7f 20 ff ff       	call   c00084f8 <VgaText::clearScreen()>
c0016479:	5a                   	pop    edx
c001647a:	59                   	pop    ecx
c001647b:	68 64 ef 01 c0       	push   0xc001ef64
c0016480:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016486:	e8 b3 1e ff ff       	call   c000833e <VgaText::setTitle(char*)>
c001648b:	83 c4 0c             	add    esp,0xc
c001648e:	6a 01                	push   0x1
c0016490:	6a 0f                	push   0xf
c0016492:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016498:	e8 69 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001649d:	58                   	pop    eax
c001649e:	5a                   	pop    edx
c001649f:	68 b5 06 02 c0       	push   0xc00206b5
c00164a4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164aa:	e8 3d 23 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164af:	83 c4 0c             	add    esp,0xc
c00164b2:	6a 0f                	push   0xf
c00164b4:	6a 01                	push   0x1
c00164b6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164bc:	e8 45 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00164c1:	59                   	pop    ecx
c00164c2:	58                   	pop    eax
c00164c3:	68 be 06 02 c0       	push   0xc00206be
c00164c8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164ce:	e8 19 23 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164d3:	83 c4 0c             	add    esp,0xc
c00164d6:	6a 01                	push   0x1
c00164d8:	6a 0f                	push   0xf
c00164da:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164e0:	e8 21 1e ff ff       	call   c0008306 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00164e5:	58                   	pop    eax
c00164e6:	5a                   	pop    edx
c00164e7:	68 02 07 02 c0       	push   0xc0020702
c00164ec:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00164f2:	e8 f5 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c00164f7:	59                   	pop    ecx
c00164f8:	58                   	pop    eax
c00164f9:	68 cb 06 02 c0       	push   0xc00206cb
c00164fe:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016504:	e8 e3 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0016509:	58                   	pop    eax
c001650a:	5a                   	pop    edx
c001650b:	68 05 07 02 c0       	push   0xc0020705
c0016510:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016516:	e8 d1 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c001651b:	59                   	pop    ecx
c001651c:	58                   	pop    eax
c001651d:	53                   	push   ebx
c001651e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016524:	e8 c3 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c0016529:	58                   	pop    eax
c001652a:	5a                   	pop    edx
c001652b:	68 02 07 02 c0       	push   0xc0020702
c0016530:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016536:	e8 b1 22 ff ff       	call   c00087ec <VgaText::puts(char const*)>
c001653b:	83 c4 10             	add    esp,0x10
c001653e:	eb fe                	jmp    c001653e <HalPanic(char const*)+0xf7>

c0016540 <HalQueryPerformanceCounter()>:
c0016540:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016545:	31 d2                	xor    edx,edx
c0016547:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001654d:	31 c0                	xor    eax,eax
c001654f:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016556:	74 02                	je     c001655a <HalQueryPerformanceCounter()+0x1a>
c0016558:	0f 31                	rdtsc  
c001655a:	c3                   	ret    

c001655b <HalInitialise()>:
c001655b:	53                   	push   ebx
c001655c:	83 ec 08             	sub    esp,0x8
c001655f:	e8 4b 5c ff ff       	call   c000c1af <setupINTS()>
c0016564:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c001656b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016570:	75 07                	jne    c0016579 <HalInitialise()+0x1e>
c0016572:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016579:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016580:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c0016587:	e8 a8 02 00 00       	call   c0016834 <picOpen()>
c001658c:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016593:	74 0a                	je     c001659f <HalInitialise()+0x44>
c0016595:	e8 e2 01 00 00       	call   c001677c <picDisable()>
c001659a:	e8 a9 65 00 00       	call   c001cb48 <apicOpen()>
c001659f:	bb 0f 00 00 00       	mov    ebx,0xf
c00165a4:	50                   	push   eax
c00165a5:	6a 00                	push   0x0
c00165a7:	68 20 62 01 c0       	push   0xc0016220
c00165ac:	6a 00                	push   0x0
c00165ae:	e8 c9 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165b3:	83 c4 0c             	add    esp,0xc
c00165b6:	6a 00                	push   0x0
c00165b8:	68 20 62 01 c0       	push   0xc0016220
c00165bd:	6a 01                	push   0x1
c00165bf:	e8 b8 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165c4:	83 c4 0c             	add    esp,0xc
c00165c7:	6a 00                	push   0x0
c00165c9:	68 e5 5c 01 c0       	push   0xc0015ce5
c00165ce:	6a 02                	push   0x2
c00165d0:	e8 a7 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165d5:	83 c4 0c             	add    esp,0xc
c00165d8:	6a 00                	push   0x0
c00165da:	68 20 62 01 c0       	push   0xc0016220
c00165df:	6a 03                	push   0x3
c00165e1:	e8 96 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165e6:	83 c4 0c             	add    esp,0xc
c00165e9:	6a 00                	push   0x0
c00165eb:	68 20 62 01 c0       	push   0xc0016220
c00165f0:	6a 04                	push   0x4
c00165f2:	e8 85 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00165f7:	83 c4 0c             	add    esp,0xc
c00165fa:	6a 00                	push   0x0
c00165fc:	68 20 62 01 c0       	push   0xc0016220
c0016601:	6a 05                	push   0x5
c0016603:	e8 74 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016608:	83 c4 0c             	add    esp,0xc
c001660b:	6a 00                	push   0x0
c001660d:	68 54 62 01 c0       	push   0xc0016254
c0016612:	6a 06                	push   0x6
c0016614:	e8 63 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016619:	83 c4 0c             	add    esp,0xc
c001661c:	6a 00                	push   0x0
c001661e:	68 fe 5c 01 c0       	push   0xc0015cfe
c0016623:	6a 08                	push   0x8
c0016625:	e8 52 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001662a:	83 c4 0c             	add    esp,0xc
c001662d:	6a 00                	push   0x0
c001662f:	68 20 62 01 c0       	push   0xc0016220
c0016634:	6a 09                	push   0x9
c0016636:	e8 41 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001663b:	83 c4 0c             	add    esp,0xc
c001663e:	6a 00                	push   0x0
c0016640:	68 20 62 01 c0       	push   0xc0016220
c0016645:	6a 0a                	push   0xa
c0016647:	e8 30 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001664c:	83 c4 0c             	add    esp,0xc
c001664f:	6a 00                	push   0x0
c0016651:	68 20 62 01 c0       	push   0xc0016220
c0016656:	6a 0b                	push   0xb
c0016658:	e8 1f 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001665d:	83 c4 0c             	add    esp,0xc
c0016660:	6a 00                	push   0x0
c0016662:	68 35 61 01 c0       	push   0xc0016135
c0016667:	6a 0d                	push   0xd
c0016669:	e8 0e 59 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001666e:	83 c4 0c             	add    esp,0xc
c0016671:	6a 00                	push   0x0
c0016673:	68 9a 61 01 c0       	push   0xc001619a
c0016678:	6a 0e                	push   0xe
c001667a:	e8 fd 58 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001667f:	83 c4 10             	add    esp,0x10
c0016682:	50                   	push   eax
c0016683:	6a 00                	push   0x0
c0016685:	68 20 62 01 c0       	push   0xc0016220
c001668a:	53                   	push   ebx
c001668b:	43                   	inc    ebx
c001668c:	e8 eb 58 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016691:	83 c4 10             	add    esp,0x10
c0016694:	83 fb 1e             	cmp    ebx,0x1e
c0016697:	75 e9                	jne    c0016682 <HalInitialise()+0x127>
c0016699:	50                   	push   eax
c001669a:	6a 00                	push   0x0
c001669c:	68 a6 14 01 c0       	push   0xc00114a6
c00166a1:	6a 60                	push   0x60
c00166a3:	e8 d4 58 ff ff       	call   c000bf7c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00166a8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166ad:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00166b7:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00166be:	e8 b2 11 ff ff       	call   c0007875 <malloc>
c00166c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c6:	89 c3                	mov    ebx,eax
c00166c8:	e8 2f 09 00 00       	call   c0016ffc <RTC::RTC()>
c00166cd:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00166d7:	5a                   	pop    edx
c00166d8:	59                   	pop    ecx
c00166d9:	53                   	push   ebx
c00166da:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00166e0:	e8 63 53 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c00166e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166e7:	6a 00                	push   0x0
c00166e9:	6a 00                	push   0x0
c00166eb:	6a 00                	push   0x0
c00166ed:	53                   	push   ebx
c00166ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166f1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166f6:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00166fc:	83 c4 28             	add    esp,0x28
c00166ff:	5b                   	pop    ebx
c0016700:	c3                   	ret    

c0016701 <HalMakeBeep(int)>:
c0016701:	53                   	push   ebx
c0016702:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016706:	85 db                	test   ebx,ebx
c0016708:	75 07                	jne    c0016711 <HalMakeBeep(int)+0x10>
c001670a:	e4 61                	in     al,0x61
c001670c:	83 e0 fc             	and    eax,0xfffffffc
c001670f:	eb 26                	jmp    c0016737 <HalMakeBeep(int)+0x36>
c0016711:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016716:	99                   	cdq    
c0016717:	f7 fb                	idiv   ebx
c0016719:	89 c1                	mov    ecx,eax
c001671b:	b0 b6                	mov    al,0xb6
c001671d:	e6 43                	out    0x43,al
c001671f:	88 c8                	mov    al,cl
c0016721:	e6 42                	out    0x42,al
c0016723:	89 c8                	mov    eax,ecx
c0016725:	c1 e8 08             	shr    eax,0x8
c0016728:	e6 42                	out    0x42,al
c001672a:	e4 61                	in     al,0x61
c001672c:	88 c2                	mov    dl,al
c001672e:	83 ca 03             	or     edx,0x3
c0016731:	38 c2                	cmp    dl,al
c0016733:	74 04                	je     c0016739 <HalMakeBeep(int)+0x38>
c0016735:	88 d0                	mov    al,dl
c0016737:	e6 61                	out    0x61,al
c0016739:	5b                   	pop    ebx
c001673a:	c3                   	ret    

c001673b <HalGetRand()>:
c001673b:	31 c0                	xor    eax,eax
c001673d:	c3                   	ret    

c001673e <HalEndOfInterrupt(int)>:
c001673e:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016745:	74 23                	je     c001676a <HalEndOfInterrupt(int)+0x2c>
c0016747:	83 ec 14             	sub    esp,0x14
c001674a:	6a 1b                	push   0x1b
c001674c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016752:	e8 55 07 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0016757:	25 00 f0 ff ff       	and    eax,0xfffff000
c001675c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016766:	83 c4 1c             	add    esp,0x1c
c0016769:	c3                   	ret    
c001676a:	e9 55 02 00 00       	jmp    c00169c4 <picEOI(int)>

c001676f <HalRestart()>:
c001676f:	c3                   	ret    

c0016770 <HalShutdown()>:
c0016770:	c3                   	ret    

c0016771 <HalSleep()>:
c0016771:	c3                   	ret    
c0016772:	66 90                	xchg   ax,ax

c0016774 <picIoWait()>:
c0016774:	eb 00                	jmp    c0016776 <picIoWait()+0x2>
c0016776:	eb 00                	jmp    c0016778 <picIoWait()+0x4>
c0016778:	90                   	nop
c0016779:	c3                   	ret    
c001677a:	66 90                	xchg   ax,ax

c001677c <picDisable()>:
c001677c:	83 ec 10             	sub    esp,0x10
c001677f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016786:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001678b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001678f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016794:	ee                   	out    dx,al
c0016795:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001679c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00167a1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00167a5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00167aa:	ee                   	out    dx,al
c00167ab:	90                   	nop
c00167ac:	83 c4 10             	add    esp,0x10
c00167af:	c3                   	ret    

c00167b0 <picGetIRQReg(int)>:
c00167b0:	83 ec 10             	sub    esp,0x10
c00167b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167b7:	25 ff 00 00 00       	and    eax,0xff
c00167bc:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00167c3:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00167c7:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00167cb:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00167d0:	ee                   	out    dx,al
c00167d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167d5:	25 ff 00 00 00       	and    eax,0xff
c00167da:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00167e1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00167e5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00167e9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00167ee:	ee                   	out    dx,al
c00167ef:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00167f6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00167fb:	89 c2                	mov    edx,eax
c00167fd:	ec                   	in     al,dx
c00167fe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016802:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016806:	25 ff 00 00 00       	and    eax,0xff
c001680b:	c1 e0 08             	shl    eax,0x8
c001680e:	89 c1                	mov    ecx,eax
c0016810:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016817:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001681c:	89 c2                	mov    edx,eax
c001681e:	ec                   	in     al,dx
c001681f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016823:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016827:	25 ff 00 00 00       	and    eax,0xff
c001682c:	09 c8                	or     eax,ecx
c001682e:	83 c4 10             	add    esp,0x10
c0016831:	c3                   	ret    
c0016832:	66 90                	xchg   ax,ax

c0016834 <picOpen()>:
c0016834:	83 ec 50             	sub    esp,0x50
c0016837:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001683e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016843:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016847:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001684b:	ee                   	out    dx,al
c001684c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016853:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016858:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001685c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016860:	ee                   	out    dx,al
c0016861:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016869:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016871:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016878:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001687c:	89 c2                	mov    edx,eax
c001687e:	ec                   	in     al,dx
c001687f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016883:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016887:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001688b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016896:	89 c2                	mov    edx,eax
c0016898:	ec                   	in     al,dx
c0016899:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001689d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168a1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00168a5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00168ac:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00168b1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00168b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00168b9:	ee                   	out    dx,al
c00168ba:	e8 b5 fe ff ff       	call   c0016774 <picIoWait()>
c00168bf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00168c6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00168cb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00168cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168d3:	ee                   	out    dx,al
c00168d4:	e8 9b fe ff ff       	call   c0016774 <picIoWait()>
c00168d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00168dd:	25 ff 00 00 00       	and    eax,0xff
c00168e2:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00168e9:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00168ed:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00168f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168f5:	ee                   	out    dx,al
c00168f6:	e8 79 fe ff ff       	call   c0016774 <picIoWait()>
c00168fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00168ff:	25 ff 00 00 00       	and    eax,0xff
c0016904:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001690b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001690f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016913:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016917:	ee                   	out    dx,al
c0016918:	e8 57 fe ff ff       	call   c0016774 <picIoWait()>
c001691d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016924:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016929:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001692d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016931:	ee                   	out    dx,al
c0016932:	e8 3d fe ff ff       	call   c0016774 <picIoWait()>
c0016937:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001693e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016943:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016947:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001694b:	ee                   	out    dx,al
c001694c:	e8 23 fe ff ff       	call   c0016774 <picIoWait()>
c0016951:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016958:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001695d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016961:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016965:	ee                   	out    dx,al
c0016966:	e8 09 fe ff ff       	call   c0016774 <picIoWait()>
c001696b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016972:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016977:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001697b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001697f:	ee                   	out    dx,al
c0016980:	e8 ef fd ff ff       	call   c0016774 <picIoWait()>
c0016985:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016989:	25 ff 00 00 00       	and    eax,0xff
c001698e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016995:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016999:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001699d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00169a1:	ee                   	out    dx,al
c00169a2:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00169a6:	25 ff 00 00 00       	and    eax,0xff
c00169ab:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00169b2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00169b6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00169ba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00169be:	ee                   	out    dx,al
c00169bf:	90                   	nop
c00169c0:	83 c4 50             	add    esp,0x50
c00169c3:	c3                   	ret    

c00169c4 <picEOI(int)>:
c00169c4:	83 ec 10             	sub    esp,0x10
c00169c7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00169cc:	75 22                	jne    c00169f0 <picEOI(int)+0x2c>
c00169ce:	6a 0b                	push   0xb
c00169d0:	e8 db fd ff ff       	call   c00167b0 <picGetIRQReg(int)>
c00169d5:	83 c4 04             	add    esp,0x4
c00169d8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00169dd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00169e2:	25 ff ff 00 00       	and    eax,0xffff
c00169e7:	25 80 00 00 00       	and    eax,0x80
c00169ec:	74 72                	je     c0016a60 <picEOI(int)+0x9c>
c00169ee:	66 90                	xchg   ax,ax
c00169f0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00169f5:	75 31                	jne    c0016a28 <picEOI(int)+0x64>
c00169f7:	6a 0b                	push   0xb
c00169f9:	e8 b2 fd ff ff       	call   c00167b0 <picGetIRQReg(int)>
c00169fe:	83 c4 04             	add    esp,0x4
c0016a01:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016a06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0a:	66 85 c0             	test   ax,ax
c0016a0d:	78 19                	js     c0016a28 <picEOI(int)+0x64>
c0016a0f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016a16:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016a1b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016a1f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016a24:	ee                   	out    dx,al
c0016a25:	eb 3d                	jmp    c0016a64 <picEOI(int)+0xa0>
c0016a27:	90                   	nop
c0016a28:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016a2d:	7e 19                	jle    c0016a48 <picEOI(int)+0x84>
c0016a2f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016a36:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016a3b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016a3f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016a44:	ee                   	out    dx,al
c0016a45:	8d 76 00             	lea    esi,[esi+0x0]
c0016a48:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016a4f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016a54:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016a58:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016a5d:	ee                   	out    dx,al
c0016a5e:	eb 04                	jmp    c0016a64 <picEOI(int)+0xa0>
c0016a60:	90                   	nop
c0016a61:	8d 76 00             	lea    esi,[esi+0x0]
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	c3                   	ret    

c0016a68 <RTC::open(int, int, void*)>:
c0016a68:	31 c0                	xor    eax,eax
c0016a6a:	c3                   	ret    
c0016a6b:	90                   	nop

c0016a6c <RTC::close(int, int, void*)>:
c0016a6c:	31 c0                	xor    eax,eax
c0016a6e:	c3                   	ret    
c0016a6f:	90                   	nop

c0016a70 <RTC::timeInSecondsUTC()>:
c0016a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a74:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016a7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016a80:	c3                   	ret    
c0016a81:	90                   	nop

c0016a82 <RTC::timeInDatetimeUTC()>:
c0016a82:	53                   	push   ebx
c0016a83:	83 ec 14             	sub    esp,0x14
c0016a86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a90:	50                   	push   eax
c0016a91:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a94:	83 c4 0c             	add    esp,0xc
c0016a97:	52                   	push   edx
c0016a98:	50                   	push   eax
c0016a99:	53                   	push   ebx
c0016a9a:	e8 1d 4d ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c0016a9f:	89 d8                	mov    eax,ebx
c0016aa1:	83 c4 14             	add    esp,0x14
c0016aa4:	5b                   	pop    ebx
c0016aa5:	c2 04 00             	ret    0x4

c0016aa8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016aa8:	56                   	push   esi
c0016aa9:	53                   	push   ebx
c0016aaa:	83 ec 14             	sub    esp,0x14
c0016aad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ab1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016ab6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016aba:	52                   	push   edx
c0016abb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016abf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ac3:	50                   	push   eax
c0016ac4:	e8 f3 4c ff ff       	call   c000b7bc <secondsToDatetime(unsigned long long)>
c0016ac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016acd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ad1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016ad5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016ad9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016add:	89 f0                	mov    eax,esi
c0016adf:	83 c4 20             	add    esp,0x20
c0016ae2:	5b                   	pop    ebx
c0016ae3:	5e                   	pop    esi
c0016ae4:	ff e0                	jmp    eax

c0016ae6 <RTC::~RTC()>:
c0016ae6:	83 ec 0c             	sub    esp,0xc
c0016ae9:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c0016aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af2:	89 10                	mov    DWORD PTR [eax],edx
c0016af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	50                   	push   eax
c0016afc:	e8 3f 4a ff ff       	call   c000b540 <Clock::~Clock()>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	90                   	nop
c0016b05:	83 c4 0c             	add    esp,0xc
c0016b08:	c3                   	ret    
c0016b09:	90                   	nop

c0016b0a <RTC::~RTC()>:
c0016b0a:	83 ec 0c             	sub    esp,0xc
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b14:	e8 cd ff ff ff       	call   c0016ae6 <RTC::~RTC()>
c0016b19:	83 c4 10             	add    esp,0x10
c0016b1c:	83 ec 08             	sub    esp,0x8
c0016b1f:	68 60 01 00 00       	push   0x160
c0016b24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b28:	e8 e7 39 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	83 c4 0c             	add    esp,0xc
c0016b33:	c3                   	ret    

c0016b34 <RTC::get_update_in_progress_flag()>:
c0016b34:	83 ec 14             	sub    esp,0x14
c0016b37:	6a 0a                	push   0xa
c0016b39:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b3f:	e8 1c 04 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b44:	83 c4 1c             	add    esp,0x1c
c0016b47:	c0 e8 07             	shr    al,0x7
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <RTC::completeRTCRefresh()>:
c0016b4c:	55                   	push   ebp
c0016b4d:	57                   	push   edi
c0016b4e:	56                   	push   esi
c0016b4f:	53                   	push   ebx
c0016b50:	83 ec 2c             	sub    esp,0x2c
c0016b53:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016b60:	e8 cf ff ff ff       	call   c0016b34 <RTC::get_update_in_progress_flag()>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	84 c0                	test   al,al
c0016b6a:	74 0e                	je     c0016b7a <RTC::completeRTCRefresh()+0x2e>
c0016b6c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016b72:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016b78:	73 df                	jae    c0016b59 <RTC::completeRTCRefresh()+0xd>
c0016b7a:	55                   	push   ebp
c0016b7b:	55                   	push   ebp
c0016b7c:	6a 00                	push   0x0
c0016b7e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b84:	e8 d7 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b89:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016b8d:	58                   	pop    eax
c0016b8e:	5a                   	pop    edx
c0016b8f:	6a 02                	push   0x2
c0016b91:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016b97:	e8 c4 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016b9c:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016ba0:	59                   	pop    ecx
c0016ba1:	5b                   	pop    ebx
c0016ba2:	6a 04                	push   0x4
c0016ba4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016baa:	e8 b1 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016baf:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016bb3:	5e                   	pop    esi
c0016bb4:	5f                   	pop    edi
c0016bb5:	6a 07                	push   0x7
c0016bb7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016bbd:	e8 9e 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016bc2:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016bc6:	5d                   	pop    ebp
c0016bc7:	58                   	pop    eax
c0016bc8:	6a 08                	push   0x8
c0016bca:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016bd0:	e8 8b 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016bd5:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016bd9:	58                   	pop    eax
c0016bda:	5a                   	pop    edx
c0016bdb:	6a 09                	push   0x9
c0016bdd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016be3:	e8 78 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016be8:	83 c4 10             	add    esp,0x10
c0016beb:	0f b6 e8             	movzx  ebp,al
c0016bee:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016bfb:	e8 34 ff ff ff       	call   c0016b34 <RTC::get_update_in_progress_flag()>
c0016c00:	83 c4 10             	add    esp,0x10
c0016c03:	84 c0                	test   al,al
c0016c05:	74 0e                	je     c0016c15 <RTC::completeRTCRefresh()+0xc9>
c0016c07:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016c0d:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016c13:	73 df                	jae    c0016bf4 <RTC::completeRTCRefresh()+0xa8>
c0016c15:	50                   	push   eax
c0016c16:	50                   	push   eax
c0016c17:	6a 00                	push   0x0
c0016c19:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c1f:	e8 3c 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c24:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016c28:	58                   	pop    eax
c0016c29:	5a                   	pop    edx
c0016c2a:	6a 02                	push   0x2
c0016c2c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c32:	e8 29 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c37:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016c3b:	59                   	pop    ecx
c0016c3c:	5b                   	pop    ebx
c0016c3d:	6a 04                	push   0x4
c0016c3f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c45:	e8 16 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c4a:	5e                   	pop    esi
c0016c4b:	88 c3                	mov    bl,al
c0016c4d:	5f                   	pop    edi
c0016c4e:	6a 07                	push   0x7
c0016c50:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c56:	e8 05 03 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c5b:	89 c6                	mov    esi,eax
c0016c5d:	58                   	pop    eax
c0016c5e:	5a                   	pop    edx
c0016c5f:	6a 08                	push   0x8
c0016c61:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c67:	e8 f4 02 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c6c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016c70:	59                   	pop    ecx
c0016c71:	5f                   	pop    edi
c0016c72:	6a 09                	push   0x9
c0016c74:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c7a:	e8 e1 02 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016c7f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0016c83:	0f b6 f8             	movzx  edi,al
c0016c86:	83 c4 10             	add    esp,0x10
c0016c89:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0016c8d:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016c91:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0016c95:	89 f1                	mov    ecx,esi
c0016c97:	0f 94 c0             	sete   al
c0016c9a:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0016c9e:	0f 94 c2             	sete   dl
c0016ca1:	21 d0                	and    eax,edx
c0016ca3:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0016ca7:	0f 94 c2             	sete   dl
c0016caa:	21 c2                	and    edx,eax
c0016cac:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0016cb0:	0f 94 c0             	sete   al
c0016cb3:	21 d0                	and    eax,edx
c0016cb5:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016cb9:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016cbd:	0f 94 c1             	sete   cl
c0016cc0:	84 c8                	test   al,cl
c0016cc2:	75 29                	jne    c0016ced <RTC::completeRTCRefresh()+0x1a1>
c0016cc4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016cc8:	89 fd                	mov    ebp,edi
c0016cca:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016cce:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0016cd2:	89 f0                	mov    eax,esi
c0016cd4:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016cd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cdc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ce0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016ce4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016ce8:	e9 01 ff ff ff       	jmp    c0016bee <RTC::completeRTCRefresh()+0xa2>
c0016ced:	39 fd                	cmp    ebp,edi
c0016cef:	75 d3                	jne    c0016cc4 <RTC::completeRTCRefresh()+0x178>
c0016cf1:	55                   	push   ebp
c0016cf2:	55                   	push   ebp
c0016cf3:	6a 0b                	push   0xb
c0016cf5:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cfb:	e8 60 02 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016d00:	83 c4 10             	add    esp,0x10
c0016d03:	89 c5                	mov    ebp,eax
c0016d05:	a8 04                	test   al,0x4
c0016d07:	75 78                	jne    c0016d81 <RTC::completeRTCRefresh()+0x235>
c0016d09:	b1 0a                	mov    cl,0xa
c0016d0b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016d0f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016d13:	83 e2 0f             	and    edx,0xf
c0016d16:	c0 e8 04             	shr    al,0x4
c0016d19:	c1 ef 04             	shr    edi,0x4
c0016d1c:	f6 e1                	mul    cl
c0016d1e:	6b ff 0a             	imul   edi,edi,0xa
c0016d21:	01 d0                	add    eax,edx
c0016d23:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016d27:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016d2b:	83 e2 0f             	and    edx,0xf
c0016d2e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016d32:	c0 e8 04             	shr    al,0x4
c0016d35:	f6 e1                	mul    cl
c0016d37:	01 d0                	add    eax,edx
c0016d39:	88 da                	mov    dl,bl
c0016d3b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016d3f:	83 e2 0f             	and    edx,0xf
c0016d42:	88 d8                	mov    al,bl
c0016d44:	83 e3 80             	and    ebx,0xffffff80
c0016d47:	c0 e8 04             	shr    al,0x4
c0016d4a:	83 e0 07             	and    eax,0x7
c0016d4d:	f6 e1                	mul    cl
c0016d4f:	01 d0                	add    eax,edx
c0016d51:	89 f2                	mov    edx,esi
c0016d53:	09 c3                	or     ebx,eax
c0016d55:	83 e2 0f             	and    edx,0xf
c0016d58:	89 f0                	mov    eax,esi
c0016d5a:	c0 e8 04             	shr    al,0x4
c0016d5d:	f6 e1                	mul    cl
c0016d5f:	8d 34 02             	lea    esi,[edx+eax*1]
c0016d62:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016d66:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016d6a:	83 e2 0f             	and    edx,0xf
c0016d6d:	c0 e8 04             	shr    al,0x4
c0016d70:	f6 e1                	mul    cl
c0016d72:	01 d0                	add    eax,edx
c0016d74:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d7c:	83 e0 0f             	and    eax,0xf
c0016d7f:	01 c7                	add    edi,eax
c0016d81:	83 e5 02             	and    ebp,0x2
c0016d84:	75 14                	jne    c0016d9a <RTC::completeRTCRefresh()+0x24e>
c0016d86:	84 db                	test   bl,bl
c0016d88:	79 10                	jns    c0016d9a <RTC::completeRTCRefresh()+0x24e>
c0016d8a:	83 e3 7f             	and    ebx,0x7f
c0016d8d:	b9 18 00 00 00       	mov    ecx,0x18
c0016d92:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016d95:	99                   	cdq    
c0016d96:	f7 f9                	idiv   ecx
c0016d98:	88 d3                	mov    bl,dl
c0016d9a:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016da0:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016da6:	77 06                	ja     c0016dae <RTC::completeRTCRefresh()+0x262>
c0016da8:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016dae:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016db3:	31 d2                	xor    edx,edx
c0016db5:	c1 e1 10             	shl    ecx,0x10
c0016db8:	89 d7                	mov    edi,edx
c0016dba:	c1 e5 10             	shl    ebp,0x10
c0016dbd:	31 c0                	xor    eax,eax
c0016dbf:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016dc5:	09 cf                	or     edi,ecx
c0016dc7:	89 fa                	mov    edx,edi
c0016dc9:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016dcd:	88 da                	mov    dl,bl
c0016dcf:	89 f3                	mov    ebx,esi
c0016dd1:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016dd5:	88 d8                	mov    al,bl
c0016dd7:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016ddb:	0f b7 c8             	movzx  ecx,ax
c0016dde:	09 e9                	or     ecx,ebp
c0016de0:	89 c8                	mov    eax,ecx
c0016de2:	51                   	push   ecx
c0016de3:	51                   	push   ecx
c0016de4:	52                   	push   edx
c0016de5:	50                   	push   eax
c0016de6:	e8 44 48 ff ff       	call   c000b62f <datetimeToSeconds(datetime_t)>
c0016deb:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016def:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016df5:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016dfb:	83 c4 3c             	add    esp,0x3c
c0016dfe:	5b                   	pop    ebx
c0016dff:	5e                   	pop    esi
c0016e00:	5f                   	pop    edi
c0016e01:	5d                   	pop    ebp
c0016e02:	c3                   	ret    
c0016e03:	90                   	nop

c0016e04 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016e04:	55                   	push   ebp
c0016e05:	57                   	push   edi
c0016e06:	56                   	push   esi
c0016e07:	53                   	push   ebx
c0016e08:	83 ec 30             	sub    esp,0x30
c0016e0b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016e0f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016e13:	6a 00                	push   0x0
c0016e15:	6a 00                	push   0x0
c0016e17:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e1d:	e8 54 02 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016e22:	83 c4 0c             	add    esp,0xc
c0016e25:	6a 00                	push   0x0
c0016e27:	6a 02                	push   0x2
c0016e29:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e2f:	e8 42 02 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016e34:	31 d2                	xor    edx,edx
c0016e36:	89 f9                	mov    ecx,edi
c0016e38:	89 f8                	mov    eax,edi
c0016e3a:	c1 e9 10             	shr    ecx,0x10
c0016e3d:	0f b6 c4             	movzx  eax,ah
c0016e40:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016e44:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016e48:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e4c:	b9 64 00 00 00       	mov    ecx,0x64
c0016e51:	89 f0                	mov    eax,esi
c0016e53:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016e57:	89 f0                	mov    eax,esi
c0016e59:	0f b6 c4             	movzx  eax,ah
c0016e5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016e60:	89 f0                	mov    eax,esi
c0016e62:	c1 e8 10             	shr    eax,0x10
c0016e65:	66 f7 f1             	div    cx
c0016e68:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016e6d:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0016e72:	59                   	pop    ecx
c0016e73:	5b                   	pop    ebx
c0016e74:	89 fb                	mov    ebx,edi
c0016e76:	6a 0b                	push   0xb
c0016e78:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e7e:	e8 dd 00 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016e83:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0016e87:	83 c4 10             	add    esp,0x10
c0016e8a:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0016e8f:	75 74                	jne    c0016f05 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0016e91:	b2 0a                	mov    dl,0xa
c0016e93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016e97:	0f b6 c1             	movzx  eax,cl
c0016e9a:	f6 f2                	div    dl
c0016e9c:	88 c3                	mov    bl,al
c0016e9e:	88 e0                	mov    al,ah
c0016ea0:	c1 e3 04             	shl    ebx,0x4
c0016ea3:	09 c3                	or     ebx,eax
c0016ea5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016eaa:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0016eae:	f6 f2                	div    dl
c0016eb0:	88 c1                	mov    cl,al
c0016eb2:	88 e0                	mov    al,ah
c0016eb4:	c1 e1 04             	shl    ecx,0x4
c0016eb7:	09 c1                	or     ecx,eax
c0016eb9:	89 f8                	mov    eax,edi
c0016ebb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016ebf:	0f b6 c0             	movzx  eax,al
c0016ec2:	f6 f2                	div    dl
c0016ec4:	88 c3                	mov    bl,al
c0016ec6:	88 e0                	mov    al,ah
c0016ec8:	c1 e3 04             	shl    ebx,0x4
c0016ecb:	09 c3                	or     ebx,eax
c0016ecd:	89 f0                	mov    eax,esi
c0016ecf:	0f b6 c0             	movzx  eax,al
c0016ed2:	f6 f2                	div    dl
c0016ed4:	88 c1                	mov    cl,al
c0016ed6:	88 e0                	mov    al,ah
c0016ed8:	c1 e1 04             	shl    ecx,0x4
c0016edb:	09 c1                	or     ecx,eax
c0016edd:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016ee2:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016ee6:	f6 f2                	div    dl
c0016ee8:	88 c1                	mov    cl,al
c0016eea:	88 e0                	mov    al,ah
c0016eec:	c1 e1 04             	shl    ecx,0x4
c0016eef:	09 c1                	or     ecx,eax
c0016ef1:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016ef6:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016efa:	f6 f2                	div    dl
c0016efc:	89 c5                	mov    ebp,eax
c0016efe:	88 e0                	mov    al,ah
c0016f00:	c1 e5 04             	shl    ebp,0x4
c0016f03:	09 c5                	or     ebp,eax
c0016f05:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016f0a:	75 17                	jne    c0016f23 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016f0c:	80 fb 0b             	cmp    bl,0xb
c0016f0f:	76 0c                	jbe    c0016f1d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016f11:	80 eb 0c             	sub    bl,0xc
c0016f14:	75 02                	jne    c0016f18 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016f16:	b3 0c                	mov    bl,0xc
c0016f18:	83 cb 80             	or     ebx,0xffffff80
c0016f1b:	eb 06                	jmp    c0016f23 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016f1d:	84 db                	test   bl,bl
c0016f1f:	75 02                	jne    c0016f23 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016f21:	b3 0c                	mov    bl,0xc
c0016f23:	0f b6 db             	movzx  ebx,bl
c0016f26:	50                   	push   eax
c0016f27:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016f2c:	50                   	push   eax
c0016f2d:	6a 00                	push   0x0
c0016f2f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f35:	e8 3c 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f3a:	83 c4 0c             	add    esp,0xc
c0016f3d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f42:	50                   	push   eax
c0016f43:	6a 02                	push   0x2
c0016f45:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f4b:	e8 26 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f50:	83 c4 0c             	add    esp,0xc
c0016f53:	53                   	push   ebx
c0016f54:	6a 04                	push   0x4
c0016f56:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f5c:	e8 15 01 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f61:	83 c4 0c             	add    esp,0xc
c0016f64:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016f69:	50                   	push   eax
c0016f6a:	6a 07                	push   0x7
c0016f6c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f72:	e8 ff 00 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f77:	83 c4 0c             	add    esp,0xc
c0016f7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0016f7f:	50                   	push   eax
c0016f80:	6a 08                	push   0x8
c0016f82:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f88:	e8 e9 00 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016f8d:	83 c4 0c             	add    esp,0xc
c0016f90:	89 e8                	mov    eax,ebp
c0016f92:	0f b6 e8             	movzx  ebp,al
c0016f95:	55                   	push   ebp
c0016f96:	6a 09                	push   0x9
c0016f98:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016f9e:	e8 d3 00 ff ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016fa3:	5a                   	pop    edx
c0016fa4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016fa8:	e8 9f fb ff ff       	call   c0016b4c <RTC::completeRTCRefresh()>
c0016fad:	83 c4 3c             	add    esp,0x3c
c0016fb0:	b0 01                	mov    al,0x1
c0016fb2:	5b                   	pop    ebx
c0016fb3:	5e                   	pop    esi
c0016fb4:	5f                   	pop    edi
c0016fb5:	5d                   	pop    ebp
c0016fb6:	c3                   	ret    

c0016fb7 <rtcIRQHandler(regs*, void*)>:
c0016fb7:	53                   	push   ebx
c0016fb8:	83 ec 10             	sub    esp,0x10
c0016fbb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016fbf:	6a 0c                	push   0xc
c0016fc1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fc7:	e8 94 ff fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	84 c0                	test   al,al
c0016fd1:	79 24                	jns    c0016ff7 <rtcIRQHandler(regs*, void*)+0x40>
c0016fd3:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016fda:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016fe1:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c0016fe8:	75 0d                	jne    c0016ff7 <rtcIRQHandler(regs*, void*)+0x40>
c0016fea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0016fee:	83 c4 08             	add    esp,0x8
c0016ff1:	5b                   	pop    ebx
c0016ff2:	e9 55 fb ff ff       	jmp    c0016b4c <RTC::completeRTCRefresh()>
c0016ff7:	83 c4 08             	add    esp,0x8
c0016ffa:	5b                   	pop    ebx
c0016ffb:	c3                   	ret    

c0016ffc <RTC::RTC()>:
c0016ffc:	83 ec 1c             	sub    esp,0x1c
c0016fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017003:	83 ec 08             	sub    esp,0x8
c0017006:	68 83 07 02 c0       	push   0xc0020783
c001700b:	50                   	push   eax
c001700c:	e8 f9 44 ff ff       	call   c000b50a <Clock::Clock(char const*)>
c0017011:	83 c4 10             	add    esp,0x10
c0017014:	ba a0 07 02 c0       	mov    edx,0xc00207a0
c0017019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701d:	89 10                	mov    DWORD PTR [eax],edx
c001701f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017023:	83 ec 0c             	sub    esp,0xc
c0017026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001702a:	6a 01                	push   0x1
c001702c:	68 b7 6f 01 c0       	push   0xc0016fb7
c0017031:	6a 08                	push   0x8
c0017033:	50                   	push   eax
c0017034:	e8 bb 49 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017039:	83 c4 20             	add    esp,0x20
c001703c:	89 c2                	mov    edx,eax
c001703e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017042:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017048:	fa                   	cli    
c0017049:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001704e:	40                   	inc    eax
c001704f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0017054:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017059:	83 ec 08             	sub    esp,0x8
c001705c:	6a 0b                	push   0xb
c001705e:	50                   	push   eax
c001705f:	e8 fc fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001706b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017070:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017074:	83 ca 10             	or     edx,0x10
c0017077:	81 e2 ff 00 00 00    	and    edx,0xff
c001707d:	83 ec 04             	sub    esp,0x4
c0017080:	52                   	push   edx
c0017081:	6a 0b                	push   0xb
c0017083:	50                   	push   eax
c0017084:	e8 ed ff fe ff       	call   c0007076 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	83 ec 0c             	sub    esp,0xc
c001708f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017093:	e8 b4 fa ff ff       	call   c0016b4c <RTC::completeRTCRefresh()>
c0017098:	83 c4 10             	add    esp,0x10
c001709b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00170a0:	48                   	dec    eax
c00170a1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00170a6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00170ab:	85 c0                	test   eax,eax
c00170ad:	75 01                	jne    c00170b0 <RTC::RTC()+0xb4>
c00170af:	fb                   	sti    
c00170b0:	90                   	nop
c00170b1:	83 c4 1c             	add    esp,0x1c
c00170b4:	c3                   	ret    
c00170b5:	66 90                	xchg   ax,ax
c00170b7:	90                   	nop

c00170b8 <HalConsoleScroll(int, int)>:
c00170b8:	83 ec 10             	sub    esp,0x10
c00170bb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00170c3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00170cb:	90                   	nop
c00170cc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00170d1:	0f 8f e1 00 00 00    	jg     c00171b8 <HalConsoleScroll(int, int)+0x100>
c00170d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170df:	90                   	nop
c00170e0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00170e8:	0f 8f be 00 00 00    	jg     c00171ac <HalConsoleScroll(int, int)+0xf4>
c00170ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170f2:	89 d0                	mov    eax,edx
c00170f4:	c1 e0 02             	shl    eax,0x2
c00170f7:	01 d0                	add    eax,edx
c00170f9:	c1 e0 05             	shl    eax,0x5
c00170fc:	89 c2                	mov    edx,eax
c00170fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017102:	01 d0                	add    eax,edx
c0017104:	89 c2                	mov    edx,eax
c0017106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001710a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001710d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017111:	89 d0                	mov    eax,edx
c0017113:	c1 e0 02             	shl    eax,0x2
c0017116:	01 d0                	add    eax,edx
c0017118:	c1 e0 05             	shl    eax,0x5
c001711b:	89 c2                	mov    edx,eax
c001711d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017121:	01 d0                	add    eax,edx
c0017123:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001712d:	01 c2                	add    edx,eax
c001712f:	8a 01                	mov    al,BYTE PTR [ecx]
c0017131:	88 02                	mov    BYTE PTR [edx],al
c0017133:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017138:	75 66                	jne    c00171a0 <HalConsoleScroll(int, int)+0xe8>
c001713a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001713e:	83 e0 01             	and    eax,0x1
c0017141:	74 39                	je     c001717c <HalConsoleScroll(int, int)+0xc4>
c0017143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017147:	83 e0 0f             	and    eax,0xf
c001714a:	88 c2                	mov    dl,al
c001714c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017150:	c1 e0 04             	shl    eax,0x4
c0017153:	88 d1                	mov    cl,dl
c0017155:	09 c1                	or     ecx,eax
c0017157:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001715b:	89 d0                	mov    eax,edx
c001715d:	c1 e0 02             	shl    eax,0x2
c0017160:	01 d0                	add    eax,edx
c0017162:	c1 e0 05             	shl    eax,0x5
c0017165:	89 c2                	mov    edx,eax
c0017167:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001716b:	01 d0                	add    eax,edx
c001716d:	89 c2                	mov    edx,eax
c001716f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017173:	01 d0                	add    eax,edx
c0017175:	88 ca                	mov    dl,cl
c0017177:	88 10                	mov    BYTE PTR [eax],dl
c0017179:	eb 25                	jmp    c00171a0 <HalConsoleScroll(int, int)+0xe8>
c001717b:	90                   	nop
c001717c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017180:	89 d0                	mov    eax,edx
c0017182:	c1 e0 02             	shl    eax,0x2
c0017185:	01 d0                	add    eax,edx
c0017187:	c1 e0 05             	shl    eax,0x5
c001718a:	89 c2                	mov    edx,eax
c001718c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017190:	01 d0                	add    eax,edx
c0017192:	89 c2                	mov    edx,eax
c0017194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017198:	01 d0                	add    eax,edx
c001719a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001719d:	8d 76 00             	lea    esi,[esi+0x0]
c00171a0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00171a4:	e9 37 ff ff ff       	jmp    c00170e0 <HalConsoleScroll(int, int)+0x28>
c00171a9:	8d 76 00             	lea    esi,[esi+0x0]
c00171ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171b0:	e9 17 ff ff ff       	jmp    c00170cc <HalConsoleScroll(int, int)+0x14>
c00171b5:	8d 76 00             	lea    esi,[esi+0x0]
c00171b8:	90                   	nop
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	c3                   	ret    
c00171bd:	8d 76 00             	lea    esi,[esi+0x0]

c00171c0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00171c0:	83 ec 14             	sub    esp,0x14
c00171c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171c7:	88 04 24             	mov    BYTE PTR [esp],al
c00171ca:	8a 04 24             	mov    al,BYTE PTR [esp]
c00171cd:	25 ff 00 00 00       	and    eax,0xff
c00171d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00171d6:	89 d1                	mov    ecx,edx
c00171d8:	83 e1 0f             	and    ecx,0xf
c00171db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00171df:	c1 e2 04             	shl    edx,0x4
c00171e2:	81 e2 ff 00 00 00    	and    edx,0xff
c00171e8:	09 ca                	or     edx,ecx
c00171ea:	c1 e2 08             	shl    edx,0x8
c00171ed:	09 d0                	or     eax,edx
c00171ef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00171f4:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00171fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017200:	89 d0                	mov    eax,edx
c0017202:	c1 e0 02             	shl    eax,0x2
c0017205:	01 d0                	add    eax,edx
c0017207:	c1 e0 04             	shl    eax,0x4
c001720a:	89 c2                	mov    edx,eax
c001720c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017210:	01 d0                	add    eax,edx
c0017212:	01 c0                	add    eax,eax
c0017214:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017218:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001721c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017221:	66 89 02             	mov    WORD PTR [edx],ax
c0017224:	90                   	nop
c0017225:	83 c4 14             	add    esp,0x14
c0017228:	c3                   	ret    
c0017229:	8d 76 00             	lea    esi,[esi+0x0]

c001722c <HalConsoleCursorUpdate(int, int)>:
c001722c:	83 ec 20             	sub    esp,0x20
c001722f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017233:	89 c2                	mov    edx,eax
c0017235:	89 d0                	mov    eax,edx
c0017237:	c1 e0 02             	shl    eax,0x2
c001723a:	01 d0                	add    eax,edx
c001723c:	c1 e0 04             	shl    eax,0x4
c001723f:	89 c2                	mov    edx,eax
c0017241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017245:	01 d0                	add    eax,edx
c0017247:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001724c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017253:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017258:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001725c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017260:	ee                   	out    dx,al
c0017261:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017266:	25 ff 00 00 00       	and    eax,0xff
c001726b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017272:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017276:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001727a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001727e:	ee                   	out    dx,al
c001727f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017286:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001728b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001728f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017293:	ee                   	out    dx,al
c0017294:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017299:	66 c1 e8 08          	shr    ax,0x8
c001729d:	25 ff 00 00 00       	and    eax,0xff
c00172a2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00172a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00172ad:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00172b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00172b5:	ee                   	out    dx,al
c00172b6:	90                   	nop
c00172b7:	83 c4 20             	add    esp,0x20
c00172ba:	c3                   	ret    
c00172bb:	90                   	nop

c00172bc <FAT::getName()>:
c00172bc:	b8 d4 07 02 c0       	mov    eax,0xc00207d4
c00172c1:	c3                   	ret    
c00172c2:	66 90                	xchg   ax,ax

c00172c4 <FAT::tell(void*, unsigned long long*)>:
c00172c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00172c9:	75 09                	jne    c00172d4 <FAT::tell(void*, unsigned long long*)+0x10>
c00172cb:	b8 04 00 00 00       	mov    eax,0x4
c00172d0:	c3                   	ret    
c00172d1:	8d 76 00             	lea    esi,[esi+0x0]
c00172d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00172d9:	75 09                	jne    c00172e4 <FAT::tell(void*, unsigned long long*)+0x20>
c00172db:	b8 04 00 00 00       	mov    eax,0x4
c00172e0:	c3                   	ret    
c00172e1:	8d 76 00             	lea    esi,[esi+0x0]
c00172e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172e8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00172eb:	ba 00 00 00 00       	mov    edx,0x0
c00172f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00172f4:	89 01                	mov    DWORD PTR [ecx],eax
c00172f6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00172f9:	b8 00 00 00 00       	mov    eax,0x0
c00172fe:	c3                   	ret    
c00172ff:	90                   	nop

c0017300 <FAT::stat(void*, unsigned long long*)>:
c0017300:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017305:	75 09                	jne    c0017310 <FAT::stat(void*, unsigned long long*)+0x10>
c0017307:	b8 04 00 00 00       	mov    eax,0x4
c001730c:	c3                   	ret    
c001730d:	8d 76 00             	lea    esi,[esi+0x0]
c0017310:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017315:	75 09                	jne    c0017320 <FAT::stat(void*, unsigned long long*)+0x20>
c0017317:	b8 04 00 00 00       	mov    eax,0x4
c001731c:	c3                   	ret    
c001731d:	8d 76 00             	lea    esi,[esi+0x0]
c0017320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017324:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017327:	ba 00 00 00 00       	mov    edx,0x0
c001732c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017330:	89 01                	mov    DWORD PTR [ecx],eax
c0017332:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017335:	b8 00 00 00 00       	mov    eax,0x0
c001733a:	c3                   	ret    
c001733b:	90                   	nop

c001733c <FAT::~FAT()>:
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	ba 20 08 02 c0       	mov    edx,0xc0020820
c0017344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017348:	89 10                	mov    DWORD PTR [eax],edx
c001734a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001734e:	83 ec 0c             	sub    esp,0xc
c0017351:	50                   	push   eax
c0017352:	e8 f9 35 ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c0017357:	83 c4 10             	add    esp,0x10
c001735a:	90                   	nop
c001735b:	83 c4 0c             	add    esp,0xc
c001735e:	c3                   	ret    
c001735f:	90                   	nop

c0017360 <FAT::~FAT()>:
c0017360:	83 ec 0c             	sub    esp,0xc
c0017363:	83 ec 0c             	sub    esp,0xc
c0017366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001736a:	e8 cd ff ff ff       	call   c001733c <FAT::~FAT()>
c001736f:	83 c4 10             	add    esp,0x10
c0017372:	83 ec 08             	sub    esp,0x8
c0017375:	6a 08                	push   0x8
c0017377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001737b:	e8 94 31 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0017380:	83 c4 10             	add    esp,0x10
c0017383:	83 c4 0c             	add    esp,0xc
c0017386:	c3                   	ret    
c0017387:	90                   	nop

c0017388 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017388:	83 ec 1c             	sub    esp,0x1c
c001738b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017392:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017397:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001739b:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00173a2:	83 f8 ff             	cmp    eax,0xffffffff
c00173a5:	75 35                	jne    c00173dc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00173a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173ab:	88 c2                	mov    dl,al
c00173ad:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00173b2:	01 d0                	add    eax,edx
c00173b4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173b8:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00173be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c2:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00173c9:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00173ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173d2:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00173d9:	eb 19                	jmp    c00173f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00173db:	90                   	nop
c00173dc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00173e0:	88 c2                	mov    dl,al
c00173e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173e6:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00173ed:	01 d0                	add    eax,edx
c00173ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00173f3:	90                   	nop
c00173f4:	83 ec 04             	sub    esp,0x4
c00173f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00173ff:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017403:	50                   	push   eax
c0017404:	e8 4b da fe ff       	call   c0004e54 <f_getlabel>
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017410:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017415:	75 09                	jne    c0017420 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017417:	b8 00 00 00 00       	mov    eax,0x0
c001741c:	eb 0a                	jmp    c0017428 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001741e:	66 90                	xchg   ax,ax
c0017420:	b8 01 00 00 00       	mov    eax,0x1
c0017425:	8d 76 00             	lea    esi,[esi+0x0]
c0017428:	83 c4 1c             	add    esp,0x1c
c001742b:	c3                   	ret    

c001742c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001742c:	57                   	push   edi
c001742d:	83 ec 58             	sub    esp,0x58
c0017430:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017438:	8d 54 24 10          	lea    edx,[esp+0x10]
c001743c:	b8 00 00 00 00       	mov    eax,0x0
c0017441:	b9 0f 00 00 00       	mov    ecx,0xf
c0017446:	fc                   	cld    
c0017447:	89 d7                	mov    edi,edx
c0017449:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001744b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001744f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017456:	83 f8 ff             	cmp    eax,0xffffffff
c0017459:	75 35                	jne    c0017490 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001745b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001745f:	88 c2                	mov    dl,al
c0017461:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017466:	01 d0                	add    eax,edx
c0017468:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001746c:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017472:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017476:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c001747d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017482:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017486:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001748d:	eb 19                	jmp    c00174a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001748f:	90                   	nop
c0017490:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017494:	88 c2                	mov    dl,al
c0017496:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001749a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00174a1:	01 d0                	add    eax,edx
c00174a3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00174a7:	90                   	nop
c00174a8:	83 ec 08             	sub    esp,0x8
c00174ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00174af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174b3:	50                   	push   eax
c00174b4:	e8 07 93 fe ff       	call   c00007c0 <strcat>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00174c3:	50                   	push   eax
c00174c4:	e8 dc da fe ff       	call   c0004fa5 <f_setlabel>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00174d5:	75 09                	jne    c00174e0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00174d7:	b8 00 00 00 00       	mov    eax,0x0
c00174dc:	eb 0a                	jmp    c00174e8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00174de:	66 90                	xchg   ax,ax
c00174e0:	b8 01 00 00 00       	mov    eax,0x1
c00174e5:	8d 76 00             	lea    esi,[esi+0x0]
c00174e8:	83 c4 58             	add    esp,0x58
c00174eb:	5f                   	pop    edi
c00174ec:	c3                   	ret    
c00174ed:	90                   	nop
c00174ee:	66 90                	xchg   ax,ax

c00174f0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00174f0:	83 ec 2c             	sub    esp,0x2c
c00174f3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00174fb:	83 ec 08             	sub    esp,0x8
c00174fe:	68 f8 07 02 c0       	push   0xc00207f8
c0017503:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017507:	e8 d4 91 fe ff       	call   c00006e0 <strcmp>
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	85 c0                	test   eax,eax
c0017511:	0f 94 c0             	sete   al
c0017514:	84 c0                	test   al,al
c0017516:	74 10                	je     c0017528 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017518:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017520:	e9 b3 00 00 00       	jmp    c00175d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017525:	8d 76 00             	lea    esi,[esi+0x0]
c0017528:	83 ec 08             	sub    esp,0x8
c001752b:	68 ea 07 02 c0       	push   0xc00207ea
c0017530:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017534:	e8 a7 91 fe ff       	call   c00006e0 <strcmp>
c0017539:	83 c4 10             	add    esp,0x10
c001753c:	85 c0                	test   eax,eax
c001753e:	0f 94 c0             	sete   al
c0017541:	84 c0                	test   al,al
c0017543:	74 0f                	je     c0017554 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017545:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001754d:	e9 86 00 00 00       	jmp    c00175d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017552:	66 90                	xchg   ax,ax
c0017554:	83 ec 08             	sub    esp,0x8
c0017557:	68 f0 07 02 c0       	push   0xc00207f0
c001755c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017560:	e8 7b 91 fe ff       	call   c00006e0 <strcmp>
c0017565:	83 c4 10             	add    esp,0x10
c0017568:	85 c0                	test   eax,eax
c001756a:	0f 94 c0             	sete   al
c001756d:	84 c0                	test   al,al
c001756f:	74 0b                	je     c001757c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017571:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017579:	eb 5d                	jmp    c00175d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001757b:	90                   	nop
c001757c:	83 ec 08             	sub    esp,0x8
c001757f:	68 1c e6 01 c0       	push   0xc001e61c
c0017584:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017588:	e8 53 91 fe ff       	call   c00006e0 <strcmp>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	85 c0                	test   eax,eax
c0017592:	0f 94 c0             	sete   al
c0017595:	84 c0                	test   al,al
c0017597:	74 0b                	je     c00175a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017599:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00175a1:	eb 35                	jmp    c00175d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00175a3:	90                   	nop
c00175a4:	83 ec 08             	sub    esp,0x8
c00175a7:	68 f6 07 02 c0       	push   0xc00207f6
c00175ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00175b0:	e8 2b 91 fe ff       	call   c00006e0 <strcmp>
c00175b5:	83 c4 10             	add    esp,0x10
c00175b8:	85 c0                	test   eax,eax
c00175ba:	0f 94 c0             	sete   al
c00175bd:	84 c0                	test   al,al
c00175bf:	74 0b                	je     c00175cc <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00175c1:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00175c9:	eb 0d                	jmp    c00175d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00175cb:	90                   	nop
c00175cc:	b8 08 00 00 00       	mov    eax,0x8
c00175d1:	e9 ea 00 00 00       	jmp    c00176c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00175d6:	66 90                	xchg   ax,ax
c00175d8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00175df:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00175e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175e8:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00175ef:	83 f8 ff             	cmp    eax,0xffffffff
c00175f2:	75 34                	jne    c0017628 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c00175f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00175f8:	88 c2                	mov    dl,al
c00175fa:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00175ff:	01 d0                	add    eax,edx
c0017601:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017605:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c001760b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001760f:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017616:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001761b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001761f:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017626:	eb 18                	jmp    c0017640 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017628:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001762c:	88 c2                	mov    dl,al
c001762e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017632:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017639:	01 d0                	add    eax,edx
c001763b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001763f:	90                   	nop
c0017640:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017644:	88 04 24             	mov    BYTE PTR [esp],al
c0017647:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001764b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001764f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017657:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001765c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017664:	83 ec 0c             	sub    esp,0xc
c0017667:	68 00 20 00 00       	push   0x2000
c001766c:	e8 04 02 ff ff       	call   c0007875 <malloc>
c0017671:	83 c4 10             	add    esp,0x10
c0017674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017678:	68 00 20 00 00       	push   0x2000
c001767d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017681:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017685:	50                   	push   eax
c0017686:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001768a:	50                   	push   eax
c001768b:	e8 05 dc fe ff       	call   c0005295 <f_mkfs>
c0017690:	83 c4 10             	add    esp,0x10
c0017693:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017697:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001769c:	75 0a                	jne    c00176a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001769e:	b8 00 00 00 00       	mov    eax,0x0
c00176a3:	eb 1b                	jmp    c00176c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00176a5:	8d 76 00             	lea    esi,[esi+0x0]
c00176a8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00176ad:	75 09                	jne    c00176b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00176af:	b8 09 00 00 00       	mov    eax,0x9
c00176b4:	eb 0a                	jmp    c00176c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00176b6:	66 90                	xchg   ax,ax
c00176b8:	b8 01 00 00 00       	mov    eax,0x1
c00176bd:	8d 76 00             	lea    esi,[esi+0x0]
c00176c0:	83 c4 2c             	add    esp,0x2c
c00176c3:	c3                   	ret    

c00176c4 <FAT::tryMount(LogicalDisk*, int)>:
c00176c4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00176ca:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00176cf:	83 f8 14             	cmp    eax,0x14
c00176d2:	75 18                	jne    c00176ec <FAT::tryMount(LogicalDisk*, int)+0x28>
c00176d4:	83 ec 0c             	sub    esp,0xc
c00176d7:	68 fc 07 02 c0       	push   0xc00207fc
c00176dc:	e8 2a 8c ff ff       	call   c001030b <KePanic(char const*)>
c00176e1:	83 c4 10             	add    esp,0x10
c00176e4:	b0 00                	mov    al,0x0
c00176e6:	e9 e9 01 00 00       	jmp    c00178d4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00176eb:	90                   	nop
c00176ec:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00176f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00176f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176ff:	3d 00 02 00 00       	cmp    eax,0x200
c0017704:	74 0a                	je     c0017710 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017706:	b0 00                	mov    al,0x0
c0017708:	e9 c7 01 00 00       	jmp    c00178d4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001770d:	8d 76 00             	lea    esi,[esi+0x0]
c0017710:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017718:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001771f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017726:	83 f8 ff             	cmp    eax,0xffffffff
c0017729:	74 09                	je     c0017734 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001772b:	b0 01                	mov    al,0x1
c001772d:	e9 a2 01 00 00       	jmp    c00178d4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017732:	66 90                	xchg   ax,ax
c0017734:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001773e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017746:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001774d:	88 c2                	mov    dl,al
c001774f:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017754:	01 d0                	add    eax,edx
c0017756:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001775d:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017763:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001776a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017771:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017776:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001777d:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017784:	83 ec 0c             	sub    esp,0xc
c0017787:	68 34 02 00 00       	push   0x234
c001778c:	e8 e4 00 ff ff       	call   c0007875 <malloc>
c0017791:	83 c4 10             	add    esp,0x10
c0017794:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001779b:	83 ec 04             	sub    esp,0x4
c001779e:	6a 00                	push   0x0
c00177a0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00177a7:	50                   	push   eax
c00177a8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00177af:	e8 07 c3 fe ff       	call   c0003abb <f_mount>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00177be:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00177c6:	74 1c                	je     c00177e4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00177c8:	83 ec 0c             	sub    esp,0xc
c00177cb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00177d2:	e8 be 00 ff ff       	call   c0007895 <rfree>
c00177d7:	83 c4 10             	add    esp,0x10
c00177da:	b0 00                	mov    al,0x0
c00177dc:	e9 f3 00 00 00       	jmp    c00178d4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00177e1:	8d 76 00             	lea    esi,[esi+0x0]
c00177e4:	83 ec 04             	sub    esp,0x4
c00177e7:	68 00 01 00 00       	push   0x100
c00177ec:	6a 00                	push   0x0
c00177ee:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00177f5:	50                   	push   eax
c00177f6:	e8 d5 8c fe ff       	call   c00004d0 <memset>
c00177fb:	83 c4 10             	add    esp,0x10
c00177fe:	83 ec 08             	sub    esp,0x8
c0017801:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017808:	50                   	push   eax
c0017809:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017810:	50                   	push   eax
c0017811:	e8 aa 8f fe ff       	call   c00007c0 <strcat>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	83 ec 08             	sub    esp,0x8
c001781c:	68 0a 08 02 c0       	push   0xc002080a
c0017821:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017828:	50                   	push   eax
c0017829:	e8 92 8f fe ff       	call   c00007c0 <strcat>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	83 ec 04             	sub    esp,0x4
c0017834:	6a 01                	push   0x1
c0017836:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001783d:	50                   	push   eax
c001783e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017842:	50                   	push   eax
c0017843:	e8 d5 c2 fe ff       	call   c0003b1d <f_open>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017852:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017859:	85 c0                	test   eax,eax
c001785b:	74 0b                	je     c0017868 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001785d:	78 31                	js     c0017890 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001785f:	83 e8 04             	sub    eax,0x4
c0017862:	83 f8 01             	cmp    eax,0x1
c0017865:	77 29                	ja     c0017890 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017867:	90                   	nop
c0017868:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017877:	50                   	push   eax
c0017878:	e8 53 ca fe ff       	call   c00042d0 <f_close>
c001787d:	83 c4 10             	add    esp,0x10
c0017880:	90                   	nop
c0017881:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017889:	74 41                	je     c00178cc <FAT::tryMount(LogicalDisk*, int)+0x208>
c001788b:	eb 33                	jmp    c00178c0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001788d:	8d 76 00             	lea    esi,[esi+0x0]
c0017890:	83 ec 0c             	sub    esp,0xc
c0017893:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001789a:	e8 f6 ff fe ff       	call   c0007895 <rfree>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	83 ec 04             	sub    esp,0x4
c00178a5:	6a 00                	push   0x0
c00178a7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00178ae:	50                   	push   eax
c00178af:	6a 00                	push   0x0
c00178b1:	e8 05 c2 fe ff       	call   c0003abb <f_mount>
c00178b6:	83 c4 10             	add    esp,0x10
c00178b9:	b0 00                	mov    al,0x0
c00178bb:	eb 17                	jmp    c00178d4 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178bd:	8d 76 00             	lea    esi,[esi+0x0]
c00178c0:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178c5:	40                   	inc    eax
c00178c6:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c00178cb:	90                   	nop
c00178cc:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00178d3:	90                   	nop
c00178d4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00178da:	c3                   	ret    
c00178db:	90                   	nop

c00178dc <FAT::allocateSwapfile(char const*, int)>:
c00178dc:	55                   	push   ebp
c00178dd:	57                   	push   edi
c00178de:	56                   	push   esi
c00178df:	53                   	push   ebx
c00178e0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00178e6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00178f1:	83 ec 0c             	sub    esp,0xc
c00178f4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00178fb:	e8 75 ff fe ff       	call   c0007875 <malloc>
c0017900:	83 c4 10             	add    esp,0x10
c0017903:	89 c7                	mov    edi,eax
c0017905:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001790a:	83 ec 04             	sub    esp,0x4
c001790d:	50                   	push   eax
c001790e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017915:	57                   	push   edi
c0017916:	e8 65 32 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c001791b:	83 c4 10             	add    esp,0x10
c001791e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017925:	83 ec 04             	sub    esp,0x4
c0017928:	8d 44 24 13          	lea    eax,[esp+0x13]
c001792c:	50                   	push   eax
c001792d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017931:	50                   	push   eax
c0017932:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017939:	e8 ae 35 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c001793e:	83 c4 10             	add    esp,0x10
c0017941:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017948:	c1 e0 14             	shl    eax,0x14
c001794b:	89 c7                	mov    edi,eax
c001794d:	89 c5                	mov    ebp,eax
c001794f:	c1 fd 1f             	sar    ebp,0x1f
c0017952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017956:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001795a:	89 f9                	mov    ecx,edi
c001795c:	31 c1                	xor    ecx,eax
c001795e:	89 cb                	mov    ebx,ecx
c0017960:	89 e9                	mov    ecx,ebp
c0017962:	31 d1                	xor    ecx,edx
c0017964:	89 ce                	mov    esi,ecx
c0017966:	89 f0                	mov    eax,esi
c0017968:	09 d8                	or     eax,ebx
c001796a:	0f 84 9c 00 00 00    	je     c0017a0c <FAT::allocateSwapfile(char const*, int)+0x130>
c0017970:	83 ec 0c             	sub    esp,0xc
c0017973:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001797a:	e8 39 34 ff ff       	call   c000adb8 <File::unlink()>
c001797f:	83 c4 10             	add    esp,0x10
c0017982:	83 ec 08             	sub    esp,0x8
c0017985:	6a 12                	push   0x12
c0017987:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001798e:	e8 ad 32 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001799d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00179a3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00179aa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00179b1:	c1 e0 14             	shl    eax,0x14
c00179b4:	83 ec 04             	sub    esp,0x4
c00179b7:	6a 01                	push   0x1
c00179b9:	50                   	push   eax
c00179ba:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00179c1:	e8 6f d7 fe ff       	call   c0005135 <f_expand>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00179d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00179d2:	83 c0 10             	add    eax,0x10
c00179d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00179d7:	83 ec 0c             	sub    esp,0xc
c00179da:	8d 54 24 24          	lea    edx,[esp+0x24]
c00179de:	52                   	push   edx
c00179df:	8d 54 24 30          	lea    edx,[esp+0x30]
c00179e3:	52                   	push   edx
c00179e4:	6a 00                	push   0x0
c00179e6:	68 00 04 00 00       	push   0x400
c00179eb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00179f2:	ff d0                	call   eax
c00179f4:	83 c4 20             	add    esp,0x20
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017a01:	e8 98 32 ff ff       	call   c000ac9e <File::close()>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	8d 76 00             	lea    esi,[esi+0x0]
c0017a0c:	83 ec 08             	sub    esp,0x8
c0017a0f:	6a 01                	push   0x1
c0017a11:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017a18:	e8 23 32 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c0017a1d:	83 c4 10             	add    esp,0x10
c0017a20:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a29:	83 c0 0c             	add    eax,0xc
c0017a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a2e:	83 ec 0c             	sub    esp,0xc
c0017a31:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017a35:	52                   	push   edx
c0017a36:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017a3a:	52                   	push   edx
c0017a3b:	6a 00                	push   0x0
c0017a3d:	6a 04                	push   0x4
c0017a3f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017a46:	ff d0                	call   eax
c0017a48:	83 c4 20             	add    esp,0x20
c0017a4b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017a52:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017a58:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017a5f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017a66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017a69:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017a70:	83 ec 0c             	sub    esp,0xc
c0017a73:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017a7a:	e8 1f 32 ff ff       	call   c000ac9e <File::close()>
c0017a7f:	83 c4 10             	add    esp,0x10
c0017a82:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017a89:	ba 00 00 00 00       	mov    edx,0x0
c0017a8e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017a94:	5b                   	pop    ebx
c0017a95:	5e                   	pop    esi
c0017a96:	5f                   	pop    edi
c0017a97:	5d                   	pop    ebp
c0017a98:	c3                   	ret    
c0017a99:	90                   	nop
c0017a9a:	66 90                	xchg   ax,ax

c0017a9c <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017a9c:	57                   	push   edi
c0017a9d:	56                   	push   esi
c0017a9e:	53                   	push   ebx
c0017a9f:	81 ec 50 02 00 00    	sub    esp,0x250
c0017aa5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017aad:	74 0d                	je     c0017abc <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017aaf:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017ab7:	75 0f                	jne    c0017ac8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0017abc:	b8 04 00 00 00       	mov    eax,0x4
c0017ac1:	e9 36 01 00 00       	jmp    c0017bfc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017ac6:	66 90                	xchg   ax,ax
c0017ac8:	83 ec 08             	sub    esp,0x8
c0017acb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017ad2:	50                   	push   eax
c0017ad3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017ada:	e8 b4 ca fe ff       	call   c0004593 <f_readdir>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017ae9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017afa:	83 c0 16             	add    eax,0x16
c0017afd:	50                   	push   eax
c0017afe:	e8 3d 8a fe ff       	call   c0000540 <strlen>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	ba 00 00 00 00       	mov    edx,0x0
c0017b0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b0f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017b13:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017b1a:	25 ff 00 00 00       	and    eax,0xff
c0017b1f:	83 e0 10             	and    eax,0x10
c0017b22:	74 08                	je     c0017b2c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017b24:	b8 02 00 00 00       	mov    eax,0x2
c0017b29:	eb 09                	jmp    c0017b34 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017b2b:	90                   	nop
c0017b2c:	b8 01 00 00 00       	mov    eax,0x1
c0017b31:	8d 76 00             	lea    esi,[esi+0x0]
c0017b34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b38:	83 ec 08             	sub    esp,0x8
c0017b3b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017b42:	83 c0 16             	add    eax,0x16
c0017b45:	50                   	push   eax
c0017b46:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017b4a:	83 c0 10             	add    eax,0x10
c0017b4d:	50                   	push   eax
c0017b4e:	e8 ad 8a fe ff       	call   c0000600 <strcpy>
c0017b53:	83 c4 10             	add    esp,0x10
c0017b56:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017b5d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017b64:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b68:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017b6f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017b76:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017b7d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017b84:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017b8b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017b92:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017b99:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017ba0:	89 c6                	mov    esi,eax
c0017ba2:	89 d7                	mov    edi,edx
c0017ba4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017ba6:	89 c8                	mov    eax,ecx
c0017ba8:	89 fa                	mov    edx,edi
c0017baa:	89 f3                	mov    ebx,esi
c0017bac:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017bb3:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017bba:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017bc1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017bc8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017bce:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017bd5:	84 c0                	test   al,al
c0017bd7:	75 07                	jne    c0017be0 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017bd9:	b8 07 00 00 00       	mov    eax,0x7
c0017bde:	eb 1c                	jmp    c0017bfc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017be0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017be7:	85 c0                	test   eax,eax
c0017be9:	75 09                	jne    c0017bf4 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017beb:	b8 00 00 00 00       	mov    eax,0x0
c0017bf0:	eb 0a                	jmp    c0017bfc <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017bf2:	66 90                	xchg   ax,ax
c0017bf4:	b8 01 00 00 00       	mov    eax,0x1
c0017bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bfc:	81 c4 50 02 00 00    	add    esp,0x250
c0017c02:	5b                   	pop    ebx
c0017c03:	5e                   	pop    esi
c0017c04:	5f                   	pop    edi
c0017c05:	c3                   	ret    
c0017c06:	66 90                	xchg   ax,ax

c0017c08 <FAT::read(void*, unsigned long, void*, int*)>:
c0017c08:	83 ec 1c             	sub    esp,0x1c
c0017c0b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017c10:	74 0a                	je     c0017c1c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017c12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017c17:	75 0b                	jne    c0017c24 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017c19:	8d 76 00             	lea    esi,[esi+0x0]
c0017c1c:	b8 04 00 00 00       	mov    eax,0x4
c0017c21:	eb 41                	jmp    c0017c64 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017c23:	90                   	nop
c0017c24:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c28:	50                   	push   eax
c0017c29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c35:	e8 ae c1 fe ff       	call   c0003de8 <f_read>
c0017c3a:	83 c4 10             	add    esp,0x10
c0017c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c45:	89 c2                	mov    edx,eax
c0017c47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c4b:	89 10                	mov    DWORD PTR [eax],edx
c0017c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c51:	85 c0                	test   eax,eax
c0017c53:	75 07                	jne    c0017c5c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017c55:	b8 00 00 00 00       	mov    eax,0x0
c0017c5a:	eb 08                	jmp    c0017c64 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017c5c:	b8 01 00 00 00       	mov    eax,0x1
c0017c61:	8d 76 00             	lea    esi,[esi+0x0]
c0017c64:	83 c4 1c             	add    esp,0x1c
c0017c67:	c3                   	ret    

c0017c68 <FAT::write(void*, unsigned long, void*, int*)>:
c0017c68:	83 ec 1c             	sub    esp,0x1c
c0017c6b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017c70:	74 0a                	je     c0017c7c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0017c72:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017c77:	75 0b                	jne    c0017c84 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]
c0017c7c:	b8 04 00 00 00       	mov    eax,0x4
c0017c81:	eb 41                	jmp    c0017cc4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017c83:	90                   	nop
c0017c84:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c88:	50                   	push   eax
c0017c89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c95:	e8 4d c3 fe ff       	call   c0003fe7 <f_write>
c0017c9a:	83 c4 10             	add    esp,0x10
c0017c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ca1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ca5:	89 c2                	mov    edx,eax
c0017ca7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cab:	89 10                	mov    DWORD PTR [eax],edx
c0017cad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cb1:	85 c0                	test   eax,eax
c0017cb3:	75 07                	jne    c0017cbc <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0017cb5:	b8 00 00 00 00       	mov    eax,0x0
c0017cba:	eb 08                	jmp    c0017cc4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017cbc:	b8 01 00 00 00       	mov    eax,0x1
c0017cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc4:	83 c4 1c             	add    esp,0x1c
c0017cc7:	c3                   	ret    

c0017cc8 <FAT::close(void*)>:
c0017cc8:	83 ec 1c             	sub    esp,0x1c
c0017ccb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017cd0:	75 0a                	jne    c0017cdc <FAT::close(void*)+0x14>
c0017cd2:	b8 04 00 00 00       	mov    eax,0x4
c0017cd7:	eb 3f                	jmp    c0017d18 <FAT::close(void*)+0x50>
c0017cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ce3:	e8 e8 c5 fe ff       	call   c00042d0 <f_close>
c0017ce8:	83 c4 10             	add    esp,0x10
c0017ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cef:	83 ec 0c             	sub    esp,0xc
c0017cf2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017cf6:	e8 8a fb fe ff       	call   c0007885 <free>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d02:	85 c0                	test   eax,eax
c0017d04:	75 0a                	jne    c0017d10 <FAT::close(void*)+0x48>
c0017d06:	b8 00 00 00 00       	mov    eax,0x0
c0017d0b:	eb 0b                	jmp    c0017d18 <FAT::close(void*)+0x50>
c0017d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d10:	b8 01 00 00 00       	mov    eax,0x1
c0017d15:	8d 76 00             	lea    esi,[esi+0x0]
c0017d18:	83 c4 1c             	add    esp,0x1c
c0017d1b:	c3                   	ret    

c0017d1c <FAT::closeDir(void*)>:
c0017d1c:	83 ec 1c             	sub    esp,0x1c
c0017d1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017d24:	75 0a                	jne    c0017d30 <FAT::closeDir(void*)+0x14>
c0017d26:	b8 04 00 00 00       	mov    eax,0x4
c0017d2b:	eb 3f                	jmp    c0017d6c <FAT::closeDir(void*)+0x50>
c0017d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d30:	83 ec 0c             	sub    esp,0xc
c0017d33:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d37:	e8 35 c8 fe ff       	call   c0004571 <f_closedir>
c0017d3c:	83 c4 10             	add    esp,0x10
c0017d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d43:	83 ec 0c             	sub    esp,0xc
c0017d46:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017d4a:	e8 36 fb fe ff       	call   c0007885 <free>
c0017d4f:	83 c4 10             	add    esp,0x10
c0017d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d56:	85 c0                	test   eax,eax
c0017d58:	75 0a                	jne    c0017d64 <FAT::closeDir(void*)+0x48>
c0017d5a:	b8 00 00 00 00       	mov    eax,0x0
c0017d5f:	eb 0b                	jmp    c0017d6c <FAT::closeDir(void*)+0x50>
c0017d61:	8d 76 00             	lea    esi,[esi+0x0]
c0017d64:	b8 01 00 00 00       	mov    eax,0x1
c0017d69:	8d 76 00             	lea    esi,[esi+0x0]
c0017d6c:	83 c4 1c             	add    esp,0x1c
c0017d6f:	c3                   	ret    

c0017d70 <FAT::seek(void*, unsigned long long)>:
c0017d70:	83 ec 2c             	sub    esp,0x2c
c0017d73:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d83:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017d88:	75 0a                	jne    c0017d94 <FAT::seek(void*, unsigned long long)+0x24>
c0017d8a:	b8 04 00 00 00       	mov    eax,0x4
c0017d8f:	eb 33                	jmp    c0017dc4 <FAT::seek(void*, unsigned long long)+0x54>
c0017d91:	8d 76 00             	lea    esi,[esi+0x0]
c0017d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d98:	83 ec 08             	sub    esp,0x8
c0017d9b:	50                   	push   eax
c0017d9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017da0:	e8 5a c5 fe ff       	call   c00042ff <f_lseek>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017db0:	85 c0                	test   eax,eax
c0017db2:	75 08                	jne    c0017dbc <FAT::seek(void*, unsigned long long)+0x4c>
c0017db4:	b8 00 00 00 00       	mov    eax,0x0
c0017db9:	eb 09                	jmp    c0017dc4 <FAT::seek(void*, unsigned long long)+0x54>
c0017dbb:	90                   	nop
c0017dbc:	b8 01 00 00 00       	mov    eax,0x1
c0017dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc4:	83 c4 2c             	add    esp,0x2c
c0017dc7:	c3                   	ret    

c0017dc8 <fatWrapperReadDisk>:
c0017dc8:	53                   	push   ebx
c0017dc9:	83 ec 18             	sub    esp,0x18
c0017dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017dd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017dd4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017dd8:	25 ff 00 00 00       	and    eax,0xff
c0017ddd:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017de4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017de8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dec:	ba 00 00 00 00       	mov    edx,0x0
c0017df1:	83 ec 0c             	sub    esp,0xc
c0017df4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017df8:	53                   	push   ebx
c0017df9:	52                   	push   edx
c0017dfa:	50                   	push   eax
c0017dfb:	51                   	push   ecx
c0017dfc:	e8 29 4f ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c0017e01:	83 c4 20             	add    esp,0x20
c0017e04:	83 c4 18             	add    esp,0x18
c0017e07:	5b                   	pop    ebx
c0017e08:	c3                   	ret    
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]

c0017e0c <fatWrapperWriteDisk>:
c0017e0c:	53                   	push   ebx
c0017e0d:	83 ec 18             	sub    esp,0x18
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017e18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e1c:	25 ff 00 00 00       	and    eax,0xff
c0017e21:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017e28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017e2c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e30:	ba 00 00 00 00       	mov    edx,0x0
c0017e35:	83 ec 0c             	sub    esp,0xc
c0017e38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e3c:	53                   	push   ebx
c0017e3d:	52                   	push   edx
c0017e3e:	50                   	push   eax
c0017e3f:	51                   	push   ecx
c0017e40:	e8 51 4f ff ff       	call   c000cd96 <LogicalDisk::write(unsigned long long, int, void*)>
c0017e45:	83 c4 20             	add    esp,0x20
c0017e48:	83 c4 18             	add    esp,0x18
c0017e4b:	5b                   	pop    ebx
c0017e4c:	c3                   	ret    
c0017e4d:	8d 76 00             	lea    esi,[esi+0x0]

c0017e50 <fatWrapperIoctl>:
c0017e50:	53                   	push   ebx
c0017e51:	83 ec 28             	sub    esp,0x28
c0017e54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e5c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017e60:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e64:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017e69:	75 35                	jne    c0017ea0 <fatWrapperIoctl+0x50>
c0017e6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e6f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017e73:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017e77:	25 ff 00 00 00       	and    eax,0xff
c0017e7c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0017e83:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017e89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017e8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e93:	66 89 02             	mov    WORD PTR [edx],ax
c0017e96:	b8 00 00 00 00       	mov    eax,0x0
c0017e9b:	e9 c4 00 00 00       	jmp    c0017f64 <fatWrapperIoctl+0x114>
c0017ea0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017ea5:	75 75                	jne    c0017f1c <fatWrapperIoctl+0xcc>
c0017ea7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017eaf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017eb3:	25 ff 00 00 00       	and    eax,0xff
c0017eb8:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0017ebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017ec5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017ecb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017ed1:	89 c8                	mov    eax,ecx
c0017ed3:	89 da                	mov    edx,ebx
c0017ed5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017ed9:	c1 e0 0a             	shl    eax,0xa
c0017edc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017ee0:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017ee6:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0017eed:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017ef3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017ef9:	89 cb                	mov    ebx,ecx
c0017efb:	c1 fb 1f             	sar    ebx,0x1f
c0017efe:	53                   	push   ebx
c0017eff:	51                   	push   ecx
c0017f00:	52                   	push   edx
c0017f01:	50                   	push   eax
c0017f02:	e8 29 59 00 00       	call   c001d830 <__udivdi3>
c0017f07:	83 c4 10             	add    esp,0x10
c0017f0a:	89 c2                	mov    edx,eax
c0017f0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f10:	89 10                	mov    DWORD PTR [eax],edx
c0017f12:	b8 00 00 00 00       	mov    eax,0x0
c0017f17:	eb 4b                	jmp    c0017f64 <fatWrapperIoctl+0x114>
c0017f19:	8d 76 00             	lea    esi,[esi+0x0]
c0017f1c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017f21:	75 09                	jne    c0017f2c <fatWrapperIoctl+0xdc>
c0017f23:	b8 00 00 00 00       	mov    eax,0x0
c0017f28:	eb 3a                	jmp    c0017f64 <fatWrapperIoctl+0x114>
c0017f2a:	66 90                	xchg   ax,ax
c0017f2c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017f31:	75 19                	jne    c0017f4c <fatWrapperIoctl+0xfc>
c0017f33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017f37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f3f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017f45:	b8 00 00 00 00       	mov    eax,0x0
c0017f4a:	eb 18                	jmp    c0017f64 <fatWrapperIoctl+0x114>
c0017f4c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0017f51:	75 09                	jne    c0017f5c <fatWrapperIoctl+0x10c>
c0017f53:	b8 00 00 00 00       	mov    eax,0x0
c0017f58:	eb 0a                	jmp    c0017f64 <fatWrapperIoctl+0x114>
c0017f5a:	66 90                	xchg   ax,ax
c0017f5c:	b8 04 00 00 00       	mov    eax,0x4
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	83 c4 28             	add    esp,0x28
c0017f67:	5b                   	pop    ebx
c0017f68:	c3                   	ret    
c0017f69:	90                   	nop
c0017f6a:	66 90                	xchg   ax,ax

c0017f6c <FAT::FAT()>:
c0017f6c:	83 ec 1c             	sub    esp,0x1c
c0017f6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f73:	83 ec 0c             	sub    esp,0xc
c0017f76:	50                   	push   eax
c0017f77:	e8 b0 29 ff ff       	call   c000a92c <Filesystem::Filesystem()>
c0017f7c:	83 c4 10             	add    esp,0x10
c0017f7f:	ba 20 08 02 c0       	mov    edx,0xc0020820
c0017f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f88:	89 10                	mov    DWORD PTR [eax],edx
c0017f8a:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0017f94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f9c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0017fa1:	7f 15                	jg     c0017fb8 <FAT::FAT()+0x4c>
c0017fa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fa7:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c0017fb2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fb6:	eb e4                	jmp    c0017f9c <FAT::FAT()+0x30>
c0017fb8:	90                   	nop
c0017fb9:	83 c4 1c             	add    esp,0x1c
c0017fbc:	c3                   	ret    
c0017fbd:	90                   	nop
c0017fbe:	66 90                	xchg   ax,ax

c0017fc0 <FAT::fixFilepath(char*)>:
c0017fc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc4:	8a 00                	mov    al,BYTE PTR [eax]
c0017fc6:	3c 40                	cmp    al,0x40
c0017fc8:	7e 2e                	jle    c0017ff8 <FAT::fixFilepath(char*)+0x38>
c0017fca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fce:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd0:	83 e8 41             	sub    eax,0x41
c0017fd3:	88 c2                	mov    dl,al
c0017fd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fd9:	88 10                	mov    BYTE PTR [eax],dl
c0017fdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fdf:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe1:	0f be c0             	movsx  eax,al
c0017fe4:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017feb:	83 c0 30             	add    eax,0x30
c0017fee:	88 c2                	mov    dl,al
c0017ff0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ff4:	88 10                	mov    BYTE PTR [eax],dl
c0017ff6:	66 90                	xchg   ax,ax
c0017ff8:	90                   	nop
c0017ff9:	c3                   	ret    
c0017ffa:	66 90                	xchg   ax,ax

c0017ffc <FAT::open(char const*, void**, FileOpenMode)>:
c0017ffc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018002:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001800a:	74 0c                	je     c0018018 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001800c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018014:	75 0e                	jne    c0018024 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018016:	66 90                	xchg   ax,ax
c0018018:	b8 04 00 00 00       	mov    eax,0x4
c001801d:	e9 0a 01 00 00       	jmp    c001812c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0018022:	66 90                	xchg   ax,ax
c0018024:	83 ec 08             	sub    esp,0x8
c0018027:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001802e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018032:	50                   	push   eax
c0018033:	e8 c8 85 fe ff       	call   c0000600 <strcpy>
c0018038:	83 c4 10             	add    esp,0x10
c001803b:	83 ec 08             	sub    esp,0x8
c001803e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018042:	50                   	push   eax
c0018043:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001804a:	e8 71 ff ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c001804f:	83 c4 10             	add    esp,0x10
c0018052:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001805a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018061:	83 e0 01             	and    eax,0x1
c0018064:	74 0a                	je     c0018070 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018066:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001806e:	66 90                	xchg   ax,ax
c0018070:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018077:	83 e0 04             	and    eax,0x4
c001807a:	74 10                	je     c001808c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001807c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018084:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001808c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018093:	83 e0 02             	and    eax,0x2
c0018096:	74 08                	je     c00180a0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018098:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00180a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00180a7:	83 e0 08             	and    eax,0x8
c00180aa:	74 08                	je     c00180b4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00180ac:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00180b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00180bb:	83 e0 10             	and    eax,0x10
c00180be:	74 08                	je     c00180c8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00180c0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	68 28 02 00 00       	push   0x228
c00180d0:	e8 a0 f7 fe ff       	call   c0007875 <malloc>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	89 c2                	mov    edx,eax
c00180da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180e1:	89 10                	mov    DWORD PTR [eax],edx
c00180e3:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00180ea:	31 d2                	xor    edx,edx
c00180ec:	88 c2                	mov    dl,al
c00180ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00180f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f7:	83 ec 04             	sub    esp,0x4
c00180fa:	52                   	push   edx
c00180fb:	8d 54 24 10          	lea    edx,[esp+0x10]
c00180ff:	52                   	push   edx
c0018100:	50                   	push   eax
c0018101:	e8 17 ba fe ff       	call   c0003b1d <f_open>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018110:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018118:	74 0a                	je     c0018124 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001811a:	b8 01 00 00 00       	mov    eax,0x1
c001811f:	eb 0b                	jmp    c001812c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0018121:	8d 76 00             	lea    esi,[esi+0x0]
c0018124:	b8 00 00 00 00       	mov    eax,0x0
c0018129:	8d 76 00             	lea    esi,[esi+0x0]
c001812c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018132:	c3                   	ret    
c0018133:	90                   	nop

c0018134 <FAT::openDir(char const*, void**)>:
c0018134:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001813a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018142:	74 0c                	je     c0018150 <FAT::openDir(char const*, void**)+0x1c>
c0018144:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001814c:	75 0e                	jne    c001815c <FAT::openDir(char const*, void**)+0x28>
c001814e:	66 90                	xchg   ax,ax
c0018150:	b8 04 00 00 00       	mov    eax,0x4
c0018155:	e9 82 00 00 00       	jmp    c00181dc <FAT::openDir(char const*, void**)+0xa8>
c001815a:	66 90                	xchg   ax,ax
c001815c:	83 ec 08             	sub    esp,0x8
c001815f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018166:	8d 44 24 18          	lea    eax,[esp+0x18]
c001816a:	50                   	push   eax
c001816b:	e8 90 84 fe ff       	call   c0000600 <strcpy>
c0018170:	83 c4 10             	add    esp,0x10
c0018173:	83 ec 08             	sub    esp,0x8
c0018176:	8d 44 24 14          	lea    eax,[esp+0x14]
c001817a:	50                   	push   eax
c001817b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018182:	e8 39 fe ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	83 ec 0c             	sub    esp,0xc
c001818d:	6a 30                	push   0x30
c001818f:	e8 e1 f6 fe ff       	call   c0007875 <malloc>
c0018194:	83 c4 10             	add    esp,0x10
c0018197:	89 c2                	mov    edx,eax
c0018199:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00181a0:	89 10                	mov    DWORD PTR [eax],edx
c00181a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00181a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00181ab:	83 ec 08             	sub    esp,0x8
c00181ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00181b2:	52                   	push   edx
c00181b3:	50                   	push   eax
c00181b4:	e8 ed c2 fe ff       	call   c00044a6 <f_opendir>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00181c3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00181cb:	74 07                	je     c00181d4 <FAT::openDir(char const*, void**)+0xa0>
c00181cd:	b8 01 00 00 00       	mov    eax,0x1
c00181d2:	eb 08                	jmp    c00181dc <FAT::openDir(char const*, void**)+0xa8>
c00181d4:	b8 00 00 00 00       	mov    eax,0x0
c00181d9:	8d 76 00             	lea    esi,[esi+0x0]
c00181dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00181e2:	c3                   	ret    
c00181e3:	90                   	nop

c00181e4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00181e4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00181ea:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00181f2:	75 0c                	jne    c0018200 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00181f4:	b8 04 00 00 00       	mov    eax,0x4
c00181f9:	e9 d6 00 00 00       	jmp    c00182d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00181fe:	66 90                	xchg   ax,ax
c0018200:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018208:	75 0a                	jne    c0018214 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001820a:	b8 04 00 00 00       	mov    eax,0x4
c001820f:	e9 c0 00 00 00       	jmp    c00182d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018214:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001821c:	75 0a                	jne    c0018228 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001821e:	b8 04 00 00 00       	mov    eax,0x4
c0018223:	e9 ac 00 00 00       	jmp    c00182d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018228:	83 ec 08             	sub    esp,0x8
c001822b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018232:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018239:	50                   	push   eax
c001823a:	e8 c1 83 fe ff       	call   c0000600 <strcpy>
c001823f:	83 c4 10             	add    esp,0x10
c0018242:	83 ec 08             	sub    esp,0x8
c0018245:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001824c:	50                   	push   eax
c001824d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018254:	e8 67 fd ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c0018259:	83 c4 10             	add    esp,0x10
c001825c:	83 ec 08             	sub    esp,0x8
c001825f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018263:	50                   	push   eax
c0018264:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001826b:	50                   	push   eax
c001826c:	e8 b4 c3 fe ff       	call   c0004625 <f_stat>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001827b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018282:	85 c0                	test   eax,eax
c0018284:	74 0a                	je     c0018290 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018286:	83 f8 04             	cmp    eax,0x4
c0018289:	74 39                	je     c00182c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001828b:	eb 3f                	jmp    c00182cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001828d:	8d 76 00             	lea    esi,[esi+0x0]
c0018290:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018294:	25 ff 00 00 00       	and    eax,0xff
c0018299:	83 e0 10             	and    eax,0x10
c001829c:	0f 95 c2             	setne  dl
c001829f:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00182a6:	88 10                	mov    BYTE PTR [eax],dl
c00182a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182ac:	ba 00 00 00 00       	mov    edx,0x0
c00182b1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00182b8:	89 01                	mov    DWORD PTR [ecx],eax
c00182ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00182bd:	b8 00 00 00 00       	mov    eax,0x0
c00182c2:	eb 10                	jmp    c00182d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182c4:	b8 02 00 00 00       	mov    eax,0x2
c00182c9:	eb 09                	jmp    c00182d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00182cb:	90                   	nop
c00182cc:	b8 01 00 00 00       	mov    eax,0x1
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00182da:	c3                   	ret    
c00182db:	90                   	nop

c00182dc <FAT::unlink(char const*)>:
c00182dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00182e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00182ea:	75 08                	jne    c00182f4 <FAT::unlink(char const*)+0x18>
c00182ec:	b8 04 00 00 00       	mov    eax,0x4
c00182f1:	eb 61                	jmp    c0018354 <FAT::unlink(char const*)+0x78>
c00182f3:	90                   	nop
c00182f4:	83 ec 08             	sub    esp,0x8
c00182f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018302:	50                   	push   eax
c0018303:	e8 f8 82 fe ff       	call   c0000600 <strcpy>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	83 ec 08             	sub    esp,0x8
c001830e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018312:	50                   	push   eax
c0018313:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001831a:	e8 a1 fc ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018329:	50                   	push   eax
c001832a:	e8 5b c5 fe ff       	call   c000488a <f_unlink>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018339:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018340:	85 c0                	test   eax,eax
c0018342:	75 08                	jne    c001834c <FAT::unlink(char const*)+0x70>
c0018344:	b8 00 00 00 00       	mov    eax,0x0
c0018349:	eb 09                	jmp    c0018354 <FAT::unlink(char const*)+0x78>
c001834b:	90                   	nop
c001834c:	b8 01 00 00 00       	mov    eax,0x1
c0018351:	8d 76 00             	lea    esi,[esi+0x0]
c0018354:	81 c4 1c 01 00 00    	add    esp,0x11c
c001835a:	c3                   	ret    
c001835b:	90                   	nop

c001835c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001835c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018362:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018369:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018370:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018374:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018378:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018380:	75 0a                	jne    c001838c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018382:	b8 04 00 00 00       	mov    eax,0x4
c0018387:	e9 54 01 00 00       	jmp    c00184e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001838c:	83 ec 08             	sub    esp,0x8
c001838f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018396:	8d 44 24 24          	lea    eax,[esp+0x24]
c001839a:	50                   	push   eax
c001839b:	e8 60 82 fe ff       	call   c0000600 <strcpy>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	83 ec 08             	sub    esp,0x8
c00183a6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00183aa:	50                   	push   eax
c00183ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00183b2:	e8 09 fc ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c00183b7:	83 c4 10             	add    esp,0x10
c00183ba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00183c2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00183ca:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183ce:	25 ff 00 00 00       	and    eax,0xff
c00183d3:	83 e0 01             	and    eax,0x1
c00183d6:	74 08                	je     c00183e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00183d8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00183e0:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183e4:	25 ff 00 00 00       	and    eax,0xff
c00183e9:	83 e0 02             	and    eax,0x2
c00183ec:	74 0a                	je     c00183f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00183ee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00183f6:	66 90                	xchg   ax,ax
c00183f8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00183fc:	25 ff 00 00 00       	and    eax,0xff
c0018401:	83 e0 04             	and    eax,0x4
c0018404:	74 0a                	je     c0018410 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0018406:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001840e:	66 90                	xchg   ax,ax
c0018410:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018414:	25 ff 00 00 00       	and    eax,0xff
c0018419:	83 e0 08             	and    eax,0x8
c001841c:	74 0a                	je     c0018428 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001841e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018426:	66 90                	xchg   ax,ax
c0018428:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001842c:	25 ff 00 00 00       	and    eax,0xff
c0018431:	83 e0 01             	and    eax,0x1
c0018434:	74 0a                	je     c0018440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018436:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001843e:	66 90                	xchg   ax,ax
c0018440:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018444:	25 ff 00 00 00       	and    eax,0xff
c0018449:	83 e0 02             	and    eax,0x2
c001844c:	74 0a                	je     c0018458 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001844e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0018456:	66 90                	xchg   ax,ax
c0018458:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001845c:	25 ff 00 00 00       	and    eax,0xff
c0018461:	83 e0 04             	and    eax,0x4
c0018464:	74 0a                	je     c0018470 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0018466:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001846e:	66 90                	xchg   ax,ax
c0018470:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018474:	25 ff 00 00 00       	and    eax,0xff
c0018479:	83 e0 08             	and    eax,0x8
c001847c:	74 0a                	je     c0018488 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001847e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018486:	66 90                	xchg   ax,ax
c0018488:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001848f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018496:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001849d:	31 d2                	xor    edx,edx
c001849f:	88 c2                	mov    dl,al
c00184a1:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00184a8:	25 ff 00 00 00       	and    eax,0xff
c00184ad:	83 ec 04             	sub    esp,0x4
c00184b0:	52                   	push   edx
c00184b1:	50                   	push   eax
c00184b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00184b6:	50                   	push   eax
c00184b7:	e8 41 c8 fe ff       	call   c0004cfd <f_chmod>
c00184bc:	83 c4 10             	add    esp,0x10
c00184bf:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00184c6:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00184cd:	85 c0                	test   eax,eax
c00184cf:	75 07                	jne    c00184d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00184d1:	b8 00 00 00 00       	mov    eax,0x0
c00184d6:	eb 08                	jmp    c00184e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00184d8:	b8 01 00 00 00       	mov    eax,0x1
c00184dd:	8d 76 00             	lea    esi,[esi+0x0]
c00184e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00184e6:	c3                   	ret    
c00184e7:	90                   	nop

c00184e8 <FAT::rename(char const*, char const*)>:
c00184e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00184ee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00184f6:	74 0c                	je     c0018504 <FAT::rename(char const*, char const*)+0x1c>
c00184f8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018500:	75 0e                	jne    c0018510 <FAT::rename(char const*, char const*)+0x28>
c0018502:	66 90                	xchg   ax,ax
c0018504:	b8 04 00 00 00       	mov    eax,0x4
c0018509:	e9 9e 00 00 00       	jmp    c00185ac <FAT::rename(char const*, char const*)+0xc4>
c001850e:	66 90                	xchg   ax,ax
c0018510:	83 ec 08             	sub    esp,0x8
c0018513:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001851a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018521:	50                   	push   eax
c0018522:	e8 d9 80 fe ff       	call   c0000600 <strcpy>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	83 ec 08             	sub    esp,0x8
c001852d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018534:	50                   	push   eax
c0018535:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001853c:	e8 7f fa ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	83 ec 08             	sub    esp,0x8
c0018547:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001854e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018552:	50                   	push   eax
c0018553:	e8 a8 80 fe ff       	call   c0000600 <strcpy>
c0018558:	83 c4 10             	add    esp,0x10
c001855b:	83 ec 08             	sub    esp,0x8
c001855e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018562:	50                   	push   eax
c0018563:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001856a:	e8 51 fa ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c001856f:	83 c4 10             	add    esp,0x10
c0018572:	83 ec 08             	sub    esp,0x8
c0018575:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018579:	50                   	push   eax
c001857a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018581:	50                   	push   eax
c0018582:	e8 c0 c5 fe ff       	call   c0004b47 <f_rename>
c0018587:	83 c4 10             	add    esp,0x10
c001858a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018591:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018598:	85 c0                	test   eax,eax
c001859a:	75 08                	jne    c00185a4 <FAT::rename(char const*, char const*)+0xbc>
c001859c:	b8 00 00 00 00       	mov    eax,0x0
c00185a1:	eb 09                	jmp    c00185ac <FAT::rename(char const*, char const*)+0xc4>
c00185a3:	90                   	nop
c00185a4:	b8 01 00 00 00       	mov    eax,0x1
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	81 c4 1c 02 00 00    	add    esp,0x21c
c00185b2:	c3                   	ret    
c00185b3:	90                   	nop

c00185b4 <FAT::mkdir(char const*)>:
c00185b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00185ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00185c2:	75 08                	jne    c00185cc <FAT::mkdir(char const*)+0x18>
c00185c4:	b8 04 00 00 00       	mov    eax,0x4
c00185c9:	eb 61                	jmp    c001862c <FAT::mkdir(char const*)+0x78>
c00185cb:	90                   	nop
c00185cc:	83 ec 08             	sub    esp,0x8
c00185cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00185da:	50                   	push   eax
c00185db:	e8 20 80 fe ff       	call   c0000600 <strcpy>
c00185e0:	83 c4 10             	add    esp,0x10
c00185e3:	83 ec 08             	sub    esp,0x8
c00185e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185ea:	50                   	push   eax
c00185eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185f2:	e8 c9 f9 ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c00185f7:	83 c4 10             	add    esp,0x10
c00185fa:	83 ec 0c             	sub    esp,0xc
c00185fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018601:	50                   	push   eax
c0018602:	e8 a5 c3 fe ff       	call   c00049ac <f_mkdir>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018611:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018618:	85 c0                	test   eax,eax
c001861a:	75 08                	jne    c0018624 <FAT::mkdir(char const*)+0x70>
c001861c:	b8 00 00 00 00       	mov    eax,0x0
c0018621:	eb 09                	jmp    c001862c <FAT::mkdir(char const*)+0x78>
c0018623:	90                   	nop
c0018624:	b8 01 00 00 00       	mov    eax,0x1
c0018629:	8d 76 00             	lea    esi,[esi+0x0]
c001862c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018632:	c3                   	ret    
c0018633:	90                   	nop

c0018634 <FAT::exists(char const*)>:
c0018634:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001863a:	83 ec 08             	sub    esp,0x8
c001863d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018644:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018648:	50                   	push   eax
c0018649:	e8 b2 7f fe ff       	call   c0000600 <strcpy>
c001864e:	83 c4 10             	add    esp,0x10
c0018651:	83 ec 08             	sub    esp,0x8
c0018654:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018658:	50                   	push   eax
c0018659:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018660:	e8 5b f9 ff ff       	call   c0017fc0 <FAT::fixFilepath(char*)>
c0018665:	83 c4 10             	add    esp,0x10
c0018668:	83 ec 08             	sub    esp,0x8
c001866b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018672:	50                   	push   eax
c0018673:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018677:	50                   	push   eax
c0018678:	e8 a8 bf fe ff       	call   c0004625 <f_stat>
c001867d:	83 c4 10             	add    esp,0x10
c0018680:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018687:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001868e:	85 c0                	test   eax,eax
c0018690:	75 06                	jne    c0018698 <FAT::exists(char const*)+0x64>
c0018692:	b0 01                	mov    al,0x1
c0018694:	eb 06                	jmp    c001869c <FAT::exists(char const*)+0x68>
c0018696:	66 90                	xchg   ax,ax
c0018698:	b0 00                	mov    al,0x0
c001869a:	66 90                	xchg   ax,ax
c001869c:	81 c4 2c 02 00 00    	add    esp,0x22c
c00186a2:	c3                   	ret    
c00186a3:	90                   	nop

c00186a4 <isoReadDiscSectorHelper>:
c00186a4:	83 ec 2c             	sub    esp,0x2c
c00186a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00186ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00186af:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00186b4:	83 e8 41             	sub    eax,0x41
c00186b7:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00186be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00186c2:	ba 00 00 00 00       	mov    edx,0x0
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00186ce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00186d2:	52                   	push   edx
c00186d3:	50                   	push   eax
c00186d4:	51                   	push   ecx
c00186d5:	e8 50 46 ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c00186da:	83 c4 20             	add    esp,0x20
c00186dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186e1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00186e6:	74 0c                	je     c00186f4 <isoReadDiscSectorHelper+0x50>
c00186e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00186ec:	c1 e0 0b             	shl    eax,0xb
c00186ef:	eb 0b                	jmp    c00186fc <isoReadDiscSectorHelper+0x58>
c00186f1:	8d 76 00             	lea    esi,[esi+0x0]
c00186f4:	b8 00 00 00 00       	mov    eax,0x0
c00186f9:	8d 76 00             	lea    esi,[esi+0x0]
c00186fc:	83 c4 2c             	add    esp,0x2c
c00186ff:	c3                   	ret    

c0018700 <iso_kprintf>:
c0018700:	83 ec 0c             	sub    esp,0xc
c0018703:	83 ec 08             	sub    esp,0x8
c0018706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001870a:	68 2a 02 02 c0       	push   0xc002022a
c001870f:	e8 f6 1e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018714:	83 c4 10             	add    esp,0x10
c0018717:	90                   	nop
c0018718:	83 c4 0c             	add    esp,0xc
c001871b:	c3                   	ret    

c001871c <iso_kprintfd>:
c001871c:	83 ec 0c             	sub    esp,0xc
c001871f:	83 ec 08             	sub    esp,0x8
c0018722:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018726:	68 bb f2 01 c0       	push   0xc001f2bb
c001872b:	e8 da 1e ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018730:	83 c4 10             	add    esp,0x10
c0018733:	90                   	nop
c0018734:	83 c4 0c             	add    esp,0xc
c0018737:	c3                   	ret    

c0018738 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018738:	b8 08 00 00 00       	mov    eax,0x8
c001873d:	c3                   	ret    

c001873e <ISO9660::getName()>:
c001873e:	b8 80 08 02 c0       	mov    eax,0xc0020880
c0018743:	c3                   	ret    

c0018744 <ISO9660::closeDir(void*)>:
c0018744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018748:	8b 00                	mov    eax,DWORD PTR [eax]
c001874a:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001874d:	90                   	nop

c001874e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001874e:	b8 01 00 00 00       	mov    eax,0x1
c0018753:	c3                   	ret    

c0018754 <ISO9660::unlink(char const*)>:
c0018754:	b8 01 00 00 00       	mov    eax,0x1
c0018759:	c3                   	ret    

c001875a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001875a:	b8 03 00 00 00       	mov    eax,0x3
c001875f:	c3                   	ret    

c0018760 <ISO9660::rename(char const*, char const*)>:
c0018760:	b8 01 00 00 00       	mov    eax,0x1
c0018765:	c3                   	ret    

c0018766 <ISO9660::mkdir(char const*)>:
c0018766:	b8 01 00 00 00       	mov    eax,0x1
c001876b:	c3                   	ret    

c001876c <ISO9660::~ISO9660()>:
c001876c:	83 ec 0c             	sub    esp,0xc
c001876f:	ba c0 09 02 c0       	mov    edx,0xc00209c0
c0018774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018778:	89 10                	mov    DWORD PTR [eax],edx
c001877a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001877e:	83 ec 0c             	sub    esp,0xc
c0018781:	50                   	push   eax
c0018782:	e8 c9 21 ff ff       	call   c000a950 <Filesystem::~Filesystem()>
c0018787:	83 c4 10             	add    esp,0x10
c001878a:	90                   	nop
c001878b:	83 c4 0c             	add    esp,0xc
c001878e:	c3                   	ret    
c001878f:	90                   	nop

c0018790 <ISO9660::~ISO9660()>:
c0018790:	83 ec 0c             	sub    esp,0xc
c0018793:	83 ec 0c             	sub    esp,0xc
c0018796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001879a:	e8 cd ff ff ff       	call   c001876c <ISO9660::~ISO9660()>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	83 ec 08             	sub    esp,0x8
c00187a5:	6a 08                	push   0x8
c00187a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187ab:	e8 64 1d ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 c4 0c             	add    esp,0xc
c00187b6:	c3                   	ret    
c00187b7:	90                   	nop

c00187b8 <ISO9660::exists(char const*)>:
c00187b8:	83 ec 18             	sub    esp,0x18
c00187bb:	68 9b 08 02 c0       	push   0xc002089b
c00187c0:	e8 46 7b ff ff       	call   c001030b <KePanic(char const*)>
c00187c5:	31 c0                	xor    eax,eax
c00187c7:	83 c4 1c             	add    esp,0x1c
c00187ca:	c3                   	ret    
c00187cb:	90                   	nop

c00187cc <ISO9660::open(char const*, void**, FileOpenMode)>:
c00187cc:	56                   	push   esi
c00187cd:	53                   	push   ebx
c00187ce:	53                   	push   ebx
c00187cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00187d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00187d7:	85 db                	test   ebx,ebx
c00187d9:	0f 84 c2 00 00 00    	je     c00188a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00187df:	85 f6                	test   esi,esi
c00187e1:	0f 84 ba 00 00 00    	je     c00188a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00187e7:	b8 03 00 00 00       	mov    eax,0x3
c00187ec:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00187f1:	0f 85 af 00 00 00    	jne    c00188a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00187f7:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00187fc:	38 03                	cmp    BYTE PTR [ebx],al
c00187fe:	74 1b                	je     c001881b <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018800:	84 c0                	test   al,al
c0018802:	74 10                	je     c0018814 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	68 b9 08 02 c0       	push   0xc00208b9
c001880c:	e8 fa 7a ff ff       	call   c001030b <KePanic(char const*)>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	8a 03                	mov    al,BYTE PTR [ebx]
c0018816:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c001881b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001881e:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018825:	85 c0                	test   eax,eax
c0018827:	74 09                	je     c0018832 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018829:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018830:	74 48                	je     c001887a <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018832:	83 ec 0c             	sub    esp,0xc
c0018835:	68 c9 08 02 c0       	push   0xc00208c9
c001883a:	e8 cb 1d ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001883f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c001884c:	85 c0                	test   eax,eax
c001884e:	74 17                	je     c0018867 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018850:	83 ec 0c             	sub    esp,0xc
c0018853:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001885a:	68 e9 08 02 c0       	push   0xc00208e9
c001885f:	e8 a6 1d ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018864:	83 c4 10             	add    esp,0x10
c0018867:	83 ec 0c             	sub    esp,0xc
c001886a:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018871:	50                   	push   eax
c0018872:	e8 e4 df fe ff       	call   c000685b <init_percd>
c0018877:	83 c4 10             	add    esp,0x10
c001887a:	83 c3 03             	add    ebx,0x3
c001887d:	51                   	push   ecx
c001887e:	51                   	push   ecx
c001887f:	6a 00                	push   0x0
c0018881:	53                   	push   ebx
c0018882:	e8 9c da fe ff       	call   c0006323 <iso_open>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	89 c2                	mov    edx,eax
c001888c:	b8 01 00 00 00       	mov    eax,0x1
c0018891:	83 fa ff             	cmp    edx,0xffffffff
c0018894:	74 10                	je     c00188a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018896:	83 c2 32             	add    edx,0x32
c0018899:	31 c0                	xor    eax,eax
c001889b:	01 d2                	add    edx,edx
c001889d:	89 16                	mov    DWORD PTR [esi],edx
c001889f:	eb 05                	jmp    c00188a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00188a1:	b8 04 00 00 00       	mov    eax,0x4
c00188a6:	5a                   	pop    edx
c00188a7:	5b                   	pop    ebx
c00188a8:	5e                   	pop    esi
c00188a9:	c3                   	ret    

c00188aa <ISO9660::read(void*, unsigned long, void*, int*)>:
c00188aa:	53                   	push   ebx
c00188ab:	83 ec 08             	sub    esp,0x8
c00188ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00188b6:	85 c0                	test   eax,eax
c00188b8:	74 2d                	je     c00188e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00188ba:	85 db                	test   ebx,ebx
c00188bc:	74 29                	je     c00188e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c00188be:	b9 02 00 00 00       	mov    ecx,0x2
c00188c3:	52                   	push   edx
c00188c4:	99                   	cdq    
c00188c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00188c9:	f7 f9                	idiv   ecx
c00188cb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00188cf:	83 e8 32             	sub    eax,0x32
c00188d2:	50                   	push   eax
c00188d3:	e8 f3 da fe ff       	call   c00063cb <iso_read>
c00188d8:	83 c4 10             	add    esp,0x10
c00188db:	89 03                	mov    DWORD PTR [ebx],eax
c00188dd:	09 d0                	or     eax,edx
c00188df:	0f 94 c0             	sete   al
c00188e2:	0f b6 c0             	movzx  eax,al
c00188e5:	eb 05                	jmp    c00188ec <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00188e7:	b8 04 00 00 00       	mov    eax,0x4
c00188ec:	83 c4 08             	add    esp,0x8
c00188ef:	5b                   	pop    ebx
c00188f0:	c3                   	ret    
c00188f1:	90                   	nop

c00188f2 <ISO9660::seek(void*, unsigned long long)>:
c00188f2:	57                   	push   edi
c00188f3:	56                   	push   esi
c00188f4:	b8 04 00 00 00       	mov    eax,0x4
c00188f9:	51                   	push   ecx
c00188fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018902:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018906:	85 d2                	test   edx,edx
c0018908:	74 26                	je     c0018930 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001890a:	6a 00                	push   0x0
c001890c:	b9 02 00 00 00       	mov    ecx,0x2
c0018911:	57                   	push   edi
c0018912:	89 d0                	mov    eax,edx
c0018914:	56                   	push   esi
c0018915:	99                   	cdq    
c0018916:	f7 f9                	idiv   ecx
c0018918:	83 e8 32             	sub    eax,0x32
c001891b:	50                   	push   eax
c001891c:	e8 c0 db fe ff       	call   c00064e1 <iso_seek>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	31 f0                	xor    eax,esi
c0018926:	31 fa                	xor    edx,edi
c0018928:	09 d0                	or     eax,edx
c001892a:	0f 95 c0             	setne  al
c001892d:	0f b6 c0             	movzx  eax,al
c0018930:	5a                   	pop    edx
c0018931:	5e                   	pop    esi
c0018932:	5f                   	pop    edi
c0018933:	c3                   	ret    

c0018934 <ISO9660::tell(void*, unsigned long long*)>:
c0018934:	53                   	push   ebx
c0018935:	83 ec 08             	sub    esp,0x8
c0018938:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001893c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018940:	85 c0                	test   eax,eax
c0018942:	74 24                	je     c0018968 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018944:	85 db                	test   ebx,ebx
c0018946:	74 20                	je     c0018968 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	b9 02 00 00 00       	mov    ecx,0x2
c0018950:	99                   	cdq    
c0018951:	f7 f9                	idiv   ecx
c0018953:	83 e8 32             	sub    eax,0x32
c0018956:	50                   	push   eax
c0018957:	e8 09 dc fe ff       	call   c0006565 <iso_tell>
c001895c:	83 c4 10             	add    esp,0x10
c001895f:	89 03                	mov    DWORD PTR [ebx],eax
c0018961:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018964:	31 c0                	xor    eax,eax
c0018966:	eb 05                	jmp    c001896d <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018968:	b8 04 00 00 00       	mov    eax,0x4
c001896d:	83 c4 08             	add    esp,0x8
c0018970:	5b                   	pop    ebx
c0018971:	c3                   	ret    

c0018972 <ISO9660::stat(void*, unsigned long long*)>:
c0018972:	53                   	push   ebx
c0018973:	83 ec 14             	sub    esp,0x14
c0018976:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001897a:	68 0d 09 02 c0       	push   0xc002090d
c001897f:	e8 86 1c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001898c:	74 2c                	je     c00189ba <ISO9660::stat(void*, unsigned long long*)+0x48>
c001898e:	85 db                	test   ebx,ebx
c0018990:	74 28                	je     c00189ba <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018992:	83 ec 0c             	sub    esp,0xc
c0018995:	b9 02 00 00 00       	mov    ecx,0x2
c001899a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001899e:	99                   	cdq    
c001899f:	f7 f9                	idiv   ecx
c00189a1:	83 e8 32             	sub    eax,0x32
c00189a4:	50                   	push   eax
c00189a5:	e8 ec db fe ff       	call   c0006596 <iso_total>
c00189aa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00189b1:	89 03                	mov    DWORD PTR [ebx],eax
c00189b3:	83 c4 10             	add    esp,0x10
c00189b6:	31 c0                	xor    eax,eax
c00189b8:	eb 05                	jmp    c00189bf <ISO9660::stat(void*, unsigned long long*)+0x4d>
c00189ba:	b8 04 00 00 00       	mov    eax,0x4
c00189bf:	83 c4 08             	add    esp,0x8
c00189c2:	5b                   	pop    ebx
c00189c3:	c3                   	ret    

c00189c4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00189c4:	55                   	push   ebp
c00189c5:	57                   	push   edi
c00189c6:	56                   	push   esi
c00189c7:	53                   	push   ebx
c00189c8:	83 ec 18             	sub    esp,0x18
c00189cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00189cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00189d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00189d7:	68 15 09 02 c0       	push   0xc0020915
c00189dc:	e8 29 1c ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	85 ff                	test   edi,edi
c00189e6:	0f 94 c2             	sete   dl
c00189e9:	85 f6                	test   esi,esi
c00189eb:	0f 94 c0             	sete   al
c00189ee:	08 c2                	or     dl,al
c00189f0:	0f 85 d5 00 00 00    	jne    c0018acb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00189f6:	85 db                	test   ebx,ebx
c00189f8:	0f 84 cd 00 00 00    	je     c0018acb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00189fe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018a01:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018a07:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018a0e:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018a13:	38 03                	cmp    BYTE PTR [ebx],al
c0018a15:	74 1b                	je     c0018a32 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018a17:	84 c0                	test   al,al
c0018a19:	74 10                	je     c0018a2b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018a1b:	83 ec 0c             	sub    esp,0xc
c0018a1e:	68 b9 08 02 c0       	push   0xc00208b9
c0018a23:	e8 e3 78 ff ff       	call   c001030b <KePanic(char const*)>
c0018a28:	83 c4 10             	add    esp,0x10
c0018a2b:	8a 03                	mov    al,BYTE PTR [ebx]
c0018a2d:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018a32:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a35:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018a3c:	85 c0                	test   eax,eax
c0018a3e:	74 09                	je     c0018a49 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018a40:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018a47:	74 51                	je     c0018a9a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018a49:	83 ec 0c             	sub    esp,0xc
c0018a4c:	68 1d 09 02 c0       	push   0xc002091d
c0018a51:	e8 b4 1b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018a56:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a59:	83 c4 10             	add    esp,0x10
c0018a5c:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018a64:	74 21                	je     c0018a87 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018a66:	83 ec 0c             	sub    esp,0xc
c0018a69:	68 3d 09 02 c0       	push   0xc002093d
c0018a6e:	e8 97 1b ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018a73:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018a76:	83 c4 10             	add    esp,0x10
c0018a79:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018a80:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018a87:	83 ec 0c             	sub    esp,0xc
c0018a8a:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018a91:	50                   	push   eax
c0018a92:	e8 c4 dd fe ff       	call   c000685b <init_percd>
c0018a97:	83 c4 10             	add    esp,0x10
c0018a9a:	83 c3 03             	add    ebx,0x3
c0018a9d:	52                   	push   edx
c0018a9e:	52                   	push   edx
c0018a9f:	6a 00                	push   0x0
c0018aa1:	53                   	push   ebx
c0018aa2:	e8 7c d8 fe ff       	call   c0006323 <iso_open>
c0018aa7:	83 c4 10             	add    esp,0x10
c0018aaa:	89 c5                	mov    ebp,eax
c0018aac:	83 f8 ff             	cmp    eax,0xffffffff
c0018aaf:	75 21                	jne    c0018ad2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018ab1:	50                   	push   eax
c0018ab2:	50                   	push   eax
c0018ab3:	6a 01                	push   0x1
c0018ab5:	53                   	push   ebx
c0018ab6:	e8 68 d8 fe ff       	call   c0006323 <iso_open>
c0018abb:	83 c4 10             	add    esp,0x10
c0018abe:	ba 02 00 00 00       	mov    edx,0x2
c0018ac3:	40                   	inc    eax
c0018ac4:	74 2b                	je     c0018af1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018ac6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018ac9:	eb 24                	jmp    c0018aef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018acb:	ba 04 00 00 00       	mov    edx,0x4
c0018ad0:	eb 1f                	jmp    c0018af1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018ad2:	83 ec 0c             	sub    esp,0xc
c0018ad5:	50                   	push   eax
c0018ad6:	e8 bb da fe ff       	call   c0006596 <iso_total>
c0018adb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018ae2:	89 07                	mov    DWORD PTR [edi],eax
c0018ae4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018ae7:	e8 c1 d8 fe ff       	call   c00063ad <iso_close>
c0018aec:	83 c4 10             	add    esp,0x10
c0018aef:	31 d2                	xor    edx,edx
c0018af1:	83 c4 0c             	add    esp,0xc
c0018af4:	89 d0                	mov    eax,edx
c0018af6:	5b                   	pop    ebx
c0018af7:	5e                   	pop    esi
c0018af8:	5f                   	pop    edi
c0018af9:	5d                   	pop    ebp
c0018afa:	c3                   	ret    
c0018afb:	90                   	nop

c0018afc <ISO9660::close(void*)>:
c0018afc:	83 ec 0c             	sub    esp,0xc
c0018aff:	b8 04 00 00 00       	mov    eax,0x4
c0018b04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b08:	85 d2                	test   edx,edx
c0018b0a:	74 1b                	je     c0018b27 <ISO9660::close(void*)+0x2b>
c0018b0c:	83 ec 0c             	sub    esp,0xc
c0018b0f:	b9 02 00 00 00       	mov    ecx,0x2
c0018b14:	89 d0                	mov    eax,edx
c0018b16:	99                   	cdq    
c0018b17:	f7 f9                	idiv   ecx
c0018b19:	83 e8 32             	sub    eax,0x32
c0018b1c:	50                   	push   eax
c0018b1d:	e8 8b d8 fe ff       	call   c00063ad <iso_close>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	31 c0                	xor    eax,eax
c0018b27:	83 c4 0c             	add    esp,0xc
c0018b2a:	c3                   	ret    
c0018b2b:	90                   	nop

c0018b2c <ISO9660::openDir(char const*, void**)>:
c0018b2c:	56                   	push   esi
c0018b2d:	53                   	push   ebx
c0018b2e:	50                   	push   eax
c0018b2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b33:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b37:	85 db                	test   ebx,ebx
c0018b39:	0f 84 b5 00 00 00    	je     c0018bf4 <ISO9660::openDir(char const*, void**)+0xc8>
c0018b3f:	85 f6                	test   esi,esi
c0018b41:	0f 84 ad 00 00 00    	je     c0018bf4 <ISO9660::openDir(char const*, void**)+0xc8>
c0018b47:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018b4c:	38 03                	cmp    BYTE PTR [ebx],al
c0018b4e:	74 1b                	je     c0018b6b <ISO9660::openDir(char const*, void**)+0x3f>
c0018b50:	84 c0                	test   al,al
c0018b52:	74 10                	je     c0018b64 <ISO9660::openDir(char const*, void**)+0x38>
c0018b54:	83 ec 0c             	sub    esp,0xc
c0018b57:	68 b9 08 02 c0       	push   0xc00208b9
c0018b5c:	e8 aa 77 ff ff       	call   c001030b <KePanic(char const*)>
c0018b61:	83 c4 10             	add    esp,0x10
c0018b64:	8a 03                	mov    al,BYTE PTR [ebx]
c0018b66:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018b6b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018b6e:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018b75:	85 c0                	test   eax,eax
c0018b77:	74 10                	je     c0018b89 <ISO9660::openDir(char const*, void**)+0x5d>
c0018b79:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018b80:	74 1a                	je     c0018b9c <ISO9660::openDir(char const*, void**)+0x70>
c0018b82:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018b89:	83 ec 0c             	sub    esp,0xc
c0018b8c:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018b93:	50                   	push   eax
c0018b94:	e8 c2 dc fe ff       	call   c000685b <init_percd>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	83 c3 03             	add    ebx,0x3
c0018b9f:	50                   	push   eax
c0018ba0:	50                   	push   eax
c0018ba1:	6a 01                	push   0x1
c0018ba3:	53                   	push   ebx
c0018ba4:	e8 7a d7 fe ff       	call   c0006323 <iso_open>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	89 c3                	mov    ebx,eax
c0018bae:	83 f8 ff             	cmp    eax,0xffffffff
c0018bb1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018bb6:	75 1c                	jne    c0018bd4 <ISO9660::openDir(char const*, void**)+0xa8>
c0018bb8:	53                   	push   ebx
c0018bb9:	53                   	push   ebx
c0018bba:	68 61 09 02 c0       	push   0xc0020961
c0018bbf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018bc5:	e8 22 fc fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	b8 01 00 00 00       	mov    eax,0x1
c0018bd2:	eb 25                	jmp    c0018bf9 <ISO9660::openDir(char const*, void**)+0xcd>
c0018bd4:	01 db                	add    ebx,ebx
c0018bd6:	51                   	push   ecx
c0018bd7:	83 c3 65             	add    ebx,0x65
c0018bda:	51                   	push   ecx
c0018bdb:	68 74 09 02 c0       	push   0xc0020974
c0018be0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018be6:	e8 01 fc fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018beb:	89 1e                	mov    DWORD PTR [esi],ebx
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	31 c0                	xor    eax,eax
c0018bf2:	eb 05                	jmp    c0018bf9 <ISO9660::openDir(char const*, void**)+0xcd>
c0018bf4:	b8 04 00 00 00       	mov    eax,0x4
c0018bf9:	5a                   	pop    edx
c0018bfa:	5b                   	pop    ebx
c0018bfb:	5e                   	pop    esi
c0018bfc:	c3                   	ret    
c0018bfd:	90                   	nop

c0018bfe <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018bfe:	55                   	push   ebp
c0018bff:	57                   	push   edi
c0018c00:	56                   	push   esi
c0018c01:	53                   	push   ebx
c0018c02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018c08:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0018c0f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018c16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018c1e:	0f 84 e7 00 00 00    	je     c0018d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018c24:	85 db                	test   ebx,ebx
c0018c26:	0f 84 df 00 00 00    	je     c0018d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	68 87 09 02 c0       	push   0xc0020987
c0018c34:	e8 d1 19 ff ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c0018c39:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018c40:	b9 02 00 00 00       	mov    ecx,0x2
c0018c45:	99                   	cdq    
c0018c46:	f7 f9                	idiv   ecx
c0018c48:	83 e8 32             	sub    eax,0x32
c0018c4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c4e:	e8 94 d9 fe ff       	call   c00065e7 <iso_readdir>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	89 c6                	mov    esi,eax
c0018c58:	85 c0                	test   eax,eax
c0018c5a:	75 37                	jne    c0018c93 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0018c5c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018c61:	56                   	push   esi
c0018c62:	56                   	push   esi
c0018c63:	68 92 09 02 c0       	push   0xc0020992
c0018c68:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018c6e:	e8 79 fb fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018c73:	83 c4 0c             	add    esp,0xc
c0018c76:	68 10 01 00 00       	push   0x110
c0018c7b:	6a 00                	push   0x0
c0018c7d:	57                   	push   edi
c0018c7e:	e8 4d 78 fe ff       	call   c00004d0 <memset>
c0018c83:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018c89:	83 c4 10             	add    esp,0x10
c0018c8c:	b8 01 00 00 00       	mov    eax,0x1
c0018c91:	eb 7d                	jmp    c0018d10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018c93:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0018c99:	8d 68 08             	lea    ebp,[eax+0x8]
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	55                   	push   ebp
c0018ca0:	e8 9b 78 fe ff       	call   c0000540 <strlen>
c0018ca5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018cad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0018cb8:	75 0a                	jne    c0018cc4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0018cba:	b8 02 00 00 00       	mov    eax,0x2
c0018cbf:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0018cc2:	74 05                	je     c0018cc9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0018cc4:	b8 01 00 00 00       	mov    eax,0x1
c0018cc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ccd:	50                   	push   eax
c0018cce:	50                   	push   eax
c0018ccf:	55                   	push   ebp
c0018cd0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018cd4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0018cd8:	50                   	push   eax
c0018cd9:	e8 22 79 fe ff       	call   c0000600 <strcpy>
c0018cde:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0018ce5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ce7:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0018ced:	5a                   	pop    edx
c0018cee:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018cf3:	59                   	pop    ecx
c0018cf4:	68 a5 09 02 c0       	push   0xc00209a5
c0018cf9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018cff:	e8 e8 fa fe ff       	call   c00087ec <VgaText::puts(char const*)>
c0018d04:	83 c4 10             	add    esp,0x10
c0018d07:	31 c0                	xor    eax,eax
c0018d09:	eb 05                	jmp    c0018d10 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018d0b:	b8 04 00 00 00       	mov    eax,0x4
c0018d10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d16:	5b                   	pop    ebx
c0018d17:	5e                   	pop    esi
c0018d18:	5f                   	pop    edi
c0018d19:	5d                   	pop    ebp
c0018d1a:	c3                   	ret    

c0018d1b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0018d1b:	57                   	push   edi
c0018d1c:	56                   	push   esi
c0018d1d:	53                   	push   ebx
c0018d1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018d22:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018d26:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018d2a:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c0018d30:	75 08                	jne    c0018d3a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0018d32:	38 1d e4 14 02 c0    	cmp    BYTE PTR ds:0xc00214e4,bl
c0018d38:	74 4a                	je     c0018d84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018d3a:	83 ec 0c             	sub    esp,0xc
c0018d3d:	31 d2                	xor    edx,edx
c0018d3f:	68 40 73 02 c0       	push   0xc0027340
c0018d44:	0f be c3             	movsx  eax,bl
c0018d47:	6a 01                	push   0x1
c0018d49:	52                   	push   edx
c0018d4a:	56                   	push   esi
c0018d4b:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c0018d52:	e8 d3 3f ff ff       	call   c000cd2a <LogicalDisk::read(unsigned long long, int, void*)>
c0018d57:	83 c4 20             	add    esp,0x20
c0018d5a:	85 c0                	test   eax,eax
c0018d5c:	75 0e                	jne    c0018d6c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0018d5e:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c0018d64:	88 1d e4 14 02 c0    	mov    BYTE PTR ds:0xc00214e4,bl
c0018d6a:	eb 18                	jmp    c0018d84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018d6c:	50                   	push   eax
c0018d6d:	68 00 08 00 00       	push   0x800
c0018d72:	6a 00                	push   0x0
c0018d74:	57                   	push   edi
c0018d75:	e8 56 77 fe ff       	call   c00004d0 <memset>
c0018d7a:	83 c4 10             	add    esp,0x10
c0018d7d:	b8 01 00 00 00       	mov    eax,0x1
c0018d82:	eb 0e                	jmp    c0018d92 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0018d84:	be 40 73 02 c0       	mov    esi,0xc0027340
c0018d89:	b9 00 08 00 00       	mov    ecx,0x800
c0018d8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d90:	31 c0                	xor    eax,eax
c0018d92:	5b                   	pop    ebx
c0018d93:	5e                   	pop    esi
c0018d94:	5f                   	pop    edi
c0018d95:	c3                   	ret    

c0018d96 <ISO9660::tryMount(LogicalDisk*, int)>:
c0018d96:	53                   	push   ebx
c0018d97:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0018d9d:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0018da7:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0018dae:	8d 58 41             	lea    ebx,[eax+0x41]
c0018db1:	0f be db             	movsx  ebx,bl
c0018db4:	53                   	push   ebx
c0018db5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018db9:	50                   	push   eax
c0018dba:	6a 10                	push   0x10
c0018dbc:	e8 5a ff ff ff       	call   c0018d1b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	31 d2                	xor    edx,edx
c0018dc6:	85 c0                	test   eax,eax
c0018dc8:	75 33                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dca:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0018dcf:	75 2c                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dd1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0018dd6:	75 25                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018dd8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0018ddd:	75 1e                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018ddf:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0018de4:	75 17                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018de6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0018deb:	75 10                	jne    c0018dfd <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018ded:	83 ec 0c             	sub    esp,0xc
c0018df0:	53                   	push   ebx
c0018df1:	e8 65 da fe ff       	call   c000685b <init_percd>
c0018df6:	83 c4 10             	add    esp,0x10
c0018df9:	40                   	inc    eax
c0018dfa:	0f 95 c2             	setne  dl
c0018dfd:	88 d0                	mov    al,dl
c0018dff:	81 c4 08 08 00 00    	add    esp,0x808
c0018e05:	5b                   	pop    ebx
c0018e06:	c3                   	ret    
c0018e07:	90                   	nop

c0018e08 <ISO9660::ISO9660()>:
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e0f:	83 ec 0c             	sub    esp,0xc
c0018e12:	50                   	push   eax
c0018e13:	e8 14 1b ff ff       	call   c000a92c <Filesystem::Filesystem()>
c0018e18:	83 c4 10             	add    esp,0x10
c0018e1b:	ba c0 09 02 c0       	mov    edx,0xc00209c0
c0018e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e24:	89 10                	mov    DWORD PTR [eax],edx
c0018e26:	e8 42 db fe ff       	call   c000696d <fs_iso9660_init>
c0018e2b:	90                   	nop
c0018e2c:	83 c4 0c             	add    esp,0xc
c0018e2f:	c3                   	ret    

c0018e30 <SoundCard::beginPlayback()>:
c0018e30:	c7 44 24 04 20 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a20
c0018e38:	e9 ce 74 ff ff       	jmp    c001030b <KePanic(char const*)>
c0018e3d:	90                   	nop

c0018e3e <SoundCard::stopPlayback()>:
c0018e3e:	c7 44 24 04 20 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a20
c0018e46:	e9 c0 74 ff ff       	jmp    c001030b <KePanic(char const*)>
c0018e4b:	90                   	nop

c0018e4c <SoundCard::SoundCard(char const*)>:
c0018e4c:	83 ec 1c             	sub    esp,0x1c
c0018e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e53:	83 ec 08             	sub    esp,0x8
c0018e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e5a:	50                   	push   eax
c0018e5b:	e8 80 2d ff ff       	call   c000bbe0 <Device::Device(char const*)>
c0018e60:	83 c4 10             	add    esp,0x10
c0018e63:	ba 6c 0a 02 c0       	mov    edx,0xc0020a6c
c0018e68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e6c:	89 10                	mov    DWORD PTR [eax],edx
c0018e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e72:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018e79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e7d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0018e87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e8b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0018e95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e99:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0018ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ea7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0018eb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018eb9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0018ebe:	7f 19                	jg     c0018ed9 <SoundCard::SoundCard(char const*)+0x8d>
c0018ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ec4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ec8:	83 c2 54             	add    edx,0x54
c0018ecb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0018ed3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0018ed7:	eb e0                	jmp    c0018eb9 <SoundCard::SoundCard(char const*)+0x6d>
c0018ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018edd:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0018ee4:	90                   	nop
c0018ee5:	83 c4 1c             	add    esp,0x1c
c0018ee8:	c3                   	ret    
c0018ee9:	90                   	nop

c0018eea <SoundCard::~SoundCard()>:
c0018eea:	83 ec 0c             	sub    esp,0xc
c0018eed:	ba 6c 0a 02 c0       	mov    edx,0xc0020a6c
c0018ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef6:	89 10                	mov    DWORD PTR [eax],edx
c0018ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018efc:	83 ec 0c             	sub    esp,0xc
c0018eff:	50                   	push   eax
c0018f00:	e8 45 2a ff ff       	call   c000b94a <Device::~Device()>
c0018f05:	83 c4 10             	add    esp,0x10
c0018f08:	90                   	nop
c0018f09:	83 c4 0c             	add    esp,0xc
c0018f0c:	c3                   	ret    
c0018f0d:	90                   	nop

c0018f0e <SoundCard::~SoundCard()>:
c0018f0e:	83 ec 0c             	sub    esp,0xc
c0018f11:	83 ec 0c             	sub    esp,0xc
c0018f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f18:	e8 cd ff ff ff       	call   c0018eea <SoundCard::~SoundCard()>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	83 ec 08             	sub    esp,0x8
c0018f23:	68 e8 01 00 00       	push   0x1e8
c0018f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f2c:	e8 e3 15 ff ff       	call   c000a514 <operator delete(void*, unsigned long)>
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	83 c4 0c             	add    esp,0xc
c0018f37:	c3                   	ret    

c0018f38 <SoundCard::configureRates(int, int, int)>:
c0018f38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f3c:	31 c0                	xor    eax,eax
c0018f3e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018f45:	75 20                	jne    c0018f67 <SoundCard::configureRates(int, int, int)+0x2f>
c0018f47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f4b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0018f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f55:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018f65:	b0 01                	mov    al,0x1
c0018f67:	c3                   	ret    

c0018f68 <SoundCard::getSamples16(int, short*)>:
c0018f68:	55                   	push   ebp
c0018f69:	57                   	push   edi
c0018f6a:	31 ff                	xor    edi,edi
c0018f6c:	56                   	push   esi
c0018f6d:	53                   	push   ebx
c0018f6e:	31 db                	xor    ebx,ebx
c0018f70:	83 ec 10             	sub    esp,0x10
c0018f73:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018f77:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018f7b:	8d 04 36             	lea    eax,[esi+esi*1]
c0018f7e:	50                   	push   eax
c0018f7f:	6a 00                	push   0x0
c0018f81:	55                   	push   ebp
c0018f82:	e8 49 75 fe ff       	call   c00004d0 <memset>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f8e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018f95:	85 c0                	test   eax,eax
c0018f97:	74 1b                	je     c0018fb4 <SoundCard::getSamples16(int, short*)+0x4c>
c0018f99:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018f9d:	75 15                	jne    c0018fb4 <SoundCard::getSamples16(int, short*)+0x4c>
c0018f9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018fa3:	55                   	push   ebp
c0018fa4:	56                   	push   esi
c0018fa5:	50                   	push   eax
c0018fa6:	e8 ed 02 00 00       	call   c0019298 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018fab:	83 c4 10             	add    esp,0x10
c0018fae:	39 c7                	cmp    edi,eax
c0018fb0:	7d 02                	jge    c0018fb4 <SoundCard::getSamples16(int, short*)+0x4c>
c0018fb2:	89 c7                	mov    edi,eax
c0018fb4:	43                   	inc    ebx
c0018fb5:	83 fb 20             	cmp    ebx,0x20
c0018fb8:	75 d0                	jne    c0018f8a <SoundCard::getSamples16(int, short*)+0x22>
c0018fba:	83 c4 0c             	add    esp,0xc
c0018fbd:	89 f8                	mov    eax,edi
c0018fbf:	5b                   	pop    ebx
c0018fc0:	5e                   	pop    esi
c0018fc1:	5f                   	pop    edi
c0018fc2:	5d                   	pop    ebp
c0018fc3:	c3                   	ret    

c0018fc4 <SoundCard::getSamples32(int, int*)>:
c0018fc4:	55                   	push   ebp
c0018fc5:	57                   	push   edi
c0018fc6:	31 ff                	xor    edi,edi
c0018fc8:	56                   	push   esi
c0018fc9:	31 f6                	xor    esi,esi
c0018fcb:	53                   	push   ebx
c0018fcc:	83 ec 10             	sub    esp,0x10
c0018fcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018fd7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018fdb:	c1 e0 02             	shl    eax,0x2
c0018fde:	50                   	push   eax
c0018fdf:	6a 00                	push   0x0
c0018fe1:	55                   	push   ebp
c0018fe2:	e8 e9 74 fe ff       	call   c00004d0 <memset>
c0018fe7:	83 c4 10             	add    esp,0x10
c0018fea:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018ff1:	85 c0                	test   eax,eax
c0018ff3:	74 1b                	je     c0019010 <SoundCard::getSamples32(int, int*)+0x4c>
c0018ff5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018ff9:	75 15                	jne    c0019010 <SoundCard::getSamples32(int, int*)+0x4c>
c0018ffb:	53                   	push   ebx
c0018ffc:	55                   	push   ebp
c0018ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019001:	50                   	push   eax
c0019002:	e8 55 03 00 00       	call   c001935c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	39 c6                	cmp    esi,eax
c001900c:	7d 02                	jge    c0019010 <SoundCard::getSamples32(int, int*)+0x4c>
c001900e:	89 c6                	mov    esi,eax
c0019010:	47                   	inc    edi
c0019011:	83 ff 20             	cmp    edi,0x20
c0019014:	75 d4                	jne    c0018fea <SoundCard::getSamples32(int, int*)+0x26>
c0019016:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001901c:	85 f6                	test   esi,esi
c001901e:	75 0f                	jne    c001902f <SoundCard::getSamples32(int, int*)+0x6b>
c0019020:	84 c0                	test   al,al
c0019022:	74 1b                	je     c001903f <SoundCard::getSamples32(int, int*)+0x7b>
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019029:	53                   	push   ebx
c001902a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001902d:	eb 0d                	jmp    c001903c <SoundCard::getSamples32(int, int*)+0x78>
c001902f:	84 c0                	test   al,al
c0019031:	75 0c                	jne    c001903f <SoundCard::getSamples32(int, int*)+0x7b>
c0019033:	83 ec 0c             	sub    esp,0xc
c0019036:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019038:	53                   	push   ebx
c0019039:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001903c:	83 c4 10             	add    esp,0x10
c001903f:	83 c4 0c             	add    esp,0xc
c0019042:	89 f0                	mov    eax,esi
c0019044:	5b                   	pop    ebx
c0019045:	5e                   	pop    esi
c0019046:	5f                   	pop    edi
c0019047:	5d                   	pop    ebp
c0019048:	c3                   	ret    
c0019049:	90                   	nop

c001904a <SoundCard::addChannel(SoundPort*)>:
c001904a:	83 ec 0c             	sub    esp,0xc
c001904d:	31 c0                	xor    eax,eax
c001904f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019053:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001905b:	74 1b                	je     c0019078 <SoundCard::addChannel(SoundPort*)+0x2e>
c001905d:	40                   	inc    eax
c001905e:	83 f8 20             	cmp    eax,0x20
c0019061:	75 f0                	jne    c0019053 <SoundCard::addChannel(SoundPort*)+0x9>
c0019063:	83 ec 0c             	sub    esp,0xc
c0019066:	68 45 0a 02 c0       	push   0xc0020a45
c001906b:	e8 9b 72 ff ff       	call   c001030b <KePanic(char const*)>
c0019070:	83 c4 10             	add    esp,0x10
c0019073:	83 c8 ff             	or     eax,0xffffffff
c0019076:	eb 0b                	jmp    c0019083 <SoundCard::addChannel(SoundPort*)+0x39>
c0019078:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001907c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019083:	83 c4 0c             	add    esp,0xc
c0019086:	c3                   	ret    
c0019087:	90                   	nop

c0019088 <SoundCard::removeChannel(int)>:
c0019088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001908c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019090:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001909b:	c3                   	ret    

c001909c <SoundPort::SoundPort(int, int, int, int)>:
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00190aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190ae:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00190b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190ba:	89 10                	mov    DWORD PTR [eax],edx
c00190bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00190c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00190cf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00190d2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00190d7:	75 13                	jne    c00190ec <SoundPort::SoundPort(int, int, int, int)+0x50>
c00190d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00190df:	05 a0 0f 00 00       	add    eax,0xfa0
c00190e4:	01 c0                	add    eax,eax
c00190e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00190ea:	66 90                	xchg   ax,ax
c00190ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00190f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00190f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019106:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019109:	c1 e0 02             	shl    eax,0x2
c001910c:	83 ec 0c             	sub    esp,0xc
c001910f:	50                   	push   eax
c0019110:	e8 60 e7 fe ff       	call   c0007875 <malloc>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	89 c2                	mov    edx,eax
c001911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001911e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019121:	90                   	nop
c0019122:	83 c4 0c             	add    esp,0xc
c0019125:	c3                   	ret    
c0019126:	66 90                	xchg   ax,ax

c0019128 <SoundPort::~SoundPort()>:
c0019128:	83 ec 0c             	sub    esp,0xc
c001912b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001912f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019132:	85 c0                	test   eax,eax
c0019134:	74 1e                	je     c0019154 <SoundPort::~SoundPort()+0x2c>
c0019136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001913a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001913d:	83 ec 0c             	sub    esp,0xc
c0019140:	50                   	push   eax
c0019141:	e8 3f e7 fe ff       	call   c0007885 <free>
c0019146:	83 c4 10             	add    esp,0x10
c0019149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001914d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019154:	90                   	nop
c0019155:	83 c4 0c             	add    esp,0xc
c0019158:	c3                   	ret    
c0019159:	90                   	nop
c001915a:	66 90                	xchg   ax,ax

c001915c <SoundPort::unpause()>:
c001915c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019160:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019164:	c3                   	ret    
c0019165:	90                   	nop
c0019166:	66 90                	xchg   ax,ax

c0019168 <SoundPort::pause()>:
c0019168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001916c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019170:	c3                   	ret    
c0019171:	90                   	nop
c0019172:	66 90                	xchg   ax,ax

c0019174 <SoundPort::getBufferUsed()>:
c0019174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019178:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001917b:	c3                   	ret    

c001917c <SoundPort::getBufferSize()>:
c001917c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019180:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019183:	c3                   	ret    

c0019184 <SoundPort::buffer16(short*, int)>:
c0019184:	55                   	push   ebp
c0019185:	57                   	push   edi
c0019186:	56                   	push   esi
c0019187:	53                   	push   ebx
c0019188:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001918c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019190:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019193:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019196:	74 68                	je     c0019200 <SoundPort::buffer16(short*, int)+0x7c>
c0019198:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001919c:	85 c9                	test   ecx,ecx
c001919e:	7e 60                	jle    c0019200 <SoundPort::buffer16(short*, int)+0x7c>
c00191a0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00191a4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00191a7:	c1 e1 0f             	shl    ecx,0xf
c00191aa:	8d 70 01             	lea    esi,[eax+0x1]
c00191ad:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00191b0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00191b3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00191b6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00191b9:	74 4d                	je     c0019208 <SoundPort::buffer16(short*, int)+0x84>
c00191bb:	31 f6                	xor    esi,esi
c00191bd:	eb 21                	jmp    c00191e0 <SoundPort::buffer16(short*, int)+0x5c>
c00191bf:	90                   	nop
c00191c0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00191c5:	8d 79 01             	lea    edi,[ecx+0x1]
c00191c8:	c1 e3 0f             	shl    ebx,0xf
c00191cb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00191ce:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00191d1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00191d4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00191d7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00191da:	74 1c                	je     c00191f8 <SoundPort::buffer16(short*, int)+0x74>
c00191dc:	89 c6                	mov    esi,eax
c00191de:	66 90                	xchg   ax,ax
c00191e0:	8d 46 01             	lea    eax,[esi+0x1]
c00191e3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00191e7:	75 d7                	jne    c00191c0 <SoundPort::buffer16(short*, int)+0x3c>
c00191e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191ed:	8d 76 00             	lea    esi,[esi+0x0]
c00191f0:	5b                   	pop    ebx
c00191f1:	5e                   	pop    esi
c00191f2:	5f                   	pop    edi
c00191f3:	5d                   	pop    ebp
c00191f4:	c3                   	ret    
c00191f5:	8d 76 00             	lea    esi,[esi+0x0]
c00191f8:	5b                   	pop    ebx
c00191f9:	8d 46 02             	lea    eax,[esi+0x2]
c00191fc:	5e                   	pop    esi
c00191fd:	5f                   	pop    edi
c00191fe:	5d                   	pop    ebp
c00191ff:	c3                   	ret    
c0019200:	5b                   	pop    ebx
c0019201:	31 c0                	xor    eax,eax
c0019203:	5e                   	pop    esi
c0019204:	5f                   	pop    edi
c0019205:	5d                   	pop    ebp
c0019206:	c3                   	ret    
c0019207:	90                   	nop
c0019208:	b8 01 00 00 00       	mov    eax,0x1
c001920d:	eb e1                	jmp    c00191f0 <SoundPort::buffer16(short*, int)+0x6c>
c001920f:	90                   	nop

c0019210 <SoundPort::buffer32(int*, int)>:
c0019210:	55                   	push   ebp
c0019211:	57                   	push   edi
c0019212:	56                   	push   esi
c0019213:	53                   	push   ebx
c0019214:	51                   	push   ecx
c0019215:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001921d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019220:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019224:	89 04 24             	mov    DWORD PTR [esp],eax
c0019227:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001922a:	74 5c                	je     c0019288 <SoundPort::buffer32(int*, int)+0x78>
c001922c:	85 c0                	test   eax,eax
c001922e:	7e 58                	jle    c0019288 <SoundPort::buffer32(int*, int)+0x78>
c0019230:	8d 71 01             	lea    esi,[ecx+0x1]
c0019233:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019236:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019239:	8b 37                	mov    esi,DWORD PTR [edi]
c001923b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001923e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019241:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019244:	74 4a                	je     c0019290 <SoundPort::buffer32(int*, int)+0x80>
c0019246:	31 f6                	xor    esi,esi
c0019248:	eb 1e                	jmp    c0019268 <SoundPort::buffer32(int*, int)+0x58>
c001924a:	66 90                	xchg   ax,ax
c001924c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001924f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019252:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019255:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019258:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001925c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001925f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019262:	74 18                	je     c001927c <SoundPort::buffer32(int*, int)+0x6c>
c0019264:	89 de                	mov    esi,ebx
c0019266:	66 90                	xchg   ax,ax
c0019268:	8d 5e 01             	lea    ebx,[esi+0x1]
c001926b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001926e:	75 dc                	jne    c001924c <SoundPort::buffer32(int*, int)+0x3c>
c0019270:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019273:	90                   	nop
c0019274:	5a                   	pop    edx
c0019275:	5b                   	pop    ebx
c0019276:	5e                   	pop    esi
c0019277:	5f                   	pop    edi
c0019278:	5d                   	pop    ebp
c0019279:	c3                   	ret    
c001927a:	66 90                	xchg   ax,ax
c001927c:	5a                   	pop    edx
c001927d:	8d 46 02             	lea    eax,[esi+0x2]
c0019280:	5b                   	pop    ebx
c0019281:	5e                   	pop    esi
c0019282:	5f                   	pop    edi
c0019283:	5d                   	pop    ebp
c0019284:	c3                   	ret    
c0019285:	8d 76 00             	lea    esi,[esi+0x0]
c0019288:	5a                   	pop    edx
c0019289:	31 c0                	xor    eax,eax
c001928b:	5b                   	pop    ebx
c001928c:	5e                   	pop    esi
c001928d:	5f                   	pop    edi
c001928e:	5d                   	pop    ebp
c001928f:	c3                   	ret    
c0019290:	b8 01 00 00 00       	mov    eax,0x1
c0019295:	eb dd                	jmp    c0019274 <SoundPort::buffer32(int*, int)+0x64>
c0019297:	90                   	nop

c0019298 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019298:	57                   	push   edi
c0019299:	56                   	push   esi
c001929a:	53                   	push   ebx
c001929b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001929f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00192a3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00192a9:	39 03                	cmp    DWORD PTR [ebx],eax
c00192ab:	74 13                	je     c00192c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00192ad:	83 ec 0c             	sub    esp,0xc
c00192b0:	68 98 0a 02 c0       	push   0xc0020a98
c00192b5:	e8 51 70 ff ff       	call   c001030b <KePanic(char const*)>
c00192ba:	83 c4 10             	add    esp,0x10
c00192bd:	8d 76 00             	lea    esi,[esi+0x0]
c00192c0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00192c6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00192c9:	74 11                	je     c00192dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00192cb:	83 ec 0c             	sub    esp,0xc
c00192ce:	68 d7 0a 02 c0       	push   0xc0020ad7
c00192d3:	e8 33 70 ff ff       	call   c001030b <KePanic(char const*)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	90                   	nop
c00192dc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00192e2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00192e5:	74 11                	je     c00192f8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00192e7:	83 ec 0c             	sub    esp,0xc
c00192ea:	68 d7 0a 02 c0       	push   0xc0020ad7
c00192ef:	e8 17 70 ff ff       	call   c001030b <KePanic(char const*)>
c00192f4:	83 c4 10             	add    esp,0x10
c00192f7:	90                   	nop
c00192f8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00192fb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00192ff:	7e 07                	jle    c0019308 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019301:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019305:	8d 76 00             	lea    esi,[esi+0x0]
c0019308:	85 f6                	test   esi,esi
c001930a:	7e 2c                	jle    c0019338 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001930c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019310:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019313:	31 c9                	xor    ecx,ecx
c0019315:	01 d7                	add    edi,edx
c0019317:	90                   	nop
c0019318:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001931b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001931e:	85 c0                	test   eax,eax
c0019320:	79 06                	jns    c0019328 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019322:	05 ff 7f 00 00       	add    eax,0x7fff
c0019327:	90                   	nop
c0019328:	c1 f8 0f             	sar    eax,0xf
c001932b:	83 c1 04             	add    ecx,0x4
c001932e:	66 01 02             	add    WORD PTR [edx],ax
c0019331:	83 c2 02             	add    edx,0x2
c0019334:	39 d7                	cmp    edi,edx
c0019336:	75 e0                	jne    c0019318 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019338:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001933b:	50                   	push   eax
c001933c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001933f:	29 f0                	sub    eax,esi
c0019341:	c1 e0 02             	shl    eax,0x2
c0019344:	50                   	push   eax
c0019345:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019348:	50                   	push   eax
c0019349:	52                   	push   edx
c001934a:	e8 91 70 fe ff       	call   c00003e0 <memmove>
c001934f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019352:	83 c4 10             	add    esp,0x10
c0019355:	89 f0                	mov    eax,esi
c0019357:	5b                   	pop    ebx
c0019358:	5e                   	pop    esi
c0019359:	5f                   	pop    edi
c001935a:	c3                   	ret    
c001935b:	90                   	nop

c001935c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001935c:	57                   	push   edi
c001935d:	56                   	push   esi
c001935e:	53                   	push   ebx
c001935f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019363:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019367:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001936b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019371:	39 06                	cmp    DWORD PTR [esi],eax
c0019373:	74 13                	je     c0019388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019375:	83 ec 0c             	sub    esp,0xc
c0019378:	68 b8 0a 02 c0       	push   0xc0020ab8
c001937d:	e8 89 6f ff ff       	call   c001030b <KePanic(char const*)>
c0019382:	83 c4 10             	add    esp,0x10
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001938e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019391:	74 11                	je     c00193a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	68 f3 0a 02 c0       	push   0xc0020af3
c001939b:	e8 6b 6f ff ff       	call   c001030b <KePanic(char const*)>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	90                   	nop
c00193a4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00193aa:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00193ad:	74 11                	je     c00193c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00193af:	83 ec 0c             	sub    esp,0xc
c00193b2:	68 f3 0a 02 c0       	push   0xc0020af3
c00193b7:	e8 4f 6f ff ff       	call   c001030b <KePanic(char const*)>
c00193bc:	83 c4 10             	add    esp,0x10
c00193bf:	90                   	nop
c00193c0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00193c3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00193c7:	7e 07                	jle    c00193d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00193c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00193cd:	8d 76 00             	lea    esi,[esi+0x0]
c00193d0:	85 ff                	test   edi,edi
c00193d2:	7e 1c                	jle    c00193f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00193d4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00193db:	31 c0                	xor    eax,eax
c00193dd:	8d 76 00             	lea    esi,[esi+0x0]
c00193e0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00193e3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00193e6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00193e9:	83 c0 04             	add    eax,0x4
c00193ec:	39 c1                	cmp    ecx,eax
c00193ee:	75 f0                	jne    c00193e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00193f0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00193f3:	50                   	push   eax
c00193f4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00193f7:	29 f8                	sub    eax,edi
c00193f9:	c1 e0 02             	shl    eax,0x2
c00193fc:	50                   	push   eax
c00193fd:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019400:	50                   	push   eax
c0019401:	52                   	push   edx
c0019402:	e8 d9 6f fe ff       	call   c00003e0 <memmove>
c0019407:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	89 f8                	mov    eax,edi
c001940f:	5b                   	pop    ebx
c0019410:	5e                   	pop    esi
c0019411:	5f                   	pop    edi
c0019412:	c3                   	ret    
c0019413:	90                   	nop

c0019414 <PCI::open(int, int, void*)>:
c0019414:	83 ec 18             	sub    esp,0x18
c0019417:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001941b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001941f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019425:	8b 10                	mov    edx,DWORD PTR [eax]
c0019427:	50                   	push   eax
c0019428:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001942b:	31 c0                	xor    eax,eax
c001942d:	83 c4 1c             	add    esp,0x1c
c0019430:	c3                   	ret    
c0019431:	90                   	nop

c0019432 <PCI::close(int, int, void*)>:
c0019432:	31 c0                	xor    eax,eax
c0019434:	c3                   	ret    
c0019435:	90                   	nop

c0019436 <PCI::PCI()>:
c0019436:	83 ec 0c             	sub    esp,0xc
c0019439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001943d:	83 ec 08             	sub    esp,0x8
c0019440:	68 0f 0b 02 c0       	push   0xc0020b0f
c0019445:	50                   	push   eax
c0019446:	e8 51 1f ff ff       	call   c000b39c <Bus::Bus(char const*)>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c0019453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019457:	89 10                	mov    DWORD PTR [eax],edx
c0019459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001945d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001946b:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019474:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001947a:	31 d2                	xor    edx,edx
c001947c:	88 c2                	mov    dl,al
c001947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019482:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001948d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019493:	31 d2                	xor    edx,edx
c0019495:	88 c2                	mov    dl,al
c0019497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001949b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00194a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00194aa:	8d 50 01             	lea    edx,[eax+0x1]
c00194ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00194b1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00194b7:	31 d2                	xor    edx,edx
c00194b9:	88 c2                	mov    dl,al
c00194bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194bf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00194c3:	83 c9 c0             	or     ecx,0xffffffc0
c00194c6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00194ca:	90                   	nop
c00194cb:	83 c4 0c             	add    esp,0xc
c00194ce:	c3                   	ret    
c00194cf:	90                   	nop

c00194d0 <PCI::readBAR8(unsigned int, int)>:
c00194d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194d8:	f6 c2 01             	test   dl,0x1
c00194db:	74 07                	je     c00194e4 <PCI::readBAR8(unsigned int, int)+0x14>
c00194dd:	83 e2 fc             	and    edx,0xfffffffc
c00194e0:	01 c2                	add    edx,eax
c00194e2:	ec                   	in     al,dx
c00194e3:	c3                   	ret    
c00194e4:	83 e2 f0             	and    edx,0xfffffff0
c00194e7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00194ea:	c3                   	ret    
c00194eb:	90                   	nop

c00194ec <PCI::readBAR16(unsigned int, int)>:
c00194ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194f4:	f6 c2 01             	test   dl,0x1
c00194f7:	74 08                	je     c0019501 <PCI::readBAR16(unsigned int, int)+0x15>
c00194f9:	83 e2 fc             	and    edx,0xfffffffc
c00194fc:	01 c2                	add    edx,eax
c00194fe:	66 ed                	in     ax,dx
c0019500:	c3                   	ret    
c0019501:	83 e2 f0             	and    edx,0xfffffff0
c0019504:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0019508:	c3                   	ret    
c0019509:	90                   	nop

c001950a <PCI::readBAR32(unsigned int, int)>:
c001950a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001950e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019512:	f6 c2 01             	test   dl,0x1
c0019515:	74 07                	je     c001951e <PCI::readBAR32(unsigned int, int)+0x14>
c0019517:	83 e2 fc             	and    edx,0xfffffffc
c001951a:	01 c2                	add    edx,eax
c001951c:	ed                   	in     eax,dx
c001951d:	c3                   	ret    
c001951e:	83 e2 f0             	and    edx,0xfffffff0
c0019521:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019524:	c3                   	ret    
c0019525:	90                   	nop

c0019526 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001952a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001952e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019532:	f6 c2 01             	test   dl,0x1
c0019535:	74 07                	je     c001953e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019537:	83 e2 fc             	and    edx,0xfffffffc
c001953a:	01 ca                	add    edx,ecx
c001953c:	ee                   	out    dx,al
c001953d:	c3                   	ret    
c001953e:	83 e2 f0             	and    edx,0xfffffff0
c0019541:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019544:	c3                   	ret    
c0019545:	90                   	nop

c0019546 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019546:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001954a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001954e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019552:	f6 c2 01             	test   dl,0x1
c0019555:	74 08                	je     c001955f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019557:	83 e2 fc             	and    edx,0xfffffffc
c001955a:	01 ca                	add    edx,ecx
c001955c:	66 ef                	out    dx,ax
c001955e:	c3                   	ret    
c001955f:	83 e2 f0             	and    edx,0xfffffff0
c0019562:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019566:	c3                   	ret    
c0019567:	90                   	nop

c0019568 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001956c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019570:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019574:	f6 c2 01             	test   dl,0x1
c0019577:	74 07                	je     c0019580 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019579:	83 e2 fc             	and    edx,0xfffffffc
c001957c:	01 ca                	add    edx,ecx
c001957e:	ef                   	out    dx,eax
c001957f:	c3                   	ret    
c0019580:	83 e2 f0             	and    edx,0xfffffff0
c0019583:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019586:	c3                   	ret    
c0019587:	90                   	nop

c0019588 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019588:	55                   	push   ebp
c0019589:	57                   	push   edi
c001958a:	56                   	push   esi
c001958b:	53                   	push   ebx
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019593:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019597:	89 f0                	mov    eax,esi
c0019599:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001959d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00195a1:	3c 07                	cmp    al,0x7
c00195a3:	76 10                	jbe    c00195b5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00195a5:	83 ec 0c             	sub    esp,0xc
c00195a8:	68 17 0b 02 c0       	push   0xc0020b17
c00195ad:	e8 59 6d ff ff       	call   c001030b <KePanic(char const*)>
c00195b2:	83 c4 10             	add    esp,0x10
c00195b5:	80 fb 0f             	cmp    bl,0xf
c00195b8:	76 10                	jbe    c00195ca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00195ba:	83 ec 0c             	sub    esp,0xc
c00195bd:	68 47 0b 02 c0       	push   0xc0020b47
c00195c2:	e8 44 6d ff ff       	call   c001030b <KePanic(char const*)>
c00195c7:	83 c4 10             	add    esp,0x10
c00195ca:	8d 04 36             	lea    eax,[esi+esi*1]
c00195cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00195d2:	83 c8 f0             	or     eax,0xfffffff0
c00195d5:	ee                   	out    dx,al
c00195d6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00195db:	89 e8                	mov    eax,ebp
c00195dd:	ee                   	out    dx,al
c00195de:	83 c4 0c             	add    esp,0xc
c00195e1:	89 d8                	mov    eax,ebx
c00195e3:	66 81 e7 fc 00       	and    di,0xfc
c00195e8:	5b                   	pop    ebx
c00195e9:	c1 e0 08             	shl    eax,0x8
c00195ec:	5e                   	pop    esi
c00195ed:	09 f8                	or     eax,edi
c00195ef:	5f                   	pop    edi
c00195f0:	66 0d 00 c0          	or     ax,0xc000
c00195f4:	5d                   	pop    ebp
c00195f5:	c3                   	ret    

c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00195f6:	57                   	push   edi
c00195f7:	56                   	push   esi
c00195f8:	53                   	push   ebx
c00195f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019601:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019607:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001960b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001960f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019613:	83 ff 01             	cmp    edi,0x1
c0019616:	75 3e                	jne    c0019656 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019618:	89 de                	mov    esi,ebx
c001961a:	0f b6 c0             	movzx  eax,al
c001961d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019623:	c1 e0 10             	shl    eax,0x10
c0019626:	0f b6 c9             	movzx  ecx,cl
c0019629:	09 f0                	or     eax,esi
c001962b:	c1 e1 08             	shl    ecx,0x8
c001962e:	0f b6 d2             	movzx  edx,dl
c0019631:	09 c8                	or     eax,ecx
c0019633:	c1 e2 0b             	shl    edx,0xb
c0019636:	09 d0                	or     eax,edx
c0019638:	ba f8 0c 00 00       	mov    edx,0xcf8
c001963d:	0d 00 00 00 80       	or     eax,0x80000000
c0019642:	ef                   	out    dx,eax
c0019643:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019648:	ed                   	in     eax,dx
c0019649:	83 e3 02             	and    ebx,0x2
c001964c:	0f b6 cb             	movzx  ecx,bl
c001964f:	c1 e1 03             	shl    ecx,0x3
c0019652:	d3 e8                	shr    eax,cl
c0019654:	eb 43                	jmp    c0019699 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019656:	83 ff 02             	cmp    edi,0x2
c0019659:	75 2c                	jne    c0019687 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001965b:	83 ec 0c             	sub    esp,0xc
c001965e:	0f b6 c9             	movzx  ecx,cl
c0019661:	0f b6 d2             	movzx  edx,dl
c0019664:	0f b6 fb             	movzx  edi,bl
c0019667:	0f b6 c0             	movzx  eax,al
c001966a:	57                   	push   edi
c001966b:	51                   	push   ecx
c001966c:	52                   	push   edx
c001966d:	50                   	push   eax
c001966e:	56                   	push   esi
c001966f:	e8 14 ff ff ff       	call   c0019588 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019674:	89 c2                	mov    edx,eax
c0019676:	ed                   	in     eax,dx
c0019677:	83 e3 02             	and    ebx,0x2
c001967a:	83 c4 20             	add    esp,0x20
c001967d:	0f b6 cb             	movzx  ecx,bl
c0019680:	c1 e1 03             	shl    ecx,0x3
c0019683:	d3 e8                	shr    eax,cl
c0019685:	eb 12                	jmp    c0019699 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019687:	83 ec 0c             	sub    esp,0xc
c001968a:	68 77 0b 02 c0       	push   0xc0020b77
c001968f:	e8 77 6c ff ff       	call   c001030b <KePanic(char const*)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	31 c0                	xor    eax,eax
c0019699:	5b                   	pop    ebx
c001969a:	5e                   	pop    esi
c001969b:	5f                   	pop    edi
c001969c:	c3                   	ret    
c001969d:	90                   	nop

c001969e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001969e:	83 ec 18             	sub    esp,0x18
c00196a1:	6a 00                	push   0x0
c00196a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196a8:	50                   	push   eax
c00196a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196ae:	50                   	push   eax
c00196af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196b4:	50                   	push   eax
c00196b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196b9:	e8 38 ff ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00196be:	83 c4 2c             	add    esp,0x2c
c00196c1:	c3                   	ret    

c00196c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00196c2:	83 ec 18             	sub    esp,0x18
c00196c5:	6a 0e                	push   0xe
c00196c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196cc:	50                   	push   eax
c00196cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196d2:	50                   	push   eax
c00196d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00196d8:	50                   	push   eax
c00196d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00196dd:	e8 14 ff ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00196e2:	83 c4 2c             	add    esp,0x2c
c00196e5:	0f b6 c0             	movzx  eax,al
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop

c00196ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00196ea:	55                   	push   ebp
c00196eb:	57                   	push   edi
c00196ec:	56                   	push   esi
c00196ed:	53                   	push   ebx
c00196ee:	83 ec 18             	sub    esp,0x18
c00196f1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00196f6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00196fb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019700:	6a 0a                	push   0xa
c0019702:	56                   	push   esi
c0019703:	55                   	push   ebp
c0019704:	57                   	push   edi
c0019705:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019709:	e8 e8 fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001970e:	83 c4 14             	add    esp,0x14
c0019711:	89 c3                	mov    ebx,eax
c0019713:	6a 0a                	push   0xa
c0019715:	0f b6 db             	movzx  ebx,bl
c0019718:	56                   	push   esi
c0019719:	55                   	push   ebp
c001971a:	57                   	push   edi
c001971b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001971f:	e8 d2 fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019724:	83 c4 2c             	add    esp,0x2c
c0019727:	25 00 ff 00 00       	and    eax,0xff00
c001972c:	09 d8                	or     eax,ebx
c001972e:	5b                   	pop    ebx
c001972f:	5e                   	pop    esi
c0019730:	5f                   	pop    edi
c0019731:	5d                   	pop    ebp
c0019732:	c3                   	ret    
c0019733:	90                   	nop

c0019734 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019734:	83 ec 18             	sub    esp,0x18
c0019737:	6a 08                	push   0x8
c0019739:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001973e:	50                   	push   eax
c001973f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019744:	50                   	push   eax
c0019745:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001974a:	50                   	push   eax
c001974b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001974f:	e8 a2 fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019754:	83 c4 2c             	add    esp,0x2c
c0019757:	0f b6 c4             	movzx  eax,ah
c001975a:	c3                   	ret    
c001975b:	90                   	nop

c001975c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001975c:	83 ec 18             	sub    esp,0x18
c001975f:	6a 08                	push   0x8
c0019761:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019766:	50                   	push   eax
c0019767:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001976c:	50                   	push   eax
c001976d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019772:	50                   	push   eax
c0019773:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019777:	e8 7a fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001977c:	83 c4 2c             	add    esp,0x2c
c001977f:	c3                   	ret    

c0019780 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019780:	83 ec 18             	sub    esp,0x18
c0019783:	6a 3c                	push   0x3c
c0019785:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001978a:	50                   	push   eax
c001978b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019790:	50                   	push   eax
c0019791:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019796:	50                   	push   eax
c0019797:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001979b:	e8 56 fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00197a0:	83 c4 2c             	add    esp,0x2c
c00197a3:	c3                   	ret    

c00197a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00197a4:	83 ec 18             	sub    esp,0x18
c00197a7:	6a 18                	push   0x18
c00197a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00197ae:	50                   	push   eax
c00197af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00197b4:	50                   	push   eax
c00197b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00197ba:	50                   	push   eax
c00197bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00197bf:	e8 32 fe ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00197c4:	83 c4 2c             	add    esp,0x2c
c00197c7:	0f b6 c4             	movzx  eax,ah
c00197ca:	c3                   	ret    
c00197cb:	90                   	nop

c00197cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00197cc:	55                   	push   ebp
c00197cd:	57                   	push   edi
c00197ce:	56                   	push   esi
c00197cf:	53                   	push   ebx
c00197d0:	83 ec 28             	sub    esp,0x28
c00197d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00197d7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00197dc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00197e1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00197e6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00197ed:	8d 43 12             	lea    eax,[ebx+0x12]
c00197f0:	83 c3 10             	add    ebx,0x10
c00197f3:	0f b6 c0             	movzx  eax,al
c00197f6:	0f b6 db             	movzx  ebx,bl
c00197f9:	50                   	push   eax
c00197fa:	51                   	push   ecx
c00197fb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00197ff:	57                   	push   edi
c0019800:	55                   	push   ebp
c0019801:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019805:	e8 ec fd ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001980a:	83 c4 14             	add    esp,0x14
c001980d:	89 c6                	mov    esi,eax
c001980f:	53                   	push   ebx
c0019810:	c1 e6 10             	shl    esi,0x10
c0019813:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019817:	51                   	push   ecx
c0019818:	57                   	push   edi
c0019819:	55                   	push   ebp
c001981a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001981e:	e8 d3 fd ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019823:	83 c4 3c             	add    esp,0x3c
c0019826:	0f b7 c0             	movzx  eax,ax
c0019829:	5b                   	pop    ebx
c001982a:	09 f0                	or     eax,esi
c001982c:	5e                   	pop    esi
c001982d:	5f                   	pop    edi
c001982e:	5d                   	pop    ebp
c001982f:	c3                   	ret    

c0019830 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019830:	55                   	push   ebp
c0019831:	57                   	push   edi
c0019832:	56                   	push   esi
c0019833:	53                   	push   ebx
c0019834:	83 ec 0c             	sub    esp,0xc
c0019837:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001983b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001983f:	89 f5                	mov    ebp,esi
c0019841:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001984b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001984f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019853:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019857:	83 f9 01             	cmp    ecx,0x1
c001985a:	75 5d                	jne    c00198b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001985c:	0f b6 c8             	movzx  ecx,al
c001985f:	0f b6 d2             	movzx  edx,dl
c0019862:	c1 e1 10             	shl    ecx,0x10
c0019865:	c1 e2 0b             	shl    edx,0xb
c0019868:	89 f0                	mov    eax,esi
c001986a:	25 fc 00 00 00       	and    eax,0xfc
c001986f:	09 c1                	or     ecx,eax
c0019871:	89 e8                	mov    eax,ebp
c0019873:	0f b6 c0             	movzx  eax,al
c0019876:	c1 e0 08             	shl    eax,0x8
c0019879:	09 c1                	or     ecx,eax
c001987b:	09 d1                	or     ecx,edx
c001987d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019882:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019888:	89 c8                	mov    eax,ecx
c001988a:	ef                   	out    dx,eax
c001988b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019890:	ed                   	in     eax,dx
c0019891:	0f b7 db             	movzx  ebx,bx
c0019894:	83 e6 02             	and    esi,0x2
c0019897:	74 0a                	je     c00198a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019899:	0f b7 d0             	movzx  edx,ax
c001989c:	c1 e3 10             	shl    ebx,0x10
c001989f:	09 d3                	or     ebx,edx
c00198a1:	eb 05                	jmp    c00198a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00198a3:	66 31 c0             	xor    ax,ax
c00198a6:	09 c3                	or     ebx,eax
c00198a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00198ad:	89 c8                	mov    eax,ecx
c00198af:	ef                   	out    dx,eax
c00198b0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00198b5:	89 d8                	mov    eax,ebx
c00198b7:	eb 41                	jmp    c00198fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00198b9:	83 f9 02             	cmp    ecx,0x2
c00198bc:	75 45                	jne    c0019903 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00198be:	83 ec 0c             	sub    esp,0xc
c00198c1:	0f b6 d2             	movzx  edx,dl
c00198c4:	89 f1                	mov    ecx,esi
c00198c6:	0f b6 c0             	movzx  eax,al
c00198c9:	0f b6 f1             	movzx  esi,cl
c00198cc:	89 e9                	mov    ecx,ebp
c00198ce:	56                   	push   esi
c00198cf:	0f b6 c9             	movzx  ecx,cl
c00198d2:	51                   	push   ecx
c00198d3:	52                   	push   edx
c00198d4:	50                   	push   eax
c00198d5:	57                   	push   edi
c00198d6:	e8 ad fc ff ff       	call   c0019588 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198db:	89 c2                	mov    edx,eax
c00198dd:	ed                   	in     eax,dx
c00198de:	83 c4 20             	add    esp,0x20
c00198e1:	0f b7 db             	movzx  ebx,bx
c00198e4:	f6 c2 02             	test   dl,0x2
c00198e7:	74 0c                	je     c00198f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00198e9:	0f b7 c8             	movzx  ecx,ax
c00198ec:	89 d8                	mov    eax,ebx
c00198ee:	c1 e0 10             	shl    eax,0x10
c00198f1:	09 c8                	or     eax,ecx
c00198f3:	eb 05                	jmp    c00198fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00198f5:	66 31 c0             	xor    ax,ax
c00198f8:	09 d8                	or     eax,ebx
c00198fa:	ef                   	out    dx,eax
c00198fb:	83 c4 0c             	add    esp,0xc
c00198fe:	5b                   	pop    ebx
c00198ff:	5e                   	pop    esi
c0019900:	5f                   	pop    edi
c0019901:	5d                   	pop    ebp
c0019902:	c3                   	ret    
c0019903:	c7 44 24 20 77 0b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020b77
c001990b:	83 c4 0c             	add    esp,0xc
c001990e:	5b                   	pop    ebx
c001990f:	5e                   	pop    esi
c0019910:	5f                   	pop    edi
c0019911:	5d                   	pop    ebp
c0019912:	e9 f4 69 ff ff       	jmp    c001030b <KePanic(char const*)>
c0019917:	90                   	nop

c0019918 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019918:	55                   	push   ebp
c0019919:	57                   	push   edi
c001991a:	56                   	push   esi
c001991b:	53                   	push   ebx
c001991c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019922:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019929:	0f 85 84 00 00 00    	jne    c00199b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001992f:	83 ec 0c             	sub    esp,0xc
c0019932:	68 14 01 00 00       	push   0x114
c0019937:	e8 39 df fe ff       	call   c0007875 <malloc>
c001993c:	83 c4 0c             	add    esp,0xc
c001993f:	89 c3                	mov    ebx,eax
c0019941:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019947:	68 7d 0b 02 c0       	push   0xc0020b7d
c001994c:	50                   	push   eax
c001994d:	e8 2e 12 ff ff       	call   c000ab80 <File::File(char const*, Process*)>
c0019952:	5a                   	pop    edx
c0019953:	59                   	pop    ecx
c0019954:	6a 01                	push   0x1
c0019956:	53                   	push   ebx
c0019957:	e8 e4 12 ff ff       	call   c000ac40 <File::open(FileOpenMode)>
c001995c:	83 c4 0c             	add    esp,0xc
c001995f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019963:	50                   	push   eax
c0019964:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019968:	50                   	push   eax
c0019969:	53                   	push   ebx
c001996a:	e8 7d 15 ff ff       	call   c000aeec <File::stat(unsigned long long*, bool*)>
c001996f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019973:	40                   	inc    eax
c0019974:	89 04 24             	mov    DWORD PTR [esp],eax
c0019977:	e8 f9 de fe ff       	call   c0007875 <malloc>
c001997c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019980:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019985:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019989:	5e                   	pop    esi
c001998a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001998c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019990:	51                   	push   ecx
c0019991:	50                   	push   eax
c0019992:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019996:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001999a:	53                   	push   ebx
c001999b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001999e:	83 c4 14             	add    esp,0x14
c00199a1:	53                   	push   ebx
c00199a2:	e8 f7 12 ff ff       	call   c000ac9e <File::close()>
c00199a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199ab:	83 c4 10             	add    esp,0x10
c00199ae:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c00199b3:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c00199b8:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c00199be:	89 04 24             	mov    DWORD PTR [esp],eax
c00199c1:	31 ff                	xor    edi,edi
c00199c3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00199cb:	31 f6                	xor    esi,esi
c00199cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00199d2:	31 db                	xor    ebx,ebx
c00199d4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00199dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00199e1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00199e8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00199ec:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00199f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00199f7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00199fa:	0f 8e 6b 01 00 00    	jle    c0019b6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0019a00:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019a03:	d4 40                	aam    0x40
c0019a05:	d5 39                	aad    0x39
c0019a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a0b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019a0f:	d4 40                	aam    0x40
c0019a11:	d5 39                	aad    0x39
c0019a13:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019a17:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019a1b:	d4 40                	aam    0x40
c0019a1d:	d5 39                	aad    0x39
c0019a1f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019a23:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019a27:	d4 40                	aam    0x40
c0019a29:	d5 39                	aad    0x39
c0019a2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a2f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019a33:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019a37:	3c 56                	cmp    al,0x56
c0019a39:	74 45                	je     c0019a80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0019a3b:	d4 40                	aam    0x40
c0019a3d:	d5 39                	aad    0x39
c0019a3f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019a42:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019a46:	0f b6 c9             	movzx  ecx,cl
c0019a49:	c1 e1 04             	shl    ecx,0x4
c0019a4c:	d4 40                	aam    0x40
c0019a4e:	d5 39                	aad    0x39
c0019a50:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019a53:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019a57:	0f b6 db             	movzx  ebx,bl
c0019a5a:	09 cb                	or     ebx,ecx
c0019a5c:	c1 e3 04             	shl    ebx,0x4
c0019a5f:	d4 40                	aam    0x40
c0019a61:	d5 39                	aad    0x39
c0019a63:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019a66:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019a6a:	0f b6 c9             	movzx  ecx,cl
c0019a6d:	09 cb                	or     ebx,ecx
c0019a6f:	c1 e3 04             	shl    ebx,0x4
c0019a72:	89 d9                	mov    ecx,ebx
c0019a74:	d4 40                	aam    0x40
c0019a76:	d5 39                	aad    0x39
c0019a78:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019a7b:	0f b6 db             	movzx  ebx,bl
c0019a7e:	09 cb                	or     ebx,ecx
c0019a80:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019a84:	80 f9 44             	cmp    cl,0x44
c0019a87:	74 47                	je     c0019ad0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0019a89:	88 c8                	mov    al,cl
c0019a8b:	d4 40                	aam    0x40
c0019a8d:	d5 39                	aad    0x39
c0019a8f:	83 e8 30             	sub    eax,0x30
c0019a92:	0f b6 e8             	movzx  ebp,al
c0019a95:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019a99:	c1 e5 04             	shl    ebp,0x4
c0019a9c:	d4 40                	aam    0x40
c0019a9e:	d5 39                	aad    0x39
c0019aa0:	83 e8 30             	sub    eax,0x30
c0019aa3:	0f b6 f0             	movzx  esi,al
c0019aa6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019aaa:	09 ee                	or     esi,ebp
c0019aac:	c1 e6 04             	shl    esi,0x4
c0019aaf:	d4 40                	aam    0x40
c0019ab1:	d5 39                	aad    0x39
c0019ab3:	83 e8 30             	sub    eax,0x30
c0019ab6:	0f b6 e8             	movzx  ebp,al
c0019ab9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019abd:	09 ee                	or     esi,ebp
c0019abf:	c1 e6 04             	shl    esi,0x4
c0019ac2:	89 f5                	mov    ebp,esi
c0019ac4:	d4 40                	aam    0x40
c0019ac6:	d5 39                	aad    0x39
c0019ac8:	83 e8 30             	sub    eax,0x30
c0019acb:	0f b6 f0             	movzx  esi,al
c0019ace:	09 ee                	or     esi,ebp
c0019ad0:	83 c7 10             	add    edi,0x10
c0019ad3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019ad7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019ada:	3c 0a                	cmp    al,0xa
c0019adc:	74 09                	je     c0019ae7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0019ade:	45                   	inc    ebp
c0019adf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019ae2:	75 16                	jne    c0019afa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0019ae4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019ae7:	3c 0a                	cmp    al,0xa
c0019ae9:	0f 94 c0             	sete   al
c0019aec:	0f b6 c0             	movzx  eax,al
c0019aef:	01 c7                	add    edi,eax
c0019af1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019af6:	75 0c                	jne    c0019b04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0019af8:	eb 15                	jmp    c0019b0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0019afa:	47                   	inc    edi
c0019afb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019afe:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019b02:	eb d3                	jmp    c0019ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0019b04:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019b09:	0f 85 e8 fe ff ff    	jne    c00199f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019b0f:	80 f9 44             	cmp    cl,0x44
c0019b12:	74 0b                	je     c0019b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0019b14:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019b19:	0f 85 d8 fe ff ff    	jne    c00199f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019b1f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019b23:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b27:	c1 e1 04             	shl    ecx,0x4
c0019b2a:	83 e8 30             	sub    eax,0x30
c0019b2d:	09 c8                	or     eax,ecx
c0019b2f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019b33:	0f 85 be fe ff ff    	jne    c00199f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019b39:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019b3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019b41:	c1 e1 04             	shl    ecx,0x4
c0019b44:	83 e8 30             	sub    eax,0x30
c0019b47:	09 c8                	or     eax,ecx
c0019b49:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019b4d:	0f 85 a4 fe ff ff    	jne    c00199f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0019b53:	50                   	push   eax
c0019b54:	50                   	push   eax
c0019b55:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019b59:	50                   	push   eax
c0019b5a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019b61:	e8 9a 6a fe ff       	call   c0000600 <strcpy>
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	eb 15                	jmp    c0019b80 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0019b6b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019b72:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019b7d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019b80:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019b87:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b8d:	5b                   	pop    ebx
c0019b8e:	5e                   	pop    esi
c0019b8f:	5f                   	pop    edi
c0019b90:	5d                   	pop    ebp
c0019b91:	c3                   	ret    

c0019b92 <PCI::checkBus(unsigned char)>:
c0019b92:	56                   	push   esi
c0019b93:	53                   	push   ebx
c0019b94:	31 f6                	xor    esi,esi
c0019b96:	51                   	push   ecx
c0019b97:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019b9b:	0f b6 c3             	movzx  eax,bl
c0019b9e:	52                   	push   edx
c0019b9f:	56                   	push   esi
c0019ba0:	46                   	inc    esi
c0019ba1:	50                   	push   eax
c0019ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ba6:	e8 f3 02 00 00       	call   c0019e9e <PCI::checkDevice(unsigned char, unsigned char)>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	83 fe 20             	cmp    esi,0x20
c0019bb1:	75 e8                	jne    c0019b9b <PCI::checkBus(unsigned char)+0x9>
c0019bb3:	58                   	pop    eax
c0019bb4:	5b                   	pop    ebx
c0019bb5:	5e                   	pop    esi
c0019bb6:	c3                   	ret    
c0019bb7:	90                   	nop

c0019bb8 <PCI::foundDevice(PCIDeviceInfo)>:
c0019bb8:	55                   	push   ebp
c0019bb9:	57                   	push   edi
c0019bba:	56                   	push   esi
c0019bbb:	53                   	push   ebx
c0019bbc:	83 ec 1c             	sub    esp,0x1c
c0019bbf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019bc3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0019bc9:	0f 84 52 01 00 00    	je     c0019d21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019bcf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019bd3:	66 81 f9 06 04       	cmp    cx,0x406
c0019bd8:	75 2c                	jne    c0019c06 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0019bda:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0019bdf:	50                   	push   eax
c0019be0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0019be5:	50                   	push   eax
c0019be6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0019beb:	50                   	push   eax
c0019bec:	56                   	push   esi
c0019bed:	e8 b2 fb ff ff       	call   c00197a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019bf2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019bf6:	0f b6 c0             	movzx  eax,al
c0019bf9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019bfd:	83 c4 2c             	add    esp,0x2c
c0019c00:	5b                   	pop    ebx
c0019c01:	5e                   	pop    esi
c0019c02:	5f                   	pop    edi
c0019c03:	5d                   	pop    ebp
c0019c04:	eb 8c                	jmp    c0019b92 <PCI::checkBus(unsigned char)>
c0019c06:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019c0a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0019c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019c14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019c18:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0019c1c:	88 d3                	mov    bl,dl
c0019c1e:	85 c0                	test   eax,eax
c0019c20:	74 33                	je     c0019c55 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019c22:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019c25:	85 d2                	test   edx,edx
c0019c27:	74 28                	je     c0019c51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c29:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019c2f:	31 ef                	xor    edi,ebp
c0019c31:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019c37:	75 18                	jne    c0019c51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c39:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019c3d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019c43:	75 0c                	jne    c0019c51 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019c45:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019c4b:	0f 84 d0 00 00 00    	je     c0019d21 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c53:	eb c9                	jmp    c0019c1e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019c55:	66 81 f9 01 06       	cmp    cx,0x601
c0019c5a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019c5e:	75 19                	jne    c0019c79 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0019c60:	83 ec 0c             	sub    esp,0xc
c0019c63:	68 64 01 00 00       	push   0x164
c0019c68:	e8 08 dc fe ff       	call   c0007875 <malloc>
c0019c6d:	89 c5                	mov    ebp,eax
c0019c6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c72:	e8 47 0e 00 00       	call   c001aabe <SATABus::SATABus()>
c0019c77:	eb 1e                	jmp    c0019c97 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019c79:	66 81 f9 01 01       	cmp    cx,0x101
c0019c7e:	75 60                	jne    c0019ce0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	68 70 02 00 00       	push   0x270
c0019c88:	e8 e8 db fe ff       	call   c0007875 <malloc>
c0019c8d:	89 c5                	mov    ebp,eax
c0019c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c92:	e8 cb 02 00 00       	call   c0019f62 <IDE::IDE()>
c0019c97:	58                   	pop    eax
c0019c98:	5a                   	pop    edx
c0019c99:	55                   	push   ebp
c0019c9a:	56                   	push   esi
c0019c9b:	e8 a8 1d ff ff       	call   c000ba48 <Device::addChild(Device*)>
c0019ca0:	83 ec 1c             	sub    esp,0x1c
c0019ca3:	b9 09 00 00 00       	mov    ecx,0x9
c0019ca8:	fc                   	cld    
c0019ca9:	89 e7                	mov    edi,esp
c0019cab:	89 de                	mov    esi,ebx
c0019cad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019caf:	55                   	push   ebp
c0019cb0:	e8 d9 1c ff ff       	call   c000b98e <Device::preOpenPCI(PCIDeviceInfo)>
c0019cb5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019cb8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0019cbc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0019cc4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0019ccc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0019cd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019cd7:	83 c4 4c             	add    esp,0x4c
c0019cda:	5b                   	pop    ebx
c0019cdb:	5e                   	pop    esi
c0019cdc:	5f                   	pop    edi
c0019cdd:	5d                   	pop    ebp
c0019cde:	ff e0                	jmp    eax
c0019ce0:	83 ec 0c             	sub    esp,0xc
c0019ce3:	68 58 01 00 00       	push   0x158
c0019ce8:	e8 88 db fe ff       	call   c0007875 <malloc>
c0019ced:	89 c5                	mov    ebp,eax
c0019cef:	58                   	pop    eax
c0019cf0:	5a                   	pop    edx
c0019cf1:	68 96 0b 02 c0       	push   0xc0020b96
c0019cf6:	55                   	push   ebp
c0019cf7:	e8 ea 1f ff ff       	call   c000bce6 <DriverlessDevice::DriverlessDevice(char const*)>
c0019cfc:	59                   	pop    ecx
c0019cfd:	5f                   	pop    edi
c0019cfe:	55                   	push   ebp
c0019cff:	56                   	push   esi
c0019d00:	e8 43 1d ff ff       	call   c000ba48 <Device::addChild(Device*)>
c0019d05:	b9 09 00 00 00       	mov    ecx,0x9
c0019d0a:	fc                   	cld    
c0019d0b:	89 df                	mov    edi,ebx
c0019d0d:	89 de                	mov    esi,ebx
c0019d0f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019d11:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019d15:	83 c4 2c             	add    esp,0x2c
c0019d18:	5b                   	pop    ebx
c0019d19:	5e                   	pop    esi
c0019d1a:	5f                   	pop    edi
c0019d1b:	5d                   	pop    ebp
c0019d1c:	e9 6d 1c ff ff       	jmp    c000b98e <Device::preOpenPCI(PCIDeviceInfo)>
c0019d21:	83 c4 1c             	add    esp,0x1c
c0019d24:	5b                   	pop    ebx
c0019d25:	5e                   	pop    esi
c0019d26:	5f                   	pop    edi
c0019d27:	5d                   	pop    ebp
c0019d28:	c3                   	ret    
c0019d29:	90                   	nop

c0019d2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019d2a:	55                   	push   ebp
c0019d2b:	57                   	push   edi
c0019d2c:	56                   	push   esi
c0019d2d:	53                   	push   ebx
c0019d2e:	83 ec 68             	sub    esp,0x68
c0019d31:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019d35:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019d3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019d47:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0019d4c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019d50:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019d57:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0019d5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019d60:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019d65:	6a 0c                	push   0xc
c0019d67:	57                   	push   edi
c0019d68:	53                   	push   ebx
c0019d69:	56                   	push   esi
c0019d6a:	55                   	push   ebp
c0019d6b:	e8 86 f8 ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d70:	83 c4 20             	add    esp,0x20
c0019d73:	57                   	push   edi
c0019d74:	53                   	push   ebx
c0019d75:	56                   	push   esi
c0019d76:	55                   	push   ebp
c0019d77:	e8 6e f9 ff ff       	call   c00196ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0019d7c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0019d81:	57                   	push   edi
c0019d82:	53                   	push   ebx
c0019d83:	56                   	push   esi
c0019d84:	55                   	push   ebp
c0019d85:	e8 f6 f9 ff ff       	call   c0019780 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019d8a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0019d8e:	83 c4 14             	add    esp,0x14
c0019d91:	6a 3c                	push   0x3c
c0019d93:	57                   	push   edi
c0019d94:	53                   	push   ebx
c0019d95:	56                   	push   esi
c0019d96:	55                   	push   ebp
c0019d97:	e8 5a f8 ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d9c:	0f b6 c4             	movzx  eax,ah
c0019d9f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019da3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019da7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019dab:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0019db0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0019db6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0019dbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019dc0:	83 c4 20             	add    esp,0x20
c0019dc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019dc8:	74 30                	je     c0019dfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019dca:	31 c0                	xor    eax,eax
c0019dcc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019dd0:	7e 28                	jle    c0019dfa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019dd2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0019dda:	39 cb                	cmp    ebx,ecx
c0019ddc:	75 19                	jne    c0019df7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019dde:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0019de6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0019dea:	75 0b                	jne    c0019df7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019dec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019df3:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019df7:	40                   	inc    eax
c0019df8:	eb d2                	jmp    c0019dcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0019dfa:	31 d2                	xor    edx,edx
c0019dfc:	83 ec 0c             	sub    esp,0xc
c0019dff:	57                   	push   edi
c0019e00:	53                   	push   ebx
c0019e01:	56                   	push   esi
c0019e02:	52                   	push   edx
c0019e03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019e07:	55                   	push   ebp
c0019e08:	e8 bf f9 ff ff       	call   c00197cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019e11:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019e15:	42                   	inc    edx
c0019e16:	83 c4 20             	add    esp,0x20
c0019e19:	83 fa 06             	cmp    edx,0x6
c0019e1c:	75 de                	jne    c0019dfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019e1e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019e23:	83 ec 0c             	sub    esp,0xc
c0019e26:	86 e0                	xchg   al,ah
c0019e28:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0019e2d:	6a 02                	push   0x2
c0019e2f:	57                   	push   edi
c0019e30:	53                   	push   ebx
c0019e31:	56                   	push   esi
c0019e32:	55                   	push   ebp
c0019e33:	e8 be f7 ff ff       	call   c00195f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e38:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0019e3d:	83 c4 20             	add    esp,0x20
c0019e40:	57                   	push   edi
c0019e41:	53                   	push   ebx
c0019e42:	56                   	push   esi
c0019e43:	55                   	push   ebp
c0019e44:	e8 eb f8 ff ff       	call   c0019734 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0019e49:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019e4d:	57                   	push   edi
c0019e4e:	53                   	push   ebx
c0019e4f:	56                   	push   esi
c0019e50:	55                   	push   ebp
c0019e51:	e8 48 f8 ff ff       	call   c001969e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019e56:	b9 09 00 00 00       	mov    ecx,0x9
c0019e5b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0019e60:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0019e64:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0019e68:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0019e6c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0019e70:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0019e74:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0019e78:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0019e7c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0019e80:	83 ec 0c             	sub    esp,0xc
c0019e83:	fc                   	cld    
c0019e84:	89 e7                	mov    edi,esp
c0019e86:	8d 74 24 58          	lea    esi,[esp+0x58]
c0019e8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019e8c:	55                   	push   ebp
c0019e8d:	e8 26 fd ff ff       	call   c0019bb8 <PCI::foundDevice(PCIDeviceInfo)>
c0019e92:	81 c4 8c 00 00 00    	add    esp,0x8c
c0019e98:	5b                   	pop    ebx
c0019e99:	5e                   	pop    esi
c0019e9a:	5f                   	pop    edi
c0019e9b:	5d                   	pop    ebp
c0019e9c:	c3                   	ret    
c0019e9d:	90                   	nop

c0019e9e <PCI::checkDevice(unsigned char, unsigned char)>:
c0019e9e:	55                   	push   ebp
c0019e9f:	57                   	push   edi
c0019ea0:	56                   	push   esi
c0019ea1:	53                   	push   ebx
c0019ea2:	83 ec 0c             	sub    esp,0xc
c0019ea5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0019ea9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0019eae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019eb3:	6a 00                	push   0x0
c0019eb5:	56                   	push   esi
c0019eb6:	57                   	push   edi
c0019eb7:	55                   	push   ebp
c0019eb8:	e8 e1 f7 ff ff       	call   c001969e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019ebd:	6a 00                	push   0x0
c0019ebf:	56                   	push   esi
c0019ec0:	57                   	push   edi
c0019ec1:	55                   	push   ebp
c0019ec2:	e8 63 fe ff ff       	call   c0019d2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019ec7:	83 c4 20             	add    esp,0x20
c0019eca:	6a 00                	push   0x0
c0019ecc:	56                   	push   esi
c0019ecd:	57                   	push   edi
c0019ece:	55                   	push   ebp
c0019ecf:	e8 ee f7 ff ff       	call   c00196c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	84 c0                	test   al,al
c0019ed9:	79 27                	jns    c0019f02 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0019edb:	bb 01 00 00 00       	mov    ebx,0x1
c0019ee0:	53                   	push   ebx
c0019ee1:	56                   	push   esi
c0019ee2:	57                   	push   edi
c0019ee3:	55                   	push   ebp
c0019ee4:	e8 b5 f7 ff ff       	call   c001969e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	66 40                	inc    ax
c0019eee:	74 0c                	je     c0019efc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0019ef0:	53                   	push   ebx
c0019ef1:	56                   	push   esi
c0019ef2:	57                   	push   edi
c0019ef3:	55                   	push   ebp
c0019ef4:	e8 31 fe ff ff       	call   c0019d2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	43                   	inc    ebx
c0019efd:	83 fb 08             	cmp    ebx,0x8
c0019f00:	75 de                	jne    c0019ee0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0019f02:	83 c4 0c             	add    esp,0xc
c0019f05:	5b                   	pop    ebx
c0019f06:	5e                   	pop    esi
c0019f07:	5f                   	pop    edi
c0019f08:	5d                   	pop    ebp
c0019f09:	c3                   	ret    

c0019f0a <PCI::detect()>:
c0019f0a:	56                   	push   esi
c0019f0b:	53                   	push   ebx
c0019f0c:	53                   	push   ebx
c0019f0d:	31 db                	xor    ebx,ebx
c0019f0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f13:	6a 00                	push   0x0
c0019f15:	6a 00                	push   0x0
c0019f17:	6a 00                	push   0x0
c0019f19:	56                   	push   esi
c0019f1a:	e8 a3 f7 ff ff       	call   c00196c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	a8 80                	test   al,0x80
c0019f24:	75 21                	jne    c0019f47 <PCI::detect()+0x3d>
c0019f26:	51                   	push   ecx
c0019f27:	51                   	push   ecx
c0019f28:	6a 00                	push   0x0
c0019f2a:	56                   	push   esi
c0019f2b:	e8 62 fc ff ff       	call   c0019b92 <PCI::checkBus(unsigned char)>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	eb 24                	jmp    c0019f59 <PCI::detect()+0x4f>
c0019f35:	52                   	push   edx
c0019f36:	52                   	push   edx
c0019f37:	53                   	push   ebx
c0019f38:	43                   	inc    ebx
c0019f39:	56                   	push   esi
c0019f3a:	e8 53 fc ff ff       	call   c0019b92 <PCI::checkBus(unsigned char)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	83 fb 08             	cmp    ebx,0x8
c0019f45:	74 12                	je     c0019f59 <PCI::detect()+0x4f>
c0019f47:	53                   	push   ebx
c0019f48:	6a 00                	push   0x0
c0019f4a:	6a 00                	push   0x0
c0019f4c:	56                   	push   esi
c0019f4d:	e8 4c f7 ff ff       	call   c001969e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	66 40                	inc    ax
c0019f57:	74 dc                	je     c0019f35 <PCI::detect()+0x2b>
c0019f59:	58                   	pop    eax
c0019f5a:	5b                   	pop    ebx
c0019f5b:	5e                   	pop    esi
c0019f5c:	c3                   	ret    
c0019f5d:	90                   	nop

c0019f5e <IDE::close(int, int, void*)>:
c0019f5e:	83 c8 ff             	or     eax,0xffffffff
c0019f61:	c3                   	ret    

c0019f62 <IDE::IDE()>:
c0019f62:	83 ec 0c             	sub    esp,0xc
c0019f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f69:	83 ec 08             	sub    esp,0x8
c0019f6c:	68 dc 0b 02 c0       	push   0xc0020bdc
c0019f71:	50                   	push   eax
c0019f72:	e8 15 1e ff ff       	call   c000bd8c <HardDiskController::HardDiskController(char const*)>
c0019f77:	83 c4 10             	add    esp,0x10
c0019f7a:	ba 6c 0c 02 c0       	mov    edx,0xc0020c6c
c0019f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f83:	89 10                	mov    DWORD PTR [eax],edx
c0019f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f89:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0019f90:	90                   	nop
c0019f91:	83 c4 0c             	add    esp,0xc
c0019f94:	c3                   	ret    
c0019f95:	90                   	nop

c0019f96 <IDE::prepareInterrupt(unsigned char)>:
c0019f96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f9f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019fa7:	c3                   	ret    

c0019fa8 <selectDrive(unsigned char, unsigned char)>:
c0019fa8:	c3                   	ret    
c0019fa9:	90                   	nop

c0019faa <IDE::getBase(unsigned char)>:
c0019faa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0019faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fb3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019fbb:	c3                   	ret    

c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019fbc:	55                   	push   ebp
c0019fbd:	57                   	push   edi
c0019fbe:	56                   	push   esi
c0019fbf:	53                   	push   ebx
c0019fc0:	83 ec 1c             	sub    esp,0x1c
c0019fc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019fc7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019fcb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0019fce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019fd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019fd6:	80 f9 03             	cmp    cl,0x3
c0019fd9:	77 51                	ja     c001a02c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019fdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fdf:	0f b6 f2             	movzx  esi,dl
c0019fe2:	0f b6 db             	movzx  ebx,bl
c0019fe5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019fe8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019fec:	83 ca 80             	or     edx,0xffffff80
c0019fef:	0f b6 d2             	movzx  edx,dl
c0019ff2:	52                   	push   edx
c0019ff3:	6a 0c                	push   0xc
c0019ff5:	56                   	push   esi
c0019ff6:	57                   	push   edi
c0019ff7:	e8 c0 ff ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ffc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a001:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a005:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a009:	ee                   	out    dx,al
c001a00a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a00f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a013:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a017:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a01b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a023:	83 c4 2c             	add    esp,0x2c
c001a026:	5b                   	pop    ebx
c001a027:	5e                   	pop    esi
c001a028:	5f                   	pop    edi
c001a029:	5d                   	pop    ebp
c001a02a:	eb 90                	jmp    c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a02c:	80 fb 07             	cmp    bl,0x7
c001a02f:	77 12                	ja     c001a043 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a031:	0f b6 d2             	movzx  edx,dl
c001a034:	0f b6 db             	movzx  ebx,bl
c001a037:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a03f:	89 da                	mov    edx,ebx
c001a041:	eb 2f                	jmp    c001a072 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a043:	80 fb 0d             	cmp    bl,0xd
c001a046:	77 13                	ja     c001a05b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a048:	0f b6 d2             	movzx  edx,dl
c001a04b:	0f b6 db             	movzx  ebx,bl
c001a04e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a055:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a059:	eb 17                	jmp    c001a072 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a05b:	80 fb 15             	cmp    bl,0x15
c001a05e:	77 13                	ja     c001a073 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a060:	0f b6 d2             	movzx  edx,dl
c001a063:	0f b6 db             	movzx  ebx,bl
c001a066:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a06e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a072:	ee                   	out    dx,al
c001a073:	83 c4 1c             	add    esp,0x1c
c001a076:	5b                   	pop    ebx
c001a077:	5e                   	pop    esi
c001a078:	5f                   	pop    edi
c001a079:	5d                   	pop    ebp
c001a07a:	c3                   	ret    
c001a07b:	90                   	nop

c001a07c <IDE::read(unsigned char, unsigned char)>:
c001a07c:	55                   	push   ebp
c001a07d:	57                   	push   edi
c001a07e:	56                   	push   esi
c001a07f:	53                   	push   ebx
c001a080:	83 ec 1c             	sub    esp,0x1c
c001a083:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a087:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a08b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a08e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a092:	3c 03                	cmp    al,0x3
c001a094:	77 43                	ja     c001a0d9 <IDE::read(unsigned char, unsigned char)+0x5d>
c001a096:	0f b6 f2             	movzx  esi,dl
c001a099:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a09c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a0a0:	83 c8 80             	or     eax,0xffffff80
c001a0a3:	0f b6 c0             	movzx  eax,al
c001a0a6:	50                   	push   eax
c001a0a7:	6a 0c                	push   0xc
c001a0a9:	56                   	push   esi
c001a0aa:	57                   	push   edi
c001a0ab:	e8 0c ff ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0b0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a0b5:	0f b6 c3             	movzx  eax,bl
c001a0b8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a0bc:	ec                   	in     al,dx
c001a0bd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a0c1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a0c6:	52                   	push   edx
c001a0c7:	6a 0c                	push   0xc
c001a0c9:	56                   	push   esi
c001a0ca:	57                   	push   edi
c001a0cb:	e8 ec fe ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0d0:	83 c4 20             	add    esp,0x20
c001a0d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a0d7:	eb 49                	jmp    c001a122 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a0d9:	80 fb 07             	cmp    bl,0x7
c001a0dc:	77 12                	ja     c001a0f0 <IDE::read(unsigned char, unsigned char)+0x74>
c001a0de:	0f b6 d2             	movzx  edx,dl
c001a0e1:	0f b6 c3             	movzx  eax,bl
c001a0e4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a0ec:	89 c2                	mov    edx,eax
c001a0ee:	eb 31                	jmp    c001a121 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a0f0:	80 fb 0d             	cmp    bl,0xd
c001a0f3:	77 13                	ja     c001a108 <IDE::read(unsigned char, unsigned char)+0x8c>
c001a0f5:	0f b6 d2             	movzx  edx,dl
c001a0f8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a0ff:	0f b6 d3             	movzx  edx,bl
c001a102:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a106:	eb 19                	jmp    c001a121 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a108:	31 c0                	xor    eax,eax
c001a10a:	80 fb 15             	cmp    bl,0x15
c001a10d:	77 13                	ja     c001a122 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a10f:	0f b6 d2             	movzx  edx,dl
c001a112:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a11a:	0f b6 d3             	movzx  edx,bl
c001a11d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a121:	ec                   	in     al,dx
c001a122:	83 c4 1c             	add    esp,0x1c
c001a125:	5b                   	pop    ebx
c001a126:	5e                   	pop    esi
c001a127:	5f                   	pop    edi
c001a128:	5d                   	pop    ebp
c001a129:	c3                   	ret    

c001a12a <IDE::waitInterrupt(unsigned char)>:
c001a12a:	57                   	push   edi
c001a12b:	56                   	push   esi
c001a12c:	31 f6                	xor    esi,esi
c001a12e:	53                   	push   ebx
c001a12f:	83 ec 10             	sub    esp,0x10
c001a132:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a136:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a13a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a13e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a143:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a14a:	84 db                	test   bl,bl
c001a14c:	75 33                	jne    c001a181 <IDE::waitInterrupt(unsigned char)+0x57>
c001a14e:	52                   	push   edx
c001a14f:	6a 0c                	push   0xc
c001a151:	50                   	push   eax
c001a152:	57                   	push   edi
c001a153:	e8 24 ff ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	a8 01                	test   al,0x1
c001a15d:	75 2a                	jne    c001a189 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a15f:	f7 c6 04 00 00 00    	test   esi,0x4
c001a165:	75 12                	jne    c001a179 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a167:	83 fe 32             	cmp    esi,0x32
c001a16a:	7e 0d                	jle    c001a179 <IDE::waitInterrupt(unsigned char)+0x4f>
c001a16c:	83 ec 0c             	sub    esp,0xc
c001a16f:	6a 64                	push   0x64
c001a171:	e8 9e a7 ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001a176:	83 c4 10             	add    esp,0x10
c001a179:	83 fe 3c             	cmp    esi,0x3c
c001a17c:	74 0b                	je     c001a189 <IDE::waitInterrupt(unsigned char)+0x5f>
c001a17e:	46                   	inc    esi
c001a17f:	eb bd                	jmp    c001a13e <IDE::waitInterrupt(unsigned char)+0x14>
c001a181:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	88 d8                	mov    al,bl
c001a18e:	5b                   	pop    ebx
c001a18f:	5e                   	pop    esi
c001a190:	5f                   	pop    edi
c001a191:	c3                   	ret    

c001a192 <ideChannel0IRQHandler(regs*, void*)>:
c001a192:	83 ec 10             	sub    esp,0x10
c001a195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a199:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a1a0:	6a 07                	push   0x7
c001a1a2:	6a 00                	push   0x0
c001a1a4:	50                   	push   eax
c001a1a5:	e8 d2 fe ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a1aa:	83 c4 1c             	add    esp,0x1c
c001a1ad:	c3                   	ret    

c001a1ae <ideChannel1IRQHandler(regs*, void*)>:
c001a1ae:	83 ec 10             	sub    esp,0x10
c001a1b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1b5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a1bc:	6a 07                	push   0x7
c001a1be:	6a 01                	push   0x1
c001a1c0:	50                   	push   eax
c001a1c1:	e8 b6 fe ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a1c6:	83 c4 1c             	add    esp,0x1c
c001a1c9:	c3                   	ret    

c001a1ca <IDE::enableIRQs(unsigned char, bool)>:
c001a1ca:	57                   	push   edi
c001a1cb:	56                   	push   esi
c001a1cc:	be 04 00 00 00       	mov    esi,0x4
c001a1d1:	53                   	push   ebx
c001a1d2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a1d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a1db:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a1e0:	0f 94 c0             	sete   al
c001a1e3:	01 c0                	add    eax,eax
c001a1e5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a1ec:	0f b6 c0             	movzx  eax,al
c001a1ef:	50                   	push   eax
c001a1f0:	6a 0c                	push   0xc
c001a1f2:	57                   	push   edi
c001a1f3:	53                   	push   ebx
c001a1f4:	e8 c3 fd ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1f9:	83 c4 10             	add    esp,0x10
c001a1fc:	50                   	push   eax
c001a1fd:	6a 0c                	push   0xc
c001a1ff:	57                   	push   edi
c001a200:	53                   	push   ebx
c001a201:	e8 76 fe ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a206:	83 c4 10             	add    esp,0x10
c001a209:	4e                   	dec    esi
c001a20a:	75 f0                	jne    c001a1fc <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a20c:	5b                   	pop    ebx
c001a20d:	5e                   	pop    esi
c001a20e:	5f                   	pop    edi
c001a20f:	c3                   	ret    

c001a210 <IDE::open(int, int, void*)>:
c001a210:	55                   	push   ebp
c001a211:	57                   	push   edi
c001a212:	56                   	push   esi
c001a213:	53                   	push   ebx
c001a214:	83 ec 1c             	sub    esp,0x1c
c001a217:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a21b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a224:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a22d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a234:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a23b:	0f 85 b0 02 00 00    	jne    c001a4f1 <IDE::open(int, int, void*)+0x2e1>
c001a241:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a247:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a24b:	83 e0 7f             	and    eax,0x7f
c001a24e:	3c 05                	cmp    al,0x5
c001a250:	74 04                	je     c001a256 <IDE::open(int, int, void*)+0x46>
c001a252:	3c 0f                	cmp    al,0xf
c001a254:	75 32                	jne    c001a288 <IDE::open(int, int, void*)+0x78>
c001a256:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a25c:	83 e0 fc             	and    eax,0xfffffffc
c001a25f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a266:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a26c:	83 e0 fc             	and    eax,0xfffffffc
c001a26f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a276:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a27c:	83 e0 fc             	and    eax,0xfffffffc
c001a27f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a286:	eb 14                	jmp    c001a29c <IDE::open(int, int, void*)+0x8c>
c001a288:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a292:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a29c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a2a3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a2aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2ae:	89 c6                	mov    esi,eax
c001a2b0:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a2b5:	c1 e6 10             	shl    esi,0x10
c001a2b8:	89 e8                	mov    eax,ebp
c001a2ba:	89 fa                	mov    edx,edi
c001a2bc:	c1 e0 0b             	shl    eax,0xb
c001a2bf:	09 f0                	or     eax,esi
c001a2c1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a2c8:	c1 e6 08             	shl    esi,0x8
c001a2cb:	09 c6                	or     esi,eax
c001a2cd:	89 f0                	mov    eax,esi
c001a2cf:	0d 08 00 00 80       	or     eax,0x80000008
c001a2d4:	ef                   	out    dx,eax
c001a2d5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a2da:	89 ca                	mov    edx,ecx
c001a2dc:	ed                   	in     eax,dx
c001a2dd:	c1 e8 10             	shr    eax,0x10
c001a2e0:	3d ff ff 00 00       	cmp    eax,0xffff
c001a2e5:	0f 84 f5 00 00 00    	je     c001a3e0 <IDE::open(int, int, void*)+0x1d0>
c001a2eb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a2f1:	89 fa                	mov    edx,edi
c001a2f3:	89 f0                	mov    eax,esi
c001a2f5:	ef                   	out    dx,eax
c001a2f6:	b0 fe                	mov    al,0xfe
c001a2f8:	89 ca                	mov    edx,ecx
c001a2fa:	ee                   	out    dx,al
c001a2fb:	89 f0                	mov    eax,esi
c001a2fd:	89 fa                	mov    edx,edi
c001a2ff:	ef                   	out    dx,eax
c001a300:	89 ca                	mov    edx,ecx
c001a302:	ed                   	in     eax,dx
c001a303:	3c fe                	cmp    al,0xfe
c001a305:	0f 85 a9 00 00 00    	jne    c001a3b4 <IDE::open(int, int, void*)+0x1a4>
c001a30b:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a311:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a318:	74 33                	je     c001a34d <IDE::open(int, int, void*)+0x13d>
c001a31a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a320:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a324:	40                   	inc    eax
c001a325:	83 ec 0c             	sub    esp,0xc
c001a328:	0f b6 c0             	movzx  eax,al
c001a32b:	50                   	push   eax
c001a32c:	55                   	push   ebp
c001a32d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a331:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a337:	51                   	push   ecx
c001a338:	e8 e7 44 ff ff       	call   c000e824 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a33d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a342:	83 c4 1c             	add    esp,0x1c
c001a345:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a34b:	eb 0a                	jmp    c001a357 <IDE::open(int, int, void*)+0x147>
c001a34d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a357:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a35e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a365:	c1 e1 10             	shl    ecx,0x10
c001a368:	c1 e0 08             	shl    eax,0x8
c001a36b:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a370:	09 c1                	or     ecx,eax
c001a372:	89 fa                	mov    edx,edi
c001a374:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a37b:	c1 e0 0b             	shl    eax,0xb
c001a37e:	09 c1                	or     ecx,eax
c001a380:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a386:	89 c8                	mov    eax,ecx
c001a388:	ef                   	out    dx,eax
c001a389:	be fc 0c 00 00       	mov    esi,0xcfc
c001a38e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a394:	89 f2                	mov    edx,esi
c001a396:	ee                   	out    dx,al
c001a397:	89 c8                	mov    eax,ecx
c001a399:	89 fa                	mov    edx,edi
c001a39b:	ef                   	out    dx,eax
c001a39c:	89 f2                	mov    edx,esi
c001a39e:	ed                   	in     eax,dx
c001a39f:	0f b6 c0             	movzx  eax,al
c001a3a2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a3a8:	74 46                	je     c001a3f0 <IDE::open(int, int, void*)+0x1e0>
c001a3aa:	83 ec 0c             	sub    esp,0xc
c001a3ad:	68 f4 0b 02 c0       	push   0xc0020bf4
c001a3b2:	eb 34                	jmp    c001a3e8 <IDE::open(int, int, void*)+0x1d8>
c001a3b4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a3bd:	75 17                	jne    c001a3d6 <IDE::open(int, int, void*)+0x1c6>
c001a3bf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a3c4:	74 07                	je     c001a3cd <IDE::open(int, int, void*)+0x1bd>
c001a3c6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a3cb:	75 09                	jne    c001a3d6 <IDE::open(int, int, void*)+0x1c6>
c001a3cd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a3d4:	eb 1a                	jmp    c001a3f0 <IDE::open(int, int, void*)+0x1e0>
c001a3d6:	83 ec 0c             	sub    esp,0xc
c001a3d9:	68 fc 0b 02 c0       	push   0xc0020bfc
c001a3de:	eb 08                	jmp    c001a3e8 <IDE::open(int, int, void*)+0x1d8>
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	68 2d 0c 02 c0       	push   0xc0020c2d
c001a3e8:	e8 1e 5f ff ff       	call   c001030b <KePanic(char const*)>
c001a3ed:	83 c4 10             	add    esp,0x10
c001a3f0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a3f7:	79 1a                	jns    c001a413 <IDE::open(int, int, void*)+0x203>
c001a3f9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a3ff:	83 e0 fc             	and    eax,0xfffffffc
c001a402:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a409:	83 c0 08             	add    eax,0x8
c001a40c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a413:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a419:	89 c2                	mov    edx,eax
c001a41b:	83 e2 0f             	and    edx,0xf
c001a41e:	66 83 fa 08          	cmp    dx,0x8
c001a422:	75 0a                	jne    c001a42e <IDE::open(int, int, void*)+0x21e>
c001a424:	83 e8 02             	sub    eax,0x2
c001a427:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a42e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a434:	89 c2                	mov    edx,eax
c001a436:	83 e2 0f             	and    edx,0xf
c001a439:	66 83 fa 08          	cmp    dx,0x8
c001a43d:	75 0a                	jne    c001a449 <IDE::open(int, int, void*)+0x239>
c001a43f:	83 e8 02             	sub    eax,0x2
c001a442:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a449:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a450:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a457:	89 d0                	mov    eax,edx
c001a459:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a45c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a460:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a464:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a467:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a46c:	0f b6 c9             	movzx  ecx,cl
c001a46f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a476:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a479:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a47d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a481:	8d 50 02             	lea    edx,[eax+0x2]
c001a484:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a489:	0f b6 d2             	movzx  edx,dl
c001a48c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a492:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a495:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a499:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a49d:	8d 48 03             	lea    ecx,[eax+0x3]
c001a4a0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a4a5:	0f b6 c9             	movzx  ecx,cl
c001a4a8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a4ae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a4b1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a4b5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a4b9:	8d 50 04             	lea    edx,[eax+0x4]
c001a4bc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a4c2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a4c7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a4ce:	66 85 f6             	test   si,si
c001a4d1:	74 5b                	je     c001a52e <IDE::open(int, int, void*)+0x31e>
c001a4d3:	0f b6 d2             	movzx  edx,dl
c001a4d6:	83 c0 05             	add    eax,0x5
c001a4d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a4dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a4e0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a4e4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a4ea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a4ef:	eb 3d                	jmp    c001a52e <IDE::open(int, int, void*)+0x31e>
c001a4f1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a4f7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a4fe:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a505:	66 05 06 02          	add    ax,0x206
c001a509:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a510:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a517:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a51e:	66 05 06 02          	add    ax,0x206
c001a522:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a529:	e9 e5 fe ff ff       	jmp    c001a413 <IDE::open(int, int, void*)+0x203>
c001a52e:	50                   	push   eax
c001a52f:	50                   	push   eax
c001a530:	6a 00                	push   0x0
c001a532:	53                   	push   ebx
c001a533:	e8 5e fa ff ff       	call   c0019f96 <IDE::prepareInterrupt(unsigned char)>
c001a538:	5a                   	pop    edx
c001a539:	59                   	pop    ecx
c001a53a:	6a 01                	push   0x1
c001a53c:	53                   	push   ebx
c001a53d:	e8 54 fa ff ff       	call   c0019f96 <IDE::prepareInterrupt(unsigned char)>
c001a542:	83 c4 0c             	add    esp,0xc
c001a545:	6a 00                	push   0x0
c001a547:	6a 00                	push   0x0
c001a549:	53                   	push   ebx
c001a54a:	e8 7b fc ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001a54f:	83 c4 0c             	add    esp,0xc
c001a552:	6a 00                	push   0x0
c001a554:	6a 01                	push   0x1
c001a556:	53                   	push   ebx
c001a557:	e8 6e fc ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a566:	74 34                	je     c001a59c <IDE::open(int, int, void*)+0x38c>
c001a568:	83 ec 0c             	sub    esp,0xc
c001a56b:	53                   	push   ebx
c001a56c:	6a 01                	push   0x1
c001a56e:	68 92 a1 01 c0       	push   0xc001a192
c001a573:	6a 0e                	push   0xe
c001a575:	53                   	push   ebx
c001a576:	e8 79 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a57b:	83 c4 14             	add    esp,0x14
c001a57e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a584:	53                   	push   ebx
c001a585:	6a 01                	push   0x1
c001a587:	68 ae a1 01 c0       	push   0xc001a1ae
c001a58c:	6a 0f                	push   0xf
c001a58e:	53                   	push   ebx
c001a58f:	e8 60 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a594:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001a59a:	eb 38                	jmp    c001a5d4 <IDE::open(int, int, void*)+0x3c4>
c001a59c:	83 ec 0c             	sub    esp,0xc
c001a59f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001a5a9:	53                   	push   ebx
c001a5aa:	6a 00                	push   0x0
c001a5ac:	68 92 a1 01 c0       	push   0xc001a192
c001a5b1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001a5b7:	53                   	push   ebx
c001a5b8:	e8 37 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a5bd:	83 c4 14             	add    esp,0x14
c001a5c0:	53                   	push   ebx
c001a5c1:	6a 00                	push   0x0
c001a5c3:	68 ae a1 01 c0       	push   0xc001a1ae
c001a5c8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001a5ce:	53                   	push   ebx
c001a5cf:	e8 20 14 ff ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a5d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a5d6:	83 c4 20             	add    esp,0x20
c001a5d9:	83 ec 0c             	sub    esp,0xc
c001a5dc:	53                   	push   ebx
c001a5dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001a5e0:	83 c4 0c             	add    esp,0xc
c001a5e3:	6a 07                	push   0x7
c001a5e5:	6a 00                	push   0x0
c001a5e7:	53                   	push   ebx
c001a5e8:	e8 8f fa ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a5ed:	83 c4 0c             	add    esp,0xc
c001a5f0:	6a 07                	push   0x7
c001a5f2:	6a 01                	push   0x1
c001a5f4:	53                   	push   ebx
c001a5f5:	e8 82 fa ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a5fa:	83 c4 0c             	add    esp,0xc
c001a5fd:	6a 01                	push   0x1
c001a5ff:	6a 00                	push   0x0
c001a601:	53                   	push   ebx
c001a602:	e8 c3 fb ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001a607:	83 c4 0c             	add    esp,0xc
c001a60a:	6a 01                	push   0x1
c001a60c:	6a 01                	push   0x1
c001a60e:	53                   	push   ebx
c001a60f:	e8 b6 fb ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001a614:	83 c4 2c             	add    esp,0x2c
c001a617:	31 c0                	xor    eax,eax
c001a619:	5b                   	pop    ebx
c001a61a:	5e                   	pop    esi
c001a61b:	5f                   	pop    edi
c001a61c:	5d                   	pop    ebp
c001a61d:	c3                   	ret    

c001a61e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001a61e:	55                   	push   ebp
c001a61f:	57                   	push   edi
c001a620:	56                   	push   esi
c001a621:	53                   	push   ebx
c001a622:	83 ec 1c             	sub    esp,0x1c
c001a625:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a629:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a62d:	8d 50 f8             	lea    edx,[eax-0x8]
c001a630:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a634:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a638:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a63c:	80 fa 03             	cmp    dl,0x3
c001a63f:	77 5d                	ja     c001a69e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001a641:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a645:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a649:	0f b6 db             	movzx  ebx,bl
c001a64c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001a64f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a653:	83 ca 80             	or     edx,0xffffff80
c001a656:	0f b6 d2             	movzx  edx,dl
c001a659:	52                   	push   edx
c001a65a:	6a 0c                	push   0xc
c001a65c:	53                   	push   ebx
c001a65d:	56                   	push   esi
c001a65e:	e8 59 f9 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a663:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a66c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a670:	0f b6 c0             	movzx  eax,al
c001a673:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001a677:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a679:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a67e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001a682:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a686:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a68a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a692:	83 c4 2c             	add    esp,0x2c
c001a695:	5b                   	pop    ebx
c001a696:	5e                   	pop    esi
c001a697:	5f                   	pop    edi
c001a698:	5d                   	pop    ebp
c001a699:	e9 1e f9 ff ff       	jmp    c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a69e:	3c 07                	cmp    al,0x7
c001a6a0:	77 10                	ja     c001a6b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001a6a2:	0f b6 db             	movzx  ebx,bl
c001a6a5:	0f b6 d0             	movzx  edx,al
c001a6a8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001a6b0:	eb 2d                	jmp    c001a6df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a6b2:	3c 0d                	cmp    al,0xd
c001a6b4:	77 13                	ja     c001a6c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001a6b6:	0f b6 db             	movzx  ebx,bl
c001a6b9:	0f b6 c0             	movzx  eax,al
c001a6bc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001a6c3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001a6c7:	eb 16                	jmp    c001a6df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a6c9:	3c 15                	cmp    al,0x15
c001a6cb:	77 14                	ja     c001a6e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001a6cd:	0f b6 db             	movzx  ebx,bl
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001a6db:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001a6df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a6e1:	83 c4 1c             	add    esp,0x1c
c001a6e4:	5b                   	pop    ebx
c001a6e5:	5e                   	pop    esi
c001a6e6:	5f                   	pop    edi
c001a6e7:	5d                   	pop    ebp
c001a6e8:	c3                   	ret    
c001a6e9:	90                   	nop

c001a6ea <IDE::detect()>:
c001a6ea:	55                   	push   ebp
c001a6eb:	57                   	push   edi
c001a6ec:	56                   	push   esi
c001a6ed:	53                   	push   ebx
c001a6ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a6f4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001a6fb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001a702:	0f 85 97 02 00 00    	jne    c001a99f <IDE::detect()+0x2b5>
c001a708:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001a70f:	31 f6                	xor    esi,esi
c001a711:	31 ed                	xor    ebp,ebp
c001a713:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a71b:	89 e8                	mov    eax,ebp
c001a71d:	c1 e0 06             	shl    eax,0x6
c001a720:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001a728:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a72c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a730:	c1 e0 04             	shl    eax,0x4
c001a733:	83 c8 a0             	or     eax,0xffffffa0
c001a736:	0f b6 c0             	movzx  eax,al
c001a739:	50                   	push   eax
c001a73a:	6a 06                	push   0x6
c001a73c:	56                   	push   esi
c001a73d:	53                   	push   ebx
c001a73e:	e8 79 f8 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a743:	83 c4 0c             	add    esp,0xc
c001a746:	6a 0c                	push   0xc
c001a748:	56                   	push   esi
c001a749:	53                   	push   ebx
c001a74a:	e8 2d f9 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a74f:	83 c4 0c             	add    esp,0xc
c001a752:	6a 0c                	push   0xc
c001a754:	56                   	push   esi
c001a755:	53                   	push   ebx
c001a756:	e8 21 f9 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a75b:	83 c4 0c             	add    esp,0xc
c001a75e:	6a 0c                	push   0xc
c001a760:	56                   	push   esi
c001a761:	53                   	push   ebx
c001a762:	e8 15 f9 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a767:	83 c4 0c             	add    esp,0xc
c001a76a:	6a 0c                	push   0xc
c001a76c:	56                   	push   esi
c001a76d:	53                   	push   ebx
c001a76e:	e8 09 f9 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a773:	68 ec 00 00 00       	push   0xec
c001a778:	6a 07                	push   0x7
c001a77a:	56                   	push   esi
c001a77b:	53                   	push   ebx
c001a77c:	e8 3b f8 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a781:	83 c4 1c             	add    esp,0x1c
c001a784:	6a 0c                	push   0xc
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	e8 ef f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a78d:	83 c4 0c             	add    esp,0xc
c001a790:	6a 0c                	push   0xc
c001a792:	56                   	push   esi
c001a793:	53                   	push   ebx
c001a794:	e8 e3 f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a799:	83 c4 0c             	add    esp,0xc
c001a79c:	6a 0c                	push   0xc
c001a79e:	56                   	push   esi
c001a79f:	53                   	push   ebx
c001a7a0:	e8 d7 f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a7a5:	83 c4 0c             	add    esp,0xc
c001a7a8:	6a 0c                	push   0xc
c001a7aa:	56                   	push   esi
c001a7ab:	53                   	push   ebx
c001a7ac:	e8 cb f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a7b1:	83 c4 0c             	add    esp,0xc
c001a7b4:	6a 0c                	push   0xc
c001a7b6:	56                   	push   esi
c001a7b7:	53                   	push   ebx
c001a7b8:	e8 bf f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	84 c0                	test   al,al
c001a7c2:	0f 84 5f 01 00 00    	je     c001a927 <IDE::detect()+0x23d>
c001a7c8:	31 ff                	xor    edi,edi
c001a7ca:	50                   	push   eax
c001a7cb:	6a 0c                	push   0xc
c001a7cd:	56                   	push   esi
c001a7ce:	53                   	push   ebx
c001a7cf:	e8 a8 f8 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	a8 01                	test   al,0x1
c001a7d9:	0f 85 69 01 00 00    	jne    c001a948 <IDE::detect()+0x25e>
c001a7df:	84 c0                	test   al,al
c001a7e1:	78 04                	js     c001a7e7 <IDE::detect()+0xfd>
c001a7e3:	a8 08                	test   al,0x8
c001a7e5:	75 23                	jne    c001a80a <IDE::detect()+0x120>
c001a7e7:	47                   	inc    edi
c001a7e8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001a7ee:	7e da                	jle    c001a7ca <IDE::detect()+0xe0>
c001a7f0:	83 ec 0c             	sub    esp,0xc
c001a7f3:	6a 32                	push   0x32
c001a7f5:	e8 1a a1 ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001a7fa:	83 c4 10             	add    esp,0x10
c001a7fd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001a803:	75 c5                	jne    c001a7ca <IDE::detect()+0xe0>
c001a805:	e9 3e 01 00 00       	jmp    c001a948 <IDE::detect()+0x25e>
c001a80a:	31 c9                	xor    ecx,ecx
c001a80c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001a810:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001a814:	83 ec 0c             	sub    esp,0xc
c001a817:	68 80 00 00 00       	push   0x80
c001a81c:	57                   	push   edi
c001a81d:	6a 00                	push   0x0
c001a81f:	56                   	push   esi
c001a820:	53                   	push   ebx
c001a821:	e8 f8 fd ff ff       	call   c001a61e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001a826:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001a82b:	89 e8                	mov    eax,ebp
c001a82d:	89 d1                	mov    ecx,edx
c001a82f:	c1 e0 06             	shl    eax,0x6
c001a832:	01 d8                	add    eax,ebx
c001a834:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001a83b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001a842:	89 f2                	mov    edx,esi
c001a844:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001a84a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001a84e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001a854:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a858:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001a85f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001a867:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001a86e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001a876:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001a87c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001a883:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001a889:	8d 54 24 58          	lea    edx,[esp+0x58]
c001a88d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a891:	83 c4 20             	add    esp,0x20
c001a894:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001a897:	83 c0 02             	add    eax,0x2
c001a89a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001a8a0:	83 c7 02             	add    edi,0x2
c001a8a3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001a8a6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001a8ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001a8b0:	75 e2                	jne    c001a894 <IDE::detect()+0x1aa>
c001a8b2:	89 e8                	mov    eax,ebp
c001a8b4:	c1 e0 06             	shl    eax,0x6
c001a8b7:	01 d8                	add    eax,ebx
c001a8b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001a8bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001a8c6:	66 c1 ea 09          	shr    dx,0x9
c001a8ca:	83 e2 01             	and    edx,0x1
c001a8cd:	84 c9                	test   cl,cl
c001a8cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001a8d5:	75 22                	jne    c001a8f9 <IDE::detect()+0x20f>
c001a8d7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001a8de:	74 46                	je     c001a926 <IDE::detect()+0x23c>
c001a8e0:	83 ec 0c             	sub    esp,0xc
c001a8e3:	68 7c 01 00 00       	push   0x17c
c001a8e8:	e8 88 cf fe ff       	call   c0007875 <malloc>
c001a8ed:	89 c7                	mov    edi,eax
c001a8ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8f2:	e8 11 05 00 00       	call   c001ae08 <ATA::ATA()>
c001a8f7:	eb 17                	jmp    c001a910 <IDE::detect()+0x226>
c001a8f9:	83 ec 0c             	sub    esp,0xc
c001a8fc:	68 84 01 00 00       	push   0x184
c001a901:	e8 6f cf fe ff       	call   c0007875 <malloc>
c001a906:	89 c7                	mov    edi,eax
c001a908:	89 04 24             	mov    DWORD PTR [esp],eax
c001a90b:	e8 1e 0e 00 00       	call   c001b72e <ATAPI::ATAPI()>
c001a910:	5a                   	pop    edx
c001a911:	59                   	pop    ecx
c001a912:	57                   	push   edi
c001a913:	53                   	push   ebx
c001a914:	e8 2f 11 ff ff       	call   c000ba48 <Device::addChild(Device*)>
c001a919:	8b 07                	mov    eax,DWORD PTR [edi]
c001a91b:	53                   	push   ebx
c001a91c:	55                   	push   ebp
c001a91d:	6a 00                	push   0x0
c001a91f:	57                   	push   edi
c001a920:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a923:	83 c4 20             	add    esp,0x20
c001a926:	45                   	inc    ebp
c001a927:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001a92c:	74 0d                	je     c001a93b <IDE::detect()+0x251>
c001a92e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001a936:	e9 e0 fd ff ff       	jmp    c001a71b <IDE::detect()+0x31>
c001a93b:	4e                   	dec    esi
c001a93c:	74 61                	je     c001a99f <IDE::detect()+0x2b5>
c001a93e:	be 01 00 00 00       	mov    esi,0x1
c001a943:	e9 cb fd ff ff       	jmp    c001a713 <IDE::detect()+0x29>
c001a948:	50                   	push   eax
c001a949:	6a 04                	push   0x4
c001a94b:	56                   	push   esi
c001a94c:	53                   	push   ebx
c001a94d:	e8 2a f7 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a952:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a956:	83 c4 0c             	add    esp,0xc
c001a959:	6a 05                	push   0x5
c001a95b:	56                   	push   esi
c001a95c:	53                   	push   ebx
c001a95d:	e8 1a f7 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001a962:	83 c4 10             	add    esp,0x10
c001a965:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001a969:	80 fa 14             	cmp    dl,0x14
c001a96c:	75 04                	jne    c001a972 <IDE::detect()+0x288>
c001a96e:	3c eb                	cmp    al,0xeb
c001a970:	eb 07                	jmp    c001a979 <IDE::detect()+0x28f>
c001a972:	3c 96                	cmp    al,0x96
c001a974:	75 b1                	jne    c001a927 <IDE::detect()+0x23d>
c001a976:	80 fa 69             	cmp    dl,0x69
c001a979:	75 ac                	jne    c001a927 <IDE::detect()+0x23d>
c001a97b:	68 a1 00 00 00       	push   0xa1
c001a980:	6a 07                	push   0x7
c001a982:	56                   	push   esi
c001a983:	53                   	push   ebx
c001a984:	e8 33 f6 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a989:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001a990:	e8 7f 9f ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001a995:	83 c4 10             	add    esp,0x10
c001a998:	b1 01                	mov    cl,0x1
c001a99a:	e9 6d fe ff ff       	jmp    c001a80c <IDE::detect()+0x122>
c001a99f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9a5:	5b                   	pop    ebx
c001a9a6:	5e                   	pop    esi
c001a9a7:	5f                   	pop    edi
c001a9a8:	5d                   	pop    ebp
c001a9a9:	c3                   	ret    

c001a9aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001a9aa:	55                   	push   ebp
c001a9ab:	57                   	push   edi
c001a9ac:	56                   	push   esi
c001a9ad:	53                   	push   ebx
c001a9ae:	83 ec 1c             	sub    esp,0x1c
c001a9b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a9b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a9b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001a9c1:	88 c3                	mov    bl,al
c001a9c3:	84 c0                	test   al,al
c001a9c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9c9:	0f 84 81 00 00 00    	je     c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001a9cf:	83 ec 0c             	sub    esp,0xc
c001a9d2:	68 57 0c 02 c0       	push   0xc0020c57
c001a9d7:	e8 2e fc fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001a9dc:	83 c4 10             	add    esp,0x10
c001a9df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9e3:	3c 01                	cmp    al,0x1
c001a9e5:	74 63                	je     c001aa4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001a9e7:	3c 02                	cmp    al,0x2
c001a9e9:	75 53                	jne    c001aa3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001a9eb:	01 f6                	add    esi,esi
c001a9ed:	09 ee                	or     esi,ebp
c001a9ef:	50                   	push   eax
c001a9f0:	89 f0                	mov    eax,esi
c001a9f2:	6a 01                	push   0x1
c001a9f4:	0f b6 f0             	movzx  esi,al
c001a9f7:	c1 e6 06             	shl    esi,0x6
c001a9fa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001aa02:	50                   	push   eax
c001aa03:	57                   	push   edi
c001aa04:	e8 73 f6 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001aa09:	83 c4 10             	add    esp,0x10
c001aa0c:	a8 01                	test   al,0x1
c001aa0e:	74 02                	je     c001aa12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001aa10:	b3 07                	mov    bl,0x7
c001aa12:	a8 02                	test   al,0x2
c001aa14:	74 02                	je     c001aa18 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001aa16:	b3 03                	mov    bl,0x3
c001aa18:	a8 04                	test   al,0x4
c001aa1a:	74 02                	je     c001aa1e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001aa1c:	b3 14                	mov    bl,0x14
c001aa1e:	a8 08                	test   al,0x8
c001aa20:	74 02                	je     c001aa24 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001aa22:	b3 03                	mov    bl,0x3
c001aa24:	a8 10                	test   al,0x10
c001aa26:	74 02                	je     c001aa2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001aa28:	b3 15                	mov    bl,0x15
c001aa2a:	a8 20                	test   al,0x20
c001aa2c:	74 02                	je     c001aa30 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001aa2e:	b3 03                	mov    bl,0x3
c001aa30:	a8 40                	test   al,0x40
c001aa32:	74 02                	je     c001aa36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001aa34:	b3 16                	mov    bl,0x16
c001aa36:	84 c0                	test   al,al
c001aa38:	79 16                	jns    c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa3a:	b3 0d                	mov    bl,0xd
c001aa3c:	eb 12                	jmp    c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa3e:	3c 03                	cmp    al,0x3
c001aa40:	74 0c                	je     c001aa4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001aa42:	3c 04                	cmp    al,0x4
c001aa44:	75 0a                	jne    c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa46:	b3 08                	mov    bl,0x8
c001aa48:	eb 06                	jmp    c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa4a:	b3 13                	mov    bl,0x13
c001aa4c:	eb 02                	jmp    c001aa50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aa4e:	b3 17                	mov    bl,0x17
c001aa50:	83 c4 1c             	add    esp,0x1c
c001aa53:	88 d8                	mov    al,bl
c001aa55:	5b                   	pop    ebx
c001aa56:	5e                   	pop    esi
c001aa57:	5f                   	pop    edi
c001aa58:	5d                   	pop    ebp
c001aa59:	c3                   	ret    

c001aa5a <IDE::polling(unsigned char, unsigned int)>:
c001aa5a:	55                   	push   ebp
c001aa5b:	bd 04 00 00 00       	mov    ebp,0x4
c001aa60:	57                   	push   edi
c001aa61:	56                   	push   esi
c001aa62:	53                   	push   ebx
c001aa63:	83 ec 0c             	sub    esp,0xc
c001aa66:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aa6a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001aa6e:	0f b6 f3             	movzx  esi,bl
c001aa71:	52                   	push   edx
c001aa72:	6a 0c                	push   0xc
c001aa74:	56                   	push   esi
c001aa75:	57                   	push   edi
c001aa76:	e8 01 f6 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	4d                   	dec    ebp
c001aa7f:	75 ed                	jne    c001aa6e <IDE::polling(unsigned char, unsigned int)+0x14>
c001aa81:	bb a0 86 01 00       	mov    ebx,0x186a0
c001aa86:	50                   	push   eax
c001aa87:	6a 0c                	push   0xc
c001aa89:	56                   	push   esi
c001aa8a:	57                   	push   edi
c001aa8b:	e8 ec f5 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001aa90:	83 c4 10             	add    esp,0x10
c001aa93:	a8 01                	test   al,0x1
c001aa95:	75 17                	jne    c001aaae <IDE::polling(unsigned char, unsigned int)+0x54>
c001aa97:	a8 20                	test   al,0x20
c001aa99:	75 0f                	jne    c001aaaa <IDE::polling(unsigned char, unsigned int)+0x50>
c001aa9b:	4b                   	dec    ebx
c001aa9c:	74 10                	je     c001aaae <IDE::polling(unsigned char, unsigned int)+0x54>
c001aa9e:	84 c0                	test   al,al
c001aaa0:	78 e4                	js     c001aa86 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aaa2:	a8 08                	test   al,0x8
c001aaa4:	74 e0                	je     c001aa86 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001aaa6:	31 c0                	xor    eax,eax
c001aaa8:	eb 06                	jmp    c001aab0 <IDE::polling(unsigned char, unsigned int)+0x56>
c001aaaa:	b0 01                	mov    al,0x1
c001aaac:	eb 02                	jmp    c001aab0 <IDE::polling(unsigned char, unsigned int)+0x56>
c001aaae:	b0 02                	mov    al,0x2
c001aab0:	83 c4 0c             	add    esp,0xc
c001aab3:	5b                   	pop    ebx
c001aab4:	5e                   	pop    esi
c001aab5:	5f                   	pop    edi
c001aab6:	5d                   	pop    ebp
c001aab7:	c3                   	ret    

c001aab8 <SATABus::close(int, int, void*)>:
c001aab8:	31 c0                	xor    eax,eax
c001aaba:	c3                   	ret    
c001aabb:	90                   	nop

c001aabc <SATABus::detect()>:
c001aabc:	c3                   	ret    
c001aabd:	90                   	nop

c001aabe <SATABus::SATABus()>:
c001aabe:	83 ec 0c             	sub    esp,0xc
c001aac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac5:	83 ec 08             	sub    esp,0x8
c001aac8:	68 90 0c 02 c0       	push   0xc0020c90
c001aacd:	50                   	push   eax
c001aace:	e8 b9 12 ff ff       	call   c000bd8c <HardDiskController::HardDiskController(char const*)>
c001aad3:	83 c4 10             	add    esp,0x10
c001aad6:	ba bc 0c 02 c0       	mov    edx,0xc0020cbc
c001aadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aadf:	89 10                	mov    DWORD PTR [eax],edx
c001aae1:	83 ec 0c             	sub    esp,0xc
c001aae4:	6a 50                	push   0x50
c001aae6:	e8 24 d1 fe ff       	call   c0007c0f <Phys::allocateContiguousPages(int)>
c001aaeb:	83 c4 10             	add    esp,0x10
c001aaee:	89 c2                	mov    edx,eax
c001aaf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaf4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001aafa:	83 ec 0c             	sub    esp,0xc
c001aafd:	6a 50                	push   0x50
c001aaff:	e8 49 e8 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	89 c2                	mov    edx,eax
c001ab09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab0d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab13:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001ab18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab1c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ab22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab26:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ab2c:	83 ec 0c             	sub    esp,0xc
c001ab2f:	6a 03                	push   0x3
c001ab31:	6a 50                	push   0x50
c001ab33:	51                   	push   ecx
c001ab34:	52                   	push   edx
c001ab35:	50                   	push   eax
c001ab36:	e8 cf f1 fe ff       	call   c0009d0a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ab3b:	83 c4 20             	add    esp,0x20
c001ab3e:	90                   	nop
c001ab3f:	83 c4 0c             	add    esp,0xc
c001ab42:	c3                   	ret    
c001ab43:	90                   	nop

c001ab44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ab44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab48:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ab4b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ab4e:	09 c2                	or     edx,eax
c001ab50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab54:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab5a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab5c:	31 c0                	xor    eax,eax
c001ab5e:	c1 e9 08             	shr    ecx,0x8
c001ab61:	83 e1 0f             	and    ecx,0xf
c001ab64:	39 c8                	cmp    eax,ecx
c001ab66:	74 0a                	je     c001ab72 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ab68:	f6 c2 01             	test   dl,0x1
c001ab6b:	74 08                	je     c001ab75 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ab6d:	d1 ea                	shr    edx,1
c001ab6f:	40                   	inc    eax
c001ab70:	eb f2                	jmp    c001ab64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ab72:	83 c8 ff             	or     eax,0xffffffff
c001ab75:	c3                   	ret    

c001ab76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ab76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ab7a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ab7d:	89 c2                	mov    edx,eax
c001ab7f:	c1 ea 08             	shr    edx,0x8
c001ab82:	83 e2 0f             	and    edx,0xf
c001ab85:	fe ca                	dec    dl
c001ab87:	75 31                	jne    c001abba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ab89:	83 e0 0f             	and    eax,0xf
c001ab8c:	3c 03                	cmp    al,0x3
c001ab8e:	75 2a                	jne    c001abba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ab90:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ab93:	b8 02 00 00 00       	mov    eax,0x2
c001ab98:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ab9e:	74 1c                	je     c001abbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001aba0:	b8 04 00 00 00       	mov    eax,0x4
c001aba5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001abab:	74 0f                	je     c001abbc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001abad:	31 c0                	xor    eax,eax
c001abaf:	83 fa 03             	cmp    edx,0x3
c001abb2:	0f 94 c0             	sete   al
c001abb5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001abb9:	c3                   	ret    
c001abba:	31 c0                	xor    eax,eax
c001abbc:	c3                   	ret    
c001abbd:	90                   	nop

c001abbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001abbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abc2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abc5:	0f ba e2 0f          	bt     edx,0xf
c001abc9:	72 f7                	jb     c001abc2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001abcb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abce:	83 ca 10             	or     edx,0x10
c001abd1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abd4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abd7:	83 ca 01             	or     edx,0x1
c001abda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abdd:	c3                   	ret    

c001abde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001abde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001abe2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abe5:	83 e2 fe             	and    edx,0xfffffffe
c001abe8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abeb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abee:	83 e2 ef             	and    edx,0xffffffef
c001abf1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001abf4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001abf7:	0f ba e2 0e          	bt     edx,0xe
c001abfb:	72 f7                	jb     c001abf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001abfd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ac00:	0f ba e2 0f          	bt     edx,0xf
c001ac04:	72 ee                	jb     c001abf4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ac06:	c3                   	ret    
c001ac07:	90                   	nop

c001ac08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ac08:	55                   	push   ebp
c001ac09:	57                   	push   edi
c001ac0a:	56                   	push   esi
c001ac0b:	53                   	push   ebx
c001ac0c:	83 ec 1c             	sub    esp,0x1c
c001ac0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ac13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac17:	53                   	push   ebx
c001ac18:	56                   	push   esi
c001ac19:	e8 c0 ff ff ff       	call   c001abde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ac1e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ac22:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	c1 e5 0a             	shl    ebp,0xa
c001ac2e:	01 e8                	add    eax,ebp
c001ac30:	89 03                	mov    DWORD PTR [ebx],eax
c001ac32:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac34:	68 00 04 00 00       	push   0x400
c001ac39:	6a 00                	push   0x0
c001ac3b:	50                   	push   eax
c001ac3c:	e8 8f 58 fe ff       	call   c00004d0 <memset>
c001ac41:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ac47:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ac4b:	01 e8                	add    eax,ebp
c001ac4d:	83 c4 1c             	add    esp,0x1c
c001ac50:	89 03                	mov    DWORD PTR [ebx],eax
c001ac52:	c1 e2 08             	shl    edx,0x8
c001ac55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ac5c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ac62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ac68:	01 f8                	add    eax,edi
c001ac6a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ac6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ac70:	68 00 01 00 00       	push   0x100
c001ac75:	6a 00                	push   0x0
c001ac77:	50                   	push   eax
c001ac78:	e8 53 58 fe ff       	call   c00004d0 <memset>
c001ac7d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ac83:	01 fa                	add    edx,edi
c001ac85:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ac89:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ac8c:	c1 e7 0d             	shl    edi,0xd
c001ac8f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ac96:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ac9c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001aca2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aca6:	31 ff                	xor    edi,edi
c001aca8:	83 c4 10             	add    esp,0x10
c001acab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001acb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acb5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001acbb:	83 c5 20             	add    ebp,0x20
c001acbe:	01 f8                	add    eax,edi
c001acc0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001acc3:	52                   	push   edx
c001acc4:	68 00 01 00 00       	push   0x100
c001acc9:	6a 00                	push   0x0
c001accb:	50                   	push   eax
c001accc:	e8 ff 57 fe ff       	call   c00004d0 <memset>
c001acd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acd5:	83 c4 10             	add    esp,0x10
c001acd8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001acde:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ace5:	01 f8                	add    eax,edi
c001ace7:	81 c7 00 01 00 00    	add    edi,0x100
c001aced:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001acf0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001acf6:	75 b3                	jne    c001acab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001acf8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001acff:	50                   	push   eax
c001ad00:	50                   	push   eax
c001ad01:	53                   	push   ebx
c001ad02:	56                   	push   esi
c001ad03:	e8 b6 fe ff ff       	call   c001abbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ad08:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ad0f:	83 c4 2c             	add    esp,0x2c
c001ad12:	5b                   	pop    ebx
c001ad13:	5e                   	pop    esi
c001ad14:	5f                   	pop    edi
c001ad15:	5d                   	pop    ebp
c001ad16:	c3                   	ret    
c001ad17:	90                   	nop

c001ad18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ad18:	55                   	push   ebp
c001ad19:	57                   	push   edi
c001ad1a:	56                   	push   esi
c001ad1b:	53                   	push   ebx
c001ad1c:	31 db                	xor    ebx,ebx
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ad25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad29:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ad2c:	f7 c7 01 00 00 00    	test   edi,0x1
c001ad32:	74 7a                	je     c001adae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ad34:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad38:	89 d8                	mov    eax,ebx
c001ad3a:	c1 e0 07             	shl    eax,0x7
c001ad3d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ad44:	55                   	push   ebp
c001ad45:	56                   	push   esi
c001ad46:	e8 2b fe ff ff       	call   c001ab76 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ad4b:	5a                   	pop    edx
c001ad4c:	83 f8 01             	cmp    eax,0x1
c001ad4f:	59                   	pop    ecx
c001ad50:	75 21                	jne    c001ad73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ad52:	50                   	push   eax
c001ad53:	53                   	push   ebx
c001ad54:	55                   	push   ebp
c001ad55:	56                   	push   esi
c001ad56:	e8 ad fe ff ff       	call   c001ac08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ad5b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001ad62:	e8 0e cb fe ff       	call   c0007875 <malloc>
c001ad67:	89 c5                	mov    ebp,eax
c001ad69:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad6c:	e8 71 10 00 00       	call   c001bde2 <SATA::SATA()>
c001ad71:	eb 24                	jmp    c001ad97 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001ad73:	83 f8 04             	cmp    eax,0x4
c001ad76:	75 36                	jne    c001adae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ad78:	51                   	push   ecx
c001ad79:	53                   	push   ebx
c001ad7a:	55                   	push   ebp
c001ad7b:	56                   	push   esi
c001ad7c:	e8 87 fe ff ff       	call   c001ac08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ad81:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ad88:	e8 e8 ca fe ff       	call   c0007875 <malloc>
c001ad8d:	89 c5                	mov    ebp,eax
c001ad8f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad92:	e8 a5 17 00 00       	call   c001c53c <SATAPI::SATAPI()>
c001ad97:	58                   	pop    eax
c001ad98:	5a                   	pop    edx
c001ad99:	55                   	push   ebp
c001ad9a:	56                   	push   esi
c001ad9b:	e8 a8 0c ff ff       	call   c000ba48 <Device::addChild(Device*)>
c001ada0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ada3:	56                   	push   esi
c001ada4:	6a 00                	push   0x0
c001ada6:	53                   	push   ebx
c001ada7:	55                   	push   ebp
c001ada8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001adab:	83 c4 20             	add    esp,0x20
c001adae:	d1 ef                	shr    edi,1
c001adb0:	43                   	inc    ebx
c001adb1:	83 fb 20             	cmp    ebx,0x20
c001adb4:	0f 85 72 ff ff ff    	jne    c001ad2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001adba:	83 c4 0c             	add    esp,0xc
c001adbd:	5b                   	pop    ebx
c001adbe:	5e                   	pop    esi
c001adbf:	5f                   	pop    edi
c001adc0:	5d                   	pop    ebp
c001adc1:	c3                   	ret    

c001adc2 <SATABus::open(int, int, void*)>:
c001adc2:	83 ec 14             	sub    esp,0x14
c001adc5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adc9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001adcf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001add5:	52                   	push   edx
c001add6:	50                   	push   eax
c001add7:	e8 3c ff ff ff       	call   c001ad18 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001addc:	31 c0                	xor    eax,eax
c001adde:	83 c4 1c             	add    esp,0x1c
c001ade1:	c3                   	ret    

c001ade2 <ATA::close(int, int, void*)>:
c001ade2:	83 ec 0c             	sub    esp,0xc
c001ade5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001adef:	85 c0                	test   eax,eax
c001adf1:	74 0c                	je     c001adff <ATA::close(int, int, void*)+0x1d>
c001adf3:	83 ec 0c             	sub    esp,0xc
c001adf6:	8b 10                	mov    edx,DWORD PTR [eax]
c001adf8:	50                   	push   eax
c001adf9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001adfc:	83 c4 10             	add    esp,0x10
c001adff:	31 c0                	xor    eax,eax
c001ae01:	83 c4 0c             	add    esp,0xc
c001ae04:	c3                   	ret    
c001ae05:	90                   	nop

c001ae06 <ATA::powerSaving(PowerSavingLevel)>:
c001ae06:	c3                   	ret    
c001ae07:	90                   	nop

c001ae08 <ATA::ATA()>:
c001ae08:	83 ec 0c             	sub    esp,0xc
c001ae0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae0f:	83 ec 04             	sub    esp,0x4
c001ae12:	68 00 02 00 00       	push   0x200
c001ae17:	68 89 0d 02 c0       	push   0xc0020d89
c001ae1c:	50                   	push   eax
c001ae1d:	e8 f4 0f ff ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae22:	83 c4 10             	add    esp,0x10
c001ae25:	ba fc 0c 02 c0       	mov    edx,0xc0020cfc
c001ae2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae2e:	89 10                	mov    DWORD PTR [eax],edx
c001ae30:	90                   	nop
c001ae31:	83 c4 0c             	add    esp,0xc
c001ae34:	c3                   	ret    
c001ae35:	90                   	nop

c001ae36 <ATA::flush(bool)>:
c001ae36:	53                   	push   ebx
c001ae37:	83 ec 08             	sub    esp,0x8
c001ae3a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001ae3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae43:	19 c0                	sbb    eax,eax
c001ae45:	83 e0 fd             	and    eax,0xfffffffd
c001ae48:	05 ea 00 00 00       	add    eax,0xea
c001ae4d:	50                   	push   eax
c001ae4e:	6a 07                	push   0x7
c001ae50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ae57:	50                   	push   eax
c001ae58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ae5e:	e8 59 f1 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae63:	83 c4 0c             	add    esp,0xc
c001ae66:	6a 00                	push   0x0
c001ae68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ae6f:	50                   	push   eax
c001ae70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ae76:	e8 df fb ff ff       	call   c001aa5a <IDE::polling(unsigned char, unsigned int)>
c001ae7b:	83 c4 18             	add    esp,0x18
c001ae7e:	5b                   	pop    ebx
c001ae7f:	c3                   	ret    

c001ae80 <ATA::readyForCommand()>:
c001ae80:	56                   	push   esi
c001ae81:	53                   	push   ebx
c001ae82:	53                   	push   ebx
c001ae83:	31 db                	xor    ebx,ebx
c001ae85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae89:	51                   	push   ecx
c001ae8a:	6a 0c                	push   0xc
c001ae8c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ae93:	50                   	push   eax
c001ae94:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ae9a:	e8 dd f1 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	a8 88                	test   al,0x88
c001aea4:	74 1f                	je     c001aec5 <ATA::readyForCommand()+0x45>
c001aea6:	43                   	inc    ebx
c001aea7:	83 fb 63             	cmp    ebx,0x63
c001aeaa:	7e dd                	jle    c001ae89 <ATA::readyForCommand()+0x9>
c001aeac:	83 ec 0c             	sub    esp,0xc
c001aeaf:	6a 0a                	push   0xa
c001aeb1:	e8 5e 9a ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001aebf:	75 c8                	jne    c001ae89 <ATA::readyForCommand()+0x9>
c001aec1:	31 c0                	xor    eax,eax
c001aec3:	eb 02                	jmp    c001aec7 <ATA::readyForCommand()+0x47>
c001aec5:	b0 01                	mov    al,0x1
c001aec7:	5a                   	pop    edx
c001aec8:	5b                   	pop    ebx
c001aec9:	5e                   	pop    esi
c001aeca:	c3                   	ret    
c001aecb:	90                   	nop

c001aecc <ATA::access(unsigned long long, int, void*, bool)>:
c001aecc:	55                   	push   ebp
c001aecd:	57                   	push   edi
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	83 ec 2c             	sub    esp,0x2c
c001aed3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001aed7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aedb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001aedf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aee3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001aee7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001aeeb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001aeef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001aef5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aef9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001aeff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af03:	c1 e0 06             	shl    eax,0x6
c001af06:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001af0e:	74 5d                	je     c001af6d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001af10:	89 fa                	mov    edx,edi
c001af12:	89 f0                	mov    eax,esi
c001af14:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001af18:	c1 ea 1c             	shr    edx,0x1c
c001af1b:	89 d1                	mov    ecx,edx
c001af1d:	09 c1                	or     ecx,eax
c001af1f:	74 25                	je     c001af46 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001af21:	31 ed                	xor    ebp,ebp
c001af23:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001af2a:	89 fa                	mov    edx,edi
c001af2c:	89 f0                	mov    eax,esi
c001af2e:	0f ad d0             	shrd   eax,edx,cl
c001af31:	d3 ea                	shr    edx,cl
c001af33:	f6 c1 20             	test   cl,0x20
c001af36:	74 02                	je     c001af3a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001af38:	89 d0                	mov    eax,edx
c001af3a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001af3e:	45                   	inc    ebp
c001af3f:	83 fd 06             	cmp    ebp,0x6
c001af42:	75 df                	jne    c001af23 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001af44:	eb 76                	jmp    c001afbc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001af46:	89 f0                	mov    eax,esi
c001af48:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001af4d:	89 fa                	mov    edx,edi
c001af4f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001af56:	0f ac d0 10          	shrd   eax,edx,0x10
c001af5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001af5f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001af63:	c1 ee 18             	shr    esi,0x18
c001af66:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001af6b:	eb 56                	jmp    c001afc3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001af6d:	6a 00                	push   0x0
c001af6f:	6a 3f                	push   0x3f
c001af71:	57                   	push   edi
c001af72:	56                   	push   esi
c001af73:	e8 b8 29 00 00       	call   c001d930 <__umoddi3>
c001af78:	83 c4 10             	add    esp,0x10
c001af7b:	40                   	inc    eax
c001af7c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001af80:	6a 00                	push   0x0
c001af82:	68 f0 03 00 00       	push   0x3f0
c001af87:	57                   	push   edi
c001af88:	56                   	push   esi
c001af89:	e8 a2 28 00 00       	call   c001d830 <__udivdi3>
c001af8e:	83 c4 10             	add    esp,0x10
c001af91:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001af96:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001af9d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001afa2:	6a 00                	push   0x0
c001afa4:	6a 3f                	push   0x3f
c001afa6:	57                   	push   edi
c001afa7:	56                   	push   esi
c001afa8:	e8 83 28 00 00       	call   c001d830 <__udivdi3>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	89 c6                	mov    esi,eax
c001afb2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001afb7:	83 e6 0f             	and    esi,0xf
c001afba:	eb 07                	jmp    c001afc3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001afbc:	31 f6                	xor    esi,esi
c001afbe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001afc3:	bf 01 00 00 00       	mov    edi,0x1
c001afc8:	50                   	push   eax
c001afc9:	6a 00                	push   0x0
c001afcb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001afd2:	50                   	push   eax
c001afd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afd7:	e8 ee f1 ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001afdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001afdf:	e8 9c fe ff ff       	call   c001ae80 <ATA::readyForCommand()>
c001afe4:	83 c4 10             	add    esp,0x10
c001afe7:	84 c0                	test   al,al
c001afe9:	0f 84 4e 02 00 00    	je     c001b23d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001afef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001aff5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001affb:	c1 e0 04             	shl    eax,0x4
c001affe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b005:	09 c6                	or     esi,eax
c001b007:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b00c:	75 05                	jne    c001b013 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b00e:	83 ce a0             	or     esi,0xffffffa0
c001b011:	eb 03                	jmp    c001b016 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b013:	83 ce e0             	or     esi,0xffffffe0
c001b016:	89 f0                	mov    eax,esi
c001b018:	0f b6 f0             	movzx  esi,al
c001b01b:	56                   	push   esi
c001b01c:	6a 06                	push   0x6
c001b01e:	51                   	push   ecx
c001b01f:	52                   	push   edx
c001b020:	e8 97 ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b025:	83 c4 10             	add    esp,0x10
c001b028:	6a 00                	push   0x0
c001b02a:	6a 01                	push   0x1
c001b02c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b033:	50                   	push   eax
c001b034:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b03a:	e8 7d ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b03f:	83 c4 10             	add    esp,0x10
c001b042:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b047:	75 6e                	jne    c001b0b7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b049:	6a 00                	push   0x0
c001b04b:	6a 08                	push   0x8
c001b04d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b054:	50                   	push   eax
c001b055:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b05b:	e8 5c ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b060:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b065:	50                   	push   eax
c001b066:	6a 09                	push   0x9
c001b068:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b06f:	50                   	push   eax
c001b070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b076:	e8 41 ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b07b:	83 c4 20             	add    esp,0x20
c001b07e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b083:	50                   	push   eax
c001b084:	6a 0a                	push   0xa
c001b086:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b08d:	50                   	push   eax
c001b08e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b094:	e8 23 ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b099:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b09e:	50                   	push   eax
c001b09f:	6a 0b                	push   0xb
c001b0a1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0a8:	50                   	push   eax
c001b0a9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0af:	e8 08 ef ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0b4:	83 c4 20             	add    esp,0x20
c001b0b7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b0bc:	50                   	push   eax
c001b0bd:	6a 02                	push   0x2
c001b0bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0c6:	50                   	push   eax
c001b0c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0cd:	e8 ea ee ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0d2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b0d7:	50                   	push   eax
c001b0d8:	6a 03                	push   0x3
c001b0da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0e1:	50                   	push   eax
c001b0e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b0e8:	e8 cf ee ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b0ed:	83 c4 20             	add    esp,0x20
c001b0f0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b0f5:	50                   	push   eax
c001b0f6:	6a 04                	push   0x4
c001b0f8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b0ff:	50                   	push   eax
c001b100:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b106:	e8 b1 ee ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b10b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b110:	50                   	push   eax
c001b111:	6a 05                	push   0x5
c001b113:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b11a:	50                   	push   eax
c001b11b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b121:	e8 96 ee ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b126:	83 c4 20             	add    esp,0x20
c001b129:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b12e:	0f 94 c0             	sete   al
c001b131:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b136:	74 09                	je     c001b141 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b138:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b13f:	eb 07                	jmp    c001b148 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b141:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b148:	0f b6 c0             	movzx  eax,al
c001b14b:	50                   	push   eax
c001b14c:	6a 07                	push   0x7
c001b14e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b155:	50                   	push   eax
c001b156:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b15c:	e8 5b ee ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b161:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b165:	83 c4 10             	add    esp,0x10
c001b168:	85 f6                	test   esi,esi
c001b16a:	0f 84 ae 00 00 00    	je     c001b21e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b170:	50                   	push   eax
c001b171:	6a 01                	push   0x1
c001b173:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b17a:	50                   	push   eax
c001b17b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b181:	e8 d4 f8 ff ff       	call   c001aa5a <IDE::polling(unsigned char, unsigned int)>
c001b186:	83 c4 10             	add    esp,0x10
c001b189:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b18f:	84 c0                	test   al,al
c001b191:	74 20                	je     c001b1b3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b193:	0f b6 f8             	movzx  edi,al
c001b196:	0f b6 d2             	movzx  edx,dl
c001b199:	57                   	push   edi
c001b19a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b1a1:	50                   	push   eax
c001b1a2:	52                   	push   edx
c001b1a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b1a9:	e8 fc f7 ff ff       	call   c001a9aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b1ae:	e9 87 00 00 00       	jmp    c001b23a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b1b3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b1b8:	74 33                	je     c001b1ed <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b1ba:	31 ed                	xor    ebp,ebp
c001b1bc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1c0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b1c4:	50                   	push   eax
c001b1c5:	50                   	push   eax
c001b1c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b1cd:	50                   	push   eax
c001b1ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b1d4:	e8 d1 ed ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001b1d9:	89 c2                	mov    edx,eax
c001b1db:	89 f8                	mov    eax,edi
c001b1dd:	66 ef                	out    dx,ax
c001b1df:	45                   	inc    ebp
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b1e9:	75 d1                	jne    c001b1bc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b1eb:	eb 23                	jmp    c001b210 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b1ed:	0f b6 d2             	movzx  edx,dl
c001b1f0:	51                   	push   ecx
c001b1f1:	51                   	push   ecx
c001b1f2:	52                   	push   edx
c001b1f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b1f9:	e8 ac ed ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001b1fe:	b9 00 01 00 00       	mov    ecx,0x100
c001b203:	89 c2                	mov    edx,eax
c001b205:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b209:	fc                   	cld    
c001b20a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b20d:	83 c4 10             	add    esp,0x10
c001b210:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b218:	4e                   	dec    esi
c001b219:	e9 4a ff ff ff       	jmp    c001b168 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b21e:	31 ff                	xor    edi,edi
c001b220:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b225:	74 16                	je     c001b23d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b227:	50                   	push   eax
c001b228:	50                   	push   eax
c001b229:	31 c0                	xor    eax,eax
c001b22b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b230:	0f 94 c0             	sete   al
c001b233:	50                   	push   eax
c001b234:	53                   	push   ebx
c001b235:	e8 fc fb ff ff       	call   c001ae36 <ATA::flush(bool)>
c001b23a:	83 c4 10             	add    esp,0x10
c001b23d:	83 c4 2c             	add    esp,0x2c
c001b240:	89 f8                	mov    eax,edi
c001b242:	5b                   	pop    ebx
c001b243:	5e                   	pop    esi
c001b244:	5f                   	pop    edi
c001b245:	5d                   	pop    ebp
c001b246:	c3                   	ret    
c001b247:	90                   	nop

c001b248 <ATA::detectCHS()>:
c001b248:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b24c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b252:	c1 e0 06             	shl    eax,0x6
c001b255:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b25b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b265:	c7 44 24 04 e0 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ce0
c001b26d:	e9 99 50 ff ff       	jmp    c001030b <KePanic(char const*)>

c001b272 <ATA::open(int, int, void*)>:
c001b272:	53                   	push   ebx
c001b273:	83 ec 08             	sub    esp,0x8
c001b276:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b27a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b27e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b282:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b288:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b28e:	c1 e0 06             	shl    eax,0x6
c001b291:	01 d0                	add    eax,edx
c001b293:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b29a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b2a0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b2a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b2b1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b2b7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b2be:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b2c5:	75 0c                	jne    c001b2d3 <ATA::open(int, int, void*)+0x61>
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	53                   	push   ebx
c001b2cb:	e8 78 ff ff ff       	call   c001b248 <ATA::detectCHS()>
c001b2d0:	83 c4 10             	add    esp,0x10
c001b2d3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b2d9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b2df:	c1 e0 06             	shl    eax,0x6
c001b2e2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b2e9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b2f3:	d1 e8                	shr    eax,1
c001b2f5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b2fb:	6a 04                	push   0x4
c001b2fd:	6a 0c                	push   0xc
c001b2ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b306:	50                   	push   eax
c001b307:	52                   	push   edx
c001b308:	e8 af ec ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b30d:	90                   	nop
c001b30e:	90                   	nop
c001b30f:	6a 00                	push   0x0
c001b311:	6a 0c                	push   0xc
c001b313:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b31a:	50                   	push   eax
c001b31b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b321:	e8 96 ec ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b326:	83 c4 14             	add    esp,0x14
c001b329:	53                   	push   ebx
c001b32a:	e8 4f 0b ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001b32f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b332:	e8 fb 1b ff ff       	call   c000cf32 <createPartitionsForDisk(PhysicalDisk*)>
c001b337:	31 c0                	xor    eax,eax
c001b339:	83 c4 18             	add    esp,0x18
c001b33c:	5b                   	pop    ebx
c001b33d:	c3                   	ret    

c001b33e <combineCharAndColour(char, unsigned char)>:
c001b33e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b343:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b349:	c1 e0 08             	shl    eax,0x8
c001b34c:	09 d0                	or     eax,edx
c001b34e:	c3                   	ret    

c001b34f <combineColours(unsigned char, unsigned char)>:
c001b34f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b354:	c1 e0 04             	shl    eax,0x4
c001b357:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b35b:	c3                   	ret    

c001b35c <ATA::read(unsigned long long, int, void*)>:
c001b35c:	55                   	push   ebp
c001b35d:	57                   	push   edi
c001b35e:	56                   	push   esi
c001b35f:	be 04 00 00 00       	mov    esi,0x4
c001b364:	53                   	push   ebx
c001b365:	83 ec 0c             	sub    esp,0xc
c001b368:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b36c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b370:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b373:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b377:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b37b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b381:	0f 87 a1 01 00 00    	ja     c001b528 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b387:	be 06 00 00 00       	mov    esi,0x6
c001b38c:	85 c9                	test   ecx,ecx
c001b38e:	0f 84 94 01 00 00    	je     c001b528 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b394:	55                   	push   ebp
c001b395:	55                   	push   ebp
c001b396:	6a 00                	push   0x0
c001b398:	51                   	push   ecx
c001b399:	53                   	push   ebx
c001b39a:	52                   	push   edx
c001b39b:	50                   	push   eax
c001b39c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b3a0:	e8 27 fb ff ff       	call   c001aecc <ATA::access(unsigned long long, int, void*, bool)>
c001b3a5:	83 c4 20             	add    esp,0x20
c001b3a8:	89 c6                	mov    esi,eax
c001b3aa:	85 c0                	test   eax,eax
c001b3ac:	0f 85 71 01 00 00    	jne    c001b523 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b3b2:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b3b8:	89 da                	mov    edx,ebx
c001b3ba:	50                   	push   eax
c001b3bb:	bd 10 27 00 00       	mov    ebp,0x2710
c001b3c0:	50                   	push   eax
c001b3c1:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b3c7:	6a 0f                	push   0xf
c001b3c9:	6a 00                	push   0x0
c001b3cb:	e8 7f ff ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001b3d0:	59                   	pop    ecx
c001b3d1:	b9 0a 00 00 00       	mov    ecx,0xa
c001b3d6:	5b                   	pop    ebx
c001b3d7:	0f b6 d8             	movzx  ebx,al
c001b3da:	89 d0                	mov    eax,edx
c001b3dc:	53                   	push   ebx
c001b3dd:	99                   	cdq    
c001b3de:	f7 fd                	idiv   ebp
c001b3e0:	99                   	cdq    
c001b3e1:	f7 f9                	idiv   ecx
c001b3e3:	83 c2 30             	add    edx,0x30
c001b3e6:	0f b6 d2             	movzx  edx,dl
c001b3e9:	52                   	push   edx
c001b3ea:	e8 4f ff ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b3ef:	5f                   	pop    edi
c001b3f0:	bf e8 03 00 00       	mov    edi,0x3e8
c001b3f5:	5a                   	pop    edx
c001b3f6:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b3fc:	53                   	push   ebx
c001b3fd:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b402:	99                   	cdq    
c001b403:	f7 ff                	idiv   edi
c001b405:	99                   	cdq    
c001b406:	f7 f9                	idiv   ecx
c001b408:	8d 42 30             	lea    eax,[edx+0x30]
c001b40b:	0f b6 c0             	movzx  eax,al
c001b40e:	50                   	push   eax
c001b40f:	e8 2a ff ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b414:	5f                   	pop    edi
c001b415:	bf 64 00 00 00       	mov    edi,0x64
c001b41a:	5a                   	pop    edx
c001b41b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b421:	53                   	push   ebx
c001b422:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b427:	99                   	cdq    
c001b428:	f7 ff                	idiv   edi
c001b42a:	99                   	cdq    
c001b42b:	f7 f9                	idiv   ecx
c001b42d:	8d 42 30             	lea    eax,[edx+0x30]
c001b430:	0f b6 c0             	movzx  eax,al
c001b433:	50                   	push   eax
c001b434:	e8 05 ff ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b439:	5a                   	pop    edx
c001b43a:	5a                   	pop    edx
c001b43b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b441:	53                   	push   ebx
c001b442:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b447:	99                   	cdq    
c001b448:	f7 f9                	idiv   ecx
c001b44a:	99                   	cdq    
c001b44b:	f7 f9                	idiv   ecx
c001b44d:	8d 42 30             	lea    eax,[edx+0x30]
c001b450:	0f b6 c0             	movzx  eax,al
c001b453:	50                   	push   eax
c001b454:	e8 e5 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b459:	5a                   	pop    edx
c001b45a:	5a                   	pop    edx
c001b45b:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b461:	53                   	push   ebx
c001b462:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b467:	99                   	cdq    
c001b468:	f7 f9                	idiv   ecx
c001b46a:	83 c2 30             	add    edx,0x30
c001b46d:	0f b6 d2             	movzx  edx,dl
c001b470:	52                   	push   edx
c001b471:	e8 c8 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b476:	5a                   	pop    edx
c001b477:	5a                   	pop    edx
c001b478:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b47e:	53                   	push   ebx
c001b47f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b484:	99                   	cdq    
c001b485:	f7 fd                	idiv   ebp
c001b487:	99                   	cdq    
c001b488:	f7 f9                	idiv   ecx
c001b48a:	8d 42 30             	lea    eax,[edx+0x30]
c001b48d:	0f b6 c0             	movzx  eax,al
c001b490:	50                   	push   eax
c001b491:	e8 a8 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b496:	5d                   	pop    ebp
c001b497:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b49c:	5a                   	pop    edx
c001b49d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b4a3:	53                   	push   ebx
c001b4a4:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4a9:	99                   	cdq    
c001b4aa:	f7 fd                	idiv   ebp
c001b4ac:	99                   	cdq    
c001b4ad:	f7 f9                	idiv   ecx
c001b4af:	8d 42 30             	lea    eax,[edx+0x30]
c001b4b2:	0f b6 c0             	movzx  eax,al
c001b4b5:	50                   	push   eax
c001b4b6:	e8 83 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b4bb:	5d                   	pop    ebp
c001b4bc:	5a                   	pop    edx
c001b4bd:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b4c3:	53                   	push   ebx
c001b4c4:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4c9:	99                   	cdq    
c001b4ca:	f7 ff                	idiv   edi
c001b4cc:	99                   	cdq    
c001b4cd:	f7 f9                	idiv   ecx
c001b4cf:	8d 42 30             	lea    eax,[edx+0x30]
c001b4d2:	0f b6 c0             	movzx  eax,al
c001b4d5:	50                   	push   eax
c001b4d6:	e8 63 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b4db:	5f                   	pop    edi
c001b4dc:	5d                   	pop    ebp
c001b4dd:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b4e3:	53                   	push   ebx
c001b4e4:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b4e9:	99                   	cdq    
c001b4ea:	f7 f9                	idiv   ecx
c001b4ec:	99                   	cdq    
c001b4ed:	f7 f9                	idiv   ecx
c001b4ef:	8d 42 30             	lea    eax,[edx+0x30]
c001b4f2:	0f b6 c0             	movzx  eax,al
c001b4f5:	50                   	push   eax
c001b4f6:	e8 43 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b4fb:	5a                   	pop    edx
c001b4fc:	5f                   	pop    edi
c001b4fd:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b503:	53                   	push   ebx
c001b504:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b509:	99                   	cdq    
c001b50a:	f7 f9                	idiv   ecx
c001b50c:	83 c2 30             	add    edx,0x30
c001b50f:	0f b6 d2             	movzx  edx,dl
c001b512:	52                   	push   edx
c001b513:	e8 26 fe ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b518:	83 c4 10             	add    esp,0x10
c001b51b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b521:	eb 05                	jmp    c001b528 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b523:	be 01 00 00 00       	mov    esi,0x1
c001b528:	83 c4 0c             	add    esp,0xc
c001b52b:	89 f0                	mov    eax,esi
c001b52d:	5b                   	pop    ebx
c001b52e:	5e                   	pop    esi
c001b52f:	5f                   	pop    edi
c001b530:	5d                   	pop    ebp
c001b531:	c3                   	ret    

c001b532 <ATA::write(unsigned long long, int, void*)>:
c001b532:	55                   	push   ebp
c001b533:	57                   	push   edi
c001b534:	56                   	push   esi
c001b535:	be 04 00 00 00       	mov    esi,0x4
c001b53a:	53                   	push   ebx
c001b53b:	83 ec 0c             	sub    esp,0xc
c001b53e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b542:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b546:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b549:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b54d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b551:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b557:	0f 87 9c 01 00 00    	ja     c001b6f9 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b55d:	be 06 00 00 00       	mov    esi,0x6
c001b562:	85 c9                	test   ecx,ecx
c001b564:	0f 84 8f 01 00 00    	je     c001b6f9 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b56a:	55                   	push   ebp
c001b56b:	55                   	push   ebp
c001b56c:	6a 01                	push   0x1
c001b56e:	51                   	push   ecx
c001b56f:	53                   	push   ebx
c001b570:	52                   	push   edx
c001b571:	50                   	push   eax
c001b572:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b576:	e8 51 f9 ff ff       	call   c001aecc <ATA::access(unsigned long long, int, void*, bool)>
c001b57b:	83 c4 20             	add    esp,0x20
c001b57e:	89 c6                	mov    esi,eax
c001b580:	85 c0                	test   eax,eax
c001b582:	0f 85 6c 01 00 00    	jne    c001b6f4 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001b588:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001b58e:	bd 10 27 00 00       	mov    ebp,0x2710
c001b593:	50                   	push   eax
c001b594:	50                   	push   eax
c001b595:	6a 0f                	push   0xf
c001b597:	6a 00                	push   0x0
c001b599:	e8 b1 fd ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001b59e:	5a                   	pop    edx
c001b59f:	0f b6 d8             	movzx  ebx,al
c001b5a2:	59                   	pop    ecx
c001b5a3:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5a8:	53                   	push   ebx
c001b5a9:	b9 0a 00 00 00       	mov    ecx,0xa
c001b5ae:	99                   	cdq    
c001b5af:	f7 fd                	idiv   ebp
c001b5b1:	99                   	cdq    
c001b5b2:	f7 f9                	idiv   ecx
c001b5b4:	8d 42 30             	lea    eax,[edx+0x30]
c001b5b7:	0f b6 c0             	movzx  eax,al
c001b5ba:	50                   	push   eax
c001b5bb:	e8 7e fd ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b5c0:	5f                   	pop    edi
c001b5c1:	bf e8 03 00 00       	mov    edi,0x3e8
c001b5c6:	5a                   	pop    edx
c001b5c7:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b5cd:	53                   	push   ebx
c001b5ce:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5d3:	99                   	cdq    
c001b5d4:	f7 ff                	idiv   edi
c001b5d6:	99                   	cdq    
c001b5d7:	f7 f9                	idiv   ecx
c001b5d9:	8d 42 30             	lea    eax,[edx+0x30]
c001b5dc:	0f b6 c0             	movzx  eax,al
c001b5df:	50                   	push   eax
c001b5e0:	e8 59 fd ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b5e5:	5f                   	pop    edi
c001b5e6:	bf 64 00 00 00       	mov    edi,0x64
c001b5eb:	5a                   	pop    edx
c001b5ec:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b5f2:	53                   	push   ebx
c001b5f3:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5f8:	99                   	cdq    
c001b5f9:	f7 ff                	idiv   edi
c001b5fb:	99                   	cdq    
c001b5fc:	f7 f9                	idiv   ecx
c001b5fe:	8d 42 30             	lea    eax,[edx+0x30]
c001b601:	0f b6 c0             	movzx  eax,al
c001b604:	50                   	push   eax
c001b605:	e8 34 fd ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b60a:	5a                   	pop    edx
c001b60b:	5a                   	pop    edx
c001b60c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b612:	53                   	push   ebx
c001b613:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b618:	99                   	cdq    
c001b619:	f7 f9                	idiv   ecx
c001b61b:	99                   	cdq    
c001b61c:	f7 f9                	idiv   ecx
c001b61e:	8d 42 30             	lea    eax,[edx+0x30]
c001b621:	0f b6 c0             	movzx  eax,al
c001b624:	50                   	push   eax
c001b625:	e8 14 fd ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b62a:	5a                   	pop    edx
c001b62b:	5a                   	pop    edx
c001b62c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b632:	53                   	push   ebx
c001b633:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b638:	99                   	cdq    
c001b639:	f7 f9                	idiv   ecx
c001b63b:	8d 42 30             	lea    eax,[edx+0x30]
c001b63e:	0f b6 c0             	movzx  eax,al
c001b641:	50                   	push   eax
c001b642:	e8 f7 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b647:	5a                   	pop    edx
c001b648:	5a                   	pop    edx
c001b649:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b64f:	53                   	push   ebx
c001b650:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b655:	99                   	cdq    
c001b656:	f7 fd                	idiv   ebp
c001b658:	99                   	cdq    
c001b659:	f7 f9                	idiv   ecx
c001b65b:	8d 42 30             	lea    eax,[edx+0x30]
c001b65e:	0f b6 c0             	movzx  eax,al
c001b661:	50                   	push   eax
c001b662:	e8 d7 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b667:	5d                   	pop    ebp
c001b668:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b66d:	5a                   	pop    edx
c001b66e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b674:	53                   	push   ebx
c001b675:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b67a:	99                   	cdq    
c001b67b:	f7 fd                	idiv   ebp
c001b67d:	99                   	cdq    
c001b67e:	f7 f9                	idiv   ecx
c001b680:	8d 42 30             	lea    eax,[edx+0x30]
c001b683:	0f b6 c0             	movzx  eax,al
c001b686:	50                   	push   eax
c001b687:	e8 b2 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b68c:	5d                   	pop    ebp
c001b68d:	5a                   	pop    edx
c001b68e:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b694:	53                   	push   ebx
c001b695:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b69a:	99                   	cdq    
c001b69b:	f7 ff                	idiv   edi
c001b69d:	99                   	cdq    
c001b69e:	f7 f9                	idiv   ecx
c001b6a0:	8d 42 30             	lea    eax,[edx+0x30]
c001b6a3:	0f b6 c0             	movzx  eax,al
c001b6a6:	50                   	push   eax
c001b6a7:	e8 92 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b6ac:	5f                   	pop    edi
c001b6ad:	5d                   	pop    ebp
c001b6ae:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b6b4:	53                   	push   ebx
c001b6b5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6ba:	99                   	cdq    
c001b6bb:	f7 f9                	idiv   ecx
c001b6bd:	99                   	cdq    
c001b6be:	f7 f9                	idiv   ecx
c001b6c0:	8d 42 30             	lea    eax,[edx+0x30]
c001b6c3:	0f b6 c0             	movzx  eax,al
c001b6c6:	50                   	push   eax
c001b6c7:	e8 72 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b6cc:	5a                   	pop    edx
c001b6cd:	5f                   	pop    edi
c001b6ce:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b6d4:	53                   	push   ebx
c001b6d5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6da:	99                   	cdq    
c001b6db:	f7 f9                	idiv   ecx
c001b6dd:	83 c2 30             	add    edx,0x30
c001b6e0:	0f b6 d2             	movzx  edx,dl
c001b6e3:	52                   	push   edx
c001b6e4:	e8 55 fc ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001b6e9:	83 c4 10             	add    esp,0x10
c001b6ec:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b6f2:	eb 05                	jmp    c001b6f9 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b6f4:	be 01 00 00 00       	mov    esi,0x1
c001b6f9:	83 c4 0c             	add    esp,0xc
c001b6fc:	89 f0                	mov    eax,esi
c001b6fe:	5b                   	pop    ebx
c001b6ff:	5e                   	pop    esi
c001b700:	5f                   	pop    edi
c001b701:	5d                   	pop    ebp
c001b702:	c3                   	ret    
c001b703:	90                   	nop

c001b704 <ATAPI::write(unsigned long long, int, void*)>:
c001b704:	b8 03 00 00 00       	mov    eax,0x3
c001b709:	c3                   	ret    

c001b70a <ATAPI::close(int, int, void*)>:
c001b70a:	83 ec 0c             	sub    esp,0xc
c001b70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b711:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b717:	85 c0                	test   eax,eax
c001b719:	74 0c                	je     c001b727 <ATAPI::close(int, int, void*)+0x1d>
c001b71b:	83 ec 0c             	sub    esp,0xc
c001b71e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b720:	50                   	push   eax
c001b721:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b724:	83 c4 10             	add    esp,0x10
c001b727:	31 c0                	xor    eax,eax
c001b729:	83 c4 0c             	add    esp,0xc
c001b72c:	c3                   	ret    
c001b72d:	90                   	nop

c001b72e <ATAPI::ATAPI()>:
c001b72e:	83 ec 0c             	sub    esp,0xc
c001b731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b735:	83 ec 04             	sub    esp,0x4
c001b738:	68 00 08 00 00       	push   0x800
c001b73d:	68 29 0e 02 c0       	push   0xc0020e29
c001b742:	50                   	push   eax
c001b743:	e8 ce 06 ff ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b748:	83 c4 10             	add    esp,0x10
c001b74b:	ba 44 0d 02 c0       	mov    edx,0xc0020d44
c001b750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b754:	89 10                	mov    DWORD PTR [eax],edx
c001b756:	90                   	nop
c001b757:	83 c4 0c             	add    esp,0xc
c001b75a:	c3                   	ret    
c001b75b:	90                   	nop

c001b75c <ATAPI::readyForCommand()>:
c001b75c:	56                   	push   esi
c001b75d:	53                   	push   ebx
c001b75e:	53                   	push   ebx
c001b75f:	31 db                	xor    ebx,ebx
c001b761:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b765:	51                   	push   ecx
c001b766:	6a 0c                	push   0xc
c001b768:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b76f:	50                   	push   eax
c001b770:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b776:	e8 01 e9 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001b77b:	83 c4 10             	add    esp,0x10
c001b77e:	a8 88                	test   al,0x88
c001b780:	74 25                	je     c001b7a7 <ATAPI::readyForCommand()+0x4b>
c001b782:	43                   	inc    ebx
c001b783:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001b789:	7e da                	jle    c001b765 <ATAPI::readyForCommand()+0x9>
c001b78b:	83 ec 0c             	sub    esp,0xc
c001b78e:	68 5e 01 00 00       	push   0x15e
c001b793:	e8 7c 91 ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001b798:	83 c4 10             	add    esp,0x10
c001b79b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001b7a1:	75 c2                	jne    c001b765 <ATAPI::readyForCommand()+0x9>
c001b7a3:	31 c0                	xor    eax,eax
c001b7a5:	eb 02                	jmp    c001b7a9 <ATAPI::readyForCommand()+0x4d>
c001b7a7:	b0 01                	mov    al,0x1
c001b7a9:	5a                   	pop    edx
c001b7aa:	5b                   	pop    ebx
c001b7ab:	5e                   	pop    esi
c001b7ac:	c3                   	ret    
c001b7ad:	90                   	nop

c001b7ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001b7ae:	55                   	push   ebp
c001b7af:	57                   	push   edi
c001b7b0:	56                   	push   esi
c001b7b1:	53                   	push   ebx
c001b7b2:	83 ec 20             	sub    esp,0x20
c001b7b5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b7b9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b7bd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b7c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b7c5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b7c9:	6a 01                	push   0x1
c001b7cb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b7d2:	50                   	push   eax
c001b7d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b7d9:	e8 ec e9 ff ff       	call   c001a1ca <IDE::enableIRQs(unsigned char, bool)>
c001b7de:	5e                   	pop    esi
c001b7df:	58                   	pop    eax
c001b7e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b7e7:	50                   	push   eax
c001b7e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b7ee:	e8 a3 e7 ff ff       	call   c0019f96 <IDE::prepareInterrupt(unsigned char)>
c001b7f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b7f6:	e8 61 ff ff ff       	call   c001b75c <ATAPI::readyForCommand()>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	84 c0                	test   al,al
c001b800:	75 0a                	jne    c001b80c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001b802:	bb 01 00 00 00       	mov    ebx,0x1
c001b807:	e9 57 02 00 00       	jmp    c001ba63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b80c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001b812:	c1 e0 04             	shl    eax,0x4
c001b815:	0f b6 c0             	movzx  eax,al
c001b818:	50                   	push   eax
c001b819:	6a 06                	push   0x6
c001b81b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b822:	50                   	push   eax
c001b823:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b829:	e8 8e e7 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b82e:	6a 00                	push   0x0
c001b830:	6a 01                	push   0x1
c001b832:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b839:	50                   	push   eax
c001b83a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b840:	e8 77 e7 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b845:	83 c4 20             	add    esp,0x20
c001b848:	0f b6 c3             	movzx  eax,bl
c001b84b:	0f b6 df             	movzx  ebx,bh
c001b84e:	50                   	push   eax
c001b84f:	6a 04                	push   0x4
c001b851:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b858:	50                   	push   eax
c001b859:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b85f:	e8 58 e7 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b864:	53                   	push   ebx
c001b865:	6a 05                	push   0x5
c001b867:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b86e:	50                   	push   eax
c001b86f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b875:	e8 42 e7 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b87a:	83 c4 20             	add    esp,0x20
c001b87d:	68 a0 00 00 00       	push   0xa0
c001b882:	6a 07                	push   0x7
c001b884:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b88b:	50                   	push   eax
c001b88c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b892:	e8 25 e7 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b897:	83 c4 0c             	add    esp,0xc
c001b89a:	6a 01                	push   0x1
c001b89c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b8a3:	50                   	push   eax
c001b8a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8aa:	e8 ab f1 ff ff       	call   c001aa5a <IDE::polling(unsigned char, unsigned int)>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001b8b8:	84 c0                	test   al,al
c001b8ba:	74 23                	je     c001b8df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001b8bc:	0f b6 d8             	movzx  ebx,al
c001b8bf:	0f b6 d2             	movzx  edx,dl
c001b8c2:	53                   	push   ebx
c001b8c3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001b8ca:	50                   	push   eax
c001b8cb:	52                   	push   edx
c001b8cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8d2:	e8 d3 f0 ff ff       	call   c001a9aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b8d7:	83 c4 10             	add    esp,0x10
c001b8da:	e9 84 01 00 00       	jmp    c001ba63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b8df:	0f b6 d2             	movzx  edx,dl
c001b8e2:	53                   	push   ebx
c001b8e3:	53                   	push   ebx
c001b8e4:	52                   	push   edx
c001b8e5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b8eb:	e8 ba e6 ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001b8f0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b8f4:	b9 06 00 00 00       	mov    ecx,0x6
c001b8f9:	89 c2                	mov    edx,eax
c001b8fb:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001b8fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001b902:	83 c4 10             	add    esp,0x10
c001b905:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b90b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001b912:	85 db                	test   ebx,ebx
c001b914:	0f 84 ec 00 00 00    	je     c001ba06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001b91a:	51                   	push   ecx
c001b91b:	51                   	push   ecx
c001b91c:	52                   	push   edx
c001b91d:	50                   	push   eax
c001b91e:	e8 07 e8 ff ff       	call   c001a12a <IDE::waitInterrupt(unsigned char)>
c001b923:	83 c4 10             	add    esp,0x10
c001b926:	84 c0                	test   al,al
c001b928:	0f 84 d4 fe ff ff    	je     c001b802 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001b92e:	56                   	push   esi
c001b92f:	56                   	push   esi
c001b930:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b937:	50                   	push   eax
c001b938:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b93e:	e8 53 e6 ff ff       	call   c0019f96 <IDE::prepareInterrupt(unsigned char)>
c001b943:	83 c4 0c             	add    esp,0xc
c001b946:	6a 04                	push   0x4
c001b948:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b94f:	50                   	push   eax
c001b950:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b956:	e8 21 e7 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001b95b:	83 c4 0c             	add    esp,0xc
c001b95e:	89 c6                	mov    esi,eax
c001b960:	6a 05                	push   0x5
c001b962:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b969:	50                   	push   eax
c001b96a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b970:	e8 07 e7 ff ff       	call   c001a07c <IDE::read(unsigned char, unsigned char)>
c001b975:	89 f1                	mov    ecx,esi
c001b977:	0f b6 c0             	movzx  eax,al
c001b97a:	0f b6 f1             	movzx  esi,cl
c001b97d:	c1 e0 08             	shl    eax,0x8
c001b980:	09 c6                	or     esi,eax
c001b982:	d1 fe                	sar    esi,1
c001b984:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001b990:	74 41                	je     c001b9d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001b992:	31 c9                	xor    ecx,ecx
c001b994:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b99a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001b9a1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001b9a5:	75 0a                	jne    c001b9b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001b9a7:	01 c9                	add    ecx,ecx
c001b9a9:	01 cd                	add    ebp,ecx
c001b9ab:	4b                   	dec    ebx
c001b9ac:	e9 54 ff ff ff       	jmp    c001b905 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001b9b1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001b9b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b9ba:	51                   	push   ecx
c001b9bb:	51                   	push   ecx
c001b9bc:	52                   	push   edx
c001b9bd:	50                   	push   eax
c001b9be:	e8 e7 e5 ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001b9c3:	89 c2                	mov    edx,eax
c001b9c5:	89 f0                	mov    eax,esi
c001b9c7:	66 ef                	out    dx,ax
c001b9c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	41                   	inc    ecx
c001b9d1:	eb c1                	jmp    c001b994 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001b9d3:	31 f6                	xor    esi,esi
c001b9d5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001b9db:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001b9e2:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001b9e6:	75 06                	jne    c001b9ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001b9e8:	01 f6                	add    esi,esi
c001b9ea:	01 f5                	add    ebp,esi
c001b9ec:	eb bd                	jmp    c001b9ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001b9ee:	51                   	push   ecx
c001b9ef:	51                   	push   ecx
c001b9f0:	52                   	push   edx
c001b9f1:	50                   	push   eax
c001b9f2:	e8 b3 e5 ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001b9f7:	89 c2                	mov    edx,eax
c001b9f9:	66 ed                	in     ax,dx
c001b9fb:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ba00:	83 c4 10             	add    esp,0x10
c001ba03:	46                   	inc    esi
c001ba04:	eb cf                	jmp    c001b9d5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ba06:	51                   	push   ecx
c001ba07:	51                   	push   ecx
c001ba08:	52                   	push   edx
c001ba09:	50                   	push   eax
c001ba0a:	e8 1b e7 ff ff       	call   c001a12a <IDE::waitInterrupt(unsigned char)>
c001ba0f:	83 c4 10             	add    esp,0x10
c001ba12:	84 c0                	test   al,al
c001ba14:	0f 84 e8 fd ff ff    	je     c001b802 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ba1a:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ba1f:	52                   	push   edx
c001ba20:	52                   	push   edx
c001ba21:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba28:	50                   	push   eax
c001ba29:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba2f:	e8 62 e5 ff ff       	call   c0019f96 <IDE::prepareInterrupt(unsigned char)>
c001ba34:	83 c4 10             	add    esp,0x10
c001ba37:	50                   	push   eax
c001ba38:	50                   	push   eax
c001ba39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba40:	50                   	push   eax
c001ba41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba47:	e8 5e e5 ff ff       	call   c0019faa <IDE::getBase(unsigned char)>
c001ba4c:	8d 50 07             	lea    edx,[eax+0x7]
c001ba4f:	ec                   	in     al,dx
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	a8 88                	test   al,0x88
c001ba55:	74 0a                	je     c001ba61 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ba57:	4b                   	dec    ebx
c001ba58:	75 dd                	jne    c001ba37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ba5a:	bb 02 00 00 00       	mov    ebx,0x2
c001ba5f:	eb 02                	jmp    c001ba63 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ba61:	31 db                	xor    ebx,ebx
c001ba63:	83 c4 1c             	add    esp,0x1c
c001ba66:	89 d8                	mov    eax,ebx
c001ba68:	5b                   	pop    ebx
c001ba69:	5e                   	pop    esi
c001ba6a:	5f                   	pop    edi
c001ba6b:	5d                   	pop    ebp
c001ba6c:	c3                   	ret    
c001ba6d:	90                   	nop

c001ba6e <ATAPI::diskRemoved()>:
c001ba6e:	53                   	push   ebx
c001ba6f:	83 ec 14             	sub    esp,0x14
c001ba72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba76:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ba7d:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ba83:	e8 28 12 ff ff       	call   c000ccb0 <LogicalDisk::unmount()>
c001ba88:	58                   	pop    eax
c001ba89:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ba8f:	e8 6c 1b ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c001ba94:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ba9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba9e:	83 c4 18             	add    esp,0x18
c001baa1:	5b                   	pop    ebx
c001baa2:	e9 49 1b ff ff       	jmp    c000d5f0 <VCache::invalidateReadBuffer()>
c001baa7:	90                   	nop

c001baa8 <ATAPI::eject()>:
c001baa8:	57                   	push   edi
c001baa9:	b9 03 00 00 00       	mov    ecx,0x3
c001baae:	53                   	push   ebx
c001baaf:	83 ec 14             	sub    esp,0x14
c001bab2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bab6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001baba:	fc                   	cld    
c001babb:	31 c0                	xor    eax,eax
c001babd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001babf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bac4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bac9:	50                   	push   eax
c001baca:	50                   	push   eax
c001bacb:	6a 00                	push   0x0
c001bacd:	6a 00                	push   0x0
c001bacf:	6a 00                	push   0x0
c001bad1:	6a 02                	push   0x2
c001bad3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bad7:	50                   	push   eax
c001bad8:	53                   	push   ebx
c001bad9:	e8 d0 fc ff ff       	call   c001b7ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bade:	83 c4 14             	add    esp,0x14
c001bae1:	53                   	push   ebx
c001bae2:	e8 87 ff ff ff       	call   c001ba6e <ATAPI::diskRemoved()>
c001bae7:	83 c4 24             	add    esp,0x24
c001baea:	31 c0                	xor    eax,eax
c001baec:	5b                   	pop    ebx
c001baed:	5f                   	pop    edi
c001baee:	c3                   	ret    
c001baef:	90                   	nop

c001baf0 <ATAPI::diskInserted()>:
c001baf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baf4:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bafb:	c3                   	ret    

c001bafc <ATAPI::detectMedia()>:
c001bafc:	56                   	push   esi
c001bafd:	53                   	push   ebx
c001bafe:	83 ec 28             	sub    esp,0x28
c001bb01:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bb05:	6a 0c                	push   0xc
c001bb07:	6a 00                	push   0x0
c001bb09:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bb0d:	56                   	push   esi
c001bb0e:	e8 bd 49 fe ff       	call   c00004d0 <memset>
c001bb13:	58                   	pop    eax
c001bb14:	5a                   	pop    edx
c001bb15:	6a 00                	push   0x0
c001bb17:	6a 00                	push   0x0
c001bb19:	6a 00                	push   0x0
c001bb1b:	6a 00                	push   0x0
c001bb1d:	56                   	push   esi
c001bb1e:	53                   	push   ebx
c001bb1f:	e8 8a fc ff ff       	call   c001b7ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bb24:	83 c4 1c             	add    esp,0x1c
c001bb27:	6a 0c                	push   0xc
c001bb29:	6a 00                	push   0x0
c001bb2b:	56                   	push   esi
c001bb2c:	e8 9f 49 fe ff       	call   c00004d0 <memset>
c001bb31:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bb36:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bb3b:	59                   	pop    ecx
c001bb3c:	58                   	pop    eax
c001bb3d:	6a 01                	push   0x1
c001bb3f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bb43:	50                   	push   eax
c001bb44:	6a 00                	push   0x0
c001bb46:	6a 12                	push   0x12
c001bb48:	56                   	push   esi
c001bb49:	53                   	push   ebx
c001bb4a:	e8 5f fc ff ff       	call   c001b7ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bb4f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bb53:	83 c4 20             	add    esp,0x20
c001bb56:	83 e0 7f             	and    eax,0x7f
c001bb59:	3c 70                	cmp    al,0x70
c001bb5b:	74 15                	je     c001bb72 <ATAPI::detectMedia()+0x76>
c001bb5d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bb64:	75 0c                	jne    c001bb72 <ATAPI::detectMedia()+0x76>
c001bb66:	83 ec 0c             	sub    esp,0xc
c001bb69:	53                   	push   ebx
c001bb6a:	e8 81 ff ff ff       	call   c001baf0 <ATAPI::diskInserted()>
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bb76:	83 e0 0f             	and    eax,0xf
c001bb79:	3c 02                	cmp    al,0x2
c001bb7b:	75 1b                	jne    c001bb98 <ATAPI::detectMedia()+0x9c>
c001bb7d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bb82:	75 2d                	jne    c001bbb1 <ATAPI::detectMedia()+0xb5>
c001bb84:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bb8b:	74 24                	je     c001bbb1 <ATAPI::detectMedia()+0xb5>
c001bb8d:	83 ec 0c             	sub    esp,0xc
c001bb90:	53                   	push   ebx
c001bb91:	e8 d8 fe ff ff       	call   c001ba6e <ATAPI::diskRemoved()>
c001bb96:	eb 16                	jmp    c001bbae <ATAPI::detectMedia()+0xb2>
c001bb98:	84 c0                	test   al,al
c001bb9a:	75 15                	jne    c001bbb1 <ATAPI::detectMedia()+0xb5>
c001bb9c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bba3:	75 0c                	jne    c001bbb1 <ATAPI::detectMedia()+0xb5>
c001bba5:	83 ec 0c             	sub    esp,0xc
c001bba8:	53                   	push   ebx
c001bba9:	e8 42 ff ff ff       	call   c001baf0 <ATAPI::diskInserted()>
c001bbae:	83 c4 10             	add    esp,0x10
c001bbb1:	83 c4 24             	add    esp,0x24
c001bbb4:	5b                   	pop    ebx
c001bbb5:	5e                   	pop    esi
c001bbb6:	c3                   	ret    
c001bbb7:	90                   	nop

c001bbb8 <ATAPI::open(int, int, void*)>:
c001bbb8:	56                   	push   esi
c001bbb9:	53                   	push   ebx
c001bbba:	50                   	push   eax
c001bbbb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bbc7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bbcd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bbd3:	c1 e0 06             	shl    eax,0x6
c001bbd6:	01 d0                	add    eax,edx
c001bbd8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bbdf:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bbe5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bbec:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bbf6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bbfc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001bc03:	6a 04                	push   0x4
c001bc05:	6a 0c                	push   0xc
c001bc07:	51                   	push   ecx
c001bc08:	52                   	push   edx
c001bc09:	e8 ae e3 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0e:	90                   	nop
c001bc0f:	90                   	nop
c001bc10:	6a 00                	push   0x0
c001bc12:	6a 0c                	push   0xc
c001bc14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc1b:	50                   	push   eax
c001bc1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bc22:	e8 95 e3 ff ff       	call   c0019fbc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc27:	83 c4 14             	add    esp,0x14
c001bc2a:	68 78 01 00 00       	push   0x178
c001bc2f:	e8 41 bc fe ff       	call   c0007875 <malloc>
c001bc34:	83 c4 0c             	add    esp,0xc
c001bc37:	89 c6                	mov    esi,eax
c001bc39:	6a 00                	push   0x0
c001bc3b:	68 ff ff ff 7f       	push   0x7fffffff
c001bc40:	6a 00                	push   0x0
c001bc42:	6a 00                	push   0x0
c001bc44:	53                   	push   ebx
c001bc45:	68 db 0e 02 c0       	push   0xc0020edb
c001bc4a:	50                   	push   eax
c001bc4b:	e8 a2 0e ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001bc50:	83 c4 14             	add    esp,0x14
c001bc53:	56                   	push   esi
c001bc54:	e8 59 0f ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c001bc59:	5a                   	pop    edx
c001bc5a:	0f be c0             	movsx  eax,al
c001bc5d:	59                   	pop    ecx
c001bc5e:	50                   	push   eax
c001bc5f:	68 2c 0d 02 c0       	push   0xc0020d2c
c001bc64:	e8 a1 e9 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001bc69:	58                   	pop    eax
c001bc6a:	5a                   	pop    edx
c001bc6b:	56                   	push   esi
c001bc6c:	53                   	push   ebx
c001bc6d:	e8 d6 fd fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001bc72:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001bc78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc7b:	e8 fe 01 ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001bc80:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bc87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc8a:	e8 6d fe ff ff       	call   c001bafc <ATAPI::detectMedia()>
c001bc8f:	83 c4 14             	add    esp,0x14
c001bc92:	31 c0                	xor    eax,eax
c001bc94:	5b                   	pop    ebx
c001bc95:	5e                   	pop    esi
c001bc96:	c3                   	ret    
c001bc97:	90                   	nop

c001bc98 <ATAPI::read(unsigned long long, int, void*)>:
c001bc98:	55                   	push   ebp
c001bc99:	57                   	push   edi
c001bc9a:	56                   	push   esi
c001bc9b:	53                   	push   ebx
c001bc9c:	83 ec 1c             	sub    esp,0x1c
c001bc9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bca3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bca7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001bcab:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bcb2:	74 3c                	je     c001bcf0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001bcb4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bcb8:	b9 03 00 00 00       	mov    ecx,0x3
c001bcbd:	fc                   	cld    
c001bcbe:	31 c0                	xor    eax,eax
c001bcc0:	0f ce                	bswap  esi
c001bcc2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bcc4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001bcc9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001bccd:	89 e8                	mov    eax,ebp
c001bccf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bcd3:	50                   	push   eax
c001bcd4:	50                   	push   eax
c001bcd5:	55                   	push   ebp
c001bcd6:	c1 e5 0b             	shl    ebp,0xb
c001bcd9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcdd:	6a 00                	push   0x0
c001bcdf:	55                   	push   ebp
c001bce0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bce4:	50                   	push   eax
c001bce5:	53                   	push   ebx
c001bce6:	e8 c3 fa ff ff       	call   c001b7ae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bceb:	83 c4 20             	add    esp,0x20
c001bcee:	eb 1a                	jmp    c001bd0a <ATAPI::read(unsigned long long, int, void*)+0x72>
c001bcf0:	83 ec 0c             	sub    esp,0xc
c001bcf3:	53                   	push   ebx
c001bcf4:	e8 03 fe ff ff       	call   c001bafc <ATAPI::detectMedia()>
c001bcf9:	83 c4 10             	add    esp,0x10
c001bcfc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd03:	75 af                	jne    c001bcb4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001bd05:	b8 02 00 00 00       	mov    eax,0x2
c001bd0a:	83 c4 1c             	add    esp,0x1c
c001bd0d:	5b                   	pop    ebx
c001bd0e:	5e                   	pop    esi
c001bd0f:	5f                   	pop    edi
c001bd10:	5d                   	pop    ebp
c001bd11:	c3                   	ret    

c001bd12 <SATA::close(int, int, void*)>:
c001bd12:	83 ec 0c             	sub    esp,0xc
c001bd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd19:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd1f:	85 c0                	test   eax,eax
c001bd21:	74 0c                	je     c001bd2f <SATA::close(int, int, void*)+0x1d>
c001bd23:	83 ec 0c             	sub    esp,0xc
c001bd26:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd28:	50                   	push   eax
c001bd29:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bd2c:	83 c4 10             	add    esp,0x10
c001bd2f:	31 c0                	xor    eax,eax
c001bd31:	83 c4 0c             	add    esp,0xc
c001bd34:	c3                   	ret    
c001bd35:	90                   	nop

c001bd36 <SATA::powerSaving(PowerSavingLevel)>:
c001bd36:	c3                   	ret    
c001bd37:	90                   	nop

c001bd38 <SATA::open(int, int, void*)>:
c001bd38:	56                   	push   esi
c001bd39:	53                   	push   ebx
c001bd3a:	50                   	push   eax
c001bd3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd43:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bd4d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001bd53:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001bd5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd61:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bd6b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001bd71:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bd78:	e8 d4 bd fe ff       	call   c0007b51 <Phys::allocatePage()>
c001bd7d:	89 c6                	mov    esi,eax
c001bd7f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bd85:	81 c6 00 10 00 00    	add    esi,0x1000
c001bd8b:	e8 c1 bd fe ff       	call   c0007b51 <Phys::allocatePage()>
c001bd90:	39 c6                	cmp    esi,eax
c001bd92:	74 10                	je     c001bda4 <SATA::open(int, int, void*)+0x6c>
c001bd94:	83 ec 0c             	sub    esp,0xc
c001bd97:	68 74 0d 02 c0       	push   0xc0020d74
c001bd9c:	e8 6a 45 ff ff       	call   c001030b <KePanic(char const*)>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	83 ec 0c             	sub    esp,0xc
c001bda7:	6a 02                	push   0x2
c001bda9:	e8 9f d5 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001bdae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bdb4:	6a 03                	push   0x3
c001bdb6:	50                   	push   eax
c001bdb7:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001bdbd:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001bdc3:	e8 48 dc fe ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bdc8:	83 c4 14             	add    esp,0x14
c001bdcb:	53                   	push   ebx
c001bdcc:	e8 ad 00 ff ff       	call   c000be7e <PhysicalDisk::startCache()>
c001bdd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdd4:	e8 59 11 ff ff       	call   c000cf32 <createPartitionsForDisk(PhysicalDisk*)>
c001bdd9:	83 c4 14             	add    esp,0x14
c001bddc:	31 c0                	xor    eax,eax
c001bdde:	5b                   	pop    ebx
c001bddf:	5e                   	pop    esi
c001bde0:	c3                   	ret    
c001bde1:	90                   	nop

c001bde2 <SATA::SATA()>:
c001bde2:	83 ec 0c             	sub    esp,0xc
c001bde5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde9:	83 ec 04             	sub    esp,0x4
c001bdec:	68 00 02 00 00       	push   0x200
c001bdf1:	68 88 0d 02 c0       	push   0xc0020d88
c001bdf6:	50                   	push   eax
c001bdf7:	e8 1a 00 ff ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	ba f8 0d 02 c0       	mov    edx,0xc0020df8
c001be04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be08:	89 10                	mov    DWORD PTR [eax],edx
c001be0a:	90                   	nop
c001be0b:	83 c4 0c             	add    esp,0xc
c001be0e:	c3                   	ret    
c001be0f:	90                   	nop

c001be10 <SATA::access(unsigned long long, int, void*, bool)>:
c001be10:	55                   	push   ebp
c001be11:	57                   	push   edi
c001be12:	56                   	push   esi
c001be13:	53                   	push   ebx
c001be14:	83 ec 2c             	sub    esp,0x2c
c001be17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001be1b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001be1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be23:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001be27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001be2b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001be30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be34:	7e 10                	jle    c001be46 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001be36:	83 ec 0c             	sub    esp,0xc
c001be39:	68 98 0d 02 c0       	push   0xc0020d98
c001be3e:	e8 c8 44 ff ff       	call   c001030b <KePanic(char const*)>
c001be43:	83 c4 10             	add    esp,0x10
c001be46:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001be4c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001be52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001be58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be5c:	89 d0                	mov    eax,edx
c001be5e:	c1 e0 07             	shl    eax,0x7
c001be61:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001be65:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001be6f:	51                   	push   ecx
c001be70:	8d 42 02             	lea    eax,[edx+0x2]
c001be73:	51                   	push   ecx
c001be74:	c1 e0 07             	shl    eax,0x7
c001be77:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001be7b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001be7f:	50                   	push   eax
c001be80:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001be86:	e8 b9 ec ff ff       	call   c001ab44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001be8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001be97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be9b:	0f 84 4f 01 00 00    	je     c001bff0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001bea1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bea5:	c1 e0 09             	shl    eax,0x9
c001bea8:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001bead:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001beb1:	74 0e                	je     c001bec1 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001beb3:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001beb9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001bebd:	89 c1                	mov    ecx,eax
c001bebf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bec1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bec5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001becb:	8d 42 02             	lea    eax,[edx+0x2]
c001bece:	c1 e0 07             	shl    eax,0x7
c001bed1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001bed5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bed7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001bedd:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001bee3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bee7:	c1 e1 05             	shl    ecx,0x5
c001beea:	01 c8                	add    eax,ecx
c001beec:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001bef0:	83 e1 01             	and    ecx,0x1
c001bef3:	89 ce                	mov    esi,ecx
c001bef5:	8a 08                	mov    cl,BYTE PTR [eax]
c001bef7:	c1 e6 06             	shl    esi,0x6
c001befa:	83 e1 bf             	and    ecx,0xffffffbf
c001befd:	09 f1                	or     ecx,esi
c001beff:	88 08                	mov    BYTE PTR [eax],cl
c001bf01:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bf03:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001bf09:	81 c9 05 00 01 00    	or     ecx,0x10005
c001bf0f:	89 08                	mov    DWORD PTR [eax],ecx
c001bf11:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001bf17:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001bf1d:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001bf23:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001bf26:	50                   	push   eax
c001bf27:	68 90 00 00 00       	push   0x90
c001bf2c:	6a 00                	push   0x0
c001bf2e:	56                   	push   esi
c001bf2f:	e8 9c 45 fe ff       	call   c00004d0 <memset>
c001bf34:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bf3a:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001bf3e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001bf44:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001bf48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bf4c:	83 c4 10             	add    esp,0x10
c001bf4f:	48                   	dec    eax
c001bf50:	25 ff ff 3f 00       	and    eax,0x3fffff
c001bf55:	89 c1                	mov    ecx,eax
c001bf57:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001bf5d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001bf62:	09 c8                	or     eax,ecx
c001bf64:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001bf6a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001bf6d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001bf74:	66 25 00 7f          	and    ax,0x7f00
c001bf78:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf7c:	66 0d 27 80          	or     ax,0x8027
c001bf80:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001bf85:	66 89 06             	mov    WORD PTR [esi],ax
c001bf88:	19 c0                	sbb    eax,eax
c001bf8a:	83 e0 f0             	and    eax,0xfffffff0
c001bf8d:	83 c0 35             	add    eax,0x35
c001bf90:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001bf93:	89 e8                	mov    eax,ebp
c001bf95:	c1 e8 10             	shr    eax,0x10
c001bf98:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001bf9b:	89 e8                	mov    eax,ebp
c001bf9d:	c1 e8 18             	shr    eax,0x18
c001bfa0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001bfa3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001bfa7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001bfaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bfae:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001bfb1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bfb5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001bfb9:	89 d6                	mov    esi,edx
c001bfbb:	31 c0                	xor    eax,eax
c001bfbd:	c1 e6 07             	shl    esi,0x7
c001bfc0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bfc4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001bfca:	80 e1 88             	and    cl,0x88
c001bfcd:	74 0a                	je     c001bfd9 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001bfcf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001bfd4:	74 0a                	je     c001bfe0 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001bfd6:	40                   	inc    eax
c001bfd7:	eb eb                	jmp    c001bfc4 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001bfd9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001bfde:	75 17                	jne    c001bff7 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001bfe0:	83 ec 0c             	sub    esp,0xc
c001bfe3:	68 d1 0d 02 c0       	push   0xc0020dd1
c001bfe8:	e8 1d e6 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001bfed:	83 c4 10             	add    esp,0x10
c001bff0:	b8 01 00 00 00       	mov    eax,0x1
c001bff5:	eb 5d                	jmp    c001c054 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001bff7:	b8 01 00 00 00       	mov    eax,0x1
c001bffc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c000:	c1 e2 07             	shl    edx,0x7
c001c003:	d3 e0                	shl    eax,cl
c001c005:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c009:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c00f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c015:	85 c8                	test   eax,ecx
c001c017:	74 16                	je     c001c02f <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c019:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c01f:	0f ba e1 1e          	bt     ecx,0x1e
c001c023:	73 ea                	jae    c001c00f <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c025:	83 ec 0c             	sub    esp,0xc
c001c028:	68 df 0d 02 c0       	push   0xc0020ddf
c001c02d:	eb b9                	jmp    c001bfe8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c02f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c035:	0f ba e0 1e          	bt     eax,0x1e
c001c039:	72 b5                	jb     c001bff0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c03b:	31 c0                	xor    eax,eax
c001c03d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c042:	75 10                	jne    c001c054 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c044:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c04a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c04e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c052:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c054:	83 c4 2c             	add    esp,0x2c
c001c057:	5b                   	pop    ebx
c001c058:	5e                   	pop    esi
c001c059:	5f                   	pop    edi
c001c05a:	5d                   	pop    ebp
c001c05b:	c3                   	ret    

c001c05c <SATA::read(unsigned long long, int, void*)>:
c001c05c:	55                   	push   ebp
c001c05d:	57                   	push   edi
c001c05e:	56                   	push   esi
c001c05f:	be 04 00 00 00       	mov    esi,0x4
c001c064:	53                   	push   ebx
c001c065:	83 ec 0c             	sub    esp,0xc
c001c068:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c06c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c070:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c077:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c07b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c081:	0f 87 1a 02 00 00    	ja     c001c2a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001c087:	be 06 00 00 00       	mov    esi,0x6
c001c08c:	85 c9                	test   ecx,ecx
c001c08e:	0f 84 0d 02 00 00    	je     c001c2a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001c094:	56                   	push   esi
c001c095:	56                   	push   esi
c001c096:	6a 00                	push   0x0
c001c098:	51                   	push   ecx
c001c099:	53                   	push   ebx
c001c09a:	52                   	push   edx
c001c09b:	50                   	push   eax
c001c09c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0a0:	e8 6b fd ff ff       	call   c001be10 <SATA::access(unsigned long long, int, void*, bool)>
c001c0a5:	83 c4 20             	add    esp,0x20
c001c0a8:	89 c6                	mov    esi,eax
c001c0aa:	85 c0                	test   eax,eax
c001c0ac:	0f 85 ea 01 00 00    	jne    c001c29c <SATA::read(unsigned long long, int, void*)+0x240>
c001c0b2:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c0b8:	bb 0a 00 00 00       	mov    ebx,0xa
c001c0bd:	50                   	push   eax
c001c0be:	50                   	push   eax
c001c0bf:	6a 0f                	push   0xf
c001c0c1:	6a 00                	push   0x0
c001c0c3:	e8 87 f2 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c0c8:	5a                   	pop    edx
c001c0c9:	0f b6 c0             	movzx  eax,al
c001c0cc:	59                   	pop    ecx
c001c0cd:	b9 10 27 00 00       	mov    ecx,0x2710
c001c0d2:	50                   	push   eax
c001c0d3:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c0d8:	99                   	cdq    
c001c0d9:	f7 f9                	idiv   ecx
c001c0db:	99                   	cdq    
c001c0dc:	f7 fb                	idiv   ebx
c001c0de:	8d 42 30             	lea    eax,[edx+0x30]
c001c0e1:	0f b6 c0             	movzx  eax,al
c001c0e4:	50                   	push   eax
c001c0e5:	e8 54 f2 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c0ea:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c0f0:	5f                   	pop    edi
c001c0f1:	5d                   	pop    ebp
c001c0f2:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c0f7:	6a 0f                	push   0xf
c001c0f9:	6a 00                	push   0x0
c001c0fb:	e8 4f f2 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c100:	5a                   	pop    edx
c001c101:	0f b6 c0             	movzx  eax,al
c001c104:	59                   	pop    ecx
c001c105:	50                   	push   eax
c001c106:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c10b:	99                   	cdq    
c001c10c:	f7 fd                	idiv   ebp
c001c10e:	99                   	cdq    
c001c10f:	f7 fb                	idiv   ebx
c001c111:	8d 42 30             	lea    eax,[edx+0x30]
c001c114:	0f b6 c0             	movzx  eax,al
c001c117:	50                   	push   eax
c001c118:	e8 21 f2 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c11d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c123:	5f                   	pop    edi
c001c124:	bf 64 00 00 00       	mov    edi,0x64
c001c129:	58                   	pop    eax
c001c12a:	6a 0f                	push   0xf
c001c12c:	6a 00                	push   0x0
c001c12e:	e8 1c f2 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c133:	5a                   	pop    edx
c001c134:	0f b6 c0             	movzx  eax,al
c001c137:	59                   	pop    ecx
c001c138:	50                   	push   eax
c001c139:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c13e:	99                   	cdq    
c001c13f:	f7 ff                	idiv   edi
c001c141:	99                   	cdq    
c001c142:	f7 fb                	idiv   ebx
c001c144:	8d 42 30             	lea    eax,[edx+0x30]
c001c147:	0f b6 c0             	movzx  eax,al
c001c14a:	50                   	push   eax
c001c14b:	e8 ee f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c150:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c156:	58                   	pop    eax
c001c157:	5a                   	pop    edx
c001c158:	6a 0f                	push   0xf
c001c15a:	6a 00                	push   0x0
c001c15c:	e8 ee f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c161:	59                   	pop    ecx
c001c162:	0f b6 c0             	movzx  eax,al
c001c165:	5a                   	pop    edx
c001c166:	50                   	push   eax
c001c167:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c16c:	99                   	cdq    
c001c16d:	f7 fb                	idiv   ebx
c001c16f:	99                   	cdq    
c001c170:	f7 fb                	idiv   ebx
c001c172:	8d 42 30             	lea    eax,[edx+0x30]
c001c175:	0f b6 c0             	movzx  eax,al
c001c178:	50                   	push   eax
c001c179:	e8 c0 f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c17e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c184:	59                   	pop    ecx
c001c185:	58                   	pop    eax
c001c186:	6a 0f                	push   0xf
c001c188:	6a 00                	push   0x0
c001c18a:	e8 c0 f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c18f:	5a                   	pop    edx
c001c190:	0f b6 c0             	movzx  eax,al
c001c193:	59                   	pop    ecx
c001c194:	50                   	push   eax
c001c195:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c19a:	99                   	cdq    
c001c19b:	f7 fb                	idiv   ebx
c001c19d:	8d 42 30             	lea    eax,[edx+0x30]
c001c1a0:	0f b6 c0             	movzx  eax,al
c001c1a3:	50                   	push   eax
c001c1a4:	e8 95 f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c1a9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c1af:	58                   	pop    eax
c001c1b0:	5a                   	pop    edx
c001c1b1:	6a 0f                	push   0xf
c001c1b3:	6a 00                	push   0x0
c001c1b5:	e8 95 f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c1ba:	59                   	pop    ecx
c001c1bb:	0f b6 c0             	movzx  eax,al
c001c1be:	5a                   	pop    edx
c001c1bf:	b9 10 27 00 00       	mov    ecx,0x2710
c001c1c4:	50                   	push   eax
c001c1c5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c1ca:	99                   	cdq    
c001c1cb:	f7 f9                	idiv   ecx
c001c1cd:	99                   	cdq    
c001c1ce:	f7 fb                	idiv   ebx
c001c1d0:	8d 42 30             	lea    eax,[edx+0x30]
c001c1d3:	0f b6 c0             	movzx  eax,al
c001c1d6:	50                   	push   eax
c001c1d7:	e8 62 f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c1dc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1e2:	59                   	pop    ecx
c001c1e3:	58                   	pop    eax
c001c1e4:	6a 0f                	push   0xf
c001c1e6:	6a 00                	push   0x0
c001c1e8:	e8 62 f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c1ed:	5a                   	pop    edx
c001c1ee:	0f b6 c0             	movzx  eax,al
c001c1f1:	59                   	pop    ecx
c001c1f2:	50                   	push   eax
c001c1f3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c1f8:	99                   	cdq    
c001c1f9:	f7 fd                	idiv   ebp
c001c1fb:	99                   	cdq    
c001c1fc:	f7 fb                	idiv   ebx
c001c1fe:	8d 42 30             	lea    eax,[edx+0x30]
c001c201:	0f b6 c0             	movzx  eax,al
c001c204:	50                   	push   eax
c001c205:	e8 34 f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c20a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c210:	5d                   	pop    ebp
c001c211:	58                   	pop    eax
c001c212:	6a 0f                	push   0xf
c001c214:	6a 00                	push   0x0
c001c216:	e8 34 f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c21b:	5a                   	pop    edx
c001c21c:	0f b6 c0             	movzx  eax,al
c001c21f:	59                   	pop    ecx
c001c220:	50                   	push   eax
c001c221:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c226:	99                   	cdq    
c001c227:	f7 ff                	idiv   edi
c001c229:	99                   	cdq    
c001c22a:	f7 fb                	idiv   ebx
c001c22c:	8d 42 30             	lea    eax,[edx+0x30]
c001c22f:	0f b6 c0             	movzx  eax,al
c001c232:	50                   	push   eax
c001c233:	e8 06 f1 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c238:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c23e:	5f                   	pop    edi
c001c23f:	5d                   	pop    ebp
c001c240:	6a 0f                	push   0xf
c001c242:	6a 00                	push   0x0
c001c244:	e8 06 f1 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c249:	5a                   	pop    edx
c001c24a:	0f b6 c0             	movzx  eax,al
c001c24d:	59                   	pop    ecx
c001c24e:	50                   	push   eax
c001c24f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c254:	99                   	cdq    
c001c255:	f7 fb                	idiv   ebx
c001c257:	99                   	cdq    
c001c258:	f7 fb                	idiv   ebx
c001c25a:	8d 42 30             	lea    eax,[edx+0x30]
c001c25d:	0f b6 c0             	movzx  eax,al
c001c260:	50                   	push   eax
c001c261:	e8 d8 f0 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c266:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c26c:	5f                   	pop    edi
c001c26d:	5d                   	pop    ebp
c001c26e:	6a 0f                	push   0xf
c001c270:	6a 00                	push   0x0
c001c272:	e8 d8 f0 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c277:	5a                   	pop    edx
c001c278:	0f b6 c0             	movzx  eax,al
c001c27b:	59                   	pop    ecx
c001c27c:	50                   	push   eax
c001c27d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c282:	99                   	cdq    
c001c283:	f7 fb                	idiv   ebx
c001c285:	83 c2 30             	add    edx,0x30
c001c288:	0f b6 d2             	movzx  edx,dl
c001c28b:	52                   	push   edx
c001c28c:	e8 ad f0 ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c29a:	eb 05                	jmp    c001c2a1 <SATA::read(unsigned long long, int, void*)+0x245>
c001c29c:	be 01 00 00 00       	mov    esi,0x1
c001c2a1:	83 c4 0c             	add    esp,0xc
c001c2a4:	89 f0                	mov    eax,esi
c001c2a6:	5b                   	pop    ebx
c001c2a7:	5e                   	pop    esi
c001c2a8:	5f                   	pop    edi
c001c2a9:	5d                   	pop    ebp
c001c2aa:	c3                   	ret    
c001c2ab:	90                   	nop

c001c2ac <SATA::write(unsigned long long, int, void*)>:
c001c2ac:	55                   	push   ebp
c001c2ad:	b8 04 00 00 00       	mov    eax,0x4
c001c2b2:	57                   	push   edi
c001c2b3:	56                   	push   esi
c001c2b4:	53                   	push   ebx
c001c2b5:	83 ec 1c             	sub    esp,0x1c
c001c2b8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c2bc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c2c0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c2c3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c2c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c2cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c2d1:	0f 87 32 02 00 00    	ja     c001c509 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c2d7:	b8 06 00 00 00       	mov    eax,0x6
c001c2dc:	85 ff                	test   edi,edi
c001c2de:	0f 84 25 02 00 00    	je     c001c509 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c2e4:	89 ee                	mov    esi,ebp
c001c2e6:	c1 e6 09             	shl    esi,0x9
c001c2e9:	01 fe                	add    esi,edi
c001c2eb:	89 c8                	mov    eax,ecx
c001c2ed:	89 da                	mov    edx,ebx
c001c2ef:	83 c0 01             	add    eax,0x1
c001c2f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2f6:	83 d2 00             	adc    edx,0x0
c001c2f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c2fd:	50                   	push   eax
c001c2fe:	50                   	push   eax
c001c2ff:	6a 01                	push   0x1
c001c301:	57                   	push   edi
c001c302:	81 c7 00 02 00 00    	add    edi,0x200
c001c308:	6a 01                	push   0x1
c001c30a:	53                   	push   ebx
c001c30b:	51                   	push   ecx
c001c30c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c310:	e8 fb fa ff ff       	call   c001be10 <SATA::access(unsigned long long, int, void*, bool)>
c001c315:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c319:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c31d:	83 c4 20             	add    esp,0x20
c001c320:	39 f7                	cmp    edi,esi
c001c322:	75 c7                	jne    c001c2eb <SATA::write(unsigned long long, int, void*)+0x3f>
c001c324:	bb 0a 00 00 00       	mov    ebx,0xa
c001c329:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c32f:	bd 10 27 00 00       	mov    ebp,0x2710
c001c334:	50                   	push   eax
c001c335:	50                   	push   eax
c001c336:	6a 0f                	push   0xf
c001c338:	6a 00                	push   0x0
c001c33a:	e8 10 f0 ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c33f:	5a                   	pop    edx
c001c340:	0f b6 c0             	movzx  eax,al
c001c343:	59                   	pop    ecx
c001c344:	50                   	push   eax
c001c345:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c34a:	99                   	cdq    
c001c34b:	f7 fd                	idiv   ebp
c001c34d:	99                   	cdq    
c001c34e:	f7 fb                	idiv   ebx
c001c350:	8d 42 30             	lea    eax,[edx+0x30]
c001c353:	0f b6 c0             	movzx  eax,al
c001c356:	50                   	push   eax
c001c357:	e8 e2 ef ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c35c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c362:	5e                   	pop    esi
c001c363:	5f                   	pop    edi
c001c364:	bf e8 03 00 00       	mov    edi,0x3e8
c001c369:	6a 0f                	push   0xf
c001c36b:	6a 00                	push   0x0
c001c36d:	e8 dd ef ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c372:	5a                   	pop    edx
c001c373:	0f b6 c0             	movzx  eax,al
c001c376:	59                   	pop    ecx
c001c377:	50                   	push   eax
c001c378:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c37d:	99                   	cdq    
c001c37e:	f7 ff                	idiv   edi
c001c380:	99                   	cdq    
c001c381:	f7 fb                	idiv   ebx
c001c383:	8d 42 30             	lea    eax,[edx+0x30]
c001c386:	0f b6 c0             	movzx  eax,al
c001c389:	50                   	push   eax
c001c38a:	e8 af ef ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c38f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c395:	5e                   	pop    esi
c001c396:	be 64 00 00 00       	mov    esi,0x64
c001c39b:	58                   	pop    eax
c001c39c:	6a 0f                	push   0xf
c001c39e:	6a 00                	push   0x0
c001c3a0:	e8 aa ef ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c3a5:	5a                   	pop    edx
c001c3a6:	0f b6 c0             	movzx  eax,al
c001c3a9:	59                   	pop    ecx
c001c3aa:	50                   	push   eax
c001c3ab:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c3b0:	99                   	cdq    
c001c3b1:	f7 fe                	idiv   esi
c001c3b3:	99                   	cdq    
c001c3b4:	f7 fb                	idiv   ebx
c001c3b6:	8d 42 30             	lea    eax,[edx+0x30]
c001c3b9:	0f b6 c0             	movzx  eax,al
c001c3bc:	50                   	push   eax
c001c3bd:	e8 7c ef ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c3c2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c3c8:	58                   	pop    eax
c001c3c9:	5a                   	pop    edx
c001c3ca:	6a 0f                	push   0xf
c001c3cc:	6a 00                	push   0x0
c001c3ce:	e8 7c ef ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c3d3:	59                   	pop    ecx
c001c3d4:	0f b6 c0             	movzx  eax,al
c001c3d7:	5a                   	pop    edx
c001c3d8:	50                   	push   eax
c001c3d9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c3de:	99                   	cdq    
c001c3df:	f7 fb                	idiv   ebx
c001c3e1:	99                   	cdq    
c001c3e2:	f7 fb                	idiv   ebx
c001c3e4:	8d 42 30             	lea    eax,[edx+0x30]
c001c3e7:	0f b6 c0             	movzx  eax,al
c001c3ea:	50                   	push   eax
c001c3eb:	e8 4e ef ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c3f0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c3f6:	59                   	pop    ecx
c001c3f7:	58                   	pop    eax
c001c3f8:	6a 0f                	push   0xf
c001c3fa:	6a 00                	push   0x0
c001c3fc:	e8 4e ef ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c401:	5a                   	pop    edx
c001c402:	0f b6 c0             	movzx  eax,al
c001c405:	59                   	pop    ecx
c001c406:	50                   	push   eax
c001c407:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c40c:	99                   	cdq    
c001c40d:	f7 fb                	idiv   ebx
c001c40f:	83 c2 30             	add    edx,0x30
c001c412:	0f b6 d2             	movzx  edx,dl
c001c415:	52                   	push   edx
c001c416:	e8 23 ef ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c41b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c421:	58                   	pop    eax
c001c422:	5a                   	pop    edx
c001c423:	6a 0f                	push   0xf
c001c425:	6a 00                	push   0x0
c001c427:	e8 23 ef ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c42c:	59                   	pop    ecx
c001c42d:	0f b6 c0             	movzx  eax,al
c001c430:	5a                   	pop    edx
c001c431:	50                   	push   eax
c001c432:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c437:	99                   	cdq    
c001c438:	f7 fd                	idiv   ebp
c001c43a:	99                   	cdq    
c001c43b:	f7 fb                	idiv   ebx
c001c43d:	8d 42 30             	lea    eax,[edx+0x30]
c001c440:	0f b6 c0             	movzx  eax,al
c001c443:	50                   	push   eax
c001c444:	e8 f5 ee ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c449:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c44f:	59                   	pop    ecx
c001c450:	5d                   	pop    ebp
c001c451:	6a 0f                	push   0xf
c001c453:	6a 00                	push   0x0
c001c455:	e8 f5 ee ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c45a:	5a                   	pop    edx
c001c45b:	0f b6 c0             	movzx  eax,al
c001c45e:	59                   	pop    ecx
c001c45f:	50                   	push   eax
c001c460:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c465:	99                   	cdq    
c001c466:	f7 ff                	idiv   edi
c001c468:	99                   	cdq    
c001c469:	f7 fb                	idiv   ebx
c001c46b:	8d 42 30             	lea    eax,[edx+0x30]
c001c46e:	0f b6 c0             	movzx  eax,al
c001c471:	50                   	push   eax
c001c472:	e8 c7 ee ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c477:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c47d:	5f                   	pop    edi
c001c47e:	5d                   	pop    ebp
c001c47f:	6a 0f                	push   0xf
c001c481:	6a 00                	push   0x0
c001c483:	e8 c7 ee ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c488:	5a                   	pop    edx
c001c489:	0f b6 c0             	movzx  eax,al
c001c48c:	59                   	pop    ecx
c001c48d:	50                   	push   eax
c001c48e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c493:	99                   	cdq    
c001c494:	f7 fe                	idiv   esi
c001c496:	99                   	cdq    
c001c497:	f7 fb                	idiv   ebx
c001c499:	8d 42 30             	lea    eax,[edx+0x30]
c001c49c:	0f b6 c0             	movzx  eax,al
c001c49f:	50                   	push   eax
c001c4a0:	e8 99 ee ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c4a5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c4ab:	5e                   	pop    esi
c001c4ac:	5f                   	pop    edi
c001c4ad:	6a 0f                	push   0xf
c001c4af:	6a 00                	push   0x0
c001c4b1:	e8 99 ee ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c4b6:	5d                   	pop    ebp
c001c4b7:	0f b6 c0             	movzx  eax,al
c001c4ba:	5a                   	pop    edx
c001c4bb:	50                   	push   eax
c001c4bc:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c4c1:	99                   	cdq    
c001c4c2:	f7 fb                	idiv   ebx
c001c4c4:	99                   	cdq    
c001c4c5:	f7 fb                	idiv   ebx
c001c4c7:	8d 42 30             	lea    eax,[edx+0x30]
c001c4ca:	0f b6 c0             	movzx  eax,al
c001c4cd:	50                   	push   eax
c001c4ce:	e8 6b ee ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c4d3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c4d9:	59                   	pop    ecx
c001c4da:	5e                   	pop    esi
c001c4db:	6a 0f                	push   0xf
c001c4dd:	6a 00                	push   0x0
c001c4df:	e8 6b ee ff ff       	call   c001b34f <combineColours(unsigned char, unsigned char)>
c001c4e4:	5f                   	pop    edi
c001c4e5:	0f b6 c0             	movzx  eax,al
c001c4e8:	5d                   	pop    ebp
c001c4e9:	50                   	push   eax
c001c4ea:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c4ef:	99                   	cdq    
c001c4f0:	f7 fb                	idiv   ebx
c001c4f2:	83 c2 30             	add    edx,0x30
c001c4f5:	0f b6 d2             	movzx  edx,dl
c001c4f8:	52                   	push   edx
c001c4f9:	e8 40 ee ff ff       	call   c001b33e <combineCharAndColour(char, unsigned char)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c507:	31 c0                	xor    eax,eax
c001c509:	83 c4 1c             	add    esp,0x1c
c001c50c:	5b                   	pop    ebx
c001c50d:	5e                   	pop    esi
c001c50e:	5f                   	pop    edi
c001c50f:	5d                   	pop    ebp
c001c510:	c3                   	ret    
c001c511:	90                   	nop

c001c512 <SATAPI::write(unsigned long long, int, void*)>:
c001c512:	b8 03 00 00 00       	mov    eax,0x3
c001c517:	c3                   	ret    

c001c518 <SATAPI::close(int, int, void*)>:
c001c518:	83 ec 0c             	sub    esp,0xc
c001c51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c525:	85 c0                	test   eax,eax
c001c527:	74 0c                	je     c001c535 <SATAPI::close(int, int, void*)+0x1d>
c001c529:	83 ec 0c             	sub    esp,0xc
c001c52c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c52e:	50                   	push   eax
c001c52f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c532:	83 c4 10             	add    esp,0x10
c001c535:	31 c0                	xor    eax,eax
c001c537:	83 c4 0c             	add    esp,0xc
c001c53a:	c3                   	ret    
c001c53b:	90                   	nop

c001c53c <SATAPI::SATAPI()>:
c001c53c:	83 ec 0c             	sub    esp,0xc
c001c53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c543:	83 ec 04             	sub    esp,0x4
c001c546:	68 00 08 00 00       	push   0x800
c001c54b:	68 28 0e 02 c0       	push   0xc0020e28
c001c550:	50                   	push   eax
c001c551:	e8 c0 f8 fe ff       	call   c000be16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c556:	83 c4 10             	add    esp,0x10
c001c559:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c001c55e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c562:	89 10                	mov    DWORD PTR [eax],edx
c001c564:	90                   	nop
c001c565:	83 c4 0c             	add    esp,0xc
c001c568:	c3                   	ret    
c001c569:	90                   	nop

c001c56a <SATAPI::diskRemoved()>:
c001c56a:	c3                   	ret    
c001c56b:	90                   	nop

c001c56c <SATAPI::diskInserted()>:
c001c56c:	83 ec 18             	sub    esp,0x18
c001c56f:	68 34 0e 02 c0       	push   0xc0020e34
c001c574:	e8 91 e0 fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c57d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c584:	83 c4 1c             	add    esp,0x1c
c001c587:	c3                   	ret    

c001c588 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c588:	55                   	push   ebp
c001c589:	57                   	push   edi
c001c58a:	56                   	push   esi
c001c58b:	53                   	push   ebx
c001c58c:	83 ec 34             	sub    esp,0x34
c001c58f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c593:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c597:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c59b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c59f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c5a3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c5a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c5af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5b3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c5b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5bd:	83 c0 02             	add    eax,0x2
c001c5c0:	c1 e0 07             	shl    eax,0x7
c001c5c3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c5c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c5cf:	c1 e0 07             	shl    eax,0x7
c001c5d2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c5d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5da:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c5e4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c5e8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c5ee:	e8 51 e5 ff ff       	call   c001ab44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c5f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5f7:	83 c4 10             	add    esp,0x10
c001c5fa:	b8 01 00 00 00       	mov    eax,0x1
c001c5ff:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c604:	0f 84 49 02 00 00    	je     c001c853 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c60a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c614:	8b 00                	mov    eax,DWORD PTR [eax]
c001c616:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c61c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c622:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c626:	c1 e1 05             	shl    ecx,0x5
c001c629:	01 c8                	add    eax,ecx
c001c62b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c62d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001c633:	81 c9 25 00 01 00    	or     ecx,0x10025
c001c639:	89 08                	mov    DWORD PTR [eax],ecx
c001c63b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c641:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001c647:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001c64d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001c650:	8d 7b 40             	lea    edi,[ebx+0x40]
c001c653:	50                   	push   eax
c001c654:	68 90 00 00 00       	push   0x90
c001c659:	6a 00                	push   0x0
c001c65b:	53                   	push   ebx
c001c65c:	e8 6f 3e fe ff       	call   c00004d0 <memset>
c001c661:	b9 0c 00 00 00       	mov    ecx,0xc
c001c666:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001c66a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c66c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001c672:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001c676:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001c67c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001c680:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c684:	48                   	dec    eax
c001c685:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c68a:	89 c1                	mov    ecx,eax
c001c68c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001c692:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c697:	09 c8                	or     eax,ecx
c001c699:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001c69f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001c6a2:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001c6a9:	66 25 00 7f          	and    ax,0x7f00
c001c6ad:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c6b1:	66 0d 27 80          	or     ax,0x8027
c001c6b5:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001c6b9:	66 89 03             	mov    WORD PTR [ebx],ax
c001c6bc:	89 d0                	mov    eax,edx
c001c6be:	c1 ea 18             	shr    edx,0x18
c001c6c1:	c1 e8 10             	shr    eax,0x10
c001c6c4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001c6c7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001c6ca:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c6ce:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001c6d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6d5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001c6d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001c6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6e7:	31 c0                	xor    eax,eax
c001c6e9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001c6ef:	80 e1 88             	and    cl,0x88
c001c6f2:	74 0a                	je     c001c6fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001c6f4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c6f9:	74 0a                	je     c001c705 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001c6fb:	40                   	inc    eax
c001c6fc:	eb eb                	jmp    c001c6e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001c6fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c703:	75 43                	jne    c001c748 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001c705:	83 ec 0c             	sub    esp,0xc
c001c708:	68 4c 0e 02 c0       	push   0xc0020e4c
c001c70d:	e8 f8 de fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c712:	58                   	pop    eax
c001c713:	5a                   	pop    edx
c001c714:	68 61 0e 02 c0       	push   0xc0020e61
c001c719:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001c71f:	e8 c8 c0 fe ff       	call   c00087ec <VgaText::puts(char const*)>
c001c724:	59                   	pop    ecx
c001c725:	5b                   	pop    ebx
c001c726:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c72a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c730:	e8 a9 e4 ff ff       	call   c001abde <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c735:	5e                   	pop    esi
c001c736:	5f                   	pop    edi
c001c737:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c73b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c741:	e8 78 e4 ff ff       	call   c001abbe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c746:	eb 48                	jmp    c001c790 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001c748:	be 01 00 00 00       	mov    esi,0x1
c001c74d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c751:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c755:	d3 e6                	shl    esi,cl
c001c757:	c1 e7 07             	shl    edi,0x7
c001c75a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001c760:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001c765:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001c769:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001c76f:	85 c6                	test   esi,eax
c001c771:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001c777:	0f 84 a3 00 00 00    	je     c001c820 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001c77d:	0f ba e0 1e          	bt     eax,0x1e
c001c781:	73 1a                	jae    c001c79d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001c783:	83 ec 0c             	sub    esp,0xc
c001c786:	68 73 0e 02 c0       	push   0xc0020e73
c001c78b:	e8 7a de fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c790:	83 c4 10             	add    esp,0x10
c001c793:	b8 01 00 00 00       	mov    eax,0x1
c001c798:	e9 b6 00 00 00       	jmp    c001c853 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c79d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001c7a3:	83 f8 0d             	cmp    eax,0xd
c001c7a6:	77 0a                	ja     c001c7b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001c7a8:	83 ec 0c             	sub    esp,0xc
c001c7ab:	68 c8 00 00 00       	push   0xc8
c001c7b0:	eb 28                	jmp    c001c7da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c7b2:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001c7b8:	83 f8 0d             	cmp    eax,0xd
c001c7bb:	77 0a                	ja     c001c7c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001c7bd:	83 ec 0c             	sub    esp,0xc
c001c7c0:	68 58 02 00 00       	push   0x258
c001c7c5:	eb 13                	jmp    c001c7da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c7c7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001c7cd:	83 f8 06             	cmp    eax,0x6
c001c7d0:	77 10                	ja     c001c7e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001c7d2:	83 ec 0c             	sub    esp,0xc
c001c7d5:	68 dc 05 00 00       	push   0x5dc
c001c7da:	e8 35 81 ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001c7df:	83 c4 10             	add    esp,0x10
c001c7e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c7e6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001c7e9:	75 06                	jne    c001c7f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001c7eb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001c7ef:	74 15                	je     c001c806 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c7f1:	83 fb 06             	cmp    ebx,0x6
c001c7f4:	77 10                	ja     c001c806 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c7f6:	83 ec 0c             	sub    esp,0xc
c001c7f9:	68 c4 09 00 00       	push   0x9c4
c001c7fe:	e8 11 81 ff ff       	call   c0014914 <milliTenthSleep(unsigned int)>
c001c803:	83 c4 10             	add    esp,0x10
c001c806:	43                   	inc    ebx
c001c807:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001c80d:	0f 85 56 ff ff ff    	jne    c001c769 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001c813:	83 ec 0c             	sub    esp,0xc
c001c816:	68 86 0e 02 c0       	push   0xc0020e86
c001c81b:	e9 6b ff ff ff       	jmp    c001c78b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c820:	0f ba e0 1e          	bt     eax,0x1e
c001c824:	73 0d                	jae    c001c833 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	68 9a 0e 02 c0       	push   0xc0020e9a
c001c82e:	e9 58 ff ff ff       	jmp    c001c78b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c833:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001c838:	74 17                	je     c001c851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001c83a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001c83f:	74 10                	je     c001c851 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001c841:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001c847:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001c84b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001c84f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c851:	31 c0                	xor    eax,eax
c001c853:	83 c4 2c             	add    esp,0x2c
c001c856:	5b                   	pop    ebx
c001c857:	5e                   	pop    esi
c001c858:	5f                   	pop    edi
c001c859:	5d                   	pop    ebp
c001c85a:	c3                   	ret    
c001c85b:	90                   	nop

c001c85c <SATAPI::eject()>:
c001c85c:	57                   	push   edi
c001c85d:	b9 03 00 00 00       	mov    ecx,0x3
c001c862:	83 ec 18             	sub    esp,0x18
c001c865:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c869:	fc                   	cld    
c001c86a:	31 c0                	xor    eax,eax
c001c86c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c86e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c873:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c878:	50                   	push   eax
c001c879:	6a 00                	push   0x0
c001c87b:	6a 00                	push   0x0
c001c87d:	6a 00                	push   0x0
c001c87f:	6a 00                	push   0x0
c001c881:	6a 02                	push   0x2
c001c883:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c887:	50                   	push   eax
c001c888:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c88c:	e8 f7 fc ff ff       	call   c001c588 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001c891:	31 c0                	xor    eax,eax
c001c893:	83 c4 38             	add    esp,0x38
c001c896:	5f                   	pop    edi
c001c897:	c3                   	ret    

c001c898 <SATAPI::detectMedia()>:
c001c898:	53                   	push   ebx
c001c899:	83 ec 14             	sub    esp,0x14
c001c89c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c8a0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c8a6:	e8 55 0d ff ff       	call   c000d600 <VCache::writeWriteBuffer()>
c001c8ab:	59                   	pop    ecx
c001c8ac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c8b2:	e8 39 0d ff ff       	call   c000d5f0 <VCache::invalidateReadBuffer()>
c001c8b7:	c7 04 24 af 0e 02 c0 	mov    DWORD PTR [esp],0xc0020eaf
c001c8be:	e8 47 dd fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c8c3:	83 c4 10             	add    esp,0x10
c001c8c6:	31 c0                	xor    eax,eax
c001c8c8:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001c8cf:	85 d2                	test   edx,edx
c001c8d1:	74 0f                	je     c001c8e2 <SATAPI::detectMedia()+0x4a>
c001c8d3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001c8d9:	75 07                	jne    c001c8e2 <SATAPI::detectMedia()+0x4a>
c001c8db:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001c8e2:	40                   	inc    eax
c001c8e3:	83 f8 1a             	cmp    eax,0x1a
c001c8e6:	75 e0                	jne    c001c8c8 <SATAPI::detectMedia()+0x30>
c001c8e8:	83 c4 08             	add    esp,0x8
c001c8eb:	5b                   	pop    ebx
c001c8ec:	c3                   	ret    
c001c8ed:	90                   	nop

c001c8ee <SATAPI::open(int, int, void*)>:
c001c8ee:	56                   	push   esi
c001c8ef:	53                   	push   ebx
c001c8f0:	51                   	push   ecx
c001c8f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c8f9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c903:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c909:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c913:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c917:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c921:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c927:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c92e:	e8 1e b2 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001c933:	89 c6                	mov    esi,eax
c001c935:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001c93b:	81 c6 00 10 00 00    	add    esi,0x1000
c001c941:	e8 0b b2 fe ff       	call   c0007b51 <Phys::allocatePage()>
c001c946:	39 c6                	cmp    esi,eax
c001c948:	74 10                	je     c001c95a <SATAPI::open(int, int, void*)+0x6c>
c001c94a:	83 ec 0c             	sub    esp,0xc
c001c94d:	68 c4 0e 02 c0       	push   0xc0020ec4
c001c952:	e8 b4 39 ff ff       	call   c001030b <KePanic(char const*)>
c001c957:	83 c4 10             	add    esp,0x10
c001c95a:	83 ec 0c             	sub    esp,0xc
c001c95d:	6a 02                	push   0x2
c001c95f:	e8 e9 c9 fe ff       	call   c000934d <Virt::allocateKernelVirtualPages(int)>
c001c964:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001c96a:	6a 03                	push   0x3
c001c96c:	50                   	push   eax
c001c96d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001c973:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c979:	e8 92 d0 fe ff       	call   c0009a10 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c97e:	83 c4 14             	add    esp,0x14
c001c981:	68 78 01 00 00       	push   0x178
c001c986:	e8 ea ae fe ff       	call   c0007875 <malloc>
c001c98b:	83 c4 0c             	add    esp,0xc
c001c98e:	89 c6                	mov    esi,eax
c001c990:	6a 00                	push   0x0
c001c992:	68 ff ff ff 7f       	push   0x7fffffff
c001c997:	6a 00                	push   0x0
c001c999:	6a 00                	push   0x0
c001c99b:	53                   	push   ebx
c001c99c:	68 da 0e 02 c0       	push   0xc0020eda
c001c9a1:	50                   	push   eax
c001c9a2:	e8 4b 01 ff ff       	call   c000caf2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9a7:	83 c4 14             	add    esp,0x14
c001c9aa:	56                   	push   esi
c001c9ab:	e8 02 02 ff ff       	call   c000cbb2 <LogicalDisk::assignDriveLetter()>
c001c9b0:	5a                   	pop    edx
c001c9b1:	0f be c0             	movsx  eax,al
c001c9b4:	59                   	pop    ecx
c001c9b5:	50                   	push   eax
c001c9b6:	68 2c 0d 02 c0       	push   0xc0020d2c
c001c9bb:	e8 4a dc fe ff       	call   c000a60a <Dbg::kprintf(char const*, ...)>
c001c9c0:	58                   	pop    eax
c001c9c1:	5a                   	pop    edx
c001c9c2:	56                   	push   esi
c001c9c3:	53                   	push   ebx
c001c9c4:	e8 7f f0 fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001c9c9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001c9cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9d2:	e8 a7 f4 fe ff       	call   c000be7e <PhysicalDisk::startCache()>
c001c9d7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001c9de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9e1:	e8 b2 fe ff ff       	call   c001c898 <SATAPI::detectMedia()>
c001c9e6:	83 c4 14             	add    esp,0x14
c001c9e9:	31 c0                	xor    eax,eax
c001c9eb:	5b                   	pop    ebx
c001c9ec:	5e                   	pop    esi
c001c9ed:	c3                   	ret    

c001c9ee <SATAPI::read(unsigned long long, int, void*)>:
c001c9ee:	57                   	push   edi
c001c9ef:	56                   	push   esi
c001c9f0:	53                   	push   ebx
c001c9f1:	83 ec 30             	sub    esp,0x30
c001c9f4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c9f8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001c9fc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ca00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ca04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ca0c:	83 fe 04             	cmp    esi,0x4
c001ca0f:	7e 10                	jle    c001ca21 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ca11:	83 ec 0c             	sub    esp,0xc
c001ca14:	68 e8 0e 02 c0       	push   0xc0020ee8
c001ca19:	e8 ed 38 ff ff       	call   c001030b <KePanic(char const*)>
c001ca1e:	83 c4 10             	add    esp,0x10
c001ca21:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ca2d:	51                   	push   ecx
c001ca2e:	50                   	push   eax
c001ca2f:	83 c0 02             	add    eax,0x2
c001ca32:	c1 e0 07             	shl    eax,0x7
c001ca35:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ca3b:	50                   	push   eax
c001ca3c:	52                   	push   edx
c001ca3d:	e8 c6 e1 ff ff       	call   c001ac08 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ca42:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ca46:	b9 03 00 00 00       	mov    ecx,0x3
c001ca4b:	fc                   	cld    
c001ca4c:	31 c0                	xor    eax,eax
c001ca4e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca50:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ca55:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ca5a:	83 c4 0c             	add    esp,0xc
c001ca5d:	6a 00                	push   0x0
c001ca5f:	6a 00                	push   0x0
c001ca61:	6a 00                	push   0x0
c001ca63:	6a 00                	push   0x0
c001ca65:	6a 02                	push   0x2
c001ca67:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ca6b:	50                   	push   eax
c001ca6c:	53                   	push   ebx
c001ca6d:	e8 16 fb ff ff       	call   c001c588 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ca72:	83 c4 20             	add    esp,0x20
c001ca75:	85 c0                	test   eax,eax
c001ca77:	75 44                	jne    c001cabd <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ca79:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ca7d:	b9 03 00 00 00       	mov    ecx,0x3
c001ca82:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca88:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ca8d:	0f c8                	bswap  eax
c001ca8f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ca93:	89 f0                	mov    eax,esi
c001ca95:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ca99:	50                   	push   eax
c001ca9a:	56                   	push   esi
c001ca9b:	c1 e6 0b             	shl    esi,0xb
c001ca9e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001caa2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caa6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caaa:	56                   	push   esi
c001caab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001caaf:	50                   	push   eax
c001cab0:	53                   	push   ebx
c001cab1:	e8 d2 fa ff ff       	call   c001c588 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cab6:	83 c4 20             	add    esp,0x20
c001cab9:	85 c0                	test   eax,eax
c001cabb:	74 14                	je     c001cad1 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cabd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cac1:	83 ec 0c             	sub    esp,0xc
c001cac4:	53                   	push   ebx
c001cac5:	e8 ce fd ff ff       	call   c001c898 <SATAPI::detectMedia()>
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cad1:	83 c4 30             	add    esp,0x30
c001cad4:	5b                   	pop    ebx
c001cad5:	5e                   	pop    esi
c001cad6:	5f                   	pop    edi
c001cad7:	c3                   	ret    

c001cad8 <IOAPIC::close(int, int, void*)>:
c001cad8:	b8 00 00 00 00       	mov    eax,0x0
c001cadd:	c3                   	ret    

c001cade <apicGetBase()>:
c001cade:	55                   	push   ebp
c001cadf:	89 e5                	mov    ebp,esp
c001cae1:	83 ec 18             	sub    esp,0x18
c001cae4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cae9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001caef:	83 e0 08             	and    eax,0x8
c001caf2:	84 c0                	test   al,al
c001caf4:	75 07                	jne    c001cafd <apicGetBase()+0x1f>
c001caf6:	b8 00 00 00 00       	mov    eax,0x0
c001cafb:	eb 21                	jmp    c001cb1e <apicGetBase()+0x40>
c001cafd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cb02:	83 ec 08             	sub    esp,0x8
c001cb05:	6a 1b                	push   0x1b
c001cb07:	50                   	push   eax
c001cb08:	e8 9f a3 fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cb13:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cb16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cb19:	25 00 00 ff ff       	and    eax,0xffff0000
c001cb1e:	c9                   	leave  
c001cb1f:	c3                   	ret    

c001cb20 <IOAPIC::IOAPIC()>:
c001cb20:	83 ec 0c             	sub    esp,0xc
c001cb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb27:	83 ec 08             	sub    esp,0x8
c001cb2a:	68 4c 0f 02 c0       	push   0xc0020f4c
c001cb2f:	50                   	push   eax
c001cb30:	e8 ab f0 fe ff       	call   c000bbe0 <Device::Device(char const*)>
c001cb35:	83 c4 10             	add    esp,0x10
c001cb38:	ba 5c 0f 02 c0       	mov    edx,0xc0020f5c
c001cb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb41:	89 10                	mov    DWORD PTR [eax],edx
c001cb43:	90                   	nop
c001cb44:	83 c4 0c             	add    esp,0xc
c001cb47:	c3                   	ret    

c001cb48 <apicOpen()>:
c001cb48:	55                   	push   ebp
c001cb49:	89 e5                	mov    ebp,esp
c001cb4b:	53                   	push   ebx
c001cb4c:	83 ec 34             	sub    esp,0x34
c001cb4f:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cb54:	83 f0 01             	xor    eax,0x1
c001cb57:	84 c0                	test   al,al
c001cb59:	0f 84 9d 00 00 00    	je     c001cbfc <apicOpen()+0xb4>
c001cb5f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cb63:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cb68:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cb6b:	0f 83 84 00 00 00    	jae    c001cbf5 <apicOpen()+0xad>
c001cb71:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001cb7e:	e8 f2 ac fe ff       	call   c0007875 <malloc>
c001cb83:	83 c4 10             	add    esp,0x10
c001cb86:	89 c3                	mov    ebx,eax
c001cb88:	83 ec 0c             	sub    esp,0xc
c001cb8b:	53                   	push   ebx
c001cb8c:	e8 8f ff ff ff       	call   c001cb20 <IOAPIC::IOAPIC()>
c001cb91:	83 c4 10             	add    esp,0x10
c001cb94:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001cb97:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cb9a:	25 ff 00 00 00       	and    eax,0xff
c001cb9f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001cba2:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001cba9:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001cbae:	40                   	inc    eax
c001cbaf:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001cbb4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cbb9:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001cbbf:	83 ec 08             	sub    esp,0x8
c001cbc2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cbc5:	50                   	push   eax
c001cbc6:	e8 7d ee fe ff       	call   c000ba48 <Device::addChild(Device*)>
c001cbcb:	83 c4 10             	add    esp,0x10
c001cbce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cbd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbd3:	83 c0 08             	add    eax,0x8
c001cbd6:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbd8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cbdb:	25 ff 00 00 00       	and    eax,0xff
c001cbe0:	6a 00                	push   0x0
c001cbe2:	6a 00                	push   0x0
c001cbe4:	50                   	push   eax
c001cbe5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cbe8:	ff d2                	call   edx
c001cbea:	83 c4 10             	add    esp,0x10
c001cbed:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001cbf0:	e9 6e ff ff ff       	jmp    c001cb63 <apicOpen()+0x1b>
c001cbf5:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001cbfc:	e8 dd fe ff ff       	call   c001cade <apicGetBase()>
c001cc01:	05 f0 00 00 00       	add    eax,0xf0
c001cc06:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cc09:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cc0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc0e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001cc11:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001cc18:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001cc1f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cc22:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001cc25:	89 10                	mov    DWORD PTR [eax],edx
c001cc27:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001cc2e:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001cc33:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001cc36:	7d 70                	jge    c001cca8 <apicOpen()+0x160>
c001cc38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc3b:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc42:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001cc45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc48:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc4f:	c1 e8 08             	shr    eax,0x8
c001cc52:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001cc56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cc59:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001cc60:	c1 e8 18             	shr    eax,0x18
c001cc63:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001cc66:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001cc6a:	75 37                	jne    c001cca3 <apicOpen()+0x15b>
c001cc6c:	e8 6d fe ff ff       	call   c001cade <apicGetBase()>
c001cc71:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001cc75:	75 07                	jne    c001cc7e <apicOpen()+0x136>
c001cc77:	ba 60 03 00 00       	mov    edx,0x360
c001cc7c:	eb 05                	jmp    c001cc83 <apicOpen()+0x13b>
c001cc7e:	ba 50 03 00 00       	mov    edx,0x350
c001cc83:	01 d0                	add    eax,edx
c001cc85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001cc88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001cc8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc8d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001cc90:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001cc97:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001cc9b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001cc9e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001cca1:	89 10                	mov    DWORD PTR [eax],edx
c001cca3:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001cca6:	eb 86                	jmp    c001cc2e <apicOpen()+0xe6>
c001cca8:	90                   	nop
c001cca9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ccac:	c9                   	leave  
c001ccad:	c3                   	ret    

c001ccae <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ccae:	55                   	push   ebp
c001ccaf:	89 e5                	mov    ebp,esp
c001ccb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ccb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ccba:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ccbd:	72 1d                	jb     c001ccdc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ccbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ccc2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ccc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cccb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ccd1:	01 d0                	add    eax,edx
c001ccd3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ccd6:	73 04                	jae    c001ccdc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ccd8:	b0 01                	mov    al,0x1
c001ccda:	eb 02                	jmp    c001ccde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ccdc:	b0 00                	mov    al,0x0
c001ccde:	5d                   	pop    ebp
c001ccdf:	c3                   	ret    

c001cce0 <IOAPIC::read(int)>:
c001cce0:	55                   	push   ebp
c001cce1:	89 e5                	mov    ebp,esp
c001cce3:	83 ec 10             	sub    esp,0x10
c001cce6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cce9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ccef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ccf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ccf5:	31 d2                	xor    edx,edx
c001ccf7:	88 c2                	mov    dl,al
c001ccf9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ccfc:	89 10                	mov    DWORD PTR [eax],edx
c001ccfe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cd01:	83 c0 10             	add    eax,0x10
c001cd04:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd06:	c9                   	leave  
c001cd07:	c3                   	ret    

c001cd08 <IOAPIC::open(int, int, void*)>:
c001cd08:	55                   	push   ebp
c001cd09:	89 e5                	mov    ebp,esp
c001cd0b:	57                   	push   edi
c001cd0c:	56                   	push   esi
c001cd0d:	53                   	push   ebx
c001cd0e:	83 ec 04             	sub    esp,0x4
c001cd11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd14:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cd17:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd20:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd26:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001cd2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd30:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cd36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cd3f:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001cd46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd49:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cd4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd52:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cd58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd5b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cd61:	89 c6                	mov    esi,eax
c001cd63:	81 e6 ff 00 00 00    	and    esi,0xff
c001cd69:	89 d0                	mov    eax,edx
c001cd6b:	ba 00 00 00 00       	mov    edx,0x0
c001cd70:	89 c7                	mov    edi,eax
c001cd72:	83 e7 ff             	and    edi,0xffffffff
c001cd75:	89 f9                	mov    ecx,edi
c001cd77:	89 d0                	mov    eax,edx
c001cd79:	25 ff 00 00 00       	and    eax,0xff
c001cd7e:	89 c3                	mov    ebx,eax
c001cd80:	89 c8                	mov    eax,ecx
c001cd82:	89 da                	mov    edx,ebx
c001cd84:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cd87:	8d 5e 08             	lea    ebx,[esi+0x8]
c001cd8a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cd8e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cd92:	83 e0 00             	and    eax,0x0
c001cd95:	09 d0                	or     eax,edx
c001cd97:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cd9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cd9e:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cda4:	8d 50 01             	lea    edx,[eax+0x1]
c001cda7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cdaa:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cdb0:	31 d2                	xor    edx,edx
c001cdb2:	88 c2                	mov    dl,al
c001cdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cdb7:	83 c2 08             	add    edx,0x8
c001cdba:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cdbe:	81 e1 ff 00 00 00    	and    ecx,0xff
c001cdc4:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001cdca:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cdce:	6a 01                	push   0x1
c001cdd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cdd3:	e8 08 ff ff ff       	call   c001cce0 <IOAPIC::read(int)>
c001cdd8:	83 c4 08             	add    esp,0x8
c001cddb:	c1 f8 10             	sar    eax,0x10
c001cdde:	25 ff 00 00 00       	and    eax,0xff
c001cde3:	8d 50 01             	lea    edx,[eax+0x1]
c001cde6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cde9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001cdef:	b8 00 00 00 00       	mov    eax,0x0
c001cdf4:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cdf7:	5b                   	pop    ebx
c001cdf8:	5e                   	pop    esi
c001cdf9:	5f                   	pop    edi
c001cdfa:	5d                   	pop    ebp
c001cdfb:	c3                   	ret    

c001cdfc <IOAPIC::write(int, int)>:
c001cdfc:	55                   	push   ebp
c001cdfd:	89 e5                	mov    ebp,esp
c001cdff:	83 ec 10             	sub    esp,0x10
c001ce02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ce0b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ce0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce11:	31 d2                	xor    edx,edx
c001ce13:	88 c2                	mov    dl,al
c001ce15:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ce18:	89 10                	mov    DWORD PTR [eax],edx
c001ce1a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ce1d:	8d 50 10             	lea    edx,[eax+0x10]
c001ce20:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce23:	89 02                	mov    DWORD PTR [edx],eax
c001ce25:	90                   	nop
c001ce26:	c9                   	leave  
c001ce27:	c3                   	ret    

c001ce28 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ce28:	55                   	push   ebp
c001ce29:	89 e5                	mov    ebp,esp
c001ce2b:	53                   	push   ebx
c001ce2c:	83 ec 2c             	sub    esp,0x2c
c001ce2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce32:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ce35:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ce38:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ce3b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ce3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce41:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ce44:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ce47:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ce4a:	88 d8                	mov    al,bl
c001ce4c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ce4f:	88 c8                	mov    al,cl
c001ce51:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ce54:	88 d0                	mov    al,dl
c001ce56:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ce59:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ce5c:	25 ff 00 00 00       	and    eax,0xff
c001ce61:	83 c0 08             	add    eax,0x8
c001ce64:	01 c0                	add    eax,eax
c001ce66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ce69:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001ce6c:	25 ff 00 00 00       	and    eax,0xff
c001ce71:	83 c0 08             	add    eax,0x8
c001ce74:	01 c0                	add    eax,eax
c001ce76:	40                   	inc    eax
c001ce77:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ce7a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ce7d:	50                   	push   eax
c001ce7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ce81:	e8 5a fe ff ff       	call   c001cce0 <IOAPIC::read(int)>
c001ce86:	83 c4 08             	add    esp,0x8
c001ce89:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ce8c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ce93:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ce96:	c1 e0 18             	shl    eax,0x18
c001ce99:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ce9c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ce9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cea2:	52                   	push   edx
c001cea3:	50                   	push   eax
c001cea4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cea7:	e8 50 ff ff ff       	call   c001cdfc <IOAPIC::write(int, int)>
c001ceac:	83 c4 0c             	add    esp,0xc
c001ceaf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ceb2:	50                   	push   eax
c001ceb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ceb6:	e8 25 fe ff ff       	call   c001cce0 <IOAPIC::read(int)>
c001cebb:	83 c4 08             	add    esp,0x8
c001cebe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001cec1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001cec8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001cecf:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ced6:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001ceda:	74 09                	je     c001cee5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001cedc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001cee3:	eb 07                	jmp    c001ceec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001cee5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ceec:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001cef0:	74 09                	je     c001cefb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001cef2:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001cef9:	eb 07                	jmp    c001cf02 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001cefb:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001cf02:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001cf09:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001cf0c:	25 ff 00 00 00       	and    eax,0xff
c001cf11:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001cf14:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001cf17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cf1a:	52                   	push   edx
c001cf1b:	50                   	push   eax
c001cf1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cf1f:	e8 d8 fe ff ff       	call   c001cdfc <IOAPIC::write(int, int)>
c001cf24:	83 c4 0c             	add    esp,0xc
c001cf27:	90                   	nop
c001cf28:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001cf2b:	c9                   	leave  
c001cf2c:	c3                   	ret    
c001cf2d:	66 90                	xchg   ax,ax
c001cf2f:	90                   	nop

c001cf30 <APICTimer::close(int, int, void*)>:
c001cf30:	b8 00 00 00 00       	mov    eax,0x0
c001cf35:	c3                   	ret    
c001cf36:	66 90                	xchg   ax,ax

c001cf38 <apicTimerHandler(regs*, void*)>:
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf3f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cf41:	b8 10 27 00 00       	mov    eax,0x2710
c001cf46:	ba 00 00 00 00       	mov    edx,0x0
c001cf4b:	f7 f1                	div    ecx
c001cf4d:	83 ec 0c             	sub    esp,0xc
c001cf50:	50                   	push   eax
c001cf51:	e8 c2 03 ff ff       	call   c000d318 <timerHandler(unsigned int)>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	90                   	nop
c001cf5a:	83 c4 0c             	add    esp,0xc
c001cf5d:	c3                   	ret    
c001cf5e:	66 90                	xchg   ax,ax

c001cf60 <APICTimer::open(int, int, void*)>:
c001cf60:	83 ec 0c             	sub    esp,0xc
c001cf63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf67:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf69:	83 c0 24             	add    eax,0x24
c001cf6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf6e:	83 ec 08             	sub    esp,0x8
c001cf71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf79:	ff d0                	call   eax
c001cf7b:	83 c4 10             	add    esp,0x10
c001cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cf94:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001cf9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cf9e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	51                   	push   ecx
c001cfa8:	6a 01                	push   0x1
c001cfaa:	68 38 cf 01 c0       	push   0xc001cf38
c001cfaf:	52                   	push   edx
c001cfb0:	50                   	push   eax
c001cfb1:	e8 3e ea fe ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cfb6:	83 c4 20             	add    esp,0x20
c001cfb9:	89 c2                	mov    edx,eax
c001cfbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001cfc5:	b8 00 00 00 00       	mov    eax,0x0
c001cfca:	83 c4 0c             	add    esp,0xc
c001cfcd:	c3                   	ret    
c001cfce:	66 90                	xchg   ax,ax

c001cfd0 <APICTimer::write(int)>:
c001cfd0:	83 ec 0c             	sub    esp,0xc
c001cfd3:	83 ec 0c             	sub    esp,0xc
c001cfd6:	68 80 0f 02 c0       	push   0xc0020f80
c001cfdb:	e8 2b 33 ff ff       	call   c001030b <KePanic(char const*)>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfeb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cff1:	90                   	nop
c001cff2:	83 c4 0c             	add    esp,0xc
c001cff5:	c3                   	ret    
c001cff6:	66 90                	xchg   ax,ax

c001cff8 <APICTimer::APICTimer()>:
c001cff8:	83 ec 0c             	sub    esp,0xc
c001cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfff:	83 ec 08             	sub    esp,0x8
c001d002:	68 90 0f 02 c0       	push   0xc0020f90
c001d007:	50                   	push   eax
c001d008:	e8 3f 02 ff ff       	call   c000d24c <Timer::Timer(char const*)>
c001d00d:	83 c4 10             	add    esp,0x10
c001d010:	ba a4 0f 02 c0       	mov    edx,0xc0020fa4
c001d015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d019:	89 10                	mov    DWORD PTR [eax],edx
c001d01b:	90                   	nop
c001d01c:	83 c4 0c             	add    esp,0xc
c001d01f:	c3                   	ret    

c001d020 <PIT::write(int)>:
c001d020:	83 ec 10             	sub    esp,0x10
c001d023:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d027:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d02b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d031:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d035:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d03a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d03f:	99                   	cdq    
c001d040:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d044:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d048:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d04f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d054:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d058:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d05d:	ee                   	out    dx,al
c001d05e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d062:	25 ff 00 00 00       	and    eax,0xff
c001d067:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d06e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d072:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d076:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d07b:	ee                   	out    dx,al
c001d07c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d080:	c1 f8 08             	sar    eax,0x8
c001d083:	25 ff 00 00 00       	and    eax,0xff
c001d088:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d08f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d093:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d097:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d09c:	ee                   	out    dx,al
c001d09d:	90                   	nop
c001d09e:	83 c4 10             	add    esp,0x10
c001d0a1:	c3                   	ret    
c001d0a2:	66 90                	xchg   ax,ax

c001d0a4 <pitHandler(regs*, void*)>:
c001d0a4:	83 ec 0c             	sub    esp,0xc
c001d0a7:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d0ad:	b8 10 27 00 00       	mov    eax,0x2710
c001d0b2:	99                   	cdq    
c001d0b3:	f7 f9                	idiv   ecx
c001d0b5:	83 ec 0c             	sub    esp,0xc
c001d0b8:	50                   	push   eax
c001d0b9:	e8 5a 02 ff ff       	call   c000d318 <timerHandler(unsigned int)>
c001d0be:	83 c4 10             	add    esp,0x10
c001d0c1:	90                   	nop
c001d0c2:	83 c4 0c             	add    esp,0xc
c001d0c5:	c3                   	ret    
c001d0c6:	66 90                	xchg   ax,ax

c001d0c8 <PIT::open(int, int, void*)>:
c001d0c8:	83 ec 0c             	sub    esp,0xc
c001d0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0d1:	83 c0 24             	add    eax,0x24
c001d0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0d6:	83 ec 08             	sub    esp,0x8
c001d0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e1:	ff d0                	call   eax
c001d0e3:	83 c4 10             	add    esp,0x10
c001d0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0ea:	83 ec 0c             	sub    esp,0xc
c001d0ed:	6a 00                	push   0x0
c001d0ef:	6a 01                	push   0x1
c001d0f1:	68 a4 d0 01 c0       	push   0xc001d0a4
c001d0f6:	6a 00                	push   0x0
c001d0f8:	50                   	push   eax
c001d0f9:	e8 f6 e8 fe ff       	call   c000b9f4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d0fe:	83 c4 20             	add    esp,0x20
c001d101:	89 c2                	mov    edx,eax
c001d103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d107:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d10d:	b8 00 00 00 00       	mov    eax,0x0
c001d112:	83 c4 0c             	add    esp,0xc
c001d115:	c3                   	ret    
c001d116:	66 90                	xchg   ax,ax

c001d118 <PIT::close(int, int, void*)>:
c001d118:	83 ec 0c             	sub    esp,0xc
c001d11b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d11f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12d:	6a 01                	push   0x1
c001d12f:	68 a4 d0 01 c0       	push   0xc001d0a4
c001d134:	6a 00                	push   0x0
c001d136:	50                   	push   eax
c001d137:	e8 ee e8 fe ff       	call   c000ba2a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d13c:	83 c4 10             	add    esp,0x10
c001d13f:	b8 00 00 00 00       	mov    eax,0x0
c001d144:	83 c4 0c             	add    esp,0xc
c001d147:	c3                   	ret    

c001d148 <PIT::PIT()>:
c001d148:	83 ec 0c             	sub    esp,0xc
c001d14b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d14f:	83 ec 08             	sub    esp,0x8
c001d152:	68 cc 0f 02 c0       	push   0xc0020fcc
c001d157:	50                   	push   eax
c001d158:	e8 ef 00 ff ff       	call   c000d24c <Timer::Timer(char const*)>
c001d15d:	83 c4 10             	add    esp,0x10
c001d160:	ba f4 0f 02 c0       	mov    edx,0xc0020ff4
c001d165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d169:	89 10                	mov    DWORD PTR [eax],edx
c001d16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d16f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d175:	31 d2                	xor    edx,edx
c001d177:	88 c2                	mov    dl,al
c001d179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d188:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d18e:	31 d2                	xor    edx,edx
c001d190:	88 c2                	mov    dl,al
c001d192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d196:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d19f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1a5:	8d 50 01             	lea    edx,[eax+0x1]
c001d1a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1ac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d1b2:	31 d2                	xor    edx,edx
c001d1b4:	88 c2                	mov    dl,al
c001d1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1ba:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d1be:	83 e1 3f             	and    ecx,0x3f
c001d1c1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d1c5:	90                   	nop
c001d1c6:	83 c4 0c             	add    esp,0xc
c001d1c9:	c3                   	ret    
c001d1ca:	66 90                	xchg   ax,ax
c001d1cc:	66 90                	xchg   ax,ax
c001d1ce:	66 90                	xchg   ax,ax

c001d1d0 <avxDetect>:
c001d1d0:	b8 01 00 00 00       	mov    eax,0x1
c001d1d5:	0f a2                	cpuid  
c001d1d7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d1dd:	74 15                	je     c001d1f4 <avxDetect.noAVX>
c001d1df:	b8 01 00 00 00       	mov    eax,0x1
c001d1e4:	0f a2                	cpuid  
c001d1e6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d1ec:	74 06                	je     c001d1f4 <avxDetect.noAVX>
c001d1ee:	b8 01 00 00 00       	mov    eax,0x1
c001d1f3:	c3                   	ret    

c001d1f4 <avxDetect.noAVX>:
c001d1f4:	b8 00 00 00 00       	mov    eax,0x0
c001d1f9:	c3                   	ret    

c001d1fa <avxSave>:
c001d1fa:	53                   	push   ebx
c001d1fb:	52                   	push   edx
c001d1fc:	31 c0                	xor    eax,eax
c001d1fe:	48                   	dec    eax
c001d1ff:	89 c2                	mov    edx,eax
c001d201:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d205:	0f ae 23             	xsave  [ebx]
c001d208:	5a                   	pop    edx
c001d209:	5b                   	pop    ebx
c001d20a:	c3                   	ret    

c001d20b <avxLoad>:
c001d20b:	53                   	push   ebx
c001d20c:	52                   	push   edx
c001d20d:	31 c0                	xor    eax,eax
c001d20f:	48                   	dec    eax
c001d210:	89 c2                	mov    edx,eax
c001d212:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d216:	0f ae 2b             	xrstor [ebx]
c001d219:	5a                   	pop    edx
c001d21a:	5b                   	pop    ebx
c001d21b:	c3                   	ret    

c001d21c <avxInit>:
c001d21c:	e8 b7 02 00 00       	call   c001d4d8 <sseInit>
c001d221:	50                   	push   eax
c001d222:	51                   	push   ecx
c001d223:	0f 20 e0             	mov    eax,cr4
c001d226:	0d 00 00 04 00       	or     eax,0x40000
c001d22b:	0f 22 e0             	mov    cr4,eax
c001d22e:	31 c9                	xor    ecx,ecx
c001d230:	0f 01 d0             	xgetbv 
c001d233:	0d 07 00 00 00       	or     eax,0x7
c001d238:	0f 01 d1             	xsetbv 
c001d23b:	59                   	pop    ecx
c001d23c:	58                   	pop    eax
c001d23d:	c3                   	ret    

c001d23e <avxClose>:
c001d23e:	c3                   	ret    

c001d23f <wouldSheSayYes>:
c001d23f:	c3                   	ret    
c001d240:	49                   	dec    ecx
c001d241:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d245:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d249:	75 20                	jne    c001d26b <isr0+0xb>
c001d24b:	4e                   	dec    esi
c001d24c:	79 61                	jns    c001d2af <isr7+0x3>
c001d24e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d253:	66 90                	xchg   ax,ax
c001d255:	66 90                	xchg   ax,ax
c001d257:	66 90                	xchg   ax,ax
c001d259:	66 90                	xchg   ax,ax
c001d25b:	66 90                	xchg   ax,ax
c001d25d:	66 90                	xchg   ax,ax
c001d25f:	90                   	nop

c001d260 <isr0>:
c001d260:	fa                   	cli    
c001d261:	68 00 00 00 00       	push   0x0
c001d266:	68 00 00 00 00       	push   0x0
c001d26b:	e9 44 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d270 <isr1>:
c001d270:	fa                   	cli    
c001d271:	6a 00                	push   0x0
c001d273:	6a 01                	push   0x1
c001d275:	e9 3a 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d27a <isr2>:
c001d27a:	fa                   	cli    
c001d27b:	6a 00                	push   0x0
c001d27d:	6a 02                	push   0x2
c001d27f:	e9 30 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d284 <isr3>:
c001d284:	fa                   	cli    
c001d285:	6a 00                	push   0x0
c001d287:	6a 03                	push   0x3
c001d289:	e9 26 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d28e <isr4>:
c001d28e:	fa                   	cli    
c001d28f:	6a 00                	push   0x0
c001d291:	6a 04                	push   0x4
c001d293:	e9 1c 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d298 <isr5>:
c001d298:	fa                   	cli    
c001d299:	6a 00                	push   0x0
c001d29b:	6a 05                	push   0x5
c001d29d:	e9 12 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2a2 <isr6>:
c001d2a2:	fa                   	cli    
c001d2a3:	6a 00                	push   0x0
c001d2a5:	6a 06                	push   0x6
c001d2a7:	e9 08 01 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2ac <isr7>:
c001d2ac:	fa                   	cli    
c001d2ad:	6a 00                	push   0x0
c001d2af:	6a 07                	push   0x7
c001d2b1:	e9 fe 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2b6 <isr8>:
c001d2b6:	fa                   	cli    
c001d2b7:	6a 08                	push   0x8
c001d2b9:	e9 f6 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2be <isr9>:
c001d2be:	fa                   	cli    
c001d2bf:	6a 00                	push   0x0
c001d2c1:	6a 09                	push   0x9
c001d2c3:	e9 ec 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2c8 <isr10>:
c001d2c8:	fa                   	cli    
c001d2c9:	6a 0a                	push   0xa
c001d2cb:	e9 e4 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2d0 <isr11>:
c001d2d0:	fa                   	cli    
c001d2d1:	6a 0b                	push   0xb
c001d2d3:	e9 dc 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2d8 <isr12>:
c001d2d8:	fa                   	cli    
c001d2d9:	6a 0c                	push   0xc
c001d2db:	e9 d4 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2e0 <isr13>:
c001d2e0:	fa                   	cli    
c001d2e1:	6a 0d                	push   0xd
c001d2e3:	e9 cc 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2e8 <isr14>:
c001d2e8:	fa                   	cli    
c001d2e9:	6a 0e                	push   0xe
c001d2eb:	e9 c4 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2f0 <isr15>:
c001d2f0:	fa                   	cli    
c001d2f1:	6a 00                	push   0x0
c001d2f3:	6a 0f                	push   0xf
c001d2f5:	e9 ba 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d2fa <isr16>:
c001d2fa:	fa                   	cli    
c001d2fb:	6a 00                	push   0x0
c001d2fd:	6a 10                	push   0x10
c001d2ff:	e9 b0 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d304 <isr17>:
c001d304:	fa                   	cli    
c001d305:	6a 00                	push   0x0
c001d307:	6a 11                	push   0x11
c001d309:	e9 a6 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d30e <isr18>:
c001d30e:	fa                   	cli    
c001d30f:	6a 00                	push   0x0
c001d311:	6a 12                	push   0x12
c001d313:	e9 9c 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d318 <irq3>:
c001d318:	fa                   	cli    
c001d319:	6a 00                	push   0x0
c001d31b:	6a 23                	push   0x23
c001d31d:	e9 92 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d322 <irq4>:
c001d322:	fa                   	cli    
c001d323:	6a 00                	push   0x0
c001d325:	6a 24                	push   0x24
c001d327:	e9 88 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d32c <irq5>:
c001d32c:	fa                   	cli    
c001d32d:	6a 00                	push   0x0
c001d32f:	6a 25                	push   0x25
c001d331:	e9 7e 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d336 <irq6>:
c001d336:	fa                   	cli    
c001d337:	6a 00                	push   0x0
c001d339:	6a 26                	push   0x26
c001d33b:	e9 74 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d340 <irq7>:
c001d340:	fa                   	cli    
c001d341:	6a 00                	push   0x0
c001d343:	6a 27                	push   0x27
c001d345:	e9 6a 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d34a <irq8>:
c001d34a:	fa                   	cli    
c001d34b:	6a 00                	push   0x0
c001d34d:	6a 28                	push   0x28
c001d34f:	e9 60 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d354 <irq9>:
c001d354:	fa                   	cli    
c001d355:	6a 00                	push   0x0
c001d357:	6a 29                	push   0x29
c001d359:	e9 56 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d35e <irq10>:
c001d35e:	fa                   	cli    
c001d35f:	6a 00                	push   0x0
c001d361:	6a 2a                	push   0x2a
c001d363:	e9 4c 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d368 <irq11>:
c001d368:	fa                   	cli    
c001d369:	6a 00                	push   0x0
c001d36b:	6a 2b                	push   0x2b
c001d36d:	e9 42 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d372 <irq12>:
c001d372:	fa                   	cli    
c001d373:	6a 00                	push   0x0
c001d375:	6a 2c                	push   0x2c
c001d377:	e9 38 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d37c <irq13>:
c001d37c:	fa                   	cli    
c001d37d:	6a 00                	push   0x0
c001d37f:	6a 2d                	push   0x2d
c001d381:	e9 2e 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d386 <irq14>:
c001d386:	fa                   	cli    
c001d387:	6a 00                	push   0x0
c001d389:	6a 2e                	push   0x2e
c001d38b:	e9 24 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d390 <irq15>:
c001d390:	fa                   	cli    
c001d391:	6a 00                	push   0x0
c001d393:	6a 2f                	push   0x2f
c001d395:	e9 1a 00 00 00       	jmp    c001d3b4 <int_common_stub>

c001d39a <irq1>:
c001d39a:	fa                   	cli    
c001d39b:	6a 00                	push   0x0
c001d39d:	6a 21                	push   0x21
c001d39f:	eb 13                	jmp    c001d3b4 <int_common_stub>

c001d3a1 <irq2>:
c001d3a1:	fa                   	cli    
c001d3a2:	6a 00                	push   0x0
c001d3a4:	6a 22                	push   0x22
c001d3a6:	eb 0c                	jmp    c001d3b4 <int_common_stub>

c001d3a8 <isr96>:
c001d3a8:	6a 00                	push   0x0
c001d3aa:	6a 60                	push   0x60
c001d3ac:	fb                   	sti    
c001d3ad:	eb 37                	jmp    c001d3e6 <syscall_common_stub>

c001d3af <irq0>:
c001d3af:	fa                   	cli    
c001d3b0:	6a 00                	push   0x0
c001d3b2:	6a 20                	push   0x20

c001d3b4 <int_common_stub>:
c001d3b4:	60                   	pusha  
c001d3b5:	1e                   	push   ds
c001d3b6:	06                   	push   es
c001d3b7:	0f a0                	push   fs
c001d3b9:	0f a8                	push   gs
c001d3bb:	66 b8 10 00          	mov    ax,0x10
c001d3bf:	66 8e d8             	mov    ds,ax
c001d3c2:	66 8e c0             	mov    es,ax
c001d3c5:	66 8e e0             	mov    fs,ax
c001d3c8:	66 8e e8             	mov    gs,ax
c001d3cb:	54                   	push   esp
c001d3cc:	fc                   	cld    
c001d3cd:	e8 22 eb fe ff       	call   c000bef4 <int_handler>
c001d3d2:	81 c4 04 00 00 00    	add    esp,0x4
c001d3d8:	0f a9                	pop    gs
c001d3da:	0f a1                	pop    fs
c001d3dc:	07                   	pop    es
c001d3dd:	1f                   	pop    ds
c001d3de:	61                   	popa   
c001d3df:	81 c4 08 00 00 00    	add    esp,0x8
c001d3e5:	cf                   	iret   

c001d3e6 <syscall_common_stub>:
c001d3e6:	60                   	pusha  
c001d3e7:	1e                   	push   ds
c001d3e8:	06                   	push   es
c001d3e9:	0f a0                	push   fs
c001d3eb:	0f a8                	push   gs
c001d3ed:	66 b8 10 00          	mov    ax,0x10
c001d3f1:	66 8e d8             	mov    ds,ax
c001d3f4:	66 8e c0             	mov    es,ax
c001d3f7:	66 8e e0             	mov    fs,ax
c001d3fa:	66 8e e8             	mov    gs,ax
c001d3fd:	54                   	push   esp
c001d3fe:	fc                   	cld    
c001d3ff:	e8 f0 ea fe ff       	call   c000bef4 <int_handler>
c001d404:	81 c4 04 00 00 00    	add    esp,0x4
c001d40a:	0f a9                	pop    gs
c001d40c:	0f a1                	pop    fs
c001d40e:	07                   	pop    es
c001d40f:	1f                   	pop    ds
c001d410:	e8 4a 34 ff ff       	call   c001085f <KiCheckSignalZ>
c001d415:	3d 00 00 00 00       	cmp    eax,0x0
c001d41a:	74 1d                	je     c001d439 <syscall_common_stub.skipSignals>
c001d41c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d420:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d424:	89 e3                	mov    ebx,esp
c001d426:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d429:	51                   	push   ecx
c001d42a:	68 41 d4 01 c0       	push   0xc001d441
c001d42f:	89 dc                	mov    esp,ebx
c001d431:	61                   	popa   
c001d432:	81 c4 08 00 00 00    	add    esp,0x8
c001d438:	cf                   	iret   

c001d439 <syscall_common_stub.skipSignals>:
c001d439:	61                   	popa   
c001d43a:	81 c4 08 00 00 00    	add    esp,0x8
c001d440:	cf                   	iret   

c001d441 <irq16>:
c001d441:	fa                   	cli    
c001d442:	6a 00                	push   0x0
c001d444:	6a 30                	push   0x30
c001d446:	e9 69 ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d44b <irq17>:
c001d44b:	fa                   	cli    
c001d44c:	6a 00                	push   0x0
c001d44e:	6a 31                	push   0x31
c001d450:	e9 5f ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d455 <irq18>:
c001d455:	fa                   	cli    
c001d456:	6a 00                	push   0x0
c001d458:	6a 32                	push   0x32
c001d45a:	e9 55 ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d45f <irq19>:
c001d45f:	fa                   	cli    
c001d460:	6a 00                	push   0x0
c001d462:	6a 33                	push   0x33
c001d464:	e9 4b ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d469 <irq20>:
c001d469:	fa                   	cli    
c001d46a:	6a 00                	push   0x0
c001d46c:	6a 34                	push   0x34
c001d46e:	e9 41 ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d473 <irq21>:
c001d473:	fa                   	cli    
c001d474:	6a 00                	push   0x0
c001d476:	6a 35                	push   0x35
c001d478:	e9 37 ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d47d <irq22>:
c001d47d:	fa                   	cli    
c001d47e:	6a 00                	push   0x0
c001d480:	6a 36                	push   0x36
c001d482:	e9 2d ff ff ff       	jmp    c001d3b4 <int_common_stub>

c001d487 <irq23>:
c001d487:	fa                   	cli    
c001d488:	6a 00                	push   0x0
c001d48a:	6a 37                	push   0x37
c001d48c:	e9 23 ff ff ff       	jmp    c001d3b4 <int_common_stub>
c001d491:	66 90                	xchg   ax,ax
c001d493:	66 90                	xchg   ax,ax
c001d495:	66 90                	xchg   ax,ax
c001d497:	66 90                	xchg   ax,ax
c001d499:	66 90                	xchg   ax,ax
c001d49b:	66 90                	xchg   ax,ax
c001d49d:	66 90                	xchg   ax,ax
c001d49f:	90                   	nop

c001d4a0 <i386GetRDRAND>:
c001d4a0:	b9 64 00 00 00       	mov    ecx,0x64

c001d4a5 <retry>:
c001d4a5:	0f c7 f0             	rdrand eax
c001d4a8:	72 05                	jb     c001d4af <retry.done>
c001d4aa:	e2 f9                	loop   c001d4a5 <retry>

c001d4ac <retry.fail>:
c001d4ac:	31 c0                	xor    eax,eax
c001d4ae:	c3                   	ret    

c001d4af <retry.done>:
c001d4af:	c3                   	ret    

c001d4b0 <absolutelyNoChanceInHell>:
c001d4b0:	b8 01 00 00 00       	mov    eax,0x1
c001d4b5:	0f a2                	cpuid  
c001d4b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d4bd:	74 06                	je     c001d4c5 <sseDetect.noSSE>
c001d4bf:	b8 01 00 00 00       	mov    eax,0x1
c001d4c4:	c3                   	ret    

c001d4c5 <sseDetect.noSSE>:
c001d4c5:	31 c0                	xor    eax,eax
c001d4c7:	c3                   	ret    

c001d4c8 <sseSave>:
c001d4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4cc:	0f ae 00             	fxsave [eax]
c001d4cf:	c3                   	ret    

c001d4d0 <sseLoad>:
c001d4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4d4:	0f ae 08             	fxrstor [eax]
c001d4d7:	c3                   	ret    

c001d4d8 <sseInit>:
c001d4d8:	e8 42 00 00 00       	call   c001d51f <x87Init>
c001d4dd:	0f 20 e0             	mov    eax,cr4
c001d4e0:	66 0d 00 06          	or     ax,0x600
c001d4e4:	0f 22 e0             	mov    cr4,eax
c001d4e7:	c3                   	ret    

c001d4e8 <sseClose>:
c001d4e8:	c3                   	ret    
c001d4e9:	66 90                	xchg   ax,ax
c001d4eb:	66 90                	xchg   ax,ax
c001d4ed:	66 90                	xchg   ax,ax
c001d4ef:	90                   	nop

c001d4f0 <value_37F>:
c001d4f0:	7f 03                	jg     c001d4f5 <value_37A+0x1>

c001d4f2 <value_37E>:
c001d4f2:	7e 03                	jle    c001d4f7 <x87Detect+0x1>

c001d4f4 <value_37A>:
c001d4f4:	7a 03                	jp     c001d4f9 <x87Detect+0x3>

c001d4f6 <x87Detect>:
c001d4f6:	b8 01 00 00 00       	mov    eax,0x1
c001d4fb:	0f a2                	cpuid  
c001d4fd:	f7 c2 01 00 00 00    	test   edx,0x1
c001d503:	74 06                	je     c001d50b <x87Detect.nox87>
c001d505:	b8 01 00 00 00       	mov    eax,0x1
c001d50a:	c3                   	ret    

c001d50b <x87Detect.nox87>:
c001d50b:	b8 00 00 00 00       	mov    eax,0x0
c001d510:	c3                   	ret    

c001d511 <x87Save>:
c001d511:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d515:	dd 30                	fnsave [eax]
c001d517:	c3                   	ret    

c001d518 <x87Load>:
c001d518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d51c:	dd 20                	frstor [eax]
c001d51e:	c3                   	ret    

c001d51f <x87Init>:
c001d51f:	0f 20 c0             	mov    eax,cr0
c001d522:	66 25 fb ff          	and    ax,0xfffb
c001d526:	66 0d 22 00          	or     ax,0x22
c001d52a:	0f 22 c0             	mov    cr0,eax
c001d52d:	db e3                	fninit 
c001d52f:	0f 06                	clts   
c001d531:	d9 2d f4 d4 01 c0    	fldcw  WORD PTR ds:0xc001d4f4
c001d537:	c3                   	ret    

c001d538 <x87Close>:
c001d538:	c3                   	ret    
c001d539:	66 90                	xchg   ax,ax
c001d53b:	90                   	nop

c001d53c <__do_global_ctors_aux>:
c001d53c:	a1 ec e4 01 c0       	mov    eax,ds:0xc001e4ec
c001d541:	83 f8 ff             	cmp    eax,0xffffffff
c001d544:	74 1a                	je     c001d560 <__do_global_ctors_aux+0x24>
c001d546:	55                   	push   ebp
c001d547:	89 e5                	mov    ebp,esp
c001d549:	53                   	push   ebx
c001d54a:	52                   	push   edx
c001d54b:	bb ec e4 01 c0       	mov    ebx,0xc001e4ec
c001d550:	ff d0                	call   eax
c001d552:	83 eb 04             	sub    ebx,0x4
c001d555:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d557:	83 f8 ff             	cmp    eax,0xffffffff
c001d55a:	75 f4                	jne    c001d550 <__do_global_ctors_aux+0x14>
c001d55c:	58                   	pop    eax
c001d55d:	5b                   	pop    ebx
c001d55e:	5d                   	pop    ebp
c001d55f:	c3                   	ret    
c001d560:	c3                   	ret    
c001d561:	66 90                	xchg   ax,ax
c001d563:	90                   	nop

c001d564 <__divdi3>:
c001d564:	55                   	push   ebp
c001d565:	57                   	push   edi
c001d566:	56                   	push   esi
c001d567:	53                   	push   ebx
c001d568:	83 ec 1c             	sub    esp,0x1c
c001d56b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d56f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d573:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d576:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d57a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d57e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d582:	85 db                	test   ebx,ebx
c001d584:	0f 88 8e 00 00 00    	js     c001d618 <__divdi3+0xb4>
c001d58a:	89 dd                	mov    ebp,ebx
c001d58c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d594:	89 d3                	mov    ebx,edx
c001d596:	85 d2                	test   edx,edx
c001d598:	79 0d                	jns    c001d5a7 <__divdi3+0x43>
c001d59a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001d59e:	f7 d8                	neg    eax
c001d5a0:	83 d2 00             	adc    edx,0x0
c001d5a3:	f7 da                	neg    edx
c001d5a5:	89 d3                	mov    ebx,edx
c001d5a7:	89 c7                	mov    edi,eax
c001d5a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d5ac:	85 db                	test   ebx,ebx
c001d5ae:	75 48                	jne    c001d5f8 <__divdi3+0x94>
c001d5b0:	39 ef                	cmp    edi,ebp
c001d5b2:	76 24                	jbe    c001d5d8 <__divdi3+0x74>
c001d5b4:	89 ea                	mov    edx,ebp
c001d5b6:	f7 f7                	div    edi
c001d5b8:	89 c1                	mov    ecx,eax
c001d5ba:	31 f6                	xor    esi,esi
c001d5bc:	89 c8                	mov    eax,ecx
c001d5be:	89 f2                	mov    edx,esi
c001d5c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d5c4:	85 c9                	test   ecx,ecx
c001d5c6:	74 07                	je     c001d5cf <__divdi3+0x6b>
c001d5c8:	f7 d8                	neg    eax
c001d5ca:	83 d2 00             	adc    edx,0x0
c001d5cd:	f7 da                	neg    edx
c001d5cf:	83 c4 1c             	add    esp,0x1c
c001d5d2:	5b                   	pop    ebx
c001d5d3:	5e                   	pop    esi
c001d5d4:	5f                   	pop    edi
c001d5d5:	5d                   	pop    ebp
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop
c001d5d8:	85 ff                	test   edi,edi
c001d5da:	75 0b                	jne    c001d5e7 <__divdi3+0x83>
c001d5dc:	b8 01 00 00 00       	mov    eax,0x1
c001d5e1:	31 d2                	xor    edx,edx
c001d5e3:	f7 f3                	div    ebx
c001d5e5:	89 c7                	mov    edi,eax
c001d5e7:	31 d2                	xor    edx,edx
c001d5e9:	89 e8                	mov    eax,ebp
c001d5eb:	f7 f7                	div    edi
c001d5ed:	89 c6                	mov    esi,eax
c001d5ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d5f2:	f7 f7                	div    edi
c001d5f4:	89 c1                	mov    ecx,eax
c001d5f6:	eb c4                	jmp    c001d5bc <__divdi3+0x58>
c001d5f8:	39 eb                	cmp    ebx,ebp
c001d5fa:	77 3c                	ja     c001d638 <__divdi3+0xd4>
c001d5fc:	0f bd f3             	bsr    esi,ebx
c001d5ff:	83 f6 1f             	xor    esi,0x1f
c001d602:	75 40                	jne    c001d644 <__divdi3+0xe0>
c001d604:	39 eb                	cmp    ebx,ebp
c001d606:	72 09                	jb     c001d611 <__divdi3+0xad>
c001d608:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001d60b:	0f 87 97 00 00 00    	ja     c001d6a8 <__divdi3+0x144>
c001d611:	b9 01 00 00 00       	mov    ecx,0x1
c001d616:	eb a4                	jmp    c001d5bc <__divdi3+0x58>
c001d618:	f7 d9                	neg    ecx
c001d61a:	83 d3 00             	adc    ebx,0x0
c001d61d:	f7 db                	neg    ebx
c001d61f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d622:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d626:	89 dd                	mov    ebp,ebx
c001d628:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001d630:	e9 5f ff ff ff       	jmp    c001d594 <__divdi3+0x30>
c001d635:	8d 76 00             	lea    esi,[esi+0x0]
c001d638:	31 f6                	xor    esi,esi
c001d63a:	31 c9                	xor    ecx,ecx
c001d63c:	e9 7b ff ff ff       	jmp    c001d5bc <__divdi3+0x58>
c001d641:	8d 76 00             	lea    esi,[esi+0x0]
c001d644:	b8 20 00 00 00       	mov    eax,0x20
c001d649:	29 f0                	sub    eax,esi
c001d64b:	89 f1                	mov    ecx,esi
c001d64d:	d3 e3                	shl    ebx,cl
c001d64f:	89 fa                	mov    edx,edi
c001d651:	88 c1                	mov    cl,al
c001d653:	d3 ea                	shr    edx,cl
c001d655:	09 da                	or     edx,ebx
c001d657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d65b:	89 f1                	mov    ecx,esi
c001d65d:	d3 e7                	shl    edi,cl
c001d65f:	89 eb                	mov    ebx,ebp
c001d661:	88 c1                	mov    cl,al
c001d663:	d3 eb                	shr    ebx,cl
c001d665:	89 f1                	mov    ecx,esi
c001d667:	d3 e5                	shl    ebp,cl
c001d669:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d66c:	88 c1                	mov    cl,al
c001d66e:	d3 ea                	shr    edx,cl
c001d670:	09 d5                	or     ebp,edx
c001d672:	89 e8                	mov    eax,ebp
c001d674:	89 da                	mov    edx,ebx
c001d676:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001d67a:	89 d3                	mov    ebx,edx
c001d67c:	89 c5                	mov    ebp,eax
c001d67e:	f7 e7                	mul    edi
c001d680:	39 d3                	cmp    ebx,edx
c001d682:	72 18                	jb     c001d69c <__divdi3+0x138>
c001d684:	74 0a                	je     c001d690 <__divdi3+0x12c>
c001d686:	89 e9                	mov    ecx,ebp
c001d688:	31 f6                	xor    esi,esi
c001d68a:	e9 2d ff ff ff       	jmp    c001d5bc <__divdi3+0x58>
c001d68f:	90                   	nop
c001d690:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d693:	89 f1                	mov    ecx,esi
c001d695:	d3 e7                	shl    edi,cl
c001d697:	39 c7                	cmp    edi,eax
c001d699:	73 eb                	jae    c001d686 <__divdi3+0x122>
c001d69b:	90                   	nop
c001d69c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001d69f:	31 f6                	xor    esi,esi
c001d6a1:	e9 16 ff ff ff       	jmp    c001d5bc <__divdi3+0x58>
c001d6a6:	66 90                	xchg   ax,ax
c001d6a8:	31 c9                	xor    ecx,ecx
c001d6aa:	e9 0d ff ff ff       	jmp    c001d5bc <__divdi3+0x58>
c001d6af:	90                   	nop

c001d6b0 <__moddi3>:
c001d6b0:	55                   	push   ebp
c001d6b1:	57                   	push   edi
c001d6b2:	56                   	push   esi
c001d6b3:	53                   	push   ebx
c001d6b4:	83 ec 2c             	sub    esp,0x2c
c001d6b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d6bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001d6bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001d6c7:	85 db                	test   ebx,ebx
c001d6c9:	0f 88 85 00 00 00    	js     c001d754 <__moddi3+0xa4>
c001d6cf:	89 de                	mov    esi,ebx
c001d6d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d6d9:	89 d7                	mov    edi,edx
c001d6db:	85 d2                	test   edx,edx
c001d6dd:	79 09                	jns    c001d6e8 <__moddi3+0x38>
c001d6df:	f7 d8                	neg    eax
c001d6e1:	83 d2 00             	adc    edx,0x0
c001d6e4:	f7 da                	neg    edx
c001d6e6:	89 d7                	mov    edi,edx
c001d6e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6ec:	89 cd                	mov    ebp,ecx
c001d6ee:	85 ff                	test   edi,edi
c001d6f0:	75 52                	jne    c001d744 <__moddi3+0x94>
c001d6f2:	89 c3                	mov    ebx,eax
c001d6f4:	39 f0                	cmp    eax,esi
c001d6f6:	76 24                	jbe    c001d71c <__moddi3+0x6c>
c001d6f8:	89 c8                	mov    eax,ecx
c001d6fa:	89 f2                	mov    edx,esi
c001d6fc:	f7 f3                	div    ebx
c001d6fe:	89 d6                	mov    esi,edx
c001d700:	89 f0                	mov    eax,esi
c001d702:	31 d2                	xor    edx,edx
c001d704:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d708:	85 c9                	test   ecx,ecx
c001d70a:	74 07                	je     c001d713 <__moddi3+0x63>
c001d70c:	f7 d8                	neg    eax
c001d70e:	83 d2 00             	adc    edx,0x0
c001d711:	f7 da                	neg    edx
c001d713:	83 c4 2c             	add    esp,0x2c
c001d716:	5b                   	pop    ebx
c001d717:	5e                   	pop    esi
c001d718:	5f                   	pop    edi
c001d719:	5d                   	pop    ebp
c001d71a:	c3                   	ret    
c001d71b:	90                   	nop
c001d71c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d720:	85 db                	test   ebx,ebx
c001d722:	75 0d                	jne    c001d731 <__moddi3+0x81>
c001d724:	b8 01 00 00 00       	mov    eax,0x1
c001d729:	31 d2                	xor    edx,edx
c001d72b:	f7 f7                	div    edi
c001d72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d731:	89 f0                	mov    eax,esi
c001d733:	31 d2                	xor    edx,edx
c001d735:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d739:	f7 f7                	div    edi
c001d73b:	89 e8                	mov    eax,ebp
c001d73d:	f7 f7                	div    edi
c001d73f:	89 d6                	mov    esi,edx
c001d741:	eb bd                	jmp    c001d700 <__moddi3+0x50>
c001d743:	90                   	nop
c001d744:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d748:	39 f7                	cmp    edi,esi
c001d74a:	76 20                	jbe    c001d76c <__moddi3+0xbc>
c001d74c:	89 c8                	mov    eax,ecx
c001d74e:	89 f2                	mov    edx,esi
c001d750:	eb b2                	jmp    c001d704 <__moddi3+0x54>
c001d752:	66 90                	xchg   ax,ax
c001d754:	f7 d9                	neg    ecx
c001d756:	83 d3 00             	adc    ebx,0x0
c001d759:	f7 db                	neg    ebx
c001d75b:	89 de                	mov    esi,ebx
c001d75d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001d765:	e9 6f ff ff ff       	jmp    c001d6d9 <__moddi3+0x29>
c001d76a:	66 90                	xchg   ax,ax
c001d76c:	0f bd c7             	bsr    eax,edi
c001d76f:	83 f0 1f             	xor    eax,0x1f
c001d772:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d776:	75 24                	jne    c001d79c <__moddi3+0xec>
c001d778:	39 f7                	cmp    edi,esi
c001d77a:	72 06                	jb     c001d782 <__moddi3+0xd2>
c001d77c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001d780:	77 0c                	ja     c001d78e <__moddi3+0xde>
c001d782:	89 e9                	mov    ecx,ebp
c001d784:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d788:	19 fe                	sbb    esi,edi
c001d78a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d78e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d792:	89 f2                	mov    edx,esi
c001d794:	e9 6b ff ff ff       	jmp    c001d704 <__moddi3+0x54>
c001d799:	8d 76 00             	lea    esi,[esi+0x0]
c001d79c:	b8 20 00 00 00       	mov    eax,0x20
c001d7a1:	89 c2                	mov    edx,eax
c001d7a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d7a7:	29 da                	sub    edx,ebx
c001d7a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7ad:	88 d9                	mov    cl,bl
c001d7af:	d3 e7                	shl    edi,cl
c001d7b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d7b5:	88 d1                	mov    cl,dl
c001d7b7:	d3 e8                	shr    eax,cl
c001d7b9:	09 c7                	or     edi,eax
c001d7bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001d7bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d7c3:	89 d8                	mov    eax,ebx
c001d7c5:	88 d9                	mov    cl,bl
c001d7c7:	d3 e7                	shl    edi,cl
c001d7c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d7cd:	89 f3                	mov    ebx,esi
c001d7cf:	88 d1                	mov    cl,dl
c001d7d1:	d3 eb                	shr    ebx,cl
c001d7d3:	89 c7                	mov    edi,eax
c001d7d5:	88 c1                	mov    cl,al
c001d7d7:	d3 e6                	shl    esi,cl
c001d7d9:	89 e8                	mov    eax,ebp
c001d7db:	88 d1                	mov    cl,dl
c001d7dd:	d3 e8                	shr    eax,cl
c001d7df:	09 f0                	or     eax,esi
c001d7e1:	89 f9                	mov    ecx,edi
c001d7e3:	d3 e5                	shl    ebp,cl
c001d7e5:	89 da                	mov    edx,ebx
c001d7e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001d7eb:	89 d3                	mov    ebx,edx
c001d7ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d7f1:	89 c6                	mov    esi,eax
c001d7f3:	89 d1                	mov    ecx,edx
c001d7f5:	39 d3                	cmp    ebx,edx
c001d7f7:	72 27                	jb     c001d820 <__moddi3+0x170>
c001d7f9:	74 21                	je     c001d81c <__moddi3+0x16c>
c001d7fb:	29 f5                	sub    ebp,esi
c001d7fd:	19 cb                	sbb    ebx,ecx
c001d7ff:	89 de                	mov    esi,ebx
c001d801:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001d805:	d3 e6                	shl    esi,cl
c001d807:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d80b:	89 f9                	mov    ecx,edi
c001d80d:	d3 ed                	shr    ebp,cl
c001d80f:	09 ee                	or     esi,ebp
c001d811:	89 f0                	mov    eax,esi
c001d813:	d3 eb                	shr    ebx,cl
c001d815:	89 da                	mov    edx,ebx
c001d817:	e9 e8 fe ff ff       	jmp    c001d704 <__moddi3+0x54>
c001d81c:	39 c5                	cmp    ebp,eax
c001d81e:	73 db                	jae    c001d7fb <__moddi3+0x14b>
c001d820:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001d824:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001d828:	89 d1                	mov    ecx,edx
c001d82a:	89 c6                	mov    esi,eax
c001d82c:	eb cd                	jmp    c001d7fb <__moddi3+0x14b>
c001d82e:	66 90                	xchg   ax,ax

c001d830 <__udivdi3>:
c001d830:	55                   	push   ebp
c001d831:	57                   	push   edi
c001d832:	56                   	push   esi
c001d833:	53                   	push   ebx
c001d834:	83 ec 1c             	sub    esp,0x1c
c001d837:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d83b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d843:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d847:	85 d2                	test   edx,edx
c001d849:	75 41                	jne    c001d88c <__udivdi3+0x5c>
c001d84b:	39 f7                	cmp    edi,esi
c001d84d:	76 15                	jbe    c001d864 <__udivdi3+0x34>
c001d84f:	89 e8                	mov    eax,ebp
c001d851:	89 f2                	mov    edx,esi
c001d853:	f7 f7                	div    edi
c001d855:	31 db                	xor    ebx,ebx
c001d857:	89 da                	mov    edx,ebx
c001d859:	83 c4 1c             	add    esp,0x1c
c001d85c:	5b                   	pop    ebx
c001d85d:	5e                   	pop    esi
c001d85e:	5f                   	pop    edi
c001d85f:	5d                   	pop    ebp
c001d860:	c3                   	ret    
c001d861:	8d 76 00             	lea    esi,[esi+0x0]
c001d864:	89 f9                	mov    ecx,edi
c001d866:	85 ff                	test   edi,edi
c001d868:	75 0b                	jne    c001d875 <__udivdi3+0x45>
c001d86a:	b8 01 00 00 00       	mov    eax,0x1
c001d86f:	31 d2                	xor    edx,edx
c001d871:	f7 f7                	div    edi
c001d873:	89 c1                	mov    ecx,eax
c001d875:	31 d2                	xor    edx,edx
c001d877:	89 f0                	mov    eax,esi
c001d879:	f7 f1                	div    ecx
c001d87b:	89 c3                	mov    ebx,eax
c001d87d:	89 e8                	mov    eax,ebp
c001d87f:	f7 f1                	div    ecx
c001d881:	89 da                	mov    edx,ebx
c001d883:	83 c4 1c             	add    esp,0x1c
c001d886:	5b                   	pop    ebx
c001d887:	5e                   	pop    esi
c001d888:	5f                   	pop    edi
c001d889:	5d                   	pop    ebp
c001d88a:	c3                   	ret    
c001d88b:	90                   	nop
c001d88c:	39 f2                	cmp    edx,esi
c001d88e:	77 1c                	ja     c001d8ac <__udivdi3+0x7c>
c001d890:	0f bd da             	bsr    ebx,edx
c001d893:	83 f3 1f             	xor    ebx,0x1f
c001d896:	75 24                	jne    c001d8bc <__udivdi3+0x8c>
c001d898:	39 f2                	cmp    edx,esi
c001d89a:	72 08                	jb     c001d8a4 <__udivdi3+0x74>
c001d89c:	39 ef                	cmp    edi,ebp
c001d89e:	0f 87 84 00 00 00    	ja     c001d928 <__udivdi3+0xf8>
c001d8a4:	b8 01 00 00 00       	mov    eax,0x1
c001d8a9:	eb ac                	jmp    c001d857 <__udivdi3+0x27>
c001d8ab:	90                   	nop
c001d8ac:	31 db                	xor    ebx,ebx
c001d8ae:	31 c0                	xor    eax,eax
c001d8b0:	89 da                	mov    edx,ebx
c001d8b2:	83 c4 1c             	add    esp,0x1c
c001d8b5:	5b                   	pop    ebx
c001d8b6:	5e                   	pop    esi
c001d8b7:	5f                   	pop    edi
c001d8b8:	5d                   	pop    ebp
c001d8b9:	c3                   	ret    
c001d8ba:	66 90                	xchg   ax,ax
c001d8bc:	b8 20 00 00 00       	mov    eax,0x20
c001d8c1:	29 d8                	sub    eax,ebx
c001d8c3:	88 d9                	mov    cl,bl
c001d8c5:	d3 e2                	shl    edx,cl
c001d8c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d8cb:	89 fa                	mov    edx,edi
c001d8cd:	88 c1                	mov    cl,al
c001d8cf:	d3 ea                	shr    edx,cl
c001d8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8d5:	09 d1                	or     ecx,edx
c001d8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d8db:	88 d9                	mov    cl,bl
c001d8dd:	d3 e7                	shl    edi,cl
c001d8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d8e3:	89 f7                	mov    edi,esi
c001d8e5:	88 c1                	mov    cl,al
c001d8e7:	d3 ef                	shr    edi,cl
c001d8e9:	88 d9                	mov    cl,bl
c001d8eb:	d3 e6                	shl    esi,cl
c001d8ed:	89 ea                	mov    edx,ebp
c001d8ef:	88 c1                	mov    cl,al
c001d8f1:	d3 ea                	shr    edx,cl
c001d8f3:	09 d6                	or     esi,edx
c001d8f5:	89 f0                	mov    eax,esi
c001d8f7:	89 fa                	mov    edx,edi
c001d8f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001d8fd:	89 d7                	mov    edi,edx
c001d8ff:	89 c6                	mov    esi,eax
c001d901:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001d905:	39 d7                	cmp    edi,edx
c001d907:	72 13                	jb     c001d91c <__udivdi3+0xec>
c001d909:	74 09                	je     c001d914 <__udivdi3+0xe4>
c001d90b:	89 f0                	mov    eax,esi
c001d90d:	31 db                	xor    ebx,ebx
c001d90f:	e9 43 ff ff ff       	jmp    c001d857 <__udivdi3+0x27>
c001d914:	88 d9                	mov    cl,bl
c001d916:	d3 e5                	shl    ebp,cl
c001d918:	39 c5                	cmp    ebp,eax
c001d91a:	73 ef                	jae    c001d90b <__udivdi3+0xdb>
c001d91c:	8d 46 ff             	lea    eax,[esi-0x1]
c001d91f:	31 db                	xor    ebx,ebx
c001d921:	e9 31 ff ff ff       	jmp    c001d857 <__udivdi3+0x27>
c001d926:	66 90                	xchg   ax,ax
c001d928:	31 c0                	xor    eax,eax
c001d92a:	e9 28 ff ff ff       	jmp    c001d857 <__udivdi3+0x27>
c001d92f:	90                   	nop

c001d930 <__umoddi3>:
c001d930:	55                   	push   ebp
c001d931:	57                   	push   edi
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	83 ec 1c             	sub    esp,0x1c
c001d937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d93b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d93f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d943:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d947:	89 da                	mov    edx,ebx
c001d949:	85 c0                	test   eax,eax
c001d94b:	75 37                	jne    c001d984 <__umoddi3+0x54>
c001d94d:	39 df                	cmp    edi,ebx
c001d94f:	76 13                	jbe    c001d964 <__umoddi3+0x34>
c001d951:	89 f0                	mov    eax,esi
c001d953:	f7 f7                	div    edi
c001d955:	89 d0                	mov    eax,edx
c001d957:	31 d2                	xor    edx,edx
c001d959:	83 c4 1c             	add    esp,0x1c
c001d95c:	5b                   	pop    ebx
c001d95d:	5e                   	pop    esi
c001d95e:	5f                   	pop    edi
c001d95f:	5d                   	pop    ebp
c001d960:	c3                   	ret    
c001d961:	8d 76 00             	lea    esi,[esi+0x0]
c001d964:	89 fd                	mov    ebp,edi
c001d966:	85 ff                	test   edi,edi
c001d968:	75 0b                	jne    c001d975 <__umoddi3+0x45>
c001d96a:	b8 01 00 00 00       	mov    eax,0x1
c001d96f:	31 d2                	xor    edx,edx
c001d971:	f7 f7                	div    edi
c001d973:	89 c5                	mov    ebp,eax
c001d975:	89 d8                	mov    eax,ebx
c001d977:	31 d2                	xor    edx,edx
c001d979:	f7 f5                	div    ebp
c001d97b:	89 f0                	mov    eax,esi
c001d97d:	f7 f5                	div    ebp
c001d97f:	89 d0                	mov    eax,edx
c001d981:	eb d4                	jmp    c001d957 <__umoddi3+0x27>
c001d983:	90                   	nop
c001d984:	89 f1                	mov    ecx,esi
c001d986:	39 d8                	cmp    eax,ebx
c001d988:	76 0a                	jbe    c001d994 <__umoddi3+0x64>
c001d98a:	89 f0                	mov    eax,esi
c001d98c:	83 c4 1c             	add    esp,0x1c
c001d98f:	5b                   	pop    ebx
c001d990:	5e                   	pop    esi
c001d991:	5f                   	pop    edi
c001d992:	5d                   	pop    ebp
c001d993:	c3                   	ret    
c001d994:	0f bd e8             	bsr    ebp,eax
c001d997:	83 f5 1f             	xor    ebp,0x1f
c001d99a:	75 1c                	jne    c001d9b8 <__umoddi3+0x88>
c001d99c:	39 d8                	cmp    eax,ebx
c001d99e:	72 04                	jb     c001d9a4 <__umoddi3+0x74>
c001d9a0:	39 f7                	cmp    edi,esi
c001d9a2:	77 08                	ja     c001d9ac <__umoddi3+0x7c>
c001d9a4:	89 da                	mov    edx,ebx
c001d9a6:	29 fe                	sub    esi,edi
c001d9a8:	19 c2                	sbb    edx,eax
c001d9aa:	89 f1                	mov    ecx,esi
c001d9ac:	89 c8                	mov    eax,ecx
c001d9ae:	83 c4 1c             	add    esp,0x1c
c001d9b1:	5b                   	pop    ebx
c001d9b2:	5e                   	pop    esi
c001d9b3:	5f                   	pop    edi
c001d9b4:	5d                   	pop    ebp
c001d9b5:	c3                   	ret    
c001d9b6:	66 90                	xchg   ax,ax
c001d9b8:	ba 20 00 00 00       	mov    edx,0x20
c001d9bd:	29 ea                	sub    edx,ebp
c001d9bf:	89 e9                	mov    ecx,ebp
c001d9c1:	d3 e0                	shl    eax,cl
c001d9c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9c7:	89 f8                	mov    eax,edi
c001d9c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d9cd:	88 d1                	mov    cl,dl
c001d9cf:	d3 e8                	shr    eax,cl
c001d9d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d9d5:	09 c1                	or     ecx,eax
c001d9d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d9db:	89 e9                	mov    ecx,ebp
c001d9dd:	d3 e7                	shl    edi,cl
c001d9df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d9e3:	89 d8                	mov    eax,ebx
c001d9e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d9e9:	88 d1                	mov    cl,dl
c001d9eb:	d3 e8                	shr    eax,cl
c001d9ed:	89 c7                	mov    edi,eax
c001d9ef:	89 e9                	mov    ecx,ebp
c001d9f1:	d3 e3                	shl    ebx,cl
c001d9f3:	89 f0                	mov    eax,esi
c001d9f5:	88 d1                	mov    cl,dl
c001d9f7:	d3 e8                	shr    eax,cl
c001d9f9:	09 d8                	or     eax,ebx
c001d9fb:	89 e9                	mov    ecx,ebp
c001d9fd:	d3 e6                	shl    esi,cl
c001d9ff:	89 f3                	mov    ebx,esi
c001da01:	89 fa                	mov    edx,edi
c001da03:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001da07:	89 d1                	mov    ecx,edx
c001da09:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001da0d:	89 c6                	mov    esi,eax
c001da0f:	89 d7                	mov    edi,edx
c001da11:	39 d1                	cmp    ecx,edx
c001da13:	72 27                	jb     c001da3c <__umoddi3+0x10c>
c001da15:	74 21                	je     c001da38 <__umoddi3+0x108>
c001da17:	89 ca                	mov    edx,ecx
c001da19:	29 f3                	sub    ebx,esi
c001da1b:	19 fa                	sbb    edx,edi
c001da1d:	89 d0                	mov    eax,edx
c001da1f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001da23:	d3 e0                	shl    eax,cl
c001da25:	89 e9                	mov    ecx,ebp
c001da27:	d3 eb                	shr    ebx,cl
c001da29:	09 d8                	or     eax,ebx
c001da2b:	d3 ea                	shr    edx,cl
c001da2d:	83 c4 1c             	add    esp,0x1c
c001da30:	5b                   	pop    ebx
c001da31:	5e                   	pop    esi
c001da32:	5f                   	pop    edi
c001da33:	5d                   	pop    ebp
c001da34:	c3                   	ret    
c001da35:	8d 76 00             	lea    esi,[esi+0x0]
c001da38:	39 c3                	cmp    ebx,eax
c001da3a:	73 db                	jae    c001da17 <__umoddi3+0xe7>
c001da3c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001da40:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001da44:	89 d7                	mov    edi,edx
c001da46:	89 c6                	mov    esi,eax
c001da48:	eb cd                	jmp    c001da17 <__umoddi3+0xe7>

Disassembly of section .init:

c001da4a <_init>:
c001da4a:	55                   	push   ebp
c001da4b:	89 e5                	mov    ebp,esp
c001da4d:	e8 a2 26 fe ff       	call   c00000f4 <frame_dummy>
c001da52:	e8 e5 fa ff ff       	call   c001d53c <__do_global_ctors_aux>
c001da57:	5d                   	pop    ebp
c001da58:	c3                   	ret    

Disassembly of section .fini:

c001da59 <_fini>:
c001da59:	55                   	push   ebp
c001da5a:	89 e5                	mov    ebp,esp
c001da5c:	e8 23 26 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001da61:	5d                   	pop    ebp
c001da62:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001da64 <Computer::~Computer()>:
c001da64:	83 ec 0c             	sub    esp,0xc
c001da67:	ba 74 ed 01 c0       	mov    edx,0xc001ed74
c001da6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da70:	89 10                	mov    DWORD PTR [eax],edx
c001da72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da76:	83 ec 0c             	sub    esp,0xc
c001da79:	50                   	push   eax
c001da7a:	e8 cb de fe ff       	call   c000b94a <Device::~Device()>
c001da7f:	83 c4 10             	add    esp,0x10
c001da82:	90                   	nop
c001da83:	83 c4 0c             	add    esp,0xc
c001da86:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001da88 <Computer::~Computer()>:
c001da88:	83 ec 0c             	sub    esp,0xc
c001da8b:	83 ec 0c             	sub    esp,0xc
c001da8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da92:	e8 cd ff ff ff       	call   c001da64 <Computer::~Computer()>
c001da97:	83 c4 10             	add    esp,0x10
c001da9a:	83 ec 08             	sub    esp,0x8
c001da9d:	68 70 01 00 00       	push   0x170
c001daa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001daa6:	e8 69 ca fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001daab:	83 c4 10             	add    esp,0x10
c001daae:	83 c4 0c             	add    esp,0xc
c001dab1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001dab2 <idleCommon()>:
c001dab2:	83 ec 0c             	sub    esp,0xc
c001dab5:	fa                   	cli    
c001dab6:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001dabc:	e8 53 6b ff ff       	call   c0014614 <schedule()>
c001dac1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001dac6:	48                   	dec    eax
c001dac7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001dacc:	75 01                	jne    c001dacf <idleCommon()+0x1d>
c001dace:	fb                   	sti    
c001dacf:	83 c4 0c             	add    esp,0xc
c001dad2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001dad4 <LinkedList<UnixFile>::~LinkedList()>:
c001dad4:	90                   	nop
c001dad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001dad6 <LinkedList<UnixFile>::LinkedList()>:
c001dad6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dada:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dae4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001daeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001daef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001daf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dafa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001db00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db16:	90                   	nop
c001db17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001db18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001db20:	75 10                	jne    c001db32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001db22:	83 ec 0c             	sub    esp,0xc
c001db25:	68 88 ef 01 c0       	push   0xc001ef88
c001db2a:	e8 dc 27 ff ff       	call   c001030b <KePanic(char const*)>
c001db2f:	83 c4 10             	add    esp,0x10
c001db32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db36:	8b 00                	mov    eax,DWORD PTR [eax]
c001db38:	85 c0                	test   eax,eax
c001db3a:	74 34                	je     c001db70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001db3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db43:	85 c0                	test   eax,eax
c001db45:	74 29                	je     c001db70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001db47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001db55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001db60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db6e:	eb 65                	jmp    c001dbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001db70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db74:	8b 00                	mov    eax,DWORD PTR [eax]
c001db76:	85 c0                	test   eax,eax
c001db78:	75 4b                	jne    c001dbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001db7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db81:	85 c0                	test   eax,eax
c001db83:	75 40                	jne    c001dbc5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001db85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db8d:	89 10                	mov    DWORD PTR [eax],edx
c001db8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001db97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001db9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dba1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbaf:	85 c0                	test   eax,eax
c001dbb1:	74 22                	je     c001dbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001dbb3:	83 ec 0c             	sub    esp,0xc
c001dbb6:	68 aa ef 01 c0       	push   0xc001efaa
c001dbbb:	e8 4b 27 ff ff       	call   c001030b <KePanic(char const*)>
c001dbc0:	83 c4 10             	add    esp,0x10
c001dbc3:	eb 10                	jmp    c001dbd5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001dbc5:	83 ec 0c             	sub    esp,0xc
c001dbc8:	68 b4 ef 01 c0       	push   0xc001efb4
c001dbcd:	e8 39 27 ff ff       	call   c001030b <KePanic(char const*)>
c001dbd2:	83 c4 10             	add    esp,0x10
c001dbd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dbdc:	8d 50 01             	lea    edx,[eax+0x1]
c001dbdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbe3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dbe6:	90                   	nop
c001dbe7:	83 c4 0c             	add    esp,0xc
c001dbea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001dbec <LinkedList<UnixFile>::getFirstElement()>:
c001dbec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001dbf4 <LinkedList<UnixFile>::removeFirst()>:
c001dbf4:	83 ec 0c             	sub    esp,0xc
c001dbf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbfd:	85 c0                	test   eax,eax
c001dbff:	75 12                	jne    c001dc13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001dc01:	83 ec 0c             	sub    esp,0xc
c001dc04:	68 c0 ef 01 c0       	push   0xc001efc0
c001dc09:	e8 fd 26 ff ff       	call   c001030b <KePanic(char const*)>
c001dc0e:	83 c4 10             	add    esp,0x10
c001dc11:	eb 7e                	jmp    c001dc91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc1d:	85 c0                	test   eax,eax
c001dc1f:	74 10                	je     c001dc31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001dc21:	83 ec 0c             	sub    esp,0xc
c001dc24:	68 0b f0 01 c0       	push   0xc001f00b
c001dc29:	e8 dd 26 ff ff       	call   c001030b <KePanic(char const*)>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc35:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc3a:	85 c0                	test   eax,eax
c001dc3c:	75 33                	jne    c001dc71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001dc3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dc53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc5a:	83 f8 01             	cmp    eax,0x1
c001dc5d:	74 21                	je     c001dc80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dc5f:	83 ec 0c             	sub    esp,0xc
c001dc62:	68 e4 ef 01 c0       	push   0xc001efe4
c001dc67:	e8 9f 26 ff ff       	call   c001030b <KePanic(char const*)>
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	eb 0f                	jmp    c001dc80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dc71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc75:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7e:	89 10                	mov    DWORD PTR [eax],edx
c001dc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc87:	8d 50 ff             	lea    edx,[eax-0x1]
c001dc8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc91:	83 c4 0c             	add    esp,0xc
c001dc94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001dc96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001dc96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dc9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dc9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001dc9e <DriverlessDevice::~DriverlessDevice()>:
c001dc9e:	ba 5c f6 01 c0       	mov    edx,0xc001f65c
c001dca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dca7:	89 10                	mov    DWORD PTR [eax],edx
c001dca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dcad:	50                   	push   eax
c001dcae:	e8 97 dc fe ff       	call   c000b94a <Device::~Device()>
c001dcb3:	83 c4 04             	add    esp,0x4
c001dcb6:	90                   	nop
c001dcb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001dcb8 <DriverlessDevice::~DriverlessDevice()>:
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcc2:	e8 d7 ff ff ff       	call   c001dc9e <DriverlessDevice::~DriverlessDevice()>
c001dcc7:	83 c4 10             	add    esp,0x10
c001dcca:	83 ec 08             	sub    esp,0x8
c001dccd:	68 58 01 00 00       	push   0x158
c001dcd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dcd6:	e8 39 c8 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001dcdb:	83 c4 10             	add    esp,0x10
c001dcde:	83 c4 0c             	add    esp,0xc
c001dce1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001dce2 <LinkedList<Device>::addElement(Device*)>:
c001dce2:	83 ec 0c             	sub    esp,0xc
c001dce5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dcea:	75 10                	jne    c001dcfc <LinkedList<Device>::addElement(Device*)+0x1a>
c001dcec:	83 ec 0c             	sub    esp,0xc
c001dcef:	68 88 ef 01 c0       	push   0xc001ef88
c001dcf4:	e8 12 26 ff ff       	call   c001030b <KePanic(char const*)>
c001dcf9:	83 c4 10             	add    esp,0x10
c001dcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd00:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd02:	85 c0                	test   eax,eax
c001dd04:	74 3a                	je     c001dd40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001dd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd0d:	85 c0                	test   eax,eax
c001dd0f:	74 2f                	je     c001dd40 <LinkedList<Device>::addElement(Device*)+0x5e>
c001dd11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001dd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dd3e:	eb 68                	jmp    c001dda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd44:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd46:	85 c0                	test   eax,eax
c001dd48:	75 4e                	jne    c001dd98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd51:	85 c0                	test   eax,eax
c001dd53:	75 43                	jne    c001dd98 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd5d:	89 10                	mov    DWORD PTR [eax],edx
c001dd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dd67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dd82:	85 c0                	test   eax,eax
c001dd84:	74 22                	je     c001dda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dd86:	83 ec 0c             	sub    esp,0xc
c001dd89:	68 aa ef 01 c0       	push   0xc001efaa
c001dd8e:	e8 78 25 ff ff       	call   c001030b <KePanic(char const*)>
c001dd93:	83 c4 10             	add    esp,0x10
c001dd96:	eb 10                	jmp    c001dda8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	68 b4 ef 01 c0       	push   0xc001efb4
c001dda0:	e8 66 25 ff ff       	call   c001030b <KePanic(char const*)>
c001dda5:	83 c4 10             	add    esp,0x10
c001dda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ddaf:	8d 50 01             	lea    edx,[eax+0x1]
c001ddb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ddb9:	90                   	nop
c001ddba:	83 c4 0c             	add    esp,0xc
c001ddbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001ddbe <LinkedList<Device>::LinkedList()>:
c001ddbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ddc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ddf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddfe:	90                   	nop
c001ddff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001de00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001de00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de04:	8b 00                	mov    eax,DWORD PTR [eax]
c001de06:	85 c0                	test   eax,eax
c001de08:	75 0e                	jne    c001de18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001de0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de11:	85 c0                	test   eax,eax
c001de13:	75 03                	jne    c001de18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001de15:	b0 01                	mov    al,0x1
c001de17:	c3                   	ret    
c001de18:	b0 00                	mov    al,0x0
c001de1a:	90                   	nop
c001de1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001de1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001de1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de20:	8b 00                	mov    eax,DWORD PTR [eax]
c001de22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001de24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001de24:	83 ec 0c             	sub    esp,0xc
c001de27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de2d:	85 c0                	test   eax,eax
c001de2f:	75 17                	jne    c001de48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001de31:	83 ec 0c             	sub    esp,0xc
c001de34:	68 c0 ef 01 c0       	push   0xc001efc0
c001de39:	e8 cd 24 ff ff       	call   c001030b <KePanic(char const*)>
c001de3e:	83 c4 10             	add    esp,0x10
c001de41:	e9 92 00 00 00       	jmp    c001ded8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001de46:	66 90                	xchg   ax,ax
c001de48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001de52:	85 c0                	test   eax,eax
c001de54:	0f 95 c0             	setne  al
c001de57:	84 c0                	test   al,al
c001de59:	74 11                	je     c001de6c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001de5b:	83 ec 0c             	sub    esp,0xc
c001de5e:	68 0b f0 01 c0       	push   0xc001f00b
c001de63:	e8 a3 24 ff ff       	call   c001030b <KePanic(char const*)>
c001de68:	83 c4 10             	add    esp,0x10
c001de6b:	90                   	nop
c001de6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de70:	8b 00                	mov    eax,DWORD PTR [eax]
c001de72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001de75:	85 c0                	test   eax,eax
c001de77:	0f 94 c0             	sete   al
c001de7a:	84 c0                	test   al,al
c001de7c:	74 36                	je     c001deb4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001de7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001de88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de9a:	83 f8 01             	cmp    eax,0x1
c001de9d:	74 25                	je     c001dec4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001de9f:	83 ec 0c             	sub    esp,0xc
c001dea2:	68 e4 ef 01 c0       	push   0xc001efe4
c001dea7:	e8 5f 24 ff ff       	call   c001030b <KePanic(char const*)>
c001deac:	83 c4 10             	add    esp,0x10
c001deaf:	eb 13                	jmp    c001dec4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001deb1:	8d 76 00             	lea    esi,[esi+0x0]
c001deb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb8:	8b 00                	mov    eax,DWORD PTR [eax]
c001deba:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001debd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec1:	89 10                	mov    DWORD PTR [eax],edx
c001dec3:	90                   	nop
c001dec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001decb:	8d 50 ff             	lea    edx,[eax-0x1]
c001dece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ded5:	8d 76 00             	lea    esi,[esi+0x0]
c001ded8:	83 c4 0c             	add    esp,0xc
c001dedb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001dedc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001dedc:	83 ec 0c             	sub    esp,0xc
c001dedf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dee4:	75 12                	jne    c001def8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001dee6:	83 ec 0c             	sub    esp,0xc
c001dee9:	68 88 ef 01 c0       	push   0xc001ef88
c001deee:	e8 18 24 ff ff       	call   c001030b <KePanic(char const*)>
c001def3:	83 c4 10             	add    esp,0x10
c001def6:	66 90                	xchg   ax,ax
c001def8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001defc:	8b 00                	mov    eax,DWORD PTR [eax]
c001defe:	85 c0                	test   eax,eax
c001df00:	74 36                	je     c001df38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001df02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df09:	85 c0                	test   eax,eax
c001df0b:	74 2b                	je     c001df38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df18:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001df1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001df34:	eb 6a                	jmp    c001dfa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001df36:	66 90                	xchg   ax,ax
c001df38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001df3e:	85 c0                	test   eax,eax
c001df40:	75 4e                	jne    c001df90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001df42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df49:	85 c0                	test   eax,eax
c001df4b:	75 43                	jne    c001df90 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001df4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df55:	89 10                	mov    DWORD PTR [eax],edx
c001df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df77:	85 c0                	test   eax,eax
c001df79:	74 25                	je     c001dfa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001df7b:	83 ec 0c             	sub    esp,0xc
c001df7e:	68 aa ef 01 c0       	push   0xc001efaa
c001df83:	e8 83 23 ff ff       	call   c001030b <KePanic(char const*)>
c001df88:	83 c4 10             	add    esp,0x10
c001df8b:	eb 13                	jmp    c001dfa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001df8d:	8d 76 00             	lea    esi,[esi+0x0]
c001df90:	83 ec 0c             	sub    esp,0xc
c001df93:	68 b4 ef 01 c0       	push   0xc001efb4
c001df98:	e8 6e 23 ff ff       	call   c001030b <KePanic(char const*)>
c001df9d:	83 c4 10             	add    esp,0x10
c001dfa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001dfa7:	8d 50 01             	lea    edx,[eax+0x1]
c001dfaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dfb1:	90                   	nop
c001dfb2:	83 c4 0c             	add    esp,0xc
c001dfb5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001dfb8 <ACPI::~ACPI()>:
c001dfb8:	83 ec 0c             	sub    esp,0xc
c001dfbb:	ba f4 fb 01 c0       	mov    edx,0xc001fbf4
c001dfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc4:	89 10                	mov    DWORD PTR [eax],edx
c001dfc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfca:	83 ec 0c             	sub    esp,0xc
c001dfcd:	50                   	push   eax
c001dfce:	e8 77 d9 fe ff       	call   c000b94a <Device::~Device()>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	90                   	nop
c001dfd7:	83 c4 0c             	add    esp,0xc
c001dfda:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001dfdc <ACPI::~ACPI()>:
c001dfdc:	83 ec 0c             	sub    esp,0xc
c001dfdf:	83 ec 0c             	sub    esp,0xc
c001dfe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfe6:	e8 cd ff ff ff       	call   c001dfb8 <ACPI::~ACPI()>
c001dfeb:	83 c4 10             	add    esp,0x10
c001dfee:	83 ec 08             	sub    esp,0x8
c001dff1:	68 64 12 00 00       	push   0x1264
c001dff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dffa:	e8 15 c5 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001dfff:	83 c4 10             	add    esp,0x10
c001e002:	83 c4 0c             	add    esp,0xc
c001e005:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e008 <LinkedList<Device>::~LinkedList()>:
c001e008:	90                   	nop
c001e009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e00c <LinkedList<Device>::isEmpty()>:
c001e00c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e010:	8b 00                	mov    eax,DWORD PTR [eax]
c001e012:	85 c0                	test   eax,eax
c001e014:	75 0e                	jne    c001e024 <LinkedList<Device>::isEmpty()+0x18>
c001e016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e01a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e01d:	85 c0                	test   eax,eax
c001e01f:	75 03                	jne    c001e024 <LinkedList<Device>::isEmpty()+0x18>
c001e021:	b0 01                	mov    al,0x1
c001e023:	c3                   	ret    
c001e024:	b0 00                	mov    al,0x0
c001e026:	90                   	nop
c001e027:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e028 <LinkedList<Device>::getFirstElement()>:
c001e028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e02c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e02e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e030 <LinkedList<Device>::removeFirst()>:
c001e030:	83 ec 0c             	sub    esp,0xc
c001e033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e037:	8b 00                	mov    eax,DWORD PTR [eax]
c001e039:	85 c0                	test   eax,eax
c001e03b:	75 17                	jne    c001e054 <LinkedList<Device>::removeFirst()+0x24>
c001e03d:	83 ec 0c             	sub    esp,0xc
c001e040:	68 c0 ef 01 c0       	push   0xc001efc0
c001e045:	e8 c1 22 ff ff       	call   c001030b <KePanic(char const*)>
c001e04a:	83 c4 10             	add    esp,0x10
c001e04d:	e9 92 00 00 00       	jmp    c001e0e4 <LinkedList<Device>::removeFirst()+0xb4>
c001e052:	66 90                	xchg   ax,ax
c001e054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e058:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e05b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e061:	85 c0                	test   eax,eax
c001e063:	74 13                	je     c001e078 <LinkedList<Device>::removeFirst()+0x48>
c001e065:	83 ec 0c             	sub    esp,0xc
c001e068:	68 0b f0 01 c0       	push   0xc001f00b
c001e06d:	e8 99 22 ff ff       	call   c001030b <KePanic(char const*)>
c001e072:	83 c4 10             	add    esp,0x10
c001e075:	8d 76 00             	lea    esi,[esi+0x0]
c001e078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e07c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e07e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e084:	85 c0                	test   eax,eax
c001e086:	75 34                	jne    c001e0bc <LinkedList<Device>::removeFirst()+0x8c>
c001e088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e08c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e096:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0a4:	83 f8 01             	cmp    eax,0x1
c001e0a7:	74 27                	je     c001e0d0 <LinkedList<Device>::removeFirst()+0xa0>
c001e0a9:	83 ec 0c             	sub    esp,0xc
c001e0ac:	68 e4 ef 01 c0       	push   0xc001efe4
c001e0b1:	e8 55 22 ff ff       	call   c001030b <KePanic(char const*)>
c001e0b6:	83 c4 10             	add    esp,0x10
c001e0b9:	eb 15                	jmp    c001e0d0 <LinkedList<Device>::removeFirst()+0xa0>
c001e0bb:	90                   	nop
c001e0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0c2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cc:	89 10                	mov    DWORD PTR [eax],edx
c001e0ce:	66 90                	xchg   ax,ax
c001e0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e0d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e0e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e0e4:	83 c4 0c             	add    esp,0xc
c001e0e7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e0e8 <CPU::~CPU()>:
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	ba 90 fd 01 c0       	mov    edx,0xc001fd90
c001e0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f4:	89 10                	mov    DWORD PTR [eax],edx
c001e0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	50                   	push   eax
c001e0fe:	e8 47 d8 fe ff       	call   c000b94a <Device::~Device()>
c001e103:	83 c4 10             	add    esp,0x10
c001e106:	90                   	nop
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e10c <CPU::~CPU()>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	83 ec 0c             	sub    esp,0xc
c001e112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e116:	e8 cd ff ff ff       	call   c001e0e8 <CPU::~CPU()>
c001e11b:	83 c4 10             	add    esp,0x10
c001e11e:	83 ec 08             	sub    esp,0x8
c001e121:	68 94 11 00 00       	push   0x1194
c001e126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e12a:	e8 e5 c3 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e12f:	83 c4 10             	add    esp,0x10
c001e132:	83 c4 0c             	add    esp,0xc
c001e135:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e138 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e138:	90                   	nop
c001e139:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e13c <ThreadControlBlock::ThreadControlBlock()>:
c001e13c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e140:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e14b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e156:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e15d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e161:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e16c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e173:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e177:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e17b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e17f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e183:	90                   	nop
c001e184:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e188 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e18c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e196:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e19d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1a1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e1b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1c1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1c8:	90                   	nop
c001e1c9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e1cc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e1cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e1d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e1d3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e1d4 <PCI::~PCI()>:
c001e1d4:	83 ec 0c             	sub    esp,0xc
c001e1d7:	ba b8 0b 02 c0       	mov    edx,0xc0020bb8
c001e1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e0:	89 10                	mov    DWORD PTR [eax],edx
c001e1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e6:	83 ec 0c             	sub    esp,0xc
c001e1e9:	50                   	push   eax
c001e1ea:	e8 e5 d1 fe ff       	call   c000b3d4 <Bus::~Bus()>
c001e1ef:	83 c4 10             	add    esp,0x10
c001e1f2:	90                   	nop
c001e1f3:	83 c4 0c             	add    esp,0xc
c001e1f6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e1f8 <PCI::~PCI()>:
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e202:	e8 cd ff ff ff       	call   c001e1d4 <PCI::~PCI()>
c001e207:	83 c4 10             	add    esp,0x10
c001e20a:	83 ec 08             	sub    esp,0x8
c001e20d:	68 5c 01 00 00       	push   0x15c
c001e212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e216:	e8 f9 c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e21b:	83 c4 10             	add    esp,0x10
c001e21e:	83 c4 0c             	add    esp,0xc
c001e221:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e222 <IDE::~IDE()>:
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	ba 6c 0c 02 c0       	mov    edx,0xc0020c6c
c001e22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22e:	89 10                	mov    DWORD PTR [eax],edx
c001e230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e234:	83 ec 0c             	sub    esp,0xc
c001e237:	50                   	push   eax
c001e238:	e8 87 db fe ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c001e23d:	83 c4 10             	add    esp,0x10
c001e240:	90                   	nop
c001e241:	83 c4 0c             	add    esp,0xc
c001e244:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e246 <IDE::~IDE()>:
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	83 ec 0c             	sub    esp,0xc
c001e24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e250:	e8 cd ff ff ff       	call   c001e222 <IDE::~IDE()>
c001e255:	83 c4 10             	add    esp,0x10
c001e258:	83 ec 08             	sub    esp,0x8
c001e25b:	68 70 02 00 00       	push   0x270
c001e260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e264:	e8 ab c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e269:	83 c4 10             	add    esp,0x10
c001e26c:	83 c4 0c             	add    esp,0xc
c001e26f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e270 <SATABus::~SATABus()>:
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	ba bc 0c 02 c0       	mov    edx,0xc0020cbc
c001e278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27c:	89 10                	mov    DWORD PTR [eax],edx
c001e27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e282:	83 ec 0c             	sub    esp,0xc
c001e285:	50                   	push   eax
c001e286:	e8 39 db fe ff       	call   c000bdc4 <HardDiskController::~HardDiskController()>
c001e28b:	83 c4 10             	add    esp,0x10
c001e28e:	90                   	nop
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e294 <SATABus::~SATABus()>:
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	83 ec 0c             	sub    esp,0xc
c001e29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e29e:	e8 cd ff ff ff       	call   c001e270 <SATABus::~SATABus()>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	83 ec 08             	sub    esp,0x8
c001e2a9:	68 64 01 00 00       	push   0x164
c001e2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2b2:	e8 5d c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	83 c4 0c             	add    esp,0xc
c001e2bd:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e2be <ATA::~ATA()>:
c001e2be:	83 ec 0c             	sub    esp,0xc
c001e2c1:	ba fc 0c 02 c0       	mov    edx,0xc0020cfc
c001e2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ca:	89 10                	mov    DWORD PTR [eax],edx
c001e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d0:	83 ec 0c             	sub    esp,0xc
c001e2d3:	50                   	push   eax
c001e2d4:	e8 cd db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e2d9:	83 c4 10             	add    esp,0x10
c001e2dc:	90                   	nop
c001e2dd:	83 c4 0c             	add    esp,0xc
c001e2e0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e2e2 <ATA::~ATA()>:
c001e2e2:	83 ec 0c             	sub    esp,0xc
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2ec:	e8 cd ff ff ff       	call   c001e2be <ATA::~ATA()>
c001e2f1:	83 c4 10             	add    esp,0x10
c001e2f4:	83 ec 08             	sub    esp,0x8
c001e2f7:	68 7c 01 00 00       	push   0x17c
c001e2fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e300:	e8 0f c2 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e305:	83 c4 10             	add    esp,0x10
c001e308:	83 c4 0c             	add    esp,0xc
c001e30b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e30c <ATAPI::~ATAPI()>:
c001e30c:	83 ec 0c             	sub    esp,0xc
c001e30f:	ba 44 0d 02 c0       	mov    edx,0xc0020d44
c001e314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e318:	89 10                	mov    DWORD PTR [eax],edx
c001e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31e:	83 ec 0c             	sub    esp,0xc
c001e321:	50                   	push   eax
c001e322:	e8 7f db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e327:	83 c4 10             	add    esp,0x10
c001e32a:	90                   	nop
c001e32b:	83 c4 0c             	add    esp,0xc
c001e32e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e330 <ATAPI::~ATAPI()>:
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	83 ec 0c             	sub    esp,0xc
c001e336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e33a:	e8 cd ff ff ff       	call   c001e30c <ATAPI::~ATAPI()>
c001e33f:	83 c4 10             	add    esp,0x10
c001e342:	83 ec 08             	sub    esp,0x8
c001e345:	68 84 01 00 00       	push   0x184
c001e34a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e34e:	e8 c1 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e353:	83 c4 10             	add    esp,0x10
c001e356:	83 c4 0c             	add    esp,0xc
c001e359:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e35a <SATA::~SATA()>:
c001e35a:	83 ec 0c             	sub    esp,0xc
c001e35d:	ba f8 0d 02 c0       	mov    edx,0xc0020df8
c001e362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e366:	89 10                	mov    DWORD PTR [eax],edx
c001e368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	50                   	push   eax
c001e370:	e8 31 db fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	90                   	nop
c001e379:	83 c4 0c             	add    esp,0xc
c001e37c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e37e <SATA::~SATA()>:
c001e37e:	83 ec 0c             	sub    esp,0xc
c001e381:	83 ec 0c             	sub    esp,0xc
c001e384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e388:	e8 cd ff ff ff       	call   c001e35a <SATA::~SATA()>
c001e38d:	83 c4 10             	add    esp,0x10
c001e390:	83 ec 08             	sub    esp,0x8
c001e393:	68 7c 01 00 00       	push   0x17c
c001e398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e39c:	e8 73 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e3a1:	83 c4 10             	add    esp,0x10
c001e3a4:	83 c4 0c             	add    esp,0xc
c001e3a7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e3a8 <SATAPI::~SATAPI()>:
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c001e3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b4:	89 10                	mov    DWORD PTR [eax],edx
c001e3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ba:	83 ec 0c             	sub    esp,0xc
c001e3bd:	50                   	push   eax
c001e3be:	e8 e3 da fe ff       	call   c000bea6 <PhysicalDisk::~PhysicalDisk()>
c001e3c3:	83 c4 10             	add    esp,0x10
c001e3c6:	90                   	nop
c001e3c7:	83 c4 0c             	add    esp,0xc
c001e3ca:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e3cc <SATAPI::~SATAPI()>:
c001e3cc:	83 ec 0c             	sub    esp,0xc
c001e3cf:	83 ec 0c             	sub    esp,0xc
c001e3d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3d6:	e8 cd ff ff ff       	call   c001e3a8 <SATAPI::~SATAPI()>
c001e3db:	83 c4 10             	add    esp,0x10
c001e3de:	83 ec 08             	sub    esp,0x8
c001e3e1:	68 84 01 00 00       	push   0x184
c001e3e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3ea:	e8 25 c1 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e3ef:	83 c4 10             	add    esp,0x10
c001e3f2:	83 c4 0c             	add    esp,0xc
c001e3f5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e3f6 <IOAPIC::~IOAPIC()>:
c001e3f6:	83 ec 0c             	sub    esp,0xc
c001e3f9:	ba 5c 0f 02 c0       	mov    edx,0xc0020f5c
c001e3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e402:	89 10                	mov    DWORD PTR [eax],edx
c001e404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	50                   	push   eax
c001e40c:	e8 39 d5 fe ff       	call   c000b94a <Device::~Device()>
c001e411:	83 c4 10             	add    esp,0x10
c001e414:	90                   	nop
c001e415:	83 c4 0c             	add    esp,0xc
c001e418:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e41a <IOAPIC::~IOAPIC()>:
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	83 ec 0c             	sub    esp,0xc
c001e420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e424:	e8 cd ff ff ff       	call   c001e3f6 <IOAPIC::~IOAPIC()>
c001e429:	83 c4 10             	add    esp,0x10
c001e42c:	83 ec 08             	sub    esp,0x8
c001e42f:	68 68 01 00 00       	push   0x168
c001e434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e438:	e8 d7 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	83 c4 0c             	add    esp,0xc
c001e443:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e444 <APICTimer::~APICTimer()>:
c001e444:	83 ec 0c             	sub    esp,0xc
c001e447:	ba a4 0f 02 c0       	mov    edx,0xc0020fa4
c001e44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e450:	89 10                	mov    DWORD PTR [eax],edx
c001e452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e456:	83 ec 0c             	sub    esp,0xc
c001e459:	50                   	push   eax
c001e45a:	e8 25 ee fe ff       	call   c000d284 <Timer::~Timer()>
c001e45f:	83 c4 10             	add    esp,0x10
c001e462:	90                   	nop
c001e463:	83 c4 0c             	add    esp,0xc
c001e466:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e468 <APICTimer::~APICTimer()>:
c001e468:	83 ec 0c             	sub    esp,0xc
c001e46b:	83 ec 0c             	sub    esp,0xc
c001e46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e472:	e8 cd ff ff ff       	call   c001e444 <APICTimer::~APICTimer()>
c001e477:	83 c4 10             	add    esp,0x10
c001e47a:	83 ec 08             	sub    esp,0x8
c001e47d:	68 60 01 00 00       	push   0x160
c001e482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e486:	e8 89 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e48b:	83 c4 10             	add    esp,0x10
c001e48e:	83 c4 0c             	add    esp,0xc
c001e491:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e494 <PIT::~PIT()>:
c001e494:	83 ec 0c             	sub    esp,0xc
c001e497:	ba f4 0f 02 c0       	mov    edx,0xc0020ff4
c001e49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a0:	89 10                	mov    DWORD PTR [eax],edx
c001e4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a6:	83 ec 0c             	sub    esp,0xc
c001e4a9:	50                   	push   eax
c001e4aa:	e8 d5 ed fe ff       	call   c000d284 <Timer::~Timer()>
c001e4af:	83 c4 10             	add    esp,0x10
c001e4b2:	90                   	nop
c001e4b3:	83 c4 0c             	add    esp,0xc
c001e4b6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e4b8 <PIT::~PIT()>:
c001e4b8:	83 ec 0c             	sub    esp,0xc
c001e4bb:	83 ec 0c             	sub    esp,0xc
c001e4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4c2:	e8 cd ff ff ff       	call   c001e494 <PIT::~PIT()>
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	83 ec 08             	sub    esp,0x8
c001e4cd:	68 5c 01 00 00       	push   0x15c
c001e4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4d6:	e8 39 c0 fe ff       	call   c000a514 <operator delete(void*, unsigned long)>
c001e4db:	83 c4 10             	add    esp,0x10
c001e4de:	83 c4 0c             	add    esp,0xc
c001e4e1:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 81 fe 01 c0       	mov    esi,0xc001fe81
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 9d fe 01 c0       	mov    esi,0xc001fe9d
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
