
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 7a 00 00       	call   c0007ae6 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000025:	3d e8 22 02 c0       	cmp    eax,0xc00222e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 22 02 c0       	push   0xc00222e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 22 02 c0       	mov    eax,0xc00222e8
c0000051:	2d e8 22 02 c0       	sub    eax,0xc00222e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 22 02 c0       	push   0xc00222e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 9c f2 01 c0       	mov    ebx,0xc001f29c
c0000097:	81 eb 98 f2 01 c0    	sub    ebx,0xc001f298
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 98 f2 01 c0       	mov    esi,0xc001f298
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 22 02 c0       	push   0xc00222e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 e8 22 02 c0       	push   0xc00222e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cf 45 01 00       	call   c001487c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 47 a4 00 00       	call   c000a70c <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 ad 45 01 00       	call   c001487c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b6 4a 01 00       	call   c0014da4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 5d 51 01 00       	call   c0015454 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 ab 04 01 00       	jmp    c001082a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000395:	8a 08                	mov    cl,BYTE PTR [eax]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a3:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	74 7f                	je     c000046b <memmove+0x9b>
c00003ec:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ef:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f2:	39 cd                	cmp    ebp,ecx
c00003f4:	0f 93 c1             	setae  cl
c00003f7:	39 f3                	cmp    ebx,esi
c00003f9:	0f 93 c0             	setae  al
c00003fc:	89 c6                	mov    esi,eax
c00003fe:	31 c0                	xor    eax,eax
c0000400:	09 f1                	or     ecx,esi
c0000402:	8d 72 ff             	lea    esi,[edx-0x1]
c0000405:	83 fe 0c             	cmp    esi,0xc
c0000408:	0f 97 c0             	seta   al
c000040b:	89 c6                	mov    esi,eax
c000040d:	85 ce                	test   esi,ecx
c000040f:	0f 84 9b 00 00 00    	je     c00004b0 <memmove+0xe0>
c0000415:	89 e9                	mov    ecx,ebp
c0000417:	09 d9                	or     ecx,ebx
c0000419:	80 e1 03             	and    cl,0x3
c000041c:	0f 85 8e 00 00 00    	jne    c00004b0 <memmove+0xe0>
c0000422:	89 d7                	mov    edi,edx
c0000424:	89 d9                	mov    ecx,ebx
c0000426:	83 e7 fc             	and    edi,0xfffffffc
c0000429:	89 ee                	mov    esi,ebp
c000042b:	01 df                	add    edi,ebx
c000042d:	8d 76 00             	lea    esi,[esi+0x0]
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c1 04             	add    ecx,0x4
c0000435:	89 06                	mov    DWORD PTR [esi],eax
c0000437:	83 c6 04             	add    esi,0x4
c000043a:	39 f9                	cmp    ecx,edi
c000043c:	75 f2                	jne    c0000430 <memmove+0x60>
c000043e:	89 d1                	mov    ecx,edx
c0000440:	89 d7                	mov    edi,edx
c0000442:	83 e1 fc             	and    ecx,0xfffffffc
c0000445:	29 cf                	sub    edi,ecx
c0000447:	01 cb                	add    ebx,ecx
c0000449:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044d:	39 ca                	cmp    edx,ecx
c000044f:	74 1a                	je     c000046b <memmove+0x9b>
c0000451:	8a 03                	mov    al,BYTE PTR [ebx]
c0000453:	83 ff 01             	cmp    edi,0x1
c0000456:	88 06                	mov    BYTE PTR [esi],al
c0000458:	74 11                	je     c000046b <memmove+0x9b>
c000045a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045d:	83 ff 02             	cmp    edi,0x2
c0000460:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000463:	74 06                	je     c000046b <memmove+0x9b>
c0000465:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000468:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046b:	5b                   	pop    ebx
c000046c:	89 e8                	mov    eax,ebp
c000046e:	5e                   	pop    esi
c000046f:	5f                   	pop    edi
c0000470:	5d                   	pop    ebp
c0000471:	c3                   	ret    
c0000472:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 e9                	jbe    c000046b <memmove+0x9b>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e5                	je     c000046b <memmove+0x9b>
c0000486:	83 eb 01             	sub    ebx,0x1
c0000489:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	83 ea 01             	sub    edx,0x1
c0000499:	75 f5                	jne    c0000490 <memmove+0xc0>
c000049b:	5b                   	pop    ebx
c000049c:	89 e8                	mov    eax,ebp
c000049e:	5e                   	pop    esi
c000049f:	5f                   	pop    edi
c00004a0:	5d                   	pop    ebp
c00004a1:	c3                   	ret    
c00004a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	83 c1 01             	add    ecx,0x1
c00004c5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c8:	83 c3 01             	add    ebx,0x1
c00004cb:	39 d1                	cmp    ecx,edx
c00004cd:	75 f1                	jne    c00004c0 <memmove+0xf0>
c00004cf:	eb 9a                	jmp    c000046b <memmove+0x9b>
c00004d1:	eb 0d                	jmp    c00004e0 <memset>
c00004d3:	90                   	nop
c00004d4:	90                   	nop
c00004d5:	90                   	nop
c00004d6:	90                   	nop
c00004d7:	90                   	nop
c00004d8:	90                   	nop
c00004d9:	90                   	nop
c00004da:	90                   	nop
c00004db:	90                   	nop
c00004dc:	90                   	nop
c00004dd:	90                   	nop
c00004de:	90                   	nop
c00004df:	90                   	nop

c00004e0 <memset>:
c00004e0:	57                   	push   edi
c00004e1:	56                   	push   esi
c00004e2:	53                   	push   ebx
c00004e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004eb:	85 d2                	test   edx,edx
c00004ed:	74 1d                	je     c000050c <memset+0x2c>
c00004ef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00004f4:	89 f7                	mov    edi,esi
c00004f6:	83 fa 04             	cmp    edx,0x4
c00004f9:	73 25                	jae    c0000520 <memset+0x40>
c00004fb:	83 e2 03             	and    edx,0x3
c00004fe:	74 0c                	je     c000050c <memset+0x2c>
c0000500:	31 c0                	xor    eax,eax
c0000502:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000505:	83 c0 01             	add    eax,0x1
c0000508:	39 d0                	cmp    eax,edx
c000050a:	72 f6                	jb     c0000502 <memset+0x22>
c000050c:	5b                   	pop    ebx
c000050d:	89 f0                	mov    eax,esi
c000050f:	5e                   	pop    esi
c0000510:	5f                   	pop    edi
c0000511:	c3                   	ret    
c0000512:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000519:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000520:	0f b6 c3             	movzx  eax,bl
c0000523:	88 c4                	mov    ah,al
c0000525:	89 c1                	mov    ecx,eax
c0000527:	c1 e1 10             	shl    ecx,0x10
c000052a:	09 c8                	or     eax,ecx
c000052c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000532:	75 12                	jne    c0000546 <memset+0x66>
c0000534:	f7 c7 02 00 00 00    	test   edi,0x2
c000053a:	75 14                	jne    c0000550 <memset+0x70>
c000053c:	89 d1                	mov    ecx,edx
c000053e:	c1 e9 02             	shr    ecx,0x2
c0000541:	fc                   	cld    
c0000542:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000544:	eb b5                	jmp    c00004fb <memset+0x1b>
c0000546:	88 06                	mov    BYTE PTR [esi],al
c0000548:	8d 7e 01             	lea    edi,[esi+0x1]
c000054b:	83 ea 01             	sub    edx,0x1
c000054e:	eb e4                	jmp    c0000534 <memset+0x54>
c0000550:	66 89 07             	mov    WORD PTR [edi],ax
c0000553:	83 ea 02             	sub    edx,0x2
c0000556:	83 c7 02             	add    edi,0x2
c0000559:	eb e1                	jmp    c000053c <memset+0x5c>
c000055b:	90                   	nop
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	83 c0 01             	add    eax,0x1
c0000573:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000577:	75 f7                	jne    c0000570 <strlen+0x10>
c0000579:	c3                   	ret    
c000057a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c000059e:	85 db                	test   ebx,ebx
c00005a0:	74 36                	je     c00005d8 <strpbrk+0x48>
c00005a2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005a5:	85 f6                	test   esi,esi
c00005a7:	74 25                	je     c00005ce <strpbrk+0x3e>
c00005a9:	39 de                	cmp    esi,ebx
c00005ab:	74 2d                	je     c00005da <strpbrk+0x4a>
c00005ad:	89 fa                	mov    edx,edi
c00005af:	eb 13                	jmp    c00005c4 <strpbrk+0x34>
c00005b1:	eb 0d                	jmp    c00005c0 <strpbrk+0x30>
c00005b3:	90                   	nop
c00005b4:	90                   	nop
c00005b5:	90                   	nop
c00005b6:	90                   	nop
c00005b7:	90                   	nop
c00005b8:	90                   	nop
c00005b9:	90                   	nop
c00005ba:	90                   	nop
c00005bb:	90                   	nop
c00005bc:	90                   	nop
c00005bd:	90                   	nop
c00005be:	90                   	nop
c00005bf:	90                   	nop
c00005c0:	39 d9                	cmp    ecx,ebx
c00005c2:	74 16                	je     c00005da <strpbrk+0x4a>
c00005c4:	83 c2 01             	add    edx,0x1
c00005c7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ca:	85 c9                	test   ecx,ecx
c00005cc:	75 f2                	jne    c00005c0 <strpbrk+0x30>
c00005ce:	83 c0 01             	add    eax,0x1
c00005d1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005d4:	85 db                	test   ebx,ebx
c00005d6:	75 cd                	jne    c00005a5 <strpbrk+0x15>
c00005d8:	31 c0                	xor    eax,eax
c00005da:	5b                   	pop    ebx
c00005db:	5e                   	pop    esi
c00005dc:	5f                   	pop    edi
c00005dd:	c3                   	ret    
c00005de:	66 90                	xchg   ax,ax

c00005e0 <strtok>:
c00005e0:	56                   	push   esi
c00005e1:	53                   	push   ebx
c00005e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ea:	85 db                	test   ebx,ebx
c00005ec:	75 09                	jne    c00005f7 <strtok+0x17>
c00005ee:	eb 30                	jmp    c0000620 <strtok+0x40>
c00005f0:	83 c3 01             	add    ebx,0x1
c00005f3:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005f7:	56                   	push   esi
c00005f8:	53                   	push   ebx
c00005f9:	e8 92 ff ff ff       	call   c0000590 <strpbrk>
c00005fe:	5a                   	pop    edx
c00005ff:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000604:	59                   	pop    ecx
c0000605:	39 d8                	cmp    eax,ebx
c0000607:	74 e7                	je     c00005f0 <strtok+0x10>
c0000609:	85 c0                	test   eax,eax
c000060b:	74 1d                	je     c000062a <strtok+0x4a>
c000060d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000610:	8d 50 01             	lea    edx,[eax+0x1]
c0000613:	89 d8                	mov    eax,ebx
c0000615:	5b                   	pop    ebx
c0000616:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000061c:	5e                   	pop    esi
c000061d:	c3                   	ret    
c000061e:	66 90                	xchg   ax,ax
c0000620:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000626:	85 db                	test   ebx,ebx
c0000628:	75 cd                	jne    c00005f7 <strtok+0x17>
c000062a:	5b                   	pop    ebx
c000062b:	31 c0                	xor    eax,eax
c000062d:	5e                   	pop    esi
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strcpy>:
c0000630:	53                   	push   ebx
c0000631:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000635:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000639:	89 c3                	mov    ebx,eax
c000063b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063d:	84 d2                	test   dl,dl
c000063f:	74 1d                	je     c000065e <strcpy+0x2e>
c0000641:	eb 0d                	jmp    c0000650 <strcpy+0x20>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop
c0000650:	83 c1 01             	add    ecx,0x1
c0000653:	88 13                	mov    BYTE PTR [ebx],dl
c0000655:	83 c3 01             	add    ebx,0x1
c0000658:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065a:	84 d2                	test   dl,dl
c000065c:	75 f2                	jne    c0000650 <strcpy+0x20>
c000065e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000661:	5b                   	pop    ebx
c0000662:	c3                   	ret    
c0000663:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000669:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000670 <strncpy>:
c0000670:	57                   	push   edi
c0000671:	56                   	push   esi
c0000672:	53                   	push   ebx
c0000673:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000677:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000067b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000067f:	85 f6                	test   esi,esi
c0000681:	74 44                	je     c00006c7 <strncpy+0x57>
c0000683:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000685:	8d 46 ff             	lea    eax,[esi-0x1]
c0000688:	8d 7a 01             	lea    edi,[edx+0x1]
c000068b:	88 0a                	mov    BYTE PTR [edx],cl
c000068d:	84 c9                	test   cl,cl
c000068f:	74 3f                	je     c00006d0 <strncpy+0x60>
c0000691:	85 c0                	test   eax,eax
c0000693:	74 32                	je     c00006c7 <strncpy+0x57>
c0000695:	8d 4b 02             	lea    ecx,[ebx+0x2]
c0000698:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c000069b:	8d 46 fe             	lea    eax,[esi-0x2]
c000069e:	8d 7a 02             	lea    edi,[edx+0x2]
c00006a1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006a4:	84 db                	test   bl,bl
c00006a6:	75 1b                	jne    c00006c3 <strncpy+0x53>
c00006a8:	eb 26                	jmp    c00006d0 <strncpy+0x60>
c00006aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b0:	83 c1 01             	add    ecx,0x1
c00006b3:	83 c7 01             	add    edi,0x1
c00006b6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006b9:	83 e8 01             	sub    eax,0x1
c00006bc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006bf:	84 db                	test   bl,bl
c00006c1:	74 0d                	je     c00006d0 <strncpy+0x60>
c00006c3:	85 c0                	test   eax,eax
c00006c5:	75 e9                	jne    c00006b0 <strncpy+0x40>
c00006c7:	5b                   	pop    ebx
c00006c8:	89 d0                	mov    eax,edx
c00006ca:	5e                   	pop    esi
c00006cb:	5f                   	pop    edi
c00006cc:	c3                   	ret    
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	85 c0                	test   eax,eax
c00006d2:	74 f3                	je     c00006c7 <strncpy+0x57>
c00006d4:	89 c3                	mov    ebx,eax
c00006d6:	83 f8 04             	cmp    eax,0x4
c00006d9:	73 25                	jae    c0000700 <strncpy+0x90>
c00006db:	f6 c3 02             	test   bl,0x2
c00006de:	74 08                	je     c00006e8 <strncpy+0x78>
c00006e0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006e5:	83 c7 02             	add    edi,0x2
c00006e8:	80 e3 01             	and    bl,0x1
c00006eb:	74 da                	je     c00006c7 <strncpy+0x57>
c00006ed:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000700:	f7 c7 01 00 00 00    	test   edi,0x1
c0000706:	75 14                	jne    c000071c <strncpy+0xac>
c0000708:	f7 c7 02 00 00 00    	test   edi,0x2
c000070e:	75 17                	jne    c0000727 <strncpy+0xb7>
c0000710:	89 d9                	mov    ecx,ebx
c0000712:	c1 e9 02             	shr    ecx,0x2
c0000715:	fc                   	cld    
c0000716:	31 c0                	xor    eax,eax
c0000718:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000071a:	eb bf                	jmp    c00006db <strncpy+0x6b>
c000071c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071f:	83 eb 01             	sub    ebx,0x1
c0000722:	83 c7 01             	add    edi,0x1
c0000725:	eb e1                	jmp    c0000708 <strncpy+0x98>
c0000727:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000072c:	83 eb 02             	sub    ebx,0x2
c000072f:	83 c7 02             	add    edi,0x2
c0000732:	eb dc                	jmp    c0000710 <strncpy+0xa0>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000740 <strcmp>:
c0000740:	57                   	push   edi
c0000741:	56                   	push   esi
c0000742:	53                   	push   ebx
c0000743:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000747:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000074b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000074e:	8a 17                	mov    dl,BYTE PTR [edi]
c0000750:	38 c2                	cmp    dl,al
c0000752:	75 32                	jne    c0000786 <strcmp+0x46>
c0000754:	85 c0                	test   eax,eax
c0000756:	74 28                	je     c0000780 <strcmp+0x40>
c0000758:	b8 01 00 00 00       	mov    eax,0x1
c000075d:	eb 08                	jmp    c0000767 <strcmp+0x27>
c000075f:	90                   	nop
c0000760:	83 c0 01             	add    eax,0x1
c0000763:	85 db                	test   ebx,ebx
c0000765:	74 19                	je     c0000780 <strcmp+0x40>
c0000767:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000076b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000076e:	89 da                	mov    edx,ebx
c0000770:	38 d9                	cmp    cl,bl
c0000772:	74 ec                	je     c0000760 <strcmp+0x20>
c0000774:	5b                   	pop    ebx
c0000775:	0f b6 c2             	movzx  eax,dl
c0000778:	0f b6 c9             	movzx  ecx,cl
c000077b:	5e                   	pop    esi
c000077c:	29 c8                	sub    eax,ecx
c000077e:	5f                   	pop    edi
c000077f:	c3                   	ret    
c0000780:	5b                   	pop    ebx
c0000781:	31 c0                	xor    eax,eax
c0000783:	5e                   	pop    esi
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	89 c1                	mov    ecx,eax
c0000788:	eb ea                	jmp    c0000774 <strcmp+0x34>
c000078a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000790 <strchr>:
c0000790:	53                   	push   ebx
c0000791:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000795:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c0000798:	85 db                	test   ebx,ebx
c000079a:	74 22                	je     c00007be <strchr+0x2e>
c000079c:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007a1:	39 d3                	cmp    ebx,edx
c00007a3:	74 1b                	je     c00007c0 <strchr+0x30>
c00007a5:	89 d1                	mov    ecx,edx
c00007a7:	eb 0b                	jmp    c00007b4 <strchr+0x24>
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	39 ca                	cmp    edx,ecx
c00007b2:	74 0c                	je     c00007c0 <strchr+0x30>
c00007b4:	83 c0 01             	add    eax,0x1
c00007b7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ba:	85 d2                	test   edx,edx
c00007bc:	75 f2                	jne    c00007b0 <strchr+0x20>
c00007be:	31 c0                	xor    eax,eax
c00007c0:	5b                   	pop    ebx
c00007c1:	c3                   	ret    
c00007c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007d0 <strncmp>:
c00007d0:	55                   	push   ebp
c00007d1:	57                   	push   edi
c00007d2:	56                   	push   esi
c00007d3:	53                   	push   ebx
c00007d4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007d8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007e0:	85 f6                	test   esi,esi
c00007e2:	74 35                	je     c0000819 <strncmp+0x49>
c00007e4:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007e7:	8a 17                	mov    dl,BYTE PTR [edi]
c00007e9:	89 e9                	mov    ecx,ebp
c00007eb:	38 ca                	cmp    dl,cl
c00007ed:	75 31                	jne    c0000820 <strncmp+0x50>
c00007ef:	8d 47 01             	lea    eax,[edi+0x1]
c00007f2:	85 ed                	test   ebp,ebp
c00007f4:	74 23                	je     c0000819 <strncmp+0x49>
c00007f6:	01 f7                	add    edi,esi
c00007f8:	eb 18                	jmp    c0000812 <strncmp+0x42>
c00007fa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000800:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000803:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000805:	89 f2                	mov    edx,esi
c0000807:	38 d1                	cmp    cl,dl
c0000809:	75 15                	jne    c0000820 <strncmp+0x50>
c000080b:	83 c0 01             	add    eax,0x1
c000080e:	85 f6                	test   esi,esi
c0000810:	74 07                	je     c0000819 <strncmp+0x49>
c0000812:	83 c3 01             	add    ebx,0x1
c0000815:	39 c7                	cmp    edi,eax
c0000817:	75 e7                	jne    c0000800 <strncmp+0x30>
c0000819:	5b                   	pop    ebx
c000081a:	31 c0                	xor    eax,eax
c000081c:	5e                   	pop    esi
c000081d:	5f                   	pop    edi
c000081e:	5d                   	pop    ebp
c000081f:	c3                   	ret    
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	0f b6 c2             	movzx  eax,dl
c0000825:	0f b6 c9             	movzx  ecx,cl
c0000828:	5f                   	pop    edi
c0000829:	29 c8                	sub    eax,ecx
c000082b:	5d                   	pop    ebp
c000082c:	c3                   	ret    
c000082d:	8d 76 00             	lea    esi,[esi+0x0]

c0000830 <strcat>:
c0000830:	56                   	push   esi
c0000831:	53                   	push   ebx
c0000832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000836:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083a:	89 c3                	mov    ebx,eax
c000083c:	eb 04                	jmp    c0000842 <strcat+0x12>
c000083e:	66 90                	xchg   ax,ax
c0000840:	89 d3                	mov    ebx,edx
c0000842:	8d 53 01             	lea    edx,[ebx+0x1]
c0000845:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000849:	75 f5                	jne    c0000840 <strcat+0x10>
c000084b:	31 d2                	xor    edx,edx
c000084d:	8d 76 00             	lea    esi,[esi+0x0]
c0000850:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000853:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000856:	83 c2 01             	add    edx,0x1
c0000859:	84 c9                	test   cl,cl
c000085b:	75 f3                	jne    c0000850 <strcat+0x20>
c000085d:	5b                   	pop    ebx
c000085e:	5e                   	pop    esi
c000085f:	c3                   	ret    

c0000860 <strncat>:
c0000860:	56                   	push   esi
c0000861:	53                   	push   ebx
c0000862:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000866:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000086a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000086e:	85 f6                	test   esi,esi
c0000870:	74 32                	je     c00008a4 <strncat+0x44>
c0000872:	89 c2                	mov    edx,eax
c0000874:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000087a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000880:	83 c2 01             	add    edx,0x1
c0000883:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000887:	75 f7                	jne    c0000880 <strncat+0x20>
c0000889:	01 ce                	add    esi,ecx
c000088b:	eb 0a                	jmp    c0000897 <strncat+0x37>
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	39 f1                	cmp    ecx,esi
c0000892:	74 1c                	je     c00008b0 <strncat+0x50>
c0000894:	83 c2 01             	add    edx,0x1
c0000897:	83 c1 01             	add    ecx,0x1
c000089a:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000089d:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008a0:	84 db                	test   bl,bl
c00008a2:	75 ec                	jne    c0000890 <strncat+0x30>
c00008a4:	5b                   	pop    ebx
c00008a5:	5e                   	pop    esi
c00008a6:	c3                   	ret    
c00008a7:	89 f6                	mov    esi,esi
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008b3:	5b                   	pop    ebx
c00008b4:	5e                   	pop    esi
c00008b5:	c3                   	ret    
c00008b6:	8d 76 00             	lea    esi,[esi+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <strstr>:
c00008c0:	57                   	push   edi
c00008c1:	56                   	push   esi
c00008c2:	53                   	push   ebx
c00008c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008cb:	57                   	push   edi
c00008cc:	e8 8f fc ff ff       	call   c0000560 <strlen>
c00008d1:	59                   	pop    ecx
c00008d2:	89 c6                	mov    esi,eax
c00008d4:	85 c0                	test   eax,eax
c00008d6:	75 1a                	jne    c00008f2 <strstr+0x32>
c00008d8:	eb 36                	jmp    c0000910 <strstr+0x50>
c00008da:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008e0:	56                   	push   esi
c00008e1:	57                   	push   edi
c00008e2:	53                   	push   ebx
c00008e3:	e8 98 fa ff ff       	call   c0000380 <memcmp>
c00008e8:	83 c4 0c             	add    esp,0xc
c00008eb:	85 c0                	test   eax,eax
c00008ed:	74 21                	je     c0000910 <strstr+0x50>
c00008ef:	83 c3 01             	add    ebx,0x1
c00008f2:	53                   	push   ebx
c00008f3:	e8 68 fc ff ff       	call   c0000560 <strlen>
c00008f8:	5a                   	pop    edx
c00008f9:	39 f0                	cmp    eax,esi
c00008fb:	73 e3                	jae    c00008e0 <strstr+0x20>
c00008fd:	5b                   	pop    ebx
c00008fe:	31 c0                	xor    eax,eax
c0000900:	5e                   	pop    esi
c0000901:	5f                   	pop    edi
c0000902:	c3                   	ret    
c0000903:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	89 d8                	mov    eax,ebx
c0000912:	5b                   	pop    ebx
c0000913:	5e                   	pop    esi
c0000914:	5f                   	pop    edi
c0000915:	c3                   	ret    
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000920 <toupper>:
c0000920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000924:	0f b6 d0             	movzx  edx,al
c0000927:	f6 82 a0 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0d60],0x2
c000092e:	74 03                	je     c0000933 <toupper+0x13>
c0000930:	83 e8 20             	sub    eax,0x20
c0000933:	c3                   	ret    
c0000934:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000093a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 a0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d60],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    
c0000954:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000095a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000960 <simple_strtoul>:
c0000960:	55                   	push   ebp
c0000961:	57                   	push   edi
c0000962:	56                   	push   esi
c0000963:	53                   	push   ebx
c0000964:	83 ec 08             	sub    esp,0x8
c0000967:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000096b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000096f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000973:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000976:	f6 82 a0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d60],0x8
c000097d:	75 11                	jne    c0000990 <simple_strtoul+0x30>
c000097f:	89 d0                	mov    eax,edx
c0000981:	eb 1e                	jmp    c00009a1 <simple_strtoul+0x41>
c0000983:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	89 d0                	mov    eax,edx
c0000998:	f6 82 a0 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0d60],0x8
c000099f:	75 ef                	jne    c0000990 <simple_strtoul+0x30>
c00009a1:	0f be c0             	movsx  eax,al
c00009a4:	83 f8 09             	cmp    eax,0x9
c00009a7:	74 e7                	je     c0000990 <simple_strtoul+0x30>
c00009a9:	83 f8 2d             	cmp    eax,0x2d
c00009ac:	0f 84 6e 01 00 00    	je     c0000b20 <simple_strtoul+0x1c0>
c00009b2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009ba:	83 f8 2b             	cmp    eax,0x2b
c00009bd:	0f 84 3d 01 00 00    	je     c0000b00 <simple_strtoul+0x1a0>
c00009c3:	85 f6                	test   esi,esi
c00009c5:	0f 85 d5 00 00 00    	jne    c0000aa0 <simple_strtoul+0x140>
c00009cb:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009ce:	be 0a 00 00 00       	mov    esi,0xa
c00009d3:	89 d1                	mov    ecx,edx
c00009d5:	83 fa 30             	cmp    edx,0x30
c00009d8:	0f 84 ad 01 00 00    	je     c0000b8b <simple_strtoul+0x22b>
c00009de:	85 d2                	test   edx,edx
c00009e0:	0f 84 7a 01 00 00    	je     c0000b60 <simple_strtoul+0x200>
c00009e6:	31 ed                	xor    ebp,ebp
c00009e8:	31 ff                	xor    edi,edi
c00009ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009f1:	eb 3c                	jmp    c0000a2f <simple_strtoul+0xcf>
c00009f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0x100>
c0000a07:	89 c8                	mov    eax,ecx
c0000a09:	31 d2                	xor    edx,edx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 f9 00 00 00    	jb     c0000b10 <simple_strtoul+0x1b0>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0x100>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0d60],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0xa0>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 df fe ff ff       	call   c0000920 <toupper>
c0000a41:	0f b6 d0             	movzx  edx,al
c0000a44:	59                   	pop    ecx
c0000a45:	f6 82 a0 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0d60],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0x100>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0xa7>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000a64:	85 d2                	test   edx,edx
c0000a66:	74 11                	je     c0000a79 <simple_strtoul+0x119>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 84 cd 00 00 00    	je     c0000b40 <simple_strtoul+0x1e0>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	89 18                	mov    DWORD PTR [eax],ebx
c0000a79:	83 fd 01             	cmp    ebp,0x1
c0000a7c:	75 05                	jne    c0000a83 <simple_strtoul+0x123>
c0000a7e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a83:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a88:	75 02                	jne    c0000a8c <simple_strtoul+0x12c>
c0000a8a:	f7 df                	neg    edi
c0000a8c:	83 c4 08             	add    esp,0x8
c0000a8f:	89 f8                	mov    eax,edi
c0000a91:	5b                   	pop    ebx
c0000a92:	5e                   	pop    esi
c0000a93:	5f                   	pop    edi
c0000a94:	5d                   	pop    ebp
c0000a95:	c3                   	ret    
c0000a96:	8d 76 00             	lea    esi,[esi+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8d 46 fe             	lea    eax,[esi-0x2]
c0000aa3:	83 f8 22             	cmp    eax,0x22
c0000aa6:	0f 87 b4 00 00 00    	ja     c0000b60 <simple_strtoul+0x200>
c0000aac:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000aae:	83 fe 08             	cmp    esi,0x8
c0000ab1:	0f 84 ff 00 00 00    	je     c0000bb6 <simple_strtoul+0x256>
c0000ab7:	83 fe 10             	cmp    esi,0x10
c0000aba:	0f 85 33 01 00 00    	jne    c0000bf3 <simple_strtoul+0x293>
c0000ac0:	0f be d1             	movsx  edx,cl
c0000ac3:	be 10 00 00 00       	mov    esi,0x10
c0000ac8:	83 fa 30             	cmp    edx,0x30
c0000acb:	0f 85 0d ff ff ff    	jne    c00009de <simple_strtoul+0x7e>
c0000ad1:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ad5:	52                   	push   edx
c0000ad6:	89 d1                	mov    ecx,edx
c0000ad8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000adc:	e8 5f fe ff ff       	call   c0000940 <tolower>
c0000ae1:	5f                   	pop    edi
c0000ae2:	83 f8 78             	cmp    eax,0x78
c0000ae5:	0f 84 fa 00 00 00    	je     c0000be5 <simple_strtoul+0x285>
c0000aeb:	83 c3 01             	add    ebx,0x1
c0000aee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000af1:	e9 e8 fe ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000af6:	8d 76 00             	lea    esi,[esi+0x0]
c0000af9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b00:	83 c3 01             	add    ebx,0x1
c0000b03:	85 f6                	test   esi,esi
c0000b05:	75 99                	jne    c0000aa0 <simple_strtoul+0x140>
c0000b07:	e9 bf fe ff ff       	jmp    c00009cb <simple_strtoul+0x6b>
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	bd 01 00 00 00       	mov    ebp,0x1
c0000b15:	31 ff                	xor    edi,edi
c0000b17:	e9 07 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xc3>
c0000b1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b20:	83 c3 01             	add    ebx,0x1
c0000b23:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b2b:	85 f6                	test   esi,esi
c0000b2d:	0f 85 6d ff ff ff    	jne    c0000aa0 <simple_strtoul+0x140>
c0000b33:	e9 93 fe ff ff       	jmp    c00009cb <simple_strtoul+0x6b>
c0000b38:	90                   	nop
c0000b39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000b40:	85 db                	test   ebx,ebx
c0000b42:	74 39                	je     c0000b7d <simple_strtoul+0x21d>
c0000b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b48:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b4c:	31 ff                	xor    edi,edi
c0000b4e:	89 30                	mov    DWORD PTR [eax],esi
c0000b50:	e9 24 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x119>
c0000b55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b64:	85 c0                	test   eax,eax
c0000b66:	74 1c                	je     c0000b84 <simple_strtoul+0x224>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	85 db                	test   ebx,ebx
c0000b6e:	74 68                	je     c0000bd8 <simple_strtoul+0x278>
c0000b70:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b74:	31 ff                	xor    edi,edi
c0000b76:	89 30                	mov    DWORD PTR [eax],esi
c0000b78:	e9 06 ff ff ff       	jmp    c0000a83 <simple_strtoul+0x123>
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 ef fe ff ff       	jmp    c0000a73 <simple_strtoul+0x113>
c0000b84:	31 ff                	xor    edi,edi
c0000b86:	e9 f8 fe ff ff       	jmp    c0000a83 <simple_strtoul+0x123>
c0000b8b:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b8f:	52                   	push   edx
c0000b90:	89 d1                	mov    ecx,edx
c0000b92:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b96:	e8 a5 fd ff ff       	call   c0000940 <tolower>
c0000b9b:	5d                   	pop    ebp
c0000b9c:	83 f8 78             	cmp    eax,0x78
c0000b9f:	74 2c                	je     c0000bcd <simple_strtoul+0x26d>
c0000ba1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000ba4:	83 c3 01             	add    ebx,0x1
c0000ba7:	83 fa 30             	cmp    edx,0x30
c0000baa:	74 16                	je     c0000bc2 <simple_strtoul+0x262>
c0000bac:	be 08 00 00 00       	mov    esi,0x8
c0000bb1:	e9 28 fe ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000bb6:	0f be d1             	movsx  edx,cl
c0000bb9:	83 fa 30             	cmp    edx,0x30
c0000bbc:	0f 85 1c fe ff ff    	jne    c00009de <simple_strtoul+0x7e>
c0000bc2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000bc6:	83 c3 01             	add    ebx,0x1
c0000bc9:	89 d1                	mov    ecx,edx
c0000bcb:	eb df                	jmp    c0000bac <simple_strtoul+0x24c>
c0000bcd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bd0:	83 c3 02             	add    ebx,0x2
c0000bd3:	e9 e8 fe ff ff       	jmp    c0000ac0 <simple_strtoul+0x160>
c0000bd8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bde:	31 ff                	xor    edi,edi
c0000be0:	e9 9e fe ff ff       	jmp    c0000a83 <simple_strtoul+0x123>
c0000be5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000be9:	83 c3 02             	add    ebx,0x2
c0000bec:	89 d1                	mov    ecx,edx
c0000bee:	e9 eb fd ff ff       	jmp    c00009de <simple_strtoul+0x7e>
c0000bf3:	0f be d1             	movsx  edx,cl
c0000bf6:	e9 e3 fd ff ff       	jmp    c00009de <simple_strtoul+0x7e>

c0000bfb <largebin_index>:
c0000bfb:	89 c2                	mov    edx,eax
c0000bfd:	c1 ea 08             	shr    edx,0x8
c0000c00:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c06:	77 10                	ja     c0000c18 <largebin_index+0x1d>
c0000c08:	0f bd d2             	bsr    edx,edx
c0000c0b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c0e:	d3 e8                	shr    eax,cl
c0000c10:	83 e0 03             	and    eax,0x3
c0000c13:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c17:	c3                   	ret    
c0000c18:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c1d:	c3                   	ret    

c0000c1e <malloc_init_state>:
c0000c1e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c21:	53                   	push   ebx
c0000c22:	89 d1                	mov    ecx,edx
c0000c24:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c2a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c2d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c30:	83 c2 08             	add    edx,0x8
c0000c33:	39 da                	cmp    edx,ebx
c0000c35:	75 f3                	jne    c0000c2a <malloc_init_state+0xc>
c0000c37:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c39:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c43:	83 e2 03             	and    edx,0x3
c0000c46:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c50:	83 ca 48             	or     edx,0x48
c0000c53:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c5d:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c67:	89 10                	mov    DWORD PTR [eax],edx
c0000c69:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c70:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c73:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c7d:	5b                   	pop    ebx
c0000c7e:	c3                   	ret    

c0000c7f <malloc_consolidate>:
c0000c7f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c81:	85 d2                	test   edx,edx
c0000c83:	0f 84 d8 00 00 00    	je     c0000d61 <malloc_consolidate+0xe2>
c0000c89:	55                   	push   ebp
c0000c8a:	83 e2 fd             	and    edx,0xfffffffd
c0000c8d:	57                   	push   edi
c0000c8e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c91:	56                   	push   esi
c0000c92:	89 c5                	mov    ebp,eax
c0000c94:	53                   	push   ebx
c0000c95:	83 ec 10             	sub    esp,0x10
c0000c98:	89 10                	mov    DWORD PTR [eax],edx
c0000c9a:	c1 ea 03             	shr    edx,0x3
c0000c9d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ca1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ca5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ca9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cac:	85 d2                	test   edx,edx
c0000cae:	0f 84 98 00 00 00    	je     c0000d4c <malloc_consolidate+0xcd>
c0000cb4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cbb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cbe:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cc5:	89 f9                	mov    ecx,edi
c0000cc7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cca:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ccd:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cd0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cd3:	83 e7 01             	and    edi,0x1
c0000cd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cd9:	75 14                	jne    c0000cef <malloc_consolidate+0x70>
c0000cdb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cdd:	29 fa                	sub    edx,edi
c0000cdf:	01 f9                	add    ecx,edi
c0000ce1:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ce4:	89 fb                	mov    ebx,edi
c0000ce6:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ce9:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cec:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cef:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cf2:	74 40                	je     c0000d34 <malloc_consolidate+0xb5>
c0000cf4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000cf7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000cfa:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000cfe:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	75 0e                	jne    c0000d14 <malloc_consolidate+0x95>
c0000d06:	01 d9                	add    ecx,ebx
c0000d08:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d0b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d0e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d11:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d14:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d17:	89 ce                	mov    esi,ecx
c0000d19:	83 ce 01             	or     esi,0x1
c0000d1c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d1f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d22:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d25:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d29:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d2c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d2f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d32:	eb 0c                	jmp    c0000d40 <malloc_consolidate+0xc1>
c0000d34:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d37:	83 c9 01             	or     ecx,0x1
c0000d3a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d3d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d44:	85 d2                	test   edx,edx
c0000d46:	0f 85 6f ff ff ff    	jne    c0000cbb <malloc_consolidate+0x3c>
c0000d4c:	83 c5 04             	add    ebp,0x4
c0000d4f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d53:	0f 85 50 ff ff ff    	jne    c0000ca9 <malloc_consolidate+0x2a>
c0000d59:	83 c4 10             	add    esp,0x10
c0000d5c:	5b                   	pop    ebx
c0000d5d:	5e                   	pop    esi
c0000d5e:	5f                   	pop    edi
c0000d5f:	5d                   	pop    ebp
c0000d60:	c3                   	ret    
c0000d61:	e9 b8 fe ff ff       	jmp    c0000c1e <malloc_init_state>

c0000d66 <dlfree>:
c0000d66:	57                   	push   edi
c0000d67:	56                   	push   esi
c0000d68:	53                   	push   ebx
c0000d69:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d6d:	85 db                	test   ebx,ebx
c0000d6f:	0f 84 e2 00 00 00    	je     c0000e57 <dlfree+0xf1>
c0000d75:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d78:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d7e:	89 f0                	mov    eax,esi
c0000d80:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d83:	83 e0 fc             	and    eax,0xfffffffc
c0000d86:	39 c1                	cmp    ecx,eax
c0000d88:	72 24                	jb     c0000dae <dlfree+0x48>
c0000d8a:	c1 e8 03             	shr    eax,0x3
c0000d8d:	83 c9 03             	or     ecx,0x3
c0000d90:	83 e8 02             	sub    eax,0x2
c0000d93:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d99:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000da0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000da2:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000da9:	e9 a9 00 00 00       	jmp    c0000e57 <dlfree+0xf1>
c0000dae:	83 e6 02             	and    esi,0x2
c0000db1:	0f 85 a0 00 00 00    	jne    c0000e57 <dlfree+0xf1>
c0000db7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dba:	83 c9 01             	or     ecx,0x1
c0000dbd:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000dc3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000dc6:	83 e1 fc             	and    ecx,0xfffffffc
c0000dc9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dcd:	75 13                	jne    c0000de2 <dlfree+0x7c>
c0000dcf:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dd2:	29 da                	sub    edx,ebx
c0000dd4:	01 d8                	add    eax,ebx
c0000dd6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dd9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000ddc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ddf:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000de2:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000de8:	74 40                	je     c0000e2a <dlfree+0xc4>
c0000dea:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000dee:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000df1:	80 e3 01             	and    bl,0x1
c0000df4:	75 0e                	jne    c0000e04 <dlfree+0x9e>
c0000df6:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000df9:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000dfc:	01 c8                	add    eax,ecx
c0000dfe:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e01:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e04:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000e0a:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000e11:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e14:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e1a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e1d:	89 c1                	mov    ecx,eax
c0000e1f:	83 c9 01             	or     ecx,0x1
c0000e22:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e25:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e28:	eb 10                	jmp    c0000e3a <dlfree+0xd4>
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 c1                	mov    ecx,eax
c0000e2e:	83 c9 01             	or     ecx,0x1
c0000e31:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e34:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e3a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e3f:	76 16                	jbe    c0000e57 <dlfree+0xf1>
c0000e41:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e48:	74 0d                	je     c0000e57 <dlfree+0xf1>
c0000e4a:	5b                   	pop    ebx
c0000e4b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e50:	5e                   	pop    esi
c0000e51:	5f                   	pop    edi
c0000e52:	e9 28 fe ff ff       	jmp    c0000c7f <malloc_consolidate>
c0000e57:	5b                   	pop    ebx
c0000e58:	5e                   	pop    esi
c0000e59:	5f                   	pop    edi
c0000e5a:	c3                   	ret    

c0000e5b <sYSMALLOc>:
c0000e5b:	55                   	push   ebp
c0000e5c:	57                   	push   edi
c0000e5d:	56                   	push   esi
c0000e5e:	53                   	push   ebx
c0000e5f:	89 d3                	mov    ebx,edx
c0000e61:	83 ec 2c             	sub    esp,0x2c
c0000e64:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e6a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e6d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e71:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e78:	74 1f                	je     c0000e99 <sYSMALLOc+0x3e>
c0000e7a:	89 d0                	mov    eax,edx
c0000e7c:	e8 fe fd ff ff       	call   c0000c7f <malloc_consolidate>
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000e88:	83 e8 07             	sub    eax,0x7
c0000e8b:	50                   	push   eax
c0000e8c:	e8 33 02 00 00       	call   c00010c4 <dlmalloc>
c0000e91:	83 c4 10             	add    esp,0x10
c0000e94:	e9 23 02 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0000e99:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ea0:	83 c0 10             	add    eax,0x10
c0000ea3:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ea9:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000eac:	01 c2                	add    edx,eax
c0000eae:	83 e5 fc             	and    ebp,0xfffffffc
c0000eb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000eb5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ebc:	74 02                	je     c0000ec0 <sYSMALLOc+0x65>
c0000ebe:	29 ea                	sub    edx,ebp
c0000ec0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ec4:	f7 d9                	neg    ecx
c0000ec6:	21 ca                	and    edx,ecx
c0000ec8:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ed0:	7f 07                	jg     c0000ed9 <sYSMALLOc+0x7e>
c0000ed2:	31 c0                	xor    eax,eax
c0000ed4:	e9 e3 01 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0000ed9:	83 ec 0c             	sub    esp,0xc
c0000edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ee0:	e8 7b 6a 00 00       	call   c0007960 <sbrk>
c0000ee5:	83 c4 10             	add    esp,0x10
c0000ee8:	89 c6                	mov    esi,eax
c0000eea:	83 f8 ff             	cmp    eax,0xffffffff
c0000eed:	74 e3                	je     c0000ed2 <sYSMALLOc+0x77>
c0000eef:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ef3:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000ef6:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000efc:	39 c2                	cmp    edx,eax
c0000efe:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f04:	75 11                	jne    c0000f17 <sYSMALLOc+0xbc>
c0000f06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f0a:	01 e8                	add    eax,ebp
c0000f0c:	83 c8 01             	or     eax,0x1
c0000f0f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f12:	e9 93 00 00 00       	jmp    c0000faa <sYSMALLOc+0x14f>
c0000f17:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f1d:	a8 01                	test   al,0x1
c0000f1f:	0f 84 73 01 00 00    	je     c0001098 <sYSMALLOc+0x23d>
c0000f25:	85 ed                	test   ebp,ebp
c0000f27:	74 12                	je     c0000f3b <sYSMALLOc+0xe0>
c0000f29:	39 f2                	cmp    edx,esi
c0000f2b:	76 0e                	jbe    c0000f3b <sYSMALLOc+0xe0>
c0000f2d:	83 e0 fe             	and    eax,0xfffffffe
c0000f30:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f36:	e9 5d 01 00 00       	jmp    c0001098 <sYSMALLOc+0x23d>
c0000f3b:	85 ed                	test   ebp,ebp
c0000f3d:	74 0c                	je     c0000f4b <sYSMALLOc+0xf0>
c0000f3f:	89 f0                	mov    eax,esi
c0000f41:	29 d0                	sub    eax,edx
c0000f43:	01 c1                	add    ecx,eax
c0000f45:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f4b:	89 f2                	mov    edx,esi
c0000f4d:	83 e2 07             	and    edx,0x7
c0000f50:	0f 84 b1 00 00 00    	je     c0001007 <sYSMALLOc+0x1ac>
c0000f56:	b8 08 00 00 00       	mov    eax,0x8
c0000f5b:	29 d0                	sub    eax,edx
c0000f5d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f68:	01 e8                	add    eax,ebp
c0000f6a:	83 ec 0c             	sub    esp,0xc
c0000f6d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f74:	01 f2                	add    edx,esi
c0000f76:	01 d1                	add    ecx,edx
c0000f78:	29 d0                	sub    eax,edx
c0000f7a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f7e:	01 c1                	add    ecx,eax
c0000f80:	51                   	push   ecx
c0000f81:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000f85:	e8 d6 69 00 00       	call   c0007960 <sbrk>
c0000f8a:	83 c4 10             	add    esp,0x10
c0000f8d:	83 f8 ff             	cmp    eax,0xffffffff
c0000f90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000f94:	75 7c                	jne    c0001012 <sYSMALLOc+0x1b7>
c0000f96:	83 ec 0c             	sub    esp,0xc
c0000f99:	6a 00                	push   0x0
c0000f9b:	e8 c0 69 00 00       	call   c0007960 <sbrk>
c0000fa0:	83 c4 10             	add    esp,0x10
c0000fa3:	31 c9                	xor    ecx,ecx
c0000fa5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fa8:	75 7e                	jne    c0001028 <sYSMALLOc+0x1cd>
c0000faa:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fb0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fb6:	73 06                	jae    c0000fbe <sYSMALLOc+0x163>
c0000fb8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fbe:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fc4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fca:	73 06                	jae    c0000fd2 <sYSMALLOc+0x177>
c0000fcc:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fd2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fd5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fd8:	83 e2 fc             	and    edx,0xfffffffc
c0000fdb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fdf:	0f 87 ed fe ff ff    	ja     c0000ed2 <sYSMALLOc+0x77>
c0000fe5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000fe9:	29 fa                	sub    edx,edi
c0000feb:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fee:	83 ca 01             	or     edx,0x1
c0000ff1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ff4:	89 fb                	mov    ebx,edi
c0000ff6:	83 cb 01             	or     ebx,0x1
c0000ff9:	83 c0 08             	add    eax,0x8
c0000ffc:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fff:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001002:	e9 b5 00 00 00       	jmp    c00010bc <sYSMALLOc+0x261>
c0001007:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000100b:	31 c0                	xor    eax,eax
c000100d:	e9 52 ff ff ff       	jmp    c0000f64 <sYSMALLOc+0x109>
c0001012:	39 c6                	cmp    esi,eax
c0001014:	76 12                	jbe    c0001028 <sYSMALLOc+0x1cd>
c0001016:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000101a:	01 f0                	add    eax,esi
c000101c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001023:	e9 7b ff ff ff       	jmp    c0000fa3 <sYSMALLOc+0x148>
c0001028:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000102c:	29 f0                	sub    eax,esi
c000102e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001031:	01 c8                	add    eax,ecx
c0001033:	83 c8 01             	or     eax,0x1
c0001036:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001039:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000103f:	85 ed                	test   ebp,ebp
c0001041:	0f 84 63 ff ff ff    	je     c0000faa <sYSMALLOc+0x14f>
c0001047:	8d 45 f4             	lea    eax,[ebp-0xc]
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	0f 86 3c ff ff ff    	jbe    c0000faa <sYSMALLOc+0x14f>
c000106e:	83 ec 0c             	sub    esp,0xc
c0001071:	83 c7 08             	add    edi,0x8
c0001074:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000107a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001084:	57                   	push   edi
c0001085:	e8 dc fc ff ff       	call   c0000d66 <dlfree>
c000108a:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001090:	83 c4 10             	add    esp,0x10
c0001093:	e9 12 ff ff ff       	jmp    c0000faa <sYSMALLOc+0x14f>
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	6a 00                	push   0x0
c000109d:	e8 be 68 00 00       	call   c0007960 <sbrk>
c00010a2:	89 c2                	mov    edx,eax
c00010a4:	29 f2                	sub    edx,esi
c00010a6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010b3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b7:	e9 e7 fe ff ff       	jmp    c0000fa3 <sYSMALLOc+0x148>
c00010bc:	83 c4 2c             	add    esp,0x2c
c00010bf:	5b                   	pop    ebx
c00010c0:	5e                   	pop    esi
c00010c1:	5f                   	pop    edi
c00010c2:	5d                   	pop    ebp
c00010c3:	c3                   	ret    

c00010c4 <dlmalloc>:
c00010c4:	55                   	push   ebp
c00010c5:	57                   	push   edi
c00010c6:	56                   	push   esi
c00010c7:	53                   	push   ebx
c00010c8:	83 ec 1c             	sub    esp,0x1c
c00010cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010cf:	83 f8 df             	cmp    eax,0xffffffdf
c00010d2:	0f 87 70 03 00 00    	ja     c0001448 <dlmalloc+0x384>
c00010d8:	83 c0 0b             	add    eax,0xb
c00010db:	be 10 00 00 00       	mov    esi,0x10
c00010e0:	83 f8 0f             	cmp    eax,0xf
c00010e3:	76 05                	jbe    c00010ea <dlmalloc+0x26>
c00010e5:	83 e0 f8             	and    eax,0xfffffff8
c00010e8:	89 c6                	mov    esi,eax
c00010ea:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00010f6:	75 17                	jne    c000110f <dlmalloc+0x4b>
c00010f8:	85 ff                	test   edi,edi
c00010fa:	0f 85 05 03 00 00    	jne    c0001405 <dlmalloc+0x341>
c0001100:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001105:	e8 75 fb ff ff       	call   c0000c7f <malloc_consolidate>
c000110a:	e9 f6 02 00 00       	jmp    c0001405 <dlmalloc+0x341>
c000110f:	39 f7                	cmp    edi,esi
c0001111:	72 1f                	jb     c0001132 <dlmalloc+0x6e>
c0001113:	89 f2                	mov    edx,esi
c0001115:	c1 ea 03             	shr    edx,0x3
c0001118:	83 ea 02             	sub    edx,0x2
c000111b:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001122:	85 c0                	test   eax,eax
c0001124:	74 0c                	je     c0001132 <dlmalloc+0x6e>
c0001126:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001129:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001130:	eb 30                	jmp    c0001162 <dlmalloc+0x9e>
c0001132:	89 f0                	mov    eax,esi
c0001134:	81 fe ff 00 00 00    	cmp    esi,0xff
c000113a:	77 2e                	ja     c000116a <dlmalloc+0xa6>
c000113c:	c1 e8 03             	shr    eax,0x3
c000113f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001143:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000114a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000114d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001150:	39 c3                	cmp    ebx,eax
c0001152:	74 2e                	je     c0001182 <dlmalloc+0xbe>
c0001154:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001157:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000115c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000115f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001162:	83 c0 08             	add    eax,0x8
c0001165:	e9 e0 02 00 00       	jmp    c000144a <dlmalloc+0x386>
c000116a:	e8 8c fa ff ff       	call   c0000bfb <largebin_index>
c000116f:	83 e7 02             	and    edi,0x2
c0001172:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001176:	74 0a                	je     c0001182 <dlmalloc+0xbe>
c0001178:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000117d:	e8 fd fa ff ff       	call   c0000c7f <malloc_consolidate>
c0001182:	8d 46 10             	lea    eax,[esi+0x10]
c0001185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001189:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c000118f:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c0001195:	0f 84 13 01 00 00    	je     c00012ae <dlmalloc+0x1ea>
c000119b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000119e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011a1:	83 e7 fc             	and    edi,0xfffffffc
c00011a4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011aa:	77 4c                	ja     c00011f8 <dlmalloc+0x134>
c00011ac:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c00011b1:	75 45                	jne    c00011f8 <dlmalloc+0x134>
c00011b3:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011b9:	75 3d                	jne    c00011f8 <dlmalloc+0x134>
c00011bb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011bf:	73 37                	jae    c00011f8 <dlmalloc+0x134>
c00011c1:	89 fa                	mov    edx,edi
c00011c3:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011c6:	29 f2                	sub    edx,esi
c00011c8:	83 ce 01             	or     esi,0x1
c00011cb:	89 d1                	mov    ecx,edx
c00011cd:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011d2:	83 c9 01             	or     ecx,0x1
c00011d5:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011da:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011df:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011e6:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011ed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011f0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011f3:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011f6:	eb 15                	jmp    c000120d <dlmalloc+0x149>
c00011f8:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011fd:	39 fe                	cmp    esi,edi
c00011ff:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c0001206:	75 0d                	jne    c0001215 <dlmalloc+0x151>
c0001208:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000120d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001210:	e9 35 02 00 00       	jmp    c000144a <dlmalloc+0x386>
c0001215:	89 f8                	mov    eax,edi
c0001217:	81 ff ff 00 00 00    	cmp    edi,0xff
c000121d:	77 19                	ja     c0001238 <dlmalloc+0x174>
c000121f:	c1 e8 03             	shr    eax,0x3
c0001222:	8d 14 00             	lea    edx,[eax+eax*1]
c0001225:	83 c2 0d             	add    edx,0xd
c0001228:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c000122f:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001236:	eb 46                	jmp    c000127e <dlmalloc+0x1ba>
c0001238:	e8 be f9 ff ff       	call   c0000bfb <largebin_index>
c000123d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001240:	83 c2 0d             	add    edx,0xd
c0001243:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c000124a:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001251:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001254:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001258:	89 d5                	mov    ebp,edx
c000125a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000125e:	74 1e                	je     c000127e <dlmalloc+0x1ba>
c0001260:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001263:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001266:	77 12                	ja     c000127a <dlmalloc+0x1b6>
c0001268:	83 cf 01             	or     edi,0x1
c000126b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000126e:	76 05                	jbe    c0001275 <dlmalloc+0x1b1>
c0001270:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001273:	eb f6                	jmp    c000126b <dlmalloc+0x1a7>
c0001275:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001278:	eb 04                	jmp    c000127e <dlmalloc+0x1ba>
c000127a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000127e:	89 c7                	mov    edi,eax
c0001280:	88 c1                	mov    cl,al
c0001282:	c1 ff 05             	sar    edi,0x5
c0001285:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001289:	bf 01 00 00 00       	mov    edi,0x1
c000128e:	d3 e7                	shl    edi,cl
c0001290:	89 f8                	mov    eax,edi
c0001292:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001296:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c000129d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012a0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012a3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012a6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012a9:	e9 db fe ff ff       	jmp    c0001189 <dlmalloc+0xc5>
c00012ae:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012b4:	76 78                	jbe    c000132e <dlmalloc+0x26a>
c00012b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012ba:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012c1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012c4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012c7:	39 ca                	cmp    edx,ecx
c00012c9:	74 63                	je     c000132e <dlmalloc+0x26a>
c00012cb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ce:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012d1:	83 e3 fc             	and    ebx,0xfffffffc
c00012d4:	39 de                	cmp    esi,ebx
c00012d6:	77 52                	ja     c000132a <dlmalloc+0x266>
c00012d8:	89 df                	mov    edi,ebx
c00012da:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012dd:	29 f7                	sub    edi,esi
c00012df:	01 d3                	add    ebx,edx
c00012e1:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012e4:	83 ff 0f             	cmp    edi,0xf
c00012e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ea:	8d 42 08             	lea    eax,[edx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x234>
c00012ef:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012f3:	e9 52 01 00 00       	jmp    c000144a <dlmalloc+0x386>
c00012f8:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012fb:	83 ce 01             	or     esi,0x1
c00012fe:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c0001304:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c000130a:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c0001311:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c0001318:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000131b:	89 fa                	mov    edx,edi
c000131d:	83 ca 01             	or     edx,0x1
c0001320:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001323:	89 3b                	mov    DWORD PTR [ebx],edi
c0001325:	e9 20 01 00 00       	jmp    c000144a <dlmalloc+0x386>
c000132a:	89 c2                	mov    edx,eax
c000132c:	eb 99                	jmp    c00012c7 <dlmalloc+0x203>
c000132e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001332:	b8 01 00 00 00       	mov    eax,0x1
c0001337:	41                   	inc    ecx
c0001338:	89 cb                	mov    ebx,ecx
c000133a:	c1 eb 05             	shr    ebx,0x5
c000133d:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001344:	d3 e0                	shl    eax,cl
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	39 f8                	cmp    eax,edi
c000134f:	77 04                	ja     c0001355 <dlmalloc+0x291>
c0001351:	85 c0                	test   eax,eax
c0001353:	75 26                	jne    c000137b <dlmalloc+0x2b7>
c0001355:	43                   	inc    ebx
c0001356:	83 fb 02             	cmp    ebx,0x2
c0001359:	0f 87 a6 00 00 00    	ja     c0001405 <dlmalloc+0x341>
c000135f:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001366:	85 ff                	test   edi,edi
c0001368:	74 eb                	je     c0001355 <dlmalloc+0x291>
c000136a:	89 d8                	mov    eax,ebx
c000136c:	c1 e0 06             	shl    eax,0x6
c000136f:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c0001376:	b8 01 00 00 00       	mov    eax,0x1
c000137b:	85 f8                	test   eax,edi
c000137d:	75 07                	jne    c0001386 <dlmalloc+0x2c2>
c000137f:	83 c2 08             	add    edx,0x8
c0001382:	01 c0                	add    eax,eax
c0001384:	eb f5                	jmp    c000137b <dlmalloc+0x2b7>
c0001386:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001389:	39 ca                	cmp    edx,ecx
c000138b:	75 14                	jne    c00013a1 <dlmalloc+0x2dd>
c000138d:	89 c1                	mov    ecx,eax
c000138f:	83 c2 08             	add    edx,0x8
c0001392:	f7 d1                	not    ecx
c0001394:	21 cf                	and    edi,ecx
c0001396:	01 c0                	add    eax,eax
c0001398:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c000139f:	eb ac                	jmp    c000134d <dlmalloc+0x289>
c00013a1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013a4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013a7:	83 e0 fc             	and    eax,0xfffffffc
c00013aa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013ad:	89 c3                	mov    ebx,eax
c00013af:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013b2:	29 f3                	sub    ebx,esi
c00013b4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013b7:	83 fb 0f             	cmp    ebx,0xf
c00013ba:	8d 41 08             	lea    eax,[ecx+0x8]
c00013bd:	77 09                	ja     c00013c8 <dlmalloc+0x304>
c00013bf:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013c3:	e9 82 00 00 00       	jmp    c000144a <dlmalloc+0x386>
c00013c8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013cb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013d1:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013d7:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013dd:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013e4:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013eb:	77 06                	ja     c00013f3 <dlmalloc+0x32f>
c00013ed:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013f3:	83 ce 01             	or     esi,0x1
c00013f6:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013f9:	89 d9                	mov    ecx,ebx
c00013fb:	83 c9 01             	or     ecx,0x1
c00013fe:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001401:	89 1a                	mov    DWORD PTR [edx],ebx
c0001403:	eb 45                	jmp    c000144a <dlmalloc+0x386>
c0001405:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c000140a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000140d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001410:	83 e2 fc             	and    edx,0xfffffffc
c0001413:	39 d1                	cmp    ecx,edx
c0001415:	77 1e                	ja     c0001435 <dlmalloc+0x371>
c0001417:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000141a:	89 f3                	mov    ebx,esi
c000141c:	29 f2                	sub    edx,esi
c000141e:	83 cb 01             	or     ebx,0x1
c0001421:	83 ca 01             	or     edx,0x1
c0001424:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c000142a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000142d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001430:	e9 2d fd ff ff       	jmp    c0001162 <dlmalloc+0x9e>
c0001435:	83 c4 1c             	add    esp,0x1c
c0001438:	89 f0                	mov    eax,esi
c000143a:	ba 00 41 02 c0       	mov    edx,0xc0024100
c000143f:	5b                   	pop    ebx
c0001440:	5e                   	pop    esi
c0001441:	5f                   	pop    edi
c0001442:	5d                   	pop    ebp
c0001443:	e9 13 fa ff ff       	jmp    c0000e5b <sYSMALLOc>
c0001448:	31 c0                	xor    eax,eax
c000144a:	83 c4 1c             	add    esp,0x1c
c000144d:	5b                   	pop    ebx
c000144e:	5e                   	pop    esi
c000144f:	5f                   	pop    edi
c0001450:	5d                   	pop    ebp
c0001451:	c3                   	ret    

c0001452 <iALLOc>:
c0001452:	55                   	push   ebp
c0001453:	89 c5                	mov    ebp,eax
c0001455:	57                   	push   edi
c0001456:	56                   	push   esi
c0001457:	53                   	push   ebx
c0001458:	83 ec 2c             	sub    esp,0x2c
c000145b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001462:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001466:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000146a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000146e:	75 12                	jne    c0001482 <iALLOc+0x30>
c0001470:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001475:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001479:	e8 01 f8 ff ff       	call   c0000c7f <malloc_consolidate>
c000147e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001482:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001487:	74 12                	je     c000149b <iALLOc+0x49>
c0001489:	85 ed                	test   ebp,ebp
c000148b:	0f 84 64 01 00 00    	je     c00015f5 <iALLOc+0x1a3>
c0001491:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001499:	eb 33                	jmp    c00014ce <iALLOc+0x7c>
c000149b:	85 ed                	test   ebp,ebp
c000149d:	75 14                	jne    c00014b3 <iALLOc+0x61>
c000149f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014a7:	83 c4 2c             	add    esp,0x2c
c00014aa:	5b                   	pop    ebx
c00014ab:	5e                   	pop    esi
c00014ac:	5f                   	pop    edi
c00014ad:	5d                   	pop    ebp
c00014ae:	e9 11 fc ff ff       	jmp    c00010c4 <dlmalloc>
c00014b3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014ba:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014c2:	83 f8 0f             	cmp    eax,0xf
c00014c5:	76 07                	jbe    c00014ce <iALLOc+0x7c>
c00014c7:	83 e0 f8             	and    eax,0xfffffff8
c00014ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ce:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014d3:	75 09                	jne    c00014de <iALLOc+0x8c>
c00014d5:	89 d0                	mov    eax,edx
c00014d7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014da:	31 f6                	xor    esi,esi
c00014dc:	eb 3b                	jmp    c0001519 <iALLOc+0xc7>
c00014de:	8b 02                	mov    eax,DWORD PTR [edx]
c00014e0:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014e8:	83 c0 0b             	add    eax,0xb
c00014eb:	83 f8 0f             	cmp    eax,0xf
c00014ee:	76 07                	jbe    c00014f7 <iALLOc+0xa5>
c00014f0:	83 e0 f8             	and    eax,0xfffffff8
c00014f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014fb:	0f af f5             	imul   esi,ebp
c00014fe:	eb 25                	jmp    c0001525 <iALLOc+0xd3>
c0001500:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001502:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001505:	bb 10 00 00 00       	mov    ebx,0x10
c000150a:	83 f9 0f             	cmp    ecx,0xf
c000150d:	76 05                	jbe    c0001514 <iALLOc+0xc2>
c000150f:	83 e1 f8             	and    ecx,0xfffffff8
c0001512:	89 cb                	mov    ebx,ecx
c0001514:	01 de                	add    esi,ebx
c0001516:	83 c0 04             	add    eax,0x4
c0001519:	39 c7                	cmp    edi,eax
c000151b:	75 e3                	jne    c0001500 <iALLOc+0xae>
c000151d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001525:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001529:	83 ec 0c             	sub    esp,0xc
c000152c:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001532:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c000153c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001540:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001544:	50                   	push   eax
c0001545:	e8 7a fb ff ff       	call   c00010c4 <dlmalloc>
c000154a:	83 c4 10             	add    esp,0x10
c000154d:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c0001553:	85 c0                	test   eax,eax
c0001555:	0f 84 92 00 00 00    	je     c00015ed <iALLOc+0x19b>
c000155b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000155e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001561:	83 e3 fc             	and    ebx,0xfffffffc
c0001564:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001568:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000156d:	74 1e                	je     c000158d <iALLOc+0x13b>
c000156f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001573:	89 d9                	mov    ecx,ebx
c0001575:	52                   	push   edx
c0001576:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000157a:	83 e9 04             	sub    ecx,0x4
c000157d:	51                   	push   ecx
c000157e:	6a 00                	push   0x0
c0001580:	50                   	push   eax
c0001581:	e8 5a ef ff ff       	call   c00004e0 <memset>
c0001586:	83 c4 10             	add    esp,0x10
c0001589:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000158d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001592:	75 14                	jne    c00015a8 <iALLOc+0x156>
c0001594:	8d 04 37             	lea    eax,[edi+esi*1]
c0001597:	29 f3                	sub    ebx,esi
c0001599:	83 cb 01             	or     ebx,0x1
c000159c:	8d 48 08             	lea    ecx,[eax+0x8]
c000159f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a6:	89 f3                	mov    ebx,esi
c00015a8:	31 c0                	xor    eax,eax
c00015aa:	4d                   	dec    ebp
c00015ab:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015af:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015b2:	39 c5                	cmp    ebp,eax
c00015b4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015b7:	74 2c                	je     c00015e5 <iALLOc+0x193>
c00015b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015bd:	85 c9                	test   ecx,ecx
c00015bf:	75 15                	jne    c00015d6 <iALLOc+0x184>
c00015c1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015c4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015c7:	b9 10 00 00 00       	mov    ecx,0x10
c00015cc:	83 fe 0f             	cmp    esi,0xf
c00015cf:	76 05                	jbe    c00015d6 <iALLOc+0x184>
c00015d1:	83 e6 f8             	and    esi,0xfffffff8
c00015d4:	89 f1                	mov    ecx,esi
c00015d6:	89 ce                	mov    esi,ecx
c00015d8:	29 cb                	sub    ebx,ecx
c00015da:	83 ce 01             	or     esi,0x1
c00015dd:	40                   	inc    eax
c00015de:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015e1:	01 cf                	add    edi,ecx
c00015e3:	eb c6                	jmp    c00015ab <iALLOc+0x159>
c00015e5:	83 cb 01             	or     ebx,0x1
c00015e8:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015eb:	eb 08                	jmp    c00015f5 <iALLOc+0x1a3>
c00015ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015f9:	83 c4 2c             	add    esp,0x2c
c00015fc:	5b                   	pop    ebx
c00015fd:	5e                   	pop    esi
c00015fe:	5f                   	pop    edi
c00015ff:	5d                   	pop    ebp
c0001600:	c3                   	ret    

c0001601 <dlrealloc>:
c0001601:	55                   	push   ebp
c0001602:	57                   	push   edi
c0001603:	56                   	push   esi
c0001604:	53                   	push   ebx
c0001605:	83 ec 1c             	sub    esp,0x1c
c0001608:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000160c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001610:	85 db                	test   ebx,ebx
c0001612:	75 10                	jne    c0001624 <dlrealloc+0x23>
c0001614:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001618:	83 c4 1c             	add    esp,0x1c
c000161b:	5b                   	pop    ebx
c000161c:	5e                   	pop    esi
c000161d:	5f                   	pop    edi
c000161e:	5d                   	pop    ebp
c000161f:	e9 a0 fa ff ff       	jmp    c00010c4 <dlmalloc>
c0001624:	83 f8 df             	cmp    eax,0xffffffdf
c0001627:	76 07                	jbe    c0001630 <dlrealloc+0x2f>
c0001629:	31 db                	xor    ebx,ebx
c000162b:	e9 6a 01 00 00       	jmp    c000179a <dlrealloc+0x199>
c0001630:	83 c0 0b             	add    eax,0xb
c0001633:	bd 10 00 00 00       	mov    ebp,0x10
c0001638:	83 f8 0f             	cmp    eax,0xf
c000163b:	76 05                	jbe    c0001642 <dlrealloc+0x41>
c000163d:	83 e0 f8             	and    eax,0xfffffff8
c0001640:	89 c5                	mov    ebp,eax
c0001642:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001645:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001648:	89 c6                	mov    esi,eax
c000164a:	83 e6 fc             	and    esi,0xfffffffc
c000164d:	a8 02                	test   al,0x2
c000164f:	75 d8                	jne    c0001629 <dlrealloc+0x28>
c0001651:	39 f5                	cmp    ebp,esi
c0001653:	0f 86 04 01 00 00    	jbe    c000175d <dlrealloc+0x15c>
c0001659:	8d 14 37             	lea    edx,[edi+esi*1]
c000165c:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c0001662:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001665:	75 33                	jne    c000169a <dlrealloc+0x99>
c0001667:	83 e1 fc             	and    ecx,0xfffffffc
c000166a:	01 f1                	add    ecx,esi
c000166c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001670:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001673:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001677:	77 49                	ja     c00016c2 <dlrealloc+0xc1>
c0001679:	83 e0 01             	and    eax,0x1
c000167c:	01 ef                	add    edi,ebp
c000167e:	09 e8                	or     eax,ebp
c0001680:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001683:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001687:	29 e8                	sub    eax,ebp
c0001689:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c000168f:	83 c8 01             	or     eax,0x1
c0001692:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001695:	e9 00 01 00 00       	jmp    c000179a <dlrealloc+0x199>
c000169a:	89 c8                	mov    eax,ecx
c000169c:	83 e0 fe             	and    eax,0xfffffffe
c000169f:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016a4:	75 1c                	jne    c00016c2 <dlrealloc+0xc1>
c00016a6:	83 e1 fc             	and    ecx,0xfffffffc
c00016a9:	01 f1                	add    ecx,esi
c00016ab:	39 cd                	cmp    ebp,ecx
c00016ad:	77 13                	ja     c00016c2 <dlrealloc+0xc1>
c00016af:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016b2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016b5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016b8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016bb:	89 ce                	mov    esi,ecx
c00016bd:	e9 9b 00 00 00       	jmp    c000175d <dlrealloc+0x15c>
c00016c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016c6:	83 ec 0c             	sub    esp,0xc
c00016c9:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016cc:	50                   	push   eax
c00016cd:	e8 f2 f9 ff ff       	call   c00010c4 <dlmalloc>
c00016d2:	83 c4 10             	add    esp,0x10
c00016d5:	85 c0                	test   eax,eax
c00016d7:	0f 84 4c ff ff ff    	je     c0001629 <dlrealloc+0x28>
c00016dd:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016e4:	39 ca                	cmp    edx,ecx
c00016e6:	75 0a                	jne    c00016f2 <dlrealloc+0xf1>
c00016e8:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016eb:	83 e0 fc             	and    eax,0xfffffffc
c00016ee:	01 c6                	add    esi,eax
c00016f0:	eb 6b                	jmp    c000175d <dlrealloc+0x15c>
c00016f2:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016f5:	83 f9 27             	cmp    ecx,0x27
c00016f8:	76 08                	jbe    c0001702 <dlrealloc+0x101>
c00016fa:	89 de                	mov    esi,ebx
c00016fc:	89 c7                	mov    edi,eax
c00016fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001700:	eb 43                	jmp    c0001745 <dlrealloc+0x144>
c0001702:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001704:	83 f9 13             	cmp    ecx,0x13
c0001707:	89 10                	mov    DWORD PTR [eax],edx
c0001709:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000170c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000170f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001712:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001715:	76 2e                	jbe    c0001745 <dlrealloc+0x144>
c0001717:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000171a:	83 f9 1b             	cmp    ecx,0x1b
c000171d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001720:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001723:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001726:	76 1d                	jbe    c0001745 <dlrealloc+0x144>
c0001728:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000172b:	83 f9 23             	cmp    ecx,0x23
c000172e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001731:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001734:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001737:	76 0c                	jbe    c0001745 <dlrealloc+0x144>
c0001739:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000173c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000173f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001742:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001749:	83 ec 0c             	sub    esp,0xc
c000174c:	53                   	push   ebx
c000174d:	e8 14 f6 ff ff       	call   c0000d66 <dlfree>
c0001752:	83 c4 10             	add    esp,0x10
c0001755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001759:	89 c3                	mov    ebx,eax
c000175b:	eb 3d                	jmp    c000179a <dlrealloc+0x199>
c000175d:	89 f2                	mov    edx,esi
c000175f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001762:	29 ea                	sub    edx,ebp
c0001764:	83 e1 01             	and    ecx,0x1
c0001767:	8d 04 37             	lea    eax,[edi+esi*1]
c000176a:	83 fa 0f             	cmp    edx,0xf
c000176d:	77 0b                	ja     c000177a <dlrealloc+0x179>
c000176f:	09 ce                	or     esi,ecx
c0001771:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	eb 20                	jmp    c000179a <dlrealloc+0x199>
c000177a:	01 ef                	add    edi,ebp
c000177c:	83 ca 01             	or     edx,0x1
c000177f:	09 cd                	or     ebp,ecx
c0001781:	83 ec 0c             	sub    esp,0xc
c0001784:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001787:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000178a:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000178e:	83 c7 08             	add    edi,0x8
c0001791:	57                   	push   edi
c0001792:	e8 cf f5 ff ff       	call   c0000d66 <dlfree>
c0001797:	83 c4 10             	add    esp,0x10
c000179a:	83 c4 1c             	add    esp,0x1c
c000179d:	89 d8                	mov    eax,ebx
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	c3                   	ret    

c00017a4 <dlmemalign>:
c00017a4:	55                   	push   ebp
c00017a5:	57                   	push   edi
c00017a6:	56                   	push   esi
c00017a7:	53                   	push   ebx
c00017a8:	83 ec 0c             	sub    esp,0xc
c00017ab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017b3:	83 fa 08             	cmp    edx,0x8
c00017b6:	77 10                	ja     c00017c8 <dlmemalign+0x24>
c00017b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017bc:	83 c4 0c             	add    esp,0xc
c00017bf:	5b                   	pop    ebx
c00017c0:	5e                   	pop    esi
c00017c1:	5f                   	pop    edi
c00017c2:	5d                   	pop    ebp
c00017c3:	e9 fc f8 ff ff       	jmp    c00010c4 <dlmalloc>
c00017c8:	bf 10 00 00 00       	mov    edi,0x10
c00017cd:	83 fa 0f             	cmp    edx,0xf
c00017d0:	76 13                	jbe    c00017e5 <dlmemalign+0x41>
c00017d2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017d5:	85 d1                	test   ecx,edx
c00017d7:	75 04                	jne    c00017dd <dlmemalign+0x39>
c00017d9:	89 d7                	mov    edi,edx
c00017db:	eb 08                	jmp    c00017e5 <dlmemalign+0x41>
c00017dd:	39 d7                	cmp    edi,edx
c00017df:	73 04                	jae    c00017e5 <dlmemalign+0x41>
c00017e1:	01 ff                	add    edi,edi
c00017e3:	eb f8                	jmp    c00017dd <dlmemalign+0x39>
c00017e5:	83 f8 df             	cmp    eax,0xffffffdf
c00017e8:	76 07                	jbe    c00017f1 <dlmemalign+0x4d>
c00017ea:	31 c0                	xor    eax,eax
c00017ec:	e9 ce 00 00 00       	jmp    c00018bf <dlmemalign+0x11b>
c00017f1:	83 c0 0b             	add    eax,0xb
c00017f4:	bd 10 00 00 00       	mov    ebp,0x10
c00017f9:	83 f8 0f             	cmp    eax,0xf
c00017fc:	76 05                	jbe    c0001803 <dlmemalign+0x5f>
c00017fe:	83 e0 f8             	and    eax,0xfffffff8
c0001801:	89 c5                	mov    ebp,eax
c0001803:	83 ec 0c             	sub    esp,0xc
c0001806:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000180a:	50                   	push   eax
c000180b:	e8 b4 f8 ff ff       	call   c00010c4 <dlmalloc>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	89 c1                	mov    ecx,eax
c0001815:	85 c0                	test   eax,eax
c0001817:	74 d1                	je     c00017ea <dlmemalign+0x46>
c0001819:	31 d2                	xor    edx,edx
c000181b:	8d 70 f8             	lea    esi,[eax-0x8]
c000181e:	f7 f7                	div    edi
c0001820:	85 d2                	test   edx,edx
c0001822:	74 62                	je     c0001886 <dlmemalign+0xe2>
c0001824:	89 f8                	mov    eax,edi
c0001826:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000182a:	f7 d8                	neg    eax
c000182c:	21 c3                	and    ebx,eax
c000182e:	83 eb 08             	sub    ebx,0x8
c0001831:	89 d8                	mov    eax,ebx
c0001833:	29 f0                	sub    eax,esi
c0001835:	83 f8 0f             	cmp    eax,0xf
c0001838:	77 02                	ja     c000183c <dlmemalign+0x98>
c000183a:	01 fb                	add    ebx,edi
c000183c:	89 d8                	mov    eax,ebx
c000183e:	29 f0                	sub    eax,esi
c0001840:	89 c6                	mov    esi,eax
c0001842:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001845:	89 c2                	mov    edx,eax
c0001847:	83 e2 fc             	and    edx,0xfffffffc
c000184a:	29 f2                	sub    edx,esi
c000184c:	a8 02                	test   al,0x2
c000184e:	74 10                	je     c0001860 <dlmemalign+0xbc>
c0001850:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001853:	83 ca 02             	or     edx,0x2
c0001856:	8d 43 08             	lea    eax,[ebx+0x8]
c0001859:	89 33                	mov    DWORD PTR [ebx],esi
c000185b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000185e:	eb 5f                	jmp    c00018bf <dlmemalign+0x11b>
c0001860:	89 d0                	mov    eax,edx
c0001862:	83 ec 0c             	sub    esp,0xc
c0001865:	83 c8 01             	or     eax,0x1
c0001868:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000186b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001870:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001873:	83 e0 01             	and    eax,0x1
c0001876:	09 f0                	or     eax,esi
c0001878:	89 de                	mov    esi,ebx
c000187a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000187d:	51                   	push   ecx
c000187e:	e8 e3 f4 ff ff       	call   c0000d66 <dlfree>
c0001883:	83 c4 10             	add    esp,0x10
c0001886:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001889:	a8 02                	test   al,0x2
c000188b:	75 2f                	jne    c00018bc <dlmemalign+0x118>
c000188d:	83 e0 fc             	and    eax,0xfffffffc
c0001890:	8d 55 10             	lea    edx,[ebp+0x10]
c0001893:	39 c2                	cmp    edx,eax
c0001895:	73 25                	jae    c00018bc <dlmemalign+0x118>
c0001897:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000189a:	29 e8                	sub    eax,ebp
c000189c:	83 c8 01             	or     eax,0x1
c000189f:	83 ec 0c             	sub    esp,0xc
c00018a2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018a5:	83 c2 08             	add    edx,0x8
c00018a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ab:	83 e0 01             	and    eax,0x1
c00018ae:	09 c5                	or     ebp,eax
c00018b0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018b3:	52                   	push   edx
c00018b4:	e8 ad f4 ff ff       	call   c0000d66 <dlfree>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	8d 46 08             	lea    eax,[esi+0x8]
c00018bf:	83 c4 0c             	add    esp,0xc
c00018c2:	5b                   	pop    ebx
c00018c3:	5e                   	pop    esi
c00018c4:	5f                   	pop    edi
c00018c5:	5d                   	pop    ebp
c00018c6:	c3                   	ret    

c00018c7 <dlcalloc>:
c00018c7:	53                   	push   ebx
c00018c8:	83 ec 14             	sub    esp,0x14
c00018cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018cf:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018d4:	50                   	push   eax
c00018d5:	e8 ea f7 ff ff       	call   c00010c4 <dlmalloc>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	89 c3                	mov    ebx,eax
c00018df:	85 c0                	test   eax,eax
c00018e1:	74 77                	je     c000195a <dlcalloc+0x93>
c00018e3:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018e6:	89 d0                	mov    eax,edx
c00018e8:	83 e0 fc             	and    eax,0xfffffffc
c00018eb:	80 e2 02             	and    dl,0x2
c00018ee:	75 5a                	jne    c000194a <dlcalloc+0x83>
c00018f0:	83 e8 04             	sub    eax,0x4
c00018f3:	83 f8 27             	cmp    eax,0x27
c00018f6:	76 03                	jbe    c00018fb <dlcalloc+0x34>
c00018f8:	51                   	push   ecx
c00018f9:	eb 53                	jmp    c000194e <dlcalloc+0x87>
c00018fb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001901:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001908:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000190f:	83 f8 13             	cmp    eax,0x13
c0001912:	76 46                	jbe    c000195a <dlcalloc+0x93>
c0001914:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000191b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001922:	83 f8 1b             	cmp    eax,0x1b
c0001925:	76 33                	jbe    c000195a <dlcalloc+0x93>
c0001927:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000192e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001935:	83 f8 23             	cmp    eax,0x23
c0001938:	76 20                	jbe    c000195a <dlcalloc+0x93>
c000193a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001941:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001948:	eb 10                	jmp    c000195a <dlcalloc+0x93>
c000194a:	83 e8 08             	sub    eax,0x8
c000194d:	52                   	push   edx
c000194e:	50                   	push   eax
c000194f:	6a 00                	push   0x0
c0001951:	53                   	push   ebx
c0001952:	e8 89 eb ff ff       	call   c00004e0 <memset>
c0001957:	83 c4 10             	add    esp,0x10
c000195a:	83 c4 08             	add    esp,0x8
c000195d:	89 d8                	mov    eax,ebx
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlcfree>:
c0001961:	e9 00 f4 ff ff       	jmp    c0000d66 <dlfree>

c0001966 <dlindependent_calloc>:
c0001966:	83 ec 28             	sub    esp,0x28
c0001969:	b9 03 00 00 00       	mov    ecx,0x3
c000196e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001972:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001976:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000197a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000197e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001982:	e8 cb fa ff ff       	call   c0001452 <iALLOc>
c0001987:	83 c4 2c             	add    esp,0x2c
c000198a:	c3                   	ret    

c000198b <dlindependent_comalloc>:
c000198b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000198f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001993:	31 c9                	xor    ecx,ecx
c0001995:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001999:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000199d:	e9 b0 fa ff ff       	jmp    c0001452 <iALLOc>

c00019a2 <dlvalloc>:
c00019a2:	83 ec 0c             	sub    esp,0xc
c00019a5:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019ac:	75 0a                	jne    c00019b8 <dlvalloc+0x16>
c00019ae:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019b3:	e8 c7 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c00019b8:	50                   	push   eax
c00019b9:	50                   	push   eax
c00019ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019be:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019c4:	e8 db fd ff ff       	call   c00017a4 <dlmemalign>
c00019c9:	83 c4 1c             	add    esp,0x1c
c00019cc:	c3                   	ret    

c00019cd <dlpvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlpvalloc+0x16>
c00019d9:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019de:	e8 9c f2 ff ff       	call   c0000c7f <malloc_consolidate>
c00019e3:	52                   	push   edx
c00019e4:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019e9:	52                   	push   edx
c00019ea:	89 c1                	mov    ecx,eax
c00019ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019f0:	f7 d9                	neg    ecx
c00019f2:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019f6:	21 ca                	and    edx,ecx
c00019f8:	52                   	push   edx
c00019f9:	50                   	push   eax
c00019fa:	e8 a5 fd ff ff       	call   c00017a4 <dlmemalign>
c00019ff:	83 c4 1c             	add    esp,0x1c
c0001a02:	c3                   	ret    

c0001a03 <dlmalloc_trim>:
c0001a03:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a08:	e8 72 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c0001a0d:	31 c0                	xor    eax,eax
c0001a0f:	c3                   	ret    

c0001a10 <dlmalloc_usable_size>:
c0001a10:	53                   	push   ebx
c0001a11:	31 c0                	xor    eax,eax
c0001a13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a17:	85 c9                	test   ecx,ecx
c0001a19:	74 24                	je     c0001a3f <dlmalloc_usable_size+0x2f>
c0001a1b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a1e:	f6 c2 02             	test   dl,0x2
c0001a21:	74 08                	je     c0001a2b <dlmalloc_usable_size+0x1b>
c0001a23:	83 e2 fc             	and    edx,0xfffffffc
c0001a26:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a29:	eb 14                	jmp    c0001a3f <dlmalloc_usable_size+0x2f>
c0001a2b:	89 d3                	mov    ebx,edx
c0001a2d:	31 c0                	xor    eax,eax
c0001a2f:	83 e3 fe             	and    ebx,0xfffffffe
c0001a32:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a37:	74 06                	je     c0001a3f <dlmalloc_usable_size+0x2f>
c0001a39:	83 e2 fc             	and    edx,0xfffffffc
c0001a3c:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a3f:	5b                   	pop    ebx
c0001a40:	c3                   	ret    

c0001a41 <dlmallinfo>:
c0001a41:	55                   	push   ebp
c0001a42:	57                   	push   edi
c0001a43:	56                   	push   esi
c0001a44:	53                   	push   ebx
c0001a45:	83 ec 08             	sub    esp,0x8
c0001a48:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a4f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a53:	75 0a                	jne    c0001a5f <dlmallinfo+0x1e>
c0001a55:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5a:	e8 20 f2 ff ff       	call   c0000c7f <malloc_consolidate>
c0001a5f:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a64:	31 ed                	xor    ebp,ebp
c0001a66:	31 c9                	xor    ecx,ecx
c0001a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a6b:	83 e0 fc             	and    eax,0xfffffffc
c0001a6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a7b:	85 d2                	test   edx,edx
c0001a7d:	74 0e                	je     c0001a8d <dlmallinfo+0x4c>
c0001a7f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a82:	45                   	inc    ebp
c0001a83:	83 e6 fc             	and    esi,0xfffffffc
c0001a86:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a89:	01 f1                	add    ecx,esi
c0001a8b:	eb ee                	jmp    c0001a7b <dlmallinfo+0x3a>
c0001a8d:	40                   	inc    eax
c0001a8e:	83 f8 0a             	cmp    eax,0xa
c0001a91:	75 e1                	jne    c0001a74 <dlmallinfo+0x33>
c0001a93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a97:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a9e:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001aa1:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001aa6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aa9:	39 f0                	cmp    eax,esi
c0001aab:	74 10                	je     c0001abd <dlmallinfo+0x7c>
c0001aad:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ab0:	ff 04 24             	inc    DWORD PTR [esp]
c0001ab3:	83 e7 fc             	and    edi,0xfffffffc
c0001ab6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ab9:	01 fa                	add    edx,edi
c0001abb:	eb ec                	jmp    c0001aa9 <dlmallinfo+0x68>
c0001abd:	83 c0 08             	add    eax,0x8
c0001ac0:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001ac5:	75 df                	jne    c0001aa6 <dlmallinfo+0x65>
c0001ac7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001acc:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001ad2:	89 03                	mov    DWORD PTR [ebx],eax
c0001ad4:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001ad7:	29 d0                	sub    eax,edx
c0001ad9:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001adf:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ae2:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ae5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001ae8:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001af2:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001af5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001af8:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001afb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001afe:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b01:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b04:	83 c4 08             	add    esp,0x8
c0001b07:	89 d8                	mov    eax,ebx
c0001b09:	5b                   	pop    ebx
c0001b0a:	5e                   	pop    esi
c0001b0b:	5f                   	pop    edi
c0001b0c:	5d                   	pop    ebp
c0001b0d:	c2 04 00             	ret    0x4

c0001b10 <dlmalloc_stats>:
c0001b10:	83 ec 30             	sub    esp,0x30
c0001b13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b17:	50                   	push   eax
c0001b18:	e8 24 ff ff ff       	call   c0001a41 <dlmallinfo>
c0001b1d:	83 c4 30             	add    esp,0x30
c0001b20:	c3                   	ret    

c0001b21 <dlmallopt>:
c0001b21:	56                   	push   esi
c0001b22:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b27:	53                   	push   ebx
c0001b28:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b30:	e8 4a f1 ff ff       	call   c0000c7f <malloc_consolidate>
c0001b35:	8d 46 04             	lea    eax,[esi+0x4]
c0001b38:	83 f8 05             	cmp    eax,0x5
c0001b3b:	77 67                	ja     c0001ba4 <dlmallopt+0x83>
c0001b3d:	ff 24 85 a4 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c5c]
c0001b44:	83 fb 50             	cmp    ebx,0x50
c0001b47:	77 5b                	ja     c0001ba4 <dlmallopt+0x83>
c0001b49:	ba 08 00 00 00       	mov    edx,0x8
c0001b4e:	85 db                	test   ebx,ebx
c0001b50:	74 12                	je     c0001b64 <dlmallopt+0x43>
c0001b52:	83 c3 0b             	add    ebx,0xb
c0001b55:	ba 10 00 00 00       	mov    edx,0x10
c0001b5a:	83 fb 0f             	cmp    ebx,0xf
c0001b5d:	76 05                	jbe    c0001b64 <dlmallopt+0x43>
c0001b5f:	89 da                	mov    edx,ebx
c0001b61:	83 e2 f8             	and    edx,0xfffffff8
c0001b64:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b69:	83 e0 03             	and    eax,0x3
c0001b6c:	09 d0                	or     eax,edx
c0001b6e:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b73:	eb 31                	jmp    c0001ba6 <dlmallopt+0x85>
c0001b75:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b7b:	eb 06                	jmp    c0001b83 <dlmallopt+0x62>
c0001b7d:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b83:	be 01 00 00 00       	mov    esi,0x1
c0001b88:	eb 1c                	jmp    c0001ba6 <dlmallopt+0x85>
c0001b8a:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b90:	eb f1                	jmp    c0001b83 <dlmallopt+0x62>
c0001b92:	31 f6                	xor    esi,esi
c0001b94:	85 db                	test   ebx,ebx
c0001b96:	75 0e                	jne    c0001ba6 <dlmallopt+0x85>
c0001b98:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001ba2:	eb df                	jmp    c0001b83 <dlmallopt+0x62>
c0001ba4:	31 f6                	xor    esi,esi
c0001ba6:	5b                   	pop    ebx
c0001ba7:	89 f0                	mov    eax,esi
c0001ba9:	5e                   	pop    esi
c0001baa:	c3                   	ret    
c0001bab:	90                   	nop

c0001bac <isblank>:
c0001bac:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bb1:	74 09                	je     c0001bbc <isblank+0x10>
c0001bb3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bb8:	75 0a                	jne    c0001bc4 <isblank+0x18>
c0001bba:	66 90                	xchg   ax,ax
c0001bbc:	b8 01 00 00 00       	mov    eax,0x1
c0001bc1:	c3                   	ret    
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 00 00 00 00       	mov    eax,0x0
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax

c0001bcc <iscntrl>:
c0001bcc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bd1:	7e 09                	jle    c0001bdc <iscntrl+0x10>
c0001bd3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bd8:	75 0a                	jne    c0001be4 <iscntrl+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <isdigit>:
c0001bec:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bf1:	7e 0d                	jle    c0001c00 <isdigit+0x14>
c0001bf3:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001bf8:	7f 06                	jg     c0001c00 <isdigit+0x14>
c0001bfa:	b8 01 00 00 00       	mov    eax,0x1
c0001bff:	c3                   	ret    
c0001c00:	b8 00 00 00 00       	mov    eax,0x0
c0001c05:	c3                   	ret    
c0001c06:	66 90                	xchg   ax,ax

c0001c08 <islower>:
c0001c08:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c0d:	7e 0d                	jle    c0001c1c <islower+0x14>
c0001c0f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c14:	7f 06                	jg     c0001c1c <islower+0x14>
c0001c16:	b8 01 00 00 00       	mov    eax,0x1
c0001c1b:	c3                   	ret    
c0001c1c:	b8 00 00 00 00       	mov    eax,0x0
c0001c21:	c3                   	ret    
c0001c22:	66 90                	xchg   ax,ax

c0001c24 <isspace>:
c0001c24:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c29:	7c 19                	jl     c0001c44 <isspace+0x20>
c0001c2b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c30:	7e 0a                	jle    c0001c3c <isspace+0x18>
c0001c32:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c37:	75 0b                	jne    c0001c44 <isspace+0x20>
c0001c39:	8d 76 00             	lea    esi,[esi+0x0]
c0001c3c:	b8 01 00 00 00       	mov    eax,0x1
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax
c0001c44:	b8 00 00 00 00       	mov    eax,0x0
c0001c49:	c3                   	ret    
c0001c4a:	66 90                	xchg   ax,ax

c0001c4c <isupper>:
c0001c4c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c51:	7e 0d                	jle    c0001c60 <isupper+0x14>
c0001c53:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c58:	7f 06                	jg     c0001c60 <isupper+0x14>
c0001c5a:	b8 01 00 00 00       	mov    eax,0x1
c0001c5f:	c3                   	ret    
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isalpha>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 db ff ff ff       	call   c0001c4c <isupper>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 10                	jne    c0001c88 <isalpha+0x20>
c0001c78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c7c:	e8 87 ff ff ff       	call   c0001c08 <islower>
c0001c81:	83 c4 04             	add    esp,0x4
c0001c84:	85 c0                	test   eax,eax
c0001c86:	74 08                	je     c0001c90 <isalpha+0x28>
c0001c88:	b8 01 00 00 00       	mov    eax,0x1
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax
c0001c90:	b8 00 00 00 00       	mov    eax,0x0
c0001c95:	c3                   	ret    
c0001c96:	66 90                	xchg   ax,ax

c0001c98 <isalnum>:
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 c7 ff ff ff       	call   c0001c68 <isalpha>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	75 10                	jne    c0001cb8 <isalnum+0x20>
c0001ca8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cac:	e8 3b ff ff ff       	call   c0001bec <isdigit>
c0001cb1:	83 c4 04             	add    esp,0x4
c0001cb4:	85 c0                	test   eax,eax
c0001cb6:	74 08                	je     c0001cc0 <isalnum+0x28>
c0001cb8:	b8 01 00 00 00       	mov    eax,0x1
c0001cbd:	c3                   	ret    
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 00 00 00 00       	mov    eax,0x0
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax

c0001cc8 <ispunct>:
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 c7 ff ff ff       	call   c0001c98 <isalnum>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	75 28                	jne    c0001d00 <ispunct+0x38>
c0001cd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cdc:	e8 43 ff ff ff       	call   c0001c24 <isspace>
c0001ce1:	83 c4 04             	add    esp,0x4
c0001ce4:	85 c0                	test   eax,eax
c0001ce6:	75 18                	jne    c0001d00 <ispunct+0x38>
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 db fe ff ff       	call   c0001bcc <iscntrl>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 08                	jne    c0001d00 <ispunct+0x38>
c0001cf8:	b8 01 00 00 00       	mov    eax,0x1
c0001cfd:	c3                   	ret    
c0001cfe:	66 90                	xchg   ax,ax
c0001d00:	b8 00 00 00 00       	mov    eax,0x0
c0001d05:	c3                   	ret    
c0001d06:	66 90                	xchg   ax,ax

c0001d08 <isgraph>:
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 87 ff ff ff       	call   c0001c98 <isalnum>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 10                	jne    c0001d28 <isgraph+0x20>
c0001d18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d1c:	e8 a7 ff ff ff       	call   c0001cc8 <ispunct>
c0001d21:	83 c4 04             	add    esp,0x4
c0001d24:	85 c0                	test   eax,eax
c0001d26:	74 08                	je     c0001d30 <isgraph+0x28>
c0001d28:	b8 01 00 00 00       	mov    eax,0x1
c0001d2d:	c3                   	ret    
c0001d2e:	66 90                	xchg   ax,ax
c0001d30:	b8 00 00 00 00       	mov    eax,0x0
c0001d35:	c3                   	ret    
c0001d36:	66 90                	xchg   ax,ax

c0001d38 <isprint>:
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 c7 ff ff ff       	call   c0001d08 <isgraph>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	75 08                	jne    c0001d50 <isprint+0x18>
c0001d48:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d4d:	75 09                	jne    c0001d58 <isprint+0x20>
c0001d4f:	90                   	nop
c0001d50:	b8 01 00 00 00       	mov    eax,0x1
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 00 00 00 00       	mov    eax,0x0
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax

c0001d60 <isxdigit>:
c0001d60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d64:	e8 83 fe ff ff       	call   c0001bec <isdigit>
c0001d69:	83 c4 04             	add    esp,0x4
c0001d6c:	85 c0                	test   eax,eax
c0001d6e:	75 20                	jne    c0001d90 <isxdigit+0x30>
c0001d70:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d75:	7e 09                	jle    c0001d80 <isxdigit+0x20>
c0001d77:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d7c:	7e 12                	jle    c0001d90 <isxdigit+0x30>
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d85:	7e 11                	jle    c0001d98 <isxdigit+0x38>
c0001d87:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d8c:	7f 0a                	jg     c0001d98 <isxdigit+0x38>
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 01 00 00 00       	mov    eax,0x1
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    

c0001d9e <disk_status>:
c0001d9e:	31 c0                	xor    eax,eax
c0001da0:	c3                   	ret    

c0001da1 <disk_initialize>:
c0001da1:	31 c0                	xor    eax,eax
c0001da3:	c3                   	ret    

c0001da4 <disk_read>:
c0001da4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da9:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001db1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db5:	e9 46 6b 01 00       	jmp    c0018900 <fatWrapperReadDisk>

c0001dba <disk_write>:
c0001dba:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dbf:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dcb:	e9 70 6b 01 00       	jmp    c0018940 <fatWrapperWriteDisk>

c0001dd0 <disk_ioctl>:
c0001dd0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dd9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dde:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001de6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dea:	e9 91 6b 01 00       	jmp    c0018980 <fatWrapperIoctl>

c0001def <ld_word>:
c0001def:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001df3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <ld_dword>:
c0001dfc:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e00:	89 d1                	mov    ecx,edx
c0001e02:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e06:	c1 e1 08             	shl    ecx,0x8
c0001e09:	09 ca                	or     edx,ecx
c0001e0b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e0e:	c1 e2 08             	shl    edx,0x8
c0001e11:	09 d0                	or     eax,edx
c0001e13:	c3                   	ret    

c0001e14 <st_word>:
c0001e14:	66 89 10             	mov    WORD PTR [eax],dx
c0001e17:	c3                   	ret    

c0001e18 <st_dword>:
c0001e18:	89 10                	mov    DWORD PTR [eax],edx
c0001e1a:	c3                   	ret    

c0001e1b <mem_cpy>:
c0001e1b:	85 c9                	test   ecx,ecx
c0001e1d:	74 10                	je     c0001e2f <mem_cpy+0x14>
c0001e1f:	57                   	push   edi
c0001e20:	01 c1                	add    ecx,eax
c0001e22:	56                   	push   esi
c0001e23:	89 c7                	mov    edi,eax
c0001e25:	89 d6                	mov    esi,edx
c0001e27:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e28:	39 f9                	cmp    ecx,edi
c0001e2a:	75 fb                	jne    c0001e27 <mem_cpy+0xc>
c0001e2c:	5e                   	pop    esi
c0001e2d:	5f                   	pop    edi
c0001e2e:	c3                   	ret    
c0001e2f:	c3                   	ret    

c0001e30 <mem_set>:
c0001e30:	01 c1                	add    ecx,eax
c0001e32:	40                   	inc    eax
c0001e33:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e36:	39 c8                	cmp    eax,ecx
c0001e38:	75 f8                	jne    c0001e32 <mem_set+0x2>
c0001e3a:	c3                   	ret    

c0001e3b <mem_cmp>:
c0001e3b:	57                   	push   edi
c0001e3c:	56                   	push   esi
c0001e3d:	89 c6                	mov    esi,eax
c0001e3f:	53                   	push   ebx
c0001e40:	46                   	inc    esi
c0001e41:	42                   	inc    edx
c0001e42:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e46:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e4a:	29 fb                	sub    ebx,edi
c0001e4c:	89 cf                	mov    edi,ecx
c0001e4e:	29 f7                	sub    edi,esi
c0001e50:	01 c7                	add    edi,eax
c0001e52:	74 04                	je     c0001e58 <mem_cmp+0x1d>
c0001e54:	85 db                	test   ebx,ebx
c0001e56:	74 e8                	je     c0001e40 <mem_cmp+0x5>
c0001e58:	89 d8                	mov    eax,ebx
c0001e5a:	5b                   	pop    ebx
c0001e5b:	5e                   	pop    esi
c0001e5c:	5f                   	pop    edi
c0001e5d:	c3                   	ret    

c0001e5e <chk_chr>:
c0001e5e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e61:	85 c9                	test   ecx,ecx
c0001e63:	74 07                	je     c0001e6c <chk_chr+0xe>
c0001e65:	39 d1                	cmp    ecx,edx
c0001e67:	74 03                	je     c0001e6c <chk_chr+0xe>
c0001e69:	40                   	inc    eax
c0001e6a:	eb f2                	jmp    c0001e5e <chk_chr>
c0001e6c:	89 c8                	mov    eax,ecx
c0001e6e:	c3                   	ret    

c0001e6f <dbc_1st>:
c0001e6f:	31 c0                	xor    eax,eax
c0001e71:	c3                   	ret    

c0001e72 <dbc_2nd>:
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	c3                   	ret    

c0001e75 <tchar2uni>:
c0001e75:	57                   	push   edi
c0001e76:	56                   	push   esi
c0001e77:	53                   	push   ebx
c0001e78:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e7a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e7c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e7f:	f6 c1 80             	test   cl,0x80
c0001e82:	75 0a                	jne    c0001e8e <tchar2uni+0x19>
c0001e84:	0f b6 d1             	movzx  edx,cl
c0001e87:	89 f3                	mov    ebx,esi
c0001e89:	e9 b2 00 00 00       	jmp    c0001f40 <tchar2uni+0xcb>
c0001e8e:	89 ca                	mov    edx,ecx
c0001e90:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e96:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e9c:	89 ca                	mov    edx,ecx
c0001e9e:	75 0a                	jne    c0001eaa <tchar2uni+0x35>
c0001ea0:	83 e2 1f             	and    edx,0x1f
c0001ea3:	b9 01 00 00 00       	mov    ecx,0x1
c0001ea8:	eb 37                	jmp    c0001ee1 <tchar2uni+0x6c>
c0001eaa:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001eb0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001eb6:	75 0c                	jne    c0001ec4 <tchar2uni+0x4f>
c0001eb8:	89 ca                	mov    edx,ecx
c0001eba:	b9 02 00 00 00       	mov    ecx,0x2
c0001ebf:	83 e2 0f             	and    edx,0xf
c0001ec2:	eb 1d                	jmp    c0001ee1 <tchar2uni+0x6c>
c0001ec4:	89 cf                	mov    edi,ecx
c0001ec6:	83 ca ff             	or     edx,0xffffffff
c0001ec9:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001ecf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ed5:	75 70                	jne    c0001f47 <tchar2uni+0xd2>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 03 00 00 00       	mov    ecx,0x3
c0001ede:	83 e2 07             	and    edx,0x7
c0001ee1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ee5:	46                   	inc    esi
c0001ee6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ee9:	89 cf                	mov    edi,ecx
c0001eeb:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ef1:	83 c7 80             	add    edi,0xffffff80
c0001ef4:	75 4e                	jne    c0001f44 <tchar2uni+0xcf>
c0001ef6:	c1 e2 06             	shl    edx,0x6
c0001ef9:	83 e1 3f             	and    ecx,0x3f
c0001efc:	09 ca                	or     edx,ecx
c0001efe:	39 de                	cmp    esi,ebx
c0001f00:	75 e3                	jne    c0001ee5 <tchar2uni+0x70>
c0001f02:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f08:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f0e:	76 34                	jbe    c0001f44 <tchar2uni+0xcf>
c0001f10:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f13:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f19:	77 29                	ja     c0001f44 <tchar2uni+0xcf>
c0001f1b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f21:	76 1d                	jbe    c0001f40 <tchar2uni+0xcb>
c0001f23:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f29:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f2f:	c1 e1 06             	shl    ecx,0x6
c0001f32:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f38:	09 ca                	or     edx,ecx
c0001f3a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f40:	89 18                	mov    DWORD PTR [eax],ebx
c0001f42:	eb 03                	jmp    c0001f47 <tchar2uni+0xd2>
c0001f44:	83 ca ff             	or     edx,0xffffffff
c0001f47:	5b                   	pop    ebx
c0001f48:	89 d0                	mov    eax,edx
c0001f4a:	5e                   	pop    esi
c0001f4b:	5f                   	pop    edi
c0001f4c:	c3                   	ret    

c0001f4d <put_utf>:
c0001f4d:	53                   	push   ebx
c0001f4e:	83 f8 7f             	cmp    eax,0x7f
c0001f51:	89 c3                	mov    ebx,eax
c0001f53:	b0 00                	mov    al,0x0
c0001f55:	77 11                	ja     c0001f68 <put_utf+0x1b>
c0001f57:	85 c9                	test   ecx,ecx
c0001f59:	0f 84 e5 00 00 00    	je     c0002044 <put_utf+0xf7>
c0001f5f:	88 1a                	mov    BYTE PTR [edx],bl
c0001f61:	b0 01                	mov    al,0x1
c0001f63:	e9 dc 00 00 00       	jmp    c0002044 <put_utf+0xf7>
c0001f68:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f6e:	77 23                	ja     c0001f93 <put_utf+0x46>
c0001f70:	83 f9 01             	cmp    ecx,0x1
c0001f73:	0f 86 cb 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001f79:	89 d8                	mov    eax,ebx
c0001f7b:	83 e3 3f             	and    ebx,0x3f
c0001f7e:	c1 e8 06             	shr    eax,0x6
c0001f81:	83 cb 80             	or     ebx,0xffffff80
c0001f84:	83 c8 c0             	or     eax,0xffffffc0
c0001f87:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f8a:	88 02                	mov    BYTE PTR [edx],al
c0001f8c:	b0 02                	mov    al,0x2
c0001f8e:	e9 b1 00 00 00       	jmp    c0002044 <put_utf+0xf7>
c0001f93:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f99:	77 40                	ja     c0001fdb <put_utf+0x8e>
c0001f9b:	83 f9 02             	cmp    ecx,0x2
c0001f9e:	0f 86 a0 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001fa4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001faa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fb0:	0f 86 8e 00 00 00    	jbe    c0002044 <put_utf+0xf7>
c0001fb6:	89 d8                	mov    eax,ebx
c0001fb8:	c1 e8 0c             	shr    eax,0xc
c0001fbb:	83 c8 e0             	or     eax,0xffffffe0
c0001fbe:	88 02                	mov    BYTE PTR [edx],al
c0001fc0:	89 d8                	mov    eax,ebx
c0001fc2:	c1 e8 06             	shr    eax,0x6
c0001fc5:	83 e3 3f             	and    ebx,0x3f
c0001fc8:	83 e0 3f             	and    eax,0x3f
c0001fcb:	83 cb 80             	or     ebx,0xffffff80
c0001fce:	83 c8 80             	or     eax,0xffffff80
c0001fd1:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fd4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fd7:	b0 03                	mov    al,0x3
c0001fd9:	eb 69                	jmp    c0002044 <put_utf+0xf7>
c0001fdb:	83 f9 03             	cmp    ecx,0x3
c0001fde:	76 64                	jbe    c0002044 <put_utf+0xf7>
c0001fe0:	89 d9                	mov    ecx,ebx
c0001fe2:	66 31 c9             	xor    cx,cx
c0001fe5:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001feb:	0f b7 c3             	movzx  eax,bx
c0001fee:	c1 e9 06             	shr    ecx,0x6
c0001ff1:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ff7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ffd:	77 43                	ja     c0002042 <put_utf+0xf5>
c0001fff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002005:	77 3b                	ja     c0002042 <put_utf+0xf5>
c0002007:	09 cb                	or     ebx,ecx
c0002009:	81 c3 00 00 01 00    	add    ebx,0x10000
c000200f:	89 d8                	mov    eax,ebx
c0002011:	c1 e8 12             	shr    eax,0x12
c0002014:	83 c8 f0             	or     eax,0xfffffff0
c0002017:	88 02                	mov    BYTE PTR [edx],al
c0002019:	89 d8                	mov    eax,ebx
c000201b:	c1 e8 0c             	shr    eax,0xc
c000201e:	83 e0 3f             	and    eax,0x3f
c0002021:	83 c8 80             	or     eax,0xffffff80
c0002024:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002027:	89 d8                	mov    eax,ebx
c0002029:	c1 e8 06             	shr    eax,0x6
c000202c:	83 e3 3f             	and    ebx,0x3f
c000202f:	83 e0 3f             	and    eax,0x3f
c0002032:	83 cb 80             	or     ebx,0xffffff80
c0002035:	83 c8 80             	or     eax,0xffffff80
c0002038:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000203b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000203e:	b0 04                	mov    al,0x4
c0002040:	eb 02                	jmp    c0002044 <put_utf+0xf7>
c0002042:	31 c0                	xor    eax,eax
c0002044:	5b                   	pop    ebx
c0002045:	c3                   	ret    

c0002046 <clst2sect>:
c0002046:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002049:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000204c:	83 ea 02             	sub    edx,0x2
c000204f:	39 ca                	cmp    edx,ecx
c0002051:	76 0d                	jbe    c0002060 <clst2sect+0x1a>
c0002053:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002057:	0f af d1             	imul   edx,ecx
c000205a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000205d:	89 d0                	mov    eax,edx
c000205f:	c3                   	ret    
c0002060:	31 c0                	xor    eax,eax
c0002062:	c3                   	ret    

c0002063 <pick_lfn>:
c0002063:	55                   	push   ebp
c0002064:	57                   	push   edi
c0002065:	89 c7                	mov    edi,eax
c0002067:	56                   	push   esi
c0002068:	8d 42 1a             	lea    eax,[edx+0x1a]
c000206b:	53                   	push   ebx
c000206c:	89 d3                	mov    ebx,edx
c000206e:	e8 7c fd ff ff       	call   c0001def <ld_word>
c0002073:	66 85 c0             	test   ax,ax
c0002076:	74 04                	je     c000207c <pick_lfn+0x19>
c0002078:	31 c0                	xor    eax,eax
c000207a:	eb 62                	jmp    c00020de <pick_lfn+0x7b>
c000207c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000207f:	83 e1 bf             	and    ecx,0xffffffbf
c0002082:	bd 01 00 00 00       	mov    ebp,0x1
c0002087:	49                   	dec    ecx
c0002088:	31 f6                	xor    esi,esi
c000208a:	6b c9 0d             	imul   ecx,ecx,0xd
c000208d:	0f b6 86 00 f5 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b00]
c0002094:	01 d8                	add    eax,ebx
c0002096:	e8 54 fd ff ff       	call   c0001def <ld_word>
c000209b:	66 85 ed             	test   bp,bp
c000209e:	74 11                	je     c00020b1 <pick_lfn+0x4e>
c00020a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020a6:	77 d0                	ja     c0002078 <pick_lfn+0x15>
c00020a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020ac:	89 c5                	mov    ebp,eax
c00020ae:	41                   	inc    ecx
c00020af:	eb 0a                	jmp    c00020bb <pick_lfn+0x58>
c00020b1:	0f b7 c0             	movzx  eax,ax
c00020b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00020b9:	75 bd                	jne    c0002078 <pick_lfn+0x15>
c00020bb:	46                   	inc    esi
c00020bc:	83 fe 0d             	cmp    esi,0xd
c00020bf:	75 cc                	jne    c000208d <pick_lfn+0x2a>
c00020c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020c4:	74 13                	je     c00020d9 <pick_lfn+0x76>
c00020c6:	66 85 ed             	test   bp,bp
c00020c9:	74 0e                	je     c00020d9 <pick_lfn+0x76>
c00020cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020d1:	77 a5                	ja     c0002078 <pick_lfn+0x15>
c00020d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020d9:	b8 01 00 00 00       	mov    eax,0x1
c00020de:	5b                   	pop    ebx
c00020df:	5e                   	pop    esi
c00020e0:	5f                   	pop    edi
c00020e1:	5d                   	pop    ebp
c00020e2:	c3                   	ret    

c00020e3 <put_lfn>:
c00020e3:	55                   	push   ebp
c00020e4:	57                   	push   edi
c00020e5:	89 d7                	mov    edi,edx
c00020e7:	56                   	push   esi
c00020e8:	31 f6                	xor    esi,esi
c00020ea:	53                   	push   ebx
c00020eb:	83 ec 0c             	sub    esp,0xc
c00020ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020f6:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020f9:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020ff:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002102:	31 d2                	xor    edx,edx
c0002104:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002108:	e8 07 fd ff ff       	call   c0001e14 <st_word>
c000210d:	0f b6 d9             	movzx  ebx,cl
c0002110:	4b                   	dec    ebx
c0002111:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002118:	6b db 0d             	imul   ebx,ebx,0xd
c000211b:	0f b7 c6             	movzx  eax,si
c000211e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002123:	74 09                	je     c000212e <put_lfn+0x4b>
c0002125:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002129:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000212d:	43                   	inc    ebx
c000212e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002131:	0f b7 ee             	movzx  ebp,si
c0002134:	0f b6 80 00 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b00]
c000213b:	89 ea                	mov    edx,ebp
c000213d:	01 f8                	add    eax,edi
c000213f:	e8 d0 fc ff ff       	call   c0001e14 <st_word>
c0002144:	85 ed                	test   ebp,ebp
c0002146:	75 05                	jne    c000214d <put_lfn+0x6a>
c0002148:	be ff ff 00 00       	mov    esi,0xffff
c000214d:	ff 04 24             	inc    DWORD PTR [esp]
c0002150:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002154:	75 c5                	jne    c000211b <put_lfn+0x38>
c0002156:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000215c:	74 0b                	je     c0002169 <put_lfn+0x86>
c000215e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002162:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002167:	75 07                	jne    c0002170 <put_lfn+0x8d>
c0002169:	83 c9 40             	or     ecx,0x40
c000216c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002170:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002174:	88 07                	mov    BYTE PTR [edi],al
c0002176:	83 c4 0c             	add    esp,0xc
c0002179:	5b                   	pop    ebx
c000217a:	5e                   	pop    esi
c000217b:	5f                   	pop    edi
c000217c:	5d                   	pop    ebp
c000217d:	c3                   	ret    

c000217e <gen_numname>:
c000217e:	57                   	push   edi
c000217f:	89 cf                	mov    edi,ecx
c0002181:	56                   	push   esi
c0002182:	b9 0b 00 00 00       	mov    ecx,0xb
c0002187:	53                   	push   ebx
c0002188:	89 c6                	mov    esi,eax
c000218a:	83 ec 10             	sub    esp,0x10
c000218d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002191:	e8 85 fc ff ff       	call   c0001e1b <mem_cpy>
c0002196:	83 fb 05             	cmp    ebx,0x5
c0002199:	76 30                	jbe    c00021cb <gen_numname+0x4d>
c000219b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000219e:	66 85 c0             	test   ax,ax
c00021a1:	74 28                	je     c00021cb <gen_numname+0x4d>
c00021a3:	83 c7 02             	add    edi,0x2
c00021a6:	ba 10 00 00 00       	mov    edx,0x10
c00021ab:	89 c1                	mov    ecx,eax
c00021ad:	01 db                	add    ebx,ebx
c00021af:	c1 e0 10             	shl    eax,0x10
c00021b2:	83 e1 01             	and    ecx,0x1
c00021b5:	c1 e8 11             	shr    eax,0x11
c00021b8:	01 cb                	add    ebx,ecx
c00021ba:	0f ba e3 10          	bt     ebx,0x10
c00021be:	73 06                	jae    c00021c6 <gen_numname+0x48>
c00021c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021c6:	4a                   	dec    edx
c00021c7:	75 e2                	jne    c00021ab <gen_numname+0x2d>
c00021c9:	eb d0                	jmp    c000219b <gen_numname+0x1d>
c00021cb:	b8 07 00 00 00       	mov    eax,0x7
c00021d0:	89 d9                	mov    ecx,ebx
c00021d2:	83 e1 0f             	and    ecx,0xf
c00021d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00021d8:	89 fa                	mov    edx,edi
c00021da:	83 ff 39             	cmp    edi,0x39
c00021dd:	76 03                	jbe    c00021e2 <gen_numname+0x64>
c00021df:	8d 51 37             	lea    edx,[ecx+0x37]
c00021e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021e9:	89 da                	mov    edx,ebx
c00021eb:	c1 ea 04             	shr    edx,0x4
c00021ee:	83 fb 0f             	cmp    ebx,0xf
c00021f1:	76 06                	jbe    c00021f9 <gen_numname+0x7b>
c00021f3:	89 c8                	mov    eax,ecx
c00021f5:	89 d3                	mov    ebx,edx
c00021f7:	eb d7                	jmp    c00021d0 <gen_numname+0x52>
c00021f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021fe:	31 d2                	xor    edx,edx
c0002200:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002203:	8d 04 16             	lea    eax,[esi+edx*1]
c0002206:	39 ca                	cmp    edx,ecx
c0002208:	73 19                	jae    c0002223 <gen_numname+0xa5>
c000220a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000220d:	83 f8 20             	cmp    eax,0x20
c0002210:	74 11                	je     c0002223 <gen_numname+0xa5>
c0002212:	e8 58 fc ff ff       	call   c0001e6f <dbc_1st>
c0002217:	85 c0                	test   eax,eax
c0002219:	74 05                	je     c0002220 <gen_numname+0xa2>
c000221b:	39 d3                	cmp    ebx,edx
c000221d:	74 04                	je     c0002223 <gen_numname+0xa5>
c000221f:	42                   	inc    edx
c0002220:	42                   	inc    edx
c0002221:	eb e0                	jmp    c0002203 <gen_numname+0x85>
c0002223:	b0 20                	mov    al,0x20
c0002225:	83 f9 07             	cmp    ecx,0x7
c0002228:	77 05                	ja     c000222f <gen_numname+0xb1>
c000222a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000222e:	41                   	inc    ecx
c000222f:	42                   	inc    edx
c0002230:	83 fa 07             	cmp    edx,0x7
c0002233:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002237:	76 ea                	jbe    c0002223 <gen_numname+0xa5>
c0002239:	83 c4 10             	add    esp,0x10
c000223c:	5b                   	pop    ebx
c000223d:	5e                   	pop    esi
c000223e:	5f                   	pop    edi
c000223f:	c3                   	ret    

c0002240 <sum_sfn>:
c0002240:	53                   	push   ebx
c0002241:	31 c9                	xor    ecx,ecx
c0002243:	31 db                	xor    ebx,ebx
c0002245:	0f b6 d1             	movzx  edx,cl
c0002248:	d1 ea                	shr    edx,1
c000224a:	c1 e1 07             	shl    ecx,0x7
c000224d:	09 ca                	or     edx,ecx
c000224f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002252:	01 ca                	add    edx,ecx
c0002254:	43                   	inc    ebx
c0002255:	88 d1                	mov    cl,dl
c0002257:	83 fb 0b             	cmp    ebx,0xb
c000225a:	75 e9                	jne    c0002245 <sum_sfn+0x5>
c000225c:	88 d0                	mov    al,dl
c000225e:	5b                   	pop    ebx
c000225f:	c3                   	ret    

c0002260 <get_ldnumber>:
c0002260:	55                   	push   ebp
c0002261:	57                   	push   edi
c0002262:	56                   	push   esi
c0002263:	83 ce ff             	or     esi,0xffffffff
c0002266:	53                   	push   ebx
c0002267:	8b 10                	mov    edx,DWORD PTR [eax]
c0002269:	85 d2                	test   edx,edx
c000226b:	74 39                	je     c00022a6 <get_ldnumber+0x46>
c000226d:	89 c5                	mov    ebp,eax
c000226f:	89 d1                	mov    ecx,edx
c0002271:	41                   	inc    ecx
c0002272:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002276:	80 79 ff 1f          	cmp    BYTE PTR [ecx-0x1],0x1f
c000227a:	76 05                	jbe    c0002281 <get_ldnumber+0x21>
c000227c:	83 fb 3a             	cmp    ebx,0x3a
c000227f:	75 f0                	jne    c0002271 <get_ldnumber+0x11>
c0002281:	31 f6                	xor    esi,esi
c0002283:	83 fb 3a             	cmp    ebx,0x3a
c0002286:	75 1e                	jne    c00022a6 <get_ldnumber+0x46>
c0002288:	8a 1a                	mov    bl,BYTE PTR [edx]
c000228a:	83 ce ff             	or     esi,0xffffffff
c000228d:	8d 7b d0             	lea    edi,[ebx-0x30]
c0002290:	89 f8                	mov    eax,edi
c0002292:	3c 09                	cmp    al,0x9
c0002294:	77 10                	ja     c00022a6 <get_ldnumber+0x46>
c0002296:	83 c2 02             	add    edx,0x2
c0002299:	39 d1                	cmp    ecx,edx
c000229b:	75 09                	jne    c00022a6 <get_ldnumber+0x46>
c000229d:	0f be f3             	movsx  esi,bl
c00022a0:	83 ee 30             	sub    esi,0x30
c00022a3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022a6:	5b                   	pop    ebx
c00022a7:	89 f0                	mov    eax,esi
c00022a9:	5e                   	pop    esi
c00022aa:	5f                   	pop    edi
c00022ab:	5d                   	pop    ebp
c00022ac:	c3                   	ret    

c00022ad <validate>:
c00022ad:	56                   	push   esi
c00022ae:	89 d6                	mov    esi,edx
c00022b0:	53                   	push   ebx
c00022b1:	85 c0                	test   eax,eax
c00022b3:	51                   	push   ecx
c00022b4:	75 09                	jne    c00022bf <validate+0x12>
c00022b6:	b8 09 00 00 00       	mov    eax,0x9
c00022bb:	31 c9                	xor    ecx,ecx
c00022bd:	eb 2e                	jmp    c00022ed <validate+0x40>
c00022bf:	89 c3                	mov    ebx,eax
c00022c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00022c3:	85 c0                	test   eax,eax
c00022c5:	74 ef                	je     c00022b6 <validate+0x9>
c00022c7:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022ca:	74 ea                	je     c00022b6 <validate+0x9>
c00022cc:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022cf:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022d3:	75 e1                	jne    c00022b6 <validate+0x9>
c00022d5:	83 ec 0c             	sub    esp,0xc
c00022d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022dc:	50                   	push   eax
c00022dd:	e8 bc fa ff ff       	call   c0001d9e <disk_status>
c00022e2:	83 c4 10             	add    esp,0x10
c00022e5:	a8 01                	test   al,0x1
c00022e7:	75 cd                	jne    c00022b6 <validate+0x9>
c00022e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022eb:	31 c0                	xor    eax,eax
c00022ed:	89 0e                	mov    DWORD PTR [esi],ecx
c00022ef:	5a                   	pop    edx
c00022f0:	5b                   	pop    ebx
c00022f1:	5e                   	pop    esi
c00022f2:	c3                   	ret    

c00022f3 <sync_window>:
c00022f3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022f7:	74 58                	je     c0002351 <sync_window+0x5e>
c00022f9:	56                   	push   esi
c00022fa:	8d 70 34             	lea    esi,[eax+0x34]
c00022fd:	53                   	push   ebx
c00022fe:	89 c3                	mov    ebx,eax
c0002300:	51                   	push   ecx
c0002301:	6a 01                	push   0x1
c0002303:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002306:	56                   	push   esi
c0002307:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000230b:	50                   	push   eax
c000230c:	e8 a9 fa ff ff       	call   c0001dba <disk_write>
c0002311:	83 c4 10             	add    esp,0x10
c0002314:	ba 01 00 00 00       	mov    edx,0x1
c0002319:	85 c0                	test   eax,eax
c000231b:	75 2e                	jne    c000234b <sync_window+0x58>
c000231d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002320:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002323:	89 c1                	mov    ecx,eax
c0002325:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002329:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000232c:	39 d1                	cmp    ecx,edx
c000232e:	73 19                	jae    c0002349 <sync_window+0x56>
c0002330:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002334:	75 13                	jne    c0002349 <sync_window+0x56>
c0002336:	6a 01                	push   0x1
c0002338:	01 d0                	add    eax,edx
c000233a:	50                   	push   eax
c000233b:	56                   	push   esi
c000233c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002340:	50                   	push   eax
c0002341:	e8 74 fa ff ff       	call   c0001dba <disk_write>
c0002346:	83 c4 10             	add    esp,0x10
c0002349:	31 d2                	xor    edx,edx
c000234b:	89 d0                	mov    eax,edx
c000234d:	5a                   	pop    edx
c000234e:	5b                   	pop    ebx
c000234f:	5e                   	pop    esi
c0002350:	c3                   	ret    
c0002351:	31 d2                	xor    edx,edx
c0002353:	89 d0                	mov    eax,edx
c0002355:	c3                   	ret    

c0002356 <move_window>:
c0002356:	57                   	push   edi
c0002357:	56                   	push   esi
c0002358:	31 f6                	xor    esi,esi
c000235a:	53                   	push   ebx
c000235b:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000235e:	74 32                	je     c0002392 <move_window+0x3c>
c0002360:	89 c3                	mov    ebx,eax
c0002362:	89 d7                	mov    edi,edx
c0002364:	e8 8a ff ff ff       	call   c00022f3 <sync_window>
c0002369:	89 c6                	mov    esi,eax
c000236b:	85 c0                	test   eax,eax
c000236d:	75 23                	jne    c0002392 <move_window+0x3c>
c000236f:	6a 01                	push   0x1
c0002371:	8d 43 34             	lea    eax,[ebx+0x34]
c0002374:	57                   	push   edi
c0002375:	50                   	push   eax
c0002376:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000237a:	50                   	push   eax
c000237b:	e8 24 fa ff ff       	call   c0001da4 <disk_read>
c0002380:	83 c4 10             	add    esp,0x10
c0002383:	85 c0                	test   eax,eax
c0002385:	74 08                	je     c000238f <move_window+0x39>
c0002387:	be 01 00 00 00       	mov    esi,0x1
c000238c:	83 cf ff             	or     edi,0xffffffff
c000238f:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002392:	5b                   	pop    ebx
c0002393:	89 f0                	mov    eax,esi
c0002395:	5e                   	pop    esi
c0002396:	5f                   	pop    edi
c0002397:	c3                   	ret    

c0002398 <check_fs>:
c0002398:	53                   	push   ebx
c0002399:	89 c3                	mov    ebx,eax
c000239b:	83 ec 08             	sub    esp,0x8
c000239e:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023a2:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023a9:	e8 a8 ff ff ff       	call   c0002356 <move_window>
c00023ae:	ba 04 00 00 00       	mov    edx,0x4
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 68                	jne    c000241f <check_fs+0x87>
c00023b7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023bd:	e8 2d fa ff ff       	call   c0001def <ld_word>
c00023c2:	ba 03 00 00 00       	mov    edx,0x3
c00023c7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023cb:	75 52                	jne    c000241f <check_fs+0x87>
c00023cd:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023d0:	8d 50 18             	lea    edx,[eax+0x18]
c00023d3:	80 fa 01             	cmp    dl,0x1
c00023d6:	76 09                	jbe    c00023e1 <check_fs+0x49>
c00023d8:	ba 02 00 00 00       	mov    edx,0x2
c00023dd:	3c eb                	cmp    al,0xeb
c00023df:	75 3e                	jne    c000241f <check_fs+0x87>
c00023e1:	ba e4 15 02 c0       	mov    edx,0xc00215e4
c00023e6:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023e9:	b9 03 00 00 00       	mov    ecx,0x3
c00023ee:	e8 48 fa ff ff       	call   c0001e3b <mem_cmp>
c00023f3:	31 d2                	xor    edx,edx
c00023f5:	85 c0                	test   eax,eax
c00023f7:	74 26                	je     c000241f <check_fs+0x87>
c00023f9:	ba bc f3 01 c0       	mov    edx,0xc001f3bc
c00023fe:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002404:	b9 05 00 00 00       	mov    ecx,0x5
c0002409:	e8 2d fa ff ff       	call   c0001e3b <mem_cmp>
c000240e:	31 d2                	xor    edx,edx
c0002410:	85 c0                	test   eax,eax
c0002412:	74 0b                	je     c000241f <check_fs+0x87>
c0002414:	31 d2                	xor    edx,edx
c0002416:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000241a:	0f 95 c2             	setne  dl
c000241d:	01 d2                	add    edx,edx
c000241f:	83 c4 08             	add    esp,0x8
c0002422:	89 d0                	mov    eax,edx
c0002424:	5b                   	pop    ebx
c0002425:	c3                   	ret    

c0002426 <find_volume>:
c0002426:	55                   	push   ebp
c0002427:	57                   	push   edi
c0002428:	89 c7                	mov    edi,eax
c000242a:	56                   	push   esi
c000242b:	89 d6                	mov    esi,edx
c000242d:	53                   	push   ebx
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 ec 2c             	sub    esp,0x2c
c0002433:	e8 60 ff ff ff       	call   c0002398 <check_fs>
c0002438:	85 f6                	test   esi,esi
c000243a:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c000243f:	83 f8 02             	cmp    eax,0x2
c0002442:	74 09                	je     c000244d <find_volume+0x27>
c0002444:	77 5f                	ja     c00024a5 <find_volume+0x7f>
c0002446:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c000244b:	75 58                	jne    c00024a5 <find_volume+0x7f>
c000244d:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c0002453:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c0002459:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000245d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002461:	89 e8                	mov    eax,ebp
c0002463:	83 c5 10             	add    ebp,0x10
c0002466:	e8 91 f9 ff ff       	call   c0001dfc <ld_dword>
c000246b:	83 c3 04             	add    ebx,0x4
c000246e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0002471:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002475:	75 ea                	jne    c0002461 <find_volume+0x3b>
c0002477:	83 fe 01             	cmp    esi,0x1
c000247a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c000247f:	83 d6 ff             	adc    esi,0xffffffff
c0002482:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002486:	b8 03 00 00 00       	mov    eax,0x3
c000248b:	85 d2                	test   edx,edx
c000248d:	74 07                	je     c0002496 <find_volume+0x70>
c000248f:	89 f8                	mov    eax,edi
c0002491:	e8 02 ff ff ff       	call   c0002398 <check_fs>
c0002496:	83 f8 01             	cmp    eax,0x1
c0002499:	76 0a                	jbe    c00024a5 <find_volume+0x7f>
c000249b:	85 db                	test   ebx,ebx
c000249d:	74 06                	je     c00024a5 <find_volume+0x7f>
c000249f:	46                   	inc    esi
c00024a0:	83 fe 03             	cmp    esi,0x3
c00024a3:	76 dd                	jbe    c0002482 <find_volume+0x5c>
c00024a5:	83 c4 2c             	add    esp,0x2c
c00024a8:	5b                   	pop    ebx
c00024a9:	5e                   	pop    esi
c00024aa:	5f                   	pop    edi
c00024ab:	5d                   	pop    ebp
c00024ac:	c3                   	ret    

c00024ad <mount_volume>:
c00024ad:	55                   	push   ebp
c00024ae:	89 d5                	mov    ebp,edx
c00024b0:	57                   	push   edi
c00024b1:	89 cf                	mov    edi,ecx
c00024b3:	56                   	push   esi
c00024b4:	53                   	push   ebx
c00024b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ba:	83 ec 1c             	sub    esp,0x1c
c00024bd:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024c3:	e8 98 fd ff ff       	call   c0002260 <get_ldnumber>
c00024c8:	85 c0                	test   eax,eax
c00024ca:	0f 88 c4 02 00 00    	js     c0002794 <mount_volume+0x2e7>
c00024d0:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024d7:	89 c2                	mov    edx,eax
c00024d9:	bb 0c 00 00 00       	mov    ebx,0xc
c00024de:	85 f6                	test   esi,esi
c00024e0:	0f 84 ae 02 00 00    	je     c0002794 <mount_volume+0x2e7>
c00024e6:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024e9:	83 e7 fe             	and    edi,0xfffffffe
c00024ec:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024ef:	74 3a                	je     c000252b <mount_volume+0x7e>
c00024f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00024f4:	83 ec 0c             	sub    esp,0xc
c00024f7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024fb:	50                   	push   eax
c00024fc:	e8 9d f8 ff ff       	call   c0001d9e <disk_status>
c0002501:	83 c4 10             	add    esp,0x10
c0002504:	a8 01                	test   al,0x1
c0002506:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0002509:	75 20                	jne    c000252b <mount_volume+0x7e>
c000250b:	31 db                	xor    ebx,ebx
c000250d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002513:	0f 84 7b 02 00 00    	je     c0002794 <mount_volume+0x2e7>
c0002519:	a8 04                	test   al,0x4
c000251b:	0f 84 73 02 00 00    	je     c0002794 <mount_volume+0x2e7>
c0002521:	bb 0a 00 00 00       	mov    ebx,0xa
c0002526:	e9 69 02 00 00       	jmp    c0002794 <mount_volume+0x2e7>
c000252b:	83 ec 0c             	sub    esp,0xc
c000252e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002531:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002534:	bb 03 00 00 00       	mov    ebx,0x3
c0002539:	0f b6 c2             	movzx  eax,dl
c000253c:	50                   	push   eax
c000253d:	e8 5f f8 ff ff       	call   c0001da1 <disk_initialize>
c0002542:	83 c4 10             	add    esp,0x10
c0002545:	a8 01                	test   al,0x1
c0002547:	0f 85 47 02 00 00    	jne    c0002794 <mount_volume+0x2e7>
c000254d:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002553:	74 04                	je     c0002559 <mount_volume+0xac>
c0002555:	a8 04                	test   al,0x4
c0002557:	75 c8                	jne    c0002521 <mount_volume+0x74>
c0002559:	31 d2                	xor    edx,edx
c000255b:	89 f0                	mov    eax,esi
c000255d:	e8 c4 fe ff ff       	call   c0002426 <find_volume>
c0002562:	bb 01 00 00 00       	mov    ebx,0x1
c0002567:	83 f8 04             	cmp    eax,0x4
c000256a:	0f 84 24 02 00 00    	je     c0002794 <mount_volume+0x2e7>
c0002570:	83 f8 01             	cmp    eax,0x1
c0002573:	76 0a                	jbe    c000257f <mount_volume+0xd2>
c0002575:	bb 0d 00 00 00       	mov    ebx,0xd
c000257a:	e9 15 02 00 00       	jmp    c0002794 <mount_volume+0x2e7>
c000257f:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002582:	e8 68 f8 ff ff       	call   c0001def <ld_word>
c0002587:	66 3d 00 02          	cmp    ax,0x200
c000258b:	75 e8                	jne    c0002575 <mount_volume+0xc8>
c000258d:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002590:	e8 5a f8 ff ff       	call   c0001def <ld_word>
c0002595:	0f b7 c0             	movzx  eax,ax
c0002598:	89 04 24             	mov    DWORD PTR [esp],eax
c000259b:	85 c0                	test   eax,eax
c000259d:	75 0b                	jne    c00025aa <mount_volume+0xfd>
c000259f:	8d 46 58             	lea    eax,[esi+0x58]
c00025a2:	e8 55 f8 ff ff       	call   c0001dfc <ld_dword>
c00025a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00025aa:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00025b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00025b4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025b7:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c00025ba:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025be:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025c5:	48                   	dec    eax
c00025c6:	3c 01                	cmp    al,0x1
c00025c8:	77 ab                	ja     c0002575 <mount_volume+0xc8>
c00025ca:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025ce:	89 c3                	mov    ebx,eax
c00025d0:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025d4:	66 85 c0             	test   ax,ax
c00025d7:	74 9c                	je     c0002575 <mount_volume+0xc8>
c00025d9:	8d 40 ff             	lea    eax,[eax-0x1]
c00025dc:	85 d8                	test   eax,ebx
c00025de:	75 95                	jne    c0002575 <mount_volume+0xc8>
c00025e0:	8d 46 45             	lea    eax,[esi+0x45]
c00025e3:	e8 07 f8 ff ff       	call   c0001def <ld_word>
c00025e8:	89 c7                	mov    edi,eax
c00025ea:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025ee:	a8 0f                	test   al,0xf
c00025f0:	75 83                	jne    c0002575 <mount_volume+0xc8>
c00025f2:	8d 46 47             	lea    eax,[esi+0x47]
c00025f5:	e8 f5 f7 ff ff       	call   c0001def <ld_word>
c00025fa:	0f b7 e8             	movzx  ebp,ax
c00025fd:	85 ed                	test   ebp,ebp
c00025ff:	75 0a                	jne    c000260b <mount_volume+0x15e>
c0002601:	8d 46 54             	lea    eax,[esi+0x54]
c0002604:	e8 f3 f7 ff ff       	call   c0001dfc <ld_dword>
c0002609:	89 c5                	mov    ebp,eax
c000260b:	8d 46 42             	lea    eax,[esi+0x42]
c000260e:	e8 dc f7 ff ff       	call   c0001def <ld_word>
c0002613:	0f b7 c8             	movzx  ecx,ax
c0002616:	85 c9                	test   ecx,ecx
c0002618:	0f 84 57 ff ff ff    	je     c0002575 <mount_volume+0xc8>
c000261e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002623:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000262b:	0f b7 c7             	movzx  eax,di
c000262e:	c1 e8 04             	shr    eax,0x4
c0002631:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002635:	01 c8                	add    eax,ecx
c0002637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000263b:	39 c5                	cmp    ebp,eax
c000263d:	0f 82 32 ff ff ff    	jb     c0002575 <mount_volume+0xc8>
c0002643:	29 c5                	sub    ebp,eax
c0002645:	31 d2                	xor    edx,edx
c0002647:	89 e8                	mov    eax,ebp
c0002649:	f7 f3                	div    ebx
c000264b:	39 dd                	cmp    ebp,ebx
c000264d:	0f 82 22 ff ff ff    	jb     c0002575 <mount_volume+0xc8>
c0002653:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002658:	0f 87 17 ff ff ff    	ja     c0002575 <mount_volume+0xc8>
c000265e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002663:	0f 86 1c 01 00 00    	jbe    c0002785 <mount_volume+0x2d8>
c0002669:	bb 03 00 00 00       	mov    ebx,0x3
c000266e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002672:	8d 68 02             	lea    ebp,[eax+0x2]
c0002675:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002679:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000267d:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002680:	01 c8                	add    eax,ecx
c0002682:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002685:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002688:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000268b:	83 fb 03             	cmp    ebx,0x3
c000268e:	75 23                	jne    c00026b3 <mount_volume+0x206>
c0002690:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002693:	e8 57 f7 ff ff       	call   c0001def <ld_word>
c0002698:	09 c7                	or     edi,eax
c000269a:	66 85 ff             	test   di,di
c000269d:	0f 85 d2 fe ff ff    	jne    c0002575 <mount_volume+0xc8>
c00026a3:	c1 e5 02             	shl    ebp,0x2
c00026a6:	8d 46 60             	lea    eax,[esi+0x60]
c00026a9:	e8 4e f7 ff ff       	call   c0001dfc <ld_dword>
c00026ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026b1:	eb 24                	jmp    c00026d7 <mount_volume+0x22a>
c00026b3:	66 85 ff             	test   di,di
c00026b6:	0f 84 b9 fe ff ff    	je     c0002575 <mount_volume+0xc8>
c00026bc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026c0:	83 fb 02             	cmp    ebx,0x2
c00026c3:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026c6:	75 04                	jne    c00026cc <mount_volume+0x21f>
c00026c8:	01 ed                	add    ebp,ebp
c00026ca:	eb 0b                	jmp    c00026d7 <mount_volume+0x22a>
c00026cc:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026d0:	83 e5 01             	and    ebp,0x1
c00026d3:	d1 e8                	shr    eax,1
c00026d5:	01 c5                	add    ebp,eax
c00026d7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026dd:	c1 ed 09             	shr    ebp,0x9
c00026e0:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026e3:	0f 87 8c fe ff ff    	ja     c0002575 <mount_volume+0xc8>
c00026e9:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026f0:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026f7:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026fb:	83 fb 03             	cmp    ebx,0x3
c00026fe:	75 6e                	jne    c000276e <mount_volume+0x2c1>
c0002700:	8d 46 64             	lea    eax,[esi+0x64]
c0002703:	e8 e7 f6 ff ff       	call   c0001def <ld_word>
c0002708:	66 48                	dec    ax
c000270a:	75 62                	jne    c000276e <mount_volume+0x2c1>
c000270c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0002710:	89 f0                	mov    eax,esi
c0002712:	42                   	inc    edx
c0002713:	e8 3e fc ff ff       	call   c0002356 <move_window>
c0002718:	85 c0                	test   eax,eax
c000271a:	75 52                	jne    c000276e <mount_volume+0x2c1>
c000271c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002720:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002726:	e8 c4 f6 ff ff       	call   c0001def <ld_word>
c000272b:	66 3d 55 aa          	cmp    ax,0xaa55
c000272f:	75 3d                	jne    c000276e <mount_volume+0x2c1>
c0002731:	8d 46 34             	lea    eax,[esi+0x34]
c0002734:	e8 c3 f6 ff ff       	call   c0001dfc <ld_dword>
c0002739:	3d 52 52 61 41       	cmp    eax,0x41615252
c000273e:	75 2e                	jne    c000276e <mount_volume+0x2c1>
c0002740:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002746:	e8 b1 f6 ff ff       	call   c0001dfc <ld_dword>
c000274b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002750:	75 1c                	jne    c000276e <mount_volume+0x2c1>
c0002752:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002758:	e8 9f f6 ff ff       	call   c0001dfc <ld_dword>
c000275d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002760:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002766:	e8 91 f6 ff ff       	call   c0001dfc <ld_dword>
c000276b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000276e:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002774:	88 1e                	mov    BYTE PTR [esi],bl
c0002776:	40                   	inc    eax
c0002777:	31 db                	xor    ebx,ebx
c0002779:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c000277f:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002783:	eb 0f                	jmp    c0002794 <mount_volume+0x2e7>
c0002785:	3d f6 0f 00 00       	cmp    eax,0xff6
c000278a:	19 db                	sbb    ebx,ebx
c000278c:	83 c3 02             	add    ebx,0x2
c000278f:	e9 da fe ff ff       	jmp    c000266e <mount_volume+0x1c1>
c0002794:	83 c4 1c             	add    esp,0x1c
c0002797:	89 d8                	mov    eax,ebx
c0002799:	5b                   	pop    ebx
c000279a:	5e                   	pop    esi
c000279b:	5f                   	pop    edi
c000279c:	5d                   	pop    ebp
c000279d:	c3                   	ret    

c000279e <put_fat>:
c000279e:	55                   	push   ebp
c000279f:	bd 02 00 00 00       	mov    ebp,0x2
c00027a4:	57                   	push   edi
c00027a5:	56                   	push   esi
c00027a6:	53                   	push   ebx
c00027a7:	83 ec 1c             	sub    esp,0x1c
c00027aa:	83 fa 01             	cmp    edx,0x1
c00027ad:	0f 86 38 01 00 00    	jbe    c00028eb <put_fat+0x14d>
c00027b3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027b6:	0f 86 2f 01 00 00    	jbe    c00028eb <put_fat+0x14d>
c00027bc:	89 c6                	mov    esi,eax
c00027be:	89 cf                	mov    edi,ecx
c00027c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027c3:	89 d3                	mov    ebx,edx
c00027c5:	83 f8 02             	cmp    eax,0x2
c00027c8:	0f 84 b1 00 00 00    	je     c000287f <put_fat+0xe1>
c00027ce:	83 f8 03             	cmp    eax,0x3
c00027d1:	0f 84 d5 00 00 00    	je     c00028ac <put_fat+0x10e>
c00027d7:	48                   	dec    eax
c00027d8:	0f 85 0d 01 00 00    	jne    c00028eb <put_fat+0x14d>
c00027de:	89 d1                	mov    ecx,edx
c00027e0:	89 f0                	mov    eax,esi
c00027e2:	d1 e9                	shr    ecx,1
c00027e4:	01 d1                	add    ecx,edx
c00027e6:	89 ca                	mov    edx,ecx
c00027e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027ec:	c1 ea 09             	shr    edx,0x9
c00027ef:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027f2:	e8 5f fb ff ff       	call   c0002356 <move_window>
c00027f7:	89 c5                	mov    ebp,eax
c00027f9:	85 c0                	test   eax,eax
c00027fb:	0f 85 ea 00 00 00    	jne    c00028eb <put_fat+0x14d>
c0002801:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002805:	8d 46 34             	lea    eax,[esi+0x34]
c0002808:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000280c:	8d 41 01             	lea    eax,[ecx+0x1]
c000280f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002815:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002819:	83 e3 01             	and    ebx,0x1
c000281c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002820:	89 f8                	mov    eax,edi
c0002822:	74 11                	je     c0002835 <put_fat+0x97>
c0002824:	89 f8                	mov    eax,edi
c0002826:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002828:	c1 e0 04             	shl    eax,0x4
c000282b:	83 e2 0f             	and    edx,0xf
c000282e:	25 f0 0f 00 00       	and    eax,0xff0
c0002833:	09 d0                	or     eax,edx
c0002835:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002839:	88 01                	mov    BYTE PTR [ecx],al
c000283b:	c1 ea 09             	shr    edx,0x9
c000283e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002842:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002845:	89 f0                	mov    eax,esi
c0002847:	e8 0a fb ff ff       	call   c0002356 <move_window>
c000284c:	89 c5                	mov    ebp,eax
c000284e:	85 c0                	test   eax,eax
c0002850:	0f 85 95 00 00 00    	jne    c00028eb <put_fat+0x14d>
c0002856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000285a:	25 ff 01 00 00       	and    eax,0x1ff
c000285f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002863:	85 db                	test   ebx,ebx
c0002865:	74 07                	je     c000286e <put_fat+0xd0>
c0002867:	c1 ef 04             	shr    edi,0x4
c000286a:	89 f9                	mov    ecx,edi
c000286c:	eb 0d                	jmp    c000287b <put_fat+0xdd>
c000286e:	c1 ef 08             	shr    edi,0x8
c0002871:	8a 08                	mov    cl,BYTE PTR [eax]
c0002873:	83 e1 f0             	and    ecx,0xfffffff0
c0002876:	83 e7 0f             	and    edi,0xf
c0002879:	09 f9                	or     ecx,edi
c000287b:	88 08                	mov    BYTE PTR [eax],cl
c000287d:	eb 27                	jmp    c00028a6 <put_fat+0x108>
c000287f:	c1 ea 08             	shr    edx,0x8
c0002882:	89 f0                	mov    eax,esi
c0002884:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002887:	e8 ca fa ff ff       	call   c0002356 <move_window>
c000288c:	89 c5                	mov    ebp,eax
c000288e:	85 c0                	test   eax,eax
c0002890:	75 59                	jne    c00028eb <put_fat+0x14d>
c0002892:	01 db                	add    ebx,ebx
c0002894:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000289a:	0f b7 d7             	movzx  edx,di
c000289d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028a1:	e8 6e f5 ff ff       	call   c0001e14 <st_word>
c00028a6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028aa:	eb 3f                	jmp    c00028eb <put_fat+0x14d>
c00028ac:	c1 ea 07             	shr    edx,0x7
c00028af:	89 f0                	mov    eax,esi
c00028b1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b4:	e8 9d fa ff ff       	call   c0002356 <move_window>
c00028b9:	89 c5                	mov    ebp,eax
c00028bb:	85 c0                	test   eax,eax
c00028bd:	75 2c                	jne    c00028eb <put_fat+0x14d>
c00028bf:	c1 e3 02             	shl    ebx,0x2
c00028c2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028c8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028ce:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028d2:	89 d8                	mov    eax,ebx
c00028d4:	e8 23 f5 ff ff       	call   c0001dfc <ld_dword>
c00028d9:	25 00 00 00 f0       	and    eax,0xf0000000
c00028de:	09 f8                	or     eax,edi
c00028e0:	89 c2                	mov    edx,eax
c00028e2:	89 d8                	mov    eax,ebx
c00028e4:	e8 2f f5 ff ff       	call   c0001e18 <st_dword>
c00028e9:	eb bb                	jmp    c00028a6 <put_fat+0x108>
c00028eb:	83 c4 1c             	add    esp,0x1c
c00028ee:	89 e8                	mov    eax,ebp
c00028f0:	5b                   	pop    ebx
c00028f1:	5e                   	pop    esi
c00028f2:	5f                   	pop    edi
c00028f3:	5d                   	pop    ebp
c00028f4:	c3                   	ret    

c00028f5 <dir_clear>:
c00028f5:	55                   	push   ebp
c00028f6:	57                   	push   edi
c00028f7:	56                   	push   esi
c00028f8:	89 c6                	mov    esi,eax
c00028fa:	53                   	push   ebx
c00028fb:	83 ec 1c             	sub    esp,0x1c
c00028fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002902:	e8 ec f9 ff ff       	call   c00022f3 <sync_window>
c0002907:	85 c0                	test   eax,eax
c0002909:	0f 85 c0 00 00 00    	jne    c00029cf <dir_clear+0xda>
c000290f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002913:	89 f0                	mov    eax,esi
c0002915:	e8 2c f7 ff ff       	call   c0002046 <clst2sect>
c000291a:	31 d2                	xor    edx,edx
c000291c:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000291f:	89 c5                	mov    ebp,eax
c0002921:	b9 00 02 00 00       	mov    ecx,0x200
c0002926:	8d 46 34             	lea    eax,[esi+0x34]
c0002929:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000292d:	e8 fe f4 ff ff       	call   c0001e30 <mem_set>
c0002932:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002936:	c1 e3 09             	shl    ebx,0x9
c0002939:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000293f:	76 1b                	jbe    c000295c <dir_clear+0x67>
c0002941:	bb 00 80 00 00       	mov    ebx,0x8000
c0002946:	eb 14                	jmp    c000295c <dir_clear+0x67>
c0002948:	83 ec 0c             	sub    esp,0xc
c000294b:	53                   	push   ebx
c000294c:	e8 db 32 00 00       	call   c0005c2c <ff_memalloc>
c0002951:	83 c4 10             	add    esp,0x10
c0002954:	89 c7                	mov    edi,eax
c0002956:	85 c0                	test   eax,eax
c0002958:	75 7c                	jne    c00029d6 <dir_clear+0xe1>
c000295a:	d1 eb                	shr    ebx,1
c000295c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002962:	77 e4                	ja     c0002948 <dir_clear+0x53>
c0002964:	31 db                	xor    ebx,ebx
c0002966:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000296a:	39 d8                	cmp    eax,ebx
c000296c:	76 53                	jbe    c00029c1 <dir_clear+0xcc>
c000296e:	6a 01                	push   0x1
c0002970:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002973:	50                   	push   eax
c0002974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002978:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297c:	50                   	push   eax
c000297d:	e8 38 f4 ff ff       	call   c0001dba <disk_write>
c0002982:	83 c4 10             	add    esp,0x10
c0002985:	85 c0                	test   eax,eax
c0002987:	75 38                	jne    c00029c1 <dir_clear+0xcc>
c0002989:	43                   	inc    ebx
c000298a:	eb da                	jmp    c0002966 <dir_clear+0x71>
c000298c:	52                   	push   edx
c000298d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002990:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002994:	50                   	push   eax
c0002995:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002999:	57                   	push   edi
c000299a:	50                   	push   eax
c000299b:	e8 1a f4 ff ff       	call   c0001dba <disk_write>
c00029a0:	83 c4 10             	add    esp,0x10
c00029a3:	85 c0                	test   eax,eax
c00029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a9:	75 0a                	jne    c00029b5 <dir_clear+0xc0>
c00029ab:	01 d3                	add    ebx,edx
c00029ad:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029b1:	39 d8                	cmp    eax,ebx
c00029b3:	77 d7                	ja     c000298c <dir_clear+0x97>
c00029b5:	83 ec 0c             	sub    esp,0xc
c00029b8:	57                   	push   edi
c00029b9:	e8 86 32 00 00       	call   c0005c44 <ff_memfree>
c00029be:	83 c4 10             	add    esp,0x10
c00029c1:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029c5:	39 d8                	cmp    eax,ebx
c00029c7:	0f 95 c0             	setne  al
c00029ca:	0f b6 c0             	movzx  eax,al
c00029cd:	eb 19                	jmp    c00029e8 <dir_clear+0xf3>
c00029cf:	b8 01 00 00 00       	mov    eax,0x1
c00029d4:	eb 12                	jmp    c00029e8 <dir_clear+0xf3>
c00029d6:	89 d9                	mov    ecx,ebx
c00029d8:	31 d2                	xor    edx,edx
c00029da:	e8 51 f4 ff ff       	call   c0001e30 <mem_set>
c00029df:	89 da                	mov    edx,ebx
c00029e1:	c1 ea 09             	shr    edx,0x9
c00029e4:	31 db                	xor    ebx,ebx
c00029e6:	eb c5                	jmp    c00029ad <dir_clear+0xb8>
c00029e8:	83 c4 1c             	add    esp,0x1c
c00029eb:	5b                   	pop    ebx
c00029ec:	5e                   	pop    esi
c00029ed:	5f                   	pop    edi
c00029ee:	5d                   	pop    ebp
c00029ef:	c3                   	ret    

c00029f0 <create_name>:
c00029f0:	55                   	push   ebp
c00029f1:	57                   	push   edi
c00029f2:	89 d7                	mov    edi,edx
c00029f4:	56                   	push   esi
c00029f5:	31 f6                	xor    esi,esi
c00029f7:	53                   	push   ebx
c00029f8:	83 ec 3c             	sub    esp,0x3c
c00029fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029ff:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a01:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a09:	8b 00                	mov    eax,DWORD PTR [eax]
c0002a0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a12:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a16:	e8 5a f4 ff ff       	call   c0001e75 <tchar2uni>
c0002a1b:	89 c3                	mov    ebx,eax
c0002a1d:	83 f8 ff             	cmp    eax,0xffffffff
c0002a20:	75 0a                	jne    c0002a2c <create_name+0x3c>
c0002a22:	b8 06 00 00 00       	mov    eax,0x6
c0002a27:	e9 7d 02 00 00       	jmp    c0002ca9 <create_name+0x2b9>
c0002a2c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a31:	76 0c                	jbe    c0002a3f <create_name+0x4f>
c0002a33:	c1 e8 10             	shr    eax,0x10
c0002a36:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002a3a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a3e:	46                   	inc    esi
c0002a3f:	0f b7 d3             	movzx  edx,bx
c0002a42:	89 d8                	mov    eax,ebx
c0002a44:	83 fa 1f             	cmp    edx,0x1f
c0002a47:	76 30                	jbe    c0002a79 <create_name+0x89>
c0002a49:	83 fa 2f             	cmp    edx,0x2f
c0002a4c:	74 2b                	je     c0002a79 <create_name+0x89>
c0002a4e:	83 fa 5c             	cmp    edx,0x5c
c0002a51:	74 35                	je     c0002a88 <create_name+0x98>
c0002a53:	83 fa 7f             	cmp    edx,0x7f
c0002a56:	77 0e                	ja     c0002a66 <create_name+0x76>
c0002a58:	b8 c2 f3 01 c0       	mov    eax,0xc001f3c2
c0002a5d:	e8 fc f3 ff ff       	call   c0001e5e <chk_chr>
c0002a62:	85 c0                	test   eax,eax
c0002a64:	75 bc                	jne    c0002a22 <create_name+0x32>
c0002a66:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a6c:	77 b4                	ja     c0002a22 <create_name+0x32>
c0002a6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002a72:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a76:	46                   	inc    esi
c0002a77:	eb 99                	jmp    c0002a12 <create_name+0x22>
c0002a79:	66 83 f8 1f          	cmp    ax,0x1f
c0002a7d:	b3 04                	mov    bl,0x4
c0002a7f:	76 1a                	jbe    c0002a9b <create_name+0xab>
c0002a81:	eb 05                	jmp    c0002a88 <create_name+0x98>
c0002a83:	40                   	inc    eax
c0002a84:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a8c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a8f:	83 fa 2f             	cmp    edx,0x2f
c0002a92:	74 ef                	je     c0002a83 <create_name+0x93>
c0002a94:	83 fa 5c             	cmp    edx,0x5c
c0002a97:	74 ea                	je     c0002a83 <create_name+0x93>
c0002a99:	31 db                	xor    ebx,ebx
c0002a9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a9f:	89 07                	mov    DWORD PTR [edi],eax
c0002aa1:	85 f6                	test   esi,esi
c0002aa3:	74 16                	je     c0002abb <create_name+0xcb>
c0002aa5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa9:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002aae:	83 f8 20             	cmp    eax,0x20
c0002ab1:	74 05                	je     c0002ab8 <create_name+0xc8>
c0002ab3:	83 f8 2e             	cmp    eax,0x2e
c0002ab6:	75 03                	jne    c0002abb <create_name+0xcb>
c0002ab8:	4e                   	dec    esi
c0002ab9:	eb e6                	jmp    c0002aa1 <create_name+0xb1>
c0002abb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abf:	31 ff                	xor    edi,edi
c0002ac1:	85 f6                	test   esi,esi
c0002ac3:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002ac9:	0f 84 53 ff ff ff    	je     c0002a22 <create_name+0x32>
c0002acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad3:	8d 57 01             	lea    edx,[edi+0x1]
c0002ad6:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	75 04                	jne    c0002ae3 <create_name+0xf3>
c0002adf:	89 d7                	mov    edi,edx
c0002ae1:	eb ec                	jmp    c0002acf <create_name+0xdf>
c0002ae3:	85 ff                	test   edi,edi
c0002ae5:	75 05                	jne    c0002aec <create_name+0xfc>
c0002ae7:	83 f8 2e             	cmp    eax,0x2e
c0002aea:	75 08                	jne    c0002af4 <create_name+0x104>
c0002aec:	83 cb 03             	or     ebx,0x3
c0002aef:	eb 03                	jmp    c0002af4 <create_name+0x104>
c0002af1:	4e                   	dec    esi
c0002af2:	74 0c                	je     c0002b00 <create_name+0x110>
c0002af4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002af8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002afe:	75 f1                	jne    c0002af1 <create_name+0x101>
c0002b00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b04:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b09:	83 c0 20             	add    eax,0x20
c0002b0c:	ba 20 00 00 00       	mov    edx,0x20
c0002b11:	e8 1a f3 ff ff       	call   c0001e30 <mem_set>
c0002b16:	31 ed                	xor    ebp,ebp
c0002b18:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b20:	31 c9                	xor    ecx,ecx
c0002b22:	8d 47 01             	lea    eax,[edi+0x1]
c0002b25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b2d:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b31:	89 c7                	mov    edi,eax
c0002b33:	85 c0                	test   eax,eax
c0002b35:	0f 84 1f 01 00 00    	je     c0002c5a <create_name+0x26a>
c0002b3b:	83 f8 20             	cmp    eax,0x20
c0002b3e:	74 0b                	je     c0002b4b <create_name+0x15b>
c0002b40:	83 f8 2e             	cmp    eax,0x2e
c0002b43:	75 0f                	jne    c0002b54 <create_name+0x164>
c0002b45:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b49:	74 09                	je     c0002b54 <create_name+0x164>
c0002b4b:	83 cb 03             	or     ebx,0x3
c0002b4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b52:	eb ce                	jmp    c0002b22 <create_name+0x132>
c0002b54:	3b 6c 24 14          	cmp    ebp,DWORD PTR [esp+0x14]
c0002b58:	73 06                	jae    c0002b60 <create_name+0x170>
c0002b5a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b5e:	75 38                	jne    c0002b98 <create_name+0x1a8>
c0002b60:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b65:	75 08                	jne    c0002b6f <create_name+0x17f>
c0002b67:	83 cb 03             	or     ebx,0x3
c0002b6a:	e9 eb 00 00 00       	jmp    c0002c5a <create_name+0x26a>
c0002b6f:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b73:	74 0d                	je     c0002b82 <create_name+0x192>
c0002b75:	83 cb 03             	or     ebx,0x3
c0002b78:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b7c:	0f 87 d8 00 00 00    	ja     c0002c5a <create_name+0x26a>
c0002b82:	c1 e1 02             	shl    ecx,0x2
c0002b85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002b89:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002b91:	bd 08 00 00 00       	mov    ebp,0x8
c0002b96:	eb b6                	jmp    c0002b4e <create_name+0x15e>
c0002b98:	0f b7 c7             	movzx  eax,di
c0002b9b:	83 f8 7f             	cmp    eax,0x7f
c0002b9e:	76 6a                	jbe    c0002c0a <create_name+0x21a>
c0002ba0:	88 4c 24 1f          	mov    BYTE PTR [esp+0x1f],cl
c0002ba4:	89 d9                	mov    ecx,ebx
c0002ba6:	83 c9 02             	or     ecx,0x2
c0002ba9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bad:	52                   	push   edx
c0002bae:	52                   	push   edx
c0002baf:	68 b5 01 00 00       	push   0x1b5
c0002bb4:	50                   	push   eax
c0002bb5:	e8 a2 30 00 00       	call   c0005c5c <ff_uni2oem>
c0002bba:	83 c4 10             	add    esp,0x10
c0002bbd:	89 c7                	mov    edi,eax
c0002bbf:	a8 80                	test   al,0x80
c0002bc1:	8a 4c 24 1f          	mov    cl,BYTE PTR [esp+0x1f]
c0002bc5:	74 0c                	je     c0002bd3 <create_name+0x1e3>
c0002bc7:	83 e7 7f             	and    edi,0x7f
c0002bca:	0f b6 bf 80 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0b80]
c0002bd1:	eb 2e                	jmp    c0002c01 <create_name+0x211>
c0002bd3:	0f b7 c0             	movzx  eax,ax
c0002bd6:	3d ff 00 00 00       	cmp    eax,0xff
c0002bdb:	76 24                	jbe    c0002c01 <create_name+0x211>
c0002bdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002be1:	4a                   	dec    edx
c0002be2:	39 ea                	cmp    edx,ebp
c0002be4:	77 0c                	ja     c0002bf2 <create_name+0x202>
c0002be6:	83 cb 03             	or     ebx,0x3
c0002be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002bed:	e9 5c ff ff ff       	jmp    c0002b4e <create_name+0x15e>
c0002bf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bf6:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bfa:	88 64 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],ah
c0002bfe:	45                   	inc    ebp
c0002bff:	eb 49                	jmp    c0002c4a <create_name+0x25a>
c0002c01:	66 85 ff             	test   di,di
c0002c04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c08:	74 19                	je     c0002c23 <create_name+0x233>
c0002c0a:	0f b7 d7             	movzx  edx,di
c0002c0d:	b8 cb f3 01 c0       	mov    eax,0xc001f3cb
c0002c12:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0002c16:	e8 43 f2 ff ff       	call   c0001e5e <chk_chr>
c0002c1b:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0002c1f:	85 c0                	test   eax,eax
c0002c21:	74 0a                	je     c0002c2d <create_name+0x23d>
c0002c23:	83 cb 03             	or     ebx,0x3
c0002c26:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c2b:	eb 1d                	jmp    c0002c4a <create_name+0x25a>
c0002c2d:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c30:	66 83 f8 19          	cmp    ax,0x19
c0002c34:	77 05                	ja     c0002c3b <create_name+0x24b>
c0002c36:	83 c9 02             	or     ecx,0x2
c0002c39:	eb 0f                	jmp    c0002c4a <create_name+0x25a>
c0002c3b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c3e:	66 83 f8 19          	cmp    ax,0x19
c0002c42:	77 06                	ja     c0002c4a <create_name+0x25a>
c0002c44:	83 c9 01             	or     ecx,0x1
c0002c47:	83 ef 20             	sub    edi,0x20
c0002c4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4e:	89 f8                	mov    eax,edi
c0002c50:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c54:	45                   	inc    ebp
c0002c55:	e9 f4 fe ff ff       	jmp    c0002b4e <create_name+0x15e>
c0002c5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c5e:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c62:	75 04                	jne    c0002c68 <create_name+0x278>
c0002c64:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c68:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c6d:	75 03                	jne    c0002c72 <create_name+0x282>
c0002c6f:	c1 e1 02             	shl    ecx,0x2
c0002c72:	89 c8                	mov    eax,ecx
c0002c74:	83 e0 0c             	and    eax,0xc
c0002c77:	83 f8 0c             	cmp    eax,0xc
c0002c7a:	74 0a                	je     c0002c86 <create_name+0x296>
c0002c7c:	89 c8                	mov    eax,ecx
c0002c7e:	83 e0 03             	and    eax,0x3
c0002c81:	83 f8 03             	cmp    eax,0x3
c0002c84:	75 05                	jne    c0002c8b <create_name+0x29b>
c0002c86:	83 cb 02             	or     ebx,0x2
c0002c89:	eb 15                	jmp    c0002ca0 <create_name+0x2b0>
c0002c8b:	f6 c3 02             	test   bl,0x2
c0002c8e:	75 10                	jne    c0002ca0 <create_name+0x2b0>
c0002c90:	f6 c1 01             	test   cl,0x1
c0002c93:	74 03                	je     c0002c98 <create_name+0x2a8>
c0002c95:	83 cb 10             	or     ebx,0x10
c0002c98:	80 e1 04             	and    cl,0x4
c0002c9b:	74 03                	je     c0002ca0 <create_name+0x2b0>
c0002c9d:	83 cb 08             	or     ebx,0x8
c0002ca0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ca4:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002ca7:	31 c0                	xor    eax,eax
c0002ca9:	83 c4 3c             	add    esp,0x3c
c0002cac:	5b                   	pop    ebx
c0002cad:	5e                   	pop    esi
c0002cae:	5f                   	pop    edi
c0002caf:	5d                   	pop    ebp
c0002cb0:	c3                   	ret    

c0002cb1 <cmp_lfn>:
c0002cb1:	55                   	push   ebp
c0002cb2:	57                   	push   edi
c0002cb3:	89 d7                	mov    edi,edx
c0002cb5:	56                   	push   esi
c0002cb6:	53                   	push   ebx
c0002cb7:	83 ec 1c             	sub    esp,0x1c
c0002cba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cc1:	e8 29 f1 ff ff       	call   c0001def <ld_word>
c0002cc6:	66 85 c0             	test   ax,ax
c0002cc9:	74 07                	je     c0002cd2 <cmp_lfn+0x21>
c0002ccb:	31 c0                	xor    eax,eax
c0002ccd:	e9 a1 00 00 00       	jmp    c0002d73 <cmp_lfn+0xc2>
c0002cd2:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cd4:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd9:	83 e3 3f             	and    ebx,0x3f
c0002cdc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ce4:	4b                   	dec    ebx
c0002ce5:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cec:	0f b6 80 00 f5 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b00]
c0002cf3:	01 f8                	add    eax,edi
c0002cf5:	e8 f5 f0 ff ff       	call   c0001def <ld_word>
c0002cfa:	66 85 ed             	test   bp,bp
c0002cfd:	89 c6                	mov    esi,eax
c0002cff:	74 3c                	je     c0002d3d <cmp_lfn+0x8c>
c0002d01:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d07:	77 c2                	ja     c0002ccb <cmp_lfn+0x1a>
c0002d09:	83 ec 0c             	sub    esp,0xc
c0002d0c:	0f b7 c0             	movzx  eax,ax
c0002d0f:	50                   	push   eax
c0002d10:	e8 5b 30 00 00       	call   c0005d70 <ff_wtoupper>
c0002d15:	89 c5                	mov    ebp,eax
c0002d17:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d22:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d26:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d29:	e8 42 30 00 00       	call   c0005d70 <ff_wtoupper>
c0002d2e:	83 c4 10             	add    esp,0x10
c0002d31:	39 c5                	cmp    ebp,eax
c0002d33:	75 96                	jne    c0002ccb <cmp_lfn+0x1a>
c0002d35:	89 f5                	mov    ebp,esi
c0002d37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d3b:	eb 0b                	jmp    c0002d48 <cmp_lfn+0x97>
c0002d3d:	0f b7 c8             	movzx  ecx,ax
c0002d40:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d46:	75 83                	jne    c0002ccb <cmp_lfn+0x1a>
c0002d48:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d4c:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d51:	75 95                	jne    c0002ce8 <cmp_lfn+0x37>
c0002d53:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d56:	74 16                	je     c0002d6e <cmp_lfn+0xbd>
c0002d58:	66 85 ed             	test   bp,bp
c0002d5b:	74 11                	je     c0002d6e <cmp_lfn+0xbd>
c0002d5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d61:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d66:	0f 94 c0             	sete   al
c0002d69:	0f b6 c0             	movzx  eax,al
c0002d6c:	eb 05                	jmp    c0002d73 <cmp_lfn+0xc2>
c0002d6e:	b8 01 00 00 00       	mov    eax,0x1
c0002d73:	83 c4 1c             	add    esp,0x1c
c0002d76:	5b                   	pop    ebx
c0002d77:	5e                   	pop    esi
c0002d78:	5f                   	pop    edi
c0002d79:	5d                   	pop    ebp
c0002d7a:	c3                   	ret    

c0002d7b <sync_fs>:
c0002d7b:	56                   	push   esi
c0002d7c:	53                   	push   ebx
c0002d7d:	53                   	push   ebx
c0002d7e:	89 c3                	mov    ebx,eax
c0002d80:	e8 6e f5 ff ff       	call   c00022f3 <sync_window>
c0002d85:	85 c0                	test   eax,eax
c0002d87:	0f 85 9a 00 00 00    	jne    c0002e27 <sync_fs+0xac>
c0002d8d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d90:	75 7b                	jne    c0002e0d <sync_fs+0x92>
c0002d92:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d96:	75 75                	jne    c0002e0d <sync_fs+0x92>
c0002d98:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9b:	b9 00 02 00 00       	mov    ecx,0x200
c0002da0:	31 d2                	xor    edx,edx
c0002da2:	89 f0                	mov    eax,esi
c0002da4:	e8 87 f0 ff ff       	call   c0001e30 <mem_set>
c0002da9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002daf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002db4:	e8 5b f0 ff ff       	call   c0001e14 <st_word>
c0002db9:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dbe:	89 f0                	mov    eax,esi
c0002dc0:	e8 53 f0 ff ff       	call   c0001e18 <st_dword>
c0002dc5:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dcb:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dd0:	e8 43 f0 ff ff       	call   c0001e18 <st_dword>
c0002dd5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd8:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dde:	e8 35 f0 ff ff       	call   c0001e18 <st_dword>
c0002de3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de6:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002dec:	e8 27 f0 ff ff       	call   c0001e18 <st_dword>
c0002df1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df4:	6a 01                	push   0x1
c0002df6:	40                   	inc    eax
c0002df7:	50                   	push   eax
c0002df8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002dfb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dff:	56                   	push   esi
c0002e00:	50                   	push   eax
c0002e01:	e8 b4 ef ff ff       	call   c0001dba <disk_write>
c0002e06:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e0a:	83 c4 10             	add    esp,0x10
c0002e0d:	51                   	push   ecx
c0002e0e:	6a 00                	push   0x0
c0002e10:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e14:	6a 00                	push   0x0
c0002e16:	50                   	push   eax
c0002e17:	e8 b4 ef ff ff       	call   c0001dd0 <disk_ioctl>
c0002e1c:	83 c4 10             	add    esp,0x10
c0002e1f:	85 c0                	test   eax,eax
c0002e21:	0f 95 c0             	setne  al
c0002e24:	0f b6 c0             	movzx  eax,al
c0002e27:	5a                   	pop    edx
c0002e28:	5b                   	pop    ebx
c0002e29:	5e                   	pop    esi
c0002e2a:	c3                   	ret    

c0002e2b <create_partition>:
c0002e2b:	55                   	push   ebp
c0002e2c:	57                   	push   edi
c0002e2d:	56                   	push   esi
c0002e2e:	53                   	push   ebx
c0002e2f:	83 ec 40             	sub    esp,0x40
c0002e32:	0f b6 c0             	movzx  eax,al
c0002e35:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e39:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e41:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e45:	50                   	push   eax
c0002e46:	6a 01                	push   0x1
c0002e48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e4c:	e8 7f ef ff ff       	call   c0001dd0 <disk_ioctl>
c0002e51:	83 c4 10             	add    esp,0x10
c0002e54:	85 c0                	test   eax,eax
c0002e56:	0f 85 73 01 00 00    	jne    c0002fcf <create_partition+0x1a4>
c0002e5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e60:	b9 05 00 00 00       	mov    ecx,0x5
c0002e65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e69:	be 08 00 00 00       	mov    esi,0x8
c0002e6e:	89 f0                	mov    eax,esi
c0002e70:	31 d2                	xor    edx,edx
c0002e72:	0f b6 d8             	movzx  ebx,al
c0002e75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e79:	f7 f3                	div    ebx
c0002e7b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e80:	76 0a                	jbe    c0002e8c <create_partition+0x61>
c0002e82:	d1 e6                	shl    esi,1
c0002e84:	49                   	dec    ecx
c0002e85:	75 e7                	jne    c0002e6e <create_partition+0x43>
c0002e87:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e8c:	b9 00 02 00 00       	mov    ecx,0x200
c0002e91:	31 d2                	xor    edx,edx
c0002e93:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e97:	e8 94 ef ff ff       	call   c0001e30 <mem_set>
c0002e9c:	b9 64 00 00 00       	mov    ecx,0x64
c0002ea1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	f7 f1                	div    ecx
c0002ea9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ead:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb1:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ebe:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ec4:	89 f0                	mov    eax,esi
c0002ec6:	0f b6 c0             	movzx  eax,al
c0002ec9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ecd:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ed2:	0f 96 c0             	setbe  al
c0002ed5:	31 d2                	xor    edx,edx
c0002ed7:	85 c9                	test   ecx,ecx
c0002ed9:	0f 95 c2             	setne  dl
c0002edc:	85 c2                	test   edx,eax
c0002ede:	0f 84 ba 00 00 00    	je     c0002f9e <create_partition+0x173>
c0002ee4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002ee8:	0f 83 b0 00 00 00    	jae    c0002f9e <create_partition+0x173>
c0002eee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ef2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002ef6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002ef9:	83 fe 64             	cmp    esi,0x64
c0002efc:	77 0d                	ja     c0002f0b <create_partition+0xe0>
c0002efe:	74 07                	je     c0002f07 <create_partition+0xdc>
c0002f00:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f05:	eb 04                	jmp    c0002f0b <create_partition+0xe0>
c0002f07:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f0b:	89 ca                	mov    edx,ecx
c0002f0d:	31 c0                	xor    eax,eax
c0002f0f:	01 f2                	add    edx,esi
c0002f11:	0f 92 c0             	setb   al
c0002f14:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f18:	77 04                	ja     c0002f1e <create_partition+0xf3>
c0002f1a:	85 c0                	test   eax,eax
c0002f1c:	74 08                	je     c0002f26 <create_partition+0xfb>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	29 ce                	sub    esi,ecx
c0002f24:	eb 04                	jmp    c0002f2a <create_partition+0xff>
c0002f26:	85 f6                	test   esi,esi
c0002f28:	74 74                	je     c0002f9e <create_partition+0x173>
c0002f2a:	89 ca                	mov    edx,ecx
c0002f2c:	89 d8                	mov    eax,ebx
c0002f2e:	e8 e5 ee ff ff       	call   c0001e18 <st_dword>
c0002f33:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f36:	89 f2                	mov    edx,esi
c0002f38:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f3d:	e8 d6 ee ff ff       	call   c0001e18 <st_dword>
c0002f42:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f46:	88 43 fc             	mov    BYTE PTR [ebx-0x4],al
c0002f49:	31 d2                	xor    edx,edx
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	01 f1                	add    ecx,esi
c0002f4f:	f7 f7                	div    edi
c0002f51:	89 d5                	mov    ebp,edx
c0002f53:	31 d2                	xor    edx,edx
c0002f55:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f59:	88 53 f9             	mov    BYTE PTR [ebx-0x7],dl
c0002f5c:	89 c2                	mov    edx,eax
c0002f5e:	c1 ea 02             	shr    edx,0x2
c0002f61:	45                   	inc    ebp
c0002f62:	83 e2 c0             	and    edx,0xffffffc0
c0002f65:	88 43 fb             	mov    BYTE PTR [ebx-0x5],al
c0002f68:	09 ea                	or     edx,ebp
c0002f6a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f6d:	88 53 fa             	mov    BYTE PTR [ebx-0x6],dl
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	f7 f7                	div    edi
c0002f74:	89 d6                	mov    esi,edx
c0002f76:	31 d2                	xor    edx,edx
c0002f78:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7c:	89 c7                	mov    edi,eax
c0002f7e:	46                   	inc    esi
c0002f7f:	c1 ef 02             	shr    edi,0x2
c0002f82:	88 53 fd             	mov    BYTE PTR [ebx-0x3],dl
c0002f85:	83 e7 c0             	and    edi,0xffffffc0
c0002f88:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0002f8b:	09 fe                	or     esi,edi
c0002f8d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f91:	89 f2                	mov    edx,esi
c0002f93:	83 c3 10             	add    ebx,0x10
c0002f96:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002f99:	e9 2f ff ff ff       	jmp    c0002ecd <create_partition+0xa2>
c0002f9e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fa2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fa7:	05 fe 01 00 00       	add    eax,0x1fe
c0002fac:	e8 63 ee ff ff       	call   c0001e14 <st_word>
c0002fb1:	6a 01                	push   0x1
c0002fb3:	6a 00                	push   0x0
c0002fb5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fbd:	e8 f8 ed ff ff       	call   c0001dba <disk_write>
c0002fc2:	83 c4 10             	add    esp,0x10
c0002fc5:	85 c0                	test   eax,eax
c0002fc7:	0f 95 c0             	setne  al
c0002fca:	0f b6 c0             	movzx  eax,al
c0002fcd:	eb 05                	jmp    c0002fd4 <create_partition+0x1a9>
c0002fcf:	b8 01 00 00 00       	mov    eax,0x1
c0002fd4:	83 c4 3c             	add    esp,0x3c
c0002fd7:	5b                   	pop    ebx
c0002fd8:	5e                   	pop    esi
c0002fd9:	5f                   	pop    edi
c0002fda:	5d                   	pop    ebp
c0002fdb:	c3                   	ret    

c0002fdc <get_fileinfo>:
c0002fdc:	55                   	push   ebp
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 1c             	sub    esp,0x1c
c0002fe3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fe9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ff1:	0f 84 d3 01 00 00    	je     c00031ca <get_fileinfo+0x1ee>
c0002ff7:	89 d3                	mov    ebx,edx
c0002ff9:	89 c6                	mov    esi,eax
c0002ffb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002fff:	74 72                	je     c0003073 <get_fileinfo+0x97>
c0003001:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003009:	31 ed                	xor    ebp,ebp
c000300b:	31 ff                	xor    edi,edi
c000300d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003011:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003015:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003018:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000301c:	89 c2                	mov    edx,eax
c000301e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003022:	85 c0                	test   eax,eax
c0003024:	74 41                	je     c0003067 <get_fileinfo+0x8b>
c0003026:	0f b7 c5             	movzx  eax,bp
c0003029:	85 c0                	test   eax,eax
c000302b:	75 0d                	jne    c000303a <get_fileinfo+0x5e>
c000302d:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003033:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003038:	76 22                	jbe    c000305c <get_fileinfo+0x80>
c000303a:	c1 e0 10             	shl    eax,0x10
c000303d:	b9 ff 00 00 00       	mov    ecx,0xff
c0003042:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003046:	29 f9                	sub    ecx,edi
c0003048:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000304c:	e8 fc ee ff ff       	call   c0001f4d <put_utf>
c0003051:	0f b6 c0             	movzx  eax,al
c0003054:	85 c0                	test   eax,eax
c0003056:	74 0d                	je     c0003065 <get_fileinfo+0x89>
c0003058:	01 c7                	add    edi,eax
c000305a:	31 d2                	xor    edx,edx
c000305c:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003061:	89 d5                	mov    ebp,edx
c0003063:	eb a8                	jmp    c000300d <get_fileinfo+0x31>
c0003065:	31 ff                	xor    edi,edi
c0003067:	66 85 ed             	test   bp,bp
c000306a:	74 02                	je     c000306e <get_fileinfo+0x92>
c000306c:	31 ff                	xor    edi,edi
c000306e:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003073:	31 ff                	xor    edi,edi
c0003075:	31 c9                	xor    ecx,ecx
c0003077:	83 f9 0a             	cmp    ecx,0xa
c000307a:	0f 87 ac 00 00 00    	ja     c000312c <get_fileinfo+0x150>
c0003080:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003083:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003086:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000308a:	89 c2                	mov    edx,eax
c000308c:	83 f8 20             	cmp    eax,0x20
c000308f:	0f 84 90 00 00 00    	je     c0003125 <get_fileinfo+0x149>
c0003095:	83 f8 05             	cmp    eax,0x5
c0003098:	75 05                	jne    c000309f <get_fileinfo+0xc3>
c000309a:	ba e5 00 00 00       	mov    edx,0xe5
c000309f:	83 fd 09             	cmp    ebp,0x9
c00030a2:	75 0b                	jne    c00030af <get_fileinfo+0xd3>
c00030a4:	83 ff 0b             	cmp    edi,0xb
c00030a7:	77 06                	ja     c00030af <get_fileinfo+0xd3>
c00030a9:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030ae:	47                   	inc    edi
c00030af:	0f b7 c2             	movzx  eax,dx
c00030b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030b6:	e8 b4 ed ff ff       	call   c0001e6f <dbc_1st>
c00030bb:	85 c0                	test   eax,eax
c00030bd:	74 2f                	je     c00030ee <get_fileinfo+0x112>
c00030bf:	83 fd 08             	cmp    ebp,0x8
c00030c2:	74 2a                	je     c00030ee <get_fileinfo+0x112>
c00030c4:	83 fd 0b             	cmp    ebp,0xb
c00030c7:	74 25                	je     c00030ee <get_fileinfo+0x112>
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030d4:	e8 99 ed ff ff       	call   c0001e72 <dbc_2nd>
c00030d9:	85 c0                	test   eax,eax
c00030db:	74 11                	je     c00030ee <get_fileinfo+0x112>
c00030dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030e1:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030e4:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030e9:	c1 e0 08             	shl    eax,0x8
c00030ec:	09 c2                	or     edx,eax
c00030ee:	50                   	push   eax
c00030ef:	50                   	push   eax
c00030f0:	68 b5 01 00 00       	push   0x1b5
c00030f5:	0f b7 d2             	movzx  edx,dx
c00030f8:	52                   	push   edx
c00030f9:	e8 fa 2b 00 00       	call   c0005cf8 <ff_oem2uni>
c00030fe:	0f b7 c0             	movzx  eax,ax
c0003101:	83 c4 10             	add    esp,0x10
c0003104:	85 c0                	test   eax,eax
c0003106:	75 04                	jne    c000310c <get_fileinfo+0x130>
c0003108:	31 ff                	xor    edi,edi
c000310a:	eb 20                	jmp    c000312c <get_fileinfo+0x150>
c000310c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003111:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003115:	29 f9                	sub    ecx,edi
c0003117:	e8 31 ee ff ff       	call   c0001f4d <put_utf>
c000311c:	0f b6 c0             	movzx  eax,al
c000311f:	85 c0                	test   eax,eax
c0003121:	74 e5                	je     c0003108 <get_fileinfo+0x12c>
c0003123:	01 c7                	add    edi,eax
c0003125:	89 e9                	mov    ecx,ebp
c0003127:	e9 4b ff ff ff       	jmp    c0003077 <get_fileinfo+0x9b>
c000312c:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003131:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003135:	75 5f                	jne    c0003196 <get_fileinfo+0x1ba>
c0003137:	85 ff                	test   edi,edi
c0003139:	75 0b                	jne    c0003146 <get_fileinfo+0x16a>
c000313b:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000313f:	ba 01 00 00 00       	mov    edx,0x1
c0003144:	eb 3e                	jmp    c0003184 <get_fileinfo+0x1a8>
c0003146:	bf 08 00 00 00       	mov    edi,0x8
c000314b:	31 d2                	xor    edx,edx
c000314d:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003153:	84 c0                	test   al,al
c0003155:	74 2d                	je     c0003184 <get_fileinfo+0x1a8>
c0003157:	66 83 f8 2e          	cmp    ax,0x2e
c000315b:	74 1b                	je     c0003178 <get_fileinfo+0x19c>
c000315d:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003160:	66 83 f9 19          	cmp    cx,0x19
c0003164:	77 17                	ja     c000317d <get_fileinfo+0x1a1>
c0003166:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003169:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000316c:	21 f9                	and    ecx,edi
c000316e:	80 e1 18             	and    cl,0x18
c0003171:	74 0a                	je     c000317d <get_fileinfo+0x1a1>
c0003173:	83 c0 20             	add    eax,0x20
c0003176:	eb 05                	jmp    c000317d <get_fileinfo+0x1a1>
c0003178:	bf 10 00 00 00       	mov    edi,0x10
c000317d:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003181:	42                   	inc    edx
c0003182:	eb c9                	jmp    c000314d <get_fileinfo+0x171>
c0003184:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003189:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318c:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003190:	75 04                	jne    c0003196 <get_fileinfo+0x1ba>
c0003192:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003196:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003199:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000319c:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000319f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a2:	83 c0 1c             	add    eax,0x1c
c00031a5:	e8 52 ec ff ff       	call   c0001dfc <ld_dword>
c00031aa:	89 03                	mov    DWORD PTR [ebx],eax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 16             	add    eax,0x16
c00031b2:	e8 38 ec ff ff       	call   c0001def <ld_word>
c00031b7:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031be:	83 c0 18             	add    eax,0x18
c00031c1:	e8 29 ec ff ff       	call   c0001def <ld_word>
c00031c6:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031ca:	83 c4 1c             	add    esp,0x1c
c00031cd:	5b                   	pop    ebx
c00031ce:	5e                   	pop    esi
c00031cf:	5f                   	pop    edi
c00031d0:	5d                   	pop    ebp
c00031d1:	c3                   	ret    

c00031d2 <ld_clust.isra.0>:
c00031d2:	56                   	push   esi
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031d8:	53                   	push   ebx
c00031d9:	89 d3                	mov    ebx,edx
c00031db:	e8 0f ec ff ff       	call   c0001def <ld_word>
c00031e0:	0f b7 c8             	movzx  ecx,ax
c00031e3:	89 f0                	mov    eax,esi
c00031e5:	3c 03                	cmp    al,0x3
c00031e7:	75 0d                	jne    c00031f6 <ld_clust.isra.0+0x24>
c00031e9:	8d 43 14             	lea    eax,[ebx+0x14]
c00031ec:	e8 fe eb ff ff       	call   c0001def <ld_word>
c00031f1:	c1 e0 10             	shl    eax,0x10
c00031f4:	09 c1                	or     ecx,eax
c00031f6:	5b                   	pop    ebx
c00031f7:	89 c8                	mov    eax,ecx
c00031f9:	5e                   	pop    esi
c00031fa:	c3                   	ret    

c00031fb <st_clust.isra.1>:
c00031fb:	56                   	push   esi
c00031fc:	89 c6                	mov    esi,eax
c00031fe:	53                   	push   ebx
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	0f b7 d1             	movzx  edx,cx
c0003204:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003207:	e8 08 ec ff ff       	call   c0001e14 <st_word>
c000320c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000320f:	75 0f                	jne    c0003220 <st_clust.isra.1+0x25>
c0003211:	c1 e9 10             	shr    ecx,0x10
c0003214:	8d 43 14             	lea    eax,[ebx+0x14]
c0003217:	89 ca                	mov    edx,ecx
c0003219:	5b                   	pop    ebx
c000321a:	5e                   	pop    esi
c000321b:	e9 f4 eb ff ff       	jmp    c0001e14 <st_word>
c0003220:	5b                   	pop    ebx
c0003221:	5e                   	pop    esi
c0003222:	c3                   	ret    

c0003223 <get_fat.isra.2>:
c0003223:	b9 01 00 00 00       	mov    ecx,0x1
c0003228:	83 fa 01             	cmp    edx,0x1
c000322b:	0f 86 f3 00 00 00    	jbe    c0003324 <get_fat.isra.2+0x101>
c0003231:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003234:	0f 83 ea 00 00 00    	jae    c0003324 <get_fat.isra.2+0x101>
c000323a:	55                   	push   ebp
c000323b:	57                   	push   edi
c000323c:	89 c7                	mov    edi,eax
c000323e:	56                   	push   esi
c000323f:	89 d6                	mov    esi,edx
c0003241:	53                   	push   ebx
c0003242:	83 ec 0c             	sub    esp,0xc
c0003245:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003248:	83 f8 02             	cmp    eax,0x2
c000324b:	74 78                	je     c00032c5 <get_fat.isra.2+0xa2>
c000324d:	83 f8 03             	cmp    eax,0x3
c0003250:	0f 84 96 00 00 00    	je     c00032ec <get_fat.isra.2+0xc9>
c0003256:	48                   	dec    eax
c0003257:	0f 85 bd 00 00 00    	jne    c000331a <get_fat.isra.2+0xf7>
c000325d:	89 d3                	mov    ebx,edx
c000325f:	89 f8                	mov    eax,edi
c0003261:	d1 eb                	shr    ebx,1
c0003263:	01 d3                	add    ebx,edx
c0003265:	89 da                	mov    edx,ebx
c0003267:	c1 ea 09             	shr    edx,0x9
c000326a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000326d:	e8 e4 f0 ff ff       	call   c0002356 <move_window>
c0003272:	85 c0                	test   eax,eax
c0003274:	74 08                	je     c000327e <get_fat.isra.2+0x5b>
c0003276:	83 c9 ff             	or     ecx,0xffffffff
c0003279:	e9 9c 00 00 00       	jmp    c000331a <get_fat.isra.2+0xf7>
c000327e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003281:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003287:	89 ea                	mov    edx,ebp
c0003289:	89 f8                	mov    eax,edi
c000328b:	c1 ea 09             	shr    edx,0x9
c000328e:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003292:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003295:	e8 bc f0 ff ff       	call   c0002356 <move_window>
c000329a:	85 c0                	test   eax,eax
c000329c:	75 d8                	jne    c0003276 <get_fat.isra.2+0x53>
c000329e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032a4:	0f b6 c3             	movzx  eax,bl
c00032a7:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00032ac:	c1 e3 08             	shl    ebx,0x8
c00032af:	09 c3                	or     ebx,eax
c00032b1:	89 d9                	mov    ecx,ebx
c00032b3:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032b9:	83 e6 01             	and    esi,0x1
c00032bc:	74 5c                	je     c000331a <get_fat.isra.2+0xf7>
c00032be:	89 d9                	mov    ecx,ebx
c00032c0:	c1 e9 04             	shr    ecx,0x4
c00032c3:	eb 55                	jmp    c000331a <get_fat.isra.2+0xf7>
c00032c5:	c1 ea 08             	shr    edx,0x8
c00032c8:	89 f8                	mov    eax,edi
c00032ca:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032cd:	e8 84 f0 ff ff       	call   c0002356 <move_window>
c00032d2:	85 c0                	test   eax,eax
c00032d4:	75 a0                	jne    c0003276 <get_fat.isra.2+0x53>
c00032d6:	01 f6                	add    esi,esi
c00032d8:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032de:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032e2:	e8 08 eb ff ff       	call   c0001def <ld_word>
c00032e7:	0f b7 c8             	movzx  ecx,ax
c00032ea:	eb 2e                	jmp    c000331a <get_fat.isra.2+0xf7>
c00032ec:	c1 ea 07             	shr    edx,0x7
c00032ef:	89 f8                	mov    eax,edi
c00032f1:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032f4:	e8 5d f0 ff ff       	call   c0002356 <move_window>
c00032f9:	85 c0                	test   eax,eax
c00032fb:	0f 85 75 ff ff ff    	jne    c0003276 <get_fat.isra.2+0x53>
c0003301:	c1 e6 02             	shl    esi,0x2
c0003304:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000330a:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000330e:	e8 e9 ea ff ff       	call   c0001dfc <ld_dword>
c0003313:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003318:	89 c1                	mov    ecx,eax
c000331a:	83 c4 0c             	add    esp,0xc
c000331d:	89 c8                	mov    eax,ecx
c000331f:	5b                   	pop    ebx
c0003320:	5e                   	pop    esi
c0003321:	5f                   	pop    edi
c0003322:	5d                   	pop    ebp
c0003323:	c3                   	ret    
c0003324:	89 c8                	mov    eax,ecx
c0003326:	c3                   	ret    

c0003327 <dir_sdi>:
c0003327:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000332d:	0f 87 b6 00 00 00    	ja     c00033e9 <dir_sdi+0xc2>
c0003333:	55                   	push   ebp
c0003334:	57                   	push   edi
c0003335:	56                   	push   esi
c0003336:	53                   	push   ebx
c0003337:	89 d3                	mov    ebx,edx
c0003339:	83 ec 1c             	sub    esp,0x1c
c000333c:	f6 c2 1f             	test   dl,0x1f
c000333f:	74 0a                	je     c000334b <dir_sdi+0x24>
c0003341:	b8 02 00 00 00       	mov    eax,0x2
c0003346:	e9 96 00 00 00       	jmp    c00033e1 <dir_sdi+0xba>
c000334b:	89 c6                	mov    esi,eax
c000334d:	8b 38                	mov    edi,DWORD PTR [eax]
c000334f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003352:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003355:	85 c9                	test   ecx,ecx
c0003357:	75 23                	jne    c000337c <dir_sdi+0x55>
c0003359:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000335c:	76 07                	jbe    c0003365 <dir_sdi+0x3e>
c000335e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003361:	85 c0                	test   eax,eax
c0003363:	75 15                	jne    c000337a <dir_sdi+0x53>
c0003365:	89 da                	mov    edx,ebx
c0003367:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000336b:	c1 ea 05             	shr    edx,0x5
c000336e:	39 c2                	cmp    edx,eax
c0003370:	73 cf                	jae    c0003341 <dir_sdi+0x1a>
c0003372:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003375:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003378:	eb 3d                	jmp    c00033b7 <dir_sdi+0x90>
c000337a:	89 c1                	mov    ecx,eax
c000337c:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003380:	c1 e5 09             	shl    ebp,0x9
c0003383:	89 ca                	mov    edx,ecx
c0003385:	39 eb                	cmp    ebx,ebp
c0003387:	72 1c                	jb     c00033a5 <dir_sdi+0x7e>
c0003389:	8b 06                	mov    eax,DWORD PTR [esi]
c000338b:	e8 93 fe ff ff       	call   c0003223 <get_fat.isra.2>
c0003390:	89 c1                	mov    ecx,eax
c0003392:	83 f8 ff             	cmp    eax,0xffffffff
c0003395:	74 45                	je     c00033dc <dir_sdi+0xb5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	76 a5                	jbe    c0003341 <dir_sdi+0x1a>
c000339c:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000339f:	76 a0                	jbe    c0003341 <dir_sdi+0x1a>
c00033a1:	29 eb                	sub    ebx,ebp
c00033a3:	eb de                	jmp    c0003383 <dir_sdi+0x5c>
c00033a5:	89 f8                	mov    eax,edi
c00033a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033ab:	e8 96 ec ff ff       	call   c0002046 <clst2sect>
c00033b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033b7:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ba:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033bd:	85 d2                	test   edx,edx
c00033bf:	74 80                	je     c0003341 <dir_sdi+0x1a>
c00033c1:	89 d8                	mov    eax,ebx
c00033c3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033c9:	c1 e8 09             	shr    eax,0x9
c00033cc:	01 d0                	add    eax,edx
c00033ce:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033d1:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033d5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033d8:	31 c0                	xor    eax,eax
c00033da:	eb 05                	jmp    c00033e1 <dir_sdi+0xba>
c00033dc:	b8 01 00 00 00       	mov    eax,0x1
c00033e1:	83 c4 1c             	add    esp,0x1c
c00033e4:	5b                   	pop    ebx
c00033e5:	5e                   	pop    esi
c00033e6:	5f                   	pop    edi
c00033e7:	5d                   	pop    ebp
c00033e8:	c3                   	ret    
c00033e9:	b8 02 00 00 00       	mov    eax,0x2
c00033ee:	c3                   	ret    

c00033ef <create_chain>:
c00033ef:	55                   	push   ebp
c00033f0:	89 c5                	mov    ebp,eax
c00033f2:	57                   	push   edi
c00033f3:	89 d7                	mov    edi,edx
c00033f5:	56                   	push   esi
c00033f6:	53                   	push   ebx
c00033f7:	83 ec 1c             	sub    esp,0x1c
c00033fa:	85 d2                	test   edx,edx
c00033fc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033fe:	75 0e                	jne    c000340e <create_chain+0x1f>
c0003400:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003403:	85 c9                	test   ecx,ecx
c0003405:	74 32                	je     c0003439 <create_chain+0x4a>
c0003407:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000340a:	77 32                	ja     c000343e <create_chain+0x4f>
c000340c:	eb 2b                	jmp    c0003439 <create_chain+0x4a>
c000340e:	89 d8                	mov    eax,ebx
c0003410:	e8 0e fe ff ff       	call   c0003223 <get_fat.isra.2>
c0003415:	83 f8 01             	cmp    eax,0x1
c0003418:	77 0a                	ja     c0003424 <create_chain+0x35>
c000341a:	b8 01 00 00 00       	mov    eax,0x1
c000341f:	e9 fe 00 00 00       	jmp    c0003522 <create_chain+0x133>
c0003424:	83 f8 ff             	cmp    eax,0xffffffff
c0003427:	0f 84 f2 00 00 00    	je     c000351f <create_chain+0x130>
c000342d:	89 f9                	mov    ecx,edi
c000342f:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003432:	76 0a                	jbe    c000343e <create_chain+0x4f>
c0003434:	e9 e9 00 00 00       	jmp    c0003522 <create_chain+0x133>
c0003439:	b9 01 00 00 00       	mov    ecx,0x1
c000343e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003442:	75 07                	jne    c000344b <create_chain+0x5c>
c0003444:	31 c0                	xor    eax,eax
c0003446:	e9 d7 00 00 00       	jmp    c0003522 <create_chain+0x133>
c000344b:	39 f9                	cmp    ecx,edi
c000344d:	75 4a                	jne    c0003499 <create_chain+0xaa>
c000344f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003452:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003455:	77 05                	ja     c000345c <create_chain+0x6d>
c0003457:	be 02 00 00 00       	mov    esi,0x2
c000345c:	89 f2                	mov    edx,esi
c000345e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003461:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003465:	e8 b9 fd ff ff       	call   c0003223 <get_fat.isra.2>
c000346a:	83 f8 01             	cmp    eax,0x1
c000346d:	0f 84 af 00 00 00    	je     c0003522 <create_chain+0x133>
c0003473:	83 f8 ff             	cmp    eax,0xffffffff
c0003476:	0f 84 a6 00 00 00    	je     c0003522 <create_chain+0x133>
c000347c:	85 c0                	test   eax,eax
c000347e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003482:	74 11                	je     c0003495 <create_chain+0xa6>
c0003484:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003487:	83 f8 01             	cmp    eax,0x1
c000348a:	76 0d                	jbe    c0003499 <create_chain+0xaa>
c000348c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000348f:	76 08                	jbe    c0003499 <create_chain+0xaa>
c0003491:	89 c1                	mov    ecx,eax
c0003493:	eb 04                	jmp    c0003499 <create_chain+0xaa>
c0003495:	85 f6                	test   esi,esi
c0003497:	75 3b                	jne    c00034d4 <create_chain+0xe5>
c0003499:	89 ce                	mov    esi,ecx
c000349b:	46                   	inc    esi
c000349c:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000349f:	77 0a                	ja     c00034ab <create_chain+0xbc>
c00034a1:	83 f9 01             	cmp    ecx,0x1
c00034a4:	76 9e                	jbe    c0003444 <create_chain+0x55>
c00034a6:	be 02 00 00 00       	mov    esi,0x2
c00034ab:	89 f2                	mov    edx,esi
c00034ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034b4:	e8 6a fd ff ff       	call   c0003223 <get_fat.isra.2>
c00034b9:	85 c0                	test   eax,eax
c00034bb:	74 17                	je     c00034d4 <create_chain+0xe5>
c00034bd:	83 f8 01             	cmp    eax,0x1
c00034c0:	74 60                	je     c0003522 <create_chain+0x133>
c00034c2:	83 f8 ff             	cmp    eax,0xffffffff
c00034c5:	74 5b                	je     c0003522 <create_chain+0x133>
c00034c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034cb:	39 ce                	cmp    esi,ecx
c00034cd:	75 cc                	jne    c000349b <create_chain+0xac>
c00034cf:	e9 70 ff ff ff       	jmp    c0003444 <create_chain+0x55>
c00034d4:	83 c9 ff             	or     ecx,0xffffffff
c00034d7:	89 f2                	mov    edx,esi
c00034d9:	89 d8                	mov    eax,ebx
c00034db:	e8 be f2 ff ff       	call   c000279e <put_fat>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	75 0f                	jne    c00034f3 <create_chain+0x104>
c00034e4:	85 ff                	test   edi,edi
c00034e6:	74 0b                	je     c00034f3 <create_chain+0x104>
c00034e8:	89 f1                	mov    ecx,esi
c00034ea:	89 fa                	mov    edx,edi
c00034ec:	89 d8                	mov    eax,ebx
c00034ee:	e8 ab f2 ff ff       	call   c000279e <put_fat>
c00034f3:	85 c0                	test   eax,eax
c00034f5:	75 21                	jne    c0003518 <create_chain+0x129>
c00034f7:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00034fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00034fd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003500:	8d 57 fe             	lea    edx,[edi-0x2]
c0003503:	39 d0                	cmp    eax,edx
c0003505:	77 04                	ja     c000350b <create_chain+0x11c>
c0003507:	48                   	dec    eax
c0003508:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000350b:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000350e:	83 c8 01             	or     eax,0x1
c0003511:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003514:	89 f0                	mov    eax,esi
c0003516:	eb 0a                	jmp    c0003522 <create_chain+0x133>
c0003518:	48                   	dec    eax
c0003519:	0f 85 fb fe ff ff    	jne    c000341a <create_chain+0x2b>
c000351f:	83 c8 ff             	or     eax,0xffffffff
c0003522:	83 c4 1c             	add    esp,0x1c
c0003525:	5b                   	pop    ebx
c0003526:	5e                   	pop    esi
c0003527:	5f                   	pop    edi
c0003528:	5d                   	pop    ebp
c0003529:	c3                   	ret    

c000352a <remove_chain>:
c000352a:	55                   	push   ebp
c000352b:	57                   	push   edi
c000352c:	56                   	push   esi
c000352d:	89 d6                	mov    esi,edx
c000352f:	53                   	push   ebx
c0003530:	83 ec 0c             	sub    esp,0xc
c0003533:	83 fa 01             	cmp    edx,0x1
c0003536:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003538:	76 6a                	jbe    c00035a4 <remove_chain+0x7a>
c000353a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000353d:	76 65                	jbe    c00035a4 <remove_chain+0x7a>
c000353f:	89 c5                	mov    ebp,eax
c0003541:	89 ca                	mov    edx,ecx
c0003543:	85 c9                	test   ecx,ecx
c0003545:	74 0e                	je     c0003555 <remove_chain+0x2b>
c0003547:	83 c9 ff             	or     ecx,0xffffffff
c000354a:	89 d8                	mov    eax,ebx
c000354c:	e8 4d f2 ff ff       	call   c000279e <put_fat>
c0003551:	85 c0                	test   eax,eax
c0003553:	75 5b                	jne    c00035b0 <remove_chain+0x86>
c0003555:	89 f2                	mov    edx,esi
c0003557:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000355a:	e8 c4 fc ff ff       	call   c0003223 <get_fat.isra.2>
c000355f:	89 c7                	mov    edi,eax
c0003561:	85 c0                	test   eax,eax
c0003563:	75 04                	jne    c0003569 <remove_chain+0x3f>
c0003565:	31 c0                	xor    eax,eax
c0003567:	eb 47                	jmp    c00035b0 <remove_chain+0x86>
c0003569:	83 f8 01             	cmp    eax,0x1
c000356c:	74 36                	je     c00035a4 <remove_chain+0x7a>
c000356e:	83 f8 ff             	cmp    eax,0xffffffff
c0003571:	74 38                	je     c00035ab <remove_chain+0x81>
c0003573:	31 c9                	xor    ecx,ecx
c0003575:	89 f2                	mov    edx,esi
c0003577:	89 d8                	mov    eax,ebx
c0003579:	e8 20 f2 ff ff       	call   c000279e <put_fat>
c000357e:	85 c0                	test   eax,eax
c0003580:	75 2e                	jne    c00035b0 <remove_chain+0x86>
c0003582:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003585:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003588:	8d 4a fe             	lea    ecx,[edx-0x2]
c000358b:	39 c8                	cmp    eax,ecx
c000358d:	73 0d                	jae    c000359c <remove_chain+0x72>
c000358f:	40                   	inc    eax
c0003590:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003593:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003596:	83 c8 01             	or     eax,0x1
c0003599:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000359c:	89 fe                	mov    esi,edi
c000359e:	39 fa                	cmp    edx,edi
c00035a0:	77 b3                	ja     c0003555 <remove_chain+0x2b>
c00035a2:	eb c1                	jmp    c0003565 <remove_chain+0x3b>
c00035a4:	b8 02 00 00 00       	mov    eax,0x2
c00035a9:	eb 05                	jmp    c00035b0 <remove_chain+0x86>
c00035ab:	b8 01 00 00 00       	mov    eax,0x1
c00035b0:	83 c4 0c             	add    esp,0xc
c00035b3:	5b                   	pop    ebx
c00035b4:	5e                   	pop    esi
c00035b5:	5f                   	pop    edi
c00035b6:	5d                   	pop    ebp
c00035b7:	c3                   	ret    

c00035b8 <dir_next>:
c00035b8:	55                   	push   ebp
c00035b9:	57                   	push   edi
c00035ba:	56                   	push   esi
c00035bb:	53                   	push   ebx
c00035bc:	83 ec 1c             	sub    esp,0x1c
c00035bf:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035c2:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035c4:	83 c7 20             	add    edi,0x20
c00035c7:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035cd:	76 07                	jbe    c00035d6 <dir_next+0x1e>
c00035cf:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035d6:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035d9:	b9 04 00 00 00       	mov    ecx,0x4
c00035de:	85 f6                	test   esi,esi
c00035e0:	0f 84 cd 00 00 00    	je     c00036b3 <dir_next+0xfb>
c00035e6:	89 c3                	mov    ebx,eax
c00035e8:	89 f8                	mov    eax,edi
c00035ea:	25 ff 01 00 00       	and    eax,0x1ff
c00035ef:	89 d1                	mov    ecx,edx
c00035f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f5:	0f 85 a8 00 00 00    	jne    c00036a3 <dir_next+0xeb>
c00035fb:	46                   	inc    esi
c00035fc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035ff:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003602:	85 d2                	test   edx,edx
c0003604:	75 22                	jne    c0003628 <dir_next+0x70>
c0003606:	89 fa                	mov    edx,edi
c0003608:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000360c:	c1 ea 05             	shr    edx,0x5
c000360f:	39 c2                	cmp    edx,eax
c0003611:	0f 82 8c 00 00 00    	jb     c00036a3 <dir_next+0xeb>
c0003617:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000361e:	b9 04 00 00 00       	mov    ecx,0x4
c0003623:	e9 8b 00 00 00       	jmp    c00036b3 <dir_next+0xfb>
c0003628:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000362c:	89 fe                	mov    esi,edi
c000362e:	48                   	dec    eax
c000362f:	c1 ee 09             	shr    esi,0x9
c0003632:	85 f0                	test   eax,esi
c0003634:	75 6d                	jne    c00036a3 <dir_next+0xeb>
c0003636:	89 e8                	mov    eax,ebp
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	e8 e2 fb ff ff       	call   c0003223 <get_fat.isra.2>
c0003641:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003645:	89 c6                	mov    esi,eax
c0003647:	83 f8 01             	cmp    eax,0x1
c000364a:	77 07                	ja     c0003653 <dir_next+0x9b>
c000364c:	b9 02 00 00 00       	mov    ecx,0x2
c0003651:	eb 60                	jmp    c00036b3 <dir_next+0xfb>
c0003653:	83 f8 ff             	cmp    eax,0xffffffff
c0003656:	75 07                	jne    c000365f <dir_next+0xa7>
c0003658:	b9 01 00 00 00       	mov    ecx,0x1
c000365d:	eb 54                	jmp    c00036b3 <dir_next+0xfb>
c000365f:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003662:	77 30                	ja     c0003694 <dir_next+0xdc>
c0003664:	85 c9                	test   ecx,ecx
c0003666:	74 af                	je     c0003617 <dir_next+0x5f>
c0003668:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000366b:	89 d8                	mov    eax,ebx
c000366d:	e8 7d fd ff ff       	call   c00033ef <create_chain>
c0003672:	b9 07 00 00 00       	mov    ecx,0x7
c0003677:	89 c6                	mov    esi,eax
c0003679:	85 c0                	test   eax,eax
c000367b:	74 36                	je     c00036b3 <dir_next+0xfb>
c000367d:	83 f8 01             	cmp    eax,0x1
c0003680:	74 ca                	je     c000364c <dir_next+0x94>
c0003682:	83 f8 ff             	cmp    eax,0xffffffff
c0003685:	74 d1                	je     c0003658 <dir_next+0xa0>
c0003687:	89 c2                	mov    edx,eax
c0003689:	89 e8                	mov    eax,ebp
c000368b:	e8 65 f2 ff ff       	call   c00028f5 <dir_clear>
c0003690:	85 c0                	test   eax,eax
c0003692:	75 c4                	jne    c0003658 <dir_next+0xa0>
c0003694:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003697:	89 f2                	mov    edx,esi
c0003699:	89 e8                	mov    eax,ebp
c000369b:	e8 a6 e9 ff ff       	call   c0002046 <clst2sect>
c00036a0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036a7:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036aa:	31 c9                	xor    ecx,ecx
c00036ac:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036b0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036b3:	83 c4 1c             	add    esp,0x1c
c00036b6:	89 c8                	mov    eax,ecx
c00036b8:	5b                   	pop    ebx
c00036b9:	5e                   	pop    esi
c00036ba:	5f                   	pop    edi
c00036bb:	5d                   	pop    ebp
c00036bc:	c3                   	ret    

c00036bd <dir_alloc>:
c00036bd:	55                   	push   ebp
c00036be:	89 c5                	mov    ebp,eax
c00036c0:	57                   	push   edi
c00036c1:	89 d7                	mov    edi,edx
c00036c3:	56                   	push   esi
c00036c4:	31 d2                	xor    edx,edx
c00036c6:	53                   	push   ebx
c00036c7:	83 ec 0c             	sub    esp,0xc
c00036ca:	8b 30                	mov    esi,DWORD PTR [eax]
c00036cc:	e8 56 fc ff ff       	call   c0003327 <dir_sdi>
c00036d1:	85 c0                	test   eax,eax
c00036d3:	75 3b                	jne    c0003710 <dir_alloc+0x53>
c00036d5:	31 db                	xor    ebx,ebx
c00036d7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036da:	89 f0                	mov    eax,esi
c00036dc:	e8 75 ec ff ff       	call   c0002356 <move_window>
c00036e1:	85 c0                	test   eax,eax
c00036e3:	75 2b                	jne    c0003710 <dir_alloc+0x53>
c00036e5:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036e8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036eb:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036f1:	74 04                	je     c00036f7 <dir_alloc+0x3a>
c00036f3:	85 d2                	test   edx,edx
c00036f5:	75 07                	jne    c00036fe <dir_alloc+0x41>
c00036f7:	43                   	inc    ebx
c00036f8:	39 fb                	cmp    ebx,edi
c00036fa:	75 04                	jne    c0003700 <dir_alloc+0x43>
c00036fc:	eb 1c                	jmp    c000371a <dir_alloc+0x5d>
c00036fe:	31 db                	xor    ebx,ebx
c0003700:	ba 01 00 00 00       	mov    edx,0x1
c0003705:	89 e8                	mov    eax,ebp
c0003707:	e8 ac fe ff ff       	call   c00035b8 <dir_next>
c000370c:	85 c0                	test   eax,eax
c000370e:	74 c7                	je     c00036d7 <dir_alloc+0x1a>
c0003710:	83 f8 04             	cmp    eax,0x4
c0003713:	75 05                	jne    c000371a <dir_alloc+0x5d>
c0003715:	b8 07 00 00 00       	mov    eax,0x7
c000371a:	83 c4 0c             	add    esp,0xc
c000371d:	5b                   	pop    ebx
c000371e:	5e                   	pop    esi
c000371f:	5f                   	pop    edi
c0003720:	5d                   	pop    ebp
c0003721:	c3                   	ret    

c0003722 <dir_read>:
c0003722:	55                   	push   ebp
c0003723:	57                   	push   edi
c0003724:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003729:	56                   	push   esi
c000372a:	be 04 00 00 00       	mov    esi,0x4
c000372f:	53                   	push   ebx
c0003730:	89 c3                	mov    ebx,eax
c0003732:	83 ec 1c             	sub    esp,0x1c
c0003735:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000373b:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003740:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003743:	85 d2                	test   edx,edx
c0003745:	0f 84 e3 00 00 00    	je     c000382e <dir_read+0x10c>
c000374b:	89 e8                	mov    eax,ebp
c000374d:	e8 04 ec ff ff       	call   c0002356 <move_window>
c0003752:	89 c6                	mov    esi,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 dd 00 00 00    	jne    c0003839 <dir_read+0x117>
c000375c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000375f:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003762:	88 04 24             	mov    BYTE PTR [esp],al
c0003765:	85 c0                	test   eax,eax
c0003767:	0f 84 c7 00 00 00    	je     c0003834 <dir_read+0x112>
c000376d:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003770:	83 e1 3f             	and    ecx,0x3f
c0003773:	3d e5 00 00 00       	cmp    eax,0xe5
c0003778:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000377b:	0f 84 93 00 00 00    	je     c0003814 <dir_read+0xf2>
c0003781:	83 f8 2e             	cmp    eax,0x2e
c0003784:	0f 84 8a 00 00 00    	je     c0003814 <dir_read+0xf2>
c000378a:	0f b6 c9             	movzx  ecx,cl
c000378d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003791:	83 e1 df             	and    ecx,0xffffffdf
c0003794:	83 f9 08             	cmp    ecx,0x8
c0003797:	0f 94 c1             	sete   cl
c000379a:	0f b6 c9             	movzx  ecx,cl
c000379d:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037a1:	75 71                	jne    c0003814 <dir_read+0xf2>
c00037a3:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037a8:	75 4a                	jne    c00037f4 <dir_read+0xd2>
c00037aa:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037ae:	74 16                	je     c00037c6 <dir_read+0xa4>
c00037b0:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037b3:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037ba:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037c1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037c4:	eb 0e                	jmp    c00037d4 <dir_read+0xb2>
c00037c6:	89 f9                	mov    ecx,edi
c00037c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037cd:	0f b6 c9             	movzx  ecx,cl
c00037d0:	39 c1                	cmp    ecx,eax
c00037d2:	75 45                	jne    c0003819 <dir_read+0xf7>
c00037d4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037d8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037dd:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037e0:	75 37                	jne    c0003819 <dir_read+0xf7>
c00037e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037e5:	e8 79 e8 ff ff       	call   c0002063 <pick_lfn>
c00037ea:	85 c0                	test   eax,eax
c00037ec:	74 2b                	je     c0003819 <dir_read+0xf7>
c00037ee:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037f1:	4f                   	dec    edi
c00037f2:	eb 25                	jmp    c0003819 <dir_read+0xf7>
c00037f4:	89 f8                	mov    eax,edi
c00037f6:	84 c0                	test   al,al
c00037f8:	75 11                	jne    c000380b <dir_read+0xe9>
c00037fa:	89 d0                	mov    eax,edx
c00037fc:	e8 3f ea ff ff       	call   c0002240 <sum_sfn>
c0003801:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003805:	75 04                	jne    c000380b <dir_read+0xe9>
c0003807:	31 f6                	xor    esi,esi
c0003809:	eb 35                	jmp    c0003840 <dir_read+0x11e>
c000380b:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003812:	eb 2c                	jmp    c0003840 <dir_read+0x11e>
c0003814:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003819:	31 d2                	xor    edx,edx
c000381b:	89 d8                	mov    eax,ebx
c000381d:	e8 96 fd ff ff       	call   c00035b8 <dir_next>
c0003822:	89 c6                	mov    esi,eax
c0003824:	85 c0                	test   eax,eax
c0003826:	0f 84 14 ff ff ff    	je     c0003740 <dir_read+0x1e>
c000382c:	eb 0b                	jmp    c0003839 <dir_read+0x117>
c000382e:	85 f6                	test   esi,esi
c0003830:	74 d5                	je     c0003807 <dir_read+0xe5>
c0003832:	eb 05                	jmp    c0003839 <dir_read+0x117>
c0003834:	be 04 00 00 00       	mov    esi,0x4
c0003839:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003840:	83 c4 1c             	add    esp,0x1c
c0003843:	89 f0                	mov    eax,esi
c0003845:	5b                   	pop    ebx
c0003846:	5e                   	pop    esi
c0003847:	5f                   	pop    edi
c0003848:	5d                   	pop    ebp
c0003849:	c3                   	ret    

c000384a <dir_remove>:
c000384a:	57                   	push   edi
c000384b:	56                   	push   esi
c000384c:	53                   	push   ebx
c000384d:	89 c3                	mov    ebx,eax
c000384f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003852:	8b 30                	mov    esi,DWORD PTR [eax]
c0003854:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003857:	83 fa ff             	cmp    edx,0xffffffff
c000385a:	74 09                	je     c0003865 <dir_remove+0x1b>
c000385c:	e8 c6 fa ff ff       	call   c0003327 <dir_sdi>
c0003861:	85 c0                	test   eax,eax
c0003863:	75 34                	jne    c0003899 <dir_remove+0x4f>
c0003865:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003868:	89 f0                	mov    eax,esi
c000386a:	e8 e7 ea ff ff       	call   c0002356 <move_window>
c000386f:	85 c0                	test   eax,eax
c0003871:	75 1c                	jne    c000388f <dir_remove+0x45>
c0003873:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003876:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003879:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000387d:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003880:	73 17                	jae    c0003899 <dir_remove+0x4f>
c0003882:	31 d2                	xor    edx,edx
c0003884:	89 d8                	mov    eax,ebx
c0003886:	e8 2d fd ff ff       	call   c00035b8 <dir_next>
c000388b:	85 c0                	test   eax,eax
c000388d:	74 d6                	je     c0003865 <dir_remove+0x1b>
c000388f:	83 f8 04             	cmp    eax,0x4
c0003892:	75 05                	jne    c0003899 <dir_remove+0x4f>
c0003894:	b8 02 00 00 00       	mov    eax,0x2
c0003899:	5b                   	pop    ebx
c000389a:	5e                   	pop    esi
c000389b:	5f                   	pop    edi
c000389c:	c3                   	ret    

c000389d <dir_find>:
c000389d:	55                   	push   ebp
c000389e:	31 d2                	xor    edx,edx
c00038a0:	57                   	push   edi
c00038a1:	56                   	push   esi
c00038a2:	53                   	push   ebx
c00038a3:	89 c3                	mov    ebx,eax
c00038a5:	83 ec 1c             	sub    esp,0x1c
c00038a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00038aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038ae:	89 d8                	mov    eax,ebx
c00038b0:	e8 72 fa ff ff       	call   c0003327 <dir_sdi>
c00038b5:	89 c6                	mov    esi,eax
c00038b7:	85 c0                	test   eax,eax
c00038b9:	0f 85 1d 01 00 00    	jne    c00039dc <dir_find+0x13f>
c00038bf:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038c6:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038cb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038d0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d7:	e8 7a ea ff ff       	call   c0002356 <move_window>
c00038dc:	89 c6                	mov    esi,eax
c00038de:	85 c0                	test   eax,eax
c00038e0:	0f 85 f6 00 00 00    	jne    c00039dc <dir_find+0x13f>
c00038e6:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038e9:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038ed:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038f1:	85 c9                	test   ecx,ecx
c00038f3:	0f 84 de 00 00 00    	je     c00039d7 <dir_find+0x13a>
c00038f9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038fc:	89 d0                	mov    eax,edx
c00038fe:	83 e0 3f             	and    eax,0x3f
c0003901:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003907:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000390a:	0f 84 a6 00 00 00    	je     c00039b6 <dir_find+0x119>
c0003910:	80 e2 08             	and    dl,0x8
c0003913:	0f b6 c0             	movzx  eax,al
c0003916:	74 0b                	je     c0003923 <dir_find+0x86>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	0f 85 95 00 00 00    	jne    c00039b6 <dir_find+0x119>
c0003921:	eb 05                	jmp    c0003928 <dir_find+0x8b>
c0003923:	83 f8 0f             	cmp    eax,0xf
c0003926:	75 62                	jne    c000398a <dir_find+0xed>
c0003928:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000392c:	0f 85 90 00 00 00    	jne    c00039c2 <dir_find+0x125>
c0003932:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003937:	74 17                	je     c0003950 <dir_find+0xb3>
c0003939:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000393c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003940:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003943:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c000394b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000394e:	eb 13                	jmp    c0003963 <dir_find+0xc6>
c0003950:	89 f8                	mov    eax,edi
c0003952:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003957:	0f b6 d0             	movzx  edx,al
c000395a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000395f:	39 c2                	cmp    edx,eax
c0003961:	75 5f                	jne    c00039c2 <dir_find+0x125>
c0003963:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003967:	bf ff ff ff ff       	mov    edi,0xffffffff
c000396c:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c000396f:	75 51                	jne    c00039c2 <dir_find+0x125>
c0003971:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003975:	89 ea                	mov    edx,ebp
c0003977:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000397a:	e8 32 f3 ff ff       	call   c0002cb1 <cmp_lfn>
c000397f:	85 c0                	test   eax,eax
c0003981:	74 3f                	je     c00039c2 <dir_find+0x125>
c0003983:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003987:	4f                   	dec    edi
c0003988:	eb 38                	jmp    c00039c2 <dir_find+0x125>
c000398a:	89 f8                	mov    eax,edi
c000398c:	84 c0                	test   al,al
c000398e:	75 0d                	jne    c000399d <dir_find+0x100>
c0003990:	89 e8                	mov    eax,ebp
c0003992:	e8 a9 e8 ff ff       	call   c0002240 <sum_sfn>
c0003997:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c000399b:	74 3f                	je     c00039dc <dir_find+0x13f>
c000399d:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039a1:	75 13                	jne    c00039b6 <dir_find+0x119>
c00039a3:	8d 53 20             	lea    edx,[ebx+0x20]
c00039a6:	b9 0b 00 00 00       	mov    ecx,0xb
c00039ab:	89 e8                	mov    eax,ebp
c00039ad:	e8 89 e4 ff ff       	call   c0001e3b <mem_cmp>
c00039b2:	85 c0                	test   eax,eax
c00039b4:	74 26                	je     c00039dc <dir_find+0x13f>
c00039b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c2:	31 d2                	xor    edx,edx
c00039c4:	89 d8                	mov    eax,ebx
c00039c6:	e8 ed fb ff ff       	call   c00035b8 <dir_next>
c00039cb:	89 c6                	mov    esi,eax
c00039cd:	85 c0                	test   eax,eax
c00039cf:	0f 84 fb fe ff ff    	je     c00038d0 <dir_find+0x33>
c00039d5:	eb 05                	jmp    c00039dc <dir_find+0x13f>
c00039d7:	be 04 00 00 00       	mov    esi,0x4
c00039dc:	83 c4 1c             	add    esp,0x1c
c00039df:	89 f0                	mov    eax,esi
c00039e1:	5b                   	pop    ebx
c00039e2:	5e                   	pop    esi
c00039e3:	5f                   	pop    edi
c00039e4:	5d                   	pop    ebp
c00039e5:	c3                   	ret    

c00039e6 <follow_path>:
c00039e6:	56                   	push   esi
c00039e7:	53                   	push   ebx
c00039e8:	89 c3                	mov    ebx,eax
c00039ea:	83 ec 14             	sub    esp,0x14
c00039ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00039ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039fa:	83 fa 2f             	cmp    edx,0x2f
c00039fd:	75 07                	jne    c0003a06 <follow_path+0x20>
c00039ff:	40                   	inc    eax
c0003a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a04:	eb ed                	jmp    c00039f3 <follow_path+0xd>
c0003a06:	83 fa 5c             	cmp    edx,0x5c
c0003a09:	74 f4                	je     c00039ff <follow_path+0x19>
c0003a0b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a15:	77 3e                	ja     c0003a55 <follow_path+0x6f>
c0003a17:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a1b:	31 d2                	xor    edx,edx
c0003a1d:	89 d8                	mov    eax,ebx
c0003a1f:	e8 03 f9 ff ff       	call   c0003327 <dir_sdi>
c0003a24:	eb 4f                	jmp    c0003a75 <follow_path+0x8f>
c0003a26:	89 d8                	mov    eax,ebx
c0003a28:	e8 70 fe ff ff       	call   c000389d <dir_find>
c0003a2d:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a30:	85 c0                	test   eax,eax
c0003a32:	75 32                	jne    c0003a66 <follow_path+0x80>
c0003a34:	80 e2 04             	and    dl,0x4
c0003a37:	75 3c                	jne    c0003a75 <follow_path+0x8f>
c0003a39:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a3d:	74 31                	je     c0003a70 <follow_path+0x8a>
c0003a3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a42:	25 ff 01 00 00       	and    eax,0x1ff
c0003a47:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a4b:	8a 06                	mov    al,BYTE PTR [esi]
c0003a4d:	e8 80 f7 ff ff       	call   c00031d2 <ld_clust.isra.0>
c0003a52:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a55:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 90 ef ff ff       	call   c00029f0 <create_name>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	74 c2                	je     c0003a26 <follow_path+0x40>
c0003a64:	eb 0f                	jmp    c0003a75 <follow_path+0x8f>
c0003a66:	83 f8 04             	cmp    eax,0x4
c0003a69:	75 0a                	jne    c0003a75 <follow_path+0x8f>
c0003a6b:	80 e2 04             	and    dl,0x4
c0003a6e:	75 05                	jne    c0003a75 <follow_path+0x8f>
c0003a70:	b8 05 00 00 00       	mov    eax,0x5
c0003a75:	83 c4 14             	add    esp,0x14
c0003a78:	5b                   	pop    ebx
c0003a79:	5e                   	pop    esi
c0003a7a:	c3                   	ret    

c0003a7b <dir_register>:
c0003a7b:	55                   	push   ebp
c0003a7c:	57                   	push   edi
c0003a7d:	56                   	push   esi
c0003a7e:	be 06 00 00 00       	mov    esi,0x6
c0003a83:	53                   	push   ebx
c0003a84:	83 ec 2c             	sub    esp,0x2c
c0003a87:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a8a:	80 e2 a0             	and    dl,0xa0
c0003a8d:	0f 85 66 01 00 00    	jne    c0003bf9 <dir_register+0x17e>
c0003a93:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a95:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a9d:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003aa0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aa4:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003aa9:	74 06                	je     c0003ab1 <dir_register+0x36>
c0003aab:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aaf:	eb ef                	jmp    c0003aa0 <dir_register+0x25>
c0003ab1:	89 c3                	mov    ebx,eax
c0003ab3:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003aba:	89 c2                	mov    edx,eax
c0003abc:	b9 0c 00 00 00       	mov    ecx,0xc
c0003ac1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ac5:	e8 51 e3 ff ff       	call   c0001e1b <mem_cpy>
c0003aca:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003acf:	74 48                	je     c0003b19 <dir_register+0x9e>
c0003ad1:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003ad5:	bd 01 00 00 00       	mov    ebp,0x1
c0003ada:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003add:	55                   	push   ebp
c0003ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ae6:	e8 93 e6 ff ff       	call   c000217e <gen_numname>
c0003aeb:	58                   	pop    eax
c0003aec:	89 d8                	mov    eax,ebx
c0003aee:	e8 aa fd ff ff       	call   c000389d <dir_find>
c0003af3:	89 c6                	mov    esi,eax
c0003af5:	85 c0                	test   eax,eax
c0003af7:	75 10                	jne    c0003b09 <dir_register+0x8e>
c0003af9:	45                   	inc    ebp
c0003afa:	83 fd 64             	cmp    ebp,0x64
c0003afd:	75 db                	jne    c0003ada <dir_register+0x5f>
c0003aff:	be 07 00 00 00       	mov    esi,0x7
c0003b04:	e9 f0 00 00 00       	jmp    c0003bf9 <dir_register+0x17e>
c0003b09:	83 f8 04             	cmp    eax,0x4
c0003b0c:	0f 85 e7 00 00 00    	jne    c0003bf9 <dir_register+0x17e>
c0003b12:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b16:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b19:	bd 01 00 00 00       	mov    ebp,0x1
c0003b1e:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b23:	74 13                	je     c0003b38 <dir_register+0xbd>
c0003b25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b29:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b2e:	83 c0 0c             	add    eax,0xc
c0003b31:	31 d2                	xor    edx,edx
c0003b33:	f7 f1                	div    ecx
c0003b35:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b38:	89 ea                	mov    edx,ebp
c0003b3a:	89 d8                	mov    eax,ebx
c0003b3c:	e8 7c fb ff ff       	call   c00036bd <dir_alloc>
c0003b41:	89 c6                	mov    esi,eax
c0003b43:	85 c0                	test   eax,eax
c0003b45:	0f 85 ae 00 00 00    	jne    c0003bf9 <dir_register+0x17e>
c0003b4b:	4d                   	dec    ebp
c0003b4c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b50:	74 67                	je     c0003bb9 <dir_register+0x13e>
c0003b52:	89 e8                	mov    eax,ebp
c0003b54:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b57:	c1 e0 05             	shl    eax,0x5
c0003b5a:	29 c2                	sub    edx,eax
c0003b5c:	89 d8                	mov    eax,ebx
c0003b5e:	e8 c4 f7 ff ff       	call   c0003327 <dir_sdi>
c0003b63:	89 c6                	mov    esi,eax
c0003b65:	85 c0                	test   eax,eax
c0003b67:	0f 85 8c 00 00 00    	jne    c0003bf9 <dir_register+0x17e>
c0003b6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b71:	e8 ca e6 ff ff       	call   c0002240 <sum_sfn>
c0003b76:	0f b6 e8             	movzx  ebp,al
c0003b79:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b7c:	89 f8                	mov    eax,edi
c0003b7e:	e8 d3 e7 ff ff       	call   c0002356 <move_window>
c0003b83:	89 c6                	mov    esi,eax
c0003b85:	85 c0                	test   eax,eax
c0003b87:	75 70                	jne    c0003bf9 <dir_register+0x17e>
c0003b89:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b8e:	83 ec 0c             	sub    esp,0xc
c0003b91:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b94:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b97:	55                   	push   ebp
c0003b98:	e8 46 e5 ff ff       	call   c00020e3 <put_lfn>
c0003b9d:	31 d2                	xor    edx,edx
c0003b9f:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ba3:	89 d8                	mov    eax,ebx
c0003ba5:	e8 0e fa ff ff       	call   c00035b8 <dir_next>
c0003baa:	83 c4 10             	add    esp,0x10
c0003bad:	89 c6                	mov    esi,eax
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	75 46                	jne    c0003bf9 <dir_register+0x17e>
c0003bb3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bb7:	75 c0                	jne    c0003b79 <dir_register+0xfe>
c0003bb9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bbc:	89 f8                	mov    eax,edi
c0003bbe:	e8 93 e7 ff ff       	call   c0002356 <move_window>
c0003bc3:	89 c6                	mov    esi,eax
c0003bc5:	85 c0                	test   eax,eax
c0003bc7:	75 30                	jne    c0003bf9 <dir_register+0x17e>
c0003bc9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bcc:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd1:	31 d2                	xor    edx,edx
c0003bd3:	e8 58 e2 ff ff       	call   c0001e30 <mem_set>
c0003bd8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bdb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bdf:	b9 0b 00 00 00       	mov    ecx,0xb
c0003be4:	e8 32 e2 ff ff       	call   c0001e1b <mem_cpy>
c0003be9:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003bec:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bef:	83 e0 18             	and    eax,0x18
c0003bf2:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bf5:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bf9:	83 c4 2c             	add    esp,0x2c
c0003bfc:	89 f0                	mov    eax,esi
c0003bfe:	5b                   	pop    ebx
c0003bff:	5e                   	pop    esi
c0003c00:	5f                   	pop    edi
c0003c01:	5d                   	pop    ebp
c0003c02:	c3                   	ret    

c0003c03 <f_mount>:
c0003c03:	53                   	push   ebx
c0003c04:	83 ec 18             	sub    esp,0x18
c0003c07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c17:	e8 44 e6 ff ff       	call   c0002260 <get_ldnumber>
c0003c1c:	89 c2                	mov    edx,eax
c0003c1e:	b8 0b 00 00 00       	mov    eax,0xb
c0003c23:	85 d2                	test   edx,edx
c0003c25:	78 39                	js     c0003c60 <f_mount+0x5d>
c0003c27:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x32>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	85 c0                	test   eax,eax
c0003c3b:	74 03                	je     c0003c40 <f_mount+0x3d>
c0003c3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c44:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c4b:	31 c0                	xor    eax,eax
c0003c4d:	84 db                	test   bl,bl
c0003c4f:	74 0f                	je     c0003c60 <f_mount+0x5d>
c0003c51:	31 c9                	xor    ecx,ecx
c0003c53:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c5b:	e8 4d e8 ff ff       	call   c00024ad <mount_volume>
c0003c60:	83 c4 18             	add    esp,0x18
c0003c63:	5b                   	pop    ebx
c0003c64:	c3                   	ret    

c0003c65 <f_open>:
c0003c65:	55                   	push   ebp
c0003c66:	b8 09 00 00 00       	mov    eax,0x9
c0003c6b:	57                   	push   edi
c0003c6c:	56                   	push   esi
c0003c6d:	53                   	push   ebx
c0003c6e:	83 ec 5c             	sub    esp,0x5c
c0003c71:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c75:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c79:	85 db                	test   ebx,ebx
c0003c7b:	0f 84 9f 02 00 00    	je     c0003f20 <f_open+0x2bb>
c0003c81:	89 fd                	mov    ebp,edi
c0003c83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c87:	83 e5 3f             	and    ebp,0x3f
c0003c8a:	89 e8                	mov    eax,ebp
c0003c8c:	89 ee                	mov    esi,ebp
c0003c8e:	0f b6 c8             	movzx  ecx,al
c0003c91:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c95:	e8 13 e8 ff ff       	call   c00024ad <mount_volume>
c0003c9a:	85 c0                	test   eax,eax
c0003c9c:	0f 85 78 02 00 00    	jne    c0003f1a <f_open+0x2b5>
c0003ca2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ca6:	83 ec 0c             	sub    esp,0xc
c0003ca9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cad:	68 00 02 00 00       	push   0x200
c0003cb2:	e8 75 1f 00 00       	call   c0005c2c <ff_memalloc>
c0003cb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cbb:	83 c4 10             	add    esp,0x10
c0003cbe:	b8 11 00 00 00       	mov    eax,0x11
c0003cc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cc8:	0f 84 52 02 00 00    	je     c0003f20 <f_open+0x2bb>
c0003cce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cd2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003cd6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003cda:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cdd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ce1:	e8 00 fd ff ff       	call   c00039e6 <follow_path>
c0003ce6:	85 c0                	test   eax,eax
c0003ce8:	75 0c                	jne    c0003cf6 <f_open+0x91>
c0003cea:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003cef:	74 05                	je     c0003cf6 <f_open+0x91>
c0003cf1:	b8 06 00 00 00       	mov    eax,0x6
c0003cf6:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cfc:	0f 84 d5 00 00 00    	je     c0003dd7 <f_open+0x172>
c0003d02:	85 c0                	test   eax,eax
c0003d04:	74 21                	je     c0003d27 <f_open+0xc2>
c0003d06:	83 f8 04             	cmp    eax,0x4
c0003d09:	0f 85 f0 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003d0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d13:	e8 63 fd ff ff       	call   c0003a7b <dir_register>
c0003d18:	85 c0                	test   eax,eax
c0003d1a:	0f 85 df 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003d20:	83 cd 08             	or     ebp,0x8
c0003d23:	89 ee                	mov    esi,ebp
c0003d25:	eb 2c                	jmp    c0003d53 <f_open+0xee>
c0003d27:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d2b:	b8 07 00 00 00       	mov    eax,0x7
c0003d30:	80 e2 11             	and    dl,0x11
c0003d33:	0f 85 c6 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003d39:	b8 08 00 00 00       	mov    eax,0x8
c0003d3e:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d44:	0f 85 b5 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003d4a:	83 e7 08             	and    edi,0x8
c0003d4d:	0f 84 b1 00 00 00    	je     c0003e04 <f_open+0x19f>
c0003d53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d57:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d5b:	89 ea                	mov    edx,ebp
c0003d5d:	8a 00                	mov    al,BYTE PTR [eax]
c0003d5f:	e8 6e f4 ff ff       	call   c00031d2 <ld_clust.isra.0>
c0003d64:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d69:	89 c7                	mov    edi,eax
c0003d6b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d6e:	e8 a5 e0 ff ff       	call   c0001e18 <st_dword>
c0003d73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d77:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d7b:	31 c9                	xor    ecx,ecx
c0003d7d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d85:	e8 71 f4 ff ff       	call   c00031fb <st_clust.isra.1>
c0003d8a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d8e:	83 c0 1c             	add    eax,0x1c
c0003d91:	31 d2                	xor    edx,edx
c0003d93:	e8 80 e0 ff ff       	call   c0001e18 <st_dword>
c0003d98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9c:	85 ff                	test   edi,edi
c0003d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003da2:	74 60                	je     c0003e04 <f_open+0x19f>
c0003da4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003da8:	31 c9                	xor    ecx,ecx
c0003daa:	89 fa                	mov    edx,edi
c0003dac:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003daf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003db3:	e8 72 f7 ff ff       	call   c000352a <remove_chain>
c0003db8:	85 c0                	test   eax,eax
c0003dba:	0f 85 3f 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003dc0:	89 ea                	mov    edx,ebp
c0003dc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dc6:	e8 8b e5 ff ff       	call   c0002356 <move_window>
c0003dcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dcf:	4f                   	dec    edi
c0003dd0:	85 c0                	test   eax,eax
c0003dd2:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dd5:	eb 27                	jmp    c0003dfe <f_open+0x199>
c0003dd7:	85 c0                	test   eax,eax
c0003dd9:	0f 85 20 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003ddf:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003de3:	b8 04 00 00 00       	mov    eax,0x4
c0003de8:	f6 c2 10             	test   dl,0x10
c0003deb:	0f 85 0e 01 00 00    	jne    c0003eff <f_open+0x29a>
c0003df1:	83 e7 02             	and    edi,0x2
c0003df4:	74 0e                	je     c0003e04 <f_open+0x19f>
c0003df6:	b8 07 00 00 00       	mov    eax,0x7
c0003dfb:	80 e2 01             	and    dl,0x1
c0003dfe:	0f 85 fb 00 00 00    	jne    c0003eff <f_open+0x29a>
c0003e04:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e0a:	74 03                	je     c0003e0f <f_open+0x1aa>
c0003e0c:	83 ce 40             	or     esi,0x40
c0003e0f:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e13:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e17:	89 fa                	mov    edx,edi
c0003e19:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e1c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e22:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e25:	e8 a8 f3 ff ff       	call   c00031d2 <ld_clust.isra.0>
c0003e2a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e2d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e30:	e8 c7 df ff ff       	call   c0001dfc <ld_dword>
c0003e35:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e37:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e3a:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e3d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e41:	31 d2                	xor    edx,edx
c0003e43:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e47:	89 f0                	mov    eax,esi
c0003e49:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e4c:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e50:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e57:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e5e:	b9 00 02 00 00       	mov    ecx,0x200
c0003e63:	89 f8                	mov    eax,edi
c0003e65:	e8 c6 df ff ff       	call   c0001e30 <mem_set>
c0003e6a:	83 e6 20             	and    esi,0x20
c0003e6d:	75 07                	jne    c0003e76 <f_open+0x211>
c0003e6f:	31 c0                	xor    eax,eax
c0003e71:	e9 89 00 00 00       	jmp    c0003eff <f_open+0x29a>
c0003e76:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e79:	85 ed                	test   ebp,ebp
c0003e7b:	74 f2                	je     c0003e6f <f_open+0x20a>
c0003e7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e81:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e84:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e87:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e8b:	c1 e6 09             	shl    esi,0x9
c0003e8e:	31 c0                	xor    eax,eax
c0003e90:	85 c0                	test   eax,eax
c0003e92:	75 23                	jne    c0003eb7 <f_open+0x252>
c0003e94:	39 f5                	cmp    ebp,esi
c0003e96:	76 1f                	jbe    c0003eb7 <f_open+0x252>
c0003e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e9a:	e8 84 f3 ff ff       	call   c0003223 <get_fat.isra.2>
c0003e9f:	89 c2                	mov    edx,eax
c0003ea1:	b8 02 00 00 00       	mov    eax,0x2
c0003ea6:	83 fa 01             	cmp    edx,0x1
c0003ea9:	76 08                	jbe    c0003eb3 <f_open+0x24e>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	83 fa ff             	cmp    edx,0xffffffff
c0003eb0:	0f 94 c0             	sete   al
c0003eb3:	29 f5                	sub    ebp,esi
c0003eb5:	eb d9                	jmp    c0003e90 <f_open+0x22b>
c0003eb7:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eba:	85 c0                	test   eax,eax
c0003ebc:	75 41                	jne    c0003eff <f_open+0x29a>
c0003ebe:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003ec4:	74 a9                	je     c0003e6f <f_open+0x20a>
c0003ec6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003eca:	89 f0                	mov    eax,esi
c0003ecc:	e8 75 e1 ff ff       	call   c0002046 <clst2sect>
c0003ed1:	89 c2                	mov    edx,eax
c0003ed3:	b8 02 00 00 00       	mov    eax,0x2
c0003ed8:	85 d2                	test   edx,edx
c0003eda:	74 23                	je     c0003eff <f_open+0x29a>
c0003edc:	c1 ed 09             	shr    ebp,0x9
c0003edf:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ee3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003ee6:	6a 01                	push   0x1
c0003ee8:	50                   	push   eax
c0003ee9:	57                   	push   edi
c0003eea:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003eee:	50                   	push   eax
c0003eef:	e8 b0 de ff ff       	call   c0001da4 <disk_read>
c0003ef4:	83 c4 10             	add    esp,0x10
c0003ef7:	85 c0                	test   eax,eax
c0003ef9:	0f 95 c0             	setne  al
c0003efc:	0f b6 c0             	movzx  eax,al
c0003eff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f03:	83 ec 0c             	sub    esp,0xc
c0003f06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f0a:	e8 35 1d 00 00       	call   c0005c44 <ff_memfree>
c0003f0f:	83 c4 10             	add    esp,0x10
c0003f12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f16:	85 c0                	test   eax,eax
c0003f18:	74 06                	je     c0003f20 <f_open+0x2bb>
c0003f1a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f20:	83 c4 5c             	add    esp,0x5c
c0003f23:	5b                   	pop    ebx
c0003f24:	5e                   	pop    esi
c0003f25:	5f                   	pop    edi
c0003f26:	5d                   	pop    ebp
c0003f27:	c3                   	ret    

c0003f28 <f_read>:
c0003f28:	55                   	push   ebp
c0003f29:	57                   	push   edi
c0003f2a:	56                   	push   esi
c0003f2b:	53                   	push   ebx
c0003f2c:	83 ec 2c             	sub    esp,0x2c
c0003f2f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f37:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f45:	89 d8                	mov    eax,ebx
c0003f47:	e8 61 e3 ff ff       	call   c00022ad <validate>
c0003f4c:	89 c5                	mov    ebp,eax
c0003f4e:	85 c0                	test   eax,eax
c0003f50:	0f 85 c7 01 00 00    	jne    c000411d <f_read+0x1f5>
c0003f56:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f5a:	85 ed                	test   ebp,ebp
c0003f5c:	0f 85 bb 01 00 00    	jne    c000411d <f_read+0x1f5>
c0003f62:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f66:	0f 84 ac 01 00 00    	je     c0004118 <f_read+0x1f0>
c0003f6c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f6f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f76:	39 f0                	cmp    eax,esi
c0003f78:	0f 86 b0 00 00 00    	jbe    c000402e <f_read+0x106>
c0003f7e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f82:	e9 a7 00 00 00       	jmp    c000402e <f_read+0x106>
c0003f87:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f8a:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f8f:	0f 85 56 01 00 00    	jne    c00040eb <f_read+0x1c3>
c0003f95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f99:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f9d:	89 c2                	mov    edx,eax
c0003f9f:	4f                   	dec    edi
c0003fa0:	c1 ea 09             	shr    edx,0x9
c0003fa3:	21 d7                	and    edi,edx
c0003fa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003fa9:	0f 84 8f 00 00 00    	je     c000403e <f_read+0x116>
c0003faf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fb3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fb6:	89 c8                	mov    eax,ecx
c0003fb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fbc:	e8 85 e0 ff ff       	call   c0002046 <clst2sect>
c0003fc1:	85 c0                	test   eax,eax
c0003fc3:	0f 84 8d 00 00 00    	je     c0004056 <f_read+0x12e>
c0003fc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fcd:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fd5:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fdc:	0f 86 bf 00 00 00    	jbe    c00040a1 <f_read+0x179>
c0003fe2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fea:	c1 ee 09             	shr    esi,0x9
c0003fed:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ff1:	01 f2                	add    edx,esi
c0003ff3:	39 c2                	cmp    edx,eax
c0003ff5:	76 06                	jbe    c0003ffd <f_read+0xd5>
c0003ff7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ffb:	89 c6                	mov    esi,eax
c0003ffd:	56                   	push   esi
c0003ffe:	57                   	push   edi
c0003fff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004003:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004007:	50                   	push   eax
c0004008:	e8 97 dd ff ff       	call   c0001da4 <disk_read>
c000400d:	83 c4 10             	add    esp,0x10
c0004010:	85 c0                	test   eax,eax
c0004012:	75 55                	jne    c0004069 <f_read+0x141>
c0004014:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004018:	75 65                	jne    c000407f <f_read+0x157>
c000401a:	c1 e6 09             	shl    esi,0x9
c000401d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004021:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004025:	01 30                	add    DWORD PTR [eax],esi
c0004027:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000402b:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000402e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004033:	0f 85 4e ff ff ff    	jne    c0003f87 <f_read+0x5f>
c0004039:	e9 df 00 00 00       	jmp    c000411d <f_read+0x1f5>
c000403e:	85 c0                	test   eax,eax
c0004040:	75 05                	jne    c0004047 <f_read+0x11f>
c0004042:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004045:	eb 0a                	jmp    c0004051 <f_read+0x129>
c0004047:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000404a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000404c:	e8 d2 f1 ff ff       	call   c0003223 <get_fat.isra.2>
c0004051:	83 f8 01             	cmp    eax,0x1
c0004054:	77 0e                	ja     c0004064 <f_read+0x13c>
c0004056:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000405a:	bd 02 00 00 00       	mov    ebp,0x2
c000405f:	e9 b9 00 00 00       	jmp    c000411d <f_read+0x1f5>
c0004064:	83 f8 ff             	cmp    eax,0xffffffff
c0004067:	75 0e                	jne    c0004077 <f_read+0x14f>
c0004069:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000406d:	bd 01 00 00 00       	mov    ebp,0x1
c0004072:	e9 a6 00 00 00       	jmp    c000411d <f_read+0x1f5>
c0004077:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000407a:	e9 30 ff ff ff       	jmp    c0003faf <f_read+0x87>
c000407f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004082:	29 f8                	sub    eax,edi
c0004084:	39 f0                	cmp    eax,esi
c0004086:	73 92                	jae    c000401a <f_read+0xf2>
c0004088:	c1 e0 09             	shl    eax,0x9
c000408b:	8d 53 28             	lea    edx,[ebx+0x28]
c000408e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004092:	b9 00 02 00 00       	mov    ecx,0x200
c0004097:	e8 7f dd ff ff       	call   c0001e1b <mem_cpy>
c000409c:	e9 79 ff ff ff       	jmp    c000401a <f_read+0xf2>
c00040a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040a4:	39 f8                	cmp    eax,edi
c00040a6:	74 40                	je     c00040e8 <f_read+0x1c0>
c00040a8:	8d 73 28             	lea    esi,[ebx+0x28]
c00040ab:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040af:	74 1e                	je     c00040cf <f_read+0x1a7>
c00040b1:	6a 01                	push   0x1
c00040b3:	50                   	push   eax
c00040b4:	56                   	push   esi
c00040b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040b9:	50                   	push   eax
c00040ba:	e8 fb dc ff ff       	call   c0001dba <disk_write>
c00040bf:	83 c4 10             	add    esp,0x10
c00040c2:	85 c0                	test   eax,eax
c00040c4:	75 a3                	jne    c0004069 <f_read+0x141>
c00040c6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040c9:	83 e0 7f             	and    eax,0x7f
c00040cc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040cf:	6a 01                	push   0x1
c00040d1:	57                   	push   edi
c00040d2:	56                   	push   esi
c00040d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040db:	50                   	push   eax
c00040dc:	e8 c3 dc ff ff       	call   c0001da4 <disk_read>
c00040e1:	83 c4 10             	add    esp,0x10
c00040e4:	85 c0                	test   eax,eax
c00040e6:	75 81                	jne    c0004069 <f_read+0x141>
c00040e8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040ee:	ba 00 02 00 00       	mov    edx,0x200
c00040f3:	25 ff 01 00 00       	and    eax,0x1ff
c00040f8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040fc:	29 c2                	sub    edx,eax
c00040fe:	39 d6                	cmp    esi,edx
c0004100:	76 02                	jbe    c0004104 <f_read+0x1dc>
c0004102:	89 d6                	mov    esi,edx
c0004104:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004108:	89 f1                	mov    ecx,esi
c000410a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000410e:	e8 08 dd ff ff       	call   c0001e1b <mem_cpy>
c0004113:	e9 05 ff ff ff       	jmp    c000401d <f_read+0xf5>
c0004118:	bd 07 00 00 00       	mov    ebp,0x7
c000411d:	83 c4 2c             	add    esp,0x2c
c0004120:	89 e8                	mov    eax,ebp
c0004122:	5b                   	pop    ebx
c0004123:	5e                   	pop    esi
c0004124:	5f                   	pop    edi
c0004125:	5d                   	pop    ebp
c0004126:	c3                   	ret    

c0004127 <f_write>:
c0004127:	55                   	push   ebp
c0004128:	57                   	push   edi
c0004129:	56                   	push   esi
c000412a:	53                   	push   ebx
c000412b:	83 ec 2c             	sub    esp,0x2c
c000412e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004132:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004136:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000413a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004140:	89 d8                	mov    eax,ebx
c0004142:	e8 66 e1 ff ff       	call   c00022ad <validate>
c0004147:	89 c5                	mov    ebp,eax
c0004149:	85 c0                	test   eax,eax
c000414b:	0f 85 14 02 00 00    	jne    c0004365 <f_write+0x23e>
c0004151:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004155:	85 ed                	test   ebp,ebp
c0004157:	0f 85 08 02 00 00    	jne    c0004365 <f_write+0x23e>
c000415d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004161:	0f 84 f9 01 00 00    	je     c0004360 <f_write+0x239>
c0004167:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000416a:	89 c7                	mov    edi,eax
c000416c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004170:	0f 83 ef 00 00 00    	jae    c0004265 <f_write+0x13e>
c0004176:	f7 d0                	not    eax
c0004178:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000417c:	e9 e4 00 00 00       	jmp    c0004265 <f_write+0x13e>
c0004181:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004184:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000418a:	0f 85 9a 01 00 00    	jne    c000432a <f_write+0x203>
c0004190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004194:	89 d1                	mov    ecx,edx
c0004196:	c1 e9 09             	shr    ecx,0x9
c0004199:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000419d:	48                   	dec    eax
c000419e:	21 c8                	and    eax,ecx
c00041a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041a4:	0f 84 c8 00 00 00    	je     c0004272 <f_write+0x14b>
c00041aa:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ae:	0f 85 22 01 00 00    	jne    c00042d6 <f_write+0x1af>
c00041b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041b8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041bb:	89 c8                	mov    eax,ecx
c00041bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c1:	e8 80 de ff ff       	call   c0002046 <clst2sect>
c00041c6:	85 c0                	test   eax,eax
c00041c8:	0f 84 d2 00 00 00    	je     c00042a0 <f_write+0x179>
c00041ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d6:	01 c7                	add    edi,eax
c00041d8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041e0:	0f 86 1c 01 00 00    	jbe    c0004302 <f_write+0x1db>
c00041e6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ee:	c1 ee 09             	shr    esi,0x9
c00041f1:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041f5:	01 f2                	add    edx,esi
c00041f7:	39 c2                	cmp    edx,eax
c00041f9:	76 06                	jbe    c0004201 <f_write+0xda>
c00041fb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041ff:	89 c6                	mov    esi,eax
c0004201:	56                   	push   esi
c0004202:	57                   	push   edi
c0004203:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004207:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000420b:	50                   	push   eax
c000420c:	e8 a9 db ff ff       	call   c0001dba <disk_write>
c0004211:	83 c4 10             	add    esp,0x10
c0004214:	85 c0                	test   eax,eax
c0004216:	0f 85 97 00 00 00    	jne    c00042b3 <f_write+0x18c>
c000421c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000421f:	29 fa                	sub    edx,edi
c0004221:	39 f2                	cmp    edx,esi
c0004223:	73 1d                	jae    c0004242 <f_write+0x11b>
c0004225:	c1 e2 09             	shl    edx,0x9
c0004228:	8d 43 28             	lea    eax,[ebx+0x28]
c000422b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000422f:	b9 00 02 00 00       	mov    ecx,0x200
c0004234:	e8 e2 db ff ff       	call   c0001e1b <mem_cpy>
c0004239:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000423c:	83 e0 7f             	and    eax,0x7f
c000423f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004242:	c1 e6 09             	shl    esi,0x9
c0004245:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004249:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000424d:	01 30                	add    DWORD PTR [eax],esi
c000424f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004253:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004256:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004259:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000425c:	39 f0                	cmp    eax,esi
c000425e:	73 02                	jae    c0004262 <f_write+0x13b>
c0004260:	89 f0                	mov    eax,esi
c0004262:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004265:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000426a:	0f 85 11 ff ff ff    	jne    c0004181 <f_write+0x5a>
c0004270:	eb 1b                	jmp    c000428d <f_write+0x166>
c0004272:	85 d2                	test   edx,edx
c0004274:	75 09                	jne    c000427f <f_write+0x158>
c0004276:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004279:	85 c0                	test   eax,eax
c000427b:	75 1e                	jne    c000429b <f_write+0x174>
c000427d:	eb 03                	jmp    c0004282 <f_write+0x15b>
c000427f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004282:	89 d8                	mov    eax,ebx
c0004284:	e8 66 f1 ff ff       	call   c00033ef <create_chain>
c0004289:	85 c0                	test   eax,eax
c000428b:	75 0e                	jne    c000429b <f_write+0x174>
c000428d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004290:	83 c8 40             	or     eax,0x40
c0004293:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004296:	e9 ca 00 00 00       	jmp    c0004365 <f_write+0x23e>
c000429b:	83 f8 01             	cmp    eax,0x1
c000429e:	75 0e                	jne    c00042ae <f_write+0x187>
c00042a0:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042a4:	bd 02 00 00 00       	mov    ebp,0x2
c00042a9:	e9 b7 00 00 00       	jmp    c0004365 <f_write+0x23e>
c00042ae:	83 f8 ff             	cmp    eax,0xffffffff
c00042b1:	75 0e                	jne    c00042c1 <f_write+0x19a>
c00042b3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042b7:	bd 01 00 00 00       	mov    ebp,0x1
c00042bc:	e9 a4 00 00 00       	jmp    c0004365 <f_write+0x23e>
c00042c1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042c4:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042c8:	0f 85 dc fe ff ff    	jne    c00041aa <f_write+0x83>
c00042ce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042d1:	e9 d4 fe ff ff       	jmp    c00041aa <f_write+0x83>
c00042d6:	6a 01                	push   0x1
c00042d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042db:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042de:	50                   	push   eax
c00042df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042e3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042e7:	50                   	push   eax
c00042e8:	e8 cd da ff ff       	call   c0001dba <disk_write>
c00042ed:	83 c4 10             	add    esp,0x10
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 bf                	jne    c00042b3 <f_write+0x18c>
c00042f4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042f7:	83 e0 7f             	and    eax,0x7f
c00042fa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042fd:	e9 b2 fe ff ff       	jmp    c00041b4 <f_write+0x8d>
c0004302:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c0004305:	74 20                	je     c0004327 <f_write+0x200>
c0004307:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000430a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000430d:	76 18                	jbe    c0004327 <f_write+0x200>
c000430f:	6a 01                	push   0x1
c0004311:	8d 43 28             	lea    eax,[ebx+0x28]
c0004314:	57                   	push   edi
c0004315:	50                   	push   eax
c0004316:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000431a:	50                   	push   eax
c000431b:	e8 84 da ff ff       	call   c0001da4 <disk_read>
c0004320:	83 c4 10             	add    esp,0x10
c0004323:	85 c0                	test   eax,eax
c0004325:	75 8c                	jne    c00042b3 <f_write+0x18c>
c0004327:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000432a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000432d:	ba 00 02 00 00       	mov    edx,0x200
c0004332:	25 ff 01 00 00       	and    eax,0x1ff
c0004337:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000433b:	29 c2                	sub    edx,eax
c000433d:	39 d6                	cmp    esi,edx
c000433f:	76 02                	jbe    c0004343 <f_write+0x21c>
c0004341:	89 d6                	mov    esi,edx
c0004343:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004347:	89 f1                	mov    ecx,esi
c0004349:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000434d:	e8 c9 da ff ff       	call   c0001e1b <mem_cpy>
c0004352:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004355:	83 c8 80             	or     eax,0xffffff80
c0004358:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000435b:	e9 e5 fe ff ff       	jmp    c0004245 <f_write+0x11e>
c0004360:	bd 07 00 00 00       	mov    ebp,0x7
c0004365:	83 c4 2c             	add    esp,0x2c
c0004368:	89 e8                	mov    eax,ebp
c000436a:	5b                   	pop    ebx
c000436b:	5e                   	pop    esi
c000436c:	5f                   	pop    edi
c000436d:	5d                   	pop    ebp
c000436e:	c3                   	ret    

c000436f <f_sync>:
c000436f:	56                   	push   esi
c0004370:	53                   	push   ebx
c0004371:	83 ec 14             	sub    esp,0x14
c0004374:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004378:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000437c:	89 d8                	mov    eax,ebx
c000437e:	e8 2a df ff ff       	call   c00022ad <validate>
c0004383:	85 c0                	test   eax,eax
c0004385:	0f 85 a3 00 00 00    	jne    c000442e <f_sync+0xbf>
c000438b:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000438e:	f6 c2 40             	test   dl,0x40
c0004391:	0f 84 97 00 00 00    	je     c000442e <f_sync+0xbf>
c0004397:	80 e2 80             	and    dl,0x80
c000439a:	74 2e                	je     c00043ca <f_sync+0x5b>
c000439c:	6a 01                	push   0x1
c000439e:	8d 43 28             	lea    eax,[ebx+0x28]
c00043a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043a4:	50                   	push   eax
c00043a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043ad:	50                   	push   eax
c00043ae:	e8 07 da ff ff       	call   c0001dba <disk_write>
c00043b3:	89 c2                	mov    edx,eax
c00043b5:	83 c4 10             	add    esp,0x10
c00043b8:	b8 01 00 00 00       	mov    eax,0x1
c00043bd:	85 d2                	test   edx,edx
c00043bf:	75 6d                	jne    c000442e <f_sync+0xbf>
c00043c1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043c4:	83 e0 7f             	and    eax,0x7f
c00043c7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043ca:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043d1:	e8 80 df ff ff       	call   c0002356 <move_window>
c00043d6:	85 c0                	test   eax,eax
c00043d8:	75 54                	jne    c000442e <f_sync+0xbf>
c00043da:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043dd:	89 f2                	mov    edx,esi
c00043df:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043e2:	83 c8 20             	or     eax,0x20
c00043e5:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043e8:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ed:	e8 09 ee ff ff       	call   c00031fb <st_clust.isra.1>
c00043f2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043f5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043f8:	e8 1b da ff ff       	call   c0001e18 <st_dword>
c00043fd:	8d 46 16             	lea    eax,[esi+0x16]
c0004400:	ba 00 00 21 50       	mov    edx,0x50210000
c0004405:	e8 0e da ff ff       	call   c0001e18 <st_dword>
c000440a:	31 d2                	xor    edx,edx
c000440c:	8d 46 12             	lea    eax,[esi+0x12]
c000440f:	e8 00 da ff ff       	call   c0001e14 <st_word>
c0004414:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004418:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000441c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004420:	e8 56 e9 ff ff       	call   c0002d7b <sync_fs>
c0004425:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004428:	83 e2 bf             	and    edx,0xffffffbf
c000442b:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000442e:	83 c4 14             	add    esp,0x14
c0004431:	5b                   	pop    ebx
c0004432:	5e                   	pop    esi
c0004433:	c3                   	ret    

c0004434 <f_close>:
c0004434:	53                   	push   ebx
c0004435:	83 ec 24             	sub    esp,0x24
c0004438:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000443c:	53                   	push   ebx
c000443d:	e8 2d ff ff ff       	call   c000436f <f_sync>
c0004442:	83 c4 10             	add    esp,0x10
c0004445:	85 c0                	test   eax,eax
c0004447:	75 15                	jne    c000445e <f_close+0x2a>
c0004449:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000444d:	89 d8                	mov    eax,ebx
c000444f:	e8 59 de ff ff       	call   c00022ad <validate>
c0004454:	85 c0                	test   eax,eax
c0004456:	75 06                	jne    c000445e <f_close+0x2a>
c0004458:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000445e:	83 c4 18             	add    esp,0x18
c0004461:	5b                   	pop    ebx
c0004462:	c3                   	ret    

c0004463 <f_lseek>:
c0004463:	55                   	push   ebp
c0004464:	57                   	push   edi
c0004465:	56                   	push   esi
c0004466:	53                   	push   ebx
c0004467:	83 ec 2c             	sub    esp,0x2c
c000446a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000446e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004472:	89 d8                	mov    eax,ebx
c0004474:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004478:	e8 30 de ff ff       	call   c00022ad <validate>
c000447d:	89 c5                	mov    ebp,eax
c000447f:	85 c0                	test   eax,eax
c0004481:	0f 85 83 01 00 00    	jne    c000460a <f_lseek+0x1a7>
c0004487:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000448b:	85 ed                	test   ebp,ebp
c000448d:	0f 85 77 01 00 00    	jne    c000460a <f_lseek+0x1a7>
c0004493:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004496:	39 f0                	cmp    eax,esi
c0004498:	73 08                	jae    c00044a2 <f_lseek+0x3f>
c000449a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000449e:	75 02                	jne    c00044a2 <f_lseek+0x3f>
c00044a0:	89 c6                	mov    esi,eax
c00044a2:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044a5:	85 f6                	test   esi,esi
c00044a7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044ae:	75 07                	jne    c00044b7 <f_lseek+0x54>
c00044b0:	31 f6                	xor    esi,esi
c00044b2:	e9 e2 00 00 00       	jmp    c0004599 <f_lseek+0x136>
c00044b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044bb:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044bf:	c1 e7 09             	shl    edi,0x9
c00044c2:	85 c9                	test   ecx,ecx
c00044c4:	74 28                	je     c00044ee <f_lseek+0x8b>
c00044c6:	31 d2                	xor    edx,edx
c00044c8:	8d 46 ff             	lea    eax,[esi-0x1]
c00044cb:	f7 f7                	div    edi
c00044cd:	49                   	dec    ecx
c00044ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044d2:	31 d2                	xor    edx,edx
c00044d4:	89 c8                	mov    eax,ecx
c00044d6:	f7 f7                	div    edi
c00044d8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044dc:	72 10                	jb     c00044ee <f_lseek+0x8b>
c00044de:	89 f8                	mov    eax,edi
c00044e0:	f7 d8                	neg    eax
c00044e2:	21 c1                	and    ecx,eax
c00044e4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044e7:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044ea:	29 ce                	sub    esi,ecx
c00044ec:	eb 3c                	jmp    c000452a <f_lseek+0xc7>
c00044ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044f1:	85 c0                	test   eax,eax
c00044f3:	75 32                	jne    c0004527 <f_lseek+0xc4>
c00044f5:	31 d2                	xor    edx,edx
c00044f7:	89 d8                	mov    eax,ebx
c00044f9:	e8 f1 ee ff ff       	call   c00033ef <create_chain>
c00044fe:	83 f8 01             	cmp    eax,0x1
c0004501:	75 0e                	jne    c0004511 <f_lseek+0xae>
c0004503:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004507:	bd 02 00 00 00       	mov    ebp,0x2
c000450c:	e9 f9 00 00 00       	jmp    c000460a <f_lseek+0x1a7>
c0004511:	83 f8 ff             	cmp    eax,0xffffffff
c0004514:	75 0e                	jne    c0004524 <f_lseek+0xc1>
c0004516:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000451a:	bd 01 00 00 00       	mov    ebp,0x1
c000451f:	e9 e6 00 00 00       	jmp    c000460a <f_lseek+0x1a7>
c0004524:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004527:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000452a:	85 c0                	test   eax,eax
c000452c:	74 82                	je     c00044b0 <f_lseek+0x4d>
c000452e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004531:	39 fe                	cmp    esi,edi
c0004533:	76 3d                	jbe    c0004572 <f_lseek+0x10f>
c0004535:	01 fa                	add    edx,edi
c0004537:	29 fe                	sub    esi,edi
c0004539:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000453c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004540:	89 c2                	mov    edx,eax
c0004542:	74 0d                	je     c0004551 <f_lseek+0xee>
c0004544:	89 d8                	mov    eax,ebx
c0004546:	e8 a4 ee ff ff       	call   c00033ef <create_chain>
c000454b:	85 c0                	test   eax,eax
c000454d:	75 09                	jne    c0004558 <f_lseek+0xf5>
c000454f:	eb 1f                	jmp    c0004570 <f_lseek+0x10d>
c0004551:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004553:	e8 cb ec ff ff       	call   c0003223 <get_fat.isra.2>
c0004558:	83 f8 ff             	cmp    eax,0xffffffff
c000455b:	74 b9                	je     c0004516 <f_lseek+0xb3>
c000455d:	83 f8 01             	cmp    eax,0x1
c0004560:	76 a1                	jbe    c0004503 <f_lseek+0xa0>
c0004562:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004566:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004569:	76 98                	jbe    c0004503 <f_lseek+0xa0>
c000456b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000456e:	eb be                	jmp    c000452e <f_lseek+0xcb>
c0004570:	31 f6                	xor    esi,esi
c0004572:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004575:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000457b:	0f 84 2f ff ff ff    	je     c00044b0 <f_lseek+0x4d>
c0004581:	89 c2                	mov    edx,eax
c0004583:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004587:	e8 ba da ff ff       	call   c0002046 <clst2sect>
c000458c:	85 c0                	test   eax,eax
c000458e:	0f 84 6f ff ff ff    	je     c0004503 <f_lseek+0xa0>
c0004594:	c1 ee 09             	shr    esi,0x9
c0004597:	01 c6                	add    esi,eax
c0004599:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000459c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000459f:	76 0c                	jbe    c00045ad <f_lseek+0x14a>
c00045a1:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045a4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045a7:	83 ca 40             	or     edx,0x40
c00045aa:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045ad:	a9 ff 01 00 00       	test   eax,0x1ff
c00045b2:	74 56                	je     c000460a <f_lseek+0x1a7>
c00045b4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045b7:	39 f0                	cmp    eax,esi
c00045b9:	74 4f                	je     c000460a <f_lseek+0x1a7>
c00045bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045be:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045c2:	74 26                	je     c00045ea <f_lseek+0x187>
c00045c4:	6a 01                	push   0x1
c00045c6:	50                   	push   eax
c00045c7:	57                   	push   edi
c00045c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045d0:	50                   	push   eax
c00045d1:	e8 e4 d7 ff ff       	call   c0001dba <disk_write>
c00045d6:	83 c4 10             	add    esp,0x10
c00045d9:	85 c0                	test   eax,eax
c00045db:	0f 85 35 ff ff ff    	jne    c0004516 <f_lseek+0xb3>
c00045e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045e4:	83 e0 7f             	and    eax,0x7f
c00045e7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045ea:	6a 01                	push   0x1
c00045ec:	56                   	push   esi
c00045ed:	57                   	push   edi
c00045ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045f6:	50                   	push   eax
c00045f7:	e8 a8 d7 ff ff       	call   c0001da4 <disk_read>
c00045fc:	83 c4 10             	add    esp,0x10
c00045ff:	85 c0                	test   eax,eax
c0004601:	0f 85 0f ff ff ff    	jne    c0004516 <f_lseek+0xb3>
c0004607:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000460a:	83 c4 2c             	add    esp,0x2c
c000460d:	89 e8                	mov    eax,ebp
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	5f                   	pop    edi
c0004612:	5d                   	pop    ebp
c0004613:	c3                   	ret    

c0004614 <f_opendir>:
c0004614:	56                   	push   esi
c0004615:	b8 09 00 00 00       	mov    eax,0x9
c000461a:	53                   	push   ebx
c000461b:	83 ec 24             	sub    esp,0x24
c000461e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004622:	85 db                	test   ebx,ebx
c0004624:	0f 84 af 00 00 00    	je     c00046d9 <f_opendir+0xc5>
c000462a:	31 c9                	xor    ecx,ecx
c000462c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004630:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004634:	e8 74 de ff ff       	call   c00024ad <mount_volume>
c0004639:	85 c0                	test   eax,eax
c000463b:	0f 85 92 00 00 00    	jne    c00046d3 <f_opendir+0xbf>
c0004641:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004645:	83 ec 0c             	sub    esp,0xc
c0004648:	89 03                	mov    DWORD PTR [ebx],eax
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 d8 15 00 00       	call   c0005c2c <ff_memalloc>
c0004654:	89 c6                	mov    esi,eax
c0004656:	83 c4 10             	add    esp,0x10
c0004659:	b8 11 00 00 00       	mov    eax,0x11
c000465e:	85 f6                	test   esi,esi
c0004660:	74 77                	je     c00046d9 <f_opendir+0xc5>
c0004662:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004666:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000466a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000466d:	89 d8                	mov    eax,ebx
c000466f:	e8 72 f3 ff ff       	call   c00039e6 <follow_path>
c0004674:	85 c0                	test   eax,eax
c0004676:	75 37                	jne    c00046af <f_opendir+0x9b>
c0004678:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000467c:	75 1c                	jne    c000469a <f_opendir+0x86>
c000467e:	b8 05 00 00 00       	mov    eax,0x5
c0004683:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004687:	74 26                	je     c00046af <f_opendir+0x9b>
c0004689:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004690:	8a 00                	mov    al,BYTE PTR [eax]
c0004692:	e8 3b eb ff ff       	call   c00031d2 <ld_clust.isra.0>
c0004697:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000469a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469e:	31 d2                	xor    edx,edx
c00046a0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046a8:	89 d8                	mov    eax,ebx
c00046aa:	e8 78 ec ff ff       	call   c0003327 <dir_sdi>
c00046af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b3:	83 ec 0c             	sub    esp,0xc
c00046b6:	56                   	push   esi
c00046b7:	e8 88 15 00 00       	call   c0005c44 <ff_memfree>
c00046bc:	83 c4 10             	add    esp,0x10
c00046bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046c3:	83 f8 04             	cmp    eax,0x4
c00046c6:	74 06                	je     c00046ce <f_opendir+0xba>
c00046c8:	85 c0                	test   eax,eax
c00046ca:	74 0d                	je     c00046d9 <f_opendir+0xc5>
c00046cc:	eb 05                	jmp    c00046d3 <f_opendir+0xbf>
c00046ce:	b8 05 00 00 00       	mov    eax,0x5
c00046d3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046d9:	83 c4 24             	add    esp,0x24
c00046dc:	5b                   	pop    ebx
c00046dd:	5e                   	pop    esi
c00046de:	c3                   	ret    

c00046df <f_closedir>:
c00046df:	53                   	push   ebx
c00046e0:	83 ec 18             	sub    esp,0x18
c00046e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046e7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046eb:	89 d8                	mov    eax,ebx
c00046ed:	e8 bb db ff ff       	call   c00022ad <validate>
c00046f2:	85 c0                	test   eax,eax
c00046f4:	75 06                	jne    c00046fc <f_closedir+0x1d>
c00046f6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046fc:	83 c4 18             	add    esp,0x18
c00046ff:	5b                   	pop    ebx
c0004700:	c3                   	ret    

c0004701 <f_readdir>:
c0004701:	57                   	push   edi
c0004702:	56                   	push   esi
c0004703:	53                   	push   ebx
c0004704:	83 ec 20             	sub    esp,0x20
c0004707:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000470b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000470f:	89 d8                	mov    eax,ebx
c0004711:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004715:	e8 93 db ff ff       	call   c00022ad <validate>
c000471a:	85 c0                	test   eax,eax
c000471c:	75 6e                	jne    c000478c <f_readdir+0x8b>
c000471e:	85 ff                	test   edi,edi
c0004720:	75 0b                	jne    c000472d <f_readdir+0x2c>
c0004722:	31 d2                	xor    edx,edx
c0004724:	89 d8                	mov    eax,ebx
c0004726:	e8 fc eb ff ff       	call   c0003327 <dir_sdi>
c000472b:	eb 5f                	jmp    c000478c <f_readdir+0x8b>
c000472d:	83 ec 0c             	sub    esp,0xc
c0004730:	68 00 02 00 00       	push   0x200
c0004735:	e8 f2 14 00 00       	call   c0005c2c <ff_memalloc>
c000473a:	89 c6                	mov    esi,eax
c000473c:	83 c4 10             	add    esp,0x10
c000473f:	b8 11 00 00 00       	mov    eax,0x11
c0004744:	85 f6                	test   esi,esi
c0004746:	74 44                	je     c000478c <f_readdir+0x8b>
c0004748:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474c:	31 d2                	xor    edx,edx
c000474e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004751:	89 d8                	mov    eax,ebx
c0004753:	e8 ca ef ff ff       	call   c0003722 <dir_read>
c0004758:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000475d:	75 19                	jne    c0004778 <f_readdir+0x77>
c000475f:	89 fa                	mov    edx,edi
c0004761:	89 d8                	mov    eax,ebx
c0004763:	e8 74 e8 ff ff       	call   c0002fdc <get_fileinfo>
c0004768:	31 d2                	xor    edx,edx
c000476a:	89 d8                	mov    eax,ebx
c000476c:	e8 47 ee ff ff       	call   c00035b8 <dir_next>
c0004771:	83 f8 04             	cmp    eax,0x4
c0004774:	75 02                	jne    c0004778 <f_readdir+0x77>
c0004776:	31 c0                	xor    eax,eax
c0004778:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000477c:	83 ec 0c             	sub    esp,0xc
c000477f:	56                   	push   esi
c0004780:	e8 bf 14 00 00       	call   c0005c44 <ff_memfree>
c0004785:	83 c4 10             	add    esp,0x10
c0004788:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478c:	83 c4 20             	add    esp,0x20
c000478f:	5b                   	pop    ebx
c0004790:	5e                   	pop    esi
c0004791:	5f                   	pop    edi
c0004792:	c3                   	ret    

c0004793 <f_stat>:
c0004793:	57                   	push   edi
c0004794:	31 c9                	xor    ecx,ecx
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 30             	sub    esp,0x30
c000479b:	89 e2                	mov    edx,esp
c000479d:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047a1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047a5:	e8 03 dd ff ff       	call   c00024ad <mount_volume>
c00047aa:	89 c3                	mov    ebx,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	75 59                	jne    c0004809 <f_stat+0x76>
c00047b0:	83 ec 0c             	sub    esp,0xc
c00047b3:	bb 11 00 00 00       	mov    ebx,0x11
c00047b8:	68 00 02 00 00       	push   0x200
c00047bd:	e8 6a 14 00 00       	call   c0005c2c <ff_memalloc>
c00047c2:	83 c4 10             	add    esp,0x10
c00047c5:	89 c6                	mov    esi,eax
c00047c7:	85 c0                	test   eax,eax
c00047c9:	74 3e                	je     c0004809 <f_stat+0x76>
c00047cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047ce:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047d2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047d5:	89 e0                	mov    eax,esp
c00047d7:	e8 0a f2 ff ff       	call   c00039e6 <follow_path>
c00047dc:	89 c3                	mov    ebx,eax
c00047de:	85 c0                	test   eax,eax
c00047e0:	75 1b                	jne    c00047fd <f_stat+0x6a>
c00047e2:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047e7:	75 0f                	jne    c00047f8 <f_stat+0x65>
c00047e9:	85 ff                	test   edi,edi
c00047eb:	74 10                	je     c00047fd <f_stat+0x6a>
c00047ed:	89 fa                	mov    edx,edi
c00047ef:	89 e0                	mov    eax,esp
c00047f1:	e8 e6 e7 ff ff       	call   c0002fdc <get_fileinfo>
c00047f6:	eb 05                	jmp    c00047fd <f_stat+0x6a>
c00047f8:	bb 06 00 00 00       	mov    ebx,0x6
c00047fd:	83 ec 0c             	sub    esp,0xc
c0004800:	56                   	push   esi
c0004801:	e8 3e 14 00 00       	call   c0005c44 <ff_memfree>
c0004806:	83 c4 10             	add    esp,0x10
c0004809:	83 c4 30             	add    esp,0x30
c000480c:	89 d8                	mov    eax,ebx
c000480e:	5b                   	pop    ebx
c000480f:	5e                   	pop    esi
c0004810:	5f                   	pop    edi
c0004811:	c3                   	ret    

c0004812 <f_getfree>:
c0004812:	55                   	push   ebp
c0004813:	31 c9                	xor    ecx,ecx
c0004815:	57                   	push   edi
c0004816:	56                   	push   esi
c0004817:	53                   	push   ebx
c0004818:	83 ec 2c             	sub    esp,0x2c
c000481b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000481f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004823:	e8 85 dc ff ff       	call   c00024ad <mount_volume>
c0004828:	89 c7                	mov    edi,eax
c000482a:	85 c0                	test   eax,eax
c000482c:	0f 85 df 00 00 00    	jne    c0004911 <f_getfree+0xff>
c0004832:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004836:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000483a:	89 30                	mov    DWORD PTR [eax],esi
c000483c:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c000483f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004842:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004845:	39 d0                	cmp    eax,edx
c0004847:	77 0b                	ja     c0004854 <f_getfree+0x42>
c0004849:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000484d:	89 01                	mov    DWORD PTR [ecx],eax
c000484f:	e9 bd 00 00 00       	jmp    c0004911 <f_getfree+0xff>
c0004854:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004857:	75 29                	jne    c0004882 <f_getfree+0x70>
c0004859:	bd 02 00 00 00       	mov    ebp,0x2
c000485e:	31 db                	xor    ebx,ebx
c0004860:	89 ea                	mov    edx,ebp
c0004862:	89 f0                	mov    eax,esi
c0004864:	e8 ba e9 ff ff       	call   c0003223 <get_fat.isra.2>
c0004869:	83 f8 ff             	cmp    eax,0xffffffff
c000486c:	74 7d                	je     c00048eb <f_getfree+0xd9>
c000486e:	83 f8 01             	cmp    eax,0x1
c0004871:	74 7f                	je     c00048f2 <f_getfree+0xe0>
c0004873:	83 d3 00             	adc    ebx,0x0
c0004876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487a:	45                   	inc    ebp
c000487b:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000487e:	77 e0                	ja     c0004860 <f_getfree+0x4e>
c0004880:	eb 79                	jmp    c00048fb <f_getfree+0xe9>
c0004882:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004885:	31 db                	xor    ebx,ebx
c0004887:	31 f6                	xor    esi,esi
c0004889:	85 f6                	test   esi,esi
c000488b:	75 18                	jne    c00048a5 <f_getfree+0x93>
c000488d:	8d 42 01             	lea    eax,[edx+0x1]
c0004890:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004894:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004898:	e8 b9 da ff ff       	call   c0002356 <move_window>
c000489d:	85 c0                	test   eax,eax
c000489f:	75 58                	jne    c00048f9 <f_getfree+0xe7>
c00048a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048a5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048ad:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048b1:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048b4:	75 13                	jne    c00048c9 <f_getfree+0xb7>
c00048b6:	e8 34 d5 ff ff       	call   c0001def <ld_word>
c00048bb:	0f b7 c0             	movzx  eax,ax
c00048be:	83 f8 01             	cmp    eax,0x1
c00048c1:	83 d3 00             	adc    ebx,0x0
c00048c4:	83 c6 02             	add    esi,0x2
c00048c7:	eb 13                	jmp    c00048dc <f_getfree+0xca>
c00048c9:	e8 2e d5 ff ff       	call   c0001dfc <ld_dword>
c00048ce:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048d3:	83 f8 01             	cmp    eax,0x1
c00048d6:	83 d3 00             	adc    ebx,0x0
c00048d9:	83 c6 04             	add    esi,0x4
c00048dc:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048e2:	4d                   	dec    ebp
c00048e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048e7:	75 a0                	jne    c0004889 <f_getfree+0x77>
c00048e9:	eb 10                	jmp    c00048fb <f_getfree+0xe9>
c00048eb:	bf 01 00 00 00       	mov    edi,0x1
c00048f0:	eb 09                	jmp    c00048fb <f_getfree+0xe9>
c00048f2:	bf 02 00 00 00       	mov    edi,0x2
c00048f7:	eb 02                	jmp    c00048fb <f_getfree+0xe9>
c00048f9:	89 c7                	mov    edi,eax
c00048fb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048ff:	89 18                	mov    DWORD PTR [eax],ebx
c0004901:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004905:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004908:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000490b:	83 ca 01             	or     edx,0x1
c000490e:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004911:	83 c4 2c             	add    esp,0x2c
c0004914:	89 f8                	mov    eax,edi
c0004916:	5b                   	pop    ebx
c0004917:	5e                   	pop    esi
c0004918:	5f                   	pop    edi
c0004919:	5d                   	pop    ebp
c000491a:	c3                   	ret    

c000491b <f_truncate>:
c000491b:	56                   	push   esi
c000491c:	53                   	push   ebx
c000491d:	83 ec 14             	sub    esp,0x14
c0004920:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004924:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004928:	89 d8                	mov    eax,ebx
c000492a:	e8 7e d9 ff ff       	call   c00022ad <validate>
c000492f:	89 c6                	mov    esi,eax
c0004931:	85 c0                	test   eax,eax
c0004933:	0f 85 c4 00 00 00    	jne    c00049fd <f_truncate+0xe2>
c0004939:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c000493d:	85 f6                	test   esi,esi
c000493f:	0f 85 b8 00 00 00    	jne    c00049fd <f_truncate+0xe2>
c0004945:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004949:	0f 84 a9 00 00 00    	je     c00049f8 <f_truncate+0xdd>
c000494f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004952:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004955:	0f 83 a2 00 00 00    	jae    c00049fd <f_truncate+0xe2>
c000495b:	85 c0                	test   eax,eax
c000495d:	75 15                	jne    c0004974 <f_truncate+0x59>
c000495f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004962:	31 c9                	xor    ecx,ecx
c0004964:	89 d8                	mov    eax,ebx
c0004966:	e8 bf eb ff ff       	call   c000352a <remove_chain>
c000496b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004972:	eb 35                	jmp    c00049a9 <f_truncate+0x8e>
c0004974:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004977:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004979:	e8 a5 e8 ff ff       	call   c0003223 <get_fat.isra.2>
c000497e:	89 c2                	mov    edx,eax
c0004980:	b8 01 00 00 00       	mov    eax,0x1
c0004985:	83 fa ff             	cmp    edx,0xffffffff
c0004988:	74 1f                	je     c00049a9 <f_truncate+0x8e>
c000498a:	b8 02 00 00 00       	mov    eax,0x2
c000498f:	83 fa 01             	cmp    edx,0x1
c0004992:	74 15                	je     c00049a9 <f_truncate+0x8e>
c0004994:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004998:	31 c0                	xor    eax,eax
c000499a:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c000499d:	76 0a                	jbe    c00049a9 <f_truncate+0x8e>
c000499f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049a2:	89 d8                	mov    eax,ebx
c00049a4:	e8 81 eb ff ff       	call   c000352a <remove_chain>
c00049a9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049ac:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049af:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049b2:	83 ca 40             	or     edx,0x40
c00049b5:	85 c0                	test   eax,eax
c00049b7:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049ba:	75 35                	jne    c00049f1 <f_truncate+0xd6>
c00049bc:	80 e2 80             	and    dl,0x80
c00049bf:	74 3c                	je     c00049fd <f_truncate+0xe2>
c00049c1:	6a 01                	push   0x1
c00049c3:	8d 43 28             	lea    eax,[ebx+0x28]
c00049c6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049c9:	50                   	push   eax
c00049ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049ce:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049d2:	50                   	push   eax
c00049d3:	e8 e2 d3 ff ff       	call   c0001dba <disk_write>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	85 c0                	test   eax,eax
c00049dd:	75 0d                	jne    c00049ec <f_truncate+0xd1>
c00049df:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049e2:	31 f6                	xor    esi,esi
c00049e4:	83 e0 7f             	and    eax,0x7f
c00049e7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049ea:	eb 11                	jmp    c00049fd <f_truncate+0xe2>
c00049ec:	b8 01 00 00 00       	mov    eax,0x1
c00049f1:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049f4:	89 c6                	mov    esi,eax
c00049f6:	eb 05                	jmp    c00049fd <f_truncate+0xe2>
c00049f8:	be 07 00 00 00       	mov    esi,0x7
c00049fd:	83 c4 14             	add    esp,0x14
c0004a00:	89 f0                	mov    eax,esi
c0004a02:	5b                   	pop    ebx
c0004a03:	5e                   	pop    esi
c0004a04:	c3                   	ret    

c0004a05 <f_unlink>:
c0004a05:	55                   	push   ebp
c0004a06:	b9 02 00 00 00       	mov    ecx,0x2
c0004a0b:	57                   	push   edi
c0004a0c:	56                   	push   esi
c0004a0d:	53                   	push   ebx
c0004a0e:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a14:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a18:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a1f:	e8 89 da ff ff       	call   c00024ad <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	0f 85 ee 00 00 00    	jne    c0004b1a <f_unlink+0x115>
c0004a2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a30:	83 ec 0c             	sub    esp,0xc
c0004a33:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a37:	68 00 02 00 00       	push   0x200
c0004a3c:	e8 eb 11 00 00       	call   c0005c2c <ff_memalloc>
c0004a41:	89 c3                	mov    ebx,eax
c0004a43:	83 c4 10             	add    esp,0x10
c0004a46:	b8 11 00 00 00       	mov    eax,0x11
c0004a4b:	85 db                	test   ebx,ebx
c0004a4d:	0f 84 c7 00 00 00    	je     c0004b1a <f_unlink+0x115>
c0004a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a57:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a61:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a65:	e8 7c ef ff ff       	call   c00039e6 <follow_path>
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	0f 85 94 00 00 00    	jne    c0004b06 <f_unlink+0x101>
c0004a72:	b8 06 00 00 00       	mov    eax,0x6
c0004a77:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a7c:	0f 85 84 00 00 00    	jne    c0004b06 <f_unlink+0x101>
c0004a82:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a87:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a8d:	74 07                	je     c0004a96 <f_unlink+0x91>
c0004a8f:	b8 07 00 00 00       	mov    eax,0x7
c0004a94:	eb 70                	jmp    c0004b06 <f_unlink+0x101>
c0004a96:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a9e:	8a 07                	mov    al,BYTE PTR [edi]
c0004aa0:	e8 2d e7 ff ff       	call   c00031d2 <ld_clust.isra.0>
c0004aa5:	83 e5 10             	and    ebp,0x10
c0004aa8:	89 c6                	mov    esi,eax
c0004aaa:	75 20                	jne    c0004acc <f_unlink+0xc7>
c0004aac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab0:	e8 95 ed ff ff       	call   c000384a <dir_remove>
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	75 40                	jne    c0004af9 <f_unlink+0xf4>
c0004ab9:	85 f6                	test   esi,esi
c0004abb:	74 3c                	je     c0004af9 <f_unlink+0xf4>
c0004abd:	31 c9                	xor    ecx,ecx
c0004abf:	89 f2                	mov    edx,esi
c0004ac1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ac5:	e8 60 ea ff ff       	call   c000352a <remove_chain>
c0004aca:	eb 2d                	jmp    c0004af9 <f_unlink+0xf4>
c0004acc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ad0:	31 d2                	xor    edx,edx
c0004ad2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ada:	e8 48 e8 ff ff       	call   c0003327 <dir_sdi>
c0004adf:	85 c0                	test   eax,eax
c0004ae1:	75 23                	jne    c0004b06 <f_unlink+0x101>
c0004ae3:	31 d2                	xor    edx,edx
c0004ae5:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ae9:	e8 34 ec ff ff       	call   c0003722 <dir_read>
c0004aee:	85 c0                	test   eax,eax
c0004af0:	74 9d                	je     c0004a8f <f_unlink+0x8a>
c0004af2:	83 f8 04             	cmp    eax,0x4
c0004af5:	75 0f                	jne    c0004b06 <f_unlink+0x101>
c0004af7:	eb b3                	jmp    c0004aac <f_unlink+0xa7>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	75 09                	jne    c0004b06 <f_unlink+0x101>
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	e8 75 e2 ff ff       	call   c0002d7b <sync_fs>
c0004b06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b0a:	83 ec 0c             	sub    esp,0xc
c0004b0d:	53                   	push   ebx
c0004b0e:	e8 31 11 00 00       	call   c0005c44 <ff_memfree>
c0004b13:	83 c4 10             	add    esp,0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b20:	5b                   	pop    ebx
c0004b21:	5e                   	pop    esi
c0004b22:	5f                   	pop    edi
c0004b23:	5d                   	pop    ebp
c0004b24:	c3                   	ret    

c0004b25 <f_mkdir>:
c0004b25:	57                   	push   edi
c0004b26:	b9 02 00 00 00       	mov    ecx,0x2
c0004b2b:	56                   	push   esi
c0004b2c:	53                   	push   ebx
c0004b2d:	83 ec 50             	sub    esp,0x50
c0004b30:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b38:	e8 70 d9 ff ff       	call   c00024ad <mount_volume>
c0004b3d:	89 c3                	mov    ebx,eax
c0004b3f:	85 c0                	test   eax,eax
c0004b41:	0f 85 70 01 00 00    	jne    c0004cb7 <f_mkdir+0x192>
c0004b47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b52:	bb 11 00 00 00       	mov    ebx,0x11
c0004b57:	68 00 02 00 00       	push   0x200
c0004b5c:	e8 cb 10 00 00       	call   c0005c2c <ff_memalloc>
c0004b61:	83 c4 10             	add    esp,0x10
c0004b64:	89 c7                	mov    edi,eax
c0004b66:	85 c0                	test   eax,eax
c0004b68:	0f 84 49 01 00 00    	je     c0004cb7 <f_mkdir+0x192>
c0004b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b72:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b76:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b79:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b7d:	e8 64 ee ff ff       	call   c00039e6 <follow_path>
c0004b82:	89 c3                	mov    ebx,eax
c0004b84:	85 c0                	test   eax,eax
c0004b86:	74 3e                	je     c0004bc6 <f_mkdir+0xa1>
c0004b88:	83 f8 04             	cmp    eax,0x4
c0004b8b:	75 3e                	jne    c0004bcb <f_mkdir+0xa6>
c0004b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b91:	31 d2                	xor    edx,edx
c0004b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b97:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b9b:	e8 4f e8 ff ff       	call   c00033ef <create_chain>
c0004ba0:	89 c6                	mov    esi,eax
c0004ba2:	85 c0                	test   eax,eax
c0004ba4:	74 0c                	je     c0004bb2 <f_mkdir+0x8d>
c0004ba6:	bb 02 00 00 00       	mov    ebx,0x2
c0004bab:	83 f8 01             	cmp    eax,0x1
c0004bae:	74 07                	je     c0004bb7 <f_mkdir+0x92>
c0004bb0:	eb 2a                	jmp    c0004bdc <f_mkdir+0xb7>
c0004bb2:	bb 07 00 00 00       	mov    ebx,0x7
c0004bb7:	31 c9                	xor    ecx,ecx
c0004bb9:	89 f2                	mov    edx,esi
c0004bbb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bbf:	e8 66 e9 ff ff       	call   c000352a <remove_chain>
c0004bc4:	eb 05                	jmp    c0004bcb <f_mkdir+0xa6>
c0004bc6:	bb 08 00 00 00       	mov    ebx,0x8
c0004bcb:	83 ec 0c             	sub    esp,0xc
c0004bce:	57                   	push   edi
c0004bcf:	e8 70 10 00 00       	call   c0005c44 <ff_memfree>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	e9 db 00 00 00       	jmp    c0004cb7 <f_mkdir+0x192>
c0004bdc:	bb 01 00 00 00       	mov    ebx,0x1
c0004be1:	83 f8 ff             	cmp    eax,0xffffffff
c0004be4:	74 d1                	je     c0004bb7 <f_mkdir+0x92>
c0004be6:	89 f2                	mov    edx,esi
c0004be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bec:	e8 04 dd ff ff       	call   c00028f5 <dir_clear>
c0004bf1:	89 c3                	mov    ebx,eax
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 c0                	jne    c0004bb7 <f_mkdir+0x92>
c0004bf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bfb:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c00:	83 c0 34             	add    eax,0x34
c0004c03:	ba 20 00 00 00       	mov    edx,0x20
c0004c08:	e8 23 d2 ff ff       	call   c0001e30 <mem_set>
c0004c0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c11:	83 c0 4a             	add    eax,0x4a
c0004c14:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0004c18:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c1c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c21:	e8 f2 d1 ff ff       	call   c0001e18 <st_dword>
c0004c26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2a:	89 f1                	mov    ecx,esi
c0004c2c:	8d 50 34             	lea    edx,[eax+0x34]
c0004c2f:	e8 c7 e5 ff ff       	call   c00031fb <st_clust.isra.1>
c0004c34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c38:	b9 20 00 00 00       	mov    ecx,0x20
c0004c3d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c40:	83 c0 54             	add    eax,0x54
c0004c43:	e8 d3 d1 ff ff       	call   c0001e1b <mem_cpy>
c0004c48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c4c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c50:	8d 50 54             	lea    edx,[eax+0x54]
c0004c53:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c57:	e8 9f e5 ff ff       	call   c00031fb <st_clust.isra.1>
c0004c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c60:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c64:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c68:	e8 0e ee ff ff       	call   c0003a7b <dir_register>
c0004c6d:	89 c3                	mov    ebx,eax
c0004c6f:	85 c0                	test   eax,eax
c0004c71:	0f 85 40 ff ff ff    	jne    c0004bb7 <f_mkdir+0x92>
c0004c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c7b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c80:	83 c0 16             	add    eax,0x16
c0004c83:	e8 90 d1 ff ff       	call   c0001e18 <st_dword>
c0004c88:	89 f1                	mov    ecx,esi
c0004c8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c92:	e8 64 e5 ff ff       	call   c00031fb <st_clust.isra.1>
c0004c97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c9b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cab:	e8 cb e0 ff ff       	call   c0002d7b <sync_fs>
c0004cb0:	89 c3                	mov    ebx,eax
c0004cb2:	e9 14 ff ff ff       	jmp    c0004bcb <f_mkdir+0xa6>
c0004cb7:	83 c4 50             	add    esp,0x50
c0004cba:	89 d8                	mov    eax,ebx
c0004cbc:	5b                   	pop    ebx
c0004cbd:	5e                   	pop    esi
c0004cbe:	5f                   	pop    edi
c0004cbf:	c3                   	ret    

c0004cc0 <f_rename>:
c0004cc0:	57                   	push   edi
c0004cc1:	56                   	push   esi
c0004cc2:	53                   	push   ebx
c0004cc3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cd0:	e8 8b d5 ff ff       	call   c0002260 <get_ldnumber>
c0004cd5:	b9 02 00 00 00       	mov    ecx,0x2
c0004cda:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cde:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ce5:	e8 c3 d7 ff ff       	call   c00024ad <mount_volume>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	0f 85 7c 01 00 00    	jne    c0004e6e <f_rename+0x1ae>
c0004cf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cf6:	83 ec 0c             	sub    esp,0xc
c0004cf9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cfd:	68 00 02 00 00       	push   0x200
c0004d02:	e8 25 0f 00 00       	call   c0005c2c <ff_memalloc>
c0004d07:	89 c6                	mov    esi,eax
c0004d09:	83 c4 10             	add    esp,0x10
c0004d0c:	b8 11 00 00 00       	mov    eax,0x11
c0004d11:	85 f6                	test   esi,esi
c0004d13:	0f 84 55 01 00 00    	je     c0004e6e <f_rename+0x1ae>
c0004d19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d1d:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d24:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d27:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d2b:	e8 b6 ec ff ff       	call   c00039e6 <follow_path>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	0f 85 22 01 00 00    	jne    c0004e5a <f_rename+0x19a>
c0004d38:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d3c:	b8 06 00 00 00       	mov    eax,0x6
c0004d41:	80 e2 a0             	and    dl,0xa0
c0004d44:	0f 85 10 01 00 00    	jne    c0004e5a <f_rename+0x19a>
c0004d4a:	b9 20 00 00 00       	mov    ecx,0x20
c0004d4f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d57:	e8 bf d0 ff ff       	call   c0001e1b <mem_cpy>
c0004d5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004d61:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d65:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d69:	e8 ad d0 ff ff       	call   c0001e1b <mem_cpy>
c0004d6e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d75:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d79:	e8 68 ec ff ff       	call   c00039e6 <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	75 20                	jne    c0004da2 <f_rename+0xe2>
c0004d82:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d86:	b8 08 00 00 00       	mov    eax,0x8
c0004d8b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d8f:	0f 85 c5 00 00 00    	jne    c0004e5a <f_rename+0x19a>
c0004d95:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d99:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004da0:	eb 03                	jmp    c0004da5 <f_rename+0xe5>
c0004da2:	83 f8 04             	cmp    eax,0x4
c0004da5:	0f 85 af 00 00 00    	jne    c0004e5a <f_rename+0x19a>
c0004dab:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004daf:	e8 c7 ec ff ff       	call   c0003a7b <dir_register>
c0004db4:	85 c0                	test   eax,eax
c0004db6:	0f 85 9e 00 00 00    	jne    c0004e5a <f_rename+0x19a>
c0004dbc:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004dc8:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dcc:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dcf:	e8 47 d0 ff ff       	call   c0001e1b <mem_cpy>
c0004dd4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dd8:	a8 10                	test   al,0x10
c0004dda:	75 03                	jne    c0004ddf <f_rename+0x11f>
c0004ddc:	83 c8 20             	or     eax,0x20
c0004ddf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004dea:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004dee:	74 54                	je     c0004e44 <f_rename+0x184>
c0004df0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004df4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004df8:	74 4a                	je     c0004e44 <f_rename+0x184>
c0004dfa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004dfe:	89 da                	mov    edx,ebx
c0004e00:	8a 07                	mov    al,BYTE PTR [edi]
c0004e02:	e8 cb e3 ff ff       	call   c00031d2 <ld_clust.isra.0>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	89 f8                	mov    eax,edi
c0004e0b:	e8 36 d2 ff ff       	call   c0002046 <clst2sect>
c0004e10:	89 c2                	mov    edx,eax
c0004e12:	b8 02 00 00 00       	mov    eax,0x2
c0004e17:	85 d2                	test   edx,edx
c0004e19:	74 3f                	je     c0004e5a <f_rename+0x19a>
c0004e1b:	89 f8                	mov    eax,edi
c0004e1d:	e8 34 d5 ff ff       	call   c0002356 <move_window>
c0004e22:	85 c0                	test   eax,eax
c0004e24:	75 34                	jne    c0004e5a <f_rename+0x19a>
c0004e26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e2e:	75 14                	jne    c0004e44 <f_rename+0x184>
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e37:	e8 bf e3 ff ff       	call   c00031fb <st_clust.isra.1>
c0004e3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e48:	e8 fd e9 ff ff       	call   c000384a <dir_remove>
c0004e4d:	85 c0                	test   eax,eax
c0004e4f:	75 09                	jne    c0004e5a <f_rename+0x19a>
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 21 df ff ff       	call   c0002d7b <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	56                   	push   esi
c0004e62:	e8 dd 0d 00 00       	call   c0005c44 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	5f                   	pop    edi
c0004e77:	c3                   	ret    

c0004e78 <f_chmod>:
c0004e78:	57                   	push   edi
c0004e79:	b9 02 00 00 00       	mov    ecx,0x2
c0004e7e:	56                   	push   esi
c0004e7f:	53                   	push   ebx
c0004e80:	83 ec 50             	sub    esp,0x50
c0004e83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e87:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8b:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e8f:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e93:	e8 15 d6 ff ff       	call   c00024ad <mount_volume>
c0004e98:	85 c0                	test   eax,eax
c0004e9a:	0f 85 81 00 00 00    	jne    c0004f21 <f_chmod+0xa9>
c0004ea0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea4:	83 ec 0c             	sub    esp,0xc
c0004ea7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004eab:	68 00 02 00 00       	push   0x200
c0004eb0:	e8 77 0d 00 00       	call   c0005c2c <ff_memalloc>
c0004eb5:	89 c6                	mov    esi,eax
c0004eb7:	83 c4 10             	add    esp,0x10
c0004eba:	b8 11 00 00 00       	mov    eax,0x11
c0004ebf:	85 f6                	test   esi,esi
c0004ec1:	74 5e                	je     c0004f21 <f_chmod+0xa9>
c0004ec3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ecb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ece:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ed2:	e8 0f eb ff ff       	call   c00039e6 <follow_path>
c0004ed7:	85 c0                	test   eax,eax
c0004ed9:	75 32                	jne    c0004f0d <f_chmod+0x95>
c0004edb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004edf:	b8 06 00 00 00       	mov    eax,0x6
c0004ee4:	80 e2 a0             	and    dl,0xa0
c0004ee7:	75 24                	jne    c0004f0d <f_chmod+0x95>
c0004ee9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004eed:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ef0:	31 d7                	xor    edi,edx
c0004ef2:	21 fb                	and    ebx,edi
c0004ef4:	83 e3 27             	and    ebx,0x27
c0004ef7:	31 d3                	xor    ebx,edx
c0004ef9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f00:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f08:	e8 6e de ff ff       	call   c0002d7b <sync_fs>
c0004f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f11:	83 ec 0c             	sub    esp,0xc
c0004f14:	56                   	push   esi
c0004f15:	e8 2a 0d 00 00       	call   c0005c44 <ff_memfree>
c0004f1a:	83 c4 10             	add    esp,0x10
c0004f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f21:	83 c4 50             	add    esp,0x50
c0004f24:	5b                   	pop    ebx
c0004f25:	5e                   	pop    esi
c0004f26:	5f                   	pop    edi
c0004f27:	c3                   	ret    

c0004f28 <f_utime>:
c0004f28:	56                   	push   esi
c0004f29:	b9 02 00 00 00       	mov    ecx,0x2
c0004f2e:	53                   	push   ebx
c0004f2f:	83 ec 54             	sub    esp,0x54
c0004f32:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f36:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f3a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f3e:	e8 6a d5 ff ff       	call   c00024ad <mount_volume>
c0004f43:	85 c0                	test   eax,eax
c0004f45:	0f 85 87 00 00 00    	jne    c0004fd2 <f_utime+0xaa>
c0004f4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4f:	83 ec 0c             	sub    esp,0xc
c0004f52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f56:	68 00 02 00 00       	push   0x200
c0004f5b:	e8 cc 0c 00 00       	call   c0005c2c <ff_memalloc>
c0004f60:	89 c3                	mov    ebx,eax
c0004f62:	83 c4 10             	add    esp,0x10
c0004f65:	b8 11 00 00 00       	mov    eax,0x11
c0004f6a:	85 db                	test   ebx,ebx
c0004f6c:	74 64                	je     c0004fd2 <f_utime+0xaa>
c0004f6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f72:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f76:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f79:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f7d:	e8 64 ea ff ff       	call   c00039e6 <follow_path>
c0004f82:	85 c0                	test   eax,eax
c0004f84:	75 38                	jne    c0004fbe <f_utime+0x96>
c0004f86:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f8a:	b8 06 00 00 00       	mov    eax,0x6
c0004f8f:	80 e2 a0             	and    dl,0xa0
c0004f92:	75 2a                	jne    c0004fbe <f_utime+0x96>
c0004f94:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f98:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f9c:	c1 e2 10             	shl    edx,0x10
c0004f9f:	09 c2                	or     edx,eax
c0004fa1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fa5:	83 c0 16             	add    eax,0x16
c0004fa8:	e8 6b ce ff ff       	call   c0001e18 <st_dword>
c0004fad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb9:	e8 bd dd ff ff       	call   c0002d7b <sync_fs>
c0004fbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fc2:	83 ec 0c             	sub    esp,0xc
c0004fc5:	53                   	push   ebx
c0004fc6:	e8 79 0c 00 00       	call   c0005c44 <ff_memfree>
c0004fcb:	83 c4 10             	add    esp,0x10
c0004fce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fd2:	83 c4 54             	add    esp,0x54
c0004fd5:	5b                   	pop    ebx
c0004fd6:	5e                   	pop    esi
c0004fd7:	c3                   	ret    

c0004fd8 <f_getlabel>:
c0004fd8:	55                   	push   ebp
c0004fd9:	31 c9                	xor    ecx,ecx
c0004fdb:	57                   	push   edi
c0004fdc:	56                   	push   esi
c0004fdd:	53                   	push   ebx
c0004fde:	83 ec 5c             	sub    esp,0x5c
c0004fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fe5:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe9:	e8 bf d4 ff ff       	call   c00024ad <mount_volume>
c0004fee:	89 c3                	mov    ebx,eax
c0004ff0:	85 c0                	test   eax,eax
c0004ff2:	0f 85 e1 00 00 00    	jne    c00050d9 <f_getlabel+0x101>
c0004ff8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ffd:	0f 84 d6 00 00 00    	je     c00050d9 <f_getlabel+0x101>
c0005003:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005007:	31 d2                	xor    edx,edx
c0005009:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000500d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005011:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005019:	e8 09 e3 ff ff       	call   c0003327 <dir_sdi>
c000501e:	89 c3                	mov    ebx,eax
c0005020:	85 c0                	test   eax,eax
c0005022:	0f 85 a3 00 00 00    	jne    c00050cb <f_getlabel+0xf3>
c0005028:	ba 01 00 00 00       	mov    edx,0x1
c000502d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005031:	e8 ec e6 ff ff       	call   c0003722 <dir_read>
c0005036:	89 c3                	mov    ebx,eax
c0005038:	85 c0                	test   eax,eax
c000503a:	0f 85 8b 00 00 00    	jne    c00050cb <f_getlabel+0xf3>
c0005040:	31 f6                	xor    esi,esi
c0005042:	31 c9                	xor    ecx,ecx
c0005044:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005048:	8d 79 01             	lea    edi,[ecx+0x1]
c000504b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005050:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005055:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005059:	e8 11 ce ff ff       	call   c0001e6f <dbc_1st>
c000505e:	85 c0                	test   eax,eax
c0005060:	74 16                	je     c0005078 <f_getlabel+0xa0>
c0005062:	83 ff 0b             	cmp    edi,0xb
c0005065:	74 11                	je     c0005078 <f_getlabel+0xa0>
c0005067:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000506c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005070:	8d 79 02             	lea    edi,[ecx+0x2]
c0005073:	c1 e0 08             	shl    eax,0x8
c0005076:	09 c2                	or     edx,eax
c0005078:	50                   	push   eax
c0005079:	50                   	push   eax
c000507a:	68 b5 01 00 00       	push   0x1b5
c000507f:	0f b7 d2             	movzx  edx,dx
c0005082:	52                   	push   edx
c0005083:	e8 70 0c 00 00       	call   c0005cf8 <ff_oem2uni>
c0005088:	0f b7 c0             	movzx  eax,ax
c000508b:	83 c4 10             	add    esp,0x10
c000508e:	85 c0                	test   eax,eax
c0005090:	74 22                	je     c00050b4 <f_getlabel+0xdc>
c0005092:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005096:	b9 04 00 00 00       	mov    ecx,0x4
c000509b:	01 f2                	add    edx,esi
c000509d:	e8 ab ce ff ff       	call   c0001f4d <put_utf>
c00050a2:	0f b6 c0             	movzx  eax,al
c00050a5:	85 c0                	test   eax,eax
c00050a7:	74 0b                	je     c00050b4 <f_getlabel+0xdc>
c00050a9:	01 c6                	add    esi,eax
c00050ab:	83 ff 0b             	cmp    edi,0xb
c00050ae:	74 06                	je     c00050b6 <f_getlabel+0xde>
c00050b0:	89 f9                	mov    ecx,edi
c00050b2:	eb 90                	jmp    c0005044 <f_getlabel+0x6c>
c00050b4:	31 f6                	xor    esi,esi
c00050b6:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050bd:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050c1:	74 16                	je     c00050d9 <f_getlabel+0x101>
c00050c3:	4e                   	dec    esi
c00050c4:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050c7:	74 f1                	je     c00050ba <f_getlabel+0xe2>
c00050c9:	eb 0e                	jmp    c00050d9 <f_getlabel+0x101>
c00050cb:	83 fb 04             	cmp    ebx,0x4
c00050ce:	75 09                	jne    c00050d9 <f_getlabel+0x101>
c00050d0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050d4:	31 db                	xor    ebx,ebx
c00050d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050d9:	85 db                	test   ebx,ebx
c00050db:	75 48                	jne    c0005125 <f_getlabel+0x14d>
c00050dd:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050e2:	74 41                	je     c0005125 <f_getlabel+0x14d>
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050eb:	e8 66 d2 ff ff       	call   c0002356 <move_window>
c00050f0:	89 c3                	mov    ebx,eax
c00050f2:	85 c0                	test   eax,eax
c00050f4:	75 2f                	jne    c0005125 <f_getlabel+0x14d>
c00050f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050fa:	b8 43 00 00 00       	mov    eax,0x43
c00050ff:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005102:	83 f9 03             	cmp    ecx,0x3
c0005105:	74 0f                	je     c0005116 <f_getlabel+0x13e>
c0005107:	31 c0                	xor    eax,eax
c0005109:	83 f9 04             	cmp    ecx,0x4
c000510c:	0f 94 c0             	sete   al
c000510f:	48                   	dec    eax
c0005110:	83 e0 c3             	and    eax,0xffffffc3
c0005113:	83 c0 64             	add    eax,0x64
c0005116:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c000511a:	e8 dd cc ff ff       	call   c0001dfc <ld_dword>
c000511f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005123:	89 07                	mov    DWORD PTR [edi],eax
c0005125:	83 c4 5c             	add    esp,0x5c
c0005128:	89 d8                	mov    eax,ebx
c000512a:	5b                   	pop    ebx
c000512b:	5e                   	pop    esi
c000512c:	5f                   	pop    edi
c000512d:	5d                   	pop    ebp
c000512e:	c3                   	ret    

c000512f <f_setlabel>:
c000512f:	57                   	push   edi
c0005130:	b9 02 00 00 00       	mov    ecx,0x2
c0005135:	56                   	push   esi
c0005136:	53                   	push   ebx
c0005137:	83 ec 50             	sub    esp,0x50
c000513a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000513e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005142:	e8 66 d3 ff ff       	call   c00024ad <mount_volume>
c0005147:	89 c6                	mov    esi,eax
c0005149:	85 c0                	test   eax,eax
c000514b:	0f 85 65 01 00 00    	jne    c00052b6 <f_setlabel+0x187>
c0005151:	b9 0b 00 00 00       	mov    ecx,0xb
c0005156:	ba 20 00 00 00       	mov    edx,0x20
c000515b:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000515f:	31 db                	xor    ebx,ebx
c0005161:	e8 ca cc ff ff       	call   c0001e30 <mem_set>
c0005166:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000516a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000516d:	76 5d                	jbe    c00051cc <f_setlabel+0x9d>
c000516f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005173:	e8 fd cc ff ff       	call   c0001e75 <tchar2uni>
c0005178:	3d ff ff 00 00       	cmp    eax,0xffff
c000517d:	76 0a                	jbe    c0005189 <f_setlabel+0x5a>
c000517f:	be 06 00 00 00       	mov    esi,0x6
c0005184:	e9 2d 01 00 00       	jmp    c00052b6 <f_setlabel+0x187>
c0005189:	83 ec 0c             	sub    esp,0xc
c000518c:	50                   	push   eax
c000518d:	e8 de 0b 00 00       	call   c0005d70 <ff_wtoupper>
c0005192:	5a                   	pop    edx
c0005193:	59                   	pop    ecx
c0005194:	68 b5 01 00 00       	push   0x1b5
c0005199:	50                   	push   eax
c000519a:	e8 bd 0a 00 00       	call   c0005c5c <ff_uni2oem>
c000519f:	0f b7 f0             	movzx  esi,ax
c00051a2:	83 c4 10             	add    esp,0x10
c00051a5:	89 f7                	mov    edi,esi
c00051a7:	85 f6                	test   esi,esi
c00051a9:	74 d4                	je     c000517f <f_setlabel+0x50>
c00051ab:	89 f2                	mov    edx,esi
c00051ad:	b8 50 f4 01 c0       	mov    eax,0xc001f450
c00051b2:	e8 a7 cc ff ff       	call   c0001e5e <chk_chr>
c00051b7:	85 c0                	test   eax,eax
c00051b9:	75 c4                	jne    c000517f <f_setlabel+0x50>
c00051bb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051c1:	0f 87 c9 00 00 00    	ja     c0005290 <f_setlabel+0x161>
c00051c7:	e9 e0 00 00 00       	jmp    c00052ac <f_setlabel+0x17d>
c00051cc:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051d1:	74 ac                	je     c000517f <f_setlabel+0x50>
c00051d3:	85 db                	test   ebx,ebx
c00051d5:	74 0e                	je     c00051e5 <f_setlabel+0xb6>
c00051d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051da:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051df:	75 04                	jne    c00051e5 <f_setlabel+0xb6>
c00051e1:	89 c3                	mov    ebx,eax
c00051e3:	eb ee                	jmp    c00051d3 <f_setlabel+0xa4>
c00051e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051e9:	31 d2                	xor    edx,edx
c00051eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051fb:	e8 27 e1 ff ff       	call   c0003327 <dir_sdi>
c0005200:	89 c6                	mov    esi,eax
c0005202:	85 c0                	test   eax,eax
c0005204:	0f 85 ac 00 00 00    	jne    c00052b6 <f_setlabel+0x187>
c000520a:	ba 01 00 00 00       	mov    edx,0x1
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 0a e5 ff ff       	call   c0003722 <dir_read>
c0005218:	85 c0                	test   eax,eax
c000521a:	75 18                	jne    c0005234 <f_setlabel+0x105>
c000521c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005220:	85 db                	test   ebx,ebx
c0005222:	74 0b                	je     c000522f <f_setlabel+0x100>
c0005224:	b9 0b 00 00 00       	mov    ecx,0xb
c0005229:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000522d:	eb 47                	jmp    c0005276 <f_setlabel+0x147>
c000522f:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005232:	eb 47                	jmp    c000527b <f_setlabel+0x14c>
c0005234:	83 f8 04             	cmp    eax,0x4
c0005237:	75 53                	jne    c000528c <f_setlabel+0x15d>
c0005239:	85 db                	test   ebx,ebx
c000523b:	74 79                	je     c00052b6 <f_setlabel+0x187>
c000523d:	ba 01 00 00 00       	mov    edx,0x1
c0005242:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005246:	e8 72 e4 ff ff       	call   c00036bd <dir_alloc>
c000524b:	89 c6                	mov    esi,eax
c000524d:	85 c0                	test   eax,eax
c000524f:	75 65                	jne    c00052b6 <f_setlabel+0x187>
c0005251:	b9 20 00 00 00       	mov    ecx,0x20
c0005256:	31 d2                	xor    edx,edx
c0005258:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000525c:	e8 cf cb ff ff       	call   c0001e30 <mem_set>
c0005261:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005265:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005269:	b9 0b 00 00 00       	mov    ecx,0xb
c000526e:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005272:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005276:	e8 a0 cb ff ff       	call   c0001e1b <mem_cpy>
c000527b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000527f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005287:	e8 ef da ff ff       	call   c0002d7b <sync_fs>
c000528c:	89 c6                	mov    esi,eax
c000528e:	eb 26                	jmp    c00052b6 <f_setlabel+0x187>
c0005290:	83 fb 09             	cmp    ebx,0x9
c0005293:	0f 87 e6 fe ff ff    	ja     c000517f <f_setlabel+0x50>
c0005299:	89 f0                	mov    eax,esi
c000529b:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c000529f:	43                   	inc    ebx
c00052a0:	89 f8                	mov    eax,edi
c00052a2:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052a6:	43                   	inc    ebx
c00052a7:	e9 ba fe ff ff       	jmp    c0005166 <f_setlabel+0x37>
c00052ac:	83 fb 0a             	cmp    ebx,0xa
c00052af:	76 ef                	jbe    c00052a0 <f_setlabel+0x171>
c00052b1:	e9 c9 fe ff ff       	jmp    c000517f <f_setlabel+0x50>
c00052b6:	83 c4 50             	add    esp,0x50
c00052b9:	89 f0                	mov    eax,esi
c00052bb:	5b                   	pop    ebx
c00052bc:	5e                   	pop    esi
c00052bd:	5f                   	pop    edi
c00052be:	c3                   	ret    

c00052bf <f_expand>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052d2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d6:	89 d8                	mov    eax,ebx
c00052d8:	e8 d0 cf ff ff       	call   c00022ad <validate>
c00052dd:	89 c6                	mov    esi,eax
c00052df:	85 c0                	test   eax,eax
c00052e1:	0f 85 3b 01 00 00    	jne    c0005422 <f_expand+0x163>
c00052e7:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052eb:	85 f6                	test   esi,esi
c00052ed:	0f 85 2f 01 00 00    	jne    c0005422 <f_expand+0x163>
c00052f3:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052f8:	75 0a                	jne    c0005304 <f_expand+0x45>
c00052fa:	be 07 00 00 00       	mov    esi,0x7
c00052ff:	e9 1e 01 00 00       	jmp    c0005422 <f_expand+0x163>
c0005304:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005308:	75 f0                	jne    c00052fa <f_expand+0x3b>
c000530a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000530e:	74 ea                	je     c00052fa <f_expand+0x3b>
c0005310:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005314:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005318:	c1 e1 09             	shl    ecx,0x9
c000531b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000531e:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005322:	0f 95 c0             	setne  al
c0005325:	0f b6 c0             	movzx  eax,al
c0005328:	89 c7                	mov    edi,eax
c000532a:	31 d2                	xor    edx,edx
c000532c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005330:	f7 f1                	div    ecx
c0005332:	01 f8                	add    eax,edi
c0005334:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000533b:	83 ff 01             	cmp    edi,0x1
c000533e:	76 05                	jbe    c0005345 <f_expand+0x86>
c0005340:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005343:	77 05                	ja     c000534a <f_expand+0x8b>
c0005345:	bf 02 00 00 00       	mov    edi,0x2
c000534a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000534d:	89 fd                	mov    ebp,edi
c000534f:	31 c9                	xor    ecx,ecx
c0005351:	89 ea                	mov    edx,ebp
c0005353:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005355:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005359:	e8 c5 de ff ff       	call   c0003223 <get_fat.isra.2>
c000535e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005362:	45                   	inc    ebp
c0005363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005367:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000536a:	77 05                	ja     c0005371 <f_expand+0xb2>
c000536c:	bd 02 00 00 00       	mov    ebp,0x2
c0005371:	83 f8 01             	cmp    eax,0x1
c0005374:	74 20                	je     c0005396 <f_expand+0xd7>
c0005376:	83 f8 ff             	cmp    eax,0xffffffff
c0005379:	74 25                	je     c00053a0 <f_expand+0xe1>
c000537b:	85 c0                	test   eax,eax
c000537d:	75 09                	jne    c0005388 <f_expand+0xc9>
c000537f:	41                   	inc    ecx
c0005380:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005384:	75 07                	jne    c000538d <f_expand+0xce>
c0005386:	eb 1f                	jmp    c00053a7 <f_expand+0xe8>
c0005388:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000538b:	31 c9                	xor    ecx,ecx
c000538d:	39 fd                	cmp    ebp,edi
c000538f:	75 c0                	jne    c0005351 <f_expand+0x92>
c0005391:	e9 64 ff ff ff       	jmp    c00052fa <f_expand+0x3b>
c0005396:	be 02 00 00 00       	mov    esi,0x2
c000539b:	e9 82 00 00 00       	jmp    c0005422 <f_expand+0x163>
c00053a0:	be 01 00 00 00       	mov    esi,0x1
c00053a5:	eb 7b                	jmp    c0005422 <f_expand+0x163>
c00053a7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053ac:	74 2b                	je     c00053d9 <f_expand+0x11a>
c00053ae:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053b1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053b5:	85 ed                	test   ebp,ebp
c00053b7:	74 24                	je     c00053dd <f_expand+0x11e>
c00053b9:	83 c9 ff             	or     ecx,0xffffffff
c00053bc:	83 fd 01             	cmp    ebp,0x1
c00053bf:	74 03                	je     c00053c4 <f_expand+0x105>
c00053c1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053c4:	89 fa                	mov    edx,edi
c00053c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053ca:	e8 cf d3 ff ff       	call   c000279e <put_fat>
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 4d                	jne    c0005420 <f_expand+0x161>
c00053d3:	89 f8                	mov    eax,edi
c00053d5:	4d                   	dec    ebp
c00053d6:	47                   	inc    edi
c00053d7:	eb dc                	jmp    c00053b5 <f_expand+0xf6>
c00053d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053dc:	48                   	dec    eax
c00053dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053e1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053e6:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053e9:	74 37                	je     c0005422 <f_expand+0x163>
c00053eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053ee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053f1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053f5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053f8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053fb:	83 c8 40             	or     eax,0x40
c00053fe:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005401:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005404:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005407:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000540a:	39 c8                	cmp    eax,ecx
c000540c:	77 14                	ja     c0005422 <f_expand+0x163>
c000540e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005412:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005415:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005418:	83 c8 01             	or     eax,0x1
c000541b:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000541e:	eb 02                	jmp    c0005422 <f_expand+0x163>
c0005420:	89 c6                	mov    esi,eax
c0005422:	83 c4 2c             	add    esp,0x2c
c0005425:	89 f0                	mov    eax,esi
c0005427:	5b                   	pop    ebx
c0005428:	5e                   	pop    esi
c0005429:	5f                   	pop    edi
c000542a:	5d                   	pop    ebp
c000542b:	c3                   	ret    

c000542c <f_mkfs>:
c000542c:	55                   	push   ebp
c000542d:	57                   	push   edi
c000542e:	56                   	push   esi
c000542f:	be 0b 00 00 00       	mov    esi,0xb
c0005434:	53                   	push   ebx
c0005435:	83 ec 5c             	sub    esp,0x5c
c0005438:	8d 44 24 70          	lea    eax,[esp+0x70]
c000543c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005440:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005444:	e8 17 ce ff ff       	call   c0002260 <get_ldnumber>
c0005449:	85 c0                	test   eax,eax
c000544b:	0f 88 d1 07 00 00    	js     c0005c22 <f_mkfs+0x7f6>
c0005451:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005458:	85 d2                	test   edx,edx
c000545a:	74 03                	je     c000545f <f_mkfs+0x33>
c000545c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000545f:	85 db                	test   ebx,ebx
c0005461:	75 05                	jne    c0005468 <f_mkfs+0x3c>
c0005463:	bb 40 f4 01 c0       	mov    ebx,0xc001f440
c0005468:	0f b6 c0             	movzx  eax,al
c000546b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000546f:	83 ec 0c             	sub    esp,0xc
c0005472:	be 03 00 00 00       	mov    esi,0x3
c0005477:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000547b:	e8 21 c9 ff ff       	call   c0001da1 <disk_initialize>
c0005480:	83 c4 10             	add    esp,0x10
c0005483:	a8 01                	test   al,0x1
c0005485:	0f 85 97 07 00 00    	jne    c0005c22 <f_mkfs+0x7f6>
c000548b:	be 0a 00 00 00       	mov    esi,0xa
c0005490:	a8 04                	test   al,0x4
c0005492:	0f 85 8a 07 00 00    	jne    c0005c22 <f_mkfs+0x7f6>
c0005498:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000549b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000549f:	85 c0                	test   eax,eax
c00054a1:	75 20                	jne    c00054c3 <f_mkfs+0x97>
c00054a3:	51                   	push   ecx
c00054a4:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054a8:	50                   	push   eax
c00054a9:	6a 03                	push   0x3
c00054ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054af:	e8 1c c9 ff ff       	call   c0001dd0 <disk_ioctl>
c00054b4:	83 c4 10             	add    esp,0x10
c00054b7:	85 c0                	test   eax,eax
c00054b9:	74 08                	je     c00054c3 <f_mkfs+0x97>
c00054bb:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054c7:	8d 42 ff             	lea    eax,[edx-0x1]
c00054ca:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054cf:	77 04                	ja     c00054d5 <f_mkfs+0xa9>
c00054d1:	85 c2                	test   edx,eax
c00054d3:	74 08                	je     c00054dd <f_mkfs+0xb1>
c00054d5:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054dd:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054e0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054e8:	48                   	dec    eax
c00054e9:	3c 01                	cmp    al,0x1
c00054eb:	76 05                	jbe    c00054f2 <f_mkfs+0xc6>
c00054ed:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054f9:	48                   	dec    eax
c00054fa:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054ff:	77 07                	ja     c0005508 <f_mkfs+0xdc>
c0005501:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c0005506:	74 08                	je     c0005510 <f_mkfs+0xe4>
c0005508:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005510:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005513:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005519:	77 07                	ja     c0005522 <f_mkfs+0xf6>
c000551b:	8d 47 ff             	lea    eax,[edi-0x1]
c000551e:	85 f8                	test   eax,edi
c0005520:	74 02                	je     c0005524 <f_mkfs+0xf8>
c0005522:	31 ff                	xor    edi,edi
c0005524:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000552c:	77 0a                	ja     c0005538 <f_mkfs+0x10c>
c000552e:	be 11 00 00 00       	mov    esi,0x11
c0005533:	e9 ea 06 00 00       	jmp    c0005c22 <f_mkfs+0x7f6>
c0005538:	8b 33                	mov    esi,DWORD PTR [ebx]
c000553a:	85 ed                	test   ebp,ebp
c000553c:	89 eb                	mov    ebx,ebp
c000553e:	75 1e                	jne    c000555e <f_mkfs+0x132>
c0005540:	83 ec 0c             	sub    esp,0xc
c0005543:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000554a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000554f:	50                   	push   eax
c0005550:	e8 d7 06 00 00       	call   c0005c2c <ff_memalloc>
c0005555:	83 c4 10             	add    esp,0x10
c0005558:	89 c3                	mov    ebx,eax
c000555a:	85 c0                	test   eax,eax
c000555c:	74 d0                	je     c000552e <f_mkfs+0x102>
c000555e:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005566:	52                   	push   edx
c0005567:	8d 44 24 48          	lea    eax,[esp+0x48]
c000556b:	50                   	push   eax
c000556c:	6a 01                	push   0x1
c000556e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005572:	e8 59 c8 ff ff       	call   c0001dd0 <disk_ioctl>
c0005577:	83 c4 10             	add    esp,0x10
c000557a:	85 c0                	test   eax,eax
c000557c:	0f 85 49 06 00 00    	jne    c0005bcb <f_mkfs+0x79f>
c0005582:	89 f0                	mov    eax,esi
c0005584:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000558c:	83 e0 08             	and    eax,0x8
c000558f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005593:	75 18                	jne    c00055ad <f_mkfs+0x181>
c0005595:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005599:	83 f8 3f             	cmp    eax,0x3f
c000559c:	76 0f                	jbe    c00055ad <f_mkfs+0x181>
c000559e:	83 e8 3f             	sub    eax,0x3f
c00055a1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00055a9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055ad:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055b5:	83 f8 7f             	cmp    eax,0x7f
c00055b8:	0f 86 5b 02 00 00    	jbe    c0005819 <f_mkfs+0x3ed>
c00055be:	b9 80 00 00 00       	mov    ecx,0x80
c00055c3:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055c9:	77 05                	ja     c00055d0 <f_mkfs+0x1a4>
c00055cb:	c1 ef 09             	shr    edi,0x9
c00055ce:	89 f9                	mov    ecx,edi
c00055d0:	89 f0                	mov    eax,esi
c00055d2:	89 f7                	mov    edi,esi
c00055d4:	83 e0 01             	and    eax,0x1
c00055d7:	83 e7 02             	and    edi,0x2
c00055da:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055de:	0f b6 c0             	movzx  eax,al
c00055e1:	74 0a                	je     c00055ed <f_mkfs+0x1c1>
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 84 4f 01 00 00    	je     c000573a <f_mkfs+0x30e>
c00055eb:	eb 37                	jmp    c0005624 <f_mkfs+0x1f8>
c00055ed:	be 13 00 00 00       	mov    esi,0x13
c00055f2:	85 c0                	test   eax,eax
c00055f4:	75 2e                	jne    c0005624 <f_mkfs+0x1f8>
c00055f6:	e9 e7 05 00 00       	jmp    c0005be2 <f_mkfs+0x7b6>
c00055fb:	83 f8 02             	cmp    eax,0x2
c00055fe:	0f 85 0d 02 00 00    	jne    c0005811 <f_mkfs+0x3e5>
c0005604:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000560a:	0f 86 e4 01 00 00    	jbe    c00057f4 <f_mkfs+0x3c8>
c0005610:	85 c9                	test   ecx,ecx
c0005612:	0f 85 dc 05 00 00    	jne    c0005bf4 <f_mkfs+0x7c8>
c0005618:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000561b:	83 f9 40             	cmp    ecx,0x40
c000561e:	0f 87 e0 05 00 00    	ja     c0005c04 <f_mkfs+0x7d8>
c0005624:	89 cf                	mov    edi,ecx
c0005626:	85 c9                	test   ecx,ecx
c0005628:	75 1c                	jne    c0005646 <f_mkfs+0x21a>
c000562a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000562e:	b8 20 f4 01 c0       	mov    eax,0xc001f420
c0005633:	c1 ee 0c             	shr    esi,0xc
c0005636:	bf 01 00 00 00       	mov    edi,0x1
c000563b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000563e:	85 d2                	test   edx,edx
c0005640:	0f 85 63 01 00 00    	jne    c00057a9 <f_mkfs+0x37d>
c0005646:	31 d2                	xor    edx,edx
c0005648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000564c:	f7 f7                	div    edi
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	0f 86 62 01 00 00    	jbe    c00057bb <f_mkfs+0x38f>
c0005659:	83 c0 02             	add    eax,0x2
c000565c:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005661:	01 c0                	add    eax,eax
c0005663:	05 ff 01 00 00       	add    eax,0x1ff
c0005668:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005670:	c1 e8 09             	shr    eax,0x9
c0005673:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000567b:	c1 e0 05             	shl    eax,0x5
c000567e:	c1 e8 09             	shr    eax,0x9
c0005681:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005685:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000568a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000568e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005692:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000569a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000569e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056a3:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056a7:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056ab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056b7:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056bb:	f7 d8                	neg    eax
c00056bd:	21 c6                	and    esi,eax
c00056bf:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056c4:	29 d6                	sub    esi,edx
c00056c6:	83 f8 03             	cmp    eax,0x3
c00056c9:	0f 85 ff 00 00 00    	jne    c00057ce <f_mkfs+0x3a2>
c00056cf:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056d3:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056d7:	89 f8                	mov    eax,edi
c00056d9:	c1 e0 04             	shl    eax,0x4
c00056dc:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056e0:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056e4:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056e8:	0f 82 2b 01 00 00    	jb     c0005819 <f_mkfs+0x3ed>
c00056ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056f6:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056fb:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056ff:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005703:	29 d0                	sub    eax,edx
c0005705:	31 d2                	xor    edx,edx
c0005707:	f7 f7                	div    edi
c0005709:	89 c6                	mov    esi,eax
c000570b:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005710:	83 f8 03             	cmp    eax,0x3
c0005713:	0f 85 e2 fe ff ff    	jne    c00055fb <f_mkfs+0x1cf>
c0005719:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c000571f:	0f 87 03 01 00 00    	ja     c0005828 <f_mkfs+0x3fc>
c0005725:	85 c9                	test   ecx,ecx
c0005727:	0f 85 ec 00 00 00    	jne    c0005819 <f_mkfs+0x3ed>
c000572d:	83 ff 01             	cmp    edi,0x1
c0005730:	0f 86 e3 00 00 00    	jbe    c0005819 <f_mkfs+0x3ed>
c0005736:	d1 ef                	shr    edi,1
c0005738:	89 f9                	mov    ecx,edi
c000573a:	89 ce                	mov    esi,ecx
c000573c:	85 c9                	test   ecx,ecx
c000573e:	75 25                	jne    c0005765 <f_mkfs+0x339>
c0005740:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005744:	b8 30 f4 01 c0       	mov    eax,0xc001f430
c0005749:	c1 ee 11             	shr    esi,0x11
c000574c:	b9 01 00 00 00       	mov    ecx,0x1
c0005751:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005754:	85 d2                	test   edx,edx
c0005756:	74 0b                	je     c0005763 <f_mkfs+0x337>
c0005758:	83 c0 02             	add    eax,0x2
c000575b:	39 f2                	cmp    edx,esi
c000575d:	77 04                	ja     c0005763 <f_mkfs+0x337>
c000575f:	01 c9                	add    ecx,ecx
c0005761:	eb ee                	jmp    c0005751 <f_mkfs+0x325>
c0005763:	31 f6                	xor    esi,esi
c0005765:	31 d2                	xor    edx,edx
c0005767:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000576b:	f7 f1                	div    ecx
c000576d:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005774:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005779:	c1 ea 09             	shr    edx,0x9
c000577c:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005781:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005785:	0f 87 8e 00 00 00    	ja     c0005819 <f_mkfs+0x3ed>
c000578b:	89 cf                	mov    edi,ecx
c000578d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005795:	89 f1                	mov    ecx,esi
c0005797:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c000579f:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057a4:	e9 dc fe ff ff       	jmp    c0005685 <f_mkfs+0x259>
c00057a9:	83 c0 02             	add    eax,0x2
c00057ac:	39 f2                	cmp    edx,esi
c00057ae:	0f 87 92 fe ff ff    	ja     c0005646 <f_mkfs+0x21a>
c00057b4:	01 ff                	add    edi,edi
c00057b6:	e9 80 fe ff ff       	jmp    c000563b <f_mkfs+0x20f>
c00057bb:	8d 04 40             	lea    eax,[eax+eax*2]
c00057be:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057c3:	40                   	inc    eax
c00057c4:	d1 e8                	shr    eax,1
c00057c6:	83 c0 03             	add    eax,0x3
c00057c9:	e9 95 fe ff ff       	jmp    c0005663 <f_mkfs+0x237>
c00057ce:	31 d2                	xor    edx,edx
c00057d0:	89 f0                	mov    eax,esi
c00057d2:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057d6:	85 d2                	test   edx,edx
c00057d8:	74 09                	je     c00057e3 <f_mkfs+0x3b7>
c00057da:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057de:	4e                   	dec    esi
c00057df:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057e3:	89 f0                	mov    eax,esi
c00057e5:	31 d2                	xor    edx,edx
c00057e7:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057eb:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057ef:	e9 e3 fe ff ff       	jmp    c00056d7 <f_mkfs+0x2ab>
c00057f4:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057fa:	77 2c                	ja     c0005828 <f_mkfs+0x3fc>
c00057fc:	85 c9                	test   ecx,ecx
c00057fe:	75 19                	jne    c0005819 <f_mkfs+0x3ed>
c0005800:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005803:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005809:	0f 86 15 fe ff ff    	jbe    c0005624 <f_mkfs+0x1f8>
c000580f:	eb 08                	jmp    c0005819 <f_mkfs+0x3ed>
c0005811:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005817:	76 0a                	jbe    c0005823 <f_mkfs+0x3f7>
c0005819:	be 0e 00 00 00       	mov    esi,0xe
c000581e:	e9 bf 03 00 00       	jmp    c0005be2 <f_mkfs+0x7b6>
c0005823:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005828:	31 d2                	xor    edx,edx
c000582a:	b9 00 02 00 00       	mov    ecx,0x200
c000582f:	89 d8                	mov    eax,ebx
c0005831:	e8 fa c5 ff ff       	call   c0001e30 <mem_set>
c0005836:	b9 0b 00 00 00       	mov    ecx,0xb
c000583b:	ba d2 f3 01 c0       	mov    edx,0xc001f3d2
c0005840:	89 d8                	mov    eax,ebx
c0005842:	e8 d4 c5 ff ff       	call   c0001e1b <mem_cpy>
c0005847:	8d 43 0b             	lea    eax,[ebx+0xb]
c000584a:	ba 00 02 00 00       	mov    edx,0x200
c000584f:	e8 c0 c5 ff ff       	call   c0001e14 <st_word>
c0005854:	89 f8                	mov    eax,edi
c0005856:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000585b:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000585e:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005861:	e8 ae c5 ff ff       	call   c0001e14 <st_word>
c0005866:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000586a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000586d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005872:	83 f8 03             	cmp    eax,0x3
c0005875:	75 08                	jne    c000587f <f_mkfs+0x453>
c0005877:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000587f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005883:	8d 43 11             	lea    eax,[ebx+0x11]
c0005886:	e8 89 c5 ff ff       	call   c0001e14 <st_word>
c000588b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000588f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005895:	77 0a                	ja     c00058a1 <f_mkfs+0x475>
c0005897:	8d 43 13             	lea    eax,[ebx+0x13]
c000589a:	e8 75 c5 ff ff       	call   c0001e14 <st_word>
c000589f:	eb 08                	jmp    c00058a9 <f_mkfs+0x47d>
c00058a1:	8d 43 20             	lea    eax,[ebx+0x20]
c00058a4:	e8 6f c5 ff ff       	call   c0001e18 <st_dword>
c00058a9:	8d 43 18             	lea    eax,[ebx+0x18]
c00058ac:	ba 3f 00 00 00       	mov    edx,0x3f
c00058b1:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058b5:	e8 5a c5 ff ff       	call   c0001e14 <st_word>
c00058ba:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058bd:	ba ff 00 00 00       	mov    edx,0xff
c00058c2:	e8 4d c5 ff ff       	call   c0001e14 <st_word>
c00058c7:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058ce:	e8 45 c5 ff ff       	call   c0001e18 <st_dword>
c00058d3:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d8:	83 f8 03             	cmp    eax,0x3
c00058db:	75 57                	jne    c0005934 <f_mkfs+0x508>
c00058dd:	8d 43 43             	lea    eax,[ebx+0x43]
c00058e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00058e5:	e8 2e c5 ff ff       	call   c0001e18 <st_dword>
c00058ea:	8d 43 24             	lea    eax,[ebx+0x24]
c00058ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058f1:	e8 22 c5 ff ff       	call   c0001e18 <st_dword>
c00058f6:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058f9:	ba 02 00 00 00       	mov    edx,0x2
c00058fe:	e8 15 c5 ff ff       	call   c0001e18 <st_dword>
c0005903:	8d 43 30             	lea    eax,[ebx+0x30]
c0005906:	ba 01 00 00 00       	mov    edx,0x1
c000590b:	e8 04 c5 ff ff       	call   c0001e14 <st_word>
c0005910:	8d 43 32             	lea    eax,[ebx+0x32]
c0005913:	ba 06 00 00 00       	mov    edx,0x6
c0005918:	e8 f7 c4 ff ff       	call   c0001e14 <st_word>
c000591d:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005921:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005925:	8d 43 47             	lea    eax,[ebx+0x47]
c0005928:	b9 13 00 00 00       	mov    ecx,0x13
c000592d:	ba de f3 01 c0       	mov    edx,0xc001f3de
c0005932:	eb 2f                	jmp    c0005963 <f_mkfs+0x537>
c0005934:	8d 43 27             	lea    eax,[ebx+0x27]
c0005937:	ba 00 00 21 50       	mov    edx,0x50210000
c000593c:	e8 d7 c4 ff ff       	call   c0001e18 <st_dword>
c0005941:	8d 43 16             	lea    eax,[ebx+0x16]
c0005944:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005949:	e8 c6 c4 ff ff       	call   c0001e14 <st_word>
c000594e:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005952:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005956:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005959:	b9 13 00 00 00       	mov    ecx,0x13
c000595e:	ba f2 f3 01 c0       	mov    edx,0xc001f3f2
c0005963:	e8 b3 c4 ff ff       	call   c0001e1b <mem_cpy>
c0005968:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000596e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005973:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005977:	e8 98 c4 ff ff       	call   c0001e14 <st_word>
c000597c:	6a 01                	push   0x1
c000597e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005982:	53                   	push   ebx
c0005983:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005987:	e8 2e c4 ff ff       	call   c0001dba <disk_write>
c000598c:	83 c4 10             	add    esp,0x10
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 34 02 00 00    	jne    c0005bcb <f_mkfs+0x79f>
c0005997:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000599c:	83 f8 03             	cmp    eax,0x3
c000599f:	0f 85 98 00 00 00    	jne    c0005a3d <f_mkfs+0x611>
c00059a5:	6a 01                	push   0x1
c00059a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059ab:	83 c0 06             	add    eax,0x6
c00059ae:	50                   	push   eax
c00059af:	53                   	push   ebx
c00059b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b4:	e8 01 c4 ff ff       	call   c0001dba <disk_write>
c00059b9:	b9 00 02 00 00       	mov    ecx,0x200
c00059be:	31 d2                	xor    edx,edx
c00059c0:	89 d8                	mov    eax,ebx
c00059c2:	e8 69 c4 ff ff       	call   c0001e30 <mem_set>
c00059c7:	ba 52 52 61 41       	mov    edx,0x41615252
c00059cc:	89 d8                	mov    eax,ebx
c00059ce:	e8 45 c4 ff ff       	call   c0001e18 <st_dword>
c00059d3:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059d9:	ba 72 72 41 61       	mov    edx,0x61417272
c00059de:	e8 35 c4 ff ff       	call   c0001e18 <st_dword>
c00059e3:	8d 56 ff             	lea    edx,[esi-0x1]
c00059e6:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059ec:	e8 27 c4 ff ff       	call   c0001e18 <st_dword>
c00059f1:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059f7:	ba 02 00 00 00       	mov    edx,0x2
c00059fc:	e8 17 c4 ff ff       	call   c0001e18 <st_dword>
c0005a01:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a06:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a0c:	e8 03 c4 ff ff       	call   c0001e14 <st_word>
c0005a11:	6a 01                	push   0x1
c0005a13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a17:	83 c0 07             	add    eax,0x7
c0005a1a:	50                   	push   eax
c0005a1b:	53                   	push   ebx
c0005a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a20:	e8 95 c3 ff ff       	call   c0001dba <disk_write>
c0005a25:	83 c4 20             	add    esp,0x20
c0005a28:	6a 01                	push   0x1
c0005a2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a2e:	40                   	inc    eax
c0005a2f:	50                   	push   eax
c0005a30:	53                   	push   ebx
c0005a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a35:	e8 80 c3 ff ff       	call   c0001dba <disk_write>
c0005a3a:	83 c4 10             	add    esp,0x10
c0005a3d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a41:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a45:	c1 e8 09             	shr    eax,0x9
c0005a48:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a52:	31 d2                	xor    edx,edx
c0005a54:	89 d8                	mov    eax,ebx
c0005a56:	e8 d5 c3 ff ff       	call   c0001e30 <mem_set>
c0005a5b:	31 c9                	xor    ecx,ecx
c0005a5d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a62:	83 f8 01             	cmp    eax,0x1
c0005a65:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a6d:	0f 94 c1             	sete   cl
c0005a70:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a78:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a7c:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a84:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a8c:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a91:	75 21                	jne    c0005ab4 <f_mkfs+0x688>
c0005a93:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a98:	89 d8                	mov    eax,ebx
c0005a9a:	e8 79 c3 ff ff       	call   c0001e18 <st_dword>
c0005a9f:	8d 43 04             	lea    eax,[ebx+0x4]
c0005aa2:	83 ca ff             	or     edx,0xffffffff
c0005aa5:	e8 6e c3 ff ff       	call   c0001e18 <st_dword>
c0005aaa:	8d 43 08             	lea    eax,[ebx+0x8]
c0005aad:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005ab2:	eb 06                	jmp    c0005aba <f_mkfs+0x68e>
c0005ab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 59 c3 ff ff       	call   c0001e18 <st_dword>
c0005abf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ac7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005acb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005acf:	39 ce                	cmp    esi,ecx
c0005ad1:	76 02                	jbe    c0005ad5 <f_mkfs+0x6a9>
c0005ad3:	89 ce                	mov    esi,ecx
c0005ad5:	56                   	push   esi
c0005ad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ada:	53                   	push   ebx
c0005adb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005adf:	e8 d6 c2 ff ff       	call   c0001dba <disk_write>
c0005ae4:	83 c4 10             	add    esp,0x10
c0005ae7:	85 c0                	test   eax,eax
c0005ae9:	0f 85 dc 00 00 00    	jne    c0005bcb <f_mkfs+0x79f>
c0005aef:	31 d2                	xor    edx,edx
c0005af1:	b9 00 02 00 00       	mov    ecx,0x200
c0005af6:	89 d8                	mov    eax,ebx
c0005af8:	e8 33 c3 ff ff       	call   c0001e30 <mem_set>
c0005afd:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b01:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005b05:	75 c0                	jne    c0005ac7 <f_mkfs+0x69b>
c0005b07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005b0b:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b13:	40                   	inc    eax
c0005b14:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b18:	0f 87 6e ff ff ff    	ja     c0005a8c <f_mkfs+0x660>
c0005b1e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b23:	83 f8 03             	cmp    eax,0x3
c0005b26:	74 04                	je     c0005b2c <f_mkfs+0x700>
c0005b28:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b2c:	89 fe                	mov    esi,edi
c0005b2e:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b32:	76 04                	jbe    c0005b38 <f_mkfs+0x70c>
c0005b34:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b38:	56                   	push   esi
c0005b39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b3d:	53                   	push   ebx
c0005b3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b42:	e8 73 c2 ff ff       	call   c0001dba <disk_write>
c0005b47:	83 c4 10             	add    esp,0x10
c0005b4a:	85 c0                	test   eax,eax
c0005b4c:	75 7d                	jne    c0005bcb <f_mkfs+0x79f>
c0005b4e:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b52:	29 f7                	sub    edi,esi
c0005b54:	75 d6                	jne    c0005b2c <f_mkfs+0x700>
c0005b56:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b5b:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b60:	83 f8 03             	cmp    eax,0x3
c0005b63:	74 1e                	je     c0005b83 <f_mkfs+0x757>
c0005b65:	b9 06 00 00 00       	mov    ecx,0x6
c0005b6a:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b72:	77 0f                	ja     c0005b83 <f_mkfs+0x757>
c0005b74:	b9 04 00 00 00       	mov    ecx,0x4
c0005b79:	83 f8 02             	cmp    eax,0x2
c0005b7c:	74 05                	je     c0005b83 <f_mkfs+0x757>
c0005b7e:	b9 01 00 00 00       	mov    ecx,0x1
c0005b83:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b88:	75 2a                	jne    c0005bb4 <f_mkfs+0x788>
c0005b8a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b8e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b96:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b9a:	83 ec 0c             	sub    esp,0xc
c0005b9d:	53                   	push   ebx
c0005b9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ba2:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005ba6:	e8 80 d2 ff ff       	call   c0002e2b <create_partition>
c0005bab:	83 c4 10             	add    esp,0x10
c0005bae:	89 c6                	mov    esi,eax
c0005bb0:	85 c0                	test   eax,eax
c0005bb2:	75 2e                	jne    c0005be2 <f_mkfs+0x7b6>
c0005bb4:	50                   	push   eax
c0005bb5:	31 f6                	xor    esi,esi
c0005bb7:	6a 00                	push   0x0
c0005bb9:	6a 00                	push   0x0
c0005bbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bbf:	e8 0c c2 ff ff       	call   c0001dd0 <disk_ioctl>
c0005bc4:	83 c4 10             	add    esp,0x10
c0005bc7:	85 c0                	test   eax,eax
c0005bc9:	74 17                	je     c0005be2 <f_mkfs+0x7b6>
c0005bcb:	85 ed                	test   ebp,ebp
c0005bcd:	75 0c                	jne    c0005bdb <f_mkfs+0x7af>
c0005bcf:	83 ec 0c             	sub    esp,0xc
c0005bd2:	53                   	push   ebx
c0005bd3:	e8 6c 00 00 00       	call   c0005c44 <ff_memfree>
c0005bd8:	83 c4 10             	add    esp,0x10
c0005bdb:	be 01 00 00 00       	mov    esi,0x1
c0005be0:	eb 40                	jmp    c0005c22 <f_mkfs+0x7f6>
c0005be2:	85 ed                	test   ebp,ebp
c0005be4:	75 3c                	jne    c0005c22 <f_mkfs+0x7f6>
c0005be6:	83 ec 0c             	sub    esp,0xc
c0005be9:	53                   	push   ebx
c0005bea:	e8 55 00 00 00       	call   c0005c44 <ff_memfree>
c0005bef:	83 c4 10             	add    esp,0x10
c0005bf2:	eb 2e                	jmp    c0005c22 <f_mkfs+0x7f6>
c0005bf4:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bf9:	0f 85 3b fb ff ff    	jne    c000573a <f_mkfs+0x30e>
c0005bff:	e9 15 fc ff ff       	jmp    c0005819 <f_mkfs+0x3ed>
c0005c04:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c09:	0f 85 31 fb ff ff    	jne    c0005740 <f_mkfs+0x314>
c0005c0f:	89 cf                	mov    edi,ecx
c0005c11:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c17:	0f 86 29 fa ff ff    	jbe    c0005646 <f_mkfs+0x21a>
c0005c1d:	e9 f7 fb ff ff       	jmp    c0005819 <f_mkfs+0x3ed>
c0005c22:	83 c4 5c             	add    esp,0x5c
c0005c25:	89 f0                	mov    eax,esi
c0005c27:	5b                   	pop    ebx
c0005c28:	5e                   	pop    esi
c0005c29:	5f                   	pop    edi
c0005c2a:	5d                   	pop    ebp
c0005c2b:	c3                   	ret    

c0005c2c <ff_memalloc>:
c0005c2c:	83 ec 0c             	sub    esp,0xc
c0005c2f:	83 ec 0c             	sub    esp,0xc
c0005c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c36:	e8 51 1e 00 00       	call   c0007a8c <malloc>
c0005c3b:	83 c4 10             	add    esp,0x10
c0005c3e:	83 c4 0c             	add    esp,0xc
c0005c41:	c3                   	ret    
c0005c42:	66 90                	xchg   ax,ax

c0005c44 <ff_memfree>:
c0005c44:	83 ec 0c             	sub    esp,0xc
c0005c47:	83 ec 0c             	sub    esp,0xc
c0005c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c4e:	e8 49 1e 00 00       	call   c0007a9c <free>
c0005c53:	83 c4 10             	add    esp,0x10
c0005c56:	90                   	nop
c0005c57:	83 c4 0c             	add    esp,0xc
c0005c5a:	c3                   	ret    
c0005c5b:	90                   	nop

c0005c5c <ff_uni2oem>:
c0005c5c:	83 ec 14             	sub    esp,0x14
c0005c5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c63:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c67:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c6e:	c7 44 24 0c 20 f8 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f820
c0005c76:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c7b:	77 0b                	ja     c0005c88 <ff_uni2oem+0x2c>
c0005c7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c81:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c86:	eb 64                	jmp    c0005cec <ff_uni2oem+0x90>
c0005c88:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c90:	77 5a                	ja     c0005cec <ff_uni2oem+0x90>
c0005c92:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c96:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c9b:	75 4f                	jne    c0005cec <ff_uni2oem+0x90>
c0005c9d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ca4:	eb 12                	jmp    c0005cb8 <ff_uni2oem+0x5c>
c0005ca6:	66 90                	xchg   ax,ax
c0005ca8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cad:	83 c0 01             	add    eax,0x1
c0005cb0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0005cb8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbd:	83 f8 7f             	cmp    eax,0x7f
c0005cc0:	77 1a                	ja     c0005cdc <ff_uni2oem+0x80>
c0005cc2:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cc7:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cce:	01 d0                	add    eax,edx
c0005cd0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cd3:	0f b7 c0             	movzx  eax,ax
c0005cd6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005cda:	75 cc                	jne    c0005ca8 <ff_uni2oem+0x4c>
c0005cdc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce1:	83 e8 80             	sub    eax,0xffffff80
c0005ce4:	0f b6 c0             	movzx  eax,al
c0005ce7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cec:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cf1:	83 c4 14             	add    esp,0x14
c0005cf4:	c3                   	ret    
c0005cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf8 <ff_oem2uni>:
c0005cf8:	83 ec 18             	sub    esp,0x18
c0005cfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d03:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d08:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d0c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d13:	c7 44 24 10 20 f8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f820
c0005d1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d20:	83 f8 7f             	cmp    eax,0x7f
c0005d23:	77 0b                	ja     c0005d30 <ff_oem2uni+0x38>
c0005d25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d29:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2e:	eb 34                	jmp    c0005d64 <ff_oem2uni+0x6c>
c0005d30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d34:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d39:	75 29                	jne    c0005d64 <ff_oem2uni+0x6c>
c0005d3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d40:	3d ff 00 00 00       	cmp    eax,0xff
c0005d45:	77 1d                	ja     c0005d64 <ff_oem2uni+0x6c>
c0005d47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d4c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d51:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d58:	01 d0                	add    eax,edx
c0005d5a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d5d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d62:	66 90                	xchg   ax,ax
c0005d64:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d69:	83 c4 18             	add    esp,0x18
c0005d6c:	c3                   	ret    
c0005d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d70 <ff_wtoupper>:
c0005d70:	83 ec 10             	sub    esp,0x10
c0005d73:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d7b:	0f 87 a7 01 00 00    	ja     c0005f28 <ff_wtoupper+0x1b8>
c0005d81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d85:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d8a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d8f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d94:	77 0a                	ja     c0005da0 <ff_wtoupper+0x30>
c0005d96:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c0005d9b:	eb 0b                	jmp    c0005da8 <ff_wtoupper+0x38>
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	b8 60 f5 01 c0       	mov    eax,0xc001f560
c0005da5:	8d 76 00             	lea    esi,[esi+0x0]
c0005da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005db0:	8d 50 02             	lea    edx,[eax+0x2]
c0005db3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005dba:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005dbf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dc4:	85 c0                	test   eax,eax
c0005dc6:	0f 84 50 01 00 00    	je     c0005f1c <ff_wtoupper+0x1ac>
c0005dcc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dd1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dd6:	39 c2                	cmp    edx,eax
c0005dd8:	0f 82 3e 01 00 00    	jb     c0005f1c <ff_wtoupper+0x1ac>
c0005dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005de2:	8d 50 02             	lea    edx,[eax+0x2]
c0005de5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005dec:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005df1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005df6:	c1 e8 08             	shr    eax,0x8
c0005df9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dfe:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e03:	0f b6 c0             	movzx  eax,al
c0005e06:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e0b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e10:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e15:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e1a:	01 ca                	add    edx,ecx
c0005e1c:	39 d0                	cmp    eax,edx
c0005e1e:	0f 8d d4 00 00 00    	jge    c0005ef8 <ff_wtoupper+0x188>
c0005e24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e29:	83 f8 08             	cmp    eax,0x8
c0005e2c:	0f 87 e6 00 00 00    	ja     c0005f18 <ff_wtoupper+0x1a8>
c0005e32:	8b 04 85 20 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0ae0]
c0005e39:	ff e0                	jmp    eax
c0005e3b:	90                   	nop
c0005e3c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e41:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e46:	29 c2                	sub    edx,eax
c0005e48:	89 d0                	mov    eax,edx
c0005e4a:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e51:	01 d0                	add    eax,edx
c0005e53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e56:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e5b:	e9 94 00 00 00       	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005e60:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e69:	89 d1                	mov    ecx,edx
c0005e6b:	29 c1                	sub    ecx,eax
c0005e6d:	89 c8                	mov    eax,ecx
c0005e6f:	83 e0 01             	and    eax,0x1
c0005e72:	89 c2                	mov    edx,eax
c0005e74:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e79:	29 d0                	sub    eax,edx
c0005e7b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e80:	eb 72                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e89:	83 e8 10             	sub    eax,0x10
c0005e8c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e91:	eb 61                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005e93:	90                   	nop
c0005e94:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e99:	83 e8 20             	sub    eax,0x20
c0005e9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea1:	eb 51                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005ea3:	90                   	nop
c0005ea4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea9:	83 e8 30             	sub    eax,0x30
c0005eac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb1:	eb 41                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005eb3:	90                   	nop
c0005eb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb9:	83 e8 1a             	sub    eax,0x1a
c0005ebc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec1:	eb 31                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005ec3:	90                   	nop
c0005ec4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec9:	83 c0 08             	add    eax,0x8
c0005ecc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed1:	eb 21                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005ed3:	90                   	nop
c0005ed4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed9:	83 e8 50             	sub    eax,0x50
c0005edc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee1:	eb 11                	jmp    c0005ef4 <ff_wtoupper+0x184>
c0005ee3:	90                   	nop
c0005ee4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee9:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eee:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef3:	90                   	nop
c0005ef4:	eb 22                	jmp    c0005f18 <ff_wtoupper+0x1a8>
c0005ef6:	66 90                	xchg   ax,ax
c0005ef8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005efd:	85 c0                	test   eax,eax
c0005eff:	0f 85 a7 fe ff ff    	jne    c0005dac <ff_wtoupper+0x3c>
c0005f05:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f0a:	d1 e0                	shl    eax,1
c0005f0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f10:	e9 97 fe ff ff       	jmp    c0005dac <ff_wtoupper+0x3c>
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	90                   	nop
c0005f19:	8d 76 00             	lea    esi,[esi+0x0]
c0005f1c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f25:	8d 76 00             	lea    esi,[esi+0x0]
c0005f28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f2c:	83 c4 10             	add    esp,0x10
c0005f2f:	c3                   	ret    

c0005f30 <utf2ucs>:
c0005f30:	57                   	push   edi
c0005f31:	31 c9                	xor    ecx,ecx
c0005f33:	56                   	push   esi
c0005f34:	89 d7                	mov    edi,edx
c0005f36:	53                   	push   ebx
c0005f37:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f41:	c1 fe 08             	sar    esi,0x8
c0005f44:	89 f2                	mov    edx,esi
c0005f46:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f49:	41                   	inc    ecx
c0005f4a:	85 db                	test   ebx,ebx
c0005f4c:	75 e9                	jne    c0005f37 <utf2ucs+0x7>
c0005f4e:	5b                   	pop    ebx
c0005f4f:	5e                   	pop    esi
c0005f50:	5f                   	pop    edi
c0005f51:	c3                   	ret    

c0005f52 <ucs2utfn>:
c0005f52:	83 e1 fe             	and    ecx,0xfffffffe
c0005f55:	01 d1                	add    ecx,edx
c0005f57:	39 d1                	cmp    ecx,edx
c0005f59:	75 04                	jne    c0005f5f <ucs2utfn+0xd>
c0005f5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5e:	c3                   	ret    
c0005f5f:	57                   	push   edi
c0005f60:	56                   	push   esi
c0005f61:	53                   	push   ebx
c0005f62:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f65:	83 c2 02             	add    edx,0x2
c0005f68:	89 de                	mov    esi,ebx
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f71:	09 f3                	or     ebx,esi
c0005f73:	83 fb 3b             	cmp    ebx,0x3b
c0005f76:	74 50                	je     c0005fc8 <ucs2utfn+0x76>
c0005f78:	83 fb 7f             	cmp    ebx,0x7f
c0005f7b:	7f 05                	jg     c0005f82 <ucs2utfn+0x30>
c0005f7d:	88 18                	mov    BYTE PTR [eax],bl
c0005f7f:	40                   	inc    eax
c0005f80:	eb 42                	jmp    c0005fc4 <ucs2utfn+0x72>
c0005f82:	89 df                	mov    edi,ebx
c0005f84:	89 de                	mov    esi,ebx
c0005f86:	c1 fe 06             	sar    esi,0x6
c0005f89:	83 e7 3f             	and    edi,0x3f
c0005f8c:	83 cf 80             	or     edi,0xffffff80
c0005f8f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f95:	7f 12                	jg     c0005fa9 <ucs2utfn+0x57>
c0005f97:	83 ce c0             	or     esi,0xffffffc0
c0005f9a:	83 c0 02             	add    eax,0x2
c0005f9d:	89 f3                	mov    ebx,esi
c0005f9f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fa2:	89 fb                	mov    ebx,edi
c0005fa4:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa7:	eb 1b                	jmp    c0005fc4 <ucs2utfn+0x72>
c0005fa9:	c1 fb 0c             	sar    ebx,0xc
c0005fac:	83 e6 3f             	and    esi,0x3f
c0005faf:	83 cb e0             	or     ebx,0xffffffe0
c0005fb2:	83 ce 80             	or     esi,0xffffff80
c0005fb5:	88 18                	mov    BYTE PTR [eax],bl
c0005fb7:	89 f3                	mov    ebx,esi
c0005fb9:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0005fbc:	89 fb                	mov    ebx,edi
c0005fbe:	88 58 02             	mov    BYTE PTR [eax+0x2],bl
c0005fc1:	83 c0 03             	add    eax,0x3
c0005fc4:	39 d1                	cmp    ecx,edx
c0005fc6:	75 9a                	jne    c0005f62 <ucs2utfn+0x10>
c0005fc8:	5b                   	pop    ebx
c0005fc9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fcc:	5e                   	pop    esi
c0005fcd:	5f                   	pop    edi
c0005fce:	c3                   	ret    

c0005fcf <isjoliet>:
c0005fcf:	31 d2                	xor    edx,edx
c0005fd1:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd4:	75 26                	jne    c0005ffc <isjoliet+0x2d>
c0005fd6:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fda:	75 20                	jne    c0005ffc <isjoliet+0x2d>
c0005fdc:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fe0:	ba 02 00 00 00       	mov    edx,0x2
c0005fe5:	83 f8 43             	cmp    eax,0x43
c0005fe8:	74 12                	je     c0005ffc <isjoliet+0x2d>
c0005fea:	ba 03 00 00 00       	mov    edx,0x3
c0005fef:	83 f8 45             	cmp    eax,0x45
c0005ff2:	74 08                	je     c0005ffc <isjoliet+0x2d>
c0005ff4:	31 d2                	xor    edx,edx
c0005ff6:	83 f8 40             	cmp    eax,0x40
c0005ff9:	0f 94 c2             	sete   dl
c0005ffc:	89 d0                	mov    eax,edx
c0005ffe:	c3                   	ret    

c0005fff <htohl_32>:
c0005fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0006001:	c3                   	ret    

c0006002 <iso_733>:
c0006002:	eb fb                	jmp    c0005fff <htohl_32>

c0006004 <bgrad_cache>:
c0006004:	83 fa 0e             	cmp    edx,0xe
c0006007:	77 16                	ja     c000601f <bgrad_cache+0x1b>
c0006009:	53                   	push   ebx
c000600a:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c000600d:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006011:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006014:	42                   	inc    edx
c0006015:	83 fa 0f             	cmp    edx,0xf
c0006018:	75 f3                	jne    c000600d <bgrad_cache+0x9>
c000601a:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c000601d:	5b                   	pop    ebx
c000601e:	c3                   	ret    
c000601f:	c3                   	ret    

c0006020 <ucscompare>:
c0006020:	55                   	push   ebp
c0006021:	57                   	push   edi
c0006022:	89 c7                	mov    edi,eax
c0006024:	56                   	push   esi
c0006025:	89 d6                	mov    esi,edx
c0006027:	53                   	push   ebx
c0006028:	31 d2                	xor    edx,edx
c000602a:	83 ec 1c             	sub    esp,0x1c
c000602d:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006031:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006036:	c1 e3 08             	shl    ebx,0x8
c0006039:	09 c3                	or     ebx,eax
c000603b:	39 ca                	cmp    edx,ecx
c000603d:	7d 42                	jge    c0006081 <ucscompare+0x61>
c000603f:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006043:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006048:	c1 e0 08             	shl    eax,0x8
c000604b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604f:	09 e8                	or     eax,ebp
c0006051:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006055:	83 f8 3b             	cmp    eax,0x3b
c0006058:	74 27                	je     c0006081 <ucscompare+0x61>
c000605a:	83 ec 0c             	sub    esp,0xc
c000605d:	50                   	push   eax
c000605e:	e8 dd a8 ff ff       	call   c0000940 <tolower>
c0006063:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006066:	89 c5                	mov    ebp,eax
c0006068:	e8 d3 a8 ff ff       	call   c0000940 <tolower>
c000606d:	83 c4 10             	add    esp,0x10
c0006070:	39 c5                	cmp    ebp,eax
c0006072:	75 20                	jne    c0006094 <ucscompare+0x74>
c0006074:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006078:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000607c:	83 c2 02             	add    edx,0x2
c000607f:	eb ac                	jmp    c000602d <ucscompare+0xd>
c0006081:	83 fb 2f             	cmp    ebx,0x2f
c0006084:	0f 95 c2             	setne  dl
c0006087:	31 c0                	xor    eax,eax
c0006089:	85 db                	test   ebx,ebx
c000608b:	0f 95 c0             	setne  al
c000608e:	21 d0                	and    eax,edx
c0006090:	f7 d8                	neg    eax
c0006092:	eb 03                	jmp    c0006097 <ucscompare+0x77>
c0006094:	83 c8 ff             	or     eax,0xffffffff
c0006097:	83 c4 1c             	add    esp,0x1c
c000609a:	5b                   	pop    ebx
c000609b:	5e                   	pop    esi
c000609c:	5f                   	pop    edi
c000609d:	5d                   	pop    ebp
c000609e:	c3                   	ret    

c000609f <fncompare>:
c000609f:	55                   	push   ebp
c00060a0:	57                   	push   edi
c00060a1:	89 c7                	mov    edi,eax
c00060a3:	56                   	push   esi
c00060a4:	89 ce                	mov    esi,ecx
c00060a6:	53                   	push   ebx
c00060a7:	31 db                	xor    ebx,ebx
c00060a9:	83 ec 1c             	sub    esp,0x1c
c00060ac:	39 d3                	cmp    ebx,edx
c00060ae:	7d 45                	jge    c00060f5 <fncompare+0x56>
c00060b0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b4:	83 f8 3b             	cmp    eax,0x3b
c00060b7:	74 3c                	je     c00060f5 <fncompare+0x56>
c00060b9:	83 f8 2e             	cmp    eax,0x2e
c00060bc:	75 0e                	jne    c00060cc <fncompare+0x2d>
c00060be:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060c1:	39 d9                	cmp    ecx,ebx
c00060c3:	74 30                	je     c00060f5 <fncompare+0x56>
c00060c5:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060ca:	74 29                	je     c00060f5 <fncompare+0x56>
c00060cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060d0:	83 ec 0c             	sub    esp,0xc
c00060d3:	50                   	push   eax
c00060d4:	e8 67 a8 ff ff       	call   c0000940 <tolower>
c00060d9:	89 c5                	mov    ebp,eax
c00060db:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060df:	89 04 24             	mov    DWORD PTR [esp],eax
c00060e2:	e8 59 a8 ff ff       	call   c0000940 <tolower>
c00060e7:	83 c4 10             	add    esp,0x10
c00060ea:	39 c5                	cmp    ebp,eax
c00060ec:	75 1e                	jne    c000610c <fncompare+0x6d>
c00060ee:	43                   	inc    ebx
c00060ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060f3:	eb b7                	jmp    c00060ac <fncompare+0xd>
c00060f5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f9:	83 fa 2f             	cmp    edx,0x2f
c00060fc:	0f 95 c1             	setne  cl
c00060ff:	31 c0                	xor    eax,eax
c0006101:	85 d2                	test   edx,edx
c0006103:	0f 95 c0             	setne  al
c0006106:	21 c8                	and    eax,ecx
c0006108:	f7 d8                	neg    eax
c000610a:	eb 03                	jmp    c000610f <fncompare+0x70>
c000610c:	83 c8 ff             	or     eax,0xffffffff
c000610f:	83 c4 1c             	add    esp,0x1c
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	5f                   	pop    edi
c0006115:	5d                   	pop    ebp
c0006116:	c3                   	ret    

c0006117 <bclear_cache>:
c0006117:	83 ec 18             	sub    esp,0x18
c000611a:	68 20 f9 01 c0       	push   0xc001f920
c000611f:	e8 78 31 01 00       	call   c001929c <iso_kprintf>
c0006124:	83 c4 10             	add    esp,0x10
c0006127:	31 c0                	xor    eax,eax
c0006129:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006130:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006136:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c000613d:	40                   	inc    eax
c000613e:	83 f8 10             	cmp    eax,0x10
c0006141:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006147:	75 e0                	jne    c0006129 <bclear_cache+0x12>
c0006149:	83 c4 0c             	add    esp,0xc
c000614c:	c3                   	ret    

c000614d <bclear>:
c000614d:	eb c8                	jmp    c0006117 <bclear_cache>

c000614f <iso_break_all>:
c000614f:	83 ec 18             	sub    esp,0x18
c0006152:	68 2e f9 01 c0       	push   0xc001f92e
c0006157:	e8 40 31 01 00       	call   c001929c <iso_kprintf>
c000615c:	83 c4 10             	add    esp,0x10
c000615f:	31 c0                	xor    eax,eax
c0006161:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c000616b:	05 94 00 00 00       	add    eax,0x94
c0006170:	3d 40 09 00 00       	cmp    eax,0x940
c0006175:	75 ea                	jne    c0006161 <iso_break_all+0x12>
c0006177:	83 c4 0c             	add    esp,0xc
c000617a:	c3                   	ret    

c000617b <isoReadDiscSector>:
c000617b:	83 ec 0c             	sub    esp,0xc
c000617e:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006185:	50                   	push   eax
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006192:	e8 a9 30 01 00       	call   c0019240 <isoReadDiscSectorHelper>
c0006197:	83 c4 1c             	add    esp,0x1c
c000619a:	c3                   	ret    

c000619b <bread_cache>:
c000619b:	55                   	push   ebp
c000619c:	57                   	push   edi
c000619d:	89 d7                	mov    edi,edx
c000619f:	56                   	push   esi
c00061a0:	ba 0f 00 00 00       	mov    edx,0xf
c00061a5:	53                   	push   ebx
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	83 ec 0c             	sub    esp,0xc
c00061ab:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061ae:	39 38                	cmp    DWORD PTR [eax],edi
c00061b0:	74 3c                	je     c00061ee <bread_cache+0x53>
c00061b2:	4a                   	dec    edx
c00061b3:	83 fa ff             	cmp    edx,0xffffffff
c00061b6:	75 f3                	jne    c00061ab <bread_cache+0x10>
c00061b8:	31 db                	xor    ebx,ebx
c00061ba:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061bd:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061c0:	74 08                	je     c00061ca <bread_cache+0x2f>
c00061c2:	43                   	inc    ebx
c00061c3:	83 fb 10             	cmp    ebx,0x10
c00061c6:	75 f2                	jne    c00061ba <bread_cache+0x1f>
c00061c8:	31 db                	xor    ebx,ebx
c00061ca:	50                   	push   eax
c00061cb:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061ce:	6a 01                	push   0x1
c00061d0:	57                   	push   edi
c00061d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d4:	83 c0 04             	add    eax,0x4
c00061d7:	50                   	push   eax
c00061d8:	e8 9e ff ff ff       	call   c000617b <isoReadDiscSector>
c00061dd:	83 c4 10             	add    esp,0x10
c00061e0:	83 c9 ff             	or     ecx,0xffffffff
c00061e3:	85 c0                	test   eax,eax
c00061e5:	78 13                	js     c00061fa <bread_cache+0x5f>
c00061e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061ea:	89 da                	mov    edx,ebx
c00061ec:	89 38                	mov    DWORD PTR [eax],edi
c00061ee:	89 f0                	mov    eax,esi
c00061f0:	e8 0f fe ff ff       	call   c0006004 <bgrad_cache>
c00061f5:	b9 0f 00 00 00       	mov    ecx,0xf
c00061fa:	83 c4 0c             	add    esp,0xc
c00061fd:	89 c8                	mov    eax,ecx
c00061ff:	5b                   	pop    ebx
c0006200:	5e                   	pop    esi
c0006201:	5f                   	pop    edi
c0006202:	5d                   	pop    ebp
c0006203:	c3                   	ret    

c0006204 <biread>:
c0006204:	89 c2                	mov    edx,eax
c0006206:	b8 80 40 02 c0       	mov    eax,0xc0024080
c000620b:	eb 8e                	jmp    c000619b <bread_cache>

c000620d <bdread>:
c000620d:	89 c2                	mov    edx,eax
c000620f:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006214:	eb 85                	jmp    c000619b <bread_cache>

c0006216 <strnicmp>:
c0006216:	55                   	push   ebp
c0006217:	57                   	push   edi
c0006218:	31 ff                	xor    edi,edi
c000621a:	56                   	push   esi
c000621b:	53                   	push   ebx
c000621c:	83 ec 0c             	sub    esp,0xc
c000621f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006223:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006227:	74 43                	je     c000626c <strnicmp+0x56>
c0006229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000622d:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006231:	85 c0                	test   eax,eax
c0006233:	74 37                	je     c000626c <strnicmp+0x56>
c0006235:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006239:	85 d2                	test   edx,edx
c000623b:	74 2f                	je     c000626c <strnicmp+0x56>
c000623d:	39 d0                	cmp    eax,edx
c000623f:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006242:	75 04                	jne    c0006248 <strnicmp+0x32>
c0006244:	89 ef                	mov    edi,ebp
c0006246:	eb db                	jmp    c0006223 <strnicmp+0xd>
c0006248:	83 ec 0c             	sub    esp,0xc
c000624b:	50                   	push   eax
c000624c:	e8 ef a6 ff ff       	call   c0000940 <tolower>
c0006251:	89 c3                	mov    ebx,eax
c0006253:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006257:	89 04 24             	mov    DWORD PTR [esp],eax
c000625a:	e8 e1 a6 ff ff       	call   c0000940 <tolower>
c000625f:	83 c4 10             	add    esp,0x10
c0006262:	29 c3                	sub    ebx,eax
c0006264:	89 ef                	mov    edi,ebp
c0006266:	89 d8                	mov    eax,ebx
c0006268:	74 b9                	je     c0006223 <strnicmp+0xd>
c000626a:	eb 02                	jmp    c000626e <strnicmp+0x58>
c000626c:	31 c0                	xor    eax,eax
c000626e:	83 c4 0c             	add    esp,0xc
c0006271:	5b                   	pop    ebx
c0006272:	5e                   	pop    esi
c0006273:	5f                   	pop    edi
c0006274:	5d                   	pop    ebp
c0006275:	c3                   	ret    

c0006276 <find_object>:
c0006276:	55                   	push   ebp
c0006277:	57                   	push   edi
c0006278:	89 c7                	mov    edi,eax
c000627a:	56                   	push   esi
c000627b:	53                   	push   ebx
c000627c:	89 d3                	mov    ebx,edx
c000627e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006284:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c000628b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006292:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006296:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000629a:	74 0b                	je     c00062a7 <find_object+0x31>
c000629c:	89 fa                	mov    edx,edi
c000629e:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062a2:	e8 89 fc ff ff       	call   c0005f30 <utf2ucs>
c00062a7:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062b3:	7e 11                	jle    c00062c6 <find_object+0x50>
c00062b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b9:	e8 46 ff ff ff       	call   c0006204 <biread>
c00062be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062c2:	85 c0                	test   eax,eax
c00062c4:	79 07                	jns    c00062cd <find_object+0x57>
c00062c6:	31 db                	xor    ebx,ebx
c00062c8:	e9 47 01 00 00       	jmp    c0006414 <find_object+0x19e>
c00062cd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062dd:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e4:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e8:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062eb:	85 f6                	test   esi,esi
c00062ed:	75 0e                	jne    c00062fd <find_object+0x87>
c00062ef:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062f3:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062fb:	eb b1                	jmp    c00062ae <find_object+0x38>
c00062fd:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006301:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c0006307:	89 c8                	mov    eax,ecx
c0006309:	85 ed                	test   ebp,ebp
c000630b:	74 31                	je     c000633e <find_object+0xc8>
c000630d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006310:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006314:	e8 07 fd ff ff       	call   c0006020 <ucscompare>
c0006319:	85 c0                	test   eax,eax
c000631b:	0f 84 c5 00 00 00    	je     c00063e6 <find_object+0x170>
c0006321:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006324:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006328:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006330:	7f bd                	jg     c00062ef <find_object+0x79>
c0006332:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006336:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c000633a:	7f 99                	jg     c00062d5 <find_object+0x5f>
c000633c:	eb b1                	jmp    c00062ef <find_object+0x79>
c000633e:	29 ce                	sub    esi,ecx
c0006340:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006344:	a8 01                	test   al,0x1
c0006346:	74 05                	je     c000634d <find_object+0xd7>
c0006348:	83 ee 21             	sub    esi,0x21
c000634b:	eb 5a                	jmp    c00063a7 <find_object+0x131>
c000634d:	42                   	inc    edx
c000634e:	83 ee 22             	sub    esi,0x22
c0006351:	eb 54                	jmp    c00063a7 <find_object+0x131>
c0006353:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006356:	48                   	dec    eax
c0006357:	3c 01                	cmp    al,0x1
c0006359:	77 51                	ja     c00063ac <find_object+0x136>
c000635b:	50                   	push   eax
c000635c:	6a 02                	push   0x2
c000635e:	68 3d f9 01 c0       	push   0xc001f93d
c0006363:	52                   	push   edx
c0006364:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006368:	e8 63 a4 ff ff       	call   c00007d0 <strncmp>
c000636d:	83 c4 10             	add    esp,0x10
c0006370:	85 c0                	test   eax,eax
c0006372:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006376:	75 27                	jne    c000639f <find_object+0x129>
c0006378:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000637c:	8d 68 fb             	lea    ebp,[eax-0x5]
c000637f:	50                   	push   eax
c0006380:	55                   	push   ebp
c0006381:	8d 42 05             	lea    eax,[edx+0x5]
c0006384:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006388:	50                   	push   eax
c0006389:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000638d:	50                   	push   eax
c000638e:	e8 dd a2 ff ff       	call   c0000670 <strncpy>
c0006393:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006398:	83 c4 10             	add    esp,0x10
c000639b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000639f:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063a3:	29 c6                	sub    esi,eax
c00063a5:	01 c2                	add    edx,eax
c00063a7:	83 fe 03             	cmp    esi,0x3
c00063aa:	7f a7                	jg     c0006353 <find_object+0xdd>
c00063ac:	85 ed                	test   ebp,ebp
c00063ae:	7e 40                	jle    c00063f0 <find_object+0x17a>
c00063b0:	51                   	push   ecx
c00063b1:	51                   	push   ecx
c00063b2:	6a 2f                	push   0x2f
c00063b4:	57                   	push   edi
c00063b5:	e8 d6 a3 ff ff       	call   c0000790 <strchr>
c00063ba:	83 c4 10             	add    esp,0x10
c00063bd:	85 c0                	test   eax,eax
c00063bf:	74 04                	je     c00063c5 <find_object+0x14f>
c00063c1:	29 f8                	sub    eax,edi
c00063c3:	eb 0c                	jmp    c00063d1 <find_object+0x15b>
c00063c5:	83 ec 0c             	sub    esp,0xc
c00063c8:	57                   	push   edi
c00063c9:	e8 92 a1 ff ff       	call   c0000560 <strlen>
c00063ce:	83 c4 10             	add    esp,0x10
c00063d1:	52                   	push   edx
c00063d2:	50                   	push   eax
c00063d3:	57                   	push   edi
c00063d4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063d8:	50                   	push   eax
c00063d9:	e8 38 fe ff ff       	call   c0006216 <strnicmp>
c00063de:	83 c4 10             	add    esp,0x10
c00063e1:	e9 33 ff ff ff       	jmp    c0006319 <find_object+0xa3>
c00063e6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063ea:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ee:	eb 1e                	jmp    c000640e <find_object+0x198>
c00063f0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063f4:	8d 43 21             	lea    eax,[ebx+0x21]
c00063f7:	89 f9                	mov    ecx,edi
c00063f9:	e8 a1 fc ff ff       	call   c000609f <fncompare>
c00063fe:	85 c0                	test   eax,eax
c0006400:	0f 85 1b ff ff ff    	jne    c0006321 <find_object+0xab>
c0006406:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000640a:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000640e:	0f 85 0d ff ff ff    	jne    c0006321 <find_object+0xab>
c0006414:	81 c4 2c 01 00 00    	add    esp,0x12c
c000641a:	89 d8                	mov    eax,ebx
c000641c:	5b                   	pop    ebx
c000641d:	5e                   	pop    esi
c000641e:	5f                   	pop    edi
c000641f:	5d                   	pop    ebp
c0006420:	c3                   	ret    

c0006421 <find_object_path>:
c0006421:	55                   	push   ebp
c0006422:	57                   	push   edi
c0006423:	89 d7                	mov    edi,edx
c0006425:	56                   	push   esi
c0006426:	89 c6                	mov    esi,eax
c0006428:	53                   	push   ebx
c0006429:	89 cb                	mov    ebx,ecx
c000642b:	83 ec 0c             	sub    esp,0xc
c000642e:	50                   	push   eax
c000642f:	50                   	push   eax
c0006430:	6a 2f                	push   0x2f
c0006432:	56                   	push   esi
c0006433:	e8 58 a3 ff ff       	call   c0000790 <strchr>
c0006438:	83 c4 10             	add    esp,0x10
c000643b:	89 c5                	mov    ebp,eax
c000643d:	85 c0                	test   eax,eax
c000643f:	74 3a                	je     c000647b <find_object_path+0x5a>
c0006441:	39 ee                	cmp    esi,ebp
c0006443:	74 31                	je     c0006476 <find_object_path+0x55>
c0006445:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006448:	e8 b5 fb ff ff       	call   c0006002 <iso_733>
c000644d:	89 c2                	mov    edx,eax
c000644f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006452:	e8 ab fb ff ff       	call   c0006002 <iso_733>
c0006457:	83 ec 0c             	sub    esp,0xc
c000645a:	89 c1                	mov    ecx,eax
c000645c:	52                   	push   edx
c000645d:	89 f0                	mov    eax,esi
c000645f:	ba 01 00 00 00       	mov    edx,0x1
c0006464:	e8 0d fe ff ff       	call   c0006276 <find_object>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	89 c3                	mov    ebx,eax
c000646e:	85 c0                	test   eax,eax
c0006470:	75 04                	jne    c0006476 <find_object_path+0x55>
c0006472:	31 db                	xor    ebx,ebx
c0006474:	eb 36                	jmp    c00064ac <find_object_path+0x8b>
c0006476:	8d 75 01             	lea    esi,[ebp+0x1]
c0006479:	eb b3                	jmp    c000642e <find_object_path+0xd>
c000647b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000647e:	74 28                	je     c00064a8 <find_object_path+0x87>
c0006480:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006483:	e8 7a fb ff ff       	call   c0006002 <iso_733>
c0006488:	89 c2                	mov    edx,eax
c000648a:	8d 43 02             	lea    eax,[ebx+0x2]
c000648d:	e8 70 fb ff ff       	call   c0006002 <iso_733>
c0006492:	83 ec 0c             	sub    esp,0xc
c0006495:	89 c1                	mov    ecx,eax
c0006497:	52                   	push   edx
c0006498:	89 f0                	mov    eax,esi
c000649a:	89 fa                	mov    edx,edi
c000649c:	e8 d5 fd ff ff       	call   c0006276 <find_object>
c00064a1:	83 c4 10             	add    esp,0x10
c00064a4:	89 c3                	mov    ebx,eax
c00064a6:	eb 04                	jmp    c00064ac <find_object_path+0x8b>
c00064a8:	85 ff                	test   edi,edi
c00064aa:	74 c6                	je     c0006472 <find_object_path+0x51>
c00064ac:	83 c4 0c             	add    esp,0xc
c00064af:	89 d8                	mov    eax,ebx
c00064b1:	5b                   	pop    ebx
c00064b2:	5e                   	pop    esi
c00064b3:	5f                   	pop    edi
c00064b4:	5d                   	pop    ebp
c00064b5:	c3                   	ret    

c00064b6 <stricmp>:
c00064b6:	57                   	push   edi
c00064b7:	56                   	push   esi
c00064b8:	31 f6                	xor    esi,esi
c00064ba:	53                   	push   ebx
c00064bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bf:	83 ec 0c             	sub    esp,0xc
c00064c2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064ca:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064ce:	50                   	push   eax
c00064cf:	e8 4c a4 ff ff       	call   c0000920 <toupper>
c00064d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00064d7:	e8 64 a4 ff ff       	call   c0000940 <tolower>
c00064dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064df:	89 c3                	mov    ebx,eax
c00064e1:	e8 3a a4 ff ff       	call   c0000920 <toupper>
c00064e6:	46                   	inc    esi
c00064e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00064ea:	e8 51 a4 ff ff       	call   c0000940 <tolower>
c00064ef:	83 c4 10             	add    esp,0x10
c00064f2:	39 c3                	cmp    ebx,eax
c00064f4:	75 04                	jne    c00064fa <stricmp+0x44>
c00064f6:	85 db                	test   ebx,ebx
c00064f8:	75 c1                	jne    c00064bb <stricmp+0x5>
c00064fa:	29 c3                	sub    ebx,eax
c00064fc:	89 d8                	mov    eax,ebx
c00064fe:	5b                   	pop    ebx
c00064ff:	5e                   	pop    esi
c0006500:	5f                   	pop    edi
c0006501:	c3                   	ret    

c0006502 <iso_open>:
c0006502:	57                   	push   edi
c0006503:	31 c0                	xor    eax,eax
c0006505:	56                   	push   esi
c0006506:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c000650b:	53                   	push   ebx
c000650c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006511:	0f 95 c0             	setne  al
c0006514:	89 c2                	mov    edx,eax
c0006516:	89 c6                	mov    esi,eax
c0006518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000651c:	e8 00 ff ff ff       	call   c0006421 <find_object_path>
c0006521:	83 ca ff             	or     edx,0xffffffff
c0006524:	85 c0                	test   eax,eax
c0006526:	74 5e                	je     c0006586 <iso_open+0x84>
c0006528:	89 c1                	mov    ecx,eax
c000652a:	31 d2                	xor    edx,edx
c000652c:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006532:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006539:	75 42                	jne    c000657d <iso_open+0x7b>
c000653b:	8d 41 02             	lea    eax,[ecx+0x2]
c000653e:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006548:	e8 b5 fa ff ff       	call   c0006002 <iso_733>
c000654d:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c0006553:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006559:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c0006563:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006566:	e8 97 fa ff ff       	call   c0006002 <iso_733>
c000656b:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006575:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c000657b:	eb 09                	jmp    c0006586 <iso_open+0x84>
c000657d:	42                   	inc    edx
c000657e:	83 fa 10             	cmp    edx,0x10
c0006581:	75 a9                	jne    c000652c <iso_open+0x2a>
c0006583:	83 ca ff             	or     edx,0xffffffff
c0006586:	5b                   	pop    ebx
c0006587:	89 d0                	mov    eax,edx
c0006589:	5e                   	pop    esi
c000658a:	5f                   	pop    edi
c000658b:	c3                   	ret    

c000658c <iso_close>:
c000658c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006590:	83 f8 0f             	cmp    eax,0xf
c0006593:	7f 10                	jg     c00065a5 <iso_close+0x19>
c0006595:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000659b:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065a5:	e9 6d fb ff ff       	jmp    c0006117 <bclear_cache>

c00065aa <iso_read>:
c00065aa:	55                   	push   ebp
c00065ab:	57                   	push   edi
c00065ac:	56                   	push   esi
c00065ad:	53                   	push   ebx
c00065ae:	83 ec 1c             	sub    esp,0x1c
c00065b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065b5:	83 fd 0f             	cmp    ebp,0xf
c00065b8:	7e 0a                	jle    c00065c4 <iso_read+0x1a>
c00065ba:	83 c8 ff             	or     eax,0xffffffff
c00065bd:	89 c2                	mov    edx,eax
c00065bf:	e9 f4 00 00 00       	jmp    c00066b8 <iso_read+0x10e>
c00065c4:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065ca:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065d1:	74 e7                	je     c00065ba <iso_read+0x10>
c00065d3:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065d9:	85 d2                	test   edx,edx
c00065db:	75 dd                	jne    c00065ba <iso_read+0x10>
c00065dd:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065e2:	0f 84 cd 00 00 00    	je     c00066b5 <iso_read+0x10b>
c00065e8:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ee:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065f4:	29 c3                	sub    ebx,eax
c00065f6:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065fa:	76 04                	jbe    c0006600 <iso_read+0x56>
c00065fc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0006600:	85 db                	test   ebx,ebx
c0006602:	0f 84 ad 00 00 00    	je     c00066b5 <iso_read+0x10b>
c0006608:	89 c6                	mov    esi,eax
c000660a:	b9 00 08 00 00       	mov    ecx,0x800
c000660f:	c1 e8 0b             	shr    eax,0xb
c0006612:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006618:	29 f1                	sub    ecx,esi
c000661a:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c0006620:	81 f9 00 08 00 00    	cmp    ecx,0x800
c0006626:	75 3f                	jne    c0006667 <iso_read+0xbd>
c0006628:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000662e:	7e 37                	jle    c0006667 <iso_read+0xbd>
c0006630:	b9 20 00 00 00       	mov    ecx,0x20
c0006635:	81 fb ff 07 01 00    	cmp    ebx,0x107ff
c000663b:	7f 05                	jg     c0006642 <iso_read+0x98>
c000663d:	89 d9                	mov    ecx,ebx
c000663f:	c1 f9 0b             	sar    ecx,0xb
c0006642:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006646:	52                   	push   edx
c0006647:	51                   	push   ecx
c0006648:	89 cb                	mov    ebx,ecx
c000664a:	c1 e3 0b             	shl    ebx,0xb
c000664d:	50                   	push   eax
c000664e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006652:	e8 24 fb ff ff       	call   c000617b <isoReadDiscSector>
c0006657:	83 c4 10             	add    esp,0x10
c000665a:	85 c0                	test   eax,eax
c000665c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006660:	7f 3e                	jg     c00066a0 <iso_read+0xf6>
c0006662:	e9 53 ff ff ff       	jmp    c00065ba <iso_read+0x10>
c0006667:	39 cb                	cmp    ebx,ecx
c0006669:	7e 02                	jle    c000666d <iso_read+0xc3>
c000666b:	89 cb                	mov    ebx,ecx
c000666d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006671:	e8 97 fb ff ff       	call   c000620d <bdread>
c0006676:	85 c0                	test   eax,eax
c0006678:	0f 88 3c ff ff ff    	js     c00065ba <iso_read+0x10>
c000667e:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006685:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000668b:	25 ff 07 00 00       	and    eax,0x7ff
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006698:	89 d9                	mov    ecx,ebx
c000669a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000669c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066a0:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066a4:	01 da                	add    edx,ebx
c00066a6:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066ac:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b0:	e9 28 ff ff ff       	jmp    c00065dd <iso_read+0x33>
c00066b5:	89 d0                	mov    eax,edx
c00066b7:	99                   	cdq    
c00066b8:	83 c4 1c             	add    esp,0x1c
c00066bb:	5b                   	pop    ebx
c00066bc:	5e                   	pop    esi
c00066bd:	5f                   	pop    edi
c00066be:	5d                   	pop    ebp
c00066bf:	c3                   	ret    

c00066c0 <iso_seek>:
c00066c0:	55                   	push   ebp
c00066c1:	83 c8 ff             	or     eax,0xffffffff
c00066c4:	57                   	push   edi
c00066c5:	89 c2                	mov    edx,eax
c00066c7:	56                   	push   esi
c00066c8:	53                   	push   ebx
c00066c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066cd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066d5:	83 fe 0f             	cmp    esi,0xf
c00066d8:	7f 65                	jg     c000673f <iso_seek+0x7f>
c00066da:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066e0:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066e6:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066ed:	74 50                	je     c000673f <iso_seek+0x7f>
c00066ef:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066f6:	75 47                	jne    c000673f <iso_seek+0x7f>
c00066f8:	83 fb 01             	cmp    ebx,0x1
c00066fb:	74 0e                	je     c000670b <iso_seek+0x4b>
c00066fd:	83 fb 02             	cmp    ebx,0x2
c0006700:	74 0e                	je     c0006710 <iso_seek+0x50>
c0006702:	85 db                	test   ebx,ebx
c0006704:	75 39                	jne    c000673f <iso_seek+0x7f>
c0006706:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006709:	eb 0d                	jmp    c0006718 <iso_seek+0x58>
c000670b:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000670e:	eb 08                	jmp    c0006718 <iso_seek+0x58>
c0006710:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006713:	01 f8                	add    eax,edi
c0006715:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006718:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000671e:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c0006724:	05 40 45 02 c0       	add    eax,0xc0024540
c0006729:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000672c:	76 03                	jbe    c0006731 <iso_seek+0x71>
c000672e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006731:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006737:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c000673d:	31 d2                	xor    edx,edx
c000673f:	5b                   	pop    ebx
c0006740:	5e                   	pop    esi
c0006741:	5f                   	pop    edi
c0006742:	5d                   	pop    ebp
c0006743:	c3                   	ret    

c0006744 <iso_tell>:
c0006744:	53                   	push   ebx
c0006745:	83 c8 ff             	or     eax,0xffffffff
c0006748:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000674c:	89 c2                	mov    edx,eax
c000674e:	83 f9 0f             	cmp    ecx,0xf
c0006751:	7f 20                	jg     c0006773 <iso_tell+0x2f>
c0006753:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006759:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c0006760:	74 11                	je     c0006773 <iso_tell+0x2f>
c0006762:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006769:	75 08                	jne    c0006773 <iso_tell+0x2f>
c000676b:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c0006771:	31 d2                	xor    edx,edx
c0006773:	5b                   	pop    ebx
c0006774:	c3                   	ret    

c0006775 <iso_total>:
c0006775:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006779:	83 c8 ff             	or     eax,0xffffffff
c000677c:	83 fa 0f             	cmp    edx,0xf
c000677f:	7f 1e                	jg     c000679f <iso_total+0x2a>
c0006781:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006787:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000678e:	74 0f                	je     c000679f <iso_total+0x2a>
c0006790:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006797:	75 06                	jne    c000679f <iso_total+0x2a>
c0006799:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000679f:	c3                   	ret    

c00067a0 <fn_postprocess>:
c00067a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a4:	89 d0                	mov    eax,edx
c00067a6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067a9:	85 c9                	test   ecx,ecx
c00067ab:	74 08                	je     c00067b5 <fn_postprocess+0x15>
c00067ad:	83 f9 3b             	cmp    ecx,0x3b
c00067b0:	74 03                	je     c00067b5 <fn_postprocess+0x15>
c00067b2:	40                   	inc    eax
c00067b3:	eb f1                	jmp    c00067a6 <fn_postprocess+0x6>
c00067b5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067b8:	39 d0                	cmp    eax,edx
c00067ba:	76 0a                	jbe    c00067c6 <fn_postprocess+0x26>
c00067bc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067c0:	75 04                	jne    c00067c6 <fn_postprocess+0x26>
c00067c2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067c6:	c3                   	ret    

c00067c7 <iso_readdir>:
c00067c7:	55                   	push   ebp
c00067c8:	57                   	push   edi
c00067c9:	56                   	push   esi
c00067ca:	53                   	push   ebx
c00067cb:	83 ec 1c             	sub    esp,0x1c
c00067ce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067d2:	83 fb 0f             	cmp    ebx,0xf
c00067d5:	7f 28                	jg     c00067ff <iso_readdir+0x38>
c00067d7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067dd:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067e3:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067ea:	74 13                	je     c00067ff <iso_readdir+0x38>
c00067ec:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067f0:	74 0d                	je     c00067ff <iso_readdir+0x38>
c00067f2:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067f9:	0f 84 b1 00 00 00    	je     c00068b0 <iso_readdir+0xe9>
c00067ff:	83 ec 0c             	sub    esp,0xc
c0006802:	68 40 f9 01 c0       	push   0xc001f940
c0006807:	e8 90 2a 01 00       	call   c001929c <iso_kprintf>
c000680c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000680f:	e8 a4 2a 01 00       	call   c00192b8 <iso_kprintfd>
c0006814:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000681a:	c7 04 24 45 f9 01 c0 	mov    DWORD PTR [esp],0xc001f945
c0006821:	e8 76 2a 01 00       	call   c001929c <iso_kprintf>
c0006826:	5d                   	pop    ebp
c0006827:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c000682d:	e8 86 2a 01 00       	call   c00192b8 <iso_kprintfd>
c0006832:	c7 04 24 4b f9 01 c0 	mov    DWORD PTR [esp],0xc001f94b
c0006839:	e8 5e 2a 01 00       	call   c001929c <iso_kprintf>
c000683e:	58                   	pop    eax
c000683f:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006845:	e8 6e 2a 01 00       	call   c00192b8 <iso_kprintfd>
c000684a:	c7 04 24 51 f9 01 c0 	mov    DWORD PTR [esp],0xc001f951
c0006851:	e8 46 2a 01 00       	call   c001929c <iso_kprintf>
c0006856:	58                   	pop    eax
c0006857:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000685d:	e8 56 2a 01 00       	call   c00192b8 <iso_kprintfd>
c0006862:	83 c4 10             	add    esp,0x10
c0006865:	eb 42                	jmp    c00068a9 <iso_readdir+0xe2>
c0006867:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000686a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c0006871:	89 d1                	mov    ecx,edx
c0006873:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006879:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000687d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006880:	75 35                	jne    c00068b7 <iso_readdir+0xf0>
c0006882:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006888:	81 c2 00 08 00 00    	add    edx,0x800
c000688e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006891:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006894:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006897:	73 1e                	jae    c00068b7 <iso_readdir+0xf0>
c0006899:	c1 ea 0b             	shr    edx,0xb
c000689c:	8b 07                	mov    eax,DWORD PTR [edi]
c000689e:	01 d0                	add    eax,edx
c00068a0:	e8 5f f9 ff ff       	call   c0006204 <biread>
c00068a5:	85 c0                	test   eax,eax
c00068a7:	79 be                	jns    c0006867 <iso_readdir+0xa0>
c00068a9:	31 c0                	xor    eax,eax
c00068ab:	e9 66 01 00 00       	jmp    c0006a16 <iso_readdir+0x24f>
c00068b0:	31 f6                	xor    esi,esi
c00068b2:	83 c8 ff             	or     eax,0xffffffff
c00068b5:	eb da                	jmp    c0006891 <iso_readdir+0xca>
c00068b7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068bd:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068c3:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068c9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068cc:	73 db                	jae    c00068a9 <iso_readdir+0xe2>
c00068ce:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068d2:	75 34                	jne    c0006908 <iso_readdir+0x141>
c00068d4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068d8:	75 2e                	jne    c0006908 <iso_readdir+0x141>
c00068da:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068dd:	01 f9                	add    ecx,edi
c00068df:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068e6:	89 c8                	mov    eax,ecx
c00068e8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068eb:	25 ff 07 00 00       	and    eax,0x7ff
c00068f0:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068f5:	01 c8                	add    eax,ecx
c00068f7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068fa:	25 ff 07 00 00       	and    eax,0x7ff
c00068ff:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006903:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006906:	74 a1                	je     c00068a9 <iso_readdir+0xe2>
c0006908:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000690e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006912:	8d 56 21             	lea    edx,[esi+0x21]
c0006915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006919:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000691f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006926:	74 0c                	je     c0006934 <iso_readdir+0x16d>
c0006928:	89 e8                	mov    eax,ebp
c000692a:	e8 23 f6 ff ff       	call   c0005f52 <ucs2utfn>
c000692f:	e9 a6 00 00 00       	jmp    c00069da <iso_readdir+0x213>
c0006934:	57                   	push   edi
c0006935:	51                   	push   ecx
c0006936:	52                   	push   edx
c0006937:	55                   	push   ebp
c0006938:	e8 33 9d ff ff       	call   c0000670 <strncpy>
c000693d:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006943:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006947:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000694a:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c0006952:	e8 49 fe ff ff       	call   c00067a0 <fn_postprocess>
c0006957:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000695b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000695e:	83 c4 10             	add    esp,0x10
c0006961:	29 d0                	sub    eax,edx
c0006963:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006967:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000696b:	74 05                	je     c0006972 <iso_readdir+0x1ab>
c000696d:	83 e8 21             	sub    eax,0x21
c0006970:	eb 04                	jmp    c0006976 <iso_readdir+0x1af>
c0006972:	47                   	inc    edi
c0006973:	83 e8 22             	sub    eax,0x22
c0006976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000697a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006980:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006984:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006989:	7e 4f                	jle    c00069da <iso_readdir+0x213>
c000698b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000698e:	48                   	dec    eax
c000698f:	3c 01                	cmp    al,0x1
c0006991:	77 47                	ja     c00069da <iso_readdir+0x213>
c0006993:	52                   	push   edx
c0006994:	6a 02                	push   0x2
c0006996:	68 3d f9 01 c0       	push   0xc001f93d
c000699b:	57                   	push   edi
c000699c:	e8 2f 9e ff ff       	call   c00007d0 <strncmp>
c00069a1:	83 c4 10             	add    esp,0x10
c00069a4:	85 c0                	test   eax,eax
c00069a6:	75 26                	jne    c00069ce <iso_readdir+0x207>
c00069a8:	50                   	push   eax
c00069a9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ad:	83 e8 05             	sub    eax,0x5
c00069b0:	50                   	push   eax
c00069b1:	8d 47 05             	lea    eax,[edi+0x5]
c00069b4:	50                   	push   eax
c00069b5:	55                   	push   ebp
c00069b6:	e8 b5 9c ff ff       	call   c0000670 <strncpy>
c00069bb:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069c3:	83 c4 10             	add    esp,0x10
c00069c6:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069ce:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069d2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069d6:	01 c7                	add    edi,eax
c00069d8:	eb aa                	jmp    c0006984 <iso_readdir+0x1bd>
c00069da:	83 c8 ff             	or     eax,0xffffffff
c00069dd:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069e1:	89 c2                	mov    edx,eax
c00069e3:	75 0a                	jne    c00069ef <iso_readdir+0x228>
c00069e5:	8d 46 0a             	lea    eax,[esi+0xa]
c00069e8:	e8 15 f6 ff ff       	call   c0006002 <iso_733>
c00069ed:	31 d2                	xor    edx,edx
c00069ef:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069f5:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069fb:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a01:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a04:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a0a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a11:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a16:	83 c4 1c             	add    esp,0x1c
c0006a19:	5b                   	pop    ebx
c0006a1a:	5e                   	pop    esi
c0006a1b:	5f                   	pop    edi
c0006a1c:	5d                   	pop    ebp
c0006a1d:	c3                   	ret    

c0006a1e <iso_reset>:
c0006a1e:	83 ec 18             	sub    esp,0x18
c0006a21:	68 5a f9 01 c0       	push   0xc001f95a
c0006a26:	e8 71 28 01 00       	call   c001929c <iso_kprintf>
c0006a2b:	e8 1f f7 ff ff       	call   c000614f <iso_break_all>
c0006a30:	e8 18 f7 ff ff       	call   c000614d <bclear>
c0006a35:	31 c0                	xor    eax,eax
c0006a37:	83 c4 1c             	add    esp,0x1c
c0006a3a:	c3                   	ret    

c0006a3b <init_percd>:
c0006a3b:	57                   	push   edi
c0006a3c:	56                   	push   esi
c0006a3d:	53                   	push   ebx
c0006a3e:	bb 01 00 00 00       	mov    ebx,0x1
c0006a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a47:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a4c:	e8 cd ff ff ff       	call   c0006a1e <iso_reset>
c0006a51:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a5b:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a60:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a64:	e8 9b f7 ff ff       	call   c0006204 <biread>
c0006a69:	89 c6                	mov    esi,eax
c0006a6b:	85 c0                	test   eax,eax
c0006a6d:	0f 88 ba 00 00 00    	js     c0006b2d <init_percd+0xf2>
c0006a73:	52                   	push   edx
c0006a74:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a7b:	6a 06                	push   0x6
c0006a7d:	83 c0 04             	add    eax,0x4
c0006a80:	68 65 f9 01 c0       	push   0xc001f965
c0006a85:	50                   	push   eax
c0006a86:	e8 f5 98 ff ff       	call   c0000380 <memcmp>
c0006a8b:	83 c4 10             	add    esp,0x10
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	74 08                	je     c0006a9a <init_percd+0x5f>
c0006a92:	43                   	inc    ebx
c0006a93:	83 fb 04             	cmp    ebx,0x4
c0006a96:	75 c3                	jne    c0006a5b <init_percd+0x20>
c0006a98:	eb 1a                	jmp    c0006ab4 <init_percd+0x79>
c0006a9a:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aa1:	83 c0 5c             	add    eax,0x5c
c0006aa4:	e8 26 f5 ff ff       	call   c0005fcf <isjoliet>
c0006aa9:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006aae:	85 c0                	test   eax,eax
c0006ab0:	74 e0                	je     c0006a92 <init_percd+0x57>
c0006ab2:	eb 3e                	jmp    c0006af2 <init_percd+0xb7>
c0006ab4:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006abb:	75 35                	jne    c0006af2 <init_percd+0xb7>
c0006abd:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006ac2:	83 c0 10             	add    eax,0x10
c0006ac5:	e8 3a f7 ff ff       	call   c0006204 <biread>
c0006aca:	89 c6                	mov    esi,eax
c0006acc:	85 c0                	test   eax,eax
c0006ace:	78 5f                	js     c0006b2f <init_percd+0xf4>
c0006ad0:	50                   	push   eax
c0006ad1:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ad8:	6a 06                	push   0x6
c0006ada:	83 c0 04             	add    eax,0x4
c0006add:	68 6c f9 01 c0       	push   0xc001f96c
c0006ae2:	83 cb ff             	or     ebx,0xffffffff
c0006ae5:	50                   	push   eax
c0006ae6:	e8 95 98 ff ff       	call   c0000380 <memcmp>
c0006aeb:	83 c4 10             	add    esp,0x10
c0006aee:	85 c0                	test   eax,eax
c0006af0:	75 3d                	jne    c0006b2f <init_percd+0xf4>
c0006af2:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006af9:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006afe:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b04:	b9 22 00 00 00       	mov    ecx,0x22
c0006b09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b0b:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b10:	31 db                	xor    ebx,ebx
c0006b12:	e8 eb f4 ff ff       	call   c0006002 <iso_733>
c0006b17:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b1c:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b21:	e8 dc f4 ff ff       	call   c0006002 <iso_733>
c0006b26:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b2b:	eb 02                	jmp    c0006b2f <init_percd+0xf4>
c0006b2d:	89 c3                	mov    ebx,eax
c0006b2f:	89 d8                	mov    eax,ebx
c0006b31:	5b                   	pop    ebx
c0006b32:	5e                   	pop    esi
c0006b33:	5f                   	pop    edi
c0006b34:	c3                   	ret    

c0006b35 <iso_ioctl>:
c0006b35:	83 ec 18             	sub    esp,0x18
c0006b38:	68 73 f9 01 c0       	push   0xc001f973
c0006b3d:	e8 5a 27 01 00       	call   c001929c <iso_kprintf>
c0006b42:	e8 d7 fe ff ff       	call   c0006a1e <iso_reset>
c0006b47:	31 c0                	xor    eax,eax
c0006b49:	83 c4 1c             	add    esp,0x1c
c0006b4c:	c3                   	ret    

c0006b4d <fs_iso9660_init>:
c0006b4d:	53                   	push   ebx
c0006b4e:	31 db                	xor    ebx,ebx
c0006b50:	83 ec 14             	sub    esp,0x14
c0006b53:	68 7e f9 01 c0       	push   0xc001f97e
c0006b58:	e8 3f 27 01 00       	call   c001929c <iso_kprintf>
c0006b5d:	83 c4 0c             	add    esp,0xc
c0006b60:	68 40 09 00 00       	push   0x940
c0006b65:	6a 00                	push   0x0
c0006b67:	68 40 45 02 c0       	push   0xc0024540
c0006b6c:	e8 6f 99 ff ff       	call   c00004e0 <memset>
c0006b71:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b78:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b82:	e8 05 0f 00 00       	call   c0007a8c <malloc>
c0006b87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b8e:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b93:	e8 f4 0e 00 00       	call   c0007a8c <malloc>
c0006b98:	83 c4 10             	add    esp,0x10
c0006b9b:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006ba0:	83 ec 0c             	sub    esp,0xc
c0006ba3:	68 04 08 00 00       	push   0x804
c0006ba8:	e8 df 0e 00 00       	call   c0007a8c <malloc>
c0006bad:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bb4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bba:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bc1:	e8 c6 0e 00 00       	call   c0007a8c <malloc>
c0006bc6:	83 c4 10             	add    esp,0x10
c0006bc9:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bd0:	43                   	inc    ebx
c0006bd1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bd7:	83 fb 10             	cmp    ebx,0x10
c0006bda:	75 c4                	jne    c0006ba0 <fs_iso9660_init+0x53>
c0006bdc:	83 c4 08             	add    esp,0x8
c0006bdf:	31 c0                	xor    eax,eax
c0006be1:	5b                   	pop    ebx
c0006be2:	c3                   	ret    

c0006be3 <fs_iso9660_shutdown>:
c0006be3:	53                   	push   ebx
c0006be4:	31 db                	xor    ebx,ebx
c0006be6:	83 ec 08             	sub    esp,0x8
c0006be9:	83 ec 0c             	sub    esp,0xc
c0006bec:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bf3:	e8 a4 0e 00 00       	call   c0007a9c <free>
c0006bf8:	58                   	pop    eax
c0006bf9:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c00:	43                   	inc    ebx
c0006c01:	e8 96 0e 00 00       	call   c0007a9c <free>
c0006c06:	83 c4 10             	add    esp,0x10
c0006c09:	83 fb 10             	cmp    ebx,0x10
c0006c0c:	75 db                	jne    c0006be9 <fs_iso9660_shutdown+0x6>
c0006c0e:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c13:	85 c0                	test   eax,eax
c0006c15:	74 0c                	je     c0006c23 <fs_iso9660_shutdown+0x40>
c0006c17:	83 ec 0c             	sub    esp,0xc
c0006c1a:	50                   	push   eax
c0006c1b:	e8 7c 0e 00 00       	call   c0007a9c <free>
c0006c20:	83 c4 10             	add    esp,0x10
c0006c23:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c28:	85 c0                	test   eax,eax
c0006c2a:	74 0c                	je     c0006c38 <fs_iso9660_shutdown+0x55>
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	50                   	push   eax
c0006c30:	e8 67 0e 00 00       	call   c0007a9c <free>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c42:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c4c:	83 c4 08             	add    esp,0x8
c0006c4f:	31 c0                	xor    eax,eax
c0006c51:	5b                   	pop    ebx
c0006c52:	c3                   	ret    
c0006c53:	90                   	nop

c0006c54 <Computer::close(int, int, void*)>:
c0006c54:	57                   	push   edi
c0006c55:	56                   	push   esi
c0006c56:	53                   	push   ebx
c0006c57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c63:	83 ec 0c             	sub    esp,0xc
c0006c66:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c6c:	50                   	push   eax
c0006c6d:	e8 32 52 00 00       	call   c000bea4 <Device::closeAll()>
c0006c72:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c78:	83 c4 10             	add    esp,0x10
c0006c7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c7d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c81:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c89:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c91:	5b                   	pop    ebx
c0006c92:	5e                   	pop    esi
c0006c93:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c96:	5f                   	pop    edi
c0006c97:	ff e0                	jmp    eax

c0006c99 <Krnl::firstTask()>:
c0006c99:	53                   	push   ebx
c0006c9a:	83 ec 14             	sub    esp,0x14
c0006c9d:	fb                   	sti    
c0006c9e:	68 8f f9 01 c0       	push   0xc001f98f
c0006ca3:	e8 1a 95 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006ca8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006caf:	e8 d8 0d 00 00       	call   c0007a8c <malloc>
c0006cb4:	89 c3                	mov    ebx,eax
c0006cb6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc2:	50                   	push   eax
c0006cc3:	68 a8 f9 01 c0       	push   0xc001f9a8
c0006cc8:	6a 01                	push   0x1
c0006cca:	53                   	push   ebx
c0006ccb:	e8 00 df 00 00       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0006cd0:	83 c4 20             	add    esp,0x20
c0006cd3:	68 ff 00 00 00       	push   0xff
c0006cd8:	6a 00                	push   0x0
c0006cda:	68 d7 74 00 c0       	push   0xc00074d7
c0006cdf:	53                   	push   ebx
c0006ce0:	e8 0f e1 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0006ce5:	6a 7a                	push   0x7a
c0006ce7:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006ced:	6a 00                	push   0x0
c0006cef:	68 c4 58 01 c0       	push   0xc00158c4
c0006cf4:	52                   	push   edx
c0006cf5:	e8 fa e0 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0006cfa:	83 c4 20             	add    esp,0x20
c0006cfd:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d02:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d09:	e8 ea 9c 00 00       	call   c00109f8 <KeInitRand()>
c0006d0e:	83 ec 0c             	sub    esp,0xc
c0006d11:	68 a4 fa 01 c0       	push   0xc001faa4
c0006d16:	e8 a7 94 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006d1b:	e8 c7 ef 00 00       	call   c0015ce7 <Vm::initialise8086()>
c0006d20:	e8 d1 3f 00 00       	call   c000acf6 <Fs::initVFS()>
c0006d25:	c7 04 24 b5 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9b5
c0006d2c:	e8 91 94 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006d31:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d36:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d3e:	6a 00                	push   0x0
c0006d40:	6a 00                	push   0x0
c0006d42:	6a 00                	push   0x0
c0006d44:	50                   	push   eax
c0006d45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d48:	83 c4 14             	add    esp,0x14
c0006d4b:	68 a4 fa 01 c0       	push   0xc001faa4
c0006d50:	e8 6d 94 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006d55:	e8 48 99 00 00       	call   c00106a2 <Krnl::loadSystemEnv()>
c0006d5a:	e8 a5 9b 00 00       	call   c0010904 <Krnl::setupPowerManager()>
c0006d5f:	83 c4 0c             	add    esp,0xc
c0006d62:	6a 3a                	push   0x3a
c0006d64:	68 cf f9 01 c0       	push   0xc001f9cf
c0006d69:	68 d8 f9 01 c0       	push   0xc001f9d8
c0006d6e:	e8 a6 c1 00 00       	call   c0012f19 <Reg::readIntWithDefault(char*, char*, int)>
c0006d73:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d76:	e8 8d 4a 00 00       	call   c000b808 <User::loadClockSettings(int)>
c0006d7b:	c7 04 24 c8 fa 01 c0 	mov    DWORD PTR [esp],0xc001fac8
c0006d82:	e8 3b 94 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006d87:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d8c:	59                   	pop    ecx
c0006d8d:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d93:	53                   	push   ebx
c0006d94:	e8 09 51 00 00       	call   c000bea2 <Device::loadDriversForAll()>
c0006d99:	c7 04 24 e0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e0
c0006da0:	e8 1d 94 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0006da5:	58                   	pop    eax
c0006da6:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dac:	5a                   	pop    edx
c0006dad:	6a 01                	push   0x1
c0006daf:	68 f1 f9 01 c0       	push   0xc001f9f1
c0006db4:	e8 26 d8 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c0006db9:	59                   	pop    ecx
c0006dba:	5a                   	pop    edx
c0006dbb:	53                   	push   ebx
c0006dbc:	50                   	push   eax
c0006dbd:	e8 57 da 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c0006dc2:	83 c4 10             	add    esp,0x10
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	6a 02                	push   0x2
c0006dca:	e8 71 e4 00 00       	call   c0015240 <blockTask(TaskState)>
c0006dcf:	83 c4 10             	add    esp,0x10
c0006dd2:	eb f1                	jmp    c0006dc5 <Krnl::firstTask()+0x12c>

c0006dd4 <Computer::Computer()>:
c0006dd4:	83 ec 0c             	sub    esp,0xc
c0006dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ddb:	83 ec 08             	sub    esp,0x8
c0006dde:	68 0d fa 01 c0       	push   0xc001fa0d
c0006de3:	50                   	push   eax
c0006de4:	e8 35 51 00 00       	call   c000bf1e <Device::Device(char const*)>
c0006de9:	83 c4 10             	add    esp,0x10
c0006dec:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c0006df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df5:	89 10                	mov    DWORD PTR [eax],edx
c0006df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dfb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e09:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e17:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e1d:	83 ca 04             	or     edx,0x4
c0006e20:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e30:	0f b6 d0             	movzx  edx,al
c0006e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e37:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e42:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e48:	0f b6 d0             	movzx  edx,al
c0006e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5e:	8d 50 01             	lea    edx,[eax+0x1]
c0006e61:	88 d1                	mov    cl,dl
c0006e63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e67:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e6d:	0f b6 d0             	movzx  edx,al
c0006e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e74:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e78:	83 e1 3f             	and    ecx,0x3f
c0006e7b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e7f:	90                   	nop
c0006e80:	83 c4 0c             	add    esp,0xc
c0006e83:	c3                   	ret    

c0006e84 <Computer::setBootMessage(char const*)>:
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::detectFeatures()>:
c0006e86:	55                   	push   ebp
c0006e87:	57                   	push   edi
c0006e88:	56                   	push   esi
c0006e89:	53                   	push   ebx
c0006e8a:	83 ec 1c             	sub    esp,0x1c
c0006e8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e91:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006e97:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006e9d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ea3:	e8 51 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ea8:	31 d2                	xor    edx,edx
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006eb2:	0f 95 c2             	setne  dl
c0006eb5:	d1 e2                	shl    edx,1
c0006eb7:	83 e0 fd             	and    eax,0xfffffffd
c0006eba:	09 d0                	or     eax,edx
c0006ebc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ec2:	a8 02                	test   al,0x2
c0006ec4:	75 51                	jne    c0006f17 <Computer::detectFeatures()+0x91>
c0006ec6:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ecd:	74 0f                	je     c0006ede <Computer::detectFeatures()+0x58>
c0006ecf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ed5:	83 e0 fb             	and    eax,0xfffffffb
c0006ed8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ede:	e8 b3 73 01 00       	call   c001e296 <x87Detect>
c0006ee3:	83 e0 01             	and    eax,0x1
c0006ee6:	c1 e0 04             	shl    eax,0x4
c0006ee9:	89 c2                	mov    edx,eax
c0006eeb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ef1:	83 e0 ef             	and    eax,0xffffffef
c0006ef4:	09 d0                	or     eax,edx
c0006ef6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006efc:	88 c2                	mov    dl,al
c0006efe:	a8 10                	test   al,0x10
c0006f00:	0f 85 33 01 00 00    	jne    c0007039 <Computer::detectFeatures()+0x1b3>
c0006f06:	80 e2 80             	and    dl,0x80
c0006f09:	0f 85 4c 01 00 00    	jne    c000705b <Computer::detectFeatures()+0x1d5>
c0006f0f:	83 c4 1c             	add    esp,0x1c
c0006f12:	5b                   	pop    ebx
c0006f13:	5e                   	pop    esi
c0006f14:	5f                   	pop    edi
c0006f15:	5d                   	pop    ebp
c0006f16:	c3                   	ret    
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	6a 20                	push   0x20
c0006f1c:	e8 b7 87 00 00       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f21:	83 e0 01             	and    eax,0x1
c0006f24:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f2b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f31:	83 e0 f7             	and    eax,0xfffffff7
c0006f34:	09 d0                	or     eax,edx
c0006f36:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f3c:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f43:	e8 90 87 00 00       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f48:	89 c2                	mov    edx,eax
c0006f4a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f50:	83 e2 01             	and    edx,0x1
c0006f53:	83 e0 fe             	and    eax,0xfffffffe
c0006f56:	09 d0                	or     eax,edx
c0006f58:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f5e:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f65:	e8 6e 87 00 00       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f6a:	89 c2                	mov    edx,eax
c0006f6c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f72:	c1 e2 07             	shl    edx,0x7
c0006f75:	83 e0 7f             	and    eax,0x7f
c0006f78:	09 d0                	or     eax,edx
c0006f7a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f80:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f87:	e8 4c 87 00 00       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f8c:	83 c4 10             	add    esp,0x10
c0006f8f:	83 e0 01             	and    eax,0x1
c0006f92:	c1 e0 05             	shl    eax,0x5
c0006f95:	89 c2                	mov    edx,eax
c0006f97:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f9d:	83 e0 df             	and    eax,0xffffffdf
c0006fa0:	09 d0                	or     eax,edx
c0006fa2:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fac:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fb2:	0f 84 c9 00 00 00    	je     c0007081 <Computer::detectFeatures()+0x1fb>
c0006fb8:	83 e0 fe             	and    eax,0xfffffffe
c0006fbb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc7:	89 c2                	mov    edx,eax
c0006fc9:	83 e2 09             	and    edx,0x9
c0006fcc:	83 fa 01             	cmp    edx,0x1
c0006fcf:	75 09                	jne    c0006fda <Computer::detectFeatures()+0x154>
c0006fd1:	83 e0 fe             	and    eax,0xfffffffe
c0006fd4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fda:	83 ec 0c             	sub    esp,0xc
c0006fdd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006fe1:	50                   	push   eax
c0006fe2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006fe6:	55                   	push   ebp
c0006fe7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006feb:	57                   	push   edi
c0006fec:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ff0:	56                   	push   esi
c0006ff1:	68 00 00 00 80       	push   0x80000000
c0006ff6:	e8 59 86 00 00       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006ffb:	83 c4 20             	add    esp,0x20
c0006ffe:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007005:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007009:	0f 86 b7 fe ff ff    	jbe    c0006ec6 <Computer::detectFeatures()+0x40>
c000700f:	83 ec 0c             	sub    esp,0xc
c0007012:	50                   	push   eax
c0007013:	55                   	push   ebp
c0007014:	57                   	push   edi
c0007015:	56                   	push   esi
c0007016:	68 01 00 00 80       	push   0x80000001
c000701b:	e8 34 86 00 00       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007020:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007026:	83 c4 20             	add    esp,0x20
c0007029:	25 bf ff fc ff       	and    eax,0xfffcffbf
c000702e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007034:	e9 8d fe ff ff       	jmp    c0006ec6 <Computer::detectFeatures()+0x40>
c0007039:	e8 12 72 01 00       	call   c001e250 <absolutelyNoChanceInHell>
c000703e:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007044:	c1 e0 07             	shl    eax,0x7
c0007047:	83 e2 7f             	and    edx,0x7f
c000704a:	09 c2                	or     edx,eax
c000704c:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007052:	80 e2 80             	and    dl,0x80
c0007055:	0f 84 b4 fe ff ff    	je     c0006f0f <Computer::detectFeatures()+0x89>
c000705b:	e8 60 6e 01 00       	call   c001dec0 <avxDetect>
c0007060:	83 e0 01             	and    eax,0x1
c0007063:	c1 e0 05             	shl    eax,0x5
c0007066:	89 c2                	mov    edx,eax
c0007068:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c000706e:	83 e0 df             	and    eax,0xffffffdf
c0007071:	09 d0                	or     eax,edx
c0007073:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007079:	83 c4 1c             	add    esp,0x1c
c000707c:	5b                   	pop    ebx
c000707d:	5e                   	pop    esi
c000707e:	5f                   	pop    edi
c000707f:	5d                   	pop    ebp
c0007080:	c3                   	ret    
c0007081:	83 ec 0c             	sub    esp,0xc
c0007084:	68 00 02 00 00       	push   0x200
c0007089:	e8 4a 86 00 00       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000708e:	89 c2                	mov    edx,eax
c0007090:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0007096:	83 e2 01             	and    edx,0x1
c0007099:	83 e0 fe             	and    eax,0xfffffffe
c000709c:	09 d0                	or     eax,edx
c000709e:	83 c4 10             	add    esp,0x10
c00070a1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070a7:	e9 15 ff ff ff       	jmp    c0006fc1 <Computer::detectFeatures()+0x13b>

c00070ac <Computer::displayFeatures()>:
c00070ac:	c3                   	ret    
c00070ad:	90                   	nop

c00070ae <Computer::rdmsr(unsigned int)>:
c00070ae:	83 ec 0c             	sub    esp,0xc
c00070b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070b5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070bc:	74 0a                	je     c00070c8 <Computer::rdmsr(unsigned int)+0x1a>
c00070be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070c2:	0f 32                	rdmsr  
c00070c4:	83 c4 0c             	add    esp,0xc
c00070c7:	c3                   	ret    
c00070c8:	83 ec 0c             	sub    esp,0xc
c00070cb:	68 16 fa 01 c0       	push   0xc001fa16
c00070d0:	e8 6a 97 00 00       	call   c001083f <KePanic(char const*)>
c00070d5:	83 c4 10             	add    esp,0x10
c00070d8:	eb e4                	jmp    c00070be <Computer::rdmsr(unsigned int)+0x10>

c00070da <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070da:	57                   	push   edi
c00070db:	56                   	push   esi
c00070dc:	83 ec 04             	sub    esp,0x4
c00070df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070eb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f2:	74 10                	je     c0007104 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f8:	89 f0                	mov    eax,esi
c00070fa:	89 fa                	mov    edx,edi
c00070fc:	0f 30                	wrmsr  
c00070fe:	83 c4 04             	add    esp,0x4
c0007101:	5e                   	pop    esi
c0007102:	5f                   	pop    edi
c0007103:	c3                   	ret    
c0007104:	83 ec 0c             	sub    esp,0xc
c0007107:	68 1c fa 01 c0       	push   0xc001fa1c
c000710c:	e8 2e 97 00 00       	call   c001083f <KePanic(char const*)>
c0007111:	83 c4 10             	add    esp,0x10
c0007114:	eb de                	jmp    c00070f4 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007116 <Computer::shutdown()>:
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000711d:	8b 10                	mov    edx,DWORD PTR [eax]
c000711f:	6a 00                	push   0x0
c0007121:	6a 00                	push   0x0
c0007123:	6a 00                	push   0x0
c0007125:	50                   	push   eax
c0007126:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007129:	83 c4 1c             	add    esp,0x1c
c000712c:	c3                   	ret    
c000712d:	90                   	nop

c000712e <Computer::restart()>:
c000712e:	83 ec 0c             	sub    esp,0xc
c0007131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007135:	8b 10                	mov    edx,DWORD PTR [eax]
c0007137:	6a 00                	push   0x0
c0007139:	6a 00                	push   0x0
c000713b:	6a 01                	push   0x1
c000713d:	50                   	push   eax
c000713e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007141:	83 c4 1c             	add    esp,0x1c
c0007144:	c3                   	ret    
c0007145:	90                   	nop

c0007146 <Computer::sleep()>:
c0007146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000714a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007154:	e9 e7 7f 00 00       	jmp    c000f140 <ACPI::sleep()>
c0007159:	90                   	nop

c000715a <Computer::nmiEnabled()>:
c000715a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007164:	c3                   	ret    
c0007165:	90                   	nop

c0007166 <Computer::readCMOS(unsigned char)>:
c0007166:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000716a:	31 d2                	xor    edx,edx
c000716c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007170:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0007177:	75 02                	jne    c000717b <Computer::readCMOS(unsigned char)+0x15>
c0007179:	b2 80                	mov    dl,0x80
c000717b:	09 d0                	or     eax,edx
c000717d:	e6 70                	out    0x70,al
c000717f:	e4 71                	in     al,0x71
c0007181:	c3                   	ret    

c0007182 <Computer::enableNMI(bool)>:
c0007182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007186:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000718a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0007190:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0007198:	eb cc                	jmp    c0007166 <Computer::readCMOS(unsigned char)>

c000719a <Computer::open(int, int, void*)>:
c000719a:	56                   	push   esi
c000719b:	53                   	push   ebx
c000719c:	83 ec 10             	sub    esp,0x10
c000719f:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071a6:	0f 94 05 20 1e 02 c0 	sete   BYTE PTR ds:0xc0021e20
c00071ad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b1:	68 22 fa 01 c0       	push   0xc001fa22
c00071b6:	e8 07 90 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c00071bb:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071c2:	e8 c5 08 00 00       	call   c0007a8c <malloc>
c00071c7:	89 c6                	mov    esi,eax
c00071c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00071cc:	e8 e3 7a 00 00       	call   c000ecb4 <ACPI::ACPI()>
c00071d1:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071d7:	58                   	pop    eax
c00071d8:	5a                   	pop    edx
c00071d9:	56                   	push   esi
c00071da:	53                   	push   ebx
c00071db:	e8 a6 4b 00 00       	call   c000bd86 <Device::addChild(Device*)>
c00071e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071e3:	e8 9e fc ff ff       	call   c0006e86 <Computer::detectFeatures()>
c00071e8:	59                   	pop    ecx
c00071e9:	5e                   	pop    esi
c00071ea:	6a 01                	push   0x1
c00071ec:	53                   	push   ebx
c00071ed:	e8 90 ff ff ff       	call   c0007182 <Computer::enableNMI(bool)>
c00071f2:	c7 04 24 3a fa 01 c0 	mov    DWORD PTR [esp],0xc001fa3a
c00071f9:	e8 c4 8f 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c00071fe:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007205:	e8 82 08 00 00       	call   c0007a8c <malloc>
c000720a:	89 c6                	mov    esi,eax
c000720c:	89 04 24             	mov    DWORD PTR [esp],eax
c000720f:	e8 7c 85 00 00       	call   c000f790 <CPU::CPU()>
c0007214:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000721a:	58                   	pop    eax
c000721b:	5a                   	pop    edx
c000721c:	56                   	push   esi
c000721d:	53                   	push   ebx
c000721e:	e8 63 4b 00 00       	call   c000bd86 <Device::addChild(Device*)>
c0007223:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007229:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000722d:	8b 10                	mov    edx,DWORD PTR [eax]
c000722f:	51                   	push   ecx
c0007230:	6a 00                	push   0x0
c0007232:	6a 00                	push   0x0
c0007234:	50                   	push   eax
c0007235:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007238:	83 c4 14             	add    esp,0x14
c000723b:	68 54 fa 01 c0       	push   0xc001fa54
c0007240:	e8 7d 8f 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0007245:	c7 04 24 99 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c99
c000724c:	e8 cb dc 00 00       	call   c0014f1c <setupMultitasking(void (*)())>
c0007251:	83 c4 14             	add    esp,0x14
c0007254:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007259:	5b                   	pop    ebx
c000725a:	5e                   	pop    esi
c000725b:	c3                   	ret    

c000725c <Computer::disableNMI()>:
c000725c:	6a 00                	push   0x0
c000725e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007262:	50                   	push   eax
c0007263:	e8 1a ff ff ff       	call   c0007182 <Computer::enableNMI(bool)>
c0007268:	5a                   	pop    edx
c0007269:	59                   	pop    ecx
c000726a:	c3                   	ret    
c000726b:	90                   	nop

c000726c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000726c:	53                   	push   ebx
c000726d:	b2 80                	mov    dl,0x80
c000726f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007277:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000727b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0007282:	74 02                	je     c0007286 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0007284:	31 d2                	xor    edx,edx
c0007286:	09 d0                	or     eax,edx
c0007288:	e6 70                	out    0x70,al
c000728a:	88 c8                	mov    al,cl
c000728c:	e6 71                	out    0x71,al
c000728e:	5b                   	pop    ebx
c000728f:	c3                   	ret    

c0007290 <Computer::handleNMI()>:
c0007290:	56                   	push   esi
c0007291:	53                   	push   ebx
c0007292:	83 ec 10             	sub    esp,0x10
c0007295:	e4 92                	in     al,0x92
c0007297:	89 c6                	mov    esi,eax
c0007299:	e4 61                	in     al,0x61
c000729b:	68 6f fa 01 c0       	push   0xc001fa6f
c00072a0:	88 c3                	mov    bl,al
c00072a2:	e8 ac 36 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00072a7:	83 c4 10             	add    esp,0x10
c00072aa:	83 e6 10             	and    esi,0x10
c00072ad:	75 10                	jne    c00072bf <Computer::handleNMI()+0x2f>
c00072af:	f6 c3 40             	test   bl,0x40
c00072b2:	75 20                	jne    c00072d4 <Computer::handleNMI()+0x44>
c00072b4:	80 e3 80             	and    bl,0x80
c00072b7:	75 30                	jne    c00072e9 <Computer::handleNMI()+0x59>
c00072b9:	83 c4 04             	add    esp,0x4
c00072bc:	5b                   	pop    ebx
c00072bd:	5e                   	pop    esi
c00072be:	c3                   	ret    
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 80 fa 01 c0       	push   0xc001fa80
c00072c7:	e8 73 95 00 00       	call   c001083f <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	f6 c3 40             	test   bl,0x40
c00072d2:	74 e0                	je     c00072b4 <Computer::handleNMI()+0x24>
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	68 8d fa 01 c0       	push   0xc001fa8d
c00072dc:	e8 5e 95 00 00       	call   c001083f <KePanic(char const*)>
c00072e1:	83 c4 10             	add    esp,0x10
c00072e4:	80 e3 80             	and    bl,0x80
c00072e7:	74 d0                	je     c00072b9 <Computer::handleNMI()+0x29>
c00072e9:	c7 44 24 10 97 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa97
c00072f1:	83 c4 04             	add    esp,0x4
c00072f4:	5b                   	pop    ebx
c00072f5:	5e                   	pop    esi
c00072f6:	e9 44 95 00 00       	jmp    c001083f <KePanic(char const*)>
c00072fb:	90                   	nop

c00072fc <GDTEntry::setBase(unsigned int)>:
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007304:	89 c1                	mov    ecx,eax
c0007306:	c1 e9 10             	shr    ecx,0x10
c0007309:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000730d:	c1 e8 18             	shr    eax,0x18
c0007310:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007313:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007316:	c3                   	ret    
c0007317:	90                   	nop

c0007318 <GDTEntry::setLimit(unsigned int)>:
c0007318:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000731c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007320:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007323:	66 89 01             	mov    WORD PTR [ecx],ax
c0007326:	c1 e8 10             	shr    eax,0x10
c0007329:	83 e2 f0             	and    edx,0xfffffff0
c000732c:	83 e0 0f             	and    eax,0xf
c000732f:	09 d0                	or     eax,edx
c0007331:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007334:	c3                   	ret    
c0007335:	90                   	nop

c0007336 <GDT::GDT()>:
c0007336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000733a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007344:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000734a:	90                   	nop
c000734b:	c3                   	ret    

c000734c <GDT::addEntry(GDTEntry)>:
c000734c:	53                   	push   ebx
c000734d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007351:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007355:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007359:	8b 02                	mov    eax,DWORD PTR [edx]
c000735b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000735f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007362:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007366:	89 0a                	mov    DWORD PTR [edx],ecx
c0007368:	c1 e0 03             	shl    eax,0x3
c000736b:	5b                   	pop    ebx
c000736c:	c3                   	ret    
c000736d:	90                   	nop

c000736e <GDT::getNumberOfEntries()>:
c000736e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007372:	8b 00                	mov    eax,DWORD PTR [eax]
c0007374:	c3                   	ret    
c0007375:	90                   	nop

c0007376 <GDT::flush()>:
c0007376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000737a:	83 c0 04             	add    eax,0x4
c000737d:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0007380:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007385:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000738c:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c0007393:	e9 c2 8f ff ff       	jmp    c000035a <loadGDT>

c0007398 <GDT::setup()>:
c0007398:	57                   	push   edi
c0007399:	56                   	push   esi
c000739a:	53                   	push   ebx
c000739b:	83 ec 30             	sub    esp,0x30
c000739e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073a2:	6a 00                	push   0x0
c00073a4:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073a8:	56                   	push   esi
c00073a9:	e8 4e ff ff ff       	call   c00072fc <GDTEntry::setBase(unsigned int)>
c00073ae:	6a 00                	push   0x0
c00073b0:	56                   	push   esi
c00073b1:	e8 62 ff ff ff       	call   c0007318 <GDTEntry::setLimit(unsigned int)>
c00073b6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073be:	6a 00                	push   0x0
c00073c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073c4:	56                   	push   esi
c00073c5:	e8 32 ff ff ff       	call   c00072fc <GDTEntry::setBase(unsigned int)>
c00073ca:	68 ff ff ff 00       	push   0xffffff
c00073cf:	56                   	push   esi
c00073d0:	e8 43 ff ff ff       	call   c0007318 <GDTEntry::setLimit(unsigned int)>
c00073d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073dd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00073e2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073e6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00073eb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00073ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00073f3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00073f7:	89 f8                	mov    eax,edi
c00073f9:	89 fa                	mov    edx,edi
c00073fb:	80 e4 f7             	and    ah,0xf7
c00073fe:	80 ce 60             	or     dh,0x60
c0007401:	89 c7                	mov    edi,eax
c0007403:	80 cc 60             	or     ah,0x60
c0007406:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000740a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000740e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007416:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000741a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000741e:	83 c4 20             	add    esp,0x20
c0007421:	6a 00                	push   0x0
c0007423:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007427:	50                   	push   eax
c0007428:	e8 cf fe ff ff       	call   c00072fc <GDTEntry::setBase(unsigned int)>
c000742d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007431:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007435:	83 e0 3f             	and    eax,0x3f
c0007438:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000743c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007440:	6a 00                	push   0x0
c0007442:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007446:	50                   	push   eax
c0007447:	e8 b0 fe ff ff       	call   c00072fc <GDTEntry::setBase(unsigned int)>
c000744c:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007450:	83 e0 3f             	and    eax,0x3f
c0007453:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007457:	83 c4 0c             	add    esp,0xc
c000745a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000745e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007462:	53                   	push   ebx
c0007463:	e8 e4 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c0007468:	83 c4 0c             	add    esp,0xc
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007473:	53                   	push   ebx
c0007474:	e8 d3 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c0007479:	83 c4 0c             	add    esp,0xc
c000747c:	57                   	push   edi
c000747d:	56                   	push   esi
c000747e:	53                   	push   ebx
c000747f:	e8 c8 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c0007484:	83 c4 0c             	add    esp,0xc
c0007487:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000748b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000748f:	53                   	push   ebx
c0007490:	e8 b7 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c0007495:	83 c4 0c             	add    esp,0xc
c0007498:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000749c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074a0:	53                   	push   ebx
c00074a1:	e8 a6 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c00074a6:	83 c4 0c             	add    esp,0xc
c00074a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074b1:	53                   	push   ebx
c00074b2:	e8 95 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c00074b7:	83 c4 0c             	add    esp,0xc
c00074ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074c2:	53                   	push   ebx
c00074c3:	e8 84 fe ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c00074c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074cb:	e8 a6 fe ff ff       	call   c0007376 <GDT::flush()>
c00074d0:	83 c4 40             	add    esp,0x40
c00074d3:	5b                   	pop    ebx
c00074d4:	5e                   	pop    esi
c00074d5:	5f                   	pop    edi
c00074d6:	c3                   	ret    

c00074d7 <idleFunction(void*)>:
c00074d7:	83 ec 0c             	sub    esp,0xc
c00074da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074df:	48                   	dec    eax
c00074e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00074e5:	75 01                	jne    c00074e8 <idleFunction(void*)+0x11>
c00074e7:	fb                   	sti    
c00074e8:	e8 9b f6 00 00       	call   c0016b88 <HalSystemIdle()>
c00074ed:	e8 60 73 01 00       	call   c001e852 <idleCommon()>
c00074f2:	eb f4                	jmp    c00074e8 <idleFunction(void*)+0x11>

c00074f4 <IDTEntry::IDTEntry(bool)>:
c00074f4:	53                   	push   ebx
c00074f5:	83 ec 04             	sub    esp,0x4
c00074f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074fc:	88 04 24             	mov    BYTE PTR [esp],al
c00074ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007503:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000750d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007515:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007518:	83 e2 f0             	and    edx,0xfffffff0
c000751b:	83 ca 0e             	or     edx,0xe
c000751e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007525:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007528:	83 e2 ef             	and    edx,0xffffffef
c000752b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000752e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0007532:	85 c0                	test   eax,eax
c0007534:	74 06                	je     c000753c <IDTEntry::IDTEntry(bool)+0x48>
c0007536:	b2 03                	mov    dl,0x3
c0007538:	eb 06                	jmp    c0007540 <IDTEntry::IDTEntry(bool)+0x4c>
c000753a:	66 90                	xchg   ax,ax
c000753c:	b2 00                	mov    dl,0x0
c000753e:	66 90                	xchg   ax,ax
c0007540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007544:	83 e2 03             	and    edx,0x3
c0007547:	89 d3                	mov    ebx,edx
c0007549:	c1 e3 05             	shl    ebx,0x5
c000754c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000754f:	83 e2 9f             	and    edx,0xffffff9f
c0007552:	88 d1                	mov    cl,dl
c0007554:	88 da                	mov    dl,bl
c0007556:	09 ca                	or     edx,ecx
c0007558:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000755b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007562:	83 ca 80             	or     edx,0xffffff80
c0007565:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007568:	90                   	nop
c0007569:	83 c4 04             	add    esp,0x4
c000756c:	5b                   	pop    ebx
c000756d:	c3                   	ret    

c000756e <IDTEntry::setOffset(unsigned int)>:
c000756e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007572:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007576:	66 89 02             	mov    WORD PTR [edx],ax
c0007579:	c1 e8 10             	shr    eax,0x10
c000757c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007580:	c3                   	ret    
c0007581:	90                   	nop
c0007582:	66 90                	xchg   ax,ax

c0007584 <IDT::IDT()>:
c0007584:	90                   	nop
c0007585:	c3                   	ret    

c0007586 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000758a:	83 c0 30             	add    eax,0x30
c000758d:	c3                   	ret    

c000758e <IDT::addEntry(IDTEntry, int)>:
c000758e:	53                   	push   ebx
c000758f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007597:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000759b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000759f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075a2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075a6:	5b                   	pop    ebx
c00075a7:	c3                   	ret    

c00075a8 <IDT::addEntry(int, void (*)(), bool)>:
c00075a8:	53                   	push   ebx
c00075a9:	83 ec 10             	sub    esp,0x10
c00075ac:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075b1:	50                   	push   eax
c00075b2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075b6:	53                   	push   ebx
c00075b7:	e8 38 ff ff ff       	call   c00074f4 <IDTEntry::IDTEntry(bool)>
c00075bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075c0:	53                   	push   ebx
c00075c1:	e8 a8 ff ff ff       	call   c000756e <IDTEntry::setOffset(unsigned int)>
c00075c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075d6:	e8 b3 ff ff ff       	call   c000758e <IDT::addEntry(IDTEntry, int)>
c00075db:	83 c4 30             	add    esp,0x30
c00075de:	5b                   	pop    ebx
c00075df:	c3                   	ret    

c00075e0 <IDT::flush()>:
c00075e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e4:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c00075ed:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c00075f2:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c00075f9:	c3                   	ret    

c00075fa <IDT::setup()>:
c00075fa:	57                   	push   edi
c00075fb:	56                   	push   esi
c00075fc:	53                   	push   ebx
c00075fd:	83 ec 10             	sub    esp,0x10
c0007600:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007604:	6a 00                	push   0x0
c0007606:	68 50 df 01 c0       	push   0xc001df50
c000760b:	6a 00                	push   0x0
c000760d:	53                   	push   ebx
c000760e:	e8 95 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007613:	6a 00                	push   0x0
c0007615:	68 60 df 01 c0       	push   0xc001df60
c000761a:	6a 01                	push   0x1
c000761c:	53                   	push   ebx
c000761d:	e8 86 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007622:	83 c4 20             	add    esp,0x20
c0007625:	6a 00                	push   0x0
c0007627:	68 6a df 01 c0       	push   0xc001df6a
c000762c:	6a 02                	push   0x2
c000762e:	53                   	push   ebx
c000762f:	e8 74 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007634:	6a 00                	push   0x0
c0007636:	68 74 df 01 c0       	push   0xc001df74
c000763b:	6a 03                	push   0x3
c000763d:	53                   	push   ebx
c000763e:	e8 65 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007643:	83 c4 20             	add    esp,0x20
c0007646:	6a 00                	push   0x0
c0007648:	68 7e df 01 c0       	push   0xc001df7e
c000764d:	6a 04                	push   0x4
c000764f:	53                   	push   ebx
c0007650:	e8 53 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007655:	6a 00                	push   0x0
c0007657:	68 88 df 01 c0       	push   0xc001df88
c000765c:	6a 05                	push   0x5
c000765e:	53                   	push   ebx
c000765f:	e8 44 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007664:	83 c4 20             	add    esp,0x20
c0007667:	6a 00                	push   0x0
c0007669:	68 92 df 01 c0       	push   0xc001df92
c000766e:	6a 06                	push   0x6
c0007670:	53                   	push   ebx
c0007671:	e8 32 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007676:	6a 00                	push   0x0
c0007678:	68 9c df 01 c0       	push   0xc001df9c
c000767d:	6a 07                	push   0x7
c000767f:	53                   	push   ebx
c0007680:	e8 23 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007685:	83 c4 20             	add    esp,0x20
c0007688:	6a 00                	push   0x0
c000768a:	68 a6 df 01 c0       	push   0xc001dfa6
c000768f:	6a 08                	push   0x8
c0007691:	53                   	push   ebx
c0007692:	e8 11 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007697:	6a 00                	push   0x0
c0007699:	68 ae df 01 c0       	push   0xc001dfae
c000769e:	6a 09                	push   0x9
c00076a0:	53                   	push   ebx
c00076a1:	e8 02 ff ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076a6:	83 c4 20             	add    esp,0x20
c00076a9:	6a 00                	push   0x0
c00076ab:	68 b8 df 01 c0       	push   0xc001dfb8
c00076b0:	6a 0a                	push   0xa
c00076b2:	53                   	push   ebx
c00076b3:	e8 f0 fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076b8:	6a 00                	push   0x0
c00076ba:	68 c0 df 01 c0       	push   0xc001dfc0
c00076bf:	6a 0b                	push   0xb
c00076c1:	53                   	push   ebx
c00076c2:	e8 e1 fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076c7:	83 c4 20             	add    esp,0x20
c00076ca:	6a 00                	push   0x0
c00076cc:	68 c8 df 01 c0       	push   0xc001dfc8
c00076d1:	6a 0c                	push   0xc
c00076d3:	53                   	push   ebx
c00076d4:	e8 cf fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076d9:	6a 00                	push   0x0
c00076db:	68 d0 df 01 c0       	push   0xc001dfd0
c00076e0:	6a 0d                	push   0xd
c00076e2:	53                   	push   ebx
c00076e3:	e8 c0 fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076e8:	83 c4 20             	add    esp,0x20
c00076eb:	6a 00                	push   0x0
c00076ed:	68 ea df 01 c0       	push   0xc001dfea
c00076f2:	6a 0e                	push   0xe
c00076f4:	53                   	push   ebx
c00076f5:	e8 ae fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00076fa:	6a 00                	push   0x0
c00076fc:	68 f2 df 01 c0       	push   0xc001dff2
c0007701:	6a 0f                	push   0xf
c0007703:	53                   	push   ebx
c0007704:	e8 9f fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007709:	83 c4 20             	add    esp,0x20
c000770c:	6a 00                	push   0x0
c000770e:	68 fc df 01 c0       	push   0xc001dffc
c0007713:	6a 10                	push   0x10
c0007715:	53                   	push   ebx
c0007716:	e8 8d fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000771b:	6a 00                	push   0x0
c000771d:	68 06 e0 01 c0       	push   0xc001e006
c0007722:	6a 11                	push   0x11
c0007724:	53                   	push   ebx
c0007725:	e8 7e fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000772a:	83 c4 20             	add    esp,0x20
c000772d:	6a 00                	push   0x0
c000772f:	68 10 e0 01 c0       	push   0xc001e010
c0007734:	6a 12                	push   0x12
c0007736:	53                   	push   ebx
c0007737:	e8 6c fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000773c:	6a 01                	push   0x1
c000773e:	68 aa e0 01 c0       	push   0xc001e0aa
c0007743:	6a 60                	push   0x60
c0007745:	53                   	push   ebx
c0007746:	e8 5d fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000774b:	83 c4 20             	add    esp,0x20
c000774e:	6a 00                	push   0x0
c0007750:	68 b1 e0 01 c0       	push   0xc001e0b1
c0007755:	6a 20                	push   0x20
c0007757:	53                   	push   ebx
c0007758:	e8 4b fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000775d:	6a 00                	push   0x0
c000775f:	68 9c e0 01 c0       	push   0xc001e09c
c0007764:	6a 21                	push   0x21
c0007766:	53                   	push   ebx
c0007767:	e8 3c fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000776c:	83 c4 20             	add    esp,0x20
c000776f:	6a 00                	push   0x0
c0007771:	68 a3 e0 01 c0       	push   0xc001e0a3
c0007776:	6a 22                	push   0x22
c0007778:	53                   	push   ebx
c0007779:	e8 2a fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000777e:	6a 00                	push   0x0
c0007780:	68 1a e0 01 c0       	push   0xc001e01a
c0007785:	6a 23                	push   0x23
c0007787:	53                   	push   ebx
c0007788:	e8 1b fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000778d:	83 c4 20             	add    esp,0x20
c0007790:	6a 00                	push   0x0
c0007792:	68 24 e0 01 c0       	push   0xc001e024
c0007797:	6a 24                	push   0x24
c0007799:	53                   	push   ebx
c000779a:	e8 09 fe ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c000779f:	6a 00                	push   0x0
c00077a1:	68 2e e0 01 c0       	push   0xc001e02e
c00077a6:	6a 25                	push   0x25
c00077a8:	53                   	push   ebx
c00077a9:	e8 fa fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00077ae:	83 c4 20             	add    esp,0x20
c00077b1:	6a 00                	push   0x0
c00077b3:	68 38 e0 01 c0       	push   0xc001e038
c00077b8:	6a 26                	push   0x26
c00077ba:	53                   	push   ebx
c00077bb:	e8 e8 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00077c0:	6a 00                	push   0x0
c00077c2:	68 42 e0 01 c0       	push   0xc001e042
c00077c7:	6a 27                	push   0x27
c00077c9:	53                   	push   ebx
c00077ca:	e8 d9 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00077cf:	83 c4 20             	add    esp,0x20
c00077d2:	6a 00                	push   0x0
c00077d4:	68 4c e0 01 c0       	push   0xc001e04c
c00077d9:	6a 28                	push   0x28
c00077db:	53                   	push   ebx
c00077dc:	e8 c7 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00077e1:	6a 00                	push   0x0
c00077e3:	68 56 e0 01 c0       	push   0xc001e056
c00077e8:	6a 29                	push   0x29
c00077ea:	53                   	push   ebx
c00077eb:	e8 b8 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00077f0:	83 c4 20             	add    esp,0x20
c00077f3:	6a 00                	push   0x0
c00077f5:	68 60 e0 01 c0       	push   0xc001e060
c00077fa:	6a 2a                	push   0x2a
c00077fc:	53                   	push   ebx
c00077fd:	e8 a6 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007802:	6a 00                	push   0x0
c0007804:	68 6a e0 01 c0       	push   0xc001e06a
c0007809:	6a 2b                	push   0x2b
c000780b:	53                   	push   ebx
c000780c:	e8 97 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007811:	83 c4 20             	add    esp,0x20
c0007814:	6a 00                	push   0x0
c0007816:	68 74 e0 01 c0       	push   0xc001e074
c000781b:	6a 2c                	push   0x2c
c000781d:	53                   	push   ebx
c000781e:	e8 85 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007823:	6a 00                	push   0x0
c0007825:	68 7e e0 01 c0       	push   0xc001e07e
c000782a:	6a 2d                	push   0x2d
c000782c:	53                   	push   ebx
c000782d:	e8 76 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007832:	83 c4 20             	add    esp,0x20
c0007835:	6a 00                	push   0x0
c0007837:	68 88 e0 01 c0       	push   0xc001e088
c000783c:	6a 2e                	push   0x2e
c000783e:	53                   	push   ebx
c000783f:	e8 64 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007844:	6a 00                	push   0x0
c0007846:	68 92 e0 01 c0       	push   0xc001e092
c000784b:	6a 2f                	push   0x2f
c000784d:	53                   	push   ebx
c000784e:	e8 55 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007853:	83 c4 20             	add    esp,0x20
c0007856:	6a 00                	push   0x0
c0007858:	68 ec e1 01 c0       	push   0xc001e1ec
c000785d:	6a 30                	push   0x30
c000785f:	53                   	push   ebx
c0007860:	e8 43 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007865:	6a 00                	push   0x0
c0007867:	68 f6 e1 01 c0       	push   0xc001e1f6
c000786c:	6a 31                	push   0x31
c000786e:	53                   	push   ebx
c000786f:	e8 34 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007874:	83 c4 20             	add    esp,0x20
c0007877:	6a 00                	push   0x0
c0007879:	68 00 e2 01 c0       	push   0xc001e200
c000787e:	6a 32                	push   0x32
c0007880:	53                   	push   ebx
c0007881:	e8 22 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007886:	6a 00                	push   0x0
c0007888:	68 0a e2 01 c0       	push   0xc001e20a
c000788d:	6a 33                	push   0x33
c000788f:	53                   	push   ebx
c0007890:	e8 13 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c0007895:	83 c4 20             	add    esp,0x20
c0007898:	6a 00                	push   0x0
c000789a:	68 14 e2 01 c0       	push   0xc001e214
c000789f:	6a 34                	push   0x34
c00078a1:	53                   	push   ebx
c00078a2:	e8 01 fd ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00078a7:	6a 00                	push   0x0
c00078a9:	68 1e e2 01 c0       	push   0xc001e21e
c00078ae:	6a 35                	push   0x35
c00078b0:	53                   	push   ebx
c00078b1:	e8 f2 fc ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00078b6:	83 c4 20             	add    esp,0x20
c00078b9:	6a 00                	push   0x0
c00078bb:	68 28 e2 01 c0       	push   0xc001e228
c00078c0:	6a 36                	push   0x36
c00078c2:	53                   	push   ebx
c00078c3:	e8 e0 fc ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00078c8:	6a 00                	push   0x0
c00078ca:	68 32 e2 01 c0       	push   0xc001e232
c00078cf:	6a 37                	push   0x37
c00078d1:	53                   	push   ebx
c00078d2:	e8 d1 fc ff ff       	call   c00075a8 <IDT::addEntry(int, void (*)(), bool)>
c00078d7:	83 c4 1c             	add    esp,0x1c
c00078da:	6a 03                	push   0x3
c00078dc:	6a 02                	push   0x2
c00078de:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00078e4:	e8 f7 24 00 00       	call   c0009de0 <VAS::allocatePages(int, int)>
c00078e9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00078f0:	89 c6                	mov    esi,eax
c00078f2:	e8 95 01 00 00       	call   c0007a8c <malloc>
c00078f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00078fa:	89 c7                	mov    edi,eax
c00078fc:	e8 27 16 00 00       	call   c0008f28 <TSS::TSS()>
c0007901:	83 c4 0c             	add    esp,0xc
c0007904:	81 c6 00 20 00 00    	add    esi,0x2000
c000790a:	68 a6 df 01 c0       	push   0xc001dfa6
c000790f:	56                   	push   esi
c0007910:	57                   	push   edi
c0007911:	e8 56 16 00 00       	call   c0008f6c <TSS::setup(unsigned long, unsigned long)>
c0007916:	89 c6                	mov    esi,eax
c0007918:	58                   	pop    eax
c0007919:	5a                   	pop    edx
c000791a:	6a 00                	push   0x0
c000791c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007920:	50                   	push   eax
c0007921:	e8 ce fb ff ff       	call   c00074f4 <IDTEntry::IDTEntry(bool)>
c0007926:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000792a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000792f:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007935:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000793c:	80 ce 05             	or     dh,0x5
c000793f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007943:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007947:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000794a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000794e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007951:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007954:	e8 87 fc ff ff       	call   c00075e0 <IDT::flush()>
c0007959:	83 c4 20             	add    esp,0x20
c000795c:	5b                   	pop    ebx
c000795d:	5e                   	pop    esi
c000795e:	5f                   	pop    edi
c000795f:	c3                   	ret    

c0007960 <sbrk>:
c0007960:	55                   	push   ebp
c0007961:	57                   	push   edi
c0007962:	56                   	push   esi
c0007963:	53                   	push   ebx
c0007964:	83 ec 1c             	sub    esp,0x1c
c0007967:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000796b:	85 ed                	test   ebp,ebp
c000796d:	a1 0c 1e 02 c0       	mov    eax,ds:0xc0021e0c
c0007972:	74 61                	je     c00079d5 <sbrk+0x75>
c0007974:	78 67                	js     c00079dd <sbrk+0x7d>
c0007976:	a1 0c 1e 02 c0       	mov    eax,ds:0xc0021e0c
c000797b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000797f:	81 c5 ff 0f 00 00    	add    ebp,0xfff
c0007985:	89 e8                	mov    eax,ebp
c0007987:	c1 f8 1f             	sar    eax,0x1f
c000798a:	25 ff 0f 00 00       	and    eax,0xfff
c000798f:	01 c5                	add    ebp,eax
c0007991:	c1 fd 0c             	sar    ebp,0xc
c0007994:	bb 00 00 00 00       	mov    ebx,0x0
c0007999:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c000799f:	8b 3d 0c 1e 02 c0    	mov    edi,DWORD PTR ds:0xc0021e0c
c00079a5:	e8 e7 03 00 00       	call   c0007d91 <Phys::allocatePage()>
c00079aa:	68 01 04 00 00       	push   0x401
c00079af:	57                   	push   edi
c00079b0:	50                   	push   eax
c00079b1:	56                   	push   esi
c00079b2:	e8 23 23 00 00       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c00079b7:	81 05 0c 1e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021e0c,0x1000
c00079c1:	83 c3 01             	add    ebx,0x1
c00079c4:	83 c4 10             	add    esp,0x10
c00079c7:	39 dd                	cmp    ebp,ebx
c00079c9:	75 ce                	jne    c0007999 <sbrk+0x39>
c00079cb:	0f 20 d8             	mov    eax,cr3
c00079ce:	0f 22 d8             	mov    cr3,eax
c00079d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079d5:	83 c4 1c             	add    esp,0x1c
c00079d8:	5b                   	pop    ebx
c00079d9:	5e                   	pop    esi
c00079da:	5f                   	pop    edi
c00079db:	5d                   	pop    ebp
c00079dc:	c3                   	ret    
c00079dd:	83 ec 08             	sub    esp,0x8
c00079e0:	55                   	push   ebp
c00079e1:	68 14 fb 01 c0       	push   0xc001fb14
c00079e6:	e8 68 2f 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00079eb:	83 c4 10             	add    esp,0x10
c00079ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00079f3:	eb e0                	jmp    c00079d5 <sbrk+0x75>

c00079f5 <mmap>:
c00079f5:	83 ec 18             	sub    esp,0x18
c00079f8:	68 44 fb 01 c0       	push   0xc001fb44
c00079fd:	e8 3d 8e 00 00       	call   c001083f <KePanic(char const*)>
c0007a02:	b8 00 00 00 00       	mov    eax,0x0
c0007a07:	83 c4 1c             	add    esp,0x1c
c0007a0a:	c3                   	ret    

c0007a0b <munmap>:
c0007a0b:	83 ec 18             	sub    esp,0x18
c0007a0e:	68 49 fb 01 c0       	push   0xc001fb49
c0007a13:	e8 27 8e 00 00       	call   c001083f <KePanic(char const*)>
c0007a18:	b8 00 00 00 00       	mov    eax,0x0
c0007a1d:	83 c4 1c             	add    esp,0x1c
c0007a20:	c3                   	ret    

c0007a21 <liballoc_lock()>:
c0007a21:	fa                   	cli    
c0007a22:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a29:	b8 00 00 00 00       	mov    eax,0x0
c0007a2e:	c3                   	ret    

c0007a2f <liballoc_unlock()>:
c0007a2f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a34:	83 e8 01             	sub    eax,0x1
c0007a37:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a3c:	75 01                	jne    c0007a3f <liballoc_unlock()+0x10>
c0007a3e:	fb                   	sti    
c0007a3f:	b8 00 00 00 00       	mov    eax,0x0
c0007a44:	c3                   	ret    

c0007a45 <liballoc_alloc(int)>:
c0007a45:	83 ec 10             	sub    esp,0x10
c0007a48:	6a 01                	push   0x1
c0007a4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a4e:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a54:	e8 87 23 00 00       	call   c0009de0 <VAS::allocatePages(int, int)>
c0007a59:	83 c4 1c             	add    esp,0x1c
c0007a5c:	c3                   	ret    

c0007a5d <liballoc_free(void*, int)>:
c0007a5d:	83 ec 14             	sub    esp,0x14
c0007a60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a64:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a6a:	e8 b1 1f 00 00       	call   c0009a20 <VAS::freeAllocatedPages(unsigned long)>
c0007a6f:	b8 00 00 00 00       	mov    eax,0x0
c0007a74:	83 c4 1c             	add    esp,0x1c
c0007a77:	c3                   	ret    

c0007a78 <realloc>:
c0007a78:	83 ec 14             	sub    esp,0x14
c0007a7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a83:	e8 79 9b ff ff       	call   c0001601 <dlrealloc>
c0007a88:	83 c4 1c             	add    esp,0x1c
c0007a8b:	c3                   	ret    

c0007a8c <malloc>:
c0007a8c:	83 ec 18             	sub    esp,0x18
c0007a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a93:	e8 2c 96 ff ff       	call   c00010c4 <dlmalloc>
c0007a98:	83 c4 1c             	add    esp,0x1c
c0007a9b:	c3                   	ret    

c0007a9c <free>:
c0007a9c:	83 ec 18             	sub    esp,0x18
c0007a9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa3:	e8 be 92 ff ff       	call   c0000d66 <dlfree>
c0007aa8:	83 c4 1c             	add    esp,0x1c
c0007aab:	c3                   	ret    

c0007aac <rfree>:
c0007aac:	83 ec 18             	sub    esp,0x18
c0007aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab3:	e8 ae 92 ff ff       	call   c0000d66 <dlfree>
c0007ab8:	83 c4 1c             	add    esp,0x1c
c0007abb:	c3                   	ret    

c0007abc <calloc>:
c0007abc:	56                   	push   esi
c0007abd:	53                   	push   ebx
c0007abe:	83 ec 10             	sub    esp,0x10
c0007ac1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ac5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007aca:	53                   	push   ebx
c0007acb:	e8 bc ff ff ff       	call   c0007a8c <malloc>
c0007ad0:	89 c6                	mov    esi,eax
c0007ad2:	83 c4 0c             	add    esp,0xc
c0007ad5:	53                   	push   ebx
c0007ad6:	6a 00                	push   0x0
c0007ad8:	50                   	push   eax
c0007ad9:	e8 02 8a ff ff       	call   c00004e0 <memset>
c0007ade:	89 f0                	mov    eax,esi
c0007ae0:	83 c4 14             	add    esp,0x14
c0007ae3:	5b                   	pop    ebx
c0007ae4:	5e                   	pop    esi
c0007ae5:	c3                   	ret    

c0007ae6 <KeEntryPoint>:
c0007ae6:	57                   	push   edi
c0007ae7:	bf f9 03 00 00       	mov    edi,0x3f9
c0007aec:	56                   	push   esi
c0007aed:	31 f6                	xor    esi,esi
c0007aef:	53                   	push   ebx
c0007af0:	89 fa                	mov    edx,edi
c0007af2:	83 ec 2c             	sub    esp,0x2c
c0007af5:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007afa:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007aff:	89 f0                	mov    eax,esi
c0007b01:	ee                   	out    dx,al
c0007b02:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b07:	b0 80                	mov    al,0x80
c0007b09:	89 da                	mov    edx,ebx
c0007b0b:	ee                   	out    dx,al
c0007b0c:	b1 03                	mov    cl,0x3
c0007b0e:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b13:	88 c8                	mov    al,cl
c0007b15:	ee                   	out    dx,al
c0007b16:	89 f0                	mov    eax,esi
c0007b18:	89 fa                	mov    edx,edi
c0007b1a:	ee                   	out    dx,al
c0007b1b:	88 c8                	mov    al,cl
c0007b1d:	89 da                	mov    edx,ebx
c0007b1f:	ee                   	out    dx,al
c0007b20:	b0 c7                	mov    al,0xc7
c0007b22:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b27:	ee                   	out    dx,al
c0007b28:	b0 0b                	mov    al,0xb
c0007b2a:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b2f:	ee                   	out    dx,al
c0007b30:	68 50 fb 01 c0       	push   0xc001fb50
c0007b35:	e8 19 2e 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0007b3a:	e8 0e 86 00 00       	call   c001014d <KeDisplaySplashScreen()>
c0007b3f:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b44:	05 ff 0f 00 00       	add    eax,0xfff
c0007b49:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b51:	e8 a9 03 00 00       	call   c0007eff <Phys::physicalMemorySetup(unsigned int)>
c0007b56:	e8 74 1c 00 00       	call   c00097cf <Virt::virtualMemorySetup()>
c0007b5b:	58                   	pop    eax
c0007b5c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b60:	53                   	push   ebx
c0007b61:	e8 3c 1f 00 00       	call   c0009aa2 <VAS::VAS()>
c0007b66:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b6c:	e8 79 6c 01 00       	call   c001e7ea <_init>
c0007b71:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b78:	e8 0f ff ff ff       	call   c0007a8c <malloc>
c0007b7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b80:	89 c6                	mov    esi,eax
c0007b82:	e8 4d f2 ff ff       	call   c0006dd4 <Computer::Computer()>
c0007b87:	6a 00                	push   0x0
c0007b89:	6a 00                	push   0x0
c0007b8b:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007b91:	6a 00                	push   0x0
c0007b93:	56                   	push   esi
c0007b94:	e8 01 f6 ff ff       	call   c000719a <Computer::open(int, int, void*)>
c0007b99:	83 c4 14             	add    esp,0x14
c0007b9c:	53                   	push   ebx
c0007b9d:	e8 ca 1f 00 00       	call   c0009b6c <VAS::~VAS()>
c0007ba2:	83 c4 30             	add    esp,0x30
c0007ba5:	5b                   	pop    ebx
c0007ba6:	5e                   	pop    esi
c0007ba7:	5f                   	pop    edi
c0007ba8:	c3                   	ret    

c0007ba9 <Phys::allocateDMA(unsigned long)>:
c0007ba9:	55                   	push   ebp
c0007baa:	31 ed                	xor    ebp,ebp
c0007bac:	57                   	push   edi
c0007bad:	56                   	push   esi
c0007bae:	53                   	push   ebx
c0007baf:	31 db                	xor    ebx,ebx
c0007bb1:	83 ec 1c             	sub    esp,0x1c
c0007bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bc0:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bc6:	31 c0                	xor    eax,eax
c0007bc8:	c1 ef 0c             	shr    edi,0xc
c0007bcb:	eb 1b                	jmp    c0007be8 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bcd:	85 c0                	test   eax,eax
c0007bcf:	75 06                	jne    c0007bd7 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bd1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bd5:	89 dd                	mov    ebp,ebx
c0007bd7:	8d 70 01             	lea    esi,[eax+0x1]
c0007bda:	39 f7                	cmp    edi,esi
c0007bdc:	74 37                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bde:	89 f0                	mov    eax,esi
c0007be0:	83 c3 01             	add    ebx,0x1
c0007be3:	83 fb 0f             	cmp    ebx,0xf
c0007be6:	7f 13                	jg     c0007bfb <Phys::allocateDMA(unsigned long)+0x52>
c0007be8:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007bef:	74 dc                	je     c0007bcd <Phys::allocateDMA(unsigned long)+0x24>
c0007bf1:	31 c0                	xor    eax,eax
c0007bf3:	83 c3 01             	add    ebx,0x1
c0007bf6:	83 fb 0f             	cmp    ebx,0xf
c0007bf9:	7e ed                	jle    c0007be8 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	83 ec 0c             	sub    esp,0xc
c0007bfe:	68 68 fb 01 c0       	push   0xc001fb68
c0007c03:	e8 37 8c 00 00       	call   c001083f <KePanic(char const*)>
c0007c08:	83 c4 10             	add    esp,0x10
c0007c0b:	31 c0                	xor    eax,eax
c0007c0d:	83 c4 1c             	add    esp,0x1c
c0007c10:	5b                   	pop    ebx
c0007c11:	5e                   	pop    esi
c0007c12:	5f                   	pop    edi
c0007c13:	5d                   	pop    ebp
c0007c14:	c3                   	ret    
c0007c15:	89 e9                	mov    ecx,ebp
c0007c17:	c1 f9 04             	sar    ecx,0x4
c0007c1a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c1e:	8d 4c 2f ff          	lea    ecx,[edi+ebp*1-0x1]
c0007c22:	89 ca                	mov    edx,ecx
c0007c24:	c1 fa 1f             	sar    edx,0x1f
c0007c27:	83 e2 0f             	and    edx,0xf
c0007c2a:	01 ca                	add    edx,ecx
c0007c2c:	c1 fa 04             	sar    edx,0x4
c0007c2f:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c33:	74 08                	je     c0007c3d <Phys::allocateDMA(unsigned long)+0x94>
c0007c35:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	eb b6                	jmp    c0007bf3 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c3d:	85 ff                	test   edi,edi
c0007c3f:	74 17                	je     c0007c58 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c41:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c47:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c4e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c51:	83 c2 01             	add    edx,0x1
c0007c54:	39 d0                	cmp    eax,edx
c0007c56:	75 f6                	jne    c0007c4e <Phys::allocateDMA(unsigned long)+0xa5>
c0007c58:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c61:	01 f8                	add    eax,edi
c0007c63:	85 d2                	test   edx,edx
c0007c65:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c6a:	74 17                	je     c0007c83 <Phys::allocateDMA(unsigned long)+0xda>
c0007c6c:	83 ec 0c             	sub    esp,0xc
c0007c6f:	68 68 fb 01 c0       	push   0xc001fb68
c0007c74:	e8 c6 8b 00 00       	call   c001083f <KePanic(char const*)>
c0007c79:	83 c4 10             	add    esp,0x10
c0007c7c:	89 f0                	mov    eax,esi
c0007c7e:	e9 5d ff ff ff       	jmp    c0007be0 <Phys::allocateDMA(unsigned long)+0x37>
c0007c83:	c1 e5 0c             	shl    ebp,0xc
c0007c86:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007c8c:	e9 7c ff ff ff       	jmp    c0007c0d <Phys::allocateDMA(unsigned long)+0x64>

c0007c91 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c95:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c9b:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007ca0:	c1 ea 0c             	shr    edx,0xc
c0007ca3:	29 d0                	sub    eax,edx
c0007ca5:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cae:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cb3:	c1 e8 0c             	shr    eax,0xc
c0007cb6:	85 d2                	test   edx,edx
c0007cb8:	74 11                	je     c0007ccb <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cba:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007cbf:	01 c2                	add    edx,eax
c0007cc1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cc4:	83 c0 01             	add    eax,0x1
c0007cc7:	39 d0                	cmp    eax,edx
c0007cc9:	75 f6                	jne    c0007cc1 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007ccb:	c3                   	ret    

c0007ccc <Phys::setPageState(unsigned long, bool)>:
c0007ccc:	57                   	push   edi
c0007ccd:	56                   	push   esi
c0007cce:	8b 35 10 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e10
c0007cd4:	53                   	push   ebx
c0007cd5:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007cda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007cde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ce2:	89 ca                	mov    edx,ecx
c0007ce4:	83 e1 07             	and    ecx,0x7
c0007ce7:	c1 ea 03             	shr    edx,0x3
c0007cea:	01 d6                	add    esi,edx
c0007cec:	d3 c3                	rol    ebx,cl
c0007cee:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007cf1:	21 fb                	and    ebx,edi
c0007cf3:	88 1e                	mov    BYTE PTR [esi],bl
c0007cf5:	8b 1d 10 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021e10
c0007cfb:	01 da                	add    edx,ebx
c0007cfd:	0f b6 c0             	movzx  eax,al
c0007d00:	d3 e0                	shl    eax,cl
c0007d02:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d04:	09 c8                	or     eax,ecx
c0007d06:	88 02                	mov    BYTE PTR [edx],al
c0007d08:	5b                   	pop    ebx
c0007d09:	5e                   	pop    esi
c0007d0a:	5f                   	pop    edi
c0007d0b:	c3                   	ret    

c0007d0c <Phys::getPageState(unsigned long)>:
c0007d0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d10:	8b 15 10 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e10
c0007d16:	89 c8                	mov    eax,ecx
c0007d18:	83 e1 07             	and    ecx,0x7
c0007d1b:	c1 e8 03             	shr    eax,0x3
c0007d1e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d22:	d3 f8                	sar    eax,cl
c0007d24:	83 e0 01             	and    eax,0x1
c0007d27:	c3                   	ret    

c0007d28 <Phys::freePage(unsigned long)>:
c0007d28:	53                   	push   ebx
c0007d29:	83 ec 08             	sub    esp,0x8
c0007d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d30:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d36:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d3c:	76 41                	jbe    c0007d7f <Phys::freePage(unsigned long)+0x57>
c0007d3e:	c1 e8 0c             	shr    eax,0xc
c0007d41:	50                   	push   eax
c0007d42:	89 c3                	mov    ebx,eax
c0007d44:	e8 c3 ff ff ff       	call   c0007d0c <Phys::getPageState(unsigned long)>
c0007d49:	5a                   	pop    edx
c0007d4a:	84 c0                	test   al,al
c0007d4c:	74 20                	je     c0007d6e <Phys::freePage(unsigned long)+0x46>
c0007d4e:	83 ec 08             	sub    esp,0x8
c0007d51:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d56:	83 e8 01             	sub    eax,0x1
c0007d59:	6a 00                	push   0x0
c0007d5b:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d60:	53                   	push   ebx
c0007d61:	e8 66 ff ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0007d66:	83 c4 10             	add    esp,0x10
c0007d69:	83 c4 08             	add    esp,0x8
c0007d6c:	5b                   	pop    ebx
c0007d6d:	c3                   	ret    
c0007d6e:	c7 44 24 10 0d fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc0d
c0007d76:	83 c4 08             	add    esp,0x8
c0007d79:	5b                   	pop    ebx
c0007d7a:	e9 c0 8a 00 00       	jmp    c001083f <KePanic(char const*)>
c0007d7f:	68 00 10 00 00       	push   0x1000
c0007d84:	50                   	push   eax
c0007d85:	e8 07 ff ff ff       	call   c0007c91 <Phys::freeDMA(unsigned long, unsigned long)>
c0007d8a:	59                   	pop    ecx
c0007d8b:	5b                   	pop    ebx
c0007d8c:	83 c4 08             	add    esp,0x8
c0007d8f:	5b                   	pop    ebx
c0007d90:	c3                   	ret    

c0007d91 <Phys::allocatePage()>:
c0007d91:	56                   	push   esi
c0007d92:	53                   	push   ebx
c0007d93:	83 ec 14             	sub    esp,0x14
c0007d96:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007d9c:	89 f3                	mov    ebx,esi
c0007d9e:	eb 0a                	jmp    c0007daa <Phys::allocatePage()+0x19>
c0007da0:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007da6:	39 de                	cmp    esi,ebx
c0007da8:	74 26                	je     c0007dd0 <Phys::allocatePage()+0x3f>
c0007daa:	53                   	push   ebx
c0007dab:	e8 5c ff ff ff       	call   c0007d0c <Phys::getPageState(unsigned long)>
c0007db0:	5a                   	pop    edx
c0007db1:	84 c0                	test   al,al
c0007db3:	74 67                	je     c0007e1c <Phys::allocatePage()+0x8b>
c0007db5:	83 c3 01             	add    ebx,0x1
c0007db8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dbe:	75 e0                	jne    c0007da0 <Phys::allocatePage()+0xf>
c0007dc0:	31 db                	xor    ebx,ebx
c0007dc2:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dcc:	39 de                	cmp    esi,ebx
c0007dce:	75 da                	jne    c0007daa <Phys::allocatePage()+0x19>
c0007dd0:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007dd5:	83 ec 0c             	sub    esp,0xc
c0007dd8:	83 f0 01             	xor    eax,0x1
c0007ddb:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007de0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007de5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007de8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007dee:	50                   	push   eax
c0007def:	e8 32 28 00 00       	call   c000a626 <VAS::scanForEviction()>
c0007df4:	83 c4 10             	add    esp,0x10
c0007df7:	85 c0                	test   eax,eax
c0007df9:	75 48                	jne    c0007e43 <Phys::allocatePage()+0xb2>
c0007dfb:	83 ec 0c             	sub    esp,0xc
c0007dfe:	68 90 fb 01 c0       	push   0xc001fb90
c0007e03:	e8 37 8a 00 00       	call   c001083f <KePanic(char const*)>
c0007e08:	83 c4 10             	add    esp,0x10
c0007e0b:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e11:	53                   	push   ebx
c0007e12:	e8 f5 fe ff ff       	call   c0007d0c <Phys::getPageState(unsigned long)>
c0007e17:	5a                   	pop    edx
c0007e18:	84 c0                	test   al,al
c0007e1a:	75 99                	jne    c0007db5 <Phys::allocatePage()+0x24>
c0007e1c:	6a 01                	push   0x1
c0007e1e:	53                   	push   ebx
c0007e1f:	e8 a8 fe ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0007e24:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e2a:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e2f:	83 c2 01             	add    edx,0x1
c0007e32:	59                   	pop    ecx
c0007e33:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e39:	5b                   	pop    ebx
c0007e3a:	c1 e0 0c             	shl    eax,0xc
c0007e3d:	83 c4 14             	add    esp,0x14
c0007e40:	5b                   	pop    ebx
c0007e41:	5e                   	pop    esi
c0007e42:	c3                   	ret    
c0007e43:	83 ec 08             	sub    esp,0x8
c0007e46:	89 c2                	mov    edx,eax
c0007e48:	c1 ea 0c             	shr    edx,0xc
c0007e4b:	6a 01                	push   0x1
c0007e4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e51:	52                   	push   edx
c0007e52:	e8 75 fe ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0007e57:	83 c4 10             	add    esp,0x10
c0007e5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e5e:	eb dd                	jmp    c0007e3d <Phys::allocatePage()+0xac>

c0007e60 <Phys::allocateContiguousPages(int)>:
c0007e60:	57                   	push   edi
c0007e61:	56                   	push   esi
c0007e62:	53                   	push   ebx
c0007e63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e67:	fa                   	cli    
c0007e68:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e6d:	31 db                	xor    ebx,ebx
c0007e6f:	83 c0 01             	add    eax,0x1
c0007e72:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e77:	85 db                	test   ebx,ebx
c0007e79:	75 11                	jne    c0007e8c <Phys::allocateContiguousPages(int)+0x2c>
c0007e7b:	e8 11 ff ff ff       	call   c0007d91 <Phys::allocatePage()>
c0007e80:	83 fe 01             	cmp    esi,0x1
c0007e83:	89 c7                	mov    edi,eax
c0007e85:	74 21                	je     c0007ea8 <Phys::allocateContiguousPages(int)+0x48>
c0007e87:	bb 01 00 00 00       	mov    ebx,0x1
c0007e8c:	e8 00 ff ff ff       	call   c0007d91 <Phys::allocatePage()>
c0007e91:	89 da                	mov    edx,ebx
c0007e93:	c1 e2 0c             	shl    edx,0xc
c0007e96:	01 fa                	add    edx,edi
c0007e98:	39 c2                	cmp    edx,eax
c0007e9a:	74 22                	je     c0007ebe <Phys::allocateContiguousPages(int)+0x5e>
c0007e9c:	bb 01 00 00 00       	mov    ebx,0x1
c0007ea1:	89 c7                	mov    edi,eax
c0007ea3:	83 fe 01             	cmp    esi,0x1
c0007ea6:	75 e4                	jne    c0007e8c <Phys::allocateContiguousPages(int)+0x2c>
c0007ea8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ead:	83 e8 01             	sub    eax,0x1
c0007eb0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007eb5:	75 01                	jne    c0007eb8 <Phys::allocateContiguousPages(int)+0x58>
c0007eb7:	fb                   	sti    
c0007eb8:	5b                   	pop    ebx
c0007eb9:	89 f8                	mov    eax,edi
c0007ebb:	5e                   	pop    esi
c0007ebc:	5f                   	pop    edi
c0007ebd:	c3                   	ret    
c0007ebe:	83 c3 01             	add    ebx,0x1
c0007ec1:	39 f3                	cmp    ebx,esi
c0007ec3:	75 b2                	jne    c0007e77 <Phys::allocateContiguousPages(int)+0x17>
c0007ec5:	eb e1                	jmp    c0007ea8 <Phys::allocateContiguousPages(int)+0x48>

c0007ec7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ec7:	56                   	push   esi
c0007ec8:	53                   	push   ebx
c0007ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007ecd:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ed3:	73 06                	jae    c0007edb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ed5:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007edb:	c1 eb 0c             	shr    ebx,0xc
c0007ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ee2:	c1 e8 0c             	shr    eax,0xc
c0007ee5:	39 d8                	cmp    eax,ebx
c0007ee7:	73 13                	jae    c0007efc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007ee9:	6a 00                	push   0x0
c0007eeb:	8d 70 01             	lea    esi,[eax+0x1]
c0007eee:	50                   	push   eax
c0007eef:	e8 d8 fd ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0007ef4:	5a                   	pop    edx
c0007ef5:	89 f0                	mov    eax,esi
c0007ef7:	59                   	pop    ecx
c0007ef8:	39 f3                	cmp    ebx,esi
c0007efa:	75 ed                	jne    c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007efc:	5b                   	pop    ebx
c0007efd:	5e                   	pop    esi
c0007efe:	c3                   	ret    

c0007eff <Phys::physicalMemorySetup(unsigned int)>:
c0007eff:	55                   	push   ebp
c0007f00:	57                   	push   edi
c0007f01:	56                   	push   esi
c0007f02:	53                   	push   ebx
c0007f03:	83 ec 40             	sub    esp,0x40
c0007f06:	6a 10                	push   0x10
c0007f08:	6a 00                	push   0x0
c0007f0a:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f0f:	e8 cc 85 ff ff       	call   c00004e0 <memset>
c0007f14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f18:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f1d:	05 00 10 00 00       	add    eax,0x1000
c0007f22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f26:	5b                   	pop    ebx
c0007f27:	5e                   	pop    esi
c0007f28:	31 db                	xor    ebx,ebx
c0007f2a:	50                   	push   eax
c0007f2b:	68 23 fc 01 c0       	push   0xc001fc23
c0007f30:	e8 1e 2a 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0007f35:	83 c4 10             	add    esp,0x10
c0007f38:	83 ec 08             	sub    esp,0x8
c0007f3b:	6a 01                	push   0x1
c0007f3d:	53                   	push   ebx
c0007f3e:	83 c3 01             	add    ebx,0x1
c0007f41:	e8 86 fd ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0007f46:	83 c4 10             	add    esp,0x10
c0007f49:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f4f:	75 e7                	jne    c0007f38 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f51:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f5c:	85 c0                	test   eax,eax
c0007f5e:	0f 84 61 01 00 00    	je     c00080c5 <Phys::physicalMemorySetup(unsigned int)+0x1c6>
c0007f64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f68:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f70:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f79:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007f81:	e9 80 00 00 00       	jmp    c0008006 <Phys::physicalMemorySetup(unsigned int)+0x107>
c0007f86:	ba 00 00 08 00       	mov    edx,0x80000
c0007f8b:	89 c1                	mov    ecx,eax
c0007f8d:	39 f2                	cmp    edx,esi
c0007f8f:	19 f9                	sbb    ecx,edi
c0007f91:	0f 82 c2 00 00 00    	jb     c0008059 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0007f97:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007f9a:	89 c5                	mov    ebp,eax
c0007f9c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007fa0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007fa3:	19 cd                	sbb    ebp,ecx
c0007fa5:	0f 83 b3 00 00 00    	jae    c000805e <Phys::physicalMemorySetup(unsigned int)+0x15f>
c0007fab:	89 d6                	mov    esi,edx
c0007fad:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fb2:	39 f2                	cmp    edx,esi
c0007fb4:	89 cf                	mov    edi,ecx
c0007fb6:	19 c8                	sbb    eax,ecx
c0007fb8:	73 07                	jae    c0007fc1 <Phys::physicalMemorySetup(unsigned int)+0xc2>
c0007fba:	be 00 00 0a 00       	mov    esi,0xa0000
c0007fbf:	31 ff                	xor    edi,edi
c0007fc1:	89 f2                	mov    edx,esi
c0007fc3:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007fc8:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007fce:	89 f9                	mov    ecx,edi
c0007fd0:	83 d1 ff             	adc    ecx,0xffffffff
c0007fd3:	39 d0                	cmp    eax,edx
c0007fd5:	b8 00 00 00 00       	mov    eax,0x0
c0007fda:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fde:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0007fe2:	19 c8                	sbb    eax,ecx
c0007fe4:	0f 82 ad 01 00 00    	jb     c0008197 <Phys::physicalMemorySetup(unsigned int)+0x298>
c0007fea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0007fee:	83 c3 18             	add    ebx,0x18
c0007ff1:	83 c6 01             	add    esi,0x1
c0007ff4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0007ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ffc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008000:	0f 84 cf 00 00 00    	je     c00080d5 <Phys::physicalMemorySetup(unsigned int)+0x1d6>
c0008006:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008008:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000800b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000800e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008012:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008015:	01 f0                	add    eax,esi
c0008017:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000801a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000801e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008022:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0008026:	11 fa                	adc    edx,edi
c0008028:	55                   	push   ebp
c0008029:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000802d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008031:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0008035:	51                   	push   ecx
c0008036:	56                   	push   esi
c0008037:	68 c0 fb 01 c0       	push   0xc001fbc0
c000803c:	e8 12 29 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0008041:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008045:	83 c4 10             	add    esp,0x10
c0008048:	09 f8                	or     eax,edi
c000804a:	0f 85 85 00 00 00    	jne    c00080d5 <Phys::physicalMemorySetup(unsigned int)+0x1d6>
c0008050:	83 fd 01             	cmp    ebp,0x1
c0008053:	0f 84 2d ff ff ff    	je     c0007f86 <Phys::physicalMemorySetup(unsigned int)+0x87>
c0008059:	83 fd 01             	cmp    ebp,0x1
c000805c:	75 8c                	jne    c0007fea <Phys::physicalMemorySetup(unsigned int)+0xeb>
c000805e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008061:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008065:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008069:	39 c8                	cmp    eax,ecx
c000806b:	89 d0                	mov    eax,edx
c000806d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008071:	0f 82 73 ff ff ff    	jb     c0007fea <Phys::physicalMemorySetup(unsigned int)+0xeb>
c0008077:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000807c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008080:	39 d0                	cmp    eax,edx
c0008082:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008086:	b8 00 00 00 00       	mov    eax,0x0
c000808b:	19 c8                	sbb    eax,ecx
c000808d:	0f 83 57 ff ff ff    	jae    c0007fea <Phys::physicalMemorySetup(unsigned int)+0xeb>
c0008093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008097:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000809b:	39 c6                	cmp    esi,eax
c000809d:	19 d7                	sbb    edi,edx
c000809f:	0f 83 fe 00 00 00    	jae    c00081a3 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00080a5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00080a8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00080ac:	29 c7                	sub    edi,eax
c00080ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00080b2:	19 d5                	sbb    ebp,edx
c00080b4:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c00080b8:	89 6c 24 14          	mov    DWORD PTR [esp+0x14],ebp
c00080bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00080c0:	e9 de 00 00 00       	jmp    c00081a3 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00080c5:	83 ec 0c             	sub    esp,0xc
c00080c8:	68 3b fc 01 c0       	push   0xc001fc3b
c00080cd:	e8 6d 87 00 00       	call   c001083f <KePanic(char const*)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	83 ec 08             	sub    esp,0x8
c00080d8:	bb 60 00 00 00       	mov    ebx,0x60
c00080dd:	6a 00                	push   0x0
c00080df:	6a 06                	push   0x6
c00080e1:	e8 e6 fb ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c00080e6:	58                   	pop    eax
c00080e7:	5a                   	pop    edx
c00080e8:	6a 00                	push   0x0
c00080ea:	6a 07                	push   0x7
c00080ec:	e8 db fb ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c00080f1:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00080f7:	83 c4 10             	add    esp,0x10
c00080fa:	83 c1 02             	add    ecx,0x2
c00080fd:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008103:	83 ec 08             	sub    esp,0x8
c0008106:	6a 00                	push   0x0
c0008108:	53                   	push   ebx
c0008109:	83 c3 01             	add    ebx,0x1
c000810c:	e8 bb fb ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0008111:	83 c4 10             	add    esp,0x10
c0008114:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000811a:	75 e7                	jne    c0008103 <Phys::physicalMemorySetup(unsigned int)+0x204>
c000811c:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008121:	bb 40 01 00 00       	mov    ebx,0x140
c0008126:	83 c0 20             	add    eax,0x20
c0008129:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000812e:	eb 26                	jmp    c0008156 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	6a 00                	push   0x0
c0008135:	53                   	push   ebx
c0008136:	e8 91 fb ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c000813b:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008140:	83 c3 01             	add    ebx,0x1
c0008143:	83 c0 01             	add    eax,0x1
c0008146:	83 c4 10             	add    esp,0x10
c0008149:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000814e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008154:	74 07                	je     c000815d <Phys::physicalMemorySetup(unsigned int)+0x25e>
c0008156:	3d ff 03 00 00       	cmp    eax,0x3ff
c000815b:	7e d3                	jle    c0008130 <Phys::physicalMemorySetup(unsigned int)+0x231>
c000815d:	bb d0 01 00 00       	mov    ebx,0x1d0
c0008162:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008167:	7f 26                	jg     c000818f <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008169:	83 ec 08             	sub    esp,0x8
c000816c:	6a 00                	push   0x0
c000816e:	53                   	push   ebx
c000816f:	e8 58 fb ff ff       	call   c0007ccc <Phys::setPageState(unsigned long, bool)>
c0008174:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008179:	83 c3 01             	add    ebx,0x1
c000817c:	83 c0 01             	add    eax,0x1
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008187:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000818d:	75 d3                	jne    c0008162 <Phys::physicalMemorySetup(unsigned int)+0x263>
c000818f:	83 c4 3c             	add    esp,0x3c
c0008192:	5b                   	pop    ebx
c0008193:	5e                   	pop    esi
c0008194:	5f                   	pop    edi
c0008195:	5d                   	pop    ebp
c0008196:	c3                   	ret    
c0008197:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c000819b:	c7 44 24 18 00 00 08 00 	mov    DWORD PTR [esp+0x18],0x80000
c00081a3:	83 ec 04             	sub    esp,0x4
c00081a6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00081aa:	56                   	push   esi
c00081ab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00081af:	57                   	push   edi
c00081b0:	68 e4 fb 01 c0       	push   0xc001fbe4
c00081b5:	e8 99 27 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00081ba:	5d                   	pop    ebp
c00081bb:	58                   	pop    eax
c00081bc:	56                   	push   esi
c00081bd:	57                   	push   edi
c00081be:	e8 04 fd ff ff       	call   c0007ec7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00081c3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cb:	0f ac d0 0c          	shrd   eax,edx,0xc
c00081cf:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c00081d5:	83 c4 0c             	add    esp,0xc
c00081d8:	01 d0                	add    eax,edx
c00081da:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00081e6:	52                   	push   edx
c00081e7:	50                   	push   eax
c00081e8:	68 49 fc 01 c0       	push   0xc001fc49
c00081ed:	e8 61 27 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00081f2:	83 c4 10             	add    esp,0x10
c00081f5:	e9 f0 fd ff ff       	jmp    c0007fea <Phys::physicalMemorySetup(unsigned int)+0xeb>

c00081fa <Pipe::isAtty()>:
c00081fa:	31 c0                	xor    eax,eax
c00081fc:	c3                   	ret    
c00081fd:	90                   	nop

c00081fe <Pipe::~Pipe()>:
c00081fe:	83 ec 0c             	sub    esp,0xc
c0008201:	ba a8 fc 01 c0       	mov    edx,0xc001fca8
c0008206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000820a:	89 10                	mov    DWORD PTR [eax],edx
c000820c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	50                   	push   eax
c0008214:	e8 6f 11 00 00       	call   c0009388 <UnixFile::~UnixFile()>
c0008219:	83 c4 10             	add    esp,0x10
c000821c:	90                   	nop
c000821d:	83 c4 0c             	add    esp,0xc
c0008220:	c3                   	ret    
c0008221:	90                   	nop

c0008222 <Pipe::~Pipe()>:
c0008222:	83 ec 0c             	sub    esp,0xc
c0008225:	83 ec 0c             	sub    esp,0xc
c0008228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000822c:	e8 cd ff ff ff       	call   c00081fe <Pipe::~Pipe()>
c0008231:	83 c4 10             	add    esp,0x10
c0008234:	83 ec 08             	sub    esp,0x8
c0008237:	6a 20                	push   0x20
c0008239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823d:	e8 15 26 00 00       	call   c000a857 <operator delete(void*, unsigned long)>
c0008242:	83 c4 10             	add    esp,0x10
c0008245:	83 c4 0c             	add    esp,0xc
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <Pipe::write(unsigned long long, void*, int*)>:
c000824a:	55                   	push   ebp
c000824b:	57                   	push   edi
c000824c:	56                   	push   esi
c000824d:	53                   	push   ebx
c000824e:	83 ec 1c             	sub    esp,0x1c
c0008251:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008255:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008259:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000825d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008261:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008264:	89 04 24             	mov    DWORD PTR [esp],eax
c0008267:	89 d6                	mov    esi,edx
c0008269:	89 d7                	mov    edi,edx
c000826b:	c1 ff 1f             	sar    edi,0x1f
c000826e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008271:	03 34 24             	add    esi,DWORD PTR [esp]
c0008274:	89 d8                	mov    eax,ebx
c0008276:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000827a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000827e:	c1 f8 1f             	sar    eax,0x1f
c0008281:	39 f3                	cmp    ebx,esi
c0008283:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000828b:	19 f8                	sbb    eax,edi
c000828d:	b8 01 00 00 00       	mov    eax,0x1
c0008292:	72 6e                	jb     c0008302 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008294:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008297:	01 d0                	add    eax,edx
c0008299:	99                   	cdq    
c000829a:	f7 fb                	idiv   ebx
c000829c:	29 d3                	sub    ebx,edx
c000829e:	89 d7                	mov    edi,edx
c00082a0:	89 de                	mov    esi,ebx
c00082a2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082a5:	c1 fb 1f             	sar    ebx,0x1f
c00082a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ac:	39 f2                	cmp    edx,esi
c00082ae:	19 d8                	sbb    eax,ebx
c00082b0:	b8 00 00 00 00       	mov    eax,0x0
c00082b5:	72 04                	jb     c00082bb <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082b7:	89 d0                	mov    eax,edx
c00082b9:	29 f0                	sub    eax,esi
c00082bb:	89 d3                	mov    ebx,edx
c00082bd:	29 c3                	sub    ebx,eax
c00082bf:	74 0b                	je     c00082cc <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082c1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082c4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082c8:	89 d9                	mov    ecx,ebx
c00082ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082cc:	85 c0                	test   eax,eax
c00082ce:	74 0d                	je     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082d0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082d4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082d7:	89 de                	mov    esi,ebx
c00082d9:	89 c1                	mov    ecx,eax
c00082db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082dd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082e0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082e5:	75 10                	jne    c00082f7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082e7:	83 ec 0c             	sub    esp,0xc
c00082ea:	68 65 fc 01 c0       	push   0xc001fc65
c00082ef:	e8 4b 85 00 00       	call   c001083f <KePanic(char const*)>
c00082f4:	83 c4 10             	add    esp,0x10
c00082f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082fb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00082fe:	89 08                	mov    DWORD PTR [eax],ecx
c0008300:	31 c0                	xor    eax,eax
c0008302:	83 c4 1c             	add    esp,0x1c
c0008305:	5b                   	pop    ebx
c0008306:	5e                   	pop    esi
c0008307:	5f                   	pop    edi
c0008308:	5d                   	pop    ebp
c0008309:	c3                   	ret    

c000830a <Pipe::read(unsigned long long, void*, int*)>:
c000830a:	55                   	push   ebp
c000830b:	57                   	push   edi
c000830c:	56                   	push   esi
c000830d:	53                   	push   ebx
c000830e:	83 ec 1c             	sub    esp,0x1c
c0008311:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008315:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008319:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000831d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008320:	89 c8                	mov    eax,ecx
c0008322:	99                   	cdq    
c0008323:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008327:	74 24                	je     c000834d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008329:	39 f9                	cmp    ecx,edi
c000832b:	89 d1                	mov    ecx,edx
c000832d:	19 f1                	sbb    ecx,esi
c000832f:	73 1c                	jae    c000834d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008331:	fa                   	cli    
c0008332:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008338:	e8 03 cd 00 00       	call   c0015040 <schedule()>
c000833d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0008342:	48                   	dec    eax
c0008343:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008348:	75 d3                	jne    c000831d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000834a:	fb                   	sti    
c000834b:	eb d0                	jmp    c000831d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000834d:	39 f8                	cmp    eax,edi
c000834f:	89 d1                	mov    ecx,edx
c0008351:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008354:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008358:	19 f1                	sbb    ecx,esi
c000835a:	73 07                	jae    c0008363 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000835c:	89 04 24             	mov    DWORD PTR [esp],eax
c000835f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008363:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008366:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008369:	29 f7                	sub    edi,esi
c000836b:	89 f8                	mov    eax,edi
c000836d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008371:	99                   	cdq    
c0008372:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008375:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008379:	19 d0                	sbb    eax,edx
c000837b:	73 07                	jae    c0008384 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000837d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008380:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008384:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008387:	89 ea                	mov    edx,ebp
c0008389:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000838d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008392:	74 0d                	je     c00083a1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008394:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008397:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000839b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000839f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083a1:	85 d2                	test   edx,edx
c00083a3:	74 11                	je     c00083b6 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ac:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083b0:	89 d1                	mov    ecx,edx
c00083b2:	89 c7                	mov    edi,eax
c00083b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083b9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083bc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083bf:	99                   	cdq    
c00083c0:	03 04 24             	add    eax,DWORD PTR [esp]
c00083c3:	89 f7                	mov    edi,esi
c00083c5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083c9:	c1 ff 1f             	sar    edi,0x1f
c00083cc:	57                   	push   edi
c00083cd:	56                   	push   esi
c00083ce:	52                   	push   edx
c00083cf:	50                   	push   eax
c00083d0:	e8 fb 62 01 00       	call   c001e6d0 <__umoddi3>
c00083d5:	83 c4 10             	add    esp,0x10
c00083d8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083db:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083e0:	75 10                	jne    c00083f2 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083e2:	83 ec 0c             	sub    esp,0xc
c00083e5:	68 82 fc 01 c0       	push   0xc001fc82
c00083ea:	e8 50 84 00 00       	call   c001083f <KePanic(char const*)>
c00083ef:	83 c4 10             	add    esp,0x10
c00083f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00083f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00083f9:	89 10                	mov    DWORD PTR [eax],edx
c00083fb:	83 c4 1c             	add    esp,0x1c
c00083fe:	31 c0                	xor    eax,eax
c0008400:	5b                   	pop    ebx
c0008401:	5e                   	pop    esi
c0008402:	5f                   	pop    edi
c0008403:	5d                   	pop    ebp
c0008404:	c3                   	ret    
c0008405:	90                   	nop

c0008406 <Pipe::Pipe(int)>:
c0008406:	83 ec 0c             	sub    esp,0xc
c0008409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000840d:	83 ec 08             	sub    esp,0x8
c0008410:	6a 00                	push   0x0
c0008412:	50                   	push   eax
c0008413:	e8 8a 0d 00 00       	call   c00091a2 <UnixFile::UnixFile(int)>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	ba a8 fc 01 c0       	mov    edx,0xc001fca8
c0008420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008424:	89 10                	mov    DWORD PTR [eax],edx
c0008426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000842e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008435:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000843c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008440:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844b:	83 ec 0c             	sub    esp,0xc
c000844e:	50                   	push   eax
c000844f:	e8 38 f6 ff ff       	call   c0007a8c <malloc>
c0008454:	83 c4 10             	add    esp,0x10
c0008457:	89 c2                	mov    edx,eax
c0008459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008464:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008468:	90                   	nop
c0008469:	83 c4 0c             	add    esp,0xc
c000846c:	c3                   	ret    
c000846d:	90                   	nop

c000846e <VgaText::isAtty()>:
c000846e:	b0 01                	mov    al,0x1
c0008470:	c3                   	ret    
c0008471:	90                   	nop

c0008472 <VgaText::~VgaText()>:
c0008472:	83 ec 0c             	sub    esp,0xc
c0008475:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c000847a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847e:	89 10                	mov    DWORD PTR [eax],edx
c0008480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008484:	83 ec 0c             	sub    esp,0xc
c0008487:	50                   	push   eax
c0008488:	e8 fb 0e 00 00       	call   c0009388 <UnixFile::~UnixFile()>
c000848d:	83 c4 10             	add    esp,0x10
c0008490:	90                   	nop
c0008491:	83 c4 0c             	add    esp,0xc
c0008494:	c3                   	ret    
c0008495:	90                   	nop

c0008496 <VgaText::~VgaText()>:
c0008496:	83 ec 0c             	sub    esp,0xc
c0008499:	83 ec 0c             	sub    esp,0xc
c000849c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a0:	e8 cd ff ff ff       	call   c0008472 <VgaText::~VgaText()>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	83 ec 08             	sub    esp,0x8
c00084ab:	68 84 01 00 00       	push   0x184
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9e 23 00 00       	call   c000a857 <operator delete(void*, unsigned long)>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	83 c4 0c             	add    esp,0xc
c00084bf:	c3                   	ret    

c00084c0 <VgaText::read(unsigned long long, void*, int*)>:
c00084c0:	83 ec 10             	sub    esp,0x10
c00084c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084c7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084cf:	e8 9a 47 00 00       	call   c000cc6e <readKeyboard(VgaText*, char*, unsigned long)>
c00084d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d8:	89 02                	mov    DWORD PTR [edx],eax
c00084da:	31 c0                	xor    eax,eax
c00084dc:	83 c4 1c             	add    esp,0x1c
c00084df:	c3                   	ret    

c00084e0 <setTerminalScrollLock(bool)>:
c00084e0:	c3                   	ret    

c00084e1 <doTerminalCycle()>:
c00084e1:	c3                   	ret    

c00084e2 <addToTerminalCycle(VgaText*)>:
c00084e2:	c3                   	ret    

c00084e3 <scrollTerminalScrollLock(int)>:
c00084e3:	c3                   	ret    

c00084e4 <VgaText::updateTitle()>:
c00084e4:	c3                   	ret    
c00084e5:	90                   	nop

c00084e6 <VgaText::load()>:
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::updateCursor()>:
c00084e8:	83 ec 14             	sub    esp,0x14
c00084eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ef:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084f2:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084f5:	e8 5a f8 00 00       	call   c0017d54 <HalConsoleCursorUpdate(int, int)>
c00084fa:	83 c4 1c             	add    esp,0x1c
c00084fd:	c3                   	ret    

c00084fe <VgaText::doANSI_SGR(int)>:
c00084fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008506:	85 d2                	test   edx,edx
c0008508:	75 0b                	jne    c0008515 <VgaText::doANSI_SGR(int)+0x17>
c000850a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000850d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008510:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008513:	eb 59                	jmp    c000856e <VgaText::doANSI_SGR(int)+0x70>
c0008515:	83 fa 07             	cmp    edx,0x7
c0008518:	75 0b                	jne    c0008525 <VgaText::doANSI_SGR(int)+0x27>
c000851a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000851d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008520:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008523:	eb 49                	jmp    c000856e <VgaText::doANSI_SGR(int)+0x70>
c0008525:	83 fa 1b             	cmp    edx,0x1b
c0008528:	74 e0                	je     c000850a <VgaText::doANSI_SGR(int)+0xc>
c000852a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000852d:	83 f9 07             	cmp    ecx,0x7
c0008530:	77 09                	ja     c000853b <VgaText::doANSI_SGR(int)+0x3d>
c0008532:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c0008539:	eb 20                	jmp    c000855b <VgaText::doANSI_SGR(int)+0x5d>
c000853b:	8d 4a d8             	lea    ecx,[edx-0x28]
c000853e:	83 f9 07             	cmp    ecx,0x7
c0008541:	77 09                	ja     c000854c <VgaText::doANSI_SGR(int)+0x4e>
c0008543:	8b 14 8d 40 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde1c0]
c000854a:	eb 22                	jmp    c000856e <VgaText::doANSI_SGR(int)+0x70>
c000854c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 0b                	ja     c000855f <VgaText::doANSI_SGR(int)+0x61>
c0008554:	8b 14 95 f8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde308]
c000855b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000855e:	c3                   	ret    
c000855f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008562:	83 f9 07             	cmp    ecx,0x7
c0008565:	77 0a                	ja     c0008571 <VgaText::doANSI_SGR(int)+0x73>
c0008567:	8b 14 95 d0 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde330]
c000856e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008571:	c3                   	ret    

c0008572 <VgaText::setDefaultBgColour(VgaColour)>:
c0008572:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008576:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000857a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000857d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008580:	c3                   	ret    
c0008581:	90                   	nop

c0008582 <VgaText::setDefaultFgColour(VgaColour)>:
c0008582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000858a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000858d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008590:	c3                   	ret    
c0008591:	90                   	nop

c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008592:	53                   	push   ebx
c0008593:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008597:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000859b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000859f:	51                   	push   ecx
c00085a0:	e8 cd ff ff ff       	call   c0008572 <VgaText::setDefaultBgColour(VgaColour)>
c00085a5:	58                   	pop    eax
c00085a6:	5a                   	pop    edx
c00085a7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085af:	5b                   	pop    ebx
c00085b0:	eb d0                	jmp    c0008582 <VgaText::setDefaultFgColour(VgaColour)>

c00085b2 <VgaText::setTitleTextColour(VgaColour)>:
c00085b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ba:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085bd:	c3                   	ret    

c00085be <VgaText::setTitleColour(VgaColour)>:
c00085be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085c9:	c3                   	ret    

c00085ca <VgaText::setTitle(char*)>:
c00085ca:	c3                   	ret    
c00085cb:	90                   	nop

c00085cc <VgaText::combineColours(unsigned char, unsigned char)>:
c00085cc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085d1:	c1 e2 04             	shl    edx,0x4
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	83 e0 0f             	and    eax,0xf
c00085db:	09 d0                	or     eax,edx
c00085dd:	c3                   	ret    

c00085de <VgaText::scrollScreen()>:
c00085de:	55                   	push   ebp
c00085df:	57                   	push   edi
c00085e0:	56                   	push   esi
c00085e1:	be 01 00 00 00       	mov    esi,0x1
c00085e6:	53                   	push   ebx
c00085e7:	83 ec 0c             	sub    esp,0xc
c00085ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085ee:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085f1:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00085f7:	31 ff                	xor    edi,edi
c00085f9:	01 e9                	add    ecx,ebp
c00085fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00085fd:	83 fe 18             	cmp    esi,0x18
c0008600:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008606:	75 20                	jne    c0008628 <VgaText::scrollScreen()+0x4a>
c0008608:	f7 c7 01 00 00 00    	test   edi,0x1
c000860e:	74 15                	je     c0008625 <VgaText::scrollScreen()+0x47>
c0008610:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008614:	50                   	push   eax
c0008615:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008619:	50                   	push   eax
c000861a:	e8 ad ff ff ff       	call   c00085cc <VgaText::combineColours(unsigned char, unsigned char)>
c000861f:	5a                   	pop    edx
c0008620:	5a                   	pop    edx
c0008621:	88 01                	mov    BYTE PTR [ecx],al
c0008623:	eb 03                	jmp    c0008628 <VgaText::scrollScreen()+0x4a>
c0008625:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008628:	47                   	inc    edi
c0008629:	41                   	inc    ecx
c000862a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008630:	75 c9                	jne    c00085fb <VgaText::scrollScreen()+0x1d>
c0008632:	46                   	inc    esi
c0008633:	83 fe 19             	cmp    esi,0x19
c0008636:	75 b9                	jne    c00085f1 <VgaText::scrollScreen()+0x13>
c0008638:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c000863e:	75 1f                	jne    c000865f <VgaText::scrollScreen()+0x81>
c0008640:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008644:	74 05                	je     c000864b <VgaText::scrollScreen()+0x6d>
c0008646:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008649:	eb 14                	jmp    c000865f <VgaText::scrollScreen()+0x81>
c000864b:	50                   	push   eax
c000864c:	50                   	push   eax
c000864d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008651:	50                   	push   eax
c0008652:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008656:	50                   	push   eax
c0008657:	e8 8c f5 00 00       	call   c0017be8 <HalConsoleScroll(int, int)>
c000865c:	83 c4 10             	add    esp,0x10
c000865f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008663:	83 c4 0c             	add    esp,0xc
c0008666:	5b                   	pop    ebx
c0008667:	5e                   	pop    esi
c0008668:	5f                   	pop    edi
c0008669:	5d                   	pop    ebp
c000866a:	e9 79 fe ff ff       	jmp    c00084e8 <VgaText::updateCursor()>
c000866f:	90                   	nop

c0008670 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008670:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008675:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000867a:	c1 e0 08             	shl    eax,0x8
c000867d:	09 d0                	or     eax,edx
c000867f:	c3                   	ret    

c0008680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008680:	55                   	push   ebp
c0008681:	57                   	push   edi
c0008682:	56                   	push   esi
c0008683:	53                   	push   ebx
c0008684:	83 ec 1c             	sub    esp,0x1c
c0008687:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000868b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000868f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008697:	0f b6 c3             	movzx  eax,bl
c000869a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000869e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086a2:	50                   	push   eax
c00086a3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086a8:	50                   	push   eax
c00086a9:	e8 1e ff ff ff       	call   c00085cc <VgaText::combineColours(unsigned char, unsigned char)>
c00086ae:	5a                   	pop    edx
c00086af:	59                   	pop    ecx
c00086b0:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086b5:	0f b6 c0             	movzx  eax,al
c00086b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086bc:	50                   	push   eax
c00086bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086c1:	e8 aa ff ff ff       	call   c0008670 <VgaText::combineCharAndColour(char, unsigned char)>
c00086c6:	5a                   	pop    edx
c00086c7:	6b d7 50             	imul   edx,edi,0x50
c00086ca:	01 f2                	add    edx,esi
c00086cc:	59                   	pop    ecx
c00086cd:	0f b7 d2             	movzx  edx,dx
c00086d0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086d3:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086d7:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086dd:	75 28                	jne    c0008707 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086e3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086ef:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086f3:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00086fb:	83 c4 1c             	add    esp,0x1c
c00086fe:	5b                   	pop    ebx
c00086ff:	5e                   	pop    esi
c0008700:	5f                   	pop    edi
c0008701:	5d                   	pop    ebp
c0008702:	e9 e9 f5 00 00       	jmp    c0017cf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008707:	83 c4 1c             	add    esp,0x1c
c000870a:	5b                   	pop    ebx
c000870b:	5e                   	pop    esi
c000870c:	5f                   	pop    edi
c000870d:	5d                   	pop    ebp
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <VgaText::getCursorX()>:
c0008710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008714:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008717:	c3                   	ret    

c0008718 <VgaText::getCursorY()>:
c0008718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000871c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000871f:	c3                   	ret    

c0008720 <VgaText::setCursor(int, int)>:
c0008720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008728:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000872b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000872f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008732:	e9 b1 fd ff ff       	jmp    c00084e8 <VgaText::updateCursor()>

c0008737 <setActiveTerminal(VgaText*)>:
c0008737:	53                   	push   ebx
c0008738:	83 ec 08             	sub    esp,0x8
c000873b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873f:	85 db                	test   ebx,ebx
c0008741:	75 11                	jne    c0008754 <setActiveTerminal(VgaText*)+0x1d>
c0008743:	c7 44 24 10 bc fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fcbc
c000874b:	83 c4 08             	add    esp,0x8
c000874e:	5b                   	pop    ebx
c000874f:	e9 eb 80 00 00       	jmp    c001083f <KePanic(char const*)>
c0008754:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008759:	85 c0                	test   eax,eax
c000875b:	74 0c                	je     c0008769 <setActiveTerminal(VgaText*)+0x32>
c000875d:	83 ec 0c             	sub    esp,0xc
c0008760:	50                   	push   eax
c0008761:	e8 82 fd ff ff       	call   c00084e8 <VgaText::updateCursor()>
c0008766:	83 c4 10             	add    esp,0x10
c0008769:	50                   	push   eax
c000876a:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008770:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008773:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008776:	53                   	push   ebx
c0008777:	e8 a4 ff ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c000877c:	83 c4 18             	add    esp,0x18
c000877f:	5b                   	pop    ebx
c0008780:	c3                   	ret    
c0008781:	90                   	nop

c0008782 <VgaText::clearScreen()>:
c0008782:	57                   	push   edi
c0008783:	56                   	push   esi
c0008784:	31 f6                	xor    esi,esi
c0008786:	53                   	push   ebx
c0008787:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000878b:	52                   	push   edx
c000878c:	6a 00                	push   0x0
c000878e:	6a 00                	push   0x0
c0008790:	53                   	push   ebx
c0008791:	e8 8a ff ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c0008796:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087a3:	7e 20                	jle    c00087c5 <VgaText::clearScreen()+0x43>
c00087a5:	31 ff                	xor    edi,edi
c00087a7:	50                   	push   eax
c00087a8:	50                   	push   eax
c00087a9:	56                   	push   esi
c00087aa:	57                   	push   edi
c00087ab:	47                   	inc    edi
c00087ac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087b2:	6a 20                	push   0x20
c00087b4:	53                   	push   ebx
c00087b5:	e8 c6 fe ff ff       	call   c0008680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087ba:	83 c4 20             	add    esp,0x20
c00087bd:	83 ff 50             	cmp    edi,0x50
c00087c0:	75 e5                	jne    c00087a7 <VgaText::clearScreen()+0x25>
c00087c2:	46                   	inc    esi
c00087c3:	eb db                	jmp    c00087a0 <VgaText::clearScreen()+0x1e>
c00087c5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087cc:	5b                   	pop    ebx
c00087cd:	5e                   	pop    esi
c00087ce:	5f                   	pop    edi
c00087cf:	c3                   	ret    

c00087d0 <VgaText::setCursorX(int)>:
c00087d0:	83 ec 10             	sub    esp,0x10
c00087d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087de:	50                   	push   eax
c00087df:	e8 3c ff ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c00087e4:	83 c4 1c             	add    esp,0x1c
c00087e7:	c3                   	ret    

c00087e8 <VgaText::setCursorY(int)>:
c00087e8:	83 ec 10             	sub    esp,0x10
c00087eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00087f6:	50                   	push   eax
c00087f7:	e8 24 ff ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c00087fc:	83 c4 1c             	add    esp,0x1c
c00087ff:	c3                   	ret    

c0008800 <VgaText::incrementCursor(bool)>:
c0008800:	56                   	push   esi
c0008801:	53                   	push   ebx
c0008802:	51                   	push   ecx
c0008803:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008807:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000880b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000880e:	40                   	inc    eax
c000880f:	83 f8 50             	cmp    eax,0x50
c0008812:	74 05                	je     c0008819 <VgaText::incrementCursor(bool)+0x19>
c0008814:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008817:	eb 24                	jmp    c000883d <VgaText::incrementCursor(bool)+0x3d>
c0008819:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000881c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008823:	8d 50 01             	lea    edx,[eax+0x1]
c0008826:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008829:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000882c:	75 0f                	jne    c000883d <VgaText::incrementCursor(bool)+0x3d>
c000882e:	83 ec 0c             	sub    esp,0xc
c0008831:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008834:	53                   	push   ebx
c0008835:	e8 a4 fd ff ff       	call   c00085de <VgaText::scrollScreen()>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	89 f0                	mov    eax,esi
c000883f:	84 c0                	test   al,al
c0008841:	74 0c                	je     c000884f <VgaText::incrementCursor(bool)+0x4f>
c0008843:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008847:	5a                   	pop    edx
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	e9 99 fc ff ff       	jmp    c00084e8 <VgaText::updateCursor()>
c000884f:	58                   	pop    eax
c0008850:	5b                   	pop    ebx
c0008851:	5e                   	pop    esi
c0008852:	c3                   	ret    
c0008853:	90                   	nop

c0008854 <VgaText::decrementCursor(bool)>:
c0008854:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008858:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000885c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000885f:	85 c0                	test   eax,eax
c0008861:	74 04                	je     c0008867 <VgaText::decrementCursor(bool)+0x13>
c0008863:	48                   	dec    eax
c0008864:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008867:	84 c9                	test   cl,cl
c0008869:	74 09                	je     c0008874 <VgaText::decrementCursor(bool)+0x20>
c000886b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000886f:	e9 74 fc ff ff       	jmp    c00084e8 <VgaText::updateCursor()>
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008876:	53                   	push   ebx
c0008877:	83 ec 08             	sub    esp,0x8
c000887a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008887:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000888b:	83 f8 07             	cmp    eax,0x7
c000888e:	75 21                	jne    c00088b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008890:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008898:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088a0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088a8:	83 c4 08             	add    esp,0x8
c00088ab:	5b                   	pop    ebx
c00088ac:	e9 fe 2e 00 00       	jmp    c000b7af <Krnl::beep(int, int, bool)>
c00088b1:	83 f8 0d             	cmp    eax,0xd
c00088b4:	75 09                	jne    c00088bf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088bd:	eb 2d                	jmp    c00088ec <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088bf:	83 f8 0a             	cmp    eax,0xa
c00088c2:	75 31                	jne    c00088f5 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088c4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ce:	8d 50 01             	lea    edx,[eax+0x1]
c00088d1:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088d4:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088d7:	75 0f                	jne    c00088e8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088d9:	83 ec 0c             	sub    esp,0xc
c00088dc:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088df:	53                   	push   ebx
c00088e0:	e8 f9 fc ff ff       	call   c00085de <VgaText::scrollScreen()>
c00088e5:	83 c4 10             	add    esp,0x10
c00088e8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088ec:	83 c4 08             	add    esp,0x8
c00088ef:	5b                   	pop    ebx
c00088f0:	e9 f3 fb ff ff       	jmp    c00084e8 <VgaText::updateCursor()>
c00088f5:	83 f8 08             	cmp    eax,0x8
c00088f8:	75 25                	jne    c000891f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00088fa:	50                   	push   eax
c00088fb:	50                   	push   eax
c00088fc:	6a 01                	push   0x1
c00088fe:	53                   	push   ebx
c00088ff:	e8 50 ff ff ff       	call   c0008854 <VgaText::decrementCursor(bool)>
c0008904:	5a                   	pop    edx
c0008905:	59                   	pop    ecx
c0008906:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008909:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000890c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000890f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008912:	6a 20                	push   0x20
c0008914:	53                   	push   ebx
c0008915:	e8 66 fd ff ff       	call   c0008680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000891a:	83 c4 28             	add    esp,0x28
c000891d:	5b                   	pop    ebx
c000891e:	c3                   	ret    
c000891f:	83 ec 08             	sub    esp,0x8
c0008922:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008925:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008928:	51                   	push   ecx
c0008929:	52                   	push   edx
c000892a:	50                   	push   eax
c000892b:	53                   	push   ebx
c000892c:	e8 4f fd ff ff       	call   c0008680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008931:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008935:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000893d:	83 c4 28             	add    esp,0x28
c0008940:	5b                   	pop    ebx
c0008941:	e9 ba fe ff ff       	jmp    c0008800 <VgaText::incrementCursor(bool)>

c0008946 <VgaText::putchar(char)>:
c0008946:	57                   	push   edi
c0008947:	56                   	push   esi
c0008948:	53                   	push   ebx
c0008949:	83 ec 10             	sub    esp,0x10
c000894c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008950:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008954:	89 f8                	mov    eax,edi
c0008956:	0f be c0             	movsx  eax,al
c0008959:	83 f8 5b             	cmp    eax,0x5b
c000895c:	75 18                	jne    c0008976 <VgaText::putchar(char)+0x30>
c000895e:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008962:	74 20                	je     c0008984 <VgaText::putchar(char)+0x3e>
c0008964:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000896a:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008971:	e9 c1 00 00 00       	jmp    c0008a37 <VgaText::putchar(char)+0xf1>
c0008976:	83 f8 1b             	cmp    eax,0x1b
c0008979:	75 09                	jne    c0008984 <VgaText::putchar(char)+0x3e>
c000897b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000897f:	e9 b3 00 00 00       	jmp    c0008a37 <VgaText::putchar(char)+0xf1>
c0008984:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0008987:	84 c9                	test   cl,cl
c0008989:	0f 84 98 00 00 00    	je     c0008a27 <VgaText::putchar(char)+0xe1>
c000898f:	8d 77 c0             	lea    esi,[edi-0x40]
c0008992:	89 f2                	mov    edx,esi
c0008994:	80 fa 3e             	cmp    dl,0x3e
c0008997:	77 78                	ja     c0008a11 <VgaText::putchar(char)+0xcb>
c0008999:	83 f8 6d             	cmp    eax,0x6d
c000899c:	75 47                	jne    c00089e5 <VgaText::putchar(char)+0x9f>
c000899e:	31 f6                	xor    esi,esi
c00089a0:	31 d2                	xor    edx,edx
c00089a2:	31 c0                	xor    eax,eax
c00089a4:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089a7:	7e 2d                	jle    c00089d6 <VgaText::putchar(char)+0x90>
c00089a9:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089ae:	83 fa 3b             	cmp    edx,0x3b
c00089b1:	75 17                	jne    c00089ca <VgaText::putchar(char)+0x84>
c00089b3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089b7:	50                   	push   eax
c00089b8:	53                   	push   ebx
c00089b9:	e8 40 fb ff ff       	call   c00084fe <VgaText::doANSI_SGR(int)>
c00089be:	59                   	pop    ecx
c00089bf:	31 d2                	xor    edx,edx
c00089c1:	5f                   	pop    edi
c00089c2:	31 c0                	xor    eax,eax
c00089c4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089c8:	eb 09                	jmp    c00089d3 <VgaText::putchar(char)+0x8d>
c00089ca:	6b c0 0a             	imul   eax,eax,0xa
c00089cd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089d1:	88 ca                	mov    dl,cl
c00089d3:	46                   	inc    esi
c00089d4:	eb ce                	jmp    c00089a4 <VgaText::putchar(char)+0x5e>
c00089d6:	84 d2                	test   dl,dl
c00089d8:	74 2f                	je     c0008a09 <VgaText::putchar(char)+0xc3>
c00089da:	50                   	push   eax
c00089db:	53                   	push   ebx
c00089dc:	e8 1d fb ff ff       	call   c00084fe <VgaText::doANSI_SGR(int)>
c00089e1:	58                   	pop    eax
c00089e2:	5a                   	pop    edx
c00089e3:	eb 24                	jmp    c0008a09 <VgaText::putchar(char)+0xc3>
c00089e5:	83 f8 4a             	cmp    eax,0x4a
c00089e8:	75 1f                	jne    c0008a09 <VgaText::putchar(char)+0xc3>
c00089ea:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089ee:	75 19                	jne    c0008a09 <VgaText::putchar(char)+0xc3>
c00089f0:	83 ec 0c             	sub    esp,0xc
c00089f3:	53                   	push   ebx
c00089f4:	e8 89 fd ff ff       	call   c0008782 <VgaText::clearScreen()>
c00089f9:	83 c4 0c             	add    esp,0xc
c00089fc:	6a 00                	push   0x0
c00089fe:	6a 00                	push   0x0
c0008a00:	53                   	push   ebx
c0008a01:	e8 1a fd ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c0008a06:	83 c4 10             	add    esp,0x10
c0008a09:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a0f:	eb 26                	jmp    c0008a37 <VgaText::putchar(char)+0xf1>
c0008a11:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a14:	83 f8 0e             	cmp    eax,0xe
c0008a17:	7f 1e                	jg     c0008a37 <VgaText::putchar(char)+0xf1>
c0008a19:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a1c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a1f:	89 f9                	mov    ecx,edi
c0008a21:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a25:	eb 10                	jmp    c0008a37 <VgaText::putchar(char)+0xf1>
c0008a27:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a2a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a2d:	50                   	push   eax
c0008a2e:	53                   	push   ebx
c0008a2f:	e8 42 fe ff ff       	call   c0008876 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 10             	add    esp,0x10
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	5f                   	pop    edi
c0008a3d:	c3                   	ret    

c0008a3e <VgaText::putx(unsigned int)>:
c0008a3e:	57                   	push   edi
c0008a3f:	b9 11 00 00 00       	mov    ecx,0x11
c0008a44:	56                   	push   esi
c0008a45:	be ca fc 01 c0       	mov    esi,0xc001fcca
c0008a4a:	53                   	push   ebx
c0008a4b:	83 ec 20             	sub    esp,0x20
c0008a4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a52:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a56:	fc                   	cld    
c0008a57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a59:	be 08 00 00 00       	mov    esi,0x8
c0008a5e:	50                   	push   eax
c0008a5f:	50                   	push   eax
c0008a60:	89 d8                	mov    eax,ebx
c0008a62:	c1 e8 1c             	shr    eax,0x1c
c0008a65:	c1 e3 04             	shl    ebx,0x4
c0008a68:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a6d:	50                   	push   eax
c0008a6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a72:	e8 cf fe ff ff       	call   c0008946 <VgaText::putchar(char)>
c0008a77:	83 c4 10             	add    esp,0x10
c0008a7a:	4e                   	dec    esi
c0008a7b:	75 e1                	jne    c0008a5e <VgaText::putx(unsigned int)+0x20>
c0008a7d:	83 c4 20             	add    esp,0x20
c0008a80:	5b                   	pop    ebx
c0008a81:	5e                   	pop    esi
c0008a82:	5f                   	pop    edi
c0008a83:	c3                   	ret    

c0008a84 <VgaText::puts(char const*)>:
c0008a84:	53                   	push   ebx
c0008a85:	83 ec 08             	sub    esp,0x8
c0008a88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a8c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a8f:	85 c0                	test   eax,eax
c0008a91:	74 12                	je     c0008aa5 <VgaText::puts(char const*)+0x21>
c0008a93:	51                   	push   ecx
c0008a94:	43                   	inc    ebx
c0008a95:	51                   	push   ecx
c0008a96:	50                   	push   eax
c0008a97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a9b:	e8 a6 fe ff ff       	call   c0008946 <VgaText::putchar(char)>
c0008aa0:	83 c4 10             	add    esp,0x10
c0008aa3:	eb e7                	jmp    c0008a8c <VgaText::puts(char const*)+0x8>
c0008aa5:	83 c4 08             	add    esp,0x8
c0008aa8:	5b                   	pop    ebx
c0008aa9:	c3                   	ret    

c0008aaa <VgaText::write(unsigned long long, void*, int*)>:
c0008aaa:	55                   	push   ebp
c0008aab:	57                   	push   edi
c0008aac:	56                   	push   esi
c0008aad:	53                   	push   ebx
c0008aae:	83 ec 0c             	sub    esp,0xc
c0008ab1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ab5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ab9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008abd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ac4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ac7:	39 eb                	cmp    ebx,ebp
c0008ac9:	74 13                	je     c0008ade <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008acb:	50                   	push   eax
c0008acc:	43                   	inc    ebx
c0008acd:	50                   	push   eax
c0008ace:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008ad2:	50                   	push   eax
c0008ad3:	56                   	push   esi
c0008ad4:	e8 6d fe ff ff       	call   c0008946 <VgaText::putchar(char)>
c0008ad9:	83 c4 10             	add    esp,0x10
c0008adc:	eb e9                	jmp    c0008ac7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008ade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ae2:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008ae9:	89 38                	mov    DWORD PTR [eax],edi
c0008aeb:	83 c4 0c             	add    esp,0xc
c0008aee:	31 c0                	xor    eax,eax
c0008af0:	5b                   	pop    ebx
c0008af1:	5e                   	pop    esi
c0008af2:	5f                   	pop    edi
c0008af3:	5d                   	pop    ebp
c0008af4:	c3                   	ret    
c0008af5:	90                   	nop

c0008af6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008af6:	55                   	push   ebp
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	53                   	push   ebx
c0008afa:	83 ec 0c             	sub    esp,0xc
c0008afd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b06:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b0d:	50                   	push   eax
c0008b0e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b13:	50                   	push   eax
c0008b14:	e8 b3 fa ff ff       	call   c00085cc <VgaText::combineColours(unsigned char, unsigned char)>
c0008b19:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b1d:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b20:	5a                   	pop    edx
c0008b21:	0f b7 f6             	movzx  esi,si
c0008b24:	01 f6                	add    esi,esi
c0008b26:	59                   	pop    ecx
c0008b27:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b2a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b2e:	0f b6 e8             	movzx  ebp,al
c0008b31:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b34:	85 c0                	test   eax,eax
c0008b36:	0f 84 ef 00 00 00    	je     c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b3c:	83 f8 0d             	cmp    eax,0xd
c0008b3f:	75 0c                	jne    c0008b4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b41:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b48:	e9 d8 00 00 00       	jmp    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b4d:	83 f8 0a             	cmp    eax,0xa
c0008b50:	75 44                	jne    c0008b96 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b52:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b55:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b5c:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b5f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b62:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b65:	75 0f                	jne    c0008b76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b67:	83 ec 0c             	sub    esp,0xc
c0008b6a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b6d:	53                   	push   ebx
c0008b6e:	e8 6b fa ff ff       	call   c00085de <VgaText::scrollScreen()>
c0008b73:	83 c4 10             	add    esp,0x10
c0008b76:	83 ec 0c             	sub    esp,0xc
c0008b79:	53                   	push   ebx
c0008b7a:	e8 69 f9 ff ff       	call   c00084e8 <VgaText::updateCursor()>
c0008b7f:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b83:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b86:	83 c4 10             	add    esp,0x10
c0008b89:	0f b7 f6             	movzx  esi,si
c0008b8c:	01 f6                	add    esi,esi
c0008b8e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b91:	e9 8f 00 00 00       	jmp    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b96:	83 f8 08             	cmp    eax,0x8
c0008b99:	75 34                	jne    c0008bcf <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008b9b:	51                   	push   ecx
c0008b9c:	51                   	push   ecx
c0008b9d:	6a 01                	push   0x1
c0008b9f:	53                   	push   ebx
c0008ba0:	e8 af fc ff ff       	call   c0008854 <VgaText::decrementCursor(bool)>
c0008ba5:	5e                   	pop    esi
c0008ba6:	58                   	pop    eax
c0008ba7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008baa:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bad:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bb3:	6a 20                	push   0x20
c0008bb5:	53                   	push   ebx
c0008bb6:	e8 c5 fa ff ff       	call   c0008680 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bbb:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bbf:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bc2:	83 c4 20             	add    esp,0x20
c0008bc5:	0f b7 f6             	movzx  esi,si
c0008bc8:	01 f6                	add    esi,esi
c0008bca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bcd:	eb 56                	jmp    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bcf:	52                   	push   edx
c0008bd0:	52                   	push   edx
c0008bd1:	55                   	push   ebp
c0008bd2:	50                   	push   eax
c0008bd3:	e8 98 fa ff ff       	call   c0008670 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bd8:	66 89 06             	mov    WORD PTR [esi],ax
c0008bdb:	83 c4 10             	add    esp,0x10
c0008bde:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008be4:	75 1d                	jne    c0008c03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bec:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bf3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bf7:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008bfa:	50                   	push   eax
c0008bfb:	e8 f0 f0 00 00       	call   c0017cf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c00:	83 c4 20             	add    esp,0x20
c0008c03:	50                   	push   eax
c0008c04:	83 c6 02             	add    esi,0x2
c0008c07:	50                   	push   eax
c0008c08:	6a 00                	push   0x0
c0008c0a:	53                   	push   ebx
c0008c0b:	e8 f0 fb ff ff       	call   c0008800 <VgaText::incrementCursor(bool)>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c17:	75 0c                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c19:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c1d:	0f b7 f6             	movzx  esi,si
c0008c20:	01 f6                	add    esi,esi
c0008c22:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c25:	47                   	inc    edi
c0008c26:	e9 06 ff ff ff       	jmp    c0008b31 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c2b:	83 ec 0c             	sub    esp,0xc
c0008c2e:	53                   	push   ebx
c0008c2f:	e8 b4 f8 ff ff       	call   c00084e8 <VgaText::updateCursor()>
c0008c34:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c3b:	83 c4 1c             	add    esp,0x1c
c0008c3e:	5b                   	pop    ebx
c0008c3f:	5e                   	pop    esi
c0008c40:	5f                   	pop    edi
c0008c41:	5d                   	pop    ebp
c0008c42:	c3                   	ret    
c0008c43:	90                   	nop

c0008c44 <VgaText::VgaText(char const*)>:
c0008c44:	56                   	push   esi
c0008c45:	53                   	push   ebx
c0008c46:	83 ec 04             	sub    esp,0x4
c0008c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4d:	83 ec 08             	sub    esp,0x8
c0008c50:	6a 00                	push   0x0
c0008c52:	50                   	push   eax
c0008c53:	e8 4a 05 00 00       	call   c00091a2 <UnixFile::UnixFile(int)>
c0008c58:	83 c4 10             	add    esp,0x10
c0008c5b:	ba f0 fc 01 c0       	mov    edx,0xc001fcf0
c0008c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c64:	89 10                	mov    DWORD PTR [eax],edx
c0008c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c80:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c88:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c90:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cc3:	83 ec 0c             	sub    esp,0xc
c0008cc6:	6a 01                	push   0x1
c0008cc8:	e8 24 09 00 00       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0008ccd:	83 c4 10             	add    esp,0x10
c0008cd0:	89 c2                	mov    edx,eax
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cd9:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008ce6:	89 c6                	mov    esi,eax
c0008ce8:	e8 a4 f0 ff ff       	call   c0007d91 <Phys::allocatePage()>
c0008ced:	68 05 0c 00 00       	push   0xc05
c0008cf2:	56                   	push   esi
c0008cf3:	50                   	push   eax
c0008cf4:	53                   	push   ebx
c0008cf5:	e8 e0 0f 00 00       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c0008cfa:	83 c4 10             	add    esp,0x10
c0008cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d04:	83 ec 04             	sub    esp,0x4
c0008d07:	68 a0 0f 00 00       	push   0xfa0
c0008d0c:	6a 00                	push   0x0
c0008d0e:	50                   	push   eax
c0008d0f:	e8 cc 77 ff ff       	call   c00004e0 <memset>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	83 ec 04             	sub    esp,0x4
c0008d1a:	6a 00                	push   0x0
c0008d1c:	6a 07                	push   0x7
c0008d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d22:	e8 6b f8 ff ff       	call   c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	83 ec 04             	sub    esp,0x4
c0008d2d:	6a 00                	push   0x0
c0008d2f:	6a 00                	push   0x0
c0008d31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d35:	e8 e6 f9 ff ff       	call   c0008720 <VgaText::setCursor(int, int)>
c0008d3a:	83 c4 10             	add    esp,0x10
c0008d3d:	83 ec 0c             	sub    esp,0xc
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 39 fa ff ff       	call   c0008782 <VgaText::clearScreen()>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d50:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d58:	05 82 00 00 00       	add    eax,0x82
c0008d5d:	83 ec 04             	sub    esp,0x4
c0008d60:	68 80 00 00 00       	push   0x80
c0008d65:	6a 00                	push   0x0
c0008d67:	50                   	push   eax
c0008d68:	e8 73 77 ff ff       	call   c00004e0 <memset>
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d74:	05 02 01 00 00       	add    eax,0x102
c0008d79:	83 ec 04             	sub    esp,0x4
c0008d7c:	68 80 00 00 00       	push   0x80
c0008d81:	6a 00                	push   0x0
c0008d83:	50                   	push   eax
c0008d84:	e8 57 77 ff ff       	call   c00004e0 <memset>
c0008d89:	83 c4 10             	add    esp,0x10
c0008d8c:	90                   	nop
c0008d8d:	83 c4 04             	add    esp,0x4
c0008d90:	5b                   	pop    ebx
c0008d91:	5e                   	pop    esi
c0008d92:	c3                   	ret    
c0008d93:	90                   	nop

c0008d94 <VgaText::receiveKey(unsigned char)>:
c0008d94:	55                   	push   ebp
c0008d95:	57                   	push   edi
c0008d96:	56                   	push   esi
c0008d97:	53                   	push   ebx
c0008d98:	83 ec 2c             	sub    esp,0x2c
c0008d9b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008d9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008da3:	89 fd                	mov    ebp,edi
c0008da5:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dab:	0f 84 48 01 00 00    	je     c0008ef9 <VgaText::receiveKey(unsigned char)+0x165>
c0008db1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008db7:	83 fd 08             	cmp    ebp,0x8
c0008dba:	75 6a                	jne    c0008e26 <VgaText::receiveKey(unsigned char)+0x92>
c0008dbc:	83 ec 0c             	sub    esp,0xc
c0008dbf:	56                   	push   esi
c0008dc0:	e8 9b 77 ff ff       	call   c0000560 <strlen>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	0f 84 ef 00 00 00    	je     c0008ebf <VgaText::receiveKey(unsigned char)+0x12b>
c0008dd0:	50                   	push   eax
c0008dd1:	50                   	push   eax
c0008dd2:	6a 08                	push   0x8
c0008dd4:	53                   	push   ebx
c0008dd5:	e8 6c fb ff ff       	call   c0008946 <VgaText::putchar(char)>
c0008dda:	89 34 24             	mov    DWORD PTR [esp],esi
c0008ddd:	e8 7e 77 ff ff       	call   c0000560 <strlen>
c0008de2:	83 c4 10             	add    esp,0x10
c0008de5:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008ded:	89 d0                	mov    eax,edx
c0008def:	83 fa 1f             	cmp    edx,0x1f
c0008df2:	7f 1c                	jg     c0008e10 <VgaText::receiveKey(unsigned char)+0x7c>
c0008df4:	83 e8 08             	sub    eax,0x8
c0008df7:	3c 02                	cmp    al,0x2
c0008df9:	76 15                	jbe    c0008e10 <VgaText::receiveKey(unsigned char)+0x7c>
c0008dfb:	83 fa 0d             	cmp    edx,0xd
c0008dfe:	74 10                	je     c0008e10 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e00:	57                   	push   edi
c0008e01:	57                   	push   edi
c0008e02:	68 db fc 01 c0       	push   0xc001fcdb
c0008e07:	53                   	push   ebx
c0008e08:	e8 77 fc ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	83 ec 0c             	sub    esp,0xc
c0008e13:	56                   	push   esi
c0008e14:	e8 47 77 ff ff       	call   c0000560 <strlen>
c0008e19:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e21:	e9 96 00 00 00       	jmp    c0008ebc <VgaText::receiveKey(unsigned char)+0x128>
c0008e26:	83 ec 0c             	sub    esp,0xc
c0008e29:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e2f:	50                   	push   eax
c0008e30:	e8 2b 77 ff ff       	call   c0000560 <strlen>
c0008e35:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e3c:	e8 1f 77 ff ff       	call   c0000560 <strlen>
c0008e41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e45:	83 c4 10             	add    esp,0x10
c0008e48:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e4c:	3d 80 00 00 00       	cmp    eax,0x80
c0008e51:	0f 87 a2 00 00 00    	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x165>
c0008e57:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e5a:	3c 1e                	cmp    al,0x1e
c0008e5c:	77 35                	ja     c0008e93 <VgaText::receiveKey(unsigned char)+0xff>
c0008e5e:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e61:	3c 01                	cmp    al,0x1
c0008e63:	76 2e                	jbe    c0008e93 <VgaText::receiveKey(unsigned char)+0xff>
c0008e65:	83 fd 0d             	cmp    ebp,0xd
c0008e68:	74 29                	je     c0008e93 <VgaText::receiveKey(unsigned char)+0xff>
c0008e6a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e6d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e70:	68 e1 fc 01 c0       	push   0xc001fce1
c0008e75:	53                   	push   ebx
c0008e76:	e8 7b fc ff ff       	call   c0008af6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e7b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e7e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e81:	8d 47 40             	lea    eax,[edi+0x40]
c0008e84:	0f b6 c0             	movzx  eax,al
c0008e87:	50                   	push   eax
c0008e88:	53                   	push   ebx
c0008e89:	e8 e8 f9 ff ff       	call   c0008876 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e8e:	83 c4 20             	add    esp,0x20
c0008e91:	eb 11                	jmp    c0008ea4 <VgaText::receiveKey(unsigned char)+0x110>
c0008e93:	89 f8                	mov    eax,edi
c0008e95:	51                   	push   ecx
c0008e96:	51                   	push   ecx
c0008e97:	0f be c0             	movsx  eax,al
c0008e9a:	50                   	push   eax
c0008e9b:	53                   	push   ebx
c0008e9c:	e8 a5 fa ff ff       	call   c0008946 <VgaText::putchar(char)>
c0008ea1:	83 c4 10             	add    esp,0x10
c0008ea4:	89 f8                	mov    eax,edi
c0008ea6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008eab:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008eaf:	52                   	push   edx
c0008eb0:	52                   	push   edx
c0008eb1:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eb5:	50                   	push   eax
c0008eb6:	56                   	push   esi
c0008eb7:	e8 74 79 ff ff       	call   c0000830 <strcat>
c0008ebc:	83 c4 10             	add    esp,0x10
c0008ebf:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008ec6:	75 0f                	jne    c0008ed7 <VgaText::receiveKey(unsigned char)+0x143>
c0008ec8:	83 fd 1c             	cmp    ebp,0x1c
c0008ecb:	77 2c                	ja     c0008ef9 <VgaText::receiveKey(unsigned char)+0x165>
c0008ecd:	b8 08 04 00 10       	mov    eax,0x10000408
c0008ed2:	0f a3 e8             	bt     eax,ebp
c0008ed5:	73 22                	jae    c0008ef9 <VgaText::receiveKey(unsigned char)+0x165>
c0008ed7:	50                   	push   eax
c0008ed8:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ede:	50                   	push   eax
c0008edf:	56                   	push   esi
c0008ee0:	53                   	push   ebx
c0008ee1:	e8 4a 79 ff ff       	call   c0000830 <strcat>
c0008ee6:	83 c4 0c             	add    esp,0xc
c0008ee9:	68 80 00 00 00       	push   0x80
c0008eee:	6a 00                	push   0x0
c0008ef0:	56                   	push   esi
c0008ef1:	e8 ea 75 ff ff       	call   c00004e0 <memset>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	83 c4 2c             	add    esp,0x2c
c0008efc:	5b                   	pop    ebx
c0008efd:	5e                   	pop    esi
c0008efe:	5f                   	pop    edi
c0008eff:	5d                   	pop    ebp
c0008f00:	c3                   	ret    
c0008f01:	90                   	nop

c0008f02 <VgaText::doUpdate()>:
c0008f02:	c3                   	ret    

c0008f03 <newTerminal(char*)>:
c0008f03:	83 ec 28             	sub    esp,0x28
c0008f06:	68 84 01 00 00       	push   0x184
c0008f0b:	e8 7c eb ff ff       	call   c0007a8c <malloc>
c0008f10:	5a                   	pop    edx
c0008f11:	59                   	pop    ecx
c0008f12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f16:	50                   	push   eax
c0008f17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f1b:	e8 24 fd ff ff       	call   c0008c44 <VgaText::VgaText(char const*)>
c0008f20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f24:	83 c4 2c             	add    esp,0x2c
c0008f27:	c3                   	ret    

c0008f28 <TSS::TSS()>:
c0008f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f33:	90                   	nop
c0008f34:	c3                   	ret    
c0008f35:	90                   	nop
c0008f36:	66 90                	xchg   ax,ax

c0008f38 <TSS::setESP(unsigned long)>:
c0008f38:	55                   	push   ebp
c0008f39:	89 e5                	mov    ebp,esp
c0008f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f41:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f47:	90                   	nop
c0008f48:	5d                   	pop    ebp
c0008f49:	c3                   	ret    
c0008f4a:	66 90                	xchg   ax,ax

c0008f4c <TSS::flush()>:
c0008f4c:	55                   	push   ebp
c0008f4d:	89 e5                	mov    ebp,esp
c0008f4f:	83 ec 10             	sub    esp,0x10
c0008f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f55:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f57:	83 c8 03             	or     eax,0x3
c0008f5a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f5e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f62:	66 89 d0             	mov    ax,dx
c0008f65:	0f 00 d8             	ltr    ax
c0008f68:	90                   	nop
c0008f69:	c9                   	leave  
c0008f6a:	c3                   	ret    
c0008f6b:	90                   	nop

c0008f6c <TSS::setup(unsigned long, unsigned long)>:
c0008f6c:	55                   	push   ebp
c0008f6d:	89 e5                	mov    ebp,esp
c0008f6f:	83 ec 18             	sub    esp,0x18
c0008f72:	83 ec 0c             	sub    esp,0xc
c0008f75:	6a 68                	push   0x68
c0008f77:	e8 10 eb ff ff       	call   c0007a8c <malloc>
c0008f7c:	83 c4 10             	add    esp,0x10
c0008f7f:	89 c2                	mov    edx,eax
c0008f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f8d:	83 ec 04             	sub    esp,0x4
c0008f90:	6a 68                	push   0x68
c0008f92:	6a 00                	push   0x0
c0008f94:	50                   	push   eax
c0008f95:	e8 46 75 ff ff       	call   c00004e0 <memset>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008faf:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008feb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009003:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009012:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000901e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009027:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000902e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009031:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009034:	0f 20 da             	mov    edx,cr3
c0009037:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000903d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009046:	83 ec 08             	sub    esp,0x8
c0009049:	50                   	push   eax
c000904a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000904d:	50                   	push   eax
c000904e:	e8 a9 e2 ff ff       	call   c00072fc <GDTEntry::setBase(unsigned int)>
c0009053:	83 c4 10             	add    esp,0x10
c0009056:	83 ec 08             	sub    esp,0x8
c0009059:	6a 68                	push   0x68
c000905b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000905e:	50                   	push   eax
c000905f:	e8 b4 e2 ff ff       	call   c0007318 <GDTEntry::setLimit(unsigned int)>
c0009064:	83 c4 10             	add    esp,0x10
c0009067:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000906e:	83 e0 0f             	and    eax,0xf
c0009071:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009074:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009077:	83 c8 40             	or     eax,0x40
c000907a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000907d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009082:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009088:	05 78 01 00 00       	add    eax,0x178
c000908d:	83 ec 04             	sub    esp,0x4
c0009090:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009093:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0009096:	50                   	push   eax
c0009097:	e8 b0 e2 ff ff       	call   c000734c <GDT::addEntry(GDTEntry)>
c000909c:	83 c4 10             	add    esp,0x10
c000909f:	89 c2                	mov    edx,eax
c00090a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a4:	89 10                	mov    DWORD PTR [eax],edx
c00090a6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b1:	05 78 01 00 00       	add    eax,0x178
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	50                   	push   eax
c00090ba:	e8 b7 e2 ff ff       	call   c0007376 <GDT::flush()>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090c7:	c9                   	leave  
c00090c8:	c3                   	ret    
c00090c9:	90                   	nop

c00090ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090da:	75 08                	jne    c00090e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e2:	eb 38                	jmp    c000911c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090e9:	75 17                	jne    c0009102 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00090fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009102:	89 c1                	mov    ecx,eax
c0009104:	83 e1 fd             	and    ecx,0xfffffffd
c0009107:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000910d:	74 cd                	je     c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000910f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009114:	83 e0 ef             	and    eax,0xffffffef
c0009117:	83 f8 08             	cmp    eax,0x8
c000911a:	76 c0                	jbe    c00090dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000911c:	31 c0                	xor    eax,eax
c000911e:	c3                   	ret    
c000911f:	90                   	nop

c0009120 <ReservedFilename::isAtty()>:
c0009120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009124:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009127:	31 c0                	xor    eax,eax
c0009129:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000912f:	74 09                	je     c000913a <ReservedFilename::isAtty()+0x1a>
c0009131:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009137:	0f 94 c0             	sete   al
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009144:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009148:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009150:	75 08                	jne    c000915a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009152:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009158:	eb 3d                	jmp    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000915f:	75 17                	jne    c0009178 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009161:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009166:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009169:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000916f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009175:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009178:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000917d:	75 04                	jne    c0009183 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000917f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009181:	eb 14                	jmp    c0009197 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009183:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009188:	74 c8                	je     c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000918f:	83 e0 ef             	and    eax,0xffffffef
c0009192:	83 f8 08             	cmp    eax,0x8
c0009195:	76 bb                	jbe    c0009152 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009197:	31 c0                	xor    eax,eax
c0009199:	c3                   	ret    

c000919a <UnixFile::getFileDescriptor()>:
c000919a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000919e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a1:	c3                   	ret    

c00091a2 <UnixFile::UnixFile(int)>:
c00091a2:	53                   	push   ebx
c00091a3:	83 ec 28             	sub    esp,0x28
c00091a6:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c00091ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091af:	89 10                	mov    DWORD PTR [eax],edx
c00091b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091b9:	0f 8f 90 01 00 00    	jg     c000934f <UnixFile::UnixFile(int)+0x1ad>
c00091bf:	a1 80 1e 02 c0       	mov    eax,ds:0xc0021e80
c00091c4:	8d 50 01             	lea    edx,[eax+0x1]
c00091c7:	89 15 80 1e 02 c0    	mov    DWORD PTR ds:0xc0021e80,edx
c00091cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d4:	83 ec 08             	sub    esp,0x8
c00091d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091db:	68 98 4f 02 c0       	push   0xc0024f98
c00091e0:	e8 d3 56 01 00       	call   c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e5:	83 c4 10             	add    esp,0x10
c00091e8:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c00091ed:	83 f0 01             	xor    eax,0x1
c00091f0:	0f b6 c0             	movzx  eax,al
c00091f3:	85 c0                	test   eax,eax
c00091f5:	0f 84 55 01 00 00    	je     c0009350 <UnixFile::UnixFile(int)+0x1ae>
c00091fb:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c0009202:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920a:	83 ec 0c             	sub    esp,0xc
c000920d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009211:	e8 76 e8 ff ff       	call   c0007a8c <malloc>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	89 c3                	mov    ebx,eax
c000921b:	83 ec 08             	sub    esp,0x8
c000921e:	68 03 ff ff 0f       	push   0xfffff03
c0009223:	53                   	push   ebx
c0009224:	e8 2d 01 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009229:	83 c4 10             	add    esp,0x10
c000922c:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009232:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923a:	83 ec 0c             	sub    esp,0xc
c000923d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009241:	e8 46 e8 ff ff       	call   c0007a8c <malloc>
c0009246:	83 c4 10             	add    esp,0x10
c0009249:	89 c3                	mov    ebx,eax
c000924b:	83 ec 08             	sub    esp,0x8
c000924e:	68 01 ff ff 0f       	push   0xfffff01
c0009253:	53                   	push   ebx
c0009254:	e8 fd 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c0009262:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926a:	83 ec 0c             	sub    esp,0xc
c000926d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009271:	e8 16 e8 ff ff       	call   c0007a8c <malloc>
c0009276:	83 c4 10             	add    esp,0x10
c0009279:	89 c3                	mov    ebx,eax
c000927b:	83 ec 08             	sub    esp,0x8
c000927e:	68 00 ff ff 0f       	push   0xfffff00
c0009283:	53                   	push   ebx
c0009284:	e8 cd 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009289:	83 c4 10             	add    esp,0x10
c000928c:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c0009292:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929a:	83 ec 0c             	sub    esp,0xc
c000929d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a1:	e8 e6 e7 ff ff       	call   c0007a8c <malloc>
c00092a6:	83 c4 10             	add    esp,0x10
c00092a9:	89 c3                	mov    ebx,eax
c00092ab:	83 ec 08             	sub    esp,0x8
c00092ae:	68 02 ff ff 0f       	push   0xfffff02
c00092b3:	53                   	push   ebx
c00092b4:	e8 9d 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092c2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ca:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092cf:	7f 7f                	jg     c0009350 <UnixFile::UnixFile(int)+0x1ae>
c00092d1:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092d9:	83 ec 0c             	sub    esp,0xc
c00092dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e0:	e8 a7 e7 ff ff       	call   c0007a8c <malloc>
c00092e5:	83 c4 10             	add    esp,0x10
c00092e8:	89 c3                	mov    ebx,eax
c00092ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092ee:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f3:	83 ec 08             	sub    esp,0x8
c00092f6:	50                   	push   eax
c00092f7:	53                   	push   ebx
c00092f8:	e8 59 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c00092fd:	83 c4 10             	add    esp,0x10
c0009300:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009304:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000930b:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009313:	83 ec 0c             	sub    esp,0xc
c0009316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931a:	e8 6d e7 ff ff       	call   c0007a8c <malloc>
c000931f:	83 c4 10             	add    esp,0x10
c0009322:	89 c3                	mov    ebx,eax
c0009324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009328:	05 20 ff ff 0f       	add    eax,0xfffff20
c000932d:	83 ec 08             	sub    esp,0x8
c0009330:	50                   	push   eax
c0009331:	53                   	push   ebx
c0009332:	e8 1f 00 00 00       	call   c0009356 <ReservedFilename::ReservedFilename(int)>
c0009337:	83 c4 10             	add    esp,0x10
c000933a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009345:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934a:	e9 7b ff ff ff       	jmp    c00092ca <UnixFile::UnixFile(int)+0x128>
c000934f:	90                   	nop
c0009350:	83 c4 28             	add    esp,0x28
c0009353:	5b                   	pop    ebx
c0009354:	c3                   	ret    
c0009355:	90                   	nop

c0009356 <ReservedFilename::ReservedFilename(int)>:
c0009356:	83 ec 0c             	sub    esp,0xc
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	83 ec 08             	sub    esp,0x8
c0009360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009364:	50                   	push   eax
c0009365:	e8 38 fe ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000936a:	83 c4 10             	add    esp,0x10
c000936d:	ba d4 fd 01 c0       	mov    edx,0xc001fdd4
c0009372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009376:	89 10                	mov    DWORD PTR [eax],edx
c0009378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009380:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009383:	90                   	nop
c0009384:	83 c4 0c             	add    esp,0xc
c0009387:	c3                   	ret    

c0009388 <UnixFile::~UnixFile()>:
c0009388:	83 ec 1c             	sub    esp,0x1c
c000938b:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c0009390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009394:	89 10                	mov    DWORD PTR [eax],edx
c0009396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000939d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a2:	7f 76                	jg     c000941a <UnixFile::~UnixFile()+0x92>
c00093a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093ac:	83 ec 0c             	sub    esp,0xc
c00093af:	68 98 4f 02 c0       	push   0xc0024f98
c00093b4:	e8 d3 55 01 00       	call   c001e98c <LinkedList<UnixFile>::getFirstElement()>
c00093b9:	83 c4 10             	add    esp,0x10
c00093bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	68 98 4f 02 c0       	push   0xc0024f98
c00093c8:	e8 c7 55 01 00       	call   c001e994 <LinkedList<UnixFile>::removeFirst()>
c00093cd:	83 c4 10             	add    esp,0x10
c00093d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093d8:	74 43                	je     c000941d <UnixFile::~UnixFile()+0x95>
c00093da:	83 ec 08             	sub    esp,0x8
c00093dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e1:	68 98 4f 02 c0       	push   0xc0024f98
c00093e6:	e8 cd 54 01 00       	call   c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f2:	8d 50 01             	lea    edx,[eax+0x1]
c00093f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093f9:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00093fe:	0f 94 c0             	sete   al
c0009401:	0f b6 c0             	movzx  eax,al
c0009404:	85 c0                	test   eax,eax
c0009406:	74 a4                	je     c00093ac <UnixFile::~UnixFile()+0x24>
c0009408:	83 ec 0c             	sub    esp,0xc
c000940b:	68 90 fd 01 c0       	push   0xc001fd90
c0009410:	e8 2a 74 00 00       	call   c001083f <KePanic(char const*)>
c0009415:	83 c4 10             	add    esp,0x10
c0009418:	eb 92                	jmp    c00093ac <UnixFile::~UnixFile()+0x24>
c000941a:	90                   	nop
c000941b:	eb 01                	jmp    c000941e <UnixFile::~UnixFile()+0x96>
c000941d:	90                   	nop
c000941e:	90                   	nop
c000941f:	83 c4 1c             	add    esp,0x1c
c0009422:	c3                   	ret    
c0009423:	90                   	nop

c0009424 <UnixFile::~UnixFile()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	83 ec 0c             	sub    esp,0xc
c000942a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000942e:	e8 55 ff ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c0009433:	83 c4 10             	add    esp,0x10
c0009436:	83 ec 08             	sub    esp,0x8
c0009439:	6a 0c                	push   0xc
c000943b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000943f:	e8 13 14 00 00       	call   c000a857 <operator delete(void*, unsigned long)>
c0009444:	83 c4 10             	add    esp,0x10
c0009447:	83 c4 0c             	add    esp,0xc
c000944a:	c3                   	ret    
c000944b:	90                   	nop

c000944c <ReservedFilename::~ReservedFilename()>:
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ba d4 fd 01 c0       	mov    edx,0xc001fdd4
c0009454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009458:	89 10                	mov    DWORD PTR [eax],edx
c000945a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945e:	83 ec 0c             	sub    esp,0xc
c0009461:	50                   	push   eax
c0009462:	e8 21 ff ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	90                   	nop
c000946b:	83 c4 0c             	add    esp,0xc
c000946e:	c3                   	ret    
c000946f:	90                   	nop

c0009470 <ReservedFilename::~ReservedFilename()>:
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	83 ec 0c             	sub    esp,0xc
c0009476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947a:	e8 cd ff ff ff       	call   c000944c <ReservedFilename::~ReservedFilename()>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	83 ec 08             	sub    esp,0x8
c0009485:	6a 0c                	push   0xc
c0009487:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948b:	e8 c7 13 00 00       	call   c000a857 <operator delete(void*, unsigned long)>
c0009490:	83 c4 10             	add    esp,0x10
c0009493:	83 c4 0c             	add    esp,0xc
c0009496:	c3                   	ret    

c0009497 <getFromFileDescriptor(int)>:
c0009497:	53                   	push   ebx
c0009498:	83 ec 08             	sub    esp,0x8
c000949b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000949f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094ab:	7f 2c                	jg     c00094d9 <getFromFileDescriptor(int)+0x42>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 98 4f 02 c0       	push   0xc0024f98
c00094b5:	e8 d2 54 01 00       	call   c001e98c <LinkedList<UnixFile>::getFirstElement()>
c00094ba:	83 c4 10             	add    esp,0x10
c00094bd:	85 c0                	test   eax,eax
c00094bf:	75 04                	jne    c00094c5 <getFromFileDescriptor(int)+0x2e>
c00094c1:	31 c0                	xor    eax,eax
c00094c3:	eb 6e                	jmp    c0009533 <getFromFileDescriptor(int)+0x9c>
c00094c5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094c8:	74 69                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094ca:	52                   	push   edx
c00094cb:	52                   	push   edx
c00094cc:	50                   	push   eax
c00094cd:	68 98 4f 02 c0       	push   0xc0024f98
c00094d2:	e8 5f 55 01 00       	call   c001ea36 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094d7:	eb e1                	jmp    c00094ba <getFromFileDescriptor(int)+0x23>
c00094d9:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094de:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e4:	74 4d                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094e6:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c00094eb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f1:	74 40                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c00094f3:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c00094f8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fe:	74 33                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c0009500:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009505:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950b:	74 26                	je     c0009533 <getFromFileDescriptor(int)+0x9c>
c000950d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009513:	83 f8 08             	cmp    eax,0x8
c0009516:	77 09                	ja     c0009521 <getFromFileDescriptor(int)+0x8a>
c0009518:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c000951f:	eb 12                	jmp    c0009533 <getFromFileDescriptor(int)+0x9c>
c0009521:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009527:	83 fb 08             	cmp    ebx,0x8
c000952a:	77 95                	ja     c00094c1 <getFromFileDescriptor(int)+0x2a>
c000952c:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c0009533:	83 c4 08             	add    esp,0x8
c0009536:	5b                   	pop    ebx
c0009537:	c3                   	ret    

c0009538 <__static_initialization_and_destruction_0(int, int)>:
c0009538:	83 ec 0c             	sub    esp,0xc
c000953b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009540:	75 34                	jne    c0009576 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009542:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954a:	75 2a                	jne    c0009576 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	68 98 4f 02 c0       	push   0xc0024f98
c0009554:	e8 1d 53 01 00       	call   c001e876 <LinkedList<UnixFile>::LinkedList()>
c0009559:	83 c4 10             	add    esp,0x10
c000955c:	83 ec 04             	sub    esp,0x4
c000955f:	68 08 1e 02 c0       	push   0xc0021e08
c0009564:	68 98 4f 02 c0       	push   0xc0024f98
c0009569:	68 74 e8 01 c0       	push   0xc001e874
c000956e:	e8 94 12 00 00       	call   c000a807 <__cxa_atexit>
c0009573:	83 c4 10             	add    esp,0x10
c0009576:	90                   	nop
c0009577:	83 c4 0c             	add    esp,0xc
c000957a:	c3                   	ret    

c000957b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957b:	83 ec 0c             	sub    esp,0xc
c000957e:	83 ec 08             	sub    esp,0x8
c0009581:	68 ff ff 00 00       	push   0xffff
c0009586:	6a 01                	push   0x1
c0009588:	e8 ab ff ff ff       	call   c0009538 <__static_initialization_and_destruction_0(int, int)>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	83 c4 0c             	add    esp,0xc
c0009593:	c3                   	ret    

c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009594:	53                   	push   ebx
c0009595:	8b 15 88 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e88
c000959b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000959f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a3:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095a9:	89 d8                	mov    eax,ebx
c00095ab:	d1 e8                	shr    eax,1
c00095ad:	01 d0                	add    eax,edx
c00095af:	80 e3 01             	and    bl,0x1
c00095b2:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b4:	75 09                	jne    c00095bf <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095b6:	83 e2 f0             	and    edx,0xfffffff0
c00095b9:	09 ca                	or     edx,ecx
c00095bb:	88 10                	mov    BYTE PTR [eax],dl
c00095bd:	5b                   	pop    ebx
c00095be:	c3                   	ret    
c00095bf:	0f b6 c9             	movzx  ecx,cl
c00095c2:	c1 e1 04             	shl    ecx,0x4
c00095c5:	83 e2 0f             	and    edx,0xf
c00095c8:	09 ca                	or     edx,ecx
c00095ca:	88 10                	mov    BYTE PTR [eax],dl
c00095cc:	5b                   	pop    ebx
c00095cd:	c3                   	ret    

c00095ce <Virt::getPageState(unsigned long)>:
c00095ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d2:	8b 0d 88 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e88
c00095d8:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095de:	89 d0                	mov    eax,edx
c00095e0:	d1 e8                	shr    eax,1
c00095e2:	80 e2 01             	and    dl,0x1
c00095e5:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095e8:	74 03                	je     c00095ed <Virt::getPageState(unsigned long)+0x1f>
c00095ea:	c1 e8 04             	shr    eax,0x4
c00095ed:	83 e0 0f             	and    eax,0xf
c00095f0:	c3                   	ret    

c00095f1 <Virt::allocateKernelVirtualPages(int)>:
c00095f1:	55                   	push   ebp
c00095f2:	31 ed                	xor    ebp,ebp
c00095f4:	57                   	push   edi
c00095f5:	31 ff                	xor    edi,edi
c00095f7:	56                   	push   esi
c00095f8:	53                   	push   ebx
c00095f9:	31 db                	xor    ebx,ebx
c00095fb:	83 ec 0c             	sub    esp,0xc
c00095fe:	8b 35 84 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e84
c0009604:	56                   	push   esi
c0009605:	e8 c4 ff ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c000960a:	5a                   	pop    edx
c000960b:	84 c0                	test   al,al
c000960d:	75 41                	jne    c0009650 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000960f:	85 db                	test   ebx,ebx
c0009611:	75 02                	jne    c0009615 <Virt::allocateKernelVirtualPages(int)+0x24>
c0009613:	89 f5                	mov    ebp,esi
c0009615:	83 c3 01             	add    ebx,0x1
c0009618:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000961c:	74 5f                	je     c000967d <Virt::allocateKernelVirtualPages(int)+0x8c>
c000961e:	83 c6 01             	add    esi,0x1
c0009621:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009627:	76 34                	jbe    c000965d <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009629:	c7 05 84 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e84,0xc8000
c0009633:	f7 c7 01 00 00 00    	test   edi,0x1
c0009639:	75 2a                	jne    c0009665 <Virt::allocateKernelVirtualPages(int)+0x74>
c000963b:	be 00 80 0c 00       	mov    esi,0xc8000
c0009640:	bf 01 00 00 00       	mov    edi,0x1
c0009645:	56                   	push   esi
c0009646:	e8 83 ff ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c000964b:	5a                   	pop    edx
c000964c:	84 c0                	test   al,al
c000964e:	74 bf                	je     c000960f <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009650:	83 c6 01             	add    esi,0x1
c0009653:	31 db                	xor    ebx,ebx
c0009655:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000965b:	77 cc                	ja     c0009629 <Virt::allocateKernelVirtualPages(int)+0x38>
c000965d:	89 35 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,esi
c0009663:	eb 9f                	jmp    c0009604 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009665:	83 ec 0c             	sub    esp,0xc
c0009668:	68 e8 fd 01 c0       	push   0xc001fde8
c000966d:	e8 cd 71 00 00       	call   c001083f <KePanic(char const*)>
c0009672:	8b 35 84 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e84
c0009678:	83 c4 10             	add    esp,0x10
c000967b:	eb 87                	jmp    c0009604 <Virt::allocateKernelVirtualPages(int)+0x13>
c000967d:	89 2d 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,ebp
c0009683:	83 fb 01             	cmp    ebx,0x1
c0009686:	74 6f                	je     c00096f7 <Virt::allocateKernelVirtualPages(int)+0x106>
c0009688:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000968c:	85 c9                	test   ecx,ecx
c000968e:	74 49                	je     c00096d9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0009690:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009694:	89 e8                	mov    eax,ebp
c0009696:	31 db                	xor    ebx,ebx
c0009698:	8d 79 ff             	lea    edi,[ecx-0x1]
c000969b:	eb 18                	jmp    c00096b5 <Virt::allocateKernelVirtualPages(int)+0xc4>
c000969d:	6a 01                	push   0x1
c000969f:	83 c3 01             	add    ebx,0x1
c00096a2:	50                   	push   eax
c00096a3:	e8 ec fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a8:	58                   	pop    eax
c00096a9:	5a                   	pop    edx
c00096aa:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ae:	74 29                	je     c00096d9 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096b0:	a1 84 1e 02 c0       	mov    eax,ds:0xc0021e84
c00096b5:	8d 50 01             	lea    edx,[eax+0x1]
c00096b8:	85 db                	test   ebx,ebx
c00096ba:	89 15 84 1e 02 c0    	mov    DWORD PTR ds:0xc0021e84,edx
c00096c0:	74 24                	je     c00096e6 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096c2:	39 df                	cmp    edi,ebx
c00096c4:	75 d7                	jne    c000969d <Virt::allocateKernelVirtualPages(int)+0xac>
c00096c6:	6a 03                	push   0x3
c00096c8:	83 c3 01             	add    ebx,0x1
c00096cb:	50                   	push   eax
c00096cc:	e8 c3 fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d1:	59                   	pop    ecx
c00096d2:	5e                   	pop    esi
c00096d3:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096d7:	75 d7                	jne    c00096b0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096d9:	83 c4 0c             	add    esp,0xc
c00096dc:	89 e8                	mov    eax,ebp
c00096de:	c1 e0 0c             	shl    eax,0xc
c00096e1:	5b                   	pop    ebx
c00096e2:	5e                   	pop    esi
c00096e3:	5f                   	pop    edi
c00096e4:	5d                   	pop    ebp
c00096e5:	c3                   	ret    
c00096e6:	6a 02                	push   0x2
c00096e8:	bb 01 00 00 00       	mov    ebx,0x1
c00096ed:	50                   	push   eax
c00096ee:	e8 a1 fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f3:	58                   	pop    eax
c00096f4:	5a                   	pop    edx
c00096f5:	eb b9                	jmp    c00096b0 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f7:	6a 04                	push   0x4
c00096f9:	8d 45 01             	lea    eax,[ebp+0x1]
c00096fc:	55                   	push   ebp
c00096fd:	a3 84 1e 02 c0       	mov    ds:0xc0021e84,eax
c0009702:	e8 8d fe ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009707:	5b                   	pop    ebx
c0009708:	5e                   	pop    esi
c0009709:	89 e8                	mov    eax,ebp
c000970b:	c1 e0 0c             	shl    eax,0xc
c000970e:	83 c4 0c             	add    esp,0xc
c0009711:	5b                   	pop    ebx
c0009712:	5e                   	pop    esi
c0009713:	5f                   	pop    edi
c0009714:	5d                   	pop    ebp
c0009715:	c3                   	ret    

c0009716 <Virt::freeSwapfilePage(unsigned long)>:
c0009716:	53                   	push   ebx
c0009717:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	b8 01 00 00 00       	mov    eax,0x1
c0009726:	89 cb                	mov    ebx,ecx
c0009728:	c1 eb 05             	shr    ebx,0x5
c000972b:	d3 e0                	shl    eax,cl
c000972d:	f7 d0                	not    eax
c000972f:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009732:	21 c1                	and    ecx,eax
c0009734:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009737:	5b                   	pop    ebx
c0009738:	c3                   	ret    

c0009739 <Virt::swapIDToSector(unsigned long)>:
c0009739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973d:	8b 15 8c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e8c
c0009743:	0f af c2             	imul   eax,edx
c0009746:	8b 0d 94 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e94
c000974c:	01 c8                	add    eax,ecx
c000974e:	c3                   	ret    

c000974f <Virt::allocateSwapfilePage()>:
c000974f:	55                   	push   ebp
c0009750:	31 d2                	xor    edx,edx
c0009752:	57                   	push   edi
c0009753:	56                   	push   esi
c0009754:	53                   	push   ebx
c0009755:	83 ec 0c             	sub    esp,0xc
c0009758:	8b 0d 8c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e8c
c000975e:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c0009763:	f7 f1                	div    ecx
c0009765:	39 0d 90 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e90,ecx
c000976b:	72 2f                	jb     c000979c <Virt::allocateSwapfilePage()+0x4d>
c000976d:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009773:	8b 16                	mov    edx,DWORD PTR [esi]
c0009775:	f6 c2 01             	test   dl,0x1
c0009778:	74 3e                	je     c00097b8 <Virt::allocateSwapfilePage()+0x69>
c000977a:	31 c9                	xor    ecx,ecx
c000977c:	bf 01 00 00 00       	mov    edi,0x1
c0009781:	eb 12                	jmp    c0009795 <Virt::allocateSwapfilePage()+0x46>
c0009783:	89 ca                	mov    edx,ecx
c0009785:	89 fd                	mov    ebp,edi
c0009787:	c1 ea 05             	shr    edx,0x5
c000978a:	d3 e5                	shl    ebp,cl
c000978c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000978f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009791:	85 ea                	test   edx,ebp
c0009793:	74 2c                	je     c00097c1 <Virt::allocateSwapfilePage()+0x72>
c0009795:	83 c1 01             	add    ecx,0x1
c0009798:	39 c8                	cmp    eax,ecx
c000979a:	77 e7                	ja     c0009783 <Virt::allocateSwapfilePage()+0x34>
c000979c:	83 ec 0c             	sub    esp,0xc
c000979f:	68 4f ff 01 c0       	push   0xc001ff4f
c00097a4:	e8 96 70 00 00       	call   c001083f <KePanic(char const*)>
c00097a9:	83 c4 10             	add    esp,0x10
c00097ac:	31 c9                	xor    ecx,ecx
c00097ae:	83 c4 0c             	add    esp,0xc
c00097b1:	89 c8                	mov    eax,ecx
c00097b3:	5b                   	pop    ebx
c00097b4:	5e                   	pop    esi
c00097b5:	5f                   	pop    edi
c00097b6:	5d                   	pop    ebp
c00097b7:	c3                   	ret    
c00097b8:	89 f3                	mov    ebx,esi
c00097ba:	bd 01 00 00 00       	mov    ebp,0x1
c00097bf:	31 c9                	xor    ecx,ecx
c00097c1:	09 ea                	or     edx,ebp
c00097c3:	89 c8                	mov    eax,ecx
c00097c5:	89 13                	mov    DWORD PTR [ebx],edx
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	5b                   	pop    ebx
c00097cb:	5e                   	pop    esi
c00097cc:	5f                   	pop    edi
c00097cd:	5d                   	pop    ebp
c00097ce:	c3                   	ret    

c00097cf <Virt::virtualMemorySetup()>:
c00097cf:	53                   	push   ebx
c00097d0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097d5:	6a 0f                	push   0xf
c00097d7:	53                   	push   ebx
c00097d8:	83 c3 01             	add    ebx,0x1
c00097db:	e8 b4 fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e8:	75 eb                	jne    c00097d5 <Virt::virtualMemorySetup()+0x6>
c00097ea:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ef:	6a 00                	push   0x0
c00097f1:	53                   	push   ebx
c00097f2:	83 c3 01             	add    ebx,0x1
c00097f5:	e8 9a fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009802:	75 eb                	jne    c00097ef <Virt::virtualMemorySetup()+0x20>
c0009804:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009809:	6a 0f                	push   0xf
c000980b:	53                   	push   ebx
c000980c:	83 c3 01             	add    ebx,0x1
c000980f:	e8 80 fd ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000981c:	75 eb                	jne    c0009809 <Virt::virtualMemorySetup()+0x3a>
c000981e:	5b                   	pop    ebx
c000981f:	c3                   	ret    

c0009820 <Virt::setupPageSwapping(int)>:
c0009820:	53                   	push   ebx
c0009821:	83 ec 0c             	sub    esp,0xc
c0009824:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000982d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009833:	8b 10                	mov    edx,DWORD PTR [eax]
c0009835:	53                   	push   ebx
c0009836:	c1 e3 0b             	shl    ebx,0xb
c0009839:	68 66 ff 01 c0       	push   0xc001ff66
c000983e:	50                   	push   eax
c000983f:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009842:	89 1d 90 1e 02 c0    	mov    DWORD PTR ds:0xc0021e90,ebx
c0009848:	c6 05 98 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e98,0x43
c000984f:	c1 eb 08             	shr    ebx,0x8
c0009852:	a3 94 1e 02 c0       	mov    ds:0xc0021e94,eax
c0009857:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000985a:	c7 05 8c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e8c,0x8
c0009864:	e8 23 e2 ff ff       	call   c0007a8c <malloc>
c0009869:	31 d2                	xor    edx,edx
c000986b:	89 c1                	mov    ecx,eax
c000986d:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c0009872:	a1 90 1e 02 c0       	mov    eax,ds:0xc0021e90
c0009877:	83 c4 0c             	add    esp,0xc
c000987a:	f7 35 8c 1e 02 c0    	div    DWORD PTR ds:0xc0021e8c
c0009880:	c1 e8 05             	shr    eax,0x5
c0009883:	50                   	push   eax
c0009884:	6a 00                	push   0x0
c0009886:	51                   	push   ecx
c0009887:	e8 54 6c ff ff       	call   c00004e0 <memset>
c000988c:	83 c4 18             	add    esp,0x18
c000988f:	5b                   	pop    ebx
c0009890:	c3                   	ret    
c0009891:	90                   	nop

c0009892 <VAS::VAS(VAS*)>:
c0009892:	83 ec 0c             	sub    esp,0xc
c0009895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009899:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098ab:	83 ec 0c             	sub    esp,0xc
c00098ae:	68 08 fe 01 c0       	push   0xc001fe08
c00098b3:	e8 87 6f 00 00       	call   c001083f <KePanic(char const*)>
c00098b8:	83 c4 10             	add    esp,0x10
c00098bb:	90                   	nop
c00098bc:	83 c4 0c             	add    esp,0xc
c00098bf:	c3                   	ret    

c00098c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c4:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c9:	89 c2                	mov    edx,eax
c00098cb:	c1 ea 16             	shr    edx,0x16
c00098ce:	c1 e8 0a             	shr    eax,0xa
c00098d1:	83 f9 01             	cmp    ecx,0x1
c00098d4:	19 c9                	sbb    ecx,ecx
c00098d6:	25 fc 0f 00 00       	and    eax,0xffc
c00098db:	c1 e2 0c             	shl    edx,0xc
c00098de:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e4:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098eb:	01 d0                	add    eax,edx
c00098ed:	c3                   	ret    

c00098ee <VAS::getPageTableEntry(unsigned long)>:
c00098ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098f2:	89 ca                	mov    edx,ecx
c00098f4:	c1 ea 16             	shr    edx,0x16
c00098f7:	c1 e9 0a             	shr    ecx,0xa
c00098fa:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009900:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009906:	c1 e0 0c             	shl    eax,0xc
c0009909:	8d 04 08             	lea    eax,[eax+ecx*1]
c000990c:	c3                   	ret    

c000990d <Virt::freeKernelVirtualPages(unsigned long)>:
c000990d:	55                   	push   ebp
c000990e:	57                   	push   edi
c000990f:	bf 01 00 00 00       	mov    edi,0x1
c0009914:	56                   	push   esi
c0009915:	53                   	push   ebx
c0009916:	83 ec 0c             	sub    esp,0xc
c0009919:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000991d:	c1 ee 0c             	shr    esi,0xc
c0009920:	eb 3a                	jmp    c000995c <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c0009922:	83 ec 08             	sub    esp,0x8
c0009925:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000992a:	55                   	push   ebp
c000992b:	50                   	push   eax
c000992c:	e8 bd ff ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009931:	83 c4 10             	add    esp,0x10
c0009934:	8b 00                	mov    eax,DWORD PTR [eax]
c0009936:	f6 c4 04             	test   ah,0x4
c0009939:	75 5a                	jne    c0009995 <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c000993b:	83 fb 04             	cmp    ebx,0x4
c000993e:	74 6b                	je     c00099ab <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009940:	83 fb 02             	cmp    ebx,0x2
c0009943:	74 7f                	je     c00099c4 <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c0009945:	83 fb 03             	cmp    ebx,0x3
c0009948:	0f 84 a3 00 00 00    	je     c00099f1 <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c000994e:	83 fb 01             	cmp    ebx,0x1
c0009951:	0f 84 87 00 00 00    	je     c00099de <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c0009957:	83 c6 01             	add    esi,0x1
c000995a:	31 ff                	xor    edi,edi
c000995c:	56                   	push   esi
c000995d:	e8 6c fc ff ff       	call   c00095ce <Virt::getPageState(unsigned long)>
c0009962:	89 f5                	mov    ebp,esi
c0009964:	5a                   	pop    edx
c0009965:	0f b6 d8             	movzx  ebx,al
c0009968:	c1 e5 0c             	shl    ebp,0xc
c000996b:	85 db                	test   ebx,ebx
c000996d:	75 b3                	jne    c0009922 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000996f:	83 ec 0c             	sub    esp,0xc
c0009972:	68 7d ff 01 c0       	push   0xc001ff7d
c0009977:	e8 c3 6e 00 00       	call   c001083f <KePanic(char const*)>
c000997c:	5a                   	pop    edx
c000997d:	59                   	pop    ecx
c000997e:	55                   	push   ebp
c000997f:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c0009985:	55                   	push   ebp
c0009986:	e8 63 ff ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009990:	f6 c4 04             	test   ah,0x4
c0009993:	74 c2                	je     c0009957 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009995:	83 ec 0c             	sub    esp,0xc
c0009998:	25 00 f0 ff ff       	and    eax,0xfffff000
c000999d:	50                   	push   eax
c000999e:	e8 85 e3 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c00099a3:	83 c4 10             	add    esp,0x10
c00099a6:	83 fb 04             	cmp    ebx,0x4
c00099a9:	75 95                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099ab:	83 e7 01             	and    edi,0x1
c00099ae:	75 46                	jne    c00099f6 <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099b0:	c7 44 24 20 2c fe 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fe2c
c00099b8:	83 c4 0c             	add    esp,0xc
c00099bb:	5b                   	pop    ebx
c00099bc:	5e                   	pop    esi
c00099bd:	5f                   	pop    edi
c00099be:	5d                   	pop    ebp
c00099bf:	e9 7b 6e 00 00       	jmp    c001083f <KePanic(char const*)>
c00099c4:	83 e7 01             	and    edi,0x1
c00099c7:	75 15                	jne    c00099de <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099c9:	83 ec 0c             	sub    esp,0xc
c00099cc:	68 99 ff 01 c0       	push   0xc001ff99
c00099d1:	e8 69 6e 00 00       	call   c001083f <KePanic(char const*)>
c00099d6:	83 c4 10             	add    esp,0x10
c00099d9:	e9 79 ff ff ff       	jmp    c0009957 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099de:	83 ec 08             	sub    esp,0x8
c00099e1:	6a 00                	push   0x0
c00099e3:	56                   	push   esi
c00099e4:	e8 ab fb ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00099e9:	83 c4 10             	add    esp,0x10
c00099ec:	e9 66 ff ff ff       	jmp    c0009957 <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099f1:	83 e7 01             	and    edi,0x1
c00099f4:	75 16                	jne    c0009a0c <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c00099f6:	83 ec 08             	sub    esp,0x8
c00099f9:	6a 00                	push   0x0
c00099fb:	56                   	push   esi
c00099fc:	e8 93 fb ff ff       	call   c0009594 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	83 c4 0c             	add    esp,0xc
c0009a07:	5b                   	pop    ebx
c0009a08:	5e                   	pop    esi
c0009a09:	5f                   	pop    edi
c0009a0a:	5d                   	pop    ebp
c0009a0b:	c3                   	ret    
c0009a0c:	c7 44 24 20 b5 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ffb5
c0009a14:	83 c4 0c             	add    esp,0xc
c0009a17:	5b                   	pop    ebx
c0009a18:	5e                   	pop    esi
c0009a19:	5f                   	pop    edi
c0009a1a:	5d                   	pop    ebp
c0009a1b:	e9 1f 6e 00 00       	jmp    c001083f <KePanic(char const*)>

c0009a20 <VAS::freeAllocatedPages(unsigned long)>:
c0009a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a28:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a2c:	74 09                	je     c0009a37 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a2e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a32:	e9 d6 fe ff ff       	jmp    c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009a37:	c7 44 24 04 50 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe50
c0009a3f:	e9 0f 0f 00 00       	jmp    c000a953 <Dbg::kprintf(char const*, ...)>

c0009a44 <VAS::virtualToPhysical(unsigned long)>:
c0009a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a48:	50                   	push   eax
c0009a49:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4d:	52                   	push   edx
c0009a4e:	e8 9b fe ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009a53:	59                   	pop    ecx
c0009a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a56:	5a                   	pop    edx
c0009a57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a5c:	c3                   	ret    
c0009a5d:	90                   	nop

c0009a5e <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a5e:	55                   	push   ebp
c0009a5f:	57                   	push   edi
c0009a60:	56                   	push   esi
c0009a61:	53                   	push   ebx
c0009a62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a66:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a6a:	89 c3                	mov    ebx,eax
c0009a6c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a70:	c1 e3 0c             	shl    ebx,0xc
c0009a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a77:	01 f3                	add    ebx,esi
c0009a79:	85 c0                	test   eax,eax
c0009a7b:	7e 1f                	jle    c0009a9c <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c0009a7d:	56                   	push   esi
c0009a7e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a84:	55                   	push   ebp
c0009a85:	e8 64 fe ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c0009a8a:	5a                   	pop    edx
c0009a8b:	59                   	pop    ecx
c0009a8c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009a8e:	21 f9                	and    ecx,edi
c0009a90:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009a94:	09 d1                	or     ecx,edx
c0009a96:	39 f3                	cmp    ebx,esi
c0009a98:	89 08                	mov    DWORD PTR [eax],ecx
c0009a9a:	75 e1                	jne    c0009a7d <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009a9c:	5b                   	pop    ebx
c0009a9d:	5e                   	pop    esi
c0009a9e:	5f                   	pop    edi
c0009a9f:	5d                   	pop    ebp
c0009aa0:	c3                   	ret    
c0009aa1:	90                   	nop

c0009aa2 <VAS::VAS()>:
c0009aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aa6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ab1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abc:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009acd:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009adb:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009ae0:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009ae5:	29 c2                	sub    edx,eax
c0009ae7:	89 d0                	mov    eax,edx
c0009ae9:	05 ff 0f 00 00       	add    eax,0xfff
c0009aee:	c1 e8 0c             	shr    eax,0xc
c0009af1:	89 c2                	mov    edx,eax
c0009af3:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009af8:	6a 04                	push   0x4
c0009afa:	6a ff                	push   0xffffffff
c0009afc:	52                   	push   edx
c0009afd:	50                   	push   eax
c0009afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b02:	e8 57 ff ff ff       	call   c0009a5e <VAS::reflagRange(unsigned long, int, int, int)>
c0009b07:	83 c4 14             	add    esp,0x14
c0009b0a:	90                   	nop
c0009b0b:	c3                   	ret    

c0009b0c <VAS::setToWriteCombining(unsigned long, int)>:
c0009b0c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b11:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b17:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b1e:	75 01                	jne    c0009b21 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b20:	c3                   	ret    
c0009b21:	68 80 00 00 00       	push   0x80
c0009b26:	6a ff                	push   0xffffffff
c0009b28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b2c:	50                   	push   eax
c0009b2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b31:	52                   	push   edx
c0009b32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b36:	51                   	push   ecx
c0009b37:	e8 22 ff ff ff       	call   c0009a5e <VAS::reflagRange(unsigned long, int, int, int)>
c0009b3c:	83 c4 14             	add    esp,0x14
c0009b3f:	c3                   	ret    

c0009b40 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b44:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b4b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b53:	83 f8 01             	cmp    eax,0x1
c0009b56:	19 c0                	sbb    eax,eax
c0009b58:	83 ca 03             	or     edx,0x3
c0009b5b:	83 e0 fc             	and    eax,0xfffffffc
c0009b5e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b65:	0f 20 d8             	mov    eax,cr3
c0009b68:	0f 22 d8             	mov    cr3,eax
c0009b6b:	c3                   	ret    

c0009b6c <VAS::~VAS()>:
c0009b6c:	83 ec 2c             	sub    esp,0x2c
c0009b6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b77:	fa                   	cli    
c0009b78:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b7d:	83 c0 01             	add    eax,0x1
c0009b80:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b85:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009b8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b8c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009b8f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009b95:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009b99:	6a 01                	push   0x1
c0009b9b:	50                   	push   eax
c0009b9c:	e8 9f ff ff ff       	call   c0009b40 <VAS::mapOtherVASIn(bool, VAS*)>
c0009ba1:	83 c4 0c             	add    esp,0xc
c0009ba4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bac:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bb4:	0f 8f d8 00 00 00    	jg     c0009c92 <VAS::~VAS()+0x126>
c0009bba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bc1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bc5:	c1 e2 02             	shl    edx,0x2
c0009bc8:	01 d0                	add    eax,edx
c0009bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bd4:	83 e0 01             	and    eax,0x1
c0009bd7:	0f 84 ab 00 00 00    	je     c0009c88 <VAS::~VAS()+0x11c>
c0009bdd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009be5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009bed:	7f 74                	jg     c0009c63 <VAS::~VAS()+0xf7>
c0009bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf3:	c1 e0 0a             	shl    eax,0xa
c0009bf6:	89 c2                	mov    edx,eax
c0009bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009bfc:	01 d0                	add    eax,edx
c0009bfe:	c1 e0 0c             	shl    eax,0xc
c0009c01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c05:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c0f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c19:	6a 01                	push   0x1
c0009c1b:	50                   	push   eax
c0009c1c:	e8 9f fc ff ff       	call   c00098c0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c21:	83 c4 0c             	add    esp,0xc
c0009c24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c36:	25 01 04 00 00       	and    eax,0x401
c0009c3b:	3d 01 04 00 00       	cmp    eax,0x401
c0009c40:	75 1a                	jne    c0009c5c <VAS::~VAS()+0xf0>
c0009c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c4b:	83 ec 0c             	sub    esp,0xc
c0009c4e:	50                   	push   eax
c0009c4f:	e8 d4 e0 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c0009c54:	83 c4 10             	add    esp,0x10
c0009c57:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c5c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c61:	eb 82                	jmp    c0009be5 <VAS::~VAS()+0x79>
c0009c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c67:	25 00 04 00 00       	and    eax,0x400
c0009c6c:	74 1a                	je     c0009c88 <VAS::~VAS()+0x11c>
c0009c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c77:	83 ec 0c             	sub    esp,0xc
c0009c7a:	50                   	push   eax
c0009c7b:	e8 a8 e0 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c0009c80:	83 c4 10             	add    esp,0x10
c0009c83:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c88:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009c8d:	e9 1a ff ff ff       	jmp    c0009bac <VAS::~VAS()+0x40>
c0009c92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c99:	83 ec 0c             	sub    esp,0xc
c0009c9c:	50                   	push   eax
c0009c9d:	e8 6b fc ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009ca2:	83 c4 10             	add    esp,0x10
c0009ca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ca9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cac:	83 ec 0c             	sub    esp,0xc
c0009caf:	50                   	push   eax
c0009cb0:	e8 73 e0 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c0009cb5:	83 c4 10             	add    esp,0x10
c0009cb8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cbd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cc2:	83 e8 01             	sub    eax,0x1
c0009cc5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009cca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ccf:	85 c0                	test   eax,eax
c0009cd1:	75 01                	jne    c0009cd4 <VAS::~VAS()+0x168>
c0009cd3:	fb                   	sti    
c0009cd4:	90                   	nop
c0009cd5:	83 c4 2c             	add    esp,0x2c
c0009cd8:	c3                   	ret    
c0009cd9:	90                   	nop

c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cda:	55                   	push   ebp
c0009cdb:	57                   	push   edi
c0009cdc:	56                   	push   esi
c0009cdd:	53                   	push   ebx
c0009cde:	83 ec 1c             	sub    esp,0x1c
c0009ce1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009ce5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ce9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009cef:	77 0b                	ja     c0009cfc <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009cf1:	0f 20 d8             	mov    eax,cr3
c0009cf4:	0f 20 d8             	mov    eax,cr3
c0009cf7:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009cfa:	75 49                	jne    c0009d45 <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009cfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d00:	09 d8                	or     eax,ebx
c0009d02:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d07:	75 59                	jne    c0009d62 <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d09:	89 de                	mov    esi,ebx
c0009d0b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d0e:	c1 ee 16             	shr    esi,0x16
c0009d11:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d18:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d1c:	74 56                	je     c0009d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d1e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d28:	c1 eb 0a             	shr    ebx,0xa
c0009d2b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d2f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d35:	09 d0                	or     eax,edx
c0009d37:	c1 e6 0c             	shl    esi,0xc
c0009d3a:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d3d:	83 c4 1c             	add    esp,0x1c
c0009d40:	5b                   	pop    ebx
c0009d41:	5e                   	pop    esi
c0009d42:	5f                   	pop    edi
c0009d43:	5d                   	pop    ebp
c0009d44:	c3                   	ret    
c0009d45:	83 ec 0c             	sub    esp,0xc
c0009d48:	68 74 fe 01 c0       	push   0xc001fe74
c0009d4d:	e8 01 0c 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0009d52:	83 c4 10             	add    esp,0x10
c0009d55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d59:	09 d8                	or     eax,ebx
c0009d5b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d60:	74 a7                	je     c0009d09 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d62:	83 ec 0c             	sub    esp,0xc
c0009d65:	68 dc fe 01 c0       	push   0xc001fedc
c0009d6a:	e8 d0 6a 00 00       	call   c001083f <KePanic(char const*)>
c0009d6f:	83 c4 10             	add    esp,0x10
c0009d72:	eb 95                	jmp    c0009d09 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d78:	e8 14 e0 ff ff       	call   c0007d91 <Phys::allocatePage()>
c0009d7d:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d83:	83 ec 0c             	sub    esp,0xc
c0009d86:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d8a:	89 c5                	mov    ebp,eax
c0009d8c:	6a 01                	push   0x1
c0009d8e:	e8 5e f8 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0009d93:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d9a:	6a 01                	push   0x1
c0009d9c:	50                   	push   eax
c0009d9d:	55                   	push   ebp
c0009d9e:	81 cd 07 04 00 00    	or     ebp,0x407
c0009da4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009da8:	51                   	push   ecx
c0009da9:	e8 40 02 00 00       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dae:	83 c4 1c             	add    esp,0x1c
c0009db1:	68 00 10 00 00       	push   0x1000
c0009db6:	6a 00                	push   0x0
c0009db8:	50                   	push   eax
c0009db9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dbd:	e8 1e 67 ff ff       	call   c00004e0 <memset>
c0009dc2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dc6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dc9:	e8 3f fb ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c0009dce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dd2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dd5:	83 c4 10             	add    esp,0x10
c0009dd8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009ddb:	e9 3e ff ff ff       	jmp    c0009d1e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009de0 <VAS::allocatePages(int, int)>:
c0009de0:	55                   	push   ebp
c0009de1:	57                   	push   edi
c0009de2:	56                   	push   esi
c0009de3:	53                   	push   ebx
c0009de4:	83 ec 1c             	sub    esp,0x1c
c0009de7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009dec:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009df0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009df6:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009dfc:	83 e0 01             	and    eax,0x1
c0009dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e03:	89 c7                	mov    edi,eax
c0009e05:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e09:	0f 85 d6 00 00 00    	jne    c0009ee5 <VAS::allocatePages(int, int)+0x105>
c0009e0f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e16:	85 c0                	test   eax,eax
c0009e18:	0f 84 ab 00 00 00    	je     c0009ec9 <VAS::allocatePages(int, int)+0xe9>
c0009e1e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e22:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e26:	c1 e6 0c             	shl    esi,0xc
c0009e29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e2d:	01 de                	add    esi,ebx
c0009e2f:	85 c0                	test   eax,eax
c0009e31:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e34:	7e 3a                	jle    c0009e70 <VAS::allocatePages(int, int)+0x90>
c0009e36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e3a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e3e:	80 cc 04             	or     ah,0x4
c0009e41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e45:	89 f8                	mov    eax,edi
c0009e47:	0f b6 f8             	movzx  edi,al
c0009e4a:	e8 42 df ff ff       	call   c0007d91 <Phys::allocatePage()>
c0009e4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e53:	52                   	push   edx
c0009e54:	53                   	push   ebx
c0009e55:	50                   	push   eax
c0009e56:	55                   	push   ebp
c0009e57:	e8 7e fe ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e5c:	83 c4 10             	add    esp,0x10
c0009e5f:	85 ff                	test   edi,edi
c0009e61:	74 03                	je     c0009e66 <VAS::allocatePages(int, int)+0x86>
c0009e63:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e66:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e6c:	39 de                	cmp    esi,ebx
c0009e6e:	75 da                	jne    c0009e4a <VAS::allocatePages(int, int)+0x6a>
c0009e70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e74:	85 c9                	test   ecx,ecx
c0009e76:	75 12                	jne    c0009e8a <VAS::allocatePages(int, int)+0xaa>
c0009e78:	0f 20 d8             	mov    eax,cr3
c0009e7b:	0f 22 d8             	mov    cr3,eax
c0009e7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e82:	83 c4 1c             	add    esp,0x1c
c0009e85:	5b                   	pop    ebx
c0009e86:	5e                   	pop    esi
c0009e87:	5f                   	pop    edi
c0009e88:	5d                   	pop    ebp
c0009e89:	c3                   	ret    
c0009e8a:	c1 ee 0a             	shr    esi,0xa
c0009e8d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e91:	c1 eb 0a             	shr    ebx,0xa
c0009e94:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009e9a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ea0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ea6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eac:	39 c3                	cmp    ebx,eax
c0009eae:	77 ce                	ja     c0009e7e <VAS::allocatePages(int, int)+0x9e>
c0009eb0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009eb3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eb9:	39 d8                	cmp    eax,ebx
c0009ebb:	73 f3                	jae    c0009eb0 <VAS::allocatePages(int, int)+0xd0>
c0009ebd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ec1:	83 c4 1c             	add    esp,0x1c
c0009ec4:	5b                   	pop    ebx
c0009ec5:	5e                   	pop    esi
c0009ec6:	5f                   	pop    edi
c0009ec7:	5d                   	pop    ebp
c0009ec8:	c3                   	ret    
c0009ec9:	83 ec 0c             	sub    esp,0xc
c0009ecc:	68 00 ff 01 c0       	push   0xc001ff00
c0009ed1:	e8 69 69 00 00       	call   c001083f <KePanic(char const*)>
c0009ed6:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009ed9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	e9 39 ff ff ff       	jmp    c0009e1e <VAS::allocatePages(int, int)+0x3e>
c0009ee5:	83 ec 0c             	sub    esp,0xc
c0009ee8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eec:	50                   	push   eax
c0009eed:	e8 ff f6 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c0009ef2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009efe:	0f 87 a4 00 00 00    	ja     c0009fa8 <VAS::allocatePages(int, int)+0x1c8>
c0009f04:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f08:	85 c0                	test   eax,eax
c0009f0a:	7e 44                	jle    c0009f50 <VAS::allocatePages(int, int)+0x170>
c0009f0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f10:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f14:	c1 e0 0c             	shl    eax,0xc
c0009f17:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f1b:	01 d8                	add    eax,ebx
c0009f1d:	81 ce 00 04 00 00    	or     esi,0x400
c0009f23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f27:	89 f8                	mov    eax,edi
c0009f29:	0f b6 f8             	movzx  edi,al
c0009f2c:	e8 60 de ff ff       	call   c0007d91 <Phys::allocatePage()>
c0009f31:	56                   	push   esi
c0009f32:	53                   	push   ebx
c0009f33:	50                   	push   eax
c0009f34:	55                   	push   ebp
c0009f35:	e8 a0 fd ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f3a:	83 c4 10             	add    esp,0x10
c0009f3d:	85 ff                	test   edi,edi
c0009f3f:	74 03                	je     c0009f44 <VAS::allocatePages(int, int)+0x164>
c0009f41:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f44:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f4a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f4e:	75 dc                	jne    c0009f2c <VAS::allocatePages(int, int)+0x14c>
c0009f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f54:	85 c0                	test   eax,eax
c0009f56:	0f 84 1c ff ff ff    	je     c0009e78 <VAS::allocatePages(int, int)+0x98>
c0009f5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f64:	c1 e0 0c             	shl    eax,0xc
c0009f67:	89 d3                	mov    ebx,edx
c0009f69:	c1 eb 0a             	shr    ebx,0xa
c0009f6c:	01 d0                	add    eax,edx
c0009f6e:	c1 e8 0a             	shr    eax,0xa
c0009f71:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f77:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f7c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f82:	2d 00 00 40 00       	sub    eax,0x400000
c0009f87:	39 c3                	cmp    ebx,eax
c0009f89:	0f 87 ef fe ff ff    	ja     c0009e7e <VAS::allocatePages(int, int)+0x9e>
c0009f8f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f92:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f98:	39 d8                	cmp    eax,ebx
c0009f9a:	73 f3                	jae    c0009f8f <VAS::allocatePages(int, int)+0x1af>
c0009f9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fa0:	83 c4 1c             	add    esp,0x1c
c0009fa3:	5b                   	pop    ebx
c0009fa4:	5e                   	pop    esi
c0009fa5:	5f                   	pop    edi
c0009fa6:	5d                   	pop    ebp
c0009fa7:	c3                   	ret    
c0009fa8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb3:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fba:	0f 84 44 ff ff ff    	je     c0009f04 <VAS::allocatePages(int, int)+0x124>
c0009fc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fc4:	80 cc 01             	or     ah,0x1
c0009fc7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fcb:	e9 34 ff ff ff       	jmp    c0009f04 <VAS::allocatePages(int, int)+0x124>

c0009fd0 <VAS::setCPUSpecific(unsigned long)>:
c0009fd0:	83 ec 0c             	sub    esp,0xc
c0009fd3:	6a 05                	push   0x5
c0009fd5:	68 00 00 40 c2       	push   0xc2400000
c0009fda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fde:	50                   	push   eax
c0009fdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009fe3:	52                   	push   edx
c0009fe4:	e8 f1 fc ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fe9:	83 c4 1c             	add    esp,0x1c
c0009fec:	c3                   	ret    
c0009fed:	90                   	nop

c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009fee:	55                   	push   ebp
c0009fef:	57                   	push   edi
c0009ff0:	56                   	push   esi
c0009ff1:	53                   	push   ebx
c0009ff2:	83 ec 1c             	sub    esp,0x1c
c0009ff5:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009ffa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009ffe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a002:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a008:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a00c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a012:	83 e0 01             	and    eax,0x1
c000a015:	85 db                	test   ebx,ebx
c000a017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a01b:	7e 43                	jle    c000a060 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a01d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a021:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a025:	c1 e2 0c             	shl    edx,0xc
c000a028:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a02c:	01 ca                	add    edx,ecx
c000a02e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a032:	0f b6 f0             	movzx  esi,al
c000a035:	55                   	push   ebp
c000a036:	53                   	push   ebx
c000a037:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a03b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a03f:	29 d0                	sub    eax,edx
c000a041:	01 d8                	add    eax,ebx
c000a043:	50                   	push   eax
c000a044:	57                   	push   edi
c000a045:	e8 90 fc ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c000a04a:	83 c4 10             	add    esp,0x10
c000a04d:	85 f6                	test   esi,esi
c000a04f:	74 03                	je     c000a054 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a051:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a054:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a05a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a05e:	75 d5                	jne    c000a035 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a060:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a064:	85 c9                	test   ecx,ecx
c000a066:	75 12                	jne    c000a07a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a068:	0f 20 d8             	mov    eax,cr3
c000a06b:	0f 22 d8             	mov    cr3,eax
c000a06e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a072:	83 c4 1c             	add    esp,0x1c
c000a075:	5b                   	pop    ebx
c000a076:	5e                   	pop    esi
c000a077:	5f                   	pop    edi
c000a078:	5d                   	pop    ebp
c000a079:	c3                   	ret    
c000a07a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a07e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a082:	c1 e0 0c             	shl    eax,0xc
c000a085:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a089:	c1 eb 0a             	shr    ebx,0xa
c000a08c:	01 d0                	add    eax,edx
c000a08e:	c1 e8 0a             	shr    eax,0xa
c000a091:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a097:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a09c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0a2:	2d 00 00 40 00       	sub    eax,0x400000
c000a0a7:	39 c3                	cmp    ebx,eax
c000a0a9:	77 c3                	ja     c000a06e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0ab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0b4:	39 d8                	cmp    eax,ebx
c000a0b6:	73 f3                	jae    c000a0ab <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0bc:	83 c4 1c             	add    esp,0x1c
c000a0bf:	5b                   	pop    ebx
c000a0c0:	5e                   	pop    esi
c000a0c1:	5f                   	pop    edi
c000a0c2:	5d                   	pop    ebp
c000a0c3:	c3                   	ret    

c000a0c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0c4:	55                   	push   ebp
c000a0c5:	57                   	push   edi
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 1c             	sub    esp,0x1c
c000a0cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0cf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0d3:	09 f8                	or     eax,edi
c000a0d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a0d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a0dd:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0e2:	75 4f                	jne    c000a133 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0e8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a0eb:	c1 eb 16             	shr    ebx,0x16
c000a0ee:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a0f5:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a0f9:	74 52                	je     c000a14d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a0fb:	0f b6 f2             	movzx  esi,dl
c000a0fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a102:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a106:	c1 e8 0a             	shr    eax,0xa
c000a109:	83 fe 01             	cmp    esi,0x1
c000a10c:	19 d2                	sbb    edx,edx
c000a10e:	25 fc 0f 00 00       	and    eax,0xffc
c000a113:	c1 e3 0c             	shl    ebx,0xc
c000a116:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a11c:	01 d8                	add    eax,ebx
c000a11e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a122:	09 d9                	or     ecx,ebx
c000a124:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a12b:	83 c4 1c             	add    esp,0x1c
c000a12e:	5b                   	pop    ebx
c000a12f:	5e                   	pop    esi
c000a130:	5f                   	pop    edi
c000a131:	5d                   	pop    ebp
c000a132:	c3                   	ret    
c000a133:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a137:	83 ec 0c             	sub    esp,0xc
c000a13a:	68 2c ff 01 c0       	push   0xc001ff2c
c000a13f:	e8 fb 66 00 00       	call   c001083f <KePanic(char const*)>
c000a144:	83 c4 10             	add    esp,0x10
c000a147:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a14b:	eb 97                	jmp    c000a0e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a14d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a151:	e8 3b dc ff ff       	call   c0007d91 <Phys::allocatePage()>
c000a156:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a15c:	83 ec 0c             	sub    esp,0xc
c000a15f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a163:	89 c5                	mov    ebp,eax
c000a165:	6a 01                	push   0x1
c000a167:	e8 85 f4 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000a16c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a173:	6a 01                	push   0x1
c000a175:	50                   	push   eax
c000a176:	55                   	push   ebp
c000a177:	81 cd 07 04 00 00    	or     ebp,0x407
c000a17d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a181:	51                   	push   ecx
c000a182:	e8 67 fe ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a187:	83 c4 1c             	add    esp,0x1c
c000a18a:	68 00 10 00 00       	push   0x1000
c000a18f:	6a 00                	push   0x0
c000a191:	50                   	push   eax
c000a192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a196:	e8 45 63 ff ff       	call   c00004e0 <memset>
c000a19b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a19f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1a2:	e8 66 f7 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c000a1a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1aa:	83 c4 10             	add    esp,0x10
c000a1ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1b1:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1b4:	e9 42 ff ff ff       	jmp    c000a0fb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1b9:	90                   	nop

c000a1ba <VAS::VAS(bool)>:
c000a1ba:	53                   	push   ebx
c000a1bb:	83 ec 28             	sub    esp,0x28
c000a1be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1e0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1e4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1e7:	e8 a5 db ff ff       	call   c0007d91 <Phys::allocatePage()>
c000a1ec:	89 c2                	mov    edx,eax
c000a1ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a1f5:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a1fb:	83 ec 0c             	sub    esp,0xc
c000a1fe:	6a 01                	push   0x1
c000a200:	e8 ec f3 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000a205:	83 c4 10             	add    esp,0x10
c000a208:	89 c2                	mov    edx,eax
c000a20a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a20e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a211:	83 ec 0c             	sub    esp,0xc
c000a214:	6a 03                	push   0x3
c000a216:	6a 01                	push   0x1
c000a218:	52                   	push   edx
c000a219:	50                   	push   eax
c000a21a:	53                   	push   ebx
c000a21b:	e8 ce fd ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a220:	83 c4 20             	add    esp,0x20
c000a223:	89 c2                	mov    edx,eax
c000a225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a229:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a22c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a234:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a23c:	7f 1d                	jg     c000a25b <VAS::VAS(bool)+0xa1>
c000a23e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a242:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a245:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a249:	c1 e2 02             	shl    edx,0x2
c000a24c:	01 d0                	add    eax,edx
c000a24e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a254:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a259:	eb d9                	jmp    c000a234 <VAS::VAS(bool)+0x7a>
c000a25b:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a263:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a26b:	7f 7e                	jg     c000a2eb <VAS::VAS(bool)+0x131>
c000a26d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a271:	2d 00 02 00 00       	sub    eax,0x200
c000a276:	c1 e0 0c             	shl    eax,0xc
c000a279:	83 c8 05             	or     eax,0x5
c000a27c:	89 c2                	mov    edx,eax
c000a27e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a283:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a289:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a28f:	83 e0 10             	and    eax,0x10
c000a292:	0f b6 c0             	movzx  eax,al
c000a295:	85 c0                	test   eax,eax
c000a297:	74 07                	je     c000a2a0 <VAS::VAS(bool)+0xe6>
c000a299:	b8 00 01 00 00       	mov    eax,0x100
c000a29e:	eb 05                	jmp    c000a2a5 <VAS::VAS(bool)+0xeb>
c000a2a0:	b8 00 00 00 00       	mov    eax,0x0
c000a2a5:	09 d0                	or     eax,edx
c000a2a7:	89 c1                	mov    ecx,eax
c000a2a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2b4:	c1 e2 02             	shl    edx,0x2
c000a2b7:	01 d0                	add    eax,edx
c000a2b9:	89 ca                	mov    edx,ecx
c000a2bb:	89 10                	mov    DWORD PTR [eax],edx
c000a2bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2c1:	2d 40 03 00 00       	sub    eax,0x340
c000a2c6:	83 f8 7f             	cmp    eax,0x7f
c000a2c9:	77 16                	ja     c000a2e1 <VAS::VAS(bool)+0x127>
c000a2cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2d6:	c1 e2 02             	shl    edx,0x2
c000a2d9:	01 d0                	add    eax,edx
c000a2db:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2e1:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2e6:	e9 78 ff ff ff       	jmp    c000a263 <VAS::VAS(bool)+0xa9>
c000a2eb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a2f0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a2f6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2fc:	83 e0 10             	and    eax,0x10
c000a2ff:	0f b6 c0             	movzx  eax,al
c000a302:	85 c0                	test   eax,eax
c000a304:	74 07                	je     c000a30d <VAS::VAS(bool)+0x153>
c000a306:	b8 03 41 00 00       	mov    eax,0x4103
c000a30b:	eb 05                	jmp    c000a312 <VAS::VAS(bool)+0x158>
c000a30d:	b8 03 40 00 00       	mov    eax,0x4003
c000a312:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a316:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a319:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a31f:	89 02                	mov    DWORD PTR [edx],eax
c000a321:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a326:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a32c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a332:	83 ec 08             	sub    esp,0x8
c000a335:	50                   	push   eax
c000a336:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a33a:	e8 91 fc ff ff       	call   c0009fd0 <VAS::setCPUSpecific(unsigned long)>
c000a33f:	83 c4 10             	add    esp,0x10
c000a342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a346:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a349:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a354:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a35a:	83 e0 10             	and    eax,0x10
c000a35d:	0f b6 c0             	movzx  eax,al
c000a360:	85 c0                	test   eax,eax
c000a362:	74 07                	je     c000a36b <VAS::VAS(bool)+0x1b1>
c000a364:	b8 00 01 00 00       	mov    eax,0x100
c000a369:	eb 05                	jmp    c000a370 <VAS::VAS(bool)+0x1b6>
c000a36b:	b8 00 00 00 00       	mov    eax,0x0
c000a370:	09 c2                	or     edx,eax
c000a372:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a376:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a379:	05 fc 0f 00 00       	add    eax,0xffc
c000a37e:	83 ca 03             	or     edx,0x3
c000a381:	89 10                	mov    DWORD PTR [eax],edx
c000a383:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a388:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a38e:	83 ec 0c             	sub    esp,0xc
c000a391:	50                   	push   eax
c000a392:	e8 83 1c 00 00       	call   c000c01a <Device::getName()>
c000a397:	83 c4 10             	add    esp,0x10
c000a39a:	83 ec 08             	sub    esp,0x8
c000a39d:	68 cf ff 01 c0       	push   0xc001ffcf
c000a3a2:	50                   	push   eax
c000a3a3:	e8 98 63 ff ff       	call   c0000740 <strcmp>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	85 c0                	test   eax,eax
c000a3ad:	0f 94 c0             	sete   al
c000a3b0:	0f b6 c0             	movzx  eax,al
c000a3b3:	85 c0                	test   eax,eax
c000a3b5:	0f 84 8b 00 00 00    	je     c000a446 <VAS::VAS(bool)+0x28c>
c000a3bb:	fa                   	cli    
c000a3bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3c1:	83 c0 01             	add    eax,0x1
c000a3c4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3c9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3d4:	05 7c 09 00 00       	add    eax,0x97c
c000a3d9:	83 ec 0c             	sub    esp,0xc
c000a3dc:	50                   	push   eax
c000a3dd:	e8 a4 d1 ff ff       	call   c0007586 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3e2:	83 c4 10             	add    esp,0x10
c000a3e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3ea:	89 c3                	mov    ebx,eax
c000a3ec:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3f7:	05 7c 09 00 00       	add    eax,0x97c
c000a3fc:	83 ec 0c             	sub    esp,0xc
c000a3ff:	50                   	push   eax
c000a400:	e8 81 d1 ff ff       	call   c0007586 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a405:	83 c4 10             	add    esp,0x10
c000a408:	83 ec 08             	sub    esp,0x8
c000a40b:	50                   	push   eax
c000a40c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a410:	e8 d9 f4 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a415:	83 c4 10             	add    esp,0x10
c000a418:	8b 00                	mov    eax,DWORD PTR [eax]
c000a41a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a41f:	6a 11                	push   0x11
c000a421:	53                   	push   ebx
c000a422:	50                   	push   eax
c000a423:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a427:	e8 ae f8 ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c000a42c:	83 c4 10             	add    esp,0x10
c000a42f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a434:	83 e8 01             	sub    eax,0x1
c000a437:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a43c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a441:	85 c0                	test   eax,eax
c000a443:	75 01                	jne    c000a446 <VAS::VAS(bool)+0x28c>
c000a445:	fb                   	sti    
c000a446:	90                   	nop
c000a447:	83 c4 28             	add    esp,0x28
c000a44a:	5b                   	pop    ebx
c000a44b:	c3                   	ret    

c000a44c <VAS::evict(unsigned long)>:
c000a44c:	55                   	push   ebp
c000a44d:	57                   	push   edi
c000a44e:	56                   	push   esi
c000a44f:	53                   	push   ebx
c000a450:	83 ec 1c             	sub    esp,0x1c
c000a453:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a457:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a45b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a45f:	e8 eb f2 ff ff       	call   c000974f <Virt::allocateSwapfilePage()>
c000a464:	89 c7                	mov    edi,eax
c000a466:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000a46b:	85 c0                	test   eax,eax
c000a46d:	7e 40                	jle    c000a4af <VAS::evict(unsigned long)+0x63>
c000a46f:	89 ee                	mov    esi,ebp
c000a471:	31 db                	xor    ebx,ebx
c000a473:	83 ec 0c             	sub    esp,0xc
c000a476:	57                   	push   edi
c000a477:	e8 bd f2 ff ff       	call   c0009739 <Virt::swapIDToSector(unsigned long)>
c000a47c:	89 34 24             	mov    DWORD PTR [esp],esi
c000a47f:	31 d2                	xor    edx,edx
c000a481:	6a 01                	push   0x1
c000a483:	01 d8                	add    eax,ebx
c000a485:	52                   	push   edx
c000a486:	83 c3 01             	add    ebx,0x1
c000a489:	50                   	push   eax
c000a48a:	81 c6 00 02 00 00    	add    esi,0x200
c000a490:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a497:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a49e:	50                   	push   eax
c000a49f:	e8 3e 2d 00 00       	call   c000d1e2 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4a4:	83 c4 20             	add    esp,0x20
c000a4a7:	39 1d 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,ebx
c000a4ad:	7f c4                	jg     c000a473 <VAS::evict(unsigned long)+0x27>
c000a4af:	c1 e7 0b             	shl    edi,0xb
c000a4b2:	83 ec 08             	sub    esp,0x8
c000a4b5:	55                   	push   ebp
c000a4b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4ba:	50                   	push   eax
c000a4bb:	e8 2e f4 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4c2:	89 d1                	mov    ecx,edx
c000a4c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4d0:	09 cf                	or     edi,ecx
c000a4d2:	89 38                	mov    DWORD PTR [eax],edi
c000a4d4:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4d7:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4dd:	83 c1 01             	add    ecx,0x1
c000a4e0:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4e6:	e8 3d d8 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c000a4eb:	0f 20 d8             	mov    eax,cr3
c000a4ee:	0f 22 d8             	mov    cr3,eax
c000a4f1:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a4f6:	c7 44 24 40 dd ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ffdd
c000a4fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a502:	8d 50 01             	lea    edx,[eax+0x1]
c000a505:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a50b:	83 c4 2c             	add    esp,0x2c
c000a50e:	5b                   	pop    ebx
c000a50f:	5e                   	pop    esi
c000a510:	5f                   	pop    edi
c000a511:	5d                   	pop    ebp
c000a512:	e9 3c 04 00 00       	jmp    c000a953 <Dbg::kprintf(char const*, ...)>
c000a517:	90                   	nop

c000a518 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a518:	55                   	push   ebp
c000a519:	57                   	push   edi
c000a51a:	56                   	push   esi
c000a51b:	53                   	push   ebx
c000a51c:	83 ec 24             	sub    esp,0x24
c000a51f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a523:	53                   	push   ebx
c000a524:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a52a:	68 ee ff 01 c0       	push   0xc001ffee
c000a52f:	e8 1f 04 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a534:	58                   	pop    eax
c000a535:	5a                   	pop    edx
c000a536:	53                   	push   ebx
c000a537:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a53b:	51                   	push   ecx
c000a53c:	e8 ad f3 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a541:	83 c4 10             	add    esp,0x10
c000a544:	89 c6                	mov    esi,eax
c000a546:	85 c0                	test   eax,eax
c000a548:	0f 95 c0             	setne  al
c000a54b:	85 db                	test   ebx,ebx
c000a54d:	0f 95 c2             	setne  dl
c000a550:	21 d0                	and    eax,edx
c000a552:	89 c5                	mov    ebp,eax
c000a554:	a8 01                	test   al,0x1
c000a556:	75 0a                	jne    c000a562 <VAS::tryLoadBackOffDisk(unsigned long)+0x4a>
c000a558:	83 c4 1c             	add    esp,0x1c
c000a55b:	89 e8                	mov    eax,ebp
c000a55d:	5b                   	pop    ebx
c000a55e:	5e                   	pop    esi
c000a55f:	5f                   	pop    edi
c000a560:	5d                   	pop    ebp
c000a561:	c3                   	ret    
c000a562:	8b 06                	mov    eax,DWORD PTR [esi]
c000a564:	a8 01                	test   al,0x1
c000a566:	74 0c                	je     c000a574 <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c000a568:	83 c4 1c             	add    esp,0x1c
c000a56b:	31 ed                	xor    ebp,ebp
c000a56d:	89 e8                	mov    eax,ebp
c000a56f:	5b                   	pop    ebx
c000a570:	5e                   	pop    esi
c000a571:	5f                   	pop    edi
c000a572:	5d                   	pop    ebp
c000a573:	c3                   	ret    
c000a574:	c1 e8 0b             	shr    eax,0xb
c000a577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a57b:	e8 11 d8 ff ff       	call   c0007d91 <Phys::allocatePage()>
c000a580:	8b 16                	mov    edx,DWORD PTR [esi]
c000a582:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a588:	09 c2                	or     edx,eax
c000a58a:	81 ca 01 08 00 00    	or     edx,0x801
c000a590:	89 16                	mov    DWORD PTR [esi],edx
c000a592:	a1 8c 1e 02 c0       	mov    eax,ds:0xc0021e8c
c000a597:	85 c0                	test   eax,eax
c000a599:	7e 44                	jle    c000a5df <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a59b:	89 df                	mov    edi,ebx
c000a59d:	31 f6                	xor    esi,esi
c000a59f:	83 ec 0c             	sub    esp,0xc
c000a5a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a5a6:	51                   	push   ecx
c000a5a7:	e8 8d f1 ff ff       	call   c0009739 <Virt::swapIDToSector(unsigned long)>
c000a5ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5af:	31 d2                	xor    edx,edx
c000a5b1:	6a 01                	push   0x1
c000a5b3:	01 f0                	add    eax,esi
c000a5b5:	52                   	push   edx
c000a5b6:	83 c6 01             	add    esi,0x1
c000a5b9:	50                   	push   eax
c000a5ba:	81 c7 00 02 00 00    	add    edi,0x200
c000a5c0:	0f be 05 98 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e98
c000a5c7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5ce:	50                   	push   eax
c000a5cf:	e8 a2 2b 00 00       	call   c000d176 <LogicalDisk::read(unsigned long long, int, void*)>
c000a5d4:	83 c4 20             	add    esp,0x20
c000a5d7:	39 35 8c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e8c,esi
c000a5dd:	7f c0                	jg     c000a59f <VAS::tryLoadBackOffDisk(unsigned long)+0x87>
c000a5df:	83 ec 04             	sub    esp,0x4
c000a5e2:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5e7:	83 e8 01             	sub    eax,0x1
c000a5ea:	50                   	push   eax
c000a5eb:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5f0:	53                   	push   ebx
c000a5f1:	68 01 00 02 c0       	push   0xc0020001
c000a5f6:	e8 58 03 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a5fb:	58                   	pop    eax
c000a5fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a600:	52                   	push   edx
c000a601:	e8 10 f1 ff ff       	call   c0009716 <Virt::freeSwapfilePage(unsigned long)>
c000a606:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a60b:	83 c4 10             	add    esp,0x10
c000a60e:	83 e8 01             	sub    eax,0x1
c000a611:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a616:	85 c0                	test   eax,eax
c000a618:	75 01                	jne    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c000a61a:	fb                   	sti    
c000a61b:	0f 20 d8             	mov    eax,cr3
c000a61e:	0f 22 d8             	mov    cr3,eax
c000a621:	e9 32 ff ff ff       	jmp    c000a558 <VAS::tryLoadBackOffDisk(unsigned long)+0x40>

c000a626 <VAS::scanForEviction()>:
c000a626:	57                   	push   edi
c000a627:	31 ff                	xor    edi,edi
c000a629:	56                   	push   esi
c000a62a:	53                   	push   ebx
c000a62b:	83 ec 10             	sub    esp,0x10
c000a62e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a632:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a635:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a63b:	75 0e                	jne    c000a64b <VAS::scanForEviction()+0x25>
c000a63d:	89 da                	mov    edx,ebx
c000a63f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a642:	c1 ea 16             	shr    edx,0x16
c000a645:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a649:	74 50                	je     c000a69b <VAS::scanForEviction()+0x75>
c000a64b:	53                   	push   ebx
c000a64c:	56                   	push   esi
c000a64d:	e8 9c f2 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c000a652:	5a                   	pop    edx
c000a653:	8b 10                	mov    edx,DWORD PTR [eax]
c000a655:	59                   	pop    ecx
c000a656:	89 d1                	mov    ecx,edx
c000a658:	81 e1 01 08 00 00    	and    ecx,0x801
c000a65e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a664:	74 40                	je     c000a6a6 <VAS::scanForEviction()+0x80>
c000a666:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a66c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a672:	76 2d                	jbe    c000a6a1 <VAS::scanForEviction()+0x7b>
c000a674:	83 c7 01             	add    edi,0x1
c000a677:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a67e:	83 ff 03             	cmp    edi,0x3
c000a681:	74 32                	je     c000a6b5 <VAS::scanForEviction()+0x8f>
c000a683:	31 db                	xor    ebx,ebx
c000a685:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a68b:	75 be                	jne    c000a64b <VAS::scanForEviction()+0x25>
c000a68d:	89 da                	mov    edx,ebx
c000a68f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a692:	c1 ea 16             	shr    edx,0x16
c000a695:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a699:	75 b0                	jne    c000a64b <VAS::scanForEviction()+0x25>
c000a69b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a6a1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6a4:	eb 8f                	jmp    c000a635 <VAS::scanForEviction()+0xf>
c000a6a6:	f6 c2 20             	test   dl,0x20
c000a6a9:	74 13                	je     c000a6be <VAS::scanForEviction()+0x98>
c000a6ab:	83 e2 df             	and    edx,0xffffffdf
c000a6ae:	89 10                	mov    DWORD PTR [eax],edx
c000a6b0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6b3:	eb b1                	jmp    c000a666 <VAS::scanForEviction()+0x40>
c000a6b5:	83 c4 10             	add    esp,0x10
c000a6b8:	31 c0                	xor    eax,eax
c000a6ba:	5b                   	pop    ebx
c000a6bb:	5e                   	pop    esi
c000a6bc:	5f                   	pop    edi
c000a6bd:	c3                   	ret    
c000a6be:	89 d0                	mov    eax,edx
c000a6c0:	83 ec 08             	sub    esp,0x8
c000a6c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6cc:	53                   	push   ebx
c000a6cd:	68 16 00 02 c0       	push   0xc0020016
c000a6d2:	e8 7c 02 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a6d7:	58                   	pop    eax
c000a6d8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6db:	5a                   	pop    edx
c000a6dc:	51                   	push   ecx
c000a6dd:	56                   	push   esi
c000a6de:	e8 69 fd ff ff       	call   c000a44c <VAS::evict(unsigned long)>
c000a6e3:	5b                   	pop    ebx
c000a6e4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6e7:	5f                   	pop    edi
c000a6e8:	50                   	push   eax
c000a6e9:	68 2a 00 02 c0       	push   0xc002002a
c000a6ee:	e8 60 02 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a6f3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6f6:	83 c4 10             	add    esp,0x10
c000a6f9:	05 00 10 00 00       	add    eax,0x1000
c000a6fe:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a705:	83 c4 10             	add    esp,0x10
c000a708:	5b                   	pop    ebx
c000a709:	5e                   	pop    esi
c000a70a:	5f                   	pop    edi
c000a70b:	c3                   	ret    

c000a70c <mapVASFirstTime>:
c000a70c:	55                   	push   ebp
c000a70d:	57                   	push   edi
c000a70e:	56                   	push   esi
c000a70f:	53                   	push   ebx
c000a710:	83 ec 0c             	sub    esp,0xc
c000a713:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a718:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a71b:	83 fa 01             	cmp    edx,0x1
c000a71e:	0f 84 cb 00 00 00    	je     c000a7ef <mapVASFirstTime+0xe3>
c000a724:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a727:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a72a:	c1 e5 15             	shl    ebp,0x15
c000a72d:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a732:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a737:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a73d:	29 eb                	sub    ebx,ebp
c000a73f:	29 ef                	sub    edi,ebp
c000a741:	e8 4b d6 ff ff       	call   c0007d91 <Phys::allocatePage()>
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	68 03 04 00 00       	push   0x403
c000a74e:	6a 01                	push   0x1
c000a750:	53                   	push   ebx
c000a751:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a757:	50                   	push   eax
c000a758:	56                   	push   esi
c000a759:	e8 90 f8 ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75e:	83 c4 20             	add    esp,0x20
c000a761:	39 fb                	cmp    ebx,edi
c000a763:	75 dc                	jne    c000a741 <mapVASFirstTime+0x35>
c000a765:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a76a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a76f:	29 eb                	sub    ebx,ebp
c000a771:	29 ef                	sub    edi,ebp
c000a773:	e8 19 d6 ff ff       	call   c0007d91 <Phys::allocatePage()>
c000a778:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a77c:	83 fa 01             	cmp    edx,0x1
c000a77f:	19 d2                	sbb    edx,edx
c000a781:	83 ec 0c             	sub    esp,0xc
c000a784:	83 e2 04             	and    edx,0x4
c000a787:	81 c2 03 04 00 00    	add    edx,0x403
c000a78d:	52                   	push   edx
c000a78e:	6a 01                	push   0x1
c000a790:	53                   	push   ebx
c000a791:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a797:	50                   	push   eax
c000a798:	56                   	push   esi
c000a799:	e8 50 f8 ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79e:	83 c4 20             	add    esp,0x20
c000a7a1:	39 df                	cmp    edi,ebx
c000a7a3:	75 ce                	jne    c000a773 <mapVASFirstTime+0x67>
c000a7a5:	83 ec 0c             	sub    esp,0xc
c000a7a8:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7ad:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7b3:	c1 eb 0c             	shr    ebx,0xc
c000a7b6:	6a 04                	push   0x4
c000a7b8:	6a ff                	push   0xffffffff
c000a7ba:	53                   	push   ebx
c000a7bb:	68 00 30 02 c0       	push   0xc0023000
c000a7c0:	56                   	push   esi
c000a7c1:	e8 98 f2 ff ff       	call   c0009a5e <VAS::reflagRange(unsigned long, int, int, int)>
c000a7c6:	83 c4 14             	add    esp,0x14
c000a7c9:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7ce:	6a 04                	push   0x4
c000a7d0:	6a ff                	push   0xffffffff
c000a7d2:	53                   	push   ebx
c000a7d3:	68 00 30 02 c0       	push   0xc0023000
c000a7d8:	50                   	push   eax
c000a7d9:	e8 80 f2 ff ff       	call   c0009a5e <VAS::reflagRange(unsigned long, int, int, int)>
c000a7de:	0f 20 d8             	mov    eax,cr3
c000a7e1:	0f 22 d8             	mov    cr3,eax
c000a7e4:	83 c4 20             	add    esp,0x20
c000a7e7:	83 c4 0c             	add    esp,0xc
c000a7ea:	5b                   	pop    ebx
c000a7eb:	5e                   	pop    esi
c000a7ec:	5f                   	pop    edi
c000a7ed:	5d                   	pop    ebp
c000a7ee:	c3                   	ret    
c000a7ef:	83 ec 0c             	sub    esp,0xc
c000a7f2:	68 3d 00 02 c0       	push   0xc002003d
c000a7f7:	e8 57 01 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a7fc:	83 c4 10             	add    esp,0x10
c000a7ff:	83 c4 0c             	add    esp,0xc
c000a802:	5b                   	pop    ebx
c000a803:	5e                   	pop    esi
c000a804:	5f                   	pop    edi
c000a805:	5d                   	pop    ebp
c000a806:	c3                   	ret    

c000a807 <__cxa_atexit>:
c000a807:	31 c0                	xor    eax,eax
c000a809:	c3                   	ret    

c000a80a <__cxa_finalize>:
c000a80a:	c3                   	ret    

c000a80b <__stack_chk_fail>:
c000a80b:	55                   	push   ebp
c000a80c:	89 e5                	mov    ebp,esp
c000a80e:	83 ec 10             	sub    esp,0x10
c000a811:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a814:	68 56 00 02 c0       	push   0xc0020056
c000a819:	e8 35 01 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a81e:	58                   	pop    eax
c000a81f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a822:	5a                   	pop    edx
c000a823:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a826:	68 56 00 02 c0       	push   0xc0020056
c000a82b:	e8 23 01 00 00       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000a830:	c7 04 24 5e 00 02 c0 	mov    DWORD PTR [esp],0xc002005e
c000a837:	e8 03 60 00 00       	call   c001083f <KePanic(char const*)>
c000a83c:	83 c4 10             	add    esp,0x10
c000a83f:	c9                   	leave  
c000a840:	c3                   	ret    

c000a841 <__cxa_pure_virtual>:
c000a841:	83 ec 18             	sub    esp,0x18
c000a844:	68 76 00 02 c0       	push   0xc0020076
c000a849:	e8 f1 5f 00 00       	call   c001083f <KePanic(char const*)>
c000a84e:	83 c4 1c             	add    esp,0x1c
c000a851:	c3                   	ret    

c000a852 <operator new[](unsigned long)>:
c000a852:	e9 35 d2 ff ff       	jmp    c0007a8c <malloc>

c000a857 <operator delete(void*, unsigned long)>:
c000a857:	e9 50 d2 ff ff       	jmp    c0007aac <rfree>

c000a85c <operator delete[](void*)>:
c000a85c:	e9 4b d2 ff ff       	jmp    c0007aac <rfree>

c000a861 <operator delete[](void*, unsigned long)>:
c000a861:	e9 46 d2 ff ff       	jmp    c0007aac <rfree>

c000a866 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a866:	57                   	push   edi
c000a867:	56                   	push   esi
c000a868:	53                   	push   ebx
c000a869:	83 ec 20             	sub    esp,0x20
c000a86c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a870:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a874:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a87c:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a884:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a88c:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a894:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a899:	89 f7                	mov    edi,esi
c000a89b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a89f:	eb 02                	jmp    c000a8a3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3d>
c000a8a1:	89 c7                	mov    edi,eax
c000a8a3:	31 d2                	xor    edx,edx
c000a8a5:	89 f8                	mov    eax,edi
c000a8a7:	83 c3 01             	add    ebx,0x1
c000a8aa:	f7 f1                	div    ecx
c000a8ac:	39 cf                	cmp    edi,ecx
c000a8ae:	73 f1                	jae    c000a8a1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3b>
c000a8b0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a8b3:	eb 02                	jmp    c000a8b7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8b5:	89 c6                	mov    esi,eax
c000a8b7:	31 d2                	xor    edx,edx
c000a8b9:	89 f0                	mov    eax,esi
c000a8bb:	f7 f1                	div    ecx
c000a8bd:	83 eb 01             	sub    ebx,0x1
c000a8c0:	39 ce                	cmp    esi,ecx
c000a8c2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8c6:	88 13                	mov    BYTE PTR [ebx],dl
c000a8c8:	73 eb                	jae    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4f>
c000a8ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a8ce:	83 c4 20             	add    esp,0x20
c000a8d1:	5b                   	pop    ebx
c000a8d2:	5e                   	pop    esi
c000a8d3:	5f                   	pop    edi
c000a8d4:	c3                   	ret    

c000a8d5 <Dbg::logc(char)>:
c000a8d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8d9:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a8e0:	75 12                	jne    c000a8f4 <Dbg::logc(char)+0x1f>
c000a8e2:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8e7:	ec                   	in     al,dx
c000a8e8:	a8 20                	test   al,0x20
c000a8ea:	74 fb                	je     c000a8e7 <Dbg::logc(char)+0x12>
c000a8ec:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8f1:	88 c8                	mov    al,cl
c000a8f3:	ee                   	out    dx,al
c000a8f4:	c3                   	ret    

c000a8f5 <Dbg::logs(char*)>:
c000a8f5:	53                   	push   ebx
c000a8f6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8fd:	85 c0                	test   eax,eax
c000a8ff:	74 11                	je     c000a912 <Dbg::logs(char*)+0x1d>
c000a901:	83 c3 01             	add    ebx,0x1
c000a904:	50                   	push   eax
c000a905:	e8 cb ff ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000a90a:	58                   	pop    eax
c000a90b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a90e:	85 c0                	test   eax,eax
c000a910:	75 ef                	jne    c000a901 <Dbg::logs(char*)+0xc>
c000a912:	5b                   	pop    ebx
c000a913:	c3                   	ret    

c000a914 <Dbg::logWriteInt(unsigned int)>:
c000a914:	83 ec 10             	sub    esp,0x10
c000a917:	6a 0a                	push   0xa
c000a919:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a91d:	50                   	push   eax
c000a91e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a922:	50                   	push   eax
c000a923:	e8 3e ff ff ff       	call   c000a866 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a928:	50                   	push   eax
c000a929:	e8 c7 ff ff ff       	call   c000a8f5 <Dbg::logs(char*)>
c000a92e:	83 c4 20             	add    esp,0x20
c000a931:	c3                   	ret    

c000a932 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a932:	83 ec 10             	sub    esp,0x10
c000a935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a939:	50                   	push   eax
c000a93a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a93e:	50                   	push   eax
c000a93f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a943:	52                   	push   edx
c000a944:	e8 1d ff ff ff       	call   c000a866 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a949:	50                   	push   eax
c000a94a:	e8 a6 ff ff ff       	call   c000a8f5 <Dbg::logs(char*)>
c000a94f:	83 c4 20             	add    esp,0x20
c000a952:	c3                   	ret    

c000a953 <Dbg::kprintf(char const*, ...)>:
c000a953:	55                   	push   ebp
c000a954:	57                   	push   edi
c000a955:	56                   	push   esi
c000a956:	53                   	push   ebx
c000a957:	83 ec 0c             	sub    esp,0xc
c000a95a:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a961:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a965:	74 08                	je     c000a96f <Dbg::kprintf(char const*, ...)+0x1c>
c000a967:	83 c4 0c             	add    esp,0xc
c000a96a:	5b                   	pop    ebx
c000a96b:	5e                   	pop    esi
c000a96c:	5f                   	pop    edi
c000a96d:	5d                   	pop    ebp
c000a96e:	c3                   	ret    
c000a96f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a973:	31 ff                	xor    edi,edi
c000a975:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a979:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a97c:	85 c0                	test   eax,eax
c000a97e:	74 e7                	je     c000a967 <Dbg::kprintf(char const*, ...)+0x14>
c000a980:	8d 77 01             	lea    esi,[edi+0x1]
c000a983:	83 f8 25             	cmp    eax,0x25
c000a986:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a989:	75 47                	jne    c000a9d2 <Dbg::kprintf(char const*, ...)+0x7f>
c000a98b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a98e:	83 c7 02             	add    edi,0x2
c000a991:	83 e8 25             	sub    eax,0x25
c000a994:	0f b6 c0             	movzx  eax,al
c000a997:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a99a:	83 f8 53             	cmp    eax,0x53
c000a99d:	0f 87 ce 00 00 00    	ja     c000aa71 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9a3:	ff 24 85 8c 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdff74]
c000a9aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9ae:	89 c8                	mov    eax,ecx
c000a9b0:	83 c1 04             	add    ecx,0x4
c000a9b3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9b9:	55                   	push   ebp
c000a9ba:	e8 55 ff ff ff       	call   c000a914 <Dbg::logWriteInt(unsigned int)>
c000a9bf:	58                   	pop    eax
c000a9c0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9c3:	85 c0                	test   eax,eax
c000a9c5:	74 a0                	je     c000a967 <Dbg::kprintf(char const*, ...)+0x14>
c000a9c7:	8d 77 01             	lea    esi,[edi+0x1]
c000a9ca:	83 f8 25             	cmp    eax,0x25
c000a9cd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9d0:	74 b9                	je     c000a98b <Dbg::kprintf(char const*, ...)+0x38>
c000a9d2:	50                   	push   eax
c000a9d3:	89 f7                	mov    edi,esi
c000a9d5:	e8 fb fe ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000a9da:	89 ee                	mov    esi,ebp
c000a9dc:	58                   	pop    eax
c000a9dd:	eb e1                	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ee:	50                   	push   eax
c000a9ef:	e8 01 ff ff ff       	call   c000a8f5 <Dbg::logs(char*)>
c000a9f4:	58                   	pop    eax
c000a9f5:	eb c9                	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9fb:	89 d0                	mov    eax,edx
c000a9fd:	83 c2 04             	add    edx,0x4
c000aa00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa04:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa06:	50                   	push   eax
c000aa07:	e8 08 ff ff ff       	call   c000a914 <Dbg::logWriteInt(unsigned int)>
c000aa0c:	58                   	pop    eax
c000aa0d:	eb b1                	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa13:	89 d0                	mov    eax,edx
c000aa15:	83 c2 04             	add    edx,0x4
c000aa18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa1c:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa1f:	50                   	push   eax
c000aa20:	e8 b0 fe ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000aa25:	58                   	pop    eax
c000aa26:	eb 98                	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa2c:	89 c8                	mov    eax,ecx
c000aa2e:	83 c1 04             	add    ecx,0x4
c000aa31:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa35:	6a 10                	push   0x10
c000aa37:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa39:	51                   	push   ecx
c000aa3a:	e8 f3 fe ff ff       	call   c000a932 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa3f:	5d                   	pop    ebp
c000aa40:	58                   	pop    eax
c000aa41:	e9 7a ff ff ff       	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa4a:	89 d0                	mov    eax,edx
c000aa4c:	83 c2 08             	add    edx,0x8
c000aa4f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa53:	6a 10                	push   0x10
c000aa55:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa57:	50                   	push   eax
c000aa58:	e8 d5 fe ff ff       	call   c000a932 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa5d:	58                   	pop    eax
c000aa5e:	5a                   	pop    edx
c000aa5f:	e9 5c ff ff ff       	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa64:	6a 25                	push   0x25
c000aa66:	e8 6a fe ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000aa6b:	5a                   	pop    edx
c000aa6c:	e9 4f ff ff ff       	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa71:	6a 25                	push   0x25
c000aa73:	e8 5d fe ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000aa78:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa7c:	50                   	push   eax
c000aa7d:	e8 53 fe ff ff       	call   c000a8d5 <Dbg::logc(char)>
c000aa82:	5a                   	pop    edx
c000aa83:	59                   	pop    ecx
c000aa84:	e9 37 ff ff ff       	jmp    c000a9c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa89:	90                   	nop

c000aa8a <File::read(unsigned long long, void*, int*)>:
c000aa8a:	53                   	push   ebx
c000aa8b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aa8f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa93:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aa9a:	83 f8 19             	cmp    eax,0x19
c000aa9d:	77 35                	ja     c000aad4 <File::read(unsigned long long, void*, int*)+0x4a>
c000aa9f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aaa6:	85 c0                	test   eax,eax
c000aaa8:	74 2a                	je     c000aad4 <File::read(unsigned long long, void*, int*)+0x4a>
c000aaaa:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aab0:	85 c0                	test   eax,eax
c000aab2:	74 20                	je     c000aad4 <File::read(unsigned long long, void*, int*)+0x4a>
c000aab4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aab8:	74 21                	je     c000aadb <File::read(unsigned long long, void*, int*)+0x51>
c000aaba:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aabc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aac0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aac6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aace:	5b                   	pop    ebx
c000aacf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000aad2:	ff e0                	jmp    eax
c000aad4:	b8 0b 00 00 00       	mov    eax,0xb
c000aad9:	eb 05                	jmp    c000aae0 <File::read(unsigned long long, void*, int*)+0x56>
c000aadb:	b8 05 00 00 00       	mov    eax,0x5
c000aae0:	5b                   	pop    ebx
c000aae1:	c3                   	ret    

c000aae2 <File::write(unsigned long long, void*, int*)>:
c000aae2:	53                   	push   ebx
c000aae3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aae7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aaeb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aaf2:	83 f8 19             	cmp    eax,0x19
c000aaf5:	77 35                	ja     c000ab2c <File::write(unsigned long long, void*, int*)+0x4a>
c000aaf7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 2a                	je     c000ab2c <File::write(unsigned long long, void*, int*)+0x4a>
c000ab02:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab08:	85 c0                	test   eax,eax
c000ab0a:	74 20                	je     c000ab2c <File::write(unsigned long long, void*, int*)+0x4a>
c000ab0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab10:	74 21                	je     c000ab33 <File::write(unsigned long long, void*, int*)+0x51>
c000ab12:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab14:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab18:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab26:	5b                   	pop    ebx
c000ab27:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab2a:	ff e0                	jmp    eax
c000ab2c:	b8 0b 00 00 00       	mov    eax,0xb
c000ab31:	eb 05                	jmp    c000ab38 <File::write(unsigned long long, void*, int*)+0x56>
c000ab33:	b8 05 00 00 00       	mov    eax,0x5
c000ab38:	5b                   	pop    ebx
c000ab39:	c3                   	ret    

c000ab3a <Directory::read(unsigned long long, void*, int*)>:
c000ab3a:	53                   	push   ebx
c000ab3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab3f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab43:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab4a:	83 f8 19             	cmp    eax,0x19
c000ab4d:	77 35                	ja     c000ab84 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab4f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab56:	85 c0                	test   eax,eax
c000ab58:	74 2a                	je     c000ab84 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab5a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab60:	85 c0                	test   eax,eax
c000ab62:	74 20                	je     c000ab84 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab64:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab68:	74 21                	je     c000ab8b <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab6a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab6c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab70:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7e:	5b                   	pop    ebx
c000ab7f:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ab82:	ff e0                	jmp    eax
c000ab84:	b8 0b 00 00 00       	mov    eax,0xb
c000ab89:	eb 05                	jmp    c000ab90 <Directory::read(unsigned long long, void*, int*)+0x56>
c000ab8b:	b8 05 00 00 00       	mov    eax,0x5
c000ab90:	5b                   	pop    ebx
c000ab91:	c3                   	ret    

c000ab92 <Directory::write(unsigned long long, void*, int*)>:
c000ab92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab96:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ab9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aba2:	83 fa 19             	cmp    edx,0x19
c000aba5:	77 18                	ja     c000abbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000aba7:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abae:	85 d2                	test   edx,edx
c000abb0:	74 0d                	je     c000abbf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abb2:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abb9:	19 c0                	sbb    eax,eax
c000abbb:	83 e0 0a             	and    eax,0xa
c000abbe:	40                   	inc    eax
c000abbf:	c3                   	ret    

c000abc0 <File::isAtty()>:
c000abc0:	31 c0                	xor    eax,eax
c000abc2:	c3                   	ret    
c000abc3:	90                   	nop

c000abc4 <Directory::isAtty()>:
c000abc4:	31 c0                	xor    eax,eax
c000abc6:	c3                   	ret    
c000abc7:	90                   	nop

c000abc8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abc8:	b8 0a 00 00 00       	mov    eax,0xa
c000abcd:	c3                   	ret    

c000abce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abce:	b8 0a 00 00 00       	mov    eax,0xa
c000abd3:	c3                   	ret    

c000abd4 <Filesystem::allocateSwapfile(char const*, int)>:
c000abd4:	31 c0                	xor    eax,eax
c000abd6:	31 d2                	xor    edx,edx
c000abd8:	c3                   	ret    
c000abd9:	90                   	nop

c000abda <File::~File()>:
c000abda:	83 ec 0c             	sub    esp,0xc
c000abdd:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	89 10                	mov    DWORD PTR [eax],edx
c000abe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abec:	83 ec 0c             	sub    esp,0xc
c000abef:	50                   	push   eax
c000abf0:	e8 93 e7 ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c000abf5:	83 c4 10             	add    esp,0x10
c000abf8:	90                   	nop
c000abf9:	83 c4 0c             	add    esp,0xc
c000abfc:	c3                   	ret    
c000abfd:	90                   	nop

c000abfe <File::~File()>:
c000abfe:	83 ec 0c             	sub    esp,0xc
c000ac01:	83 ec 0c             	sub    esp,0xc
c000ac04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac08:	e8 cd ff ff ff       	call   c000abda <File::~File()>
c000ac0d:	83 c4 10             	add    esp,0x10
c000ac10:	83 ec 08             	sub    esp,0x8
c000ac13:	68 14 01 00 00       	push   0x114
c000ac18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1c:	e8 36 fc ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000ac21:	83 c4 10             	add    esp,0x10
c000ac24:	83 c4 0c             	add    esp,0xc
c000ac27:	c3                   	ret    

c000ac28 <Directory::~Directory()>:
c000ac28:	83 ec 0c             	sub    esp,0xc
c000ac2b:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000ac30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac34:	89 10                	mov    DWORD PTR [eax],edx
c000ac36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac3a:	83 ec 0c             	sub    esp,0xc
c000ac3d:	50                   	push   eax
c000ac3e:	e8 45 e7 ff ff       	call   c0009388 <UnixFile::~UnixFile()>
c000ac43:	83 c4 10             	add    esp,0x10
c000ac46:	90                   	nop
c000ac47:	83 c4 0c             	add    esp,0xc
c000ac4a:	c3                   	ret    
c000ac4b:	90                   	nop

c000ac4c <Directory::~Directory()>:
c000ac4c:	83 ec 0c             	sub    esp,0xc
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac56:	e8 cd ff ff ff       	call   c000ac28 <Directory::~Directory()>
c000ac5b:	83 c4 10             	add    esp,0x10
c000ac5e:	83 ec 08             	sub    esp,0x8
c000ac61:	68 14 01 00 00       	push   0x114
c000ac66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac6a:	e8 e8 fb ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000ac6f:	83 c4 10             	add    esp,0x10
c000ac72:	83 c4 0c             	add    esp,0xc
c000ac75:	c3                   	ret    

c000ac76 <Filesystem::Filesystem()>:
c000ac76:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000ac7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac7f:	89 10                	mov    DWORD PTR [eax],edx
c000ac81:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000ac87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac92:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000ac97:	90                   	nop
c000ac98:	c3                   	ret    
c000ac99:	90                   	nop

c000ac9a <Filesystem::~Filesystem()>:
c000ac9a:	ba e4 01 02 c0       	mov    edx,0xc00201e4
c000ac9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aca3:	89 10                	mov    DWORD PTR [eax],edx
c000aca5:	90                   	nop
c000aca6:	c3                   	ret    
c000aca7:	90                   	nop

c000aca8 <Filesystem::~Filesystem()>:
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acaf:	e8 e6 ff ff ff       	call   c000ac9a <Filesystem::~Filesystem()>
c000acb4:	83 c4 04             	add    esp,0x4
c000acb7:	83 ec 08             	sub    esp,0x8
c000acba:	6a 08                	push   0x8
c000acbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acc0:	e8 92 fb ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000acc5:	83 c4 10             	add    esp,0x10
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <Fs::getcwd(Process*, char*, int)>:
c000accc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acd0:	31 c0                	xor    eax,eax
c000acd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000acd5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000acd9:	7d 15                	jge    c000acf0 <Fs::getcwd(Process*, char*, int)+0x24>
c000acdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000acdf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ace6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ace9:	84 c9                	test   cl,cl
c000aceb:	74 06                	je     c000acf3 <Fs::getcwd(Process*, char*, int)+0x27>
c000aced:	40                   	inc    eax
c000acee:	eb e2                	jmp    c000acd2 <Fs::getcwd(Process*, char*, int)+0x6>
c000acf0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000acf3:	31 c0                	xor    eax,eax
c000acf5:	c3                   	ret    

c000acf6 <Fs::initVFS()>:
c000acf6:	83 ec 18             	sub    esp,0x18
c000acf9:	6a 08                	push   0x8
c000acfb:	e8 8c cd ff ff       	call   c0007a8c <malloc>
c000ad00:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad03:	e8 94 dd 00 00       	call   c0018a9c <FAT::FAT()>
c000ad08:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad0f:	e8 78 cd ff ff       	call   c0007a8c <malloc>
c000ad14:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad17:	e8 a6 ec 00 00       	call   c00199c2 <ISO9660::ISO9660()>
c000ad1c:	83 c4 1c             	add    esp,0x1c
c000ad1f:	c3                   	ret    

c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad20:	55                   	push   ebp
c000ad21:	57                   	push   edi
c000ad22:	56                   	push   esi
c000ad23:	53                   	push   ebx
c000ad24:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad2a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad31:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ad38:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ad3f:	68 00 04 00 00       	push   0x400
c000ad44:	6a 00                	push   0x0
c000ad46:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ad4a:	56                   	push   esi
c000ad4b:	e8 90 57 ff ff       	call   c00004e0 <memset>
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad57:	75 0b                	jne    c000ad64 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad59:	50                   	push   eax
c000ad5a:	50                   	push   eax
c000ad5b:	57                   	push   edi
c000ad5c:	56                   	push   esi
c000ad5d:	e8 ce 58 ff ff       	call   c0000630 <strcpy>
c000ad62:	eb 44                	jmp    c000ada8 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ad64:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad67:	83 f8 2f             	cmp    eax,0x2f
c000ad6a:	74 05                	je     c000ad71 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad6c:	83 f8 5c             	cmp    eax,0x5c
c000ad6f:	75 18                	jne    c000ad89 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ad71:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ad74:	3c 60                	cmp    al,0x60
c000ad76:	7e 03                	jle    c000ad7b <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ad78:	83 e8 20             	sub    eax,0x20
c000ad7b:	88 04 24             	mov    BYTE PTR [esp],al
c000ad7e:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ad85:	50                   	push   eax
c000ad86:	50                   	push   eax
c000ad87:	eb 18                	jmp    c000ada1 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000ad89:	50                   	push   eax
c000ad8a:	50                   	push   eax
c000ad8b:	55                   	push   ebp
c000ad8c:	56                   	push   esi
c000ad8d:	e8 9e 58 ff ff       	call   c0000630 <strcpy>
c000ad92:	5a                   	pop    edx
c000ad93:	59                   	pop    ecx
c000ad94:	68 3b 11 02 c0       	push   0xc002113b
c000ad99:	56                   	push   esi
c000ad9a:	e8 91 5a ff ff       	call   c0000830 <strcat>
c000ad9f:	5d                   	pop    ebp
c000ada0:	58                   	pop    eax
c000ada1:	57                   	push   edi
c000ada2:	56                   	push   esi
c000ada3:	e8 88 5a ff ff       	call   c0000830 <strcat>
c000ada8:	83 c4 10             	add    esp,0x10
c000adab:	8a 04 24             	mov    al,BYTE PTR [esp]
c000adae:	3c 60                	cmp    al,0x60
c000adb0:	7e 03                	jle    c000adb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000adb2:	83 e8 20             	sub    eax,0x20
c000adb5:	88 04 24             	mov    BYTE PTR [esp],al
c000adb8:	88 03                	mov    BYTE PTR [ebx],al
c000adba:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adc1:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adc7:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000adcb:	bf 03 00 00 00       	mov    edi,0x3
c000add0:	b8 03 00 00 00       	mov    eax,0x3
c000add5:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000add9:	89 ea                	mov    edx,ebp
c000addb:	85 ed                	test   ebp,ebp
c000addd:	0f 84 97 00 00 00    	je     c000ae7a <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ade3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ade6:	83 fd 2f             	cmp    ebp,0x2f
c000ade9:	74 05                	je     c000adf0 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000adeb:	83 fd 5c             	cmp    ebp,0x5c
c000adee:	75 12                	jne    c000ae02 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000adf0:	89 c5                	mov    ebp,eax
c000adf2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000adf7:	74 09                	je     c000ae02 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000adf9:	40                   	inc    eax
c000adfa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000adfe:	89 cf                	mov    edi,ecx
c000ae00:	eb d3                	jmp    c000add5 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000ae02:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae07:	0f be ea             	movsx  ebp,dl
c000ae0a:	75 5e                	jne    c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae0c:	83 fd 2e             	cmp    ebp,0x2e
c000ae0f:	75 59                	jne    c000ae6a <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae11:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae15:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000ae1a:	74 18                	je     c000ae34 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000ae1c:	83 fd 2e             	cmp    ebp,0x2e
c000ae1f:	74 53                	je     c000ae74 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae21:	89 f9                	mov    ecx,edi
c000ae23:	41                   	inc    ecx
c000ae24:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae28:	83 fa 2f             	cmp    edx,0x2f
c000ae2b:	74 f6                	je     c000ae23 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae2d:	83 fa 5c             	cmp    edx,0x5c
c000ae30:	74 f1                	je     c000ae23 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae32:	eb ca                	jmp    c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae34:	83 fd 2e             	cmp    ebp,0x2e
c000ae37:	74 3b                	je     c000ae74 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae39:	83 f8 03             	cmp    eax,0x3
c000ae3c:	74 c0                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae3e:	41                   	inc    ecx
c000ae3f:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae43:	83 fa 2f             	cmp    edx,0x2f
c000ae46:	74 f6                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae48:	83 fa 5c             	cmp    edx,0x5c
c000ae4b:	74 f1                	je     c000ae3e <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae4d:	48                   	dec    eax
c000ae4e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae52:	75 06                	jne    c000ae5a <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae54:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae58:	eb f3                	jmp    c000ae4d <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000ae5a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae5e:	74 07                	je     c000ae67 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000ae60:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae64:	48                   	dec    eax
c000ae65:	eb f3                	jmp    c000ae5a <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae67:	40                   	inc    eax
c000ae68:	eb 94                	jmp    c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae6a:	83 fd 2f             	cmp    ebp,0x2f
c000ae6d:	74 8f                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae6f:	83 fd 5c             	cmp    ebp,0x5c
c000ae72:	74 8a                	je     c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae74:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ae77:	40                   	inc    eax
c000ae78:	eb 84                	jmp    c000adfe <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	53                   	push   ebx
c000ae82:	e8 d9 56 ff ff       	call   c0000560 <strlen>
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ae8f:	75 26                	jne    c000aeb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000ae91:	83 ec 0c             	sub    esp,0xc
c000ae94:	53                   	push   ebx
c000ae95:	e8 c6 56 ff ff       	call   c0000560 <strlen>
c000ae9a:	83 c4 10             	add    esp,0x10
c000ae9d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aea2:	74 26                	je     c000aeca <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000aea4:	83 ec 0c             	sub    esp,0xc
c000aea7:	53                   	push   ebx
c000aea8:	e8 b3 56 ff ff       	call   c0000560 <strlen>
c000aead:	83 c4 10             	add    esp,0x10
c000aeb0:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aeb5:	eb c7                	jmp    c000ae7e <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	53                   	push   ebx
c000aebb:	e8 a0 56 ff ff       	call   c0000560 <strlen>
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aec8:	74 c7                	je     c000ae91 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000aeca:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aed0:	5b                   	pop    ebx
c000aed1:	5e                   	pop    esi
c000aed2:	5f                   	pop    edi
c000aed3:	5d                   	pop    ebp
c000aed4:	c3                   	ret    
c000aed5:	90                   	nop

c000aed6 <File::File(char const*, Process*)>:
c000aed6:	83 ec 0c             	sub    esp,0xc
c000aed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedd:	83 ec 08             	sub    esp,0x8
c000aee0:	6a 00                	push   0x0
c000aee2:	50                   	push   eax
c000aee3:	e8 ba e2 ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	ba 4c 02 02 c0       	mov    edx,0xc002024c
c000aef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef4:	89 10                	mov    DWORD PTR [eax],edx
c000aef6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aefa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af04:	83 c0 0d             	add    eax,0xd
c000af07:	83 ec 04             	sub    esp,0x4
c000af0a:	52                   	push   edx
c000af0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af0f:	50                   	push   eax
c000af10:	e8 0b fe ff ff       	call   c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af1c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af1f:	83 e8 41             	sub    eax,0x41
c000af22:	88 c2                	mov    dl,al
c000af24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af28:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af32:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af40:	0f b6 c0             	movzx  eax,al
c000af43:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af4a:	85 c0                	test   eax,eax
c000af4c:	74 3e                	je     c000af8c <File::File(char const*, Process*)+0xb6>
c000af4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af52:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af58:	0f b6 c0             	movzx  eax,al
c000af5b:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af62:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af68:	85 c0                	test   eax,eax
c000af6a:	75 20                	jne    c000af8c <File::File(char const*, Process*)+0xb6>
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af76:	0f b6 c0             	movzx  eax,al
c000af79:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af80:	83 ec 0c             	sub    esp,0xc
c000af83:	50                   	push   eax
c000af84:	e8 2b 21 00 00       	call   c000d0b4 <LogicalDisk::mount()>
c000af89:	83 c4 10             	add    esp,0x10
c000af8c:	90                   	nop
c000af8d:	83 c4 0c             	add    esp,0xc
c000af90:	c3                   	ret    
c000af91:	90                   	nop

c000af92 <File::open(FileOpenMode)>:
c000af92:	53                   	push   ebx
c000af93:	b8 0b 00 00 00       	mov    eax,0xb
c000af98:	83 ec 08             	sub    esp,0x8
c000af9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afa6:	83 fa 19             	cmp    edx,0x19
c000afa9:	77 40                	ja     c000afeb <File::open(FileOpenMode)+0x59>
c000afab:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afb2:	85 d2                	test   edx,edx
c000afb4:	74 35                	je     c000afeb <File::open(FileOpenMode)+0x59>
c000afb6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afbc:	85 d2                	test   edx,edx
c000afbe:	74 2b                	je     c000afeb <File::open(FileOpenMode)+0x59>
c000afc0:	b8 06 00 00 00       	mov    eax,0x6
c000afc5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afc9:	75 20                	jne    c000afeb <File::open(FileOpenMode)+0x59>
c000afcb:	8b 02                	mov    eax,DWORD PTR [edx]
c000afcd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000afd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afd7:	51                   	push   ecx
c000afd8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000afdb:	51                   	push   ecx
c000afdc:	52                   	push   edx
c000afdd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000afe0:	83 c4 10             	add    esp,0x10
c000afe3:	85 c0                	test   eax,eax
c000afe5:	75 04                	jne    c000afeb <File::open(FileOpenMode)+0x59>
c000afe7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	c3                   	ret    

c000aff0 <File::close()>:
c000aff0:	53                   	push   ebx
c000aff1:	b8 0b 00 00 00       	mov    eax,0xb
c000aff6:	83 ec 08             	sub    esp,0x8
c000aff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000affd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b004:	83 f9 19             	cmp    ecx,0x19
c000b007:	77 41                	ja     c000b04a <File::close()+0x5a>
c000b009:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b010:	85 db                	test   ebx,ebx
c000b012:	74 36                	je     c000b04a <File::close()+0x5a>
c000b014:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b01b:	74 2d                	je     c000b04a <File::close()+0x5a>
c000b01d:	b8 05 00 00 00       	mov    eax,0x5
c000b022:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b026:	74 22                	je     c000b04a <File::close()+0x5a>
c000b028:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b02c:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b033:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b039:	53                   	push   ebx
c000b03a:	53                   	push   ebx
c000b03b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b03d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b043:	50                   	push   eax
c000b044:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	83 c4 08             	add    esp,0x8
c000b04d:	5b                   	pop    ebx
c000b04e:	c3                   	ret    
c000b04f:	90                   	nop

c000b050 <File::seek(unsigned long long)>:
c000b050:	56                   	push   esi
c000b051:	b8 0b 00 00 00       	mov    eax,0xb
c000b056:	53                   	push   ebx
c000b057:	51                   	push   ecx
c000b058:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b05c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b060:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b064:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b06b:	83 fa 19             	cmp    edx,0x19
c000b06e:	77 31                	ja     c000b0a1 <File::seek(unsigned long long)+0x51>
c000b070:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b077:	85 d2                	test   edx,edx
c000b079:	74 26                	je     c000b0a1 <File::seek(unsigned long long)+0x51>
c000b07b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b081:	85 d2                	test   edx,edx
c000b083:	74 1c                	je     c000b0a1 <File::seek(unsigned long long)+0x51>
c000b085:	b8 05 00 00 00       	mov    eax,0x5
c000b08a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b08e:	74 11                	je     c000b0a1 <File::seek(unsigned long long)+0x51>
c000b090:	8b 02                	mov    eax,DWORD PTR [edx]
c000b092:	53                   	push   ebx
c000b093:	51                   	push   ecx
c000b094:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b09a:	52                   	push   edx
c000b09b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	5a                   	pop    edx
c000b0a2:	5b                   	pop    ebx
c000b0a3:	5e                   	pop    esi
c000b0a4:	c3                   	ret    
c000b0a5:	90                   	nop

c000b0a6 <File::tell(unsigned long long*)>:
c000b0a6:	83 ec 0c             	sub    esp,0xc
c000b0a9:	b8 0b 00 00 00       	mov    eax,0xb
c000b0ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0b2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0b9:	83 fa 19             	cmp    edx,0x19
c000b0bc:	77 34                	ja     c000b0f2 <File::tell(unsigned long long*)+0x4c>
c000b0be:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0c5:	85 d2                	test   edx,edx
c000b0c7:	74 29                	je     c000b0f2 <File::tell(unsigned long long*)+0x4c>
c000b0c9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0cf:	85 d2                	test   edx,edx
c000b0d1:	74 1f                	je     c000b0f2 <File::tell(unsigned long long*)+0x4c>
c000b0d3:	b8 05 00 00 00       	mov    eax,0x5
c000b0d8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0dc:	74 14                	je     c000b0f2 <File::tell(unsigned long long*)+0x4c>
c000b0de:	50                   	push   eax
c000b0df:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0eb:	52                   	push   edx
c000b0ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b0ef:	83 c4 10             	add    esp,0x10
c000b0f2:	83 c4 0c             	add    esp,0xc
c000b0f5:	c3                   	ret    

c000b0f6 <File::rewind()>:
c000b0f6:	83 ec 10             	sub    esp,0x10
c000b0f9:	6a 00                	push   0x0
c000b0fb:	6a 00                	push   0x0
c000b0fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b101:	e8 4a ff ff ff       	call   c000b050 <File::seek(unsigned long long)>
c000b106:	83 c4 1c             	add    esp,0x1c
c000b109:	c3                   	ret    

c000b10a <File::unlink()>:
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	b8 0b 00 00 00       	mov    eax,0xb
c000b112:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b116:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b11d:	83 f9 19             	cmp    ecx,0x19
c000b120:	77 2f                	ja     c000b151 <File::unlink()+0x47>
c000b122:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b129:	85 c9                	test   ecx,ecx
c000b12b:	74 24                	je     c000b151 <File::unlink()+0x47>
c000b12d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b133:	85 c9                	test   ecx,ecx
c000b135:	74 1a                	je     c000b151 <File::unlink()+0x47>
c000b137:	b8 06 00 00 00       	mov    eax,0x6
c000b13c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b140:	75 0f                	jne    c000b151 <File::unlink()+0x47>
c000b142:	50                   	push   eax
c000b143:	83 c2 0d             	add    edx,0xd
c000b146:	50                   	push   eax
c000b147:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b149:	52                   	push   edx
c000b14a:	51                   	push   ecx
c000b14b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b14e:	83 c4 10             	add    esp,0x10
c000b151:	83 c4 0c             	add    esp,0xc
c000b154:	c3                   	ret    
c000b155:	90                   	nop

c000b156 <File::rename(char const*)>:
c000b156:	83 ec 0c             	sub    esp,0xc
c000b159:	b8 0b 00 00 00       	mov    eax,0xb
c000b15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b162:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b169:	83 f9 19             	cmp    ecx,0x19
c000b16c:	77 32                	ja     c000b1a0 <File::rename(char const*)+0x4a>
c000b16e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b175:	85 c9                	test   ecx,ecx
c000b177:	74 27                	je     c000b1a0 <File::rename(char const*)+0x4a>
c000b179:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b17f:	85 c9                	test   ecx,ecx
c000b181:	74 1d                	je     c000b1a0 <File::rename(char const*)+0x4a>
c000b183:	b8 06 00 00 00       	mov    eax,0x6
c000b188:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b18c:	75 12                	jne    c000b1a0 <File::rename(char const*)+0x4a>
c000b18e:	50                   	push   eax
c000b18f:	83 c2 0d             	add    edx,0xd
c000b192:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b198:	52                   	push   edx
c000b199:	51                   	push   ecx
c000b19a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b19d:	83 c4 10             	add    esp,0x10
c000b1a0:	83 c4 0c             	add    esp,0xc
c000b1a3:	c3                   	ret    

c000b1a4 <File::chfatattr(unsigned char, unsigned char)>:
c000b1a4:	57                   	push   edi
c000b1a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1aa:	56                   	push   esi
c000b1ab:	53                   	push   ebx
c000b1ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1bf:	83 f9 19             	cmp    ecx,0x19
c000b1c2:	77 37                	ja     c000b1fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1c4:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1cb:	85 c9                	test   ecx,ecx
c000b1cd:	74 2c                	je     c000b1fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1cf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1d5:	85 c9                	test   ecx,ecx
c000b1d7:	74 22                	je     c000b1fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1d9:	b8 06 00 00 00       	mov    eax,0x6
c000b1de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1e2:	75 17                	jne    c000b1fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1e4:	89 f0                	mov    eax,esi
c000b1e6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b1e8:	0f b6 f0             	movzx  esi,al
c000b1eb:	56                   	push   esi
c000b1ec:	83 c2 0d             	add    edx,0xd
c000b1ef:	0f b6 db             	movzx  ebx,bl
c000b1f2:	53                   	push   ebx
c000b1f3:	52                   	push   edx
c000b1f4:	51                   	push   ecx
c000b1f5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	5b                   	pop    ebx
c000b1fc:	5e                   	pop    esi
c000b1fd:	5f                   	pop    edi
c000b1fe:	c3                   	ret    
c000b1ff:	90                   	nop

c000b200 <File::exists()>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	31 c0                	xor    eax,eax
c000b205:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b209:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b210:	83 f9 19             	cmp    ecx,0x19
c000b213:	77 24                	ja     c000b239 <File::exists()+0x39>
c000b215:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b21c:	85 c9                	test   ecx,ecx
c000b21e:	74 19                	je     c000b239 <File::exists()+0x39>
c000b220:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b226:	85 c9                	test   ecx,ecx
c000b228:	74 0f                	je     c000b239 <File::exists()+0x39>
c000b22a:	50                   	push   eax
c000b22b:	83 c2 0d             	add    edx,0xd
c000b22e:	50                   	push   eax
c000b22f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b231:	52                   	push   edx
c000b232:	51                   	push   ecx
c000b233:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	83 c4 0c             	add    esp,0xc
c000b23c:	c3                   	ret    
c000b23d:	90                   	nop

c000b23e <File::stat(unsigned long long*, bool*)>:
c000b23e:	56                   	push   esi
c000b23f:	53                   	push   ebx
c000b240:	50                   	push   eax
c000b241:	b8 0b 00 00 00       	mov    eax,0xb
c000b246:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b24a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b24e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b252:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b259:	83 f9 19             	cmp    ecx,0x19
c000b25c:	77 3d                	ja     c000b29b <File::stat(unsigned long long*, bool*)+0x5d>
c000b25e:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b265:	85 c9                	test   ecx,ecx
c000b267:	74 32                	je     c000b29b <File::stat(unsigned long long*, bool*)+0x5d>
c000b269:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b26f:	85 c9                	test   ecx,ecx
c000b271:	74 28                	je     c000b29b <File::stat(unsigned long long*, bool*)+0x5d>
c000b273:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b275:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b279:	74 13                	je     c000b28e <File::stat(unsigned long long*, bool*)+0x50>
c000b27b:	83 ec 04             	sub    esp,0x4
c000b27e:	56                   	push   esi
c000b27f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b285:	51                   	push   ecx
c000b286:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b289:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b28c:	eb 0a                	jmp    c000b298 <File::stat(unsigned long long*, bool*)+0x5a>
c000b28e:	53                   	push   ebx
c000b28f:	83 c2 0d             	add    edx,0xd
c000b292:	56                   	push   esi
c000b293:	52                   	push   edx
c000b294:	51                   	push   ecx
c000b295:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b298:	83 c4 10             	add    esp,0x10
c000b29b:	5a                   	pop    edx
c000b29c:	5b                   	pop    ebx
c000b29d:	5e                   	pop    esi
c000b29e:	c3                   	ret    

c000b29f <Fs::setcwd(Process*, char*)>:
c000b29f:	55                   	push   ebp
c000b2a0:	57                   	push   edi
c000b2a1:	56                   	push   esi
c000b2a2:	53                   	push   ebx
c000b2a3:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2a9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2b0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2b6:	57                   	push   edi
c000b2b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2be:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2c2:	56                   	push   esi
c000b2c3:	e8 58 fa ff ff       	call   c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2cb:	e8 90 52 ff ff       	call   c0000560 <strlen>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	83 f8 02             	cmp    eax,0x2
c000b2d6:	77 15                	ja     c000b2ed <Fs::setcwd(Process*, char*)+0x4e>
c000b2d8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b2dd:	83 eb 41             	sub    ebx,0x41
c000b2e0:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b2e7:	85 c0                	test   eax,eax
c000b2e9:	75 1c                	jne    c000b307 <Fs::setcwd(Process*, char*)+0x68>
c000b2eb:	eb 2f                	jmp    c000b31c <Fs::setcwd(Process*, char*)+0x7d>
c000b2ed:	83 ec 0c             	sub    esp,0xc
c000b2f0:	56                   	push   esi
c000b2f1:	e8 6a 52 ff ff       	call   c0000560 <strlen>
c000b2f6:	83 c4 10             	add    esp,0x10
c000b2f9:	83 f8 03             	cmp    eax,0x3
c000b2fc:	75 57                	jne    c000b355 <Fs::setcwd(Process*, char*)+0xb6>
c000b2fe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b303:	75 50                	jne    c000b355 <Fs::setcwd(Process*, char*)+0xb6>
c000b305:	eb d1                	jmp    c000b2d8 <Fs::setcwd(Process*, char*)+0x39>
c000b307:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b30e:	75 0c                	jne    c000b31c <Fs::setcwd(Process*, char*)+0x7d>
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	50                   	push   eax
c000b314:	e8 9b 1d 00 00       	call   c000d0b4 <LogicalDisk::mount()>
c000b319:	83 c4 10             	add    esp,0x10
c000b31c:	b8 03 00 00 00       	mov    eax,0x3
c000b321:	83 fb 19             	cmp    ebx,0x19
c000b324:	0f 87 c6 00 00 00    	ja     c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b32a:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b331:	b8 05 00 00 00       	mov    eax,0x5
c000b336:	85 d2                	test   edx,edx
c000b338:	0f 84 b2 00 00 00    	je     c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b33e:	b8 06 00 00 00       	mov    eax,0x6
c000b343:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b34a:	0f 85 92 00 00 00    	jne    c000b3e2 <Fs::setcwd(Process*, char*)+0x143>
c000b350:	e9 9b 00 00 00       	jmp    c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b355:	83 ec 0c             	sub    esp,0xc
c000b358:	68 14 01 00 00       	push   0x114
c000b35d:	e8 2a c7 ff ff       	call   c0007a8c <malloc>
c000b362:	83 c4 0c             	add    esp,0xc
c000b365:	89 c3                	mov    ebx,eax
c000b367:	55                   	push   ebp
c000b368:	56                   	push   esi
c000b369:	50                   	push   eax
c000b36a:	e8 67 fb ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c000b36f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b374:	83 c4 0c             	add    esp,0xc
c000b377:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b37b:	50                   	push   eax
c000b37c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b380:	50                   	push   eax
c000b381:	53                   	push   ebx
c000b382:	e8 b7 fe ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	83 f8 02             	cmp    eax,0x2
c000b38d:	74 27                	je     c000b3b6 <Fs::setcwd(Process*, char*)+0x117>
c000b38f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b394:	75 1c                	jne    c000b3b2 <Fs::setcwd(Process*, char*)+0x113>
c000b396:	b8 02 00 00 00       	mov    eax,0x2
c000b39b:	85 db                	test   ebx,ebx
c000b39d:	74 51                	je     c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b39f:	83 ec 0c             	sub    esp,0xc
c000b3a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a4:	53                   	push   ebx
c000b3a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3a8:	83 c4 10             	add    esp,0x10
c000b3ab:	b8 02 00 00 00       	mov    eax,0x2
c000b3b0:	eb 3e                	jmp    c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b3b2:	85 c0                	test   eax,eax
c000b3b4:	74 1c                	je     c000b3d2 <Fs::setcwd(Process*, char*)+0x133>
c000b3b6:	b8 01 00 00 00       	mov    eax,0x1
c000b3bb:	85 db                	test   ebx,ebx
c000b3bd:	74 31                	je     c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b3bf:	83 ec 0c             	sub    esp,0xc
c000b3c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3c4:	53                   	push   ebx
c000b3c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3c8:	83 c4 10             	add    esp,0x10
c000b3cb:	b8 01 00 00 00       	mov    eax,0x1
c000b3d0:	eb 1e                	jmp    c000b3f0 <Fs::setcwd(Process*, char*)+0x151>
c000b3d2:	85 db                	test   ebx,ebx
c000b3d4:	74 0c                	je     c000b3e2 <Fs::setcwd(Process*, char*)+0x143>
c000b3d6:	83 ec 0c             	sub    esp,0xc
c000b3d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3db:	53                   	push   ebx
c000b3dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3df:	83 c4 10             	add    esp,0x10
c000b3e2:	50                   	push   eax
c000b3e3:	50                   	push   eax
c000b3e4:	56                   	push   esi
c000b3e5:	57                   	push   edi
c000b3e6:	e8 45 52 ff ff       	call   c0000630 <strcpy>
c000b3eb:	83 c4 10             	add    esp,0x10
c000b3ee:	31 c0                	xor    eax,eax
c000b3f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b3f6:	5b                   	pop    ebx
c000b3f7:	5e                   	pop    esi
c000b3f8:	5f                   	pop    edi
c000b3f9:	5d                   	pop    ebp
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <Directory::Directory(char const*, Process*)>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b403:	83 ec 08             	sub    esp,0x8
c000b406:	6a 00                	push   0x0
c000b408:	50                   	push   eax
c000b409:	e8 94 dd ff ff       	call   c00091a2 <UnixFile::UnixFile(int)>
c000b40e:	83 c4 10             	add    esp,0x10
c000b411:	ba 68 02 02 c0       	mov    edx,0xc0020268
c000b416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b41a:	89 10                	mov    DWORD PTR [eax],edx
c000b41c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b420:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42a:	83 c0 0d             	add    eax,0xd
c000b42d:	83 ec 04             	sub    esp,0x4
c000b430:	52                   	push   edx
c000b431:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b435:	50                   	push   eax
c000b436:	e8 e5 f8 ff ff       	call   c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b43b:	83 c4 10             	add    esp,0x10
c000b43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b442:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b445:	83 e8 41             	sub    eax,0x41
c000b448:	88 c2                	mov    dl,al
c000b44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b44e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b460:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b466:	0f b6 c0             	movzx  eax,al
c000b469:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b470:	85 c0                	test   eax,eax
c000b472:	74 3e                	je     c000b4b2 <Directory::Directory(char const*, Process*)+0xb6>
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b47e:	0f b6 c0             	movzx  eax,al
c000b481:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b488:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b48e:	85 c0                	test   eax,eax
c000b490:	75 20                	jne    c000b4b2 <Directory::Directory(char const*, Process*)+0xb6>
c000b492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b496:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b49c:	0f b6 c0             	movzx  eax,al
c000b49f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	50                   	push   eax
c000b4aa:	e8 05 1c 00 00       	call   c000d0b4 <LogicalDisk::mount()>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	90                   	nop
c000b4b3:	83 c4 0c             	add    esp,0xc
c000b4b6:	c3                   	ret    
c000b4b7:	90                   	nop

c000b4b8 <Directory::open()>:
c000b4b8:	53                   	push   ebx
c000b4b9:	b8 0b 00 00 00       	mov    eax,0xb
c000b4be:	83 ec 08             	sub    esp,0x8
c000b4c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4c5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4cc:	83 fa 19             	cmp    edx,0x19
c000b4cf:	77 3d                	ja     c000b50e <Directory::open()+0x56>
c000b4d1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b4d8:	85 d2                	test   edx,edx
c000b4da:	74 32                	je     c000b50e <Directory::open()+0x56>
c000b4dc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b4e2:	85 d2                	test   edx,edx
c000b4e4:	74 28                	je     c000b50e <Directory::open()+0x56>
c000b4e6:	b8 06 00 00 00       	mov    eax,0x6
c000b4eb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b4ef:	75 1d                	jne    c000b50e <Directory::open()+0x56>
c000b4f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b4f7:	50                   	push   eax
c000b4f8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b4fa:	51                   	push   ecx
c000b4fb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b4fe:	51                   	push   ecx
c000b4ff:	52                   	push   edx
c000b500:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	85 c0                	test   eax,eax
c000b508:	75 04                	jne    c000b50e <Directory::open()+0x56>
c000b50a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b50e:	83 c4 08             	add    esp,0x8
c000b511:	5b                   	pop    ebx
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <Directory::close()>:
c000b514:	53                   	push   ebx
c000b515:	b8 0b 00 00 00       	mov    eax,0xb
c000b51a:	83 ec 08             	sub    esp,0x8
c000b51d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b521:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b528:	83 f9 19             	cmp    ecx,0x19
c000b52b:	77 41                	ja     c000b56e <Directory::close()+0x5a>
c000b52d:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b534:	85 db                	test   ebx,ebx
c000b536:	74 36                	je     c000b56e <Directory::close()+0x5a>
c000b538:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b53f:	74 2d                	je     c000b56e <Directory::close()+0x5a>
c000b541:	b8 05 00 00 00       	mov    eax,0x5
c000b546:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b54a:	74 22                	je     c000b56e <Directory::close()+0x5a>
c000b54c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b550:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b557:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b55d:	53                   	push   ebx
c000b55e:	53                   	push   ebx
c000b55f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b561:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b567:	50                   	push   eax
c000b568:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b56b:	83 c4 10             	add    esp,0x10
c000b56e:	83 c4 08             	add    esp,0x8
c000b571:	5b                   	pop    ebx
c000b572:	c3                   	ret    
c000b573:	90                   	nop

c000b574 <Directory::unlink()>:
c000b574:	83 ec 0c             	sub    esp,0xc
c000b577:	b8 0b 00 00 00       	mov    eax,0xb
c000b57c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b580:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b587:	83 f9 19             	cmp    ecx,0x19
c000b58a:	77 2f                	ja     c000b5bb <Directory::unlink()+0x47>
c000b58c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b593:	85 c9                	test   ecx,ecx
c000b595:	74 24                	je     c000b5bb <Directory::unlink()+0x47>
c000b597:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b59d:	85 c9                	test   ecx,ecx
c000b59f:	74 1a                	je     c000b5bb <Directory::unlink()+0x47>
c000b5a1:	b8 06 00 00 00       	mov    eax,0x6
c000b5a6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5aa:	75 0f                	jne    c000b5bb <Directory::unlink()+0x47>
c000b5ac:	50                   	push   eax
c000b5ad:	83 c2 0d             	add    edx,0xd
c000b5b0:	50                   	push   eax
c000b5b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5b3:	52                   	push   edx
c000b5b4:	51                   	push   ecx
c000b5b5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5b8:	83 c4 10             	add    esp,0x10
c000b5bb:	83 c4 0c             	add    esp,0xc
c000b5be:	c3                   	ret    
c000b5bf:	90                   	nop

c000b5c0 <Directory::rename(char const*)>:
c000b5c0:	83 ec 0c             	sub    esp,0xc
c000b5c3:	b8 0b 00 00 00       	mov    eax,0xb
c000b5c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5d3:	83 f9 19             	cmp    ecx,0x19
c000b5d6:	77 32                	ja     c000b60a <Directory::rename(char const*)+0x4a>
c000b5d8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5df:	85 c9                	test   ecx,ecx
c000b5e1:	74 27                	je     c000b60a <Directory::rename(char const*)+0x4a>
c000b5e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5e9:	85 c9                	test   ecx,ecx
c000b5eb:	74 1d                	je     c000b60a <Directory::rename(char const*)+0x4a>
c000b5ed:	b8 06 00 00 00       	mov    eax,0x6
c000b5f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5f6:	75 12                	jne    c000b60a <Directory::rename(char const*)+0x4a>
c000b5f8:	50                   	push   eax
c000b5f9:	83 c2 0d             	add    edx,0xd
c000b5fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b602:	52                   	push   edx
c000b603:	51                   	push   ecx
c000b604:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b607:	83 c4 10             	add    esp,0x10
c000b60a:	83 c4 0c             	add    esp,0xc
c000b60d:	c3                   	ret    

c000b60e <Directory::exists()>:
c000b60e:	83 ec 0c             	sub    esp,0xc
c000b611:	31 c0                	xor    eax,eax
c000b613:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b617:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b61e:	83 f9 19             	cmp    ecx,0x19
c000b621:	77 24                	ja     c000b647 <Directory::exists()+0x39>
c000b623:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b62a:	85 c9                	test   ecx,ecx
c000b62c:	74 19                	je     c000b647 <Directory::exists()+0x39>
c000b62e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b634:	85 c9                	test   ecx,ecx
c000b636:	74 0f                	je     c000b647 <Directory::exists()+0x39>
c000b638:	50                   	push   eax
c000b639:	83 c2 0d             	add    edx,0xd
c000b63c:	50                   	push   eax
c000b63d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b63f:	52                   	push   edx
c000b640:	51                   	push   ecx
c000b641:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b644:	83 c4 10             	add    esp,0x10
c000b647:	83 c4 0c             	add    esp,0xc
c000b64a:	c3                   	ret    
c000b64b:	90                   	nop

c000b64c <Directory::read(dirent*)>:
c000b64c:	83 ec 1c             	sub    esp,0x1c
c000b64f:	b8 0b 00 00 00       	mov    eax,0xb
c000b654:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b658:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b65f:	83 f9 19             	cmp    ecx,0x19
c000b662:	77 30                	ja     c000b694 <Directory::read(dirent*)+0x48>
c000b664:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b66b:	85 c9                	test   ecx,ecx
c000b66d:	74 25                	je     c000b694 <Directory::read(dirent*)+0x48>
c000b66f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b676:	74 1c                	je     c000b694 <Directory::read(dirent*)+0x48>
c000b678:	83 ec 0c             	sub    esp,0xc
c000b67b:	8b 02                	mov    eax,DWORD PTR [edx]
c000b67d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b681:	51                   	push   ecx
c000b682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b686:	6a 00                	push   0x0
c000b688:	68 10 01 00 00       	push   0x110
c000b68d:	52                   	push   edx
c000b68e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b691:	83 c4 20             	add    esp,0x20
c000b694:	83 c4 1c             	add    esp,0x1c
c000b697:	c3                   	ret    

c000b698 <Directory::create()>:
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	b8 0b 00 00 00       	mov    eax,0xb
c000b6a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6ab:	83 f9 19             	cmp    ecx,0x19
c000b6ae:	77 2f                	ja     c000b6df <Directory::create()+0x47>
c000b6b0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6b7:	85 c9                	test   ecx,ecx
c000b6b9:	74 24                	je     c000b6df <Directory::create()+0x47>
c000b6bb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6c1:	85 c9                	test   ecx,ecx
c000b6c3:	74 1a                	je     c000b6df <Directory::create()+0x47>
c000b6c5:	b8 06 00 00 00       	mov    eax,0x6
c000b6ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6ce:	75 0f                	jne    c000b6df <Directory::create()+0x47>
c000b6d0:	50                   	push   eax
c000b6d1:	83 c2 0d             	add    edx,0xd
c000b6d4:	50                   	push   eax
c000b6d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6d7:	52                   	push   edx
c000b6d8:	51                   	push   ecx
c000b6d9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	83 c4 0c             	add    esp,0xc
c000b6e2:	c3                   	ret    
c000b6e3:	90                   	nop

c000b6e4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b6e4:	b8 0a 00 00 00       	mov    eax,0xa
c000b6e9:	c3                   	ret    
c000b6ea:	66 90                	xchg   ax,ax

c000b6ec <Bus::Bus(char const*)>:
c000b6ec:	83 ec 0c             	sub    esp,0xc
c000b6ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f3:	83 ec 08             	sub    esp,0x8
c000b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fa:	50                   	push   eax
c000b6fb:	e8 1e 08 00 00       	call   c000bf1e <Device::Device(char const*)>
c000b700:	83 c4 10             	add    esp,0x10
c000b703:	ba 84 02 02 c0       	mov    edx,0xc0020284
c000b708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b70c:	89 10                	mov    DWORD PTR [eax],edx
c000b70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b712:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b71c:	90                   	nop
c000b71d:	83 c4 0c             	add    esp,0xc
c000b720:	c3                   	ret    
c000b721:	90                   	nop
c000b722:	66 90                	xchg   ax,ax

c000b724 <Bus::~Bus()>:
c000b724:	83 ec 0c             	sub    esp,0xc
c000b727:	ba 84 02 02 c0       	mov    edx,0xc0020284
c000b72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b730:	89 10                	mov    DWORD PTR [eax],edx
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	83 ec 0c             	sub    esp,0xc
c000b739:	50                   	push   eax
c000b73a:	e8 4d 05 00 00       	call   c000bc8c <Device::~Device()>
c000b73f:	83 c4 10             	add    esp,0x10
c000b742:	90                   	nop
c000b743:	83 c4 0c             	add    esp,0xc
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Bus::~Bus()>:
c000b748:	83 ec 0c             	sub    esp,0xc
c000b74b:	83 ec 0c             	sub    esp,0xc
c000b74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b752:	e8 cd ff ff ff       	call   c000b724 <Bus::~Bus()>
c000b757:	83 c4 10             	add    esp,0x10
c000b75a:	83 ec 08             	sub    esp,0x8
c000b75d:	68 58 01 00 00       	push   0x158
c000b762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b766:	e8 ec f0 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000b76b:	83 c4 10             	add    esp,0x10
c000b76e:	83 c4 0c             	add    esp,0xc
c000b771:	c3                   	ret    

c000b772 <beepThread(void*)>:
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b77a:	48                   	dec    eax
c000b77b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b77f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b784:	75 01                	jne    c000b787 <beepThread(void*)+0x15>
c000b786:	fb                   	sti    
c000b787:	6b c2 0a             	imul   eax,edx,0xa
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	50                   	push   eax
c000b78e:	e8 c9 9b 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c000b793:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b79a:	e8 95 ba 00 00       	call   c0017234 <HalMakeBeep(int)>
c000b79f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7a7:	83 c4 1c             	add    esp,0x1c
c000b7aa:	e9 91 9a 00 00       	jmp    c0015240 <blockTask(TaskState)>

c000b7af <Krnl::beep(int, int, bool)>:
c000b7af:	56                   	push   esi
c000b7b0:	53                   	push   ebx
c000b7b1:	83 ec 10             	sub    esp,0x10
c000b7b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c0:	e8 6f ba 00 00       	call   c0017234 <HalMakeBeep(int)>
c000b7c5:	89 f0                	mov    eax,esi
c000b7c7:	83 c4 10             	add    esp,0x10
c000b7ca:	84 c0                	test   al,al
c000b7cc:	74 1e                	je     c000b7ec <Krnl::beep(int, int, bool)+0x3d>
c000b7ce:	6b db 0a             	imul   ebx,ebx,0xa
c000b7d1:	83 ec 0c             	sub    esp,0xc
c000b7d4:	53                   	push   ebx
c000b7d5:	e8 82 9b 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c000b7da:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b7e2:	83 c4 14             	add    esp,0x14
c000b7e5:	5b                   	pop    ebx
c000b7e6:	5e                   	pop    esi
c000b7e7:	e9 48 ba 00 00       	jmp    c0017234 <HalMakeBeep(int)>
c000b7ec:	68 e6 00 00 00       	push   0xe6
c000b7f1:	53                   	push   ebx
c000b7f2:	68 72 b7 00 c0       	push   0xc000b772
c000b7f7:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b7fd:	e8 f2 95 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000b802:	83 c4 14             	add    esp,0x14
c000b805:	5b                   	pop    ebx
c000b806:	5e                   	pop    esi
c000b807:	c3                   	ret    

c000b808 <User::loadClockSettings(int)>:
c000b808:	53                   	push   ebx
c000b809:	83 ec 14             	sub    esp,0x14
c000b80c:	68 14 01 00 00       	push   0x114
c000b811:	e8 76 c2 ff ff       	call   c0007a8c <malloc>
c000b816:	83 c4 0c             	add    esp,0xc
c000b819:	89 c3                	mov    ebx,eax
c000b81b:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b821:	68 a8 02 02 c0       	push   0xc00202a8
c000b826:	50                   	push   eax
c000b827:	e8 aa f6 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c000b82c:	58                   	pop    eax
c000b82d:	5a                   	pop    edx
c000b82e:	6a 01                	push   0x1
c000b830:	53                   	push   ebx
c000b831:	e8 5c f7 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c000b836:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b839:	e8 b2 f7 ff ff       	call   c000aff0 <File::close()>
c000b83e:	83 c4 10             	add    esp,0x10
c000b841:	85 db                	test   ebx,ebx
c000b843:	74 0f                	je     c000b854 <User::loadClockSettings(int)+0x4c>
c000b845:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b847:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b84b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b84e:	83 c4 08             	add    esp,0x8
c000b851:	5b                   	pop    ebx
c000b852:	ff e0                	jmp    eax
c000b854:	83 c4 08             	add    esp,0x8
c000b857:	5b                   	pop    ebx
c000b858:	c3                   	ret    
c000b859:	90                   	nop

c000b85a <Clock::Clock(char const*)>:
c000b85a:	83 ec 0c             	sub    esp,0xc
c000b85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b861:	83 ec 08             	sub    esp,0x8
c000b864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b868:	50                   	push   eax
c000b869:	e8 b0 06 00 00       	call   c000bf1e <Device::Device(char const*)>
c000b86e:	83 c4 10             	add    esp,0x10
c000b871:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000b876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b87a:	89 10                	mov    DWORD PTR [eax],edx
c000b87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b880:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b88a:	90                   	nop
c000b88b:	83 c4 0c             	add    esp,0xc
c000b88e:	c3                   	ret    
c000b88f:	90                   	nop

c000b890 <Clock::~Clock()>:
c000b890:	83 ec 0c             	sub    esp,0xc
c000b893:	ba d0 02 02 c0       	mov    edx,0xc00202d0
c000b898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b89c:	89 10                	mov    DWORD PTR [eax],edx
c000b89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a2:	83 ec 0c             	sub    esp,0xc
c000b8a5:	50                   	push   eax
c000b8a6:	e8 e1 03 00 00       	call   c000bc8c <Device::~Device()>
c000b8ab:	83 c4 10             	add    esp,0x10
c000b8ae:	90                   	nop
c000b8af:	83 c4 0c             	add    esp,0xc
c000b8b2:	c3                   	ret    
c000b8b3:	90                   	nop

c000b8b4 <Clock::~Clock()>:
c000b8b4:	83 ec 0c             	sub    esp,0xc
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8be:	e8 cd ff ff ff       	call   c000b890 <Clock::~Clock()>
c000b8c3:	83 c4 10             	add    esp,0x10
c000b8c6:	83 ec 08             	sub    esp,0x8
c000b8c9:	68 58 01 00 00       	push   0x158
c000b8ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d2:	e8 80 ef ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000b8d7:	83 c4 10             	add    esp,0x10
c000b8da:	83 c4 0c             	add    esp,0xc
c000b8dd:	c3                   	ret    

c000b8de <Clock::timeInSecondsLocal()>:
c000b8de:	53                   	push   ebx
c000b8df:	83 ec 14             	sub    esp,0x14
c000b8e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b8e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8e8:	50                   	push   eax
c000b8e9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8ec:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b8f3:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b8f9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b8ff:	89 cb                	mov    ebx,ecx
c000b901:	c1 fb 1f             	sar    ebx,0x1f
c000b904:	01 c8                	add    eax,ecx
c000b906:	11 da                	adc    edx,ebx
c000b908:	83 c4 10             	add    esp,0x10
c000b90b:	31 c9                	xor    ecx,ecx
c000b90d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b914:	74 05                	je     c000b91b <Clock::timeInSecondsLocal()+0x3d>
c000b916:	b9 08 07 00 00       	mov    ecx,0x708
c000b91b:	31 db                	xor    ebx,ebx
c000b91d:	01 c8                	add    eax,ecx
c000b91f:	11 da                	adc    edx,ebx
c000b921:	83 c4 08             	add    esp,0x8
c000b924:	5b                   	pop    ebx
c000b925:	c3                   	ret    

c000b926 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b926:	57                   	push   edi
c000b927:	56                   	push   esi
c000b928:	53                   	push   ebx
c000b929:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b92d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b931:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b935:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b937:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b93a:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b941:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b947:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b94d:	99                   	cdq    
c000b94e:	29 c6                	sub    esi,eax
c000b950:	19 d7                	sbb    edi,edx
c000b952:	89 f0                	mov    eax,esi
c000b954:	89 fa                	mov    edx,edi
c000b956:	31 f6                	xor    esi,esi
c000b958:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b95f:	74 05                	je     c000b966 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b961:	be 08 07 00 00       	mov    esi,0x708
c000b966:	31 ff                	xor    edi,edi
c000b968:	29 f0                	sub    eax,esi
c000b96a:	19 fa                	sbb    edx,edi
c000b96c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b970:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b974:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b978:	89 d8                	mov    eax,ebx
c000b97a:	5b                   	pop    ebx
c000b97b:	5e                   	pop    esi
c000b97c:	5f                   	pop    edi
c000b97d:	ff e0                	jmp    eax

c000b97f <datetimeToSeconds(datetime_t)>:
c000b97f:	55                   	push   ebp
c000b980:	57                   	push   edi
c000b981:	56                   	push   esi
c000b982:	53                   	push   ebx
c000b983:	83 ec 0c             	sub    esp,0xc
c000b986:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000b98a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b98e:	0f b6 c7             	movzx  eax,bh
c000b991:	6b e8 3c             	imul   ebp,eax,0x3c
c000b994:	89 df                	mov    edi,ebx
c000b996:	89 d6                	mov    esi,edx
c000b998:	0f b6 db             	movzx  ebx,bl
c000b99b:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000b9a1:	c1 ef 10             	shr    edi,0x10
c000b9a4:	89 f8                	mov    eax,edi
c000b9a6:	0f b6 f8             	movzx  edi,al
c000b9a9:	0f b6 ce             	movzx  ecx,dh
c000b9ac:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000b9b0:	49                   	dec    ecx
c000b9b1:	c1 ee 10             	shr    esi,0x10
c000b9b4:	01 d8                	add    eax,ebx
c000b9b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9b9:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000b9bf:	c1 f8 1f             	sar    eax,0x1f
c000b9c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9c6:	0f b6 c1             	movzx  eax,cl
c000b9c9:	0f b6 d2             	movzx  edx,dl
c000b9cc:	8b 0c 85 20 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfce0]
c000b9d3:	83 f8 01             	cmp    eax,0x1
c000b9d6:	0f b7 de             	movzx  ebx,si
c000b9d9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b9dd:	76 27                	jbe    c000ba06 <datetimeToSeconds(datetime_t)+0x87>
c000b9df:	83 e6 03             	and    esi,0x3
c000b9e2:	75 22                	jne    c000ba06 <datetimeToSeconds(datetime_t)+0x87>
c000b9e4:	31 d2                	xor    edx,edx
c000b9e6:	be 64 00 00 00       	mov    esi,0x64
c000b9eb:	89 d8                	mov    eax,ebx
c000b9ed:	f7 f6                	div    esi
c000b9ef:	85 d2                	test   edx,edx
c000b9f1:	75 12                	jne    c000ba05 <datetimeToSeconds(datetime_t)+0x86>
c000b9f3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b9f9:	be 90 01 00 00       	mov    esi,0x190
c000b9fe:	99                   	cdq    
c000b9ff:	f7 fe                	idiv   esi
c000ba01:	85 d2                	test   edx,edx
c000ba03:	75 01                	jne    c000ba06 <datetimeToSeconds(datetime_t)+0x87>
c000ba05:	41                   	inc    ecx
c000ba06:	83 fb 46             	cmp    ebx,0x46
c000ba09:	76 48                	jbe    c000ba53 <datetimeToSeconds(datetime_t)+0xd4>
c000ba0b:	be 46 00 00 00       	mov    esi,0x46
c000ba10:	bf 64 00 00 00       	mov    edi,0x64
c000ba15:	bd 90 01 00 00       	mov    ebp,0x190
c000ba1a:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba1f:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba25:	75 23                	jne    c000ba4a <datetimeToSeconds(datetime_t)+0xcb>
c000ba27:	89 f0                	mov    eax,esi
c000ba29:	99                   	cdq    
c000ba2a:	f7 ff                	idiv   edi
c000ba2c:	85 d2                	test   edx,edx
c000ba2e:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba33:	75 15                	jne    c000ba4a <datetimeToSeconds(datetime_t)+0xcb>
c000ba35:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba3b:	99                   	cdq    
c000ba3c:	f7 fd                	idiv   ebp
c000ba3e:	83 fa 01             	cmp    edx,0x1
c000ba41:	19 c0                	sbb    eax,eax
c000ba43:	f7 d0                	not    eax
c000ba45:	05 6e 01 00 00       	add    eax,0x16e
c000ba4a:	46                   	inc    esi
c000ba4b:	01 c1                	add    ecx,eax
c000ba4d:	39 de                	cmp    esi,ebx
c000ba4f:	7c c9                	jl     c000ba1a <datetimeToSeconds(datetime_t)+0x9b>
c000ba51:	eb 34                	jmp    c000ba87 <datetimeToSeconds(datetime_t)+0x108>
c000ba53:	74 32                	je     c000ba87 <datetimeToSeconds(datetime_t)+0x108>
c000ba55:	b8 45 00 00 00       	mov    eax,0x45
c000ba5a:	89 c2                	mov    edx,eax
c000ba5c:	83 e2 03             	and    edx,0x3
c000ba5f:	39 d8                	cmp    eax,ebx
c000ba61:	7e 0f                	jle    c000ba72 <datetimeToSeconds(datetime_t)+0xf3>
c000ba63:	83 fa 01             	cmp    edx,0x1
c000ba66:	19 d2                	sbb    edx,edx
c000ba68:	48                   	dec    eax
c000ba69:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba70:	eb e8                	jmp    c000ba5a <datetimeToSeconds(datetime_t)+0xdb>
c000ba72:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba77:	85 d2                	test   edx,edx
c000ba79:	75 0a                	jne    c000ba85 <datetimeToSeconds(datetime_t)+0x106>
c000ba7b:	83 fb 01             	cmp    ebx,0x1
c000ba7e:	19 c0                	sbb    eax,eax
c000ba80:	05 6e 01 00 00       	add    eax,0x16e
c000ba85:	29 c1                	sub    ecx,eax
c000ba87:	b8 80 51 01 00       	mov    eax,0x15180
c000ba8c:	f7 e9                	imul   ecx
c000ba8e:	03 04 24             	add    eax,DWORD PTR [esp]
c000ba91:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000ba95:	83 c4 0c             	add    esp,0xc
c000ba98:	5b                   	pop    ebx
c000ba99:	5e                   	pop    esi
c000ba9a:	5f                   	pop    edi
c000ba9b:	5d                   	pop    ebp
c000ba9c:	c3                   	ret    
c000ba9d:	90                   	nop

c000ba9e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ba9e:	57                   	push   edi
c000ba9f:	56                   	push   esi
c000baa0:	53                   	push   ebx
c000baa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000baa5:	8b 06                	mov    eax,DWORD PTR [esi]
c000baa7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000baaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bab2:	e8 c8 fe ff ff       	call   c000b97f <datetimeToSeconds(datetime_t)>
c000bab7:	59                   	pop    ecx
c000bab8:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000babf:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000bac5:	5b                   	pop    ebx
c000bac6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000bacc:	89 cb                	mov    ebx,ecx
c000bace:	c1 fb 1f             	sar    ebx,0x1f
c000bad1:	29 c8                	sub    eax,ecx
c000bad3:	19 da                	sbb    edx,ebx
c000bad5:	31 c9                	xor    ecx,ecx
c000bad7:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bade:	74 05                	je     c000bae5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bae0:	b9 08 07 00 00       	mov    ecx,0x708
c000bae5:	31 db                	xor    ebx,ebx
c000bae7:	29 c8                	sub    eax,ecx
c000bae9:	19 da                	sbb    edx,ebx
c000baeb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000baf3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000baf7:	5b                   	pop    ebx
c000baf8:	89 f8                	mov    eax,edi
c000bafa:	5e                   	pop    esi
c000bafb:	5f                   	pop    edi
c000bafc:	ff e0                	jmp    eax

c000bafe <secondsToDatetime(unsigned long long)>:
c000bafe:	55                   	push   ebp
c000baff:	57                   	push   edi
c000bb00:	56                   	push   esi
c000bb01:	53                   	push   ebx
c000bb02:	83 ec 1c             	sub    esp,0x1c
c000bb05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb09:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb0d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb11:	6a 00                	push   0x0
c000bb13:	68 80 51 01 00       	push   0x15180
c000bb18:	55                   	push   ebp
c000bb19:	57                   	push   edi
c000bb1a:	e8 b1 2a 01 00       	call   c001e5d0 <__udivdi3>
c000bb1f:	83 c4 10             	add    esp,0x10
c000bb22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb26:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb2c:	6a 00                	push   0x0
c000bb2e:	68 80 51 01 00       	push   0x15180
c000bb33:	55                   	push   ebp
c000bb34:	57                   	push   edi
c000bb35:	e8 96 2b 01 00       	call   c001e6d0 <__umoddi3>
c000bb3a:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb3f:	83 c4 10             	add    esp,0x10
c000bb42:	99                   	cdq    
c000bb43:	f7 ff                	idiv   edi
c000bb45:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb48:	89 d0                	mov    eax,edx
c000bb4a:	99                   	cdq    
c000bb4b:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb50:	f7 ff                	idiv   edi
c000bb52:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb55:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb58:	85 db                	test   ebx,ebx
c000bb5a:	79 11                	jns    c000bb6d <secondsToDatetime(unsigned long long)+0x6f>
c000bb5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb60:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb66:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb6b:	eb 07                	jmp    c000bb74 <secondsToDatetime(unsigned long long)+0x76>
c000bb6d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb72:	89 d8                	mov    eax,ebx
c000bb74:	99                   	cdq    
c000bb75:	f7 f9                	idiv   ecx
c000bb77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bb80:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bb88:	01 c3                	add    ebx,eax
c000bb8a:	31 d2                	xor    edx,edx
c000bb8c:	89 d8                	mov    eax,ebx
c000bb8e:	bf b4 05 00 00       	mov    edi,0x5b4
c000bb93:	f7 f1                	div    ecx
c000bb95:	31 d2                	xor    edx,edx
c000bb97:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bb9c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bb9f:	89 d8                	mov    eax,ebx
c000bba1:	f7 f7                	div    edi
c000bba3:	29 c1                	sub    ecx,eax
c000bba5:	31 d2                	xor    edx,edx
c000bba7:	89 d8                	mov    eax,ebx
c000bba9:	f7 f5                	div    ebp
c000bbab:	29 c1                	sub    ecx,eax
c000bbad:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbb2:	89 c8                	mov    eax,ecx
c000bbb4:	31 d2                	xor    edx,edx
c000bbb6:	f7 f5                	div    ebp
c000bbb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbbc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbc1:	89 c8                	mov    eax,ecx
c000bbc3:	31 d2                	xor    edx,edx
c000bbc5:	f7 f5                	div    ebp
c000bbc7:	01 c3                	add    ebx,eax
c000bbc9:	31 d2                	xor    edx,edx
c000bbcb:	89 c8                	mov    eax,ecx
c000bbcd:	f7 f7                	div    edi
c000bbcf:	29 c3                	sub    ebx,eax
c000bbd1:	bf 99 00 00 00       	mov    edi,0x99
c000bbd6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bbde:	29 c3                	sub    ebx,eax
c000bbe0:	31 d2                	xor    edx,edx
c000bbe2:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bbe5:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bbe8:	83 c1 02             	add    ecx,0x2
c000bbeb:	bb 05 00 00 00       	mov    ebx,0x5
c000bbf0:	89 c8                	mov    eax,ecx
c000bbf2:	f7 f7                	div    edi
c000bbf4:	89 c7                	mov    edi,eax
c000bbf6:	31 d2                	xor    edx,edx
c000bbf8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bbfe:	83 c0 02             	add    eax,0x2
c000bc01:	f7 f3                	div    ebx
c000bc03:	89 eb                	mov    ebx,ebp
c000bc05:	29 c3                	sub    ebx,eax
c000bc07:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc0d:	19 c0                	sbb    eax,eax
c000bc0f:	31 d2                	xor    edx,edx
c000bc11:	83 e0 0c             	and    eax,0xc
c000bc14:	88 1e                	mov    BYTE PTR [esi],bl
c000bc16:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc1a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc22:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc26:	83 f9 01             	cmp    ecx,0x1
c000bc29:	0f 96 c2             	setbe  dl
c000bc2c:	01 d0                	add    eax,edx
c000bc2e:	41                   	inc    ecx
c000bc2f:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc33:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc36:	83 c4 1c             	add    esp,0x1c
c000bc39:	89 f0                	mov    eax,esi
c000bc3b:	5b                   	pop    ebx
c000bc3c:	5e                   	pop    esi
c000bc3d:	5f                   	pop    edi
c000bc3e:	5d                   	pop    ebp
c000bc3f:	c2 04 00             	ret    0x4

c000bc42 <Clock::timeInDatetimeLocal()>:
c000bc42:	53                   	push   ebx
c000bc43:	83 ec 14             	sub    esp,0x14
c000bc46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc4e:	e8 8b fc ff ff       	call   c000b8de <Clock::timeInSecondsLocal()>
c000bc53:	83 c4 0c             	add    esp,0xc
c000bc56:	52                   	push   edx
c000bc57:	50                   	push   eax
c000bc58:	53                   	push   ebx
c000bc59:	e8 a0 fe ff ff       	call   c000bafe <secondsToDatetime(unsigned long long)>
c000bc5e:	83 c4 14             	add    esp,0x14
c000bc61:	89 d8                	mov    eax,ebx
c000bc63:	5b                   	pop    ebx
c000bc64:	c2 04 00             	ret    0x4
c000bc67:	90                   	nop

c000bc68 <Device::hibernate()>:
c000bc68:	c3                   	ret    
c000bc69:	90                   	nop

c000bc6a <Device::wake()>:
c000bc6a:	c3                   	ret    
c000bc6b:	90                   	nop

c000bc6c <Device::detect()>:
c000bc6c:	c3                   	ret    
c000bc6d:	90                   	nop

c000bc6e <Device::disableLegacy()>:
c000bc6e:	c3                   	ret    
c000bc6f:	90                   	nop

c000bc70 <Device::powerSaving(PowerSavingLevel)>:
c000bc70:	c3                   	ret    
c000bc71:	90                   	nop

c000bc72 <DriverlessDevice::close(int, int, void*)>:
c000bc72:	31 c0                	xor    eax,eax
c000bc74:	c3                   	ret    
c000bc75:	90                   	nop

c000bc76 <DriverlessDevice::detect()>:
c000bc76:	c3                   	ret    
c000bc77:	90                   	nop

c000bc78 <DriverlessDevice::open(int, int, void*)>:
c000bc78:	83 ec 18             	sub    esp,0x18
c000bc7b:	68 50 03 02 c0       	push   0xc0020350
c000bc80:	e8 ba 4b 00 00       	call   c001083f <KePanic(char const*)>
c000bc85:	83 c8 ff             	or     eax,0xffffffff
c000bc88:	83 c4 1c             	add    esp,0x1c
c000bc8b:	c3                   	ret    

c000bc8c <Device::~Device()>:
c000bc8c:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bc91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc95:	89 10                	mov    DWORD PTR [eax],edx
c000bc97:	90                   	nop
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop

c000bc9a <Device::~Device()>:
c000bc9a:	83 ec 0c             	sub    esp,0xc
c000bc9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bca1:	e8 e6 ff ff ff       	call   c000bc8c <Device::~Device()>
c000bca6:	83 c4 04             	add    esp,0x4
c000bca9:	83 ec 08             	sub    esp,0x8
c000bcac:	68 58 01 00 00       	push   0x158
c000bcb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcb5:	e8 9d eb ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000bcba:	83 c4 10             	add    esp,0x10
c000bcbd:	83 c4 0c             	add    esp,0xc
c000bcc0:	c3                   	ret    
c000bcc1:	90                   	nop

c000bcc2 <Device::findAndLoadDriver()>:
c000bcc2:	c7 44 24 04 6e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002036e
c000bcca:	e9 84 ec ff ff       	jmp    c000a953 <Dbg::kprintf(char const*, ...)>
c000bccf:	90                   	nop

c000bcd0 <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcd0:	57                   	push   edi
c000bcd1:	b9 09 00 00 00       	mov    ecx,0x9
c000bcd6:	56                   	push   esi
c000bcd7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bcdb:	81 c7 18 01 00 00    	add    edi,0x118
c000bce1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bce5:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c000bcec:	fc                   	cld    
c000bced:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bcef:	5e                   	pop    esi
c000bcf0:	5f                   	pop    edi
c000bcf1:	c3                   	ret    

c000bcf2 <Device::preOpenACPI(void*, char*, char*)>:
c000bcf2:	57                   	push   edi
c000bcf3:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bcf8:	56                   	push   esi
c000bcf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd05:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd0f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd15:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd1d:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd22:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd2e:	5e                   	pop    esi
c000bd2f:	5f                   	pop    edi
c000bd30:	c3                   	ret    
c000bd31:	90                   	nop

c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd32:	53                   	push   ebx
c000bd33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd3b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd43:	0f b6 c0             	movzx  eax,al
c000bd46:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd4e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd56:	5b                   	pop    ebx
c000bd57:	e9 a8 05 00 00       	jmp    c000c304 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd5c <Device::getParent()>:
c000bd5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd60:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd66:	c3                   	ret    
c000bd67:	90                   	nop

c000bd68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd68:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bd6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd75:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd79:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bd81:	e9 f5 06 00 00       	jmp    c000c47b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bd86 <Device::addChild(Device*)>:
c000bd86:	53                   	push   ebx
c000bd87:	83 ec 08             	sub    esp,0x8
c000bd8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd92:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bd98:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bd9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bda0:	85 d2                	test   edx,edx
c000bda2:	74 04                	je     c000bda8 <Device::addChild(Device*)+0x22>
c000bda4:	89 d3                	mov    ebx,edx
c000bda6:	eb f6                	jmp    c000bd9e <Device::addChild(Device*)+0x18>
c000bda8:	83 ec 0c             	sub    esp,0xc
c000bdab:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bdae:	6a 08                	push   0x8
c000bdb0:	e8 d7 bc ff ff       	call   c0007a8c <malloc>
c000bdb5:	89 03                	mov    DWORD PTR [ebx],eax
c000bdb7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdbd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdc4:	83 c4 18             	add    esp,0x18
c000bdc7:	5b                   	pop    ebx
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <Device::removeAllChildren()>:
c000bdca:	56                   	push   esi
c000bdcb:	53                   	push   ebx
c000bdcc:	52                   	push   edx
c000bdcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bdd1:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bdd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bdda:	74 17                	je     c000bdf3 <Device::removeAllChildren()+0x29>
c000bddc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bddf:	85 c0                	test   eax,eax
c000bde1:	74 0c                	je     c000bdef <Device::removeAllChildren()+0x25>
c000bde3:	83 ec 0c             	sub    esp,0xc
c000bde6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bde8:	50                   	push   eax
c000bde9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bdec:	83 c4 10             	add    esp,0x10
c000bdef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bdf1:	eb e4                	jmp    c000bdd7 <Device::removeAllChildren()+0xd>
c000bdf3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bdf9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bdff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be0c:	58                   	pop    eax
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	c3                   	ret    

c000be10 <Device::hibernateAll()>:
c000be10:	53                   	push   ebx
c000be11:	83 ec 14             	sub    esp,0x14
c000be14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be18:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be1a:	53                   	push   ebx
c000be1b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be24:	83 c4 10             	add    esp,0x10
c000be27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be2a:	74 0f                	je     c000be3b <Device::hibernateAll()+0x2b>
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be32:	e8 d9 ff ff ff       	call   c000be10 <Device::hibernateAll()>
c000be37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be39:	eb e9                	jmp    c000be24 <Device::hibernateAll()+0x14>
c000be3b:	83 c4 08             	add    esp,0x8
c000be3e:	5b                   	pop    ebx
c000be3f:	c3                   	ret    

c000be40 <Device::wakeAll()>:
c000be40:	53                   	push   ebx
c000be41:	83 ec 14             	sub    esp,0x14
c000be44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4a:	53                   	push   ebx
c000be4b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be54:	83 c4 10             	add    esp,0x10
c000be57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be5a:	74 0f                	je     c000be6b <Device::wakeAll()+0x2b>
c000be5c:	83 ec 0c             	sub    esp,0xc
c000be5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be62:	e8 d9 ff ff ff       	call   c000be40 <Device::wakeAll()>
c000be67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be69:	eb e9                	jmp    c000be54 <Device::wakeAll()+0x14>
c000be6b:	83 c4 08             	add    esp,0x8
c000be6e:	5b                   	pop    ebx
c000be6f:	c3                   	ret    

c000be70 <Device::detectAll()>:
c000be70:	53                   	push   ebx
c000be71:	83 ec 14             	sub    esp,0x14
c000be74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be7a:	53                   	push   ebx
c000be7b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000be7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be8a:	74 0f                	je     c000be9b <Device::detectAll()+0x2b>
c000be8c:	83 ec 0c             	sub    esp,0xc
c000be8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be92:	e8 d9 ff ff ff       	call   c000be70 <Device::detectAll()>
c000be97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be99:	eb e9                	jmp    c000be84 <Device::detectAll()+0x14>
c000be9b:	83 c4 08             	add    esp,0x8
c000be9e:	5b                   	pop    ebx
c000be9f:	c3                   	ret    

c000bea0 <Device::disableLegacyAll()>:
c000bea0:	c3                   	ret    
c000bea1:	90                   	nop

c000bea2 <Device::loadDriversForAll()>:
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <Device::closeAll()>:
c000bea4:	53                   	push   ebx
c000bea5:	83 ec 08             	sub    esp,0x8
c000bea8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000beac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beae:	6a 00                	push   0x0
c000beb0:	6a 00                	push   0x0
c000beb2:	6a 00                	push   0x0
c000beb4:	53                   	push   ebx
c000beb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000beb8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bebe:	83 c4 10             	add    esp,0x10
c000bec1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bec4:	74 0f                	je     c000bed5 <Device::closeAll()+0x31>
c000bec6:	83 ec 0c             	sub    esp,0xc
c000bec9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000becc:	e8 d3 ff ff ff       	call   c000bea4 <Device::closeAll()>
c000bed1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bed3:	eb e9                	jmp    c000bebe <Device::closeAll()+0x1a>
c000bed5:	83 c4 08             	add    esp,0x8
c000bed8:	5b                   	pop    ebx
c000bed9:	c3                   	ret    

c000beda <Device::powerSavingAll(PowerSavingLevel)>:
c000beda:	56                   	push   esi
c000bedb:	53                   	push   ebx
c000bedc:	83 ec 0c             	sub    esp,0xc
c000bedf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bee3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bee7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bee9:	56                   	push   esi
c000beea:	53                   	push   ebx
c000beeb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000beee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bef4:	83 c4 10             	add    esp,0x10
c000bef7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000befa:	74 0f                	je     c000bf0b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000befc:	52                   	push   edx
c000befd:	52                   	push   edx
c000befe:	56                   	push   esi
c000beff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf02:	e8 d3 ff ff ff       	call   c000beda <Device::powerSavingAll(PowerSavingLevel)>
c000bf07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf09:	eb e9                	jmp    c000bef4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf0b:	58                   	pop    eax
c000bf0c:	5b                   	pop    ebx
c000bf0d:	5e                   	pop    esi
c000bf0e:	c3                   	ret    
c000bf0f:	90                   	nop

c000bf10 <Device::setName(char const*)>:
c000bf10:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf18:	e9 13 47 ff ff       	jmp    c0000630 <strcpy>
c000bf1d:	90                   	nop

c000bf1e <Device::Device(char const*)>:
c000bf1e:	83 ec 1c             	sub    esp,0x1c
c000bf21:	ba b0 03 02 c0       	mov    edx,0xc00203b0
c000bf26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf2a:	89 10                	mov    DWORD PTR [eax],edx
c000bf2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf30:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf3e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf4c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf5a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf64:	83 ec 08             	sub    esp,0x8
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6f:	e8 9c ff ff ff       	call   c000bf10 <Device::setName(char const*)>
c000bf74:	83 c4 10             	add    esp,0x10
c000bf77:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bf7f:	83 ec 0c             	sub    esp,0xc
c000bf82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf86:	e8 01 bb ff ff       	call   c0007a8c <malloc>
c000bf8b:	83 c4 10             	add    esp,0x10
c000bf8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf9b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf9f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfaf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfca:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bfd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bfdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bfea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfee:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c014:	90                   	nop
c000c015:	83 c4 1c             	add    esp,0x1c
c000c018:	c3                   	ret    
c000c019:	90                   	nop

c000c01a <Device::getName()>:
c000c01a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c01e:	05 d0 00 00 00       	add    eax,0xd0
c000c023:	c3                   	ret    

c000c024 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c024:	83 ec 0c             	sub    esp,0xc
c000c027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02b:	83 ec 08             	sub    esp,0x8
c000c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c032:	50                   	push   eax
c000c033:	e8 e6 fe ff ff       	call   c000bf1e <Device::Device(char const*)>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c000c040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c044:	89 10                	mov    DWORD PTR [eax],edx
c000c046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c054:	90                   	nop
c000c055:	83 c4 0c             	add    esp,0xc
c000c058:	c3                   	ret    
c000c059:	90                   	nop

c000c05a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c05a:	57                   	push   edi
c000c05b:	56                   	push   esi
c000c05c:	53                   	push   ebx
c000c05d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c061:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c069:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c06f:	75 0c                	jne    c000c07d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c071:	52                   	push   edx
c000c072:	52                   	push   edx
c000c073:	53                   	push   ebx
c000c074:	56                   	push   esi
c000c075:	e8 08 2a 01 00       	call   c001ea82 <LinkedList<Device>::addElement(Device*)>
c000c07a:	83 c4 10             	add    esp,0x10
c000c07d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c083:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c086:	74 12                	je     c000c09a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c088:	50                   	push   eax
c000c089:	57                   	push   edi
c000c08a:	56                   	push   esi
c000c08b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c08e:	e8 c7 ff ff ff       	call   c000c05a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c093:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c095:	83 c4 10             	add    esp,0x10
c000c098:	eb e9                	jmp    c000c083 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c09a:	5b                   	pop    ebx
c000c09b:	5e                   	pop    esi
c000c09c:	5f                   	pop    edi
c000c09d:	c3                   	ret    

c000c09e <getDevicesOfType(DeviceType)>:
c000c09e:	53                   	push   ebx
c000c09f:	83 ec 14             	sub    esp,0x14
c000c0a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0a6:	53                   	push   ebx
c000c0a7:	e8 b2 2a 01 00       	call   c001eb5e <LinkedList<Device>::LinkedList()>
c000c0ac:	83 c4 0c             	add    esp,0xc
c000c0af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0b3:	53                   	push   ebx
c000c0b4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0ba:	e8 9b ff ff ff       	call   c000c05a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0bf:	83 c4 18             	add    esp,0x18
c000c0c2:	89 d8                	mov    eax,ebx
c000c0c4:	5b                   	pop    ebx
c000c0c5:	c2 04 00             	ret    0x4

c000c0c8 <HardDiskController::HardDiskController(char const*)>:
c000c0c8:	83 ec 0c             	sub    esp,0xc
c000c0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0cf:	83 ec 08             	sub    esp,0x8
c000c0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d6:	50                   	push   eax
c000c0d7:	e8 42 fe ff ff       	call   c000bf1e <Device::Device(char const*)>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0e8:	89 10                	mov    DWORD PTR [eax],edx
c000c0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ee:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c0f8:	90                   	nop
c000c0f9:	83 c4 0c             	add    esp,0xc
c000c0fc:	c3                   	ret    
c000c0fd:	90                   	nop
c000c0fe:	66 90                	xchg   ax,ax

c000c100 <HardDiskController::~HardDiskController()>:
c000c100:	83 ec 0c             	sub    esp,0xc
c000c103:	ba 08 04 02 c0       	mov    edx,0xc0020408
c000c108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c10c:	89 10                	mov    DWORD PTR [eax],edx
c000c10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c112:	83 ec 0c             	sub    esp,0xc
c000c115:	50                   	push   eax
c000c116:	e8 71 fb ff ff       	call   c000bc8c <Device::~Device()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	90                   	nop
c000c11f:	83 c4 0c             	add    esp,0xc
c000c122:	c3                   	ret    
c000c123:	90                   	nop

c000c124 <HardDiskController::~HardDiskController()>:
c000c124:	83 ec 0c             	sub    esp,0xc
c000c127:	83 ec 0c             	sub    esp,0xc
c000c12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12e:	e8 cd ff ff ff       	call   c000c100 <HardDiskController::~HardDiskController()>
c000c133:	83 c4 10             	add    esp,0x10
c000c136:	83 ec 08             	sub    esp,0x8
c000c139:	68 58 01 00 00       	push   0x158
c000c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c142:	e8 10 e7 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000c147:	83 c4 10             	add    esp,0x10
c000c14a:	83 c4 0c             	add    esp,0xc
c000c14d:	c3                   	ret    

c000c14e <PhysicalDisk::eject()>:
c000c14e:	83 c8 ff             	or     eax,0xffffffff
c000c151:	c3                   	ret    

c000c152 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c152:	83 ec 0c             	sub    esp,0xc
c000c155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c159:	83 ec 08             	sub    esp,0x8
c000c15c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c160:	50                   	push   eax
c000c161:	e8 b8 fd ff ff       	call   c000bf1e <Device::Device(char const*)>
c000c166:	83 c4 10             	add    esp,0x10
c000c169:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c16e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c172:	89 10                	mov    DWORD PTR [eax],edx
c000c174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c178:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c183:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1a0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1aa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1b4:	90                   	nop
c000c1b5:	83 c4 0c             	add    esp,0xc
c000c1b8:	c3                   	ret    
c000c1b9:	90                   	nop

c000c1ba <PhysicalDisk::startCache()>:
c000c1ba:	56                   	push   esi
c000c1bb:	53                   	push   ebx
c000c1bc:	83 ec 10             	sub    esp,0x10
c000c1bf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1c3:	6a 44                	push   0x44
c000c1c5:	e8 c2 b8 ff ff       	call   c0007a8c <malloc>
c000c1ca:	89 c6                	mov    esi,eax
c000c1cc:	58                   	pop    eax
c000c1cd:	5a                   	pop    edx
c000c1ce:	53                   	push   ebx
c000c1cf:	56                   	push   esi
c000c1d0:	e8 8b 17 00 00       	call   c000d960 <VCache::VCache(PhysicalDisk*)>
c000c1d5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c1db:	83 c4 14             	add    esp,0x14
c000c1de:	5b                   	pop    ebx
c000c1df:	5e                   	pop    esi
c000c1e0:	c3                   	ret    
c000c1e1:	90                   	nop

c000c1e2 <PhysicalDisk::~PhysicalDisk()>:
c000c1e2:	83 ec 0c             	sub    esp,0xc
c000c1e5:	ba 34 04 02 c0       	mov    edx,0xc0020434
c000c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ee:	89 10                	mov    DWORD PTR [eax],edx
c000c1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1f4:	83 ec 0c             	sub    esp,0xc
c000c1f7:	50                   	push   eax
c000c1f8:	e8 8f fa ff ff       	call   c000bc8c <Device::~Device()>
c000c1fd:	83 c4 10             	add    esp,0x10
c000c200:	90                   	nop
c000c201:	83 c4 0c             	add    esp,0xc
c000c204:	c3                   	ret    
c000c205:	90                   	nop

c000c206 <PhysicalDisk::~PhysicalDisk()>:
c000c206:	83 ec 0c             	sub    esp,0xc
c000c209:	83 ec 0c             	sub    esp,0xc
c000c20c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c210:	e8 cd ff ff ff       	call   c000c1e2 <PhysicalDisk::~PhysicalDisk()>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	83 ec 08             	sub    esp,0x8
c000c21b:	68 6c 01 00 00       	push   0x16c
c000c220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c224:	e8 2e e6 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	83 c4 0c             	add    esp,0xc
c000c22f:	c3                   	ret    

c000c230 <int_handler>:
c000c230:	55                   	push   ebp
c000c231:	57                   	push   edi
c000c232:	56                   	push   esi
c000c233:	53                   	push   ebx
c000c234:	83 ec 0c             	sub    esp,0xc
c000c237:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c23e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c242:	74 0b                	je     c000c24f <int_handler+0x1f>
c000c244:	fa                   	cli    
c000c245:	f4                   	hlt    
c000c246:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c24d:	75 f5                	jne    c000c244 <int_handler+0x14>
c000c24f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c252:	8d 46 e0             	lea    eax,[esi-0x20]
c000c255:	83 f8 17             	cmp    eax,0x17
c000c258:	76 40                	jbe    c000c29a <int_handler+0x6a>
c000c25a:	c1 e6 04             	shl    esi,0x4
c000c25d:	31 db                	xor    ebx,ebx
c000c25f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c265:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c26b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c26f:	85 c0                	test   eax,eax
c000c271:	74 13                	je     c000c286 <int_handler+0x56>
c000c273:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c276:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c27a:	74 2c                	je     c000c2a8 <int_handler+0x78>
c000c27c:	83 ec 08             	sub    esp,0x8
c000c27f:	52                   	push   edx
c000c280:	57                   	push   edi
c000c281:	ff d0                	call   eax
c000c283:	83 c4 10             	add    esp,0x10
c000c286:	83 c3 01             	add    ebx,0x1
c000c289:	83 fb 04             	cmp    ebx,0x4
c000c28c:	75 dd                	jne    c000c26b <int_handler+0x3b>
c000c28e:	83 c4 0c             	add    esp,0xc
c000c291:	31 c0                	xor    eax,eax
c000c293:	31 d2                	xor    edx,edx
c000c295:	5b                   	pop    ebx
c000c296:	5e                   	pop    esi
c000c297:	5f                   	pop    edi
c000c298:	5d                   	pop    ebp
c000c299:	c3                   	ret    
c000c29a:	83 ec 0c             	sub    esp,0xc
c000c29d:	50                   	push   eax
c000c29e:	e8 ce af 00 00       	call   c0017271 <HalEndOfInterrupt(int)>
c000c2a3:	83 c4 10             	add    esp,0x10
c000c2a6:	eb b2                	jmp    c000c25a <int_handler+0x2a>
c000c2a8:	83 ec 08             	sub    esp,0x8
c000c2ab:	52                   	push   edx
c000c2ac:	57                   	push   edi
c000c2ad:	ff d0                	call   eax
c000c2af:	83 c4 10             	add    esp,0x10
c000c2b2:	83 c4 0c             	add    esp,0xc
c000c2b5:	5b                   	pop    ebx
c000c2b6:	5e                   	pop    esi
c000c2b7:	5f                   	pop    edi
c000c2b8:	5d                   	pop    ebp
c000c2b9:	c3                   	ret    

c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2ba:	56                   	push   esi
c000c2bb:	31 c0                	xor    eax,eax
c000c2bd:	53                   	push   ebx
c000c2be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2c6:	89 ca                	mov    edx,ecx
c000c2c8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2cc:	c1 e2 04             	shl    edx,0x4
c000c2cf:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c2d7:	74 17                	je     c000c2f0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c2d9:	83 c0 01             	add    eax,0x1
c000c2dc:	83 f8 04             	cmp    eax,0x4
c000c2df:	75 ee                	jne    c000c2cf <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c2e1:	c7 44 24 0c 64 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020464
c000c2e9:	5b                   	pop    ebx
c000c2ea:	5e                   	pop    esi
c000c2eb:	e9 4f 45 00 00       	jmp    c001083f <KePanic(char const*)>
c000c2f0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c2f3:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c2fa:	5b                   	pop    ebx
c000c2fb:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c302:	5e                   	pop    esi
c000c303:	c3                   	ret    

c000c304 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c304:	55                   	push   ebp
c000c305:	57                   	push   edi
c000c306:	56                   	push   esi
c000c307:	53                   	push   ebx
c000c308:	83 ec 0c             	sub    esp,0xc
c000c30b:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c311:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c315:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c319:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c320:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c323:	74 57                	je     c000c37c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c325:	89 c7                	mov    edi,eax
c000c327:	84 c0                	test   al,al
c000c329:	74 1d                	je     c000c348 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c32b:	83 fe 0f             	cmp    esi,0xf
c000c32e:	0f 8f d9 00 00 00    	jg     c000c40d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c334:	0f b6 b6 a0 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde160]
c000c33b:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c343:	d1 ef                	shr    edi,1
c000c345:	83 e7 01             	and    edi,0x1
c000c348:	83 ec 08             	sub    esp,0x8
c000c34b:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c350:	31 db                	xor    ebx,ebx
c000c352:	50                   	push   eax
c000c353:	68 71 04 02 c0       	push   0xc0020471
c000c358:	e8 f6 e5 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000c35d:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c362:	83 c4 10             	add    esp,0x10
c000c365:	85 c0                	test   eax,eax
c000c367:	7f 59                	jg     c000c3c2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000c369:	83 ec 0c             	sub    esp,0xc
c000c36c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c36f:	68 88 04 02 c0       	push   0xc0020488
c000c374:	e8 c6 44 00 00       	call   c001083f <KePanic(char const*)>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 e8                	mov    eax,ebp
c000c37e:	31 d2                	xor    edx,edx
c000c380:	c1 e0 04             	shl    eax,0x4
c000c383:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c38a:	85 c9                	test   ecx,ecx
c000c38c:	0f 84 92 00 00 00    	je     c000c424 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000c392:	83 c2 01             	add    edx,0x1
c000c395:	83 fa 04             	cmp    edx,0x4
c000c398:	75 e9                	jne    c000c383 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c39a:	83 ec 0c             	sub    esp,0xc
c000c39d:	68 dc 04 02 c0       	push   0xc00204dc
c000c3a2:	e8 98 44 00 00       	call   c001083f <KePanic(char const*)>
c000c3a7:	83 c4 10             	add    esp,0x10
c000c3aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3af:	83 c4 0c             	add    esp,0xc
c000c3b2:	5b                   	pop    ebx
c000c3b3:	5e                   	pop    esi
c000c3b4:	5f                   	pop    edi
c000c3b5:	5d                   	pop    ebp
c000c3b6:	c3                   	ret    
c000c3b7:	83 c3 01             	add    ebx,0x1
c000c3ba:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3c0:	7e a7                	jle    c000c369 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c3c2:	83 ec 08             	sub    esp,0x8
c000c3c5:	8b 2c 9d 80 8b 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd7480]
c000c3cc:	56                   	push   esi
c000c3cd:	55                   	push   ebp
c000c3ce:	e8 d7 15 01 00       	call   c001d9aa <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	84 c0                	test   al,al
c000c3d8:	74 dd                	je     c000c3b7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c3da:	83 ec 04             	sub    esp,0x4
c000c3dd:	89 f8                	mov    eax,edi
c000c3df:	0f b6 f8             	movzx  edi,al
c000c3e2:	8d 6e 20             	lea    ebp,[esi+0x20]
c000c3e5:	57                   	push   edi
c000c3e6:	89 e8                	mov    eax,ebp
c000c3e8:	6a 00                	push   0x0
c000c3ea:	0f b6 c0             	movzx  eax,al
c000c3ed:	50                   	push   eax
c000c3ee:	89 f0                	mov    eax,esi
c000c3f0:	6a 00                	push   0x0
c000c3f2:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c3f9:	6a 00                	push   0x0
c000c3fb:	0f b6 c0             	movzx  eax,al
c000c3fe:	50                   	push   eax
c000c3ff:	53                   	push   ebx
c000c400:	e8 11 17 01 00       	call   c001db16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c405:	83 c4 20             	add    esp,0x20
c000c408:	e9 6f ff ff ff       	jmp    c000c37c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c40d:	83 ec 0c             	sub    esp,0xc
c000c410:	31 ff                	xor    edi,edi
c000c412:	68 a4 04 02 c0       	push   0xc00204a4
c000c417:	e8 23 44 00 00       	call   c001083f <KePanic(char const*)>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	e9 24 ff ff ff       	jmp    c000c348 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c424:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000c427:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c42b:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c432:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c436:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c43d:	83 c4 0c             	add    esp,0xc
c000c440:	89 f0                	mov    eax,esi
c000c442:	5b                   	pop    ebx
c000c443:	5e                   	pop    esi
c000c444:	5f                   	pop    edi
c000c445:	5d                   	pop    ebp
c000c446:	c3                   	ret    

c000c447 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c44b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c44f:	c1 e0 04             	shl    eax,0x4
c000c452:	8d 50 10             	lea    edx,[eax+0x10]
c000c455:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c45b:	74 08                	je     c000c465 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c45d:	83 c0 04             	add    eax,0x4
c000c460:	39 d0                	cmp    eax,edx
c000c462:	75 f1                	jne    c000c455 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c464:	c3                   	ret    
c000c465:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c46f:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c479:	eb e2                	jmp    c000c45d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c47b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c47b:	53                   	push   ebx
c000c47c:	83 ec 08             	sub    esp,0x8
c000c47f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c483:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c488:	74 0e                	je     c000c498 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c48a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c48f:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c496:	75 37                	jne    c000c4cf <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c49c:	83 c0 20             	add    eax,0x20
c000c49f:	c1 e0 04             	shl    eax,0x4
c000c4a2:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a5:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c4ab:	74 0c                	je     c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c4ad:	83 c0 04             	add    eax,0x4
c000c4b0:	39 d0                	cmp    eax,edx
c000c4b2:	75 f1                	jne    c000c4a5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c4b4:	83 c4 08             	add    esp,0x8
c000c4b7:	5b                   	pop    ebx
c000c4b8:	c3                   	ret    
c000c4b9:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4c3:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4cd:	eb de                	jmp    c000c4ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c4cf:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c4d4:	7f 11                	jg     c000c4e7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c4d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4da:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c4e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c4e5:	eb b1                	jmp    c000c498 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4e7:	83 ec 0c             	sub    esp,0xc
c000c4ea:	68 95 04 02 c0       	push   0xc0020495
c000c4ef:	e8 4b 43 00 00       	call   c001083f <KePanic(char const*)>
c000c4f4:	83 c4 10             	add    esp,0x10
c000c4f7:	eb 9f                	jmp    c000c498 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c4f9 <setupINTS()>:
c000c4f9:	31 c0                	xor    eax,eax
c000c4fb:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c505:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c50f:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c519:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c523:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c52d:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c537:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c541:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c54b:	83 c0 10             	add    eax,0x10
c000c54e:	3d 00 10 00 00       	cmp    eax,0x1000
c000c553:	75 a6                	jne    c000c4fb <setupINTS()+0x2>
c000c555:	c3                   	ret    

c000c556 <convertLegacyIRQNumber(int)>:
c000c556:	83 ec 0c             	sub    esp,0xc
c000c559:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c563:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c56a:	74 0c                	je     c000c578 <convertLegacyIRQNumber(int)+0x22>
c000c56c:	83 f8 0f             	cmp    eax,0xf
c000c56f:	7f 0b                	jg     c000c57c <convertLegacyIRQNumber(int)+0x26>
c000c571:	0f b6 80 a0 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde160]
c000c578:	83 c4 0c             	add    esp,0xc
c000c57b:	c3                   	ret    
c000c57c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	68 a4 04 02 c0       	push   0xc00204a4
c000c588:	e8 b2 42 00 00       	call   c001083f <KePanic(char const*)>
c000c58d:	83 c4 10             	add    esp,0x10
c000c590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c594:	83 c4 0c             	add    esp,0xc
c000c597:	c3                   	ret    

c000c598 <startGUI(void*)>:
c000c598:	55                   	push   ebp
c000c599:	89 e5                	mov    ebp,esp
c000c59b:	53                   	push   ebx
c000c59c:	83 ec 04             	sub    esp,0x4
c000c59f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5a4:	83 e8 01             	sub    eax,0x1
c000c5a7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5b1:	85 c0                	test   eax,eax
c000c5b3:	75 01                	jne    c000c5b6 <startGUI(void*)+0x1e>
c000c5b5:	fb                   	sti    
c000c5b6:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5bc:	83 ec 08             	sub    esp,0x8
c000c5bf:	6a 01                	push   0x1
c000c5c1:	68 01 05 02 c0       	push   0xc0020501
c000c5c6:	e8 14 80 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000c5cb:	83 c4 10             	add    esp,0x10
c000c5ce:	83 ec 08             	sub    esp,0x8
c000c5d1:	53                   	push   ebx
c000c5d2:	50                   	push   eax
c000c5d3:	e8 41 82 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000c5d8:	83 c4 10             	add    esp,0x10
c000c5db:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5e1:	83 ec 08             	sub    esp,0x8
c000c5e4:	6a 01                	push   0x1
c000c5e6:	68 1b 05 02 c0       	push   0xc002051b
c000c5eb:	e8 ef 7f 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000c5f0:	83 c4 10             	add    esp,0x10
c000c5f3:	83 ec 08             	sub    esp,0x8
c000c5f6:	53                   	push   ebx
c000c5f7:	50                   	push   eax
c000c5f8:	e8 1c 82 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	90                   	nop
c000c601:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c604:	c9                   	leave  
c000c605:	c3                   	ret    

c000c606 <startGUIVESA(void*)>:
c000c606:	55                   	push   ebp
c000c607:	89 e5                	mov    ebp,esp
c000c609:	53                   	push   ebx
c000c60a:	83 ec 04             	sub    esp,0x4
c000c60d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c612:	83 e8 01             	sub    eax,0x1
c000c615:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c61a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c61f:	85 c0                	test   eax,eax
c000c621:	75 01                	jne    c000c624 <startGUIVESA(void*)+0x1e>
c000c623:	fb                   	sti    
c000c624:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c62a:	83 ec 08             	sub    esp,0x8
c000c62d:	6a 01                	push   0x1
c000c62f:	68 39 05 02 c0       	push   0xc0020539
c000c634:	e8 a6 7f 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000c639:	83 c4 10             	add    esp,0x10
c000c63c:	83 ec 08             	sub    esp,0x8
c000c63f:	53                   	push   ebx
c000c640:	50                   	push   eax
c000c641:	e8 d3 81 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c64f:	83 ec 08             	sub    esp,0x8
c000c652:	6a 01                	push   0x1
c000c654:	68 1b 05 02 c0       	push   0xc002051b
c000c659:	e8 81 7f 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000c65e:	83 c4 10             	add    esp,0x10
c000c661:	83 ec 08             	sub    esp,0x8
c000c664:	53                   	push   ebx
c000c665:	50                   	push   eax
c000c666:	e8 ae 81 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000c66b:	83 c4 10             	add    esp,0x10
c000c66e:	90                   	nop
c000c66f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c672:	c9                   	leave  
c000c673:	c3                   	ret    

c000c674 <sendKeyToTerminal(unsigned char)>:
c000c674:	55                   	push   ebp
c000c675:	89 e5                	mov    ebp,esp
c000c677:	83 ec 28             	sub    esp,0x28
c000c67a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c680:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c685:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c689:	83 ec 08             	sub    esp,0x8
c000c68c:	52                   	push   edx
c000c68d:	50                   	push   eax
c000c68e:	e8 01 c7 ff ff       	call   c0008d94 <VgaText::receiveKey(unsigned char)>
c000c693:	83 c4 10             	add    esp,0x10
c000c696:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c69a:	83 f8 0a             	cmp    eax,0xa
c000c69d:	74 16                	je     c000c6b5 <sendKeyToTerminal(unsigned char)+0x41>
c000c69f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6a3:	83 f8 03             	cmp    eax,0x3
c000c6a6:	74 0d                	je     c000c6b5 <sendKeyToTerminal(unsigned char)+0x41>
c000c6a8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6ac:	83 f8 1c             	cmp    eax,0x1c
c000c6af:	0f 85 97 00 00 00    	jne    c000c74c <sendKeyToTerminal(unsigned char)+0xd8>
c000c6b5:	fa                   	cli    
c000c6b6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6bb:	83 c0 01             	add    eax,0x1
c000c6be:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6c3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6c8:	83 c0 01             	add    eax,0x1
c000c6cb:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6d0:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6d5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6d8:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c6e2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c6e6:	74 1f                	je     c000c707 <sendKeyToTerminal(unsigned char)+0x93>
c000c6e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c6eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c6ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c6f1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c6f4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6f7:	83 ec 0c             	sub    esp,0xc
c000c6fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c6fd:	e8 42 8e 00 00       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c000c702:	83 c4 10             	add    esp,0x10
c000c705:	eb db                	jmp    c000c6e2 <sendKeyToTerminal(unsigned char)+0x6e>
c000c707:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c70c:	83 e8 01             	sub    eax,0x1
c000c70f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c714:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c719:	85 c0                	test   eax,eax
c000c71b:	75 18                	jne    c000c735 <sendKeyToTerminal(unsigned char)+0xc1>
c000c71d:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c722:	85 c0                	test   eax,eax
c000c724:	74 0f                	je     c000c735 <sendKeyToTerminal(unsigned char)+0xc1>
c000c726:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c730:	e8 0b 89 00 00       	call   c0015040 <schedule()>
c000c735:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c73a:	83 e8 01             	sub    eax,0x1
c000c73d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c742:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c747:	85 c0                	test   eax,eax
c000c749:	75 01                	jne    c000c74c <sendKeyToTerminal(unsigned char)+0xd8>
c000c74b:	fb                   	sti    
c000c74c:	90                   	nop
c000c74d:	c9                   	leave  
c000c74e:	c3                   	ret    

c000c74f <sendKeyboardToken(KeyboardToken)>:
c000c74f:	55                   	push   ebp
c000c750:	89 e5                	mov    ebp,esp
c000c752:	83 ec 18             	sub    esp,0x18
c000c755:	e8 35 41 00 00       	call   c001088f <Krnl::userIOReceived()>
c000c75a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c760:	0f b7 c0             	movzx  eax,ax
c000c763:	83 f2 01             	xor    edx,0x1
c000c766:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c76c:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c771:	85 c0                	test   eax,eax
c000c773:	74 24                	je     c000c799 <sendKeyboardToken(KeyboardToken)+0x4a>
c000c775:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c77b:	83 ec 04             	sub    esp,0x4
c000c77e:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c783:	83 ec 08             	sub    esp,0x8
c000c786:	89 e2                	mov    edx,esp
c000c788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78b:	89 02                	mov    DWORD PTR [edx],eax
c000c78d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c790:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c794:	ff d1                	call   ecx
c000c796:	83 c4 10             	add    esp,0x10
c000c799:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c79d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7a0:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7a5:	0f b6 d2             	movzx  edx,dl
c000c7a8:	0f b6 c0             	movzx  eax,al
c000c7ab:	39 c2                	cmp    edx,eax
c000c7ad:	74 1c                	je     c000c7cb <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7af:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7b2:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7b7:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7bc:	0f b6 c0             	movzx  eax,al
c000c7bf:	83 ec 0c             	sub    esp,0xc
c000c7c2:	50                   	push   eax
c000c7c3:	e8 18 bd ff ff       	call   c00084e0 <setTerminalScrollLock(bool)>
c000c7c8:	83 c4 10             	add    esp,0x10
c000c7cb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7ce:	0f b6 c0             	movzx  eax,al
c000c7d1:	85 c0                	test   eax,eax
c000c7d3:	0f 84 da 00 00 00    	je     c000c8b3 <sendKeyboardToken(KeyboardToken)+0x164>
c000c7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7dc:	0f b7 c0             	movzx  eax,ax
c000c7df:	3d 18 03 00 00       	cmp    eax,0x318
c000c7e4:	75 06                	jne    c000c7ec <sendKeyboardToken(KeyboardToken)+0x9d>
c000c7e6:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c7ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ef:	0f b7 c0             	movzx  eax,ax
c000c7f2:	3d 19 03 00 00       	cmp    eax,0x319
c000c7f7:	75 06                	jne    c000c7ff <sendKeyboardToken(KeyboardToken)+0xb0>
c000c7f9:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c7ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c802:	0f b7 c0             	movzx  eax,ax
c000c805:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c80a:	75 06                	jne    c000c812 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c80c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c815:	0f b7 c0             	movzx  eax,ax
c000c818:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c81d:	75 06                	jne    c000c825 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c81f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c828:	0f b7 c0             	movzx  eax,ax
c000c82b:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c830:	75 06                	jne    c000c838 <sendKeyboardToken(KeyboardToken)+0xe9>
c000c832:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83b:	0f b7 c0             	movzx  eax,ax
c000c83e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c843:	75 06                	jne    c000c84b <sendKeyboardToken(KeyboardToken)+0xfc>
c000c845:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84e:	0f b7 c0             	movzx  eax,ax
c000c851:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c856:	75 06                	jne    c000c85e <sendKeyboardToken(KeyboardToken)+0x10f>
c000c858:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c85e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c861:	0f b7 c0             	movzx  eax,ax
c000c864:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c869:	75 06                	jne    c000c871 <sendKeyboardToken(KeyboardToken)+0x122>
c000c86b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c874:	0f b7 c0             	movzx  eax,ax
c000c877:	3d 20 03 00 00       	cmp    eax,0x320
c000c87c:	75 06                	jne    c000c884 <sendKeyboardToken(KeyboardToken)+0x135>
c000c87e:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c887:	0f b7 c0             	movzx  eax,ax
c000c88a:	3d 21 03 00 00       	cmp    eax,0x321
c000c88f:	75 06                	jne    c000c897 <sendKeyboardToken(KeyboardToken)+0x148>
c000c891:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c89a:	0f b7 c0             	movzx  eax,ax
c000c89d:	3d 22 03 00 00       	cmp    eax,0x322
c000c8a2:	0f 85 f1 00 00 00    	jne    c000c999 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8a8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8ae:	e9 e6 00 00 00       	jmp    c000c999 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b6:	0f b7 c0             	movzx  eax,ax
c000c8b9:	3d 18 03 00 00       	cmp    eax,0x318
c000c8be:	75 0a                	jne    c000c8ca <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8c0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8c6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8cd:	0f b7 c0             	movzx  eax,ax
c000c8d0:	3d 19 03 00 00       	cmp    eax,0x319
c000c8d5:	75 0a                	jne    c000c8e1 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8d7:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8dd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8e4:	0f b7 c0             	movzx  eax,ax
c000c8e7:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8ec:	75 0a                	jne    c000c8f8 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c8ee:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c8f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fb:	0f b7 c0             	movzx  eax,ax
c000c8fe:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c903:	75 0a                	jne    c000c90f <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c905:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c90b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c90f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c912:	0f b7 c0             	movzx  eax,ax
c000c915:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c91a:	75 0a                	jne    c000c926 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c91c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c922:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c929:	0f b7 c0             	movzx  eax,ax
c000c92c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c931:	75 0a                	jne    c000c93d <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c933:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c939:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c93d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c940:	0f b7 c0             	movzx  eax,ax
c000c943:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c948:	75 0a                	jne    c000c954 <sendKeyboardToken(KeyboardToken)+0x205>
c000c94a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c950:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c957:	0f b7 c0             	movzx  eax,ax
c000c95a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c95f:	75 0a                	jne    c000c96b <sendKeyboardToken(KeyboardToken)+0x21c>
c000c961:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c967:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c96b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96e:	0f b7 c0             	movzx  eax,ax
c000c971:	3d 20 03 00 00       	cmp    eax,0x320
c000c976:	75 0a                	jne    c000c982 <sendKeyboardToken(KeyboardToken)+0x233>
c000c978:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c97e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c985:	0f b7 c0             	movzx  eax,ax
c000c988:	3d 21 03 00 00       	cmp    eax,0x321
c000c98d:	75 0a                	jne    c000c999 <sendKeyboardToken(KeyboardToken)+0x24a>
c000c98f:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c995:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c99c:	0f b7 c0             	movzx  eax,ax
c000c99f:	3d 00 02 00 00       	cmp    eax,0x200
c000c9a4:	75 2f                	jne    c000c9d5 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9a6:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9ab:	83 f0 01             	xor    eax,0x1
c000c9ae:	0f b6 c0             	movzx  eax,al
c000c9b1:	85 c0                	test   eax,eax
c000c9b3:	74 20                	je     c000c9d5 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9b5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9ba:	6a 01                	push   0x1
c000c9bc:	6a 00                	push   0x0
c000c9be:	68 98 c5 00 c0       	push   0xc000c598
c000c9c3:	50                   	push   eax
c000c9c4:	e8 2b 84 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000c9c9:	83 c4 10             	add    esp,0x10
c000c9cc:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9d3:	eb 3a                	jmp    c000ca0f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d8:	0f b7 c0             	movzx  eax,ax
c000c9db:	3d 01 02 00 00       	cmp    eax,0x201
c000c9e0:	75 2d                	jne    c000ca0f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9e2:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9e7:	83 f0 01             	xor    eax,0x1
c000c9ea:	0f b6 c0             	movzx  eax,al
c000c9ed:	85 c0                	test   eax,eax
c000c9ef:	74 1e                	je     c000ca0f <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9f1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9f6:	6a 01                	push   0x1
c000c9f8:	6a 00                	push   0x0
c000c9fa:	68 06 c6 00 c0       	push   0xc000c606
c000c9ff:	50                   	push   eax
c000ca00:	e8 ef 83 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c000ca05:	83 c4 10             	add    esp,0x10
c000ca08:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca12:	0f b7 c0             	movzx  eax,ax
c000ca15:	3d 25 03 00 00       	cmp    eax,0x325
c000ca1a:	75 06                	jne    c000ca22 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca1c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca25:	0f b7 c0             	movzx  eax,ax
c000ca28:	3d 24 03 00 00       	cmp    eax,0x324
c000ca2d:	75 06                	jne    c000ca35 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca2f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca38:	0f b7 c0             	movzx  eax,ax
c000ca3b:	3d 23 03 00 00       	cmp    eax,0x323
c000ca40:	75 06                	jne    c000ca48 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca42:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca4b:	0f b7 c0             	movzx  eax,ax
c000ca4e:	3d 26 03 00 00       	cmp    eax,0x326
c000ca53:	75 06                	jne    c000ca5b <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca55:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5e:	0f b7 c0             	movzx  eax,ax
c000ca61:	3d 27 03 00 00       	cmp    eax,0x327
c000ca66:	75 06                	jne    c000ca6e <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca68:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca71:	0f b7 c0             	movzx  eax,ax
c000ca74:	3d 22 03 00 00       	cmp    eax,0x322
c000ca79:	75 06                	jne    c000ca81 <sendKeyboardToken(KeyboardToken)+0x332>
c000ca7b:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000ca81:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000ca85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ca88:	83 f0 01             	xor    eax,0x1
c000ca8b:	0f b6 c0             	movzx  eax,al
c000ca8e:	85 c0                	test   eax,eax
c000ca90:	74 7c                	je     c000cb0e <sendKeyboardToken(KeyboardToken)+0x3bf>
c000ca92:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000ca97:	0f b6 c0             	movzx  eax,al
c000ca9a:	85 c0                	test   eax,eax
c000ca9c:	74 43                	je     c000cae1 <sendKeyboardToken(KeyboardToken)+0x392>
c000ca9e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000caa2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000caa6:	85 c0                	test   eax,eax
c000caa8:	74 2b                	je     c000cad5 <sendKeyboardToken(KeyboardToken)+0x386>
c000caaa:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cab0:	89 d0                	mov    eax,edx
c000cab2:	c1 e0 02             	shl    eax,0x2
c000cab5:	01 d0                	add    eax,edx
c000cab7:	d1 e0                	shl    eax,1
c000cab9:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cabe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cac1:	0f b7 c0             	movzx  eax,ax
c000cac4:	8d 50 d0             	lea    edx,[eax-0x30]
c000cac7:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cacc:	01 d0                	add    eax,edx
c000cace:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cad3:	eb 71                	jmp    c000cb46 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cad5:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cadf:	eb 65                	jmp    c000cb46 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cae1:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cae6:	85 c0                	test   eax,eax
c000cae8:	74 18                	je     c000cb02 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000caea:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caef:	0f b6 c0             	movzx  eax,al
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	50                   	push   eax
c000caf6:	e8 79 fb ff ff       	call   c000c674 <sendKeyToTerminal(unsigned char)>
c000cafb:	83 c4 10             	add    esp,0x10
c000cafe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb02:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb0c:	eb 38                	jmp    c000cb46 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb11:	0f b7 c0             	movzx  eax,ax
c000cb14:	3d 01 01 00 00       	cmp    eax,0x101
c000cb19:	75 2b                	jne    c000cb46 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb1b:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb20:	85 c0                	test   eax,eax
c000cb22:	74 18                	je     c000cb3c <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb24:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb29:	0f b6 c0             	movzx  eax,al
c000cb2c:	83 ec 0c             	sub    esp,0xc
c000cb2f:	50                   	push   eax
c000cb30:	e8 3f fb ff ff       	call   c000c674 <sendKeyToTerminal(unsigned char)>
c000cb35:	83 c4 10             	add    esp,0x10
c000cb38:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb3c:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb46:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb49:	83 f0 01             	xor    eax,0x1
c000cb4c:	0f b6 c0             	movzx  eax,al
c000cb4f:	85 c0                	test   eax,eax
c000cb51:	74 5a                	je     c000cbad <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb53:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb56:	83 f0 01             	xor    eax,0x1
c000cb59:	0f b6 c0             	movzx  eax,al
c000cb5c:	85 c0                	test   eax,eax
c000cb5e:	74 4d                	je     c000cbad <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb60:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb65:	83 f0 01             	xor    eax,0x1
c000cb68:	0f b6 c0             	movzx  eax,al
c000cb6b:	85 c0                	test   eax,eax
c000cb6d:	74 3e                	je     c000cbad <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb72:	0f b7 c0             	movzx  eax,ax
c000cb75:	83 f8 1f             	cmp    eax,0x1f
c000cb78:	76 0b                	jbe    c000cb85 <sendKeyboardToken(KeyboardToken)+0x436>
c000cb7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb7d:	0f b7 c0             	movzx  eax,ax
c000cb80:	83 f8 7e             	cmp    eax,0x7e
c000cb83:	76 16                	jbe    c000cb9b <sendKeyboardToken(KeyboardToken)+0x44c>
c000cb85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb88:	0f b7 c0             	movzx  eax,ax
c000cb8b:	83 f8 0a             	cmp    eax,0xa
c000cb8e:	74 0b                	je     c000cb9b <sendKeyboardToken(KeyboardToken)+0x44c>
c000cb90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb93:	0f b7 c0             	movzx  eax,ax
c000cb96:	83 f8 08             	cmp    eax,0x8
c000cb99:	75 12                	jne    c000cbad <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9e:	0f b6 c0             	movzx  eax,al
c000cba1:	83 ec 0c             	sub    esp,0xc
c000cba4:	50                   	push   eax
c000cba5:	e8 ca fa ff ff       	call   c000c674 <sendKeyToTerminal(unsigned char)>
c000cbaa:	83 c4 10             	add    esp,0x10
c000cbad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbb0:	83 f0 01             	xor    eax,0x1
c000cbb3:	0f b6 c0             	movzx  eax,al
c000cbb6:	85 c0                	test   eax,eax
c000cbb8:	74 5d                	je     c000cc17 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbba:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbbd:	83 f0 01             	xor    eax,0x1
c000cbc0:	0f b6 c0             	movzx  eax,al
c000cbc3:	85 c0                	test   eax,eax
c000cbc5:	74 50                	je     c000cc17 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbc7:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbcc:	0f b6 c0             	movzx  eax,al
c000cbcf:	85 c0                	test   eax,eax
c000cbd1:	74 44                	je     c000cc17 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbd6:	0f b7 c0             	movzx  eax,ax
c000cbd9:	83 f8 3f             	cmp    eax,0x3f
c000cbdc:	76 39                	jbe    c000cc17 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbe1:	0f b7 c0             	movzx  eax,ax
c000cbe4:	83 f8 7f             	cmp    eax,0x7f
c000cbe7:	77 2e                	ja     c000cc17 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbec:	88 c2                	mov    dl,al
c000cbee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf1:	0f b7 c0             	movzx  eax,ax
c000cbf4:	83 f8 5f             	cmp    eax,0x5f
c000cbf7:	76 04                	jbe    c000cbfd <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cbf9:	b0 20                	mov    al,0x20
c000cbfb:	eb 02                	jmp    c000cbff <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cbfd:	b0 00                	mov    al,0x0
c000cbff:	89 d1                	mov    ecx,edx
c000cc01:	29 c1                	sub    ecx,eax
c000cc03:	89 c8                	mov    eax,ecx
c000cc05:	83 e8 40             	sub    eax,0x40
c000cc08:	0f b6 c0             	movzx  eax,al
c000cc0b:	83 ec 0c             	sub    esp,0xc
c000cc0e:	50                   	push   eax
c000cc0f:	e8 60 fa ff ff       	call   c000c674 <sendKeyToTerminal(unsigned char)>
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc1a:	0f b7 c0             	movzx  eax,ax
c000cc1d:	3d 00 03 00 00       	cmp    eax,0x300
c000cc22:	75 12                	jne    c000cc36 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc24:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc27:	83 f0 01             	xor    eax,0x1
c000cc2a:	0f b6 c0             	movzx  eax,al
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	74 05                	je     c000cc36 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc31:	e8 ab b8 ff ff       	call   c00084e1 <doTerminalCycle()>
c000cc36:	90                   	nop
c000cc37:	c9                   	leave  
c000cc38:	c3                   	ret    

c000cc39 <clearInternalKeybuffer(VgaText*)>:
c000cc39:	55                   	push   ebp
c000cc3a:	89 e5                	mov    ebp,esp
c000cc3c:	83 ec 08             	sub    esp,0x8
c000cc3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc42:	05 02 01 00 00       	add    eax,0x102
c000cc47:	83 ec 0c             	sub    esp,0xc
c000cc4a:	50                   	push   eax
c000cc4b:	e8 10 39 ff ff       	call   c0000560 <strlen>
c000cc50:	83 c4 10             	add    esp,0x10
c000cc53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc56:	81 c2 02 01 00 00    	add    edx,0x102
c000cc5c:	83 ec 04             	sub    esp,0x4
c000cc5f:	50                   	push   eax
c000cc60:	6a 00                	push   0x0
c000cc62:	52                   	push   edx
c000cc63:	e8 78 38 ff ff       	call   c00004e0 <memset>
c000cc68:	83 c4 10             	add    esp,0x10
c000cc6b:	90                   	nop
c000cc6c:	c9                   	leave  
c000cc6d:	c3                   	ret    

c000cc6e <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc6e:	55                   	push   ebp
c000cc6f:	89 e5                	mov    ebp,esp
c000cc71:	83 ec 18             	sub    esp,0x18
c000cc74:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc79:	85 c0                	test   eax,eax
c000cc7b:	74 2a                	je     c000cca7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cc7d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cc83:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000cc89:	83 ec 04             	sub    esp,0x4
c000cc8c:	68 e0 6f 02 c0       	push   0xc0026fe0
c000cc91:	83 ec 08             	sub    esp,0x8
c000cc94:	89 e2                	mov    edx,esp
c000cc96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000cc99:	89 02                	mov    DWORD PTR [edx],eax
c000cc9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cc9e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cca2:	ff d1                	call   ecx
c000cca4:	83 c4 10             	add    esp,0x10
c000cca7:	fb                   	sti    
c000cca8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccaf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccb3:	0f 84 0d 01 00 00    	je     c000cdc6 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000ccb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccbc:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000ccc2:	0f be c0             	movsx  eax,al
c000ccc5:	85 c0                	test   eax,eax
c000ccc7:	75 2c                	jne    c000ccf5 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000ccc9:	fa                   	cli    
c000ccca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cccf:	83 c0 01             	add    eax,0x1
c000ccd2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccd7:	e8 64 83 00 00       	call   c0015040 <schedule()>
c000ccdc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cce1:	83 e8 01             	sub    eax,0x1
c000cce4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cce9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccee:	85 c0                	test   eax,eax
c000ccf0:	75 c7                	jne    c000ccb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ccf2:	fb                   	sti    
c000ccf3:	eb c4                	jmp    c000ccb9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ccf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ccf8:	8d 50 01             	lea    edx,[eax+0x1]
c000ccfb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ccfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd01:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd07:	88 10                	mov    BYTE PTR [eax],dl
c000cd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd0c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd12:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd15:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd19:	83 f8 03             	cmp    eax,0x3
c000cd1c:	75 1e                	jne    c000cd3c <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd23:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd28:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd2e:	83 ec 08             	sub    esp,0x8
c000cd31:	6a 02                	push   0x2
c000cd33:	50                   	push   eax
c000cd34:	e8 a2 3f 00 00       	call   c0010cdb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd39:	83 c4 10             	add    esp,0x10
c000cd3c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd40:	83 f8 1c             	cmp    eax,0x1c
c000cd43:	75 1e                	jne    c000cd63 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd45:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd4f:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd55:	83 ec 08             	sub    esp,0x8
c000cd58:	6a 09                	push   0x9
c000cd5a:	50                   	push   eax
c000cd5b:	e8 7b 3f 00 00       	call   c0010cdb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd60:	83 c4 10             	add    esp,0x10
c000cd63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd66:	05 02 01 00 00       	add    eax,0x102
c000cd6b:	83 ec 0c             	sub    esp,0xc
c000cd6e:	50                   	push   eax
c000cd6f:	e8 ec 37 ff ff       	call   c0000560 <strlen>
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd7a:	81 c2 02 01 00 00    	add    edx,0x102
c000cd80:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cd83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd86:	81 c2 02 01 00 00    	add    edx,0x102
c000cd8c:	83 ec 04             	sub    esp,0x4
c000cd8f:	50                   	push   eax
c000cd90:	51                   	push   ecx
c000cd91:	52                   	push   edx
c000cd92:	e8 39 36 ff ff       	call   c00003d0 <memmove>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cd9e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cda2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cda6:	83 f8 0a             	cmp    eax,0xa
c000cda9:	74 16                	je     c000cdc1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdab:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdaf:	83 f8 03             	cmp    eax,0x3
c000cdb2:	74 0d                	je     c000cdc1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdb4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdb8:	83 f8 1c             	cmp    eax,0x1c
c000cdbb:	0f 85 ee fe ff ff    	jne    c000ccaf <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cdc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdc4:	eb 03                	jmp    c000cdc9 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cdc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdc9:	c9                   	leave  
c000cdca:	c3                   	ret    
c000cdcb:	90                   	nop

c000cdcc <Keyboard::Keyboard(char const*)>:
c000cdcc:	83 ec 0c             	sub    esp,0xc
c000cdcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdd3:	83 ec 08             	sub    esp,0x8
c000cdd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdda:	50                   	push   eax
c000cddb:	e8 3e f1 ff ff       	call   c000bf1e <Device::Device(char const*)>
c000cde0:	83 c4 10             	add    esp,0x10
c000cde3:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000cde8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdec:	89 10                	mov    DWORD PTR [eax],edx
c000cdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000cdfc:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce03:	90                   	nop
c000ce04:	83 c4 0c             	add    esp,0xc
c000ce07:	c3                   	ret    

c000ce08 <Keyboard::~Keyboard()>:
c000ce08:	83 ec 0c             	sub    esp,0xc
c000ce0b:	ba 5c 05 02 c0       	mov    edx,0xc002055c
c000ce10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce14:	89 10                	mov    DWORD PTR [eax],edx
c000ce16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1a:	83 ec 0c             	sub    esp,0xc
c000ce1d:	50                   	push   eax
c000ce1e:	e8 69 ee ff ff       	call   c000bc8c <Device::~Device()>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	90                   	nop
c000ce27:	83 c4 0c             	add    esp,0xc
c000ce2a:	c3                   	ret    
c000ce2b:	90                   	nop

c000ce2c <Keyboard::~Keyboard()>:
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	83 ec 0c             	sub    esp,0xc
c000ce32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce36:	e8 cd ff ff ff       	call   c000ce08 <Keyboard::~Keyboard()>
c000ce3b:	83 c4 10             	add    esp,0x10
c000ce3e:	83 ec 08             	sub    esp,0x8
c000ce41:	68 5c 01 00 00       	push   0x15c
c000ce46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4a:	e8 08 da ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000ce4f:	83 c4 10             	add    esp,0x10
c000ce52:	83 c4 0c             	add    esp,0xc
c000ce55:	c3                   	ret    

c000ce56 <LogicalDisk::close(int, int, void*)>:
c000ce56:	83 c8 ff             	or     eax,0xffffffff
c000ce59:	c3                   	ret    

c000ce5a <LogicalDisk::~LogicalDisk()>:
c000ce5a:	83 ec 0c             	sub    esp,0xc
c000ce5d:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000ce62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce66:	89 10                	mov    DWORD PTR [eax],edx
c000ce68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce6c:	83 ec 0c             	sub    esp,0xc
c000ce6f:	50                   	push   eax
c000ce70:	e8 17 ee ff ff       	call   c000bc8c <Device::~Device()>
c000ce75:	83 c4 10             	add    esp,0x10
c000ce78:	90                   	nop
c000ce79:	83 c4 0c             	add    esp,0xc
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <LogicalDisk::~LogicalDisk()>:
c000ce7e:	83 ec 0c             	sub    esp,0xc
c000ce81:	83 ec 0c             	sub    esp,0xc
c000ce84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce88:	e8 cd ff ff ff       	call   c000ce5a <LogicalDisk::~LogicalDisk()>
c000ce8d:	83 c4 10             	add    esp,0x10
c000ce90:	83 ec 08             	sub    esp,0x8
c000ce93:	68 78 01 00 00       	push   0x178
c000ce98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9c:	e8 b6 d9 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000cea1:	83 c4 10             	add    esp,0x10
c000cea4:	83 c4 0c             	add    esp,0xc
c000cea7:	c3                   	ret    

c000cea8 <LogicalDisk::open(int, int, void*)>:
c000cea8:	83 ec 18             	sub    esp,0x18
c000ceab:	68 88 05 02 c0       	push   0xc0020588
c000ceb0:	e8 8a 39 00 00       	call   c001083f <KePanic(char const*)>
c000ceb5:	83 c8 ff             	or     eax,0xffffffff
c000ceb8:	83 c4 1c             	add    esp,0x1c
c000cebb:	c3                   	ret    

c000cebc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cebc:	53                   	push   ebx
c000cebd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cec5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cec9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cecf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ced5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cedb:	77 10                	ja     c000ceed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cedd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cee3:	89 d3                	mov    ebx,edx
c000cee5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ceeb:	72 05                	jb     c000cef2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ceed:	83 c8 ff             	or     eax,0xffffffff
c000cef0:	89 c2                	mov    edx,eax
c000cef2:	5b                   	pop    ebx
c000cef3:	c3                   	ret    

c000cef4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cef4:	56                   	push   esi
c000cef5:	83 c8 ff             	or     eax,0xffffffff
c000cef8:	53                   	push   ebx
c000cef9:	89 c2                	mov    edx,eax
c000cefb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ceff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf07:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf0d:	77 27                	ja     c000cf36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf0f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf15:	89 d8                	mov    eax,ebx
c000cf17:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf22:	89 c2                	mov    edx,eax
c000cf24:	73 10                	jae    c000cf36 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf26:	89 c8                	mov    eax,ecx
c000cf28:	89 da                	mov    edx,ebx
c000cf2a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf30:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf36:	5b                   	pop    ebx
c000cf37:	5e                   	pop    esi
c000cf38:	c3                   	ret    
c000cf39:	90                   	nop

c000cf3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf3a:	83 ec 1c             	sub    esp,0x1c
c000cf3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf4d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf51:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf67:	50                   	push   eax
c000cf68:	e8 b1 ef ff ff       	call   c000bf1e <Device::Device(char const*)>
c000cf6d:	83 c4 10             	add    esp,0x10
c000cf70:	ba d4 05 02 c0       	mov    edx,0xc00205d4
c000cf75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf79:	89 10                	mov    DWORD PTR [eax],edx
c000cf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf7f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf8a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cf91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf95:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cf9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa0:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfaa:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfb6:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfbc:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfc2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfc6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cfc9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfcd:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cfd3:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cfd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cfe1:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cfe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfeb:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cff5:	90                   	nop
c000cff6:	83 c4 1c             	add    esp,0x1c
c000cff9:	c3                   	ret    

c000cffa <LogicalDisk::assignDriveLetter()>:
c000cffa:	55                   	push   ebp
c000cffb:	57                   	push   edi
c000cffc:	56                   	push   esi
c000cffd:	53                   	push   ebx
c000cffe:	83 ec 14             	sub    esp,0x14
c000d001:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d005:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d00b:	b0 41                	mov    al,0x41
c000d00d:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d013:	84 d2                	test   dl,dl
c000d015:	75 02                	jne    c000d019 <LogicalDisk::assignDriveLetter()+0x1f>
c000d017:	b0 43                	mov    al,0x43
c000d019:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d01f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d023:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d029:	0f b6 ca             	movzx  ecx,dl
c000d02c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d030:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d034:	0f be e8             	movsx  ebp,al
c000d037:	3c 43                	cmp    al,0x43
c000d039:	75 10                	jne    c000d04b <LogicalDisk::assignDriveLetter()+0x51>
c000d03b:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d042:	75 5a                	jne    c000d09e <LogicalDisk::assignDriveLetter()+0xa4>
c000d044:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d049:	75 53                	jne    c000d09e <LogicalDisk::assignDriveLetter()+0xa4>
c000d04b:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d04e:	ba 01 00 00 00       	mov    edx,0x1
c000d053:	89 34 24             	mov    DWORD PTR [esp],esi
c000d056:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d059:	d3 e2                	shl    edx,cl
c000d05b:	89 d7                	mov    edi,edx
c000d05d:	89 d6                	mov    esi,edx
c000d05f:	c1 ff 1f             	sar    edi,0x1f
c000d062:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d066:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d06a:	21 f9                	and    ecx,edi
c000d06c:	09 d1                	or     ecx,edx
c000d06e:	75 2e                	jne    c000d09e <LogicalDisk::assignDriveLetter()+0xa4>
c000d070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d074:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d078:	09 f2                	or     edx,esi
c000d07a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d07d:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d083:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d087:	09 fa                	or     edx,edi
c000d089:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d08f:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d095:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d09c:	eb 0d                	jmp    c000d0ab <LogicalDisk::assignDriveLetter()+0xb1>
c000d09e:	8d 50 01             	lea    edx,[eax+0x1]
c000d0a1:	45                   	inc    ebp
c000d0a2:	88 d0                	mov    al,dl
c000d0a4:	80 fa 5b             	cmp    dl,0x5b
c000d0a7:	75 8e                	jne    c000d037 <LogicalDisk::assignDriveLetter()+0x3d>
c000d0a9:	31 c0                	xor    eax,eax
c000d0ab:	83 c4 14             	add    esp,0x14
c000d0ae:	5b                   	pop    ebx
c000d0af:	5e                   	pop    esi
c000d0b0:	5f                   	pop    edi
c000d0b1:	5d                   	pop    ebp
c000d0b2:	c3                   	ret    
c000d0b3:	90                   	nop

c000d0b4 <LogicalDisk::mount()>:
c000d0b4:	56                   	push   esi
c000d0b5:	53                   	push   ebx
c000d0b6:	53                   	push   ebx
c000d0b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0bb:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0c1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0cb:	85 db                	test   ebx,ebx
c000d0cd:	74 27                	je     c000d0f6 <LogicalDisk::mount()+0x42>
c000d0cf:	51                   	push   ecx
c000d0d0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0d7:	83 e8 41             	sub    eax,0x41
c000d0da:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d0dc:	50                   	push   eax
c000d0dd:	56                   	push   esi
c000d0de:	53                   	push   ebx
c000d0df:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d0e2:	83 c4 10             	add    esp,0x10
c000d0e5:	84 c0                	test   al,al
c000d0e7:	74 08                	je     c000d0f1 <LogicalDisk::mount()+0x3d>
c000d0e9:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d0ef:	eb 07                	jmp    c000d0f8 <LogicalDisk::mount()+0x44>
c000d0f1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d0f4:	eb d5                	jmp    c000d0cb <LogicalDisk::mount()+0x17>
c000d0f6:	31 c0                	xor    eax,eax
c000d0f8:	5a                   	pop    edx
c000d0f9:	5b                   	pop    ebx
c000d0fa:	5e                   	pop    esi
c000d0fb:	c3                   	ret    

c000d0fc <LogicalDisk::unmount()>:
c000d0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d100:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d10a:	c3                   	ret    
c000d10b:	90                   	nop

c000d10c <LogicalDisk::eject()>:
c000d10c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d110:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d116:	8b 10                	mov    edx,DWORD PTR [eax]
c000d118:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d11c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d11f:	90                   	nop

c000d120 <LogicalDisk::unassignDriveLetter()>:
c000d120:	57                   	push   edi
c000d121:	56                   	push   esi
c000d122:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d126:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d12d:	85 c9                	test   ecx,ecx
c000d12f:	75 0f                	jne    c000d140 <LogicalDisk::unassignDriveLetter()+0x20>
c000d131:	c7 44 24 0c ac 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc00205ac
c000d139:	5e                   	pop    esi
c000d13a:	5f                   	pop    edi
c000d13b:	e9 ff 36 00 00       	jmp    c001083f <KePanic(char const*)>
c000d140:	83 e9 41             	sub    ecx,0x41
c000d143:	b8 01 00 00 00       	mov    eax,0x1
c000d148:	d3 e0                	shl    eax,cl
c000d14a:	89 c7                	mov    edi,eax
c000d14c:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d153:	c1 ff 1f             	sar    edi,0x1f
c000d156:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d161:	89 fe                	mov    esi,edi
c000d163:	f7 d6                	not    esi
c000d165:	f7 d0                	not    eax
c000d167:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d16d:	5e                   	pop    esi
c000d16e:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d174:	5f                   	pop    edi
c000d175:	c3                   	ret    

c000d176 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d176:	57                   	push   edi
c000d177:	56                   	push   esi
c000d178:	53                   	push   ebx
c000d179:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d17d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d181:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d189:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d18f:	77 41                	ja     c000d1d2 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d191:	99                   	cdq    
c000d192:	01 c8                	add    eax,ecx
c000d194:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d19a:	11 da                	adc    edx,ebx
c000d19c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1a2:	19 d7                	sbb    edi,edx
c000d1a4:	72 33                	jb     c000d1d9 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1a6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1ac:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1b6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1ba:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1c0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1ca:	5b                   	pop    ebx
c000d1cb:	5e                   	pop    esi
c000d1cc:	5f                   	pop    edi
c000d1cd:	e9 c8 0a 00 00       	jmp    c000dc9a <VCache::read(unsigned long long, int, void*)>
c000d1d2:	b8 05 00 00 00       	mov    eax,0x5
c000d1d7:	eb 05                	jmp    c000d1de <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d1d9:	b8 07 00 00 00       	mov    eax,0x7
c000d1de:	5b                   	pop    ebx
c000d1df:	5e                   	pop    esi
c000d1e0:	5f                   	pop    edi
c000d1e1:	c3                   	ret    

c000d1e2 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d1e2:	57                   	push   edi
c000d1e3:	56                   	push   esi
c000d1e4:	53                   	push   ebx
c000d1e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1ed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1fb:	77 41                	ja     c000d23e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d1fd:	99                   	cdq    
c000d1fe:	01 c8                	add    eax,ecx
c000d200:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d206:	11 da                	adc    edx,ebx
c000d208:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d20e:	19 d7                	sbb    edi,edx
c000d210:	72 33                	jb     c000d245 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d212:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d218:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d21e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d222:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d226:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d22c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d236:	5b                   	pop    ebx
c000d237:	5e                   	pop    esi
c000d238:	5f                   	pop    edi
c000d239:	e9 6e 09 00 00       	jmp    c000dbac <VCache::write(unsigned long long, int, void*)>
c000d23e:	b8 05 00 00 00       	mov    eax,0x5
c000d243:	eb 05                	jmp    c000d24a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d245:	b8 07 00 00 00       	mov    eax,0x7
c000d24a:	5b                   	pop    ebx
c000d24b:	5e                   	pop    esi
c000d24c:	5f                   	pop    edi
c000d24d:	c3                   	ret    
c000d24e:	66 90                	xchg   ax,ax

c000d250 <Mouse::Mouse(char const*)>:
c000d250:	83 ec 0c             	sub    esp,0xc
c000d253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d257:	83 ec 08             	sub    esp,0x8
c000d25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d25e:	50                   	push   eax
c000d25f:	e8 ba ec ff ff       	call   c000bf1e <Device::Device(char const*)>
c000d264:	83 c4 10             	add    esp,0x10
c000d267:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d26c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d270:	89 10                	mov    DWORD PTR [eax],edx
c000d272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d276:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d280:	90                   	nop
c000d281:	83 c4 0c             	add    esp,0xc
c000d284:	c3                   	ret    
c000d285:	90                   	nop
c000d286:	66 90                	xchg   ax,ax

c000d288 <Mouse::~Mouse()>:
c000d288:	83 ec 0c             	sub    esp,0xc
c000d28b:	ba 00 06 02 c0       	mov    edx,0xc0020600
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	89 10                	mov    DWORD PTR [eax],edx
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	83 ec 0c             	sub    esp,0xc
c000d29d:	50                   	push   eax
c000d29e:	e8 e9 e9 ff ff       	call   c000bc8c <Device::~Device()>
c000d2a3:	83 c4 10             	add    esp,0x10
c000d2a6:	90                   	nop
c000d2a7:	83 c4 0c             	add    esp,0xc
c000d2aa:	c3                   	ret    
c000d2ab:	90                   	nop

c000d2ac <Mouse::~Mouse()>:
c000d2ac:	83 ec 0c             	sub    esp,0xc
c000d2af:	83 ec 0c             	sub    esp,0xc
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	e8 cd ff ff ff       	call   c000d288 <Mouse::~Mouse()>
c000d2bb:	83 c4 10             	add    esp,0x10
c000d2be:	83 ec 08             	sub    esp,0x8
c000d2c1:	68 58 01 00 00       	push   0x158
c000d2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ca:	e8 88 d5 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000d2cf:	83 c4 10             	add    esp,0x10
c000d2d2:	83 c4 0c             	add    esp,0xc
c000d2d5:	c3                   	ret    

c000d2d6 <NIC::getMAC()>:
c000d2d6:	31 c0                	xor    eax,eax
c000d2d8:	31 d2                	xor    edx,edx
c000d2da:	c3                   	ret    
c000d2db:	90                   	nop

c000d2dc <NIC::write(int, unsigned char*, int*)>:
c000d2dc:	b8 01 00 00 00       	mov    eax,0x1
c000d2e1:	c3                   	ret    

c000d2e2 <NIC::NIC(char const*)>:
c000d2e2:	83 ec 0c             	sub    esp,0xc
c000d2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e9:	83 ec 08             	sub    esp,0x8
c000d2ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f0:	50                   	push   eax
c000d2f1:	e8 28 ec ff ff       	call   c000bf1e <Device::Device(char const*)>
c000d2f6:	83 c4 10             	add    esp,0x10
c000d2f9:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d302:	89 10                	mov    DWORD PTR [eax],edx
c000d304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d308:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d312:	90                   	nop
c000d313:	83 c4 0c             	add    esp,0xc
c000d316:	c3                   	ret    
c000d317:	90                   	nop

c000d318 <NIC::~NIC()>:
c000d318:	83 ec 0c             	sub    esp,0xc
c000d31b:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d324:	89 10                	mov    DWORD PTR [eax],edx
c000d326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d32a:	83 ec 0c             	sub    esp,0xc
c000d32d:	50                   	push   eax
c000d32e:	e8 59 e9 ff ff       	call   c000bc8c <Device::~Device()>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	90                   	nop
c000d337:	83 c4 0c             	add    esp,0xc
c000d33a:	c3                   	ret    
c000d33b:	90                   	nop

c000d33c <NIC::~NIC()>:
c000d33c:	83 ec 0c             	sub    esp,0xc
c000d33f:	83 ec 0c             	sub    esp,0xc
c000d342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d346:	e8 cd ff ff ff       	call   c000d318 <NIC::~NIC()>
c000d34b:	83 c4 10             	add    esp,0x10
c000d34e:	83 ec 08             	sub    esp,0x8
c000d351:	68 58 01 00 00       	push   0x158
c000d356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35a:	e8 f8 d4 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000d35f:	83 c4 10             	add    esp,0x10
c000d362:	83 c4 0c             	add    esp,0xc
c000d365:	c3                   	ret    

c000d366 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d366:	55                   	push   ebp
c000d367:	57                   	push   edi
c000d368:	56                   	push   esi
c000d369:	53                   	push   ebx
c000d36a:	81 ec 28 01 00 00    	sub    esp,0x128
c000d370:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d377:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d37e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d385:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d38c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d390:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d394:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d39b:	e8 7a ec ff ff       	call   c000c01a <Device::getName()>
c000d3a0:	5a                   	pop    edx
c000d3a1:	59                   	pop    ecx
c000d3a2:	50                   	push   eax
c000d3a3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3a7:	55                   	push   ebp
c000d3a8:	e8 83 32 ff ff       	call   c0000630 <strcpy>
c000d3ad:	5b                   	pop    ebx
c000d3ae:	58                   	pop    eax
c000d3af:	68 58 06 02 c0       	push   0xc0020658
c000d3b4:	55                   	push   ebp
c000d3b5:	e8 76 34 ff ff       	call   c0000830 <strcat>
c000d3ba:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3c1:	e8 c6 a6 ff ff       	call   c0007a8c <malloc>
c000d3c6:	83 c4 0c             	add    esp,0xc
c000d3c9:	89 c3                	mov    ebx,eax
c000d3cb:	57                   	push   edi
c000d3cc:	56                   	push   esi
c000d3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3dc:	55                   	push   ebp
c000d3dd:	50                   	push   eax
c000d3de:	e8 57 fb ff ff       	call   c000cf3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d3e3:	83 c4 14             	add    esp,0x14
c000d3e6:	53                   	push   ebx
c000d3e7:	e8 0e fc ff ff       	call   c000cffa <LogicalDisk::assignDriveLetter()>
c000d3ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ef:	e8 c0 fc ff ff       	call   c000d0b4 <LogicalDisk::mount()>
c000d3f4:	58                   	pop    eax
c000d3f5:	5a                   	pop    edx
c000d3f6:	53                   	push   ebx
c000d3f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3fe:	e8 83 e9 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c000d403:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d409:	5b                   	pop    ebx
c000d40a:	5e                   	pop    esi
c000d40b:	5f                   	pop    edi
c000d40c:	5d                   	pop    ebp
c000d40d:	c3                   	ret    

c000d40e <createPartitionsForDisk(PhysicalDisk*)>:
c000d40e:	55                   	push   ebp
c000d40f:	57                   	push   edi
c000d410:	56                   	push   esi
c000d411:	53                   	push   ebx
c000d412:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d418:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d41f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d425:	3d 00 02 00 00       	cmp    eax,0x200
c000d42a:	74 27                	je     c000d453 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d42c:	83 ec 10             	sub    esp,0x10
c000d42f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d435:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d43b:	99                   	cdq    
c000d43c:	52                   	push   edx
c000d43d:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d441:	50                   	push   eax
c000d442:	89 fd                	mov    ebp,edi
c000d444:	c1 e6 0a             	shl    esi,0xa
c000d447:	55                   	push   ebp
c000d448:	56                   	push   esi
c000d449:	e8 82 11 01 00       	call   c001e5d0 <__udivdi3>
c000d44e:	e9 b9 00 00 00       	jmp    c000d50c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d458:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d45c:	56                   	push   esi
c000d45d:	6a 01                	push   0x1
c000d45f:	6a 00                	push   0x0
c000d461:	6a 00                	push   0x0
c000d463:	53                   	push   ebx
c000d464:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d467:	83 c4 20             	add    esp,0x20
c000d46a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d472:	75 0a                	jne    c000d47e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d474:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d47c:	74 2c                	je     c000d4aa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d47e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d484:	83 ec 10             	sub    esp,0x10
c000d487:	89 f7                	mov    edi,esi
c000d489:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d48f:	c1 ff 1f             	sar    edi,0x1f
c000d492:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d498:	57                   	push   edi
c000d499:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d49d:	c1 e0 0a             	shl    eax,0xa
c000d4a0:	56                   	push   esi
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	e8 28 11 01 00       	call   c001e5d0 <__udivdi3>
c000d4a8:	eb 62                	jmp    c000d50c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4aa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4b1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4b8:	89 cf                	mov    edi,ecx
c000d4ba:	83 e2 7f             	and    edx,0x7f
c000d4bd:	83 e7 7f             	and    edi,0x7f
c000d4c0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4c7:	83 e0 7f             	and    eax,0x7f
c000d4ca:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4cd:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4d0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4d7:	83 e0 7f             	and    eax,0x7f
c000d4da:	01 d0                	add    eax,edx
c000d4dc:	89 c5                	mov    ebp,eax
c000d4de:	84 c0                	test   al,al
c000d4e0:	74 41                	je     c000d523 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d4e2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4e8:	83 ec 10             	sub    esp,0x10
c000d4eb:	89 f7                	mov    edi,esi
c000d4ed:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4f3:	c1 ff 1f             	sar    edi,0x1f
c000d4f6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4fc:	57                   	push   edi
c000d4fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d501:	c1 e0 0a             	shl    eax,0xa
c000d504:	56                   	push   esi
c000d505:	52                   	push   edx
c000d506:	50                   	push   eax
c000d507:	e8 c4 10 01 00       	call   c001e5d0 <__udivdi3>
c000d50c:	83 c4 14             	add    esp,0x14
c000d50f:	52                   	push   edx
c000d510:	50                   	push   eax
c000d511:	6a 00                	push   0x0
c000d513:	6a 00                	push   0x0
c000d515:	53                   	push   ebx
c000d516:	e8 4b fe ff ff       	call   c000d366 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d51b:	83 c4 20             	add    esp,0x20
c000d51e:	e9 73 01 00 00       	jmp    c000d696 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d523:	89 f0                	mov    eax,esi
c000d525:	31 c9                	xor    ecx,ecx
c000d527:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d52e:	75 02                	jne    c000d532 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d530:	89 cd                	mov    ebp,ecx
c000d532:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d539:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d540:	c1 e2 08             	shl    edx,0x8
c000d543:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d54b:	c1 e6 10             	shl    esi,0x10
c000d54e:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d556:	09 f2                	or     edx,esi
c000d558:	83 c0 10             	add    eax,0x10
c000d55b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000d562:	09 f2                	or     edx,esi
c000d564:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d56b:	c1 e6 18             	shl    esi,0x18
c000d56e:	09 f2                	or     edx,esi
c000d570:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d574:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d57b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d582:	c1 e6 10             	shl    esi,0x10
c000d585:	c1 e2 08             	shl    edx,0x8
c000d588:	09 f2                	or     edx,esi
c000d58a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d591:	09 f2                	or     edx,esi
c000d593:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d59a:	c1 e6 18             	shl    esi,0x18
c000d59d:	09 f2                	or     edx,esi
c000d59f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5a3:	41                   	inc    ecx
c000d5a4:	83 f9 04             	cmp    ecx,0x4
c000d5a7:	0f 85 7a ff ff ff    	jne    c000d527 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b1:	83 f0 01             	xor    eax,0x1
c000d5b4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5b8:	75 4f                	jne    c000d609 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5be:	83 f0 01             	xor    eax,0x1
c000d5c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5c5:	75 42                	jne    c000d609 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5c7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d5cd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5d5:	89 f7                	mov    edi,esi
c000d5d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5df:	c1 ff 1f             	sar    edi,0x1f
c000d5e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d5ee:	57                   	push   edi
c000d5ef:	56                   	push   esi
c000d5f0:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d5f4:	c1 e0 0a             	shl    eax,0xa
c000d5f7:	52                   	push   edx
c000d5f8:	50                   	push   eax
c000d5f9:	e8 d2 0f 01 00       	call   c001e5d0 <__udivdi3>
c000d5fe:	83 c4 10             	add    esp,0x10
c000d601:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d605:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d609:	89 e8                	mov    eax,ebp
c000d60b:	0f b6 e8             	movzx  ebp,al
c000d60e:	85 ed                	test   ebp,ebp
c000d610:	74 50                	je     c000d662 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d612:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d616:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d61a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d61e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d622:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d62a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d62e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d632:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d636:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d63a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d63e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d642:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d646:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d64a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d64e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d652:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d656:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d65a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d65e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d662:	31 ed                	xor    ebp,ebp
c000d664:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d668:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d66c:	89 f8                	mov    eax,edi
c000d66e:	09 f0                	or     eax,esi
c000d670:	74 1e                	je     c000d690 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d672:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d676:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d67a:	89 d1                	mov    ecx,edx
c000d67c:	09 c1                	or     ecx,eax
c000d67e:	74 10                	je     c000d690 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d680:	83 ec 0c             	sub    esp,0xc
c000d683:	57                   	push   edi
c000d684:	56                   	push   esi
c000d685:	52                   	push   edx
c000d686:	50                   	push   eax
c000d687:	53                   	push   ebx
c000d688:	e8 d9 fc ff ff       	call   c000d366 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d68d:	83 c4 20             	add    esp,0x20
c000d690:	45                   	inc    ebp
c000d691:	83 fd 04             	cmp    ebp,0x4
c000d694:	75 ce                	jne    c000d664 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d696:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d69c:	5b                   	pop    ebx
c000d69d:	5e                   	pop    esi
c000d69e:	5f                   	pop    edi
c000d69f:	5d                   	pop    ebp
c000d6a0:	c3                   	ret    
c000d6a1:	66 90                	xchg   ax,ax
c000d6a3:	90                   	nop

c000d6a4 <Serial::Serial(char const*)>:
c000d6a4:	83 ec 0c             	sub    esp,0xc
c000d6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ab:	83 ec 08             	sub    esp,0x8
c000d6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b2:	50                   	push   eax
c000d6b3:	e8 66 e8 ff ff       	call   c000bf1e <Device::Device(char const*)>
c000d6b8:	83 c4 10             	add    esp,0x10
c000d6bb:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c4:	89 10                	mov    DWORD PTR [eax],edx
c000d6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ca:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6d4:	90                   	nop
c000d6d5:	83 c4 0c             	add    esp,0xc
c000d6d8:	c3                   	ret    
c000d6d9:	90                   	nop
c000d6da:	66 90                	xchg   ax,ax

c000d6dc <Serial::~Serial()>:
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	ba 6c 06 02 c0       	mov    edx,0xc002066c
c000d6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ee:	83 ec 0c             	sub    esp,0xc
c000d6f1:	50                   	push   eax
c000d6f2:	e8 95 e5 ff ff       	call   c000bc8c <Device::~Device()>
c000d6f7:	83 c4 10             	add    esp,0x10
c000d6fa:	90                   	nop
c000d6fb:	83 c4 0c             	add    esp,0xc
c000d6fe:	c3                   	ret    
c000d6ff:	90                   	nop

c000d700 <Serial::~Serial()>:
c000d700:	83 ec 0c             	sub    esp,0xc
c000d703:	83 ec 0c             	sub    esp,0xc
c000d706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d70a:	e8 cd ff ff ff       	call   c000d6dc <Serial::~Serial()>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	83 ec 08             	sub    esp,0x8
c000d715:	68 58 01 00 00       	push   0x158
c000d71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d71e:	e8 34 d1 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000d723:	83 c4 10             	add    esp,0x10
c000d726:	83 c4 0c             	add    esp,0xc
c000d729:	c3                   	ret    
c000d72a:	66 90                	xchg   ax,ax

c000d72c <Timer::Timer(char const*)>:
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d733:	83 ec 08             	sub    esp,0x8
c000d736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73a:	50                   	push   eax
c000d73b:	e8 de e7 ff ff       	call   c000bf1e <Device::Device(char const*)>
c000d740:	83 c4 10             	add    esp,0x10
c000d743:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74c:	89 10                	mov    DWORD PTR [eax],edx
c000d74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d752:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d75c:	90                   	nop
c000d75d:	83 c4 0c             	add    esp,0xc
c000d760:	c3                   	ret    
c000d761:	90                   	nop
c000d762:	66 90                	xchg   ax,ax

c000d764 <Timer::~Timer()>:
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	ba b0 06 02 c0       	mov    edx,0xc00206b0
c000d76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d770:	89 10                	mov    DWORD PTR [eax],edx
c000d772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d776:	83 ec 0c             	sub    esp,0xc
c000d779:	50                   	push   eax
c000d77a:	e8 0d e5 ff ff       	call   c000bc8c <Device::~Device()>
c000d77f:	83 c4 10             	add    esp,0x10
c000d782:	90                   	nop
c000d783:	83 c4 0c             	add    esp,0xc
c000d786:	c3                   	ret    
c000d787:	90                   	nop

c000d788 <Timer::~Timer()>:
c000d788:	83 ec 0c             	sub    esp,0xc
c000d78b:	83 ec 0c             	sub    esp,0xc
c000d78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d792:	e8 cd ff ff ff       	call   c000d764 <Timer::~Timer()>
c000d797:	83 c4 10             	add    esp,0x10
c000d79a:	83 ec 08             	sub    esp,0x8
c000d79d:	68 5c 01 00 00       	push   0x15c
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	e8 ac d0 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	83 c4 0c             	add    esp,0xc
c000d7b1:	c3                   	ret    

c000d7b2 <Timer::read()>:
c000d7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7bc:	c3                   	ret    

c000d7bd <setupTimer(int)>:
c000d7bd:	53                   	push   ebx
c000d7be:	83 ec 14             	sub    esp,0x14
c000d7c1:	68 5c 01 00 00       	push   0x15c
c000d7c6:	e8 c1 a2 ff ff       	call   c0007a8c <malloc>
c000d7cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7ce:	89 c3                	mov    ebx,eax
c000d7d0:	e8 5f 06 01 00       	call   c001de34 <PIT::PIT()>
c000d7d5:	58                   	pop    eax
c000d7d6:	5a                   	pop    edx
c000d7d7:	53                   	push   ebx
c000d7d8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d7de:	e8 a3 e5 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c000d7e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7e5:	6a 00                	push   0x0
c000d7e7:	6a 00                	push   0x0
c000d7e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7ed:	53                   	push   ebx
c000d7ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7f1:	83 c4 28             	add    esp,0x28
c000d7f4:	89 d8                	mov    eax,ebx
c000d7f6:	5b                   	pop    ebx
c000d7f7:	c3                   	ret    

c000d7f8 <timerHandler(unsigned int)>:
c000d7f8:	56                   	push   esi
c000d7f9:	53                   	push   ebx
c000d7fa:	51                   	push   ecx
c000d7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ff:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d805:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d80c:	0f 84 4a 01 00 00    	je     c000d95c <timerHandler(unsigned int)+0x164>
c000d812:	fa                   	cli    
c000d813:	83 ec 0c             	sub    esp,0xc
c000d816:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d81c:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d822:	68 78 81 02 c0       	push   0xc0028178
c000d827:	e8 74 13 01 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	84 c0                	test   al,al
c000d831:	0f 85 a1 00 00 00    	jne    c000d8d8 <timerHandler(unsigned int)+0xe0>
c000d837:	83 ec 0c             	sub    esp,0xc
c000d83a:	68 78 81 02 c0       	push   0xc0028178
c000d83f:	e8 78 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d844:	83 c4 10             	add    esp,0x10
c000d847:	89 c6                	mov    esi,eax
c000d849:	8d 76 00             	lea    esi,[esi+0x0]
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	68 78 81 02 c0       	push   0xc0028178
c000d854:	e8 63 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d859:	89 c3                	mov    ebx,eax
c000d85b:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d862:	e8 5d 13 01 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d86d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d873:	77 23                	ja     c000d898 <timerHandler(unsigned int)+0xa0>
c000d875:	83 ec 0c             	sub    esp,0xc
c000d878:	53                   	push   ebx
c000d879:	e8 c6 7c 00 00       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c000d87e:	83 c4 10             	add    esp,0x10
c000d881:	39 de                	cmp    esi,ebx
c000d883:	75 27                	jne    c000d8ac <timerHandler(unsigned int)+0xb4>
c000d885:	83 ec 0c             	sub    esp,0xc
c000d888:	68 78 81 02 c0       	push   0xc0028178
c000d88d:	e8 2a 13 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d892:	89 c6                	mov    esi,eax
c000d894:	eb 12                	jmp    c000d8a8 <timerHandler(unsigned int)+0xb0>
c000d896:	66 90                	xchg   ax,ax
c000d898:	52                   	push   edx
c000d899:	52                   	push   edx
c000d89a:	53                   	push   ebx
c000d89b:	68 78 81 02 c0       	push   0xc0028178
c000d8a0:	e8 db 13 01 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8a8:	83 c4 10             	add    esp,0x10
c000d8ab:	90                   	nop
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	68 78 81 02 c0       	push   0xc0028178
c000d8b4:	e8 e7 12 01 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8b9:	83 c4 10             	add    esp,0x10
c000d8bc:	84 c0                	test   al,al
c000d8be:	75 18                	jne    c000d8d8 <timerHandler(unsigned int)+0xe0>
c000d8c0:	83 ec 0c             	sub    esp,0xc
c000d8c3:	68 78 81 02 c0       	push   0xc0028178
c000d8c8:	e8 ef 12 01 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8cd:	83 c4 10             	add    esp,0x10
c000d8d0:	39 f0                	cmp    eax,esi
c000d8d2:	0f 85 74 ff ff ff    	jne    c000d84c <timerHandler(unsigned int)+0x54>
c000d8d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8dd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d8e1:	74 41                	je     c000d924 <timerHandler(unsigned int)+0x12c>
c000d8e3:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d8ea:	74 38                	je     c000d924 <timerHandler(unsigned int)+0x12c>
c000d8ec:	fa                   	cli    
c000d8ed:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8f3:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d8f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d8fe:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d901:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d907:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d90a:	72 08                	jb     c000d914 <timerHandler(unsigned int)+0x11c>
c000d90c:	e8 2f 77 00 00       	call   c0015040 <schedule()>
c000d911:	8d 76 00             	lea    esi,[esi+0x0]
c000d914:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d919:	48                   	dec    eax
c000d91a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d91f:	75 03                	jne    c000d924 <timerHandler(unsigned int)+0x12c>
c000d921:	fb                   	sti    
c000d922:	66 90                	xchg   ax,ax
c000d924:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d929:	48                   	dec    eax
c000d92a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d92f:	75 1b                	jne    c000d94c <timerHandler(unsigned int)+0x154>
c000d931:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d938:	74 12                	je     c000d94c <timerHandler(unsigned int)+0x154>
c000d93a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d944:	e8 f7 76 00 00       	call   c0015040 <schedule()>
c000d949:	8d 76 00             	lea    esi,[esi+0x0]
c000d94c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d951:	48                   	dec    eax
c000d952:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d957:	75 03                	jne    c000d95c <timerHandler(unsigned int)+0x164>
c000d959:	fb                   	sti    
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	58                   	pop    eax
c000d95d:	5b                   	pop    ebx
c000d95e:	5e                   	pop    esi
c000d95f:	c3                   	ret    

c000d960 <VCache::VCache(PhysicalDisk*)>:
c000d960:	53                   	push   ebx
c000d961:	83 ec 18             	sub    esp,0x18
c000d964:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000d969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d96d:	89 10                	mov    DWORD PTR [eax],edx
c000d96f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d973:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d97a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d97e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d989:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d990:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9a2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ad:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9c0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9c7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9da:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ea:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d9f1:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d9f9:	83 ec 0c             	sub    esp,0xc
c000d9fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da00:	e8 87 a0 ff ff       	call   c0007a8c <malloc>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 c3                	mov    ebx,eax
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	53                   	push   ebx
c000da0e:	e8 cd 73 00 00       	call   c0014de0 <Mutex::Mutex()>
c000da13:	83 c4 10             	add    esp,0x10
c000da16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da25:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da2c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da37:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da48:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da58:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da5b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da70:	05 00 02 00 00       	add    eax,0x200
c000da75:	c1 e0 03             	shl    eax,0x3
c000da78:	83 ec 0c             	sub    esp,0xc
c000da7b:	50                   	push   eax
c000da7c:	e8 0b a0 ff ff       	call   c0007a8c <malloc>
c000da81:	83 c4 10             	add    esp,0x10
c000da84:	89 c2                	mov    edx,eax
c000da86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000da8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da91:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000daa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000daa4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000daaa:	89 d0                	mov    eax,edx
c000daac:	c1 e0 02             	shl    eax,0x2
c000daaf:	01 d0                	add    eax,edx
c000dab1:	c1 e0 04             	shl    eax,0x4
c000dab4:	83 ec 0c             	sub    esp,0xc
c000dab7:	50                   	push   eax
c000dab8:	e8 cf 9f ff ff       	call   c0007a8c <malloc>
c000dabd:	83 c4 10             	add    esp,0x10
c000dac0:	89 c2                	mov    edx,eax
c000dac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dac9:	90                   	nop
c000daca:	83 c4 18             	add    esp,0x18
c000dacd:	5b                   	pop    ebx
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <VCache::invalidateReadBuffer()>:
c000dad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dad4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dada:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dade:	c3                   	ret    
c000dadf:	90                   	nop

c000dae0 <VCache::writeWriteBuffer()>:
c000dae0:	53                   	push   ebx
c000dae1:	83 ec 08             	sub    esp,0x8
c000dae4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dae8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000daec:	74 1e                	je     c000db0c <VCache::writeWriteBuffer()+0x2c>
c000daee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000daf6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000daf9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000dafc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000daff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db02:	50                   	push   eax
c000db03:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db06:	83 c4 20             	add    esp,0x20
c000db09:	8d 76 00             	lea    esi,[esi+0x0]
c000db0c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db13:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db1a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db1e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db25:	83 c4 08             	add    esp,0x8
c000db28:	5b                   	pop    ebx
c000db29:	c3                   	ret    
c000db2a:	66 90                	xchg   ax,ax

c000db2c <VCache::~VCache()>:
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	ba e0 06 02 c0       	mov    edx,0xc00206e0
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	89 10                	mov    DWORD PTR [eax],edx
c000db3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db41:	0f b6 c0             	movzx  eax,al
c000db44:	85 c0                	test   eax,eax
c000db46:	74 10                	je     c000db58 <VCache::~VCache()+0x2c>
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4f:	e8 8c ff ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c000db54:	83 c4 10             	add    esp,0x10
c000db57:	90                   	nop
c000db58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db5f:	83 ec 0c             	sub    esp,0xc
c000db62:	50                   	push   eax
c000db63:	e8 34 9f ff ff       	call   c0007a9c <free>
c000db68:	83 c4 10             	add    esp,0x10
c000db6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db72:	83 ec 0c             	sub    esp,0xc
c000db75:	50                   	push   eax
c000db76:	e8 21 9f ff ff       	call   c0007a9c <free>
c000db7b:	83 c4 10             	add    esp,0x10
c000db7e:	90                   	nop
c000db7f:	83 c4 0c             	add    esp,0xc
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <VCache::~VCache()>:
c000db84:	83 ec 0c             	sub    esp,0xc
c000db87:	83 ec 0c             	sub    esp,0xc
c000db8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8e:	e8 99 ff ff ff       	call   c000db2c <VCache::~VCache()>
c000db93:	83 c4 10             	add    esp,0x10
c000db96:	83 ec 08             	sub    esp,0x8
c000db99:	6a 44                	push   0x44
c000db9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9f:	e8 b3 cc ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	83 c4 0c             	add    esp,0xc
c000dbaa:	c3                   	ret    
c000dbab:	90                   	nop

c000dbac <VCache::write(unsigned long long, int, void*)>:
c000dbac:	55                   	push   ebp
c000dbad:	57                   	push   edi
c000dbae:	56                   	push   esi
c000dbaf:	53                   	push   ebx
c000dbb0:	83 ec 1c             	sub    esp,0x1c
c000dbb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbbf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbc3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbc7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbcb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbcf:	74 07                	je     c000dbd8 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dbd1:	53                   	push   ebx
c000dbd2:	e8 f9 fe ff ff       	call   c000dad0 <VCache::invalidateReadBuffer()>
c000dbd7:	58                   	pop    eax
c000dbd8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbdc:	74 62                	je     c000dc40 <VCache::write(unsigned long long, int, void*)+0x94>
c000dbde:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dbe1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dbe5:	99                   	cdq    
c000dbe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbea:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dbed:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dbf0:	31 c1                	xor    ecx,eax
c000dbf2:	89 d0                	mov    eax,edx
c000dbf4:	89 ca                	mov    edx,ecx
c000dbf6:	31 e8                	xor    eax,ebp
c000dbf8:	09 c2                	or     edx,eax
c000dbfa:	75 38                	jne    c000dc34 <VCache::write(unsigned long long, int, void*)+0x88>
c000dbfc:	83 ff 01             	cmp    edi,0x1
c000dbff:	75 33                	jne    c000dc34 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc01:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc08:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc0b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc11:	0f af c8             	imul   ecx,eax
c000dc14:	01 cf                	add    edi,ecx
c000dc16:	89 c1                	mov    ecx,eax
c000dc18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc1d:	40                   	inc    eax
c000dc1e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc21:	83 f8 50             	cmp    eax,0x50
c000dc24:	75 6a                	jne    c000dc90 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	53                   	push   ebx
c000dc2a:	e8 b1 fe ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	eb 5c                	jmp    c000dc90 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc34:	83 ec 0c             	sub    esp,0xc
c000dc37:	53                   	push   ebx
c000dc38:	e8 a3 fe ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc43:	83 ff 4f             	cmp    edi,0x4f
c000dc46:	7f 20                	jg     c000dc68 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dc48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc4c:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc4f:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc52:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc55:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc59:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc5c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc64:	eb 2a                	jmp    c000dc90 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc66:	66 90                	xchg   ax,ax
c000dc68:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc6a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc72:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dc76:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc7a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dc7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc82:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dc85:	83 c4 1c             	add    esp,0x1c
c000dc88:	5b                   	pop    ebx
c000dc89:	5e                   	pop    esi
c000dc8a:	5f                   	pop    edi
c000dc8b:	5d                   	pop    ebp
c000dc8c:	ff e0                	jmp    eax
c000dc8e:	66 90                	xchg   ax,ax
c000dc90:	83 c4 1c             	add    esp,0x1c
c000dc93:	31 c0                	xor    eax,eax
c000dc95:	5b                   	pop    ebx
c000dc96:	5e                   	pop    esi
c000dc97:	5f                   	pop    edi
c000dc98:	5d                   	pop    ebp
c000dc99:	c3                   	ret    

c000dc9a <VCache::read(unsigned long long, int, void*)>:
c000dc9a:	55                   	push   ebp
c000dc9b:	57                   	push   edi
c000dc9c:	56                   	push   esi
c000dc9d:	53                   	push   ebx
c000dc9e:	83 ec 1c             	sub    esp,0x1c
c000dca1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dca5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dca9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dcad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dcb1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcb9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcbd:	74 0d                	je     c000dccc <VCache::read(unsigned long long, int, void*)+0x32>
c000dcbf:	83 ec 0c             	sub    esp,0xc
c000dcc2:	57                   	push   edi
c000dcc3:	e8 18 fe ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c000dcc8:	83 c4 10             	add    esp,0x10
c000dccb:	90                   	nop
c000dccc:	83 fd 01             	cmp    ebp,0x1
c000dccf:	0f 85 93 00 00 00    	jne    c000dd68 <VCache::read(unsigned long long, int, void*)+0xce>
c000dcd5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcdb:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dce2:	0f 85 80 00 00 00    	jne    c000dd68 <VCache::read(unsigned long long, int, void*)+0xce>
c000dce8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dceb:	89 e9                	mov    ecx,ebp
c000dced:	f7 d9                	neg    ecx
c000dcef:	89 c8                	mov    eax,ecx
c000dcf1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dcf5:	c1 f8 1f             	sar    eax,0x1f
c000dcf8:	21 d9                	and    ecx,ebx
c000dcfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcfe:	89 c8                	mov    eax,ecx
c000dd00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd04:	21 f1                	and    ecx,esi
c000dd06:	89 ca                	mov    edx,ecx
c000dd08:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd0c:	74 2e                	je     c000dd3c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd0e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd11:	75 29                	jne    c000dd3c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd13:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd16:	75 24                	jne    c000dd3c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd18:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd1b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd21:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd24:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd27:	21 f3                	and    ebx,esi
c000dd29:	0f af d9             	imul   ebx,ecx
c000dd2c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd2f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd33:	89 de                	mov    esi,ebx
c000dd35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd37:	31 c0                	xor    eax,eax
c000dd39:	eb 61                	jmp    c000dd9c <VCache::read(unsigned long long, int, void*)+0x102>
c000dd3b:	90                   	nop
c000dd3c:	83 ec 0c             	sub    esp,0xc
c000dd3f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd43:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd46:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd4d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd4f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd52:	55                   	push   ebp
c000dd53:	52                   	push   edx
c000dd54:	50                   	push   eax
c000dd55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd59:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000dd5c:	83 c4 20             	add    esp,0x20
c000dd5f:	85 c0                	test   eax,eax
c000dd61:	75 39                	jne    c000dd9c <VCache::read(unsigned long long, int, void*)+0x102>
c000dd63:	eb b3                	jmp    c000dd18 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd65:	8d 76 00             	lea    esi,[esi+0x0]
c000dd68:	83 ec 0c             	sub    esp,0xc
c000dd6b:	57                   	push   edi
c000dd6c:	e8 5f fd ff ff       	call   c000dad0 <VCache::invalidateReadBuffer()>
c000dd71:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd78:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd7a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dd7e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dd82:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dd86:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000dd8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd8e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dd91:	83 c4 2c             	add    esp,0x2c
c000dd94:	5b                   	pop    ebx
c000dd95:	5e                   	pop    esi
c000dd96:	5f                   	pop    edi
c000dd97:	5d                   	pop    ebp
c000dd98:	ff e0                	jmp    eax
c000dd9a:	66 90                	xchg   ax,ax
c000dd9c:	83 c4 1c             	add    esp,0x1c
c000dd9f:	5b                   	pop    ebx
c000dda0:	5e                   	pop    esi
c000dda1:	5f                   	pop    edi
c000dda2:	5d                   	pop    ebp
c000dda3:	c3                   	ret    

c000dda4 <Video::putrect(int, int, int, int, unsigned int)>:
c000dda4:	55                   	push   ebp
c000dda5:	57                   	push   edi
c000dda6:	56                   	push   esi
c000dda7:	53                   	push   ebx
c000dda8:	83 ec 1c             	sub    esp,0x1c
c000ddab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddaf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddb3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ddb7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ddbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ddc3:	01 df                	add    edi,ebx
c000ddc5:	39 fb                	cmp    ebx,edi
c000ddc7:	7d 1f                	jge    c000dde8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ddc9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ddcd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ddd1:	7d 12                	jge    c000dde5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ddd3:	8b 16                	mov    edx,DWORD PTR [esi]
c000ddd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddd9:	53                   	push   ebx
c000ddda:	55                   	push   ebp
c000dddb:	45                   	inc    ebp
c000dddc:	56                   	push   esi
c000dddd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dde0:	83 c4 10             	add    esp,0x10
c000dde3:	eb e8                	jmp    c000ddcd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000dde5:	43                   	inc    ebx
c000dde6:	eb dd                	jmp    c000ddc5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000dde8:	83 c4 1c             	add    esp,0x1c
c000ddeb:	5b                   	pop    ebx
c000ddec:	5e                   	pop    esi
c000dded:	5f                   	pop    edi
c000ddee:	5d                   	pop    ebp
c000ddef:	c3                   	ret    

c000ddf0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ddf0:	55                   	push   ebp
c000ddf1:	57                   	push   edi
c000ddf2:	31 ff                	xor    edi,edi
c000ddf4:	56                   	push   esi
c000ddf5:	53                   	push   ebx
c000ddf6:	83 ec 1c             	sub    esp,0x1c
c000ddf9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ddfd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de01:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de08:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de0d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de15:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de19:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de1c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de20:	01 f9                	add    ecx,edi
c000de22:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de26:	7d 2f                	jge    c000de57 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de28:	31 f6                	xor    esi,esi
c000de2a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de2e:	01 f2                	add    edx,esi
c000de30:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de34:	7d 1a                	jge    c000de50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de39:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de3c:	46                   	inc    esi
c000de3d:	51                   	push   ecx
c000de3e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de42:	52                   	push   edx
c000de43:	55                   	push   ebp
c000de44:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de47:	83 c4 10             	add    esp,0x10
c000de4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de4e:	eb da                	jmp    c000de2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de50:	47                   	inc    edi
c000de51:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de55:	eb c5                	jmp    c000de1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de57:	83 c4 1c             	add    esp,0x1c
c000de5a:	5b                   	pop    ebx
c000de5b:	5e                   	pop    esi
c000de5c:	5f                   	pop    edi
c000de5d:	5d                   	pop    ebp
c000de5e:	c3                   	ret    
c000de5f:	90                   	nop

c000de60 <Video::blit(unsigned int*, int, int, int, int)>:
c000de60:	55                   	push   ebp
c000de61:	57                   	push   edi
c000de62:	56                   	push   esi
c000de63:	53                   	push   ebx
c000de64:	83 ec 1c             	sub    esp,0x1c
c000de67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de6f:	85 c0                	test   eax,eax
c000de71:	79 02                	jns    c000de75 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000de73:	31 c0                	xor    eax,eax
c000de75:	c1 e0 02             	shl    eax,0x2
c000de78:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000de7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de80:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de84:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000de88:	39 d8                	cmp    eax,ebx
c000de8a:	7e 49                	jle    c000ded5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de8c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000de92:	7c 41                	jl     c000ded5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000de94:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000de98:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de9c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dea0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dea4:	39 f9                	cmp    ecx,edi
c000dea6:	7e 22                	jle    c000deca <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dea8:	83 c5 04             	add    ebp,0x4
c000deab:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000deb1:	7c 14                	jl     c000dec7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000deb3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000deb5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000deb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000debc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dec0:	56                   	push   esi
c000dec1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dec4:	83 c4 10             	add    esp,0x10
c000dec7:	47                   	inc    edi
c000dec8:	eb d2                	jmp    c000de9c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000deca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dece:	43                   	inc    ebx
c000decf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ded3:	eb ab                	jmp    c000de80 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ded5:	83 c4 1c             	add    esp,0x1c
c000ded8:	5b                   	pop    ebx
c000ded9:	5e                   	pop    esi
c000deda:	5f                   	pop    edi
c000dedb:	5d                   	pop    ebp
c000dedc:	c3                   	ret    
c000dedd:	90                   	nop

c000dede <Video::clearScreen(unsigned int)>:
c000dede:	57                   	push   edi
c000dedf:	56                   	push   esi
c000dee0:	53                   	push   ebx
c000dee1:	31 db                	xor    ebx,ebx
c000dee3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dee7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deed:	7e 1f                	jle    c000df0e <Video::clearScreen(unsigned int)+0x30>
c000deef:	31 ff                	xor    edi,edi
c000def1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000def7:	7e 12                	jle    c000df0b <Video::clearScreen(unsigned int)+0x2d>
c000def9:	8b 06                	mov    eax,DWORD PTR [esi]
c000defb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000deff:	53                   	push   ebx
c000df00:	57                   	push   edi
c000df01:	47                   	inc    edi
c000df02:	56                   	push   esi
c000df03:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	eb e6                	jmp    c000def1 <Video::clearScreen(unsigned int)+0x13>
c000df0b:	43                   	inc    ebx
c000df0c:	eb d9                	jmp    c000dee7 <Video::clearScreen(unsigned int)+0x9>
c000df0e:	5b                   	pop    ebx
c000df0f:	5e                   	pop    esi
c000df10:	5f                   	pop    edi
c000df11:	c3                   	ret    

c000df12 <Video::putpixel(int, int, unsigned int)>:
c000df12:	c7 44 24 04 e8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206e8
c000df1a:	e9 20 29 00 00       	jmp    c001083f <KePanic(char const*)>
c000df1f:	90                   	nop

c000df20 <Video::readPixelApprox(int, int)>:
c000df20:	83 ec 18             	sub    esp,0x18
c000df23:	68 09 07 02 c0       	push   0xc0020709
c000df28:	e8 12 29 00 00       	call   c001083f <KePanic(char const*)>
c000df2d:	31 c0                	xor    eax,eax
c000df2f:	83 c4 1c             	add    esp,0x1c
c000df32:	c3                   	ret    
c000df33:	90                   	nop

c000df34 <Video::Video(char const*)>:
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3b:	83 ec 08             	sub    esp,0x8
c000df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df42:	50                   	push   eax
c000df43:	e8 d6 df ff ff       	call   c000bf1e <Device::Device(char const*)>
c000df48:	83 c4 10             	add    esp,0x10
c000df4b:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000df50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df54:	89 10                	mov    DWORD PTR [eax],edx
c000df56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df64:	90                   	nop
c000df65:	83 c4 0c             	add    esp,0xc
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <Video::~Video()>:
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	ba 84 07 02 c0       	mov    edx,0xc0020784
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	89 10                	mov    DWORD PTR [eax],edx
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	50                   	push   eax
c000df80:	e8 07 dd ff ff       	call   c000bc8c <Device::~Device()>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	90                   	nop
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	c3                   	ret    
c000df8d:	90                   	nop

c000df8e <Video::~Video()>:
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df98:	e8 cd ff ff ff       	call   c000df6a <Video::~Video()>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	83 ec 08             	sub    esp,0x8
c000dfa3:	68 64 01 00 00       	push   0x164
c000dfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfac:	e8 a6 c8 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	83 c4 0c             	add    esp,0xc
c000dfb7:	c3                   	ret    

c000dfb8 <Video::isMonochrome()>:
c000dfb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfbc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <Video::getWidth()>:
c000dfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfc8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dfce:	c3                   	ret    
c000dfcf:	90                   	nop

c000dfd0 <Video::getHeight()>:
c000dfd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dfda:	c3                   	ret    
c000dfdb:	90                   	nop

c000dfdc <Video::drawCursor(int, int, unsigned int*, int)>:
c000dfdc:	55                   	push   ebp
c000dfdd:	57                   	push   edi
c000dfde:	56                   	push   esi
c000dfdf:	53                   	push   ebx
c000dfe0:	83 ec 2c             	sub    esp,0x2c
c000dfe3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfe7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dfeb:	83 f8 01             	cmp    eax,0x1
c000dfee:	19 c9                	sbb    ecx,ecx
c000dff0:	31 db                	xor    ebx,ebx
c000dff2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dff6:	89 cd                	mov    ebp,ecx
c000dff8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e000:	f7 d5                	not    ebp
c000e002:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e008:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e00c:	01 d8                	add    eax,ebx
c000e00e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e012:	56                   	push   esi
c000e013:	e8 b8 ff ff ff       	call   c000dfd0 <Video::getHeight()>
c000e018:	59                   	pop    ecx
c000e019:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e01d:	7e 70                	jle    c000e08f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e01f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e023:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e027:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e02a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e02e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e032:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e039:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03d:	89 f8                	mov    eax,edi
c000e03f:	83 c0 20             	add    eax,0x20
c000e042:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e046:	56                   	push   esi
c000e047:	e8 78 ff ff ff       	call   c000dfc4 <Video::getWidth()>
c000e04c:	5a                   	pop    edx
c000e04d:	39 c7                	cmp    edi,eax
c000e04f:	7d 34                	jge    c000e085 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e051:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e056:	74 05                	je     c000e05d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e058:	8b 06                	mov    eax,DWORD PTR [esi]
c000e05a:	55                   	push   ebp
c000e05b:	eb 0d                	jmp    c000e06a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e05d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e062:	74 12                	je     c000e076 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e064:	8b 06                	mov    eax,DWORD PTR [esi]
c000e066:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e06a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e06e:	57                   	push   edi
c000e06f:	56                   	push   esi
c000e070:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e073:	83 c4 10             	add    esp,0x10
c000e076:	47                   	inc    edi
c000e077:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e07b:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e07f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e083:	75 c1                	jne    c000e046 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e085:	43                   	inc    ebx
c000e086:	83 fb 20             	cmp    ebx,0x20
c000e089:	0f 85 79 ff ff ff    	jne    c000e008 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e08f:	83 c4 2c             	add    esp,0x2c
c000e092:	5b                   	pop    ebx
c000e093:	5e                   	pop    esi
c000e094:	5f                   	pop    edi
c000e095:	5d                   	pop    ebp
c000e096:	c3                   	ret    
c000e097:	90                   	nop

c000e098 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e098:	55                   	push   ebp
c000e099:	57                   	push   edi
c000e09a:	56                   	push   esi
c000e09b:	53                   	push   ebx
c000e09c:	83 ec 28             	sub    esp,0x28
c000e09f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0a3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0a7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0ab:	c1 e6 08             	shl    esi,0x8
c000e0ae:	01 c6                	add    esi,eax
c000e0b0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e0b4:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e0b8:	c1 e0 08             	shl    eax,0x8
c000e0bb:	01 d0                	add    eax,edx
c000e0bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0c5:	0f af c6             	imul   eax,esi
c000e0c8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e0cf:	50                   	push   eax
c000e0d0:	e8 b7 99 ff ff       	call   c0007a8c <malloc>
c000e0d5:	83 c4 10             	add    esp,0x10
c000e0d8:	89 c7                	mov    edi,eax
c000e0da:	85 c0                	test   eax,eax
c000e0dc:	75 10                	jne    c000e0ee <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e0de:	83 ec 0c             	sub    esp,0xc
c000e0e1:	68 34 07 02 c0       	push   0xc0020734
c000e0e6:	e8 54 27 00 00       	call   c001083f <KePanic(char const*)>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e0f2:	ba 12 00 00 00       	mov    edx,0x12
c000e0f7:	85 c0                	test   eax,eax
c000e0f9:	74 11                	je     c000e10c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e0fb:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e0ff:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e103:	c1 fa 03             	sar    edx,0x3
c000e106:	0f af d1             	imul   edx,ecx
c000e109:	83 c2 12             	add    edx,0x12
c000e10c:	85 f6                	test   esi,esi
c000e10e:	74 06                	je     c000e116 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e110:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e114:	75 12                	jne    c000e128 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e116:	83 ec 0c             	sub    esp,0xc
c000e119:	68 44 07 02 c0       	push   0xc0020744
c000e11e:	e8 30 c8 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000e123:	e9 b8 00 00 00       	jmp    c000e1e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e128:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e12c:	83 f9 02             	cmp    ecx,0x2
c000e12f:	0f 85 96 00 00 00    	jne    c000e1cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e135:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e13a:	75 0e                	jne    c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e13c:	85 c0                	test   eax,eax
c000e13e:	75 0a                	jne    c000e14a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e140:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e143:	83 e8 18             	sub    eax,0x18
c000e146:	a8 f7                	test   al,0xf7
c000e148:	74 0a                	je     c000e154 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	68 59 07 02 c0       	push   0xc0020759
c000e152:	eb 7f                	jmp    c000e1d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e154:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e15c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e164:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e168:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e170:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e174:	75 0c                	jne    c000e182 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e176:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e17b:	c1 e0 18             	shl    eax,0x18
c000e17e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e182:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e187:	c1 e1 10             	shl    ecx,0x10
c000e18a:	45                   	inc    ebp
c000e18b:	89 c8                	mov    eax,ecx
c000e18d:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e192:	c1 e1 08             	shl    ecx,0x8
c000e195:	09 c1                	or     ecx,eax
c000e197:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e19b:	09 c1                	or     ecx,eax
c000e19d:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1a1:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e1a5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1a9:	c1 f8 03             	sar    eax,0x3
c000e1ac:	01 c2                	add    edx,eax
c000e1ae:	89 e8                	mov    eax,ebp
c000e1b0:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1b4:	39 c6                	cmp    esi,eax
c000e1b6:	7f b0                	jg     c000e168 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1c0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e1c3:	7e 22                	jle    c000e1e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1c5:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e1c9:	eb 99                	jmp    c000e164 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e1cb:	50                   	push   eax
c000e1cc:	50                   	push   eax
c000e1cd:	51                   	push   ecx
c000e1ce:	68 67 07 02 c0       	push   0xc0020767
c000e1d3:	e8 7b c7 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000e1d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e1db:	e8 bc 98 ff ff       	call   c0007a9c <free>
c000e1e0:	83 c4 10             	add    esp,0x10
c000e1e3:	31 ff                	xor    edi,edi
c000e1e5:	eb 0f                	jmp    c000e1f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e1e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1eb:	89 30                	mov    DWORD PTR [eax],esi
c000e1ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1f1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e1f4:	89 30                	mov    DWORD PTR [eax],esi
c000e1f6:	83 c4 1c             	add    esp,0x1c
c000e1f9:	89 f8                	mov    eax,edi
c000e1fb:	5b                   	pop    ebx
c000e1fc:	5e                   	pop    esi
c000e1fd:	5f                   	pop    edi
c000e1fe:	5d                   	pop    ebp
c000e1ff:	c3                   	ret    

c000e200 <Video::putTGA(int, int, unsigned char*, int)>:
c000e200:	55                   	push   ebp
c000e201:	57                   	push   edi
c000e202:	56                   	push   esi
c000e203:	53                   	push   ebx
c000e204:	83 ec 28             	sub    esp,0x28
c000e207:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e20b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e20f:	50                   	push   eax
c000e210:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e214:	50                   	push   eax
c000e215:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e219:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e21d:	56                   	push   esi
c000e21e:	e8 75 fe ff ff       	call   c000e098 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e223:	83 c4 20             	add    esp,0x20
c000e226:	85 c0                	test   eax,eax
c000e228:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e22c:	74 35                	je     c000e263 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e22e:	89 c7                	mov    edi,eax
c000e230:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e234:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e238:	39 d8                	cmp    eax,ebx
c000e23a:	7e 27                	jle    c000e263 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e23c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e240:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e244:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e248:	39 e8                	cmp    eax,ebp
c000e24a:	7e 14                	jle    c000e260 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e24c:	83 c7 04             	add    edi,0x4
c000e24f:	8b 06                	mov    eax,DWORD PTR [esi]
c000e251:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e254:	53                   	push   ebx
c000e255:	55                   	push   ebp
c000e256:	45                   	inc    ebp
c000e257:	56                   	push   esi
c000e258:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e25b:	83 c4 10             	add    esp,0x10
c000e25e:	eb e0                	jmp    c000e240 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e260:	43                   	inc    ebx
c000e261:	eb cd                	jmp    c000e230 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e263:	83 c4 1c             	add    esp,0x1c
c000e266:	5b                   	pop    ebx
c000e267:	5e                   	pop    esi
c000e268:	5f                   	pop    edi
c000e269:	5d                   	pop    ebp
c000e26a:	c3                   	ret    
c000e26b:	90                   	nop

c000e26c <ACPI::close(int, int, void*)>:
c000e26c:	83 ec 1c             	sub    esp,0x1c
c000e26f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e277:	74 0b                	je     c000e284 <ACPI::close(int, int, void*)+0x18>
c000e279:	b8 00 00 00 00       	mov    eax,0x0
c000e27e:	e9 99 00 00 00       	jmp    c000e31c <ACPI::close(int, int, void*)+0xb0>
c000e283:	90                   	nop
c000e284:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e289:	75 29                	jne    c000e2b4 <ACPI::close(int, int, void*)+0x48>
c000e28b:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e290:	85 c0                	test   eax,eax
c000e292:	74 08                	je     c000e29c <ACPI::close(int, int, void*)+0x30>
c000e294:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e299:	ff d0                	call   eax
c000e29b:	90                   	nop
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	68 c8 07 02 c0       	push   0xc00207c8
c000e2a4:	e8 96 25 00 00       	call   c001083f <KePanic(char const*)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2b1:	eb 69                	jmp    c000e31c <ACPI::close(int, int, void*)+0xb0>
c000e2b3:	90                   	nop
c000e2b4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e2b9:	75 59                	jne    c000e314 <ACPI::close(int, int, void*)+0xa8>
c000e2bb:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2c0:	85 c0                	test   eax,eax
c000e2c2:	74 08                	je     c000e2cc <ACPI::close(int, int, void*)+0x60>
c000e2c4:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2c9:	ff d0                	call   eax
c000e2cb:	90                   	nop
c000e2cc:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e2d9:	83 e0 02             	and    eax,0x2
c000e2dc:	74 1e                	je     c000e2fc <ACPI::close(int, int, void*)+0x90>
c000e2de:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e9:	89 c2                	mov    edx,eax
c000e2eb:	ec                   	in     al,dx
c000e2ec:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e2f0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e2f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e2f8:	eb da                	jmp    c000e2d4 <ACPI::close(int, int, void*)+0x68>
c000e2fa:	66 90                	xchg   ax,ax
c000e2fc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e303:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e308:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e30c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e310:	ee                   	out    dx,al
c000e311:	8d 76 00             	lea    esi,[esi+0x0]
c000e314:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e319:	8d 76 00             	lea    esi,[esi+0x0]
c000e31c:	83 c4 1c             	add    esp,0x1c
c000e31f:	c3                   	ret    

c000e320 <findRSDP()>:
c000e320:	83 ec 1c             	sub    esp,0x1c
c000e323:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e328:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e32e:	83 e0 04             	and    eax,0x4
c000e331:	0f b6 c0             	movzx  eax,al
c000e334:	85 c0                	test   eax,eax
c000e336:	75 08                	jne    c000e340 <findRSDP()+0x20>
c000e338:	b8 00 00 00 00       	mov    eax,0x0
c000e33d:	eb 75                	jmp    c000e3b4 <findRSDP()+0x94>
c000e33f:	90                   	nop
c000e340:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e345:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e34a:	7f 1c                	jg     c000e368 <findRSDP()+0x48>
c000e34c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e351:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e357:	83 e2 fb             	and    edx,0xfffffffb
c000e35a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e360:	b8 00 00 00 00       	mov    eax,0x0
c000e365:	eb 4d                	jmp    c000e3b4 <findRSDP()+0x94>
c000e367:	90                   	nop
c000e368:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e370:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e378:	77 32                	ja     c000e3ac <findRSDP()+0x8c>
c000e37a:	83 ec 04             	sub    esp,0x4
c000e37d:	6a 08                	push   0x8
c000e37f:	68 63 08 02 c0       	push   0xc0020863
c000e384:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e388:	e8 f3 1f ff ff       	call   c0000380 <memcmp>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	85 c0                	test   eax,eax
c000e392:	0f 94 c0             	sete   al
c000e395:	0f b6 c0             	movzx  eax,al
c000e398:	85 c0                	test   eax,eax
c000e39a:	74 08                	je     c000e3a4 <findRSDP()+0x84>
c000e39c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3a0:	eb 12                	jmp    c000e3b4 <findRSDP()+0x94>
c000e3a2:	66 90                	xchg   ax,ax
c000e3a4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3a9:	eb c5                	jmp    c000e370 <findRSDP()+0x50>
c000e3ab:	90                   	nop
c000e3ac:	b8 00 00 00 00       	mov    eax,0x0
c000e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3b4:	83 c4 1c             	add    esp,0x1c
c000e3b7:	c3                   	ret    

c000e3b8 <loadACPITables(unsigned char*)>:
c000e3b8:	57                   	push   edi
c000e3b9:	56                   	push   esi
c000e3ba:	53                   	push   ebx
c000e3bb:	83 ec 60             	sub    esp,0x60
c000e3be:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3c3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3c9:	83 e0 04             	and    eax,0x4
c000e3cc:	0f b6 c0             	movzx  eax,al
c000e3cf:	85 c0                	test   eax,eax
c000e3d1:	0f 84 41 02 00 00    	je     c000e618 <loadACPITables(unsigned char*)+0x260>
c000e3d7:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e3dc:	0f b6 c0             	movzx  eax,al
c000e3df:	85 c0                	test   eax,eax
c000e3e1:	74 79                	je     c000e45c <loadACPITables(unsigned char*)+0xa4>
c000e3e3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e3e7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e3eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e3ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3f2:	83 e8 24             	sub    eax,0x24
c000e3f5:	c1 e8 03             	shr    eax,0x3
c000e3f8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e3fc:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e404:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e408:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e40c:	0f 8d ba 00 00 00    	jge    c000e4cc <loadACPITables(unsigned char*)+0x114>
c000e412:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e416:	83 c0 24             	add    eax,0x24
c000e419:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e41d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e421:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e425:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e429:	c1 e0 03             	shl    eax,0x3
c000e42c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e430:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e434:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e437:	8b 00                	mov    eax,DWORD PTR [eax]
c000e439:	89 c1                	mov    ecx,eax
c000e43b:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e440:	8d 50 01             	lea    edx,[eax+0x1]
c000e443:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e449:	89 ca                	mov    edx,ecx
c000e44b:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e452:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e457:	eb ab                	jmp    c000e404 <loadACPITables(unsigned char*)+0x4c>
c000e459:	8d 76 00             	lea    esi,[esi+0x0]
c000e45c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e464:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e468:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e46b:	83 e8 24             	sub    eax,0x24
c000e46e:	c1 e8 02             	shr    eax,0x2
c000e471:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e475:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e47d:	8d 76 00             	lea    esi,[esi+0x0]
c000e480:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e484:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e488:	7d 42                	jge    c000e4cc <loadACPITables(unsigned char*)+0x114>
c000e48a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e48e:	83 c0 24             	add    eax,0x24
c000e491:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e495:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e499:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e49d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4a1:	c1 e0 02             	shl    eax,0x2
c000e4a4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4ae:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4b3:	8d 50 01             	lea    edx,[eax+0x1]
c000e4b6:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4bc:	89 ca                	mov    edx,ecx
c000e4be:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4c5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e4ca:	eb b4                	jmp    c000e480 <loadACPITables(unsigned char*)+0xc8>
c000e4cc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e4d4:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e4dd:	0f 8d 39 01 00 00    	jge    c000e61c <loadACPITables(unsigned char*)+0x264>
c000e4e3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e4e7:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e4ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e4fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e4fe:	25 ff 0f 00 00       	and    eax,0xfff
c000e503:	89 c6                	mov    esi,eax
c000e505:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	6a 01                	push   0x1
c000e510:	e8 dc b0 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e515:	83 c4 10             	add    esp,0x10
c000e518:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e51c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e522:	83 ec 0c             	sub    esp,0xc
c000e525:	6a 01                	push   0x1
c000e527:	6a 01                	push   0x1
c000e529:	50                   	push   eax
c000e52a:	52                   	push   edx
c000e52b:	53                   	push   ebx
c000e52c:	e8 bd ba ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e531:	83 c4 20             	add    esp,0x20
c000e534:	09 f0                	or     eax,esi
c000e536:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e53a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e53e:	c1 e0 03             	shl    eax,0x3
c000e541:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e546:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e54e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e552:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e55a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e562:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e566:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e56a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e56e:	89 c6                	mov    esi,eax
c000e570:	89 d7                	mov    edi,edx
c000e572:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e574:	89 c8                	mov    eax,ecx
c000e576:	89 fa                	mov    edx,edi
c000e578:	89 f3                	mov    ebx,esi
c000e57a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e57e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e582:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e58d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e591:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e595:	05 00 10 00 00       	add    eax,0x1000
c000e59a:	c1 e8 0c             	shr    eax,0xc
c000e59d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5ad:	25 ff 0f 00 00       	and    eax,0xfff
c000e5b2:	89 c6                	mov    esi,eax
c000e5b4:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5ba:	83 ec 0c             	sub    esp,0xc
c000e5bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5c1:	e8 2b b0 ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5d3:	83 ec 0c             	sub    esp,0xc
c000e5d6:	6a 01                	push   0x1
c000e5d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e5dc:	50                   	push   eax
c000e5dd:	52                   	push   edx
c000e5de:	53                   	push   ebx
c000e5df:	e8 0a ba ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e5e4:	83 c4 20             	add    esp,0x20
c000e5e7:	09 f0                	or     eax,esi
c000e5e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f1:	83 ec 0c             	sub    esp,0xc
c000e5f4:	50                   	push   eax
c000e5f5:	e8 13 b3 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c000e5fa:	83 c4 10             	add    esp,0x10
c000e5fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e601:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e605:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e60c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e611:	e9 be fe ff ff       	jmp    c000e4d4 <loadACPITables(unsigned char*)+0x11c>
c000e616:	66 90                	xchg   ax,ax
c000e618:	90                   	nop
c000e619:	8d 76 00             	lea    esi,[esi+0x0]
c000e61c:	83 c4 60             	add    esp,0x60
c000e61f:	5b                   	pop    ebx
c000e620:	5e                   	pop    esi
c000e621:	5f                   	pop    edi
c000e622:	c3                   	ret    
c000e623:	90                   	nop

c000e624 <findRSDT(unsigned char*)>:
c000e624:	57                   	push   edi
c000e625:	56                   	push   esi
c000e626:	53                   	push   ebx
c000e627:	83 ec 50             	sub    esp,0x50
c000e62a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e62f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e635:	83 e0 04             	and    eax,0x4
c000e638:	0f b6 c0             	movzx  eax,al
c000e63b:	85 c0                	test   eax,eax
c000e63d:	75 0d                	jne    c000e64c <findRSDT(unsigned char*)+0x28>
c000e63f:	b8 00 00 00 00       	mov    eax,0x0
c000e644:	e9 2b 01 00 00       	jmp    c000e774 <findRSDT(unsigned char*)+0x150>
c000e649:	8d 76 00             	lea    esi,[esi+0x0]
c000e64c:	89 e0                	mov    eax,esp
c000e64e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e652:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e656:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e65a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e662:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e666:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e66a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e66e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e672:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e676:	89 c6                	mov    esi,eax
c000e678:	89 d7                	mov    edi,edx
c000e67a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e67c:	89 c8                	mov    eax,ecx
c000e67e:	89 fa                	mov    edx,edi
c000e680:	89 f3                	mov    ebx,esi
c000e682:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e686:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e68a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e68e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e692:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e696:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e69e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6a6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6b6:	25 ff 0f 00 00       	and    eax,0xfff
c000e6bb:	89 c6                	mov    esi,eax
c000e6bd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6c3:	83 ec 0c             	sub    esp,0xc
c000e6c6:	6a 02                	push   0x2
c000e6c8:	e8 24 af ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e6d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6da:	83 ec 0c             	sub    esp,0xc
c000e6dd:	6a 01                	push   0x1
c000e6df:	6a 02                	push   0x2
c000e6e1:	50                   	push   eax
c000e6e2:	52                   	push   edx
c000e6e3:	53                   	push   ebx
c000e6e4:	e8 05 b9 ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e6e9:	83 c4 20             	add    esp,0x20
c000e6ec:	09 f0                	or     eax,esi
c000e6ee:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6f6:	25 ff 0f 00 00       	and    eax,0xfff
c000e6fb:	89 c6                	mov    esi,eax
c000e6fd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e703:	83 ec 0c             	sub    esp,0xc
c000e706:	6a 02                	push   0x2
c000e708:	e8 e4 ae ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e714:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e71a:	83 ec 0c             	sub    esp,0xc
c000e71d:	6a 01                	push   0x1
c000e71f:	6a 02                	push   0x2
c000e721:	50                   	push   eax
c000e722:	52                   	push   edx
c000e723:	53                   	push   ebx
c000e724:	e8 c5 b8 ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e729:	83 c4 20             	add    esp,0x20
c000e72c:	09 f0                	or     eax,esi
c000e72e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e732:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e737:	85 c0                	test   eax,eax
c000e739:	75 11                	jne    c000e74c <findRSDT(unsigned char*)+0x128>
c000e73b:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e742:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e746:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e74a:	eb 24                	jmp    c000e770 <findRSDT(unsigned char*)+0x14c>
c000e74c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e751:	83 f8 02             	cmp    eax,0x2
c000e754:	75 12                	jne    c000e768 <findRSDT(unsigned char*)+0x144>
c000e756:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e75d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e761:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e765:	eb 09                	jmp    c000e770 <findRSDT(unsigned char*)+0x14c>
c000e767:	90                   	nop
c000e768:	b8 00 00 00 00       	mov    eax,0x0
c000e76d:	eb 05                	jmp    c000e774 <findRSDT(unsigned char*)+0x150>
c000e76f:	90                   	nop
c000e770:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e774:	83 c4 50             	add    esp,0x50
c000e777:	5b                   	pop    ebx
c000e778:	5e                   	pop    esi
c000e779:	5f                   	pop    edi
c000e77a:	c3                   	ret    
c000e77b:	90                   	nop

c000e77c <findDataTable(unsigned char*, char*)>:
c000e77c:	83 ec 1c             	sub    esp,0x1c
c000e77f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e784:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e78a:	83 e0 04             	and    eax,0x4
c000e78d:	0f b6 c0             	movzx  eax,al
c000e790:	85 c0                	test   eax,eax
c000e792:	75 08                	jne    c000e79c <findDataTable(unsigned char*, char*)+0x20>
c000e794:	b8 00 00 00 00       	mov    eax,0x0
c000e799:	eb 5d                	jmp    c000e7f8 <findDataTable(unsigned char*, char*)+0x7c>
c000e79b:	90                   	nop
c000e79c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7a4:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7ad:	7d 41                	jge    c000e7f0 <findDataTable(unsigned char*, char*)+0x74>
c000e7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b3:	c1 e0 03             	shl    eax,0x3
c000e7b6:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7bb:	83 ec 04             	sub    esp,0x4
c000e7be:	6a 04                	push   0x4
c000e7c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7c4:	50                   	push   eax
c000e7c5:	e8 b6 1b ff ff       	call   c0000380 <memcmp>
c000e7ca:	83 c4 10             	add    esp,0x10
c000e7cd:	85 c0                	test   eax,eax
c000e7cf:	0f 94 c0             	sete   al
c000e7d2:	0f b6 c0             	movzx  eax,al
c000e7d5:	85 c0                	test   eax,eax
c000e7d7:	74 0f                	je     c000e7e8 <findDataTable(unsigned char*, char*)+0x6c>
c000e7d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7dd:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e7e4:	eb 12                	jmp    c000e7f8 <findDataTable(unsigned char*, char*)+0x7c>
c000e7e6:	66 90                	xchg   ax,ax
c000e7e8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e7ed:	eb b5                	jmp    c000e7a4 <findDataTable(unsigned char*, char*)+0x28>
c000e7ef:	90                   	nop
c000e7f0:	b8 00 00 00 00       	mov    eax,0x0
c000e7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7f8:	83 c4 1c             	add    esp,0x1c
c000e7fb:	c3                   	ret    

c000e7fc <scanMADT()>:
c000e7fc:	53                   	push   ebx
c000e7fd:	83 ec 38             	sub    esp,0x38
c000e800:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e805:	25 00 04 00 00       	and    eax,0x400
c000e80a:	74 14                	je     c000e820 <scanMADT()+0x24>
c000e80c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e811:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e817:	83 e2 fb             	and    edx,0xfffffffb
c000e81a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e820:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e825:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e82b:	83 e0 04             	and    eax,0x4
c000e82e:	0f b6 c0             	movzx  eax,al
c000e831:	85 c0                	test   eax,eax
c000e833:	0f 84 6b 04 00 00    	je     c000eca4 <scanMADT()+0x4a8>
c000e839:	e8 e2 fa ff ff       	call   c000e320 <findRSDP()>
c000e83e:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e843:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e848:	85 c0                	test   eax,eax
c000e84a:	75 1c                	jne    c000e868 <scanMADT()+0x6c>
c000e84c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e851:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e857:	83 e2 fb             	and    edx,0xfffffffb
c000e85a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e860:	e9 47 04 00 00       	jmp    c000ecac <scanMADT()+0x4b0>
c000e865:	8d 76 00             	lea    esi,[esi+0x0]
c000e868:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e86d:	83 ec 0c             	sub    esp,0xc
c000e870:	50                   	push   eax
c000e871:	e8 ae fd ff ff       	call   c000e624 <findRSDT(unsigned char*)>
c000e876:	83 c4 10             	add    esp,0x10
c000e879:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e87e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e883:	85 c0                	test   eax,eax
c000e885:	75 19                	jne    c000e8a0 <scanMADT()+0xa4>
c000e887:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e88c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e892:	83 e2 fb             	and    edx,0xfffffffb
c000e895:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e89b:	e9 0c 04 00 00       	jmp    c000ecac <scanMADT()+0x4b0>
c000e8a0:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8a5:	83 ec 0c             	sub    esp,0xc
c000e8a8:	50                   	push   eax
c000e8a9:	e8 0a fb ff ff       	call   c000e3b8 <loadACPITables(unsigned char*)>
c000e8ae:	83 c4 10             	add    esp,0x10
c000e8b1:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8b6:	83 ec 08             	sub    esp,0x8
c000e8b9:	68 6c 08 02 c0       	push   0xc002086c
c000e8be:	50                   	push   eax
c000e8bf:	e8 b8 fe ff ff       	call   c000e77c <findDataTable(unsigned char*, char*)>
c000e8c4:	83 c4 10             	add    esp,0x10
c000e8c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8cb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e8d0:	75 1a                	jne    c000e8ec <scanMADT()+0xf0>
c000e8d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8d7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8dd:	83 e2 fe             	and    edx,0xfffffffe
c000e8e0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e6:	e9 c1 03 00 00       	jmp    c000ecac <scanMADT()+0x4b0>
c000e8eb:	90                   	nop
c000e8ec:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e8f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e8f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e8fb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e8ff:	0f 87 a7 03 00 00    	ja     c000ecac <scanMADT()+0x4b0>
c000e905:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e90d:	0f 87 99 03 00 00    	ja     c000ecac <scanMADT()+0x4b0>
c000e913:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e917:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e91b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e91f:	8d 50 01             	lea    edx,[eax+0x1]
c000e922:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e926:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e92a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e92e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e932:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e936:	8d 50 01             	lea    edx,[eax+0x1]
c000e939:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e93d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e941:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e945:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e949:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e94e:	83 f8 02             	cmp    eax,0x2
c000e951:	0f 86 51 03 00 00    	jbe    c000eca8 <scanMADT()+0x4ac>
c000e957:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e95c:	85 c0                	test   eax,eax
c000e95e:	75 58                	jne    c000e9b8 <scanMADT()+0x1bc>
c000e960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e964:	8d 50 01             	lea    edx,[eax+0x1]
c000e967:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e96b:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e971:	0f b6 d2             	movzx  edx,dl
c000e974:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e978:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e97c:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e982:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e986:	8d 50 01             	lea    edx,[eax+0x1]
c000e989:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e98d:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e993:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e996:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e99c:	0f b6 d2             	movzx  edx,dl
c000e99f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9a3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9a7:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9ad:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9b2:	e9 d9 02 00 00       	jmp    c000ec90 <scanMADT()+0x494>
c000e9b7:	90                   	nop
c000e9b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9bd:	83 f8 01             	cmp    eax,0x1
c000e9c0:	0f 85 1a 01 00 00    	jne    c000eae0 <scanMADT()+0x2e4>
c000e9c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e9cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9d1:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000e9d7:	0f b6 d2             	movzx  edx,dl
c000e9da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9e2:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000e9e8:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000e9ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e9f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9f5:	01 d0                	add    eax,edx
c000e9f7:	83 c0 2c             	add    eax,0x2c
c000e9fa:	8a 00                	mov    al,BYTE PTR [eax]
c000e9fc:	0f b6 d0             	movzx  edx,al
c000e9ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea03:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea0a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea0e:	0f b6 c0             	movzx  eax,al
c000ea11:	c1 e0 08             	shl    eax,0x8
c000ea14:	89 d1                	mov    ecx,edx
c000ea16:	09 c1                	or     ecx,eax
c000ea18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea1c:	8d 50 02             	lea    edx,[eax+0x2]
c000ea1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea23:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea27:	0f b6 c0             	movzx  eax,al
c000ea2a:	c1 e0 10             	shl    eax,0x10
c000ea2d:	09 c1                	or     ecx,eax
c000ea2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea33:	8d 50 03             	lea    edx,[eax+0x3]
c000ea36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea3e:	0f b6 c0             	movzx  eax,al
c000ea41:	c1 e0 18             	shl    eax,0x18
c000ea44:	09 c1                	or     ecx,eax
c000ea46:	89 ca                	mov    edx,ecx
c000ea48:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea4d:	0f b6 c0             	movzx  eax,al
c000ea50:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea57:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea64:	01 d0                	add    eax,edx
c000ea66:	83 c0 2c             	add    eax,0x2c
c000ea69:	8a 00                	mov    al,BYTE PTR [eax]
c000ea6b:	0f b6 d0             	movzx  edx,al
c000ea6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea72:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea75:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea79:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea7d:	0f b6 c0             	movzx  eax,al
c000ea80:	c1 e0 08             	shl    eax,0x8
c000ea83:	89 d1                	mov    ecx,edx
c000ea85:	09 c1                	or     ecx,eax
c000ea87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea8b:	8d 50 02             	lea    edx,[eax+0x2]
c000ea8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea92:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea96:	0f b6 c0             	movzx  eax,al
c000ea99:	c1 e0 10             	shl    eax,0x10
c000ea9c:	09 c1                	or     ecx,eax
c000ea9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaa2:	8d 50 03             	lea    edx,[eax+0x3]
c000eaa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eaa9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eaad:	0f b6 c0             	movzx  eax,al
c000eab0:	c1 e0 18             	shl    eax,0x18
c000eab3:	09 c1                	or     ecx,eax
c000eab5:	89 ca                	mov    edx,ecx
c000eab7:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eabc:	0f b6 c0             	movzx  eax,al
c000eabf:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eac6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eacb:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ead0:	83 c0 01             	add    eax,0x1
c000ead3:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000ead8:	e9 b3 01 00 00       	jmp    c000ec90 <scanMADT()+0x494>
c000eadd:	8d 76 00             	lea    esi,[esi+0x0]
c000eae0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eae5:	83 f8 02             	cmp    eax,0x2
c000eae8:	0f 85 ea 00 00 00    	jne    c000ebd8 <scanMADT()+0x3dc>
c000eaee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaf2:	8d 50 01             	lea    edx,[eax+0x1]
c000eaf5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eaf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eafd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb01:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb09:	8d 50 01             	lea    edx,[eax+0x1]
c000eb0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb14:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb18:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb1c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb24:	01 d0                	add    eax,edx
c000eb26:	83 c0 2c             	add    eax,0x2c
c000eb29:	8a 00                	mov    al,BYTE PTR [eax]
c000eb2b:	0f b6 d0             	movzx  edx,al
c000eb2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb32:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb39:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb3d:	0f b6 c0             	movzx  eax,al
c000eb40:	c1 e0 08             	shl    eax,0x8
c000eb43:	89 d1                	mov    ecx,edx
c000eb45:	09 c1                	or     ecx,eax
c000eb47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb4b:	8d 50 02             	lea    edx,[eax+0x2]
c000eb4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb52:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb56:	0f b6 c0             	movzx  eax,al
c000eb59:	c1 e0 10             	shl    eax,0x10
c000eb5c:	09 c1                	or     ecx,eax
c000eb5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb62:	8d 50 03             	lea    edx,[eax+0x3]
c000eb65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb69:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb6d:	0f b6 c0             	movzx  eax,al
c000eb70:	c1 e0 18             	shl    eax,0x18
c000eb73:	09 c8                	or     eax,ecx
c000eb75:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb79:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb86:	01 d0                	add    eax,edx
c000eb88:	83 c0 2c             	add    eax,0x2c
c000eb8b:	8a 00                	mov    al,BYTE PTR [eax]
c000eb8d:	0f b6 c0             	movzx  eax,al
c000eb90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb94:	8d 4a 01             	lea    ecx,[edx+0x1]
c000eb97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb9b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000eb9f:	0f b6 d2             	movzx  edx,dl
c000eba2:	c1 e2 08             	shl    edx,0x8
c000eba5:	09 d0                	or     eax,edx
c000eba7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebac:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebb1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebba:	88 90 a0 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde160],dl
c000ebc0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ebc5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ebca:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ebd2:	e9 b9 00 00 00       	jmp    c000ec90 <scanMADT()+0x494>
c000ebd7:	90                   	nop
c000ebd8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ebdd:	83 f8 04             	cmp    eax,0x4
c000ebe0:	0f 85 9a 00 00 00    	jne    c000ec80 <scanMADT()+0x484>
c000ebe6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebea:	8d 50 01             	lea    edx,[eax+0x1]
c000ebed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ebf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebf5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ebf9:	0f b6 c0             	movzx  eax,al
c000ebfc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec08:	01 d0                	add    eax,edx
c000ec0a:	83 c0 2c             	add    eax,0x2c
c000ec0d:	8a 00                	mov    al,BYTE PTR [eax]
c000ec0f:	0f b6 d0             	movzx  edx,al
c000ec12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec16:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec1d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec21:	0f b6 c0             	movzx  eax,al
c000ec24:	c1 e0 08             	shl    eax,0x8
c000ec27:	09 d0                	or     eax,edx
c000ec29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec2d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec36:	8d 50 01             	lea    edx,[eax+0x1]
c000ec39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec41:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec45:	0f b6 c0             	movzx  eax,al
c000ec48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec50:	c1 e0 08             	shl    eax,0x8
c000ec53:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec57:	89 c1                	mov    ecx,eax
c000ec59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec5d:	c1 e0 18             	shl    eax,0x18
c000ec60:	89 c3                	mov    ebx,eax
c000ec62:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec67:	8d 50 01             	lea    edx,[eax+0x1]
c000ec6a:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ec70:	09 d9                	or     ecx,ebx
c000ec72:	89 ca                	mov    edx,ecx
c000ec74:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ec7b:	eb 13                	jmp    c000ec90 <scanMADT()+0x494>
c000ec7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec80:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ec85:	83 f8 05             	cmp    eax,0x5
c000ec88:	75 06                	jne    c000ec90 <scanMADT()+0x494>
c000ec8a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ec8f:	90                   	nop
c000ec90:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ec95:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec99:	01 d0                	add    eax,edx
c000ec9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec9f:	e9 50 fc ff ff       	jmp    c000e8f4 <scanMADT()+0xf8>
c000eca4:	90                   	nop
c000eca5:	eb 05                	jmp    c000ecac <scanMADT()+0x4b0>
c000eca7:	90                   	nop
c000eca8:	90                   	nop
c000eca9:	8d 76 00             	lea    esi,[esi+0x0]
c000ecac:	83 c4 38             	add    esp,0x38
c000ecaf:	5b                   	pop    ebx
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop
c000ecb2:	66 90                	xchg   ax,ax

c000ecb4 <ACPI::ACPI()>:
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecbb:	83 ec 08             	sub    esp,0x8
c000ecbe:	68 71 08 02 c0       	push   0xc0020871
c000ecc3:	50                   	push   eax
c000ecc4:	e8 55 d2 ff ff       	call   c000bf1e <Device::Device(char const*)>
c000ecc9:	83 c4 10             	add    esp,0x10
c000eccc:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c000ecd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecd5:	89 10                	mov    DWORD PTR [eax],edx
c000ecd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecdb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ece2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ece6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ecf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecf4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ecfe:	e8 f9 fa ff ff       	call   c000e7fc <scanMADT()>
c000ed03:	90                   	nop
c000ed04:	83 c4 0c             	add    esp,0xc
c000ed07:	c3                   	ret    

c000ed08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed08:	83 ec 2c             	sub    esp,0x2c
c000ed0b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed13:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed17:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed1b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed20:	88 d0                	mov    al,dl
c000ed22:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed26:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed2b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed33:	90                   	nop
c000ed34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed38:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed3e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed42:	0f 8d b0 00 00 00    	jge    c000edf8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed50:	83 c2 2a             	add    edx,0x2a
c000ed53:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed57:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ed5c:	0f b7 c0             	movzx  eax,ax
c000ed5f:	39 c2                	cmp    edx,eax
c000ed61:	0f 85 85 00 00 00    	jne    c000edec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed6f:	83 c2 2a             	add    edx,0x2a
c000ed72:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ed76:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ed7b:	0f b6 c0             	movzx  eax,al
c000ed7e:	39 c2                	cmp    edx,eax
c000ed80:	75 6a                	jne    c000edec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed82:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed87:	85 c0                	test   eax,eax
c000ed89:	74 3d                	je     c000edc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000ed8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed93:	83 c2 2a             	add    edx,0x2a
c000ed96:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ed9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eda1:	39 c2                	cmp    edx,eax
c000eda3:	74 13                	je     c000edb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000eda5:	83 ec 0c             	sub    esp,0xc
c000eda8:	68 ec 07 02 c0       	push   0xc00207ec
c000edad:	e8 8d 1a 00 00       	call   c001083f <KePanic(char const*)>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	8d 76 00             	lea    esi,[esi+0x0]
c000edb8:	83 ec 0c             	sub    esp,0xc
c000edbb:	68 76 08 02 c0       	push   0xc0020876
c000edc0:	e8 7a 1a 00 00       	call   c001083f <KePanic(char const*)>
c000edc5:	83 c4 10             	add    esp,0x10
c000edc8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edcc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edd4:	83 c2 2a             	add    edx,0x2a
c000edd7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000eddb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eddd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ede0:	89 01                	mov    DWORD PTR [ecx],eax
c000ede2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ede5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000edea:	66 90                	xchg   ax,ax
c000edec:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000edf1:	e9 3e ff ff ff       	jmp    c000ed34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000edf6:	66 90                	xchg   ax,ax
c000edf8:	90                   	nop
c000edf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edfd:	83 c4 2c             	add    esp,0x2c
c000ee00:	c2 04 00             	ret    0x4
c000ee03:	90                   	nop

c000ee04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee04:	83 ec 1c             	sub    esp,0x1c
c000ee07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee0b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee13:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee18:	88 c8                	mov    al,cl
c000ee1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee1e:	88 d0                	mov    al,dl
c000ee20:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee28:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee32:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee35:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee39:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee4b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee52:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee5b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee61:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee65:	83 c0 01             	add    eax,0x1
c000ee68:	88 c1                	mov    cl,al
c000ee6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee6e:	83 c2 2a             	add    edx,0x2a
c000ee71:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ee75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee79:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee83:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee8a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ee8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee92:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee98:	8d 50 01             	lea    edx,[eax+0x1]
c000ee9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee9f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eeaf:	3d 00 02 00 00       	cmp    eax,0x200
c000eeb4:	75 12                	jne    c000eec8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eeb6:	83 ec 0c             	sub    esp,0xc
c000eeb9:	68 85 08 02 c0       	push   0xc0020885
c000eebe:	e8 7c 19 00 00       	call   c001083f <KePanic(char const*)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	66 90                	xchg   ax,ax
c000eec8:	90                   	nop
c000eec9:	83 c4 1c             	add    esp,0x1c
c000eecc:	c3                   	ret    
c000eecd:	90                   	nop
c000eece:	66 90                	xchg   ax,ax

c000eed0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eed0:	b8 00 00 00 00       	mov    eax,0x0
c000eed5:	c3                   	ret    
c000eed6:	66 90                	xchg   ax,ax

c000eed8 <ACPI::detectPCI()>:
c000eed8:	53                   	push   ebx
c000eed9:	83 ec 28             	sub    esp,0x28
c000eedc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eee1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eee6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000eeeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eef1:	83 e0 04             	and    eax,0x4
c000eef4:	0f b6 c0             	movzx  eax,al
c000eef7:	85 c0                	test   eax,eax
c000eef9:	74 2d                	je     c000ef28 <ACPI::detectPCI()+0x50>
c000eefb:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	68 a2 08 02 c0       	push   0xc00208a2
c000ef08:	50                   	push   eax
c000ef09:	e8 6e f8 ff ff       	call   c000e77c <findDataTable(unsigned char*, char*)>
c000ef0e:	83 c4 10             	add    esp,0x10
c000ef11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef15:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef1a:	74 0c                	je     c000ef28 <ACPI::detectPCI()+0x50>
c000ef1c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef21:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef26:	66 90                	xchg   ax,ax
c000ef28:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef34:	8a 00                	mov    al,BYTE PTR [eax]
c000ef36:	0f b6 c0             	movzx  eax,al
c000ef39:	83 f8 01             	cmp    eax,0x1
c000ef3c:	75 0e                	jne    c000ef4c <ACPI::detectPCI()+0x74>
c000ef3e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef43:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef48:	eb 2e                	jmp    c000ef78 <ACPI::detectPCI()+0xa0>
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef50:	8a 00                	mov    al,BYTE PTR [eax]
c000ef52:	0f b6 c0             	movzx  eax,al
c000ef55:	83 f8 02             	cmp    eax,0x2
c000ef58:	75 1e                	jne    c000ef78 <ACPI::detectPCI()+0xa0>
c000ef5a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef5f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef64:	85 c0                	test   eax,eax
c000ef66:	74 10                	je     c000ef78 <ACPI::detectPCI()+0xa0>
c000ef68:	83 ec 0c             	sub    esp,0xc
c000ef6b:	68 1c 08 02 c0       	push   0xc002081c
c000ef70:	e8 ca 18 00 00       	call   c001083f <KePanic(char const*)>
c000ef75:	83 c4 10             	add    esp,0x10
c000ef78:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ef7c:	83 f0 01             	xor    eax,0x1
c000ef7f:	0f b6 c0             	movzx  eax,al
c000ef82:	85 c0                	test   eax,eax
c000ef84:	74 46                	je     c000efcc <ACPI::detectPCI()+0xf4>
c000ef86:	e8 a5 11 ff ff       	call   c0000130 <manualPCIProbe>
c000ef8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ef8f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ef94:	75 0e                	jne    c000efa4 <ACPI::detectPCI()+0xcc>
c000ef96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef9b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efa0:	eb 2a                	jmp    c000efcc <ACPI::detectPCI()+0xf4>
c000efa2:	66 90                	xchg   ax,ax
c000efa4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efa9:	75 21                	jne    c000efcc <ACPI::detectPCI()+0xf4>
c000efab:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efb0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efb5:	85 c0                	test   eax,eax
c000efb7:	74 13                	je     c000efcc <ACPI::detectPCI()+0xf4>
c000efb9:	83 ec 0c             	sub    esp,0xc
c000efbc:	68 1c 08 02 c0       	push   0xc002081c
c000efc1:	e8 79 18 00 00       	call   c001083f <KePanic(char const*)>
c000efc6:	83 c4 10             	add    esp,0x10
c000efc9:	8d 76 00             	lea    esi,[esi+0x0]
c000efcc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000efd1:	85 c0                	test   eax,eax
c000efd3:	0f 84 87 00 00 00    	je     c000f060 <ACPI::detectPCI()+0x188>
c000efd9:	83 ec 0c             	sub    esp,0xc
c000efdc:	68 a7 08 02 c0       	push   0xc00208a7
c000efe1:	e8 dc 11 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eff1:	83 ec 0c             	sub    esp,0xc
c000eff4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eff8:	e8 8f 8a ff ff       	call   c0007a8c <malloc>
c000effd:	83 c4 10             	add    esp,0x10
c000f000:	89 c3                	mov    ebx,eax
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	53                   	push   ebx
c000f006:	e8 fd af 00 00       	call   c001a008 <PCI::PCI()>
c000f00b:	83 c4 10             	add    esp,0x10
c000f00e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f012:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f016:	83 ec 08             	sub    esp,0x8
c000f019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f01d:	50                   	push   eax
c000f01e:	e8 63 cd ff ff       	call   c000bd86 <Device::addChild(Device*)>
c000f023:	83 c4 10             	add    esp,0x10
c000f026:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f02a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f02c:	83 c0 08             	add    eax,0x8
c000f02f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f031:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f036:	85 d2                	test   edx,edx
c000f038:	74 0a                	je     c000f044 <ACPI::detectPCI()+0x16c>
c000f03a:	ba 01 00 00 00       	mov    edx,0x1
c000f03f:	eb 0b                	jmp    c000f04c <ACPI::detectPCI()+0x174>
c000f041:	8d 76 00             	lea    esi,[esi+0x0]
c000f044:	ba 02 00 00 00       	mov    edx,0x2
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	6a 00                	push   0x0
c000f04e:	6a 00                	push   0x0
c000f050:	52                   	push   edx
c000f051:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f055:	ff d0                	call   eax
c000f057:	83 c4 10             	add    esp,0x10
c000f05a:	e9 91 00 00 00       	jmp    c000f0f0 <ACPI::detectPCI()+0x218>
c000f05f:	90                   	nop
c000f060:	83 ec 0c             	sub    esp,0xc
c000f063:	68 bf 08 02 c0       	push   0xc00208bf
c000f068:	e8 55 11 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000f06d:	83 c4 10             	add    esp,0x10
c000f070:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f077:	83 ec 0c             	sub    esp,0xc
c000f07a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f07e:	e8 09 8a ff ff       	call   c0007a8c <malloc>
c000f083:	83 c4 10             	add    esp,0x10
c000f086:	89 c3                	mov    ebx,eax
c000f088:	83 ec 0c             	sub    esp,0xc
c000f08b:	53                   	push   ebx
c000f08c:	e8 11 bb 00 00       	call   c001aba2 <IDE::IDE()>
c000f091:	83 c4 10             	add    esp,0x10
c000f094:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f09c:	83 ec 08             	sub    esp,0x8
c000f09f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0a3:	50                   	push   eax
c000f0a4:	e8 dd cc ff ff       	call   c000bd86 <Device::addChild(Device*)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0be:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0cb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f0d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0da:	83 c0 08             	add    eax,0x8
c000f0dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0df:	6a 00                	push   0x0
c000f0e1:	6a 00                	push   0x0
c000f0e3:	6a 00                	push   0x0
c000f0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0e9:	ff d0                	call   eax
c000f0eb:	83 c4 10             	add    esp,0x10
c000f0ee:	66 90                	xchg   ax,ax
c000f0f0:	90                   	nop
c000f0f1:	83 c4 28             	add    esp,0x28
c000f0f4:	5b                   	pop    ebx
c000f0f5:	c3                   	ret    
c000f0f6:	66 90                	xchg   ax,ax

c000f0f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f0f8:	83 ec 1c             	sub    esp,0x1c
c000f0fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0ff:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f102:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f106:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f10b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f110:	83 ec 08             	sub    esp,0x8
c000f113:	52                   	push   edx
c000f114:	50                   	push   eax
c000f115:	e8 4c 80 ff ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c000f11a:	83 c4 10             	add    esp,0x10
c000f11d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f121:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f126:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f12b:	83 ec 04             	sub    esp,0x4
c000f12e:	6a 01                	push   0x1
c000f130:	52                   	push   edx
c000f131:	50                   	push   eax
c000f132:	e8 35 81 ff ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c000f137:	83 c4 10             	add    esp,0x10
c000f13a:	90                   	nop
c000f13b:	83 c4 1c             	add    esp,0x1c
c000f13e:	c3                   	ret    
c000f13f:	90                   	nop

c000f140 <ACPI::sleep()>:
c000f140:	83 ec 0c             	sub    esp,0xc
c000f143:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f148:	85 c0                	test   eax,eax
c000f14a:	74 08                	je     c000f154 <ACPI::sleep()+0x14>
c000f14c:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f151:	ff d0                	call   eax
c000f153:	90                   	nop
c000f154:	90                   	nop
c000f155:	83 c4 0c             	add    esp,0xc
c000f158:	c3                   	ret    
c000f159:	90                   	nop
c000f15a:	66 90                	xchg   ax,ax

c000f15c <ACPI::open(int, int, void*)>:
c000f15c:	57                   	push   edi
c000f15d:	56                   	push   esi
c000f15e:	53                   	push   ebx
c000f15f:	81 ec 70 01 00 00    	sub    esp,0x170
c000f165:	83 ec 0c             	sub    esp,0xc
c000f168:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f16f:	e8 64 fd ff ff       	call   c000eed8 <ACPI::detectPCI()>
c000f174:	83 c4 10             	add    esp,0x10
c000f177:	83 ec 0c             	sub    esp,0xc
c000f17a:	68 44 08 02 c0       	push   0xc0020844
c000f17f:	e8 3e 10 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000f184:	83 c4 10             	add    esp,0x10
c000f187:	83 ec 0c             	sub    esp,0xc
c000f18a:	68 d4 08 02 c0       	push   0xc00208d4
c000f18f:	e8 d0 49 00 00       	call   c0013b64 <Thr::loadKernelSymbolTable(char const*)>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f19f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1aa:	83 ec 0c             	sub    esp,0xc
c000f1ad:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1b4:	e8 d3 88 ff ff       	call   c0007a8c <malloc>
c000f1b9:	83 c4 10             	add    esp,0x10
c000f1bc:	89 c3                	mov    ebx,eax
c000f1be:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1c3:	83 ec 04             	sub    esp,0x4
c000f1c6:	50                   	push   eax
c000f1c7:	68 f2 08 02 c0       	push   0xc00208f2
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 04 bd ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c000f1d2:	83 c4 10             	add    esp,0x10
c000f1d5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f1dc:	83 ec 08             	sub    esp,0x8
c000f1df:	6a 01                	push   0x1
c000f1e1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f1e8:	e8 a5 bd ff ff       	call   c000af92 <File::open(FileOpenMode)>
c000f1ed:	83 c4 10             	add    esp,0x10
c000f1f0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f1f7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f1ff:	75 17                	jne    c000f218 <ACPI::open(int, int, void*)+0xbc>
c000f201:	83 ec 0c             	sub    esp,0xc
c000f204:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f20b:	e8 e0 bd ff ff       	call   c000aff0 <File::close()>
c000f210:	83 c4 10             	add    esp,0x10
c000f213:	eb 0b                	jmp    c000f220 <ACPI::open(int, int, void*)+0xc4>
c000f215:	8d 76 00             	lea    esi,[esi+0x0]
c000f218:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f220:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f228:	74 1e                	je     c000f248 <ACPI::open(int, int, void*)+0xec>
c000f22a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f231:	8b 00                	mov    eax,DWORD PTR [eax]
c000f233:	83 c0 08             	add    eax,0x8
c000f236:	8b 00                	mov    eax,DWORD PTR [eax]
c000f238:	83 ec 0c             	sub    esp,0xc
c000f23b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f242:	ff d0                	call   eax
c000f244:	83 c4 10             	add    esp,0x10
c000f247:	90                   	nop
c000f248:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f24f:	83 f0 01             	xor    eax,0x1
c000f252:	0f b6 c0             	movzx  eax,al
c000f255:	85 c0                	test   eax,eax
c000f257:	74 43                	je     c000f29c <ACPI::open(int, int, void*)+0x140>
c000f259:	83 ec 0c             	sub    esp,0xc
c000f25c:	68 10 09 02 c0       	push   0xc0020910
c000f261:	e8 5c 0f 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000f266:	83 c4 10             	add    esp,0x10
c000f269:	83 ec 04             	sub    esp,0x4
c000f26c:	6a 0c                	push   0xc
c000f26e:	68 2b 09 02 c0       	push   0xc002092b
c000f273:	68 3c 09 02 c0       	push   0xc002093c
c000f278:	e8 9c 3c 00 00       	call   c0012f19 <Reg::readIntWithDefault(char*, char*, int)>
c000f27d:	83 c4 10             	add    esp,0x10
c000f280:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f287:	83 ec 0c             	sub    esp,0xc
c000f28a:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f291:	e8 8a a5 ff ff       	call   c0009820 <Virt::setupPageSwapping(int)>
c000f296:	83 c4 10             	add    esp,0x10
c000f299:	8d 76 00             	lea    esi,[esi+0x0]
c000f29c:	83 ec 0c             	sub    esp,0xc
c000f29f:	68 b5 f9 01 c0       	push   0xc001f9b5
c000f2a4:	e8 19 0f 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000f2a9:	83 c4 10             	add    esp,0x10
c000f2ac:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2b3:	83 ec 08             	sub    esp,0x8
c000f2b6:	6a 13                	push   0x13
c000f2b8:	50                   	push   eax
c000f2b9:	e8 e0 cd ff ff       	call   c000c09e <getDevicesOfType(DeviceType)>
c000f2be:	83 c4 0c             	add    esp,0xc
c000f2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2c4:	83 ec 0c             	sub    esp,0xc
c000f2c7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2ce:	50                   	push   eax
c000f2cf:	e8 dc fa 00 00       	call   c001edb0 <LinkedList<Device>::isEmpty()>
c000f2d4:	83 c4 10             	add    esp,0x10
c000f2d7:	83 f0 01             	xor    eax,0x1
c000f2da:	0f b6 c0             	movzx  eax,al
c000f2dd:	85 c0                	test   eax,eax
c000f2df:	0f 84 47 01 00 00    	je     c000f42c <ACPI::open(int, int, void*)+0x2d0>
c000f2e5:	83 ec 0c             	sub    esp,0xc
c000f2e8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2ef:	50                   	push   eax
c000f2f0:	e8 d7 fa 00 00       	call   c001edcc <LinkedList<Device>::getFirstElement()>
c000f2f5:	83 c4 10             	add    esp,0x10
c000f2f8:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f2ff:	83 ec 0c             	sub    esp,0xc
c000f302:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f309:	50                   	push   eax
c000f30a:	e8 c5 fa 00 00       	call   c001edd4 <LinkedList<Device>::removeFirst()>
c000f30f:	83 c4 10             	add    esp,0x10
c000f312:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f319:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f320:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f32b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f331:	ba 09 00 00 00       	mov    edx,0x9
c000f336:	fc                   	cld    
c000f337:	89 c7                	mov    edi,eax
c000f339:	89 de                	mov    esi,ebx
c000f33b:	89 d1                	mov    ecx,edx
c000f33d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f33f:	83 ec 08             	sub    esp,0x8
c000f342:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f346:	50                   	push   eax
c000f347:	83 ec 24             	sub    esp,0x24
c000f34a:	89 e0                	mov    eax,esp
c000f34c:	89 c3                	mov    ebx,eax
c000f34e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f352:	ba 09 00 00 00       	mov    edx,0x9
c000f357:	89 df                	mov    edi,ebx
c000f359:	89 c6                	mov    esi,eax
c000f35b:	89 d1                	mov    ecx,edx
c000f35d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f35f:	e8 8e b1 00 00       	call   c001a4f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f364:	83 c4 30             	add    esp,0x30
c000f367:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f36e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f376:	0f 84 48 ff ff ff    	je     c000f2c4 <ACPI::open(int, int, void*)+0x168>
c000f37c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f387:	83 ec 0c             	sub    esp,0xc
c000f38a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f391:	e8 f6 86 ff ff       	call   c0007a8c <malloc>
c000f396:	83 c4 10             	add    esp,0x10
c000f399:	89 c3                	mov    ebx,eax
c000f39b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3a0:	83 ec 04             	sub    esp,0x4
c000f3a3:	50                   	push   eax
c000f3a4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3ab:	53                   	push   ebx
c000f3ac:	e8 25 bb ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3bb:	83 ec 0c             	sub    esp,0xc
c000f3be:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3c5:	e8 36 be ff ff       	call   c000b200 <File::exists()>
c000f3ca:	83 c4 10             	add    esp,0x10
c000f3cd:	0f b6 c0             	movzx  eax,al
c000f3d0:	85 c0                	test   eax,eax
c000f3d2:	74 28                	je     c000f3fc <ACPI::open(int, int, void*)+0x2a0>
c000f3d4:	83 ec 08             	sub    esp,0x8
c000f3d7:	6a 01                	push   0x1
c000f3d9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3e0:	e8 fa 51 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	83 ec 08             	sub    esp,0x8
c000f3eb:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f3f2:	50                   	push   eax
c000f3f3:	e8 21 54 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000f3f8:	83 c4 10             	add    esp,0x10
c000f3fb:	90                   	nop
c000f3fc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f404:	0f 84 ba fe ff ff    	je     c000f2c4 <ACPI::open(int, int, void*)+0x168>
c000f40a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f411:	8b 00                	mov    eax,DWORD PTR [eax]
c000f413:	83 c0 08             	add    eax,0x8
c000f416:	8b 00                	mov    eax,DWORD PTR [eax]
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f422:	ff d0                	call   eax
c000f424:	83 c4 10             	add    esp,0x10
c000f427:	e9 98 fe ff ff       	jmp    c000f2c4 <ACPI::open(int, int, void*)+0x168>
c000f42c:	83 ec 0c             	sub    esp,0xc
c000f42f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f436:	50                   	push   eax
c000f437:	e8 70 f9 00 00       	call   c001edac <LinkedList<Device>::~LinkedList()>
c000f43c:	83 c4 10             	add    esp,0x10
c000f43f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f445:	83 ec 08             	sub    esp,0x8
c000f448:	6a 01                	push   0x1
c000f44a:	68 43 09 02 c0       	push   0xc0020943
c000f44f:	e8 8b 51 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	83 ec 08             	sub    esp,0x8
c000f45a:	53                   	push   ebx
c000f45b:	50                   	push   eax
c000f45c:	e8 b8 53 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f469:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f46f:	83 e0 04             	and    eax,0x4
c000f472:	0f b6 c0             	movzx  eax,al
c000f475:	85 c0                	test   eax,eax
c000f477:	0f 84 1b 01 00 00    	je     c000f598 <ACPI::open(int, int, void*)+0x43c>
c000f47d:	83 ec 0c             	sub    esp,0xc
c000f480:	68 60 09 02 c0       	push   0xc0020960
c000f485:	e8 38 0d 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c000f48a:	83 c4 10             	add    esp,0x10
c000f48d:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4a2:	e8 e5 85 ff ff       	call   c0007a8c <malloc>
c000f4a7:	83 c4 10             	add    esp,0x10
c000f4aa:	89 c3                	mov    ebx,eax
c000f4ac:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4b1:	83 ec 04             	sub    esp,0x4
c000f4b4:	50                   	push   eax
c000f4b5:	68 7d 09 02 c0       	push   0xc002097d
c000f4ba:	53                   	push   ebx
c000f4bb:	e8 16 ba ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c000f4c0:	83 c4 10             	add    esp,0x10
c000f4c3:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4ca:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4d2:	74 20                	je     c000f4f4 <ACPI::open(int, int, void*)+0x398>
c000f4d4:	83 ec 0c             	sub    esp,0xc
c000f4d7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4de:	e8 1d bd ff ff       	call   c000b200 <File::exists()>
c000f4e3:	83 c4 10             	add    esp,0x10
c000f4e6:	0f b6 c0             	movzx  eax,al
c000f4e9:	85 c0                	test   eax,eax
c000f4eb:	74 07                	je     c000f4f4 <ACPI::open(int, int, void*)+0x398>
c000f4ed:	b0 01                	mov    al,0x1
c000f4ef:	eb 07                	jmp    c000f4f8 <ACPI::open(int, int, void*)+0x39c>
c000f4f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4f4:	b0 00                	mov    al,0x0
c000f4f6:	66 90                	xchg   ax,ax
c000f4f8:	0f b6 c0             	movzx  eax,al
c000f4fb:	85 c0                	test   eax,eax
c000f4fd:	74 25                	je     c000f524 <ACPI::open(int, int, void*)+0x3c8>
c000f4ff:	83 ec 08             	sub    esp,0x8
c000f502:	6a 01                	push   0x1
c000f504:	68 7d 09 02 c0       	push   0xc002097d
c000f509:	e8 d1 50 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	83 ec 08             	sub    esp,0x8
c000f514:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f51b:	50                   	push   eax
c000f51c:	e8 f8 52 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c000f521:	83 c4 10             	add    esp,0x10
c000f524:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f52c:	74 2a                	je     c000f558 <ACPI::open(int, int, void*)+0x3fc>
c000f52e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f536:	74 20                	je     c000f558 <ACPI::open(int, int, void*)+0x3fc>
c000f538:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f53f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f541:	83 c0 08             	add    eax,0x8
c000f544:	8b 00                	mov    eax,DWORD PTR [eax]
c000f546:	83 ec 0c             	sub    esp,0xc
c000f549:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f550:	ff d0                	call   eax
c000f552:	83 c4 10             	add    esp,0x10
c000f555:	8d 76 00             	lea    esi,[esi+0x0]
c000f558:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f55d:	83 ec 08             	sub    esp,0x8
c000f560:	68 9a 09 02 c0       	push   0xc002099a
c000f565:	50                   	push   eax
c000f566:	e8 11 f2 ff ff       	call   c000e77c <findDataTable(unsigned char*, char*)>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f575:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f57d:	74 19                	je     c000f598 <ACPI::open(int, int, void*)+0x43c>
c000f57f:	83 ec 08             	sub    esp,0x8
c000f582:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f589:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f590:	e8 63 fb ff ff       	call   c000f0f8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f595:	83 c4 10             	add    esp,0x10
c000f598:	b8 00 00 00 00       	mov    eax,0x0
c000f59d:	81 c4 70 01 00 00    	add    esp,0x170
c000f5a3:	5b                   	pop    ebx
c000f5a4:	5e                   	pop    esi
c000f5a5:	5f                   	pop    edi
c000f5a6:	c3                   	ret    
c000f5a7:	90                   	nop

c000f5a8 <CPU::close(int, int, void*)>:
c000f5a8:	31 c0                	xor    eax,eax
c000f5aa:	c3                   	ret    
c000f5ab:	90                   	nop

c000f5ac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5ac:	60                   	pusha  
c000f5ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5b9:	9c                   	pushf  
c000f5ba:	fa                   	cli    
c000f5bb:	0f 09                	wbinvd 
c000f5bd:	0f 30                	wrmsr  
c000f5bf:	9d                   	popf   
c000f5c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5c4:	89 02                	mov    DWORD PTR [edx],eax
c000f5c6:	61                   	popa   
c000f5c7:	c3                   	ret    

c000f5c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5c8:	60                   	pusha  
c000f5c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5cd:	9c                   	pushf  
c000f5ce:	fa                   	cli    
c000f5cf:	0f 09                	wbinvd 
c000f5d1:	31 c0                	xor    eax,eax
c000f5d3:	31 d2                	xor    edx,edx
c000f5d5:	0f 32                	rdmsr  
c000f5d7:	9d                   	popf   
c000f5d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5dc:	89 02                	mov    DWORD PTR [edx],eax
c000f5de:	61                   	popa   
c000f5df:	c3                   	ret    

c000f5e0 <CPU::AMD_K6_writeback(int, int, int)>:
c000f5e0:	56                   	push   esi
c000f5e1:	53                   	push   ebx
c000f5e2:	83 ec 10             	sub    esp,0x10
c000f5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5e9:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f5ee:	75 5d                	jne    c000f64d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f5f0:	83 f8 08             	cmp    eax,0x8
c000f5f3:	75 09                	jne    c000f5fe <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f5f5:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f5fa:	7e 13                	jle    c000f60f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f5fc:	eb 30                	jmp    c000f62e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f5fe:	83 f8 06             	cmp    eax,0x6
c000f601:	7c 4a                	jl     c000f64d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f603:	83 f8 07             	cmp    eax,0x7
c000f606:	7e 07                	jle    c000f60f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f608:	83 f8 09             	cmp    eax,0x9
c000f60b:	74 21                	je     c000f62e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f60d:	eb 3e                	jmp    c000f64d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f60f:	89 e6                	mov    esi,esp
c000f611:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f617:	c1 eb 15             	shr    ebx,0x15
c000f61a:	56                   	push   esi
c000f61b:	68 82 00 00 c0       	push   0xc0000082
c000f620:	e8 a3 ff ff ff       	call   c000f5c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f625:	56                   	push   esi
c000f626:	83 e3 7e             	and    ebx,0x7e
c000f629:	6a 00                	push   0x0
c000f62b:	53                   	push   ebx
c000f62c:	eb 12                	jmp    c000f640 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f62e:	89 e3                	mov    ebx,esp
c000f630:	53                   	push   ebx
c000f631:	68 82 00 00 c0       	push   0xc0000082
c000f636:	e8 8d ff ff ff       	call   c000f5c8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f63b:	53                   	push   ebx
c000f63c:	6a 00                	push   0x0
c000f63e:	6a 00                	push   0x0
c000f640:	68 82 00 00 c0       	push   0xc0000082
c000f645:	e8 62 ff ff ff       	call   c000f5ac <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f64a:	83 c4 18             	add    esp,0x18
c000f64d:	83 c4 10             	add    esp,0x10
c000f650:	5b                   	pop    ebx
c000f651:	5e                   	pop    esi
c000f652:	c3                   	ret    
c000f653:	90                   	nop

c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f654:	55                   	push   ebp
c000f655:	57                   	push   edi
c000f656:	56                   	push   esi
c000f657:	53                   	push   ebx
c000f658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f65c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f660:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f664:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f668:	39 05 b0 1e 02 c0    	cmp    DWORD PTR ds:0xc0021eb0,eax
c000f66e:	75 23                	jne    c000f693 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f670:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f675:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f679:	89 06                	mov    DWORD PTR [esi],eax
c000f67b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f680:	89 07                	mov    DWORD PTR [edi],eax
c000f682:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f687:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f68a:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f68f:	89 02                	mov    DWORD PTR [edx],eax
c000f691:	eb 3f                	jmp    c000f6d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f693:	31 c9                	xor    ecx,ecx
c000f695:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f699:	0f a2                	cpuid  
c000f69b:	89 06                	mov    DWORD PTR [esi],eax
c000f69d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6a1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6a3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6a6:	89 10                	mov    DWORD PTR [eax],edx
c000f6a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6ac:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c000f6b1:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6b3:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6b8:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6ba:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6c2:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6cd:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6d2:	5b                   	pop    ebx
c000f6d3:	5e                   	pop    esi
c000f6d4:	5f                   	pop    edi
c000f6d5:	5d                   	pop    ebp
c000f6d6:	c3                   	ret    
c000f6d7:	90                   	nop

c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6d8:	83 ec 10             	sub    esp,0x10
c000f6db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6df:	50                   	push   eax
c000f6e0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e4:	50                   	push   eax
c000f6e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6e9:	50                   	push   eax
c000f6ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ee:	50                   	push   eax
c000f6ef:	6a 01                	push   0x1
c000f6f1:	e8 5e ff ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6fa:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f6fe:	0f 95 c0             	setne  al
c000f701:	83 c4 24             	add    esp,0x24
c000f704:	c3                   	ret    
c000f705:	90                   	nop

c000f706 <CPU::cpuidCheckECX(unsigned int)>:
c000f706:	83 ec 10             	sub    esp,0x10
c000f709:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70d:	50                   	push   eax
c000f70e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f712:	50                   	push   eax
c000f713:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f717:	50                   	push   eax
c000f718:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f71c:	50                   	push   eax
c000f71d:	6a 01                	push   0x1
c000f71f:	e8 30 ff ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f724:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f728:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f72c:	0f 95 c0             	setne  al
c000f72f:	83 c4 24             	add    esp,0x24
c000f732:	c3                   	ret    
c000f733:	90                   	nop

c000f734 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f734:	83 ec 10             	sub    esp,0x10
c000f737:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73b:	50                   	push   eax
c000f73c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f740:	50                   	push   eax
c000f741:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f745:	50                   	push   eax
c000f746:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f74a:	50                   	push   eax
c000f74b:	6a 07                	push   0x7
c000f74d:	e8 02 ff ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f756:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f75a:	0f 95 c0             	setne  al
c000f75d:	83 c4 24             	add    esp,0x24
c000f760:	c3                   	ret    
c000f761:	90                   	nop

c000f762 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f762:	83 ec 10             	sub    esp,0x10
c000f765:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f769:	50                   	push   eax
c000f76a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76e:	50                   	push   eax
c000f76f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f773:	50                   	push   eax
c000f774:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f778:	50                   	push   eax
c000f779:	6a 07                	push   0x7
c000f77b:	e8 d4 fe ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f780:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f784:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f788:	0f 95 c0             	setne  al
c000f78b:	83 c4 24             	add    esp,0x24
c000f78e:	c3                   	ret    
c000f78f:	90                   	nop

c000f790 <CPU::CPU()>:
c000f790:	83 ec 0c             	sub    esp,0xc
c000f793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f797:	83 ec 08             	sub    esp,0x8
c000f79a:	68 bd 0a 02 c0       	push   0xc0020abd
c000f79f:	50                   	push   eax
c000f7a0:	e8 79 c7 ff ff       	call   c000bf1e <Device::Device(char const*)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c000f7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b1:	89 10                	mov    DWORD PTR [eax],edx
c000f7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7c5:	05 78 01 00 00       	add    eax,0x178
c000f7ca:	83 ec 0c             	sub    esp,0xc
c000f7cd:	50                   	push   eax
c000f7ce:	e8 63 7b ff ff       	call   c0007336 <GDT::GDT()>
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7da:	05 7c 09 00 00       	add    eax,0x97c
c000f7df:	83 ec 0c             	sub    esp,0xc
c000f7e2:	50                   	push   eax
c000f7e3:	e8 9c 7d ff ff       	call   c0007584 <IDT::IDT()>
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7ef:	05 7c 11 00 00       	add    eax,0x117c
c000f7f4:	83 ec 0c             	sub    esp,0xc
c000f7f7:	50                   	push   eax
c000f7f8:	e8 2b 97 ff ff       	call   c0008f28 <TSS::TSS()>
c000f7fd:	83 c4 10             	add    esp,0x10
c000f800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f804:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f80f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f819:	90                   	nop
c000f81a:	83 c4 0c             	add    esp,0xc
c000f81d:	c3                   	ret    

c000f81e <CPU::displayFeatures()>:
c000f81e:	c3                   	ret    
c000f81f:	90                   	nop

c000f820 <CPU::detectFeatures()>:
c000f820:	55                   	push   ebp
c000f821:	57                   	push   edi
c000f822:	56                   	push   esi
c000f823:	53                   	push   ebx
c000f824:	83 ec 30             	sub    esp,0x30
c000f827:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f82b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f835:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f83c:	6a 0d                	push   0xd
c000f83e:	6a 00                	push   0x0
c000f840:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f846:	55                   	push   ebp
c000f847:	e8 94 0c ff ff       	call   c00004e0 <memset>
c000f84c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f85b:	0f 84 db 05 00 00    	je     c000fe3c <CPU::detectFeatures()+0x61c>
c000f861:	83 ec 0c             	sub    esp,0xc
c000f864:	89 ef                	mov    edi,ebp
c000f866:	6a 10                	push   0x10
c000f868:	e8 6b fe ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f86d:	83 e0 01             	and    eax,0x1
c000f870:	8d 14 00             	lea    edx,[eax+eax*1]
c000f873:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f879:	83 e0 fd             	and    eax,0xfffffffd
c000f87c:	09 d0                	or     eax,edx
c000f87e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f884:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f88b:	e8 48 fe ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f890:	83 e0 01             	and    eax,0x1
c000f893:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f89a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8a0:	83 e0 fb             	and    eax,0xfffffffb
c000f8a3:	09 d0                	or     eax,edx
c000f8a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8ab:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8b2:	e8 21 fe ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f8b7:	83 e0 01             	and    eax,0x1
c000f8ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8c1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c7:	83 e0 f7             	and    eax,0xfffffff7
c000f8ca:	09 d0                	or     eax,edx
c000f8cc:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8d2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8d9:	e8 fa fd ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f8de:	83 e0 01             	and    eax,0x1
c000f8e1:	c1 e0 04             	shl    eax,0x4
c000f8e4:	89 c2                	mov    edx,eax
c000f8e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8ec:	83 e0 ef             	and    eax,0xffffffef
c000f8ef:	09 d0                	or     eax,edx
c000f8f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8f7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f8fe:	e8 d5 fd ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f903:	83 e0 01             	and    eax,0x1
c000f906:	c1 e0 05             	shl    eax,0x5
c000f909:	89 c2                	mov    edx,eax
c000f90b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f911:	83 e0 df             	and    eax,0xffffffdf
c000f914:	09 d0                	or     eax,edx
c000f916:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f91c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f923:	e8 b0 fd ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f928:	83 e0 01             	and    eax,0x1
c000f92b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f92e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f934:	83 e0 fd             	and    eax,0xfffffffd
c000f937:	09 d0                	or     eax,edx
c000f939:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f93f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f946:	e8 8d fd ff ff       	call   c000f6d8 <CPU::cpuidCheckEDX(unsigned int)>
c000f94b:	83 e0 01             	and    eax,0x1
c000f94e:	c1 e0 06             	shl    eax,0x6
c000f951:	89 c2                	mov    edx,eax
c000f953:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f959:	83 e0 bf             	and    eax,0xffffffbf
c000f95c:	09 d0                	or     eax,edx
c000f95e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f964:	58                   	pop    eax
c000f965:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f969:	50                   	push   eax
c000f96a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f96e:	50                   	push   eax
c000f96f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f973:	56                   	push   esi
c000f974:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f978:	50                   	push   eax
c000f979:	6a 00                	push   0x0
c000f97b:	e8 d4 fc ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f980:	b8 04 00 00 00       	mov    eax,0x4
c000f985:	89 c1                	mov    ecx,eax
c000f987:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f989:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f98f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f993:	89 c1                	mov    ecx,eax
c000f995:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f997:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f99d:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9a1:	89 c1                	mov    ecx,eax
c000f9a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9a5:	83 c4 18             	add    esp,0x18
c000f9a8:	68 cc 09 02 c0       	push   0xc00209cc
c000f9ad:	55                   	push   ebp
c000f9ae:	e8 8d 0d ff ff       	call   c0000740 <strcmp>
c000f9b3:	83 c4 10             	add    esp,0x10
c000f9b6:	85 c0                	test   eax,eax
c000f9b8:	75 0f                	jne    c000f9c9 <CPU::detectFeatures()+0x1a9>
c000f9ba:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9c4:	e9 22 02 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000f9c9:	50                   	push   eax
c000f9ca:	50                   	push   eax
c000f9cb:	68 d9 09 02 c0       	push   0xc00209d9
c000f9d0:	55                   	push   ebp
c000f9d1:	e8 6a 0d ff ff       	call   c0000740 <strcmp>
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	85 c0                	test   eax,eax
c000f9db:	74 dd                	je     c000f9ba <CPU::detectFeatures()+0x19a>
c000f9dd:	50                   	push   eax
c000f9de:	50                   	push   eax
c000f9df:	68 e6 09 02 c0       	push   0xc00209e6
c000f9e4:	55                   	push   ebp
c000f9e5:	e8 56 0d ff ff       	call   c0000740 <strcmp>
c000f9ea:	83 c4 10             	add    esp,0x10
c000f9ed:	85 c0                	test   eax,eax
c000f9ef:	74 2a                	je     c000fa1b <CPU::detectFeatures()+0x1fb>
c000f9f1:	50                   	push   eax
c000f9f2:	50                   	push   eax
c000f9f3:	68 f3 09 02 c0       	push   0xc00209f3
c000f9f8:	55                   	push   ebp
c000f9f9:	e8 42 0d ff ff       	call   c0000740 <strcmp>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	85 c0                	test   eax,eax
c000fa03:	74 16                	je     c000fa1b <CPU::detectFeatures()+0x1fb>
c000fa05:	50                   	push   eax
c000fa06:	50                   	push   eax
c000fa07:	68 00 0a 02 c0       	push   0xc0020a00
c000fa0c:	55                   	push   ebp
c000fa0d:	e8 2e 0d ff ff       	call   c0000740 <strcmp>
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	85 c0                	test   eax,eax
c000fa17:	74 48                	je     c000fa61 <CPU::detectFeatures()+0x241>
c000fa19:	eb 0f                	jmp    c000fa2a <CPU::detectFeatures()+0x20a>
c000fa1b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa25:	e9 c1 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fa2a:	50                   	push   eax
c000fa2b:	50                   	push   eax
c000fa2c:	68 0d 0a 02 c0       	push   0xc0020a0d
c000fa31:	55                   	push   ebp
c000fa32:	e8 09 0d ff ff       	call   c0000740 <strcmp>
c000fa37:	83 c4 10             	add    esp,0x10
c000fa3a:	85 c0                	test   eax,eax
c000fa3c:	74 23                	je     c000fa61 <CPU::detectFeatures()+0x241>
c000fa3e:	57                   	push   edi
c000fa3f:	57                   	push   edi
c000fa40:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fa45:	55                   	push   ebp
c000fa46:	e8 f5 0c ff ff       	call   c0000740 <strcmp>
c000fa4b:	83 c4 10             	add    esp,0x10
c000fa4e:	85 c0                	test   eax,eax
c000fa50:	75 1e                	jne    c000fa70 <CPU::detectFeatures()+0x250>
c000fa52:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa5c:	e9 8a 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fa61:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa6b:	e9 7b 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fa70:	56                   	push   esi
c000fa71:	56                   	push   esi
c000fa72:	68 27 0a 02 c0       	push   0xc0020a27
c000fa77:	55                   	push   ebp
c000fa78:	e8 c3 0c ff ff       	call   c0000740 <strcmp>
c000fa7d:	83 c4 10             	add    esp,0x10
c000fa80:	85 c0                	test   eax,eax
c000fa82:	75 0f                	jne    c000fa93 <CPU::detectFeatures()+0x273>
c000fa84:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa8e:	e9 58 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fa93:	51                   	push   ecx
c000fa94:	51                   	push   ecx
c000fa95:	68 e6 09 02 c0       	push   0xc00209e6
c000fa9a:	55                   	push   ebp
c000fa9b:	e8 a0 0c ff ff       	call   c0000740 <strcmp>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	85 c0                	test   eax,eax
c000faa5:	75 0f                	jne    c000fab6 <CPU::detectFeatures()+0x296>
c000faa7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fab1:	e9 35 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fab6:	52                   	push   edx
c000fab7:	52                   	push   edx
c000fab8:	68 34 0a 02 c0       	push   0xc0020a34
c000fabd:	55                   	push   ebp
c000fabe:	e8 7d 0c ff ff       	call   c0000740 <strcmp>
c000fac3:	83 c4 10             	add    esp,0x10
c000fac6:	85 c0                	test   eax,eax
c000fac8:	75 0f                	jne    c000fad9 <CPU::detectFeatures()+0x2b9>
c000faca:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fad4:	e9 12 01 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fad9:	50                   	push   eax
c000fada:	50                   	push   eax
c000fadb:	68 41 0a 02 c0       	push   0xc0020a41
c000fae0:	55                   	push   ebp
c000fae1:	e8 5a 0c ff ff       	call   c0000740 <strcmp>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	85 c0                	test   eax,eax
c000faeb:	75 0f                	jne    c000fafc <CPU::detectFeatures()+0x2dc>
c000faed:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000faf7:	e9 ef 00 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fafc:	50                   	push   eax
c000fafd:	50                   	push   eax
c000fafe:	68 4e 0a 02 c0       	push   0xc0020a4e
c000fb03:	55                   	push   ebp
c000fb04:	e8 37 0c ff ff       	call   c0000740 <strcmp>
c000fb09:	83 c4 10             	add    esp,0x10
c000fb0c:	85 c0                	test   eax,eax
c000fb0e:	75 0f                	jne    c000fb1f <CPU::detectFeatures()+0x2ff>
c000fb10:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb1a:	e9 cc 00 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fb1f:	50                   	push   eax
c000fb20:	50                   	push   eax
c000fb21:	68 5b 0a 02 c0       	push   0xc0020a5b
c000fb26:	55                   	push   ebp
c000fb27:	e8 14 0c ff ff       	call   c0000740 <strcmp>
c000fb2c:	83 c4 10             	add    esp,0x10
c000fb2f:	85 c0                	test   eax,eax
c000fb31:	75 0f                	jne    c000fb42 <CPU::detectFeatures()+0x322>
c000fb33:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb3d:	e9 a9 00 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fb42:	50                   	push   eax
c000fb43:	50                   	push   eax
c000fb44:	68 68 0a 02 c0       	push   0xc0020a68
c000fb49:	55                   	push   ebp
c000fb4a:	e8 f1 0b ff ff       	call   c0000740 <strcmp>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	85 c0                	test   eax,eax
c000fb54:	75 0f                	jne    c000fb65 <CPU::detectFeatures()+0x345>
c000fb56:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb60:	e9 86 00 00 00       	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fb65:	50                   	push   eax
c000fb66:	50                   	push   eax
c000fb67:	68 75 0a 02 c0       	push   0xc0020a75
c000fb6c:	55                   	push   ebp
c000fb6d:	e8 ce 0b ff ff       	call   c0000740 <strcmp>
c000fb72:	83 c4 10             	add    esp,0x10
c000fb75:	85 c0                	test   eax,eax
c000fb77:	75 0c                	jne    c000fb85 <CPU::detectFeatures()+0x365>
c000fb79:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb83:	eb 66                	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fb85:	50                   	push   eax
c000fb86:	50                   	push   eax
c000fb87:	68 82 0a 02 c0       	push   0xc0020a82
c000fb8c:	55                   	push   ebp
c000fb8d:	e8 ae 0b ff ff       	call   c0000740 <strcmp>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	85 c0                	test   eax,eax
c000fb97:	75 0c                	jne    c000fba5 <CPU::detectFeatures()+0x385>
c000fb99:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fba3:	eb 46                	jmp    c000fbeb <CPU::detectFeatures()+0x3cb>
c000fba5:	57                   	push   edi
c000fba6:	57                   	push   edi
c000fba7:	68 8f 0a 02 c0       	push   0xc0020a8f
c000fbac:	55                   	push   ebp
c000fbad:	e8 8e 0b ff ff       	call   c0000740 <strcmp>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	74 e0                	je     c000fb99 <CPU::detectFeatures()+0x379>
c000fbb9:	56                   	push   esi
c000fbba:	56                   	push   esi
c000fbbb:	68 9c 0a 02 c0       	push   0xc0020a9c
c000fbc0:	55                   	push   ebp
c000fbc1:	e8 7a 0b ff ff       	call   c0000740 <strcmp>
c000fbc6:	83 c4 10             	add    esp,0x10
c000fbc9:	85 c0                	test   eax,eax
c000fbcb:	74 cc                	je     c000fb99 <CPU::detectFeatures()+0x379>
c000fbcd:	51                   	push   ecx
c000fbce:	51                   	push   ecx
c000fbcf:	68 a9 0a 02 c0       	push   0xc0020aa9
c000fbd4:	55                   	push   ebp
c000fbd5:	e8 66 0b ff ff       	call   c0000740 <strcmp>
c000fbda:	83 c4 10             	add    esp,0x10
c000fbdd:	85 c0                	test   eax,eax
c000fbdf:	74 b8                	je     c000fb99 <CPU::detectFeatures()+0x379>
c000fbe1:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbeb:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbf0:	0f 86 be 00 00 00    	jbe    c000fcb4 <CPU::detectFeatures()+0x494>
c000fbf6:	83 ec 0c             	sub    esp,0xc
c000fbf9:	68 80 00 00 00       	push   0x80
c000fbfe:	e8 31 fb ff ff       	call   c000f734 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc03:	83 e0 01             	and    eax,0x1
c000fc06:	c1 e0 06             	shl    eax,0x6
c000fc09:	89 c2                	mov    edx,eax
c000fc0b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc11:	83 e0 bf             	and    eax,0xffffffbf
c000fc14:	09 d0                	or     eax,edx
c000fc16:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc1c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc23:	e8 0c fb ff ff       	call   c000f734 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc28:	83 e0 01             	and    eax,0x1
c000fc2b:	c1 e0 04             	shl    eax,0x4
c000fc2e:	89 c2                	mov    edx,eax
c000fc30:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc36:	83 e0 ef             	and    eax,0xffffffef
c000fc39:	09 d0                	or     eax,edx
c000fc3b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc41:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc48:	e8 e7 fa ff ff       	call   c000f734 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc4d:	89 c2                	mov    edx,eax
c000fc4f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc55:	c1 e2 07             	shl    edx,0x7
c000fc58:	83 e0 7f             	and    eax,0x7f
c000fc5b:	09 d0                	or     eax,edx
c000fc5d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc63:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc6a:	e8 f3 fa ff ff       	call   c000f762 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc6f:	83 e0 01             	and    eax,0x1
c000fc72:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc79:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc7f:	83 e0 f7             	and    eax,0xfffffff7
c000fc82:	09 d0                	or     eax,edx
c000fc84:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc8a:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc91:	e8 cc fa ff ff       	call   c000f762 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc96:	83 c4 10             	add    esp,0x10
c000fc99:	83 e0 01             	and    eax,0x1
c000fc9c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fca3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fca9:	83 e0 fb             	and    eax,0xfffffffb
c000fcac:	09 d0                	or     eax,edx
c000fcae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcbb:	50                   	push   eax
c000fcbc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcc0:	50                   	push   eax
c000fcc1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fcc5:	57                   	push   edi
c000fcc6:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcca:	56                   	push   esi
c000fccb:	6a 01                	push   0x1
c000fccd:	e8 82 f9 ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcdc:	89 c1                	mov    ecx,eax
c000fcde:	83 e2 f0             	and    edx,0xfffffff0
c000fce1:	83 e1 0f             	and    ecx,0xf
c000fce4:	09 ca                	or     edx,ecx
c000fce6:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fcec:	89 c2                	mov    edx,eax
c000fcee:	c1 ea 04             	shr    edx,0x4
c000fcf1:	83 e2 0f             	and    edx,0xf
c000fcf4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fcf8:	89 d1                	mov    ecx,edx
c000fcfa:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd00:	83 c4 20             	add    esp,0x20
c000fd03:	c1 e1 06             	shl    ecx,0x6
c000fd06:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd0c:	09 ca                	or     edx,ecx
c000fd0e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd15:	89 c2                	mov    edx,eax
c000fd17:	c1 ea 08             	shr    edx,0x8
c000fd1a:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd20:	83 e2 0f             	and    edx,0xf
c000fd23:	83 e1 3f             	and    ecx,0x3f
c000fd26:	89 d5                	mov    ebp,edx
c000fd28:	83 e5 03             	and    ebp,0x3
c000fd2b:	c1 e5 06             	shl    ebp,0x6
c000fd2e:	09 e9                	or     ecx,ebp
c000fd30:	89 d5                	mov    ebp,edx
c000fd32:	c1 ed 02             	shr    ebp,0x2
c000fd35:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd3b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd41:	83 e1 c0             	and    ecx,0xffffffc0
c000fd44:	09 e9                	or     ecx,ebp
c000fd46:	89 c5                	mov    ebp,eax
c000fd48:	c1 ed 08             	shr    ebp,0x8
c000fd4b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd51:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd57:	83 e5 30             	and    ebp,0x30
c000fd5a:	83 e1 cf             	and    ecx,0xffffffcf
c000fd5d:	09 e9                	or     ecx,ebp
c000fd5f:	83 fa 06             	cmp    edx,0x6
c000fd62:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd68:	74 05                	je     c000fd6f <CPU::detectFeatures()+0x54f>
c000fd6a:	83 fa 0f             	cmp    edx,0xf
c000fd6d:	75 64                	jne    c000fdd3 <CPU::detectFeatures()+0x5b3>
c000fd6f:	89 c1                	mov    ecx,eax
c000fd71:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd77:	c1 e9 10             	shr    ecx,0x10
c000fd7a:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd80:	c1 e1 04             	shl    ecx,0x4
c000fd83:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fd87:	0f b6 c9             	movzx  ecx,cl
c000fd8a:	c1 e1 06             	shl    ecx,0x6
c000fd8d:	09 e9                	or     ecx,ebp
c000fd8f:	83 fa 0f             	cmp    edx,0xf
c000fd92:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fd99:	75 38                	jne    c000fdd3 <CPU::detectFeatures()+0x5b3>
c000fd9b:	c1 e8 14             	shr    eax,0x14
c000fd9e:	83 c0 0f             	add    eax,0xf
c000fda1:	0f b6 c0             	movzx  eax,al
c000fda4:	89 c2                	mov    edx,eax
c000fda6:	c1 e8 02             	shr    eax,0x2
c000fda9:	83 e2 03             	and    edx,0x3
c000fdac:	89 d1                	mov    ecx,edx
c000fdae:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdb4:	c1 e1 06             	shl    ecx,0x6
c000fdb7:	83 e2 3f             	and    edx,0x3f
c000fdba:	09 ca                	or     edx,ecx
c000fdbc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdc2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdc8:	83 e2 c0             	and    edx,0xffffffc0
c000fdcb:	09 d0                	or     eax,edx
c000fdcd:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdd3:	83 ec 0c             	sub    esp,0xc
c000fdd6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fddc:	83 c8 07             	or     eax,0x7
c000fddf:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fde5:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fde9:	50                   	push   eax
c000fdea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fdee:	55                   	push   ebp
c000fdef:	57                   	push   edi
c000fdf0:	56                   	push   esi
c000fdf1:	68 00 00 00 80       	push   0x80000000
c000fdf6:	e8 59 f8 ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdfb:	83 c4 20             	add    esp,0x20
c000fdfe:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe0a:	76 1e                	jbe    c000fe2a <CPU::detectFeatures()+0x60a>
c000fe0c:	83 ec 0c             	sub    esp,0xc
c000fe0f:	50                   	push   eax
c000fe10:	55                   	push   ebp
c000fe11:	57                   	push   edi
c000fe12:	56                   	push   esi
c000fe13:	68 01 00 00 80       	push   0x80000001
c000fe18:	e8 37 f8 ff ff       	call   c000f654 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe1d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe27:	83 c4 20             	add    esp,0x20
c000fe2a:	52                   	push   edx
c000fe2b:	52                   	push   edx
c000fe2c:	68 b5 0a 02 c0       	push   0xc0020ab5
c000fe31:	53                   	push   ebx
c000fe32:	e8 d9 c0 ff ff       	call   c000bf10 <Device::setName(char const*)>
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	eb 69                	jmp    c000fea5 <CPU::detectFeatures()+0x685>
c000fe3c:	50                   	push   eax
c000fe3d:	50                   	push   eax
c000fe3e:	68 1a 0a 02 c0       	push   0xc0020a1a
c000fe43:	55                   	push   ebp
c000fe44:	e8 e7 07 ff ff       	call   c0000630 <strcpy>
c000fe49:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe53:	e8 6b 03 ff ff       	call   c00001c3 <is486>
c000fe58:	83 c4 10             	add    esp,0x10
c000fe5b:	85 c0                	test   eax,eax
c000fe5d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe63:	74 1f                	je     c000fe84 <CPU::detectFeatures()+0x664>
c000fe65:	83 c8 07             	or     eax,0x7
c000fe68:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe6e:	0f 20 c0             	mov    eax,cr0
c000fe71:	83 e0 14             	and    eax,0x14
c000fe74:	83 f8 04             	cmp    eax,0x4
c000fe77:	75 10                	jne    c000fe89 <CPU::detectFeatures()+0x669>
c000fe79:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe7f:	83 e0 fd             	and    eax,0xfffffffd
c000fe82:	eb 1b                	jmp    c000fe9f <CPU::detectFeatures()+0x67f>
c000fe84:	83 e0 f8             	and    eax,0xfffffff8
c000fe87:	eb df                	jmp    c000fe68 <CPU::detectFeatures()+0x648>
c000fe89:	e8 10 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe8e:	83 e0 01             	and    eax,0x1
c000fe91:	8d 14 00             	lea    edx,[eax+eax*1]
c000fe94:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe9a:	83 e0 fd             	and    eax,0xfffffffd
c000fe9d:	09 d0                	or     eax,edx
c000fe9f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fea5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000feac:	74 17                	je     c000fec5 <CPU::detectFeatures()+0x6a5>
c000feae:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000feb4:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000feba:	83 c8 10             	or     eax,0x10
c000febd:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fec3:	eb 20                	jmp    c000fee5 <CPU::detectFeatures()+0x6c5>
c000fec5:	e8 d4 02 ff ff       	call   c000019e <hasLegacyFPU>
c000feca:	83 e0 01             	and    eax,0x1
c000fecd:	8d 14 00             	lea    edx,[eax+eax*1]
c000fed0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fed6:	83 e0 fd             	and    eax,0xfffffffd
c000fed9:	09 d0                	or     eax,edx
c000fedb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fee1:	a8 02                	test   al,0x2
c000fee3:	75 c9                	jne    c000feae <CPU::detectFeatures()+0x68e>
c000fee5:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000feec:	83 c4 2c             	add    esp,0x2c
c000feef:	5b                   	pop    ebx
c000fef0:	5e                   	pop    esi
c000fef1:	5f                   	pop    edi
c000fef2:	5d                   	pop    ebp
c000fef3:	c3                   	ret    

c000fef4 <CPU::setupSMEP()>:
c000fef4:	0f 20 e0             	mov    eax,cr4
c000fef7:	0d 00 00 10 00       	or     eax,0x100000
c000fefc:	0f 22 e0             	mov    cr4,eax
c000feff:	c3                   	ret    

c000ff00 <CPU::setupUMIP()>:
c000ff00:	0f 20 e0             	mov    eax,cr4
c000ff03:	80 cc 08             	or     ah,0x8
c000ff06:	0f 22 e0             	mov    cr4,eax
c000ff09:	c3                   	ret    

c000ff0a <CPU::setupTSC()>:
c000ff0a:	0f 20 e0             	mov    eax,cr4
c000ff0d:	83 c8 04             	or     eax,0x4
c000ff10:	0f 22 e0             	mov    cr4,eax
c000ff13:	c3                   	ret    

c000ff14 <CPU::setupLargePages()>:
c000ff14:	0f 20 e0             	mov    eax,cr4
c000ff17:	83 c8 10             	or     eax,0x10
c000ff1a:	0f 22 e0             	mov    cr4,eax
c000ff1d:	c3                   	ret    

c000ff1e <CPU::setupPAT()>:
c000ff1e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff23:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff2a:	74 2c                	je     c000ff58 <CPU::setupPAT()+0x3a>
c000ff2c:	53                   	push   ebx
c000ff2d:	83 ec 10             	sub    esp,0x10
c000ff30:	68 77 02 00 00       	push   0x277
c000ff35:	50                   	push   eax
c000ff36:	e8 73 71 ff ff       	call   c00070ae <Computer::rdmsr(unsigned int)>
c000ff3b:	83 e2 f8             	and    edx,0xfffffff8
c000ff3e:	83 ca 01             	or     edx,0x1
c000ff41:	52                   	push   edx
c000ff42:	50                   	push   eax
c000ff43:	68 77 02 00 00       	push   0x277
c000ff48:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff4e:	e8 87 71 ff ff       	call   c00070da <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff53:	83 c4 28             	add    esp,0x28
c000ff56:	5b                   	pop    ebx
c000ff57:	c3                   	ret    
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <CPU::setupMTRR()>:
c000ff5a:	c3                   	ret    
c000ff5b:	90                   	nop

c000ff5c <CPU::setupGlobalPages()>:
c000ff5c:	0f 20 e0             	mov    eax,cr4
c000ff5f:	0c 80                	or     al,0x80
c000ff61:	0f 22 e0             	mov    cr4,eax
c000ff64:	c3                   	ret    
c000ff65:	90                   	nop

c000ff66 <CPU::allowUsermodeDataAccess()>:
c000ff66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff71:	74 03                	je     c000ff76 <CPU::allowUsermodeDataAccess()+0x10>
c000ff73:	0f 01 cb             	stac   
c000ff76:	c3                   	ret    
c000ff77:	90                   	nop

c000ff78 <CPU::prohibitUsermodeDataAccess()>:
c000ff78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff7c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff83:	74 03                	je     c000ff88 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff85:	0f 01 ca             	clac   
c000ff88:	c3                   	ret    
c000ff89:	90                   	nop

c000ff8a <CPU::setupSMAP()>:
c000ff8a:	0f 20 e0             	mov    eax,cr4
c000ff8d:	0d 00 00 20 00       	or     eax,0x200000
c000ff92:	0f 22 e0             	mov    cr4,eax
c000ff95:	eb e1                	jmp    c000ff78 <CPU::prohibitUsermodeDataAccess()>
c000ff97:	90                   	nop

c000ff98 <CPU::setupFeatures()>:
c000ff98:	53                   	push   ebx
c000ff99:	83 ec 08             	sub    esp,0x8
c000ff9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffa0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffa7:	74 18                	je     c000ffc1 <CPU::setupFeatures()+0x29>
c000ffa9:	83 ec 0c             	sub    esp,0xc
c000ffac:	68 c1 0a 02 c0       	push   0xc0020ac1
c000ffb1:	e8 9d a9 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000ffb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffb9:	e8 42 ff ff ff       	call   c000ff00 <CPU::setupUMIP()>
c000ffbe:	83 c4 10             	add    esp,0x10
c000ffc1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffc8:	74 18                	je     c000ffe2 <CPU::setupFeatures()+0x4a>
c000ffca:	83 ec 0c             	sub    esp,0xc
c000ffcd:	68 cb 0a 02 c0       	push   0xc0020acb
c000ffd2:	e8 7c a9 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000ffd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffda:	e8 2b ff ff ff       	call   c000ff0a <CPU::setupTSC()>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffe9:	74 18                	je     c0010003 <CPU::setupFeatures()+0x6b>
c000ffeb:	83 ec 0c             	sub    esp,0xc
c000ffee:	68 d4 0a 02 c0       	push   0xc0020ad4
c000fff3:	e8 5b a9 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c000fff8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fffb:	e8 14 ff ff ff       	call   c000ff14 <CPU::setupLargePages()>
c0010000:	83 c4 10             	add    esp,0x10
c0010003:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001000a:	74 18                	je     c0010024 <CPU::setupFeatures()+0x8c>
c001000c:	83 ec 0c             	sub    esp,0xc
c001000f:	68 dd 0a 02 c0       	push   0xc0020add
c0010014:	e8 3a a9 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0010019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001001c:	e8 3b ff ff ff       	call   c000ff5c <CPU::setupGlobalPages()>
c0010021:	83 c4 10             	add    esp,0x10
c0010024:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001002b:	74 18                	je     c0010045 <CPU::setupFeatures()+0xad>
c001002d:	83 ec 0c             	sub    esp,0xc
c0010030:	68 ef 0a 02 c0       	push   0xc0020aef
c0010035:	e8 19 a9 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001003a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001003d:	e8 dc fe ff ff       	call   c000ff1e <CPU::setupPAT()>
c0010042:	83 c4 10             	add    esp,0x10
c0010045:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001004c:	74 11                	je     c001005f <CPU::setupFeatures()+0xc7>
c001004e:	c7 44 24 10 f8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020af8
c0010056:	83 c4 08             	add    esp,0x8
c0010059:	5b                   	pop    ebx
c001005a:	e9 f4 a8 ff ff       	jmp    c000a953 <Dbg::kprintf(char const*, ...)>
c001005f:	83 c4 08             	add    esp,0x8
c0010062:	5b                   	pop    ebx
c0010063:	c3                   	ret    

c0010064 <CPU::open(int, int, void*)>:
c0010064:	57                   	push   edi
c0010065:	56                   	push   esi
c0010066:	53                   	push   ebx
c0010067:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001006b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001006f:	83 ec 0c             	sub    esp,0xc
c0010072:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010078:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001007e:	50                   	push   eax
c001007f:	e8 14 73 ff ff       	call   c0007398 <GDT::setup()>
c0010084:	83 c4 0c             	add    esp,0xc
c0010087:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001008d:	6a 00                	push   0x0
c001008f:	68 ef be ad de       	push   0xdeadbeef
c0010094:	57                   	push   edi
c0010095:	e8 d2 8e ff ff       	call   c0008f6c <TSS::setup(unsigned long, unsigned long)>
c001009a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001009d:	e8 aa 8e ff ff       	call   c0008f4c <TSS::flush()>
c00100a2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00100ab:	e8 4a 75 ff ff       	call   c00075fa <IDT::setup()>
c00100b0:	b8 00 04 00 00       	mov    eax,0x400
c00100b5:	0f 23 f8             	mov    db7,eax
c00100b8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100c2:	e8 ca 7c ff ff       	call   c0007d91 <Phys::allocatePage()>
c00100c7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100cd:	89 30                	mov    DWORD PTR [eax],esi
c00100cf:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100d5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100d8:	58                   	pop    eax
c00100d9:	5a                   	pop    edx
c00100da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100e0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100e4:	e8 e7 9e ff ff       	call   c0009fd0 <VAS::setCPUSpecific(unsigned long)>
c00100e9:	c7 04 24 02 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b02
c00100f0:	e8 cd 00 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c00100f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f8:	e8 23 f7 ff ff       	call   c000f820 <CPU::detectFeatures()>
c00100fd:	c7 04 24 25 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b25
c0010104:	e8 b9 00 00 00       	call   c00101c2 <KeSetBootMessage(char const*)>
c0010109:	e8 70 6f 00 00       	call   c001707e <HalInitialise()>
c001010e:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010113:	83 e0 10             	and    eax,0x10
c0010116:	83 f8 01             	cmp    eax,0x1
c0010119:	19 c0                	sbb    eax,eax
c001011b:	83 e0 46             	and    eax,0x46
c001011e:	83 c0 1e             	add    eax,0x1e
c0010121:	89 04 24             	mov    DWORD PTR [esp],eax
c0010124:	e8 94 d6 ff ff       	call   c000d7bd <setupTimer(int)>
c0010129:	83 c4 10             	add    esp,0x10
c001012c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010132:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010139:	74 0c                	je     c0010147 <CPU::open(int, int, void*)+0xe3>
c001013b:	83 ec 0c             	sub    esp,0xc
c001013e:	53                   	push   ebx
c001013f:	e8 54 fe ff ff       	call   c000ff98 <CPU::setupFeatures()>
c0010144:	83 c4 10             	add    esp,0x10
c0010147:	5b                   	pop    ebx
c0010148:	31 c0                	xor    eax,eax
c001014a:	5e                   	pop    esi
c001014b:	5f                   	pop    edi
c001014c:	c3                   	ret    

c001014d <KeDisplaySplashScreen()>:
c001014d:	55                   	push   ebp
c001014e:	bd 05 00 00 00       	mov    ebp,0x5
c0010153:	57                   	push   edi
c0010154:	bf c0 1e 02 c0       	mov    edi,0xc0021ec0
c0010159:	56                   	push   esi
c001015a:	be 0a 00 00 00       	mov    esi,0xa
c001015f:	53                   	push   ebx
c0010160:	31 db                	xor    ebx,ebx
c0010162:	83 ec 0c             	sub    esp,0xc
c0010165:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010168:	89 d0                	mov    eax,edx
c001016a:	85 d2                	test   edx,edx
c001016c:	74 4c                	je     c00101ba <KeDisplaySplashScreen()+0x6d>
c001016e:	80 bb f6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde10a],0xdb
c0010175:	75 13                	jne    c001018a <KeDisplaySplashScreen()+0x3d>
c0010177:	0f b6 8b f5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde10b]
c001017e:	83 e1 fe             	and    ecx,0xfffffffe
c0010181:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010187:	75 01                	jne    c001018a <KeDisplaySplashScreen()+0x3d>
c0010189:	46                   	inc    esi
c001018a:	83 fa 0d             	cmp    edx,0xd
c001018d:	74 28                	je     c00101b7 <KeDisplaySplashScreen()+0x6a>
c001018f:	83 fa 0a             	cmp    edx,0xa
c0010192:	75 0a                	jne    c001019e <KeDisplaySplashScreen()+0x51>
c0010194:	45                   	inc    ebp
c0010195:	be 0a 00 00 00       	mov    esi,0xa
c001019a:	31 db                	xor    ebx,ebx
c001019c:	eb 19                	jmp    c00101b7 <KeDisplaySplashScreen()+0x6a>
c001019e:	83 ec 0c             	sub    esp,0xc
c00101a1:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101a4:	0f be c0             	movsx  eax,al
c00101a7:	55                   	push   ebp
c00101a8:	43                   	inc    ebx
c00101a9:	52                   	push   edx
c00101aa:	6a 00                	push   0x0
c00101ac:	6a 0e                	push   0xe
c00101ae:	50                   	push   eax
c00101af:	e8 3c 7b 00 00       	call   c0017cf0 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101b4:	83 c4 20             	add    esp,0x20
c00101b7:	47                   	inc    edi
c00101b8:	eb ab                	jmp    c0010165 <KeDisplaySplashScreen()+0x18>
c00101ba:	83 c4 0c             	add    esp,0xc
c00101bd:	5b                   	pop    ebx
c00101be:	5e                   	pop    esi
c00101bf:	5f                   	pop    edi
c00101c0:	5d                   	pop    ebp
c00101c1:	c3                   	ret    

c00101c2 <KeSetBootMessage(char const*)>:
c00101c2:	57                   	push   edi
c00101c3:	56                   	push   esi
c00101c4:	53                   	push   ebx
c00101c5:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101cb:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101d2:	68 9e 00 00 00       	push   0x9e
c00101d7:	6a 00                	push   0x0
c00101d9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101dd:	56                   	push   esi
c00101de:	e8 fd 02 ff ff       	call   c00004e0 <memset>
c00101e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101e6:	e8 75 03 ff ff       	call   c0000560 <strlen>
c00101eb:	ba 50 00 00 00       	mov    edx,0x50
c00101f0:	83 c4 10             	add    esp,0x10
c00101f3:	29 c2                	sub    edx,eax
c00101f5:	31 c9                	xor    ecx,ecx
c00101f7:	83 e2 fe             	and    edx,0xfffffffe
c00101fa:	01 f2                	add    edx,esi
c00101fc:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010201:	84 c0                	test   al,al
c0010203:	74 0a                	je     c001020f <KeSetBootMessage(char const*)+0x4d>
c0010205:	80 cc 0f             	or     ah,0xf
c0010208:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001020c:	41                   	inc    ecx
c001020d:	eb ed                	jmp    c00101fc <KeSetBootMessage(char const*)+0x3a>
c001020f:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010214:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001021b:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010221:	5b                   	pop    ebx
c0010222:	5e                   	pop    esi
c0010223:	5f                   	pop    edi
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <EnvVarContainer::getEnv(char const*)>:
c0010226:	57                   	push   edi
c0010227:	56                   	push   esi
c0010228:	53                   	push   ebx
c0010229:	31 db                	xor    ebx,ebx
c001022b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001022f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010231:	7e 2b                	jle    c001025e <EnvVarContainer::getEnv(char const*)+0x38>
c0010233:	50                   	push   eax
c0010234:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001023b:	50                   	push   eax
c001023c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001023f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010242:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010246:	e8 f5 04 ff ff       	call   c0000740 <strcmp>
c001024b:	83 c4 10             	add    esp,0x10
c001024e:	85 c0                	test   eax,eax
c0010250:	75 09                	jne    c001025b <EnvVarContainer::getEnv(char const*)+0x35>
c0010252:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010255:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010259:	eb 05                	jmp    c0010260 <EnvVarContainer::getEnv(char const*)+0x3a>
c001025b:	43                   	inc    ebx
c001025c:	eb d1                	jmp    c001022f <EnvVarContainer::getEnv(char const*)+0x9>
c001025e:	31 c0                	xor    eax,eax
c0010260:	5b                   	pop    ebx
c0010261:	5e                   	pop    esi
c0010262:	5f                   	pop    edi
c0010263:	c3                   	ret    

c0010264 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010264:	55                   	push   ebp
c0010265:	57                   	push   edi
c0010266:	56                   	push   esi
c0010267:	53                   	push   ebx
c0010268:	83 ec 28             	sub    esp,0x28
c001026b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001026f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010273:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010277:	56                   	push   esi
c0010278:	e8 e3 02 ff ff       	call   c0000560 <strlen>
c001027d:	40                   	inc    eax
c001027e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010281:	e8 06 78 ff ff       	call   c0007a8c <malloc>
c0010286:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010289:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001028d:	e8 ce 02 ff ff       	call   c0000560 <strlen>
c0010292:	40                   	inc    eax
c0010293:	89 04 24             	mov    DWORD PTR [esp],eax
c0010296:	e8 f1 77 ff ff       	call   c0007a8c <malloc>
c001029b:	89 34 24             	mov    DWORD PTR [esp],esi
c001029e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102a2:	e8 b9 02 ff ff       	call   c0000560 <strlen>
c00102a7:	83 c4 0c             	add    esp,0xc
c00102aa:	40                   	inc    eax
c00102ab:	50                   	push   eax
c00102ac:	6a 00                	push   0x0
c00102ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102b2:	e8 29 02 ff ff       	call   c00004e0 <memset>
c00102b7:	89 34 24             	mov    DWORD PTR [esp],esi
c00102ba:	e8 a1 02 ff ff       	call   c0000560 <strlen>
c00102bf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00102c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102cb:	e8 90 02 ff ff       	call   c0000560 <strlen>
c00102d0:	83 c4 0c             	add    esp,0xc
c00102d3:	40                   	inc    eax
c00102d4:	89 de                	mov    esi,ebx
c00102d6:	50                   	push   eax
c00102d7:	6a 00                	push   0x0
c00102d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102dd:	e8 fe 01 ff ff       	call   c00004e0 <memset>
c00102e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102e5:	e8 76 02 ff ff       	call   c0000560 <strlen>
c00102ea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102ee:	8d 48 01             	lea    ecx,[eax+0x1]
c00102f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102f6:	40                   	inc    eax
c00102f7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102fa:	c1 e0 03             	shl    eax,0x3
c00102fd:	5a                   	pop    edx
c00102fe:	59                   	pop    ecx
c00102ff:	50                   	push   eax
c0010300:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010303:	e8 70 77 ff ff       	call   c0007a78 <realloc>
c0010308:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001030b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001030e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010312:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010316:	b9 08 00 00 00       	mov    ecx,0x8
c001031b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001031d:	83 c4 2c             	add    esp,0x2c
c0010320:	5b                   	pop    ebx
c0010321:	5e                   	pop    esi
c0010322:	5f                   	pop    edi
c0010323:	5d                   	pop    ebp
c0010324:	c3                   	ret    
c0010325:	90                   	nop

c0010326 <EnvVarContainer::deleteEnv(char const*)>:
c0010326:	c3                   	ret    
c0010327:	90                   	nop

c0010328 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010328:	55                   	push   ebp
c0010329:	57                   	push   edi
c001032a:	56                   	push   esi
c001032b:	53                   	push   ebx
c001032c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010332:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010339:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010340:	68 14 01 00 00       	push   0x114
c0010345:	e8 42 77 ff ff       	call   c0007a8c <malloc>
c001034a:	83 c4 0c             	add    esp,0xc
c001034d:	89 c3                	mov    ebx,eax
c001034f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010352:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010359:	50                   	push   eax
c001035a:	e8 77 ab ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c001035f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010362:	e8 99 ae ff ff       	call   c000b200 <File::exists()>
c0010367:	83 c4 10             	add    esp,0x10
c001036a:	84 c0                	test   al,al
c001036c:	75 31                	jne    c001039f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001036e:	50                   	push   eax
c001036f:	50                   	push   eax
c0010370:	6a 12                	push   0x12
c0010372:	53                   	push   ebx
c0010373:	e8 1a ac ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0010378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001037a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001037d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010380:	e8 db 01 ff ff       	call   c0000560 <strlen>
c0010385:	5a                   	pop    edx
c0010386:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001038a:	31 d2                	xor    edx,edx
c001038c:	51                   	push   ecx
c001038d:	56                   	push   esi
c001038e:	52                   	push   edx
c001038f:	50                   	push   eax
c0010390:	53                   	push   ebx
c0010391:	ff d7                	call   edi
c0010393:	83 c4 14             	add    esp,0x14
c0010396:	53                   	push   ebx
c0010397:	e8 54 ac ff ff       	call   c000aff0 <File::close()>
c001039c:	83 c4 10             	add    esp,0x10
c001039f:	56                   	push   esi
c00103a0:	31 f6                	xor    esi,esi
c00103a2:	68 00 01 00 00       	push   0x100
c00103a7:	6a 00                	push   0x0
c00103a9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103ad:	50                   	push   eax
c00103ae:	e8 2d 01 ff ff       	call   c00004e0 <memset>
c00103b3:	5f                   	pop    edi
c00103b4:	58                   	pop    eax
c00103b5:	6a 01                	push   0x1
c00103b7:	53                   	push   ebx
c00103b8:	e8 d5 ab ff ff       	call   c000af92 <File::open(FileOpenMode)>
c00103bd:	83 c4 10             	add    esp,0x10
c00103c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103cd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103d1:	51                   	push   ecx
c00103d2:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103d6:	52                   	push   edx
c00103d7:	6a 00                	push   0x0
c00103d9:	6a 01                	push   0x1
c00103db:	53                   	push   ebx
c00103dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103df:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c00103e4:	83 c4 20             	add    esp,0x20
c00103e7:	89 d0                	mov    eax,edx
c00103e9:	83 fa 0d             	cmp    edx,0xd
c00103ec:	0f 84 0a 01 00 00    	je     c00104fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00103f2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103f7:	0f 84 f0 00 00 00    	je     c00104ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00103fd:	83 fa 0a             	cmp    edx,0xa
c0010400:	74 13                	je     c0010415 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010402:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010407:	74 0c                	je     c0010415 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010409:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001040f:	0f 8e d8 00 00 00    	jle    c00104ed <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010419:	83 ec 0c             	sub    esp,0xc
c001041c:	8d 78 01             	lea    edi,[eax+0x1]
c001041f:	57                   	push   edi
c0010420:	e8 67 76 ff ff       	call   c0007a8c <malloc>
c0010425:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001042d:	8d 56 04             	lea    edx,[esi+0x4]
c0010430:	89 14 24             	mov    DWORD PTR [esp],edx
c0010433:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010437:	e8 50 76 ff ff       	call   c0007a8c <malloc>
c001043c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010440:	83 c4 0c             	add    esp,0xc
c0010443:	57                   	push   edi
c0010444:	6a 00                	push   0x0
c0010446:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001044a:	e8 91 00 ff ff       	call   c00004e0 <memset>
c001044f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010453:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010457:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001045b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001045d:	83 c4 0c             	add    esp,0xc
c0010460:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010464:	52                   	push   edx
c0010465:	6a 00                	push   0x0
c0010467:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001046b:	e8 70 00 ff ff       	call   c00004e0 <memset>
c0010470:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010474:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010478:	89 34 24             	mov    DWORD PTR [esp],esi
c001047b:	e8 e0 00 ff ff       	call   c0000560 <strlen>
c0010480:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010484:	89 c1                	mov    ecx,eax
c0010486:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010488:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001048b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001048e:	40                   	inc    eax
c001048f:	83 c4 10             	add    esp,0x10
c0010492:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010495:	85 d2                	test   edx,edx
c0010497:	75 0c                	jne    c00104a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c0010499:	83 ec 0c             	sub    esp,0xc
c001049c:	6a 08                	push   0x8
c001049e:	e8 e9 75 ff ff       	call   c0007a8c <malloc>
c00104a3:	eb 0c                	jmp    c00104b1 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104a5:	c1 e0 03             	shl    eax,0x3
c00104a8:	51                   	push   ecx
c00104a9:	51                   	push   ecx
c00104aa:	50                   	push   eax
c00104ab:	52                   	push   edx
c00104ac:	e8 c7 75 ff ff       	call   c0007a78 <realloc>
c00104b1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104ba:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104bd:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104c1:	b9 08 00 00 00       	mov    ecx,0x8
c00104c6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104cc:	50                   	push   eax
c00104cd:	31 f6                	xor    esi,esi
c00104cf:	68 00 01 00 00       	push   0x100
c00104d4:	6a 00                	push   0x0
c00104d6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104da:	50                   	push   eax
c00104db:	e8 00 00 ff ff       	call   c00004e0 <memset>
c00104e0:	83 c4 10             	add    esp,0x10
c00104e3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104eb:	eb 0f                	jmp    c00104fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104ed:	3c 3d                	cmp    al,0x3d
c00104ef:	74 07                	je     c00104f8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00104f1:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104f5:	46                   	inc    esi
c00104f6:	eb 04                	jmp    c00104fc <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c00104f8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010501:	0f 85 c1 fe ff ff    	jne    c00103c8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010507:	81 c4 2c 01 00 00    	add    esp,0x12c
c001050d:	5b                   	pop    ebx
c001050e:	5e                   	pop    esi
c001050f:	5f                   	pop    edi
c0010510:	5d                   	pop    ebp
c0010511:	c3                   	ret    

c0010512 <EnvVarContainer::__loadSystem()>:
c0010512:	83 ec 10             	sub    esp,0x10
c0010515:	68 20 20 02 c0       	push   0xc0022020
c001051a:	68 68 0b 02 c0       	push   0xc0020b68
c001051f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010523:	e8 00 fe ff ff       	call   c0010328 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010528:	83 c4 1c             	add    esp,0x1c
c001052b:	c3                   	ret    

c001052c <EnvVarContainer::__loadUser()>:
c001052c:	c3                   	ret    
c001052d:	90                   	nop

c001052e <EnvVarContainer::EnvVarContainer(Process*)>:
c001052e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001053c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010540:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010547:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001054e:	90                   	nop
c001054f:	c3                   	ret    

c0010550 <EnvVarContainer::~EnvVarContainer()>:
c0010550:	83 ec 0c             	sub    esp,0xc
c0010553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010557:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001055a:	85 c0                	test   eax,eax
c001055c:	74 1d                	je     c001057b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001055e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010562:	8b 00                	mov    eax,DWORD PTR [eax]
c0010564:	85 c0                	test   eax,eax
c0010566:	74 13                	je     c001057b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001056f:	83 ec 0c             	sub    esp,0xc
c0010572:	50                   	push   eax
c0010573:	e8 24 75 ff ff       	call   c0007a9c <free>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	90                   	nop
c001057c:	83 c4 0c             	add    esp,0xc
c001057f:	c3                   	ret    

c0010580 <Krnl::getEnv(Process*, char const*)>:
c0010580:	53                   	push   ebx
c0010581:	83 ec 08             	sub    esp,0x8
c0010584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010588:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001058c:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010592:	74 04                	je     c0010598 <Krnl::getEnv(Process*, char const*)+0x18>
c0010594:	85 c0                	test   eax,eax
c0010596:	75 0b                	jne    c00105a3 <Krnl::getEnv(Process*, char const*)+0x23>
c0010598:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c001059d:	85 c0                	test   eax,eax
c001059f:	75 19                	jne    c00105ba <Krnl::getEnv(Process*, char const*)+0x3a>
c00105a1:	eb 27                	jmp    c00105ca <Krnl::getEnv(Process*, char const*)+0x4a>
c00105a3:	52                   	push   edx
c00105a4:	52                   	push   edx
c00105a5:	53                   	push   ebx
c00105a6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105ac:	e8 75 fc ff ff       	call   c0010226 <EnvVarContainer::getEnv(char const*)>
c00105b1:	83 c4 10             	add    esp,0x10
c00105b4:	85 c0                	test   eax,eax
c00105b6:	75 28                	jne    c00105e0 <Krnl::getEnv(Process*, char const*)+0x60>
c00105b8:	eb de                	jmp    c0010598 <Krnl::getEnv(Process*, char const*)+0x18>
c00105ba:	52                   	push   edx
c00105bb:	52                   	push   edx
c00105bc:	53                   	push   ebx
c00105bd:	50                   	push   eax
c00105be:	e8 63 fc ff ff       	call   c0010226 <EnvVarContainer::getEnv(char const*)>
c00105c3:	83 c4 10             	add    esp,0x10
c00105c6:	85 c0                	test   eax,eax
c00105c8:	75 16                	jne    c00105e0 <Krnl::getEnv(Process*, char const*)+0x60>
c00105ca:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105cf:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105d7:	83 c4 08             	add    esp,0x8
c00105da:	5b                   	pop    ebx
c00105db:	e9 46 fc ff ff       	jmp    c0010226 <EnvVarContainer::getEnv(char const*)>
c00105e0:	83 c4 08             	add    esp,0x8
c00105e3:	5b                   	pop    ebx
c00105e4:	c3                   	ret    

c00105e5 <Krnl::setEnvSystem(char const*, char const*)>:
c00105e5:	83 ec 10             	sub    esp,0x10
c00105e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f0:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105f6:	e8 69 fc ff ff       	call   c0010264 <EnvVarContainer::setEnv(char const*, char const*)>
c00105fb:	83 c4 1c             	add    esp,0x1c
c00105fe:	c3                   	ret    

c00105ff <Krnl::setEnvUser(char const*, char const*)>:
c00105ff:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010604:	85 c0                	test   eax,eax
c0010606:	74 15                	je     c001061d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010608:	83 ec 10             	sub    esp,0x10
c001060b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001060f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010613:	50                   	push   eax
c0010614:	e8 4b fc ff ff       	call   c0010264 <EnvVarContainer::setEnv(char const*, char const*)>
c0010619:	83 c4 1c             	add    esp,0x1c
c001061c:	c3                   	ret    
c001061d:	c3                   	ret    

c001061e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010628:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001062c:	e9 33 fc ff ff       	jmp    c0010264 <EnvVarContainer::setEnv(char const*, char const*)>

c0010631 <Krnl::deleteEnvSystem(char const*)>:
c0010631:	c3                   	ret    

c0010632 <Krnl::deleteEnvUser(char const*)>:
c0010632:	c3                   	ret    

c0010633 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010633:	c3                   	ret    

c0010634 <Krnl::newProcessEnv(Process*)>:
c0010634:	83 ec 28             	sub    esp,0x28
c0010637:	6a 0c                	push   0xc
c0010639:	e8 4e 74 ff ff       	call   c0007a8c <malloc>
c001063e:	5a                   	pop    edx
c001063f:	59                   	pop    ecx
c0010640:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010644:	50                   	push   eax
c0010645:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010649:	e8 e0 fe ff ff       	call   c001052e <EnvVarContainer::EnvVarContainer(Process*)>
c001064e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010652:	83 c4 2c             	add    esp,0x2c
c0010655:	c3                   	ret    

c0010656 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010656:	57                   	push   edi
c0010657:	56                   	push   esi
c0010658:	53                   	push   ebx
c0010659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001065d:	83 ec 0c             	sub    esp,0xc
c0010660:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010666:	6a 0c                	push   0xc
c0010668:	e8 1f 74 ff ff       	call   c0007a8c <malloc>
c001066d:	89 c3                	mov    ebx,eax
c001066f:	58                   	pop    eax
c0010670:	5a                   	pop    edx
c0010671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010675:	53                   	push   ebx
c0010676:	e8 b3 fe ff ff       	call   c001052e <EnvVarContainer::EnvVarContainer(Process*)>
c001067b:	8b 07                	mov    eax,DWORD PTR [edi]
c001067d:	89 03                	mov    DWORD PTR [ebx],eax
c001067f:	c1 e0 03             	shl    eax,0x3
c0010682:	89 04 24             	mov    DWORD PTR [esp],eax
c0010685:	e8 02 74 ff ff       	call   c0007a8c <malloc>
c001068a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001068d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001068f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010692:	c1 e1 03             	shl    ecx,0x3
c0010695:	89 c7                	mov    edi,eax
c0010697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	89 d8                	mov    eax,ebx
c001069e:	5b                   	pop    ebx
c001069f:	5e                   	pop    esi
c00106a0:	5f                   	pop    edi
c00106a1:	c3                   	ret    

c00106a2 <Krnl::loadSystemEnv()>:
c00106a2:	53                   	push   ebx
c00106a3:	83 ec 14             	sub    esp,0x14
c00106a6:	6a 0c                	push   0xc
c00106a8:	e8 df 73 ff ff       	call   c0007a8c <malloc>
c00106ad:	89 c3                	mov    ebx,eax
c00106af:	58                   	pop    eax
c00106b0:	5a                   	pop    edx
c00106b1:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106b7:	53                   	push   ebx
c00106b8:	e8 71 fe ff ff       	call   c001052e <EnvVarContainer::EnvVarContainer(Process*)>
c00106bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106c0:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106c6:	e8 47 fe ff ff       	call   c0010512 <EnvVarContainer::__loadSystem()>
c00106cb:	83 c4 18             	add    esp,0x18
c00106ce:	5b                   	pop    ebx
c00106cf:	c3                   	ret    

c00106d0 <Krnl::loadUserEnv()>:
c00106d0:	53                   	push   ebx
c00106d1:	83 ec 14             	sub    esp,0x14
c00106d4:	6a 0c                	push   0xc
c00106d6:	e8 b1 73 ff ff       	call   c0007a8c <malloc>
c00106db:	89 c3                	mov    ebx,eax
c00106dd:	58                   	pop    eax
c00106de:	5a                   	pop    edx
c00106df:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106e5:	53                   	push   ebx
c00106e6:	e8 43 fe ff ff       	call   c001052e <EnvVarContainer::EnvVarContainer(Process*)>
c00106eb:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106f1:	83 c4 18             	add    esp,0x18
c00106f4:	5b                   	pop    ebx
c00106f5:	c3                   	ret    

c00106f6 <Krnl::flushEnv()>:
c00106f6:	c3                   	ret    

c00106f7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00106f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fb:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010701:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010707:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c001070c:	8b 00                	mov    eax,DWORD PTR [eax]
c001070e:	03 01                	add    eax,DWORD PTR [ecx]
c0010710:	85 d2                	test   edx,edx
c0010712:	74 02                	je     c0010716 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010714:	03 02                	add    eax,DWORD PTR [edx]
c0010716:	c3                   	ret    

c0010717 <Krnl::getProcessEnvPair(Process*, int)>:
c0010717:	57                   	push   edi
c0010718:	56                   	push   esi
c0010719:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c001071f:	53                   	push   ebx
c0010720:	85 f6                	test   esi,esi
c0010722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010726:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001072a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001072e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010734:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010736:	75 16                	jne    c001074e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010738:	39 c2                	cmp    edx,eax
c001073a:	7c 16                	jl     c0010752 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001073c:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010742:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010744:	01 c6                	add    esi,eax
c0010746:	39 d6                	cmp    esi,edx
c0010748:	7e 3c                	jle    c0010786 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001074a:	29 c2                	sub    edx,eax
c001074c:	eb 04                	jmp    c0010752 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001074e:	39 c2                	cmp    edx,eax
c0010750:	7d 05                	jge    c0010757 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010752:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010755:	eb 20                	jmp    c0010777 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010757:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010759:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001075c:	39 d1                	cmp    ecx,edx
c001075e:	7e 04                	jle    c0010764 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010760:	29 c2                	sub    edx,eax
c0010762:	eb 10                	jmp    c0010774 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010764:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c001076a:	03 0e                	add    ecx,DWORD PTR [esi]
c001076c:	39 d1                	cmp    ecx,edx
c001076e:	7e 16                	jle    c0010786 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010770:	29 c2                	sub    edx,eax
c0010772:	29 fa                	sub    edx,edi
c0010774:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010777:	8d 14 d0             	lea    edx,[eax+edx*8]
c001077a:	8b 02                	mov    eax,DWORD PTR [edx]
c001077c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001077f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010782:	89 03                	mov    DWORD PTR [ebx],eax
c0010784:	eb 1d                	jmp    c00107a3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010786:	83 ec 0c             	sub    esp,0xc
c0010789:	68 8a 0b 02 c0       	push   0xc0020b8a
c001078e:	e8 ac 00 00 00       	call   c001083f <KePanic(char const*)>
c0010793:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010799:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	89 d8                	mov    eax,ebx
c00107a5:	5b                   	pop    ebx
c00107a6:	5e                   	pop    esi
c00107a7:	5f                   	pop    edi
c00107a8:	c2 04 00             	ret    0x4

c00107ab <CPU::current()>:
c00107ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107b6:	c3                   	ret    

c00107b7 <operator new(unsigned long)>:
c00107b7:	e9 d0 72 ff ff       	jmp    c0007a8c <malloc>

c00107bc <operator delete(void*)>:
c00107bc:	e9 eb 72 ff ff       	jmp    c0007aac <rfree>

c00107c1 <disableIRQs()>:
c00107c1:	fa                   	cli    
c00107c2:	c3                   	ret    

c00107c3 <enableIRQs()>:
c00107c3:	fb                   	sti    
c00107c4:	c3                   	ret    

c00107c5 <lockScheduler()>:
c00107c5:	fa                   	cli    
c00107c6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107cc:	c3                   	ret    

c00107cd <unlockScheduler()>:
c00107cd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107d2:	48                   	dec    eax
c00107d3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107d8:	75 01                	jne    c00107db <unlockScheduler()+0xe>
c00107da:	fb                   	sti    
c00107db:	c3                   	ret    

c00107dc <lockStuff()>:
c00107dc:	fa                   	cli    
c00107dd:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107e3:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107e9:	c3                   	ret    

c00107ea <unlockStuff()>:
c00107ea:	83 ec 0c             	sub    esp,0xc
c00107ed:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107f2:	48                   	dec    eax
c00107f3:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107f8:	75 18                	jne    c0010812 <unlockStuff()+0x28>
c00107fa:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010801:	74 0f                	je     c0010812 <unlockStuff()+0x28>
c0010803:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001080d:	e8 2e 48 00 00       	call   c0015040 <schedule()>
c0010812:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010817:	48                   	dec    eax
c0010818:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001081d:	75 01                	jne    c0010820 <unlockStuff()+0x36>
c001081f:	fb                   	sti    
c0010820:	83 c4 0c             	add    esp,0xc
c0010823:	c3                   	ret    

c0010824 <Virt::getAKernelVAS()>:
c0010824:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010829:	c3                   	ret    

c001082a <__not_memcpy>:
c001082a:	57                   	push   edi
c001082b:	56                   	push   esi
c001082c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010830:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010834:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010838:	89 c7                	mov    edi,eax
c001083a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001083c:	5e                   	pop    esi
c001083d:	5f                   	pop    edi
c001083e:	c3                   	ret    

c001083f <KePanic(char const*)>:
c001083f:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010846:	e9 1f 67 00 00       	jmp    c0016f6a <HalPanic(char const*)>

c001084b <Krnl::powerThread(void*)>:
c001084b:	83 ec 0c             	sub    esp,0xc
c001084e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010853:	48                   	dec    eax
c0010854:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010859:	75 01                	jne    c001085c <Krnl::powerThread(void*)+0x11>
c001085b:	fb                   	sti    
c001085c:	83 ec 0c             	sub    esp,0xc
c001085f:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010866:	6a 0a                	push   0xa
c0010868:	e8 03 4b 00 00       	call   c0015370 <sleep(unsigned int)>
c001086d:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010874:	83 c4 10             	add    esp,0x10
c0010877:	eb e3                	jmp    c001085c <Krnl::powerThread(void*)+0x11>

c0010879 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010879:	57                   	push   edi
c001087a:	b9 09 00 00 00       	mov    ecx,0x9
c001087f:	bf 60 79 02 c0       	mov    edi,0xc0027960
c0010884:	56                   	push   esi
c0010885:	fc                   	cld    
c0010886:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001088a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001088c:	5e                   	pop    esi
c001088d:	5f                   	pop    edi
c001088e:	c3                   	ret    

c001088f <Krnl::userIOReceived()>:
c001088f:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010899:	c3                   	ret    

c001089a <Krnl::handlePowerButton()>:
c001089a:	83 ec 0c             	sub    esp,0xc
c001089d:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108a2:	83 f8 02             	cmp    eax,0x2
c00108a5:	75 10                	jne    c00108b7 <Krnl::handlePowerButton()+0x1d>
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108b0:	e8 61 68 ff ff       	call   c0007116 <Computer::shutdown()>
c00108b5:	eb 11                	jmp    c00108c8 <Krnl::handlePowerButton()+0x2e>
c00108b7:	48                   	dec    eax
c00108b8:	75 11                	jne    c00108cb <Krnl::handlePowerButton()+0x31>
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108c3:	e8 7e 68 ff ff       	call   c0007146 <Computer::sleep()>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	83 c4 0c             	add    esp,0xc
c00108ce:	c3                   	ret    

c00108cf <Krnl::handleSleepButton()>:
c00108cf:	83 ec 0c             	sub    esp,0xc
c00108d2:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108d7:	83 f8 02             	cmp    eax,0x2
c00108da:	75 10                	jne    c00108ec <Krnl::handleSleepButton()+0x1d>
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108e5:	e8 2c 68 ff ff       	call   c0007116 <Computer::shutdown()>
c00108ea:	eb 11                	jmp    c00108fd <Krnl::handleSleepButton()+0x2e>
c00108ec:	48                   	dec    eax
c00108ed:	75 11                	jne    c0010900 <Krnl::handleSleepButton()+0x31>
c00108ef:	83 ec 0c             	sub    esp,0xc
c00108f2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108f8:	e8 49 68 ff ff       	call   c0007146 <Computer::sleep()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	83 c4 0c             	add    esp,0xc
c0010903:	c3                   	ret    

c0010904 <Krnl::setupPowerManager()>:
c0010904:	83 ec 0c             	sub    esp,0xc
c0010907:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010911:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010918:	68 f0 00 00 00       	push   0xf0
c001091d:	6a 00                	push   0x0
c001091f:	68 4b 08 01 c0       	push   0xc001084b
c0010924:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001092a:	e8 c5 44 00 00       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c001092f:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010939:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010943:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c001094d:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010957:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010961:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c001096b:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010975:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c001097f:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c0010989:	83 c4 1c             	add    esp,0x1c
c001098c:	c3                   	ret    

c001098d <KeRand()>:
c001098d:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c0010997:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109a1:	01 c1                	add    ecx,eax
c00109a3:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109a8:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109ae:	01 ca                	add    edx,ecx
c00109b0:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109b5:	83 d2 00             	adc    edx,0x0
c00109b8:	53                   	push   ebx
c00109b9:	0f b7 da             	movzx  ebx,dx
c00109bc:	89 da                	mov    edx,ebx
c00109be:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109c3:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109c9:	5b                   	pop    ebx
c00109ca:	0f ac d0 0e          	shrd   eax,edx,0xe
c00109ce:	c3                   	ret    

c00109cf <KeSeedRand(unsigned int)>:
c00109cf:	53                   	push   ebx
c00109d0:	83 ec 08             	sub    esp,0x8
c00109d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109d7:	e8 92 68 00 00       	call   c001726e <HalGetRand()>
c00109dc:	31 d8                	xor    eax,ebx
c00109de:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109e8:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109ed:	e8 9b ff ff ff       	call   c001098d <KeRand()>
c00109f2:	83 c4 08             	add    esp,0x8
c00109f5:	5b                   	pop    ebx
c00109f6:	eb 95                	jmp    c001098d <KeRand()>

c00109f8 <KeInitRand()>:
c00109f8:	83 ec 0c             	sub    esp,0xc
c00109fb:	e8 63 66 00 00       	call   c0017063 <HalQueryPerformanceCounter()>
c0010a00:	0f 20 da             	mov    edx,cr3
c0010a03:	0f 22 da             	mov    cr3,edx
c0010a06:	0f 20 da             	mov    edx,cr3
c0010a09:	0f 22 da             	mov    cr3,edx
c0010a0c:	0f 20 da             	mov    edx,cr3
c0010a0f:	0f 22 da             	mov    cr3,edx
c0010a12:	0f 20 da             	mov    edx,cr3
c0010a15:	0f 22 da             	mov    cr3,edx
c0010a18:	83 ec 0c             	sub    esp,0xc
c0010a1b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a20:	50                   	push   eax
c0010a21:	e8 a9 ff ff ff       	call   c00109cf <KeSeedRand(unsigned int)>
c0010a26:	83 c4 1c             	add    esp,0x1c
c0010a29:	c3                   	ret    
c0010a2a:	66 90                	xchg   ax,ax

c0010a2c <KeResolveCompatibilitySymbol(char*)>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	83 ec 08             	sub    esp,0x8
c0010a32:	68 a4 0b 02 c0       	push   0xc0020ba4
c0010a37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3b:	e8 00 fd fe ff       	call   c0000740 <strcmp>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	85 c0                	test   eax,eax
c0010a45:	0f 94 c0             	sete   al
c0010a48:	0f b6 c0             	movzx  eax,al
c0010a4b:	85 c0                	test   eax,eax
c0010a4d:	74 0d                	je     c0010a5c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a4f:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a54:	e9 8b 01 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a59:	8d 76 00             	lea    esi,[esi+0x0]
c0010a5c:	83 ec 08             	sub    esp,0x8
c0010a5f:	68 ad 0b 02 c0       	push   0xc0020bad
c0010a64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a68:	e8 d3 fc fe ff       	call   c0000740 <strcmp>
c0010a6d:	83 c4 10             	add    esp,0x10
c0010a70:	85 c0                	test   eax,eax
c0010a72:	0f 94 c0             	sete   al
c0010a75:	0f b6 c0             	movzx  eax,al
c0010a78:	85 c0                	test   eax,eax
c0010a7a:	74 0c                	je     c0010a88 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a7c:	b8 d0 e5 01 c0       	mov    eax,0xc001e5d0
c0010a81:	e9 5e 01 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a86:	66 90                	xchg   ax,ax
c0010a88:	83 ec 08             	sub    esp,0x8
c0010a8b:	68 b7 0b 02 c0       	push   0xc0020bb7
c0010a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a94:	e8 a7 fc fe ff       	call   c0000740 <strcmp>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	85 c0                	test   eax,eax
c0010a9e:	0f 94 c0             	sete   al
c0010aa1:	0f b6 c0             	movzx  eax,al
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	74 0c                	je     c0010ab4 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010aa8:	b8 04 e3 01 c0       	mov    eax,0xc001e304
c0010aad:	e9 32 01 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ab2:	66 90                	xchg   ax,ax
c0010ab4:	83 ec 08             	sub    esp,0x8
c0010ab7:	68 c0 0b 02 c0       	push   0xc0020bc0
c0010abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac0:	e8 7b fc fe ff       	call   c0000740 <strcmp>
c0010ac5:	83 c4 10             	add    esp,0x10
c0010ac8:	85 c0                	test   eax,eax
c0010aca:	0f 94 c0             	sete   al
c0010acd:	0f b6 c0             	movzx  eax,al
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	74 0c                	je     c0010ae0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010ad4:	b8 3f 08 01 c0       	mov    eax,0xc001083f
c0010ad9:	e9 06 01 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ade:	66 90                	xchg   ax,ax
c0010ae0:	83 ec 08             	sub    esp,0x8
c0010ae3:	68 d3 0b 02 c0       	push   0xc0020bd3
c0010ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aec:	e8 4f fc fe ff       	call   c0000740 <strcmp>
c0010af1:	83 c4 10             	add    esp,0x10
c0010af4:	85 c0                	test   eax,eax
c0010af6:	0f 94 c0             	sete   al
c0010af9:	0f b6 c0             	movzx  eax,al
c0010afc:	85 c0                	test   eax,eax
c0010afe:	74 0c                	je     c0010b0c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b00:	b8 c2 01 01 c0       	mov    eax,0xc00101c2
c0010b05:	e9 da 00 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b0a:	66 90                	xchg   ax,ax
c0010b0c:	83 ec 08             	sub    esp,0x8
c0010b0f:	68 f0 0b 02 c0       	push   0xc0020bf0
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	e8 23 fc fe ff       	call   c0000740 <strcmp>
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	85 c0                	test   eax,eax
c0010b22:	0f 94 c0             	sete   al
c0010b25:	0f b6 c0             	movzx  eax,al
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	74 0c                	je     c0010b38 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b2c:	b8 d0 e6 01 c0       	mov    eax,0xc001e6d0
c0010b31:	e9 ae 00 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b36:	66 90                	xchg   ax,ax
c0010b38:	83 ec 08             	sub    esp,0x8
c0010b3b:	68 fa 0b 02 c0       	push   0xc0020bfa
c0010b40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b44:	e8 f7 fb fe ff       	call   c0000740 <strcmp>
c0010b49:	83 c4 10             	add    esp,0x10
c0010b4c:	85 c0                	test   eax,eax
c0010b4e:	0f 94 c0             	sete   al
c0010b51:	0f b6 c0             	movzx  eax,al
c0010b54:	85 c0                	test   eax,eax
c0010b56:	74 0c                	je     c0010b64 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b58:	b8 50 e4 01 c0       	mov    eax,0xc001e450
c0010b5d:	e9 82 00 00 00       	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b62:	66 90                	xchg   ax,ax
c0010b64:	83 ec 08             	sub    esp,0x8
c0010b67:	68 03 0c 02 c0       	push   0xc0020c03
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	e8 cb fb fe ff       	call   c0000740 <strcmp>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	0f 94 c0             	sete   al
c0010b7d:	0f b6 c0             	movzx  eax,al
c0010b80:	85 c0                	test   eax,eax
c0010b82:	74 08                	je     c0010b8c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b84:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b89:	eb 59                	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b8b:	90                   	nop
c0010b8c:	83 ec 08             	sub    esp,0x8
c0010b8f:	68 1b 0c 02 c0       	push   0xc0020c1b
c0010b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b98:	e8 a3 fb fe ff       	call   c0000740 <strcmp>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	0f 94 c0             	sete   al
c0010ba5:	0f b6 c0             	movzx  eax,al
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	74 08                	je     c0010bb4 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bac:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bb1:	eb 31                	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bb3:	90                   	nop
c0010bb4:	83 ec 08             	sub    esp,0x8
c0010bb7:	68 28 0c 02 c0       	push   0xc0020c28
c0010bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc0:	e8 7b fb fe ff       	call   c0000740 <strcmp>
c0010bc5:	83 c4 10             	add    esp,0x10
c0010bc8:	85 c0                	test   eax,eax
c0010bca:	0f 94 c0             	sete   al
c0010bcd:	0f b6 c0             	movzx  eax,al
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	74 08                	je     c0010bdc <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bd4:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010bd9:	eb 09                	jmp    c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bdb:	90                   	nop
c0010bdc:	b8 00 00 00 00       	mov    eax,0x0
c0010be1:	8d 76 00             	lea    esi,[esi+0x0]
c0010be4:	83 c4 0c             	add    esp,0xc
c0010be7:	c3                   	ret    

c0010be8 <KiSigKill(int)>:
c0010be8:	83 ec 0c             	sub    esp,0xc
c0010beb:	6a 00                	push   0x0
c0010bed:	6a 00                	push   0x0
c0010bef:	6a ff                	push   0xffffffff
c0010bf1:	6a 01                	push   0x1
c0010bf3:	e8 5a 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bf8:	83 c4 1c             	add    esp,0x1c
c0010bfb:	c3                   	ret    

c0010bfc <KiDefaultSignalHandlerIgnore(int)>:
c0010bfc:	c3                   	ret    

c0010bfd <KiDefaultSignalHandlerPause(int)>:
c0010bfd:	57                   	push   edi
c0010bfe:	b9 07 00 00 00       	mov    ecx,0x7
c0010c03:	56                   	push   esi
c0010c04:	be 71 0c 02 c0       	mov    esi,0xc0020c71
c0010c09:	83 ec 24             	sub    esp,0x24
c0010c0c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c10:	fc                   	cld    
c0010c11:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c17:	50                   	push   eax
c0010c18:	6a 00                	push   0x0
c0010c1a:	6a 00                	push   0x0
c0010c1c:	6a 27                	push   0x27
c0010c1e:	e8 2f 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c23:	83 c4 34             	add    esp,0x34
c0010c26:	5e                   	pop    esi
c0010c27:	5f                   	pop    edi
c0010c28:	c3                   	ret    

c0010c29 <KiDefaultSignalHandlerResume(int)>:
c0010c29:	57                   	push   edi
c0010c2a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c2f:	56                   	push   esi
c0010c30:	be 8d 0c 02 c0       	mov    esi,0xc0020c8d
c0010c35:	83 ec 24             	sub    esp,0x24
c0010c38:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c3c:	fc                   	cld    
c0010c3d:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c43:	50                   	push   eax
c0010c44:	6a 00                	push   0x0
c0010c46:	6a 00                	push   0x0
c0010c48:	6a 27                	push   0x27
c0010c4a:	e8 03 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c4f:	83 c4 34             	add    esp,0x34
c0010c52:	5e                   	pop    esi
c0010c53:	5f                   	pop    edi
c0010c54:	c3                   	ret    

c0010c55 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c55:	e9 42 6e ff ff       	jmp    c0007a9c <free>

c0010c5a <KeInitSignals()>:
c0010c5a:	53                   	push   ebx
c0010c5b:	83 ec 14             	sub    esp,0x14
c0010c5e:	68 c8 00 00 00       	push   0xc8
c0010c63:	e8 24 6e ff ff       	call   c0007a8c <malloc>
c0010c68:	83 c4 0c             	add    esp,0xc
c0010c6b:	89 c3                	mov    ebx,eax
c0010c6d:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c77:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c81:	6a 20                	push   0x20
c0010c83:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c89:	6a 00                	push   0x0
c0010c8b:	50                   	push   eax
c0010c8c:	e8 4f f8 fe ff       	call   c00004e0 <memset>
c0010c91:	83 c4 0c             	add    esp,0xc
c0010c94:	6a 44                	push   0x44
c0010c96:	6a 00                	push   0x0
c0010c98:	53                   	push   ebx
c0010c99:	e8 42 f8 fe ff       	call   c00004e0 <memset>
c0010c9e:	83 c4 18             	add    esp,0x18
c0010ca1:	89 d8                	mov    eax,ebx
c0010ca3:	5b                   	pop    ebx
c0010ca4:	c3                   	ret    

c0010ca5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010ca5:	53                   	push   ebx
c0010ca6:	b8 01 00 00 00       	mov    eax,0x1
c0010cab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010caf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb3:	83 f9 10             	cmp    ecx,0x10
c0010cb6:	7f 21                	jg     c0010cd9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cb8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbf:	89 03                	mov    DWORD PTR [ebx],eax
c0010cc1:	b8 01 00 00 00       	mov    eax,0x1
c0010cc6:	d3 e0                	shl    eax,cl
c0010cc8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010ccc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010ccf:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010cd7:	31 c0                	xor    eax,eax
c0010cd9:	5b                   	pop    ebx
c0010cda:	c3                   	ret    

c0010cdb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010cdb:	55                   	push   ebp
c0010cdc:	57                   	push   edi
c0010cdd:	bf 08 00 00 00       	mov    edi,0x8
c0010ce2:	56                   	push   esi
c0010ce3:	53                   	push   ebx
c0010ce4:	83 ec 18             	sub    esp,0x18
c0010ce7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ceb:	68 aa 0c 02 c0       	push   0xc0020caa
c0010cf0:	e8 5e 9c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cff:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d05:	31 c9                	xor    ecx,ecx
c0010d07:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d0b:	99                   	cdq    
c0010d0c:	f7 ff                	idiv   edi
c0010d0e:	8d 42 24             	lea    eax,[edx+0x24]
c0010d11:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d15:	85 f6                	test   esi,esi
c0010d17:	75 1a                	jne    c0010d33 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d19:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d1d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d21:	50                   	push   eax
c0010d22:	50                   	push   eax
c0010d23:	52                   	push   edx
c0010d24:	68 bb 0c 02 c0       	push   0xc0020cbb
c0010d29:	e8 25 9c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0010d2e:	83 c4 10             	add    esp,0x10
c0010d31:	eb 1b                	jmp    c0010d4e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d33:	41                   	inc    ecx
c0010d34:	83 f9 08             	cmp    ecx,0x8
c0010d37:	75 ce                	jne    c0010d07 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d39:	83 ec 0c             	sub    esp,0xc
c0010d3c:	be 01 00 00 00       	mov    esi,0x1
c0010d41:	68 dc 0c 02 c0       	push   0xc0020cdc
c0010d46:	e8 08 9c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0010d4b:	83 c4 10             	add    esp,0x10
c0010d4e:	83 c4 0c             	add    esp,0xc
c0010d51:	89 f0                	mov    eax,esi
c0010d53:	5b                   	pop    ebx
c0010d54:	5e                   	pop    esi
c0010d55:	5f                   	pop    edi
c0010d56:	5d                   	pop    ebp
c0010d57:	c3                   	ret    

c0010d58 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d58:	55                   	push   ebp
c0010d59:	57                   	push   edi
c0010d5a:	56                   	push   esi
c0010d5b:	53                   	push   ebx
c0010d5c:	51                   	push   ecx
c0010d5d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d61:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d68:	0f 84 af 00 00 00    	je     c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d6e:	31 c9                	xor    ecx,ecx
c0010d70:	bf 08 00 00 00       	mov    edi,0x8
c0010d75:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d7b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d7e:	99                   	cdq    
c0010d7f:	f7 ff                	idiv   edi
c0010d81:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d88:	85 ed                	test   ebp,ebp
c0010d8a:	0f 84 9e 00 00 00    	je     c0010e2e <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010d90:	89 e9                	mov    ecx,ebp
c0010d92:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d98:	bf 01 00 00 00       	mov    edi,0x1
c0010d9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da0:	d3 e7                	shl    edi,cl
c0010da2:	31 c9                	xor    ecx,ecx
c0010da4:	b8 01 00 00 00       	mov    eax,0x1
c0010da9:	d3 e0                	shl    eax,cl
c0010dab:	85 04 24             	test   DWORD PTR [esp],eax
c0010dae:	74 06                	je     c0010db6 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010db0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010db4:	75 67                	jne    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010db6:	41                   	inc    ecx
c0010db7:	83 f9 11             	cmp    ecx,0x11
c0010dba:	75 e8                	jne    c0010da4 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010dbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010dbf:	46                   	inc    esi
c0010dc0:	09 f8                	or     eax,edi
c0010dc2:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010dc8:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dd3:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dd9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010de0:	31 c0                	xor    eax,eax
c0010de2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010dea:	74 09                	je     c0010df5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010dec:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010df3:	eb 06                	jmp    c0010dfb <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010df5:	40                   	inc    eax
c0010df6:	83 f8 08             	cmp    eax,0x8
c0010df9:	75 e7                	jne    c0010de2 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010dfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010dff:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e02:	83 fd 09             	cmp    ebp,0x9
c0010e05:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e07:	75 07                	jne    c0010e10 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e09:	b8 e8 0b 01 c0       	mov    eax,0xc0010be8
c0010e0e:	eb 31                	jmp    c0010e41 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e10:	83 f8 01             	cmp    eax,0x1
c0010e13:	75 0c                	jne    c0010e21 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e15:	f7 d7                	not    edi
c0010e17:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e1d:	31 c0                	xor    eax,eax
c0010e1f:	eb 20                	jmp    c0010e41 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e21:	85 c0                	test   eax,eax
c0010e23:	75 1c                	jne    c0010e41 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e25:	8b 04 ad 80 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddf80]
c0010e2c:	eb 13                	jmp    c0010e41 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e2e:	46                   	inc    esi
c0010e2f:	41                   	inc    ecx
c0010e30:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e36:	83 f9 08             	cmp    ecx,0x8
c0010e39:	0f 85 36 ff ff ff    	jne    c0010d75 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e3f:	eb dc                	jmp    c0010e1d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e41:	5a                   	pop    edx
c0010e42:	5b                   	pop    ebx
c0010e43:	5e                   	pop    esi
c0010e44:	5f                   	pop    edi
c0010e45:	5d                   	pop    ebp
c0010e46:	c3                   	ret    

c0010e47 <KiCheckSignalZ>:
c0010e47:	83 ec 10             	sub    esp,0x10
c0010e4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e4e:	50                   	push   eax
c0010e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e57:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e5d:	e8 f6 fe ff ff       	call   c0010d58 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e62:	5a                   	pop    edx
c0010e63:	31 d2                	xor    edx,edx
c0010e65:	59                   	pop    ecx
c0010e66:	85 c0                	test   eax,eax
c0010e68:	74 19                	je     c0010e83 <KiCheckSignalZ+0x3c>
c0010e6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e70:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e73:	89 02                	mov    DWORD PTR [edx],eax
c0010e75:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e80:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e83:	89 d0                	mov    eax,edx
c0010e85:	83 c4 10             	add    esp,0x10
c0010e88:	c3                   	ret    

c0010e89 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e89:	56                   	push   esi
c0010e8a:	53                   	push   ebx
c0010e8b:	bb 01 00 00 00       	mov    ebx,0x1
c0010e90:	52                   	push   edx
c0010e91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e99:	d3 e3                	shl    ebx,cl
c0010e9b:	83 f9 10             	cmp    ecx,0x10
c0010e9e:	7f 08                	jg     c0010ea8 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ea0:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010ea6:	75 10                	jne    c0010eb8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010ea8:	83 ec 0c             	sub    esp,0xc
c0010eab:	68 ed 0c 02 c0       	push   0xc0020ced
c0010eb0:	e8 8a f9 ff ff       	call   c001083f <KePanic(char const*)>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	f7 d3                	not    ebx
c0010eba:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ec0:	58                   	pop    eax
c0010ec1:	5b                   	pop    ebx
c0010ec2:	5e                   	pop    esi
c0010ec3:	c3                   	ret    

c0010ec4 <KiFinishSignalZ>:
c0010ec4:	53                   	push   ebx
c0010ec5:	83 ec 10             	sub    esp,0x10
c0010ec8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ecc:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010ecf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ed7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010edd:	e8 a7 ff ff ff       	call   c0010e89 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010ee2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ee8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010eef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010ef6:	83 c4 18             	add    esp,0x18
c0010ef9:	5b                   	pop    ebx
c0010efa:	c3                   	ret    

c0010efb <SysSeekDir(regs*)>:
c0010efb:	31 c0                	xor    eax,eax
c0010efd:	31 d2                	xor    edx,edx
c0010eff:	c3                   	ret    

c0010f00 <SysTellDir(regs*)>:
c0010f00:	31 c0                	xor    eax,eax
c0010f02:	31 d2                	xor    edx,edx
c0010f04:	c3                   	ret    

c0010f05 <SysVerify(regs*)>:
c0010f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f09:	31 d2                	xor    edx,edx
c0010f0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f0e:	c3                   	ret    

c0010f0f <SysGetArgc(regs*)>:
c0010f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f17:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f1d:	89 c2                	mov    edx,eax
c0010f1f:	c1 fa 1f             	sar    edx,0x1f
c0010f22:	c3                   	ret    

c0010f23 <SysTTYName(regs*)>:
c0010f23:	b8 01 00 00 00       	mov    eax,0x1
c0010f28:	31 d2                	xor    edx,edx
c0010f2a:	c3                   	ret    

c0010f2b <SysFormatDisk(regs*)>:
c0010f2b:	56                   	push   esi
c0010f2c:	53                   	push   ebx
c0010f2d:	83 ec 04             	sub    esp,0x4
c0010f30:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f36:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f3a:	eb 2a                	jmp    c0010f66 <SysFormatDisk(regs*)+0x3b>
c0010f3c:	83 ec 0c             	sub    esp,0xc
c0010f3f:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f42:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f45:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f47:	51                   	push   ecx
c0010f48:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f4b:	51                   	push   ecx
c0010f4c:	50                   	push   eax
c0010f4d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f54:	50                   	push   eax
c0010f55:	53                   	push   ebx
c0010f56:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f59:	83 c4 20             	add    esp,0x20
c0010f5c:	89 c1                	mov    ecx,eax
c0010f5e:	83 f8 08             	cmp    eax,0x8
c0010f61:	75 14                	jne    c0010f77 <SysFormatDisk(regs*)+0x4c>
c0010f63:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f66:	85 db                	test   ebx,ebx
c0010f68:	75 d2                	jne    c0010f3c <SysFormatDisk(regs*)+0x11>
c0010f6a:	b8 03 00 00 00       	mov    eax,0x3
c0010f6f:	31 d2                	xor    edx,edx
c0010f71:	83 c4 04             	add    esp,0x4
c0010f74:	5b                   	pop    ebx
c0010f75:	5e                   	pop    esi
c0010f76:	c3                   	ret    
c0010f77:	85 c0                	test   eax,eax
c0010f79:	74 13                	je     c0010f8e <SysFormatDisk(regs*)+0x63>
c0010f7b:	31 d2                	xor    edx,edx
c0010f7d:	b8 01 00 00 00       	mov    eax,0x1
c0010f82:	83 f9 09             	cmp    ecx,0x9
c0010f85:	74 ea                	je     c0010f71 <SysFormatDisk(regs*)+0x46>
c0010f87:	b8 02 00 00 00       	mov    eax,0x2
c0010f8c:	eb e1                	jmp    c0010f6f <SysFormatDisk(regs*)+0x44>
c0010f8e:	31 c0                	xor    eax,eax
c0010f90:	eb dd                	jmp    c0010f6f <SysFormatDisk(regs*)+0x44>

c0010f92 <SysSetDiskVolumeLabel(regs*)>:
c0010f92:	56                   	push   esi
c0010f93:	53                   	push   ebx
c0010f94:	83 ec 04             	sub    esp,0x4
c0010f97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f9b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f9e:	83 f8 19             	cmp    eax,0x19
c0010fa1:	77 33                	ja     c0010fd6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fa3:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010faa:	85 c9                	test   ecx,ecx
c0010fac:	74 28                	je     c0010fd6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fae:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fb1:	85 db                	test   ebx,ebx
c0010fb3:	74 21                	je     c0010fd6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fb5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010fbb:	85 d2                	test   edx,edx
c0010fbd:	74 17                	je     c0010fd6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fbf:	8b 32                	mov    esi,DWORD PTR [edx]
c0010fc1:	53                   	push   ebx
c0010fc2:	50                   	push   eax
c0010fc3:	51                   	push   ecx
c0010fc4:	52                   	push   edx
c0010fc5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010fc8:	83 c4 10             	add    esp,0x10
c0010fcb:	89 c2                	mov    edx,eax
c0010fcd:	c1 fa 1f             	sar    edx,0x1f
c0010fd0:	83 c4 04             	add    esp,0x4
c0010fd3:	5b                   	pop    ebx
c0010fd4:	5e                   	pop    esi
c0010fd5:	c3                   	ret    
c0010fd6:	83 c4 04             	add    esp,0x4
c0010fd9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fde:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fe3:	5b                   	pop    ebx
c0010fe4:	5e                   	pop    esi
c0010fe5:	c3                   	ret    

c0010fe6 <SysGetDiskVolumeLabel(regs*)>:
c0010fe6:	57                   	push   edi
c0010fe7:	56                   	push   esi
c0010fe8:	53                   	push   ebx
c0010fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fed:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ff0:	83 fa 19             	cmp    edx,0x19
c0010ff3:	77 3c                	ja     c0011031 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ff5:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010ffc:	85 c9                	test   ecx,ecx
c0010ffe:	74 31                	je     c0011031 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011000:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011003:	85 db                	test   ebx,ebx
c0011005:	74 2a                	je     c0011031 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011007:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001100a:	85 f6                	test   esi,esi
c001100c:	74 23                	je     c0011031 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001100e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011014:	85 c0                	test   eax,eax
c0011016:	74 19                	je     c0011031 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	8b 38                	mov    edi,DWORD PTR [eax]
c001101d:	56                   	push   esi
c001101e:	53                   	push   ebx
c001101f:	52                   	push   edx
c0011020:	51                   	push   ecx
c0011021:	50                   	push   eax
c0011022:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011025:	83 c4 20             	add    esp,0x20
c0011028:	89 c2                	mov    edx,eax
c001102a:	c1 fa 1f             	sar    edx,0x1f
c001102d:	5b                   	pop    ebx
c001102e:	5e                   	pop    esi
c001102f:	5f                   	pop    edi
c0011030:	c3                   	ret    
c0011031:	5b                   	pop    ebx
c0011032:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011037:	5e                   	pop    esi
c0011038:	ba ff ff ff ff       	mov    edx,0xffffffff
c001103d:	5f                   	pop    edi
c001103e:	c3                   	ret    

c001103f <SysShutdown(regs*)>:
c001103f:	57                   	push   edi
c0011040:	56                   	push   esi
c0011041:	83 ec 04             	sub    esp,0x4
c0011044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011048:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001104b:	85 c0                	test   eax,eax
c001104d:	74 1e                	je     c001106d <SysShutdown(regs*)+0x2e>
c001104f:	83 f8 01             	cmp    eax,0x1
c0011052:	74 5f                	je     c00110b3 <SysShutdown(regs*)+0x74>
c0011054:	be ff ff ff ff       	mov    esi,0xffffffff
c0011059:	bf ff ff ff ff       	mov    edi,0xffffffff
c001105e:	83 f8 02             	cmp    eax,0x2
c0011061:	74 32                	je     c0011095 <SysShutdown(regs*)+0x56>
c0011063:	83 c4 04             	add    esp,0x4
c0011066:	89 f0                	mov    eax,esi
c0011068:	89 fa                	mov    edx,edi
c001106a:	5e                   	pop    esi
c001106b:	5f                   	pop    edi
c001106c:	c3                   	ret    
c001106d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011072:	be ff ff ff ff       	mov    esi,0xffffffff
c0011077:	bf ff ff ff ff       	mov    edi,0xffffffff
c001107c:	8b 10                	mov    edx,DWORD PTR [eax]
c001107e:	6a 00                	push   0x0
c0011080:	6a 00                	push   0x0
c0011082:	6a 00                	push   0x0
c0011084:	50                   	push   eax
c0011085:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011088:	83 c4 10             	add    esp,0x10
c001108b:	89 f0                	mov    eax,esi
c001108d:	83 c4 04             	add    esp,0x4
c0011090:	89 fa                	mov    edx,edi
c0011092:	5e                   	pop    esi
c0011093:	5f                   	pop    edi
c0011094:	c3                   	ret    
c0011095:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001109a:	8b 10                	mov    edx,DWORD PTR [eax]
c001109c:	6a 00                	push   0x0
c001109e:	6a 00                	push   0x0
c00110a0:	6a 01                	push   0x1
c00110a2:	50                   	push   eax
c00110a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	89 f0                	mov    eax,esi
c00110ab:	83 c4 04             	add    esp,0x4
c00110ae:	89 fa                	mov    edx,edi
c00110b0:	5e                   	pop    esi
c00110b1:	5f                   	pop    edi
c00110b2:	c3                   	ret    
c00110b3:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110b8:	85 c0                	test   eax,eax
c00110ba:	74 02                	je     c00110be <SysShutdown(regs*)+0x7f>
c00110bc:	ff d0                	call   eax
c00110be:	83 c4 04             	add    esp,0x4
c00110c1:	31 f6                	xor    esi,esi
c00110c3:	31 ff                	xor    edi,edi
c00110c5:	89 f0                	mov    eax,esi
c00110c7:	5e                   	pop    esi
c00110c8:	89 fa                	mov    edx,edi
c00110ca:	5f                   	pop    edi
c00110cb:	c3                   	ret    

c00110cc <SysRealpath(regs*)>:
c00110cc:	53                   	push   ebx
c00110cd:	83 ec 08             	sub    esp,0x8
c00110d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d4:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110d7:	85 c9                	test   ecx,ecx
c00110d9:	74 37                	je     c0011112 <SysRealpath(regs*)+0x46>
c00110db:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110de:	31 d2                	xor    edx,edx
c00110e0:	b8 01 00 00 00       	mov    eax,0x1
c00110e5:	85 db                	test   ebx,ebx
c00110e7:	75 05                	jne    c00110ee <SysRealpath(regs*)+0x22>
c00110e9:	83 c4 08             	add    esp,0x8
c00110ec:	5b                   	pop    ebx
c00110ed:	c3                   	ret    
c00110ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110f3:	83 ec 04             	sub    esp,0x4
c00110f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110f9:	05 0c 01 00 00       	add    eax,0x10c
c00110fe:	50                   	push   eax
c00110ff:	51                   	push   ecx
c0011100:	53                   	push   ebx
c0011101:	e8 1a 9c ff ff       	call   c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	31 c0                	xor    eax,eax
c001110b:	31 d2                	xor    edx,edx
c001110d:	83 c4 08             	add    esp,0x8
c0011110:	5b                   	pop    ebx
c0011111:	c3                   	ret    
c0011112:	b8 01 00 00 00       	mov    eax,0x1
c0011117:	31 d2                	xor    edx,edx
c0011119:	eb f2                	jmp    c001110d <SysRealpath(regs*)+0x41>

c001111b <SysReadDir(regs*)>:
c001111b:	53                   	push   ebx
c001111c:	83 ec 18             	sub    esp,0x18
c001111f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011123:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011126:	83 f8 02             	cmp    eax,0x2
c0011129:	76 4f                	jbe    c001117a <SysReadDir(regs*)+0x5f>
c001112b:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011132:	77 52                	ja     c0011186 <SysReadDir(regs*)+0x6b>
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	50                   	push   eax
c0011138:	e8 5a 83 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	85 c0                	test   eax,eax
c0011142:	74 42                	je     c0011186 <SysReadDir(regs*)+0x6b>
c0011144:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001114c:	83 ec 0c             	sub    esp,0xc
c001114f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011151:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011155:	51                   	push   ecx
c0011156:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011159:	51                   	push   ecx
c001115a:	6a 00                	push   0x0
c001115c:	68 10 01 00 00       	push   0x110
c0011161:	50                   	push   eax
c0011162:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011165:	83 c4 20             	add    esp,0x20
c0011168:	89 c1                	mov    ecx,eax
c001116a:	85 c0                	test   eax,eax
c001116c:	74 27                	je     c0011195 <SysReadDir(regs*)+0x7a>
c001116e:	31 d2                	xor    edx,edx
c0011170:	b8 02 00 00 00       	mov    eax,0x2
c0011175:	83 f9 07             	cmp    ecx,0x7
c0011178:	75 16                	jne    c0011190 <SysReadDir(regs*)+0x75>
c001117a:	b8 01 00 00 00       	mov    eax,0x1
c001117f:	31 d2                	xor    edx,edx
c0011181:	83 c4 18             	add    esp,0x18
c0011184:	5b                   	pop    ebx
c0011185:	c3                   	ret    
c0011186:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001118b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011190:	83 c4 18             	add    esp,0x18
c0011193:	5b                   	pop    ebx
c0011194:	c3                   	ret    
c0011195:	31 c0                	xor    eax,eax
c0011197:	31 d2                	xor    edx,edx
c0011199:	eb e6                	jmp    c0011181 <SysReadDir(regs*)+0x66>

c001119b <SysIsATTY(regs*)>:
c001119b:	83 ec 0c             	sub    esp,0xc
c001119e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111a5:	83 f8 02             	cmp    eax,0x2
c00111a8:	76 07                	jbe    c00111b1 <SysIsATTY(regs*)+0x16>
c00111aa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111af:	75 26                	jne    c00111d7 <SysIsATTY(regs*)+0x3c>
c00111b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111bf:	85 c0                	test   eax,eax
c00111c1:	74 24                	je     c00111e7 <SysIsATTY(regs*)+0x4c>
c00111c3:	83 ec 0c             	sub    esp,0xc
c00111c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00111c8:	50                   	push   eax
c00111c9:	ff 12                	call   DWORD PTR [edx]
c00111cb:	83 c4 10             	add    esp,0x10
c00111ce:	31 d2                	xor    edx,edx
c00111d0:	0f b6 c0             	movzx  eax,al
c00111d3:	83 c4 0c             	add    esp,0xc
c00111d6:	c3                   	ret    
c00111d7:	83 ec 0c             	sub    esp,0xc
c00111da:	50                   	push   eax
c00111db:	e8 b7 82 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	85 c0                	test   eax,eax
c00111e5:	75 dc                	jne    c00111c3 <SysIsATTY(regs*)+0x28>
c00111e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111f1:	83 c4 0c             	add    esp,0xc
c00111f4:	c3                   	ret    

c00111f5 <SysSeek(regs*)>:
c00111f5:	56                   	push   esi
c00111f6:	53                   	push   ebx
c00111f7:	83 ec 04             	sub    esp,0x4
c00111fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111fe:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011201:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011204:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c001120a:	77 33                	ja     c001123f <SysSeek(regs*)+0x4a>
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	51                   	push   ecx
c0011210:	e8 82 82 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011215:	83 c4 0c             	add    esp,0xc
c0011218:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001121b:	31 db                	xor    ebx,ebx
c001121d:	53                   	push   ebx
c001121e:	51                   	push   ecx
c001121f:	50                   	push   eax
c0011220:	e8 2b 9e ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011225:	83 c4 10             	add    esp,0x10
c0011228:	85 c0                	test   eax,eax
c001122a:	0f 95 c0             	setne  al
c001122d:	0f b6 c0             	movzx  eax,al
c0011230:	31 d2                	xor    edx,edx
c0011232:	f7 d8                	neg    eax
c0011234:	83 d2 00             	adc    edx,0x0
c0011237:	83 c4 04             	add    esp,0x4
c001123a:	f7 da                	neg    edx
c001123c:	5b                   	pop    ebx
c001123d:	5e                   	pop    esi
c001123e:	c3                   	ret    
c001123f:	83 c4 04             	add    esp,0x4
c0011242:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011247:	ba ff ff ff ff       	mov    edx,0xffffffff
c001124c:	5b                   	pop    ebx
c001124d:	5e                   	pop    esi
c001124e:	c3                   	ret    

c001124f <SysTell(regs*)>:
c001124f:	53                   	push   ebx
c0011250:	83 ec 08             	sub    esp,0x8
c0011253:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011257:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001125a:	83 f8 02             	cmp    eax,0x2
c001125d:	76 4e                	jbe    c00112ad <SysTell(regs*)+0x5e>
c001125f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011264:	76 19                	jbe    c001127f <SysTell(regs*)+0x30>
c0011266:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011269:	31 d2                	xor    edx,edx
c001126b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011271:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011278:	83 c4 08             	add    esp,0x8
c001127b:	31 c0                	xor    eax,eax
c001127d:	5b                   	pop    ebx
c001127e:	c3                   	ret    
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	50                   	push   eax
c0011283:	e8 0f 82 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011288:	5a                   	pop    edx
c0011289:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001128c:	59                   	pop    ecx
c001128d:	53                   	push   ebx
c001128e:	50                   	push   eax
c001128f:	e8 12 9e ff ff       	call   c000b0a6 <File::tell(unsigned long long*)>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	85 c0                	test   eax,eax
c0011299:	0f 95 c0             	setne  al
c001129c:	0f b6 c0             	movzx  eax,al
c001129f:	31 d2                	xor    edx,edx
c00112a1:	f7 d8                	neg    eax
c00112a3:	83 d2 00             	adc    edx,0x0
c00112a6:	83 c4 08             	add    esp,0x8
c00112a9:	f7 da                	neg    edx
c00112ab:	5b                   	pop    ebx
c00112ac:	c3                   	ret    
c00112ad:	83 c4 08             	add    esp,0x8
c00112b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ba:	5b                   	pop    ebx
c00112bb:	c3                   	ret    

c00112bc <SysSize(regs*)>:
c00112bc:	53                   	push   ebx
c00112bd:	83 ec 18             	sub    esp,0x18
c00112c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112c4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112c7:	83 f8 02             	cmp    eax,0x2
c00112ca:	76 54                	jbe    c0011320 <SysSize(regs*)+0x64>
c00112cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112d1:	76 19                	jbe    c00112ec <SysSize(regs*)+0x30>
c00112d3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112d6:	31 d2                	xor    edx,edx
c00112d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112de:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112e5:	83 c4 18             	add    esp,0x18
c00112e8:	31 c0                	xor    eax,eax
c00112ea:	5b                   	pop    ebx
c00112eb:	c3                   	ret    
c00112ec:	83 ec 0c             	sub    esp,0xc
c00112ef:	50                   	push   eax
c00112f0:	e8 a2 81 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c00112f5:	83 c4 0c             	add    esp,0xc
c00112f8:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112fc:	52                   	push   edx
c00112fd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011300:	52                   	push   edx
c0011301:	50                   	push   eax
c0011302:	e8 37 9f ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	85 c0                	test   eax,eax
c001130c:	0f 95 c0             	setne  al
c001130f:	0f b6 c0             	movzx  eax,al
c0011312:	31 d2                	xor    edx,edx
c0011314:	f7 d8                	neg    eax
c0011316:	83 d2 00             	adc    edx,0x0
c0011319:	83 c4 18             	add    esp,0x18
c001131c:	f7 da                	neg    edx
c001131e:	5b                   	pop    ebx
c001131f:	c3                   	ret    
c0011320:	83 c4 18             	add    esp,0x18
c0011323:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011328:	ba ff ff ff ff       	mov    edx,0xffffffff
c001132d:	5b                   	pop    ebx
c001132e:	c3                   	ret    

c001132f <SysSizeFromFilename(regs*)>:
c001132f:	57                   	push   edi
c0011330:	56                   	push   esi
c0011331:	53                   	push   ebx
c0011332:	83 ec 20             	sub    esp,0x20
c0011335:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011339:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001133c:	83 fb 02             	cmp    ebx,0x2
c001133f:	0f 86 8a 00 00 00    	jbe    c00113cf <SysSizeFromFilename(regs*)+0xa0>
c0011345:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001134b:	76 1b                	jbe    c0011368 <SysSizeFromFilename(regs*)+0x39>
c001134d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011350:	31 d2                	xor    edx,edx
c0011352:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011358:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001135f:	83 c4 20             	add    esp,0x20
c0011362:	31 c0                	xor    eax,eax
c0011364:	5b                   	pop    ebx
c0011365:	5e                   	pop    esi
c0011366:	5f                   	pop    edi
c0011367:	c3                   	ret    
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	68 14 01 00 00       	push   0x114
c0011370:	e8 17 67 ff ff       	call   c0007a8c <malloc>
c0011375:	89 c7                	mov    edi,eax
c0011377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001137c:	83 c4 0c             	add    esp,0xc
c001137f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011382:	50                   	push   eax
c0011383:	53                   	push   ebx
c0011384:	57                   	push   edi
c0011385:	e8 4c 9b ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c001138a:	83 c4 0c             	add    esp,0xc
c001138d:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011391:	50                   	push   eax
c0011392:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011395:	52                   	push   edx
c0011396:	57                   	push   edi
c0011397:	e8 a2 9e ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c001139c:	83 c4 10             	add    esp,0x10
c001139f:	85 ff                	test   edi,edi
c00113a1:	74 14                	je     c00113b7 <SysSizeFromFilename(regs*)+0x88>
c00113a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113a7:	83 ec 0c             	sub    esp,0xc
c00113aa:	8b 17                	mov    edx,DWORD PTR [edi]
c00113ac:	57                   	push   edi
c00113ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113b0:	83 c4 10             	add    esp,0x10
c00113b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113b7:	85 c0                	test   eax,eax
c00113b9:	0f 95 c0             	setne  al
c00113bc:	0f b6 c0             	movzx  eax,al
c00113bf:	31 d2                	xor    edx,edx
c00113c1:	f7 d8                	neg    eax
c00113c3:	83 d2 00             	adc    edx,0x0
c00113c6:	83 c4 20             	add    esp,0x20
c00113c9:	f7 da                	neg    edx
c00113cb:	5b                   	pop    ebx
c00113cc:	5e                   	pop    esi
c00113cd:	5f                   	pop    edi
c00113ce:	c3                   	ret    
c00113cf:	83 c4 20             	add    esp,0x20
c00113d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113dc:	5b                   	pop    ebx
c00113dd:	5e                   	pop    esi
c00113de:	5f                   	pop    edi
c00113df:	c3                   	ret    

c00113e0 <SysClose(regs*)>:
c00113e0:	53                   	push   ebx
c00113e1:	83 ec 08             	sub    esp,0x8
c00113e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113eb:	83 f8 02             	cmp    eax,0x2
c00113ee:	76 41                	jbe    c0011431 <SysClose(regs*)+0x51>
c00113f0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113f6:	83 fa 01             	cmp    edx,0x1
c00113f9:	76 2d                	jbe    c0011428 <SysClose(regs*)+0x48>
c00113fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011400:	77 2f                	ja     c0011431 <SysClose(regs*)+0x51>
c0011402:	83 ec 0c             	sub    esp,0xc
c0011405:	50                   	push   eax
c0011406:	e8 8c 80 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c001140b:	89 c3                	mov    ebx,eax
c001140d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011410:	e8 db 9b ff ff       	call   c000aff0 <File::close()>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	85 db                	test   ebx,ebx
c001141a:	74 0c                	je     c0011428 <SysClose(regs*)+0x48>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011421:	53                   	push   ebx
c0011422:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	83 c4 08             	add    esp,0x8
c001142b:	31 c0                	xor    eax,eax
c001142d:	31 d2                	xor    edx,edx
c001142f:	5b                   	pop    ebx
c0011430:	c3                   	ret    
c0011431:	83 c4 08             	add    esp,0x8
c0011434:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011439:	ba ff ff ff ff       	mov    edx,0xffffffff
c001143e:	5b                   	pop    ebx
c001143f:	c3                   	ret    

c0011440 <SysOpenDir(regs*)>:
c0011440:	56                   	push   esi
c0011441:	53                   	push   ebx
c0011442:	83 ec 04             	sub    esp,0x4
c0011445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011449:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001144c:	85 c9                	test   ecx,ecx
c001144e:	74 5d                	je     c00114ad <SysOpenDir(regs*)+0x6d>
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	68 14 01 00 00       	push   0x114
c0011458:	e8 2f 66 ff ff       	call   c0007a8c <malloc>
c001145d:	89 c6                	mov    esi,eax
c001145f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011464:	83 c4 0c             	add    esp,0xc
c0011467:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001146a:	50                   	push   eax
c001146b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001146e:	52                   	push   edx
c001146f:	56                   	push   esi
c0011470:	e8 87 9f ff ff       	call   c000b3fc <Directory::Directory(char const*, Process*)>
c0011475:	83 c4 10             	add    esp,0x10
c0011478:	85 f6                	test   esi,esi
c001147a:	74 31                	je     c00114ad <SysOpenDir(regs*)+0x6d>
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	56                   	push   esi
c0011480:	e8 33 a0 ff ff       	call   c000b4b8 <Directory::open()>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	85 c0                	test   eax,eax
c001148a:	75 21                	jne    c00114ad <SysOpenDir(regs*)+0x6d>
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	56                   	push   esi
c0011490:	e8 05 7d ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c0011495:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011498:	83 c4 10             	add    esp,0x10
c001149b:	89 02                	mov    DWORD PTR [edx],eax
c001149d:	c1 f8 1f             	sar    eax,0x1f
c00114a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114a3:	83 c4 04             	add    esp,0x4
c00114a6:	31 c0                	xor    eax,eax
c00114a8:	31 d2                	xor    edx,edx
c00114aa:	5b                   	pop    ebx
c00114ab:	5e                   	pop    esi
c00114ac:	c3                   	ret    
c00114ad:	83 c4 04             	add    esp,0x4
c00114b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ba:	5b                   	pop    ebx
c00114bb:	5e                   	pop    esi
c00114bc:	c3                   	ret    

c00114bd <SysMakeDir(regs*)>:
c00114bd:	56                   	push   esi
c00114be:	53                   	push   ebx
c00114bf:	83 ec 10             	sub    esp,0x10
c00114c2:	68 14 01 00 00       	push   0x114
c00114c7:	e8 c0 65 ff ff       	call   c0007a8c <malloc>
c00114cc:	89 c3                	mov    ebx,eax
c00114ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114d3:	83 c4 0c             	add    esp,0xc
c00114d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114d9:	50                   	push   eax
c00114da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114de:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114e1:	52                   	push   edx
c00114e2:	53                   	push   ebx
c00114e3:	e8 14 9f ff ff       	call   c000b3fc <Directory::Directory(char const*, Process*)>
c00114e8:	83 c4 10             	add    esp,0x10
c00114eb:	85 db                	test   ebx,ebx
c00114ed:	74 2c                	je     c001151b <SysMakeDir(regs*)+0x5e>
c00114ef:	83 ec 0c             	sub    esp,0xc
c00114f2:	53                   	push   ebx
c00114f3:	e8 a0 a1 ff ff       	call   c000b698 <Directory::create()>
c00114f8:	89 c6                	mov    esi,eax
c00114fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011502:	31 c0                	xor    eax,eax
c0011504:	83 c4 10             	add    esp,0x10
c0011507:	85 f6                	test   esi,esi
c0011509:	0f 95 c0             	setne  al
c001150c:	31 d2                	xor    edx,edx
c001150e:	f7 d8                	neg    eax
c0011510:	83 d2 00             	adc    edx,0x0
c0011513:	83 c4 04             	add    esp,0x4
c0011516:	f7 da                	neg    edx
c0011518:	5b                   	pop    ebx
c0011519:	5e                   	pop    esi
c001151a:	c3                   	ret    
c001151b:	83 c4 04             	add    esp,0x4
c001151e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011528:	5b                   	pop    ebx
c0011529:	5e                   	pop    esi
c001152a:	c3                   	ret    

c001152b <SysCloseDir(regs*)>:
c001152b:	53                   	push   ebx
c001152c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011531:	83 ec 08             	sub    esp,0x8
c0011534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011538:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001153b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011540:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011543:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011549:	77 2a                	ja     c0011575 <SysCloseDir(regs*)+0x4a>
c001154b:	83 ec 0c             	sub    esp,0xc
c001154e:	51                   	push   ecx
c001154f:	e8 43 7f ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0011554:	89 c3                	mov    ebx,eax
c0011556:	89 04 24             	mov    DWORD PTR [esp],eax
c0011559:	e8 b6 9f ff ff       	call   c000b514 <Directory::close()>
c001155e:	83 c4 10             	add    esp,0x10
c0011561:	85 db                	test   ebx,ebx
c0011563:	74 0c                	je     c0011571 <SysCloseDir(regs*)+0x46>
c0011565:	83 ec 0c             	sub    esp,0xc
c0011568:	8b 03                	mov    eax,DWORD PTR [ebx]
c001156a:	53                   	push   ebx
c001156b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	31 c0                	xor    eax,eax
c0011573:	31 d2                	xor    edx,edx
c0011575:	83 c4 08             	add    esp,0x8
c0011578:	5b                   	pop    ebx
c0011579:	c3                   	ret    

c001157a <SysWait(regs*)>:
c001157a:	83 ec 10             	sub    esp,0x10
c001157d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011581:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011584:	52                   	push   edx
c0011585:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011588:	51                   	push   ecx
c0011589:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001158c:	50                   	push   eax
c001158d:	e8 e6 3c 00 00       	call   c0015278 <waitTask(int, int*, int)>
c0011592:	89 c2                	mov    edx,eax
c0011594:	83 c4 1c             	add    esp,0x1c
c0011597:	c1 fa 1f             	sar    edx,0x1f
c001159a:	c3                   	ret    

c001159b <SysNotImpl(regs*)>:
c001159b:	83 ec 18             	sub    esp,0x18
c001159e:	68 fe 0c 02 c0       	push   0xc0020cfe
c00115a3:	e8 97 f2 ff ff       	call   c001083f <KePanic(char const*)>
c00115a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115b2:	83 c4 1c             	add    esp,0x1c
c00115b5:	c3                   	ret    

c00115b6 <SysPanic(regs*)>:
c00115b6:	83 ec 18             	sub    esp,0x18
c00115b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115c0:	50                   	push   eax
c00115c1:	e8 79 f2 ff ff       	call   c001083f <KePanic(char const*)>
c00115c6:	b8 01 00 00 00       	mov    eax,0x1
c00115cb:	31 d2                	xor    edx,edx
c00115cd:	83 c4 1c             	add    esp,0x1c
c00115d0:	c3                   	ret    

c00115d1 <SysRmdir(regs*)>:
c00115d1:	56                   	push   esi
c00115d2:	53                   	push   ebx
c00115d3:	83 ec 20             	sub    esp,0x20
c00115d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00115da:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115dd:	68 14 01 00 00       	push   0x114
c00115e2:	e8 a5 64 ff ff       	call   c0007a8c <malloc>
c00115e7:	83 c4 0c             	add    esp,0xc
c00115ea:	89 c3                	mov    ebx,eax
c00115ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115f4:	50                   	push   eax
c00115f5:	56                   	push   esi
c00115f6:	53                   	push   ebx
c00115f7:	e8 da 98 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c00115fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115ff:	e8 06 9b ff ff       	call   c000b10a <File::unlink()>
c0011604:	83 c4 10             	add    esp,0x10
c0011607:	85 db                	test   ebx,ebx
c0011609:	74 14                	je     c001161f <SysRmdir(regs*)+0x4e>
c001160b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001160f:	83 ec 0c             	sub    esp,0xc
c0011612:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011614:	53                   	push   ebx
c0011615:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161f:	85 c0                	test   eax,eax
c0011621:	0f 95 c0             	setne  al
c0011624:	0f b6 c0             	movzx  eax,al
c0011627:	31 d2                	xor    edx,edx
c0011629:	f7 d8                	neg    eax
c001162b:	83 d2 00             	adc    edx,0x0
c001162e:	83 c4 14             	add    esp,0x14
c0011631:	f7 da                	neg    edx
c0011633:	5b                   	pop    ebx
c0011634:	5e                   	pop    esi
c0011635:	c3                   	ret    

c0011636 <SysUnlink(regs*)>:
c0011636:	56                   	push   esi
c0011637:	53                   	push   ebx
c0011638:	83 ec 20             	sub    esp,0x20
c001163b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001163f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011642:	68 14 01 00 00       	push   0x114
c0011647:	e8 40 64 ff ff       	call   c0007a8c <malloc>
c001164c:	83 c4 0c             	add    esp,0xc
c001164f:	89 c3                	mov    ebx,eax
c0011651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011656:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011659:	50                   	push   eax
c001165a:	56                   	push   esi
c001165b:	53                   	push   ebx
c001165c:	e8 75 98 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0011661:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011664:	e8 a1 9a ff ff       	call   c000b10a <File::unlink()>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	85 db                	test   ebx,ebx
c001166e:	74 14                	je     c0011684 <SysUnlink(regs*)+0x4e>
c0011670:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011674:	83 ec 0c             	sub    esp,0xc
c0011677:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011679:	53                   	push   ebx
c001167a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001167d:	83 c4 10             	add    esp,0x10
c0011680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011684:	85 c0                	test   eax,eax
c0011686:	0f 95 c0             	setne  al
c0011689:	0f b6 c0             	movzx  eax,al
c001168c:	31 d2                	xor    edx,edx
c001168e:	f7 d8                	neg    eax
c0011690:	83 d2 00             	adc    edx,0x0
c0011693:	83 c4 14             	add    esp,0x14
c0011696:	f7 da                	neg    edx
c0011698:	5b                   	pop    ebx
c0011699:	5e                   	pop    esi
c001169a:	c3                   	ret    

c001169b <SysGetArgv(regs*)>:
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116a2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116a5:	85 c0                	test   eax,eax
c00116a7:	78 2c                	js     c00116d5 <SysGetArgv(regs*)+0x3a>
c00116a9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116af:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116b2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116b8:	7d 1b                	jge    c00116d5 <SysGetArgv(regs*)+0x3a>
c00116ba:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116c1:	85 c0                	test   eax,eax
c00116c3:	74 18                	je     c00116dd <SysGetArgv(regs*)+0x42>
c00116c5:	83 ec 08             	sub    esp,0x8
c00116c8:	50                   	push   eax
c00116c9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116cc:	50                   	push   eax
c00116cd:	e8 5e ef fe ff       	call   c0000630 <strcpy>
c00116d2:	83 c4 10             	add    esp,0x10
c00116d5:	31 c0                	xor    eax,eax
c00116d7:	31 d2                	xor    edx,edx
c00116d9:	83 c4 0c             	add    esp,0xc
c00116dc:	c3                   	ret    
c00116dd:	b8 01 00 00 00       	mov    eax,0x1
c00116e2:	31 d2                	xor    edx,edx
c00116e4:	83 c4 0c             	add    esp,0xc
c00116e7:	c3                   	ret    

c00116e8 <SysUSleep(regs*)>:
c00116e8:	83 ec 1c             	sub    esp,0x1c
c00116eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116f2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116f5:	6a 00                	push   0x0
c00116f7:	6a 64                	push   0x64
c00116f9:	52                   	push   edx
c00116fa:	50                   	push   eax
c00116fb:	e8 d0 ce 00 00       	call   c001e5d0 <__udivdi3>
c0011700:	83 c4 14             	add    esp,0x14
c0011703:	50                   	push   eax
c0011704:	e8 53 3c 00 00       	call   c001535c <milliTenthSleep(unsigned int)>
c0011709:	31 c0                	xor    eax,eax
c001170b:	31 d2                	xor    edx,edx
c001170d:	83 c4 1c             	add    esp,0x1c
c0011710:	c3                   	ret    

c0011711 <SysSpawn(regs*)>:
c0011711:	56                   	push   esi
c0011712:	53                   	push   ebx
c0011713:	83 ec 04             	sub    esp,0x4
c0011716:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001171a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001171d:	85 f6                	test   esi,esi
c001171f:	75 0a                	jne    c001172b <SysSpawn(regs*)+0x1a>
c0011721:	83 c4 04             	add    esp,0x4
c0011724:	31 c0                	xor    eax,eax
c0011726:	31 d2                	xor    edx,edx
c0011728:	5b                   	pop    ebx
c0011729:	5e                   	pop    esi
c001172a:	c3                   	ret    
c001172b:	83 ec 0c             	sub    esp,0xc
c001172e:	68 24 07 00 00       	push   0x724
c0011733:	e8 54 63 ff ff       	call   c0007a8c <malloc>
c0011738:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001173b:	89 c6                	mov    esi,eax
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	31 c0                	xor    eax,eax
c0011742:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011745:	85 c9                	test   ecx,ecx
c0011747:	75 08                	jne    c0011751 <SysSpawn(regs*)+0x40>
c0011749:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001174e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011751:	52                   	push   edx
c0011752:	50                   	push   eax
c0011753:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011756:	50                   	push   eax
c0011757:	56                   	push   esi
c0011758:	e8 6b 32 00 00       	call   c00149c8 <Process::Process(char const*, Process*, char**)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011767:	75 b8                	jne    c0011721 <SysSpawn(regs*)+0x10>
c0011769:	83 ec 0c             	sub    esp,0xc
c001176c:	56                   	push   esi
c001176d:	e8 8a 37 00 00       	call   c0014efc <Process::createUserThread()>
c0011772:	83 c4 10             	add    esp,0x10
c0011775:	8b 06                	mov    eax,DWORD PTR [esi]
c0011777:	83 c4 04             	add    esp,0x4
c001177a:	89 c2                	mov    edx,eax
c001177c:	c1 fa 1f             	sar    edx,0x1f
c001177f:	5b                   	pop    ebx
c0011780:	5e                   	pop    esi
c0011781:	c3                   	ret    

c0011782 <SysGetEnv(regs*)>:
c0011782:	57                   	push   edi
c0011783:	56                   	push   esi
c0011784:	53                   	push   ebx
c0011785:	83 ec 1c             	sub    esp,0x1c
c0011788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001178d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011791:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011794:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011797:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001179a:	51                   	push   ecx
c001179b:	e8 57 ef ff ff       	call   c00106f7 <Krnl::getProcessTotalEnvCount(Process*)>
c00117a0:	83 c4 10             	add    esp,0x10
c00117a3:	39 c7                	cmp    edi,eax
c00117a5:	7c 12                	jl     c00117b9 <SysGetEnv(regs*)+0x37>
c00117a7:	31 c0                	xor    eax,eax
c00117a9:	85 f6                	test   esi,esi
c00117ab:	74 03                	je     c00117b0 <SysGetEnv(regs*)+0x2e>
c00117ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117b0:	83 c4 10             	add    esp,0x10
c00117b3:	31 d2                	xor    edx,edx
c00117b5:	5b                   	pop    ebx
c00117b6:	5e                   	pop    esi
c00117b7:	5f                   	pop    edi
c00117b8:	c3                   	ret    
c00117b9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117bd:	83 ec 04             	sub    esp,0x4
c00117c0:	57                   	push   edi
c00117c1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117c7:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117ca:	57                   	push   edi
c00117cb:	50                   	push   eax
c00117cc:	e8 46 ef ff ff       	call   c0010717 <Krnl::getProcessEnvPair(Process*, int)>
c00117d1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117dc:	83 c4 0c             	add    esp,0xc
c00117df:	85 d2                	test   edx,edx
c00117e1:	75 23                	jne    c0011806 <SysGetEnv(regs*)+0x84>
c00117e3:	83 ec 0c             	sub    esp,0xc
c00117e6:	50                   	push   eax
c00117e7:	e8 74 ed fe ff       	call   c0000560 <strlen>
c00117ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117ef:	89 c3                	mov    ebx,eax
c00117f1:	e8 6a ed fe ff       	call   c0000560 <strlen>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	83 c4 10             	add    esp,0x10
c00117fc:	31 d2                	xor    edx,edx
c00117fe:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011802:	5b                   	pop    ebx
c0011803:	5e                   	pop    esi
c0011804:	5f                   	pop    edi
c0011805:	c3                   	ret    
c0011806:	83 ec 08             	sub    esp,0x8
c0011809:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001180c:	50                   	push   eax
c001180d:	56                   	push   esi
c001180e:	e8 1d ee fe ff       	call   c0000630 <strcpy>
c0011813:	58                   	pop    eax
c0011814:	5a                   	pop    edx
c0011815:	68 18 0d 02 c0       	push   0xc0020d18
c001181a:	56                   	push   esi
c001181b:	e8 10 f0 fe ff       	call   c0000830 <strcat>
c0011820:	59                   	pop    ecx
c0011821:	5b                   	pop    ebx
c0011822:	57                   	push   edi
c0011823:	56                   	push   esi
c0011824:	e8 07 f0 fe ff       	call   c0000830 <strcat>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	31 c0                	xor    eax,eax
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	31 d2                	xor    edx,edx
c0011833:	5b                   	pop    ebx
c0011834:	5e                   	pop    esi
c0011835:	5f                   	pop    edi
c0011836:	c3                   	ret    

c0011837 <SysSetFatAttrib(regs*)>:
c0011837:	57                   	push   edi
c0011838:	56                   	push   esi
c0011839:	53                   	push   ebx
c001183a:	83 ec 1c             	sub    esp,0x1c
c001183d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011841:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011844:	68 14 01 00 00       	push   0x114
c0011849:	e8 3e 62 ff ff       	call   c0007a8c <malloc>
c001184e:	83 c4 0c             	add    esp,0xc
c0011851:	89 c3                	mov    ebx,eax
c0011853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011858:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001185b:	50                   	push   eax
c001185c:	57                   	push   edi
c001185d:	53                   	push   ebx
c001185e:	e8 73 96 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0011863:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011866:	83 c4 0c             	add    esp,0xc
c0011869:	0f b6 d4             	movzx  edx,ah
c001186c:	52                   	push   edx
c001186d:	0f b6 c0             	movzx  eax,al
c0011870:	50                   	push   eax
c0011871:	53                   	push   ebx
c0011872:	e8 2d 99 ff ff       	call   c000b1a4 <File::chfatattr(unsigned char, unsigned char)>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	85 db                	test   ebx,ebx
c001187c:	74 14                	je     c0011892 <SysSetFatAttrib(regs*)+0x5b>
c001187e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011882:	83 ec 0c             	sub    esp,0xc
c0011885:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011887:	53                   	push   ebx
c0011888:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011892:	85 c0                	test   eax,eax
c0011894:	0f 95 c0             	setne  al
c0011897:	0f b6 c0             	movzx  eax,al
c001189a:	31 d2                	xor    edx,edx
c001189c:	f7 d8                	neg    eax
c001189e:	83 d2 00             	adc    edx,0x0
c00118a1:	83 c4 10             	add    esp,0x10
c00118a4:	f7 da                	neg    edx
c00118a6:	5b                   	pop    ebx
c00118a7:	5e                   	pop    esi
c00118a8:	5f                   	pop    edi
c00118a9:	c3                   	ret    

c00118aa <SysPipe(regs*)>:
c00118aa:	57                   	push   edi
c00118ab:	56                   	push   esi
c00118ac:	53                   	push   ebx
c00118ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b1:	83 ec 0c             	sub    esp,0xc
c00118b4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118b7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118ba:	6a 20                	push   0x20
c00118bc:	e8 cb 61 ff ff       	call   c0007a8c <malloc>
c00118c1:	89 c3                	mov    ebx,eax
c00118c3:	58                   	pop    eax
c00118c4:	5a                   	pop    edx
c00118c5:	68 00 50 00 00       	push   0x5000
c00118ca:	53                   	push   ebx
c00118cb:	e8 36 6b ff ff       	call   c0008406 <Pipe::Pipe(int)>
c00118d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118d3:	e8 c2 78 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c00118d8:	89 07                	mov    DWORD PTR [edi],eax
c00118da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118dd:	e8 b8 78 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c00118e2:	83 c4 10             	add    esp,0x10
c00118e5:	89 06                	mov    DWORD PTR [esi],eax
c00118e7:	31 d2                	xor    edx,edx
c00118e9:	5b                   	pop    ebx
c00118ea:	31 c0                	xor    eax,eax
c00118ec:	5e                   	pop    esi
c00118ed:	5f                   	pop    edi
c00118ee:	c3                   	ret    

c00118ef <SysGetUnixTime(regs*)>:
c00118ef:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118f4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118fe:	e9 db 9f ff ff       	jmp    c000b8de <Clock::timeInSecondsLocal()>

c0011903 <string_ends_with(char const*, char const*)>:
c0011903:	57                   	push   edi
c0011904:	56                   	push   esi
c0011905:	53                   	push   ebx
c0011906:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001190a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001190e:	83 ec 0c             	sub    esp,0xc
c0011911:	53                   	push   ebx
c0011912:	e8 49 ec fe ff       	call   c0000560 <strlen>
c0011917:	89 3c 24             	mov    DWORD PTR [esp],edi
c001191a:	89 c6                	mov    esi,eax
c001191c:	e8 3f ec fe ff       	call   c0000560 <strlen>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	31 d2                	xor    edx,edx
c0011926:	39 c6                	cmp    esi,eax
c0011928:	7d 06                	jge    c0011930 <string_ends_with(char const*, char const*)+0x2d>
c001192a:	5b                   	pop    ebx
c001192b:	89 d0                	mov    eax,edx
c001192d:	5e                   	pop    esi
c001192e:	5f                   	pop    edi
c001192f:	c3                   	ret    
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	29 c6                	sub    esi,eax
c0011935:	01 f3                	add    ebx,esi
c0011937:	57                   	push   edi
c0011938:	53                   	push   ebx
c0011939:	e8 02 ee fe ff       	call   c0000740 <strcmp>
c001193e:	83 c4 10             	add    esp,0x10
c0011941:	31 d2                	xor    edx,edx
c0011943:	85 c0                	test   eax,eax
c0011945:	5b                   	pop    ebx
c0011946:	0f 94 c2             	sete   dl
c0011949:	5e                   	pop    esi
c001194a:	89 d0                	mov    eax,edx
c001194c:	5f                   	pop    edi
c001194d:	c3                   	ret    

c001194e <SysOpen(regs*)>:
c001194e:	56                   	push   esi
c001194f:	53                   	push   ebx
c0011950:	81 ec 04 01 00 00    	sub    esp,0x104
c0011956:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001195d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011960:	85 c0                	test   eax,eax
c0011962:	0f 84 c5 01 00 00    	je     c0011b2d <SysOpen(regs*)+0x1df>
c0011968:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001196b:	85 c0                	test   eax,eax
c001196d:	0f 84 ba 01 00 00    	je     c0011b2d <SysOpen(regs*)+0x1df>
c0011973:	83 ec 04             	sub    esp,0x4
c0011976:	68 1a 0d 02 c0       	push   0xc0020d1a
c001197b:	50                   	push   eax
c001197c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011980:	56                   	push   esi
c0011981:	e8 9a 93 ff ff       	call   c000ad20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011986:	89 34 24             	mov    DWORD PTR [esp],esi
c0011989:	e8 d2 eb fe ff       	call   c0000560 <strlen>
c001198e:	83 c4 10             	add    esp,0x10
c0011991:	83 e8 01             	sub    eax,0x1
c0011994:	74 29                	je     c00119bf <SysOpen(regs*)+0x71>
c0011996:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001199a:	83 fa 2e             	cmp    edx,0x2e
c001199d:	74 1c                	je     c00119bb <SysOpen(regs*)+0x6d>
c001199f:	83 fa 3a             	cmp    edx,0x3a
c00119a2:	74 17                	je     c00119bb <SysOpen(regs*)+0x6d>
c00119a4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00119a8:	83 e8 01             	sub    eax,0x1
c00119ab:	74 12                	je     c00119bf <SysOpen(regs*)+0x71>
c00119ad:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119b1:	83 fa 3a             	cmp    edx,0x3a
c00119b4:	74 05                	je     c00119bb <SysOpen(regs*)+0x6d>
c00119b6:	83 fa 2e             	cmp    edx,0x2e
c00119b9:	75 e9                	jne    c00119a4 <SysOpen(regs*)+0x56>
c00119bb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119bf:	83 ec 08             	sub    esp,0x8
c00119c2:	68 1e 0d 02 c0       	push   0xc0020d1e
c00119c7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ca:	50                   	push   eax
c00119cb:	e8 33 ff ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c00119d0:	83 c4 10             	add    esp,0x10
c00119d3:	85 c0                	test   eax,eax
c00119d5:	74 1d                	je     c00119f4 <SysOpen(regs*)+0xa6>
c00119d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119da:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119e7:	81 c4 04 01 00 00    	add    esp,0x104
c00119ed:	31 c0                	xor    eax,eax
c00119ef:	31 d2                	xor    edx,edx
c00119f1:	5b                   	pop    ebx
c00119f2:	5e                   	pop    esi
c00119f3:	c3                   	ret    
c00119f4:	83 ec 08             	sub    esp,0x8
c00119f7:	68 23 0d 02 c0       	push   0xc0020d23
c00119fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119ff:	50                   	push   eax
c0011a00:	e8 fe fe ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c0011a05:	83 c4 10             	add    esp,0x10
c0011a08:	85 c0                	test   eax,eax
c0011a0a:	75 cb                	jne    c00119d7 <SysOpen(regs*)+0x89>
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	68 1f 0d 02 c0       	push   0xc0020d1f
c0011a14:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a17:	50                   	push   eax
c0011a18:	e8 23 ed fe ff       	call   c0000740 <strcmp>
c0011a1d:	83 c4 10             	add    esp,0x10
c0011a20:	85 c0                	test   eax,eax
c0011a22:	74 b3                	je     c00119d7 <SysOpen(regs*)+0x89>
c0011a24:	83 ec 08             	sub    esp,0x8
c0011a27:	68 1e 0d 02 c0       	push   0xc0020d1e
c0011a2c:	56                   	push   esi
c0011a2d:	e8 d1 fe ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c0011a32:	83 c4 10             	add    esp,0x10
c0011a35:	85 c0                	test   eax,eax
c0011a37:	75 9e                	jne    c00119d7 <SysOpen(regs*)+0x89>
c0011a39:	83 ec 08             	sub    esp,0x8
c0011a3c:	68 28 0d 02 c0       	push   0xc0020d28
c0011a41:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a44:	50                   	push   eax
c0011a45:	e8 b9 fe ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c0011a4a:	83 c4 10             	add    esp,0x10
c0011a4d:	85 c0                	test   eax,eax
c0011a4f:	0f 85 eb 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1f2>
c0011a55:	83 ec 08             	sub    esp,0x8
c0011a58:	68 2d 0d 02 c0       	push   0xc0020d2d
c0011a5d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a60:	50                   	push   eax
c0011a61:	e8 9d fe ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	85 c0                	test   eax,eax
c0011a6b:	0f 85 cf 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1f2>
c0011a71:	83 ec 08             	sub    esp,0x8
c0011a74:	68 29 0d 02 c0       	push   0xc0020d29
c0011a79:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a7c:	51                   	push   ecx
c0011a7d:	e8 be ec fe ff       	call   c0000740 <strcmp>
c0011a82:	83 c4 10             	add    esp,0x10
c0011a85:	85 c0                	test   eax,eax
c0011a87:	0f 84 b3 00 00 00    	je     c0011b40 <SysOpen(regs*)+0x1f2>
c0011a8d:	83 ec 08             	sub    esp,0x8
c0011a90:	68 28 0d 02 c0       	push   0xc0020d28
c0011a95:	56                   	push   esi
c0011a96:	e8 68 fe ff ff       	call   c0011903 <string_ends_with(char const*, char const*)>
c0011a9b:	83 c4 10             	add    esp,0x10
c0011a9e:	85 c0                	test   eax,eax
c0011aa0:	0f 85 9a 00 00 00    	jne    c0011b40 <SysOpen(regs*)+0x1f2>
c0011aa6:	83 ec 0c             	sub    esp,0xc
c0011aa9:	68 14 01 00 00       	push   0x114
c0011aae:	e8 d9 5f ff ff       	call   c0007a8c <malloc>
c0011ab3:	89 c6                	mov    esi,eax
c0011ab5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aba:	83 c4 0c             	add    esp,0xc
c0011abd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ac0:	50                   	push   eax
c0011ac1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ac4:	52                   	push   edx
c0011ac5:	56                   	push   esi
c0011ac6:	e8 0b 94 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	85 f6                	test   esi,esi
c0011ad0:	74 5b                	je     c0011b2d <SysOpen(regs*)+0x1df>
c0011ad2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ad5:	0f b6 c2             	movzx  eax,dl
c0011ad8:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011adb:	89 d0                	mov    eax,edx
c0011add:	83 e0 01             	and    eax,0x1
c0011ae0:	f6 c2 02             	test   dl,0x2
c0011ae3:	74 03                	je     c0011ae8 <SysOpen(regs*)+0x19a>
c0011ae5:	83 c8 02             	or     eax,0x2
c0011ae8:	f6 c2 04             	test   dl,0x4
c0011aeb:	74 03                	je     c0011af0 <SysOpen(regs*)+0x1a2>
c0011aed:	83 c8 04             	or     eax,0x4
c0011af0:	f6 c2 08             	test   dl,0x8
c0011af3:	74 03                	je     c0011af8 <SysOpen(regs*)+0x1aa>
c0011af5:	83 c8 0a             	or     eax,0xa
c0011af8:	80 e2 10             	and    dl,0x10
c0011afb:	74 03                	je     c0011b00 <SysOpen(regs*)+0x1b2>
c0011afd:	83 c8 12             	or     eax,0x12
c0011b00:	83 ec 08             	sub    esp,0x8
c0011b03:	50                   	push   eax
c0011b04:	56                   	push   esi
c0011b05:	e8 88 94 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	85 c0                	test   eax,eax
c0011b0f:	75 1c                	jne    c0011b2d <SysOpen(regs*)+0x1df>
c0011b11:	83 ec 0c             	sub    esp,0xc
c0011b14:	56                   	push   esi
c0011b15:	e8 80 76 ff ff       	call   c000919a <UnixFile::getFileDescriptor()>
c0011b1a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	89 02                	mov    DWORD PTR [edx],eax
c0011b22:	c1 f8 1f             	sar    eax,0x1f
c0011b25:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b28:	e9 ba fe ff ff       	jmp    c00119e7 <SysOpen(regs*)+0x99>
c0011b2d:	81 c4 04 01 00 00    	add    esp,0x104
c0011b33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b38:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b3d:	5b                   	pop    ebx
c0011b3e:	5e                   	pop    esi
c0011b3f:	c3                   	ret    
c0011b40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b43:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b49:	e9 92 fe ff ff       	jmp    c00119e0 <SysOpen(regs*)+0x92>

c0011b4e <KeSystemCall(regs*, void*)>:
c0011b4e:	53                   	push   ebx
c0011b4f:	83 ec 08             	sub    esp,0x8
c0011b52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b56:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b59:	83 f8 3b             	cmp    eax,0x3b
c0011b5c:	77 16                	ja     c0011b74 <KeSystemCall(regs*, void*)+0x26>
c0011b5e:	8b 14 85 e0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf20]
c0011b65:	85 d2                	test   edx,edx
c0011b67:	74 0b                	je     c0011b74 <KeSystemCall(regs*, void*)+0x26>
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	53                   	push   ebx
c0011b6d:	ff d2                	call   edx
c0011b6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b72:	eb 0d                	jmp    c0011b81 <KeSystemCall(regs*, void*)+0x33>
c0011b74:	52                   	push   edx
c0011b75:	52                   	push   edx
c0011b76:	50                   	push   eax
c0011b77:	68 32 0d 02 c0       	push   0xc0020d32
c0011b7c:	e8 d2 8d ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b89:	83 c4 08             	add    esp,0x8
c0011b8c:	31 d2                	xor    edx,edx
c0011b8e:	5b                   	pop    ebx
c0011b8f:	c3                   	ret    

c0011b90 <KeSwitchEndian16(unsigned short)>:
c0011b90:	83 ec 04             	sub    esp,0x4
c0011b93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b97:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b9b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b9f:	c1 f8 08             	sar    eax,0x8
c0011ba2:	89 c2                	mov    edx,eax
c0011ba4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011ba8:	c1 e0 08             	shl    eax,0x8
c0011bab:	09 d0                	or     eax,edx
c0011bad:	83 c4 04             	add    esp,0x4
c0011bb0:	c3                   	ret    
c0011bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0011bb4 <KeSwitchEndian32(unsigned int)>:
c0011bb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb8:	c1 e8 18             	shr    eax,0x18
c0011bbb:	89 c2                	mov    edx,eax
c0011bbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc1:	c1 e0 08             	shl    eax,0x8
c0011bc4:	25 00 00 ff 00       	and    eax,0xff0000
c0011bc9:	09 c2                	or     edx,eax
c0011bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bcf:	c1 e8 08             	shr    eax,0x8
c0011bd2:	25 00 ff 00 00       	and    eax,0xff00
c0011bd7:	09 c2                	or     edx,eax
c0011bd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bdd:	c1 e0 18             	shl    eax,0x18
c0011be0:	09 d0                	or     eax,edx
c0011be2:	c3                   	ret    
c0011be3:	90                   	nop

c0011be4 <EthernetCRC32(unsigned char*, int)>:
c0011be4:	83 ec 10             	sub    esp,0x10
c0011be7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bec:	75 0a                	jne    c0011bf8 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bee:	b8 00 00 00 00       	mov    eax,0x0
c0011bf3:	e9 8c 00 00 00       	jmp    c0011c84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011bfd:	7f 09                	jg     c0011c08 <EthernetCRC32(unsigned char*, int)+0x24>
c0011bff:	b8 00 00 00 00       	mov    eax,0x0
c0011c04:	eb 7e                	jmp    c0011c84 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011c06:	66 90                	xchg   ax,ax
c0011c08:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011c10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c1c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c20:	7d 5a                	jge    c0011c7c <EthernetCRC32(unsigned char*, int)+0x98>
c0011c22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c2a:	01 d0                	add    eax,edx
c0011c2c:	8a 00                	mov    al,BYTE PTR [eax]
c0011c2e:	0f b6 c0             	movzx  eax,al
c0011c31:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c40:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c45:	7f 2d                	jg     c0011c74 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4b:	83 e0 01             	and    eax,0x1
c0011c4e:	74 10                	je     c0011c60 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c54:	d1 e8                	shr    eax,1
c0011c56:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c5b:	eb 0b                	jmp    c0011c68 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c64:	d1 e8                	shr    eax,1
c0011c66:	66 90                	xchg   ax,ax
c0011c68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c6c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c71:	eb cd                	jmp    c0011c40 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c73:	90                   	nop
c0011c74:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c79:	eb 9d                	jmp    c0011c18 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c7b:	90                   	nop
c0011c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c80:	f7 d0                	not    eax
c0011c82:	66 90                	xchg   ax,ax
c0011c84:	83 c4 10             	add    esp,0x10
c0011c87:	c3                   	ret    

c0011c88 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c88:	83 ec 2c             	sub    esp,0x2c
c0011c8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c8f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ca3:	0f b7 c0             	movzx  eax,ax
c0011ca6:	3d 06 08 00 00       	cmp    eax,0x806
c0011cab:	75 13                	jne    c0011cc0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011cad:	83 ec 0c             	sub    esp,0xc
c0011cb0:	68 46 0d 02 c0       	push   0xc0020d46
c0011cb5:	e8 99 8c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	eb 25                	jmp    c0011ce4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cbf:	90                   	nop
c0011cc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cc7:	0f b7 c0             	movzx  eax,ax
c0011cca:	3d 00 08 00 00       	cmp    eax,0x800
c0011ccf:	75 13                	jne    c0011ce4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cd1:	83 ec 0c             	sub    esp,0xc
c0011cd4:	68 5c 0d 02 c0       	push   0xc0020d5c
c0011cd9:	e8 75 8c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0011cde:	83 c4 10             	add    esp,0x10
c0011ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ce4:	90                   	nop
c0011ce5:	83 c4 2c             	add    esp,0x2c
c0011ce8:	c3                   	ret    

c0011ce9 <CmOpen(char const*)>:
c0011ce9:	57                   	push   edi
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 1c             	sub    esp,0x1c
c0011cef:	6a 30                	push   0x30
c0011cf1:	e8 96 5d ff ff       	call   c0007a8c <malloc>
c0011cf6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011cfd:	89 c3                	mov    ebx,eax
c0011cff:	e8 88 5d ff ff       	call   c0007a8c <malloc>
c0011d04:	83 c4 0c             	add    esp,0xc
c0011d07:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011d0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011d11:	89 c6                	mov    esi,eax
c0011d13:	50                   	push   eax
c0011d14:	e8 bd 91 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	89 33                	mov    DWORD PTR [ebx],esi
c0011d1e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d22:	50                   	push   eax
c0011d23:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d27:	50                   	push   eax
c0011d28:	56                   	push   esi
c0011d29:	e8 10 95 ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0011d2e:	5a                   	pop    edx
c0011d2f:	59                   	pop    ecx
c0011d30:	6a 01                	push   0x1
c0011d32:	ff 33                	push   DWORD PTR [ebx]
c0011d34:	e8 59 92 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0011d39:	5e                   	pop    esi
c0011d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d3e:	e8 49 5d ff ff       	call   c0007a8c <malloc>
c0011d43:	5a                   	pop    edx
c0011d44:	89 c7                	mov    edi,eax
c0011d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d48:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d4e:	56                   	push   esi
c0011d4f:	57                   	push   edi
c0011d50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d58:	50                   	push   eax
c0011d59:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d5c:	83 c4 14             	add    esp,0x14
c0011d5f:	ff 33                	push   DWORD PTR [ebx]
c0011d61:	e8 8a 92 ff ff       	call   c000aff0 <File::close()>
c0011d66:	59                   	pop    ecx
c0011d67:	58                   	pop    eax
c0011d68:	6a 13                	push   0x13
c0011d6a:	ff 33                	push   DWORD PTR [ebx]
c0011d6c:	e8 21 92 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0011d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d73:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d75:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d78:	57                   	push   edi
c0011d79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d7d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d81:	50                   	push   eax
c0011d82:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d85:	83 c4 14             	add    esp,0x14
c0011d88:	57                   	push   edi
c0011d89:	e8 0e 5d ff ff       	call   c0007a9c <free>
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d94:	75 10                	jne    c0011da6 <CmOpen(char const*)+0xbd>
c0011d96:	83 ec 0c             	sub    esp,0xc
c0011d99:	68 71 0d 02 c0       	push   0xc0020d71
c0011d9e:	e8 9c ea ff ff       	call   c001083f <KePanic(char const*)>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	50                   	push   eax
c0011da7:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011daa:	6a 00                	push   0x0
c0011dac:	6a 00                	push   0x0
c0011dae:	ff 33                	push   DWORD PTR [ebx]
c0011db0:	e8 9b 92 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011db7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011db9:	89 34 24             	mov    DWORD PTR [esp],esi
c0011dbc:	57                   	push   edi
c0011dbd:	6a 00                	push   0x0
c0011dbf:	6a 2b                	push   0x2b
c0011dc1:	50                   	push   eax
c0011dc2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011dc5:	83 c4 1c             	add    esp,0x1c
c0011dc8:	6a 00                	push   0x0
c0011dca:	6a 00                	push   0x0
c0011dcc:	ff 33                	push   DWORD PTR [ebx]
c0011dce:	e8 7d 92 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011dd3:	83 c4 0c             	add    esp,0xc
c0011dd6:	6a 08                	push   0x8
c0011dd8:	68 82 0d 02 c0       	push   0xc0020d82
c0011ddd:	57                   	push   edi
c0011dde:	e8 9d e5 fe ff       	call   c0000380 <memcmp>
c0011de3:	83 c4 10             	add    esp,0x10
c0011de6:	85 c0                	test   eax,eax
c0011de8:	74 10                	je     c0011dfa <CmOpen(char const*)+0x111>
c0011dea:	83 ec 0c             	sub    esp,0xc
c0011ded:	68 8b 0d 02 c0       	push   0xc0020d8b
c0011df2:	e8 48 ea ff ff       	call   c001083f <KePanic(char const*)>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	89 d8                	mov    eax,ebx
c0011e03:	5b                   	pop    ebx
c0011e04:	5e                   	pop    esi
c0011e05:	5f                   	pop    edi
c0011e06:	c3                   	ret    

c0011e07 <CmClose(Reghive_Tag*)>:
c0011e07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011e0f:	74 0b                	je     c0011e1c <CmClose(Reghive_Tag*)+0x15>
c0011e11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e13:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e17:	e9 d4 91 ff ff       	jmp    c000aff0 <File::close()>
c0011e1c:	c3                   	ret    

c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e1d:	53                   	push   ebx
c0011e1e:	83 ec 18             	sub    esp,0x18
c0011e21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e25:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e29:	74 29                	je     c0011e54 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e2b:	50                   	push   eax
c0011e2c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e31:	99                   	cdq    
c0011e32:	52                   	push   edx
c0011e33:	50                   	push   eax
c0011e34:	ff 33                	push   DWORD PTR [ebx]
c0011e36:	e8 15 92 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011e3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e3d:	5a                   	pop    edx
c0011e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e40:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e44:	51                   	push   ecx
c0011e45:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e49:	6a 00                	push   0x0
c0011e4b:	6a 2b                	push   0x2b
c0011e4d:	50                   	push   eax
c0011e4e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e51:	83 c4 20             	add    esp,0x20
c0011e54:	83 c4 18             	add    esp,0x18
c0011e57:	5b                   	pop    ebx
c0011e58:	c3                   	ret    

c0011e59 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e59:	55                   	push   ebp
c0011e5a:	57                   	push   edi
c0011e5b:	56                   	push   esi
c0011e5c:	53                   	push   ebx
c0011e5d:	31 db                	xor    ebx,ebx
c0011e5f:	83 ec 70             	sub    esp,0x70
c0011e62:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e66:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e6d:	50                   	push   eax
c0011e6e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e75:	55                   	push   ebp
c0011e76:	e8 a2 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e83:	c1 e0 08             	shl    eax,0x8
c0011e86:	89 c2                	mov    edx,eax
c0011e88:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e8d:	09 d0                	or     eax,edx
c0011e8f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e94:	c1 e0 08             	shl    eax,0x8
c0011e97:	09 d0                	or     eax,edx
c0011e99:	74 25                	je     c0011ec0 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e9b:	6b fb 0d             	imul   edi,ebx,0xd
c0011e9e:	52                   	push   edx
c0011e9f:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011ea3:	52                   	push   edx
c0011ea4:	50                   	push   eax
c0011ea5:	55                   	push   ebp
c0011ea6:	e8 72 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011eab:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011eaf:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011eb6:	b9 27 00 00 00       	mov    ecx,0x27
c0011ebb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	83 c3 03             	add    ebx,0x3
c0011ec3:	83 fb 15             	cmp    ebx,0x15
c0011ec6:	75 b6                	jne    c0011e7e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011ec8:	83 c4 6c             	add    esp,0x6c
c0011ecb:	5b                   	pop    ebx
c0011ecc:	5e                   	pop    esi
c0011ecd:	5f                   	pop    edi
c0011ece:	5d                   	pop    ebp
c0011ecf:	c3                   	ret    

c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ed0:	83 ec 40             	sub    esp,0x40
c0011ed3:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ed7:	50                   	push   eax
c0011ed8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ee0:	e8 38 ff ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ee5:	83 c4 10             	add    esp,0x10
c0011ee8:	83 c8 ff             	or     eax,0xffffffff
c0011eeb:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011ef0:	75 19                	jne    c0011f0b <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ef2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ef7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011efc:	c1 e0 08             	shl    eax,0x8
c0011eff:	09 c2                	or     edx,eax
c0011f01:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011f06:	c1 e0 10             	shl    eax,0x10
c0011f09:	09 d0                	or     eax,edx
c0011f0b:	83 c4 3c             	add    esp,0x3c
c0011f0e:	c3                   	ret    

c0011f0f <CmGetNext(Reghive_Tag*, int)>:
c0011f0f:	83 ec 40             	sub    esp,0x40
c0011f12:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f16:	50                   	push   eax
c0011f17:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f1b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f1f:	e8 f9 fe ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f24:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f29:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f2e:	c1 e0 08             	shl    eax,0x8
c0011f31:	09 c2                	or     edx,eax
c0011f33:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f38:	c1 e0 10             	shl    eax,0x10
c0011f3b:	83 c4 4c             	add    esp,0x4c
c0011f3e:	09 d0                	or     eax,edx
c0011f40:	c3                   	ret    

c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f41:	53                   	push   ebx
c0011f42:	83 ec 18             	sub    esp,0x18
c0011f45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f49:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f4d:	74 29                	je     c0011f78 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f4f:	50                   	push   eax
c0011f50:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f55:	99                   	cdq    
c0011f56:	52                   	push   edx
c0011f57:	50                   	push   eax
c0011f58:	ff 33                	push   DWORD PTR [ebx]
c0011f5a:	e8 f1 90 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011f5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f61:	5a                   	pop    edx
c0011f62:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f64:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f68:	51                   	push   ecx
c0011f69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f6d:	6a 00                	push   0x0
c0011f6f:	6a 2b                	push   0x2b
c0011f71:	50                   	push   eax
c0011f72:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f75:	83 c4 20             	add    esp,0x20
c0011f78:	83 c4 18             	add    esp,0x18
c0011f7b:	5b                   	pop    ebx
c0011f7c:	c3                   	ret    

c0011f7d <CmFreeExtent(Reghive_Tag*, int)>:
c0011f7d:	53                   	push   ebx
c0011f7e:	83 ec 3c             	sub    esp,0x3c
c0011f81:	6a 2b                	push   0x2b
c0011f83:	6a 00                	push   0x0
c0011f85:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f89:	53                   	push   ebx
c0011f8a:	e8 51 e5 fe ff       	call   c00004e0 <memset>
c0011f8f:	83 c4 0c             	add    esp,0xc
c0011f92:	53                   	push   ebx
c0011f93:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f9b:	e8 a1 ff ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fa0:	83 c4 48             	add    esp,0x48
c0011fa3:	5b                   	pop    ebx
c0011fa4:	c3                   	ret    

c0011fa5 <CmUpdateHeader(Reghive_Tag*)>:
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fac:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011fb0:	74 10                	je     c0011fc2 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011fb2:	52                   	push   edx
c0011fb3:	8d 50 05             	lea    edx,[eax+0x5]
c0011fb6:	52                   	push   edx
c0011fb7:	6a 00                	push   0x0
c0011fb9:	50                   	push   eax
c0011fba:	e8 82 ff ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	83 c4 0c             	add    esp,0xc
c0011fc5:	c3                   	ret    

c0011fc6 <CmExpand(Reghive_Tag*, int)>:
c0011fc6:	57                   	push   edi
c0011fc7:	56                   	push   esi
c0011fc8:	83 ce ff             	or     esi,0xffffffff
c0011fcb:	53                   	push   ebx
c0011fcc:	83 ec 30             	sub    esp,0x30
c0011fcf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fd3:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fd7:	74 5f                	je     c0012038 <CmExpand(Reghive_Tag*, int)+0x72>
c0011fd9:	50                   	push   eax
c0011fda:	31 d2                	xor    edx,edx
c0011fdc:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fe0:	52                   	push   edx
c0011fe1:	31 f6                	xor    esi,esi
c0011fe3:	50                   	push   eax
c0011fe4:	ff 33                	push   DWORD PTR [ebx]
c0011fe6:	e8 65 90 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0011feb:	83 c4 0c             	add    esp,0xc
c0011fee:	6a 2b                	push   0x2b
c0011ff0:	6a 00                	push   0x0
c0011ff2:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011ff6:	57                   	push   edi
c0011ff7:	e8 e4 e4 fe ff       	call   c00004e0 <memset>
c0011ffc:	83 c4 10             	add    esp,0x10
c0011fff:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012003:	7d 1b                	jge    c0012020 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012005:	83 ec 0c             	sub    esp,0xc
c0012008:	8b 03                	mov    eax,DWORD PTR [ebx]
c001200a:	46                   	inc    esi
c001200b:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c001200f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012011:	51                   	push   ecx
c0012012:	57                   	push   edi
c0012013:	6a 00                	push   0x0
c0012015:	6a 2b                	push   0x2b
c0012017:	50                   	push   eax
c0012018:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001201b:	83 c4 20             	add    esp,0x20
c001201e:	eb df                	jmp    c0011fff <CmExpand(Reghive_Tag*, int)+0x39>
c0012020:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012024:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012027:	83 ec 0c             	sub    esp,0xc
c001202a:	01 f2                	add    edx,esi
c001202c:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001202f:	53                   	push   ebx
c0012030:	e8 70 ff ff ff       	call   c0011fa5 <CmUpdateHeader(Reghive_Tag*)>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	83 c4 30             	add    esp,0x30
c001203b:	89 f0                	mov    eax,esi
c001203d:	5b                   	pop    ebx
c001203e:	5e                   	pop    esi
c001203f:	5f                   	pop    edi
c0012040:	c3                   	ret    

c0012041 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012041:	55                   	push   ebp
c0012042:	57                   	push   edi
c0012043:	56                   	push   esi
c0012044:	53                   	push   ebx
c0012045:	83 cb ff             	or     ebx,0xffffffff
c0012048:	83 ec 1c             	sub    esp,0x1c
c001204b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001204f:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012053:	74 68                	je     c00120bd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012055:	51                   	push   ecx
c0012056:	be 2b 00 00 00       	mov    esi,0x2b
c001205b:	6a 00                	push   0x0
c001205d:	31 ff                	xor    edi,edi
c001205f:	6a 00                	push   0x0
c0012061:	31 db                	xor    ebx,ebx
c0012063:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012066:	e8 e5 8f ff ff       	call   c000b050 <File::seek(unsigned long long)>
c001206b:	83 c4 10             	add    esp,0x10
c001206e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012071:	76 3b                	jbe    c00120ae <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012073:	83 ec 0c             	sub    esp,0xc
c0012076:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012079:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001207d:	8b 10                	mov    edx,DWORD PTR [eax]
c001207f:	51                   	push   ecx
c0012080:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012084:	51                   	push   ecx
c0012085:	6a 00                	push   0x0
c0012087:	6a 01                	push   0x1
c0012089:	50                   	push   eax
c001208a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001208d:	83 c4 20             	add    esp,0x20
c0012090:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012095:	74 26                	je     c00120bd <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012097:	52                   	push   edx
c0012098:	43                   	inc    ebx
c0012099:	57                   	push   edi
c001209a:	56                   	push   esi
c001209b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001209e:	e8 ad 8f ff ff       	call   c000b050 <File::seek(unsigned long long)>
c00120a3:	83 c6 2b             	add    esi,0x2b
c00120a6:	83 d7 00             	adc    edi,0x0
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	eb c0                	jmp    c001206e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c00120ae:	50                   	push   eax
c00120af:	50                   	push   eax
c00120b0:	6a 40                	push   0x40
c00120b2:	55                   	push   ebp
c00120b3:	e8 0e ff ff ff       	call   c0011fc6 <CmExpand(Reghive_Tag*, int)>
c00120b8:	83 c4 10             	add    esp,0x10
c00120bb:	89 c3                	mov    ebx,eax
c00120bd:	83 c4 1c             	add    esp,0x1c
c00120c0:	89 d8                	mov    eax,ebx
c00120c2:	5b                   	pop    ebx
c00120c3:	5e                   	pop    esi
c00120c4:	5f                   	pop    edi
c00120c5:	5d                   	pop    ebp
c00120c6:	c3                   	ret    

c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120c7:	55                   	push   ebp
c00120c8:	57                   	push   edi
c00120c9:	56                   	push   esi
c00120ca:	53                   	push   ebx
c00120cb:	81 ec 88 00 00 00    	sub    esp,0x88
c00120d1:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120d8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120df:	e8 5d ff ff ff       	call   c0012041 <CmFindUnusedExtent(Reghive_Tag*)>
c00120e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120e8:	83 c4 0c             	add    esp,0xc
c00120eb:	6a 2b                	push   0x2b
c00120ed:	6a 00                	push   0x0
c00120ef:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120f3:	55                   	push   ebp
c00120f4:	e8 e7 e3 fe ff       	call   c00004e0 <memset>
c00120f9:	83 c4 10             	add    esp,0x10
c00120fc:	85 db                	test   ebx,ebx
c00120fe:	74 12                	je     c0012112 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012100:	51                   	push   ecx
c0012101:	55                   	push   ebp
c0012102:	53                   	push   ebx
c0012103:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001210a:	e8 0e fd ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012116:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001211d:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012124:	85 db                	test   ebx,ebx
c0012126:	74 49                	je     c0012171 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012128:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001212d:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012132:	c1 e0 08             	shl    eax,0x8
c0012135:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012139:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001213f:	09 c8                	or     eax,ecx
c0012141:	74 11                	je     c0012154 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012143:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012147:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c001214b:	c1 e8 10             	shr    eax,0x10
c001214e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012152:	eb 0f                	jmp    c0012163 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012154:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012159:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001215e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012163:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012167:	c1 ea 08             	shr    edx,0x8
c001216a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001216f:	eb 0f                	jmp    c0012180 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012171:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012176:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001217b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012180:	52                   	push   edx
c0012181:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012185:	50                   	push   eax
c0012186:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001218a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012191:	e8 ab fd ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012196:	83 c4 10             	add    esp,0x10
c0012199:	85 db                	test   ebx,ebx
c001219b:	74 12                	je     c00121af <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c001219d:	50                   	push   eax
c001219e:	55                   	push   ebp
c001219f:	53                   	push   ebx
c00121a0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121a7:	e8 95 fd ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00121ac:	83 c4 10             	add    esp,0x10
c00121af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b3:	83 c4 7c             	add    esp,0x7c
c00121b6:	5b                   	pop    ebx
c00121b7:	5e                   	pop    esi
c00121b8:	5f                   	pop    edi
c00121b9:	5d                   	pop    ebp
c00121ba:	c3                   	ret    

c00121bb <CmSetString(Reghive_Tag*, int, char const*)>:
c00121bb:	55                   	push   ebp
c00121bc:	57                   	push   edi
c00121bd:	56                   	push   esi
c00121be:	53                   	push   ebx
c00121bf:	bb 27 00 00 00       	mov    ebx,0x27
c00121c4:	81 ec 88 00 00 00    	sub    esp,0x88
c00121ca:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121d1:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121d8:	e8 83 e3 fe ff       	call   c0000560 <strlen>
c00121dd:	8d 48 26             	lea    ecx,[eax+0x26]
c00121e0:	89 c8                	mov    eax,ecx
c00121e2:	99                   	cdq    
c00121e3:	f7 fb                	idiv   ebx
c00121e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121e9:	83 c4 10             	add    esp,0x10
c00121ec:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121f2:	7e 10                	jle    c0012204 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	68 9c 0d 02 c0       	push   0xc0020d9c
c00121fc:	e8 3e e6 ff ff       	call   c001083f <KePanic(char const*)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	50                   	push   eax
c0012205:	31 ff                	xor    edi,edi
c0012207:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c001220b:	53                   	push   ebx
c001220c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012213:	56                   	push   esi
c0012214:	e8 04 fc ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012219:	83 c4 10             	add    esp,0x10
c001221c:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012220:	89 d0                	mov    eax,edx
c0012222:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012226:	c1 e0 08             	shl    eax,0x8
c0012229:	09 c2                	or     edx,eax
c001222b:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001222f:	c1 e2 08             	shl    edx,0x8
c0012232:	09 c2                	or     edx,eax
c0012234:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012238:	7e 76                	jle    c00122b0 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c001223a:	85 d2                	test   edx,edx
c001223c:	75 25                	jne    c0012263 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001223e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012242:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012247:	50                   	push   eax
c0012248:	6a 00                	push   0x0
c001224a:	6a 00                	push   0x0
c001224c:	56                   	push   esi
c001224d:	e8 75 fe ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012252:	89 c2                	mov    edx,eax
c0012254:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012257:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c001225a:	83 c4 10             	add    esp,0x10
c001225d:	c1 f8 10             	sar    eax,0x10
c0012260:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012263:	55                   	push   ebp
c0012264:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012268:	55                   	push   ebp
c0012269:	52                   	push   edx
c001226a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001226e:	56                   	push   esi
c001226f:	e8 a9 fb ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012274:	83 c4 0c             	add    esp,0xc
c0012277:	6a 27                	push   0x27
c0012279:	6a 00                	push   0x0
c001227b:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001227f:	51                   	push   ecx
c0012280:	e8 5b e2 fe ff       	call   c00004e0 <memset>
c0012285:	6b c7 27             	imul   eax,edi,0x27
c0012288:	83 c4 0c             	add    esp,0xc
c001228b:	6a 27                	push   0x27
c001228d:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012294:	50                   	push   eax
c0012295:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012299:	51                   	push   ecx
c001229a:	e8 d1 e3 fe ff       	call   c0000670 <strncpy>
c001229f:	83 c4 0c             	add    esp,0xc
c00122a2:	55                   	push   ebp
c00122a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122a7:	52                   	push   edx
c00122a8:	56                   	push   esi
c00122a9:	e8 93 fc ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ae:	eb 19                	jmp    c00122c9 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00122b0:	85 d2                	test   edx,edx
c00122b2:	74 18                	je     c00122cc <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00122b4:	51                   	push   ecx
c00122b5:	51                   	push   ecx
c00122b6:	52                   	push   edx
c00122b7:	56                   	push   esi
c00122b8:	e8 c0 fc ff ff       	call   c0011f7d <CmFreeExtent(Reghive_Tag*, int)>
c00122bd:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122c1:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122c5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122c9:	83 c4 10             	add    esp,0x10
c00122cc:	47                   	inc    edi
c00122cd:	83 c3 03             	add    ebx,0x3
c00122d0:	83 ff 07             	cmp    edi,0x7
c00122d3:	0f 85 43 ff ff ff    	jne    c001221c <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122d9:	50                   	push   eax
c00122da:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122de:	50                   	push   eax
c00122df:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122e6:	56                   	push   esi
c00122e7:	e8 55 fc ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ec:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122f2:	5b                   	pop    ebx
c00122f3:	5e                   	pop    esi
c00122f4:	5f                   	pop    edi
c00122f5:	5d                   	pop    ebp
c00122f6:	c3                   	ret    

c00122f7 <CmGetMatch(char*, char*, bool, bool*)>:
c00122f7:	56                   	push   esi
c00122f8:	53                   	push   ebx
c00122f9:	50                   	push   eax
c00122fa:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122fe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012303:	74 25                	je     c001232a <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012305:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012308:	31 db                	xor    ebx,ebx
c001230a:	50                   	push   eax
c001230b:	50                   	push   eax
c001230c:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c0012313:	50                   	push   eax
c0012314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012318:	e8 23 e4 fe ff       	call   c0000740 <strcmp>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	85 c0                	test   eax,eax
c0012322:	74 2e                	je     c0012352 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012324:	43                   	inc    ebx
c0012325:	83 fb 3f             	cmp    ebx,0x3f
c0012328:	75 e0                	jne    c001230a <CmGetMatch(char*, char*, bool, bool*)+0x13>
c001232a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001232d:	31 db                	xor    ebx,ebx
c001232f:	51                   	push   ecx
c0012330:	8d 04 9d e0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde20]
c0012337:	51                   	push   ecx
c0012338:	50                   	push   eax
c0012339:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001233d:	e8 fe e3 fe ff       	call   c0000740 <strcmp>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	85 c0                	test   eax,eax
c0012347:	74 09                	je     c0012352 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012349:	43                   	inc    ebx
c001234a:	83 fb 3f             	cmp    ebx,0x3f
c001234d:	75 e0                	jne    c001232f <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001234f:	83 cb ff             	or     ebx,0xffffffff
c0012352:	5a                   	pop    edx
c0012353:	89 d8                	mov    eax,ebx
c0012355:	5b                   	pop    ebx
c0012356:	5e                   	pop    esi
c0012357:	c3                   	ret    

c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012358:	55                   	push   ebp
c0012359:	31 c0                	xor    eax,eax
c001235b:	57                   	push   edi
c001235c:	56                   	push   esi
c001235d:	53                   	push   ebx
c001235e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012362:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012366:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001236a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001236e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012370:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012373:	83 fd 1f             	cmp    ebp,0x1f
c0012376:	7f 0b                	jg     c0012383 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012378:	0f b6 c2             	movzx  eax,dl
c001237b:	d3 e0                	shl    eax,cl
c001237d:	09 07                	or     DWORD PTR [edi],eax
c001237f:	b0 01                	mov    al,0x1
c0012381:	01 33                	add    DWORD PTR [ebx],esi
c0012383:	5b                   	pop    ebx
c0012384:	5e                   	pop    esi
c0012385:	5f                   	pop    edi
c0012386:	5d                   	pop    ebp
c0012387:	c3                   	ret    

c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012388:	57                   	push   edi
c0012389:	56                   	push   esi
c001238a:	53                   	push   ebx
c001238b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001238f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012393:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012397:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001239b:	39 0b                	cmp    DWORD PTR [ebx],ecx
c001239d:	7c 17                	jl     c00123b6 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001239f:	b8 01 00 00 00       	mov    eax,0x1
c00123a4:	8b 17                	mov    edx,DWORD PTR [edi]
c00123a6:	d3 e0                	shl    eax,cl
c00123a8:	48                   	dec    eax
c00123a9:	21 d0                	and    eax,edx
c00123ab:	d3 ea                	shr    edx,cl
c00123ad:	89 17                	mov    DWORD PTR [edi],edx
c00123af:	29 0b                	sub    DWORD PTR [ebx],ecx
c00123b1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123b4:	eb 05                	jmp    c00123bb <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123b6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123b9:	31 c0                	xor    eax,eax
c00123bb:	5b                   	pop    ebx
c00123bc:	5e                   	pop    esi
c00123bd:	5f                   	pop    edi
c00123be:	c3                   	ret    

c00123bf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123bf:	83 ec 40             	sub    esp,0x40
c00123c2:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123c6:	50                   	push   eax
c00123c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123cf:	e8 49 fa ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123d4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123d8:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123dc:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123e0:	89 10                	mov    DWORD PTR [eax],edx
c00123e2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123e5:	83 c4 4c             	add    esp,0x4c
c00123e8:	c3                   	ret    

c00123e9 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123e9:	55                   	push   ebp
c00123ea:	57                   	push   edi
c00123eb:	56                   	push   esi
c00123ec:	53                   	push   ebx
c00123ed:	83 ec 40             	sub    esp,0x40
c00123f0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123f4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123f8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123fc:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012400:	53                   	push   ebx
c0012401:	56                   	push   esi
c0012402:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012406:	e8 12 fa ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001240b:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001240f:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012413:	83 c4 0c             	add    esp,0xc
c0012416:	53                   	push   ebx
c0012417:	56                   	push   esi
c0012418:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001241c:	e8 20 fb ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012421:	83 c4 4c             	add    esp,0x4c
c0012424:	5b                   	pop    ebx
c0012425:	5e                   	pop    esi
c0012426:	5f                   	pop    edi
c0012427:	5d                   	pop    ebp
c0012428:	c3                   	ret    

c0012429 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012429:	55                   	push   ebp
c001242a:	57                   	push   edi
c001242b:	56                   	push   esi
c001242c:	31 f6                	xor    esi,esi
c001242e:	53                   	push   ebx
c001242f:	31 db                	xor    ebx,ebx
c0012431:	83 ec 40             	sub    esp,0x40
c0012434:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001243c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012444:	6a 12                	push   0x12
c0012446:	68 ee 00 00 00       	push   0xee
c001244b:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001244f:	e8 8c e0 fe ff       	call   c00004e0 <memset>
c0012454:	83 c4 10             	add    esp,0x10
c0012457:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001245b:	6a 08                	push   0x8
c001245d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012461:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012465:	50                   	push   eax
c0012466:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001246a:	55                   	push   ebp
c001246b:	57                   	push   edi
c001246c:	e8 e7 fe ff ff       	call   c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012478:	50                   	push   eax
c0012479:	6a 06                	push   0x6
c001247b:	55                   	push   ebp
c001247c:	57                   	push   edi
c001247d:	e8 06 ff ff ff       	call   c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001248a:	74 07                	je     c0012493 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c001248c:	46                   	inc    esi
c001248d:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012491:	eb e1                	jmp    c0012474 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012493:	43                   	inc    ebx
c0012494:	83 fb 12             	cmp    ebx,0x12
c0012497:	75 c2                	jne    c001245b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012499:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001249d:	31 db                	xor    ebx,ebx
c001249f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00124a2:	50                   	push   eax
c00124a3:	50                   	push   eax
c00124a4:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00124a9:	43                   	inc    ebx
c00124aa:	8d 04 85 e0 21 02 c0 	lea    eax,[eax*4-0x3ffdde20]
c00124b1:	50                   	push   eax
c00124b2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124b6:	e8 75 e3 fe ff       	call   c0000830 <strcat>
c00124bb:	83 c4 10             	add    esp,0x10
c00124be:	83 fb 18             	cmp    ebx,0x18
c00124c1:	75 df                	jne    c00124a2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124c3:	83 c4 3c             	add    esp,0x3c
c00124c6:	31 c0                	xor    eax,eax
c00124c8:	5b                   	pop    ebx
c00124c9:	5e                   	pop    esi
c00124ca:	5f                   	pop    edi
c00124cb:	5d                   	pop    ebp
c00124cc:	c3                   	ret    

c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124cd:	83 ec 40             	sub    esp,0x40
c00124d0:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124d4:	50                   	push   eax
c00124d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124dd:	e8 3b f9 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124e2:	58                   	pop    eax
c00124e3:	5a                   	pop    edx
c00124e4:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124e8:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124ec:	50                   	push   eax
c00124ed:	e8 37 ff ff ff       	call   c0012429 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124f2:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124f7:	83 c4 4c             	add    esp,0x4c
c00124fa:	c3                   	ret    

c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124fb:	55                   	push   ebp
c00124fc:	57                   	push   edi
c00124fd:	56                   	push   esi
c00124fe:	53                   	push   ebx
c00124ff:	31 db                	xor    ebx,ebx
c0012501:	83 ec 70             	sub    esp,0x70
c0012504:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001250b:	6a 30                	push   0x30
c001250d:	6a 00                	push   0x0
c001250f:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012513:	56                   	push   esi
c0012514:	e8 c7 df fe ff       	call   c00004e0 <memset>
c0012519:	83 c4 10             	add    esp,0x10
c001251c:	83 ec 0c             	sub    esp,0xc
c001251f:	57                   	push   edi
c0012520:	e8 3b e0 fe ff       	call   c0000560 <strlen>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	39 d8                	cmp    eax,ebx
c001252a:	76 16                	jbe    c0012542 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c001252c:	83 ec 0c             	sub    esp,0xc
c001252f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012533:	50                   	push   eax
c0012534:	e8 e7 e3 fe ff       	call   c0000920 <toupper>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001253f:	43                   	inc    ebx
c0012540:	eb da                	jmp    c001251c <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012542:	52                   	push   edx
c0012543:	31 f6                	xor    esi,esi
c0012545:	6a 18                	push   0x18
c0012547:	31 ff                	xor    edi,edi
c0012549:	6a 3f                	push   0x3f
c001254b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001254f:	50                   	push   eax
c0012550:	e8 8b df fe ff       	call   c00004e0 <memset>
c0012555:	83 c4 10             	add    esp,0x10
c0012558:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c001255c:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012560:	84 c0                	test   al,al
c0012562:	0f 84 b0 00 00 00    	je     c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012568:	8d 6e 01             	lea    ebp,[esi+0x1]
c001256b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001256f:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012574:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012578:	8a 54 2c 30          	mov    dl,BYTE PTR [esp+ebp*1+0x30]
c001257c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012581:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c0012585:	83 ec 0c             	sub    esp,0xc
c0012588:	53                   	push   ebx
c0012589:	e8 d2 df fe ff       	call   c0000560 <strlen>
c001258e:	83 c4 10             	add    esp,0x10
c0012591:	85 c0                	test   eax,eax
c0012593:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012597:	74 0b                	je     c00125a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012599:	50                   	push   eax
c001259a:	6a 01                	push   0x1
c001259c:	53                   	push   ebx
c001259d:	8d 44 24 20          	lea    eax,[esp+0x20]
c00125a1:	50                   	push   eax
c00125a2:	eb 0a                	jmp    c00125ae <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00125a4:	50                   	push   eax
c00125a5:	6a 00                	push   0x0
c00125a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00125ab:	50                   	push   eax
c00125ac:	6a 00                	push   0x0
c00125ae:	e8 44 fd ff ff       	call   c00122f7 <CmGetMatch(char*, char*, bool, bool*)>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	83 f8 ff             	cmp    eax,0xffffffff
c00125b9:	75 1a                	jne    c00125d5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125bb:	83 ec 0c             	sub    esp,0xc
c00125be:	68 b1 0d 02 c0       	push   0xc0020db1
c00125c3:	e8 77 e2 ff ff       	call   c001083f <KePanic(char const*)>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	b8 02 00 00 00       	mov    eax,0x2
c00125d0:	e9 bc 00 00 00       	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125d5:	83 ff 18             	cmp    edi,0x18
c00125d8:	75 1a                	jne    c00125f4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125da:	83 ec 0c             	sub    esp,0xc
c00125dd:	68 c6 0d 02 c0       	push   0xc0020dc6
c00125e2:	e8 58 e2 ff ff       	call   c001083f <KePanic(char const*)>
c00125e7:	83 c4 10             	add    esp,0x10
c00125ea:	b8 01 00 00 00       	mov    eax,0x1
c00125ef:	e9 9d 00 00 00       	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125f4:	47                   	inc    edi
c00125f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125fa:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125fe:	74 02                	je     c0012602 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012600:	89 ee                	mov    esi,ebp
c0012602:	83 ec 0c             	sub    esp,0xc
c0012605:	53                   	push   ebx
c0012606:	e8 55 df fe ff       	call   c0000560 <strlen>
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	85 c0                	test   eax,eax
c0012610:	74 06                	je     c0012618 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012612:	46                   	inc    esi
c0012613:	e9 40 ff ff ff       	jmp    c0012558 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012618:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012620:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012628:	50                   	push   eax
c0012629:	31 f6                	xor    esi,esi
c001262b:	6a 12                	push   0x12
c001262d:	31 ff                	xor    edi,edi
c001262f:	68 ee 00 00 00       	push   0xee
c0012634:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001263b:	e8 a0 de fe ff       	call   c00004e0 <memset>
c0012640:	83 c4 10             	add    esp,0x10
c0012643:	83 fe 17             	cmp    esi,0x17
c0012646:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001264a:	7e 26                	jle    c0012672 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c001264c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012650:	50                   	push   eax
c0012651:	6a 08                	push   0x8
c0012653:	55                   	push   ebp
c0012654:	53                   	push   ebx
c0012655:	e8 2e fd ff ff       	call   c0012388 <CmGetShift(unsigned int*, int*, int, bool*)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012662:	74 26                	je     c001268a <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012664:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001266b:	4e                   	dec    esi
c001266c:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001266f:	47                   	inc    edi
c0012670:	eb 1c                	jmp    c001268e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012672:	6a 06                	push   0x6
c0012674:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012679:	50                   	push   eax
c001267a:	55                   	push   ebp
c001267b:	53                   	push   ebx
c001267c:	e8 d7 fc ff ff       	call   c0012358 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012681:	83 c4 10             	add    esp,0x10
c0012684:	84 c0                	test   al,al
c0012686:	75 06                	jne    c001268e <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012688:	eb c2                	jmp    c001264c <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001268a:	31 c0                	xor    eax,eax
c001268c:	eb 03                	jmp    c0012691 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001268e:	46                   	inc    esi
c001268f:	eb b2                	jmp    c0012643 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012691:	83 c4 6c             	add    esp,0x6c
c0012694:	5b                   	pop    ebx
c0012695:	5e                   	pop    esi
c0012696:	5f                   	pop    edi
c0012697:	5d                   	pop    ebp
c0012698:	c3                   	ret    

c0012699 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012699:	53                   	push   ebx
c001269a:	83 ec 3c             	sub    esp,0x3c
c001269d:	6a 2b                	push   0x2b
c001269f:	6a 00                	push   0x0
c00126a1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00126a5:	53                   	push   ebx
c00126a6:	e8 35 de fe ff       	call   c00004e0 <memset>
c00126ab:	58                   	pop    eax
c00126ac:	5a                   	pop    edx
c00126ad:	8d 44 24 11          	lea    eax,[esp+0x11]
c00126b1:	50                   	push   eax
c00126b2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126b6:	e8 40 fe ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126bb:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126c0:	83 c4 0c             	add    esp,0xc
c00126c3:	6a 15                	push   0x15
c00126c5:	6a 00                	push   0x0
c00126c7:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126cb:	50                   	push   eax
c00126cc:	e8 0f de fe ff       	call   c00004e0 <memset>
c00126d1:	53                   	push   ebx
c00126d2:	6a 00                	push   0x0
c00126d4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126d8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126dc:	e8 e6 f9 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126e1:	83 c4 58             	add    esp,0x58
c00126e4:	5b                   	pop    ebx
c00126e5:	c3                   	ret    

c00126e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126e6:	56                   	push   esi
c00126e7:	53                   	push   ebx
c00126e8:	83 ec 48             	sub    esp,0x48
c00126eb:	6a 12                	push   0x12
c00126ed:	68 ff 00 00 00       	push   0xff
c00126f2:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126f6:	56                   	push   esi
c00126f7:	e8 e4 dd fe ff       	call   c00004e0 <memset>
c00126fc:	5a                   	pop    edx
c00126fd:	59                   	pop    ecx
c00126fe:	56                   	push   esi
c00126ff:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012703:	e8 f3 fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012708:	83 c4 10             	add    esp,0x10
c001270b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001270f:	85 db                	test   ebx,ebx
c0012711:	74 42                	je     c0012755 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012713:	50                   	push   eax
c0012714:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012718:	50                   	push   eax
c0012719:	53                   	push   ebx
c001271a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001271e:	e8 fa f6 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012723:	83 c4 0c             	add    esp,0xc
c0012726:	6a 12                	push   0x12
c0012728:	8d 44 24 21          	lea    eax,[esp+0x21]
c001272c:	50                   	push   eax
c001272d:	56                   	push   esi
c001272e:	e8 4d dc fe ff       	call   c0000380 <memcmp>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	85 c0                	test   eax,eax
c0012738:	74 1e                	je     c0012758 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001273a:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001273f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012744:	c1 e3 08             	shl    ebx,0x8
c0012747:	09 d8                	or     eax,ebx
c0012749:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001274e:	c1 e3 10             	shl    ebx,0x10
c0012751:	09 c3                	or     ebx,eax
c0012753:	eb ba                	jmp    c001270f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012755:	83 cb ff             	or     ebx,0xffffffff
c0012758:	83 c4 44             	add    esp,0x44
c001275b:	89 d8                	mov    eax,ebx
c001275d:	5b                   	pop    ebx
c001275e:	5e                   	pop    esi
c001275f:	c3                   	ret    

c0012760 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012760:	57                   	push   edi
c0012761:	56                   	push   esi
c0012762:	53                   	push   ebx
c0012763:	83 ec 34             	sub    esp,0x34
c0012766:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001276a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001276e:	6a 2b                	push   0x2b
c0012770:	6a 00                	push   0x0
c0012772:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012776:	53                   	push   ebx
c0012777:	e8 64 dd fe ff       	call   c00004e0 <memset>
c001277c:	58                   	pop    eax
c001277d:	5a                   	pop    edx
c001277e:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012782:	50                   	push   eax
c0012783:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012787:	e8 6f fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c001278c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012790:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012794:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012798:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001279c:	53                   	push   ebx
c001279d:	6a 00                	push   0x0
c001279f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127a7:	e8 1b f9 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127ac:	83 c4 50             	add    esp,0x50
c00127af:	5b                   	pop    ebx
c00127b0:	5e                   	pop    esi
c00127b1:	5f                   	pop    edi
c00127b2:	c3                   	ret    

c00127b3 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00127b3:	55                   	push   ebp
c00127b4:	57                   	push   edi
c00127b5:	56                   	push   esi
c00127b6:	53                   	push   ebx
c00127b7:	83 ec 40             	sub    esp,0x40
c00127ba:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127be:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127c2:	6a 2b                	push   0x2b
c00127c4:	6a 00                	push   0x0
c00127c6:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127ca:	56                   	push   esi
c00127cb:	e8 10 dd fe ff       	call   c00004e0 <memset>
c00127d0:	5f                   	pop    edi
c00127d1:	89 ef                	mov    edi,ebp
c00127d3:	58                   	pop    eax
c00127d4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127d8:	50                   	push   eax
c00127d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127dd:	e8 19 fd ff ff       	call   c00124fb <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127e2:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127e7:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127ec:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127f1:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127f6:	83 c4 10             	add    esp,0x10
c00127f9:	85 ed                	test   ebp,ebp
c00127fb:	74 14                	je     c0012811 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127fd:	51                   	push   ecx
c00127fe:	51                   	push   ecx
c00127ff:	57                   	push   edi
c0012800:	53                   	push   ebx
c0012801:	e8 09 f7 ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c0012806:	83 c4 10             	add    esp,0x10
c0012809:	85 c0                	test   eax,eax
c001280b:	74 04                	je     c0012811 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c001280d:	89 c7                	mov    edi,eax
c001280f:	eb e8                	jmp    c00127f9 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012811:	56                   	push   esi
c0012812:	6a 00                	push   0x0
c0012814:	57                   	push   edi
c0012815:	53                   	push   ebx
c0012816:	e8 ac f8 ff ff       	call   c00120c7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001281b:	83 c4 0c             	add    esp,0xc
c001281e:	89 c7                	mov    edi,eax
c0012820:	56                   	push   esi
c0012821:	50                   	push   eax
c0012822:	53                   	push   ebx
c0012823:	e8 f5 f5 ff ff       	call   c0011e1d <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012828:	58                   	pop    eax
c0012829:	5a                   	pop    edx
c001282a:	6a 6c                	push   0x6c
c001282c:	6a 00                	push   0x0
c001282e:	6a 00                	push   0x0
c0012830:	68 d7 0d 02 c0       	push   0xc0020dd7
c0012835:	57                   	push   edi
c0012836:	53                   	push   ebx
c0012837:	e8 24 ff ff ff       	call   c0012760 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c001283c:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012840:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012844:	c1 e8 10             	shr    eax,0x10
c0012847:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001284b:	83 c4 1c             	add    esp,0x1c
c001284e:	56                   	push   esi
c001284f:	57                   	push   edi
c0012850:	53                   	push   ebx
c0012851:	e8 eb f6 ff ff       	call   c0011f41 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012856:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001285b:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012860:	c1 e0 08             	shl    eax,0x8
c0012863:	09 c2                	or     edx,eax
c0012865:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001286a:	c1 e0 10             	shl    eax,0x10
c001286d:	83 c4 4c             	add    esp,0x4c
c0012870:	09 d0                	or     eax,edx
c0012872:	5b                   	pop    ebx
c0012873:	5e                   	pop    esi
c0012874:	5f                   	pop    edi
c0012875:	5d                   	pop    ebp
c0012876:	c3                   	ret    

c0012877 <zStrtok(char*, char const*)>:
c0012877:	55                   	push   ebp
c0012878:	57                   	push   edi
c0012879:	56                   	push   esi
c001287a:	53                   	push   ebx
c001287b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001287f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012883:	85 db                	test   ebx,ebx
c0012885:	74 2f                	je     c00128b6 <zStrtok(char*, char const*)+0x3f>
c0012887:	85 c0                	test   eax,eax
c0012889:	75 09                	jne    c0012894 <zStrtok(char*, char const*)+0x1d>
c001288b:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012890:	85 c0                	test   eax,eax
c0012892:	74 50                	je     c00128e4 <zStrtok(char*, char const*)+0x6d>
c0012894:	31 c9                	xor    ecx,ecx
c0012896:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001289a:	74 03                	je     c001289f <zStrtok(char*, char const*)+0x28>
c001289c:	41                   	inc    ecx
c001289d:	eb f7                	jmp    c0012896 <zStrtok(char*, char const*)+0x1f>
c001289f:	31 d2                	xor    edx,edx
c00128a1:	39 ca                	cmp    edx,ecx
c00128a3:	74 15                	je     c00128ba <zStrtok(char*, char const*)+0x43>
c00128a5:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00128a9:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00128ac:	8d 3c 10             	lea    edi,[eax+edx*1]
c00128af:	39 ee                	cmp    esi,ebp
c00128b1:	74 13                	je     c00128c6 <zStrtok(char*, char const*)+0x4f>
c00128b3:	42                   	inc    edx
c00128b4:	eb eb                	jmp    c00128a1 <zStrtok(char*, char const*)+0x2a>
c00128b6:	31 c0                	xor    eax,eax
c00128b8:	eb 2a                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128ba:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128c4:	eb 1e                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128c6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128c9:	39 ce                	cmp    esi,ecx
c00128cb:	75 0a                	jne    c00128d7 <zStrtok(char*, char const*)+0x60>
c00128cd:	40                   	inc    eax
c00128ce:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128d3:	89 d8                	mov    eax,ebx
c00128d5:	eb 0d                	jmp    c00128e4 <zStrtok(char*, char const*)+0x6d>
c00128d7:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128de:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128e4:	5b                   	pop    ebx
c00128e5:	5e                   	pop    esi
c00128e6:	5f                   	pop    edi
c00128e7:	5d                   	pop    ebp
c00128e8:	c3                   	ret    

c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128e9:	57                   	push   edi
c00128ea:	56                   	push   esi
c00128eb:	53                   	push   ebx
c00128ec:	81 ec 08 01 00 00    	sub    esp,0x108
c00128f2:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128f9:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012900:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012904:	53                   	push   ebx
c0012905:	e8 26 dd fe ff       	call   c0000630 <strcpy>
c001290a:	59                   	pop    ecx
c001290b:	5e                   	pop    esi
c001290c:	68 3b 11 02 c0       	push   0xc002113b
c0012911:	53                   	push   ebx
c0012912:	e8 60 ff ff ff       	call   c0012877 <zStrtok(char*, char const*)>
c0012917:	bb 01 00 00 00       	mov    ebx,0x1
c001291c:	83 c4 10             	add    esp,0x10
c001291f:	85 c0                	test   eax,eax
c0012921:	74 3b                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012923:	52                   	push   edx
c0012924:	50                   	push   eax
c0012925:	6a 01                	push   0x1
c0012927:	57                   	push   edi
c0012928:	e8 b9 fd ff ff       	call   c00126e6 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001292d:	59                   	pop    ecx
c001292e:	89 c3                	mov    ebx,eax
c0012930:	5e                   	pop    esi
c0012931:	68 3b 11 02 c0       	push   0xc002113b
c0012936:	6a 00                	push   0x0
c0012938:	e8 3a ff ff ff       	call   c0012877 <zStrtok(char*, char const*)>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	89 c6                	mov    esi,eax
c0012942:	85 c0                	test   eax,eax
c0012944:	74 18                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012946:	52                   	push   edx
c0012947:	52                   	push   edx
c0012948:	53                   	push   ebx
c0012949:	57                   	push   edi
c001294a:	e8 81 f5 ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c001294f:	83 c4 10             	add    esp,0x10
c0012952:	89 c3                	mov    ebx,eax
c0012954:	83 f8 ff             	cmp    eax,0xffffffff
c0012957:	74 05                	je     c001295e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012959:	50                   	push   eax
c001295a:	56                   	push   esi
c001295b:	53                   	push   ebx
c001295c:	eb c9                	jmp    c0012927 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001295e:	81 c4 00 01 00 00    	add    esp,0x100
c0012964:	89 d8                	mov    eax,ebx
c0012966:	5b                   	pop    ebx
c0012967:	5e                   	pop    esi
c0012968:	5f                   	pop    edi
c0012969:	c3                   	ret    

c001296a <CmDisplayTree(Reghive_Tag*, int, int)>:
c001296a:	55                   	push   ebp
c001296b:	57                   	push   edi
c001296c:	56                   	push   esi
c001296d:	53                   	push   ebx
c001296e:	83 ec 5c             	sub    esp,0x5c
c0012971:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012975:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012979:	85 db                	test   ebx,ebx
c001297b:	0f 8e 84 00 00 00    	jle    c0012a05 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012981:	57                   	push   edi
c0012982:	31 ed                	xor    ebp,ebp
c0012984:	6a 32                	push   0x32
c0012986:	6a 00                	push   0x0
c0012988:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001298c:	57                   	push   edi
c001298d:	e8 4e db fe ff       	call   c00004e0 <memset>
c0012992:	83 c4 0c             	add    esp,0xc
c0012995:	57                   	push   edi
c0012996:	53                   	push   ebx
c0012997:	56                   	push   esi
c0012998:	e8 30 fb ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001299d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00129a8:	7d 13                	jge    c00129bd <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	45                   	inc    ebp
c00129ae:	68 a8 14 02 c0       	push   0xc00214a8
c00129b3:	e8 9b 7f ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00129b8:	83 c4 10             	add    esp,0x10
c00129bb:	eb e7                	jmp    c00129a4 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129bd:	51                   	push   ecx
c00129be:	57                   	push   edi
c00129bf:	53                   	push   ebx
c00129c0:	68 dd 0d 02 c0       	push   0xc0020ddd
c00129c5:	e8 89 7f ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00129ca:	83 c4 10             	add    esp,0x10
c00129cd:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129d2:	75 1e                	jne    c00129f2 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129d4:	52                   	push   edx
c00129d5:	52                   	push   edx
c00129d6:	53                   	push   ebx
c00129d7:	56                   	push   esi
c00129d8:	e8 f3 f4 ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c00129dd:	83 c4 0c             	add    esp,0xc
c00129e0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129e4:	8d 51 04             	lea    edx,[ecx+0x4]
c00129e7:	52                   	push   edx
c00129e8:	50                   	push   eax
c00129e9:	56                   	push   esi
c00129ea:	e8 7b ff ff ff       	call   c001296a <CmDisplayTree(Reghive_Tag*, int, int)>
c00129ef:	83 c4 10             	add    esp,0x10
c00129f2:	50                   	push   eax
c00129f3:	50                   	push   eax
c00129f4:	53                   	push   ebx
c00129f5:	56                   	push   esi
c00129f6:	e8 14 f5 ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	89 c3                	mov    ebx,eax
c0012a00:	e9 74 ff ff ff       	jmp    c0012979 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012a05:	83 c4 5c             	add    esp,0x5c
c0012a08:	5b                   	pop    ebx
c0012a09:	5e                   	pop    esi
c0012a0a:	5f                   	pop    edi
c0012a0b:	5d                   	pop    ebp
c0012a0c:	c3                   	ret    

c0012a0d <CmSplitFinalSlashInPlace(char*)>:
c0012a0d:	53                   	push   ebx
c0012a0e:	83 ec 14             	sub    esp,0x14
c0012a11:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a15:	53                   	push   ebx
c0012a16:	e8 45 db fe ff       	call   c0000560 <strlen>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	48                   	dec    eax
c0012a1f:	85 c0                	test   eax,eax
c0012a21:	74 15                	je     c0012a38 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a23:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a26:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a2a:	75 09                	jne    c0012a35 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a2c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a2f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a33:	eb 05                	jmp    c0012a3a <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a35:	48                   	dec    eax
c0012a36:	eb e7                	jmp    c0012a1f <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a38:	31 c0                	xor    eax,eax
c0012a3a:	83 c4 08             	add    esp,0x8
c0012a3d:	5b                   	pop    ebx
c0012a3e:	c3                   	ret    

c0012a3f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a3f:	55                   	push   ebp
c0012a40:	57                   	push   edi
c0012a41:	56                   	push   esi
c0012a42:	53                   	push   ebx
c0012a43:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a49:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a50:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a53:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012a55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a59:	80 fa 40             	cmp    dl,0x40
c0012a5c:	75 1b                	jne    c0012a79 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3a>
c0012a5e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012a61:	85 c0                	test   eax,eax
c0012a63:	74 08                	je     c0012a6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x2e>
c0012a65:	83 f8 3a             	cmp    eax,0x3a
c0012a68:	74 03                	je     c0012a6d <Reg::findLineFromLoadedData(char*, char*, char*)+0x2e>
c0012a6a:	43                   	inc    ebx
c0012a6b:	eb f1                	jmp    c0012a5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0012a6d:	85 c0                	test   eax,eax
c0012a6f:	0f 84 49 01 00 00    	je     c0012bbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012a75:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a78:	43                   	inc    ebx
c0012a79:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012a7d:	50                   	push   eax
c0012a7e:	6a 40                	push   0x40
c0012a80:	6a 00                	push   0x0
c0012a82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a86:	50                   	push   eax
c0012a87:	e8 54 da fe ff       	call   c00004e0 <memset>
c0012a8c:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012a9b:	31 c0                	xor    eax,eax
c0012a9d:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012aa0:	89 d1                	mov    ecx,edx
c0012aa2:	85 d2                	test   edx,edx
c0012aa4:	0f 84 14 01 00 00    	je     c0012bbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012aaa:	3d c7 00 00 00       	cmp    eax,0xc7
c0012aaf:	0f 8f 09 01 00 00    	jg     c0012bbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012ab5:	83 fa 0a             	cmp    edx,0xa
c0012ab8:	0f 85 f1 00 00 00    	jne    c0012baf <Reg::findLineFromLoadedData(char*, char*, char*)+0x170>
c0012abe:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012ac3:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012ac8:	89 c8                	mov    eax,ecx
c0012aca:	a8 df                	test   al,0xdf
c0012acc:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ad1:	83 f9 23             	cmp    ecx,0x23
c0012ad4:	0f 94 c2             	sete   dl
c0012ad7:	89 d5                	mov    ebp,edx
c0012ad9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012add:	09 ea                	or     edx,ebp
c0012adf:	80 e2 01             	and    dl,0x1
c0012ae2:	75 47                	jne    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ae4:	83 e8 09             	sub    eax,0x9
c0012ae7:	3c 01                	cmp    al,0x1
c0012ae9:	76 40                	jbe    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012aeb:	83 f9 5b             	cmp    ecx,0x5b
c0012aee:	75 42                	jne    c0012b32 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf3>
c0012af0:	83 fe 40             	cmp    esi,0x40
c0012af3:	75 36                	jne    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012af5:	83 ec 0c             	sub    esp,0xc
c0012af8:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0012afc:	55                   	push   ebp
c0012afd:	e8 5e da fe ff       	call   c0000560 <strlen>
c0012b02:	83 c4 10             	add    esp,0x10
c0012b05:	83 f8 3f             	cmp    eax,0x3f
c0012b08:	0f 87 b0 00 00 00    	ja     c0012bbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b0e:	50                   	push   eax
c0012b0f:	50                   	push   eax
c0012b10:	55                   	push   ebp
c0012b11:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012b15:	55                   	push   ebp
c0012b16:	e8 15 db fe ff       	call   c0000630 <strcpy>
c0012b1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b1e:	e8 3d da fe ff       	call   c0000560 <strlen>
c0012b23:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	31 d2                	xor    edx,edx
c0012b2d:	e9 84 00 00 00       	jmp    c0012bb6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x177>
c0012b32:	83 fe 40             	cmp    esi,0x40
c0012b35:	74 06                	je     c0012b3d <Reg::findLineFromLoadedData(char*, char*, char*)+0xfe>
c0012b37:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012b3b:	eb 19                	jmp    c0012b56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b3d:	51                   	push   ecx
c0012b3e:	51                   	push   ecx
c0012b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012b43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b47:	50                   	push   eax
c0012b48:	e8 f3 db fe ff       	call   c0000740 <strcmp>
c0012b4d:	83 c4 10             	add    esp,0x10
c0012b50:	85 c0                	test   eax,eax
c0012b52:	75 d7                	jne    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b54:	eb e1                	jmp    c0012b37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf8>
c0012b56:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0012b59:	85 c9                	test   ecx,ecx
c0012b5b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012b60:	83 f9 3d             	cmp    ecx,0x3d
c0012b63:	0f 94 c0             	sete   al
c0012b66:	89 c5                	mov    ebp,eax
c0012b68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b6c:	09 e8                	or     eax,ebp
c0012b6e:	89 c5                	mov    ebp,eax
c0012b70:	a8 01                	test   al,0x1
c0012b72:	75 03                	jne    c0012b77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x138>
c0012b74:	42                   	inc    edx
c0012b75:	eb df                	jmp    c0012b56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b77:	85 c9                	test   ecx,ecx
c0012b79:	74 43                	je     c0012bbe <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0012b7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b7f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012b82:	52                   	push   edx
c0012b83:	52                   	push   edx
c0012b84:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b88:	50                   	push   eax
c0012b89:	53                   	push   ebx
c0012b8a:	e8 b1 db fe ff       	call   c0000740 <strcmp>
c0012b8f:	83 c4 10             	add    esp,0x10
c0012b92:	85 c0                	test   eax,eax
c0012b94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b98:	75 91                	jne    c0012b2b <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012b9a:	50                   	push   eax
c0012b9b:	42                   	inc    edx
c0012b9c:	50                   	push   eax
c0012b9d:	52                   	push   edx
c0012b9e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012ba5:	e8 86 da fe ff       	call   c0000630 <strcpy>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	eb 11                	jmp    c0012bc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x181>
c0012baf:	8d 50 01             	lea    edx,[eax+0x1]
c0012bb2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012bb6:	47                   	inc    edi
c0012bb7:	89 d0                	mov    eax,edx
c0012bb9:	e9 df fe ff ff       	jmp    c0012a9d <Reg::findLineFromLoadedData(char*, char*, char*)+0x5e>
c0012bbe:	31 ed                	xor    ebp,ebp
c0012bc0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bc6:	89 e8                	mov    eax,ebp
c0012bc8:	5b                   	pop    ebx
c0012bc9:	5e                   	pop    esi
c0012bca:	5f                   	pop    edi
c0012bcb:	5d                   	pop    ebp
c0012bcc:	c3                   	ret    

c0012bcd <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012bcd:	57                   	push   edi
c0012bce:	56                   	push   esi
c0012bcf:	53                   	push   ebx
c0012bd0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012bd6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bdd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012be4:	53                   	push   ebx
c0012be5:	e8 76 d9 fe ff       	call   c0000560 <strlen>
c0012bea:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bed:	89 c7                	mov    edi,eax
c0012bef:	e8 6c d9 fe ff       	call   c0000560 <strlen>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bfb:	3d ff 00 00 00       	cmp    eax,0xff
c0012c00:	0f 87 d3 00 00 00    	ja     c0012cd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c06:	57                   	push   edi
c0012c07:	57                   	push   edi
c0012c08:	56                   	push   esi
c0012c09:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012c0d:	56                   	push   esi
c0012c0e:	e8 1d da fe ff       	call   c0000630 <strcpy>
c0012c13:	58                   	pop    eax
c0012c14:	5a                   	pop    edx
c0012c15:	68 3b 11 02 c0       	push   0xc002113b
c0012c1a:	56                   	push   esi
c0012c1b:	e8 10 dc fe ff       	call   c0000830 <strcat>
c0012c20:	59                   	pop    ecx
c0012c21:	5f                   	pop    edi
c0012c22:	53                   	push   ebx
c0012c23:	56                   	push   esi
c0012c24:	e8 07 dc fe ff       	call   c0000830 <strcat>
c0012c29:	58                   	pop    eax
c0012c2a:	5a                   	pop    edx
c0012c2b:	68 e7 0d 02 c0       	push   0xc0020de7
c0012c30:	56                   	push   esi
c0012c31:	e8 fa db fe ff       	call   c0000830 <strcat>
c0012c36:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c3d:	e8 4a 4e ff ff       	call   c0007a8c <malloc>
c0012c42:	83 c4 0c             	add    esp,0xc
c0012c45:	89 c3                	mov    ebx,eax
c0012c47:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c4d:	56                   	push   esi
c0012c4e:	50                   	push   eax
c0012c4f:	e8 82 82 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0012c54:	83 c4 10             	add    esp,0x10
c0012c57:	85 db                	test   ebx,ebx
c0012c59:	74 7e                	je     c0012cd9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c5b:	51                   	push   ecx
c0012c5c:	51                   	push   ecx
c0012c5d:	6a 01                	push   0x1
c0012c5f:	53                   	push   ebx
c0012c60:	e8 2d 83 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0012c65:	83 c4 10             	add    esp,0x10
c0012c68:	85 c0                	test   eax,eax
c0012c6a:	74 08                	je     c0012c74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c6c:	83 ec 0c             	sub    esp,0xc
c0012c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c71:	53                   	push   ebx
c0012c72:	eb 5f                	jmp    c0012cd3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c74:	52                   	push   edx
c0012c75:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c79:	50                   	push   eax
c0012c7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c7e:	50                   	push   eax
c0012c7f:	53                   	push   ebx
c0012c80:	e8 b9 85 ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0012c85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c89:	83 c4 10             	add    esp,0x10
c0012c8c:	89 c1                	mov    ecx,eax
c0012c8e:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c92:	74 31                	je     c0012cc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	50                   	push   eax
c0012c98:	e8 ef 4d ff ff       	call   c0007a8c <malloc>
c0012c9d:	89 c6                	mov    esi,eax
c0012c9f:	58                   	pop    eax
c0012ca0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ca2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012ca6:	52                   	push   edx
c0012ca7:	56                   	push   esi
c0012ca8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012cb0:	53                   	push   ebx
c0012cb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012cb4:	83 c4 20             	add    esp,0x20
c0012cb7:	85 c0                	test   eax,eax
c0012cb9:	75 0a                	jne    c0012cc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012cbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cbf:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012cc3:	74 18                	je     c0012cdd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012cc5:	83 ec 0c             	sub    esp,0xc
c0012cc8:	53                   	push   ebx
c0012cc9:	e8 22 83 ff ff       	call   c000aff0 <File::close()>
c0012cce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cd3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	31 c0                	xor    eax,eax
c0012cdb:	eb 3b                	jmp    c0012d18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cdd:	83 ec 0c             	sub    esp,0xc
c0012ce0:	53                   	push   ebx
c0012ce1:	e8 0a 83 ff ff       	call   c000aff0 <File::close()>
c0012ce6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ce8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ceb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cee:	83 c4 0c             	add    esp,0xc
c0012cf1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cf8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cff:	56                   	push   esi
c0012d00:	e8 3a fd ff ff       	call   c0012a3f <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012d05:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d08:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d0c:	e8 8b 4d ff ff       	call   c0007a9c <free>
c0012d11:	83 c4 10             	add    esp,0x10
c0012d14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012d18:	81 c4 20 01 00 00    	add    esp,0x120
c0012d1e:	5b                   	pop    ebx
c0012d1f:	5e                   	pop    esi
c0012d20:	5f                   	pop    edi
c0012d21:	c3                   	ret    

c0012d22 <Reg::getLine(char*, char*, char*)>:
c0012d22:	57                   	push   edi
c0012d23:	56                   	push   esi
c0012d24:	53                   	push   ebx
c0012d25:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012d31:	57                   	push   edi
c0012d32:	56                   	push   esi
c0012d33:	53                   	push   ebx
c0012d34:	68 ec 0d 02 c0       	push   0xc0020dec
c0012d39:	e8 8f fe ff ff       	call   c0012bcd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d3e:	83 c4 10             	add    esp,0x10
c0012d41:	84 c0                	test   al,al
c0012d43:	75 10                	jne    c0012d55 <Reg::getLine(char*, char*, char*)+0x33>
c0012d45:	57                   	push   edi
c0012d46:	56                   	push   esi
c0012d47:	53                   	push   ebx
c0012d48:	68 11 0e 02 c0       	push   0xc0020e11
c0012d4d:	e8 7b fe ff ff       	call   c0012bcd <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d52:	83 c4 10             	add    esp,0x10
c0012d55:	5b                   	pop    ebx
c0012d56:	5e                   	pop    esi
c0012d57:	5f                   	pop    edi
c0012d58:	c3                   	ret    

c0012d59 <Reg::readInt(char*, char*, int*)>:
c0012d59:	55                   	push   ebp
c0012d5a:	57                   	push   edi
c0012d5b:	56                   	push   esi
c0012d5c:	53                   	push   ebx
c0012d5d:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d63:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d67:	55                   	push   ebp
c0012d68:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d6f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d76:	e8 a7 ff ff ff       	call   c0012d22 <Reg::getLine(char*, char*, char*)>
c0012d7b:	83 c4 10             	add    esp,0x10
c0012d7e:	84 c0                	test   al,al
c0012d80:	0f 84 b6 00 00 00    	je     c0012e3c <Reg::readInt(char*, char*, int*)+0xe3>
c0012d86:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d8b:	83 fa 2b             	cmp    edx,0x2b
c0012d8e:	74 0c                	je     c0012d9c <Reg::readInt(char*, char*, int*)+0x43>
c0012d90:	83 fa 2d             	cmp    edx,0x2d
c0012d93:	75 0e                	jne    c0012da3 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d95:	ba 01 00 00 00       	mov    edx,0x1
c0012d9a:	eb 0b                	jmp    c0012da7 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d9c:	ba 01 00 00 00       	mov    edx,0x1
c0012da1:	eb 02                	jmp    c0012da5 <Reg::readInt(char*, char*, int*)+0x4c>
c0012da3:	31 d2                	xor    edx,edx
c0012da5:	31 c0                	xor    eax,eax
c0012da7:	be 0a 00 00 00       	mov    esi,0xa
c0012dac:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012db1:	75 21                	jne    c0012dd4 <Reg::readInt(char*, char*, int*)+0x7b>
c0012db3:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012db8:	83 f9 78             	cmp    ecx,0x78
c0012dbb:	75 0a                	jne    c0012dc7 <Reg::readInt(char*, char*, int*)+0x6e>
c0012dbd:	83 c2 02             	add    edx,0x2
c0012dc0:	be 10 00 00 00       	mov    esi,0x10
c0012dc5:	eb 0d                	jmp    c0012dd4 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dc7:	83 f9 62             	cmp    ecx,0x62
c0012dca:	75 08                	jne    c0012dd4 <Reg::readInt(char*, char*, int*)+0x7b>
c0012dcc:	83 c2 02             	add    edx,0x2
c0012dcf:	be 02 00 00 00       	mov    esi,0x2
c0012dd4:	01 d5                	add    ebp,edx
c0012dd6:	31 d2                	xor    edx,edx
c0012dd8:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012ddc:	85 c9                	test   ecx,ecx
c0012dde:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012de2:	0f 94 c3             	sete   bl
c0012de5:	89 df                	mov    edi,ebx
c0012de7:	83 f9 0d             	cmp    ecx,0xd
c0012dea:	0f 94 c3             	sete   bl
c0012ded:	09 df                	or     edi,ebx
c0012def:	89 fb                	mov    ebx,edi
c0012df1:	83 e7 01             	and    edi,0x1
c0012df4:	75 35                	jne    c0012e2b <Reg::readInt(char*, char*, int*)+0xd2>
c0012df6:	0f af d6             	imul   edx,esi
c0012df9:	83 fe 10             	cmp    esi,0x10
c0012dfc:	75 26                	jne    c0012e24 <Reg::readInt(char*, char*, int*)+0xcb>
c0012dfe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012e02:	83 ef 41             	sub    edi,0x41
c0012e05:	89 fb                	mov    ebx,edi
c0012e07:	80 fb 05             	cmp    bl,0x5
c0012e0a:	77 06                	ja     c0012e12 <Reg::readInt(char*, char*, int*)+0xb9>
c0012e0c:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012e10:	eb 16                	jmp    c0012e28 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e16:	83 eb 61             	sub    ebx,0x61
c0012e19:	80 fb 05             	cmp    bl,0x5
c0012e1c:	77 06                	ja     c0012e24 <Reg::readInt(char*, char*, int*)+0xcb>
c0012e1e:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012e22:	eb 04                	jmp    c0012e28 <Reg::readInt(char*, char*, int*)+0xcf>
c0012e24:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012e28:	45                   	inc    ebp
c0012e29:	eb ad                	jmp    c0012dd8 <Reg::readInt(char*, char*, int*)+0x7f>
c0012e2b:	84 c0                	test   al,al
c0012e2d:	74 02                	je     c0012e31 <Reg::readInt(char*, char*, int*)+0xd8>
c0012e2f:	f7 da                	neg    edx
c0012e31:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e38:	89 10                	mov    DWORD PTR [eax],edx
c0012e3a:	88 d8                	mov    al,bl
c0012e3c:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e42:	5b                   	pop    ebx
c0012e43:	5e                   	pop    esi
c0012e44:	5f                   	pop    edi
c0012e45:	5d                   	pop    ebp
c0012e46:	c3                   	ret    

c0012e47 <Reg::readString(char*, char*, char*, int)>:
c0012e47:	57                   	push   edi
c0012e48:	56                   	push   esi
c0012e49:	53                   	push   ebx
c0012e4a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e50:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e54:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e5b:	57                   	push   edi
c0012e5c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e63:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e6a:	e8 b3 fe ff ff       	call   c0012d22 <Reg::getLine(char*, char*, char*)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	89 c6                	mov    esi,eax
c0012e74:	84 c0                	test   al,al
c0012e76:	74 44                	je     c0012ebc <Reg::readString(char*, char*, char*, int)+0x75>
c0012e78:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e7f:	31 c0                	xor    eax,eax
c0012e81:	4a                   	dec    edx
c0012e82:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e85:	84 c9                	test   cl,cl
c0012e87:	74 0f                	je     c0012e98 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e89:	39 c2                	cmp    edx,eax
c0012e8b:	7e 0b                	jle    c0012e98 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e8d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e90:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e95:	40                   	inc    eax
c0012e96:	eb ea                	jmp    c0012e82 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e98:	83 ec 0c             	sub    esp,0xc
c0012e9b:	53                   	push   ebx
c0012e9c:	e8 bf d6 fe ff       	call   c0000560 <strlen>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012ea9:	75 11                	jne    c0012ebc <Reg::readString(char*, char*, char*, int)+0x75>
c0012eab:	83 ec 0c             	sub    esp,0xc
c0012eae:	53                   	push   ebx
c0012eaf:	e8 ac d6 fe ff       	call   c0000560 <strlen>
c0012eb4:	83 c4 10             	add    esp,0x10
c0012eb7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ebc:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012ec2:	89 f0                	mov    eax,esi
c0012ec4:	5b                   	pop    ebx
c0012ec5:	5e                   	pop    esi
c0012ec6:	5f                   	pop    edi
c0012ec7:	c3                   	ret    

c0012ec8 <Reg::readBool(char*, char*, bool*)>:
c0012ec8:	83 ec 20             	sub    esp,0x20
c0012ecb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ecf:	50                   	push   eax
c0012ed0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed8:	e8 7c fe ff ff       	call   c0012d59 <Reg::readInt(char*, char*, int*)>
c0012edd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012ee1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ee6:	0f 95 02             	setne  BYTE PTR [edx]
c0012ee9:	83 c4 2c             	add    esp,0x2c
c0012eec:	c3                   	ret    

c0012eed <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012eed:	53                   	push   ebx
c0012eee:	83 ec 1c             	sub    esp,0x1c
c0012ef1:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012ef5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012ef9:	50                   	push   eax
c0012efa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012efe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f02:	e8 c1 ff ff ff       	call   c0012ec8 <Reg::readBool(char*, char*, bool*)>
c0012f07:	83 c4 10             	add    esp,0x10
c0012f0a:	84 c0                	test   al,al
c0012f0c:	74 04                	je     c0012f12 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012f0e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012f12:	83 c4 18             	add    esp,0x18
c0012f15:	88 d8                	mov    al,bl
c0012f17:	5b                   	pop    ebx
c0012f18:	c3                   	ret    

c0012f19 <Reg::readIntWithDefault(char*, char*, int)>:
c0012f19:	53                   	push   ebx
c0012f1a:	83 ec 1c             	sub    esp,0x1c
c0012f1d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012f25:	50                   	push   eax
c0012f26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f2e:	e8 26 fe ff ff       	call   c0012d59 <Reg::readInt(char*, char*, int*)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	84 c0                	test   al,al
c0012f38:	74 04                	je     c0012f3e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f3e:	83 c4 18             	add    esp,0x18
c0012f41:	89 d8                	mov    eax,ebx
c0012f43:	5b                   	pop    ebx
c0012f44:	c3                   	ret    

c0012f45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f45:	57                   	push   edi
c0012f46:	56                   	push   esi
c0012f47:	56                   	push   esi
c0012f48:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f4c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f50:	56                   	push   esi
c0012f51:	57                   	push   edi
c0012f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f5a:	e8 e8 fe ff ff       	call   c0012e47 <Reg::readString(char*, char*, char*, int)>
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	84 c0                	test   al,al
c0012f64:	75 1a                	jne    c0012f80 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f66:	51                   	push   ecx
c0012f67:	56                   	push   esi
c0012f68:	6a 00                	push   0x0
c0012f6a:	57                   	push   edi
c0012f6b:	e8 70 d5 fe ff       	call   c00004e0 <memset>
c0012f70:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012f77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f80:	5a                   	pop    edx
c0012f81:	89 f8                	mov    eax,edi
c0012f83:	5e                   	pop    esi
c0012f84:	5f                   	pop    edi
c0012f85:	c3                   	ret    

c0012f86 <SysEject(regs*)>:
c0012f86:	83 ec 0c             	sub    esp,0xc
c0012f89:	83 ca ff             	or     edx,0xffffffff
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f93:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f98:	83 e9 41             	sub    ecx,0x41
c0012f9b:	83 f9 19             	cmp    ecx,0x19
c0012f9e:	77 18                	ja     c0012fb8 <SysEject(regs*)+0x32>
c0012fa0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012fa7:	85 c9                	test   ecx,ecx
c0012fa9:	74 0d                	je     c0012fb8 <SysEject(regs*)+0x32>
c0012fab:	83 ec 0c             	sub    esp,0xc
c0012fae:	51                   	push   ecx
c0012faf:	e8 58 a1 ff ff       	call   c000d10c <LogicalDisk::eject()>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	99                   	cdq    
c0012fb8:	83 c4 0c             	add    esp,0xc
c0012fbb:	c3                   	ret    

c0012fbc <SysExit(regs*)>:
c0012fbc:	83 ec 18             	sub    esp,0x18
c0012fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fc3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fc6:	e8 01 2a 00 00       	call   c00159cc <terminateTask(int)>
c0012fcb:	83 c8 ff             	or     eax,0xffffffff
c0012fce:	89 c2                	mov    edx,eax
c0012fd0:	83 c4 1c             	add    esp,0x1c
c0012fd3:	c3                   	ret    

c0012fd4 <SysGetCwd(regs*)>:
c0012fd4:	83 ec 10             	sub    esp,0x10
c0012fd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fdb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fde:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fe1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fe6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fe9:	e8 de 7c ff ff       	call   c000accc <Fs::getcwd(Process*, char*, int)>
c0012fee:	83 c4 1c             	add    esp,0x1c
c0012ff1:	99                   	cdq    
c0012ff2:	c3                   	ret    

c0012ff3 <SysGetPID(regs*)>:
c0012ff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ff8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ffd:	99                   	cdq    
c0012ffe:	c3                   	ret    

c0012fff <SysGetRAMData(regs*)>:
c0012fff:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0013009:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c001300f:	99                   	cdq    
c0013010:	f7 f9                	idiv   ecx
c0013012:	c1 e0 18             	shl    eax,0x18
c0013015:	09 c8                	or     eax,ecx
c0013017:	99                   	cdq    
c0013018:	c3                   	ret    

c0013019 <SysGetVGAPtr(regs*)>:
c0013019:	55                   	push   ebp
c001301a:	57                   	push   edi
c001301b:	56                   	push   esi
c001301c:	53                   	push   ebx
c001301d:	83 ec 18             	sub    esp,0x18
c0013020:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013024:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013027:	e8 6c 24 00 00       	call   c0015498 <Thr::processFromPID(int)>
c001302c:	83 c4 10             	add    esp,0x10
c001302f:	89 c1                	mov    ecx,eax
c0013031:	b8 01 00 00 00       	mov    eax,0x1
c0013036:	85 c9                	test   ecx,ecx
c0013038:	74 57                	je     c0013091 <SysGetVGAPtr(regs*)+0x78>
c001303a:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013040:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013044:	74 0c                	je     c0013052 <SysGetVGAPtr(regs*)+0x39>
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	55                   	push   ebp
c001304a:	e8 e8 56 ff ff       	call   c0008737 <setActiveTerminal(VgaText*)>
c001304f:	83 c4 10             	add    esp,0x10
c0013052:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013055:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013058:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001305d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001305f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013062:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013065:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001306b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001306e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013071:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013077:	50                   	push   eax
c0013078:	50                   	push   eax
c0013079:	68 2c 0e 02 c0       	push   0xc0020e2c
c001307e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013081:	05 a8 0f 00 00       	add    eax,0xfa8
c0013086:	50                   	push   eax
c0013087:	e8 a4 d5 fe ff       	call   c0000630 <strcpy>
c001308c:	83 c4 10             	add    esp,0x10
c001308f:	31 c0                	xor    eax,eax
c0013091:	83 c4 0c             	add    esp,0xc
c0013094:	31 d2                	xor    edx,edx
c0013096:	5b                   	pop    ebx
c0013097:	5e                   	pop    esi
c0013098:	5f                   	pop    edi
c0013099:	5d                   	pop    ebp
c001309a:	c3                   	ret    
c001309b:	90                   	nop

c001309c <SysKill(regs*)>:
c001309c:	53                   	push   ebx
c001309d:	83 ec 08             	sub    esp,0x8
c00130a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130a4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00130a8:	75 16                	jne    c00130c0 <SysKill(regs*)+0x24>
c00130aa:	83 ec 0c             	sub    esp,0xc
c00130ad:	68 36 0e 02 c0       	push   0xc0020e36
c00130b2:	e8 88 d7 ff ff       	call   c001083f <KePanic(char const*)>
c00130b7:	83 c4 10             	add    esp,0x10
c00130ba:	e9 89 00 00 00       	jmp    c0013148 <SysKill(regs*)+0xac>
c00130bf:	90                   	nop
c00130c0:	83 ec 0c             	sub    esp,0xc
c00130c3:	68 84 81 02 c0       	push   0xc0028184
c00130c8:	e8 ef ba 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130cd:	8d 76 00             	lea    esi,[esi+0x0]
c00130d0:	83 c4 10             	add    esp,0x10
c00130d3:	85 c0                	test   eax,eax
c00130d5:	74 19                	je     c00130f0 <SysKill(regs*)+0x54>
c00130d7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130dd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130df:	74 33                	je     c0013114 <SysKill(regs*)+0x78>
c00130e1:	52                   	push   edx
c00130e2:	52                   	push   edx
c00130e3:	50                   	push   eax
c00130e4:	68 84 81 02 c0       	push   0xc0028184
c00130e9:	e8 ee bd 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130ee:	eb e0                	jmp    c00130d0 <SysKill(regs*)+0x34>
c00130f0:	83 ec 0c             	sub    esp,0xc
c00130f3:	68 78 81 02 c0       	push   0xc0028178
c00130f8:	e8 bf ba 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013100:	83 c4 10             	add    esp,0x10
c0013103:	85 c0                	test   eax,eax
c0013105:	74 41                	je     c0013148 <SysKill(regs*)+0xac>
c0013107:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001310a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001310d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001310f:	75 27                	jne    c0013138 <SysKill(regs*)+0x9c>
c0013111:	8d 76 00             	lea    esi,[esi+0x0]
c0013114:	51                   	push   ecx
c0013115:	51                   	push   ecx
c0013116:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001311e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013121:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013127:	e8 af db ff ff       	call   c0010cdb <KeRaiseSignal(SigHandlerBlock*, int)>
c001312c:	83 c4 10             	add    esp,0x10
c001312f:	31 c0                	xor    eax,eax
c0013131:	31 d2                	xor    edx,edx
c0013133:	eb 1b                	jmp    c0013150 <SysKill(regs*)+0xb4>
c0013135:	8d 76 00             	lea    esi,[esi+0x0]
c0013138:	52                   	push   edx
c0013139:	52                   	push   edx
c001313a:	50                   	push   eax
c001313b:	68 78 81 02 c0       	push   0xc0028178
c0013140:	e8 97 bd 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013145:	eb b9                	jmp    c0013100 <SysKill(regs*)+0x64>
c0013147:	90                   	nop
c0013148:	83 c8 ff             	or     eax,0xffffffff
c001314b:	89 c2                	mov    edx,eax
c001314d:	8d 76 00             	lea    esi,[esi+0x0]
c0013150:	83 c4 08             	add    esp,0x8
c0013153:	5b                   	pop    ebx
c0013154:	c3                   	ret    

c0013155 <SysLoadDLL(regs*)>:
c0013155:	56                   	push   esi
c0013156:	31 d2                	xor    edx,edx
c0013158:	53                   	push   ebx
c0013159:	b8 01 00 00 00       	mov    eax,0x1
c001315e:	51                   	push   ecx
c001315f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013163:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013167:	0f 84 8c 00 00 00    	je     c00131f9 <SysLoadDLL(regs*)+0xa4>
c001316d:	83 ec 0c             	sub    esp,0xc
c0013170:	68 14 01 00 00       	push   0x114
c0013175:	e8 12 49 ff ff       	call   c0007a8c <malloc>
c001317a:	89 c3                	mov    ebx,eax
c001317c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013181:	83 c4 0c             	add    esp,0xc
c0013184:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013187:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001318a:	53                   	push   ebx
c001318b:	e8 46 7d ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0013190:	83 c4 10             	add    esp,0x10
c0013193:	31 d2                	xor    edx,edx
c0013195:	b8 02 00 00 00       	mov    eax,0x2
c001319a:	85 db                	test   ebx,ebx
c001319c:	74 5b                	je     c00131f9 <SysLoadDLL(regs*)+0xa4>
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	53                   	push   ebx
c00131a2:	e8 59 80 ff ff       	call   c000b200 <File::exists()>
c00131a7:	83 c4 10             	add    esp,0x10
c00131aa:	84 c0                	test   al,al
c00131ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131ae:	75 11                	jne    c00131c1 <SysLoadDLL(regs*)+0x6c>
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	53                   	push   ebx
c00131b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	b8 03 00 00 00       	mov    eax,0x3
c00131bf:	eb 36                	jmp    c00131f7 <SysLoadDLL(regs*)+0xa2>
c00131c1:	83 ec 0c             	sub    esp,0xc
c00131c4:	53                   	push   ebx
c00131c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131c8:	58                   	pop    eax
c00131c9:	5a                   	pop    edx
c00131ca:	6a 00                	push   0x0
c00131cc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00131cf:	e8 0b 14 00 00       	call   c00145df <Thr::loadDLL(char const*, bool)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	89 c1                	mov    ecx,eax
c00131d9:	31 d2                	xor    edx,edx
c00131db:	b8 04 00 00 00       	mov    eax,0x4
c00131e0:	85 c9                	test   ecx,ecx
c00131e2:	74 15                	je     c00131f9 <SysLoadDLL(regs*)+0xa4>
c00131e4:	53                   	push   ebx
c00131e5:	53                   	push   ebx
c00131e6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131ec:	51                   	push   ecx
c00131ed:	e8 27 16 00 00       	call   c0014819 <Thr::executeDLL(unsigned long, void*)>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	31 c0                	xor    eax,eax
c00131f7:	31 d2                	xor    edx,edx
c00131f9:	59                   	pop    ecx
c00131fa:	5b                   	pop    ebx
c00131fb:	5e                   	pop    esi
c00131fc:	c3                   	ret    

c00131fd <SysRead(regs*)>:
c00131fd:	57                   	push   edi
c00131fe:	56                   	push   esi
c00131ff:	53                   	push   ebx
c0013200:	83 ec 10             	sub    esp,0x10
c0013203:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013207:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001320a:	83 f8 02             	cmp    eax,0x2
c001320d:	77 10                	ja     c001321f <SysRead(regs*)+0x22>
c001320f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013214:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013217:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001321d:	eb 0e                	jmp    c001322d <SysRead(regs*)+0x30>
c001321f:	83 ec 0c             	sub    esp,0xc
c0013222:	50                   	push   eax
c0013223:	e8 6f 62 ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c0013228:	83 c4 10             	add    esp,0x10
c001322b:	89 c1                	mov    ecx,eax
c001322d:	83 c8 ff             	or     eax,0xffffffff
c0013230:	85 c9                	test   ecx,ecx
c0013232:	89 c2                	mov    edx,eax
c0013234:	74 28                	je     c001325e <SysRead(regs*)+0x61>
c0013236:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001323e:	83 ec 0c             	sub    esp,0xc
c0013241:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013243:	31 ff                	xor    edi,edi
c0013245:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013249:	52                   	push   edx
c001324a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001324d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013250:	57                   	push   edi
c0013251:	56                   	push   esi
c0013252:	51                   	push   ecx
c0013253:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013256:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001325a:	83 c4 20             	add    esp,0x20
c001325d:	99                   	cdq    
c001325e:	83 c4 10             	add    esp,0x10
c0013261:	5b                   	pop    ebx
c0013262:	5e                   	pop    esi
c0013263:	5f                   	pop    edi
c0013264:	c3                   	ret    

c0013265 <SysRegisterSignal(regs*)>:
c0013265:	83 ec 18             	sub    esp,0x18
c0013268:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326c:	6a 00                	push   0x0
c001326e:	6a 00                	push   0x0
c0013270:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013273:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001327b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001327e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013284:	e8 1c da ff ff       	call   c0010ca5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013289:	83 c4 2c             	add    esp,0x2c
c001328c:	99                   	cdq    
c001328d:	c3                   	ret    

c001328e <SysRegistryGetTypeFromPath(regs*)>:
c001328e:	57                   	push   edi
c001328f:	56                   	push   esi
c0013290:	53                   	push   ebx
c0013291:	81 ec 38 01 00 00    	sub    esp,0x138
c0013297:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001329e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132a1:	68 57 0e 02 c0       	push   0xc0020e57
c00132a6:	e8 a8 76 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00132ab:	5a                   	pop    edx
c00132ac:	59                   	pop    ecx
c00132ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132b3:	e8 31 f6 ff ff       	call   c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00132b8:	5f                   	pop    edi
c00132b9:	89 c6                	mov    esi,eax
c00132bb:	5a                   	pop    edx
c00132bc:	50                   	push   eax
c00132bd:	68 77 0e 02 c0       	push   0xc0020e77
c00132c2:	e8 8c 76 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	85 f6                	test   esi,esi
c00132cc:	74 28                	je     c00132f6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00132ce:	50                   	push   eax
c00132cf:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132d3:	57                   	push   edi
c00132d4:	56                   	push   esi
c00132d5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132d8:	e8 f0 f1 ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132dd:	83 c4 0c             	add    esp,0xc
c00132e0:	57                   	push   edi
c00132e1:	89 c3                	mov    ebx,eax
c00132e3:	50                   	push   eax
c00132e4:	68 7f 0e 02 c0       	push   0xc0020e7f
c00132e9:	e8 65 76 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00132ee:	89 d8                	mov    eax,ebx
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	99                   	cdq    
c00132f4:	eb 05                	jmp    c00132fb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132f6:	83 c8 ff             	or     eax,0xffffffff
c00132f9:	89 c2                	mov    edx,eax
c00132fb:	81 c4 30 01 00 00    	add    esp,0x130
c0013301:	5b                   	pop    ebx
c0013302:	5e                   	pop    esi
c0013303:	5f                   	pop    edi
c0013304:	c3                   	ret    

c0013305 <SysRegistryReadExtent(regs*)>:
c0013305:	83 ec 1c             	sub    esp,0x1c
c0013308:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001330c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001330f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013312:	85 c0                	test   eax,eax
c0013314:	79 1f                	jns    c0013335 <SysRegistryReadExtent(regs*)+0x30>
c0013316:	52                   	push   edx
c0013317:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001331c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013320:	52                   	push   edx
c0013321:	50                   	push   eax
c0013322:	51                   	push   ecx
c0013323:	e8 97 f0 ff ff       	call   c00123bf <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013328:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001332c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	eb 14                	jmp    c0013349 <SysRegistryReadExtent(regs*)+0x44>
c0013335:	83 ec 04             	sub    esp,0x4
c0013338:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001333b:	50                   	push   eax
c001333c:	51                   	push   ecx
c001333d:	e8 17 eb ff ff       	call   c0011e59 <CmGetString(Reghive_Tag*, int, char*)>
c0013342:	83 c4 10             	add    esp,0x10
c0013345:	31 c0                	xor    eax,eax
c0013347:	31 d2                	xor    edx,edx
c0013349:	83 c4 1c             	add    esp,0x1c
c001334c:	c3                   	ret    

c001334d <SysRegistryPathToExtentLookup(regs*)>:
c001334d:	53                   	push   ebx
c001334e:	83 ec 10             	sub    esp,0x10
c0013351:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013355:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013358:	68 95 0e 02 c0       	push   0xc0020e95
c001335d:	e8 f1 75 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0013362:	58                   	pop    eax
c0013363:	5a                   	pop    edx
c0013364:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013367:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001336a:	e8 7a f5 ff ff       	call   c00128e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001336f:	83 c4 18             	add    esp,0x18
c0013372:	99                   	cdq    
c0013373:	5b                   	pop    ebx
c0013374:	c3                   	ret    

c0013375 <SysRegistryEnterDirectory(regs*)>:
c0013375:	53                   	push   ebx
c0013376:	83 ec 10             	sub    esp,0x10
c0013379:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001337d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013380:	68 b8 0e 02 c0       	push   0xc0020eb8
c0013385:	e8 c9 75 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001338a:	58                   	pop    eax
c001338b:	5a                   	pop    edx
c001338c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001338f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013392:	e8 39 eb ff ff       	call   c0011ed0 <CmEnterDirectory(Reghive_Tag*, int)>
c0013397:	83 c4 18             	add    esp,0x18
c001339a:	99                   	cdq    
c001339b:	5b                   	pop    ebx
c001339c:	c3                   	ret    

c001339d <SysRegistryGetNext(regs*)>:
c001339d:	53                   	push   ebx
c001339e:	83 ec 10             	sub    esp,0x10
c00133a1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133a8:	68 d6 0e 02 c0       	push   0xc0020ed6
c00133ad:	e8 a1 75 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00133b2:	58                   	pop    eax
c00133b3:	5a                   	pop    edx
c00133b4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00133b7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133ba:	e8 50 eb ff ff       	call   c0011f0f <CmGetNext(Reghive_Tag*, int)>
c00133bf:	83 c4 18             	add    esp,0x18
c00133c2:	99                   	cdq    
c00133c3:	5b                   	pop    ebx
c00133c4:	c3                   	ret    

c00133c5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00133c5:	57                   	push   edi
c00133c6:	56                   	push   esi
c00133c7:	53                   	push   ebx
c00133c8:	81 ec 34 01 00 00    	sub    esp,0x134
c00133ce:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133d5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133d9:	57                   	push   edi
c00133da:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133e0:	e8 e8 f0 ff ff       	call   c00124cd <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133e5:	89 c3                	mov    ebx,eax
c00133e7:	58                   	pop    eax
c00133e8:	5a                   	pop    edx
c00133e9:	57                   	push   edi
c00133ea:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133ed:	e8 3e d2 fe ff       	call   c0000630 <strcpy>
c00133f2:	81 c4 40 01 00 00    	add    esp,0x140
c00133f8:	89 d8                	mov    eax,ebx
c00133fa:	5b                   	pop    ebx
c00133fb:	5e                   	pop    esi
c00133fc:	99                   	cdq    
c00133fd:	5f                   	pop    edi
c00133fe:	c3                   	ret    

c00133ff <SysRegistryOpen(regs*)>:
c00133ff:	83 ec 18             	sub    esp,0x18
c0013402:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013406:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013409:	e8 db e8 ff ff       	call   c0011ce9 <CmOpen(char const*)>
c001340e:	83 c4 1c             	add    esp,0x1c
c0013411:	99                   	cdq    
c0013412:	c3                   	ret    

c0013413 <SysRegistryClose(regs*)>:
c0013413:	83 ec 18             	sub    esp,0x18
c0013416:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001341a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001341d:	e8 e5 e9 ff ff       	call   c0011e07 <CmClose(Reghive_Tag*)>
c0013422:	31 c0                	xor    eax,eax
c0013424:	31 d2                	xor    edx,edx
c0013426:	83 c4 1c             	add    esp,0x1c
c0013429:	c3                   	ret    

c001342a <SysSbrk(regs*)>:
c001342a:	56                   	push   esi
c001342b:	53                   	push   ebx
c001342c:	50                   	push   eax
c001342d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013432:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013436:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013439:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001343c:	85 db                	test   ebx,ebx
c001343e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013444:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013447:	74 02                	je     c001344b <SysSbrk(regs*)+0x21>
c0013449:	79 06                	jns    c0013451 <SysSbrk(regs*)+0x27>
c001344b:	89 f0                	mov    eax,esi
c001344d:	31 d2                	xor    edx,edx
c001344f:	eb 2a                	jmp    c001347b <SysSbrk(regs*)+0x51>
c0013451:	83 c8 ff             	or     eax,0xffffffff
c0013454:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001345a:	89 c2                	mov    edx,eax
c001345c:	77 1d                	ja     c001347b <SysSbrk(regs*)+0x51>
c001345e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013464:	50                   	push   eax
c0013465:	c1 ea 0c             	shr    edx,0xc
c0013468:	68 07 0c 00 00       	push   0xc07
c001346d:	52                   	push   edx
c001346e:	51                   	push   ecx
c001346f:	e8 6c 69 ff ff       	call   c0009de0 <VAS::allocatePages(int, int)>
c0013474:	89 f0                	mov    eax,esi
c0013476:	31 d2                	xor    edx,edx
c0013478:	83 c4 10             	add    esp,0x10
c001347b:	59                   	pop    ecx
c001347c:	5b                   	pop    ebx
c001347d:	5e                   	pop    esi
c001347e:	c3                   	ret    

c001347f <SysSetCwd(regs*)>:
c001347f:	83 ec 14             	sub    esp,0x14
c0013482:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013486:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013489:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001348e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013491:	e8 09 7e ff ff       	call   c000b29f <Fs::setcwd(Process*, char*)>
c0013496:	83 c4 1c             	add    esp,0x1c
c0013499:	99                   	cdq    
c001349a:	c3                   	ret    

c001349b <SysSetTime(regs*)>:
c001349b:	55                   	push   ebp
c001349c:	31 c9                	xor    ecx,ecx
c001349e:	57                   	push   edi
c001349f:	bd 0c 00 00 00       	mov    ebp,0xc
c00134a4:	56                   	push   esi
c00134a5:	53                   	push   ebx
c00134a6:	31 db                	xor    ebx,ebx
c00134a8:	83 ec 10             	sub    esp,0x10
c00134ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134af:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134b2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00134b5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00134b8:	89 c2                	mov    edx,eax
c00134ba:	83 e2 1f             	and    edx,0x1f
c00134bd:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00134c3:	c1 e8 05             	shr    eax,0x5
c00134c6:	42                   	inc    edx
c00134c7:	c1 e7 10             	shl    edi,0x10
c00134ca:	88 d1                	mov    cl,dl
c00134cc:	31 d2                	xor    edx,edx
c00134ce:	f7 f5                	div    ebp
c00134d0:	88 d5                	mov    ch,dl
c00134d2:	31 d2                	xor    edx,edx
c00134d4:	0f b7 c1             	movzx  eax,cx
c00134d7:	09 f8                	or     eax,edi
c00134d9:	bf 3c 00 00 00       	mov    edi,0x3c
c00134de:	89 c1                	mov    ecx,eax
c00134e0:	89 f0                	mov    eax,esi
c00134e2:	f7 f7                	div    edi
c00134e4:	c1 e2 10             	shl    edx,0x10
c00134e7:	89 dd                	mov    ebp,ebx
c00134e9:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134ef:	09 d5                	or     ebp,edx
c00134f1:	31 d2                	xor    edx,edx
c00134f3:	f7 f7                	div    edi
c00134f5:	89 eb                	mov    ebx,ebp
c00134f7:	bf 10 0e 00 00       	mov    edi,0xe10
c00134fc:	88 d7                	mov    bh,dl
c00134fe:	89 f0                	mov    eax,esi
c0013500:	31 d2                	xor    edx,edx
c0013502:	f7 f7                	div    edi
c0013504:	bf 18 00 00 00       	mov    edi,0x18
c0013509:	31 d2                	xor    edx,edx
c001350b:	f7 f7                	div    edi
c001350d:	88 d3                	mov    bl,dl
c001350f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0013514:	53                   	push   ebx
c0013515:	51                   	push   ecx
c0013516:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001351c:	e8 7d 85 ff ff       	call   c000ba9e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013521:	83 c4 1c             	add    esp,0x1c
c0013524:	5b                   	pop    ebx
c0013525:	83 f0 01             	xor    eax,0x1
c0013528:	5e                   	pop    esi
c0013529:	31 d2                	xor    edx,edx
c001352b:	5f                   	pop    edi
c001352c:	0f b6 c0             	movzx  eax,al
c001352f:	5d                   	pop    ebp
c0013530:	c3                   	ret    

c0013531 <SysTimezone(regs*)>:
c0013531:	53                   	push   ebx
c0013532:	83 ec 08             	sub    esp,0x8
c0013535:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013539:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001353d:	75 17                	jne    c0013556 <SysTimezone(regs*)+0x25>
c001353f:	83 ec 0c             	sub    esp,0xc
c0013542:	68 ed 0e 02 c0       	push   0xc0020eed
c0013547:	e8 07 74 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001354c:	83 c8 ff             	or     eax,0xffffffff
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	89 c2                	mov    edx,eax
c0013554:	eb 20                	jmp    c0013576 <SysTimezone(regs*)+0x45>
c0013556:	83 ec 0c             	sub    esp,0xc
c0013559:	68 02 0f 02 c0       	push   0xc0020f02
c001355e:	e8 f0 73 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0013563:	58                   	pop    eax
c0013564:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013567:	e8 9c 82 ff ff       	call   c000b808 <User::loadClockSettings(int)>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	b8 01 00 00 00       	mov    eax,0x1
c0013574:	31 d2                	xor    edx,edx
c0013576:	83 c4 08             	add    esp,0x8
c0013579:	5b                   	pop    ebx
c001357a:	c3                   	ret    

c001357b <SysWrite(regs*)>:
c001357b:	57                   	push   edi
c001357c:	56                   	push   esi
c001357d:	53                   	push   ebx
c001357e:	83 ec 10             	sub    esp,0x10
c0013581:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013585:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013588:	83 f8 02             	cmp    eax,0x2
c001358b:	77 10                	ja     c001359d <SysWrite(regs*)+0x22>
c001358d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013592:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013595:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001359b:	eb 0e                	jmp    c00135ab <SysWrite(regs*)+0x30>
c001359d:	83 ec 0c             	sub    esp,0xc
c00135a0:	50                   	push   eax
c00135a1:	e8 f1 5e ff ff       	call   c0009497 <getFromFileDescriptor(int)>
c00135a6:	83 c4 10             	add    esp,0x10
c00135a9:	89 c1                	mov    ecx,eax
c00135ab:	83 c8 ff             	or     eax,0xffffffff
c00135ae:	85 c9                	test   ecx,ecx
c00135b0:	89 c2                	mov    edx,eax
c00135b2:	74 28                	je     c00135dc <SysWrite(regs*)+0x61>
c00135b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135bc:	83 ec 0c             	sub    esp,0xc
c00135bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135c1:	31 ff                	xor    edi,edi
c00135c3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00135c7:	52                   	push   edx
c00135c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00135cb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00135ce:	57                   	push   edi
c00135cf:	56                   	push   esi
c00135d0:	51                   	push   ecx
c00135d1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135d8:	83 c4 20             	add    esp,0x20
c00135db:	99                   	cdq    
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	5b                   	pop    ebx
c00135e0:	5e                   	pop    esi
c00135e1:	5f                   	pop    edi
c00135e2:	c3                   	ret    

c00135e3 <SysWsbe(regs*)>:
c00135e3:	57                   	push   edi
c00135e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00135e9:	56                   	push   esi
c00135ea:	be 41 0f 02 c0       	mov    esi,0xc0020f41
c00135ef:	53                   	push   ebx
c00135f0:	83 ec 30             	sub    esp,0x30
c00135f3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135f7:	fc                   	cld    
c00135f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135ff:	83 ec 0c             	sub    esp,0xc
c0013602:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013605:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013609:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001360f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013611:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013614:	57                   	push   edi
c0013615:	e8 46 cf fe ff       	call   c0000560 <strlen>
c001361a:	5a                   	pop    edx
c001361b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001361f:	52                   	push   edx
c0013620:	31 d2                	xor    edx,edx
c0013622:	57                   	push   edi
c0013623:	52                   	push   edx
c0013624:	50                   	push   eax
c0013625:	56                   	push   esi
c0013626:	ff d3                	call   ebx
c0013628:	83 c4 14             	add    esp,0x14
c001362b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001362f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013632:	e8 95 23 00 00       	call   c00159cc <terminateTask(int)>
c0013637:	83 c4 40             	add    esp,0x40
c001363a:	5b                   	pop    ebx
c001363b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013640:	5e                   	pop    esi
c0013641:	31 d2                	xor    edx,edx
c0013643:	5f                   	pop    edi
c0013644:	c3                   	ret    

c0013645 <SysYield(regs*)>:
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	fa                   	cli    
c0013649:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001364f:	e8 ec 19 00 00       	call   c0015040 <schedule()>
c0013654:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013659:	48                   	dec    eax
c001365a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001365f:	75 01                	jne    c0013662 <SysYield(regs*)+0x1d>
c0013661:	fb                   	sti    
c0013662:	31 c0                	xor    eax,eax
c0013664:	31 d2                	xor    edx,edx
c0013666:	83 c4 0c             	add    esp,0xc
c0013669:	c3                   	ret    

c001366a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001366a:	55                   	push   ebp
c001366b:	57                   	push   edi
c001366c:	56                   	push   esi
c001366d:	53                   	push   ebx
c001366e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013674:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001367f:	74 3b                	je     c00136bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013681:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013689:	74 31                	je     c00136bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001368b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013693:	75 27                	jne    c00136bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013695:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001369c:	05 00 10 00 00       	add    eax,0x1000
c00136a1:	89 c2                	mov    edx,eax
c00136a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00136a8:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00136ae:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00136b5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00136bc:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00136c3:	83 ec 0c             	sub    esp,0xc
c00136c6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136cc:	6a 01                	push   0x1
c00136ce:	e8 1e 5f ff ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c00136d3:	83 c4 10             	add    esp,0x10
c00136d6:	89 c3                	mov    ebx,eax
c00136d8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136de:	0f 86 25 01 00 00    	jbe    c0013809 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19f>
c00136e4:	c1 ee 0c             	shr    esi,0xc
c00136e7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136ee:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136f2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136fa:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013701:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013705:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001370c:	29 ef                	sub    edi,ebp
c001370e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013712:	0f 83 f8 00 00 00    	jae    c0013810 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a6>
c0013718:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001371e:	76 05                	jbe    c0013725 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xbb>
c0013720:	bf 00 10 00 00       	mov    edi,0x1000
c0013725:	83 ec 0c             	sub    esp,0xc
c0013728:	31 d2                	xor    edx,edx
c001372a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013731:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013733:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013737:	50                   	push   eax
c0013738:	8d 74 24 30          	lea    esi,[esp+0x30]
c001373c:	56                   	push   esi
c001373d:	52                   	push   edx
c001373e:	57                   	push   edi
c001373f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013746:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013749:	83 c4 20             	add    esp,0x20
c001374c:	85 c0                	test   eax,eax
c001374e:	75 06                	jne    c0013756 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xec>
c0013750:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013754:	74 13                	je     c0013769 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xff>
c0013756:	83 ec 0c             	sub    esp,0xc
c0013759:	53                   	push   ebx
c001375a:	e8 ae 61 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c001375f:	83 c4 10             	add    esp,0x10
c0013762:	31 c0                	xor    eax,eax
c0013764:	e9 7c 01 00 00       	jmp    c00138e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27b>
c0013769:	fa                   	cli    
c001376a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013770:	e8 1c 46 ff ff       	call   c0007d91 <Phys::allocatePage()>
c0013775:	6a 07                	push   0x7
c0013777:	89 c7                	mov    edi,eax
c0013779:	53                   	push   ebx
c001377a:	50                   	push   eax
c001377b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013780:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013783:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013789:	e8 4c 65 ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c001378e:	83 c4 0c             	add    esp,0xc
c0013791:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013798:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001379e:	6a 00                	push   0x0
c00137a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137a8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137ae:	e8 8d 63 ff ff       	call   c0009b40 <VAS::mapOtherVASIn(bool, VAS*)>
c00137b3:	58                   	pop    eax
c00137b4:	5a                   	pop    edx
c00137b5:	68 07 0c 00 00       	push   0xc07
c00137ba:	55                   	push   ebp
c00137bb:	57                   	push   edi
c00137bc:	89 df                	mov    edi,ebx
c00137be:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00137c5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137cb:	6a 00                	push   0x0
c00137cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137d5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137db:	e8 e4 68 ff ff       	call   c000a0c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137e0:	b9 00 10 00 00       	mov    ecx,0x1000
c00137e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137e7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137ec:	83 c4 20             	add    esp,0x20
c00137ef:	48                   	dec    eax
c00137f0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137f5:	85 c0                	test   eax,eax
c00137f7:	75 01                	jne    c00137fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x190>
c00137f9:	fb                   	sti    
c00137fa:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013800:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013804:	e9 f1 fe ff ff       	jmp    c00136fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013809:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013810:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013817:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001381d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013823:	0f 86 ae 00 00 00    	jbe    c00138d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c0013829:	fa                   	cli    
c001382a:	51                   	push   ecx
c001382b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013831:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013838:	31 ff                	xor    edi,edi
c001383a:	c1 ee 0c             	shr    esi,0xc
c001383d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013843:	6a 00                	push   0x0
c0013845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001384d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013853:	e8 e8 62 ff ff       	call   c0009b40 <VAS::mapOtherVASIn(bool, VAS*)>
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	e8 31 45 ff ff       	call   c0007d91 <Phys::allocatePage()>
c0013860:	6a 07                	push   0x7
c0013862:	53                   	push   ebx
c0013863:	47                   	inc    edi
c0013864:	50                   	push   eax
c0013865:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013869:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001386f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013872:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013878:	e8 5d 64 ff ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c001387d:	58                   	pop    eax
c001387e:	5a                   	pop    edx
c001387f:	68 07 0c 00 00       	push   0xc07
c0013884:	55                   	push   ebp
c0013885:	81 c5 00 10 00 00    	add    ebp,0x1000
c001388b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001388f:	50                   	push   eax
c0013890:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013897:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001389d:	6a 00                	push   0x0
c001389f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138ad:	e8 12 68 ff ff       	call   c000a0c4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00138b2:	83 c4 1c             	add    esp,0x1c
c00138b5:	68 00 10 00 00       	push   0x1000
c00138ba:	6a 00                	push   0x0
c00138bc:	53                   	push   ebx
c00138bd:	e8 1e cc fe ff       	call   c00004e0 <memset>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	39 fe                	cmp    esi,edi
c00138c7:	77 92                	ja     c001385b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f1>
c00138c9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138ce:	48                   	dec    eax
c00138cf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138d4:	75 01                	jne    c00138d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c00138d6:	fb                   	sti    
c00138d7:	83 ec 0c             	sub    esp,0xc
c00138da:	53                   	push   ebx
c00138db:	e8 2d 60 ff ff       	call   c000990d <Virt::freeKernelVirtualPages(unsigned long)>
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	b0 01                	mov    al,0x1
c00138e5:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138eb:	5b                   	pop    ebx
c00138ec:	5e                   	pop    esi
c00138ed:	5f                   	pop    edi
c00138ee:	5d                   	pop    ebp
c00138ef:	c3                   	ret    

c00138f0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138f0:	55                   	push   ebp
c00138f1:	57                   	push   edi
c00138f2:	56                   	push   esi
c00138f3:	53                   	push   ebx
c00138f4:	83 ec 48             	sub    esp,0x48
c00138f7:	68 14 01 00 00       	push   0x114
c00138fc:	e8 8b 41 ff ff       	call   c0007a8c <malloc>
c0013901:	83 c4 0c             	add    esp,0xc
c0013904:	89 c6                	mov    esi,eax
c0013906:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001390a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001390e:	50                   	push   eax
c001390f:	e8 c2 75 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0013914:	58                   	pop    eax
c0013915:	5a                   	pop    edx
c0013916:	6a 01                	push   0x1
c0013918:	56                   	push   esi
c0013919:	e8 74 76 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c001391e:	83 c4 10             	add    esp,0x10
c0013921:	85 c0                	test   eax,eax
c0013923:	0f 85 43 01 00 00    	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013929:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013931:	83 ec 0c             	sub    esp,0xc
c0013934:	6a 34                	push   0x34
c0013936:	e8 51 41 ff ff       	call   c0007a8c <malloc>
c001393b:	89 c3                	mov    ebx,eax
c001393d:	58                   	pop    eax
c001393e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013940:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013944:	57                   	push   edi
c0013945:	53                   	push   ebx
c0013946:	6a 00                	push   0x0
c0013948:	6a 34                	push   0x34
c001394a:	56                   	push   esi
c001394b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001394e:	83 c4 20             	add    esp,0x20
c0013951:	85 c0                	test   eax,eax
c0013953:	0f 85 13 01 00 00    	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013959:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001395f:	0f 85 07 01 00 00    	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013965:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013968:	85 c0                	test   eax,eax
c001396a:	0f 84 fc 00 00 00    	je     c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013970:	31 d2                	xor    edx,edx
c0013972:	55                   	push   ebp
c0013973:	52                   	push   edx
c0013974:	50                   	push   eax
c0013975:	56                   	push   esi
c0013976:	e8 d5 76 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c001397b:	83 c4 10             	add    esp,0x10
c001397e:	85 c0                	test   eax,eax
c0013980:	0f 85 e6 00 00 00    	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013989:	83 ec 0c             	sub    esp,0xc
c001398c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013990:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013994:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013998:	0f af c2             	imul   eax,edx
c001399b:	50                   	push   eax
c001399c:	e8 eb 40 ff ff       	call   c0007a8c <malloc>
c00139a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00139a5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00139a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00139ae:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00139b2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00139b6:	0f af c2             	imul   eax,edx
c00139b9:	99                   	cdq    
c00139ba:	52                   	push   edx
c00139bb:	50                   	push   eax
c00139bc:	56                   	push   esi
c00139bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139c0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00139c3:	83 c4 20             	add    esp,0x20
c00139c6:	85 c0                	test   eax,eax
c00139c8:	0f 84 9e 00 00 00    	je     c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139ce:	31 d2                	xor    edx,edx
c00139d0:	51                   	push   ecx
c00139d1:	52                   	push   edx
c00139d2:	50                   	push   eax
c00139d3:	56                   	push   esi
c00139d4:	e8 77 76 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c00139d9:	83 c4 10             	add    esp,0x10
c00139dc:	85 c0                	test   eax,eax
c00139de:	0f 85 88 00 00 00    	jne    c0013a6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139e4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139e8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139ec:	0f af c2             	imul   eax,edx
c00139ef:	83 ec 0c             	sub    esp,0xc
c00139f2:	31 ed                	xor    ebp,ebp
c00139f4:	50                   	push   eax
c00139f5:	e8 92 40 ff ff       	call   c0007a8c <malloc>
c00139fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139fe:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013a00:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013a03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a07:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013a0b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013a0f:	0f af c2             	imul   eax,edx
c0013a12:	99                   	cdq    
c0013a13:	52                   	push   edx
c0013a14:	50                   	push   eax
c0013a15:	56                   	push   esi
c0013a16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a19:	83 c4 20             	add    esp,0x20
c0013a1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a24:	0f b7 fd             	movzx  edi,bp
c0013a27:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013a2b:	73 7d                	jae    c0013aaa <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013a2d:	c1 e7 05             	shl    edi,0x5
c0013a30:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013a34:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013a37:	75 6b                	jne    c0013aa4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013a39:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013a3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a40:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013a43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a47:	52                   	push   edx
c0013a48:	31 d2                	xor    edx,edx
c0013a4a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013a4d:	52                   	push   edx
c0013a4e:	50                   	push   eax
c0013a4f:	56                   	push   esi
c0013a50:	e8 fb 75 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	85 c0                	test   eax,eax
c0013a5a:	74 17                	je     c0013a73 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	68 6d 0f 02 c0       	push   0xc0020f6d
c0013a64:	e8 ea 6e ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	31 c0                	xor    eax,eax
c0013a6e:	e9 87 00 00 00       	jmp    c0013afa <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013a73:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013a76:	83 ec 0c             	sub    esp,0xc
c0013a79:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013a7c:	50                   	push   eax
c0013a7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a85:	56                   	push   esi
c0013a86:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a8a:	e8 db fb ff ff       	call   c001366a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a93:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013a97:	83 c4 20             	add    esp,0x20
c0013a9a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013a9e:	73 04                	jae    c0013aa4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013aa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013aa4:	45                   	inc    ebp
c0013aa5:	e9 7a ff ff ff       	jmp    c0013a24 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013aaa:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013aae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ab2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013abf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ac4:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013aca:	05 00 10 00 00       	add    eax,0x1000
c0013acf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad6:	e8 c1 3f ff ff       	call   c0007a9c <free>
c0013adb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ade:	e8 b9 3f ff ff       	call   c0007a9c <free>
c0013ae3:	58                   	pop    eax
c0013ae4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ae8:	e8 af 3f ff ff       	call   c0007a9c <free>
c0013aed:	89 34 24             	mov    DWORD PTR [esp],esi
c0013af0:	e8 fb 74 ff ff       	call   c000aff0 <File::close()>
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	b0 01                	mov    al,0x1
c0013afa:	83 c4 3c             	add    esp,0x3c
c0013afd:	5b                   	pop    ebx
c0013afe:	5e                   	pop    esi
c0013aff:	5f                   	pop    edi
c0013b00:	5d                   	pop    ebp
c0013b01:	c3                   	ret    

c0013b02 <Thr::runtimeReferenceHelper()>:
c0013b02:	83 ec 18             	sub    esp,0x18
c0013b05:	68 75 0f 02 c0       	push   0xc0020f75
c0013b0a:	e8 44 6e ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0013b0f:	fa                   	cli    
c0013b10:	83 c4 10             	add    esp,0x10
c0013b13:	eb fe                	jmp    c0013b13 <Thr::runtimeReferenceHelper()+0x11>

c0013b15 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013b15:	57                   	push   edi
c0013b16:	56                   	push   esi
c0013b17:	53                   	push   ebx
c0013b18:	31 db                	xor    ebx,ebx
c0013b1a:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013b20:	7e 3c                	jle    c0013b5e <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013b22:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b29:	31 ff                	xor    edi,edi
c0013b2b:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b32:	7e 27                	jle    c0013b5b <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b34:	50                   	push   eax
c0013b35:	50                   	push   eax
c0013b36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b3c:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b43:	50                   	push   eax
c0013b44:	e8 f7 cb fe ff       	call   c0000740 <strcmp>
c0013b49:	83 c4 10             	add    esp,0x10
c0013b4c:	85 c0                	test   eax,eax
c0013b4e:	75 05                	jne    c0013b55 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b50:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b53:	eb 0b                	jmp    c0013b60 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b55:	83 c6 10             	add    esi,0x10
c0013b58:	47                   	inc    edi
c0013b59:	eb d0                	jmp    c0013b2b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b5b:	43                   	inc    ebx
c0013b5c:	eb bc                	jmp    c0013b1a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b5e:	31 c0                	xor    eax,eax
c0013b60:	5b                   	pop    ebx
c0013b61:	5e                   	pop    esi
c0013b62:	5f                   	pop    edi
c0013b63:	c3                   	ret    

c0013b64 <Thr::loadKernelSymbolTable(char const*)>:
c0013b64:	55                   	push   ebp
c0013b65:	57                   	push   edi
c0013b66:	56                   	push   esi
c0013b67:	53                   	push   ebx
c0013b68:	83 ec 68             	sub    esp,0x68
c0013b6b:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b71:	68 14 01 00 00       	push   0x114
c0013b76:	e8 11 3f ff ff       	call   c0007a8c <malloc>
c0013b7b:	83 c4 0c             	add    esp,0xc
c0013b7e:	89 c3                	mov    ebx,eax
c0013b80:	56                   	push   esi
c0013b81:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b85:	50                   	push   eax
c0013b86:	e8 4b 73 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0013b8b:	5e                   	pop    esi
c0013b8c:	5f                   	pop    edi
c0013b8d:	6a 01                	push   0x1
c0013b8f:	53                   	push   ebx
c0013b90:	e8 fd 73 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	85 c0                	test   eax,eax
c0013b9a:	74 0a                	je     c0013ba6 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b9c:	83 ec 0c             	sub    esp,0xc
c0013b9f:	68 97 0f 02 c0       	push   0xc0020f97
c0013ba4:	eb 34                	jmp    c0013bda <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013ba6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	6a 34                	push   0x34
c0013bb3:	e8 d4 3e ff ff       	call   c0007a8c <malloc>
c0013bb8:	59                   	pop    ecx
c0013bb9:	89 c7                	mov    edi,eax
c0013bbb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bbd:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013bc1:	56                   	push   esi
c0013bc2:	57                   	push   edi
c0013bc3:	6a 00                	push   0x0
c0013bc5:	6a 34                	push   0x34
c0013bc7:	53                   	push   ebx
c0013bc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bcb:	83 c4 20             	add    esp,0x20
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	74 17                	je     c0013be9 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	68 ae 0f 02 c0       	push   0xc0020fae
c0013bda:	e8 60 cc ff ff       	call   c001083f <KePanic(char const*)>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	31 c0                	xor    eax,eax
c0013be4:	e9 31 02 00 00       	jmp    c0013e1a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013be9:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bef:	75 e1                	jne    c0013bd2 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bf1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bf4:	85 c0                	test   eax,eax
c0013bf6:	74 da                	je     c0013bd2 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bf8:	52                   	push   edx
c0013bf9:	31 d2                	xor    edx,edx
c0013bfb:	52                   	push   edx
c0013bfc:	50                   	push   eax
c0013bfd:	53                   	push   ebx
c0013bfe:	e8 4d 74 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013c03:	83 c4 10             	add    esp,0x10
c0013c06:	85 c0                	test   eax,eax
c0013c08:	75 c8                	jne    c0013bd2 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013c0a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c0e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c12:	0f af c2             	imul   eax,edx
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	31 ed                	xor    ebp,ebp
c0013c1a:	50                   	push   eax
c0013c1b:	e8 6c 3e ff ff       	call   c0007a8c <malloc>
c0013c20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c24:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013c26:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c29:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c2d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c31:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c35:	0f af c2             	imul   eax,edx
c0013c38:	99                   	cdq    
c0013c39:	52                   	push   edx
c0013c3a:	50                   	push   eax
c0013c3b:	53                   	push   ebx
c0013c3c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c3f:	83 c4 20             	add    esp,0x20
c0013c42:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c4a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c52:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c62:	0f b7 f5             	movzx  esi,bp
c0013c65:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c69:	0f 83 a7 00 00 00    	jae    c0013d16 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c6f:	6b f6 28             	imul   esi,esi,0x28
c0013c72:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c76:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c7d:	50                   	push   eax
c0013c7e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c82:	6b c0 28             	imul   eax,eax,0x28
c0013c85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c89:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c8b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c8f:	89 d0                	mov    eax,edx
c0013c91:	31 d2                	xor    edx,edx
c0013c93:	52                   	push   edx
c0013c94:	50                   	push   eax
c0013c95:	53                   	push   ebx
c0013c96:	e8 b5 73 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013c9b:	83 c4 0c             	add    esp,0xc
c0013c9e:	6a 20                	push   0x20
c0013ca0:	6a 00                	push   0x0
c0013ca2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ca6:	52                   	push   edx
c0013ca7:	e8 34 c8 fe ff       	call   c00004e0 <memset>
c0013cac:	58                   	pop    eax
c0013cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013caf:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013cb3:	51                   	push   ecx
c0013cb4:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013cb8:	52                   	push   edx
c0013cb9:	6a 00                	push   0x0
c0013cbb:	6a 1f                	push   0x1f
c0013cbd:	53                   	push   ebx
c0013cbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cc1:	83 c4 18             	add    esp,0x18
c0013cc4:	68 c5 0f 02 c0       	push   0xc0020fc5
c0013cc9:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ccd:	52                   	push   edx
c0013cce:	e8 6d ca fe ff       	call   c0000740 <strcmp>
c0013cd3:	83 c4 10             	add    esp,0x10
c0013cd6:	85 c0                	test   eax,eax
c0013cd8:	75 0f                	jne    c0013ce9 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cda:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cdd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ce1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ce9:	50                   	push   eax
c0013cea:	50                   	push   eax
c0013ceb:	68 cd 0f 02 c0       	push   0xc0020fcd
c0013cf0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013cf4:	50                   	push   eax
c0013cf5:	e8 46 ca fe ff       	call   c0000740 <strcmp>
c0013cfa:	83 c4 10             	add    esp,0x10
c0013cfd:	85 c0                	test   eax,eax
c0013cff:	75 0f                	jne    c0013d10 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013d01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013d04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d10:	45                   	inc    ebp
c0013d11:	e9 4c ff ff ff       	jmp    c0013c62 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013d16:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013d1b:	75 10                	jne    c0013d2d <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013d1d:	83 ec 0c             	sub    esp,0xc
c0013d20:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d25:	e8 15 cb ff ff       	call   c001083f <KePanic(char const*)>
c0013d2a:	83 c4 10             	add    esp,0x10
c0013d2d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d32:	75 10                	jne    c0013d44 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d34:	83 ec 0c             	sub    esp,0xc
c0013d37:	68 d5 0f 02 c0       	push   0xc0020fd5
c0013d3c:	e8 fe ca ff ff       	call   c001083f <KePanic(char const*)>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	31 d2                	xor    edx,edx
c0013d46:	50                   	push   eax
c0013d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4b:	52                   	push   edx
c0013d4c:	50                   	push   eax
c0013d4d:	53                   	push   ebx
c0013d4e:	e8 fd 72 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013d53:	5a                   	pop    edx
c0013d54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d58:	e8 2f 3d ff ff       	call   c0007a8c <malloc>
c0013d5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d65:	5e                   	pop    esi
c0013d66:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d68:	31 c9                	xor    ecx,ecx
c0013d6a:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d6e:	55                   	push   ebp
c0013d6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d73:	51                   	push   ecx
c0013d74:	52                   	push   edx
c0013d75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d79:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d7d:	53                   	push   ebx
c0013d7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d81:	83 c4 14             	add    esp,0x14
c0013d84:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d88:	e8 ff 3c ff ff       	call   c0007a8c <malloc>
c0013d8d:	89 c6                	mov    esi,eax
c0013d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d94:	56                   	push   esi
c0013d95:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d9d:	51                   	push   ecx
c0013d9e:	52                   	push   edx
c0013d9f:	53                   	push   ebx
c0013da0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013da7:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013dad:	c1 e8 04             	shr    eax,0x4
c0013db0:	83 c4 1c             	add    esp,0x1c
c0013db3:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013dba:	31 d2                	xor    edx,edx
c0013dbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013dc0:	52                   	push   edx
c0013dc1:	50                   	push   eax
c0013dc2:	53                   	push   ebx
c0013dc3:	e8 88 72 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013dc8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013dca:	31 d2                	xor    edx,edx
c0013dcc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dcf:	56                   	push   esi
c0013dd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dd4:	52                   	push   edx
c0013dd5:	50                   	push   eax
c0013dd6:	53                   	push   ebx
c0013dd7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013dda:	83 c4 14             	add    esp,0x14
c0013ddd:	53                   	push   ebx
c0013dde:	e8 0d 72 ff ff       	call   c000aff0 <File::close()>
c0013de3:	5d                   	pop    ebp
c0013de4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013de8:	e8 af 3c ff ff       	call   c0007a9c <free>
c0013ded:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013df0:	e8 a7 3c ff ff       	call   c0007a9c <free>
c0013df5:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013dfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0013e01:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013e08:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013e0f:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013e15:	83 c4 10             	add    esp,0x10
c0013e18:	b0 01                	mov    al,0x1
c0013e1a:	83 c4 5c             	add    esp,0x5c
c0013e1d:	5b                   	pop    ebx
c0013e1e:	5e                   	pop    esi
c0013e1f:	5f                   	pop    edi
c0013e20:	5d                   	pop    ebp
c0013e21:	c3                   	ret    

c0013e22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013e22:	55                   	push   ebp
c0013e23:	57                   	push   edi
c0013e24:	56                   	push   esi
c0013e25:	53                   	push   ebx
c0013e26:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e2c:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e32:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e39:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013e3d:	68 14 01 00 00       	push   0x114
c0013e42:	e8 45 3c ff ff       	call   c0007a8c <malloc>
c0013e47:	83 c4 0c             	add    esp,0xc
c0013e4a:	53                   	push   ebx
c0013e4b:	89 c5                	mov    ebp,eax
c0013e4d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e54:	50                   	push   eax
c0013e55:	e8 7c 70 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0013e5a:	5e                   	pop    esi
c0013e5b:	5f                   	pop    edi
c0013e5c:	6a 01                	push   0x1
c0013e5e:	55                   	push   ebp
c0013e5f:	e8 2e 71 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0013e64:	83 c4 10             	add    esp,0x10
c0013e67:	85 c0                	test   eax,eax
c0013e69:	0f 85 ab 06 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013e6f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e77:	83 ec 0c             	sub    esp,0xc
c0013e7a:	6a 34                	push   0x34
c0013e7c:	e8 0b 3c ff ff       	call   c0007a8c <malloc>
c0013e81:	5b                   	pop    ebx
c0013e82:	89 c7                	mov    edi,eax
c0013e84:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e87:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e8b:	53                   	push   ebx
c0013e8c:	57                   	push   edi
c0013e8d:	6a 00                	push   0x0
c0013e8f:	6a 34                	push   0x34
c0013e91:	55                   	push   ebp
c0013e92:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e95:	83 c4 20             	add    esp,0x20
c0013e98:	85 c0                	test   eax,eax
c0013e9a:	0f 85 7a 06 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013ea0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ea6:	0f 85 6e 06 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013eac:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013eaf:	85 c0                	test   eax,eax
c0013eb1:	0f 84 63 06 00 00    	je     c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013eb7:	31 d2                	xor    edx,edx
c0013eb9:	51                   	push   ecx
c0013eba:	52                   	push   edx
c0013ebb:	50                   	push   eax
c0013ebc:	55                   	push   ebp
c0013ebd:	e8 8e 71 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	85 c0                	test   eax,eax
c0013ec7:	0f 85 4d 06 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013ecd:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013ed7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013edb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013edf:	0f af c2             	imul   eax,edx
c0013ee2:	50                   	push   eax
c0013ee3:	e8 a4 3b ff ff       	call   c0007a8c <malloc>
c0013ee8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013eec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013eef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ef2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ef6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013efa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013efe:	0f af c2             	imul   eax,edx
c0013f01:	99                   	cdq    
c0013f02:	52                   	push   edx
c0013f03:	50                   	push   eax
c0013f04:	55                   	push   ebp
c0013f05:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f08:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013f0b:	83 c4 20             	add    esp,0x20
c0013f0e:	85 c0                	test   eax,eax
c0013f10:	0f 84 04 06 00 00    	je     c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013f16:	52                   	push   edx
c0013f17:	31 d2                	xor    edx,edx
c0013f19:	52                   	push   edx
c0013f1a:	50                   	push   eax
c0013f1b:	55                   	push   ebp
c0013f1c:	e8 2f 71 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013f21:	83 c4 10             	add    esp,0x10
c0013f24:	85 c0                	test   eax,eax
c0013f26:	0f 85 ee 05 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013f2c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f30:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f34:	0f af c2             	imul   eax,edx
c0013f37:	83 ec 0c             	sub    esp,0xc
c0013f3a:	31 f6                	xor    esi,esi
c0013f3c:	50                   	push   eax
c0013f3d:	e8 4a 3b ff ff       	call   c0007a8c <malloc>
c0013f42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f46:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f50:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f54:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f58:	0f af c2             	imul   eax,edx
c0013f5b:	99                   	cdq    
c0013f5c:	52                   	push   edx
c0013f5d:	50                   	push   eax
c0013f5e:	55                   	push   ebp
c0013f5f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f62:	83 c4 20             	add    esp,0x20
c0013f65:	0f b7 de             	movzx  ebx,si
c0013f68:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013f6c:	0f 83 86 00 00 00    	jae    c0013ff8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d6>
c0013f72:	c1 e3 05             	shl    ebx,0x5
c0013f75:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0013f79:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013f7c:	75 74                	jne    c0013ff2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d0>
c0013f7e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013f81:	31 d2                	xor    edx,edx
c0013f83:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f86:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013f89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f8d:	50                   	push   eax
c0013f8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f91:	52                   	push   edx
c0013f92:	50                   	push   eax
c0013f93:	55                   	push   ebp
c0013f94:	e8 b7 70 ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	85 c0                	test   eax,eax
c0013f9e:	0f 85 76 05 00 00    	jne    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013fa4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013fab:	83 ec 0c             	sub    esp,0xc
c0013fae:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0013fb2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013fb5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013fb9:	31 d2                	xor    edx,edx
c0013fbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fbf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013fc6:	50                   	push   eax
c0013fc7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fcf:	52                   	push   edx
c0013fd0:	50                   	push   eax
c0013fd1:	55                   	push   ebp
c0013fd2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fd5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013fd8:	83 c4 1c             	add    esp,0x1c
c0013fdb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013fde:	50                   	push   eax
c0013fdf:	6a 00                	push   0x0
c0013fe1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fe5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0013fe9:	50                   	push   eax
c0013fea:	e8 f1 c4 fe ff       	call   c00004e0 <memset>
c0013fef:	83 c4 10             	add    esp,0x10
c0013ff2:	46                   	inc    esi
c0013ff3:	e9 6d ff ff ff       	jmp    c0013f65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013ff8:	50                   	push   eax
c0013ff9:	31 db                	xor    ebx,ebx
c0013ffb:	68 00 01 00 00       	push   0x100
c0014000:	6a 00                	push   0x0
c0014002:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014006:	50                   	push   eax
c0014007:	e8 d4 c4 fe ff       	call   c00004e0 <memset>
c001400c:	83 c4 0c             	add    esp,0xc
c001400f:	68 00 01 00 00       	push   0x100
c0014014:	6a 00                	push   0x0
c0014016:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001401d:	50                   	push   eax
c001401e:	e8 bd c4 fe ff       	call   c00004e0 <memset>
c0014023:	83 c4 10             	add    esp,0x10
c0014026:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001402d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014035:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001403d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014045:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001404d:	0f b7 f3             	movzx  esi,bx
c0014050:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014054:	0f 83 27 01 00 00    	jae    c0014181 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x35f>
c001405a:	6b f6 28             	imul   esi,esi,0x28
c001405d:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0014061:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014064:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014068:	50                   	push   eax
c0014069:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001406d:	6b d2 28             	imul   edx,edx,0x28
c0014070:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014074:	8b 06                	mov    eax,DWORD PTR [esi]
c0014076:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001407a:	31 d2                	xor    edx,edx
c001407c:	52                   	push   edx
c001407d:	50                   	push   eax
c001407e:	55                   	push   ebp
c001407f:	e8 cc 6f ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0014084:	83 c4 0c             	add    esp,0xc
c0014087:	6a 20                	push   0x20
c0014089:	6a 00                	push   0x0
c001408b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014092:	51                   	push   ecx
c0014093:	e8 48 c4 fe ff       	call   c00004e0 <memset>
c0014098:	58                   	pop    eax
c0014099:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001409c:	8d 54 24 58          	lea    edx,[esp+0x58]
c00140a0:	52                   	push   edx
c00140a1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00140a8:	51                   	push   ecx
c00140a9:	6a 00                	push   0x0
c00140ab:	6a 1f                	push   0x1f
c00140ad:	55                   	push   ebp
c00140ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140b1:	83 c4 1c             	add    esp,0x1c
c00140b4:	6a 09                	push   0x9
c00140b6:	68 ef 0f 02 c0       	push   0xc0020fef
c00140bb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00140c2:	51                   	push   ecx
c00140c3:	e8 b8 c2 fe ff       	call   c0000380 <memcmp>
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	85 c0                	test   eax,eax
c00140cd:	75 1e                	jne    c00140ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2cb>
c00140cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00140d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140d6:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00140da:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00140dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140e0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140e7:	89 d0                	mov    eax,edx
c00140e9:	40                   	inc    eax
c00140ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00140ed:	50                   	push   eax
c00140ee:	6a 09                	push   0x9
c00140f0:	68 f9 0f 02 c0       	push   0xc0020ff9
c00140f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140fc:	50                   	push   eax
c00140fd:	e8 7e c2 fe ff       	call   c0000380 <memcmp>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	85 c0                	test   eax,eax
c0014107:	75 1e                	jne    c0014127 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x305>
c0014109:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001410c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014110:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014113:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014117:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001411a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014121:	89 d0                	mov    eax,edx
c0014123:	40                   	inc    eax
c0014124:	89 04 24             	mov    DWORD PTR [esp],eax
c0014127:	50                   	push   eax
c0014128:	50                   	push   eax
c0014129:	68 c5 0f 02 c0       	push   0xc0020fc5
c001412e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014135:	50                   	push   eax
c0014136:	e8 05 c6 fe ff       	call   c0000740 <strcmp>
c001413b:	83 c4 10             	add    esp,0x10
c001413e:	85 c0                	test   eax,eax
c0014140:	75 0f                	jne    c0014151 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0014142:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014145:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014149:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001414d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014151:	51                   	push   ecx
c0014152:	51                   	push   ecx
c0014153:	68 cd 0f 02 c0       	push   0xc0020fcd
c0014158:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001415f:	50                   	push   eax
c0014160:	e8 db c5 fe ff       	call   c0000740 <strcmp>
c0014165:	83 c4 10             	add    esp,0x10
c0014168:	85 c0                	test   eax,eax
c001416a:	75 0f                	jne    c001417b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001416c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001416f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014177:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001417b:	43                   	inc    ebx
c001417c:	e9 cc fe ff ff       	jmp    c001404d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22b>
c0014181:	31 d2                	xor    edx,edx
c0014183:	50                   	push   eax
c0014184:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014188:	52                   	push   edx
c0014189:	50                   	push   eax
c001418a:	55                   	push   ebp
c001418b:	e8 c0 6e ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0014190:	58                   	pop    eax
c0014191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014195:	e8 f2 38 ff ff       	call   c0007a8c <malloc>
c001419a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001419d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00141a1:	5a                   	pop    edx
c00141a2:	31 d2                	xor    edx,edx
c00141a4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00141a8:	53                   	push   ebx
c00141a9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00141ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141b1:	52                   	push   edx
c00141b2:	50                   	push   eax
c00141b3:	55                   	push   ebp
c00141b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b7:	83 c4 14             	add    esp,0x14
c00141ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141be:	e8 c9 38 ff ff       	call   c0007a8c <malloc>
c00141c3:	31 d2                	xor    edx,edx
c00141c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141c9:	83 c4 0c             	add    esp,0xc
c00141cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141d0:	52                   	push   edx
c00141d1:	50                   	push   eax
c00141d2:	55                   	push   ebp
c00141d3:	e8 78 6e ff ff       	call   c000b050 <File::seek(unsigned long long)>
c00141d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141e2:	31 d2                	xor    edx,edx
c00141e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141e8:	52                   	push   edx
c00141e9:	50                   	push   eax
c00141ea:	55                   	push   ebp
c00141eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141ee:	83 c4 20             	add    esp,0x20
c00141f1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00141f9:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00141fe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014202:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014206:	39 34 24             	cmp    DWORD PTR [esp],esi
c0014209:	0f 84 0f 03 00 00    	je     c001451e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fc>
c001420f:	8b 84 b4 50 01 00 00 	mov    eax,DWORD PTR [esp+esi*4+0x150]
c0014216:	31 d2                	xor    edx,edx
c0014218:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001421c:	c1 e8 03             	shr    eax,0x3
c001421f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014223:	50                   	push   eax
c0014224:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014228:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001422c:	52                   	push   edx
c001422d:	50                   	push   eax
c001422e:	55                   	push   ebp
c001422f:	e8 1c 6e ff ff       	call   c000b050 <File::seek(unsigned long long)>
c0014234:	58                   	pop    eax
c0014235:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014239:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014240:	e8 47 38 ff ff       	call   c0007a8c <malloc>
c0014245:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014248:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001424c:	58                   	pop    eax
c001424d:	31 d2                	xor    edx,edx
c001424f:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014253:	50                   	push   eax
c0014254:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014258:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001425c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014263:	52                   	push   edx
c0014264:	50                   	push   eax
c0014265:	55                   	push   ebp
c0014266:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014269:	83 c4 20             	add    esp,0x20
c001426c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014274:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014278:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001427c:	0f 8d 80 02 00 00    	jge    c0014502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0014282:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001428a:	8b 04 f0             	mov    eax,DWORD PTR [eax+esi*8]
c001428d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014291:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014295:	8b 44 f0 04          	mov    eax,DWORD PTR [eax+esi*8+0x4]
c0014299:	31 f6                	xor    esi,esi
c001429b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001429f:	c1 e8 08             	shr    eax,0x8
c00142a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00142a6:	c1 e0 04             	shl    eax,0x4
c00142a9:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00142ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142b1:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c00142b4:	85 db                	test   ebx,ebx
c00142b6:	0f 85 ab 00 00 00    	jne    c0014367 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00142c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142c7:	03 06                	add    eax,DWORD PTR [esi]
c00142c9:	be 01 00 00 00       	mov    esi,0x1
c00142ce:	50                   	push   eax
c00142cf:	e8 41 f8 ff ff       	call   c0013b15 <Thr::getAddressOfKernelSymbol(char const*)>
c00142d4:	83 c4 10             	add    esp,0x10
c00142d7:	89 c3                	mov    ebx,eax
c00142d9:	85 c0                	test   eax,eax
c00142db:	0f 85 86 00 00 00    	jne    c0014367 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142e1:	83 ec 0c             	sub    esp,0xc
c00142e4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00142e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142ec:	03 01                	add    eax,DWORD PTR [ecx]
c00142ee:	50                   	push   eax
c00142ef:	e8 38 c7 ff ff       	call   c0010a2c <KeResolveCompatibilitySymbol(char*)>
c00142f4:	83 c4 10             	add    esp,0x10
c00142f7:	89 c3                	mov    ebx,eax
c00142f9:	85 c0                	test   eax,eax
c00142fb:	75 6a                	jne    c0014367 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x545>
c00142fd:	51                   	push   ecx
c00142fe:	51                   	push   ecx
c00142ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014303:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014307:	03 06                	add    eax,DWORD PTR [esi]
c0014309:	50                   	push   eax
c001430a:	68 03 10 02 c0       	push   0xc0021003
c001430f:	e8 3f 66 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0014314:	5e                   	pop    esi
c0014315:	58                   	pop    eax
c0014316:	68 1d 10 02 c0       	push   0xc002101d
c001431b:	8d b4 24 5c 02 00 00 	lea    esi,[esp+0x25c]
c0014322:	56                   	push   esi
c0014323:	e8 08 c3 fe ff       	call   c0000630 <strcpy>
c0014328:	58                   	pop    eax
c0014329:	5a                   	pop    edx
c001432a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001432e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014332:	03 02                	add    eax,DWORD PTR [edx]
c0014334:	50                   	push   eax
c0014335:	56                   	push   esi
c0014336:	e8 f5 c4 fe ff       	call   c0000830 <strcat>
c001433b:	59                   	pop    ecx
c001433c:	58                   	pop    eax
c001433d:	68 b3 10 02 c0       	push   0xc00210b3
c0014342:	56                   	push   esi
c0014343:	e8 e8 c4 fe ff       	call   c0000830 <strcat>
c0014348:	83 c4 10             	add    esp,0x10
c001434b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014350:	0f 84 66 01 00 00    	je     c00144bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	56                   	push   esi
c001435a:	e8 e0 c4 ff ff       	call   c001083f <KePanic(char const*)>
c001435f:	83 c4 10             	add    esp,0x10
c0014362:	0f b6 74 24 3b       	movzx  esi,BYTE PTR [esp+0x3b]
c0014367:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001436c:	83 f8 01             	cmp    eax,0x1
c001436f:	0f 85 95 00 00 00    	jne    c001440a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e8>
c0014375:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001437c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014380:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014384:	01 c8                	add    eax,ecx
c0014386:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001438a:	8b 00                	mov    eax,DWORD PTR [eax]
c001438c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014390:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c0014398:	0f 94 c2             	sete   dl
c001439b:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c00143a3:	0f 94 c0             	sete   al
c00143a6:	09 c2                	or     edx,eax
c00143a8:	89 f0                	mov    eax,esi
c00143aa:	84 c0                	test   al,al
c00143ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143b0:	0f b6 d2             	movzx  edx,dl
c00143b3:	74 38                	je     c00143ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cb>
c00143b5:	01 de                	add    esi,ebx
c00143b7:	85 d2                	test   edx,edx
c00143b9:	75 15                	jne    c00143d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ae>
c00143bb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143bf:	66 83 f8 0c          	cmp    ax,0xc
c00143c3:	76 05                	jbe    c00143ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c00143c5:	b8 0c 00 00 00       	mov    eax,0xc
c00143ca:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143ce:	76 2f                	jbe    c00143ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143d0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143d5:	0f 84 e1 00 00 00    	je     c00144bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c00143db:	83 ec 0c             	sub    esp,0xc
c00143de:	68 34 10 02 c0       	push   0xc0021034
c00143e3:	e8 57 c4 ff ff       	call   c001083f <KePanic(char const*)>
c00143e8:	83 c4 10             	add    esp,0x10
c00143eb:	eb 12                	jmp    c00143ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143ed:	01 ce                	add    esi,ecx
c00143ef:	85 d2                	test   edx,edx
c00143f1:	75 0c                	jne    c00143ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143f7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143fb:	77 02                	ja     c00143ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5dd>
c00143fd:	01 de                	add    esi,ebx
c00143ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014403:	89 30                	mov    DWORD PTR [eax],esi
c0014405:	e9 ef 00 00 00       	jmp    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c001440a:	83 f8 02             	cmp    eax,0x2
c001440d:	0f 85 80 00 00 00    	jne    c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x671>
c0014413:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001441a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001441e:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014422:	01 c1                	add    ecx,eax
c0014424:	81 7c 24 14 01 01 00 00 	cmp    DWORD PTR [esp+0x14],0x101
c001442c:	74 21                	je     c001444f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001442e:	81 7c 24 14 01 04 00 00 	cmp    DWORD PTR [esp+0x14],0x401
c0014436:	74 17                	je     c001444f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014438:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001443c:	b8 0a 00 00 00       	mov    eax,0xa
c0014441:	83 fa 0e             	cmp    edx,0xe
c0014444:	77 03                	ja     c0014449 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x627>
c0014446:	8d 42 fc             	lea    eax,[edx-0x4]
c0014449:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001444d:	76 1f                	jbe    c001446e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64c>
c001444f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0014453:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014458:	74 62                	je     c00144bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	68 50 10 02 c0       	push   0xc0021050
c0014462:	e8 d8 c3 ff ff       	call   c001083f <KePanic(char const*)>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001446e:	89 f2                	mov    edx,esi
c0014470:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014472:	84 d2                	test   dl,dl
c0014474:	74 13                	je     c0014489 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x667>
c0014476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001447a:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014481:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014485:	01 d0                	add    eax,edx
c0014487:	eb 04                	jmp    c001448d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66b>
c0014489:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001448d:	01 c3                	add    ebx,eax
c001448f:	89 19                	mov    DWORD PTR [ecx],ebx
c0014491:	eb 66                	jmp    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c0014493:	52                   	push   edx
c0014494:	52                   	push   edx
c0014495:	50                   	push   eax
c0014496:	68 6c 10 02 c0       	push   0xc002106c
c001449b:	e8 b3 64 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00144a0:	83 c4 10             	add    esp,0x10
c00144a3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00144a8:	74 12                	je     c00144bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x69a>
c00144aa:	83 ec 0c             	sub    esp,0xc
c00144ad:	68 77 10 02 c0       	push   0xc0021077
c00144b2:	e8 88 c3 ff ff       	call   c001083f <KePanic(char const*)>
c00144b7:	83 c4 10             	add    esp,0x10
c00144ba:	eb 3d                	jmp    c00144f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d7>
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	55                   	push   ebp
c00144c0:	e8 2b 6b ff ff       	call   c000aff0 <File::close()>
c00144c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144ce:	59                   	pop    ecx
c00144cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144d3:	e8 c4 35 ff ff       	call   c0007a9c <free>
c00144d8:	5b                   	pop    ebx
c00144d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144dd:	e8 ba 35 ff ff       	call   c0007a9c <free>
c00144e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144e5:	e8 b2 35 ff ff       	call   c0007a9c <free>
c00144ea:	5e                   	pop    esi
c00144eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144ef:	e8 a8 35 ff ff       	call   c0007a9c <free>
c00144f4:	83 c4 10             	add    esp,0x10
c00144f7:	eb 21                	jmp    c001451a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00144f9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00144fd:	e9 72 fd ff ff       	jmp    c0014274 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0014502:	83 ec 0c             	sub    esp,0xc
c0014505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014509:	e8 8e 35 ff ff       	call   c0007a9c <free>
c001450e:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	e9 e8 fc ff ff       	jmp    c0014202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e0>
c001451a:	31 c0                	xor    eax,eax
c001451c:	eb 33                	jmp    c0014551 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72f>
c001451e:	83 ec 0c             	sub    esp,0xc
c0014521:	55                   	push   ebp
c0014522:	e8 c9 6a ff ff       	call   c000aff0 <File::close()>
c0014527:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001452a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001452d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014530:	58                   	pop    eax
c0014531:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014535:	e8 62 35 ff ff       	call   c0007a9c <free>
c001453a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001453d:	e8 5a 35 ff ff       	call   c0007a9c <free>
c0014542:	5a                   	pop    edx
c0014543:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014547:	e8 50 35 ff ff       	call   c0007a9c <free>
c001454c:	83 c4 10             	add    esp,0x10
c001454f:	b0 01                	mov    al,0x1
c0014551:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014557:	5b                   	pop    ebx
c0014558:	5e                   	pop    esi
c0014559:	5f                   	pop    edi
c001455a:	5d                   	pop    ebp
c001455b:	c3                   	ret    

c001455c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001455c:	56                   	push   esi
c001455d:	31 d2                	xor    edx,edx
c001455f:	53                   	push   ebx
c0014560:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001456a:	39 d3                	cmp    ebx,edx
c001456c:	7e 1b                	jle    c0014589 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001456e:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014575:	39 c8                	cmp    eax,ecx
c0014577:	77 0d                	ja     c0014586 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014579:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014580:	01 c6                	add    esi,eax
c0014582:	39 ce                	cmp    esi,ecx
c0014584:	77 05                	ja     c001458b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014586:	42                   	inc    edx
c0014587:	eb e1                	jmp    c001456a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014589:	31 c0                	xor    eax,eax
c001458b:	5b                   	pop    ebx
c001458c:	5e                   	pop    esi
c001458d:	c3                   	ret    

c001458e <Thr::getDriverNameFromAddress(unsigned long)>:
c001458e:	53                   	push   ebx
c001458f:	31 c0                	xor    eax,eax
c0014591:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014595:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001459b:	39 c3                	cmp    ebx,eax
c001459d:	7e 22                	jle    c00145c1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001459f:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c00145a6:	39 ca                	cmp    edx,ecx
c00145a8:	77 14                	ja     c00145be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145aa:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00145b1:	39 ca                	cmp    edx,ecx
c00145b3:	76 09                	jbe    c00145be <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00145b5:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00145bc:	eb 05                	jmp    c00145c3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00145be:	40                   	inc    eax
c00145bf:	eb da                	jmp    c001459b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00145c1:	31 c0                	xor    eax,eax
c00145c3:	5b                   	pop    ebx
c00145c4:	c3                   	ret    

c00145c5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00145c5:	53                   	push   ebx
c00145c6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145ca:	53                   	push   ebx
c00145cb:	e8 8c ff ff ff       	call   c001455c <Thr::getDriverBaseFromAddress(unsigned long)>
c00145d0:	5a                   	pop    edx
c00145d1:	31 d2                	xor    edx,edx
c00145d3:	85 c0                	test   eax,eax
c00145d5:	74 04                	je     c00145db <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145d7:	89 da                	mov    edx,ebx
c00145d9:	29 c2                	sub    edx,eax
c00145db:	89 d0                	mov    eax,edx
c00145dd:	5b                   	pop    ebx
c00145de:	c3                   	ret    

c00145df <Thr::loadDLL(char const*, bool)>:
c00145df:	55                   	push   ebp
c00145e0:	57                   	push   edi
c00145e1:	56                   	push   esi
c00145e2:	53                   	push   ebx
c00145e3:	81 ec 34 01 00 00    	sub    esp,0x134
c00145e9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145f0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00145f7:	56                   	push   esi
c00145f8:	68 8f 10 02 c0       	push   0xc002108f
c00145fd:	e8 51 63 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0014602:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014609:	e8 7e 34 ff ff       	call   c0007a8c <malloc>
c001460e:	83 c4 0c             	add    esp,0xc
c0014611:	89 c3                	mov    ebx,eax
c0014613:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014619:	56                   	push   esi
c001461a:	50                   	push   eax
c001461b:	e8 b6 68 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0014620:	83 c4 10             	add    esp,0x10
c0014623:	85 db                	test   ebx,ebx
c0014625:	75 3c                	jne    c0014663 <Thr::loadDLL(char const*, bool)+0x84>
c0014627:	89 e8                	mov    eax,ebp
c0014629:	84 c0                	test   al,al
c001462b:	0f 84 db 01 00 00    	je     c001480c <Thr::loadDLL(char const*, bool)+0x22d>
c0014631:	57                   	push   edi
c0014632:	57                   	push   edi
c0014633:	68 a0 10 02 c0       	push   0xc00210a0
c0014638:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001463c:	57                   	push   edi
c001463d:	e8 ee bf fe ff       	call   c0000630 <strcpy>
c0014642:	58                   	pop    eax
c0014643:	5a                   	pop    edx
c0014644:	56                   	push   esi
c0014645:	57                   	push   edi
c0014646:	e8 e5 c1 fe ff       	call   c0000830 <strcat>
c001464b:	59                   	pop    ecx
c001464c:	58                   	pop    eax
c001464d:	68 b3 10 02 c0       	push   0xc00210b3
c0014652:	57                   	push   edi
c0014653:	e8 d8 c1 fe ff       	call   c0000830 <strcat>
c0014658:	89 3c 24             	mov    DWORD PTR [esp],edi
c001465b:	e8 df c1 ff ff       	call   c001083f <KePanic(char const*)>
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	51                   	push   ecx
c0014664:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014668:	50                   	push   eax
c0014669:	8d 44 24 20          	lea    eax,[esp+0x20]
c001466d:	50                   	push   eax
c001466e:	53                   	push   ebx
c001466f:	e8 ca 6b ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0014674:	83 c4 10             	add    esp,0x10
c0014677:	85 db                	test   ebx,ebx
c0014679:	74 0c                	je     c0014687 <Thr::loadDLL(char const*, bool)+0xa8>
c001467b:	83 ec 0c             	sub    esp,0xc
c001467e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014680:	53                   	push   ebx
c0014681:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001468c:	75 0a                	jne    c0014698 <Thr::loadDLL(char const*, bool)+0xb9>
c001468e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014692:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014696:	75 3c                	jne    c00146d4 <Thr::loadDLL(char const*, bool)+0xf5>
c0014698:	89 e8                	mov    eax,ebp
c001469a:	84 c0                	test   al,al
c001469c:	0f 84 68 01 00 00    	je     c001480a <Thr::loadDLL(char const*, bool)+0x22b>
c00146a2:	51                   	push   ecx
c00146a3:	51                   	push   ecx
c00146a4:	68 a0 10 02 c0       	push   0xc00210a0
c00146a9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00146ad:	53                   	push   ebx
c00146ae:	e8 7d bf fe ff       	call   c0000630 <strcpy>
c00146b3:	5f                   	pop    edi
c00146b4:	58                   	pop    eax
c00146b5:	56                   	push   esi
c00146b6:	53                   	push   ebx
c00146b7:	e8 74 c1 fe ff       	call   c0000830 <strcat>
c00146bc:	58                   	pop    eax
c00146bd:	5a                   	pop    edx
c00146be:	68 b3 10 02 c0       	push   0xc00210b3
c00146c3:	53                   	push   ebx
c00146c4:	e8 67 c1 fe ff       	call   c0000830 <strcat>
c00146c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146cc:	e8 6e c1 ff ff       	call   c001083f <KePanic(char const*)>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	52                   	push   edx
c00146d5:	6a 03                	push   0x3
c00146d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146df:	05 ff 0f 00 00       	add    eax,0xfff
c00146e4:	83 d2 00             	adc    edx,0x0
c00146e7:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146eb:	50                   	push   eax
c00146ec:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146f2:	e8 e9 56 ff ff       	call   c0009de0 <VAS::allocatePages(int, int)>
c00146f7:	59                   	pop    ecx
c00146f8:	89 c3                	mov    ebx,eax
c00146fa:	5f                   	pop    edi
c00146fb:	50                   	push   eax
c00146fc:	68 2e fc 01 c0       	push   0xc001fc2e
c0014701:	e8 4d 62 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0014706:	89 34 24             	mov    DWORD PTR [esp],esi
c0014709:	e8 52 be fe ff       	call   c0000560 <strlen>
c001470e:	40                   	inc    eax
c001470f:	8b 3d a0 79 02 c0    	mov    edi,DWORD PTR ds:0xc00279a0
c0014715:	89 04 24             	mov    DWORD PTR [esp],eax
c0014718:	e8 6f 33 ff ff       	call   c0007a8c <malloc>
c001471d:	89 04 bd c0 7d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd8240],eax
c0014724:	58                   	pop    eax
c0014725:	5a                   	pop    edx
c0014726:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001472b:	56                   	push   esi
c001472c:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014733:	e8 f8 be fe ff       	call   c0000630 <strcpy>
c0014738:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001473d:	8d 50 01             	lea    edx,[eax+0x1]
c0014740:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c0014747:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001474d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014751:	83 c4 0c             	add    esp,0xc
c0014754:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001475b:	6a 01                	push   0x1
c001475d:	53                   	push   ebx
c001475e:	56                   	push   esi
c001475f:	e8 be f6 ff ff       	call   c0013e22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014764:	89 c7                	mov    edi,eax
c0014766:	83 c4 10             	add    esp,0x10
c0014769:	89 f8                	mov    eax,edi
c001476b:	83 f0 01             	xor    eax,0x1
c001476e:	84 c0                	test   al,al
c0014770:	74 18                	je     c001478a <Thr::loadDLL(char const*, bool)+0x1ab>
c0014772:	89 e8                	mov    eax,ebp
c0014774:	84 c0                	test   al,al
c0014776:	74 12                	je     c001478a <Thr::loadDLL(char const*, bool)+0x1ab>
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	68 b5 10 02 c0       	push   0xc00210b5
c0014780:	e8 ba c0 ff ff       	call   c001083f <KePanic(char const*)>
c0014785:	83 c4 10             	add    esp,0x10
c0014788:	eb 06                	jmp    c0014790 <Thr::loadDLL(char const*, bool)+0x1b1>
c001478a:	89 f8                	mov    eax,edi
c001478c:	84 c0                	test   al,al
c001478e:	75 10                	jne    c00147a0 <Thr::loadDLL(char const*, bool)+0x1c1>
c0014790:	83 ec 0c             	sub    esp,0xc
c0014793:	68 d4 10 02 c0       	push   0xc00210d4
c0014798:	e8 a2 c0 ff ff       	call   c001083f <KePanic(char const*)>
c001479d:	83 c4 10             	add    esp,0x10
c00147a0:	31 f6                	xor    esi,esi
c00147a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00147aa:	05 ff 0f 00 00       	add    eax,0xfff
c00147af:	83 d2 00             	adc    edx,0x0
c00147b2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147b6:	c1 ea 0c             	shr    edx,0xc
c00147b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00147c1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00147c5:	ba 00 00 00 00       	mov    edx,0x0
c00147ca:	89 d0                	mov    eax,edx
c00147cc:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00147d0:	73 32                	jae    c0014804 <Thr::loadDLL(char const*, bool)+0x225>
c00147d2:	50                   	push   eax
c00147d3:	50                   	push   eax
c00147d4:	89 f0                	mov    eax,esi
c00147d6:	c1 e0 0c             	shl    eax,0xc
c00147d9:	01 d8                	add    eax,ebx
c00147db:	50                   	push   eax
c00147dc:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147e2:	e8 07 51 ff ff       	call   c00098ee <VAS::getPageTableEntry(unsigned long)>
c00147e7:	83 c4 10             	add    esp,0x10
c00147ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00147ec:	a8 60                	test   al,0x60
c00147ee:	75 11                	jne    c0014801 <Thr::loadDLL(char const*, bool)+0x222>
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147f8:	50                   	push   eax
c00147f9:	e8 2a 35 ff ff       	call   c0007d28 <Phys::freePage(unsigned long)>
c00147fe:	83 c4 10             	add    esp,0x10
c0014801:	46                   	inc    esi
c0014802:	eb 9e                	jmp    c00147a2 <Thr::loadDLL(char const*, bool)+0x1c3>
c0014804:	89 f8                	mov    eax,edi
c0014806:	84 c0                	test   al,al
c0014808:	75 02                	jne    c001480c <Thr::loadDLL(char const*, bool)+0x22d>
c001480a:	31 db                	xor    ebx,ebx
c001480c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014812:	89 d8                	mov    eax,ebx
c0014814:	5b                   	pop    ebx
c0014815:	5e                   	pop    esi
c0014816:	5f                   	pop    edi
c0014817:	5d                   	pop    ebp
c0014818:	c3                   	ret    

c0014819 <Thr::executeDLL(unsigned long, void*)>:
c0014819:	56                   	push   esi
c001481a:	53                   	push   ebx
c001481b:	52                   	push   edx
c001481c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014820:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014824:	85 db                	test   ebx,ebx
c0014826:	75 10                	jne    c0014838 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014828:	83 ec 0c             	sub    esp,0xc
c001482b:	68 f0 10 02 c0       	push   0xc00210f0
c0014830:	e8 0a c0 ff ff       	call   c001083f <KePanic(char const*)>
c0014835:	83 c4 10             	add    esp,0x10
c0014838:	50                   	push   eax
c0014839:	50                   	push   eax
c001483a:	53                   	push   ebx
c001483b:	68 1a 11 02 c0       	push   0xc002111a
c0014840:	e8 0e 61 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0014845:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014849:	83 c4 14             	add    esp,0x14
c001484c:	89 d8                	mov    eax,ebx
c001484e:	5b                   	pop    ebx
c001484f:	5e                   	pop    esi
c0014850:	ff e0                	jmp    eax
c0014852:	66 90                	xchg   ax,ax

c0014854 <userModeEntryPoint(void*)>:
c0014854:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014859:	83 e8 01             	sub    eax,0x1
c001485c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0014861:	75 01                	jne    c0014864 <userModeEntryPoint(void*)+0x10>
c0014863:	fb                   	sti    
c0014864:	fb                   	sti    
c0014865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001486d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014873:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014877:	e9 c3 b9 fe ff       	jmp    c000023f <goToUsermode>

c001487c <changeTSS>:
c001487c:	83 ec 14             	sub    esp,0x14
c001487f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014884:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014887:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001488c:	c1 e2 15             	shl    edx,0x15
c001488f:	29 d0                	sub    eax,edx
c0014891:	50                   	push   eax
c0014892:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014897:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001489d:	05 7c 11 00 00       	add    eax,0x117c
c00148a2:	50                   	push   eax
c00148a3:	e8 90 46 ff ff       	call   c0008f38 <TSS::setESP(unsigned long)>
c00148a8:	83 c4 1c             	add    esp,0x1c
c00148ab:	c3                   	ret    

c00148ac <switchToThread(ThreadControlBlock*)>:
c00148ac:	57                   	push   edi
c00148ad:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00148b3:	56                   	push   esi
c00148b4:	85 c9                	test   ecx,ecx
c00148b6:	53                   	push   ebx
c00148b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148bb:	0f 85 8b 00 00 00    	jne    c001494c <switchToThread(ThreadControlBlock*)+0xa0>
c00148c1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00148c5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00148cb:	74 7b                	je     c0014948 <switchToThread(ThreadControlBlock*)+0x9c>
c00148cd:	b8 00 04 00 00       	mov    eax,0x400
c00148d2:	29 d0                	sub    eax,edx
c00148d4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148d7:	d1 f8                	sar    eax,1
c00148d9:	01 d0                	add    eax,edx
c00148db:	90                   	nop
c00148dc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148df:	e8 7f 27 00 00       	call   c0017063 <HalQueryPerformanceCounter()>
c00148e4:	89 c6                	mov    esi,eax
c00148e6:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148eb:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148f1:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148f6:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148fc:	89 d7                	mov    edi,edx
c00148fe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014904:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c001490a:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014910:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014916:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014919:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001491c:	01 c6                	add    esi,eax
c001491e:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014924:	11 d7                	adc    edi,edx
c0014926:	83 ec 0c             	sub    esp,0xc
c0014929:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001492c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001492f:	53                   	push   ebx
c0014930:	e8 42 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014935:	0f 20 c0             	mov    eax,cr0
c0014938:	83 c8 08             	or     eax,0x8
c001493b:	0f 22 c0             	mov    cr0,eax
c001493e:	83 c4 10             	add    esp,0x10
c0014941:	5b                   	pop    ebx
c0014942:	5e                   	pop    esi
c0014943:	5f                   	pop    edi
c0014944:	c3                   	ret    
c0014945:	8d 76 00             	lea    esi,[esi+0x0]
c0014948:	31 c0                	xor    eax,eax
c001494a:	eb 90                	jmp    c00148dc <switchToThread(ThreadControlBlock*)+0x30>
c001494c:	5b                   	pop    ebx
c001494d:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014957:	5e                   	pop    esi
c0014958:	5f                   	pop    edi
c0014959:	c3                   	ret    
c001495a:	66 90                	xchg   ax,ax

c001495c <Process::addArgs(char**)>:
c001495c:	57                   	push   edi
c001495d:	56                   	push   esi
c001495e:	53                   	push   ebx
c001495f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014963:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014967:	85 ff                	test   edi,edi
c0014969:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014973:	74 4f                	je     c00149c4 <Process::addArgs(char**)+0x68>
c0014975:	8b 07                	mov    eax,DWORD PTR [edi]
c0014977:	85 c0                	test   eax,eax
c0014979:	74 49                	je     c00149c4 <Process::addArgs(char**)+0x68>
c001497b:	31 db                	xor    ebx,ebx
c001497d:	8d 76 00             	lea    esi,[esi+0x0]
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	50                   	push   eax
c0014984:	e8 d7 bb fe ff       	call   c0000560 <strlen>
c0014989:	83 c0 01             	add    eax,0x1
c001498c:	89 04 24             	mov    DWORD PTR [esp],eax
c001498f:	e8 f8 30 ff ff       	call   c0007a8c <malloc>
c0014994:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001499b:	5a                   	pop    edx
c001499c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001499f:	59                   	pop    ecx
c00149a0:	83 c3 01             	add    ebx,0x1
c00149a3:	52                   	push   edx
c00149a4:	50                   	push   eax
c00149a5:	e8 86 bc fe ff       	call   c0000630 <strcpy>
c00149aa:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00149b0:	83 c4 10             	add    esp,0x10
c00149b3:	83 c1 01             	add    ecx,0x1
c00149b6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00149bc:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00149bf:	85 c0                	test   eax,eax
c00149c1:	75 bd                	jne    c0014980 <Process::addArgs(char**)+0x24>
c00149c3:	90                   	nop
c00149c4:	5b                   	pop    ebx
c00149c5:	5e                   	pop    esi
c00149c6:	5f                   	pop    edi
c00149c7:	c3                   	ret    

c00149c8 <Process::Process(char const*, Process*, char**)>:
c00149c8:	56                   	push   esi
c00149c9:	53                   	push   ebx
c00149ca:	83 ec 14             	sub    esp,0x14
c00149cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d1:	05 0c 02 00 00       	add    eax,0x20c
c00149d6:	bb 07 00 00 00       	mov    ebx,0x7
c00149db:	89 c6                	mov    esi,eax
c00149dd:	8d 76 00             	lea    esi,[esi+0x0]
c00149e0:	85 db                	test   ebx,ebx
c00149e2:	78 14                	js     c00149f8 <Process::Process(char const*, Process*, char**)+0x30>
c00149e4:	83 ec 0c             	sub    esp,0xc
c00149e7:	56                   	push   esi
c00149e8:	e8 fb a4 00 00       	call   c001eee8 <ThreadControlBlock::ThreadControlBlock()>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	83 c6 5f             	add    esi,0x5f
c00149f3:	83 eb 01             	sub    ebx,0x1
c00149f6:	eb e8                	jmp    c00149e0 <Process::Process(char const*, Process*, char**)+0x18>
c00149f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149fc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a07:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014a0e:	83 ec 0c             	sub    esp,0xc
c0014a11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a15:	e8 1a bc ff ff       	call   c0010634 <Krnl::newProcessEnv(Process*)>
c0014a1a:	83 c4 10             	add    esp,0x10
c0014a1d:	89 c2                	mov    edx,eax
c0014a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a23:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014a29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a2d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a36:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014a3b:	8d 50 01             	lea    edx,[eax+0x1]
c0014a3e:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014a44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a48:	89 02                	mov    DWORD PTR [edx],eax
c0014a4a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a59:	e8 2e 30 ff ff       	call   c0007a8c <malloc>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	89 c3                	mov    ebx,eax
c0014a63:	83 ec 08             	sub    esp,0x8
c0014a66:	6a 00                	push   0x0
c0014a68:	53                   	push   ebx
c0014a69:	e8 4c 57 ff ff       	call   c000a1ba <VAS::VAS(bool)>
c0014a6e:	83 c4 10             	add    esp,0x10
c0014a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a75:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a7f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a91:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a97:	e8 be c1 ff ff       	call   c0010c5a <KeInitSignals()>
c0014a9c:	89 c2                	mov    edx,eax
c0014a9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ab2:	85 c0                	test   eax,eax
c0014ab4:	74 42                	je     c0014af8 <Process::Process(char const*, Process*, char**)+0x130>
c0014ab6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aba:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ac0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aca:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ada:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014ae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae4:	05 0c 01 00 00       	add    eax,0x10c
c0014ae9:	83 ec 08             	sub    esp,0x8
c0014aec:	52                   	push   edx
c0014aed:	50                   	push   eax
c0014aee:	e8 3d bb fe ff       	call   c0000630 <strcpy>
c0014af3:	83 c4 10             	add    esp,0x10
c0014af6:	eb 64                	jmp    c0014b5c <Process::Process(char const*, Process*, char**)+0x194>
c0014af8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b07:	e8 80 2f ff ff       	call   c0007a8c <malloc>
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	89 c3                	mov    ebx,eax
c0014b11:	83 ec 08             	sub    esp,0x8
c0014b14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b18:	53                   	push   ebx
c0014b19:	e8 26 41 ff ff       	call   c0008c44 <VgaText::VgaText(char const*)>
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b25:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014b2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b35:	83 ec 0c             	sub    esp,0xc
c0014b38:	50                   	push   eax
c0014b39:	e8 a4 39 ff ff       	call   c00084e2 <addToTerminalCycle(VgaText*)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b45:	05 0c 01 00 00       	add    eax,0x10c
c0014b4a:	83 ec 08             	sub    esp,0x8
c0014b4d:	68 39 11 02 c0       	push   0xc0021139
c0014b52:	50                   	push   eax
c0014b53:	e8 d8 ba fe ff       	call   c0000630 <strcpy>
c0014b58:	83 c4 10             	add    esp,0x10
c0014b5b:	90                   	nop
c0014b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b60:	83 c0 0c             	add    eax,0xc
c0014b63:	83 ec 08             	sub    esp,0x8
c0014b66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b6a:	50                   	push   eax
c0014b6b:	e8 c0 ba fe ff       	call   c0000630 <strcpy>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	83 ec 08             	sub    esp,0x8
c0014b76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b7e:	e8 d9 fd ff ff       	call   c001495c <Process::addArgs(char**)>
c0014b83:	83 c4 10             	add    esp,0x10
c0014b86:	83 ec 08             	sub    esp,0x8
c0014b89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b91:	e8 5a ed ff ff       	call   c00138f0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b96:	83 c4 10             	add    esp,0x10
c0014b99:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b9d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014ba1:	83 f0 01             	xor    eax,0x1
c0014ba4:	88 c2                	mov    dl,al
c0014ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014baa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014bb0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014bb5:	83 ec 08             	sub    esp,0x8
c0014bb8:	50                   	push   eax
c0014bb9:	68 90 11 02 c0       	push   0xc0021190
c0014bbe:	e8 90 5d ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	90                   	nop
c0014bc7:	83 c4 14             	add    esp,0x14
c0014bca:	5b                   	pop    ebx
c0014bcb:	5e                   	pop    esi
c0014bcc:	c3                   	ret    
c0014bcd:	90                   	nop
c0014bce:	66 90                	xchg   ax,ax

c0014bd0 <Process::Process(bool, char const*, Process*, char**)>:
c0014bd0:	56                   	push   esi
c0014bd1:	53                   	push   ebx
c0014bd2:	83 ec 24             	sub    esp,0x24
c0014bd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014bd9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014bdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be1:	05 0c 02 00 00       	add    eax,0x20c
c0014be6:	bb 07 00 00 00       	mov    ebx,0x7
c0014beb:	89 c6                	mov    esi,eax
c0014bed:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf0:	85 db                	test   ebx,ebx
c0014bf2:	78 14                	js     c0014c08 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bf4:	83 ec 0c             	sub    esp,0xc
c0014bf7:	56                   	push   esi
c0014bf8:	e8 eb a2 00 00       	call   c001eee8 <ThreadControlBlock::ThreadControlBlock()>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	83 c6 5f             	add    esi,0x5f
c0014c03:	83 eb 01             	sub    ebx,0x1
c0014c06:	eb e8                	jmp    c0014bf0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c0c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014c13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c17:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014c1e:	83 ec 0c             	sub    esp,0xc
c0014c21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014c25:	e8 0a ba ff ff       	call   c0010634 <Krnl::newProcessEnv(Process*)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	89 c2                	mov    edx,eax
c0014c2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c33:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c46:	a1 e0 22 02 c0       	mov    eax,ds:0xc00222e0
c0014c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4e:	89 15 e0 22 02 c0    	mov    DWORD PTR ds:0xc00222e0,edx
c0014c54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c58:	89 02                	mov    DWORD PTR [edx],eax
c0014c5a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c62:	83 ec 0c             	sub    esp,0xc
c0014c65:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c69:	e8 1e 2e ff ff       	call   c0007a8c <malloc>
c0014c6e:	83 c4 10             	add    esp,0x10
c0014c71:	89 c3                	mov    ebx,eax
c0014c73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c78:	83 ec 08             	sub    esp,0x8
c0014c7b:	50                   	push   eax
c0014c7c:	53                   	push   ebx
c0014c7d:	e8 38 55 ff ff       	call   c000a1ba <VAS::VAS(bool)>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c89:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c93:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014ca5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014cab:	e8 aa bf ff ff       	call   c0010c5a <KeInitSignals()>
c0014cb0:	89 c2                	mov    edx,eax
c0014cb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014cbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cc6:	85 c0                	test   eax,eax
c0014cc8:	74 42                	je     c0014d0c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014cca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cce:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cd4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014cda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cde:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014ce4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ce8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf8:	05 0c 01 00 00       	add    eax,0x10c
c0014cfd:	83 ec 08             	sub    esp,0x8
c0014d00:	52                   	push   edx
c0014d01:	50                   	push   eax
c0014d02:	e8 29 b9 fe ff       	call   c0000630 <strcpy>
c0014d07:	83 c4 10             	add    esp,0x10
c0014d0a:	eb 64                	jmp    c0014d70 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014d0c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014d14:	83 ec 0c             	sub    esp,0xc
c0014d17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d1b:	e8 6c 2d ff ff       	call   c0007a8c <malloc>
c0014d20:	83 c4 10             	add    esp,0x10
c0014d23:	89 c3                	mov    ebx,eax
c0014d25:	83 ec 08             	sub    esp,0x8
c0014d28:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d2c:	53                   	push   ebx
c0014d2d:	e8 12 3f ff ff       	call   c0008c44 <VgaText::VgaText(char const*)>
c0014d32:	83 c4 10             	add    esp,0x10
c0014d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d39:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d43:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d49:	83 ec 0c             	sub    esp,0xc
c0014d4c:	50                   	push   eax
c0014d4d:	e8 90 37 ff ff       	call   c00084e2 <addToTerminalCycle(VgaText*)>
c0014d52:	83 c4 10             	add    esp,0x10
c0014d55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d59:	05 0c 01 00 00       	add    eax,0x10c
c0014d5e:	83 ec 08             	sub    esp,0x8
c0014d61:	68 39 11 02 c0       	push   0xc0021139
c0014d66:	50                   	push   eax
c0014d67:	e8 c4 b8 fe ff       	call   c0000630 <strcpy>
c0014d6c:	83 c4 10             	add    esp,0x10
c0014d6f:	90                   	nop
c0014d70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d74:	83 c0 0c             	add    eax,0xc
c0014d77:	83 ec 08             	sub    esp,0x8
c0014d7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d7e:	50                   	push   eax
c0014d7f:	e8 ac b8 fe ff       	call   c0000630 <strcpy>
c0014d84:	83 c4 10             	add    esp,0x10
c0014d87:	83 ec 08             	sub    esp,0x8
c0014d8a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d92:	e8 c5 fb ff ff       	call   c001495c <Process::addArgs(char**)>
c0014d97:	83 c4 10             	add    esp,0x10
c0014d9a:	90                   	nop
c0014d9b:	83 c4 24             	add    esp,0x24
c0014d9e:	5b                   	pop    ebx
c0014d9f:	5e                   	pop    esi
c0014da0:	c3                   	ret    
c0014da1:	8d 76 00             	lea    esi,[esi+0x0]

c0014da4 <taskStartupFunction>:
c0014da4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014da9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014dac:	c3                   	ret    
c0014dad:	90                   	nop
c0014dae:	66 90                	xchg   ax,ax

c0014db0 <Semaphore::Semaphore(int)>:
c0014db0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014db8:	89 10                	mov    DWORD PTR [eax],edx
c0014dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014dc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dd4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014ddb:	90                   	nop
c0014ddc:	c3                   	ret    
c0014ddd:	90                   	nop
c0014dde:	66 90                	xchg   ax,ax

c0014de0 <Mutex::Mutex()>:
c0014de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014de4:	6a 01                	push   0x1
c0014de6:	50                   	push   eax
c0014de7:	e8 c4 ff ff ff       	call   c0014db0 <Semaphore::Semaphore(int)>
c0014dec:	83 c4 08             	add    esp,0x8
c0014def:	90                   	nop
c0014df0:	c3                   	ret    
c0014df1:	90                   	nop
c0014df2:	66 90                	xchg   ax,ax

c0014df4 <Process::createThread(void (*)(void*), void*, int)>:
c0014df4:	57                   	push   edi
c0014df5:	31 c9                	xor    ecx,ecx
c0014df7:	56                   	push   esi
c0014df8:	53                   	push   ebx
c0014df9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dfd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014e04:	89 f2                	mov    edx,esi
c0014e06:	66 90                	xchg   ax,ax
c0014e08:	0f b7 c2             	movzx  eax,dx
c0014e0b:	80 e2 01             	and    dl,0x1
c0014e0e:	74 14                	je     c0014e24 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014e10:	d1 f8                	sar    eax,1
c0014e12:	83 c1 01             	add    ecx,0x1
c0014e15:	89 c2                	mov    edx,eax
c0014e17:	83 f9 10             	cmp    ecx,0x10
c0014e1a:	75 ec                	jne    c0014e08 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014e1c:	31 db                	xor    ebx,ebx
c0014e1e:	89 d8                	mov    eax,ebx
c0014e20:	5b                   	pop    ebx
c0014e21:	5e                   	pop    esi
c0014e22:	5f                   	pop    edi
c0014e23:	c3                   	ret    
c0014e24:	b8 01 00 00 00       	mov    eax,0x1
c0014e29:	d3 e0                	shl    eax,cl
c0014e2b:	09 c6                	or     esi,eax
c0014e2d:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014e30:	c1 e0 05             	shl    eax,0x5
c0014e33:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e3a:	29 c8                	sub    eax,ecx
c0014e3c:	01 d8                	add    eax,ebx
c0014e3e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e45:	75 0d                	jne    c0014e54 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e47:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e51:	8d 76 00             	lea    esi,[esi+0x0]
c0014e54:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014e57:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e5d:	c1 e6 05             	shl    esi,0x5
c0014e60:	83 ec 0c             	sub    esp,0xc
c0014e63:	29 ce                	sub    esi,ecx
c0014e65:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e68:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014e6b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e75:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e7b:	89 ca                	mov    edx,ecx
c0014e7d:	f7 da                	neg    edx
c0014e7f:	c1 e2 15             	shl    edx,0x15
c0014e82:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e88:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e8e:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e94:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e9e:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014ea4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ea8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014eb2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014eb8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014ec2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ecc:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014ed2:	68 00 01 00 00       	push   0x100
c0014ed7:	e8 b0 2b ff ff       	call   c0007a8c <malloc>
c0014edc:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014ee3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014ee6:	58                   	pop    eax
c0014ee7:	5a                   	pop    edx
c0014ee8:	53                   	push   ebx
c0014ee9:	68 84 81 02 c0       	push   0xc0028184
c0014eee:	e8 8d 9d 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	89 d8                	mov    eax,ebx
c0014ef8:	5b                   	pop    ebx
c0014ef9:	5e                   	pop    esi
c0014efa:	5f                   	pop    edi
c0014efb:	c3                   	ret    

c0014efc <Process::createUserThread()>:
c0014efc:	83 ec 0c             	sub    esp,0xc
c0014eff:	68 80 00 00 00       	push   0x80
c0014f04:	6a 00                	push   0x0
c0014f06:	68 54 48 01 c0       	push   0xc0014854
c0014f0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f0f:	50                   	push   eax
c0014f10:	e8 df fe ff ff       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0014f15:	83 c4 1c             	add    esp,0x1c
c0014f18:	c3                   	ret    
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]

c0014f1c <setupMultitasking(void (*)())>:
c0014f1c:	56                   	push   esi
c0014f1d:	53                   	push   ebx
c0014f1e:	83 ec 04             	sub    esp,0x4
c0014f21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f25:	eb 11                	jmp    c0014f38 <setupMultitasking(void (*)())+0x1c>
c0014f27:	90                   	nop
c0014f28:	83 ec 0c             	sub    esp,0xc
c0014f2b:	68 84 81 02 c0       	push   0xc0028184
c0014f30:	e8 8f 9c 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f35:	83 c4 10             	add    esp,0x10
c0014f38:	83 ec 0c             	sub    esp,0xc
c0014f3b:	68 84 81 02 c0       	push   0xc0028184
c0014f40:	e8 5b 9c 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f45:	83 c4 10             	add    esp,0x10
c0014f48:	84 c0                	test   al,al
c0014f4a:	74 dc                	je     c0014f28 <setupMultitasking(void (*)())+0xc>
c0014f4c:	83 ec 0c             	sub    esp,0xc
c0014f4f:	68 24 07 00 00       	push   0x724
c0014f54:	e8 33 2b ff ff       	call   c0007a8c <malloc>
c0014f59:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f60:	6a 00                	push   0x0
c0014f62:	68 3d 11 02 c0       	push   0xc002113d
c0014f67:	89 c3                	mov    ebx,eax
c0014f69:	6a 01                	push   0x1
c0014f6b:	50                   	push   eax
c0014f6c:	e8 5f fc ff ff       	call   c0014bd0 <Process::Process(bool, char const*, Process*, char**)>
c0014f71:	83 c4 14             	add    esp,0x14
c0014f74:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f7a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f80:	50                   	push   eax
c0014f81:	e8 b1 37 ff ff       	call   c0008737 <setActiveTerminal(VgaText*)>
c0014f86:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f8d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f97:	83 c8 01             	or     eax,0x1
c0014f9a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014fa1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014fa7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014faa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014fb4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014fba:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014fc0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014fca:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fd4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fde:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fe4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fee:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014ff8:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fff:	e8 88 2a ff ff       	call   c0007a8c <malloc>
c0015004:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001500a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015010:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015016:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001501c:	5a                   	pop    edx
c001501d:	59                   	pop    ecx
c001501e:	68 39 11 02 c0       	push   0xc0021139
c0015023:	50                   	push   eax
c0015024:	e8 07 b6 fe ff       	call   c0000630 <strcpy>
c0015029:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015030:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015034:	83 c4 14             	add    esp,0x14
c0015037:	5b                   	pop    ebx
c0015038:	5e                   	pop    esi
c0015039:	e9 2b b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001503e:	66 90                	xchg   ax,ax

c0015040 <schedule()>:
c0015040:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015046:	85 d2                	test   edx,edx
c0015048:	74 0e                	je     c0015058 <schedule()+0x18>
c001504a:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015054:	c3                   	ret    
c0015055:	8d 76 00             	lea    esi,[esi+0x0]
c0015058:	53                   	push   ebx
c0015059:	83 ec 14             	sub    esp,0x14
c001505c:	68 84 81 02 c0       	push   0xc0028184
c0015061:	e8 3a 9b 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015066:	83 c4 10             	add    esp,0x10
c0015069:	84 c0                	test   al,al
c001506b:	75 3f                	jne    c00150ac <schedule()+0x6c>
c001506d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015072:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015075:	83 fa 01             	cmp    edx,0x1
c0015078:	74 3a                	je     c00150b4 <schedule()+0x74>
c001507a:	66 90                	xchg   ax,ax
c001507c:	83 ec 0c             	sub    esp,0xc
c001507f:	68 84 81 02 c0       	push   0xc0028184
c0015084:	e8 33 9b 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015089:	89 c3                	mov    ebx,eax
c001508b:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015092:	e8 2d 9b 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015097:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001509e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150a1:	e8 06 f8 ff ff       	call   c00148ac <switchToThread(ThreadControlBlock*)>
c00150a6:	83 c4 10             	add    esp,0x10
c00150a9:	8d 76 00             	lea    esi,[esi+0x0]
c00150ac:	83 c4 08             	add    esp,0x8
c00150af:	5b                   	pop    ebx
c00150b0:	c3                   	ret    
c00150b1:	8d 76 00             	lea    esi,[esi+0x0]
c00150b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00150bb:	83 ec 08             	sub    esp,0x8
c00150be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150c3:	50                   	push   eax
c00150c4:	68 84 81 02 c0       	push   0xc0028184
c00150c9:	e8 b2 9b 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150ce:	83 c4 10             	add    esp,0x10
c00150d1:	eb a9                	jmp    c001507c <schedule()+0x3c>
c00150d3:	90                   	nop

c00150d4 <Semaphore::tryAcquire()>:
c00150d4:	53                   	push   ebx
c00150d5:	83 ec 08             	sub    esp,0x8
c00150d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150dc:	fa                   	cli    
c00150dd:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00150e3:	8d 42 01             	lea    eax,[edx+0x1]
c00150e6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150eb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00150f0:	8d 58 01             	lea    ebx,[eax+0x1]
c00150f3:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150f9:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150fc:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150fe:	7c 2c                	jl     c001512c <Semaphore::tryAcquire()+0x58>
c0015100:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015105:	85 c0                	test   eax,eax
c0015107:	75 0b                	jne    c0015114 <Semaphore::tryAcquire()+0x40>
c0015109:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001510e:	85 c0                	test   eax,eax
c0015110:	75 5a                	jne    c001516c <Semaphore::tryAcquire()+0x98>
c0015112:	66 90                	xchg   ax,ax
c0015114:	31 c0                	xor    eax,eax
c0015116:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001511c:	85 d2                	test   edx,edx
c001511e:	75 04                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c0015120:	fb                   	sti    
c0015121:	8d 76 00             	lea    esi,[esi+0x0]
c0015124:	83 c4 08             	add    esp,0x8
c0015127:	5b                   	pop    ebx
c0015128:	c3                   	ret    
c0015129:	8d 76 00             	lea    esi,[esi+0x0]
c001512c:	83 c3 01             	add    ebx,0x1
c001512f:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015134:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015137:	85 c0                	test   eax,eax
c0015139:	75 21                	jne    c001515c <Semaphore::tryAcquire()+0x88>
c001513b:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015141:	85 c9                	test   ecx,ecx
c0015143:	74 17                	je     c001515c <Semaphore::tryAcquire()+0x88>
c0015145:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001514f:	e8 ec fe ff ff       	call   c0015040 <schedule()>
c0015154:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015159:	8d 50 ff             	lea    edx,[eax-0x1]
c001515c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015162:	b0 01                	mov    al,0x1
c0015164:	85 d2                	test   edx,edx
c0015166:	75 bc                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c0015168:	eb b6                	jmp    c0015120 <Semaphore::tryAcquire()+0x4c>
c001516a:	66 90                	xchg   ax,ax
c001516c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015176:	e8 c5 fe ff ff       	call   c0015040 <schedule()>
c001517b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015180:	8d 50 ff             	lea    edx,[eax-0x1]
c0015183:	31 c0                	xor    eax,eax
c0015185:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001518b:	85 d2                	test   edx,edx
c001518d:	75 95                	jne    c0015124 <Semaphore::tryAcquire()+0x50>
c001518f:	eb 8f                	jmp    c0015120 <Semaphore::tryAcquire()+0x4c>
c0015191:	90                   	nop
c0015192:	66 90                	xchg   ax,ax

c0015194 <Semaphore::assertLocked(char const*)>:
c0015194:	83 ec 0c             	sub    esp,0xc
c0015197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001519b:	fa                   	cli    
c001519c:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00151a2:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151a7:	83 c1 01             	add    ecx,0x1
c00151aa:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00151b0:	8d 48 01             	lea    ecx,[eax+0x1]
c00151b3:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00151b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00151bb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151be:	7c 28                	jl     c00151e8 <Semaphore::assertLocked(char const*)+0x54>
c00151c0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151c5:	85 c0                	test   eax,eax
c00151c7:	75 0b                	jne    c00151d4 <Semaphore::assertLocked(char const*)+0x40>
c00151c9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151ce:	85 c0                	test   eax,eax
c00151d0:	75 32                	jne    c0015204 <Semaphore::assertLocked(char const*)+0x70>
c00151d2:	66 90                	xchg   ax,ax
c00151d4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151d9:	83 e8 01             	sub    eax,0x1
c00151dc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151e1:	75 01                	jne    c00151e4 <Semaphore::assertLocked(char const*)+0x50>
c00151e3:	fb                   	sti    
c00151e4:	83 c4 0c             	add    esp,0xc
c00151e7:	c3                   	ret    
c00151e8:	83 ec 0c             	sub    esp,0xc
c00151eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151ef:	52                   	push   edx
c00151f0:	e8 4a b6 ff ff       	call   c001083f <KePanic(char const*)>
c00151f5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151fa:	83 c4 10             	add    esp,0x10
c00151fd:	83 e8 01             	sub    eax,0x1
c0015200:	eb be                	jmp    c00151c0 <Semaphore::assertLocked(char const*)+0x2c>
c0015202:	66 90                	xchg   ax,ax
c0015204:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001520e:	e8 2d fe ff ff       	call   c0015040 <schedule()>
c0015213:	eb bf                	jmp    c00151d4 <Semaphore::assertLocked(char const*)+0x40>
c0015215:	8d 76 00             	lea    esi,[esi+0x0]

c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015218:	83 ec 0c             	sub    esp,0xc
c001521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015224:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015227:	e8 14 fe ff ff       	call   c0015040 <schedule()>
c001522c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015231:	83 e8 01             	sub    eax,0x1
c0015234:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015239:	75 01                	jne    c001523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001523b:	fb                   	sti    
c001523c:	83 c4 0c             	add    esp,0xc
c001523f:	c3                   	ret    

c0015240 <blockTask(TaskState)>:
c0015240:	83 ec 0c             	sub    esp,0xc
c0015243:	fa                   	cli    
c0015244:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015249:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001524d:	83 c0 01             	add    eax,0x1
c0015250:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001525a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001525d:	e8 de fd ff ff       	call   c0015040 <schedule()>
c0015262:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015267:	83 e8 01             	sub    eax,0x1
c001526a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001526f:	75 03                	jne    c0015274 <blockTask(TaskState)+0x34>
c0015271:	fb                   	sti    
c0015272:	66 90                	xchg   ax,ax
c0015274:	83 c4 0c             	add    esp,0xc
c0015277:	c3                   	ret    

c0015278 <waitTask(int, int*, int)>:
c0015278:	83 ec 18             	sub    esp,0x18
c001527b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015280:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015284:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015287:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015293:	6a 07                	push   0x7
c0015295:	e8 a6 ff ff ff       	call   c0015240 <blockTask(TaskState)>
c001529a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001529f:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00152a2:	83 c4 10             	add    esp,0x10
c00152a5:	85 d2                	test   edx,edx
c00152a7:	74 0b                	je     c00152b4 <waitTask(int, int*, int)+0x3c>
c00152a9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00152ac:	89 02                	mov    DWORD PTR [edx],eax
c00152ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b3:	90                   	nop
c00152b4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00152b7:	83 c4 0c             	add    esp,0xc
c00152ba:	c3                   	ret    
c00152bb:	90                   	nop

c00152bc <milliTenthSleepUntil(unsigned int)>:
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152c3:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152c9:	76 05                	jbe    c00152d0 <milliTenthSleepUntil(unsigned int)+0x14>
c00152cb:	90                   	nop
c00152cc:	83 c4 0c             	add    esp,0xc
c00152cf:	c3                   	ret    
c00152d0:	fa                   	cli    
c00152d1:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152d7:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152dd:	83 c1 01             	add    ecx,0x1
c00152e0:	83 c2 01             	add    edx,0x1
c00152e3:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152e9:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152f5:	83 ec 08             	sub    esp,0x8
c00152f8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015300:	50                   	push   eax
c0015301:	68 78 81 02 c0       	push   0xc0028178
c0015306:	e8 75 99 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001530b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015312:	e8 29 ff ff ff       	call   c0015240 <blockTask(TaskState)>
c0015317:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	83 e8 01             	sub    eax,0x1
c0015322:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015327:	85 c0                	test   eax,eax
c0015329:	75 09                	jne    c0015334 <milliTenthSleepUntil(unsigned int)+0x78>
c001532b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015330:	85 c0                	test   eax,eax
c0015332:	75 14                	jne    c0015348 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015334:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015339:	83 e8 01             	sub    eax,0x1
c001533c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015341:	75 89                	jne    c00152cc <milliTenthSleepUntil(unsigned int)+0x10>
c0015343:	fb                   	sti    
c0015344:	83 c4 0c             	add    esp,0xc
c0015347:	c3                   	ret    
c0015348:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015352:	e8 e9 fc ff ff       	call   c0015040 <schedule()>
c0015357:	eb db                	jmp    c0015334 <milliTenthSleepUntil(unsigned int)+0x78>
c0015359:	8d 76 00             	lea    esi,[esi+0x0]

c001535c <milliTenthSleep(unsigned int)>:
c001535c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015360:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015365:	01 c2                	add    edx,eax
c0015367:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001536b:	e9 4c ff ff ff       	jmp    c00152bc <milliTenthSleepUntil(unsigned int)>

c0015370 <sleep(unsigned int)>:
c0015370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015374:	8d 04 80             	lea    eax,[eax+eax*4]
c0015377:	8d 04 80             	lea    eax,[eax+eax*4]
c001537a:	8d 04 80             	lea    eax,[eax+eax*4]
c001537d:	8d 04 80             	lea    eax,[eax+eax*4]
c0015380:	c1 e0 04             	shl    eax,0x4
c0015383:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015387:	eb d3                	jmp    c001535c <milliTenthSleep(unsigned int)>
c0015389:	90                   	nop
c001538a:	66 90                	xchg   ax,ax

c001538c <Semaphore::acquire()>:
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015393:	fa                   	cli    
c0015394:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015399:	83 c0 01             	add    eax,0x1
c001539c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153a1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153a6:	8d 48 01             	lea    ecx,[eax+0x1]
c00153a9:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00153af:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00153b2:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00153b4:	7d 2e                	jge    c00153e4 <Semaphore::acquire()+0x58>
c00153b6:	83 c1 01             	add    ecx,0x1
c00153b9:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153bc:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153c1:	85 c0                	test   eax,eax
c00153c3:	75 0b                	jne    c00153d0 <Semaphore::acquire()+0x44>
c00153c5:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153ca:	85 c0                	test   eax,eax
c00153cc:	75 66                	jne    c0015434 <Semaphore::acquire()+0xa8>
c00153ce:	66 90                	xchg   ax,ax
c00153d0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153d5:	83 e8 01             	sub    eax,0x1
c00153d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153dd:	75 01                	jne    c00153e0 <Semaphore::acquire()+0x54>
c00153df:	fb                   	sti    
c00153e0:	83 c4 0c             	add    esp,0xc
c00153e3:	c3                   	ret    
c00153e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153f0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153f3:	85 c9                	test   ecx,ecx
c00153f5:	74 51                	je     c0015448 <Semaphore::acquire()+0xbc>
c00153f7:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015400:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015403:	90                   	nop
c0015404:	83 ec 0c             	sub    esp,0xc
c0015407:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001540f:	68 b8 11 02 c0       	push   0xc00211b8
c0015414:	e8 3a 55 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0015419:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015420:	e8 1b fe ff ff       	call   c0015240 <blockTask(TaskState)>
c0015425:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001542a:	83 c4 10             	add    esp,0x10
c001542d:	83 e8 01             	sub    eax,0x1
c0015430:	eb 8a                	jmp    c00153bc <Semaphore::acquire()+0x30>
c0015432:	66 90                	xchg   ax,ax
c0015434:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001543e:	e8 fd fb ff ff       	call   c0015040 <schedule()>
c0015443:	eb 8b                	jmp    c00153d0 <Semaphore::acquire()+0x44>
c0015445:	8d 76 00             	lea    esi,[esi+0x0]
c0015448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015450:	eb b2                	jmp    c0015404 <Semaphore::acquire()+0x78>
c0015452:	66 90                	xchg   ax,ax

c0015454 <taskReturned>:
c0015454:	83 ec 18             	sub    esp,0x18
c0015457:	68 d8 11 02 c0       	push   0xc00211d8
c001545c:	e8 de b3 ff ff       	call   c001083f <KePanic(char const*)>
c0015461:	83 c4 10             	add    esp,0x10
c0015464:	83 ec 0c             	sub    esp,0xc
c0015467:	6a 02                	push   0x2
c0015469:	e8 d2 fd ff ff       	call   c0015240 <blockTask(TaskState)>
c001546e:	fa                   	cli    
c001546f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015474:	83 c0 01             	add    eax,0x1
c0015477:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001547c:	e8 bf fb ff ff       	call   c0015040 <schedule()>
c0015481:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015486:	83 c4 10             	add    esp,0x10
c0015489:	83 e8 01             	sub    eax,0x1
c001548c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015491:	85 c0                	test   eax,eax
c0015493:	75 cf                	jne    c0015464 <taskReturned+0x10>
c0015495:	fb                   	sti    
c0015496:	eb cc                	jmp    c0015464 <taskReturned+0x10>

c0015498 <Thr::processFromPID(int)>:
c0015498:	57                   	push   edi
c0015499:	56                   	push   esi
c001549a:	53                   	push   ebx
c001549b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001549f:	fa                   	cli    
c00154a0:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	83 c1 01             	add    ecx,0x1
c00154ac:	68 84 81 02 c0       	push   0xc0028184
c00154b1:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c00154b7:	e8 00 97 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	89 c7                	mov    edi,eax
c00154c1:	eb 15                	jmp    c00154d8 <Thr::processFromPID(int)+0x40>
c00154c3:	90                   	nop
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 84 81 02 c0       	push   0xc0028184
c00154cc:	e8 eb 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	39 f8                	cmp    eax,edi
c00154d6:	74 50                	je     c0015528 <Thr::processFromPID(int)+0x90>
c00154d8:	83 ec 0c             	sub    esp,0xc
c00154db:	68 84 81 02 c0       	push   0xc0028184
c00154e0:	e8 d7 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154e5:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154ec:	89 c3                	mov    ebx,eax
c00154ee:	e8 d1 96 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154f3:	58                   	pop    eax
c00154f4:	5a                   	pop    edx
c00154f5:	53                   	push   ebx
c00154f6:	68 84 81 02 c0       	push   0xc0028184
c00154fb:	e8 80 97 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015500:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	39 30                	cmp    DWORD PTR [eax],esi
c0015508:	75 ba                	jne    c00154c4 <Thr::processFromPID(int)+0x2c>
c001550a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001550f:	83 e8 01             	sub    eax,0x1
c0015512:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015517:	74 0b                	je     c0015524 <Thr::processFromPID(int)+0x8c>
c0015519:	8d 76 00             	lea    esi,[esi+0x0]
c001551c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001551f:	90                   	nop
c0015520:	5b                   	pop    ebx
c0015521:	5e                   	pop    esi
c0015522:	5f                   	pop    edi
c0015523:	c3                   	ret    
c0015524:	fb                   	sti    
c0015525:	eb f5                	jmp    c001551c <Thr::processFromPID(int)+0x84>
c0015527:	90                   	nop
c0015528:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001552d:	8d 50 ff             	lea    edx,[eax-0x1]
c0015530:	31 c0                	xor    eax,eax
c0015532:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015538:	85 d2                	test   edx,edx
c001553a:	75 e4                	jne    c0015520 <Thr::processFromPID(int)+0x88>
c001553c:	fb                   	sti    
c001553d:	5b                   	pop    ebx
c001553e:	5e                   	pop    esi
c001553f:	5f                   	pop    edi
c0015540:	c3                   	ret    
c0015541:	8d 76 00             	lea    esi,[esi+0x0]

c0015544 <unblockTask(ThreadControlBlock*)>:
c0015544:	53                   	push   ebx
c0015545:	83 ec 08             	sub    esp,0x8
c0015548:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001554c:	fa                   	cli    
c001554d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015552:	83 c0 01             	add    eax,0x1
c0015555:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001555a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001555d:	85 c0                	test   eax,eax
c001555f:	74 67                	je     c00155c8 <unblockTask(ThreadControlBlock*)+0x84>
c0015561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015564:	83 f8 01             	cmp    eax,0x1
c0015567:	74 37                	je     c00155a0 <unblockTask(ThreadControlBlock*)+0x5c>
c0015569:	83 ec 0c             	sub    esp,0xc
c001556c:	68 84 81 02 c0       	push   0xc0028184
c0015571:	e8 46 96 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015576:	83 c4 10             	add    esp,0x10
c0015579:	85 c0                	test   eax,eax
c001557b:	75 1b                	jne    c0015598 <unblockTask(ThreadControlBlock*)+0x54>
c001557d:	eb 5d                	jmp    c00155dc <unblockTask(ThreadControlBlock*)+0x98>
c001557f:	90                   	nop
c0015580:	83 ec 08             	sub    esp,0x8
c0015583:	50                   	push   eax
c0015584:	68 84 81 02 c0       	push   0xc0028184
c0015589:	e8 4e 99 00 00       	call   c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	85 c0                	test   eax,eax
c0015593:	74 47                	je     c00155dc <unblockTask(ThreadControlBlock*)+0x98>
c0015595:	8d 76 00             	lea    esi,[esi+0x0]
c0015598:	39 c3                	cmp    ebx,eax
c001559a:	75 e4                	jne    c0015580 <unblockTask(ThreadControlBlock*)+0x3c>
c001559c:	eb 12                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c001559e:	66 90                	xchg   ax,ax
c00155a0:	83 ec 0c             	sub    esp,0xc
c00155a3:	68 5b 11 02 c0       	push   0xc002115b
c00155a8:	e8 a6 53 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00155ad:	83 c4 10             	add    esp,0x10
c00155b0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155b5:	83 e8 01             	sub    eax,0x1
c00155b8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155bd:	75 01                	jne    c00155c0 <unblockTask(ThreadControlBlock*)+0x7c>
c00155bf:	fb                   	sti    
c00155c0:	83 c4 08             	add    esp,0x8
c00155c3:	5b                   	pop    ebx
c00155c4:	c3                   	ret    
c00155c5:	8d 76 00             	lea    esi,[esi+0x0]
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	68 44 11 02 c0       	push   0xc0021144
c00155d0:	e8 7e 53 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	eb d6                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00155da:	66 90                	xchg   ax,ax
c00155dc:	83 ec 08             	sub    esp,0x8
c00155df:	53                   	push   ebx
c00155e0:	68 84 81 02 c0       	push   0xc0028184
c00155e5:	e8 96 96 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155ea:	83 c4 10             	add    esp,0x10
c00155ed:	eb c1                	jmp    c00155b0 <unblockTask(ThreadControlBlock*)+0x6c>
c00155ef:	90                   	nop

c00155f0 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155f0:	55                   	push   ebp
c00155f1:	57                   	push   edi
c00155f2:	56                   	push   esi
c00155f3:	53                   	push   ebx
c00155f4:	83 ec 1c             	sub    esp,0x1c
c00155f7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155fb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155fe:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015604:	85 ed                	test   ebp,ebp
c0015606:	7e 28                	jle    c0015630 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015608:	31 f6                	xor    esi,esi
c001560a:	66 90                	xchg   ax,ax
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015616:	83 c6 01             	add    esi,0x1
c0015619:	57                   	push   edi
c001561a:	e8 7d 24 ff ff       	call   c0007a9c <free>
c001561f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001562b:	7f df                	jg     c001560c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001562d:	8d 76 00             	lea    esi,[esi+0x0]
c0015630:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001563a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001563f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015642:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015645:	d3 c0                	rol    eax,cl
c0015647:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001564e:	21 c8                	and    eax,ecx
c0015650:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015657:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001565a:	89 f7                	mov    edi,esi
c001565c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015664:	0f 85 72 01 00 00    	jne    c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001566a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015670:	85 ed                	test   ebp,ebp
c0015672:	74 1c                	je     c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015674:	83 ec 0c             	sub    esp,0xc
c0015677:	55                   	push   ebp
c0015678:	e8 d3 ae ff ff       	call   c0010550 <EnvVarContainer::~EnvVarContainer()>
c001567d:	59                   	pop    ecx
c001567e:	5e                   	pop    esi
c001567f:	6a 0c                	push   0xc
c0015681:	55                   	push   ebp
c0015682:	e8 d0 51 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c0015687:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001568a:	83 c4 10             	add    esp,0x10
c001568d:	89 f7                	mov    edi,esi
c001568f:	90                   	nop
c0015690:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015696:	85 c0                	test   eax,eax
c0015698:	0f 84 b2 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001569e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00156a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00156a5:	31 c9                	xor    ecx,ecx
c00156a7:	eb 17                	jmp    c00156c0 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00156a9:	8d 76 00             	lea    esi,[esi+0x0]
c00156ac:	83 c1 01             	add    ecx,0x1
c00156af:	83 f9 10             	cmp    ecx,0x10
c00156b2:	0f 84 98 00 00 00    	je     c0015750 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00156b8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156be:	66 90                	xchg   ax,ax
c00156c0:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156c7:	d3 fa                	sar    edx,cl
c00156c9:	80 e2 01             	and    dl,0x1
c00156cc:	74 de                	je     c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ce:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00156d1:	c1 e2 05             	shl    edx,0x5
c00156d4:	29 ca                	sub    edx,ecx
c00156d6:	01 d0                	add    eax,edx
c00156d8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156de:	83 fd 07             	cmp    ebp,0x7
c00156e1:	75 c9                	jne    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156e3:	05 40 02 00 00       	add    eax,0x240
c00156e8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156eb:	83 fd ff             	cmp    ebp,0xffffffff
c00156ee:	0f 8c f0 00 00 00    	jl     c00157e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156f4:	0f 84 ae 01 00 00    	je     c00158a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156fa:	85 ed                	test   ebp,ebp
c00156fc:	0f 84 92 01 00 00    	je     c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015702:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015704:	75 a6                	jne    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015706:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015710:	01 d0                	add    eax,edx
c0015712:	66 90                	xchg   ax,ax
c0015714:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015721:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015724:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015731:	50                   	push   eax
c0015732:	e8 0d fe ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015737:	83 c4 10             	add    esp,0x10
c001573a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001573e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015741:	83 c1 01             	add    ecx,0x1
c0015744:	89 f7                	mov    edi,esi
c0015746:	83 f9 10             	cmp    ecx,0x10
c0015749:	0f 85 69 ff ff ff    	jne    c00156b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001574f:	90                   	nop
c0015750:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015756:	85 c0                	test   eax,eax
c0015758:	74 62                	je     c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001575a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015760:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015766:	74 54                	je     c00157bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015768:	83 ec 0c             	sub    esp,0xc
c001576b:	68 84 81 02 c0       	push   0xc0028184
c0015770:	e8 47 94 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015775:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001577c:	89 c7                	mov    edi,eax
c001577e:	e8 1d 94 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015783:	83 c4 10             	add    esp,0x10
c0015786:	84 c0                	test   al,al
c0015788:	0f 84 ce 00 00 00    	je     c001585c <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001578e:	66 90                	xchg   ax,ax
c0015790:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015793:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015799:	85 d2                	test   edx,edx
c001579b:	74 0f                	je     c00157ac <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001579d:	83 ec 0c             	sub    esp,0xc
c00157a0:	8b 02                	mov    eax,DWORD PTR [edx]
c00157a2:	52                   	push   edx
c00157a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157a9:	83 c4 10             	add    esp,0x10
c00157ac:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00157b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00157b9:	8d 76 00             	lea    esi,[esi+0x0]
c00157bc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157c2:	85 db                	test   ebx,ebx
c00157c4:	74 16                	je     c00157dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157c6:	83 ec 0c             	sub    esp,0xc
c00157c9:	53                   	push   ebx
c00157ca:	e8 9d 43 ff ff       	call   c0009b6c <VAS::~VAS()>
c00157cf:	58                   	pop    eax
c00157d0:	5a                   	pop    edx
c00157d1:	6a 14                	push   0x14
c00157d3:	53                   	push   ebx
c00157d4:	e8 7e 50 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	83 c4 1c             	add    esp,0x1c
c00157df:	5b                   	pop    ebx
c00157e0:	5e                   	pop    esi
c00157e1:	5f                   	pop    edi
c00157e2:	5d                   	pop    ebp
c00157e3:	c3                   	ret    
c00157e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157e8:	83 ec 0c             	sub    esp,0xc
c00157eb:	68 0c 12 02 c0       	push   0xc002120c
c00157f0:	e8 4a b0 ff ff       	call   c001083f <KePanic(char const*)>
c00157f5:	83 c4 10             	add    esp,0x10
c00157f8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157ff:	89 f7                	mov    edi,esi
c0015801:	e9 a6 fe ff ff       	jmp    c00156ac <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015806:	66 90                	xchg   ax,ax
c0015808:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001580e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015814:	75 1e                	jne    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015816:	83 ec 0c             	sub    esp,0xc
c0015819:	68 74 12 02 c0       	push   0xc0021274
c001581e:	e8 30 51 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0015823:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001582a:	e8 11 fa ff ff       	call   c0015240 <blockTask(TaskState)>
c001582f:	83 c4 10             	add    esp,0x10
c0015832:	66 90                	xchg   ax,ax
c0015834:	83 ec 08             	sub    esp,0x8
c0015837:	56                   	push   esi
c0015838:	68 84 81 02 c0       	push   0xc0028184
c001583d:	e8 3e 94 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015842:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015849:	e8 6e 93 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584e:	83 c4 10             	add    esp,0x10
c0015851:	39 f8                	cmp    eax,edi
c0015853:	0f 84 37 ff ff ff    	je     c0015790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015859:	8d 76 00             	lea    esi,[esi+0x0]
c001585c:	83 ec 0c             	sub    esp,0xc
c001585f:	68 84 81 02 c0       	push   0xc0028184
c0015864:	e8 53 93 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015869:	89 c6                	mov    esi,eax
c001586b:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015872:	e8 4d 93 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015877:	83 c4 10             	add    esp,0x10
c001587a:	39 f3                	cmp    ebx,esi
c001587c:	74 b6                	je     c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001587e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015881:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015884:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001588a:	75 a8                	jne    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001588c:	e9 77 ff ff ff       	jmp    c0015808 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015891:	8d 76 00             	lea    esi,[esi+0x0]
c0015894:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	68 40 12 02 c0       	push   0xc0021240
c00158a0:	e9 4b ff ff ff       	jmp    c00157f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158a5:	8d 76 00             	lea    esi,[esi+0x0]
c00158a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00158aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00158ae:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00158b1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158b4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00158ba:	01 d7                	add    edi,edx
c00158bc:	89 f8                	mov    eax,edi
c00158be:	e9 51 fe ff ff       	jmp    c0015714 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158c3:	90                   	nop

c00158c4 <cleanerTaskFunction(void*)>:
c00158c4:	53                   	push   ebx
c00158c5:	83 ec 08             	sub    esp,0x8
c00158c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158cd:	83 e8 01             	sub    eax,0x1
c00158d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158d5:	75 01                	jne    c00158d8 <cleanerTaskFunction(void*)+0x14>
c00158d7:	fb                   	sti    
c00158d8:	fa                   	cli    
c00158d9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158de:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158e5:	8d 50 01             	lea    edx,[eax+0x1]
c00158e8:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158ee:	0f 84 c4 00 00 00    	je     c00159b8 <cleanerTaskFunction(void*)+0xf4>
c00158f4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158f9:	85 c0                	test   eax,eax
c00158fb:	75 03                	jne    c0015900 <cleanerTaskFunction(void*)+0x3c>
c00158fd:	fb                   	sti    
c00158fe:	66 90                	xchg   ax,ax
c0015900:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c0015907:	fa                   	cli    
c0015908:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c001590e:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c0015914:	83 c2 01             	add    edx,0x1
c0015917:	83 c1 01             	add    ecx,0x1
c001591a:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015920:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015926:	fa                   	cli    
c0015927:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c001592d:	83 c3 01             	add    ebx,0x1
c0015930:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c0015936:	eb 28                	jmp    c0015960 <cleanerTaskFunction(void*)+0x9c>
c0015938:	83 ec 0c             	sub    esp,0xc
c001593b:	68 6c 81 02 c0       	push   0xc002816c
c0015940:	e8 77 92 00 00       	call   c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015945:	89 c3                	mov    ebx,eax
c0015947:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c001594e:	e8 71 92 00 00       	call   c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015956:	e8 95 fc ff ff       	call   c00155f0 <cleanupTerminatedTask(ThreadControlBlock*)>
c001595b:	83 c4 10             	add    esp,0x10
c001595e:	66 90                	xchg   ax,ax
c0015960:	83 ec 0c             	sub    esp,0xc
c0015963:	68 6c 81 02 c0       	push   0xc002816c
c0015968:	e8 33 92 00 00       	call   c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001596d:	83 c4 10             	add    esp,0x10
c0015970:	84 c0                	test   al,al
c0015972:	74 c4                	je     c0015938 <cleanerTaskFunction(void*)+0x74>
c0015974:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015979:	83 e8 01             	sub    eax,0x1
c001597c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015981:	75 01                	jne    c0015984 <cleanerTaskFunction(void*)+0xc0>
c0015983:	fb                   	sti    
c0015984:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015989:	83 e8 01             	sub    eax,0x1
c001598c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015991:	0f 85 31 ff ff ff    	jne    c00158c8 <cleanerTaskFunction(void*)+0x4>
c0015997:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c001599c:	85 c0                	test   eax,eax
c001599e:	0f 84 24 ff ff ff    	je     c00158c8 <cleanerTaskFunction(void*)+0x4>
c00159a4:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00159ae:	e8 8d f6 ff ff       	call   c0015040 <schedule()>
c00159b3:	e9 10 ff ff ff       	jmp    c00158c8 <cleanerTaskFunction(void*)+0x4>
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	6a 02                	push   0x2
c00159bd:	e8 56 f8 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	e9 36 ff ff ff       	jmp    c0015900 <cleanerTaskFunction(void*)+0x3c>
c00159ca:	66 90                	xchg   ax,ax

c00159cc <terminateTask(int)>:
c00159cc:	83 ec 14             	sub    esp,0x14
c00159cf:	fa                   	cli    
c00159d0:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159d6:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159dc:	83 c2 01             	add    edx,0x1
c00159df:	83 c1 01             	add    ecx,0x1
c00159e2:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159e8:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159ee:	fa                   	cli    
c00159ef:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159f8:	83 c0 01             	add    eax,0x1
c00159fb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a05:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a10:	50                   	push   eax
c0015a11:	68 6c 81 02 c0       	push   0xc002816c
c0015a16:	e8 65 92 00 00       	call   c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a20:	83 c4 10             	add    esp,0x10
c0015a23:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a2a:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a2f:	85 c0                	test   eax,eax
c0015a31:	74 65                	je     c0015a98 <terminateTask(int)+0xcc>
c0015a33:	83 ec 0c             	sub    esp,0xc
c0015a36:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a3d:	50                   	push   eax
c0015a3e:	e8 01 fb ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	66 90                	xchg   ax,ax
c0015a48:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a4d:	83 e8 01             	sub    eax,0x1
c0015a50:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a55:	75 01                	jne    c0015a58 <terminateTask(int)+0x8c>
c0015a57:	fb                   	sti    
c0015a58:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a5d:	83 e8 01             	sub    eax,0x1
c0015a60:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a65:	75 09                	jne    c0015a70 <terminateTask(int)+0xa4>
c0015a67:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a6e:	75 3c                	jne    c0015aac <terminateTask(int)+0xe0>
c0015a70:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a75:	83 e8 01             	sub    eax,0x1
c0015a78:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a7d:	75 01                	jne    c0015a80 <terminateTask(int)+0xb4>
c0015a7f:	fb                   	sti    
c0015a80:	fa                   	cli    
c0015a81:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a86:	83 c0 01             	add    eax,0x1
c0015a89:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a8e:	66 90                	xchg   ax,ax
c0015a90:	e8 ab f5 ff ff       	call   c0015040 <schedule()>
c0015a95:	eb d9                	jmp    c0015a70 <terminateTask(int)+0xa4>
c0015a97:	90                   	nop
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 72 11 02 c0       	push   0xc0021172
c0015aa0:	e8 ae 4e ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	eb 9e                	jmp    c0015a48 <terminateTask(int)+0x7c>
c0015aaa:	66 90                	xchg   ax,ax
c0015aac:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015ab6:	eb d8                	jmp    c0015a90 <terminateTask(int)+0xc4>

c0015ab8 <Thr::terminateFromIRQ(int)>:
c0015ab8:	83 ec 18             	sub    esp,0x18
c0015abb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015abf:	50                   	push   eax
c0015ac0:	e8 07 ff ff ff       	call   c00159cc <terminateTask(int)>
c0015ac5:	90                   	nop
c0015ac6:	66 90                	xchg   ax,ax

c0015ac8 <Semaphore::release()>:
c0015ac8:	83 ec 0c             	sub    esp,0xc
c0015acb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015acf:	fa                   	cli    
c0015ad0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ad5:	83 c0 01             	add    eax,0x1
c0015ad8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015add:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ae2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ae5:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015aeb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015aee:	85 c9                	test   ecx,ecx
c0015af0:	74 42                	je     c0015b34 <Semaphore::release()+0x6c>
c0015af2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015af5:	83 ec 0c             	sub    esp,0xc
c0015af8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015afb:	51                   	push   ecx
c0015afc:	e8 43 fa ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015b01:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b06:	83 c4 10             	add    esp,0x10
c0015b09:	83 e8 01             	sub    eax,0x1
c0015b0c:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b11:	85 c0                	test   eax,eax
c0015b13:	75 0b                	jne    c0015b20 <Semaphore::release()+0x58>
c0015b15:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015b1a:	85 c0                	test   eax,eax
c0015b1c:	75 22                	jne    c0015b40 <Semaphore::release()+0x78>
c0015b1e:	66 90                	xchg   ax,ax
c0015b20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b25:	83 e8 01             	sub    eax,0x1
c0015b28:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b2d:	75 01                	jne    c0015b30 <Semaphore::release()+0x68>
c0015b2f:	fb                   	sti    
c0015b30:	83 c4 0c             	add    esp,0xc
c0015b33:	c3                   	ret    
c0015b34:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b37:	83 e9 01             	sub    ecx,0x1
c0015b3a:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b3d:	eb cd                	jmp    c0015b0c <Semaphore::release()+0x44>
c0015b3f:	90                   	nop
c0015b40:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b4a:	e8 f1 f4 ff ff       	call   c0015040 <schedule()>
c0015b4f:	eb cf                	jmp    c0015b20 <Semaphore::release()+0x58>
c0015b51:	8d 76 00             	lea    esi,[esi+0x0]

c0015b54 <__static_initialization_and_destruction_0(int, int)>:
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b5c:	0f 85 8e 00 00 00    	jne    c0015bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b6a:	0f 85 80 00 00 00    	jne    c0015bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	68 84 81 02 c0       	push   0xc0028184
c0015b78:	e8 b7 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	83 ec 04             	sub    esp,0x4
c0015b83:	68 08 1e 02 c0       	push   0xc0021e08
c0015b88:	68 84 81 02 c0       	push   0xc0028184
c0015b8d:	68 e4 ee 01 c0       	push   0xc001eee4
c0015b92:	e8 70 4c ff ff       	call   c000a807 <__cxa_atexit>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	83 ec 0c             	sub    esp,0xc
c0015b9d:	68 78 81 02 c0       	push   0xc0028178
c0015ba2:	e8 8d 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	83 ec 04             	sub    esp,0x4
c0015bad:	68 08 1e 02 c0       	push   0xc0021e08
c0015bb2:	68 78 81 02 c0       	push   0xc0028178
c0015bb7:	68 e4 ee 01 c0       	push   0xc001eee4
c0015bbc:	e8 46 4c ff ff       	call   c000a807 <__cxa_atexit>
c0015bc1:	83 c4 10             	add    esp,0x10
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	68 6c 81 02 c0       	push   0xc002816c
c0015bcc:	e8 63 93 00 00       	call   c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	83 ec 04             	sub    esp,0x4
c0015bd7:	68 08 1e 02 c0       	push   0xc0021e08
c0015bdc:	68 6c 81 02 c0       	push   0xc002816c
c0015be1:	68 e4 ee 01 c0       	push   0xc001eee4
c0015be6:	e8 1c 4c ff ff       	call   c000a807 <__cxa_atexit>
c0015beb:	83 c4 10             	add    esp,0x10
c0015bee:	66 90                	xchg   ax,ax
c0015bf0:	90                   	nop
c0015bf1:	83 c4 0c             	add    esp,0xc
c0015bf4:	c3                   	ret    
c0015bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0015bf8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bf8:	83 ec 0c             	sub    esp,0xc
c0015bfb:	83 ec 08             	sub    esp,0x8
c0015bfe:	68 ff ff 00 00       	push   0xffff
c0015c03:	6a 01                	push   0x1
c0015c05:	e8 4a ff ff ff       	call   c0015b54 <__static_initialization_and_destruction_0(int, int)>
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	83 c4 0c             	add    esp,0xc
c0015c10:	c3                   	ret    

c0015c11 <Vm::inbv(unsigned short)>:
c0015c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c15:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c1a:	75 06                	jne    c0015c22 <Vm::inbv(unsigned short)+0x11>
c0015c1c:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c21:	c3                   	ret    
c0015c22:	ec                   	in     al,dx
c0015c23:	c3                   	ret    

c0015c24 <Vm::outbv(unsigned short, unsigned char)>:
c0015c24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c2c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c31:	75 25                	jne    c0015c58 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c33:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c39:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c3c:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c42:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c48:	83 fa 20             	cmp    edx,0x20
c0015c4b:	75 0c                	jne    c0015c59 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c4d:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c57:	c3                   	ret    
c0015c58:	ee                   	out    dx,al
c0015c59:	c3                   	ret    

c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c64:	c1 e0 04             	shl    eax,0x4
c0015c67:	01 d0                	add    eax,edx
c0015c69:	c3                   	ret    

c0015c6a <Vm::getSegment(unsigned int)>:
c0015c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c6e:	c1 e8 10             	shr    eax,0x10
c0015c71:	c3                   	ret    

c0015c72 <Vm::getOffset(unsigned int)>:
c0015c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c76:	c3                   	ret    

c0015c77 <Vm::mainloop2()>:
c0015c77:	83 ec 18             	sub    esp,0x18
c0015c7a:	fa                   	cli    
c0015c7b:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c81:	6a 02                	push   0x2
c0015c83:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c8a:	e8 89 f5 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c94:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c98:	52                   	push   edx
c0015c99:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c9d:	52                   	push   edx
c0015c9e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015ca2:	52                   	push   edx
c0015ca3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ca7:	50                   	push   eax
c0015ca8:	e8 62 a5 fe ff       	call   c000020f <goToVM86>
c0015cad:	83 c4 2c             	add    esp,0x2c
c0015cb0:	c3                   	ret    

c0015cb1 <Vm::mainVm8086Loop(void*)>:
c0015cb1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb6:	48                   	dec    eax
c0015cb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cbc:	75 01                	jne    c0015cbf <Vm::mainVm8086Loop(void*)+0xe>
c0015cbe:	fb                   	sti    
c0015cbf:	eb b6                	jmp    c0015c77 <Vm::mainloop2()>

c0015cc1 <Vm::mainloop3(unsigned long)>:
c0015cc1:	83 ec 18             	sub    esp,0x18
c0015cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc8:	fa                   	cli    
c0015cc9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccf:	6a 02                	push   0x2
c0015cd1:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cd8:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cdd:	e8 36 f5 ff ff       	call   c0015218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015ce2:	83 c4 1c             	add    esp,0x1c
c0015ce5:	eb 90                	jmp    c0015c77 <Vm::mainloop2()>

c0015ce7 <Vm::initialise8086()>:
c0015ce7:	83 ec 0c             	sub    esp,0xc
c0015cea:	68 80 00 00 00       	push   0x80
c0015cef:	6a 00                	push   0x0
c0015cf1:	68 b1 5c 01 c0       	push   0xc0015cb1
c0015cf6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cfc:	e8 f3 f0 ff ff       	call   c0014df4 <Process::createThread(void (*)(void*), void*, int)>
c0015d01:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d08:	68 00 01 00 00       	push   0x100
c0015d0d:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d12:	6a 00                	push   0x0
c0015d14:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d19:	6a 00                	push   0x0
c0015d1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d21:	e8 c8 42 ff ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d26:	83 c4 2c             	add    esp,0x2c
c0015d29:	c3                   	ret    

c0015d2a <Vm::finish8086()>:
c0015d2a:	53                   	push   ebx
c0015d2b:	83 ec 08             	sub    esp,0x8
c0015d2e:	fa                   	cli    
c0015d2f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d35:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d3c:	75 15                	jne    c0015d53 <Vm::finish8086()+0x29>
c0015d3e:	e8 fd f2 ff ff       	call   c0015040 <schedule()>
c0015d43:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d48:	48                   	dec    eax
c0015d49:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d4e:	75 de                	jne    c0015d2e <Vm::finish8086()+0x4>
c0015d50:	fb                   	sti    
c0015d51:	eb db                	jmp    c0015d2e <Vm::finish8086()+0x4>
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d5c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d62:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d69:	e8 d6 f7 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015d6e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d73:	83 c4 10             	add    esp,0x10
c0015d76:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d79:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d7f:	85 d2                	test   edx,edx
c0015d81:	75 01                	jne    c0015d84 <Vm::finish8086()+0x5a>
c0015d83:	fb                   	sti    
c0015d84:	83 c4 08             	add    esp,0x8
c0015d87:	89 d8                	mov    eax,ebx
c0015d89:	5b                   	pop    ebx
c0015d8a:	c3                   	ret    

c0015d8b <Vm::getOutput8086(unsigned char*)>:
c0015d8b:	57                   	push   edi
c0015d8c:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d92:	56                   	push   esi
c0015d93:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d9e:	5e                   	pop    esi
c0015d9f:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015da4:	5f                   	pop    edi
c0015da5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015daf:	c3                   	ret    

c0015db0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015db0:	55                   	push   ebp
c0015db1:	57                   	push   edi
c0015db2:	56                   	push   esi
c0015db3:	53                   	push   ebx
c0015db4:	83 ec 0c             	sub    esp,0xc
c0015db7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015dbb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015dbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015dc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015dc7:	fa                   	cli    
c0015dc8:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dce:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dd5:	75 15                	jne    c0015dec <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dd7:	e8 64 f2 ff ff       	call   c0015040 <schedule()>
c0015ddc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015de1:	48                   	dec    eax
c0015de2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015de7:	75 de                	jne    c0015dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015de9:	fb                   	sti    
c0015dea:	eb db                	jmp    c0015dc7 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dec:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015df1:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015dfb:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dff:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e03:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e07:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e0b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e0f:	50                   	push   eax
c0015e10:	6a 20                	push   0x20
c0015e12:	6a 00                	push   0x0
c0015e14:	68 e0 81 02 c0       	push   0xc00281e0
c0015e19:	e8 c2 a6 fe ff       	call   c00004e0 <memset>
c0015e1e:	5a                   	pop    edx
c0015e1f:	59                   	pop    ecx
c0015e20:	0f b7 ff             	movzx  edi,di
c0015e23:	57                   	push   edi
c0015e24:	0f b7 f6             	movzx  esi,si
c0015e27:	56                   	push   esi
c0015e28:	e8 2d fe ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0015e2d:	83 c4 10             	add    esp,0x10
c0015e30:	89 c7                	mov    edi,eax
c0015e32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e36:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e3c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e41:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e48:	48                   	dec    eax
c0015e49:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e4e:	75 01                	jne    c0015e51 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e50:	fb                   	sti    
c0015e51:	83 ec 0c             	sub    esp,0xc
c0015e54:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e5a:	e8 e5 f6 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015e5f:	83 c4 1c             	add    esp,0x1c
c0015e62:	5b                   	pop    ebx
c0015e63:	b0 01                	mov    al,0x1
c0015e65:	5e                   	pop    esi
c0015e66:	5f                   	pop    edi
c0015e67:	5d                   	pop    ebp
c0015e68:	c3                   	ret    

c0015e69 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e69:	55                   	push   ebp
c0015e6a:	57                   	push   edi
c0015e6b:	56                   	push   esi
c0015e6c:	53                   	push   ebx
c0015e6d:	83 ec 2c             	sub    esp,0x2c
c0015e70:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015e74:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015e78:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e7c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015e80:	fa                   	cli    
c0015e81:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015e88:	89 f0                	mov    eax,esi
c0015e8a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e90:	84 c0                	test   al,al
c0015e92:	75 1d                	jne    c0015eb1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015e94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e98:	e8 a3 f1 ff ff       	call   c0015040 <schedule()>
c0015e9d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ea2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ea6:	48                   	dec    eax
c0015ea7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015eac:	75 d2                	jne    c0015e80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eae:	fb                   	sti    
c0015eaf:	eb cf                	jmp    c0015e80 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015eb1:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015eb6:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ec0:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ec4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015ec8:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015ecc:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015ed0:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ed4:	50                   	push   eax
c0015ed5:	6a 20                	push   0x20
c0015ed7:	6a 00                	push   0x0
c0015ed9:	68 e0 81 02 c0       	push   0xc00281e0
c0015ede:	e8 fd a5 fe ff       	call   c00004e0 <memset>
c0015ee3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015eea:	e8 9d 1b ff ff       	call   c0007a8c <malloc>
c0015eef:	83 c4 0c             	add    esp,0xc
c0015ef2:	89 c3                	mov    ebx,eax
c0015ef4:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015efa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015efe:	50                   	push   eax
c0015eff:	e8 d2 4f ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	85 db                	test   ebx,ebx
c0015f09:	75 0a                	jne    c0015f15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015f0b:	83 ec 0c             	sub    esp,0xc
c0015f0e:	68 9c 12 02 c0       	push   0xc002129c
c0015f13:	eb 2b                	jmp    c0015f40 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015f15:	50                   	push   eax
c0015f16:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f1a:	50                   	push   eax
c0015f1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f1f:	50                   	push   eax
c0015f20:	53                   	push   ebx
c0015f21:	e8 18 53 ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0015f26:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f2a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f36:	74 27                	je     c0015f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	68 b0 12 02 c0       	push   0xc00212b0
c0015f40:	e8 fa a8 ff ff       	call   c001083f <KePanic(char const*)>
c0015f45:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f4a:	48                   	dec    eax
c0015f4b:	83 c4 10             	add    esp,0x10
c0015f4e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f53:	85 c0                	test   eax,eax
c0015f55:	75 01                	jne    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f57:	fb                   	sti    
c0015f58:	31 f6                	xor    esi,esi
c0015f5a:	e9 8f 00 00 00       	jmp    c0015fee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f5f:	51                   	push   ecx
c0015f60:	51                   	push   ecx
c0015f61:	6a 01                	push   0x1
c0015f63:	53                   	push   ebx
c0015f64:	e8 29 50 ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	85 c0                	test   eax,eax
c0015f6e:	74 26                	je     c0015f96 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	68 c9 12 02 c0       	push   0xc00212c9
c0015f78:	e8 c2 a8 ff ff       	call   c001083f <KePanic(char const*)>
c0015f7d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	48                   	dec    eax
c0015f86:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f8b:	85 c0                	test   eax,eax
c0015f8d:	75 c9                	jne    c0015f58 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f8f:	fb                   	sti    
c0015f90:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f94:	eb 58                	jmp    c0015fee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f96:	50                   	push   eax
c0015f97:	50                   	push   eax
c0015f98:	0f b7 ed             	movzx  ebp,bp
c0015f9b:	55                   	push   ebp
c0015f9c:	0f b7 ff             	movzx  edi,di
c0015f9f:	57                   	push   edi
c0015fa0:	e8 b5 fc ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0015fa5:	5a                   	pop    edx
c0015fa6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015fa8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015fac:	51                   	push   ecx
c0015fad:	50                   	push   eax
c0015fae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015fb6:	53                   	push   ebx
c0015fb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fba:	83 c4 14             	add    esp,0x14
c0015fbd:	53                   	push   ebx
c0015fbe:	e8 2d 50 ff ff       	call   c000aff0 <File::close()>
c0015fc3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fc8:	83 c4 10             	add    esp,0x10
c0015fcb:	48                   	dec    eax
c0015fcc:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fd3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fd8:	85 c0                	test   eax,eax
c0015fda:	75 01                	jne    c0015fdd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0015fdc:	fb                   	sti    
c0015fdd:	83 ec 0c             	sub    esp,0xc
c0015fe0:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fe6:	e8 59 f5 ff ff       	call   c0015544 <unblockTask(ThreadControlBlock*)>
c0015feb:	83 c4 10             	add    esp,0x10
c0015fee:	83 c4 2c             	add    esp,0x2c
c0015ff1:	89 f0                	mov    eax,esi
c0015ff3:	5b                   	pop    ebx
c0015ff4:	5e                   	pop    esi
c0015ff5:	5f                   	pop    edi
c0015ff6:	5d                   	pop    ebp
c0015ff7:	c3                   	ret    

c0015ff8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015ff8:	57                   	push   edi
c0015ff9:	56                   	push   esi
c0015ffa:	53                   	push   ebx
c0015ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016003:	83 e8 06             	sub    eax,0x6
c0016006:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001600a:	0f b7 c0             	movzx  eax,ax
c001600d:	50                   	push   eax
c001600e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016013:	50                   	push   eax
c0016014:	e8 41 fc ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016019:	5a                   	pop    edx
c001601a:	5e                   	pop    esi
c001601b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001601e:	8d 56 fa             	lea    edx,[esi-0x6]
c0016021:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016024:	81 e2 ff ff 00 00    	and    edx,0xffff
c001602a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001602d:	8d 56 02             	lea    edx,[esi+0x2]
c0016030:	66 89 10             	mov    WORD PTR [eax],dx
c0016033:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016036:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001603a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001603d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016041:	89 d6                	mov    esi,edx
c0016043:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016049:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c001604f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016053:	74 05                	je     c001605a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016055:	80 ce 02             	or     dh,0x2
c0016058:	89 d6                	mov    esi,edx
c001605a:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001605e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016063:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016067:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001606f:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016072:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001607a:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001607d:	5b                   	pop    ebx
c001607e:	5e                   	pop    esi
c001607f:	5f                   	pop    edi
c0016080:	c3                   	ret    

c0016081 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016081:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016086:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001608b:	c1 e0 04             	shl    eax,0x4
c001608e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016091:	c3                   	ret    

c0016092 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016092:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016097:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001609c:	c1 e0 04             	shl    eax,0x4
c001609f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00160a3:	c3                   	ret    

c00160a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00160a4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ae:	c1 e0 04             	shl    eax,0x4
c00160b1:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00160b4:	c3                   	ret    

c00160b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00160b5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160ba:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160bf:	c1 e0 04             	shl    eax,0x4
c00160c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160c6:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160c9:	c3                   	ret    

c00160ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160d4:	c1 e0 04             	shl    eax,0x4
c00160d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160db:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160df:	c3                   	ret    

c00160e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ea:	c1 e0 04             	shl    eax,0x4
c00160ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160f1:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160f4:	c3                   	ret    

c00160f5 <Vm::faultHandler(regs*)>:
c00160f5:	55                   	push   ebp
c00160f6:	57                   	push   edi
c00160f7:	56                   	push   esi
c00160f8:	53                   	push   ebx
c00160f9:	83 ec 2c             	sub    esp,0x2c
c00160fc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016100:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016104:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016107:	52                   	push   edx
c0016108:	0f b7 f8             	movzx  edi,ax
c001610b:	0f b7 c0             	movzx  eax,ax
c001610e:	50                   	push   eax
c001610f:	e8 46 fb ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016114:	5a                   	pop    edx
c0016115:	59                   	pop    ecx
c0016116:	89 c1                	mov    ecx,eax
c0016118:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001611b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001611f:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016128:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001612b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001612f:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016138:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001613c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016140:	e8 15 fb ff ff       	call   c0015c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016145:	5e                   	pop    esi
c0016146:	be 06 00 00 00       	mov    esi,0x6
c001614b:	5d                   	pop    ebp
c001614c:	31 ed                	xor    ebp,ebp
c001614e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016153:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016156:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c001615c:	0f 84 54 02 00 00    	je     c00163b6 <Vm::faultHandler(regs*)+0x2c1>
c0016162:	0f 87 94 00 00 00    	ja     c00161fc <Vm::faultHandler(regs*)+0x107>
c0016168:	83 fa 66             	cmp    edx,0x66
c001616b:	0f 84 c2 01 00 00    	je     c0016333 <Vm::faultHandler(regs*)+0x23e>
c0016171:	77 47                	ja     c00161ba <Vm::faultHandler(regs*)+0xc5>
c0016173:	83 fa 36             	cmp    edx,0x36
c0016176:	0f 84 aa 01 00 00    	je     c0016326 <Vm::faultHandler(regs*)+0x231>
c001617c:	77 1a                	ja     c0016198 <Vm::faultHandler(regs*)+0xa3>
c001617e:	83 fa 26             	cmp    edx,0x26
c0016181:	0f 84 78 01 00 00    	je     c00162ff <Vm::faultHandler(regs*)+0x20a>
c0016187:	83 fa 2e             	cmp    edx,0x2e
c001618a:	0f 85 01 06 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x69c>
c0016190:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016193:	31 f6                	xor    esi,esi
c0016195:	41                   	inc    ecx
c0016196:	eb bb                	jmp    c0016153 <Vm::faultHandler(regs*)+0x5e>
c0016198:	83 fa 64             	cmp    edx,0x64
c001619b:	0f 84 6b 01 00 00    	je     c001630c <Vm::faultHandler(regs*)+0x217>
c00161a1:	0f 87 72 01 00 00    	ja     c0016319 <Vm::faultHandler(regs*)+0x224>
c00161a7:	83 fa 3e             	cmp    edx,0x3e
c00161aa:	0f 85 e1 05 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x69c>
c00161b0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161b3:	be 01 00 00 00       	mov    esi,0x1
c00161b8:	eb db                	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c00161ba:	83 fa 6d             	cmp    edx,0x6d
c00161bd:	0f 84 14 03 00 00    	je     c00164d7 <Vm::faultHandler(regs*)+0x3e2>
c00161c3:	77 17                	ja     c00161dc <Vm::faultHandler(regs*)+0xe7>
c00161c5:	83 fa 67             	cmp    edx,0x67
c00161c8:	0f 84 72 01 00 00    	je     c0016340 <Vm::faultHandler(regs*)+0x24b>
c00161ce:	83 fa 6c             	cmp    edx,0x6c
c00161d1:	0f 84 91 02 00 00    	je     c0016468 <Vm::faultHandler(regs*)+0x373>
c00161d7:	e9 b5 05 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x69c>
c00161dc:	83 fa 6f             	cmp    edx,0x6f
c00161df:	0f 84 1d 04 00 00    	je     c0016602 <Vm::faultHandler(regs*)+0x50d>
c00161e5:	0f 82 7f 03 00 00    	jb     c001656a <Vm::faultHandler(regs*)+0x475>
c00161eb:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161f1:	0f 84 56 01 00 00    	je     c001634d <Vm::faultHandler(regs*)+0x258>
c00161f7:	e9 95 05 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x69c>
c00161fc:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016202:	0f 84 31 05 00 00    	je     c0016739 <Vm::faultHandler(regs*)+0x644>
c0016208:	0f 87 89 00 00 00    	ja     c0016297 <Vm::faultHandler(regs*)+0x1a2>
c001620e:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016214:	0f 84 b0 04 00 00    	je     c00166ca <Vm::faultHandler(regs*)+0x5d5>
c001621a:	77 58                	ja     c0016274 <Vm::faultHandler(regs*)+0x17f>
c001621c:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016222:	0f 84 ee 01 00 00    	je     c0016416 <Vm::faultHandler(regs*)+0x321>
c0016228:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001622e:	0f 85 5d 05 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x69c>
c0016234:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016237:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001623a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001623e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016241:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016245:	81 ca 00 02 02 00    	or     edx,0x20200
c001624b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001624e:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016252:	c1 e8 09             	shr    eax,0x9
c0016255:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001625b:	83 e0 01             	and    eax,0x1
c001625e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016261:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016264:	83 c0 06             	add    eax,0x6
c0016267:	25 ff ff 00 00       	and    eax,0xffff
c001626c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001626f:	e9 19 05 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x698>
c0016274:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001627a:	0f 84 8f 04 00 00    	je     c001670f <Vm::faultHandler(regs*)+0x61a>
c0016280:	0f 82 60 04 00 00    	jb     c00166e6 <Vm::faultHandler(regs*)+0x5f1>
c0016286:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001628c:	0f 84 94 04 00 00    	je     c0016726 <Vm::faultHandler(regs*)+0x631>
c0016292:	e9 fa 04 00 00       	jmp    c0016791 <Vm::faultHandler(regs*)+0x69c>
c0016297:	81 fa ef 00 00 00    	cmp    edx,0xef
c001629d:	0f 84 d7 04 00 00    	je     c001677a <Vm::faultHandler(regs*)+0x685>
c00162a3:	77 2e                	ja     c00162d3 <Vm::faultHandler(regs*)+0x1de>
c00162a5:	81 fa ed 00 00 00    	cmp    edx,0xed
c00162ab:	0f 84 a4 04 00 00    	je     c0016755 <Vm::faultHandler(regs*)+0x660>
c00162b1:	81 fa ee 00 00 00    	cmp    edx,0xee
c00162b7:	0f 85 d4 04 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x69c>
c00162bd:	50                   	push   eax
c00162be:	50                   	push   eax
c00162bf:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162c3:	50                   	push   eax
c00162c4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162c8:	50                   	push   eax
c00162c9:	e8 56 f9 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c00162ce:	e9 9f 04 00 00       	jmp    c0016772 <Vm::faultHandler(regs*)+0x67d>
c00162d3:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162d9:	0f 84 6d 01 00 00    	je     c001644c <Vm::faultHandler(regs*)+0x357>
c00162df:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162e5:	0f 84 6f 01 00 00    	je     c001645a <Vm::faultHandler(regs*)+0x365>
c00162eb:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162f1:	0f 85 9a 04 00 00    	jne    c0016791 <Vm::faultHandler(regs*)+0x69c>
c00162f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162fa:	e9 96 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c00162ff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016302:	be 02 00 00 00       	mov    esi,0x2
c0016307:	e9 89 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c001630c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630f:	be 03 00 00 00       	mov    esi,0x3
c0016314:	e9 7c fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001631c:	be 04 00 00 00       	mov    esi,0x4
c0016321:	e9 6f fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016326:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016329:	be 05 00 00 00       	mov    esi,0x5
c001632e:	e9 62 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016333:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016336:	bd 01 00 00 00       	mov    ebp,0x1
c001633b:	e9 55 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c0016340:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016343:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016348:	e9 48 fe ff ff       	jmp    c0016195 <Vm::faultHandler(regs*)+0xa0>
c001634d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016350:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016354:	83 e5 01             	and    ebp,0x1
c0016357:	74 30                	je     c0016389 <Vm::faultHandler(regs*)+0x294>
c0016359:	83 e9 04             	sub    ecx,0x4
c001635c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016362:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016368:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001636b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001636e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016374:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016378:	0f 84 0c 04 00 00    	je     c001678a <Vm::faultHandler(regs*)+0x695>
c001637e:	80 ce 02             	or     dh,0x2
c0016381:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016384:	e9 01 04 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016389:	83 e9 02             	sub    ecx,0x2
c001638c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016392:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016395:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016399:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001639f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00163a3:	74 05                	je     c00163aa <Vm::faultHandler(regs*)+0x2b5>
c00163a5:	80 ce 02             	or     dh,0x2
c00163a8:	eb 03                	jmp    c00163ad <Vm::faultHandler(regs*)+0x2b8>
c00163aa:	80 e6 fd             	and    dh,0xfd
c00163ad:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00163b1:	e9 d4 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c00163b6:	83 e5 01             	and    ebp,0x1
c00163b9:	74 2a                	je     c00163e5 <Vm::faultHandler(regs*)+0x2f0>
c00163bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00163bd:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163c3:	81 ca 00 02 02 00    	or     edx,0x20200
c00163c9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00163ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163d4:	c1 e8 09             	shr    eax,0x9
c00163d7:	83 e0 01             	and    eax,0x1
c00163da:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163dd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163e0:	83 c0 04             	add    eax,0x4
c00163e3:	eb 24                	jmp    c0016409 <Vm::faultHandler(regs*)+0x314>
c00163e5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163e8:	81 ca 00 02 02 00    	or     edx,0x20200
c00163ee:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163f1:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163f4:	c1 e8 09             	shr    eax,0x9
c00163f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163fd:	83 e0 01             	and    eax,0x1
c0016400:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016403:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016406:	83 c0 02             	add    eax,0x2
c0016409:	25 ff ff 00 00       	and    eax,0xffff
c001640e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016411:	e9 74 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016416:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001641a:	3d ee 00 00 00       	cmp    eax,0xee
c001641f:	75 10                	jne    c0016431 <Vm::faultHandler(regs*)+0x33c>
c0016421:	83 ec 0c             	sub    esp,0xc
c0016424:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016427:	e8 95 f8 ff ff       	call   c0015cc1 <Vm::mainloop3(unsigned long)>
c001642c:	e9 44 03 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x680>
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016438:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001643c:	51                   	push   ecx
c001643d:	50                   	push   eax
c001643e:	53                   	push   ebx
c001643f:	e8 b4 fb ff ff       	call   c0015ff8 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016444:	83 c4 20             	add    esp,0x20
c0016447:	e9 41 03 00 00       	jmp    c001678d <Vm::faultHandler(regs*)+0x698>
c001644c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016451:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016455:	e9 30 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c001645a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001645f:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016463:	e9 22 03 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016468:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001646b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016470:	74 2b                	je     c001649d <Vm::faultHandler(regs*)+0x3a8>
c0016472:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016479:	76 22                	jbe    c001649d <Vm::faultHandler(regs*)+0x3a8>
c001647b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001647f:	50                   	push   eax
c0016480:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016484:	50                   	push   eax
c0016485:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016489:	50                   	push   eax
c001648a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001648e:	50                   	push   eax
c001648f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016493:	50                   	push   eax
c0016494:	6a 6c                	push   0x6c
c0016496:	6a 6c                	push   0x6c
c0016498:	e9 bd 01 00 00       	jmp    c001665a <Vm::faultHandler(regs*)+0x565>
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00164a4:	50                   	push   eax
c00164a5:	e8 67 f7 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00164aa:	83 c4 0c             	add    esp,0xc
c00164ad:	0f b6 c0             	movzx  eax,al
c00164b0:	50                   	push   eax
c00164b1:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00164b5:	0f b7 f6             	movzx  esi,si
c00164b8:	50                   	push   eax
c00164b9:	56                   	push   esi
c00164ba:	e8 f6 fb ff ff       	call   c00160b5 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164c9:	74 03                	je     c00164ce <Vm::faultHandler(regs*)+0x3d9>
c00164cb:	48                   	dec    eax
c00164cc:	eb 01                	jmp    c00164cf <Vm::faultHandler(regs*)+0x3da>
c00164ce:	40                   	inc    eax
c00164cf:	0f b7 c0             	movzx  eax,ax
c00164d2:	e9 8b 00 00 00       	jmp    c0016562 <Vm::faultHandler(regs*)+0x46d>
c00164d7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164dd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164e2:	74 29                	je     c001650d <Vm::faultHandler(regs*)+0x418>
c00164e4:	3d ff ff 00 00       	cmp    eax,0xffff
c00164e9:	76 22                	jbe    c001650d <Vm::faultHandler(regs*)+0x418>
c00164eb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164ef:	50                   	push   eax
c00164f0:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164f4:	50                   	push   eax
c00164f5:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164f9:	50                   	push   eax
c00164fa:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164fe:	50                   	push   eax
c00164ff:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016503:	50                   	push   eax
c0016504:	6a 6d                	push   0x6d
c0016506:	6a 6d                	push   0x6d
c0016508:	e9 4d 01 00 00       	jmp    c001665a <Vm::faultHandler(regs*)+0x565>
c001650d:	0f b7 c8             	movzx  ecx,ax
c0016510:	0f b7 f6             	movzx  esi,si
c0016513:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016516:	83 e5 01             	and    ebp,0x1
c0016519:	74 20                	je     c001653b <Vm::faultHandler(regs*)+0x446>
c001651b:	ed                   	in     eax,dx
c001651c:	55                   	push   ebp
c001651d:	50                   	push   eax
c001651e:	51                   	push   ecx
c001651f:	56                   	push   esi
c0016520:	e8 bb fb ff ff       	call   c00160e0 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001652b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001652f:	74 05                	je     c0016536 <Vm::faultHandler(regs*)+0x441>
c0016531:	83 e8 04             	sub    eax,0x4
c0016534:	eb 27                	jmp    c001655d <Vm::faultHandler(regs*)+0x468>
c0016536:	83 c0 04             	add    eax,0x4
c0016539:	eb 22                	jmp    c001655d <Vm::faultHandler(regs*)+0x468>
c001653b:	66 ed                	in     ax,dx
c001653d:	0f b7 c0             	movzx  eax,ax
c0016540:	57                   	push   edi
c0016541:	50                   	push   eax
c0016542:	51                   	push   ecx
c0016543:	56                   	push   esi
c0016544:	e8 81 fb ff ff       	call   c00160ca <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016549:	83 c4 10             	add    esp,0x10
c001654c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001654f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016553:	74 05                	je     c001655a <Vm::faultHandler(regs*)+0x465>
c0016555:	83 e8 02             	sub    eax,0x2
c0016558:	eb 03                	jmp    c001655d <Vm::faultHandler(regs*)+0x468>
c001655a:	83 c0 02             	add    eax,0x2
c001655d:	25 ff ff 00 00       	and    eax,0xffff
c0016562:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016565:	e9 20 02 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c001656a:	8d 46 ff             	lea    eax,[esi-0x1]
c001656d:	0f b6 f0             	movzx  esi,al
c0016570:	83 fe 05             	cmp    esi,0x5
c0016573:	77 23                	ja     c0016598 <Vm::faultHandler(regs*)+0x4a3>
c0016575:	ff 24 b5 3c 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecc4]
c001657c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016581:	eb 15                	jmp    c0016598 <Vm::faultHandler(regs*)+0x4a3>
c0016583:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016587:	eb 0f                	jmp    c0016598 <Vm::faultHandler(regs*)+0x4a3>
c0016589:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001658d:	eb 09                	jmp    c0016598 <Vm::faultHandler(regs*)+0x4a3>
c001658f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016593:	eb 03                	jmp    c0016598 <Vm::faultHandler(regs*)+0x4a3>
c0016595:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016598:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001659b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00165a0:	74 29                	je     c00165cb <Vm::faultHandler(regs*)+0x4d6>
c00165a2:	3d ff ff 00 00       	cmp    eax,0xffff
c00165a7:	76 22                	jbe    c00165cb <Vm::faultHandler(regs*)+0x4d6>
c00165a9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165ad:	50                   	push   eax
c00165ae:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165b2:	50                   	push   eax
c00165b3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165b7:	50                   	push   eax
c00165b8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165bc:	50                   	push   eax
c00165bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165c1:	50                   	push   eax
c00165c2:	6a 6e                	push   0x6e
c00165c4:	6a 6e                	push   0x6e
c00165c6:	e9 8f 00 00 00       	jmp    c001665a <Vm::faultHandler(regs*)+0x565>
c00165cb:	52                   	push   edx
c00165cc:	52                   	push   edx
c00165cd:	0f b7 c0             	movzx  eax,ax
c00165d0:	50                   	push   eax
c00165d1:	57                   	push   edi
c00165d2:	e8 aa fa ff ff       	call   c0016081 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165d7:	59                   	pop    ecx
c00165d8:	5e                   	pop    esi
c00165d9:	0f b6 c0             	movzx  eax,al
c00165dc:	50                   	push   eax
c00165dd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165e1:	50                   	push   eax
c00165e2:	e8 3d f6 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c00165e7:	83 c4 10             	add    esp,0x10
c00165ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165ed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165f1:	74 03                	je     c00165f6 <Vm::faultHandler(regs*)+0x501>
c00165f3:	48                   	dec    eax
c00165f4:	eb 01                	jmp    c00165f7 <Vm::faultHandler(regs*)+0x502>
c00165f6:	40                   	inc    eax
c00165f7:	0f b7 c0             	movzx  eax,ax
c00165fa:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165fd:	e9 88 01 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016602:	8d 46 ff             	lea    eax,[esi-0x1]
c0016605:	0f b6 f0             	movzx  esi,al
c0016608:	83 fe 05             	cmp    esi,0x5
c001660b:	77 1e                	ja     c001662b <Vm::faultHandler(regs*)+0x536>
c001660d:	ff 24 b5 54 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecac]
c0016614:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016618:	eb 11                	jmp    c001662b <Vm::faultHandler(regs*)+0x536>
c001661a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001661d:	eb 0c                	jmp    c001662b <Vm::faultHandler(regs*)+0x536>
c001661f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016622:	eb 07                	jmp    c001662b <Vm::faultHandler(regs*)+0x536>
c0016624:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016627:	eb 02                	jmp    c001662b <Vm::faultHandler(regs*)+0x536>
c0016629:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001662b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001662e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016633:	74 37                	je     c001666c <Vm::faultHandler(regs*)+0x577>
c0016635:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001663b:	76 2f                	jbe    c001666c <Vm::faultHandler(regs*)+0x577>
c001663d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016641:	50                   	push   eax
c0016642:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016646:	50                   	push   eax
c0016647:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001664b:	50                   	push   eax
c001664c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016650:	50                   	push   eax
c0016651:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016655:	50                   	push   eax
c0016656:	6a 6f                	push   0x6f
c0016658:	6a 6f                	push   0x6f
c001665a:	68 e2 12 02 c0       	push   0xc00212e2
c001665f:	e8 ef 42 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016664:	83 c4 20             	add    esp,0x20
c0016667:	e9 83 01 00 00       	jmp    c00167ef <Vm::faultHandler(regs*)+0x6fa>
c001666c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001666f:	0f b7 d7             	movzx  edx,di
c0016672:	81 e1 00 04 00 00    	and    ecx,0x400
c0016678:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001667b:	0f b7 c6             	movzx  eax,si
c001667e:	83 e5 01             	and    ebp,0x1
c0016681:	74 1d                	je     c00166a0 <Vm::faultHandler(regs*)+0x5ab>
c0016683:	55                   	push   ebp
c0016684:	55                   	push   ebp
c0016685:	50                   	push   eax
c0016686:	52                   	push   edx
c0016687:	e8 18 fa ff ff       	call   c00160a4 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001668c:	83 c4 10             	add    esp,0x10
c001668f:	89 fa                	mov    edx,edi
c0016691:	ef                   	out    dx,eax
c0016692:	85 c9                	test   ecx,ecx
c0016694:	74 05                	je     c001669b <Vm::faultHandler(regs*)+0x5a6>
c0016696:	83 ee 04             	sub    esi,0x4
c0016699:	eb 21                	jmp    c00166bc <Vm::faultHandler(regs*)+0x5c7>
c001669b:	83 c6 04             	add    esi,0x4
c001669e:	eb 1c                	jmp    c00166bc <Vm::faultHandler(regs*)+0x5c7>
c00166a0:	55                   	push   ebp
c00166a1:	55                   	push   ebp
c00166a2:	50                   	push   eax
c00166a3:	52                   	push   edx
c00166a4:	e8 e9 f9 ff ff       	call   c0016092 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00166a9:	83 c4 10             	add    esp,0x10
c00166ac:	89 fa                	mov    edx,edi
c00166ae:	66 ef                	out    dx,ax
c00166b0:	85 c9                	test   ecx,ecx
c00166b2:	74 05                	je     c00166b9 <Vm::faultHandler(regs*)+0x5c4>
c00166b4:	83 ee 02             	sub    esi,0x2
c00166b7:	eb 03                	jmp    c00166bc <Vm::faultHandler(regs*)+0x5c7>
c00166b9:	83 c6 02             	add    esi,0x2
c00166bc:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166c5:	e9 c0 00 00 00       	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c00166ca:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166d1:	83 ec 0c             	sub    esp,0xc
c00166d4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166d8:	50                   	push   eax
c00166d9:	e8 33 f5 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00166de:	0f b6 c0             	movzx  eax,al
c00166e1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166e4:	eb 3a                	jmp    c0016720 <Vm::faultHandler(regs*)+0x62b>
c00166e6:	83 e5 01             	and    ebp,0x1
c00166e9:	74 07                	je     c00166f2 <Vm::faultHandler(regs*)+0x5fd>
c00166eb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ef:	ed                   	in     eax,dx
c00166f0:	eb 14                	jmp    c0016706 <Vm::faultHandler(regs*)+0x611>
c00166f2:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166f5:	66 31 f6             	xor    si,si
c00166f8:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166fb:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ff:	66 ed                	in     ax,dx
c0016701:	0f b7 c0             	movzx  eax,ax
c0016704:	09 f0                	or     eax,esi
c0016706:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016709:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001670d:	eb 7e                	jmp    c001678d <Vm::faultHandler(regs*)+0x698>
c001670f:	52                   	push   edx
c0016710:	52                   	push   edx
c0016711:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016715:	50                   	push   eax
c0016716:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001671a:	50                   	push   eax
c001671b:	e8 04 f5 ff ff       	call   c0015c24 <Vm::outbv(unsigned short, unsigned char)>
c0016720:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016724:	eb 4f                	jmp    c0016775 <Vm::faultHandler(regs*)+0x680>
c0016726:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016729:	83 e5 01             	and    ebp,0x1
c001672c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016730:	74 03                	je     c0016735 <Vm::faultHandler(regs*)+0x640>
c0016732:	ef                   	out    dx,eax
c0016733:	eb d4                	jmp    c0016709 <Vm::faultHandler(regs*)+0x614>
c0016735:	66 ef                	out    dx,ax
c0016737:	eb d0                	jmp    c0016709 <Vm::faultHandler(regs*)+0x614>
c0016739:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016740:	83 ec 0c             	sub    esp,0xc
c0016743:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016747:	50                   	push   eax
c0016748:	e8 c4 f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c001674d:	0f b6 c0             	movzx  eax,al
c0016750:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016753:	eb 1d                	jmp    c0016772 <Vm::faultHandler(regs*)+0x67d>
c0016755:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016758:	83 e5 01             	and    ebp,0x1
c001675b:	74 03                	je     c0016760 <Vm::faultHandler(regs*)+0x66b>
c001675d:	ed                   	in     eax,dx
c001675e:	eb 0d                	jmp    c001676d <Vm::faultHandler(regs*)+0x678>
c0016760:	66 ed                	in     ax,dx
c0016762:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016765:	66 31 d2             	xor    dx,dx
c0016768:	0f b7 c0             	movzx  eax,ax
c001676b:	09 d0                	or     eax,edx
c001676d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016770:	eb 18                	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016772:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	eb 13                	jmp    c001678d <Vm::faultHandler(regs*)+0x698>
c001677a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001677d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016780:	83 e5 01             	and    ebp,0x1
c0016783:	74 03                	je     c0016788 <Vm::faultHandler(regs*)+0x693>
c0016785:	ef                   	out    dx,eax
c0016786:	eb 02                	jmp    c001678a <Vm::faultHandler(regs*)+0x695>
c0016788:	66 ef                	out    dx,ax
c001678a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001678d:	b0 01                	mov    al,0x1
c001678f:	eb 60                	jmp    c00167f1 <Vm::faultHandler(regs*)+0x6fc>
c0016791:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016795:	50                   	push   eax
c0016796:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001679a:	50                   	push   eax
c001679b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001679f:	50                   	push   eax
c00167a0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167a4:	50                   	push   eax
c00167a5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167a9:	50                   	push   eax
c00167aa:	52                   	push   edx
c00167ab:	52                   	push   edx
c00167ac:	68 0f 13 02 c0       	push   0xc002130f
c00167b1:	e8 9d 41 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00167b6:	83 c4 20             	add    esp,0x20
c00167b9:	83 ec 0c             	sub    esp,0xc
c00167bc:	6a 60                	push   0x60
c00167be:	e8 4e f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00167c3:	0f b6 d0             	movzx  edx,al
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	83 fa 1c             	cmp    edx,0x1c
c00167cc:	74 05                	je     c00167d3 <Vm::faultHandler(regs*)+0x6de>
c00167ce:	83 fa 5a             	cmp    edx,0x5a
c00167d1:	75 e6                	jne    c00167b9 <Vm::faultHandler(regs*)+0x6c4>
c00167d3:	0f b6 c0             	movzx  eax,al
c00167d6:	83 f8 1c             	cmp    eax,0x1c
c00167d9:	74 05                	je     c00167e0 <Vm::faultHandler(regs*)+0x6eb>
c00167db:	83 f8 5a             	cmp    eax,0x5a
c00167de:	75 0f                	jne    c00167ef <Vm::faultHandler(regs*)+0x6fa>
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	6a 60                	push   0x60
c00167e5:	e8 27 f4 ff ff       	call   c0015c11 <Vm::inbv(unsigned short)>
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	eb e4                	jmp    c00167d3 <Vm::faultHandler(regs*)+0x6de>
c00167ef:	31 c0                	xor    eax,eax
c00167f1:	83 c4 2c             	add    esp,0x2c
c00167f4:	5b                   	pop    ebx
c00167f5:	5e                   	pop    esi
c00167f6:	5f                   	pop    edi
c00167f7:	5d                   	pop    ebp
c00167f8:	c3                   	ret    

c00167f9 <noCopro(unsigned long)>:
c00167f9:	c3                   	ret    

c00167fa <nmiHandler(regs*, void*)>:
c00167fa:	83 ec 0c             	sub    esp,0xc
c00167fd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	50                   	push   eax
c0016806:	e8 85 0a ff ff       	call   c0007290 <Computer::handleNMI()>
c001680b:	83 c4 10             	add    esp,0x10
c001680e:	90                   	nop
c001680f:	83 c4 0c             	add    esp,0xc
c0016812:	c3                   	ret    

c0016813 <doubleFault(regs*, void*)>:
c0016813:	55                   	push   ebp
c0016814:	89 e5                	mov    ebp,esp
c0016816:	83 ec 08             	sub    esp,0x8
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	68 6c 13 02 c0       	push   0xc002136c
c0016821:	e8 19 a0 ff ff       	call   c001083f <KePanic(char const*)>
c0016826:	83 c4 10             	add    esp,0x10
c0016829:	90                   	nop
c001682a:	c9                   	leave  
c001682b:	c3                   	ret    

c001682c <displayDebugInfo(regs*)>:
c001682c:	83 ec 1c             	sub    esp,0x1c
c001682f:	0f 20 c0             	mov    eax,cr0
c0016832:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016836:	0f 20 d0             	mov    eax,cr2
c0016839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001683d:	0f 20 d8             	mov    eax,cr3
c0016840:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016844:	0f 20 e0             	mov    eax,cr4
c0016847:	89 04 24             	mov    DWORD PTR [esp],eax
c001684a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016851:	83 ec 08             	sub    esp,0x8
c0016854:	50                   	push   eax
c0016855:	68 88 13 02 c0       	push   0xc0021388
c001685a:	e8 f4 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016866:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016869:	83 ec 08             	sub    esp,0x8
c001686c:	50                   	push   eax
c001686d:	68 79 13 02 c0       	push   0xc0021379
c0016872:	e8 dc 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016881:	83 ec 08             	sub    esp,0x8
c0016884:	50                   	push   eax
c0016885:	68 84 13 02 c0       	push   0xc0021384
c001688a:	e8 c4 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001688f:	83 c4 10             	add    esp,0x10
c0016892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016896:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	50                   	push   eax
c001689d:	68 93 13 02 c0       	push   0xc0021393
c00168a2:	e8 ac 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ae:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00168b1:	83 ec 08             	sub    esp,0x8
c00168b4:	50                   	push   eax
c00168b5:	68 9e 13 02 c0       	push   0xc002139e
c00168ba:	e8 94 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00168bf:	83 c4 10             	add    esp,0x10
c00168c2:	83 ec 08             	sub    esp,0x8
c00168c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168c9:	68 a9 13 02 c0       	push   0xc00213a9
c00168ce:	e8 80 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00168d3:	83 c4 10             	add    esp,0x10
c00168d6:	83 ec 08             	sub    esp,0x8
c00168d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168dd:	68 b4 13 02 c0       	push   0xc00213b4
c00168e2:	e8 6c 40 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00168e7:	83 c4 10             	add    esp,0x10
c00168ea:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f5:	83 ec 0c             	sub    esp,0xc
c00168f8:	50                   	push   eax
c00168f9:	e8 39 1e ff ff       	call   c0008737 <setActiveTerminal(VgaText*)>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016906:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690c:	83 ec 08             	sub    esp,0x8
c001690f:	68 bf 13 02 c0       	push   0xc00213bf
c0016914:	50                   	push   eax
c0016915:	e8 6a 21 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001691a:	83 c4 10             	add    esp,0x10
c001691d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016922:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016928:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001692c:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001692f:	83 ec 08             	sub    esp,0x8
c0016932:	52                   	push   edx
c0016933:	50                   	push   eax
c0016934:	e8 05 21 ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016941:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016947:	83 ec 08             	sub    esp,0x8
c001694a:	68 cd 13 02 c0       	push   0xc00213cd
c001694f:	50                   	push   eax
c0016950:	e8 2f 21 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016955:	83 c4 10             	add    esp,0x10
c0016958:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001695d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016963:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0016968:	8b 12                	mov    edx,DWORD PTR [edx]
c001696a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001696d:	83 c2 0c             	add    edx,0xc
c0016970:	83 ec 08             	sub    esp,0x8
c0016973:	52                   	push   edx
c0016974:	50                   	push   eax
c0016975:	e8 0a 21 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016982:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016988:	83 ec 08             	sub    esp,0x8
c001698b:	68 d6 13 02 c0       	push   0xc00213d6
c0016990:	50                   	push   eax
c0016991:	e8 ee 20 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001699e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169a8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00169ab:	83 ec 08             	sub    esp,0x8
c00169ae:	52                   	push   edx
c00169af:	50                   	push   eax
c00169b0:	e8 89 20 ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c00169b5:	83 c4 10             	add    esp,0x10
c00169b8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c3:	83 ec 08             	sub    esp,0x8
c00169c6:	68 de 13 02 c0       	push   0xc00213de
c00169cb:	50                   	push   eax
c00169cc:	e8 b3 20 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169e3:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169e6:	83 ec 08             	sub    esp,0x8
c00169e9:	52                   	push   edx
c00169ea:	50                   	push   eax
c00169eb:	e8 4e 20 ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fe:	83 ec 08             	sub    esp,0x8
c0016a01:	68 e6 13 02 c0       	push   0xc00213e6
c0016a06:	50                   	push   eax
c0016a07:	e8 78 20 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016a0c:	83 c4 10             	add    esp,0x10
c0016a0f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a1e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a21:	83 ec 08             	sub    esp,0x8
c0016a24:	52                   	push   edx
c0016a25:	50                   	push   eax
c0016a26:	e8 13 20 ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a39:	83 ec 08             	sub    esp,0x8
c0016a3c:	68 ee 13 02 c0       	push   0xc00213ee
c0016a41:	50                   	push   eax
c0016a42:	e8 3d 20 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a55:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a59:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a5c:	83 ec 08             	sub    esp,0x8
c0016a5f:	52                   	push   edx
c0016a60:	50                   	push   eax
c0016a61:	e8 d8 1f ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a74:	83 ec 08             	sub    esp,0x8
c0016a77:	68 f6 13 02 c0       	push   0xc00213f6
c0016a7c:	50                   	push   eax
c0016a7d:	e8 02 20 ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016a82:	83 c4 10             	add    esp,0x10
c0016a85:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a94:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a97:	83 ec 08             	sub    esp,0x8
c0016a9a:	52                   	push   edx
c0016a9b:	50                   	push   eax
c0016a9c:	e8 9d 1f ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aaf:	83 ec 08             	sub    esp,0x8
c0016ab2:	68 fe 13 02 c0       	push   0xc00213fe
c0016ab7:	50                   	push   eax
c0016ab8:	e8 c7 1f ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016acb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016acf:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016ad2:	83 ec 08             	sub    esp,0x8
c0016ad5:	52                   	push   edx
c0016ad6:	50                   	push   eax
c0016ad7:	e8 62 1f ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aea:	83 ec 08             	sub    esp,0x8
c0016aed:	68 06 14 02 c0       	push   0xc0021406
c0016af2:	50                   	push   eax
c0016af3:	e8 8c 1f ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016af8:	83 c4 10             	add    esp,0x10
c0016afb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b06:	83 ec 08             	sub    esp,0x8
c0016b09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016b0d:	50                   	push   eax
c0016b0e:	e8 2b 1f ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016b13:	83 c4 10             	add    esp,0x10
c0016b16:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b21:	83 ec 08             	sub    esp,0x8
c0016b24:	68 0f 14 02 c0       	push   0xc002140f
c0016b29:	50                   	push   eax
c0016b2a:	e8 55 1f ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016b2f:	83 c4 10             	add    esp,0x10
c0016b32:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b3d:	83 ec 08             	sub    esp,0x8
c0016b40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b44:	50                   	push   eax
c0016b45:	e8 f4 1e ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	68 17 14 02 c0       	push   0xc0021417
c0016b60:	50                   	push   eax
c0016b61:	e8 1e 1f ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016b66:	83 c4 10             	add    esp,0x10
c0016b69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b74:	83 ec 08             	sub    esp,0x8
c0016b77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b7b:	50                   	push   eax
c0016b7c:	e8 bd 1e ff ff       	call   c0008a3e <VgaText::putx(unsigned int)>
c0016b81:	83 c4 10             	add    esp,0x10
c0016b84:	fa                   	cli    
c0016b85:	f4                   	hlt    
c0016b86:	eb fe                	jmp    c0016b86 <displayDebugInfo(regs*)+0x35a>

c0016b88 <HalSystemIdle()>:
c0016b88:	56                   	push   esi
c0016b89:	53                   	push   ebx
c0016b8a:	83 ec 14             	sub    esp,0x14
c0016b8d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b98:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b9e:	83 e0 04             	and    eax,0x4
c0016ba1:	0f b6 c0             	movzx  eax,al
c0016ba4:	85 c0                	test   eax,eax
c0016ba6:	0f 95 c0             	setne  al
c0016ba9:	0f b6 c0             	movzx  eax,al
c0016bac:	85 c0                	test   eax,eax
c0016bae:	74 4c                	je     c0016bfc <HalSystemIdle()+0x74>
c0016bb0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bb5:	83 ec 08             	sub    esp,0x8
c0016bb8:	68 e1 00 00 00       	push   0xe1
c0016bbd:	50                   	push   eax
c0016bbe:	e8 eb 04 ff ff       	call   c00070ae <Computer::rdmsr(unsigned int)>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bce:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bd7:	83 e2 02             	and    edx,0x2
c0016bda:	89 d3                	mov    ebx,edx
c0016bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016be0:	83 e2 00             	and    edx,0x0
c0016be3:	89 d6                	mov    esi,edx
c0016be5:	56                   	push   esi
c0016be6:	53                   	push   ebx
c0016be7:	68 e1 00 00 00       	push   0xe1
c0016bec:	50                   	push   eax
c0016bed:	e8 e8 04 ff ff       	call   c00070da <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	e8 9a 95 fe ff       	call   c0000194 <doTPAUSE>
c0016bfa:	eb 01                	jmp    c0016bfd <HalSystemIdle()+0x75>
c0016bfc:	f4                   	hlt    
c0016bfd:	90                   	nop
c0016bfe:	83 c4 14             	add    esp,0x14
c0016c01:	5b                   	pop    ebx
c0016c02:	5e                   	pop    esi
c0016c03:	c3                   	ret    

c0016c04 <displayProgramFault(char const*)>:
c0016c04:	83 ec 0c             	sub    esp,0xc
c0016c07:	83 ec 0c             	sub    esp,0xc
c0016c0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c0e:	e8 40 3d ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c26:	85 c0                	test   eax,eax
c0016c28:	74 21                	je     c0016c4b <displayProgramFault(char const*)+0x47>
c0016c2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c3a:	6a 04                	push   0x4
c0016c3c:	6a 0f                	push   0xf
c0016c3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c42:	50                   	push   eax
c0016c43:	e8 ae 1e ff ff       	call   c0008af6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	90                   	nop
c0016c4c:	83 c4 0c             	add    esp,0xc
c0016c4f:	c3                   	ret    

c0016c50 <gpFault(regs*, void*)>:
c0016c50:	83 ec 1c             	sub    esp,0x1c
c0016c53:	c7 05 10 82 02 c0 f5 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160f5
c0016c5d:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c62:	85 c0                	test   eax,eax
c0016c64:	74 1e                	je     c0016c84 <gpFault(regs*, void*)+0x34>
c0016c66:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c6b:	83 ec 0c             	sub    esp,0xc
c0016c6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c72:	ff d0                	call   eax
c0016c74:	83 c4 10             	add    esp,0x10
c0016c77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c7b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c80:	85 c0                	test   eax,eax
c0016c82:	75 2e                	jne    c0016cb2 <gpFault(regs*, void*)+0x62>
c0016c84:	83 ec 0c             	sub    esp,0xc
c0016c87:	68 1f 14 02 c0       	push   0xc002141f
c0016c8c:	e8 73 ff ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c9b:	e8 8c fb ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	83 ec 0c             	sub    esp,0xc
c0016ca6:	6a 00                	push   0x0
c0016ca8:	e8 0b ee ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016cad:	83 c4 10             	add    esp,0x10
c0016cb0:	eb 01                	jmp    c0016cb3 <gpFault(regs*, void*)+0x63>
c0016cb2:	90                   	nop
c0016cb3:	83 c4 1c             	add    esp,0x1c
c0016cb6:	c3                   	ret    

c0016cb7 <pgFault(regs*, void*)>:
c0016cb7:	83 ec 1c             	sub    esp,0x1c
c0016cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016cc1:	0f 20 d0             	mov    eax,cr2
c0016cc4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ccc:	83 ec 04             	sub    esp,0x4
c0016ccf:	52                   	push   edx
c0016cd0:	50                   	push   eax
c0016cd1:	68 fc 14 02 c0       	push   0xc00214fc
c0016cd6:	e8 78 3c ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ce5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ce8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cee:	0f 20 d2             	mov    edx,cr2
c0016cf1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cf9:	83 ec 08             	sub    esp,0x8
c0016cfc:	52                   	push   edx
c0016cfd:	50                   	push   eax
c0016cfe:	e8 15 38 ff ff       	call   c000a518 <VAS::tryLoadBackOffDisk(unsigned long)>
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	0f b6 c0             	movzx  eax,al
c0016d09:	85 c0                	test   eax,eax
c0016d0b:	75 2e                	jne    c0016d3b <pgFault(regs*, void*)+0x84>
c0016d0d:	83 ec 0c             	sub    esp,0xc
c0016d10:	68 38 14 02 c0       	push   0xc0021438
c0016d15:	e8 ea fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	83 ec 0c             	sub    esp,0xc
c0016d20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d24:	e8 03 fb ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016d29:	83 c4 10             	add    esp,0x10
c0016d2c:	83 ec 0c             	sub    esp,0xc
c0016d2f:	6a 00                	push   0x0
c0016d31:	e8 82 ed ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	eb 01                	jmp    c0016d3c <pgFault(regs*, void*)+0x85>
c0016d3b:	90                   	nop
c0016d3c:	83 c4 1c             	add    esp,0x1c
c0016d3f:	c3                   	ret    

c0016d40 <otherISRHandler(regs*, void*)>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	68 24 15 02 c0       	push   0xc0021524
c0016d4b:	e8 b4 fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	83 ec 0c             	sub    esp,0xc
c0016d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5a:	e8 cd fa ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	83 ec 0c             	sub    esp,0xc
c0016d65:	6a 00                	push   0x0
c0016d67:	e8 4c ed ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	90                   	nop
c0016d70:	83 c4 0c             	add    esp,0xc
c0016d73:	c3                   	ret    

c0016d74 <opcodeFault(regs*, void*)>:
c0016d74:	55                   	push   ebp
c0016d75:	89 e5                	mov    ebp,esp
c0016d77:	83 ec 08             	sub    esp,0x8
c0016d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d80:	83 ec 08             	sub    esp,0x8
c0016d83:	50                   	push   eax
c0016d84:	68 43 14 02 c0       	push   0xc0021443
c0016d89:	e8 c5 3b ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016d8e:	83 c4 10             	add    esp,0x10
c0016d91:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d9c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016da2:	0f b6 c0             	movzx  eax,al
c0016da5:	85 c0                	test   eax,eax
c0016da7:	74 21                	je     c0016dca <opcodeFault(regs*, void*)+0x56>
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	68 4c 15 02 c0       	push   0xc002154c
c0016db1:	e8 9d 3b ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dbc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016dbf:	8d 50 19             	lea    edx,[eax+0x19]
c0016dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016dc5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016dc8:	eb 2b                	jmp    c0016df5 <opcodeFault(regs*, void*)+0x81>
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	68 51 14 02 c0       	push   0xc0021451
c0016dd2:	e8 2d fe ff ff       	call   c0016c04 <displayProgramFault(char const*)>
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	83 ec 0c             	sub    esp,0xc
c0016ddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016de0:	e8 47 fa ff ff       	call   c001682c <displayDebugInfo(regs*)>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	6a 00                	push   0x0
c0016ded:	e8 c6 ec ff ff       	call   c0015ab8 <Thr::terminateFromIRQ(int)>
c0016df2:	83 c4 10             	add    esp,0x10
c0016df5:	c9                   	leave  
c0016df6:	c3                   	ret    

c0016df7 <i386SaveCoprocessor(void*)>:
c0016df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dfb:	83 c0 3f             	add    eax,0x3f
c0016dfe:	83 e0 c0             	and    eax,0xffffffc0
c0016e01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e05:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016e0b <i386LoadCoprocessor(void*)>:
c0016e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e0f:	83 c0 3f             	add    eax,0x3f
c0016e12:	83 e0 c0             	and    eax,0xffffffc0
c0016e15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e19:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016e1f <x87EmulHandler(regs*, void*)>:
c0016e1f:	53                   	push   ebx
c0016e20:	83 ec 08             	sub    esp,0x8
c0016e23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e28:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e2c:	74 10                	je     c0016e3e <x87EmulHandler(regs*, void*)+0x1f>
c0016e2e:	83 ec 0c             	sub    esp,0xc
c0016e31:	68 5e 14 02 c0       	push   0xc002145e
c0016e36:	e8 04 9a ff ff       	call   c001083f <KePanic(char const*)>
c0016e3b:	83 c4 10             	add    esp,0x10
c0016e3e:	0f 20 c0             	mov    eax,cr0
c0016e41:	a8 08                	test   al,0x8
c0016e43:	74 59                	je     c0016e9e <x87EmulHandler(regs*, void*)+0x7f>
c0016e45:	0f 06                	clts   
c0016e47:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e4c:	85 c0                	test   eax,eax
c0016e4e:	74 0e                	je     c0016e5e <x87EmulHandler(regs*, void*)+0x3f>
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e56:	e8 9c ff ff ff       	call   c0016df7 <i386SaveCoprocessor(void*)>
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e64:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e68:	75 12                	jne    c0016e7c <x87EmulHandler(regs*, void*)+0x5d>
c0016e6a:	83 ec 0c             	sub    esp,0xc
c0016e6d:	68 40 02 00 00       	push   0x240
c0016e72:	e8 15 0c ff ff       	call   c0007a8c <malloc>
c0016e77:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e7a:	eb 10                	jmp    c0016e8c <x87EmulHandler(regs*, void*)+0x6d>
c0016e7c:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e81:	83 ec 0c             	sub    esp,0xc
c0016e84:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e87:	e8 7f ff ff ff       	call   c0016e0b <i386LoadCoprocessor(void*)>
c0016e8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e99:	83 c4 08             	add    esp,0x8
c0016e9c:	5b                   	pop    ebx
c0016e9d:	c3                   	ret    
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	68 72 14 02 c0       	push   0xc0021472
c0016ea6:	e8 a8 3a ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016eab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016eb3:	83 c4 18             	add    esp,0x18
c0016eb6:	5b                   	pop    ebx
c0016eb7:	e9 fc eb ff ff       	jmp    c0015ab8 <Thr::terminateFromIRQ(int)>

c0016ebc <HalInitialiseCoprocessor()>:
c0016ebc:	83 ec 10             	sub    esp,0x10
c0016ebf:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016ec9:	6a 00                	push   0x0
c0016ecb:	68 1f 6e 01 c0       	push   0xc0016e1f
c0016ed0:	6a 07                	push   0x7
c0016ed2:	e8 e3 53 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ed7:	e8 e4 6f 00 00       	call   c001dec0 <avxDetect>
c0016edc:	83 c4 10             	add    esp,0x10
c0016edf:	85 c0                	test   eax,eax
c0016ee1:	74 1c                	je     c0016eff <HalInitialiseCoprocessor()+0x43>
c0016ee3:	c7 05 0c 82 02 c0 ea de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001deea
c0016eed:	c7 05 08 82 02 c0 fb de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001defb
c0016ef7:	83 c4 0c             	add    esp,0xc
c0016efa:	e9 0d 70 00 00       	jmp    c001df0c <avxInit>
c0016eff:	e8 4c 73 00 00       	call   c001e250 <absolutelyNoChanceInHell>
c0016f04:	85 c0                	test   eax,eax
c0016f06:	74 1c                	je     c0016f24 <HalInitialiseCoprocessor()+0x68>
c0016f08:	c7 05 0c 82 02 c0 68 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e268
c0016f12:	c7 05 08 82 02 c0 70 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e270
c0016f1c:	83 c4 0c             	add    esp,0xc
c0016f1f:	e9 54 73 00 00       	jmp    c001e278 <sseInit>
c0016f24:	e8 6d 73 00 00       	call   c001e296 <x87Detect>
c0016f29:	85 c0                	test   eax,eax
c0016f2b:	74 1c                	je     c0016f49 <HalInitialiseCoprocessor()+0x8d>
c0016f2d:	c7 05 0c 82 02 c0 b1 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e2b1
c0016f37:	c7 05 08 82 02 c0 b8 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e2b8
c0016f41:	83 c4 0c             	add    esp,0xc
c0016f44:	e9 76 73 00 00       	jmp    c001e2bf <x87Init>
c0016f49:	c7 05 0c 82 02 c0 f9 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167f9
c0016f53:	c7 05 08 82 02 c0 f9 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc00167f9
c0016f5d:	0f 20 c0             	mov    eax,cr0
c0016f60:	83 c8 04             	or     eax,0x4
c0016f63:	0f 22 c0             	mov    cr0,eax
c0016f66:	83 c4 0c             	add    esp,0xc
c0016f69:	c3                   	ret    

c0016f6a <HalPanic(char const*)>:
c0016f6a:	53                   	push   ebx
c0016f6b:	83 ec 10             	sub    esp,0x10
c0016f6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f72:	fa                   	cli    
c0016f73:	53                   	push   ebx
c0016f74:	68 88 14 02 c0       	push   0xc0021488
c0016f79:	e8 d5 39 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0016f7e:	83 c4 0c             	add    esp,0xc
c0016f81:	6a 01                	push   0x1
c0016f83:	6a 0f                	push   0xf
c0016f85:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8b:	e8 02 16 ff ff       	call   c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f90:	58                   	pop    eax
c0016f91:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f97:	e8 e6 17 ff ff       	call   c0008782 <VgaText::clearScreen()>
c0016f9c:	5a                   	pop    edx
c0016f9d:	59                   	pop    ecx
c0016f9e:	68 e0 fc 01 c0       	push   0xc001fce0
c0016fa3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa9:	e8 1c 16 ff ff       	call   c00085ca <VgaText::setTitle(char*)>
c0016fae:	83 c4 0c             	add    esp,0xc
c0016fb1:	6a 01                	push   0x1
c0016fb3:	6a 0f                	push   0xf
c0016fb5:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fbb:	e8 d2 15 ff ff       	call   c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fc0:	58                   	pop    eax
c0016fc1:	5a                   	pop    edx
c0016fc2:	68 a1 14 02 c0       	push   0xc00214a1
c0016fc7:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fcd:	e8 b2 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016fd2:	83 c4 0c             	add    esp,0xc
c0016fd5:	6a 0f                	push   0xf
c0016fd7:	6a 01                	push   0x1
c0016fd9:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fdf:	e8 ae 15 ff ff       	call   c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fe4:	59                   	pop    ecx
c0016fe5:	58                   	pop    eax
c0016fe6:	68 aa 14 02 c0       	push   0xc00214aa
c0016feb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff1:	e8 8e 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c0016ff6:	83 c4 0c             	add    esp,0xc
c0016ff9:	6a 01                	push   0x1
c0016ffb:	6a 0f                	push   0xf
c0016ffd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017003:	e8 8a 15 ff ff       	call   c0008592 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017008:	58                   	pop    eax
c0017009:	5a                   	pop    edx
c001700a:	68 ee 14 02 c0       	push   0xc00214ee
c001700f:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017015:	e8 6a 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001701a:	59                   	pop    ecx
c001701b:	58                   	pop    eax
c001701c:	68 b7 14 02 c0       	push   0xc00214b7
c0017021:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017027:	e8 58 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001702c:	58                   	pop    eax
c001702d:	5a                   	pop    edx
c001702e:	68 f1 14 02 c0       	push   0xc00214f1
c0017033:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017039:	e8 46 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001703e:	59                   	pop    ecx
c001703f:	58                   	pop    eax
c0017040:	53                   	push   ebx
c0017041:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017047:	e8 38 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001704c:	58                   	pop    eax
c001704d:	5a                   	pop    edx
c001704e:	68 ee 14 02 c0       	push   0xc00214ee
c0017053:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0017059:	e8 26 1a ff ff       	call   c0008a84 <VgaText::puts(char const*)>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	eb fe                	jmp    c0017061 <HalPanic(char const*)+0xf7>

c0017063 <HalQueryPerformanceCounter()>:
c0017063:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017068:	31 d2                	xor    edx,edx
c001706a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017070:	31 c0                	xor    eax,eax
c0017072:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017079:	74 02                	je     c001707d <HalQueryPerformanceCounter()+0x1a>
c001707b:	0f 31                	rdtsc  
c001707d:	c3                   	ret    

c001707e <HalInitialise()>:
c001707e:	53                   	push   ebx
c001707f:	83 ec 08             	sub    esp,0x8
c0017082:	e8 72 54 ff ff       	call   c000c4f9 <setupINTS()>
c0017087:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001708c:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017093:	75 0f                	jne    c00170a4 <HalInitialise()+0x26>
c0017095:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001709b:	83 e2 fe             	and    edx,0xfffffffe
c001709e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170a4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c00170aa:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c00170b1:	83 e2 fe             	and    edx,0xfffffffe
c00170b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00170ba:	e8 a1 02 00 00       	call   c0017360 <picOpen()>
c00170bf:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170c6:	74 0a                	je     c00170d2 <HalInitialise()+0x54>
c00170c8:	e8 e3 01 00 00       	call   c00172b0 <picDisable()>
c00170cd:	e8 5c 67 00 00       	call   c001d82e <apicOpen()>
c00170d2:	50                   	push   eax
c00170d3:	bb 0f 00 00 00       	mov    ebx,0xf
c00170d8:	6a 00                	push   0x0
c00170da:	68 40 6d 01 c0       	push   0xc0016d40
c00170df:	6a 00                	push   0x0
c00170e1:	e8 d4 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e6:	83 c4 0c             	add    esp,0xc
c00170e9:	6a 00                	push   0x0
c00170eb:	68 40 6d 01 c0       	push   0xc0016d40
c00170f0:	6a 01                	push   0x1
c00170f2:	e8 c3 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f7:	83 c4 0c             	add    esp,0xc
c00170fa:	6a 00                	push   0x0
c00170fc:	68 fa 67 01 c0       	push   0xc00167fa
c0017101:	6a 02                	push   0x2
c0017103:	e8 b2 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017108:	83 c4 0c             	add    esp,0xc
c001710b:	6a 00                	push   0x0
c001710d:	68 40 6d 01 c0       	push   0xc0016d40
c0017112:	6a 03                	push   0x3
c0017114:	e8 a1 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017119:	83 c4 0c             	add    esp,0xc
c001711c:	6a 00                	push   0x0
c001711e:	68 40 6d 01 c0       	push   0xc0016d40
c0017123:	6a 04                	push   0x4
c0017125:	e8 90 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001712a:	83 c4 0c             	add    esp,0xc
c001712d:	6a 00                	push   0x0
c001712f:	68 40 6d 01 c0       	push   0xc0016d40
c0017134:	6a 05                	push   0x5
c0017136:	e8 7f 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001713b:	83 c4 0c             	add    esp,0xc
c001713e:	6a 00                	push   0x0
c0017140:	68 74 6d 01 c0       	push   0xc0016d74
c0017145:	6a 06                	push   0x6
c0017147:	e8 6e 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001714c:	83 c4 0c             	add    esp,0xc
c001714f:	6a 00                	push   0x0
c0017151:	68 13 68 01 c0       	push   0xc0016813
c0017156:	6a 08                	push   0x8
c0017158:	e8 5d 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001715d:	83 c4 0c             	add    esp,0xc
c0017160:	6a 00                	push   0x0
c0017162:	68 40 6d 01 c0       	push   0xc0016d40
c0017167:	6a 09                	push   0x9
c0017169:	e8 4c 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001716e:	83 c4 0c             	add    esp,0xc
c0017171:	6a 00                	push   0x0
c0017173:	68 40 6d 01 c0       	push   0xc0016d40
c0017178:	6a 0a                	push   0xa
c001717a:	e8 3b 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c001717f:	83 c4 0c             	add    esp,0xc
c0017182:	6a 00                	push   0x0
c0017184:	68 40 6d 01 c0       	push   0xc0016d40
c0017189:	6a 0b                	push   0xb
c001718b:	e8 2a 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017190:	83 c4 0c             	add    esp,0xc
c0017193:	6a 00                	push   0x0
c0017195:	68 50 6c 01 c0       	push   0xc0016c50
c001719a:	6a 0d                	push   0xd
c001719c:	e8 19 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a1:	83 c4 0c             	add    esp,0xc
c00171a4:	6a 00                	push   0x0
c00171a6:	68 b7 6c 01 c0       	push   0xc0016cb7
c00171ab:	6a 0e                	push   0xe
c00171ad:	e8 08 51 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171b2:	83 c4 10             	add    esp,0x10
c00171b5:	50                   	push   eax
c00171b6:	6a 00                	push   0x0
c00171b8:	68 40 6d 01 c0       	push   0xc0016d40
c00171bd:	53                   	push   ebx
c00171be:	43                   	inc    ebx
c00171bf:	e8 f6 50 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171c4:	83 c4 10             	add    esp,0x10
c00171c7:	83 fb 1e             	cmp    ebx,0x1e
c00171ca:	75 e9                	jne    c00171b5 <HalInitialise()+0x137>
c00171cc:	50                   	push   eax
c00171cd:	6a 00                	push   0x0
c00171cf:	68 4e 1b 01 c0       	push   0xc0011b4e
c00171d4:	6a 60                	push   0x60
c00171d6:	e8 df 50 ff ff       	call   c000c2ba <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171db:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171e0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171ea:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171f1:	e8 96 08 ff ff       	call   c0007a8c <malloc>
c00171f6:	89 c3                	mov    ebx,eax
c00171f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00171fb:	e8 2e 09 00 00       	call   c0017b2e <RTC::RTC()>
c0017200:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001720a:	5a                   	pop    edx
c001720b:	59                   	pop    ecx
c001720c:	53                   	push   ebx
c001720d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017213:	e8 6e 4b ff ff       	call   c000bd86 <Device::addChild(Device*)>
c0017218:	8b 03                	mov    eax,DWORD PTR [ebx]
c001721a:	6a 00                	push   0x0
c001721c:	6a 00                	push   0x0
c001721e:	6a 00                	push   0x0
c0017220:	53                   	push   ebx
c0017221:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017224:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017229:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001722f:	83 c4 28             	add    esp,0x28
c0017232:	5b                   	pop    ebx
c0017233:	c3                   	ret    

c0017234 <HalMakeBeep(int)>:
c0017234:	53                   	push   ebx
c0017235:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017239:	85 db                	test   ebx,ebx
c001723b:	75 07                	jne    c0017244 <HalMakeBeep(int)+0x10>
c001723d:	e4 61                	in     al,0x61
c001723f:	83 e0 fc             	and    eax,0xfffffffc
c0017242:	eb 26                	jmp    c001726a <HalMakeBeep(int)+0x36>
c0017244:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017249:	99                   	cdq    
c001724a:	f7 fb                	idiv   ebx
c001724c:	89 c1                	mov    ecx,eax
c001724e:	b0 b6                	mov    al,0xb6
c0017250:	e6 43                	out    0x43,al
c0017252:	88 c8                	mov    al,cl
c0017254:	e6 42                	out    0x42,al
c0017256:	89 c8                	mov    eax,ecx
c0017258:	c1 e8 08             	shr    eax,0x8
c001725b:	e6 42                	out    0x42,al
c001725d:	e4 61                	in     al,0x61
c001725f:	89 c2                	mov    edx,eax
c0017261:	83 ca 03             	or     edx,0x3
c0017264:	38 d0                	cmp    al,dl
c0017266:	74 04                	je     c001726c <HalMakeBeep(int)+0x38>
c0017268:	88 d0                	mov    al,dl
c001726a:	e6 61                	out    0x61,al
c001726c:	5b                   	pop    ebx
c001726d:	c3                   	ret    

c001726e <HalGetRand()>:
c001726e:	31 c0                	xor    eax,eax
c0017270:	c3                   	ret    

c0017271 <HalEndOfInterrupt(int)>:
c0017271:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017278:	74 23                	je     c001729d <HalEndOfInterrupt(int)+0x2c>
c001727a:	83 ec 14             	sub    esp,0x14
c001727d:	6a 1b                	push   0x1b
c001727f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017285:	e8 24 fe fe ff       	call   c00070ae <Computer::rdmsr(unsigned int)>
c001728a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001728f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017299:	83 c4 1c             	add    esp,0x1c
c001729c:	c3                   	ret    
c001729d:	e9 42 02 00 00       	jmp    c00174e4 <picEOI(int)>

c00172a2 <HalRestart()>:
c00172a2:	c3                   	ret    

c00172a3 <HalShutdown()>:
c00172a3:	c3                   	ret    

c00172a4 <HalSleep()>:
c00172a4:	c3                   	ret    
c00172a5:	66 90                	xchg   ax,ax
c00172a7:	90                   	nop

c00172a8 <picIoWait()>:
c00172a8:	eb 00                	jmp    c00172aa <picIoWait()+0x2>
c00172aa:	eb 00                	jmp    c00172ac <picIoWait()+0x4>
c00172ac:	90                   	nop
c00172ad:	c3                   	ret    
c00172ae:	66 90                	xchg   ax,ax

c00172b0 <picDisable()>:
c00172b0:	83 ec 10             	sub    esp,0x10
c00172b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00172ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172c8:	ee                   	out    dx,al
c00172c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172de:	ee                   	out    dx,al
c00172df:	90                   	nop
c00172e0:	83 c4 10             	add    esp,0x10
c00172e3:	c3                   	ret    

c00172e4 <picGetIRQReg(int)>:
c00172e4:	83 ec 10             	sub    esp,0x10
c00172e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172eb:	0f b6 c0             	movzx  eax,al
c00172ee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172f5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172f9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00172fd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017302:	ee                   	out    dx,al
c0017303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017307:	0f b6 c0             	movzx  eax,al
c001730a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017311:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017315:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017319:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001731e:	ee                   	out    dx,al
c001731f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017326:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001732b:	89 c2                	mov    edx,eax
c001732d:	ec                   	in     al,dx
c001732e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017332:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017336:	0f b6 c0             	movzx  eax,al
c0017339:	c1 e0 08             	shl    eax,0x8
c001733c:	89 c1                	mov    ecx,eax
c001733e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017345:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001734a:	89 c2                	mov    edx,eax
c001734c:	ec                   	in     al,dx
c001734d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017351:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017355:	0f b6 c0             	movzx  eax,al
c0017358:	09 c8                	or     eax,ecx
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	c3                   	ret    
c001735e:	66 90                	xchg   ax,ax

c0017360 <picOpen()>:
c0017360:	83 ec 50             	sub    esp,0x50
c0017363:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001736a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001736f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017373:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017377:	ee                   	out    dx,al
c0017378:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001737f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017384:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017388:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001738c:	ee                   	out    dx,al
c001738d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017395:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001739d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00173a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173a8:	89 c2                	mov    edx,eax
c00173aa:	ec                   	in     al,dx
c00173ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00173af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00173b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00173b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173c2:	89 c2                	mov    edx,eax
c00173c4:	ec                   	in     al,dx
c00173c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173e5:	ee                   	out    dx,al
c00173e6:	e8 bd fe ff ff       	call   c00172a8 <picIoWait()>
c00173eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00173ff:	ee                   	out    dx,al
c0017400:	e8 a3 fe ff ff       	call   c00172a8 <picIoWait()>
c0017405:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017409:	0f b6 c0             	movzx  eax,al
c001740c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017413:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017417:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001741b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001741f:	ee                   	out    dx,al
c0017420:	e8 83 fe ff ff       	call   c00172a8 <picIoWait()>
c0017425:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017429:	0f b6 c0             	movzx  eax,al
c001742c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017433:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017437:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001743b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001743f:	ee                   	out    dx,al
c0017440:	e8 63 fe ff ff       	call   c00172a8 <picIoWait()>
c0017445:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001744c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017451:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017455:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017459:	ee                   	out    dx,al
c001745a:	e8 49 fe ff ff       	call   c00172a8 <picIoWait()>
c001745f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017466:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001746b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001746f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017473:	ee                   	out    dx,al
c0017474:	e8 2f fe ff ff       	call   c00172a8 <picIoWait()>
c0017479:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017480:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017485:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017489:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001748d:	ee                   	out    dx,al
c001748e:	e8 15 fe ff ff       	call   c00172a8 <picIoWait()>
c0017493:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001749a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001749f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00174a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174a7:	ee                   	out    dx,al
c00174a8:	e8 fb fd ff ff       	call   c00172a8 <picIoWait()>
c00174ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00174b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00174b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174c5:	ee                   	out    dx,al
c00174c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174de:	ee                   	out    dx,al
c00174df:	90                   	nop
c00174e0:	83 c4 50             	add    esp,0x50
c00174e3:	c3                   	ret    

c00174e4 <picEOI(int)>:
c00174e4:	83 ec 10             	sub    esp,0x10
c00174e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174ec:	75 1e                	jne    c001750c <picEOI(int)+0x28>
c00174ee:	6a 0b                	push   0xb
c00174f0:	e8 ef fd ff ff       	call   c00172e4 <picGetIRQReg(int)>
c00174f5:	83 c4 04             	add    esp,0x4
c00174f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00174fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0017502:	25 80 00 00 00       	and    eax,0x80
c0017507:	74 73                	je     c001757c <picEOI(int)+0x98>
c0017509:	8d 76 00             	lea    esi,[esi+0x0]
c001750c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0017511:	75 31                	jne    c0017544 <picEOI(int)+0x60>
c0017513:	6a 0b                	push   0xb
c0017515:	e8 ca fd ff ff       	call   c00172e4 <picGetIRQReg(int)>
c001751a:	83 c4 04             	add    esp,0x4
c001751d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017526:	98                   	cwde   
c0017527:	85 c0                	test   eax,eax
c0017529:	78 19                	js     c0017544 <picEOI(int)+0x60>
c001752b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017532:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0017537:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001753b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017540:	ee                   	out    dx,al
c0017541:	eb 3d                	jmp    c0017580 <picEOI(int)+0x9c>
c0017543:	90                   	nop
c0017544:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017549:	7e 19                	jle    c0017564 <picEOI(int)+0x80>
c001754b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017552:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0017557:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001755b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017560:	ee                   	out    dx,al
c0017561:	8d 76 00             	lea    esi,[esi+0x0]
c0017564:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001756b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017570:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017574:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017579:	ee                   	out    dx,al
c001757a:	eb 04                	jmp    c0017580 <picEOI(int)+0x9c>
c001757c:	90                   	nop
c001757d:	8d 76 00             	lea    esi,[esi+0x0]
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	c3                   	ret    

c0017584 <RTC::open(int, int, void*)>:
c0017584:	31 c0                	xor    eax,eax
c0017586:	c3                   	ret    
c0017587:	90                   	nop

c0017588 <RTC::close(int, int, void*)>:
c0017588:	31 c0                	xor    eax,eax
c001758a:	c3                   	ret    
c001758b:	90                   	nop

c001758c <RTC::timeInSecondsUTC()>:
c001758c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017590:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017596:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001759c:	c3                   	ret    
c001759d:	90                   	nop

c001759e <RTC::timeInDatetimeUTC()>:
c001759e:	53                   	push   ebx
c001759f:	83 ec 14             	sub    esp,0x14
c00175a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00175aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00175ac:	50                   	push   eax
c00175ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00175b0:	83 c4 0c             	add    esp,0xc
c00175b3:	52                   	push   edx
c00175b4:	50                   	push   eax
c00175b5:	53                   	push   ebx
c00175b6:	e8 43 45 ff ff       	call   c000bafe <secondsToDatetime(unsigned long long)>
c00175bb:	83 c4 14             	add    esp,0x14
c00175be:	89 d8                	mov    eax,ebx
c00175c0:	5b                   	pop    ebx
c00175c1:	c2 04 00             	ret    0x4

c00175c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175c4:	56                   	push   esi
c00175c5:	53                   	push   ebx
c00175c6:	83 ec 14             	sub    esp,0x14
c00175c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175d6:	52                   	push   edx
c00175d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175df:	50                   	push   eax
c00175e0:	e8 19 45 ff ff       	call   c000bafe <secondsToDatetime(unsigned long long)>
c00175e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175f9:	83 c4 20             	add    esp,0x20
c00175fc:	89 f0                	mov    eax,esi
c00175fe:	5b                   	pop    ebx
c00175ff:	5e                   	pop    esi
c0017600:	ff e0                	jmp    eax

c0017602 <RTC::~RTC()>:
c0017602:	83 ec 0c             	sub    esp,0xc
c0017605:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c001760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760e:	89 10                	mov    DWORD PTR [eax],edx
c0017610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017614:	83 ec 0c             	sub    esp,0xc
c0017617:	50                   	push   eax
c0017618:	e8 73 42 ff ff       	call   c000b890 <Clock::~Clock()>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	90                   	nop
c0017621:	83 c4 0c             	add    esp,0xc
c0017624:	c3                   	ret    
c0017625:	90                   	nop

c0017626 <RTC::~RTC()>:
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	83 ec 0c             	sub    esp,0xc
c001762c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017630:	e8 cd ff ff ff       	call   c0017602 <RTC::~RTC()>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	83 ec 08             	sub    esp,0x8
c001763b:	68 60 01 00 00       	push   0x160
c0017640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017644:	e8 0e 32 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c0017649:	83 c4 10             	add    esp,0x10
c001764c:	83 c4 0c             	add    esp,0xc
c001764f:	c3                   	ret    

c0017650 <RTC::get_update_in_progress_flag()>:
c0017650:	83 ec 14             	sub    esp,0x14
c0017653:	6a 0a                	push   0xa
c0017655:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001765b:	e8 06 fb fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017660:	83 c4 1c             	add    esp,0x1c
c0017663:	0f b6 c0             	movzx  eax,al
c0017666:	c1 e8 07             	shr    eax,0x7
c0017669:	c3                   	ret    

c001766a <RTC::completeRTCRefresh()>:
c001766a:	55                   	push   ebp
c001766b:	57                   	push   edi
c001766c:	56                   	push   esi
c001766d:	53                   	push   ebx
c001766e:	83 ec 3c             	sub    esp,0x3c
c0017671:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017677:	83 ec 0c             	sub    esp,0xc
c001767a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001767e:	e8 cd ff ff ff       	call   c0017650 <RTC::get_update_in_progress_flag()>
c0017683:	83 c4 10             	add    esp,0x10
c0017686:	84 c0                	test   al,al
c0017688:	74 0e                	je     c0017698 <RTC::completeRTCRefresh()+0x2e>
c001768a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017690:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017696:	73 df                	jae    c0017677 <RTC::completeRTCRefresh()+0xd>
c0017698:	51                   	push   ecx
c0017699:	51                   	push   ecx
c001769a:	6a 00                	push   0x0
c001769c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176a2:	e8 bf fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00176a7:	5b                   	pop    ebx
c00176a8:	89 c7                	mov    edi,eax
c00176aa:	5e                   	pop    esi
c00176ab:	6a 02                	push   0x2
c00176ad:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b3:	e8 ae fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00176b8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176bc:	5d                   	pop    ebp
c00176bd:	58                   	pop    eax
c00176be:	6a 04                	push   0x4
c00176c0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176c6:	e8 9b fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00176cb:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00176cf:	58                   	pop    eax
c00176d0:	5a                   	pop    edx
c00176d1:	6a 07                	push   0x7
c00176d3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d9:	e8 88 fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00176de:	88 44 24 36          	mov    BYTE PTR [esp+0x36],al
c00176e2:	59                   	pop    ecx
c00176e3:	5b                   	pop    ebx
c00176e4:	6a 08                	push   0x8
c00176e6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ec:	e8 75 fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00176f1:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c00176f5:	5e                   	pop    esi
c00176f6:	5d                   	pop    ebp
c00176f7:	6a 09                	push   0x9
c00176f9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176ff:	e8 62 fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017704:	0f b6 c0             	movzx  eax,al
c0017707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001770b:	83 c4 10             	add    esp,0x10
c001770e:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001771b:	e8 30 ff ff ff       	call   c0017650 <RTC::get_update_in_progress_flag()>
c0017720:	83 c4 10             	add    esp,0x10
c0017723:	84 c0                	test   al,al
c0017725:	74 0e                	je     c0017735 <RTC::completeRTCRefresh()+0xcb>
c0017727:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001772d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017733:	73 df                	jae    c0017714 <RTC::completeRTCRefresh()+0xaa>
c0017735:	51                   	push   ecx
c0017736:	51                   	push   ecx
c0017737:	6a 00                	push   0x0
c0017739:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001773f:	e8 22 fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017744:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017748:	5b                   	pop    ebx
c0017749:	5e                   	pop    esi
c001774a:	6a 02                	push   0x2
c001774c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017752:	e8 0f fa fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017757:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001775b:	5d                   	pop    ebp
c001775c:	58                   	pop    eax
c001775d:	6a 04                	push   0x4
c001775f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017765:	e8 fc f9 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c001776a:	88 c3                	mov    bl,al
c001776c:	58                   	pop    eax
c001776d:	5a                   	pop    edx
c001776e:	6a 07                	push   0x7
c0017770:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017776:	e8 eb f9 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c001777b:	59                   	pop    ecx
c001777c:	89 c6                	mov    esi,eax
c001777e:	5d                   	pop    ebp
c001777f:	6a 08                	push   0x8
c0017781:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017787:	e8 da f9 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c001778c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017790:	58                   	pop    eax
c0017791:	5a                   	pop    edx
c0017792:	6a 09                	push   0x9
c0017794:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001779a:	e8 c7 f9 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c001779f:	89 f9                	mov    ecx,edi
c00177a1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00177a5:	83 c4 10             	add    esp,0x10
c00177a8:	0f b6 e8             	movzx  ebp,al
c00177ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00177b0:	38 4c 24 0c          	cmp    BYTE PTR [esp+0xc],cl
c00177b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00177b8:	74 27                	je     c00177e1 <RTC::completeRTCRefresh()+0x177>
c00177ba:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00177be:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
c00177c2:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00177c6:	89 f0                	mov    eax,esi
c00177c8:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c00177cc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177d0:	88 5c 24 20          	mov    BYTE PTR [esp+0x20],bl
c00177d4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00177d8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00177dc:	e9 2d ff ff ff       	jmp    c001770e <RTC::completeRTCRefresh()+0xa4>
c00177e1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177e5:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00177ea:	3a 44 24 1c          	cmp    al,BYTE PTR [esp+0x1c]
c00177ee:	75 ca                	jne    c00177ba <RTC::completeRTCRefresh()+0x150>
c00177f0:	89 f0                	mov    eax,esi
c00177f2:	3a 5c 24 20          	cmp    bl,BYTE PTR [esp+0x20]
c00177f6:	0f b6 c0             	movzx  eax,al
c00177f9:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c00177fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017802:	89 f0                	mov    eax,esi
c0017804:	0f 94 c2             	sete   dl
c0017807:	3a 44 24 26          	cmp    al,BYTE PTR [esp+0x26]
c001780b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001780f:	0f 94 c0             	sete   al
c0017812:	21 d0                	and    eax,edx
c0017814:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0017818:	31 d2                	xor    edx,edx
c001781a:	3a 4c 24 27          	cmp    cl,BYTE PTR [esp+0x27]
c001781e:	0f 94 c2             	sete   dl
c0017821:	85 c2                	test   edx,eax
c0017823:	74 95                	je     c00177ba <RTC::completeRTCRefresh()+0x150>
c0017825:	39 6c 24 28          	cmp    DWORD PTR [esp+0x28],ebp
c0017829:	75 8f                	jne    c00177ba <RTC::completeRTCRefresh()+0x150>
c001782b:	52                   	push   edx
c001782c:	52                   	push   edx
c001782d:	6a 0b                	push   0xb
c001782f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017835:	e8 2c f9 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c001783a:	83 c4 10             	add    esp,0x10
c001783d:	a8 04                	test   al,0x4
c001783f:	75 77                	jne    c00178b8 <RTC::completeRTCRefresh()+0x24e>
c0017841:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017845:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017849:	c1 ea 04             	shr    edx,0x4
c001784c:	83 e1 0f             	and    ecx,0xf
c001784f:	6b d2 0a             	imul   edx,edx,0xa
c0017852:	c1 ef 04             	shr    edi,0x4
c0017855:	01 d1                	add    ecx,edx
c0017857:	6b d7 0a             	imul   edx,edi,0xa
c001785a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001785e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017862:	83 e1 0f             	and    ecx,0xf
c0017865:	83 e6 0f             	and    esi,0xf
c0017868:	c1 ed 04             	shr    ebp,0x4
c001786b:	01 d1                	add    ecx,edx
c001786d:	0f b6 d3             	movzx  edx,bl
c0017870:	c1 ea 04             	shr    edx,0x4
c0017873:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017877:	83 e2 07             	and    edx,0x7
c001787a:	89 d9                	mov    ecx,ebx
c001787c:	6b d2 0a             	imul   edx,edx,0xa
c001787f:	83 e1 0f             	and    ecx,0xf
c0017882:	83 e3 80             	and    ebx,0xffffff80
c0017885:	01 d1                	add    ecx,edx
c0017887:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001788b:	c1 ea 04             	shr    edx,0x4
c001788e:	09 cb                	or     ebx,ecx
c0017890:	6b d2 0a             	imul   edx,edx,0xa
c0017893:	01 d6                	add    esi,edx
c0017895:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017899:	c1 ea 04             	shr    edx,0x4
c001789c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00178a0:	6b d2 0a             	imul   edx,edx,0xa
c00178a3:	6b ed 0a             	imul   ebp,ebp,0xa
c00178a6:	83 e1 0f             	and    ecx,0xf
c00178a9:	01 d1                	add    ecx,edx
c00178ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00178af:	83 e2 0f             	and    edx,0xf
c00178b2:	88 4c 24 14          	mov    BYTE PTR [esp+0x14],cl
c00178b6:	01 d5                	add    ebp,edx
c00178b8:	a8 02                	test   al,0x2
c00178ba:	75 15                	jne    c00178d1 <RTC::completeRTCRefresh()+0x267>
c00178bc:	f6 c3 80             	test   bl,0x80
c00178bf:	74 10                	je     c00178d1 <RTC::completeRTCRefresh()+0x267>
c00178c1:	83 e3 7f             	and    ebx,0x7f
c00178c4:	b9 18 00 00 00       	mov    ecx,0x18
c00178c9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178cc:	99                   	cdq    
c00178cd:	f7 f9                	idiv   ecx
c00178cf:	88 d3                	mov    bl,dl
c00178d1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178d7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178dd:	77 06                	ja     c00178e5 <RTC::completeRTCRefresh()+0x27b>
c00178df:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178e5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00178ea:	31 c9                	xor    ecx,ecx
c00178ec:	31 d2                	xor    edx,edx
c00178ee:	c1 e0 10             	shl    eax,0x10
c00178f1:	89 cd                	mov    ebp,ecx
c00178f3:	c1 e7 10             	shl    edi,0x10
c00178f6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00178fc:	09 c5                	or     ebp,eax
c00178fe:	89 f0                	mov    eax,esi
c0017900:	88 c2                	mov    dl,al
c0017902:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017906:	8a 74 24 14          	mov    dh,BYTE PTR [esp+0x14]
c001790a:	89 e9                	mov    ecx,ebp
c001790c:	0f b7 c2             	movzx  eax,dx
c001790f:	09 f8                	or     eax,edi
c0017911:	8a 6c 24 10          	mov    ch,BYTE PTR [esp+0x10]
c0017915:	89 c2                	mov    edx,eax
c0017917:	50                   	push   eax
c0017918:	50                   	push   eax
c0017919:	88 d9                	mov    cl,bl
c001791b:	51                   	push   ecx
c001791c:	52                   	push   edx
c001791d:	e8 5d 40 ff ff       	call   c000b97f <datetimeToSeconds(datetime_t)>
c0017922:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0017926:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001792c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017932:	83 c4 4c             	add    esp,0x4c
c0017935:	5b                   	pop    ebx
c0017936:	5e                   	pop    esi
c0017937:	5f                   	pop    edi
c0017938:	5d                   	pop    ebp
c0017939:	c3                   	ret    

c001793a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001793a:	55                   	push   ebp
c001793b:	57                   	push   edi
c001793c:	56                   	push   esi
c001793d:	53                   	push   ebx
c001793e:	83 ec 30             	sub    esp,0x30
c0017941:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017945:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017949:	6a 00                	push   0x0
c001794b:	6a 00                	push   0x0
c001794d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017953:	e8 14 f9 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017958:	83 c4 0c             	add    esp,0xc
c001795b:	6a 00                	push   0x0
c001795d:	6a 02                	push   0x2
c001795f:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017965:	e8 02 f9 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c001796a:	89 f8                	mov    eax,edi
c001796c:	0f b6 c4             	movzx  eax,ah
c001796f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017973:	89 f0                	mov    eax,esi
c0017975:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017979:	89 f0                	mov    eax,esi
c001797b:	0f b6 c4             	movzx  eax,ah
c001797e:	89 f9                	mov    ecx,edi
c0017980:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017984:	c1 e9 10             	shr    ecx,0x10
c0017987:	89 f0                	mov    eax,esi
c0017989:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001798d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017991:	c1 e8 10             	shr    eax,0x10
c0017994:	b9 64 00 00 00       	mov    ecx,0x64
c0017999:	31 d2                	xor    edx,edx
c001799b:	f7 f1                	div    ecx
c001799d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00179a1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00179a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00179a9:	59                   	pop    ecx
c00179aa:	5b                   	pop    ebx
c00179ab:	89 fb                	mov    ebx,edi
c00179ad:	6a 0b                	push   0xb
c00179af:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179b5:	e8 ac f7 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c00179ba:	83 c4 10             	add    esp,0x10
c00179bd:	89 c5                	mov    ebp,eax
c00179bf:	a8 04                	test   al,0x4
c00179c1:	75 6e                	jne    c0017a31 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179c7:	31 d2                	xor    edx,edx
c00179c9:	0f b6 c1             	movzx  eax,cl
c00179cc:	b9 0a 00 00 00       	mov    ecx,0xa
c00179d1:	f7 f1                	div    ecx
c00179d3:	c1 e0 04             	shl    eax,0x4
c00179d6:	09 d0                	or     eax,edx
c00179d8:	31 d2                	xor    edx,edx
c00179da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179e3:	f7 f1                	div    ecx
c00179e5:	c1 e0 04             	shl    eax,0x4
c00179e8:	09 d0                	or     eax,edx
c00179ea:	31 d2                	xor    edx,edx
c00179ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f0:	0f b6 c3             	movzx  eax,bl
c00179f3:	f7 f1                	div    ecx
c00179f5:	c1 e0 04             	shl    eax,0x4
c00179f8:	09 d0                	or     eax,edx
c00179fa:	31 d2                	xor    edx,edx
c00179fc:	89 c3                	mov    ebx,eax
c00179fe:	89 f0                	mov    eax,esi
c0017a00:	0f b6 c0             	movzx  eax,al
c0017a03:	f7 f1                	div    ecx
c0017a05:	c1 e0 04             	shl    eax,0x4
c0017a08:	09 d0                	or     eax,edx
c0017a0a:	31 d2                	xor    edx,edx
c0017a0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a15:	f7 f1                	div    ecx
c0017a17:	c1 e0 04             	shl    eax,0x4
c0017a1a:	09 d0                	or     eax,edx
c0017a1c:	31 d2                	xor    edx,edx
c0017a1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a26:	f7 f1                	div    ecx
c0017a28:	c1 e0 04             	shl    eax,0x4
c0017a2b:	09 d0                	or     eax,edx
c0017a2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a31:	83 e5 02             	and    ebp,0x2
c0017a34:	75 1e                	jne    c0017a54 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a36:	0f b6 c3             	movzx  eax,bl
c0017a39:	83 f8 0b             	cmp    eax,0xb
c0017a3c:	76 10                	jbe    c0017a4e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a3e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a41:	88 d3                	mov    bl,dl
c0017a43:	84 d2                	test   dl,dl
c0017a45:	75 02                	jne    c0017a49 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a47:	b3 0c                	mov    bl,0xc
c0017a49:	83 cb 80             	or     ebx,0xffffff80
c0017a4c:	eb 06                	jmp    c0017a54 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a4e:	85 c0                	test   eax,eax
c0017a50:	75 02                	jne    c0017a54 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a52:	b3 0c                	mov    bl,0xc
c0017a54:	50                   	push   eax
c0017a55:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a5a:	52                   	push   edx
c0017a5b:	6a 00                	push   0x0
c0017a5d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a63:	e8 04 f8 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a68:	83 c4 0c             	add    esp,0xc
c0017a6b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a70:	50                   	push   eax
c0017a71:	6a 02                	push   0x2
c0017a73:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a79:	e8 ee f7 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a7e:	83 c4 0c             	add    esp,0xc
c0017a81:	0f b6 db             	movzx  ebx,bl
c0017a84:	53                   	push   ebx
c0017a85:	6a 04                	push   0x4
c0017a87:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a8d:	e8 da f7 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a92:	83 c4 0c             	add    esp,0xc
c0017a95:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a9a:	52                   	push   edx
c0017a9b:	6a 07                	push   0x7
c0017a9d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aa3:	e8 c4 f7 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017aa8:	83 c4 0c             	add    esp,0xc
c0017aab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017ab0:	50                   	push   eax
c0017ab1:	6a 08                	push   0x8
c0017ab3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ab9:	e8 ae f7 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017abe:	83 c4 0c             	add    esp,0xc
c0017ac1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017ac6:	55                   	push   ebp
c0017ac7:	6a 09                	push   0x9
c0017ac9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017acf:	e8 98 f7 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ad4:	5a                   	pop    edx
c0017ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017ad9:	e8 8c fb ff ff       	call   c001766a <RTC::completeRTCRefresh()>
c0017ade:	83 c4 3c             	add    esp,0x3c
c0017ae1:	5b                   	pop    ebx
c0017ae2:	b0 01                	mov    al,0x1
c0017ae4:	5e                   	pop    esi
c0017ae5:	5f                   	pop    edi
c0017ae6:	5d                   	pop    ebp
c0017ae7:	c3                   	ret    

c0017ae8 <rtcIRQHandler(regs*, void*)>:
c0017ae8:	53                   	push   ebx
c0017ae9:	83 ec 10             	sub    esp,0x10
c0017aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017af0:	6a 0c                	push   0xc
c0017af2:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017af8:	e8 69 f6 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	a8 80                	test   al,0x80
c0017b02:	74 24                	je     c0017b28 <rtcIRQHandler(regs*, void*)+0x40>
c0017b04:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017b0b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b12:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017b19:	75 0d                	jne    c0017b28 <rtcIRQHandler(regs*, void*)+0x40>
c0017b1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b1f:	83 c4 08             	add    esp,0x8
c0017b22:	5b                   	pop    ebx
c0017b23:	e9 42 fb ff ff       	jmp    c001766a <RTC::completeRTCRefresh()>
c0017b28:	83 c4 08             	add    esp,0x8
c0017b2b:	5b                   	pop    ebx
c0017b2c:	c3                   	ret    
c0017b2d:	90                   	nop

c0017b2e <RTC::RTC()>:
c0017b2e:	83 ec 1c             	sub    esp,0x1c
c0017b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b35:	83 ec 08             	sub    esp,0x8
c0017b38:	68 6f 15 02 c0       	push   0xc002156f
c0017b3d:	50                   	push   eax
c0017b3e:	e8 17 3d ff ff       	call   c000b85a <Clock::Clock(char const*)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c0017b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4f:	89 10                	mov    DWORD PTR [eax],edx
c0017b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b55:	83 ec 0c             	sub    esp,0xc
c0017b58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b5c:	6a 01                	push   0x1
c0017b5e:	68 e8 7a 01 c0       	push   0xc0017ae8
c0017b63:	6a 08                	push   0x8
c0017b65:	50                   	push   eax
c0017b66:	e8 c7 41 ff ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b6b:	83 c4 20             	add    esp,0x20
c0017b6e:	89 c2                	mov    edx,eax
c0017b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b74:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b7a:	fa                   	cli    
c0017b7b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b80:	83 c0 01             	add    eax,0x1
c0017b83:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b88:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b8d:	83 ec 08             	sub    esp,0x8
c0017b90:	6a 0b                	push   0xb
c0017b92:	50                   	push   eax
c0017b93:	e8 ce f5 fe ff       	call   c0007166 <Computer::readCMOS(unsigned char)>
c0017b98:	83 c4 10             	add    esp,0x10
c0017b9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b9f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017ba4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017ba8:	83 ca 10             	or     edx,0x10
c0017bab:	0f b6 d2             	movzx  edx,dl
c0017bae:	83 ec 04             	sub    esp,0x4
c0017bb1:	52                   	push   edx
c0017bb2:	6a 0b                	push   0xb
c0017bb4:	50                   	push   eax
c0017bb5:	e8 b2 f6 fe ff       	call   c000726c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bc4:	e8 a1 fa ff ff       	call   c001766a <RTC::completeRTCRefresh()>
c0017bc9:	83 c4 10             	add    esp,0x10
c0017bcc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bd1:	83 e8 01             	sub    eax,0x1
c0017bd4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bd9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bde:	85 c0                	test   eax,eax
c0017be0:	75 01                	jne    c0017be3 <RTC::RTC()+0xb5>
c0017be2:	fb                   	sti    
c0017be3:	90                   	nop
c0017be4:	83 c4 1c             	add    esp,0x1c
c0017be7:	c3                   	ret    

c0017be8 <HalConsoleScroll(int, int)>:
c0017be8:	83 ec 10             	sub    esp,0x10
c0017beb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017bf3:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017bfb:	90                   	nop
c0017bfc:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c01:	0f 8f e1 00 00 00    	jg     c0017ce8 <HalConsoleScroll(int, int)+0x100>
c0017c07:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c0f:	90                   	nop
c0017c10:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c18:	0f 8f be 00 00 00    	jg     c0017cdc <HalConsoleScroll(int, int)+0xf4>
c0017c1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c22:	89 d0                	mov    eax,edx
c0017c24:	c1 e0 02             	shl    eax,0x2
c0017c27:	01 d0                	add    eax,edx
c0017c29:	c1 e0 05             	shl    eax,0x5
c0017c2c:	89 c2                	mov    edx,eax
c0017c2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c32:	01 d0                	add    eax,edx
c0017c34:	89 c2                	mov    edx,eax
c0017c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c3a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c41:	89 d0                	mov    eax,edx
c0017c43:	c1 e0 02             	shl    eax,0x2
c0017c46:	01 d0                	add    eax,edx
c0017c48:	c1 e0 05             	shl    eax,0x5
c0017c4b:	89 c2                	mov    edx,eax
c0017c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c51:	01 d0                	add    eax,edx
c0017c53:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c5d:	01 c2                	add    edx,eax
c0017c5f:	8a 01                	mov    al,BYTE PTR [ecx]
c0017c61:	88 02                	mov    BYTE PTR [edx],al
c0017c63:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c68:	75 66                	jne    c0017cd0 <HalConsoleScroll(int, int)+0xe8>
c0017c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c6e:	83 e0 01             	and    eax,0x1
c0017c71:	74 39                	je     c0017cac <HalConsoleScroll(int, int)+0xc4>
c0017c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c77:	83 e0 0f             	and    eax,0xf
c0017c7a:	88 c2                	mov    dl,al
c0017c7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c80:	c1 e0 04             	shl    eax,0x4
c0017c83:	09 d0                	or     eax,edx
c0017c85:	88 c1                	mov    cl,al
c0017c87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c8b:	89 d0                	mov    eax,edx
c0017c8d:	c1 e0 02             	shl    eax,0x2
c0017c90:	01 d0                	add    eax,edx
c0017c92:	c1 e0 05             	shl    eax,0x5
c0017c95:	89 c2                	mov    edx,eax
c0017c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c9b:	01 d0                	add    eax,edx
c0017c9d:	89 c2                	mov    edx,eax
c0017c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca3:	01 d0                	add    eax,edx
c0017ca5:	88 ca                	mov    dl,cl
c0017ca7:	88 10                	mov    BYTE PTR [eax],dl
c0017ca9:	eb 25                	jmp    c0017cd0 <HalConsoleScroll(int, int)+0xe8>
c0017cab:	90                   	nop
c0017cac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cb0:	89 d0                	mov    eax,edx
c0017cb2:	c1 e0 02             	shl    eax,0x2
c0017cb5:	01 d0                	add    eax,edx
c0017cb7:	c1 e0 05             	shl    eax,0x5
c0017cba:	89 c2                	mov    edx,eax
c0017cbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc0:	01 d0                	add    eax,edx
c0017cc2:	89 c2                	mov    edx,eax
c0017cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cc8:	01 d0                	add    eax,edx
c0017cca:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cd5:	e9 36 ff ff ff       	jmp    c0017c10 <HalConsoleScroll(int, int)+0x28>
c0017cda:	66 90                	xchg   ax,ax
c0017cdc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017ce1:	e9 16 ff ff ff       	jmp    c0017bfc <HalConsoleScroll(int, int)+0x14>
c0017ce6:	66 90                	xchg   ax,ax
c0017ce8:	90                   	nop
c0017ce9:	83 c4 10             	add    esp,0x10
c0017cec:	c3                   	ret    
c0017ced:	8d 76 00             	lea    esi,[esi+0x0]

c0017cf0 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017cf0:	83 ec 14             	sub    esp,0x14
c0017cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cf7:	88 04 24             	mov    BYTE PTR [esp],al
c0017cfa:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017cfd:	0f b6 c0             	movzx  eax,al
c0017d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d04:	89 d1                	mov    ecx,edx
c0017d06:	83 e1 0f             	and    ecx,0xf
c0017d09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d0d:	c1 e2 04             	shl    edx,0x4
c0017d10:	0f b6 d2             	movzx  edx,dl
c0017d13:	09 ca                	or     edx,ecx
c0017d15:	c1 e2 08             	shl    edx,0x8
c0017d18:	09 d0                	or     eax,edx
c0017d1a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d1f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d2b:	89 d0                	mov    eax,edx
c0017d2d:	c1 e0 02             	shl    eax,0x2
c0017d30:	01 d0                	add    eax,edx
c0017d32:	c1 e0 04             	shl    eax,0x4
c0017d35:	89 c2                	mov    edx,eax
c0017d37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3b:	01 d0                	add    eax,edx
c0017d3d:	d1 e0                	shl    eax,1
c0017d3f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d43:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d47:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017d4c:	66 89 02             	mov    WORD PTR [edx],ax
c0017d4f:	90                   	nop
c0017d50:	83 c4 14             	add    esp,0x14
c0017d53:	c3                   	ret    

c0017d54 <HalConsoleCursorUpdate(int, int)>:
c0017d54:	83 ec 20             	sub    esp,0x20
c0017d57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d5b:	89 c2                	mov    edx,eax
c0017d5d:	c1 e2 02             	shl    edx,0x2
c0017d60:	01 d0                	add    eax,edx
c0017d62:	c1 e0 04             	shl    eax,0x4
c0017d65:	89 c2                	mov    edx,eax
c0017d67:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d6b:	01 d0                	add    eax,edx
c0017d6d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d72:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d79:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d7e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d86:	ee                   	out    dx,al
c0017d87:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d8c:	0f b6 c0             	movzx  eax,al
c0017d8f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d96:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d9a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017da2:	ee                   	out    dx,al
c0017da3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017daa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017daf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017db3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017db7:	ee                   	out    dx,al
c0017db8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017dbd:	c1 e8 08             	shr    eax,0x8
c0017dc0:	0f b6 c0             	movzx  eax,al
c0017dc3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017dca:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dce:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dd2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dd6:	ee                   	out    dx,al
c0017dd7:	90                   	nop
c0017dd8:	83 c4 20             	add    esp,0x20
c0017ddb:	c3                   	ret    

c0017ddc <FAT::getName()>:
c0017ddc:	b8 c0 15 02 c0       	mov    eax,0xc00215c0
c0017de1:	c3                   	ret    
c0017de2:	66 90                	xchg   ax,ax

c0017de4 <FAT::tell(void*, unsigned long long*)>:
c0017de4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017de9:	75 09                	jne    c0017df4 <FAT::tell(void*, unsigned long long*)+0x10>
c0017deb:	b8 04 00 00 00       	mov    eax,0x4
c0017df0:	c3                   	ret    
c0017df1:	8d 76 00             	lea    esi,[esi+0x0]
c0017df4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017df9:	75 09                	jne    c0017e04 <FAT::tell(void*, unsigned long long*)+0x20>
c0017dfb:	b8 04 00 00 00       	mov    eax,0x4
c0017e00:	c3                   	ret    
c0017e01:	8d 76 00             	lea    esi,[esi+0x0]
c0017e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e08:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017e0b:	ba 00 00 00 00       	mov    edx,0x0
c0017e10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e14:	89 01                	mov    DWORD PTR [ecx],eax
c0017e16:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e19:	b8 00 00 00 00       	mov    eax,0x0
c0017e1e:	c3                   	ret    
c0017e1f:	90                   	nop

c0017e20 <FAT::stat(void*, unsigned long long*)>:
c0017e20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e25:	75 09                	jne    c0017e30 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e27:	b8 04 00 00 00       	mov    eax,0x4
c0017e2c:	c3                   	ret    
c0017e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e35:	75 09                	jne    c0017e40 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e37:	b8 04 00 00 00       	mov    eax,0x4
c0017e3c:	c3                   	ret    
c0017e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e47:	ba 00 00 00 00       	mov    edx,0x0
c0017e4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e50:	89 01                	mov    DWORD PTR [ecx],eax
c0017e52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e55:	b8 00 00 00 00       	mov    eax,0x0
c0017e5a:	c3                   	ret    
c0017e5b:	90                   	nop

c0017e5c <FAT::~FAT()>:
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c0017e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e68:	89 10                	mov    DWORD PTR [eax],edx
c0017e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e6e:	83 ec 0c             	sub    esp,0xc
c0017e71:	50                   	push   eax
c0017e72:	e8 23 2e ff ff       	call   c000ac9a <Filesystem::~Filesystem()>
c0017e77:	83 c4 10             	add    esp,0x10
c0017e7a:	90                   	nop
c0017e7b:	83 c4 0c             	add    esp,0xc
c0017e7e:	c3                   	ret    
c0017e7f:	90                   	nop

c0017e80 <FAT::~FAT()>:
c0017e80:	83 ec 0c             	sub    esp,0xc
c0017e83:	83 ec 0c             	sub    esp,0xc
c0017e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e8a:	e8 cd ff ff ff       	call   c0017e5c <FAT::~FAT()>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	83 ec 08             	sub    esp,0x8
c0017e95:	6a 08                	push   0x8
c0017e97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e9b:	e8 b7 29 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	83 c4 0c             	add    esp,0xc
c0017ea6:	c3                   	ret    
c0017ea7:	90                   	nop

c0017ea8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017ea8:	83 ec 1c             	sub    esp,0x1c
c0017eab:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017eb2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017eb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebb:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017ec2:	83 f8 ff             	cmp    eax,0xffffffff
c0017ec5:	75 35                	jne    c0017efc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ec7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ecb:	88 c2                	mov    dl,al
c0017ecd:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ed2:	01 d0                	add    eax,edx
c0017ed4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ed8:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ede:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee2:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017ee9:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017eee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ef2:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017ef9:	eb 19                	jmp    c0017f14 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017efb:	90                   	nop
c0017efc:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f00:	88 c2                	mov    dl,al
c0017f02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f06:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f0d:	01 d0                	add    eax,edx
c0017f0f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f13:	90                   	nop
c0017f14:	83 ec 04             	sub    esp,0x4
c0017f17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f1f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f23:	50                   	push   eax
c0017f24:	e8 af d0 fe ff       	call   c0004fd8 <f_getlabel>
c0017f29:	83 c4 10             	add    esp,0x10
c0017f2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f35:	75 09                	jne    c0017f40 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f37:	b8 00 00 00 00       	mov    eax,0x0
c0017f3c:	eb 0a                	jmp    c0017f48 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f3e:	66 90                	xchg   ax,ax
c0017f40:	b8 01 00 00 00       	mov    eax,0x1
c0017f45:	8d 76 00             	lea    esi,[esi+0x0]
c0017f48:	83 c4 1c             	add    esp,0x1c
c0017f4b:	c3                   	ret    

c0017f4c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f4c:	57                   	push   edi
c0017f4d:	83 ec 58             	sub    esp,0x58
c0017f50:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f58:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f5c:	b8 00 00 00 00       	mov    eax,0x0
c0017f61:	b9 0f 00 00 00       	mov    ecx,0xf
c0017f66:	fc                   	cld    
c0017f67:	89 d7                	mov    edi,edx
c0017f69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017f6b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f6f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f76:	83 f8 ff             	cmp    eax,0xffffffff
c0017f79:	75 35                	jne    c0017fb0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017f7b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f7f:	88 c2                	mov    dl,al
c0017f81:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f86:	01 d0                	add    eax,edx
c0017f88:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f8c:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f96:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f9d:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017fa2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017fa6:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fad:	eb 19                	jmp    c0017fc8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017faf:	90                   	nop
c0017fb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fb4:	88 c2                	mov    dl,al
c0017fb6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fba:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fc1:	01 d0                	add    eax,edx
c0017fc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fc7:	90                   	nop
c0017fc8:	83 ec 08             	sub    esp,0x8
c0017fcb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017fcf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fd3:	50                   	push   eax
c0017fd4:	e8 57 88 fe ff       	call   c0000830 <strcat>
c0017fd9:	83 c4 10             	add    esp,0x10
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fe3:	50                   	push   eax
c0017fe4:	e8 46 d1 fe ff       	call   c000512f <f_setlabel>
c0017fe9:	83 c4 10             	add    esp,0x10
c0017fec:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017ff0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017ff5:	75 09                	jne    c0018000 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017ff7:	b8 00 00 00 00       	mov    eax,0x0
c0017ffc:	eb 0a                	jmp    c0018008 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017ffe:	66 90                	xchg   ax,ax
c0018000:	b8 01 00 00 00       	mov    eax,0x1
c0018005:	8d 76 00             	lea    esi,[esi+0x0]
c0018008:	83 c4 58             	add    esp,0x58
c001800b:	5f                   	pop    edi
c001800c:	c3                   	ret    
c001800d:	90                   	nop
c001800e:	66 90                	xchg   ax,ax

c0018010 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018010:	83 ec 2c             	sub    esp,0x2c
c0018013:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001801b:	83 ec 08             	sub    esp,0x8
c001801e:	68 e4 15 02 c0       	push   0xc00215e4
c0018023:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018027:	e8 14 87 fe ff       	call   c0000740 <strcmp>
c001802c:	83 c4 10             	add    esp,0x10
c001802f:	85 c0                	test   eax,eax
c0018031:	0f 94 c0             	sete   al
c0018034:	0f b6 c0             	movzx  eax,al
c0018037:	85 c0                	test   eax,eax
c0018039:	74 0d                	je     c0018048 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001803b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018043:	e9 c0 00 00 00       	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018048:	83 ec 08             	sub    esp,0x8
c001804b:	68 d6 15 02 c0       	push   0xc00215d6
c0018050:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018054:	e8 e7 86 fe ff       	call   c0000740 <strcmp>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	85 c0                	test   eax,eax
c001805e:	0f 94 c0             	sete   al
c0018061:	0f b6 c0             	movzx  eax,al
c0018064:	85 c0                	test   eax,eax
c0018066:	74 10                	je     c0018078 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018068:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018070:	e9 93 00 00 00       	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018075:	8d 76 00             	lea    esi,[esi+0x0]
c0018078:	83 ec 08             	sub    esp,0x8
c001807b:	68 dc 15 02 c0       	push   0xc00215dc
c0018080:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018084:	e8 b7 86 fe ff       	call   c0000740 <strcmp>
c0018089:	83 c4 10             	add    esp,0x10
c001808c:	85 c0                	test   eax,eax
c001808e:	0f 94 c0             	sete   al
c0018091:	0f b6 c0             	movzx  eax,al
c0018094:	85 c0                	test   eax,eax
c0018096:	74 0c                	je     c00180a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018098:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00180a0:	eb 66                	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180a2:	66 90                	xchg   ax,ax
c00180a4:	83 ec 08             	sub    esp,0x8
c00180a7:	68 bc f3 01 c0       	push   0xc001f3bc
c00180ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180b0:	e8 8b 86 fe ff       	call   c0000740 <strcmp>
c00180b5:	83 c4 10             	add    esp,0x10
c00180b8:	85 c0                	test   eax,eax
c00180ba:	0f 94 c0             	sete   al
c00180bd:	0f b6 c0             	movzx  eax,al
c00180c0:	85 c0                	test   eax,eax
c00180c2:	74 0c                	je     c00180d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180c4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180cc:	eb 3a                	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180ce:	66 90                	xchg   ax,ax
c00180d0:	83 ec 08             	sub    esp,0x8
c00180d3:	68 e2 15 02 c0       	push   0xc00215e2
c00180d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180dc:	e8 5f 86 fe ff       	call   c0000740 <strcmp>
c00180e1:	83 c4 10             	add    esp,0x10
c00180e4:	85 c0                	test   eax,eax
c00180e6:	0f 94 c0             	sete   al
c00180e9:	0f b6 c0             	movzx  eax,al
c00180ec:	85 c0                	test   eax,eax
c00180ee:	74 0c                	je     c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180f0:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00180f8:	eb 0e                	jmp    c0018108 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180fa:	66 90                	xchg   ax,ax
c00180fc:	b8 08 00 00 00       	mov    eax,0x8
c0018101:	e9 ea 00 00 00       	jmp    c00181f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018106:	66 90                	xchg   ax,ax
c0018108:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001810f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018114:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018118:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001811f:	83 f8 ff             	cmp    eax,0xffffffff
c0018122:	75 34                	jne    c0018158 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018124:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018128:	88 c2                	mov    dl,al
c001812a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001812f:	01 d0                	add    eax,edx
c0018131:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018135:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001813b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001813f:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018146:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001814b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001814f:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0018156:	eb 18                	jmp    c0018170 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018158:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001815c:	88 c2                	mov    dl,al
c001815e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018162:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018169:	01 d0                	add    eax,edx
c001816b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001816f:	90                   	nop
c0018170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018174:	88 04 24             	mov    BYTE PTR [esp],al
c0018177:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001817b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001817f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018187:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001818c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018194:	83 ec 0c             	sub    esp,0xc
c0018197:	68 00 20 00 00       	push   0x2000
c001819c:	e8 eb f8 fe ff       	call   c0007a8c <malloc>
c00181a1:	83 c4 10             	add    esp,0x10
c00181a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00181a8:	68 00 20 00 00       	push   0x2000
c00181ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181b1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181b5:	50                   	push   eax
c00181b6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181ba:	50                   	push   eax
c00181bb:	e8 6c d2 fe ff       	call   c000542c <f_mkfs>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181cc:	75 0a                	jne    c00181d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181ce:	b8 00 00 00 00       	mov    eax,0x0
c00181d3:	eb 1b                	jmp    c00181f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181d5:	8d 76 00             	lea    esi,[esi+0x0]
c00181d8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00181dd:	75 09                	jne    c00181e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181df:	b8 09 00 00 00       	mov    eax,0x9
c00181e4:	eb 0a                	jmp    c00181f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181e6:	66 90                	xchg   ax,ax
c00181e8:	b8 01 00 00 00       	mov    eax,0x1
c00181ed:	8d 76 00             	lea    esi,[esi+0x0]
c00181f0:	83 c4 2c             	add    esp,0x2c
c00181f3:	c3                   	ret    

c00181f4 <FAT::tryMount(LogicalDisk*, int)>:
c00181f4:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00181fa:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181ff:	83 f8 14             	cmp    eax,0x14
c0018202:	75 18                	jne    c001821c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	68 e8 15 02 c0       	push   0xc00215e8
c001820c:	e8 2e 86 ff ff       	call   c001083f <KePanic(char const*)>
c0018211:	83 c4 10             	add    esp,0x10
c0018214:	b0 00                	mov    al,0x0
c0018216:	e9 ed 01 00 00       	jmp    c0018408 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001821b:	90                   	nop
c001821c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018223:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018229:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001822f:	3d 00 02 00 00       	cmp    eax,0x200
c0018234:	74 0a                	je     c0018240 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018236:	b0 00                	mov    al,0x0
c0018238:	e9 cb 01 00 00       	jmp    c0018408 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001823d:	8d 76 00             	lea    esi,[esi+0x0]
c0018240:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018248:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001824f:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018256:	83 f8 ff             	cmp    eax,0xffffffff
c0018259:	74 09                	je     c0018264 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001825b:	b0 01                	mov    al,0x1
c001825d:	e9 a6 01 00 00       	jmp    c0018408 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018262:	66 90                	xchg   ax,ax
c0018264:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001826e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018276:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001827d:	88 c2                	mov    dl,al
c001827f:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018284:	01 d0                	add    eax,edx
c0018286:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001828d:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018293:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001829a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00182a1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00182a6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182ad:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	68 34 02 00 00       	push   0x234
c00182bc:	e8 cb f7 fe ff       	call   c0007a8c <malloc>
c00182c1:	83 c4 10             	add    esp,0x10
c00182c4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182cb:	83 ec 04             	sub    esp,0x4
c00182ce:	6a 00                	push   0x0
c00182d0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182d7:	50                   	push   eax
c00182d8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182df:	e8 1f b9 fe ff       	call   c0003c03 <f_mount>
c00182e4:	83 c4 10             	add    esp,0x10
c00182e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00182ee:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00182f6:	74 1c                	je     c0018314 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018302:	e8 a5 f7 fe ff       	call   c0007aac <rfree>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	b0 00                	mov    al,0x0
c001830c:	e9 f7 00 00 00       	jmp    c0018408 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018311:	8d 76 00             	lea    esi,[esi+0x0]
c0018314:	83 ec 04             	sub    esp,0x4
c0018317:	68 00 01 00 00       	push   0x100
c001831c:	6a 00                	push   0x0
c001831e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018325:	50                   	push   eax
c0018326:	e8 b5 81 fe ff       	call   c00004e0 <memset>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	83 ec 08             	sub    esp,0x8
c0018331:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018338:	50                   	push   eax
c0018339:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018340:	50                   	push   eax
c0018341:	e8 ea 84 fe ff       	call   c0000830 <strcat>
c0018346:	83 c4 10             	add    esp,0x10
c0018349:	83 ec 08             	sub    esp,0x8
c001834c:	68 f6 15 02 c0       	push   0xc00215f6
c0018351:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018358:	50                   	push   eax
c0018359:	e8 d2 84 fe ff       	call   c0000830 <strcat>
c001835e:	83 c4 10             	add    esp,0x10
c0018361:	83 ec 04             	sub    esp,0x4
c0018364:	6a 01                	push   0x1
c0018366:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001836d:	50                   	push   eax
c001836e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018372:	50                   	push   eax
c0018373:	e8 ed b8 fe ff       	call   c0003c65 <f_open>
c0018378:	83 c4 10             	add    esp,0x10
c001837b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018382:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018389:	85 c0                	test   eax,eax
c001838b:	74 0b                	je     c0018398 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001838d:	78 31                	js     c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001838f:	83 e8 04             	sub    eax,0x4
c0018392:	83 f8 01             	cmp    eax,0x1
c0018395:	77 29                	ja     c00183c0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018397:	90                   	nop
c0018398:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00183a0:	83 ec 0c             	sub    esp,0xc
c00183a3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00183a7:	50                   	push   eax
c00183a8:	e8 87 c0 fe ff       	call   c0004434 <f_close>
c00183ad:	83 c4 10             	add    esp,0x10
c00183b0:	90                   	nop
c00183b1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183b9:	85 c0                	test   eax,eax
c00183bb:	74 43                	je     c0018400 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183bd:	eb 31                	jmp    c00183f0 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183bf:	90                   	nop
c00183c0:	83 ec 0c             	sub    esp,0xc
c00183c3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183ca:	e8 dd f6 fe ff       	call   c0007aac <rfree>
c00183cf:	83 c4 10             	add    esp,0x10
c00183d2:	83 ec 04             	sub    esp,0x4
c00183d5:	6a 00                	push   0x0
c00183d7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183de:	50                   	push   eax
c00183df:	6a 00                	push   0x0
c00183e1:	e8 1d b8 fe ff       	call   c0003c03 <f_mount>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	b0 00                	mov    al,0x0
c00183eb:	eb 1b                	jmp    c0018408 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183ed:	8d 76 00             	lea    esi,[esi+0x0]
c00183f0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183f5:	83 c0 01             	add    eax,0x1
c00183f8:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00183fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018400:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018407:	90                   	nop
c0018408:	81 c4 4c 03 00 00    	add    esp,0x34c
c001840e:	c3                   	ret    
c001840f:	90                   	nop

c0018410 <FAT::allocateSwapfile(char const*, int)>:
c0018410:	55                   	push   ebp
c0018411:	57                   	push   edi
c0018412:	56                   	push   esi
c0018413:	53                   	push   ebx
c0018414:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001841a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018425:	83 ec 0c             	sub    esp,0xc
c0018428:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001842f:	e8 58 f6 fe ff       	call   c0007a8c <malloc>
c0018434:	83 c4 10             	add    esp,0x10
c0018437:	89 c7                	mov    edi,eax
c0018439:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001843e:	83 ec 04             	sub    esp,0x4
c0018441:	50                   	push   eax
c0018442:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018449:	57                   	push   edi
c001844a:	e8 87 2a ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018459:	83 ec 04             	sub    esp,0x4
c001845c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018460:	50                   	push   eax
c0018461:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018465:	50                   	push   eax
c0018466:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001846d:	e8 cc 2d ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001847c:	c1 e0 14             	shl    eax,0x14
c001847f:	89 c7                	mov    edi,eax
c0018481:	89 c5                	mov    ebp,eax
c0018483:	c1 fd 1f             	sar    ebp,0x1f
c0018486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001848a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001848e:	89 f9                	mov    ecx,edi
c0018490:	31 c1                	xor    ecx,eax
c0018492:	89 cb                	mov    ebx,ecx
c0018494:	89 e9                	mov    ecx,ebp
c0018496:	31 d1                	xor    ecx,edx
c0018498:	89 ce                	mov    esi,ecx
c001849a:	89 f0                	mov    eax,esi
c001849c:	09 d8                	or     eax,ebx
c001849e:	0f 84 9c 00 00 00    	je     c0018540 <FAT::allocateSwapfile(char const*, int)+0x130>
c00184a4:	83 ec 0c             	sub    esp,0xc
c00184a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184ae:	e8 57 2c ff ff       	call   c000b10a <File::unlink()>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	83 ec 08             	sub    esp,0x8
c00184b9:	6a 12                	push   0x12
c00184bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184c2:	e8 cb 2a ff ff       	call   c000af92 <File::open(FileOpenMode)>
c00184c7:	83 c4 10             	add    esp,0x10
c00184ca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184d7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00184de:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184e5:	c1 e0 14             	shl    eax,0x14
c00184e8:	83 ec 04             	sub    esp,0x4
c00184eb:	6a 01                	push   0x1
c00184ed:	50                   	push   eax
c00184ee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00184f5:	e8 c5 cd fe ff       	call   c00052bf <f_expand>
c00184fa:	83 c4 10             	add    esp,0x10
c00184fd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018504:	8b 00                	mov    eax,DWORD PTR [eax]
c0018506:	83 c0 10             	add    eax,0x10
c0018509:	8b 00                	mov    eax,DWORD PTR [eax]
c001850b:	83 ec 0c             	sub    esp,0xc
c001850e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018512:	52                   	push   edx
c0018513:	8d 54 24 30          	lea    edx,[esp+0x30]
c0018517:	52                   	push   edx
c0018518:	6a 00                	push   0x0
c001851a:	68 00 04 00 00       	push   0x400
c001851f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0018526:	ff d0                	call   eax
c0018528:	83 c4 20             	add    esp,0x20
c001852b:	83 ec 0c             	sub    esp,0xc
c001852e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018535:	e8 b6 2a ff ff       	call   c000aff0 <File::close()>
c001853a:	83 c4 10             	add    esp,0x10
c001853d:	8d 76 00             	lea    esi,[esi+0x0]
c0018540:	83 ec 08             	sub    esp,0x8
c0018543:	6a 01                	push   0x1
c0018545:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001854c:	e8 41 2a ff ff       	call   c000af92 <File::open(FileOpenMode)>
c0018551:	83 c4 10             	add    esp,0x10
c0018554:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001855b:	8b 00                	mov    eax,DWORD PTR [eax]
c001855d:	83 c0 0c             	add    eax,0xc
c0018560:	8b 00                	mov    eax,DWORD PTR [eax]
c0018562:	83 ec 0c             	sub    esp,0xc
c0018565:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018569:	52                   	push   edx
c001856a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001856e:	52                   	push   edx
c001856f:	6a 00                	push   0x0
c0018571:	6a 04                	push   0x4
c0018573:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001857a:	ff d0                	call   eax
c001857c:	83 c4 20             	add    esp,0x20
c001857f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018586:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001858c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018593:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001859a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001859d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00185a4:	83 ec 0c             	sub    esp,0xc
c00185a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185ae:	e8 3d 2a ff ff       	call   c000aff0 <File::close()>
c00185b3:	83 c4 10             	add    esp,0x10
c00185b6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185bd:	ba 00 00 00 00       	mov    edx,0x0
c00185c2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185c8:	5b                   	pop    ebx
c00185c9:	5e                   	pop    esi
c00185ca:	5f                   	pop    edi
c00185cb:	5d                   	pop    ebp
c00185cc:	c3                   	ret    
c00185cd:	90                   	nop
c00185ce:	66 90                	xchg   ax,ax

c00185d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185d0:	57                   	push   edi
c00185d1:	56                   	push   esi
c00185d2:	53                   	push   ebx
c00185d3:	81 ec 50 02 00 00    	sub    esp,0x250
c00185d9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00185e1:	74 0d                	je     c00185f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185e3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00185eb:	75 0f                	jne    c00185fc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	b8 04 00 00 00       	mov    eax,0x4
c00185f5:	e9 3a 01 00 00       	jmp    c0018734 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00185fa:	66 90                	xchg   ax,ax
c00185fc:	83 ec 08             	sub    esp,0x8
c00185ff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018606:	50                   	push   eax
c0018607:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001860e:	e8 ee c0 fe ff       	call   c0004701 <f_readdir>
c0018613:	83 c4 10             	add    esp,0x10
c0018616:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001861d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001862e:	83 c0 16             	add    eax,0x16
c0018631:	50                   	push   eax
c0018632:	e8 29 7f fe ff       	call   c0000560 <strlen>
c0018637:	83 c4 10             	add    esp,0x10
c001863a:	ba 00 00 00 00       	mov    edx,0x0
c001863f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018643:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018647:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001864e:	0f b6 c0             	movzx  eax,al
c0018651:	83 e0 10             	and    eax,0x10
c0018654:	74 0a                	je     c0018660 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018656:	b8 02 00 00 00       	mov    eax,0x2
c001865b:	eb 0b                	jmp    c0018668 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001865d:	8d 76 00             	lea    esi,[esi+0x0]
c0018660:	b8 01 00 00 00       	mov    eax,0x1
c0018665:	8d 76 00             	lea    esi,[esi+0x0]
c0018668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001866c:	83 ec 08             	sub    esp,0x8
c001866f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018676:	83 c0 16             	add    eax,0x16
c0018679:	50                   	push   eax
c001867a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001867e:	83 c0 10             	add    eax,0x10
c0018681:	50                   	push   eax
c0018682:	e8 a9 7f fe ff       	call   c0000630 <strcpy>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018691:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018698:	8d 44 24 08          	lea    eax,[esp+0x8]
c001869c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00186a3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00186aa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186b1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186b8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186bf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186c6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186cd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186d4:	89 c6                	mov    esi,eax
c00186d6:	89 d7                	mov    edi,edx
c00186d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186da:	89 c8                	mov    eax,ecx
c00186dc:	89 fa                	mov    edx,edi
c00186de:	89 f3                	mov    ebx,esi
c00186e0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00186e7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00186ee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00186f5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00186fc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018702:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018709:	0f be c0             	movsx  eax,al
c001870c:	85 c0                	test   eax,eax
c001870e:	75 08                	jne    c0018718 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018710:	b8 07 00 00 00       	mov    eax,0x7
c0018715:	eb 1d                	jmp    c0018734 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0018717:	90                   	nop
c0018718:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001871f:	85 c0                	test   eax,eax
c0018721:	75 09                	jne    c001872c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018723:	b8 00 00 00 00       	mov    eax,0x0
c0018728:	eb 0a                	jmp    c0018734 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001872a:	66 90                	xchg   ax,ax
c001872c:	b8 01 00 00 00       	mov    eax,0x1
c0018731:	8d 76 00             	lea    esi,[esi+0x0]
c0018734:	81 c4 50 02 00 00    	add    esp,0x250
c001873a:	5b                   	pop    ebx
c001873b:	5e                   	pop    esi
c001873c:	5f                   	pop    edi
c001873d:	c3                   	ret    
c001873e:	66 90                	xchg   ax,ax

c0018740 <FAT::read(void*, unsigned long, void*, int*)>:
c0018740:	83 ec 1c             	sub    esp,0x1c
c0018743:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018748:	74 0a                	je     c0018754 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001874a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001874f:	75 0b                	jne    c001875c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018751:	8d 76 00             	lea    esi,[esi+0x0]
c0018754:	b8 04 00 00 00       	mov    eax,0x4
c0018759:	eb 41                	jmp    c001879c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001875b:	90                   	nop
c001875c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018760:	50                   	push   eax
c0018761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018765:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018769:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001876d:	e8 b6 b7 fe ff       	call   c0003f28 <f_read>
c0018772:	83 c4 10             	add    esp,0x10
c0018775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001877d:	89 c2                	mov    edx,eax
c001877f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018783:	89 10                	mov    DWORD PTR [eax],edx
c0018785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018789:	85 c0                	test   eax,eax
c001878b:	75 07                	jne    c0018794 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001878d:	b8 00 00 00 00       	mov    eax,0x0
c0018792:	eb 08                	jmp    c001879c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018794:	b8 01 00 00 00       	mov    eax,0x1
c0018799:	8d 76 00             	lea    esi,[esi+0x0]
c001879c:	83 c4 1c             	add    esp,0x1c
c001879f:	c3                   	ret    

c00187a0 <FAT::write(void*, unsigned long, void*, int*)>:
c00187a0:	83 ec 1c             	sub    esp,0x1c
c00187a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187a8:	74 0a                	je     c00187b4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00187aa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187af:	75 0b                	jne    c00187bc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187b1:	8d 76 00             	lea    esi,[esi+0x0]
c00187b4:	b8 04 00 00 00       	mov    eax,0x4
c00187b9:	eb 41                	jmp    c00187fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187bb:	90                   	nop
c00187bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187c0:	50                   	push   eax
c00187c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187cd:	e8 55 b9 fe ff       	call   c0004127 <f_write>
c00187d2:	83 c4 10             	add    esp,0x10
c00187d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187dd:	89 c2                	mov    edx,eax
c00187df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187e3:	89 10                	mov    DWORD PTR [eax],edx
c00187e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187e9:	85 c0                	test   eax,eax
c00187eb:	75 07                	jne    c00187f4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00187ed:	b8 00 00 00 00       	mov    eax,0x0
c00187f2:	eb 08                	jmp    c00187fc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187f4:	b8 01 00 00 00       	mov    eax,0x1
c00187f9:	8d 76 00             	lea    esi,[esi+0x0]
c00187fc:	83 c4 1c             	add    esp,0x1c
c00187ff:	c3                   	ret    

c0018800 <FAT::close(void*)>:
c0018800:	83 ec 1c             	sub    esp,0x1c
c0018803:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018808:	75 0a                	jne    c0018814 <FAT::close(void*)+0x14>
c001880a:	b8 04 00 00 00       	mov    eax,0x4
c001880f:	eb 3f                	jmp    c0018850 <FAT::close(void*)+0x50>
c0018811:	8d 76 00             	lea    esi,[esi+0x0]
c0018814:	83 ec 0c             	sub    esp,0xc
c0018817:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001881b:	e8 14 bc fe ff       	call   c0004434 <f_close>
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018827:	83 ec 0c             	sub    esp,0xc
c001882a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001882e:	e8 69 f2 fe ff       	call   c0007a9c <free>
c0018833:	83 c4 10             	add    esp,0x10
c0018836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883a:	85 c0                	test   eax,eax
c001883c:	75 0a                	jne    c0018848 <FAT::close(void*)+0x48>
c001883e:	b8 00 00 00 00       	mov    eax,0x0
c0018843:	eb 0b                	jmp    c0018850 <FAT::close(void*)+0x50>
c0018845:	8d 76 00             	lea    esi,[esi+0x0]
c0018848:	b8 01 00 00 00       	mov    eax,0x1
c001884d:	8d 76 00             	lea    esi,[esi+0x0]
c0018850:	83 c4 1c             	add    esp,0x1c
c0018853:	c3                   	ret    

c0018854 <FAT::closeDir(void*)>:
c0018854:	83 ec 1c             	sub    esp,0x1c
c0018857:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001885c:	75 0a                	jne    c0018868 <FAT::closeDir(void*)+0x14>
c001885e:	b8 04 00 00 00       	mov    eax,0x4
c0018863:	eb 3f                	jmp    c00188a4 <FAT::closeDir(void*)+0x50>
c0018865:	8d 76 00             	lea    esi,[esi+0x0]
c0018868:	83 ec 0c             	sub    esp,0xc
c001886b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001886f:	e8 6b be fe ff       	call   c00046df <f_closedir>
c0018874:	83 c4 10             	add    esp,0x10
c0018877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001887b:	83 ec 0c             	sub    esp,0xc
c001887e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018882:	e8 15 f2 fe ff       	call   c0007a9c <free>
c0018887:	83 c4 10             	add    esp,0x10
c001888a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001888e:	85 c0                	test   eax,eax
c0018890:	75 0a                	jne    c001889c <FAT::closeDir(void*)+0x48>
c0018892:	b8 00 00 00 00       	mov    eax,0x0
c0018897:	eb 0b                	jmp    c00188a4 <FAT::closeDir(void*)+0x50>
c0018899:	8d 76 00             	lea    esi,[esi+0x0]
c001889c:	b8 01 00 00 00       	mov    eax,0x1
c00188a1:	8d 76 00             	lea    esi,[esi+0x0]
c00188a4:	83 c4 1c             	add    esp,0x1c
c00188a7:	c3                   	ret    

c00188a8 <FAT::seek(void*, unsigned long long)>:
c00188a8:	83 ec 2c             	sub    esp,0x2c
c00188ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188bb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188c0:	75 0a                	jne    c00188cc <FAT::seek(void*, unsigned long long)+0x24>
c00188c2:	b8 04 00 00 00       	mov    eax,0x4
c00188c7:	eb 33                	jmp    c00188fc <FAT::seek(void*, unsigned long long)+0x54>
c00188c9:	8d 76 00             	lea    esi,[esi+0x0]
c00188cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d0:	83 ec 08             	sub    esp,0x8
c00188d3:	50                   	push   eax
c00188d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188d8:	e8 86 bb fe ff       	call   c0004463 <f_lseek>
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188e8:	85 c0                	test   eax,eax
c00188ea:	75 08                	jne    c00188f4 <FAT::seek(void*, unsigned long long)+0x4c>
c00188ec:	b8 00 00 00 00       	mov    eax,0x0
c00188f1:	eb 09                	jmp    c00188fc <FAT::seek(void*, unsigned long long)+0x54>
c00188f3:	90                   	nop
c00188f4:	b8 01 00 00 00       	mov    eax,0x1
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]
c00188fc:	83 c4 2c             	add    esp,0x2c
c00188ff:	c3                   	ret    

c0018900 <fatWrapperReadDisk>:
c0018900:	53                   	push   ebx
c0018901:	83 ec 18             	sub    esp,0x18
c0018904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018908:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001890c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018911:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018918:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001891c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018920:	ba 00 00 00 00       	mov    edx,0x0
c0018925:	83 ec 0c             	sub    esp,0xc
c0018928:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001892c:	53                   	push   ebx
c001892d:	52                   	push   edx
c001892e:	50                   	push   eax
c001892f:	51                   	push   ecx
c0018930:	e8 41 48 ff ff       	call   c000d176 <LogicalDisk::read(unsigned long long, int, void*)>
c0018935:	83 c4 20             	add    esp,0x20
c0018938:	83 c4 18             	add    esp,0x18
c001893b:	5b                   	pop    ebx
c001893c:	c3                   	ret    
c001893d:	8d 76 00             	lea    esi,[esi+0x0]

c0018940 <fatWrapperWriteDisk>:
c0018940:	53                   	push   ebx
c0018941:	83 ec 18             	sub    esp,0x18
c0018944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018948:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001894c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018951:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0018958:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001895c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018960:	ba 00 00 00 00       	mov    edx,0x0
c0018965:	83 ec 0c             	sub    esp,0xc
c0018968:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001896c:	53                   	push   ebx
c001896d:	52                   	push   edx
c001896e:	50                   	push   eax
c001896f:	51                   	push   ecx
c0018970:	e8 6d 48 ff ff       	call   c000d1e2 <LogicalDisk::write(unsigned long long, int, void*)>
c0018975:	83 c4 20             	add    esp,0x20
c0018978:	83 c4 18             	add    esp,0x18
c001897b:	5b                   	pop    ebx
c001897c:	c3                   	ret    
c001897d:	8d 76 00             	lea    esi,[esi+0x0]

c0018980 <fatWrapperIoctl>:
c0018980:	53                   	push   ebx
c0018981:	83 ec 28             	sub    esp,0x28
c0018984:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018988:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001898c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018990:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018994:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018999:	83 f8 02             	cmp    eax,0x2
c001899c:	75 32                	jne    c00189d0 <fatWrapperIoctl+0x50>
c001899e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00189a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189ab:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189c2:	66 89 02             	mov    WORD PTR [edx],ax
c00189c5:	b8 00 00 00 00       	mov    eax,0x0
c00189ca:	e9 c5 00 00 00       	jmp    c0018a94 <fatWrapperIoctl+0x114>
c00189cf:	90                   	nop
c00189d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189d5:	83 f8 01             	cmp    eax,0x1
c00189d8:	75 6a                	jne    c0018a44 <fatWrapperIoctl+0xc4>
c00189da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189e2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189e7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189f4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189fa:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018a00:	89 c8                	mov    eax,ecx
c0018a02:	89 da                	mov    edx,ebx
c0018a04:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018a08:	c1 e0 0a             	shl    eax,0xa
c0018a0b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a10:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a17:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a1d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a23:	89 cb                	mov    ebx,ecx
c0018a25:	c1 fb 1f             	sar    ebx,0x1f
c0018a28:	53                   	push   ebx
c0018a29:	51                   	push   ecx
c0018a2a:	52                   	push   edx
c0018a2b:	50                   	push   eax
c0018a2c:	e8 9f 5b 00 00       	call   c001e5d0 <__udivdi3>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	89 c2                	mov    edx,eax
c0018a36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a3a:	89 10                	mov    DWORD PTR [eax],edx
c0018a3c:	b8 00 00 00 00       	mov    eax,0x0
c0018a41:	eb 51                	jmp    c0018a94 <fatWrapperIoctl+0x114>
c0018a43:	90                   	nop
c0018a44:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a49:	85 c0                	test   eax,eax
c0018a4b:	75 07                	jne    c0018a54 <fatWrapperIoctl+0xd4>
c0018a4d:	b8 00 00 00 00       	mov    eax,0x0
c0018a52:	eb 40                	jmp    c0018a94 <fatWrapperIoctl+0x114>
c0018a54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a59:	83 f8 03             	cmp    eax,0x3
c0018a5c:	75 1a                	jne    c0018a78 <fatWrapperIoctl+0xf8>
c0018a5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a6a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a70:	b8 00 00 00 00       	mov    eax,0x0
c0018a75:	eb 1d                	jmp    c0018a94 <fatWrapperIoctl+0x114>
c0018a77:	90                   	nop
c0018a78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a7d:	83 f8 04             	cmp    eax,0x4
c0018a80:	75 0a                	jne    c0018a8c <fatWrapperIoctl+0x10c>
c0018a82:	b8 00 00 00 00       	mov    eax,0x0
c0018a87:	eb 0b                	jmp    c0018a94 <fatWrapperIoctl+0x114>
c0018a89:	8d 76 00             	lea    esi,[esi+0x0]
c0018a8c:	b8 04 00 00 00       	mov    eax,0x4
c0018a91:	8d 76 00             	lea    esi,[esi+0x0]
c0018a94:	83 c4 28             	add    esp,0x28
c0018a97:	5b                   	pop    ebx
c0018a98:	c3                   	ret    
c0018a99:	90                   	nop
c0018a9a:	66 90                	xchg   ax,ax

c0018a9c <FAT::FAT()>:
c0018a9c:	83 ec 1c             	sub    esp,0x1c
c0018a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aa3:	83 ec 0c             	sub    esp,0xc
c0018aa6:	50                   	push   eax
c0018aa7:	e8 ca 21 ff ff       	call   c000ac76 <Filesystem::Filesystem()>
c0018aac:	83 c4 10             	add    esp,0x10
c0018aaf:	ba 0c 16 02 c0       	mov    edx,0xc002160c
c0018ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ab8:	89 10                	mov    DWORD PTR [eax],edx
c0018aba:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ac4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018acc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018ad1:	7f 19                	jg     c0018aec <FAT::FAT()+0x50>
c0018ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ad7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ae2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018ae7:	eb e3                	jmp    c0018acc <FAT::FAT()+0x30>
c0018ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0018aec:	90                   	nop
c0018aed:	83 c4 1c             	add    esp,0x1c
c0018af0:	c3                   	ret    
c0018af1:	90                   	nop
c0018af2:	66 90                	xchg   ax,ax

c0018af4 <FAT::fixFilepath(char*)>:
c0018af4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018af8:	8a 00                	mov    al,BYTE PTR [eax]
c0018afa:	0f be c0             	movsx  eax,al
c0018afd:	83 f8 40             	cmp    eax,0x40
c0018b00:	7e 2e                	jle    c0018b30 <FAT::fixFilepath(char*)+0x3c>
c0018b02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b06:	8a 00                	mov    al,BYTE PTR [eax]
c0018b08:	83 e8 41             	sub    eax,0x41
c0018b0b:	88 c2                	mov    dl,al
c0018b0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b11:	88 10                	mov    BYTE PTR [eax],dl
c0018b13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b17:	8a 00                	mov    al,BYTE PTR [eax]
c0018b19:	0f be c0             	movsx  eax,al
c0018b1c:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b23:	83 c0 30             	add    eax,0x30
c0018b26:	88 c2                	mov    dl,al
c0018b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b2c:	88 10                	mov    BYTE PTR [eax],dl
c0018b2e:	66 90                	xchg   ax,ax
c0018b30:	90                   	nop
c0018b31:	c3                   	ret    
c0018b32:	66 90                	xchg   ax,ax

c0018b34 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b34:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b3a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b42:	74 0c                	je     c0018b50 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b44:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b4c:	75 0e                	jne    c0018b5c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b4e:	66 90                	xchg   ax,ax
c0018b50:	b8 04 00 00 00       	mov    eax,0x4
c0018b55:	e9 46 01 00 00       	jmp    c0018ca0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	83 ec 08             	sub    esp,0x8
c0018b5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b6a:	50                   	push   eax
c0018b6b:	e8 c0 7a fe ff       	call   c0000630 <strcpy>
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	83 ec 08             	sub    esp,0x8
c0018b76:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b7a:	50                   	push   eax
c0018b7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b82:	e8 6d ff ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0018b87:	83 c4 10             	add    esp,0x10
c0018b8a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b92:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b99:	83 e0 01             	and    eax,0x1
c0018b9c:	74 12                	je     c0018bb0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018b9e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018ba5:	83 c8 01             	or     eax,0x1
c0018ba8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018baf:	90                   	nop
c0018bb0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bb7:	83 e0 04             	and    eax,0x4
c0018bba:	74 24                	je     c0018be0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bbc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bc3:	83 c8 30             	or     eax,0x30
c0018bc6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bcd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bd4:	83 c8 02             	or     eax,0x2
c0018bd7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018be7:	83 e0 02             	and    eax,0x2
c0018bea:	74 14                	je     c0018c00 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bf3:	83 c8 02             	or     eax,0x2
c0018bf6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018c00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c07:	83 e0 08             	and    eax,0x8
c0018c0a:	74 14                	je     c0018c20 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c0c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c13:	83 c8 04             	or     eax,0x4
c0018c16:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c27:	83 e0 10             	and    eax,0x10
c0018c2a:	74 14                	je     c0018c40 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c2c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c33:	83 c8 08             	or     eax,0x8
c0018c36:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c40:	83 ec 0c             	sub    esp,0xc
c0018c43:	68 28 02 00 00       	push   0x228
c0018c48:	e8 3f ee fe ff       	call   c0007a8c <malloc>
c0018c4d:	83 c4 10             	add    esp,0x10
c0018c50:	89 c2                	mov    edx,eax
c0018c52:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c59:	89 10                	mov    DWORD PTR [eax],edx
c0018c5b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c63:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c6c:	83 ec 04             	sub    esp,0x4
c0018c6f:	52                   	push   edx
c0018c70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c74:	52                   	push   edx
c0018c75:	50                   	push   eax
c0018c76:	e8 ea af fe ff       	call   c0003c65 <f_open>
c0018c7b:	83 c4 10             	add    esp,0x10
c0018c7e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c85:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c8d:	74 09                	je     c0018c98 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c8f:	b8 01 00 00 00       	mov    eax,0x1
c0018c94:	eb 0a                	jmp    c0018ca0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c96:	66 90                	xchg   ax,ax
c0018c98:	b8 00 00 00 00       	mov    eax,0x0
c0018c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0018ca0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ca6:	c3                   	ret    
c0018ca7:	90                   	nop

c0018ca8 <FAT::openDir(char const*, void**)>:
c0018ca8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018cae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018cb6:	74 0c                	je     c0018cc4 <FAT::openDir(char const*, void**)+0x1c>
c0018cb8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018cc0:	75 0e                	jne    c0018cd0 <FAT::openDir(char const*, void**)+0x28>
c0018cc2:	66 90                	xchg   ax,ax
c0018cc4:	b8 04 00 00 00       	mov    eax,0x4
c0018cc9:	e9 82 00 00 00       	jmp    c0018d50 <FAT::openDir(char const*, void**)+0xa8>
c0018cce:	66 90                	xchg   ax,ax
c0018cd0:	83 ec 08             	sub    esp,0x8
c0018cd3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cda:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cde:	50                   	push   eax
c0018cdf:	e8 4c 79 fe ff       	call   c0000630 <strcpy>
c0018ce4:	83 c4 10             	add    esp,0x10
c0018ce7:	83 ec 08             	sub    esp,0x8
c0018cea:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018cee:	50                   	push   eax
c0018cef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cf6:	e8 f9 fd ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0018cfb:	83 c4 10             	add    esp,0x10
c0018cfe:	83 ec 0c             	sub    esp,0xc
c0018d01:	6a 30                	push   0x30
c0018d03:	e8 84 ed fe ff       	call   c0007a8c <malloc>
c0018d08:	83 c4 10             	add    esp,0x10
c0018d0b:	89 c2                	mov    edx,eax
c0018d0d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d14:	89 10                	mov    DWORD PTR [eax],edx
c0018d16:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d1f:	83 ec 08             	sub    esp,0x8
c0018d22:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d26:	52                   	push   edx
c0018d27:	50                   	push   eax
c0018d28:	e8 e7 b8 fe ff       	call   c0004614 <f_opendir>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d37:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d3f:	74 07                	je     c0018d48 <FAT::openDir(char const*, void**)+0xa0>
c0018d41:	b8 01 00 00 00       	mov    eax,0x1
c0018d46:	eb 08                	jmp    c0018d50 <FAT::openDir(char const*, void**)+0xa8>
c0018d48:	b8 00 00 00 00       	mov    eax,0x0
c0018d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d50:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d56:	c3                   	ret    
c0018d57:	90                   	nop

c0018d58 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d58:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d5e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d66:	75 0c                	jne    c0018d74 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d68:	b8 04 00 00 00       	mov    eax,0x4
c0018d6d:	e9 d6 00 00 00       	jmp    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d72:	66 90                	xchg   ax,ax
c0018d74:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d7c:	75 0a                	jne    c0018d88 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d7e:	b8 04 00 00 00       	mov    eax,0x4
c0018d83:	e9 c0 00 00 00       	jmp    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d88:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d90:	75 0a                	jne    c0018d9c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d92:	b8 04 00 00 00       	mov    eax,0x4
c0018d97:	e9 ac 00 00 00       	jmp    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d9c:	83 ec 08             	sub    esp,0x8
c0018d9f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018da6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018dad:	50                   	push   eax
c0018dae:	e8 7d 78 fe ff       	call   c0000630 <strcpy>
c0018db3:	83 c4 10             	add    esp,0x10
c0018db6:	83 ec 08             	sub    esp,0x8
c0018db9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018dc0:	50                   	push   eax
c0018dc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dc8:	e8 27 fd ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	83 ec 08             	sub    esp,0x8
c0018dd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd7:	50                   	push   eax
c0018dd8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018ddf:	50                   	push   eax
c0018de0:	e8 ae b9 fe ff       	call   c0004793 <f_stat>
c0018de5:	83 c4 10             	add    esp,0x10
c0018de8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018def:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018df6:	85 c0                	test   eax,eax
c0018df8:	74 0a                	je     c0018e04 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018dfa:	83 f8 04             	cmp    eax,0x4
c0018dfd:	74 39                	je     c0018e38 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018dff:	eb 3f                	jmp    c0018e40 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018e01:	8d 76 00             	lea    esi,[esi+0x0]
c0018e04:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018e08:	0f b6 c0             	movzx  eax,al
c0018e0b:	83 e0 10             	and    eax,0x10
c0018e0e:	0f 95 c2             	setne  dl
c0018e11:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e18:	88 10                	mov    BYTE PTR [eax],dl
c0018e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e1e:	ba 00 00 00 00       	mov    edx,0x0
c0018e23:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e2a:	89 01                	mov    DWORD PTR [ecx],eax
c0018e2c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e2f:	b8 00 00 00 00       	mov    eax,0x0
c0018e34:	eb 12                	jmp    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e36:	66 90                	xchg   ax,ax
c0018e38:	b8 02 00 00 00       	mov    eax,0x2
c0018e3d:	eb 09                	jmp    c0018e48 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e3f:	90                   	nop
c0018e40:	b8 01 00 00 00       	mov    eax,0x1
c0018e45:	8d 76 00             	lea    esi,[esi+0x0]
c0018e48:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e4e:	c3                   	ret    
c0018e4f:	90                   	nop

c0018e50 <FAT::unlink(char const*)>:
c0018e50:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e56:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e5e:	75 08                	jne    c0018e68 <FAT::unlink(char const*)+0x18>
c0018e60:	b8 04 00 00 00       	mov    eax,0x4
c0018e65:	eb 61                	jmp    c0018ec8 <FAT::unlink(char const*)+0x78>
c0018e67:	90                   	nop
c0018e68:	83 ec 08             	sub    esp,0x8
c0018e6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e72:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e76:	50                   	push   eax
c0018e77:	e8 b4 77 fe ff       	call   c0000630 <strcpy>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	83 ec 08             	sub    esp,0x8
c0018e82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e86:	50                   	push   eax
c0018e87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e8e:	e8 61 fc ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0018e93:	83 c4 10             	add    esp,0x10
c0018e96:	83 ec 0c             	sub    esp,0xc
c0018e99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e9d:	50                   	push   eax
c0018e9e:	e8 62 bb fe ff       	call   c0004a05 <f_unlink>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ead:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018eb4:	85 c0                	test   eax,eax
c0018eb6:	75 08                	jne    c0018ec0 <FAT::unlink(char const*)+0x70>
c0018eb8:	b8 00 00 00 00       	mov    eax,0x0
c0018ebd:	eb 09                	jmp    c0018ec8 <FAT::unlink(char const*)+0x78>
c0018ebf:	90                   	nop
c0018ec0:	b8 01 00 00 00       	mov    eax,0x1
c0018ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ec8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ece:	c3                   	ret    
c0018ecf:	90                   	nop

c0018ed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ed0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018ed6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018edd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ee4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018ee8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018eec:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018ef4:	75 0a                	jne    c0018f00 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018ef6:	b8 04 00 00 00       	mov    eax,0x4
c0018efb:	e9 7c 01 00 00       	jmp    c001907c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018f00:	83 ec 08             	sub    esp,0x8
c0018f03:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f0e:	50                   	push   eax
c0018f0f:	e8 1c 77 fe ff       	call   c0000630 <strcpy>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	83 ec 08             	sub    esp,0x8
c0018f1a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f1e:	50                   	push   eax
c0018f1f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f26:	e8 c9 fb ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0018f2b:	83 c4 10             	add    esp,0x10
c0018f2e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f36:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f3e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f43:	83 e0 01             	and    eax,0x1
c0018f46:	74 14                	je     c0018f5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018f48:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f4f:	83 c8 01             	or     eax,0x1
c0018f52:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f59:	8d 76 00             	lea    esi,[esi+0x0]
c0018f5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f61:	83 e0 02             	and    eax,0x2
c0018f64:	74 12                	je     c0018f78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018f66:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f6d:	83 c8 20             	or     eax,0x20
c0018f70:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f77:	90                   	nop
c0018f78:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f7d:	83 e0 04             	and    eax,0x4
c0018f80:	74 12                	je     c0018f94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0018f82:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f89:	83 c8 04             	or     eax,0x4
c0018f8c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f93:	90                   	nop
c0018f94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f99:	83 e0 08             	and    eax,0x8
c0018f9c:	74 12                	je     c0018fb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0018f9e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018fa5:	83 c8 02             	or     eax,0x2
c0018fa8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018faf:	90                   	nop
c0018fb0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fb5:	83 e0 01             	and    eax,0x1
c0018fb8:	74 12                	je     c0018fcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018fba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fc1:	83 c8 01             	or     eax,0x1
c0018fc4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fcb:	90                   	nop
c0018fcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fd1:	83 e0 02             	and    eax,0x2
c0018fd4:	74 12                	je     c0018fe8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0018fd6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fdd:	83 c8 20             	or     eax,0x20
c0018fe0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fe7:	90                   	nop
c0018fe8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fed:	83 e0 04             	and    eax,0x4
c0018ff0:	74 12                	je     c0019004 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0018ff2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018ff9:	83 c8 04             	or     eax,0x4
c0018ffc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019003:	90                   	nop
c0019004:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019009:	83 e0 08             	and    eax,0x8
c001900c:	74 12                	je     c0019020 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001900e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019015:	83 c8 02             	or     eax,0x2
c0019018:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001901f:	90                   	nop
c0019020:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019027:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001902e:	09 d0                	or     eax,edx
c0019030:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019037:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001903f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019047:	83 ec 04             	sub    esp,0x4
c001904a:	52                   	push   edx
c001904b:	50                   	push   eax
c001904c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019050:	50                   	push   eax
c0019051:	e8 22 be fe ff       	call   c0004e78 <f_chmod>
c0019056:	83 c4 10             	add    esp,0x10
c0019059:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019060:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019067:	85 c0                	test   eax,eax
c0019069:	75 09                	jne    c0019074 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001906b:	b8 00 00 00 00       	mov    eax,0x0
c0019070:	eb 0a                	jmp    c001907c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019072:	66 90                	xchg   ax,ax
c0019074:	b8 01 00 00 00       	mov    eax,0x1
c0019079:	8d 76 00             	lea    esi,[esi+0x0]
c001907c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019082:	c3                   	ret    
c0019083:	90                   	nop

c0019084 <FAT::rename(char const*, char const*)>:
c0019084:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001908a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019092:	74 0c                	je     c00190a0 <FAT::rename(char const*, char const*)+0x1c>
c0019094:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001909c:	75 0e                	jne    c00190ac <FAT::rename(char const*, char const*)+0x28>
c001909e:	66 90                	xchg   ax,ax
c00190a0:	b8 04 00 00 00       	mov    eax,0x4
c00190a5:	e9 9e 00 00 00       	jmp    c0019148 <FAT::rename(char const*, char const*)+0xc4>
c00190aa:	66 90                	xchg   ax,ax
c00190ac:	83 ec 08             	sub    esp,0x8
c00190af:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190bd:	50                   	push   eax
c00190be:	e8 6d 75 fe ff       	call   c0000630 <strcpy>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	83 ec 08             	sub    esp,0x8
c00190c9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190d0:	50                   	push   eax
c00190d1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190d8:	e8 17 fa ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	83 ec 08             	sub    esp,0x8
c00190e3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190ee:	50                   	push   eax
c00190ef:	e8 3c 75 fe ff       	call   c0000630 <strcpy>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	83 ec 08             	sub    esp,0x8
c00190fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190fe:	50                   	push   eax
c00190ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019106:	e8 e9 f9 ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c001910b:	83 c4 10             	add    esp,0x10
c001910e:	83 ec 08             	sub    esp,0x8
c0019111:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019115:	50                   	push   eax
c0019116:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001911d:	50                   	push   eax
c001911e:	e8 9d bb fe ff       	call   c0004cc0 <f_rename>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001912d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019134:	85 c0                	test   eax,eax
c0019136:	75 08                	jne    c0019140 <FAT::rename(char const*, char const*)+0xbc>
c0019138:	b8 00 00 00 00       	mov    eax,0x0
c001913d:	eb 09                	jmp    c0019148 <FAT::rename(char const*, char const*)+0xc4>
c001913f:	90                   	nop
c0019140:	b8 01 00 00 00       	mov    eax,0x1
c0019145:	8d 76 00             	lea    esi,[esi+0x0]
c0019148:	81 c4 1c 02 00 00    	add    esp,0x21c
c001914e:	c3                   	ret    
c001914f:	90                   	nop

c0019150 <FAT::mkdir(char const*)>:
c0019150:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019156:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001915e:	75 08                	jne    c0019168 <FAT::mkdir(char const*)+0x18>
c0019160:	b8 04 00 00 00       	mov    eax,0x4
c0019165:	eb 61                	jmp    c00191c8 <FAT::mkdir(char const*)+0x78>
c0019167:	90                   	nop
c0019168:	83 ec 08             	sub    esp,0x8
c001916b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019172:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019176:	50                   	push   eax
c0019177:	e8 b4 74 fe ff       	call   c0000630 <strcpy>
c001917c:	83 c4 10             	add    esp,0x10
c001917f:	83 ec 08             	sub    esp,0x8
c0019182:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019186:	50                   	push   eax
c0019187:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001918e:	e8 61 f9 ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0019193:	83 c4 10             	add    esp,0x10
c0019196:	83 ec 0c             	sub    esp,0xc
c0019199:	8d 44 24 18          	lea    eax,[esp+0x18]
c001919d:	50                   	push   eax
c001919e:	e8 82 b9 fe ff       	call   c0004b25 <f_mkdir>
c00191a3:	83 c4 10             	add    esp,0x10
c00191a6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191ad:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191b4:	85 c0                	test   eax,eax
c00191b6:	75 08                	jne    c00191c0 <FAT::mkdir(char const*)+0x70>
c00191b8:	b8 00 00 00 00       	mov    eax,0x0
c00191bd:	eb 09                	jmp    c00191c8 <FAT::mkdir(char const*)+0x78>
c00191bf:	90                   	nop
c00191c0:	b8 01 00 00 00       	mov    eax,0x1
c00191c5:	8d 76 00             	lea    esi,[esi+0x0]
c00191c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191ce:	c3                   	ret    
c00191cf:	90                   	nop

c00191d0 <FAT::exists(char const*)>:
c00191d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191d6:	83 ec 08             	sub    esp,0x8
c00191d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191e0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191e4:	50                   	push   eax
c00191e5:	e8 46 74 fe ff       	call   c0000630 <strcpy>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	83 ec 08             	sub    esp,0x8
c00191f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191f4:	50                   	push   eax
c00191f5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191fc:	e8 f3 f8 ff ff       	call   c0018af4 <FAT::fixFilepath(char*)>
c0019201:	83 c4 10             	add    esp,0x10
c0019204:	83 ec 08             	sub    esp,0x8
c0019207:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001920e:	50                   	push   eax
c001920f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019213:	50                   	push   eax
c0019214:	e8 7a b5 fe ff       	call   c0004793 <f_stat>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019223:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001922a:	85 c0                	test   eax,eax
c001922c:	75 06                	jne    c0019234 <FAT::exists(char const*)+0x64>
c001922e:	b0 01                	mov    al,0x1
c0019230:	eb 06                	jmp    c0019238 <FAT::exists(char const*)+0x68>
c0019232:	66 90                	xchg   ax,ax
c0019234:	b0 00                	mov    al,0x0
c0019236:	66 90                	xchg   ax,ax
c0019238:	81 c4 2c 02 00 00    	add    esp,0x22c
c001923e:	c3                   	ret    
c001923f:	90                   	nop

c0019240 <isoReadDiscSectorHelper>:
c0019240:	83 ec 2c             	sub    esp,0x2c
c0019243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019247:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001924b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019250:	83 e8 41             	sub    eax,0x41
c0019253:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001925a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001925e:	ba 00 00 00 00       	mov    edx,0x0
c0019263:	83 ec 0c             	sub    esp,0xc
c0019266:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001926a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001926e:	52                   	push   edx
c001926f:	50                   	push   eax
c0019270:	51                   	push   ecx
c0019271:	e8 00 3f ff ff       	call   c000d176 <LogicalDisk::read(unsigned long long, int, void*)>
c0019276:	83 c4 20             	add    esp,0x20
c0019279:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001927d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019282:	74 0c                	je     c0019290 <isoReadDiscSectorHelper+0x50>
c0019284:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019288:	c1 e0 0b             	shl    eax,0xb
c001928b:	eb 0b                	jmp    c0019298 <isoReadDiscSectorHelper+0x58>
c001928d:	8d 76 00             	lea    esi,[esi+0x0]
c0019290:	b8 00 00 00 00       	mov    eax,0x0
c0019295:	8d 76 00             	lea    esi,[esi+0x0]
c0019298:	83 c4 2c             	add    esp,0x2c
c001929b:	c3                   	ret    

c001929c <iso_kprintf>:
c001929c:	83 ec 0c             	sub    esp,0xc
c001929f:	83 ec 08             	sub    esp,0x8
c00192a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192a6:	68 19 10 02 c0       	push   0xc0021019
c00192ab:	e8 a3 16 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00192b0:	83 c4 10             	add    esp,0x10
c00192b3:	90                   	nop
c00192b4:	83 c4 0c             	add    esp,0xc
c00192b7:	c3                   	ret    

c00192b8 <iso_kprintfd>:
c00192b8:	83 ec 0c             	sub    esp,0xc
c00192bb:	83 ec 08             	sub    esp,0x8
c00192be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192c2:	68 37 00 02 c0       	push   0xc0020037
c00192c7:	e8 87 16 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	90                   	nop
c00192d0:	83 c4 0c             	add    esp,0xc
c00192d3:	c3                   	ret    

c00192d4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00192d4:	b8 08 00 00 00       	mov    eax,0x8
c00192d9:	c3                   	ret    

c00192da <ISO9660::getName()>:
c00192da:	b8 6c 16 02 c0       	mov    eax,0xc002166c
c00192df:	c3                   	ret    

c00192e0 <ISO9660::closeDir(void*)>:
c00192e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00192e6:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192e9:	90                   	nop

c00192ea <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192ea:	b8 01 00 00 00       	mov    eax,0x1
c00192ef:	c3                   	ret    

c00192f0 <ISO9660::unlink(char const*)>:
c00192f0:	b8 01 00 00 00       	mov    eax,0x1
c00192f5:	c3                   	ret    

c00192f6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00192f6:	b8 03 00 00 00       	mov    eax,0x3
c00192fb:	c3                   	ret    

c00192fc <ISO9660::rename(char const*, char const*)>:
c00192fc:	b8 01 00 00 00       	mov    eax,0x1
c0019301:	c3                   	ret    

c0019302 <ISO9660::mkdir(char const*)>:
c0019302:	b8 01 00 00 00       	mov    eax,0x1
c0019307:	c3                   	ret    

c0019308 <ISO9660::~ISO9660()>:
c0019308:	83 ec 0c             	sub    esp,0xc
c001930b:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c0019310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019314:	89 10                	mov    DWORD PTR [eax],edx
c0019316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001931a:	83 ec 0c             	sub    esp,0xc
c001931d:	50                   	push   eax
c001931e:	e8 77 19 ff ff       	call   c000ac9a <Filesystem::~Filesystem()>
c0019323:	83 c4 10             	add    esp,0x10
c0019326:	90                   	nop
c0019327:	83 c4 0c             	add    esp,0xc
c001932a:	c3                   	ret    
c001932b:	90                   	nop

c001932c <ISO9660::~ISO9660()>:
c001932c:	83 ec 0c             	sub    esp,0xc
c001932f:	83 ec 0c             	sub    esp,0xc
c0019332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019336:	e8 cd ff ff ff       	call   c0019308 <ISO9660::~ISO9660()>
c001933b:	83 c4 10             	add    esp,0x10
c001933e:	83 ec 08             	sub    esp,0x8
c0019341:	6a 08                	push   0x8
c0019343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019347:	e8 0b 15 ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	83 c4 0c             	add    esp,0xc
c0019352:	c3                   	ret    
c0019353:	90                   	nop

c0019354 <ISO9660::exists(char const*)>:
c0019354:	83 ec 18             	sub    esp,0x18
c0019357:	68 87 16 02 c0       	push   0xc0021687
c001935c:	e8 de 74 ff ff       	call   c001083f <KePanic(char const*)>
c0019361:	31 c0                	xor    eax,eax
c0019363:	83 c4 1c             	add    esp,0x1c
c0019366:	c3                   	ret    
c0019367:	90                   	nop

c0019368 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019368:	56                   	push   esi
c0019369:	53                   	push   ebx
c001936a:	53                   	push   ebx
c001936b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001936f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019373:	85 db                	test   ebx,ebx
c0019375:	0f 84 ca 00 00 00    	je     c0019445 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001937b:	85 f6                	test   esi,esi
c001937d:	0f 84 c2 00 00 00    	je     c0019445 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019383:	b8 03 00 00 00       	mov    eax,0x3
c0019388:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001938d:	0f 85 b7 00 00 00    	jne    c001944a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019393:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019395:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001939c:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00193a2:	74 1b                	je     c00193bf <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00193a4:	85 c0                	test   eax,eax
c00193a6:	74 10                	je     c00193b8 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 a5 16 02 c0       	push   0xc00216a5
c00193b0:	e8 8a 74 ff ff       	call   c001083f <KePanic(char const*)>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	8a 03                	mov    al,BYTE PTR [ebx]
c00193ba:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193bf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193c2:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193c9:	85 c0                	test   eax,eax
c00193cb:	74 09                	je     c00193d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193cd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00193d4:	74 48                	je     c001941e <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00193d6:	83 ec 0c             	sub    esp,0xc
c00193d9:	68 b5 16 02 c0       	push   0xc00216b5
c00193de:	e8 70 15 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00193e3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193e6:	83 c4 10             	add    esp,0x10
c00193e9:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193f0:	85 c0                	test   eax,eax
c00193f2:	74 17                	je     c001940b <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00193fe:	68 d5 16 02 c0       	push   0xc00216d5
c0019403:	e8 4b 15 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0019408:	83 c4 10             	add    esp,0x10
c001940b:	83 ec 0c             	sub    esp,0xc
c001940e:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019415:	50                   	push   eax
c0019416:	e8 20 d6 fe ff       	call   c0006a3b <init_percd>
c001941b:	83 c4 10             	add    esp,0x10
c001941e:	51                   	push   ecx
c001941f:	83 c3 03             	add    ebx,0x3
c0019422:	51                   	push   ecx
c0019423:	6a 00                	push   0x0
c0019425:	53                   	push   ebx
c0019426:	e8 d7 d0 fe ff       	call   c0006502 <iso_open>
c001942b:	89 c2                	mov    edx,eax
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	b8 01 00 00 00       	mov    eax,0x1
c0019435:	83 fa ff             	cmp    edx,0xffffffff
c0019438:	74 10                	je     c001944a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001943a:	83 c2 32             	add    edx,0x32
c001943d:	31 c0                	xor    eax,eax
c001943f:	01 d2                	add    edx,edx
c0019441:	89 16                	mov    DWORD PTR [esi],edx
c0019443:	eb 05                	jmp    c001944a <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019445:	b8 04 00 00 00       	mov    eax,0x4
c001944a:	5a                   	pop    edx
c001944b:	5b                   	pop    ebx
c001944c:	5e                   	pop    esi
c001944d:	c3                   	ret    

c001944e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001944e:	53                   	push   ebx
c001944f:	83 ec 08             	sub    esp,0x8
c0019452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001945a:	85 c0                	test   eax,eax
c001945c:	74 2d                	je     c001948b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001945e:	85 db                	test   ebx,ebx
c0019460:	74 29                	je     c001948b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019462:	52                   	push   edx
c0019463:	b9 02 00 00 00       	mov    ecx,0x2
c0019468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001946c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019470:	99                   	cdq    
c0019471:	f7 f9                	idiv   ecx
c0019473:	83 e8 32             	sub    eax,0x32
c0019476:	50                   	push   eax
c0019477:	e8 2e d1 fe ff       	call   c00065aa <iso_read>
c001947c:	83 c4 10             	add    esp,0x10
c001947f:	89 03                	mov    DWORD PTR [ebx],eax
c0019481:	09 d0                	or     eax,edx
c0019483:	0f 94 c0             	sete   al
c0019486:	0f b6 c0             	movzx  eax,al
c0019489:	eb 05                	jmp    c0019490 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001948b:	b8 04 00 00 00       	mov    eax,0x4
c0019490:	83 c4 08             	add    esp,0x8
c0019493:	5b                   	pop    ebx
c0019494:	c3                   	ret    
c0019495:	90                   	nop

c0019496 <ISO9660::seek(void*, unsigned long long)>:
c0019496:	57                   	push   edi
c0019497:	b8 04 00 00 00       	mov    eax,0x4
c001949c:	56                   	push   esi
c001949d:	51                   	push   ecx
c001949e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00194a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00194a6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194aa:	85 d2                	test   edx,edx
c00194ac:	74 26                	je     c00194d4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194ae:	89 d0                	mov    eax,edx
c00194b0:	6a 00                	push   0x0
c00194b2:	b9 02 00 00 00       	mov    ecx,0x2
c00194b7:	57                   	push   edi
c00194b8:	99                   	cdq    
c00194b9:	f7 f9                	idiv   ecx
c00194bb:	56                   	push   esi
c00194bc:	83 e8 32             	sub    eax,0x32
c00194bf:	50                   	push   eax
c00194c0:	e8 fb d1 fe ff       	call   c00066c0 <iso_seek>
c00194c5:	31 f0                	xor    eax,esi
c00194c7:	31 fa                	xor    edx,edi
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	09 d0                	or     eax,edx
c00194ce:	0f 95 c0             	setne  al
c00194d1:	0f b6 c0             	movzx  eax,al
c00194d4:	5a                   	pop    edx
c00194d5:	5e                   	pop    esi
c00194d6:	5f                   	pop    edi
c00194d7:	c3                   	ret    

c00194d8 <ISO9660::tell(void*, unsigned long long*)>:
c00194d8:	53                   	push   ebx
c00194d9:	83 ec 08             	sub    esp,0x8
c00194dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194e4:	85 c0                	test   eax,eax
c00194e6:	74 24                	je     c001950c <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194e8:	85 db                	test   ebx,ebx
c00194ea:	74 20                	je     c001950c <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194ec:	b9 02 00 00 00       	mov    ecx,0x2
c00194f1:	83 ec 0c             	sub    esp,0xc
c00194f4:	99                   	cdq    
c00194f5:	f7 f9                	idiv   ecx
c00194f7:	83 e8 32             	sub    eax,0x32
c00194fa:	50                   	push   eax
c00194fb:	e8 44 d2 fe ff       	call   c0006744 <iso_tell>
c0019500:	83 c4 10             	add    esp,0x10
c0019503:	89 03                	mov    DWORD PTR [ebx],eax
c0019505:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019508:	31 c0                	xor    eax,eax
c001950a:	eb 05                	jmp    c0019511 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001950c:	b8 04 00 00 00       	mov    eax,0x4
c0019511:	83 c4 08             	add    esp,0x8
c0019514:	5b                   	pop    ebx
c0019515:	c3                   	ret    

c0019516 <ISO9660::stat(void*, unsigned long long*)>:
c0019516:	53                   	push   ebx
c0019517:	83 ec 14             	sub    esp,0x14
c001951a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001951e:	68 f9 16 02 c0       	push   0xc00216f9
c0019523:	e8 2b 14 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019530:	74 2c                	je     c001955e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019532:	85 db                	test   ebx,ebx
c0019534:	74 28                	je     c001955e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	b9 02 00 00 00       	mov    ecx,0x2
c001953e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019542:	99                   	cdq    
c0019543:	f7 f9                	idiv   ecx
c0019545:	83 e8 32             	sub    eax,0x32
c0019548:	50                   	push   eax
c0019549:	e8 27 d2 fe ff       	call   c0006775 <iso_total>
c001954e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019555:	89 03                	mov    DWORD PTR [ebx],eax
c0019557:	83 c4 10             	add    esp,0x10
c001955a:	31 c0                	xor    eax,eax
c001955c:	eb 05                	jmp    c0019563 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001955e:	b8 04 00 00 00       	mov    eax,0x4
c0019563:	83 c4 08             	add    esp,0x8
c0019566:	5b                   	pop    ebx
c0019567:	c3                   	ret    

c0019568 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019568:	55                   	push   ebp
c0019569:	57                   	push   edi
c001956a:	56                   	push   esi
c001956b:	53                   	push   ebx
c001956c:	83 ec 18             	sub    esp,0x18
c001956f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001957b:	68 01 17 02 c0       	push   0xc0021701
c0019580:	e8 ce 13 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0019585:	83 c4 10             	add    esp,0x10
c0019588:	85 ff                	test   edi,edi
c001958a:	0f 94 c0             	sete   al
c001958d:	85 f6                	test   esi,esi
c001958f:	0f 94 c2             	sete   dl
c0019592:	09 d0                	or     eax,edx
c0019594:	a8 01                	test   al,0x1
c0019596:	0f 85 dd 00 00 00    	jne    c0019679 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001959c:	85 db                	test   ebx,ebx
c001959e:	0f 84 d5 00 00 00    	je     c0019679 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00195a4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00195a7:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195ad:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195b4:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195b6:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195bd:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195c3:	74 1b                	je     c00195e0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195c5:	85 c0                	test   eax,eax
c00195c7:	74 10                	je     c00195d9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195c9:	83 ec 0c             	sub    esp,0xc
c00195cc:	68 a5 16 02 c0       	push   0xc00216a5
c00195d1:	e8 69 72 ff ff       	call   c001083f <KePanic(char const*)>
c00195d6:	83 c4 10             	add    esp,0x10
c00195d9:	8a 03                	mov    al,BYTE PTR [ebx]
c00195db:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195e0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195e3:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195ea:	85 c0                	test   eax,eax
c00195ec:	74 09                	je     c00195f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195ee:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00195f5:	74 51                	je     c0019648 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00195f7:	83 ec 0c             	sub    esp,0xc
c00195fa:	68 09 17 02 c0       	push   0xc0021709
c00195ff:	e8 4f 13 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0019604:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019607:	83 c4 10             	add    esp,0x10
c001960a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019612:	74 21                	je     c0019635 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019614:	83 ec 0c             	sub    esp,0xc
c0019617:	68 29 17 02 c0       	push   0xc0021729
c001961c:	e8 32 13 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c0019621:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001962e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019635:	83 ec 0c             	sub    esp,0xc
c0019638:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001963f:	50                   	push   eax
c0019640:	e8 f6 d3 fe ff       	call   c0006a3b <init_percd>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	52                   	push   edx
c0019649:	83 c3 03             	add    ebx,0x3
c001964c:	52                   	push   edx
c001964d:	6a 00                	push   0x0
c001964f:	53                   	push   ebx
c0019650:	e8 ad ce fe ff       	call   c0006502 <iso_open>
c0019655:	83 c4 10             	add    esp,0x10
c0019658:	89 c5                	mov    ebp,eax
c001965a:	83 f8 ff             	cmp    eax,0xffffffff
c001965d:	75 21                	jne    c0019680 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001965f:	50                   	push   eax
c0019660:	50                   	push   eax
c0019661:	6a 01                	push   0x1
c0019663:	53                   	push   ebx
c0019664:	e8 99 ce fe ff       	call   c0006502 <iso_open>
c0019669:	83 c4 10             	add    esp,0x10
c001966c:	ba 02 00 00 00       	mov    edx,0x2
c0019671:	40                   	inc    eax
c0019672:	74 2b                	je     c001969f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019674:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019677:	eb 24                	jmp    c001969d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0019679:	ba 04 00 00 00       	mov    edx,0x4
c001967e:	eb 1f                	jmp    c001969f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019680:	83 ec 0c             	sub    esp,0xc
c0019683:	50                   	push   eax
c0019684:	e8 ec d0 fe ff       	call   c0006775 <iso_total>
c0019689:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019690:	89 07                	mov    DWORD PTR [edi],eax
c0019692:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019695:	e8 f2 ce fe ff       	call   c000658c <iso_close>
c001969a:	83 c4 10             	add    esp,0x10
c001969d:	31 d2                	xor    edx,edx
c001969f:	83 c4 0c             	add    esp,0xc
c00196a2:	89 d0                	mov    eax,edx
c00196a4:	5b                   	pop    ebx
c00196a5:	5e                   	pop    esi
c00196a6:	5f                   	pop    edi
c00196a7:	5d                   	pop    ebp
c00196a8:	c3                   	ret    
c00196a9:	90                   	nop

c00196aa <ISO9660::close(void*)>:
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	b8 04 00 00 00       	mov    eax,0x4
c00196b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196b6:	85 d2                	test   edx,edx
c00196b8:	74 1b                	je     c00196d5 <ISO9660::close(void*)+0x2b>
c00196ba:	89 d0                	mov    eax,edx
c00196bc:	b9 02 00 00 00       	mov    ecx,0x2
c00196c1:	99                   	cdq    
c00196c2:	83 ec 0c             	sub    esp,0xc
c00196c5:	f7 f9                	idiv   ecx
c00196c7:	83 e8 32             	sub    eax,0x32
c00196ca:	50                   	push   eax
c00196cb:	e8 bc ce fe ff       	call   c000658c <iso_close>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	31 c0                	xor    eax,eax
c00196d5:	83 c4 0c             	add    esp,0xc
c00196d8:	c3                   	ret    
c00196d9:	90                   	nop

c00196da <ISO9660::openDir(char const*, void**)>:
c00196da:	56                   	push   esi
c00196db:	53                   	push   ebx
c00196dc:	50                   	push   eax
c00196dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00196e5:	85 db                	test   ebx,ebx
c00196e7:	0f 84 bd 00 00 00    	je     c00197aa <ISO9660::openDir(char const*, void**)+0xd0>
c00196ed:	85 f6                	test   esi,esi
c00196ef:	0f 84 b5 00 00 00    	je     c00197aa <ISO9660::openDir(char const*, void**)+0xd0>
c00196f5:	8a 13                	mov    dl,BYTE PTR [ebx]
c00196f7:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196fe:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c0019704:	74 1b                	je     c0019721 <ISO9660::openDir(char const*, void**)+0x47>
c0019706:	85 c0                	test   eax,eax
c0019708:	74 10                	je     c001971a <ISO9660::openDir(char const*, void**)+0x40>
c001970a:	83 ec 0c             	sub    esp,0xc
c001970d:	68 a5 16 02 c0       	push   0xc00216a5
c0019712:	e8 28 71 ff ff       	call   c001083f <KePanic(char const*)>
c0019717:	83 c4 10             	add    esp,0x10
c001971a:	8a 03                	mov    al,BYTE PTR [ebx]
c001971c:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019721:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019724:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001972b:	85 c0                	test   eax,eax
c001972d:	74 10                	je     c001973f <ISO9660::openDir(char const*, void**)+0x65>
c001972f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019736:	74 1a                	je     c0019752 <ISO9660::openDir(char const*, void**)+0x78>
c0019738:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001973f:	83 ec 0c             	sub    esp,0xc
c0019742:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019749:	50                   	push   eax
c001974a:	e8 ec d2 fe ff       	call   c0006a3b <init_percd>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	50                   	push   eax
c0019753:	83 c3 03             	add    ebx,0x3
c0019756:	50                   	push   eax
c0019757:	6a 01                	push   0x1
c0019759:	53                   	push   ebx
c001975a:	e8 a3 cd fe ff       	call   c0006502 <iso_open>
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	89 c3                	mov    ebx,eax
c0019764:	83 f8 ff             	cmp    eax,0xffffffff
c0019767:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001976c:	75 1c                	jne    c001978a <ISO9660::openDir(char const*, void**)+0xb0>
c001976e:	53                   	push   ebx
c001976f:	53                   	push   ebx
c0019770:	68 4d 17 02 c0       	push   0xc002174d
c0019775:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001977b:	e8 04 f3 fe ff       	call   c0008a84 <VgaText::puts(char const*)>
c0019780:	83 c4 10             	add    esp,0x10
c0019783:	b8 01 00 00 00       	mov    eax,0x1
c0019788:	eb 25                	jmp    c00197af <ISO9660::openDir(char const*, void**)+0xd5>
c001978a:	51                   	push   ecx
c001978b:	01 db                	add    ebx,ebx
c001978d:	51                   	push   ecx
c001978e:	83 c3 65             	add    ebx,0x65
c0019791:	68 60 17 02 c0       	push   0xc0021760
c0019796:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001979c:	e8 e3 f2 fe ff       	call   c0008a84 <VgaText::puts(char const*)>
c00197a1:	89 1e                	mov    DWORD PTR [esi],ebx
c00197a3:	83 c4 10             	add    esp,0x10
c00197a6:	31 c0                	xor    eax,eax
c00197a8:	eb 05                	jmp    c00197af <ISO9660::openDir(char const*, void**)+0xd5>
c00197aa:	b8 04 00 00 00       	mov    eax,0x4
c00197af:	5a                   	pop    edx
c00197b0:	5b                   	pop    ebx
c00197b1:	5e                   	pop    esi
c00197b2:	c3                   	ret    
c00197b3:	90                   	nop

c00197b4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197b4:	55                   	push   ebp
c00197b5:	57                   	push   edi
c00197b6:	56                   	push   esi
c00197b7:	53                   	push   ebx
c00197b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197be:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197c5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00197cc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00197d4:	0f 84 e7 00 00 00    	je     c00198c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197da:	85 db                	test   ebx,ebx
c00197dc:	0f 84 df 00 00 00    	je     c00198c1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197e2:	83 ec 0c             	sub    esp,0xc
c00197e5:	68 73 17 02 c0       	push   0xc0021773
c00197ea:	e8 64 11 ff ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c00197ef:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00197f6:	b9 02 00 00 00       	mov    ecx,0x2
c00197fb:	99                   	cdq    
c00197fc:	f7 f9                	idiv   ecx
c00197fe:	83 e8 32             	sub    eax,0x32
c0019801:	89 04 24             	mov    DWORD PTR [esp],eax
c0019804:	e8 be cf fe ff       	call   c00067c7 <iso_readdir>
c0019809:	83 c4 10             	add    esp,0x10
c001980c:	89 c6                	mov    esi,eax
c001980e:	85 c0                	test   eax,eax
c0019810:	75 37                	jne    c0019849 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019812:	56                   	push   esi
c0019813:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019818:	56                   	push   esi
c0019819:	68 7e 17 02 c0       	push   0xc002177e
c001981e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019824:	e8 5b f2 fe ff       	call   c0008a84 <VgaText::puts(char const*)>
c0019829:	83 c4 0c             	add    esp,0xc
c001982c:	68 10 01 00 00       	push   0x110
c0019831:	6a 00                	push   0x0
c0019833:	57                   	push   edi
c0019834:	e8 a7 6c fe ff       	call   c00004e0 <memset>
c0019839:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001983f:	83 c4 10             	add    esp,0x10
c0019842:	b8 01 00 00 00       	mov    eax,0x1
c0019847:	eb 7d                	jmp    c00198c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019849:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001984f:	83 ec 0c             	sub    esp,0xc
c0019852:	8d 68 08             	lea    ebp,[eax+0x8]
c0019855:	55                   	push   ebp
c0019856:	e8 05 6d fe ff       	call   c0000560 <strlen>
c001985b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019863:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019867:	83 c4 10             	add    esp,0x10
c001986a:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001986e:	75 0a                	jne    c001987a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019870:	b8 02 00 00 00       	mov    eax,0x2
c0019875:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019878:	74 05                	je     c001987f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001987a:	b8 01 00 00 00       	mov    eax,0x1
c001987f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019883:	50                   	push   eax
c0019884:	50                   	push   eax
c0019885:	55                   	push   ebp
c0019886:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001988a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001988e:	50                   	push   eax
c001988f:	e8 9c 6d fe ff       	call   c0000630 <strcpy>
c0019894:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001989b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001989d:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00198a3:	5a                   	pop    edx
c00198a4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00198a9:	59                   	pop    ecx
c00198aa:	68 91 17 02 c0       	push   0xc0021791
c00198af:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198b5:	e8 ca f1 fe ff       	call   c0008a84 <VgaText::puts(char const*)>
c00198ba:	83 c4 10             	add    esp,0x10
c00198bd:	31 c0                	xor    eax,eax
c00198bf:	eb 05                	jmp    c00198c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00198c1:	b8 04 00 00 00       	mov    eax,0x4
c00198c6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198cc:	5b                   	pop    ebx
c00198cd:	5e                   	pop    esi
c00198ce:	5f                   	pop    edi
c00198cf:	5d                   	pop    ebp
c00198d0:	c3                   	ret    

c00198d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198d1:	57                   	push   edi
c00198d2:	56                   	push   esi
c00198d3:	53                   	push   ebx
c00198d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198dc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198e0:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00198e6:	0f be cb             	movsx  ecx,bl
c00198e9:	75 0b                	jne    c00198f6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198eb:	0f be 05 e4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222e4
c00198f2:	39 c8                	cmp    eax,ecx
c00198f4:	74 47                	je     c001993d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198f6:	83 ec 0c             	sub    esp,0xc
c00198f9:	31 d2                	xor    edx,edx
c00198fb:	68 40 83 02 c0       	push   0xc0028340
c0019900:	6a 01                	push   0x1
c0019902:	52                   	push   edx
c0019903:	56                   	push   esi
c0019904:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c001990b:	e8 66 38 ff ff       	call   c000d176 <LogicalDisk::read(unsigned long long, int, void*)>
c0019910:	83 c4 20             	add    esp,0x20
c0019913:	85 c0                	test   eax,eax
c0019915:	75 0e                	jne    c0019925 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0019917:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c001991d:	88 1d e4 22 02 c0    	mov    BYTE PTR ds:0xc00222e4,bl
c0019923:	eb 18                	jmp    c001993d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019925:	50                   	push   eax
c0019926:	68 00 08 00 00       	push   0x800
c001992b:	6a 00                	push   0x0
c001992d:	57                   	push   edi
c001992e:	e8 ad 6b fe ff       	call   c00004e0 <memset>
c0019933:	83 c4 10             	add    esp,0x10
c0019936:	b8 01 00 00 00       	mov    eax,0x1
c001993b:	eb 0e                	jmp    c001994b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001993d:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019942:	b9 00 08 00 00       	mov    ecx,0x800
c0019947:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019949:	31 c0                	xor    eax,eax
c001994b:	5b                   	pop    ebx
c001994c:	5e                   	pop    esi
c001994d:	5f                   	pop    edi
c001994e:	c3                   	ret    
c001994f:	90                   	nop

c0019950 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019950:	53                   	push   ebx
c0019951:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019957:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019961:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0019968:	8d 58 41             	lea    ebx,[eax+0x41]
c001996b:	0f be db             	movsx  ebx,bl
c001996e:	53                   	push   ebx
c001996f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019973:	50                   	push   eax
c0019974:	6a 10                	push   0x10
c0019976:	e8 56 ff ff ff       	call   c00198d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	31 d2                	xor    edx,edx
c0019980:	85 c0                	test   eax,eax
c0019982:	75 33                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019984:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019989:	75 2c                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001998b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019990:	75 25                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019992:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019997:	75 1e                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019999:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001999e:	75 17                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00199a5:	75 10                	jne    c00199b7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00199a7:	83 ec 0c             	sub    esp,0xc
c00199aa:	53                   	push   ebx
c00199ab:	e8 8b d0 fe ff       	call   c0006a3b <init_percd>
c00199b0:	83 c4 10             	add    esp,0x10
c00199b3:	40                   	inc    eax
c00199b4:	0f 95 c2             	setne  dl
c00199b7:	81 c4 08 08 00 00    	add    esp,0x808
c00199bd:	88 d0                	mov    al,dl
c00199bf:	5b                   	pop    ebx
c00199c0:	c3                   	ret    
c00199c1:	90                   	nop

c00199c2 <ISO9660::ISO9660()>:
c00199c2:	83 ec 0c             	sub    esp,0xc
c00199c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199c9:	83 ec 0c             	sub    esp,0xc
c00199cc:	50                   	push   eax
c00199cd:	e8 a4 12 ff ff       	call   c000ac76 <Filesystem::Filesystem()>
c00199d2:	83 c4 10             	add    esp,0x10
c00199d5:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c00199da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199de:	89 10                	mov    DWORD PTR [eax],edx
c00199e0:	e8 68 d1 fe ff       	call   c0006b4d <fs_iso9660_init>
c00199e5:	90                   	nop
c00199e6:	83 c4 0c             	add    esp,0xc
c00199e9:	c3                   	ret    

c00199ea <SoundCard::beginPlayback()>:
c00199ea:	c7 44 24 04 0c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002180c
c00199f2:	e9 48 6e ff ff       	jmp    c001083f <KePanic(char const*)>
c00199f7:	90                   	nop

c00199f8 <SoundCard::stopPlayback()>:
c00199f8:	c7 44 24 04 0c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002180c
c0019a00:	e9 3a 6e ff ff       	jmp    c001083f <KePanic(char const*)>
c0019a05:	90                   	nop

c0019a06 <SoundCard::SoundCard(char const*)>:
c0019a06:	83 ec 1c             	sub    esp,0x1c
c0019a09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a0d:	83 ec 08             	sub    esp,0x8
c0019a10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a14:	50                   	push   eax
c0019a15:	e8 04 25 ff ff       	call   c000bf1e <Device::Device(char const*)>
c0019a1a:	83 c4 10             	add    esp,0x10
c0019a1d:	ba 58 18 02 c0       	mov    edx,0xc0021858
c0019a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a26:	89 10                	mov    DWORD PTR [eax],edx
c0019a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a2c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a37:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a45:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a53:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a61:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a73:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a78:	7f 1a                	jg     c0019a94 <SoundCard::SoundCard(char const*)+0x8e>
c0019a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a82:	83 c2 54             	add    edx,0x54
c0019a85:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a8d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a92:	eb df                	jmp    c0019a73 <SoundCard::SoundCard(char const*)+0x6d>
c0019a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a98:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a9f:	90                   	nop
c0019aa0:	83 c4 1c             	add    esp,0x1c
c0019aa3:	c3                   	ret    

c0019aa4 <SoundCard::~SoundCard()>:
c0019aa4:	83 ec 0c             	sub    esp,0xc
c0019aa7:	ba 58 18 02 c0       	mov    edx,0xc0021858
c0019aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab0:	89 10                	mov    DWORD PTR [eax],edx
c0019ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ab6:	83 ec 0c             	sub    esp,0xc
c0019ab9:	50                   	push   eax
c0019aba:	e8 cd 21 ff ff       	call   c000bc8c <Device::~Device()>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	90                   	nop
c0019ac3:	83 c4 0c             	add    esp,0xc
c0019ac6:	c3                   	ret    
c0019ac7:	90                   	nop

c0019ac8 <SoundCard::~SoundCard()>:
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	83 ec 0c             	sub    esp,0xc
c0019ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ad2:	e8 cd ff ff ff       	call   c0019aa4 <SoundCard::~SoundCard()>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	83 ec 08             	sub    esp,0x8
c0019add:	68 e8 01 00 00       	push   0x1e8
c0019ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ae6:	e8 6c 0d ff ff       	call   c000a857 <operator delete(void*, unsigned long)>
c0019aeb:	83 c4 10             	add    esp,0x10
c0019aee:	83 c4 0c             	add    esp,0xc
c0019af1:	c3                   	ret    

c0019af2 <SoundCard::configureRates(int, int, int)>:
c0019af2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019af6:	31 c0                	xor    eax,eax
c0019af8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019aff:	75 20                	jne    c0019b21 <SoundCard::configureRates(int, int, int)+0x2f>
c0019b01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b05:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b0f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b19:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b1f:	b0 01                	mov    al,0x1
c0019b21:	c3                   	ret    

c0019b22 <SoundCard::getSamples16(int, short*)>:
c0019b22:	55                   	push   ebp
c0019b23:	57                   	push   edi
c0019b24:	31 ff                	xor    edi,edi
c0019b26:	56                   	push   esi
c0019b27:	53                   	push   ebx
c0019b28:	31 db                	xor    ebx,ebx
c0019b2a:	83 ec 10             	sub    esp,0x10
c0019b2d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b31:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b35:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b38:	50                   	push   eax
c0019b39:	6a 00                	push   0x0
c0019b3b:	55                   	push   ebp
c0019b3c:	e8 9f 69 fe ff       	call   c00004e0 <memset>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b48:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019b4f:	85 c0                	test   eax,eax
c0019b51:	74 1b                	je     c0019b6e <SoundCard::getSamples16(int, short*)+0x4c>
c0019b53:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b57:	75 15                	jne    c0019b6e <SoundCard::getSamples16(int, short*)+0x4c>
c0019b59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b5d:	55                   	push   ebp
c0019b5e:	56                   	push   esi
c0019b5f:	50                   	push   eax
c0019b60:	e8 f3 02 00 00       	call   c0019e58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b65:	83 c4 10             	add    esp,0x10
c0019b68:	39 c7                	cmp    edi,eax
c0019b6a:	7d 02                	jge    c0019b6e <SoundCard::getSamples16(int, short*)+0x4c>
c0019b6c:	89 c7                	mov    edi,eax
c0019b6e:	43                   	inc    ebx
c0019b6f:	83 fb 20             	cmp    ebx,0x20
c0019b72:	75 d0                	jne    c0019b44 <SoundCard::getSamples16(int, short*)+0x22>
c0019b74:	83 c4 0c             	add    esp,0xc
c0019b77:	89 f8                	mov    eax,edi
c0019b79:	5b                   	pop    ebx
c0019b7a:	5e                   	pop    esi
c0019b7b:	5f                   	pop    edi
c0019b7c:	5d                   	pop    ebp
c0019b7d:	c3                   	ret    

c0019b7e <SoundCard::getSamples32(int, int*)>:
c0019b7e:	55                   	push   ebp
c0019b7f:	57                   	push   edi
c0019b80:	31 ff                	xor    edi,edi
c0019b82:	56                   	push   esi
c0019b83:	31 f6                	xor    esi,esi
c0019b85:	53                   	push   ebx
c0019b86:	83 ec 10             	sub    esp,0x10
c0019b89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b8d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b91:	c1 e0 02             	shl    eax,0x2
c0019b94:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b98:	50                   	push   eax
c0019b99:	6a 00                	push   0x0
c0019b9b:	55                   	push   ebp
c0019b9c:	e8 3f 69 fe ff       	call   c00004e0 <memset>
c0019ba1:	83 c4 10             	add    esp,0x10
c0019ba4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019bab:	85 c0                	test   eax,eax
c0019bad:	74 1b                	je     c0019bca <SoundCard::getSamples32(int, int*)+0x4c>
c0019baf:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019bb3:	75 15                	jne    c0019bca <SoundCard::getSamples32(int, int*)+0x4c>
c0019bb5:	53                   	push   ebx
c0019bb6:	55                   	push   ebp
c0019bb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bbb:	50                   	push   eax
c0019bbc:	e8 67 03 00 00       	call   c0019f28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bc1:	83 c4 10             	add    esp,0x10
c0019bc4:	39 c6                	cmp    esi,eax
c0019bc6:	7d 02                	jge    c0019bca <SoundCard::getSamples32(int, int*)+0x4c>
c0019bc8:	89 c6                	mov    esi,eax
c0019bca:	47                   	inc    edi
c0019bcb:	83 ff 20             	cmp    edi,0x20
c0019bce:	75 d4                	jne    c0019ba4 <SoundCard::getSamples32(int, int*)+0x26>
c0019bd0:	85 f6                	test   esi,esi
c0019bd2:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019bd9:	75 0f                	jne    c0019bea <SoundCard::getSamples32(int, int*)+0x6c>
c0019bdb:	85 c0                	test   eax,eax
c0019bdd:	74 1b                	je     c0019bfa <SoundCard::getSamples32(int, int*)+0x7c>
c0019bdf:	83 ec 0c             	sub    esp,0xc
c0019be2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be4:	53                   	push   ebx
c0019be5:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019be8:	eb 0d                	jmp    c0019bf7 <SoundCard::getSamples32(int, int*)+0x79>
c0019bea:	85 c0                	test   eax,eax
c0019bec:	75 0c                	jne    c0019bfa <SoundCard::getSamples32(int, int*)+0x7c>
c0019bee:	83 ec 0c             	sub    esp,0xc
c0019bf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bf3:	53                   	push   ebx
c0019bf4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019bf7:	83 c4 10             	add    esp,0x10
c0019bfa:	83 c4 0c             	add    esp,0xc
c0019bfd:	89 f0                	mov    eax,esi
c0019bff:	5b                   	pop    ebx
c0019c00:	5e                   	pop    esi
c0019c01:	5f                   	pop    edi
c0019c02:	5d                   	pop    ebp
c0019c03:	c3                   	ret    

c0019c04 <SoundCard::addChannel(SoundPort*)>:
c0019c04:	83 ec 0c             	sub    esp,0xc
c0019c07:	31 c0                	xor    eax,eax
c0019c09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c0d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c15:	74 1b                	je     c0019c32 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c17:	40                   	inc    eax
c0019c18:	83 f8 20             	cmp    eax,0x20
c0019c1b:	75 f0                	jne    c0019c0d <SoundCard::addChannel(SoundPort*)+0x9>
c0019c1d:	83 ec 0c             	sub    esp,0xc
c0019c20:	68 31 18 02 c0       	push   0xc0021831
c0019c25:	e8 15 6c ff ff       	call   c001083f <KePanic(char const*)>
c0019c2a:	83 c4 10             	add    esp,0x10
c0019c2d:	83 c8 ff             	or     eax,0xffffffff
c0019c30:	eb 0b                	jmp    c0019c3d <SoundCard::addChannel(SoundPort*)+0x39>
c0019c32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c36:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c3d:	83 c4 0c             	add    esp,0xc
c0019c40:	c3                   	ret    
c0019c41:	90                   	nop

c0019c42 <SoundCard::removeChannel(int)>:
c0019c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c4a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c55:	c3                   	ret    
c0019c56:	66 90                	xchg   ax,ax

c0019c58 <SoundPort::SoundPort(int, int, int, int)>:
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c5f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c6a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c76:	89 10                	mov    DWORD PTR [eax],edx
c0019c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c8e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c93:	75 13                	jne    c0019ca8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c9b:	05 a0 0f 00 00       	add    eax,0xfa0
c0019ca0:	d1 e0                	shl    eax,1
c0019ca2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019ca6:	66 90                	xchg   ax,ax
c0019ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019cb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cc5:	c1 e0 02             	shl    eax,0x2
c0019cc8:	83 ec 0c             	sub    esp,0xc
c0019ccb:	50                   	push   eax
c0019ccc:	e8 bb dd fe ff       	call   c0007a8c <malloc>
c0019cd1:	83 c4 10             	add    esp,0x10
c0019cd4:	89 c2                	mov    edx,eax
c0019cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019cdd:	90                   	nop
c0019cde:	83 c4 0c             	add    esp,0xc
c0019ce1:	c3                   	ret    
c0019ce2:	66 90                	xchg   ax,ax

c0019ce4 <SoundPort::~SoundPort()>:
c0019ce4:	83 ec 0c             	sub    esp,0xc
c0019ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ceb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cee:	85 c0                	test   eax,eax
c0019cf0:	74 1e                	je     c0019d10 <SoundPort::~SoundPort()+0x2c>
c0019cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019cf9:	83 ec 0c             	sub    esp,0xc
c0019cfc:	50                   	push   eax
c0019cfd:	e8 9a dd fe ff       	call   c0007a9c <free>
c0019d02:	83 c4 10             	add    esp,0x10
c0019d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d09:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d10:	90                   	nop
c0019d11:	83 c4 0c             	add    esp,0xc
c0019d14:	c3                   	ret    
c0019d15:	90                   	nop
c0019d16:	66 90                	xchg   ax,ax

c0019d18 <SoundPort::unpause()>:
c0019d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d1c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <SoundPort::pause()>:
c0019d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d28:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d2c:	c3                   	ret    
c0019d2d:	90                   	nop
c0019d2e:	66 90                	xchg   ax,ax

c0019d30 <SoundPort::getBufferUsed()>:
c0019d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d37:	c3                   	ret    

c0019d38 <SoundPort::getBufferSize()>:
c0019d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d3f:	c3                   	ret    

c0019d40 <SoundPort::buffer16(short*, int)>:
c0019d40:	55                   	push   ebp
c0019d41:	57                   	push   edi
c0019d42:	56                   	push   esi
c0019d43:	53                   	push   ebx
c0019d44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d52:	74 68                	je     c0019dbc <SoundPort::buffer16(short*, int)+0x7c>
c0019d54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d58:	85 c9                	test   ecx,ecx
c0019d5a:	7e 60                	jle    c0019dbc <SoundPort::buffer16(short*, int)+0x7c>
c0019d5c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d60:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d63:	8d 70 01             	lea    esi,[eax+0x1]
c0019d66:	c1 e1 0f             	shl    ecx,0xf
c0019d69:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d6c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d6f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d72:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d75:	74 4d                	je     c0019dc4 <SoundPort::buffer16(short*, int)+0x84>
c0019d77:	31 f6                	xor    esi,esi
c0019d79:	eb 21                	jmp    c0019d9c <SoundPort::buffer16(short*, int)+0x5c>
c0019d7b:	90                   	nop
c0019d7c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d81:	c1 e3 0f             	shl    ebx,0xf
c0019d84:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d87:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d8a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d8d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d90:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d93:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d96:	74 1c                	je     c0019db4 <SoundPort::buffer16(short*, int)+0x74>
c0019d98:	89 c6                	mov    esi,eax
c0019d9a:	66 90                	xchg   ax,ax
c0019d9c:	8d 46 01             	lea    eax,[esi+0x1]
c0019d9f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019da3:	75 d7                	jne    c0019d7c <SoundPort::buffer16(short*, int)+0x3c>
c0019da5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da9:	8d 76 00             	lea    esi,[esi+0x0]
c0019dac:	5b                   	pop    ebx
c0019dad:	5e                   	pop    esi
c0019dae:	5f                   	pop    edi
c0019daf:	5d                   	pop    ebp
c0019db0:	c3                   	ret    
c0019db1:	8d 76 00             	lea    esi,[esi+0x0]
c0019db4:	5b                   	pop    ebx
c0019db5:	8d 46 02             	lea    eax,[esi+0x2]
c0019db8:	5e                   	pop    esi
c0019db9:	5f                   	pop    edi
c0019dba:	5d                   	pop    ebp
c0019dbb:	c3                   	ret    
c0019dbc:	5b                   	pop    ebx
c0019dbd:	31 c0                	xor    eax,eax
c0019dbf:	5e                   	pop    esi
c0019dc0:	5f                   	pop    edi
c0019dc1:	5d                   	pop    ebp
c0019dc2:	c3                   	ret    
c0019dc3:	90                   	nop
c0019dc4:	b8 01 00 00 00       	mov    eax,0x1
c0019dc9:	eb e1                	jmp    c0019dac <SoundPort::buffer16(short*, int)+0x6c>
c0019dcb:	90                   	nop

c0019dcc <SoundPort::buffer32(int*, int)>:
c0019dcc:	55                   	push   ebp
c0019dcd:	57                   	push   edi
c0019dce:	56                   	push   esi
c0019dcf:	53                   	push   ebx
c0019dd0:	83 ec 04             	sub    esp,0x4
c0019dd3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ddb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019de2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019de5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019de8:	74 5a                	je     c0019e44 <SoundPort::buffer32(int*, int)+0x78>
c0019dea:	85 c0                	test   eax,eax
c0019dec:	7e 56                	jle    c0019e44 <SoundPort::buffer32(int*, int)+0x78>
c0019dee:	8d 71 01             	lea    esi,[ecx+0x1]
c0019df1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019df4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019df7:	8b 37                	mov    esi,DWORD PTR [edi]
c0019df9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019dfc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e02:	74 4c                	je     c0019e50 <SoundPort::buffer32(int*, int)+0x84>
c0019e04:	31 f6                	xor    esi,esi
c0019e06:	eb 1c                	jmp    c0019e24 <SoundPort::buffer32(int*, int)+0x58>
c0019e08:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019e0b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e0e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e11:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e14:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e18:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e1b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e1e:	74 18                	je     c0019e38 <SoundPort::buffer32(int*, int)+0x6c>
c0019e20:	89 de                	mov    esi,ebx
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e27:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e2a:	75 dc                	jne    c0019e08 <SoundPort::buffer32(int*, int)+0x3c>
c0019e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e2f:	90                   	nop
c0019e30:	83 c4 04             	add    esp,0x4
c0019e33:	5b                   	pop    ebx
c0019e34:	5e                   	pop    esi
c0019e35:	5f                   	pop    edi
c0019e36:	5d                   	pop    ebp
c0019e37:	c3                   	ret    
c0019e38:	83 c4 04             	add    esp,0x4
c0019e3b:	8d 46 02             	lea    eax,[esi+0x2]
c0019e3e:	5b                   	pop    ebx
c0019e3f:	5e                   	pop    esi
c0019e40:	5f                   	pop    edi
c0019e41:	5d                   	pop    ebp
c0019e42:	c3                   	ret    
c0019e43:	90                   	nop
c0019e44:	83 c4 04             	add    esp,0x4
c0019e47:	31 c0                	xor    eax,eax
c0019e49:	5b                   	pop    ebx
c0019e4a:	5e                   	pop    esi
c0019e4b:	5f                   	pop    edi
c0019e4c:	5d                   	pop    ebp
c0019e4d:	c3                   	ret    
c0019e4e:	66 90                	xchg   ax,ax
c0019e50:	b8 01 00 00 00       	mov    eax,0x1
c0019e55:	eb d9                	jmp    c0019e30 <SoundPort::buffer32(int*, int)+0x64>
c0019e57:	90                   	nop

c0019e58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e58:	57                   	push   edi
c0019e59:	56                   	push   esi
c0019e5a:	53                   	push   ebx
c0019e5b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019e5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e63:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019e67:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019e6d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e6f:	74 13                	je     c0019e84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x2c>
c0019e71:	83 ec 0c             	sub    esp,0xc
c0019e74:	68 84 18 02 c0       	push   0xc0021884
c0019e79:	e8 c1 69 ff ff       	call   c001083f <KePanic(char const*)>
c0019e7e:	83 c4 10             	add    esp,0x10
c0019e81:	8d 76 00             	lea    esi,[esi+0x0]
c0019e84:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019e8a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e8d:	74 11                	je     c0019ea0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019e8f:	83 ec 0c             	sub    esp,0xc
c0019e92:	68 c3 18 02 c0       	push   0xc00218c3
c0019e97:	e8 a3 69 ff ff       	call   c001083f <KePanic(char const*)>
c0019e9c:	83 c4 10             	add    esp,0x10
c0019e9f:	90                   	nop
c0019ea0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019ea6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019ea9:	74 11                	je     c0019ebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x64>
c0019eab:	83 ec 0c             	sub    esp,0xc
c0019eae:	68 c3 18 02 c0       	push   0xc00218c3
c0019eb3:	e8 87 69 ff ff       	call   c001083f <KePanic(char const*)>
c0019eb8:	83 c4 10             	add    esp,0x10
c0019ebb:	90                   	nop
c0019ebc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019ebf:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019ec3:	7e 07                	jle    c0019ecc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x74>
c0019ec5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ecc:	85 f6                	test   esi,esi
c0019ece:	7e 2c                	jle    c0019efc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0019ed0:	31 d2                	xor    edx,edx
c0019ed2:	66 90                	xchg   ax,ax
c0019ed4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019ed7:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0019eda:	89 c8                	mov    eax,ecx
c0019edc:	c1 f8 1f             	sar    eax,0x1f
c0019edf:	25 ff 7f 00 00       	and    eax,0x7fff
c0019ee4:	01 c8                	add    eax,ecx
c0019ee6:	66 8b 0c 57          	mov    cx,WORD PTR [edi+edx*2]
c0019eea:	c1 f8 0f             	sar    eax,0xf
c0019eed:	01 c1                	add    ecx,eax
c0019eef:	66 89 0c 57          	mov    WORD PTR [edi+edx*2],cx
c0019ef3:	83 c2 01             	add    edx,0x1
c0019ef6:	39 f2                	cmp    edx,esi
c0019ef8:	75 da                	jne    c0019ed4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0019efa:	66 90                	xchg   ax,ax
c0019efc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019eff:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019f02:	83 ec 04             	sub    esp,0x4
c0019f05:	29 f0                	sub    eax,esi
c0019f07:	c1 e0 02             	shl    eax,0x2
c0019f0a:	50                   	push   eax
c0019f0b:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019f0e:	50                   	push   eax
c0019f0f:	52                   	push   edx
c0019f10:	e8 bb 64 fe ff       	call   c00003d0 <memmove>
c0019f15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f18:	83 c4 10             	add    esp,0x10
c0019f1b:	29 f0                	sub    eax,esi
c0019f1d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f20:	89 f0                	mov    eax,esi
c0019f22:	5b                   	pop    ebx
c0019f23:	5e                   	pop    esi
c0019f24:	5f                   	pop    edi
c0019f25:	c3                   	ret    
c0019f26:	66 90                	xchg   ax,ax

c0019f28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f28:	57                   	push   edi
c0019f29:	56                   	push   esi
c0019f2a:	53                   	push   ebx
c0019f2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f37:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019f3d:	39 06                	cmp    DWORD PTR [esi],eax
c0019f3f:	74 13                	je     c0019f54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019f41:	83 ec 0c             	sub    esp,0xc
c0019f44:	68 a4 18 02 c0       	push   0xc00218a4
c0019f49:	e8 f1 68 ff ff       	call   c001083f <KePanic(char const*)>
c0019f4e:	83 c4 10             	add    esp,0x10
c0019f51:	8d 76 00             	lea    esi,[esi+0x0]
c0019f54:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019f5a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019f5d:	74 11                	je     c0019f70 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019f5f:	83 ec 0c             	sub    esp,0xc
c0019f62:	68 df 18 02 c0       	push   0xc00218df
c0019f67:	e8 d3 68 ff ff       	call   c001083f <KePanic(char const*)>
c0019f6c:	83 c4 10             	add    esp,0x10
c0019f6f:	90                   	nop
c0019f70:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019f76:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019f79:	74 11                	je     c0019f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019f7b:	83 ec 0c             	sub    esp,0xc
c0019f7e:	68 df 18 02 c0       	push   0xc00218df
c0019f83:	e8 b7 68 ff ff       	call   c001083f <KePanic(char const*)>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	90                   	nop
c0019f8c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019f8f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0019f93:	7e 07                	jle    c0019f9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019f95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f99:	8d 76 00             	lea    esi,[esi+0x0]
c0019f9c:	85 ff                	test   edi,edi
c0019f9e:	7e 1c                	jle    c0019fbc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0019fa0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019fa7:	31 c0                	xor    eax,eax
c0019fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019faf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fb2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019fb5:	83 c0 04             	add    eax,0x4
c0019fb8:	39 c1                	cmp    ecx,eax
c0019fba:	75 f0                	jne    c0019fac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019fbc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fbf:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019fc2:	83 ec 04             	sub    esp,0x4
c0019fc5:	29 f8                	sub    eax,edi
c0019fc7:	c1 e0 02             	shl    eax,0x2
c0019fca:	50                   	push   eax
c0019fcb:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019fce:	50                   	push   eax
c0019fcf:	52                   	push   edx
c0019fd0:	e8 fb 63 fe ff       	call   c00003d0 <memmove>
c0019fd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	29 f8                	sub    eax,edi
c0019fdd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0019fe0:	89 f8                	mov    eax,edi
c0019fe2:	5b                   	pop    ebx
c0019fe3:	5e                   	pop    esi
c0019fe4:	5f                   	pop    edi
c0019fe5:	c3                   	ret    

c0019fe6 <PCI::open(int, int, void*)>:
c0019fe6:	83 ec 18             	sub    esp,0x18
c0019fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ff1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ff7:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ff9:	50                   	push   eax
c0019ffa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019ffd:	31 c0                	xor    eax,eax
c0019fff:	83 c4 1c             	add    esp,0x1c
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <PCI::close(int, int, void*)>:
c001a004:	31 c0                	xor    eax,eax
c001a006:	c3                   	ret    
c001a007:	90                   	nop

c001a008 <PCI::PCI()>:
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a00f:	83 ec 08             	sub    esp,0x8
c001a012:	68 fb 18 02 c0       	push   0xc00218fb
c001a017:	50                   	push   eax
c001a018:	e8 cf 16 ff ff       	call   c000b6ec <Bus::Bus(char const*)>
c001a01d:	83 c4 10             	add    esp,0x10
c001a020:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c001a025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a029:	89 10                	mov    DWORD PTR [eax],edx
c001a02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a02f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03d:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a046:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a04c:	0f b6 d0             	movzx  edx,al
c001a04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a053:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a064:	0f b6 d0             	movzx  edx,al
c001a067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a06b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a074:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a07a:	8d 50 01             	lea    edx,[eax+0x1]
c001a07d:	88 d1                	mov    cl,dl
c001a07f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a083:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a089:	0f b6 d0             	movzx  edx,al
c001a08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a090:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a094:	83 c9 c0             	or     ecx,0xffffffc0
c001a097:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a09b:	90                   	nop
c001a09c:	83 c4 0c             	add    esp,0xc
c001a09f:	c3                   	ret    

c001a0a0 <PCI::readBAR8(unsigned int, int)>:
c001a0a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0a8:	f6 c2 01             	test   dl,0x1
c001a0ab:	74 07                	je     c001a0b4 <PCI::readBAR8(unsigned int, int)+0x14>
c001a0ad:	83 e2 fc             	and    edx,0xfffffffc
c001a0b0:	01 c2                	add    edx,eax
c001a0b2:	ec                   	in     al,dx
c001a0b3:	c3                   	ret    
c001a0b4:	83 e2 f0             	and    edx,0xfffffff0
c001a0b7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0ba:	c3                   	ret    
c001a0bb:	90                   	nop

c001a0bc <PCI::readBAR16(unsigned int, int)>:
c001a0bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0c4:	f6 c2 01             	test   dl,0x1
c001a0c7:	74 08                	je     c001a0d1 <PCI::readBAR16(unsigned int, int)+0x15>
c001a0c9:	83 e2 fc             	and    edx,0xfffffffc
c001a0cc:	01 c2                	add    edx,eax
c001a0ce:	66 ed                	in     ax,dx
c001a0d0:	c3                   	ret    
c001a0d1:	83 e2 f0             	and    edx,0xfffffff0
c001a0d4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a0d8:	c3                   	ret    
c001a0d9:	90                   	nop

c001a0da <PCI::readBAR32(unsigned int, int)>:
c001a0da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0e2:	f6 c2 01             	test   dl,0x1
c001a0e5:	74 07                	je     c001a0ee <PCI::readBAR32(unsigned int, int)+0x14>
c001a0e7:	83 e2 fc             	and    edx,0xfffffffc
c001a0ea:	01 c2                	add    edx,eax
c001a0ec:	ed                   	in     eax,dx
c001a0ed:	c3                   	ret    
c001a0ee:	83 e2 f0             	and    edx,0xfffffff0
c001a0f1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a0f4:	c3                   	ret    
c001a0f5:	90                   	nop

c001a0f6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a0f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a102:	f6 c2 01             	test   dl,0x1
c001a105:	74 07                	je     c001a10e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a107:	83 e2 fc             	and    edx,0xfffffffc
c001a10a:	01 ca                	add    edx,ecx
c001a10c:	ee                   	out    dx,al
c001a10d:	c3                   	ret    
c001a10e:	83 e2 f0             	and    edx,0xfffffff0
c001a111:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a114:	c3                   	ret    
c001a115:	90                   	nop

c001a116 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a11a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a11e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a122:	f6 c2 01             	test   dl,0x1
c001a125:	74 08                	je     c001a12f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a127:	83 e2 fc             	and    edx,0xfffffffc
c001a12a:	01 ca                	add    edx,ecx
c001a12c:	66 ef                	out    dx,ax
c001a12e:	c3                   	ret    
c001a12f:	83 e2 f0             	and    edx,0xfffffff0
c001a132:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a136:	c3                   	ret    
c001a137:	90                   	nop

c001a138 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a13c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a140:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a144:	f6 c2 01             	test   dl,0x1
c001a147:	74 07                	je     c001a150 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a149:	83 e2 fc             	and    edx,0xfffffffc
c001a14c:	01 ca                	add    edx,ecx
c001a14e:	ef                   	out    dx,eax
c001a14f:	c3                   	ret    
c001a150:	83 e2 f0             	and    edx,0xfffffff0
c001a153:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a158:	55                   	push   ebp
c001a159:	57                   	push   edi
c001a15a:	56                   	push   esi
c001a15b:	53                   	push   ebx
c001a15c:	83 ec 0c             	sub    esp,0xc
c001a15f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a164:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a168:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a16c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a170:	83 fe 07             	cmp    esi,0x7
c001a173:	76 10                	jbe    c001a185 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a175:	83 ec 0c             	sub    esp,0xc
c001a178:	68 03 19 02 c0       	push   0xc0021903
c001a17d:	e8 bd 66 ff ff       	call   c001083f <KePanic(char const*)>
c001a182:	83 c4 10             	add    esp,0x10
c001a185:	0f b6 db             	movzx  ebx,bl
c001a188:	83 fb 0f             	cmp    ebx,0xf
c001a18b:	76 10                	jbe    c001a19d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a18d:	83 ec 0c             	sub    esp,0xc
c001a190:	68 33 19 02 c0       	push   0xc0021933
c001a195:	e8 a5 66 ff ff       	call   c001083f <KePanic(char const*)>
c001a19a:	83 c4 10             	add    esp,0x10
c001a19d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a1a0:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a1a5:	83 c8 f0             	or     eax,0xfffffff0
c001a1a8:	ee                   	out    dx,al
c001a1a9:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a1ae:	89 e8                	mov    eax,ebp
c001a1b0:	ee                   	out    dx,al
c001a1b1:	89 f9                	mov    ecx,edi
c001a1b3:	83 c4 0c             	add    esp,0xc
c001a1b6:	89 d8                	mov    eax,ebx
c001a1b8:	0f b6 d9             	movzx  ebx,cl
c001a1bb:	c1 e0 08             	shl    eax,0x8
c001a1be:	83 e3 fc             	and    ebx,0xfffffffc
c001a1c1:	09 d8                	or     eax,ebx
c001a1c3:	5b                   	pop    ebx
c001a1c4:	5e                   	pop    esi
c001a1c5:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1ca:	5f                   	pop    edi
c001a1cb:	5d                   	pop    ebp
c001a1cc:	c3                   	ret    
c001a1cd:	90                   	nop

c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1ce:	57                   	push   edi
c001a1cf:	56                   	push   esi
c001a1d0:	53                   	push   ebx
c001a1d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1e1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1eb:	83 ff 01             	cmp    edi,0x1
c001a1ee:	75 3f                	jne    c001a22f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a1f0:	89 de                	mov    esi,ebx
c001a1f2:	0f b6 c0             	movzx  eax,al
c001a1f5:	c1 e0 10             	shl    eax,0x10
c001a1f8:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a1fe:	0f b6 c9             	movzx  ecx,cl
c001a201:	c1 e1 08             	shl    ecx,0x8
c001a204:	09 f0                	or     eax,esi
c001a206:	0f b6 d2             	movzx  edx,dl
c001a209:	c1 e2 0b             	shl    edx,0xb
c001a20c:	09 c8                	or     eax,ecx
c001a20e:	09 d0                	or     eax,edx
c001a210:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a215:	0d 00 00 00 80       	or     eax,0x80000000
c001a21a:	ef                   	out    dx,eax
c001a21b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a220:	ed                   	in     eax,dx
c001a221:	83 e3 02             	and    ebx,0x2
c001a224:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a22b:	d3 e8                	shr    eax,cl
c001a22d:	eb 44                	jmp    c001a273 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a22f:	83 ff 02             	cmp    edi,0x2
c001a232:	75 2d                	jne    c001a261 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a234:	83 ec 0c             	sub    esp,0xc
c001a237:	0f b6 fb             	movzx  edi,bl
c001a23a:	57                   	push   edi
c001a23b:	0f b6 c9             	movzx  ecx,cl
c001a23e:	51                   	push   ecx
c001a23f:	0f b6 d2             	movzx  edx,dl
c001a242:	52                   	push   edx
c001a243:	0f b6 c0             	movzx  eax,al
c001a246:	50                   	push   eax
c001a247:	56                   	push   esi
c001a248:	e8 0b ff ff ff       	call   c001a158 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a24d:	89 c2                	mov    edx,eax
c001a24f:	ed                   	in     eax,dx
c001a250:	83 e3 02             	and    ebx,0x2
c001a253:	83 c4 20             	add    esp,0x20
c001a256:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a25d:	d3 e8                	shr    eax,cl
c001a25f:	eb 12                	jmp    c001a273 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a261:	83 ec 0c             	sub    esp,0xc
c001a264:	68 63 19 02 c0       	push   0xc0021963
c001a269:	e8 d1 65 ff ff       	call   c001083f <KePanic(char const*)>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	31 c0                	xor    eax,eax
c001a273:	5b                   	pop    ebx
c001a274:	5e                   	pop    esi
c001a275:	5f                   	pop    edi
c001a276:	c3                   	ret    
c001a277:	90                   	nop

c001a278 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a278:	83 ec 18             	sub    esp,0x18
c001a27b:	6a 00                	push   0x0
c001a27d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a282:	50                   	push   eax
c001a283:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a288:	50                   	push   eax
c001a289:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a28e:	50                   	push   eax
c001a28f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a293:	e8 36 ff ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a298:	83 c4 2c             	add    esp,0x2c
c001a29b:	c3                   	ret    

c001a29c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a29c:	83 ec 18             	sub    esp,0x18
c001a29f:	6a 0e                	push   0xe
c001a2a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2a6:	50                   	push   eax
c001a2a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2ac:	50                   	push   eax
c001a2ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2b2:	50                   	push   eax
c001a2b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2b7:	e8 12 ff ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2bc:	83 c4 2c             	add    esp,0x2c
c001a2bf:	0f b6 c0             	movzx  eax,al
c001a2c2:	c3                   	ret    
c001a2c3:	90                   	nop

c001a2c4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2c4:	55                   	push   ebp
c001a2c5:	57                   	push   edi
c001a2c6:	56                   	push   esi
c001a2c7:	53                   	push   ebx
c001a2c8:	83 ec 18             	sub    esp,0x18
c001a2cb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2d0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a2d5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a2da:	6a 0a                	push   0xa
c001a2dc:	56                   	push   esi
c001a2dd:	55                   	push   ebp
c001a2de:	57                   	push   edi
c001a2df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2e3:	e8 e6 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2e8:	83 c4 14             	add    esp,0x14
c001a2eb:	6a 0a                	push   0xa
c001a2ed:	89 c3                	mov    ebx,eax
c001a2ef:	56                   	push   esi
c001a2f0:	55                   	push   ebp
c001a2f1:	57                   	push   edi
c001a2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2f6:	e8 d3 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2fb:	83 c4 2c             	add    esp,0x2c
c001a2fe:	0f b6 db             	movzx  ebx,bl
c001a301:	25 00 ff 00 00       	and    eax,0xff00
c001a306:	09 d8                	or     eax,ebx
c001a308:	5b                   	pop    ebx
c001a309:	5e                   	pop    esi
c001a30a:	5f                   	pop    edi
c001a30b:	5d                   	pop    ebp
c001a30c:	c3                   	ret    
c001a30d:	90                   	nop

c001a30e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a30e:	83 ec 18             	sub    esp,0x18
c001a311:	6a 08                	push   0x8
c001a313:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a318:	50                   	push   eax
c001a319:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a31e:	50                   	push   eax
c001a31f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a324:	50                   	push   eax
c001a325:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a329:	e8 a0 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a32e:	83 c4 2c             	add    esp,0x2c
c001a331:	0f b6 c4             	movzx  eax,ah
c001a334:	c3                   	ret    
c001a335:	90                   	nop

c001a336 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a336:	83 ec 18             	sub    esp,0x18
c001a339:	6a 08                	push   0x8
c001a33b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a340:	50                   	push   eax
c001a341:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a346:	50                   	push   eax
c001a347:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a34c:	50                   	push   eax
c001a34d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a351:	e8 78 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a356:	83 c4 2c             	add    esp,0x2c
c001a359:	c3                   	ret    

c001a35a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a35a:	83 ec 18             	sub    esp,0x18
c001a35d:	6a 3c                	push   0x3c
c001a35f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a364:	50                   	push   eax
c001a365:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a36a:	50                   	push   eax
c001a36b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a370:	50                   	push   eax
c001a371:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a375:	e8 54 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a37a:	83 c4 2c             	add    esp,0x2c
c001a37d:	c3                   	ret    

c001a37e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a37e:	83 ec 18             	sub    esp,0x18
c001a381:	6a 18                	push   0x18
c001a383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a388:	50                   	push   eax
c001a389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a38e:	50                   	push   eax
c001a38f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a394:	50                   	push   eax
c001a395:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a399:	e8 30 fe ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a39e:	83 c4 2c             	add    esp,0x2c
c001a3a1:	0f b6 c4             	movzx  eax,ah
c001a3a4:	c3                   	ret    
c001a3a5:	90                   	nop

c001a3a6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a3a6:	55                   	push   ebp
c001a3a7:	57                   	push   edi
c001a3a8:	56                   	push   esi
c001a3a9:	53                   	push   ebx
c001a3aa:	83 ec 28             	sub    esp,0x28
c001a3ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3b1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3b6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3bd:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3c2:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3c5:	83 c3 10             	add    ebx,0x10
c001a3c8:	0f b6 c0             	movzx  eax,al
c001a3cb:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3d0:	50                   	push   eax
c001a3d1:	51                   	push   ecx
c001a3d2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a3d6:	57                   	push   edi
c001a3d7:	55                   	push   ebp
c001a3d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3dc:	e8 ed fd ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3e1:	83 c4 14             	add    esp,0x14
c001a3e4:	0f b6 db             	movzx  ebx,bl
c001a3e7:	53                   	push   ebx
c001a3e8:	89 c6                	mov    esi,eax
c001a3ea:	c1 e6 10             	shl    esi,0x10
c001a3ed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3f1:	51                   	push   ecx
c001a3f2:	57                   	push   edi
c001a3f3:	55                   	push   ebp
c001a3f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3f8:	e8 d1 fd ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3fd:	83 c4 3c             	add    esp,0x3c
c001a400:	0f b7 c0             	movzx  eax,ax
c001a403:	5b                   	pop    ebx
c001a404:	09 f0                	or     eax,esi
c001a406:	5e                   	pop    esi
c001a407:	5f                   	pop    edi
c001a408:	5d                   	pop    ebp
c001a409:	c3                   	ret    

c001a40a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a40a:	55                   	push   ebp
c001a40b:	57                   	push   edi
c001a40c:	56                   	push   esi
c001a40d:	53                   	push   ebx
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a415:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a419:	89 f5                	mov    ebp,esi
c001a41b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a41f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a425:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a429:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a42d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a431:	83 f9 01             	cmp    ecx,0x1
c001a434:	75 5d                	jne    c001a493 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a436:	0f b6 c8             	movzx  ecx,al
c001a439:	c1 e1 10             	shl    ecx,0x10
c001a43c:	89 f0                	mov    eax,esi
c001a43e:	25 fc 00 00 00       	and    eax,0xfc
c001a443:	09 c1                	or     ecx,eax
c001a445:	89 e8                	mov    eax,ebp
c001a447:	0f b6 c0             	movzx  eax,al
c001a44a:	c1 e0 08             	shl    eax,0x8
c001a44d:	0f b6 d2             	movzx  edx,dl
c001a450:	c1 e2 0b             	shl    edx,0xb
c001a453:	09 c1                	or     ecx,eax
c001a455:	09 d1                	or     ecx,edx
c001a457:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a45c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a462:	89 c8                	mov    eax,ecx
c001a464:	ef                   	out    dx,eax
c001a465:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a46a:	ed                   	in     eax,dx
c001a46b:	0f b7 db             	movzx  ebx,bx
c001a46e:	83 e6 02             	and    esi,0x2
c001a471:	74 0a                	je     c001a47d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a473:	0f b7 d0             	movzx  edx,ax
c001a476:	c1 e3 10             	shl    ebx,0x10
c001a479:	09 d3                	or     ebx,edx
c001a47b:	eb 05                	jmp    c001a482 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a47d:	66 31 c0             	xor    ax,ax
c001a480:	09 c3                	or     ebx,eax
c001a482:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a487:	89 c8                	mov    eax,ecx
c001a489:	ef                   	out    dx,eax
c001a48a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a48f:	89 d8                	mov    eax,ebx
c001a491:	eb 41                	jmp    c001a4d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a493:	83 f9 02             	cmp    ecx,0x2
c001a496:	75 45                	jne    c001a4dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a498:	83 ec 0c             	sub    esp,0xc
c001a49b:	89 f1                	mov    ecx,esi
c001a49d:	0f b6 f1             	movzx  esi,cl
c001a4a0:	89 e9                	mov    ecx,ebp
c001a4a2:	56                   	push   esi
c001a4a3:	0f b6 c9             	movzx  ecx,cl
c001a4a6:	51                   	push   ecx
c001a4a7:	0f b6 d2             	movzx  edx,dl
c001a4aa:	52                   	push   edx
c001a4ab:	0f b6 c0             	movzx  eax,al
c001a4ae:	50                   	push   eax
c001a4af:	57                   	push   edi
c001a4b0:	e8 a3 fc ff ff       	call   c001a158 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4b5:	89 c2                	mov    edx,eax
c001a4b7:	ed                   	in     eax,dx
c001a4b8:	83 c4 20             	add    esp,0x20
c001a4bb:	0f b7 db             	movzx  ebx,bx
c001a4be:	f6 c2 02             	test   dl,0x2
c001a4c1:	74 0c                	je     c001a4cf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a4c3:	0f b7 c8             	movzx  ecx,ax
c001a4c6:	89 d8                	mov    eax,ebx
c001a4c8:	c1 e0 10             	shl    eax,0x10
c001a4cb:	09 c8                	or     eax,ecx
c001a4cd:	eb 05                	jmp    c001a4d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a4cf:	66 31 c0             	xor    ax,ax
c001a4d2:	09 d8                	or     eax,ebx
c001a4d4:	ef                   	out    dx,eax
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	5b                   	pop    ebx
c001a4d9:	5e                   	pop    esi
c001a4da:	5f                   	pop    edi
c001a4db:	5d                   	pop    ebp
c001a4dc:	c3                   	ret    
c001a4dd:	c7 44 24 20 63 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021963
c001a4e5:	83 c4 0c             	add    esp,0xc
c001a4e8:	5b                   	pop    ebx
c001a4e9:	5e                   	pop    esi
c001a4ea:	5f                   	pop    edi
c001a4eb:	5d                   	pop    ebp
c001a4ec:	e9 4e 63 ff ff       	jmp    c001083f <KePanic(char const*)>
c001a4f1:	90                   	nop

c001a4f2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a4f2:	55                   	push   ebp
c001a4f3:	57                   	push   edi
c001a4f4:	56                   	push   esi
c001a4f5:	53                   	push   ebx
c001a4f6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a4fc:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a503:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a50a:	0f 85 bd 00 00 00    	jne    c001a5cd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a510:	83 ec 0c             	sub    esp,0xc
c001a513:	68 14 01 00 00       	push   0x114
c001a518:	e8 6f d5 fe ff       	call   c0007a8c <malloc>
c001a51d:	83 c4 0c             	add    esp,0xc
c001a520:	89 c3                	mov    ebx,eax
c001a522:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a528:	68 69 19 02 c0       	push   0xc0021969
c001a52d:	50                   	push   eax
c001a52e:	e8 a3 09 ff ff       	call   c000aed6 <File::File(char const*, Process*)>
c001a533:	83 c4 10             	add    esp,0x10
c001a536:	85 db                	test   ebx,ebx
c001a538:	0f 84 67 02 00 00    	je     c001a7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a53e:	56                   	push   esi
c001a53f:	56                   	push   esi
c001a540:	6a 01                	push   0x1
c001a542:	53                   	push   ebx
c001a543:	e8 4a 0a ff ff       	call   c000af92 <File::open(FileOpenMode)>
c001a548:	83 c4 10             	add    esp,0x10
c001a54b:	85 c0                	test   eax,eax
c001a54d:	0f 85 52 02 00 00    	jne    c001a7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a553:	52                   	push   edx
c001a554:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a558:	50                   	push   eax
c001a559:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a55d:	50                   	push   eax
c001a55e:	53                   	push   ebx
c001a55f:	e8 da 0c ff ff       	call   c000b23e <File::stat(unsigned long long*, bool*)>
c001a564:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a568:	40                   	inc    eax
c001a569:	89 04 24             	mov    DWORD PTR [esp],eax
c001a56c:	e8 1b d5 fe ff       	call   c0007a8c <malloc>
c001a571:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a575:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a57a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a57e:	59                   	pop    ecx
c001a57f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a581:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a585:	51                   	push   ecx
c001a586:	50                   	push   eax
c001a587:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a58b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a58f:	53                   	push   ebx
c001a590:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a593:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a597:	83 c4 20             	add    esp,0x20
c001a59a:	89 c8                	mov    eax,ecx
c001a59c:	99                   	cdq    
c001a59d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a5a1:	0f 85 fe 01 00 00    	jne    c001a7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5a7:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a5ab:	0f 85 f4 01 00 00    	jne    c001a7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5b1:	83 ec 0c             	sub    esp,0xc
c001a5b4:	53                   	push   ebx
c001a5b5:	e8 36 0a ff ff       	call   c000aff0 <File::close()>
c001a5ba:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5be:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5c5:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5ca:	83 c4 10             	add    esp,0x10
c001a5cd:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a5d2:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a5d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5dc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a5e4:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a5e9:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a5f1:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a5f6:	31 f6                	xor    esi,esi
c001a5f8:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a600:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a604:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a60b:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a613:	31 c9                	xor    ecx,ecx
c001a615:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a619:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a61d:	0f 8e 82 01 00 00    	jle    c001a7a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a623:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a626:	d4 40                	aam    0x40
c001a628:	d5 39                	aad    0x39
c001a62a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a62e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a632:	d4 40                	aam    0x40
c001a634:	d5 39                	aad    0x39
c001a636:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a63a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a63e:	d4 40                	aam    0x40
c001a640:	d5 39                	aad    0x39
c001a642:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a646:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a64a:	d4 40                	aam    0x40
c001a64c:	d5 39                	aad    0x39
c001a64e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a652:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a656:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a65a:	3c 56                	cmp    al,0x56
c001a65c:	74 43                	je     c001a6a1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a65e:	d4 40                	aam    0x40
c001a660:	d5 39                	aad    0x39
c001a662:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a665:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a669:	0f b6 c9             	movzx  ecx,cl
c001a66c:	c1 e1 04             	shl    ecx,0x4
c001a66f:	d4 40                	aam    0x40
c001a671:	d5 39                	aad    0x39
c001a673:	83 e8 30             	sub    eax,0x30
c001a676:	0f b6 c0             	movzx  eax,al
c001a679:	09 c1                	or     ecx,eax
c001a67b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a67f:	c1 e1 04             	shl    ecx,0x4
c001a682:	d4 40                	aam    0x40
c001a684:	d5 39                	aad    0x39
c001a686:	83 e8 30             	sub    eax,0x30
c001a689:	0f b6 c0             	movzx  eax,al
c001a68c:	09 c1                	or     ecx,eax
c001a68e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a692:	c1 e1 04             	shl    ecx,0x4
c001a695:	d4 40                	aam    0x40
c001a697:	d5 39                	aad    0x39
c001a699:	83 e8 30             	sub    eax,0x30
c001a69c:	0f b6 c0             	movzx  eax,al
c001a69f:	09 c1                	or     ecx,eax
c001a6a1:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a6a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a6a9:	3c 58                	cmp    al,0x58
c001a6ab:	74 47                	je     c001a6f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a6ad:	d4 40                	aam    0x40
c001a6af:	d5 39                	aad    0x39
c001a6b1:	8d 50 d0             	lea    edx,[eax-0x30]
c001a6b4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a6b8:	0f b6 d2             	movzx  edx,dl
c001a6bb:	c1 e2 04             	shl    edx,0x4
c001a6be:	d4 40                	aam    0x40
c001a6c0:	d5 39                	aad    0x39
c001a6c2:	83 e8 30             	sub    eax,0x30
c001a6c5:	0f b6 c0             	movzx  eax,al
c001a6c8:	09 c2                	or     edx,eax
c001a6ca:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a6ce:	c1 e2 04             	shl    edx,0x4
c001a6d1:	d4 40                	aam    0x40
c001a6d3:	d5 39                	aad    0x39
c001a6d5:	83 e8 30             	sub    eax,0x30
c001a6d8:	0f b6 c0             	movzx  eax,al
c001a6db:	09 c2                	or     edx,eax
c001a6dd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a6e1:	c1 e2 04             	shl    edx,0x4
c001a6e4:	d4 40                	aam    0x40
c001a6e6:	d5 39                	aad    0x39
c001a6e8:	83 e8 30             	sub    eax,0x30
c001a6eb:	0f b6 c0             	movzx  eax,al
c001a6ee:	09 c2                	or     edx,eax
c001a6f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6f4:	83 c6 10             	add    esi,0x10
c001a6f7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a6fb:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a6ff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a703:	83 fa 0a             	cmp    edx,0xa
c001a706:	74 0b                	je     c001a713 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a708:	47                   	inc    edi
c001a709:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a70d:	75 19                	jne    c001a728 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a70f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a713:	31 c0                	xor    eax,eax
c001a715:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a71a:	0f 94 c0             	sete   al
c001a71d:	01 c6                	add    esi,eax
c001a71f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a724:	75 0b                	jne    c001a731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a726:	eb 14                	jmp    c001a73c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a728:	46                   	inc    esi
c001a729:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a72c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a72f:	eb ca                	jmp    c001a6fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a731:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a736:	0f 85 dd fe ff ff    	jne    c001a619 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a73c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a741:	74 10                	je     c001a753 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a743:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a748:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a74d:	0f 85 c6 fe ff ff    	jne    c001a619 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a753:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a757:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a75b:	83 e8 30             	sub    eax,0x30
c001a75e:	83 ef 30             	sub    edi,0x30
c001a761:	c1 e0 04             	shl    eax,0x4
c001a764:	09 f8                	or     eax,edi
c001a766:	0f b6 c0             	movzx  eax,al
c001a769:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a76d:	0f 85 a6 fe ff ff    	jne    c001a619 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a777:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a77b:	83 e8 30             	sub    eax,0x30
c001a77e:	83 ef 30             	sub    edi,0x30
c001a781:	c1 e0 04             	shl    eax,0x4
c001a784:	09 f8                	or     eax,edi
c001a786:	0f b6 c0             	movzx  eax,al
c001a789:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a78d:	0f 85 86 fe ff ff    	jne    c001a619 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a793:	50                   	push   eax
c001a794:	50                   	push   eax
c001a795:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a799:	50                   	push   eax
c001a79a:	55                   	push   ebp
c001a79b:	e8 90 5e fe ff       	call   c0000630 <strcpy>
c001a7a0:	83 c4 10             	add    esp,0x10
c001a7a3:	eb 06                	jmp    c001a7ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a7a5:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a7a9:	31 ed                	xor    ebp,ebp
c001a7ab:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7b1:	89 e8                	mov    eax,ebp
c001a7b3:	5b                   	pop    ebx
c001a7b4:	5e                   	pop    esi
c001a7b5:	5f                   	pop    edi
c001a7b6:	5d                   	pop    ebp
c001a7b7:	c3                   	ret    

c001a7b8 <PCI::checkBus(unsigned char)>:
c001a7b8:	56                   	push   esi
c001a7b9:	53                   	push   ebx
c001a7ba:	31 db                	xor    ebx,ebx
c001a7bc:	51                   	push   ecx
c001a7bd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7c2:	52                   	push   edx
c001a7c3:	53                   	push   ebx
c001a7c4:	43                   	inc    ebx
c001a7c5:	56                   	push   esi
c001a7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ca:	e8 03 03 00 00       	call   c001aad2 <PCI::checkDevice(unsigned char, unsigned char)>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	83 fb 20             	cmp    ebx,0x20
c001a7d5:	75 eb                	jne    c001a7c2 <PCI::checkBus(unsigned char)+0xa>
c001a7d7:	58                   	pop    eax
c001a7d8:	5b                   	pop    ebx
c001a7d9:	5e                   	pop    esi
c001a7da:	c3                   	ret    
c001a7db:	90                   	nop

c001a7dc <PCI::foundDevice(PCIDeviceInfo)>:
c001a7dc:	55                   	push   ebp
c001a7dd:	57                   	push   edi
c001a7de:	56                   	push   esi
c001a7df:	53                   	push   ebx
c001a7e0:	83 ec 1c             	sub    esp,0x1c
c001a7e3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7e8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7ec:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7f1:	0f 84 57 01 00 00    	je     c001a94e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a7f7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a7fc:	66 3d 06 04          	cmp    ax,0x406
c001a800:	75 2c                	jne    c001a82e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a802:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a807:	50                   	push   eax
c001a808:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a80d:	50                   	push   eax
c001a80e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a813:	50                   	push   eax
c001a814:	53                   	push   ebx
c001a815:	e8 64 fb ff ff       	call   c001a37e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a81a:	0f b6 c0             	movzx  eax,al
c001a81d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a821:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a825:	83 c4 2c             	add    esp,0x2c
c001a828:	5b                   	pop    ebx
c001a829:	5e                   	pop    esi
c001a82a:	5f                   	pop    edi
c001a82b:	5d                   	pop    ebp
c001a82c:	eb 8a                	jmp    c001a7b8 <PCI::checkBus(unsigned char)>
c001a82e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a832:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a838:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a83c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a840:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a845:	85 d2                	test   edx,edx
c001a847:	74 36                	je     c001a87f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a849:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a84c:	85 c9                	test   ecx,ecx
c001a84e:	74 2b                	je     c001a87b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a850:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a856:	31 ee                	xor    esi,ebp
c001a858:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a85e:	75 1b                	jne    c001a87b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a860:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a864:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a86a:	75 0f                	jne    c001a87b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a86c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a873:	39 f9                	cmp    ecx,edi
c001a875:	0f 84 d3 00 00 00    	je     c001a94e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a87b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a87d:	eb c6                	jmp    c001a845 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a87f:	3d 01 06 00 00       	cmp    eax,0x601
c001a884:	75 19                	jne    c001a89f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a886:	83 ec 0c             	sub    esp,0xc
c001a889:	68 64 01 00 00       	push   0x164
c001a88e:	e8 f9 d1 fe ff       	call   c0007a8c <malloc>
c001a893:	89 c5                	mov    ebp,eax
c001a895:	89 04 24             	mov    DWORD PTR [esp],eax
c001a898:	e8 97 0e 00 00       	call   c001b734 <SATABus::SATABus()>
c001a89d:	eb 1e                	jmp    c001a8bd <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a89f:	3d 01 01 00 00       	cmp    eax,0x101
c001a8a4:	75 62                	jne    c001a908 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a8a6:	83 ec 0c             	sub    esp,0xc
c001a8a9:	68 70 02 00 00       	push   0x270
c001a8ae:	e8 d9 d1 fe ff       	call   c0007a8c <malloc>
c001a8b3:	89 c5                	mov    ebp,eax
c001a8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8b8:	e8 e5 02 00 00       	call   c001aba2 <IDE::IDE()>
c001a8bd:	5f                   	pop    edi
c001a8be:	58                   	pop    eax
c001a8bf:	55                   	push   ebp
c001a8c0:	53                   	push   ebx
c001a8c1:	e8 c0 14 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c001a8c6:	83 ec 1c             	sub    esp,0x1c
c001a8c9:	b9 09 00 00 00       	mov    ecx,0x9
c001a8ce:	fc                   	cld    
c001a8cf:	89 e7                	mov    edi,esp
c001a8d1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a8d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8d7:	55                   	push   ebp
c001a8d8:	e8 f3 13 ff ff       	call   c000bcd0 <Device::preOpenPCI(PCIDeviceInfo)>
c001a8dd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8e0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a8e4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8ec:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a8f4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a8fc:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a8ff:	83 c4 4c             	add    esp,0x4c
c001a902:	5b                   	pop    ebx
c001a903:	5e                   	pop    esi
c001a904:	5f                   	pop    edi
c001a905:	5d                   	pop    ebp
c001a906:	ff e0                	jmp    eax
c001a908:	83 ec 0c             	sub    esp,0xc
c001a90b:	68 58 01 00 00       	push   0x158
c001a910:	e8 77 d1 fe ff       	call   c0007a8c <malloc>
c001a915:	89 c5                	mov    ebp,eax
c001a917:	58                   	pop    eax
c001a918:	5a                   	pop    edx
c001a919:	68 82 19 02 c0       	push   0xc0021982
c001a91e:	55                   	push   ebp
c001a91f:	e8 00 17 ff ff       	call   c000c024 <DriverlessDevice::DriverlessDevice(char const*)>
c001a924:	59                   	pop    ecx
c001a925:	5e                   	pop    esi
c001a926:	55                   	push   ebp
c001a927:	53                   	push   ebx
c001a928:	e8 59 14 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c001a92d:	83 c4 10             	add    esp,0x10
c001a930:	b9 09 00 00 00       	mov    ecx,0x9
c001a935:	fc                   	cld    
c001a936:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a93a:	89 fe                	mov    esi,edi
c001a93c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a93e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a942:	83 c4 1c             	add    esp,0x1c
c001a945:	5b                   	pop    ebx
c001a946:	5e                   	pop    esi
c001a947:	5f                   	pop    edi
c001a948:	5d                   	pop    ebp
c001a949:	e9 82 13 ff ff       	jmp    c000bcd0 <Device::preOpenPCI(PCIDeviceInfo)>
c001a94e:	83 c4 1c             	add    esp,0x1c
c001a951:	5b                   	pop    ebx
c001a952:	5e                   	pop    esi
c001a953:	5f                   	pop    edi
c001a954:	5d                   	pop    ebp
c001a955:	c3                   	ret    

c001a956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a956:	55                   	push   ebp
c001a957:	57                   	push   edi
c001a958:	56                   	push   esi
c001a959:	53                   	push   ebx
c001a95a:	83 ec 68             	sub    esp,0x68
c001a95d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a964:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a968:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a96c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a973:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a977:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a97e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a982:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a987:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a98c:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a991:	6a 0c                	push   0xc
c001a993:	57                   	push   edi
c001a994:	53                   	push   ebx
c001a995:	56                   	push   esi
c001a996:	55                   	push   ebp
c001a997:	e8 32 f8 ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a99c:	83 c4 20             	add    esp,0x20
c001a99f:	57                   	push   edi
c001a9a0:	53                   	push   ebx
c001a9a1:	56                   	push   esi
c001a9a2:	55                   	push   ebp
c001a9a3:	e8 1c f9 ff ff       	call   c001a2c4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a9a8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a9ad:	57                   	push   edi
c001a9ae:	53                   	push   ebx
c001a9af:	56                   	push   esi
c001a9b0:	55                   	push   ebp
c001a9b1:	e8 a4 f9 ff ff       	call   c001a35a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9b6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9ba:	83 c4 14             	add    esp,0x14
c001a9bd:	6a 3c                	push   0x3c
c001a9bf:	57                   	push   edi
c001a9c0:	53                   	push   ebx
c001a9c1:	56                   	push   esi
c001a9c2:	55                   	push   ebp
c001a9c3:	e8 06 f8 ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9c8:	0f b6 c4             	movzx  eax,ah
c001a9cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9cf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a9d3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a9d7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9dc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a9e2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a9e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9ec:	83 c4 20             	add    esp,0x20
c001a9ef:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9f4:	74 30                	je     c001aa26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9f6:	31 c0                	xor    eax,eax
c001a9f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a9fc:	7e 28                	jle    c001aa26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9fe:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001aa06:	39 cb                	cmp    ebx,ecx
c001aa08:	75 19                	jne    c001aa23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa0a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa12:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa16:	75 0b                	jne    c001aa23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa18:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa1f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa23:	40                   	inc    eax
c001aa24:	eb d2                	jmp    c001a9f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa26:	31 d2                	xor    edx,edx
c001aa28:	83 ec 0c             	sub    esp,0xc
c001aa2b:	57                   	push   edi
c001aa2c:	53                   	push   ebx
c001aa2d:	56                   	push   esi
c001aa2e:	52                   	push   edx
c001aa2f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa33:	55                   	push   ebp
c001aa34:	e8 6d f9 ff ff       	call   c001a3a6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa3d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa41:	42                   	inc    edx
c001aa42:	83 c4 20             	add    esp,0x20
c001aa45:	83 fa 06             	cmp    edx,0x6
c001aa48:	75 de                	jne    c001aa28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa52:	c1 e2 08             	shl    edx,0x8
c001aa55:	83 ec 0c             	sub    esp,0xc
c001aa58:	0f b6 c4             	movzx  eax,ah
c001aa5b:	09 d0                	or     eax,edx
c001aa5d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa62:	6a 02                	push   0x2
c001aa64:	57                   	push   edi
c001aa65:	53                   	push   ebx
c001aa66:	56                   	push   esi
c001aa67:	55                   	push   ebp
c001aa68:	e8 61 f7 ff ff       	call   c001a1ce <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa6d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa72:	83 c4 20             	add    esp,0x20
c001aa75:	57                   	push   edi
c001aa76:	53                   	push   ebx
c001aa77:	56                   	push   esi
c001aa78:	55                   	push   ebp
c001aa79:	e8 90 f8 ff ff       	call   c001a30e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa7e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa82:	57                   	push   edi
c001aa83:	53                   	push   ebx
c001aa84:	56                   	push   esi
c001aa85:	55                   	push   ebp
c001aa86:	e8 ed f7 ff ff       	call   c001a278 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa8b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa90:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa94:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aa98:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aa9c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aaa0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aaa4:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aaa8:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aaac:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aab0:	b9 09 00 00 00       	mov    ecx,0x9
c001aab5:	83 ec 0c             	sub    esp,0xc
c001aab8:	fc                   	cld    
c001aab9:	89 e7                	mov    edi,esp
c001aabb:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aabf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aac1:	55                   	push   ebp
c001aac2:	e8 15 fd ff ff       	call   c001a7dc <PCI::foundDevice(PCIDeviceInfo)>
c001aac7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aacd:	5b                   	pop    ebx
c001aace:	5e                   	pop    esi
c001aacf:	5f                   	pop    edi
c001aad0:	5d                   	pop    ebp
c001aad1:	c3                   	ret    

c001aad2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001aad2:	55                   	push   ebp
c001aad3:	57                   	push   edi
c001aad4:	56                   	push   esi
c001aad5:	53                   	push   ebx
c001aad6:	83 ec 0c             	sub    esp,0xc
c001aad9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aade:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aae2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aae7:	6a 00                	push   0x0
c001aae9:	56                   	push   esi
c001aaea:	57                   	push   edi
c001aaeb:	55                   	push   ebp
c001aaec:	e8 87 f7 ff ff       	call   c001a278 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aaf1:	6a 00                	push   0x0
c001aaf3:	56                   	push   esi
c001aaf4:	57                   	push   edi
c001aaf5:	55                   	push   ebp
c001aaf6:	e8 5b fe ff ff       	call   c001a956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aafb:	83 c4 20             	add    esp,0x20
c001aafe:	6a 00                	push   0x0
c001ab00:	56                   	push   esi
c001ab01:	57                   	push   edi
c001ab02:	55                   	push   ebp
c001ab03:	e8 94 f7 ff ff       	call   c001a29c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	a8 80                	test   al,0x80
c001ab0d:	74 2d                	je     c001ab3c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001ab0f:	bb 01 00 00 00       	mov    ebx,0x1
c001ab14:	53                   	push   ebx
c001ab15:	56                   	push   esi
c001ab16:	57                   	push   edi
c001ab17:	55                   	push   ebp
c001ab18:	e8 5b f7 ff ff       	call   c001a278 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab1d:	0f b7 c0             	movzx  eax,ax
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab28:	74 0c                	je     c001ab36 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab2a:	53                   	push   ebx
c001ab2b:	56                   	push   esi
c001ab2c:	57                   	push   edi
c001ab2d:	55                   	push   ebp
c001ab2e:	e8 23 fe ff ff       	call   c001a956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab33:	83 c4 10             	add    esp,0x10
c001ab36:	43                   	inc    ebx
c001ab37:	83 fb 08             	cmp    ebx,0x8
c001ab3a:	75 d8                	jne    c001ab14 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab3c:	83 c4 0c             	add    esp,0xc
c001ab3f:	5b                   	pop    ebx
c001ab40:	5e                   	pop    esi
c001ab41:	5f                   	pop    edi
c001ab42:	5d                   	pop    ebp
c001ab43:	c3                   	ret    

c001ab44 <PCI::detect()>:
c001ab44:	56                   	push   esi
c001ab45:	53                   	push   ebx
c001ab46:	53                   	push   ebx
c001ab47:	31 db                	xor    ebx,ebx
c001ab49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab4d:	6a 00                	push   0x0
c001ab4f:	6a 00                	push   0x0
c001ab51:	6a 00                	push   0x0
c001ab53:	56                   	push   esi
c001ab54:	e8 43 f7 ff ff       	call   c001a29c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab59:	83 c4 10             	add    esp,0x10
c001ab5c:	a8 80                	test   al,0x80
c001ab5e:	75 21                	jne    c001ab81 <PCI::detect()+0x3d>
c001ab60:	51                   	push   ecx
c001ab61:	51                   	push   ecx
c001ab62:	6a 00                	push   0x0
c001ab64:	56                   	push   esi
c001ab65:	e8 4e fc ff ff       	call   c001a7b8 <PCI::checkBus(unsigned char)>
c001ab6a:	83 c4 10             	add    esp,0x10
c001ab6d:	eb 2a                	jmp    c001ab99 <PCI::detect()+0x55>
c001ab6f:	52                   	push   edx
c001ab70:	52                   	push   edx
c001ab71:	53                   	push   ebx
c001ab72:	43                   	inc    ebx
c001ab73:	56                   	push   esi
c001ab74:	e8 3f fc ff ff       	call   c001a7b8 <PCI::checkBus(unsigned char)>
c001ab79:	83 c4 10             	add    esp,0x10
c001ab7c:	83 fb 08             	cmp    ebx,0x8
c001ab7f:	74 18                	je     c001ab99 <PCI::detect()+0x55>
c001ab81:	53                   	push   ebx
c001ab82:	6a 00                	push   0x0
c001ab84:	6a 00                	push   0x0
c001ab86:	56                   	push   esi
c001ab87:	e8 ec f6 ff ff       	call   c001a278 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab8c:	0f b7 c0             	movzx  eax,ax
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab97:	74 d6                	je     c001ab6f <PCI::detect()+0x2b>
c001ab99:	58                   	pop    eax
c001ab9a:	5b                   	pop    ebx
c001ab9b:	5e                   	pop    esi
c001ab9c:	c3                   	ret    
c001ab9d:	90                   	nop

c001ab9e <IDE::close(int, int, void*)>:
c001ab9e:	83 c8 ff             	or     eax,0xffffffff
c001aba1:	c3                   	ret    

c001aba2 <IDE::IDE()>:
c001aba2:	83 ec 0c             	sub    esp,0xc
c001aba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba9:	83 ec 08             	sub    esp,0x8
c001abac:	68 c8 19 02 c0       	push   0xc00219c8
c001abb1:	50                   	push   eax
c001abb2:	e8 11 15 ff ff       	call   c000c0c8 <HardDiskController::HardDiskController(char const*)>
c001abb7:	83 c4 10             	add    esp,0x10
c001abba:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c001abbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc3:	89 10                	mov    DWORD PTR [eax],edx
c001abc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001abd0:	90                   	nop
c001abd1:	83 c4 0c             	add    esp,0xc
c001abd4:	c3                   	ret    
c001abd5:	90                   	nop

c001abd6 <IDE::prepareInterrupt(unsigned char)>:
c001abd6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abdb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abdf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001abe7:	c3                   	ret    

c001abe8 <selectDrive(unsigned char, unsigned char)>:
c001abe8:	c3                   	ret    
c001abe9:	90                   	nop

c001abea <IDE::getBase(unsigned char)>:
c001abea:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001abef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001abfb:	c3                   	ret    

c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001abfc:	55                   	push   ebp
c001abfd:	57                   	push   edi
c001abfe:	56                   	push   esi
c001abff:	53                   	push   ebx
c001ac00:	83 ec 1c             	sub    esp,0x1c
c001ac03:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ac07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac0b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac0f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac13:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ac16:	80 f9 03             	cmp    cl,0x3
c001ac19:	77 4f                	ja     c001ac6a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac1b:	0f b6 fa             	movzx  edi,dl
c001ac1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac22:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ac25:	0f b6 db             	movzx  ebx,bl
c001ac28:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ac2d:	80 ca 80             	or     dl,0x80
c001ac30:	52                   	push   edx
c001ac31:	6a 0c                	push   0xc
c001ac33:	57                   	push   edi
c001ac34:	56                   	push   esi
c001ac35:	e8 c2 ff ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac3a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac43:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac47:	ee                   	out    dx,al
c001ac48:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac4d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ac51:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac55:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac59:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac61:	83 c4 2c             	add    esp,0x2c
c001ac64:	5b                   	pop    ebx
c001ac65:	5e                   	pop    esi
c001ac66:	5f                   	pop    edi
c001ac67:	5d                   	pop    ebp
c001ac68:	eb 92                	jmp    c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac6a:	0f b6 cb             	movzx  ecx,bl
c001ac6d:	83 f9 07             	cmp    ecx,0x7
c001ac70:	77 12                	ja     c001ac84 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac72:	0f b6 d2             	movzx  edx,dl
c001ac75:	0f b6 db             	movzx  ebx,bl
c001ac78:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ac80:	01 da                	add    edx,ebx
c001ac82:	eb 2f                	jmp    c001acb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac84:	83 f9 0d             	cmp    ecx,0xd
c001ac87:	77 13                	ja     c001ac9c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac89:	0f b6 d2             	movzx  edx,dl
c001ac8c:	0f b6 db             	movzx  ebx,bl
c001ac8f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ac96:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ac9a:	eb 17                	jmp    c001acb3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac9c:	83 f9 15             	cmp    ecx,0x15
c001ac9f:	77 13                	ja     c001acb4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001aca1:	0f b6 d2             	movzx  edx,dl
c001aca4:	0f b6 db             	movzx  ebx,bl
c001aca7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001acaf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001acb3:	ee                   	out    dx,al
c001acb4:	83 c4 1c             	add    esp,0x1c
c001acb7:	5b                   	pop    ebx
c001acb8:	5e                   	pop    esi
c001acb9:	5f                   	pop    edi
c001acba:	5d                   	pop    ebp
c001acbb:	c3                   	ret    

c001acbc <IDE::read(unsigned char, unsigned char)>:
c001acbc:	55                   	push   ebp
c001acbd:	57                   	push   edi
c001acbe:	56                   	push   esi
c001acbf:	53                   	push   ebx
c001acc0:	83 ec 1c             	sub    esp,0x1c
c001acc3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001accb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001accf:	8d 43 f8             	lea    eax,[ebx-0x8]
c001acd2:	3c 03                	cmp    al,0x3
c001acd4:	77 40                	ja     c001ad16 <IDE::read(unsigned char, unsigned char)+0x5a>
c001acd6:	0f b6 f9             	movzx  edi,cl
c001acd9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001acdc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ace1:	0c 80                	or     al,0x80
c001ace3:	50                   	push   eax
c001ace4:	6a 0c                	push   0xc
c001ace6:	57                   	push   edi
c001ace7:	56                   	push   esi
c001ace8:	e8 0f ff ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aced:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001acf2:	0f b6 d3             	movzx  edx,bl
c001acf5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001acf9:	ec                   	in     al,dx
c001acfa:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001acff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ad03:	52                   	push   edx
c001ad04:	6a 0c                	push   0xc
c001ad06:	57                   	push   edi
c001ad07:	56                   	push   esi
c001ad08:	e8 ef fe ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad0d:	83 c4 20             	add    esp,0x20
c001ad10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad14:	eb 4c                	jmp    c001ad62 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad16:	0f b6 d3             	movzx  edx,bl
c001ad19:	83 fa 07             	cmp    edx,0x7
c001ad1c:	77 12                	ja     c001ad30 <IDE::read(unsigned char, unsigned char)+0x74>
c001ad1e:	0f b6 c9             	movzx  ecx,cl
c001ad21:	0f b6 d3             	movzx  edx,bl
c001ad24:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ad2c:	01 c2                	add    edx,eax
c001ad2e:	eb 31                	jmp    c001ad61 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad30:	83 fa 0d             	cmp    edx,0xd
c001ad33:	77 13                	ja     c001ad48 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ad35:	0f b6 c9             	movzx  ecx,cl
c001ad38:	0f b6 d3             	movzx  edx,bl
c001ad3b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ad42:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad46:	eb 19                	jmp    c001ad61 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad48:	31 c0                	xor    eax,eax
c001ad4a:	83 fa 15             	cmp    edx,0x15
c001ad4d:	77 13                	ja     c001ad62 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad4f:	0f b6 c9             	movzx  ecx,cl
c001ad52:	0f b6 d3             	movzx  edx,bl
c001ad55:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ad5d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad61:	ec                   	in     al,dx
c001ad62:	83 c4 1c             	add    esp,0x1c
c001ad65:	5b                   	pop    ebx
c001ad66:	5e                   	pop    esi
c001ad67:	5f                   	pop    edi
c001ad68:	5d                   	pop    ebp
c001ad69:	c3                   	ret    

c001ad6a <IDE::waitInterrupt(unsigned char)>:
c001ad6a:	55                   	push   ebp
c001ad6b:	57                   	push   edi
c001ad6c:	56                   	push   esi
c001ad6d:	53                   	push   ebx
c001ad6e:	31 db                	xor    ebx,ebx
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad7c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad84:	89 e8                	mov    eax,ebp
c001ad86:	84 c0                	test   al,al
c001ad88:	75 30                	jne    c001adba <IDE::waitInterrupt(unsigned char)+0x50>
c001ad8a:	50                   	push   eax
c001ad8b:	6a 0c                	push   0xc
c001ad8d:	56                   	push   esi
c001ad8e:	57                   	push   edi
c001ad8f:	e8 28 ff ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	a8 01                	test   al,0x1
c001ad99:	75 27                	jne    c001adc2 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad9b:	f6 c3 04             	test   bl,0x4
c001ad9e:	75 12                	jne    c001adb2 <IDE::waitInterrupt(unsigned char)+0x48>
c001ada0:	83 fb 32             	cmp    ebx,0x32
c001ada3:	7e 0d                	jle    c001adb2 <IDE::waitInterrupt(unsigned char)+0x48>
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	6a 64                	push   0x64
c001adaa:	e8 ad a5 ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	83 fb 3c             	cmp    ebx,0x3c
c001adb5:	74 0b                	je     c001adc2 <IDE::waitInterrupt(unsigned char)+0x58>
c001adb7:	43                   	inc    ebx
c001adb8:	eb c2                	jmp    c001ad7c <IDE::waitInterrupt(unsigned char)+0x12>
c001adba:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001adc2:	83 c4 0c             	add    esp,0xc
c001adc5:	89 e8                	mov    eax,ebp
c001adc7:	5b                   	pop    ebx
c001adc8:	5e                   	pop    esi
c001adc9:	5f                   	pop    edi
c001adca:	5d                   	pop    ebp
c001adcb:	c3                   	ret    

c001adcc <ideChannel0IRQHandler(regs*, void*)>:
c001adcc:	83 ec 10             	sub    esp,0x10
c001adcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001add3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001adda:	6a 07                	push   0x7
c001addc:	6a 00                	push   0x0
c001adde:	50                   	push   eax
c001addf:	e8 d8 fe ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001ade4:	83 c4 1c             	add    esp,0x1c
c001ade7:	c3                   	ret    

c001ade8 <ideChannel1IRQHandler(regs*, void*)>:
c001ade8:	83 ec 10             	sub    esp,0x10
c001adeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adef:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001adf6:	6a 07                	push   0x7
c001adf8:	6a 01                	push   0x1
c001adfa:	50                   	push   eax
c001adfb:	e8 bc fe ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001ae00:	83 c4 1c             	add    esp,0x1c
c001ae03:	c3                   	ret    

c001ae04 <IDE::enableIRQs(unsigned char, bool)>:
c001ae04:	57                   	push   edi
c001ae05:	b8 02 00 00 00       	mov    eax,0x2
c001ae0a:	56                   	push   esi
c001ae0b:	53                   	push   ebx
c001ae0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae14:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae19:	74 02                	je     c001ae1d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae1b:	31 c0                	xor    eax,eax
c001ae1d:	0f b6 db             	movzx  ebx,bl
c001ae20:	bf 04 00 00 00       	mov    edi,0x4
c001ae25:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae2c:	50                   	push   eax
c001ae2d:	6a 0c                	push   0xc
c001ae2f:	53                   	push   ebx
c001ae30:	56                   	push   esi
c001ae31:	e8 c6 fd ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae36:	83 c4 10             	add    esp,0x10
c001ae39:	50                   	push   eax
c001ae3a:	6a 0c                	push   0xc
c001ae3c:	53                   	push   ebx
c001ae3d:	56                   	push   esi
c001ae3e:	e8 79 fe ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	4f                   	dec    edi
c001ae47:	75 f0                	jne    c001ae39 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae49:	5b                   	pop    ebx
c001ae4a:	5e                   	pop    esi
c001ae4b:	5f                   	pop    edi
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop

c001ae4e <IDE::open(int, int, void*)>:
c001ae4e:	55                   	push   ebp
c001ae4f:	57                   	push   edi
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	83 ec 1c             	sub    esp,0x1c
c001ae55:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae59:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae62:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae6b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae72:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae79:	0f 85 dc 02 00 00    	jne    c001b15b <IDE::open(int, int, void*)+0x30d>
c001ae7f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae85:	88 04 24             	mov    BYTE PTR [esp],al
c001ae88:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ae8b:	83 e0 7f             	and    eax,0x7f
c001ae8e:	83 f8 05             	cmp    eax,0x5
c001ae91:	74 05                	je     c001ae98 <IDE::open(int, int, void*)+0x4a>
c001ae93:	83 f8 0f             	cmp    eax,0xf
c001ae96:	75 32                	jne    c001aeca <IDE::open(int, int, void*)+0x7c>
c001ae98:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ae9e:	83 e0 fc             	and    eax,0xfffffffc
c001aea1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aea8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001aeae:	83 e0 fc             	and    eax,0xfffffffc
c001aeb1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aeb8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001aebe:	83 e0 fc             	and    eax,0xfffffffc
c001aec1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aec8:	eb 14                	jmp    c001aede <IDE::open(int, int, void*)+0x90>
c001aeca:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aed4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001aede:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001aee5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aeec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aef0:	89 c6                	mov    esi,eax
c001aef2:	89 e8                	mov    eax,ebp
c001aef4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001aef9:	c1 e6 10             	shl    esi,0x10
c001aefc:	89 fa                	mov    edx,edi
c001aefe:	c1 e0 0b             	shl    eax,0xb
c001af01:	09 f0                	or     eax,esi
c001af03:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001af0a:	c1 e6 08             	shl    esi,0x8
c001af0d:	09 c6                	or     esi,eax
c001af0f:	89 f0                	mov    eax,esi
c001af11:	0d 08 00 00 80       	or     eax,0x80000008
c001af16:	ef                   	out    dx,eax
c001af17:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001af1c:	89 ca                	mov    edx,ecx
c001af1e:	ed                   	in     eax,dx
c001af1f:	c1 e8 10             	shr    eax,0x10
c001af22:	3d ff ff 00 00       	cmp    eax,0xffff
c001af27:	0f 84 f7 00 00 00    	je     c001b024 <IDE::open(int, int, void*)+0x1d6>
c001af2d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001af33:	89 fa                	mov    edx,edi
c001af35:	89 f0                	mov    eax,esi
c001af37:	ef                   	out    dx,eax
c001af38:	b0 fe                	mov    al,0xfe
c001af3a:	89 ca                	mov    edx,ecx
c001af3c:	ee                   	out    dx,al
c001af3d:	89 f0                	mov    eax,esi
c001af3f:	89 fa                	mov    edx,edi
c001af41:	ef                   	out    dx,eax
c001af42:	89 ca                	mov    edx,ecx
c001af44:	ed                   	in     eax,dx
c001af45:	3c fe                	cmp    al,0xfe
c001af47:	0f 85 a9 00 00 00    	jne    c001aff6 <IDE::open(int, int, void*)+0x1a8>
c001af4d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af53:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af5a:	74 33                	je     c001af8f <IDE::open(int, int, void*)+0x141>
c001af5c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af62:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af66:	40                   	inc    eax
c001af67:	83 ec 0c             	sub    esp,0xc
c001af6a:	0f b6 c0             	movzx  eax,al
c001af6d:	50                   	push   eax
c001af6e:	55                   	push   ebp
c001af6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af73:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af79:	51                   	push   ecx
c001af7a:	e8 89 3d ff ff       	call   c000ed08 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af7f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af84:	83 c4 1c             	add    esp,0x1c
c001af87:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af8d:	eb 0a                	jmp    c001af99 <IDE::open(int, int, void*)+0x14b>
c001af8f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001af99:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001afa0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001afa7:	c1 e1 10             	shl    ecx,0x10
c001afaa:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afaf:	c1 e0 08             	shl    eax,0x8
c001afb2:	89 fa                	mov    edx,edi
c001afb4:	09 c1                	or     ecx,eax
c001afb6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001afbd:	c1 e0 0b             	shl    eax,0xb
c001afc0:	09 c1                	or     ecx,eax
c001afc2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afc8:	89 c8                	mov    eax,ecx
c001afca:	ef                   	out    dx,eax
c001afcb:	be fc 0c 00 00       	mov    esi,0xcfc
c001afd0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001afd6:	89 f2                	mov    edx,esi
c001afd8:	ee                   	out    dx,al
c001afd9:	89 c8                	mov    eax,ecx
c001afdb:	89 fa                	mov    edx,edi
c001afdd:	ef                   	out    dx,eax
c001afde:	89 f2                	mov    edx,esi
c001afe0:	ed                   	in     eax,dx
c001afe1:	0f b6 c0             	movzx  eax,al
c001afe4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001afea:	74 48                	je     c001b034 <IDE::open(int, int, void*)+0x1e6>
c001afec:	83 ec 0c             	sub    esp,0xc
c001afef:	68 e0 19 02 c0       	push   0xc00219e0
c001aff4:	eb 36                	jmp    c001b02c <IDE::open(int, int, void*)+0x1de>
c001aff6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001afff:	75 19                	jne    c001b01a <IDE::open(int, int, void*)+0x1cc>
c001b001:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001b005:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b00a:	74 05                	je     c001b011 <IDE::open(int, int, void*)+0x1c3>
c001b00c:	83 c0 80             	add    eax,0xffffff80
c001b00f:	75 09                	jne    c001b01a <IDE::open(int, int, void*)+0x1cc>
c001b011:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b018:	eb 1a                	jmp    c001b034 <IDE::open(int, int, void*)+0x1e6>
c001b01a:	83 ec 0c             	sub    esp,0xc
c001b01d:	68 e8 19 02 c0       	push   0xc00219e8
c001b022:	eb 08                	jmp    c001b02c <IDE::open(int, int, void*)+0x1de>
c001b024:	83 ec 0c             	sub    esp,0xc
c001b027:	68 19 1a 02 c0       	push   0xc0021a19
c001b02c:	e8 0e 58 ff ff       	call   c001083f <KePanic(char const*)>
c001b031:	83 c4 10             	add    esp,0x10
c001b034:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b03b:	74 1a                	je     c001b057 <IDE::open(int, int, void*)+0x209>
c001b03d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b043:	83 e0 fc             	and    eax,0xfffffffc
c001b046:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b04d:	83 c0 08             	add    eax,0x8
c001b050:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b057:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b05d:	89 c2                	mov    edx,eax
c001b05f:	83 e2 0f             	and    edx,0xf
c001b062:	83 fa 08             	cmp    edx,0x8
c001b065:	75 0a                	jne    c001b071 <IDE::open(int, int, void*)+0x223>
c001b067:	83 e8 02             	sub    eax,0x2
c001b06a:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b071:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b077:	89 c2                	mov    edx,eax
c001b079:	83 e2 0f             	and    edx,0xf
c001b07c:	83 fa 08             	cmp    edx,0x8
c001b07f:	75 0a                	jne    c001b08b <IDE::open(int, int, void*)+0x23d>
c001b081:	83 e8 02             	sub    eax,0x2
c001b084:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b08b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b092:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b099:	89 d0                	mov    eax,edx
c001b09b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b09e:	8d 7a 01             	lea    edi,[edx+0x1]
c001b0a1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0a5:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b0a9:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0ad:	83 e1 3f             	and    ecx,0x3f
c001b0b0:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0b4:	89 f9                	mov    ecx,edi
c001b0b6:	0f b6 c9             	movzx  ecx,cl
c001b0b9:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0c0:	8d 78 02             	lea    edi,[eax+0x2]
c001b0c3:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0c6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0ca:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b0ce:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0d2:	83 e2 3f             	and    edx,0x3f
c001b0d5:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0d9:	89 f9                	mov    ecx,edi
c001b0db:	0f b6 d1             	movzx  edx,cl
c001b0de:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b0e4:	8d 78 03             	lea    edi,[eax+0x3]
c001b0e7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0ea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0ee:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0f2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0f6:	83 e1 3f             	and    ecx,0x3f
c001b0f9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0fd:	89 f9                	mov    ecx,edi
c001b0ff:	0f b6 c9             	movzx  ecx,cl
c001b102:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b108:	8d 78 04             	lea    edi,[eax+0x4]
c001b10b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b10e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b112:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b116:	89 fa                	mov    edx,edi
c001b118:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b11e:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b122:	83 e2 3f             	and    edx,0x3f
c001b125:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b129:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b130:	66 85 f6             	test   si,si
c001b133:	74 65                	je     c001b19a <IDE::open(int, int, void*)+0x34c>
c001b135:	89 f9                	mov    ecx,edi
c001b137:	83 c0 05             	add    eax,0x5
c001b13a:	0f b6 d1             	movzx  edx,cl
c001b13d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b140:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b144:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b148:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b14e:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b152:	83 e0 3f             	and    eax,0x3f
c001b155:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b159:	eb 3f                	jmp    c001b19a <IDE::open(int, int, void*)+0x34c>
c001b15b:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b161:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b168:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b16f:	05 06 02 00 00       	add    eax,0x206
c001b174:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b17b:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b182:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b189:	05 06 02 00 00       	add    eax,0x206
c001b18e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b195:	e9 bd fe ff ff       	jmp    c001b057 <IDE::open(int, int, void*)+0x209>
c001b19a:	50                   	push   eax
c001b19b:	50                   	push   eax
c001b19c:	6a 00                	push   0x0
c001b19e:	53                   	push   ebx
c001b19f:	e8 32 fa ff ff       	call   c001abd6 <IDE::prepareInterrupt(unsigned char)>
c001b1a4:	5a                   	pop    edx
c001b1a5:	59                   	pop    ecx
c001b1a6:	6a 01                	push   0x1
c001b1a8:	53                   	push   ebx
c001b1a9:	e8 28 fa ff ff       	call   c001abd6 <IDE::prepareInterrupt(unsigned char)>
c001b1ae:	83 c4 0c             	add    esp,0xc
c001b1b1:	6a 00                	push   0x0
c001b1b3:	6a 00                	push   0x0
c001b1b5:	53                   	push   ebx
c001b1b6:	e8 49 fc ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001b1bb:	83 c4 0c             	add    esp,0xc
c001b1be:	6a 00                	push   0x0
c001b1c0:	6a 01                	push   0x1
c001b1c2:	53                   	push   ebx
c001b1c3:	e8 3c fc ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b1d2:	74 34                	je     c001b208 <IDE::open(int, int, void*)+0x3ba>
c001b1d4:	83 ec 0c             	sub    esp,0xc
c001b1d7:	53                   	push   ebx
c001b1d8:	6a 01                	push   0x1
c001b1da:	68 cc ad 01 c0       	push   0xc001adcc
c001b1df:	6a 0e                	push   0xe
c001b1e1:	53                   	push   ebx
c001b1e2:	e8 4b 0b ff ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1e7:	83 c4 14             	add    esp,0x14
c001b1ea:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1f0:	53                   	push   ebx
c001b1f1:	6a 01                	push   0x1
c001b1f3:	68 e8 ad 01 c0       	push   0xc001ade8
c001b1f8:	6a 0f                	push   0xf
c001b1fa:	53                   	push   ebx
c001b1fb:	e8 32 0b ff ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b200:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b206:	eb 38                	jmp    c001b240 <IDE::open(int, int, void*)+0x3f2>
c001b208:	83 ec 0c             	sub    esp,0xc
c001b20b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b215:	53                   	push   ebx
c001b216:	6a 00                	push   0x0
c001b218:	68 cc ad 01 c0       	push   0xc001adcc
c001b21d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b223:	53                   	push   ebx
c001b224:	e8 09 0b ff ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b229:	83 c4 14             	add    esp,0x14
c001b22c:	53                   	push   ebx
c001b22d:	6a 00                	push   0x0
c001b22f:	68 e8 ad 01 c0       	push   0xc001ade8
c001b234:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b23a:	53                   	push   ebx
c001b23b:	e8 f2 0a ff ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b240:	83 c4 20             	add    esp,0x20
c001b243:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b245:	83 ec 0c             	sub    esp,0xc
c001b248:	53                   	push   ebx
c001b249:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b24c:	83 c4 0c             	add    esp,0xc
c001b24f:	6a 07                	push   0x7
c001b251:	6a 00                	push   0x0
c001b253:	53                   	push   ebx
c001b254:	e8 63 fa ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b259:	83 c4 0c             	add    esp,0xc
c001b25c:	6a 07                	push   0x7
c001b25e:	6a 01                	push   0x1
c001b260:	53                   	push   ebx
c001b261:	e8 56 fa ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b266:	83 c4 0c             	add    esp,0xc
c001b269:	6a 01                	push   0x1
c001b26b:	6a 00                	push   0x0
c001b26d:	53                   	push   ebx
c001b26e:	e8 91 fb ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001b273:	83 c4 0c             	add    esp,0xc
c001b276:	6a 01                	push   0x1
c001b278:	6a 01                	push   0x1
c001b27a:	53                   	push   ebx
c001b27b:	e8 84 fb ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001b280:	83 c4 2c             	add    esp,0x2c
c001b283:	31 c0                	xor    eax,eax
c001b285:	5b                   	pop    ebx
c001b286:	5e                   	pop    esi
c001b287:	5f                   	pop    edi
c001b288:	5d                   	pop    ebp
c001b289:	c3                   	ret    

c001b28a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b28a:	55                   	push   ebp
c001b28b:	57                   	push   edi
c001b28c:	56                   	push   esi
c001b28d:	53                   	push   ebx
c001b28e:	83 ec 1c             	sub    esp,0x1c
c001b291:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b295:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b299:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b29d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b2a1:	8d 42 f8             	lea    eax,[edx-0x8]
c001b2a4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b2a8:	3c 03                	cmp    al,0x3
c001b2aa:	77 5a                	ja     c001b306 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b2ac:	0f b6 db             	movzx  ebx,bl
c001b2af:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2b7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2ba:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2bf:	0c 80                	or     al,0x80
c001b2c1:	50                   	push   eax
c001b2c2:	6a 0c                	push   0xc
c001b2c4:	53                   	push   ebx
c001b2c5:	56                   	push   esi
c001b2c6:	e8 31 f9 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2cf:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2d4:	0f b6 d2             	movzx  edx,dl
c001b2d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2db:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b2df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2e1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2e6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b2ea:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2f2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b2fa:	83 c4 2c             	add    esp,0x2c
c001b2fd:	5b                   	pop    ebx
c001b2fe:	5e                   	pop    esi
c001b2ff:	5f                   	pop    edi
c001b300:	5d                   	pop    ebp
c001b301:	e9 f6 f8 ff ff       	jmp    c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b306:	0f b6 c2             	movzx  eax,dl
c001b309:	83 f8 07             	cmp    eax,0x7
c001b30c:	77 12                	ja     c001b320 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b30e:	0f b6 db             	movzx  ebx,bl
c001b311:	0f b6 c2             	movzx  eax,dl
c001b314:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b31c:	01 c2                	add    edx,eax
c001b31e:	eb 2f                	jmp    c001b34f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b320:	83 f8 0d             	cmp    eax,0xd
c001b323:	77 13                	ja     c001b338 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b325:	0f b6 db             	movzx  ebx,bl
c001b328:	0f b6 d2             	movzx  edx,dl
c001b32b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b332:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b336:	eb 17                	jmp    c001b34f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b338:	83 f8 15             	cmp    eax,0x15
c001b33b:	77 14                	ja     c001b351 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b33d:	0f b6 db             	movzx  ebx,bl
c001b340:	0f b6 d2             	movzx  edx,dl
c001b343:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b34b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b34f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b351:	83 c4 1c             	add    esp,0x1c
c001b354:	5b                   	pop    ebx
c001b355:	5e                   	pop    esi
c001b356:	5f                   	pop    edi
c001b357:	5d                   	pop    ebp
c001b358:	c3                   	ret    
c001b359:	90                   	nop

c001b35a <IDE::detect()>:
c001b35a:	55                   	push   ebp
c001b35b:	57                   	push   edi
c001b35c:	56                   	push   esi
c001b35d:	53                   	push   ebx
c001b35e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b364:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b36b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b372:	0f 85 9d 02 00 00    	jne    c001b615 <IDE::detect()+0x2bb>
c001b378:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b37f:	31 f6                	xor    esi,esi
c001b381:	31 ed                	xor    ebp,ebp
c001b383:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b38b:	89 e8                	mov    eax,ebp
c001b38d:	c1 e0 06             	shl    eax,0x6
c001b390:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b398:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b39c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3a4:	c1 e0 04             	shl    eax,0x4
c001b3a7:	83 c8 a0             	or     eax,0xffffffa0
c001b3aa:	0f b6 c0             	movzx  eax,al
c001b3ad:	50                   	push   eax
c001b3ae:	6a 06                	push   0x6
c001b3b0:	56                   	push   esi
c001b3b1:	53                   	push   ebx
c001b3b2:	e8 45 f8 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3b7:	83 c4 0c             	add    esp,0xc
c001b3ba:	6a 0c                	push   0xc
c001b3bc:	56                   	push   esi
c001b3bd:	53                   	push   ebx
c001b3be:	e8 f9 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b3c3:	83 c4 0c             	add    esp,0xc
c001b3c6:	6a 0c                	push   0xc
c001b3c8:	56                   	push   esi
c001b3c9:	53                   	push   ebx
c001b3ca:	e8 ed f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b3cf:	83 c4 0c             	add    esp,0xc
c001b3d2:	6a 0c                	push   0xc
c001b3d4:	56                   	push   esi
c001b3d5:	53                   	push   ebx
c001b3d6:	e8 e1 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b3db:	83 c4 0c             	add    esp,0xc
c001b3de:	6a 0c                	push   0xc
c001b3e0:	56                   	push   esi
c001b3e1:	53                   	push   ebx
c001b3e2:	e8 d5 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b3e7:	68 ec 00 00 00       	push   0xec
c001b3ec:	6a 07                	push   0x7
c001b3ee:	56                   	push   esi
c001b3ef:	53                   	push   ebx
c001b3f0:	e8 07 f8 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3f5:	83 c4 1c             	add    esp,0x1c
c001b3f8:	6a 0c                	push   0xc
c001b3fa:	56                   	push   esi
c001b3fb:	53                   	push   ebx
c001b3fc:	e8 bb f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b401:	83 c4 0c             	add    esp,0xc
c001b404:	6a 0c                	push   0xc
c001b406:	56                   	push   esi
c001b407:	53                   	push   ebx
c001b408:	e8 af f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b40d:	83 c4 0c             	add    esp,0xc
c001b410:	6a 0c                	push   0xc
c001b412:	56                   	push   esi
c001b413:	53                   	push   ebx
c001b414:	e8 a3 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b419:	83 c4 0c             	add    esp,0xc
c001b41c:	6a 0c                	push   0xc
c001b41e:	56                   	push   esi
c001b41f:	53                   	push   ebx
c001b420:	e8 97 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b425:	83 c4 0c             	add    esp,0xc
c001b428:	6a 0c                	push   0xc
c001b42a:	56                   	push   esi
c001b42b:	53                   	push   ebx
c001b42c:	e8 8b f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b431:	83 c4 10             	add    esp,0x10
c001b434:	84 c0                	test   al,al
c001b436:	0f 84 60 01 00 00    	je     c001b59c <IDE::detect()+0x242>
c001b43c:	31 ff                	xor    edi,edi
c001b43e:	50                   	push   eax
c001b43f:	6a 0c                	push   0xc
c001b441:	56                   	push   esi
c001b442:	53                   	push   ebx
c001b443:	e8 74 f8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b448:	83 c4 10             	add    esp,0x10
c001b44b:	a8 01                	test   al,0x1
c001b44d:	0f 85 6a 01 00 00    	jne    c001b5bd <IDE::detect()+0x263>
c001b453:	a8 80                	test   al,0x80
c001b455:	75 04                	jne    c001b45b <IDE::detect()+0x101>
c001b457:	a8 08                	test   al,0x8
c001b459:	75 23                	jne    c001b47e <IDE::detect()+0x124>
c001b45b:	47                   	inc    edi
c001b45c:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b462:	7e da                	jle    c001b43e <IDE::detect()+0xe4>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	6a 32                	push   0x32
c001b469:	e8 ee 9e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001b46e:	83 c4 10             	add    esp,0x10
c001b471:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b477:	75 c5                	jne    c001b43e <IDE::detect()+0xe4>
c001b479:	e9 3f 01 00 00       	jmp    c001b5bd <IDE::detect()+0x263>
c001b47e:	31 c9                	xor    ecx,ecx
c001b480:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b484:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	68 80 00 00 00       	push   0x80
c001b490:	57                   	push   edi
c001b491:	6a 00                	push   0x0
c001b493:	56                   	push   esi
c001b494:	53                   	push   ebx
c001b495:	e8 f0 fd ff ff       	call   c001b28a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b49a:	89 e8                	mov    eax,ebp
c001b49c:	c1 e0 06             	shl    eax,0x6
c001b49f:	01 d8                	add    eax,ebx
c001b4a1:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b4a6:	89 d1                	mov    ecx,edx
c001b4a8:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4af:	89 f2                	mov    edx,esi
c001b4b1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4b8:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4be:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b4c2:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b4c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4cc:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b4d3:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4db:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b4e2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b4ea:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4f0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b4f7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b4fd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b501:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b505:	83 c4 20             	add    esp,0x20
c001b508:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b50b:	83 c7 02             	add    edi,0x2
c001b50e:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001b514:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b517:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001b51d:	83 c0 02             	add    eax,0x2
c001b520:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001b524:	75 e2                	jne    c001b508 <IDE::detect()+0x1ae>
c001b526:	89 e8                	mov    eax,ebp
c001b528:	c1 e0 06             	shl    eax,0x6
c001b52b:	01 d8                	add    eax,ebx
c001b52d:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b534:	c1 ea 09             	shr    edx,0x9
c001b537:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b53e:	83 e2 01             	and    edx,0x1
c001b541:	80 e1 01             	and    cl,0x1
c001b544:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b54a:	75 22                	jne    c001b56e <IDE::detect()+0x214>
c001b54c:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b553:	74 46                	je     c001b59b <IDE::detect()+0x241>
c001b555:	83 ec 0c             	sub    esp,0xc
c001b558:	68 7c 01 00 00       	push   0x17c
c001b55d:	e8 2a c5 fe ff       	call   c0007a8c <malloc>
c001b562:	89 c7                	mov    edi,eax
c001b564:	89 04 24             	mov    DWORD PTR [esp],eax
c001b567:	e8 12 05 00 00       	call   c001ba7e <ATA::ATA()>
c001b56c:	eb 17                	jmp    c001b585 <IDE::detect()+0x22b>
c001b56e:	83 ec 0c             	sub    esp,0xc
c001b571:	68 84 01 00 00       	push   0x184
c001b576:	e8 11 c5 fe ff       	call   c0007a8c <malloc>
c001b57b:	89 c7                	mov    edi,eax
c001b57d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b580:	e8 6d 0e 00 00       	call   c001c3f2 <ATAPI::ATAPI()>
c001b585:	5a                   	pop    edx
c001b586:	59                   	pop    ecx
c001b587:	57                   	push   edi
c001b588:	53                   	push   ebx
c001b589:	e8 f8 07 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c001b58e:	8b 07                	mov    eax,DWORD PTR [edi]
c001b590:	53                   	push   ebx
c001b591:	55                   	push   ebp
c001b592:	6a 00                	push   0x0
c001b594:	57                   	push   edi
c001b595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b598:	83 c4 20             	add    esp,0x20
c001b59b:	45                   	inc    ebp
c001b59c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b5a1:	74 0d                	je     c001b5b0 <IDE::detect()+0x256>
c001b5a3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b5ab:	e9 db fd ff ff       	jmp    c001b38b <IDE::detect()+0x31>
c001b5b0:	4e                   	dec    esi
c001b5b1:	74 62                	je     c001b615 <IDE::detect()+0x2bb>
c001b5b3:	be 01 00 00 00       	mov    esi,0x1
c001b5b8:	e9 c6 fd ff ff       	jmp    c001b383 <IDE::detect()+0x29>
c001b5bd:	50                   	push   eax
c001b5be:	6a 04                	push   0x4
c001b5c0:	56                   	push   esi
c001b5c1:	53                   	push   ebx
c001b5c2:	e8 f5 f6 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b5c7:	83 c4 0c             	add    esp,0xc
c001b5ca:	89 c7                	mov    edi,eax
c001b5cc:	6a 05                	push   0x5
c001b5ce:	56                   	push   esi
c001b5cf:	53                   	push   ebx
c001b5d0:	e8 e7 f6 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b5d5:	89 f9                	mov    ecx,edi
c001b5d7:	83 c4 10             	add    esp,0x10
c001b5da:	0f b6 f9             	movzx  edi,cl
c001b5dd:	83 ff 14             	cmp    edi,0x14
c001b5e0:	74 2d                	je     c001b60f <IDE::detect()+0x2b5>
c001b5e2:	83 ff 69             	cmp    edi,0x69
c001b5e5:	75 b5                	jne    c001b59c <IDE::detect()+0x242>
c001b5e7:	3c 96                	cmp    al,0x96
c001b5e9:	75 b1                	jne    c001b59c <IDE::detect()+0x242>
c001b5eb:	68 a1 00 00 00       	push   0xa1
c001b5f0:	6a 07                	push   0x7
c001b5f2:	56                   	push   esi
c001b5f3:	53                   	push   ebx
c001b5f4:	e8 03 f6 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5f9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b600:	e8 57 9d ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	b1 01                	mov    cl,0x1
c001b60a:	e9 71 fe ff ff       	jmp    c001b480 <IDE::detect()+0x126>
c001b60f:	3c eb                	cmp    al,0xeb
c001b611:	75 cf                	jne    c001b5e2 <IDE::detect()+0x288>
c001b613:	eb d6                	jmp    c001b5eb <IDE::detect()+0x291>
c001b615:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b61b:	5b                   	pop    ebx
c001b61c:	5e                   	pop    esi
c001b61d:	5f                   	pop    edi
c001b61e:	5d                   	pop    ebp
c001b61f:	c3                   	ret    

c001b620 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b620:	55                   	push   ebp
c001b621:	57                   	push   edi
c001b622:	56                   	push   esi
c001b623:	53                   	push   ebx
c001b624:	83 ec 1c             	sub    esp,0x1c
c001b627:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b62b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b62f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b633:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b637:	88 c3                	mov    bl,al
c001b639:	25 ff 00 00 00       	and    eax,0xff
c001b63e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b642:	0f 84 88 00 00 00    	je     c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b648:	83 ec 0c             	sub    esp,0xc
c001b64b:	89 c7                	mov    edi,eax
c001b64d:	68 43 1a 02 c0       	push   0xc0021a43
c001b652:	e8 fc f2 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	83 ff 01             	cmp    edi,0x1
c001b65d:	74 6b                	je     c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b65f:	83 ff 02             	cmp    edi,0x2
c001b662:	75 58                	jne    c001b6bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b664:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b669:	01 ff                	add    edi,edi
c001b66b:	50                   	push   eax
c001b66c:	09 fe                	or     esi,edi
c001b66e:	6a 01                	push   0x1
c001b670:	89 f0                	mov    eax,esi
c001b672:	0f b6 f0             	movzx  esi,al
c001b675:	c1 e6 06             	shl    esi,0x6
c001b678:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b680:	50                   	push   eax
c001b681:	55                   	push   ebp
c001b682:	e8 35 f6 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	a8 01                	test   al,0x1
c001b68c:	74 02                	je     c001b690 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b68e:	b3 07                	mov    bl,0x7
c001b690:	a8 02                	test   al,0x2
c001b692:	74 02                	je     c001b696 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b694:	b3 03                	mov    bl,0x3
c001b696:	a8 04                	test   al,0x4
c001b698:	74 02                	je     c001b69c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b69a:	b3 14                	mov    bl,0x14
c001b69c:	a8 08                	test   al,0x8
c001b69e:	74 02                	je     c001b6a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b6a0:	b3 03                	mov    bl,0x3
c001b6a2:	a8 10                	test   al,0x10
c001b6a4:	74 02                	je     c001b6a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6a6:	b3 15                	mov    bl,0x15
c001b6a8:	a8 20                	test   al,0x20
c001b6aa:	74 02                	je     c001b6ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6ac:	b3 03                	mov    bl,0x3
c001b6ae:	a8 40                	test   al,0x40
c001b6b0:	74 02                	je     c001b6b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6b2:	b3 16                	mov    bl,0x16
c001b6b4:	a8 80                	test   al,0x80
c001b6b6:	74 18                	je     c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6b8:	b3 0d                	mov    bl,0xd
c001b6ba:	eb 14                	jmp    c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6bc:	83 ff 03             	cmp    edi,0x3
c001b6bf:	74 0d                	je     c001b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b6c1:	83 ff 04             	cmp    edi,0x4
c001b6c4:	75 0a                	jne    c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c6:	b3 08                	mov    bl,0x8
c001b6c8:	eb 06                	jmp    c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ca:	b3 13                	mov    bl,0x13
c001b6cc:	eb 02                	jmp    c001b6d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6ce:	b3 17                	mov    bl,0x17
c001b6d0:	83 c4 1c             	add    esp,0x1c
c001b6d3:	88 d8                	mov    al,bl
c001b6d5:	5b                   	pop    ebx
c001b6d6:	5e                   	pop    esi
c001b6d7:	5f                   	pop    edi
c001b6d8:	5d                   	pop    ebp
c001b6d9:	c3                   	ret    

c001b6da <IDE::polling(unsigned char, unsigned int)>:
c001b6da:	57                   	push   edi
c001b6db:	56                   	push   esi
c001b6dc:	53                   	push   ebx
c001b6dd:	bb 04 00 00 00       	mov    ebx,0x4
c001b6e2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6e7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b6eb:	52                   	push   edx
c001b6ec:	6a 0c                	push   0xc
c001b6ee:	56                   	push   esi
c001b6ef:	57                   	push   edi
c001b6f0:	e8 c7 f5 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	4b                   	dec    ebx
c001b6f9:	75 f0                	jne    c001b6eb <IDE::polling(unsigned char, unsigned int)+0x11>
c001b6fb:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b700:	50                   	push   eax
c001b701:	6a 0c                	push   0xc
c001b703:	56                   	push   esi
c001b704:	57                   	push   edi
c001b705:	e8 b2 f5 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	a8 01                	test   al,0x1
c001b70f:	75 17                	jne    c001b728 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b711:	a8 20                	test   al,0x20
c001b713:	75 0f                	jne    c001b724 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b715:	4b                   	dec    ebx
c001b716:	74 10                	je     c001b728 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b718:	a8 80                	test   al,0x80
c001b71a:	75 e4                	jne    c001b700 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b71c:	a8 08                	test   al,0x8
c001b71e:	74 e0                	je     c001b700 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b720:	31 c0                	xor    eax,eax
c001b722:	eb 06                	jmp    c001b72a <IDE::polling(unsigned char, unsigned int)+0x50>
c001b724:	b0 01                	mov    al,0x1
c001b726:	eb 02                	jmp    c001b72a <IDE::polling(unsigned char, unsigned int)+0x50>
c001b728:	b0 02                	mov    al,0x2
c001b72a:	5b                   	pop    ebx
c001b72b:	5e                   	pop    esi
c001b72c:	5f                   	pop    edi
c001b72d:	c3                   	ret    

c001b72e <SATABus::close(int, int, void*)>:
c001b72e:	31 c0                	xor    eax,eax
c001b730:	c3                   	ret    
c001b731:	90                   	nop

c001b732 <SATABus::detect()>:
c001b732:	c3                   	ret    
c001b733:	90                   	nop

c001b734 <SATABus::SATABus()>:
c001b734:	83 ec 0c             	sub    esp,0xc
c001b737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73b:	83 ec 08             	sub    esp,0x8
c001b73e:	68 7c 1a 02 c0       	push   0xc0021a7c
c001b743:	50                   	push   eax
c001b744:	e8 7f 09 ff ff       	call   c000c0c8 <HardDiskController::HardDiskController(char const*)>
c001b749:	83 c4 10             	add    esp,0x10
c001b74c:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001b751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b755:	89 10                	mov    DWORD PTR [eax],edx
c001b757:	83 ec 0c             	sub    esp,0xc
c001b75a:	6a 50                	push   0x50
c001b75c:	e8 ff c6 fe ff       	call   c0007e60 <Phys::allocateContiguousPages(int)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	89 c2                	mov    edx,eax
c001b766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b76a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b770:	83 ec 0c             	sub    esp,0xc
c001b773:	6a 50                	push   0x50
c001b775:	e8 77 de fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001b77a:	83 c4 10             	add    esp,0x10
c001b77d:	89 c2                	mov    edx,eax
c001b77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b783:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b789:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b78e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b792:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b798:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b79c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b7a2:	83 ec 0c             	sub    esp,0xc
c001b7a5:	6a 03                	push   0x3
c001b7a7:	6a 50                	push   0x50
c001b7a9:	51                   	push   ecx
c001b7aa:	52                   	push   edx
c001b7ab:	50                   	push   eax
c001b7ac:	e8 3d e8 fe ff       	call   c0009fee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7b1:	83 c4 20             	add    esp,0x20
c001b7b4:	90                   	nop
c001b7b5:	83 c4 0c             	add    esp,0xc
c001b7b8:	c3                   	ret    
c001b7b9:	90                   	nop

c001b7ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7be:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b7c1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7c4:	09 c2                	or     edx,eax
c001b7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b7d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7d2:	31 c0                	xor    eax,eax
c001b7d4:	c1 e9 08             	shr    ecx,0x8
c001b7d7:	83 e1 0f             	and    ecx,0xf
c001b7da:	39 c8                	cmp    eax,ecx
c001b7dc:	74 0a                	je     c001b7e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b7de:	f6 c2 01             	test   dl,0x1
c001b7e1:	74 08                	je     c001b7eb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b7e3:	d1 ea                	shr    edx,1
c001b7e5:	40                   	inc    eax
c001b7e6:	eb f2                	jmp    c001b7da <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b7e8:	83 c8 ff             	or     eax,0xffffffff
c001b7eb:	c3                   	ret    

c001b7ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b7f0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7f3:	89 c2                	mov    edx,eax
c001b7f5:	c1 ea 08             	shr    edx,0x8
c001b7f8:	83 e2 0f             	and    edx,0xf
c001b7fb:	4a                   	dec    edx
c001b7fc:	75 32                	jne    c001b830 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7fe:	83 e0 0f             	and    eax,0xf
c001b801:	83 f8 03             	cmp    eax,0x3
c001b804:	75 2a                	jne    c001b830 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b806:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b809:	b8 02 00 00 00       	mov    eax,0x2
c001b80e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b814:	74 1c                	je     c001b832 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b816:	b8 04 00 00 00       	mov    eax,0x4
c001b81b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b821:	74 0f                	je     c001b832 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b823:	31 c0                	xor    eax,eax
c001b825:	83 fa 03             	cmp    edx,0x3
c001b828:	0f 94 c0             	sete   al
c001b82b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b82f:	c3                   	ret    
c001b830:	31 c0                	xor    eax,eax
c001b832:	c3                   	ret    
c001b833:	90                   	nop

c001b834 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b838:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b83b:	0f ba e2 0f          	bt     edx,0xf
c001b83f:	72 f7                	jb     c001b838 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b841:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b844:	83 ca 10             	or     edx,0x10
c001b847:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b84a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b84d:	83 ca 01             	or     edx,0x1
c001b850:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b853:	c3                   	ret    

c001b854 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b854:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b858:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b85b:	83 e2 fe             	and    edx,0xfffffffe
c001b85e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b861:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b864:	83 e2 ef             	and    edx,0xffffffef
c001b867:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b86a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b86d:	0f ba e2 0e          	bt     edx,0xe
c001b871:	72 f7                	jb     c001b86a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b873:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b876:	0f ba e2 0f          	bt     edx,0xf
c001b87a:	72 ee                	jb     c001b86a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b87c:	c3                   	ret    
c001b87d:	90                   	nop

c001b87e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b87e:	55                   	push   ebp
c001b87f:	57                   	push   edi
c001b880:	56                   	push   esi
c001b881:	53                   	push   ebx
c001b882:	83 ec 1c             	sub    esp,0x1c
c001b885:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b889:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b88d:	53                   	push   ebx
c001b88e:	56                   	push   esi
c001b88f:	e8 c0 ff ff ff       	call   c001b854 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b894:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b898:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b89e:	c1 e5 0a             	shl    ebp,0xa
c001b8a1:	83 ec 0c             	sub    esp,0xc
c001b8a4:	01 e8                	add    eax,ebp
c001b8a6:	89 03                	mov    DWORD PTR [ebx],eax
c001b8a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8aa:	68 00 04 00 00       	push   0x400
c001b8af:	6a 00                	push   0x0
c001b8b1:	50                   	push   eax
c001b8b2:	e8 29 4c fe ff       	call   c00004e0 <memset>
c001b8b7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b8bd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b8c1:	01 e8                	add    eax,ebp
c001b8c3:	83 c4 1c             	add    esp,0x1c
c001b8c6:	c1 e2 08             	shl    edx,0x8
c001b8c9:	89 03                	mov    DWORD PTR [ebx],eax
c001b8cb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8d8:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b8de:	01 f8                	add    eax,edi
c001b8e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8e6:	68 00 01 00 00       	push   0x100
c001b8eb:	6a 00                	push   0x0
c001b8ed:	50                   	push   eax
c001b8ee:	e8 ed 4b fe ff       	call   c00004e0 <memset>
c001b8f3:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b8f9:	01 fa                	add    edx,edi
c001b8fb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b8ff:	c1 e7 0d             	shl    edi,0xd
c001b902:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b905:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b90c:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b912:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b918:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b91c:	31 ff                	xor    edi,edi
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b927:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b92b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b931:	83 c5 20             	add    ebp,0x20
c001b934:	01 f8                	add    eax,edi
c001b936:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b939:	52                   	push   edx
c001b93a:	68 00 01 00 00       	push   0x100
c001b93f:	6a 00                	push   0x0
c001b941:	50                   	push   eax
c001b942:	e8 99 4b fe ff       	call   c00004e0 <memset>
c001b947:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b954:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b95b:	01 f8                	add    eax,edi
c001b95d:	81 c7 00 01 00 00    	add    edi,0x100
c001b963:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b966:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b96c:	75 b3                	jne    c001b921 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b96e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b975:	50                   	push   eax
c001b976:	50                   	push   eax
c001b977:	53                   	push   ebx
c001b978:	56                   	push   esi
c001b979:	e8 b6 fe ff ff       	call   c001b834 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b97e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b985:	83 c4 2c             	add    esp,0x2c
c001b988:	5b                   	pop    ebx
c001b989:	5e                   	pop    esi
c001b98a:	5f                   	pop    edi
c001b98b:	5d                   	pop    ebp
c001b98c:	c3                   	ret    
c001b98d:	90                   	nop

c001b98e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b98e:	55                   	push   ebp
c001b98f:	57                   	push   edi
c001b990:	56                   	push   esi
c001b991:	53                   	push   ebx
c001b992:	31 db                	xor    ebx,ebx
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b99b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b99f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b9a2:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9a8:	74 7a                	je     c001ba24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9aa:	89 d8                	mov    eax,ebx
c001b9ac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9b0:	c1 e0 07             	shl    eax,0x7
c001b9b3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9ba:	55                   	push   ebp
c001b9bb:	56                   	push   esi
c001b9bc:	e8 2b fe ff ff       	call   c001b7ec <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b9c1:	5a                   	pop    edx
c001b9c2:	83 f8 01             	cmp    eax,0x1
c001b9c5:	59                   	pop    ecx
c001b9c6:	75 21                	jne    c001b9e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b9c8:	50                   	push   eax
c001b9c9:	53                   	push   ebx
c001b9ca:	55                   	push   ebp
c001b9cb:	56                   	push   esi
c001b9cc:	e8 ad fe ff ff       	call   c001b87e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9d1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b9d8:	e8 af c0 fe ff       	call   c0007a8c <malloc>
c001b9dd:	89 c5                	mov    ebp,eax
c001b9df:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9e2:	e8 cb 10 00 00       	call   c001cab2 <SATA::SATA()>
c001b9e7:	eb 24                	jmp    c001ba0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9e9:	83 f8 04             	cmp    eax,0x4
c001b9ec:	75 36                	jne    c001ba24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9ee:	51                   	push   ecx
c001b9ef:	53                   	push   ebx
c001b9f0:	55                   	push   ebp
c001b9f1:	56                   	push   esi
c001b9f2:	e8 87 fe ff ff       	call   c001b87e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9f7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b9fe:	e8 89 c0 fe ff       	call   c0007a8c <malloc>
c001ba03:	89 c5                	mov    ebp,eax
c001ba05:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba08:	e8 07 18 00 00       	call   c001d214 <SATAPI::SATAPI()>
c001ba0d:	58                   	pop    eax
c001ba0e:	5a                   	pop    edx
c001ba0f:	55                   	push   ebp
c001ba10:	56                   	push   esi
c001ba11:	e8 70 03 ff ff       	call   c000bd86 <Device::addChild(Device*)>
c001ba16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba19:	56                   	push   esi
c001ba1a:	6a 00                	push   0x0
c001ba1c:	53                   	push   ebx
c001ba1d:	55                   	push   ebp
c001ba1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba21:	83 c4 20             	add    esp,0x20
c001ba24:	d1 ef                	shr    edi,1
c001ba26:	43                   	inc    ebx
c001ba27:	83 fb 20             	cmp    ebx,0x20
c001ba2a:	0f 85 72 ff ff ff    	jne    c001b9a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba30:	83 c4 0c             	add    esp,0xc
c001ba33:	5b                   	pop    ebx
c001ba34:	5e                   	pop    esi
c001ba35:	5f                   	pop    edi
c001ba36:	5d                   	pop    ebp
c001ba37:	c3                   	ret    

c001ba38 <SATABus::open(int, int, void*)>:
c001ba38:	83 ec 14             	sub    esp,0x14
c001ba3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba3f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba45:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba4b:	52                   	push   edx
c001ba4c:	50                   	push   eax
c001ba4d:	e8 3c ff ff ff       	call   c001b98e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba52:	31 c0                	xor    eax,eax
c001ba54:	83 c4 1c             	add    esp,0x1c
c001ba57:	c3                   	ret    

c001ba58 <ATA::close(int, int, void*)>:
c001ba58:	83 ec 0c             	sub    esp,0xc
c001ba5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba65:	85 c0                	test   eax,eax
c001ba67:	74 0c                	je     c001ba75 <ATA::close(int, int, void*)+0x1d>
c001ba69:	83 ec 0c             	sub    esp,0xc
c001ba6c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba6e:	50                   	push   eax
c001ba6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	31 c0                	xor    eax,eax
c001ba77:	83 c4 0c             	add    esp,0xc
c001ba7a:	c3                   	ret    
c001ba7b:	90                   	nop

c001ba7c <ATA::powerSaving(PowerSavingLevel)>:
c001ba7c:	c3                   	ret    
c001ba7d:	90                   	nop

c001ba7e <ATA::ATA()>:
c001ba7e:	83 ec 0c             	sub    esp,0xc
c001ba81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba85:	83 ec 04             	sub    esp,0x4
c001ba88:	68 00 02 00 00       	push   0x200
c001ba8d:	68 75 1b 02 c0       	push   0xc0021b75
c001ba92:	50                   	push   eax
c001ba93:	e8 ba 06 ff ff       	call   c000c152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c001baa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa4:	89 10                	mov    DWORD PTR [eax],edx
c001baa6:	90                   	nop
c001baa7:	83 c4 0c             	add    esp,0xc
c001baaa:	c3                   	ret    
c001baab:	90                   	nop

c001baac <ATA::flush(bool)>:
c001baac:	53                   	push   ebx
c001baad:	83 ec 08             	sub    esp,0x8
c001bab0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bab5:	83 f8 01             	cmp    eax,0x1
c001bab8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001babc:	19 c0                	sbb    eax,eax
c001babe:	83 e0 fd             	and    eax,0xfffffffd
c001bac1:	05 ea 00 00 00       	add    eax,0xea
c001bac6:	50                   	push   eax
c001bac7:	6a 07                	push   0x7
c001bac9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bad0:	50                   	push   eax
c001bad1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bad7:	e8 20 f1 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001badc:	83 c4 0c             	add    esp,0xc
c001badf:	6a 00                	push   0x0
c001bae1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bae8:	50                   	push   eax
c001bae9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001baef:	e8 e6 fb ff ff       	call   c001b6da <IDE::polling(unsigned char, unsigned int)>
c001baf4:	83 c4 18             	add    esp,0x18
c001baf7:	5b                   	pop    ebx
c001baf8:	c3                   	ret    
c001baf9:	90                   	nop

c001bafa <ATA::readyForCommand()>:
c001bafa:	56                   	push   esi
c001bafb:	53                   	push   ebx
c001bafc:	53                   	push   ebx
c001bafd:	31 db                	xor    ebx,ebx
c001baff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb03:	51                   	push   ecx
c001bb04:	6a 0c                	push   0xc
c001bb06:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb0d:	50                   	push   eax
c001bb0e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb14:	e8 a3 f1 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	a8 88                	test   al,0x88
c001bb1e:	74 1f                	je     c001bb3f <ATA::readyForCommand()+0x45>
c001bb20:	43                   	inc    ebx
c001bb21:	83 fb 63             	cmp    ebx,0x63
c001bb24:	7e dd                	jle    c001bb03 <ATA::readyForCommand()+0x9>
c001bb26:	83 ec 0c             	sub    esp,0xc
c001bb29:	6a 0a                	push   0xa
c001bb2b:	e8 2c 98 ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001bb30:	83 c4 10             	add    esp,0x10
c001bb33:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb39:	75 c8                	jne    c001bb03 <ATA::readyForCommand()+0x9>
c001bb3b:	31 c0                	xor    eax,eax
c001bb3d:	eb 02                	jmp    c001bb41 <ATA::readyForCommand()+0x47>
c001bb3f:	b0 01                	mov    al,0x1
c001bb41:	5a                   	pop    edx
c001bb42:	5b                   	pop    ebx
c001bb43:	5e                   	pop    esi
c001bb44:	c3                   	ret    
c001bb45:	90                   	nop

c001bb46 <ATA::access(unsigned long long, int, void*, bool)>:
c001bb46:	55                   	push   ebp
c001bb47:	57                   	push   edi
c001bb48:	56                   	push   esi
c001bb49:	53                   	push   ebx
c001bb4a:	83 ec 2c             	sub    esp,0x2c
c001bb4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb59:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb5d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb61:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb65:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bb69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb79:	c1 e0 06             	shl    eax,0x6
c001bb7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb80:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb88:	74 5d                	je     c001bbe7 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bb8a:	89 fa                	mov    edx,edi
c001bb8c:	89 f0                	mov    eax,esi
c001bb8e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bb92:	c1 ea 1c             	shr    edx,0x1c
c001bb95:	89 d1                	mov    ecx,edx
c001bb97:	09 c1                	or     ecx,eax
c001bb99:	74 25                	je     c001bbc0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bb9b:	31 ed                	xor    ebp,ebp
c001bb9d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bba4:	89 fa                	mov    edx,edi
c001bba6:	89 f0                	mov    eax,esi
c001bba8:	0f ad d0             	shrd   eax,edx,cl
c001bbab:	d3 ea                	shr    edx,cl
c001bbad:	f6 c1 20             	test   cl,0x20
c001bbb0:	74 02                	je     c001bbb4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbb2:	89 d0                	mov    eax,edx
c001bbb4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbb8:	45                   	inc    ebp
c001bbb9:	83 fd 06             	cmp    ebp,0x6
c001bbbc:	75 df                	jne    c001bb9d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bbbe:	eb 73                	jmp    c001bc33 <ATA::access(unsigned long long, int, void*, bool)+0xed>
c001bbc0:	89 f0                	mov    eax,esi
c001bbc2:	89 fa                	mov    edx,edi
c001bbc4:	0f ac d0 10          	shrd   eax,edx,0x10
c001bbc8:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bbcd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bbd1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbd8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbdd:	c1 ee 18             	shr    esi,0x18
c001bbe0:	bf 01 00 00 00       	mov    edi,0x1
c001bbe5:	eb 53                	jmp    c001bc3a <ATA::access(unsigned long long, int, void*, bool)+0xf4>
c001bbe7:	6a 00                	push   0x0
c001bbe9:	6a 3f                	push   0x3f
c001bbeb:	57                   	push   edi
c001bbec:	56                   	push   esi
c001bbed:	e8 de 2a 00 00       	call   c001e6d0 <__umoddi3>
c001bbf2:	83 c4 10             	add    esp,0x10
c001bbf5:	40                   	inc    eax
c001bbf6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bbfa:	6a 00                	push   0x0
c001bbfc:	68 f0 03 00 00       	push   0x3f0
c001bc01:	57                   	push   edi
c001bc02:	56                   	push   esi
c001bc03:	e8 c8 29 00 00       	call   c001e5d0 <__udivdi3>
c001bc08:	83 c4 10             	add    esp,0x10
c001bc0b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc10:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc17:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc1c:	6a 00                	push   0x0
c001bc1e:	6a 3f                	push   0x3f
c001bc20:	57                   	push   edi
c001bc21:	31 ff                	xor    edi,edi
c001bc23:	56                   	push   esi
c001bc24:	e8 a7 29 00 00       	call   c001e5d0 <__udivdi3>
c001bc29:	83 e0 0f             	and    eax,0xf
c001bc2c:	83 c4 10             	add    esp,0x10
c001bc2f:	89 c6                	mov    esi,eax
c001bc31:	eb 07                	jmp    c001bc3a <ATA::access(unsigned long long, int, void*, bool)+0xf4>
c001bc33:	31 f6                	xor    esi,esi
c001bc35:	bf 02 00 00 00       	mov    edi,0x2
c001bc3a:	50                   	push   eax
c001bc3b:	6a 00                	push   0x0
c001bc3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc44:	50                   	push   eax
c001bc45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc49:	e8 b6 f1 ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001bc4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc51:	e8 a4 fe ff ff       	call   c001bafa <ATA::readyForCommand()>
c001bc56:	83 c4 10             	add    esp,0x10
c001bc59:	84 c0                	test   al,al
c001bc5b:	75 0a                	jne    c001bc67 <ATA::access(unsigned long long, int, void*, bool)+0x121>
c001bc5d:	be 01 00 00 00       	mov    esi,0x1
c001bc62:	e9 9b 02 00 00       	jmp    c001bf02 <ATA::access(unsigned long long, int, void*, bool)+0x3bc>
c001bc67:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc73:	c1 e0 04             	shl    eax,0x4
c001bc76:	09 c6                	or     esi,eax
c001bc78:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc7f:	f7 c7 03 00 00 00    	test   edi,0x3
c001bc85:	75 05                	jne    c001bc8c <ATA::access(unsigned long long, int, void*, bool)+0x146>
c001bc87:	83 ce a0             	or     esi,0xffffffa0
c001bc8a:	eb 03                	jmp    c001bc8f <ATA::access(unsigned long long, int, void*, bool)+0x149>
c001bc8c:	83 ce e0             	or     esi,0xffffffe0
c001bc8f:	89 f0                	mov    eax,esi
c001bc91:	0f b6 f0             	movzx  esi,al
c001bc94:	56                   	push   esi
c001bc95:	6a 06                	push   0x6
c001bc97:	51                   	push   ecx
c001bc98:	52                   	push   edx
c001bc99:	e8 5e ef ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	6a 00                	push   0x0
c001bca3:	6a 01                	push   0x1
c001bca5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcac:	50                   	push   eax
c001bcad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcb3:	e8 44 ef ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcb8:	89 f8                	mov    eax,edi
c001bcba:	0f b6 f0             	movzx  esi,al
c001bcbd:	83 c4 10             	add    esp,0x10
c001bcc0:	83 fe 02             	cmp    esi,0x2
c001bcc3:	75 6e                	jne    c001bd33 <ATA::access(unsigned long long, int, void*, bool)+0x1ed>
c001bcc5:	6a 00                	push   0x0
c001bcc7:	6a 08                	push   0x8
c001bcc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bcd0:	50                   	push   eax
c001bcd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcd7:	e8 20 ef ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcdc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bce1:	50                   	push   eax
c001bce2:	6a 09                	push   0x9
c001bce4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bceb:	50                   	push   eax
c001bcec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcf2:	e8 05 ef ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcf7:	83 c4 20             	add    esp,0x20
c001bcfa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bcff:	50                   	push   eax
c001bd00:	6a 0a                	push   0xa
c001bd02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd09:	50                   	push   eax
c001bd0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd10:	e8 e7 ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd15:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd1a:	50                   	push   eax
c001bd1b:	6a 0b                	push   0xb
c001bd1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd24:	50                   	push   eax
c001bd25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd2b:	e8 cc ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd30:	83 c4 20             	add    esp,0x20
c001bd33:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd38:	50                   	push   eax
c001bd39:	6a 02                	push   0x2
c001bd3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd42:	50                   	push   eax
c001bd43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd49:	e8 ae ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd4e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd53:	50                   	push   eax
c001bd54:	6a 03                	push   0x3
c001bd56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd5d:	50                   	push   eax
c001bd5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd64:	e8 93 ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd69:	83 c4 20             	add    esp,0x20
c001bd6c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd71:	50                   	push   eax
c001bd72:	6a 04                	push   0x4
c001bd74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd7b:	50                   	push   eax
c001bd7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd82:	e8 75 ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd8c:	50                   	push   eax
c001bd8d:	6a 05                	push   0x5
c001bd8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd96:	50                   	push   eax
c001bd97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd9d:	e8 5a ee ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda2:	83 c4 20             	add    esp,0x20
c001bda5:	83 fe 02             	cmp    esi,0x2
c001bda8:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001bdad:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001bdb2:	85 c9                	test   ecx,ecx
c001bdb4:	74 07                	je     c001bdbd <ATA::access(unsigned long long, int, void*, bool)+0x277>
c001bdb6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdbb:	75 47                	jne    c001be04 <ATA::access(unsigned long long, int, void*, bool)+0x2be>
c001bdbd:	89 f8                	mov    eax,edi
c001bdbf:	0f b6 f8             	movzx  edi,al
c001bdc2:	31 c0                	xor    eax,eax
c001bdc4:	83 ff 02             	cmp    edi,0x2
c001bdc7:	0f 95 c0             	setne  al
c001bdca:	89 c6                	mov    esi,eax
c001bdcc:	74 0c                	je     c001bdda <ATA::access(unsigned long long, int, void*, bool)+0x294>
c001bdce:	b8 30 00 00 00       	mov    eax,0x30
c001bdd3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bdd8:	75 2f                	jne    c001be09 <ATA::access(unsigned long long, int, void*, bool)+0x2c3>
c001bdda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdde:	83 f2 01             	xor    edx,0x1
c001bde1:	85 c9                	test   ecx,ecx
c001bde3:	74 09                	je     c001bdee <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001bde5:	b8 24 00 00 00       	mov    eax,0x24
c001bdea:	84 d2                	test   dl,dl
c001bdec:	75 1b                	jne    c001be09 <ATA::access(unsigned long long, int, void*, bool)+0x2c3>
c001bdee:	85 f6                	test   esi,esi
c001bdf0:	0f 84 67 fe ff ff    	je     c001bc5d <ATA::access(unsigned long long, int, void*, bool)+0x117>
c001bdf6:	b8 20 00 00 00       	mov    eax,0x20
c001bdfb:	84 d2                	test   dl,dl
c001bdfd:	75 0a                	jne    c001be09 <ATA::access(unsigned long long, int, void*, bool)+0x2c3>
c001bdff:	e9 59 fe ff ff       	jmp    c001bc5d <ATA::access(unsigned long long, int, void*, bool)+0x117>
c001be04:	b8 34 00 00 00       	mov    eax,0x34
c001be09:	50                   	push   eax
c001be0a:	6a 07                	push   0x7
c001be0c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be13:	50                   	push   eax
c001be14:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be1a:	e8 dd ed ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be1f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001be23:	83 c4 10             	add    esp,0x10
c001be26:	0f b6 6c 24 0c       	movzx  ebp,BYTE PTR [esp+0xc]
c001be2b:	85 f6                	test   esi,esi
c001be2d:	0f 84 b5 00 00 00    	je     c001bee8 <ATA::access(unsigned long long, int, void*, bool)+0x3a2>
c001be33:	50                   	push   eax
c001be34:	6a 01                	push   0x1
c001be36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be3d:	50                   	push   eax
c001be3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be44:	e8 91 f8 ff ff       	call   c001b6da <IDE::polling(unsigned char, unsigned int)>
c001be49:	83 c4 10             	add    esp,0x10
c001be4c:	0f b6 c0             	movzx  eax,al
c001be4f:	85 c0                	test   eax,eax
c001be51:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be57:	74 1f                	je     c001be78 <ATA::access(unsigned long long, int, void*, bool)+0x332>
c001be59:	50                   	push   eax
c001be5a:	89 c6                	mov    esi,eax
c001be5c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be63:	0f b6 d2             	movzx  edx,dl
c001be66:	50                   	push   eax
c001be67:	52                   	push   edx
c001be68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be6e:	e8 ad f7 ff ff       	call   c001b620 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be73:	e9 87 00 00 00       	jmp    c001beff <ATA::access(unsigned long long, int, void*, bool)+0x3b9>
c001be78:	85 ed                	test   ebp,ebp
c001be7a:	74 3b                	je     c001beb7 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001be7c:	31 c9                	xor    ecx,ecx
c001be7e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be82:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be86:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001be8a:	50                   	push   eax
c001be8b:	50                   	push   eax
c001be8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be93:	50                   	push   eax
c001be94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be9a:	e8 4b ed ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001be9f:	89 c2                	mov    edx,eax
c001bea1:	89 f8                	mov    eax,edi
c001bea3:	66 ef                	out    dx,ax
c001bea5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	41                   	inc    ecx
c001bead:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001beb3:	75 c9                	jne    c001be7e <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001beb5:	eb 23                	jmp    c001beda <ATA::access(unsigned long long, int, void*, bool)+0x394>
c001beb7:	51                   	push   ecx
c001beb8:	51                   	push   ecx
c001beb9:	0f b6 d2             	movzx  edx,dl
c001bebc:	52                   	push   edx
c001bebd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bec3:	e8 22 ed ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001bec8:	b9 00 01 00 00       	mov    ecx,0x100
c001becd:	89 c2                	mov    edx,eax
c001becf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001bed3:	fc                   	cld    
c001bed4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bed7:	83 c4 10             	add    esp,0x10
c001beda:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bee2:	4e                   	dec    esi
c001bee3:	e9 43 ff ff ff       	jmp    c001be2b <ATA::access(unsigned long long, int, void*, bool)+0x2e5>
c001bee8:	31 f6                	xor    esi,esi
c001beea:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001beef:	74 11                	je     c001bf02 <ATA::access(unsigned long long, int, void*, bool)+0x3bc>
c001bef1:	50                   	push   eax
c001bef2:	50                   	push   eax
c001bef3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bef8:	50                   	push   eax
c001bef9:	53                   	push   ebx
c001befa:	e8 ad fb ff ff       	call   c001baac <ATA::flush(bool)>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	83 c4 2c             	add    esp,0x2c
c001bf05:	89 f0                	mov    eax,esi
c001bf07:	5b                   	pop    ebx
c001bf08:	5e                   	pop    esi
c001bf09:	5f                   	pop    edi
c001bf0a:	5d                   	pop    ebp
c001bf0b:	c3                   	ret    

c001bf0c <ATA::detectCHS()>:
c001bf0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf10:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bf16:	c1 e0 06             	shl    eax,0x6
c001bf19:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bf1f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bf29:	c7 44 24 04 cc 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021acc
c001bf31:	e9 09 49 ff ff       	jmp    c001083f <KePanic(char const*)>

c001bf36 <ATA::open(int, int, void*)>:
c001bf36:	53                   	push   ebx
c001bf37:	83 ec 08             	sub    esp,0x8
c001bf3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf4c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf52:	c1 e0 06             	shl    eax,0x6
c001bf55:	01 d0                	add    eax,edx
c001bf57:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf5e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf64:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf6b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf75:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf7b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf82:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf89:	75 0c                	jne    c001bf97 <ATA::open(int, int, void*)+0x61>
c001bf8b:	83 ec 0c             	sub    esp,0xc
c001bf8e:	53                   	push   ebx
c001bf8f:	e8 78 ff ff ff       	call   c001bf0c <ATA::detectCHS()>
c001bf94:	83 c4 10             	add    esp,0x10
c001bf97:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf9d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bfa3:	c1 e0 06             	shl    eax,0x6
c001bfa6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bfad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bfb7:	d1 e8                	shr    eax,1
c001bfb9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bfbf:	6a 04                	push   0x4
c001bfc1:	6a 0c                	push   0xc
c001bfc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfca:	50                   	push   eax
c001bfcb:	52                   	push   edx
c001bfcc:	e8 2b ec ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfd1:	90                   	nop
c001bfd2:	90                   	nop
c001bfd3:	6a 00                	push   0x0
c001bfd5:	6a 0c                	push   0xc
c001bfd7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfde:	50                   	push   eax
c001bfdf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bfe5:	e8 12 ec ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfea:	83 c4 14             	add    esp,0x14
c001bfed:	53                   	push   ebx
c001bfee:	e8 c7 01 ff ff       	call   c000c1ba <PhysicalDisk::startCache()>
c001bff3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bff6:	e8 13 14 ff ff       	call   c000d40e <createPartitionsForDisk(PhysicalDisk*)>
c001bffb:	83 c4 18             	add    esp,0x18
c001bffe:	31 c0                	xor    eax,eax
c001c000:	5b                   	pop    ebx
c001c001:	c3                   	ret    

c001c002 <combineCharAndColour(char, unsigned char)>:
c001c002:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c007:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001c00d:	c1 e0 08             	shl    eax,0x8
c001c010:	09 d0                	or     eax,edx
c001c012:	c3                   	ret    

c001c013 <combineColours(unsigned char, unsigned char)>:
c001c013:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c018:	c1 e0 04             	shl    eax,0x4
c001c01b:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001c01f:	c3                   	ret    

c001c020 <ATA::read(unsigned long long, int, void*)>:
c001c020:	55                   	push   ebp
c001c021:	57                   	push   edi
c001c022:	56                   	push   esi
c001c023:	be 04 00 00 00       	mov    esi,0x4
c001c028:	53                   	push   ebx
c001c029:	83 ec 0c             	sub    esp,0xc
c001c02c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c030:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c034:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c038:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c03c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c03f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c045:	0f 87 a1 01 00 00    	ja     c001c1ec <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c04b:	be 06 00 00 00       	mov    esi,0x6
c001c050:	85 c9                	test   ecx,ecx
c001c052:	0f 84 94 01 00 00    	je     c001c1ec <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c058:	55                   	push   ebp
c001c059:	55                   	push   ebp
c001c05a:	6a 00                	push   0x0
c001c05c:	51                   	push   ecx
c001c05d:	53                   	push   ebx
c001c05e:	52                   	push   edx
c001c05f:	50                   	push   eax
c001c060:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c064:	e8 dd fa ff ff       	call   c001bb46 <ATA::access(unsigned long long, int, void*, bool)>
c001c069:	83 c4 20             	add    esp,0x20
c001c06c:	89 c6                	mov    esi,eax
c001c06e:	85 c0                	test   eax,eax
c001c070:	0f 85 71 01 00 00    	jne    c001c1e7 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c076:	50                   	push   eax
c001c077:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c07d:	50                   	push   eax
c001c07e:	89 da                	mov    edx,ebx
c001c080:	6a 0f                	push   0xf
c001c082:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c088:	6a 00                	push   0x0
c001c08a:	e8 84 ff ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001c08f:	59                   	pop    ecx
c001c090:	bd 10 27 00 00       	mov    ebp,0x2710
c001c095:	5b                   	pop    ebx
c001c096:	b9 0a 00 00 00       	mov    ecx,0xa
c001c09b:	0f b6 d8             	movzx  ebx,al
c001c09e:	89 d0                	mov    eax,edx
c001c0a0:	53                   	push   ebx
c001c0a1:	99                   	cdq    
c001c0a2:	f7 fd                	idiv   ebp
c001c0a4:	99                   	cdq    
c001c0a5:	f7 f9                	idiv   ecx
c001c0a7:	83 c2 30             	add    edx,0x30
c001c0aa:	0f b6 d2             	movzx  edx,dl
c001c0ad:	52                   	push   edx
c001c0ae:	e8 4f ff ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c0b3:	5f                   	pop    edi
c001c0b4:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0b9:	5a                   	pop    edx
c001c0ba:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c0c0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0c5:	53                   	push   ebx
c001c0c6:	99                   	cdq    
c001c0c7:	f7 ff                	idiv   edi
c001c0c9:	99                   	cdq    
c001c0ca:	f7 f9                	idiv   ecx
c001c0cc:	8d 42 30             	lea    eax,[edx+0x30]
c001c0cf:	0f b6 c0             	movzx  eax,al
c001c0d2:	50                   	push   eax
c001c0d3:	e8 2a ff ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c0d8:	5f                   	pop    edi
c001c0d9:	bf 64 00 00 00       	mov    edi,0x64
c001c0de:	5a                   	pop    edx
c001c0df:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c0e5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0ea:	53                   	push   ebx
c001c0eb:	99                   	cdq    
c001c0ec:	f7 ff                	idiv   edi
c001c0ee:	99                   	cdq    
c001c0ef:	f7 f9                	idiv   ecx
c001c0f1:	8d 42 30             	lea    eax,[edx+0x30]
c001c0f4:	0f b6 c0             	movzx  eax,al
c001c0f7:	50                   	push   eax
c001c0f8:	e8 05 ff ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c0fd:	5a                   	pop    edx
c001c0fe:	5a                   	pop    edx
c001c0ff:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c105:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c10a:	53                   	push   ebx
c001c10b:	99                   	cdq    
c001c10c:	f7 f9                	idiv   ecx
c001c10e:	99                   	cdq    
c001c10f:	f7 f9                	idiv   ecx
c001c111:	8d 42 30             	lea    eax,[edx+0x30]
c001c114:	0f b6 c0             	movzx  eax,al
c001c117:	50                   	push   eax
c001c118:	e8 e5 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c11d:	5a                   	pop    edx
c001c11e:	5a                   	pop    edx
c001c11f:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c125:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c12a:	53                   	push   ebx
c001c12b:	99                   	cdq    
c001c12c:	f7 f9                	idiv   ecx
c001c12e:	83 c2 30             	add    edx,0x30
c001c131:	0f b6 d2             	movzx  edx,dl
c001c134:	52                   	push   edx
c001c135:	e8 c8 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c13a:	5a                   	pop    edx
c001c13b:	5a                   	pop    edx
c001c13c:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c142:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c147:	53                   	push   ebx
c001c148:	99                   	cdq    
c001c149:	f7 fd                	idiv   ebp
c001c14b:	99                   	cdq    
c001c14c:	f7 f9                	idiv   ecx
c001c14e:	8d 42 30             	lea    eax,[edx+0x30]
c001c151:	0f b6 c0             	movzx  eax,al
c001c154:	50                   	push   eax
c001c155:	e8 a8 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c15a:	5d                   	pop    ebp
c001c15b:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c160:	5a                   	pop    edx
c001c161:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c167:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c16c:	53                   	push   ebx
c001c16d:	99                   	cdq    
c001c16e:	f7 fd                	idiv   ebp
c001c170:	99                   	cdq    
c001c171:	f7 f9                	idiv   ecx
c001c173:	8d 42 30             	lea    eax,[edx+0x30]
c001c176:	0f b6 c0             	movzx  eax,al
c001c179:	50                   	push   eax
c001c17a:	e8 83 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c17f:	5d                   	pop    ebp
c001c180:	5a                   	pop    edx
c001c181:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c187:	53                   	push   ebx
c001c188:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c18d:	99                   	cdq    
c001c18e:	f7 ff                	idiv   edi
c001c190:	99                   	cdq    
c001c191:	f7 f9                	idiv   ecx
c001c193:	8d 42 30             	lea    eax,[edx+0x30]
c001c196:	0f b6 c0             	movzx  eax,al
c001c199:	50                   	push   eax
c001c19a:	e8 63 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c19f:	5f                   	pop    edi
c001c1a0:	5d                   	pop    ebp
c001c1a1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1a7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1ac:	53                   	push   ebx
c001c1ad:	99                   	cdq    
c001c1ae:	f7 f9                	idiv   ecx
c001c1b0:	99                   	cdq    
c001c1b1:	f7 f9                	idiv   ecx
c001c1b3:	8d 42 30             	lea    eax,[edx+0x30]
c001c1b6:	0f b6 c0             	movzx  eax,al
c001c1b9:	50                   	push   eax
c001c1ba:	e8 43 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c1bf:	5a                   	pop    edx
c001c1c0:	5f                   	pop    edi
c001c1c1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c1c7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1cc:	53                   	push   ebx
c001c1cd:	99                   	cdq    
c001c1ce:	f7 f9                	idiv   ecx
c001c1d0:	83 c2 30             	add    edx,0x30
c001c1d3:	0f b6 d2             	movzx  edx,dl
c001c1d6:	52                   	push   edx
c001c1d7:	e8 26 fe ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c1dc:	83 c4 10             	add    esp,0x10
c001c1df:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c1e5:	eb 05                	jmp    c001c1ec <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c1e7:	be 01 00 00 00       	mov    esi,0x1
c001c1ec:	83 c4 0c             	add    esp,0xc
c001c1ef:	89 f0                	mov    eax,esi
c001c1f1:	5b                   	pop    ebx
c001c1f2:	5e                   	pop    esi
c001c1f3:	5f                   	pop    edi
c001c1f4:	5d                   	pop    ebp
c001c1f5:	c3                   	ret    

c001c1f6 <ATA::write(unsigned long long, int, void*)>:
c001c1f6:	55                   	push   ebp
c001c1f7:	57                   	push   edi
c001c1f8:	56                   	push   esi
c001c1f9:	be 04 00 00 00       	mov    esi,0x4
c001c1fe:	53                   	push   ebx
c001c1ff:	83 ec 0c             	sub    esp,0xc
c001c202:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c206:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c20a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c20e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c212:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c215:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c21b:	0f 87 9c 01 00 00    	ja     c001c3bd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c221:	be 06 00 00 00       	mov    esi,0x6
c001c226:	85 c9                	test   ecx,ecx
c001c228:	0f 84 8f 01 00 00    	je     c001c3bd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c22e:	55                   	push   ebp
c001c22f:	55                   	push   ebp
c001c230:	6a 01                	push   0x1
c001c232:	51                   	push   ecx
c001c233:	53                   	push   ebx
c001c234:	52                   	push   edx
c001c235:	50                   	push   eax
c001c236:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c23a:	e8 07 f9 ff ff       	call   c001bb46 <ATA::access(unsigned long long, int, void*, bool)>
c001c23f:	83 c4 20             	add    esp,0x20
c001c242:	89 c6                	mov    esi,eax
c001c244:	85 c0                	test   eax,eax
c001c246:	0f 85 6c 01 00 00    	jne    c001c3b8 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c24c:	50                   	push   eax
c001c24d:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c253:	50                   	push   eax
c001c254:	bd 10 27 00 00       	mov    ebp,0x2710
c001c259:	6a 0f                	push   0xf
c001c25b:	6a 00                	push   0x0
c001c25d:	e8 b1 fd ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001c262:	0f b6 d8             	movzx  ebx,al
c001c265:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c26a:	5a                   	pop    edx
c001c26b:	99                   	cdq    
c001c26c:	f7 fd                	idiv   ebp
c001c26e:	59                   	pop    ecx
c001c26f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c274:	99                   	cdq    
c001c275:	f7 f9                	idiv   ecx
c001c277:	53                   	push   ebx
c001c278:	8d 42 30             	lea    eax,[edx+0x30]
c001c27b:	0f b6 c0             	movzx  eax,al
c001c27e:	50                   	push   eax
c001c27f:	e8 7e fd ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c284:	5f                   	pop    edi
c001c285:	bf e8 03 00 00       	mov    edi,0x3e8
c001c28a:	5a                   	pop    edx
c001c28b:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c291:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c296:	53                   	push   ebx
c001c297:	99                   	cdq    
c001c298:	f7 ff                	idiv   edi
c001c29a:	99                   	cdq    
c001c29b:	f7 f9                	idiv   ecx
c001c29d:	8d 42 30             	lea    eax,[edx+0x30]
c001c2a0:	0f b6 c0             	movzx  eax,al
c001c2a3:	50                   	push   eax
c001c2a4:	e8 59 fd ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c2a9:	5f                   	pop    edi
c001c2aa:	bf 64 00 00 00       	mov    edi,0x64
c001c2af:	5a                   	pop    edx
c001c2b0:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2b6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2bb:	53                   	push   ebx
c001c2bc:	99                   	cdq    
c001c2bd:	f7 ff                	idiv   edi
c001c2bf:	99                   	cdq    
c001c2c0:	f7 f9                	idiv   ecx
c001c2c2:	8d 42 30             	lea    eax,[edx+0x30]
c001c2c5:	0f b6 c0             	movzx  eax,al
c001c2c8:	50                   	push   eax
c001c2c9:	e8 34 fd ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c2ce:	5a                   	pop    edx
c001c2cf:	5a                   	pop    edx
c001c2d0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2d6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2db:	53                   	push   ebx
c001c2dc:	99                   	cdq    
c001c2dd:	f7 f9                	idiv   ecx
c001c2df:	99                   	cdq    
c001c2e0:	f7 f9                	idiv   ecx
c001c2e2:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e5:	0f b6 c0             	movzx  eax,al
c001c2e8:	50                   	push   eax
c001c2e9:	e8 14 fd ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c2ee:	5a                   	pop    edx
c001c2ef:	5a                   	pop    edx
c001c2f0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2f6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2fb:	53                   	push   ebx
c001c2fc:	99                   	cdq    
c001c2fd:	f7 f9                	idiv   ecx
c001c2ff:	8d 42 30             	lea    eax,[edx+0x30]
c001c302:	0f b6 c0             	movzx  eax,al
c001c305:	50                   	push   eax
c001c306:	e8 f7 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c30b:	5a                   	pop    edx
c001c30c:	5a                   	pop    edx
c001c30d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c313:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c318:	53                   	push   ebx
c001c319:	99                   	cdq    
c001c31a:	f7 fd                	idiv   ebp
c001c31c:	99                   	cdq    
c001c31d:	f7 f9                	idiv   ecx
c001c31f:	8d 42 30             	lea    eax,[edx+0x30]
c001c322:	0f b6 c0             	movzx  eax,al
c001c325:	50                   	push   eax
c001c326:	e8 d7 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c32b:	5d                   	pop    ebp
c001c32c:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c331:	5a                   	pop    edx
c001c332:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c338:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c33d:	53                   	push   ebx
c001c33e:	99                   	cdq    
c001c33f:	f7 fd                	idiv   ebp
c001c341:	99                   	cdq    
c001c342:	f7 f9                	idiv   ecx
c001c344:	8d 42 30             	lea    eax,[edx+0x30]
c001c347:	0f b6 c0             	movzx  eax,al
c001c34a:	50                   	push   eax
c001c34b:	e8 b2 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c350:	5d                   	pop    ebp
c001c351:	5a                   	pop    edx
c001c352:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c358:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c35d:	53                   	push   ebx
c001c35e:	99                   	cdq    
c001c35f:	f7 ff                	idiv   edi
c001c361:	99                   	cdq    
c001c362:	f7 f9                	idiv   ecx
c001c364:	8d 42 30             	lea    eax,[edx+0x30]
c001c367:	0f b6 c0             	movzx  eax,al
c001c36a:	50                   	push   eax
c001c36b:	e8 92 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c370:	5f                   	pop    edi
c001c371:	5d                   	pop    ebp
c001c372:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c378:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c37d:	53                   	push   ebx
c001c37e:	99                   	cdq    
c001c37f:	f7 f9                	idiv   ecx
c001c381:	99                   	cdq    
c001c382:	f7 f9                	idiv   ecx
c001c384:	8d 42 30             	lea    eax,[edx+0x30]
c001c387:	0f b6 c0             	movzx  eax,al
c001c38a:	50                   	push   eax
c001c38b:	e8 72 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c390:	5a                   	pop    edx
c001c391:	5f                   	pop    edi
c001c392:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c398:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c39d:	53                   	push   ebx
c001c39e:	99                   	cdq    
c001c39f:	f7 f9                	idiv   ecx
c001c3a1:	83 c2 30             	add    edx,0x30
c001c3a4:	0f b6 d2             	movzx  edx,dl
c001c3a7:	52                   	push   edx
c001c3a8:	e8 55 fc ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c3b6:	eb 05                	jmp    c001c3bd <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c3b8:	be 01 00 00 00       	mov    esi,0x1
c001c3bd:	83 c4 0c             	add    esp,0xc
c001c3c0:	89 f0                	mov    eax,esi
c001c3c2:	5b                   	pop    ebx
c001c3c3:	5e                   	pop    esi
c001c3c4:	5f                   	pop    edi
c001c3c5:	5d                   	pop    ebp
c001c3c6:	c3                   	ret    
c001c3c7:	90                   	nop

c001c3c8 <ATAPI::write(unsigned long long, int, void*)>:
c001c3c8:	b8 03 00 00 00       	mov    eax,0x3
c001c3cd:	c3                   	ret    

c001c3ce <ATAPI::close(int, int, void*)>:
c001c3ce:	83 ec 0c             	sub    esp,0xc
c001c3d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3db:	85 c0                	test   eax,eax
c001c3dd:	74 0c                	je     c001c3eb <ATAPI::close(int, int, void*)+0x1d>
c001c3df:	83 ec 0c             	sub    esp,0xc
c001c3e2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3e4:	50                   	push   eax
c001c3e5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	31 c0                	xor    eax,eax
c001c3ed:	83 c4 0c             	add    esp,0xc
c001c3f0:	c3                   	ret    
c001c3f1:	90                   	nop

c001c3f2 <ATAPI::ATAPI()>:
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f9:	83 ec 04             	sub    esp,0x4
c001c3fc:	68 00 08 00 00       	push   0x800
c001c401:	68 15 1c 02 c0       	push   0xc0021c15
c001c406:	50                   	push   eax
c001c407:	e8 46 fd fe ff       	call   c000c152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001c414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c418:	89 10                	mov    DWORD PTR [eax],edx
c001c41a:	90                   	nop
c001c41b:	83 c4 0c             	add    esp,0xc
c001c41e:	c3                   	ret    
c001c41f:	90                   	nop

c001c420 <ATAPI::readyForCommand()>:
c001c420:	56                   	push   esi
c001c421:	53                   	push   ebx
c001c422:	53                   	push   ebx
c001c423:	31 db                	xor    ebx,ebx
c001c425:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c429:	51                   	push   ecx
c001c42a:	6a 0c                	push   0xc
c001c42c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c433:	50                   	push   eax
c001c434:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c43a:	e8 7d e8 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001c43f:	83 c4 10             	add    esp,0x10
c001c442:	a8 88                	test   al,0x88
c001c444:	74 25                	je     c001c46b <ATAPI::readyForCommand()+0x4b>
c001c446:	43                   	inc    ebx
c001c447:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c44d:	7e da                	jle    c001c429 <ATAPI::readyForCommand()+0x9>
c001c44f:	83 ec 0c             	sub    esp,0xc
c001c452:	68 5e 01 00 00       	push   0x15e
c001c457:	e8 00 8f ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001c45c:	83 c4 10             	add    esp,0x10
c001c45f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c465:	75 c2                	jne    c001c429 <ATAPI::readyForCommand()+0x9>
c001c467:	31 c0                	xor    eax,eax
c001c469:	eb 02                	jmp    c001c46d <ATAPI::readyForCommand()+0x4d>
c001c46b:	b0 01                	mov    al,0x1
c001c46d:	5a                   	pop    edx
c001c46e:	5b                   	pop    ebx
c001c46f:	5e                   	pop    esi
c001c470:	c3                   	ret    
c001c471:	90                   	nop

c001c472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c472:	55                   	push   ebp
c001c473:	57                   	push   edi
c001c474:	56                   	push   esi
c001c475:	53                   	push   ebx
c001c476:	83 ec 20             	sub    esp,0x20
c001c479:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c47d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c481:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c485:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c489:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c48d:	6a 01                	push   0x1
c001c48f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c496:	50                   	push   eax
c001c497:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c49d:	e8 62 e9 ff ff       	call   c001ae04 <IDE::enableIRQs(unsigned char, bool)>
c001c4a2:	5e                   	pop    esi
c001c4a3:	58                   	pop    eax
c001c4a4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ab:	50                   	push   eax
c001c4ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b2:	e8 1f e7 ff ff       	call   c001abd6 <IDE::prepareInterrupt(unsigned char)>
c001c4b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4ba:	e8 61 ff ff ff       	call   c001c420 <ATAPI::readyForCommand()>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	84 c0                	test   al,al
c001c4c4:	75 0a                	jne    c001c4d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c4c6:	bb 01 00 00 00       	mov    ebx,0x1
c001c4cb:	e9 60 02 00 00       	jmp    c001c730 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c4d0:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c4d6:	c1 e0 04             	shl    eax,0x4
c001c4d9:	0f b6 c0             	movzx  eax,al
c001c4dc:	50                   	push   eax
c001c4dd:	6a 06                	push   0x6
c001c4df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e6:	50                   	push   eax
c001c4e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ed:	e8 0a e7 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f2:	6a 00                	push   0x0
c001c4f4:	6a 01                	push   0x1
c001c4f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4fd:	50                   	push   eax
c001c4fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c504:	e8 f3 e6 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c509:	83 c4 20             	add    esp,0x20
c001c50c:	0f b6 c3             	movzx  eax,bl
c001c50f:	50                   	push   eax
c001c510:	6a 04                	push   0x4
c001c512:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c519:	50                   	push   eax
c001c51a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c520:	0f b6 df             	movzx  ebx,bh
c001c523:	e8 d4 e6 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c528:	53                   	push   ebx
c001c529:	6a 05                	push   0x5
c001c52b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c532:	50                   	push   eax
c001c533:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c539:	e8 be e6 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c53e:	83 c4 20             	add    esp,0x20
c001c541:	68 a0 00 00 00       	push   0xa0
c001c546:	6a 07                	push   0x7
c001c548:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c54f:	50                   	push   eax
c001c550:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c556:	e8 a1 e6 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c55b:	83 c4 0c             	add    esp,0xc
c001c55e:	6a 01                	push   0x1
c001c560:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c567:	50                   	push   eax
c001c568:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c56e:	e8 67 f1 ff ff       	call   c001b6da <IDE::polling(unsigned char, unsigned int)>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	0f b6 d8             	movzx  ebx,al
c001c579:	85 db                	test   ebx,ebx
c001c57b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c581:	74 20                	je     c001c5a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c583:	53                   	push   ebx
c001c584:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c58b:	0f b6 c0             	movzx  eax,al
c001c58e:	52                   	push   edx
c001c58f:	50                   	push   eax
c001c590:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c596:	e8 85 f0 ff ff       	call   c001b620 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	e9 8d 01 00 00       	jmp    c001c730 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c5a3:	53                   	push   ebx
c001c5a4:	53                   	push   ebx
c001c5a5:	0f b6 c0             	movzx  eax,al
c001c5a8:	50                   	push   eax
c001c5a9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5af:	e8 36 e6 ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001c5b4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c5b8:	b9 06 00 00 00       	mov    ecx,0x6
c001c5bd:	89 c2                	mov    edx,eax
c001c5bf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c5c2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c5c6:	83 c4 10             	add    esp,0x10
c001c5c9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c5ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5d8:	85 db                	test   ebx,ebx
c001c5da:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5e1:	0f 84 ec 00 00 00    	je     c001c6d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c5e7:	51                   	push   ecx
c001c5e8:	51                   	push   ecx
c001c5e9:	52                   	push   edx
c001c5ea:	50                   	push   eax
c001c5eb:	e8 7a e7 ff ff       	call   c001ad6a <IDE::waitInterrupt(unsigned char)>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	84 c0                	test   al,al
c001c5f5:	0f 84 cb fe ff ff    	je     c001c4c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c5fb:	56                   	push   esi
c001c5fc:	56                   	push   esi
c001c5fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c604:	50                   	push   eax
c001c605:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c60b:	e8 c6 e5 ff ff       	call   c001abd6 <IDE::prepareInterrupt(unsigned char)>
c001c610:	83 c4 0c             	add    esp,0xc
c001c613:	6a 04                	push   0x4
c001c615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c61c:	50                   	push   eax
c001c61d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c623:	e8 94 e6 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001c628:	83 c4 0c             	add    esp,0xc
c001c62b:	6a 05                	push   0x5
c001c62d:	89 c6                	mov    esi,eax
c001c62f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c636:	50                   	push   eax
c001c637:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c63d:	e8 7a e6 ff ff       	call   c001acbc <IDE::read(unsigned char, unsigned char)>
c001c642:	89 f1                	mov    ecx,esi
c001c644:	0f b6 c0             	movzx  eax,al
c001c647:	c1 e0 08             	shl    eax,0x8
c001c64a:	0f b6 f1             	movzx  esi,cl
c001c64d:	09 c6                	or     esi,eax
c001c64f:	d1 fe                	sar    esi,1
c001c651:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c655:	83 c4 10             	add    esp,0x10
c001c658:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c65d:	74 41                	je     c001c6a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c65f:	31 c9                	xor    ecx,ecx
c001c661:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c667:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c66b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c672:	75 0a                	jne    c001c67e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c674:	01 c9                	add    ecx,ecx
c001c676:	01 cd                	add    ebp,ecx
c001c678:	4b                   	dec    ebx
c001c679:	e9 54 ff ff ff       	jmp    c001c5d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c67e:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c687:	51                   	push   ecx
c001c688:	51                   	push   ecx
c001c689:	52                   	push   edx
c001c68a:	50                   	push   eax
c001c68b:	e8 5a e5 ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001c690:	89 c2                	mov    edx,eax
c001c692:	89 f0                	mov    eax,esi
c001c694:	66 ef                	out    dx,ax
c001c696:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c69a:	83 c4 10             	add    esp,0x10
c001c69d:	41                   	inc    ecx
c001c69e:	eb c1                	jmp    c001c661 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c6a0:	31 f6                	xor    esi,esi
c001c6a2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c6a8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c6ac:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c6b3:	75 06                	jne    c001c6bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c6b5:	01 f6                	add    esi,esi
c001c6b7:	01 f5                	add    ebp,esi
c001c6b9:	eb bd                	jmp    c001c678 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c6bb:	51                   	push   ecx
c001c6bc:	51                   	push   ecx
c001c6bd:	52                   	push   edx
c001c6be:	50                   	push   eax
c001c6bf:	e8 26 e5 ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001c6c4:	89 c2                	mov    edx,eax
c001c6c6:	66 ed                	in     ax,dx
c001c6c8:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c6cd:	83 c4 10             	add    esp,0x10
c001c6d0:	46                   	inc    esi
c001c6d1:	eb cf                	jmp    c001c6a2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c6d3:	51                   	push   ecx
c001c6d4:	51                   	push   ecx
c001c6d5:	52                   	push   edx
c001c6d6:	50                   	push   eax
c001c6d7:	e8 8e e6 ff ff       	call   c001ad6a <IDE::waitInterrupt(unsigned char)>
c001c6dc:	83 c4 10             	add    esp,0x10
c001c6df:	84 c0                	test   al,al
c001c6e1:	0f 84 df fd ff ff    	je     c001c4c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c6e7:	52                   	push   edx
c001c6e8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6ed:	52                   	push   edx
c001c6ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6f5:	50                   	push   eax
c001c6f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6fc:	e8 d5 e4 ff ff       	call   c001abd6 <IDE::prepareInterrupt(unsigned char)>
c001c701:	83 c4 10             	add    esp,0x10
c001c704:	50                   	push   eax
c001c705:	50                   	push   eax
c001c706:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c70d:	50                   	push   eax
c001c70e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c714:	e8 d1 e4 ff ff       	call   c001abea <IDE::getBase(unsigned char)>
c001c719:	8d 50 07             	lea    edx,[eax+0x7]
c001c71c:	ec                   	in     al,dx
c001c71d:	83 c4 10             	add    esp,0x10
c001c720:	a8 88                	test   al,0x88
c001c722:	74 0a                	je     c001c72e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c724:	4b                   	dec    ebx
c001c725:	75 dd                	jne    c001c704 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c727:	bb 02 00 00 00       	mov    ebx,0x2
c001c72c:	eb 02                	jmp    c001c730 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c72e:	31 db                	xor    ebx,ebx
c001c730:	83 c4 1c             	add    esp,0x1c
c001c733:	89 d8                	mov    eax,ebx
c001c735:	5b                   	pop    ebx
c001c736:	5e                   	pop    esi
c001c737:	5f                   	pop    edi
c001c738:	5d                   	pop    ebp
c001c739:	c3                   	ret    

c001c73a <ATAPI::diskRemoved()>:
c001c73a:	53                   	push   ebx
c001c73b:	83 ec 14             	sub    esp,0x14
c001c73e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c742:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c749:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c74f:	e8 a8 09 ff ff       	call   c000d0fc <LogicalDisk::unmount()>
c001c754:	58                   	pop    eax
c001c755:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c75b:	e8 80 13 ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c001c760:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c766:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c76a:	83 c4 18             	add    esp,0x18
c001c76d:	5b                   	pop    ebx
c001c76e:	e9 5d 13 ff ff       	jmp    c000dad0 <VCache::invalidateReadBuffer()>
c001c773:	90                   	nop

c001c774 <ATAPI::eject()>:
c001c774:	57                   	push   edi
c001c775:	b9 03 00 00 00       	mov    ecx,0x3
c001c77a:	53                   	push   ebx
c001c77b:	83 ec 14             	sub    esp,0x14
c001c77e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c782:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c786:	fc                   	cld    
c001c787:	31 c0                	xor    eax,eax
c001c789:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c78b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c790:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c795:	50                   	push   eax
c001c796:	50                   	push   eax
c001c797:	6a 00                	push   0x0
c001c799:	6a 00                	push   0x0
c001c79b:	6a 00                	push   0x0
c001c79d:	6a 02                	push   0x2
c001c79f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7a3:	50                   	push   eax
c001c7a4:	53                   	push   ebx
c001c7a5:	e8 c8 fc ff ff       	call   c001c472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7aa:	83 c4 14             	add    esp,0x14
c001c7ad:	53                   	push   ebx
c001c7ae:	e8 87 ff ff ff       	call   c001c73a <ATAPI::diskRemoved()>
c001c7b3:	83 c4 24             	add    esp,0x24
c001c7b6:	31 c0                	xor    eax,eax
c001c7b8:	5b                   	pop    ebx
c001c7b9:	5f                   	pop    edi
c001c7ba:	c3                   	ret    
c001c7bb:	90                   	nop

c001c7bc <ATAPI::diskInserted()>:
c001c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c0:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c7c7:	c3                   	ret    

c001c7c8 <ATAPI::detectMedia()>:
c001c7c8:	56                   	push   esi
c001c7c9:	53                   	push   ebx
c001c7ca:	83 ec 28             	sub    esp,0x28
c001c7cd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c7d1:	6a 0c                	push   0xc
c001c7d3:	6a 00                	push   0x0
c001c7d5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c7d9:	56                   	push   esi
c001c7da:	e8 01 3d fe ff       	call   c00004e0 <memset>
c001c7df:	58                   	pop    eax
c001c7e0:	5a                   	pop    edx
c001c7e1:	6a 00                	push   0x0
c001c7e3:	6a 00                	push   0x0
c001c7e5:	6a 00                	push   0x0
c001c7e7:	6a 00                	push   0x0
c001c7e9:	56                   	push   esi
c001c7ea:	53                   	push   ebx
c001c7eb:	e8 82 fc ff ff       	call   c001c472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7f0:	83 c4 1c             	add    esp,0x1c
c001c7f3:	6a 0c                	push   0xc
c001c7f5:	6a 00                	push   0x0
c001c7f7:	56                   	push   esi
c001c7f8:	e8 e3 3c fe ff       	call   c00004e0 <memset>
c001c7fd:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c802:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c807:	59                   	pop    ecx
c001c808:	58                   	pop    eax
c001c809:	6a 01                	push   0x1
c001c80b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c80f:	50                   	push   eax
c001c810:	6a 00                	push   0x0
c001c812:	6a 12                	push   0x12
c001c814:	56                   	push   esi
c001c815:	53                   	push   ebx
c001c816:	e8 57 fc ff ff       	call   c001c472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c81b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c81f:	83 c4 20             	add    esp,0x20
c001c822:	83 e0 7f             	and    eax,0x7f
c001c825:	83 f8 70             	cmp    eax,0x70
c001c828:	74 15                	je     c001c83f <ATAPI::detectMedia()+0x77>
c001c82a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c831:	75 0c                	jne    c001c83f <ATAPI::detectMedia()+0x77>
c001c833:	83 ec 0c             	sub    esp,0xc
c001c836:	53                   	push   ebx
c001c837:	e8 80 ff ff ff       	call   c001c7bc <ATAPI::diskInserted()>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c843:	83 e0 0f             	and    eax,0xf
c001c846:	0f b6 c0             	movzx  eax,al
c001c849:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c84e:	75 19                	jne    c001c869 <ATAPI::detectMedia()+0xa1>
c001c850:	83 f8 02             	cmp    eax,0x2
c001c853:	75 14                	jne    c001c869 <ATAPI::detectMedia()+0xa1>
c001c855:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c85c:	74 24                	je     c001c882 <ATAPI::detectMedia()+0xba>
c001c85e:	83 ec 0c             	sub    esp,0xc
c001c861:	53                   	push   ebx
c001c862:	e8 d3 fe ff ff       	call   c001c73a <ATAPI::diskRemoved()>
c001c867:	eb 16                	jmp    c001c87f <ATAPI::detectMedia()+0xb7>
c001c869:	85 c0                	test   eax,eax
c001c86b:	75 15                	jne    c001c882 <ATAPI::detectMedia()+0xba>
c001c86d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c874:	75 0c                	jne    c001c882 <ATAPI::detectMedia()+0xba>
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	53                   	push   ebx
c001c87a:	e8 3d ff ff ff       	call   c001c7bc <ATAPI::diskInserted()>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	83 c4 24             	add    esp,0x24
c001c885:	5b                   	pop    ebx
c001c886:	5e                   	pop    esi
c001c887:	c3                   	ret    

c001c888 <ATAPI::open(int, int, void*)>:
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	50                   	push   eax
c001c88b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c88f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c897:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c89d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c8a3:	c1 e0 06             	shl    eax,0x6
c001c8a6:	01 d0                	add    eax,edx
c001c8a8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c8af:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c8b5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c8bc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c8c6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8cc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c8d3:	6a 04                	push   0x4
c001c8d5:	6a 0c                	push   0xc
c001c8d7:	51                   	push   ecx
c001c8d8:	52                   	push   edx
c001c8d9:	e8 1e e3 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8de:	90                   	nop
c001c8df:	90                   	nop
c001c8e0:	6a 00                	push   0x0
c001c8e2:	6a 0c                	push   0xc
c001c8e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8eb:	50                   	push   eax
c001c8ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8f2:	e8 05 e3 ff ff       	call   c001abfc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f7:	83 c4 14             	add    esp,0x14
c001c8fa:	68 78 01 00 00       	push   0x178
c001c8ff:	e8 88 b1 fe ff       	call   c0007a8c <malloc>
c001c904:	83 c4 0c             	add    esp,0xc
c001c907:	89 c6                	mov    esi,eax
c001c909:	6a 00                	push   0x0
c001c90b:	68 ff ff ff 7f       	push   0x7fffffff
c001c910:	6a 00                	push   0x0
c001c912:	6a 00                	push   0x0
c001c914:	53                   	push   ebx
c001c915:	68 c7 1c 02 c0       	push   0xc0021cc7
c001c91a:	50                   	push   eax
c001c91b:	e8 1a 06 ff ff       	call   c000cf3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c920:	83 c4 14             	add    esp,0x14
c001c923:	56                   	push   esi
c001c924:	e8 d1 06 ff ff       	call   c000cffa <LogicalDisk::assignDriveLetter()>
c001c929:	5a                   	pop    edx
c001c92a:	59                   	pop    ecx
c001c92b:	0f be c0             	movsx  eax,al
c001c92e:	50                   	push   eax
c001c92f:	68 18 1b 02 c0       	push   0xc0021b18
c001c934:	e8 1a e0 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001c939:	58                   	pop    eax
c001c93a:	5a                   	pop    edx
c001c93b:	56                   	push   esi
c001c93c:	53                   	push   ebx
c001c93d:	e8 44 f4 fe ff       	call   c000bd86 <Device::addChild(Device*)>
c001c942:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c948:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c94b:	e8 6a f8 fe ff       	call   c000c1ba <PhysicalDisk::startCache()>
c001c950:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c95a:	e8 69 fe ff ff       	call   c001c7c8 <ATAPI::detectMedia()>
c001c95f:	83 c4 14             	add    esp,0x14
c001c962:	31 c0                	xor    eax,eax
c001c964:	5b                   	pop    ebx
c001c965:	5e                   	pop    esi
c001c966:	c3                   	ret    
c001c967:	90                   	nop

c001c968 <ATAPI::read(unsigned long long, int, void*)>:
c001c968:	55                   	push   ebp
c001c969:	57                   	push   edi
c001c96a:	56                   	push   esi
c001c96b:	53                   	push   ebx
c001c96c:	83 ec 1c             	sub    esp,0x1c
c001c96f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c973:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c977:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c97b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c982:	74 3c                	je     c001c9c0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c984:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c988:	b9 03 00 00 00       	mov    ecx,0x3
c001c98d:	fc                   	cld    
c001c98e:	31 c0                	xor    eax,eax
c001c990:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c992:	0f ce                	bswap  esi
c001c994:	89 e8                	mov    eax,ebp
c001c996:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c99b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c99f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c9a3:	50                   	push   eax
c001c9a4:	50                   	push   eax
c001c9a5:	55                   	push   ebp
c001c9a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9aa:	c1 e5 0b             	shl    ebp,0xb
c001c9ad:	6a 00                	push   0x0
c001c9af:	55                   	push   ebp
c001c9b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9b4:	50                   	push   eax
c001c9b5:	53                   	push   ebx
c001c9b6:	e8 b7 fa ff ff       	call   c001c472 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c9bb:	83 c4 20             	add    esp,0x20
c001c9be:	eb 1a                	jmp    c001c9da <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c9c0:	83 ec 0c             	sub    esp,0xc
c001c9c3:	53                   	push   ebx
c001c9c4:	e8 ff fd ff ff       	call   c001c7c8 <ATAPI::detectMedia()>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c9d3:	75 af                	jne    c001c984 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c9d5:	b8 02 00 00 00       	mov    eax,0x2
c001c9da:	83 c4 1c             	add    esp,0x1c
c001c9dd:	5b                   	pop    ebx
c001c9de:	5e                   	pop    esi
c001c9df:	5f                   	pop    edi
c001c9e0:	5d                   	pop    ebp
c001c9e1:	c3                   	ret    

c001c9e2 <SATA::close(int, int, void*)>:
c001c9e2:	83 ec 0c             	sub    esp,0xc
c001c9e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9ef:	85 c0                	test   eax,eax
c001c9f1:	74 0c                	je     c001c9ff <SATA::close(int, int, void*)+0x1d>
c001c9f3:	83 ec 0c             	sub    esp,0xc
c001c9f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9f8:	50                   	push   eax
c001c9f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	31 c0                	xor    eax,eax
c001ca01:	83 c4 0c             	add    esp,0xc
c001ca04:	c3                   	ret    
c001ca05:	90                   	nop

c001ca06 <SATA::powerSaving(PowerSavingLevel)>:
c001ca06:	c3                   	ret    
c001ca07:	90                   	nop

c001ca08 <SATA::open(int, int, void*)>:
c001ca08:	56                   	push   esi
c001ca09:	53                   	push   ebx
c001ca0a:	50                   	push   eax
c001ca0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca13:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ca19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca1d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca23:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ca2d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ca37:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca41:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca48:	e8 44 b3 fe ff       	call   c0007d91 <Phys::allocatePage()>
c001ca4d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca53:	89 c6                	mov    esi,eax
c001ca55:	e8 37 b3 fe ff       	call   c0007d91 <Phys::allocatePage()>
c001ca5a:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca60:	39 c6                	cmp    esi,eax
c001ca62:	74 10                	je     c001ca74 <SATA::open(int, int, void*)+0x6c>
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	68 60 1b 02 c0       	push   0xc0021b60
c001ca6c:	e8 ce 3d ff ff       	call   c001083f <KePanic(char const*)>
c001ca71:	83 c4 10             	add    esp,0x10
c001ca74:	83 ec 0c             	sub    esp,0xc
c001ca77:	6a 02                	push   0x2
c001ca79:	e8 73 cb fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001ca7e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca84:	6a 03                	push   0x3
c001ca86:	50                   	push   eax
c001ca87:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca8d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca93:	e8 42 d2 fe ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca98:	83 c4 14             	add    esp,0x14
c001ca9b:	53                   	push   ebx
c001ca9c:	e8 19 f7 fe ff       	call   c000c1ba <PhysicalDisk::startCache()>
c001caa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caa4:	e8 65 09 ff ff       	call   c000d40e <createPartitionsForDisk(PhysicalDisk*)>
c001caa9:	83 c4 14             	add    esp,0x14
c001caac:	31 c0                	xor    eax,eax
c001caae:	5b                   	pop    ebx
c001caaf:	5e                   	pop    esi
c001cab0:	c3                   	ret    
c001cab1:	90                   	nop

c001cab2 <SATA::SATA()>:
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab9:	83 ec 04             	sub    esp,0x4
c001cabc:	68 00 02 00 00       	push   0x200
c001cac1:	68 74 1b 02 c0       	push   0xc0021b74
c001cac6:	50                   	push   eax
c001cac7:	e8 86 f6 fe ff       	call   c000c152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cacc:	83 c4 10             	add    esp,0x10
c001cacf:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001cad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad8:	89 10                	mov    DWORD PTR [eax],edx
c001cada:	90                   	nop
c001cadb:	83 c4 0c             	add    esp,0xc
c001cade:	c3                   	ret    
c001cadf:	90                   	nop

c001cae0 <SATA::access(unsigned long long, int, void*, bool)>:
c001cae0:	55                   	push   ebp
c001cae1:	57                   	push   edi
c001cae2:	56                   	push   esi
c001cae3:	53                   	push   ebx
c001cae4:	83 ec 2c             	sub    esp,0x2c
c001cae7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001caeb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001caef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caf3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001caf7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cafb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caff:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cb04:	7e 10                	jle    c001cb16 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	68 84 1b 02 c0       	push   0xc0021b84
c001cb0e:	e8 2c 3d ff ff       	call   c001083f <KePanic(char const*)>
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001cb1c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb2c:	89 d0                	mov    eax,edx
c001cb2e:	c1 e0 07             	shl    eax,0x7
c001cb31:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb35:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb3f:	51                   	push   ecx
c001cb40:	8d 42 02             	lea    eax,[edx+0x2]
c001cb43:	51                   	push   ecx
c001cb44:	c1 e0 07             	shl    eax,0x7
c001cb47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cb4f:	50                   	push   eax
c001cb50:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb56:	e8 5f ec ff ff       	call   c001b7ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb5f:	83 c4 10             	add    esp,0x10
c001cb62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb66:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cb6b:	0f 84 57 01 00 00    	je     c001ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb75:	c1 e0 09             	shl    eax,0x9
c001cb78:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb7c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cb81:	74 0e                	je     c001cb91 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cb83:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb89:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb8d:	89 c1                	mov    ecx,eax
c001cb8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb91:	8d 42 02             	lea    eax,[edx+0x2]
c001cb94:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb9a:	c1 e0 07             	shl    eax,0x7
c001cb9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cba1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cba5:	8b 00                	mov    eax,DWORD PTR [eax]
c001cba7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cbad:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cbb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbb7:	c1 e1 05             	shl    ecx,0x5
c001cbba:	01 c8                	add    eax,ecx
c001cbbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cbc0:	83 e1 01             	and    ecx,0x1
c001cbc3:	89 ce                	mov    esi,ecx
c001cbc5:	8a 08                	mov    cl,BYTE PTR [eax]
c001cbc7:	c1 e6 06             	shl    esi,0x6
c001cbca:	83 e1 bf             	and    ecx,0xffffffbf
c001cbcd:	09 f1                	or     ecx,esi
c001cbcf:	88 08                	mov    BYTE PTR [eax],cl
c001cbd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cbd3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cbd9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cbdf:	89 08                	mov    DWORD PTR [eax],ecx
c001cbe1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbe7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cbed:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cbf3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cbf6:	50                   	push   eax
c001cbf7:	68 90 00 00 00       	push   0x90
c001cbfc:	6a 00                	push   0x0
c001cbfe:	56                   	push   esi
c001cbff:	e8 dc 38 fe ff       	call   c00004e0 <memset>
c001cc04:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cc0a:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cc10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc14:	48                   	dec    eax
c001cc15:	83 c4 10             	add    esp,0x10
c001cc18:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc1d:	89 c1                	mov    ecx,eax
c001cc1f:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cc25:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc2a:	09 c8                	or     eax,ecx
c001cc2c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cc32:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc38:	83 c8 80             	or     eax,0xffffff80
c001cc3b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc41:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc44:	25 00 7f 00 00       	and    eax,0x7f00
c001cc49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc4d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc52:	66 89 06             	mov    WORD PTR [esi],ax
c001cc55:	b0 35                	mov    al,0x35
c001cc57:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc5c:	75 02                	jne    c001cc60 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001cc5e:	b0 25                	mov    al,0x25
c001cc60:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc63:	89 e8                	mov    eax,ebp
c001cc65:	c1 e8 10             	shr    eax,0x10
c001cc68:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cc6c:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc6f:	89 e8                	mov    eax,ebp
c001cc71:	c1 e8 18             	shr    eax,0x18
c001cc74:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc78:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc7b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc7f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc86:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc8d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc91:	89 d6                	mov    esi,edx
c001cc93:	c1 e6 07             	shl    esi,0x7
c001cc96:	31 c0                	xor    eax,eax
c001cc98:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc9c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cca2:	80 e1 88             	and    cl,0x88
c001cca5:	74 0a                	je     c001ccb1 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cca7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccac:	74 0a                	je     c001ccb8 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ccae:	40                   	inc    eax
c001ccaf:	eb eb                	jmp    c001cc9c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001ccb1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccb6:	75 17                	jne    c001cccf <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	68 bd 1b 02 c0       	push   0xc0021bbd
c001ccc0:	e8 8e dc fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001ccc5:	83 c4 10             	add    esp,0x10
c001ccc8:	b8 01 00 00 00       	mov    eax,0x1
c001cccd:	eb 5d                	jmp    c001cd2c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cccf:	b8 01 00 00 00       	mov    eax,0x1
c001ccd4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ccd8:	c1 e2 07             	shl    edx,0x7
c001ccdb:	d3 e0                	shl    eax,cl
c001ccdd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cce1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cce7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001cced:	85 c8                	test   eax,ecx
c001ccef:	74 16                	je     c001cd07 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001ccf1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ccf7:	0f ba e1 1e          	bt     ecx,0x1e
c001ccfb:	73 ea                	jae    c001cce7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001ccfd:	83 ec 0c             	sub    esp,0xc
c001cd00:	68 cb 1b 02 c0       	push   0xc0021bcb
c001cd05:	eb b9                	jmp    c001ccc0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cd07:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001cd0d:	0f ba e0 1e          	bt     eax,0x1e
c001cd11:	72 b5                	jb     c001ccc8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cd13:	31 c0                	xor    eax,eax
c001cd15:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cd1a:	75 10                	jne    c001cd2c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cd1c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cd22:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cd26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cd2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd2c:	83 c4 2c             	add    esp,0x2c
c001cd2f:	5b                   	pop    ebx
c001cd30:	5e                   	pop    esi
c001cd31:	5f                   	pop    edi
c001cd32:	5d                   	pop    ebp
c001cd33:	c3                   	ret    

c001cd34 <SATA::read(unsigned long long, int, void*)>:
c001cd34:	55                   	push   ebp
c001cd35:	57                   	push   edi
c001cd36:	56                   	push   esi
c001cd37:	be 04 00 00 00       	mov    esi,0x4
c001cd3c:	53                   	push   ebx
c001cd3d:	83 ec 0c             	sub    esp,0xc
c001cd40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd4c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd50:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd53:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd59:	0f 87 1a 02 00 00    	ja     c001cf79 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd5f:	be 06 00 00 00       	mov    esi,0x6
c001cd64:	85 c9                	test   ecx,ecx
c001cd66:	0f 84 0d 02 00 00    	je     c001cf79 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd6c:	56                   	push   esi
c001cd6d:	56                   	push   esi
c001cd6e:	6a 00                	push   0x0
c001cd70:	51                   	push   ecx
c001cd71:	53                   	push   ebx
c001cd72:	52                   	push   edx
c001cd73:	50                   	push   eax
c001cd74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd78:	e8 63 fd ff ff       	call   c001cae0 <SATA::access(unsigned long long, int, void*, bool)>
c001cd7d:	83 c4 20             	add    esp,0x20
c001cd80:	89 c6                	mov    esi,eax
c001cd82:	85 c0                	test   eax,eax
c001cd84:	0f 85 ea 01 00 00    	jne    c001cf74 <SATA::read(unsigned long long, int, void*)+0x240>
c001cd8a:	50                   	push   eax
c001cd8b:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd91:	50                   	push   eax
c001cd92:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd97:	6a 0f                	push   0xf
c001cd99:	6a 00                	push   0x0
c001cd9b:	e8 73 f2 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cda0:	5a                   	pop    edx
c001cda1:	59                   	pop    ecx
c001cda2:	b9 10 27 00 00       	mov    ecx,0x2710
c001cda7:	0f b6 c0             	movzx  eax,al
c001cdaa:	50                   	push   eax
c001cdab:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdb0:	99                   	cdq    
c001cdb1:	f7 f9                	idiv   ecx
c001cdb3:	99                   	cdq    
c001cdb4:	f7 fb                	idiv   ebx
c001cdb6:	8d 42 30             	lea    eax,[edx+0x30]
c001cdb9:	0f b6 c0             	movzx  eax,al
c001cdbc:	50                   	push   eax
c001cdbd:	e8 40 f2 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cdc2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cdc8:	5f                   	pop    edi
c001cdc9:	5d                   	pop    ebp
c001cdca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdcf:	6a 0f                	push   0xf
c001cdd1:	6a 00                	push   0x0
c001cdd3:	e8 3b f2 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cdd8:	5a                   	pop    edx
c001cdd9:	59                   	pop    ecx
c001cdda:	0f b6 c0             	movzx  eax,al
c001cddd:	50                   	push   eax
c001cdde:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cde3:	99                   	cdq    
c001cde4:	f7 fd                	idiv   ebp
c001cde6:	99                   	cdq    
c001cde7:	f7 fb                	idiv   ebx
c001cde9:	8d 42 30             	lea    eax,[edx+0x30]
c001cdec:	0f b6 c0             	movzx  eax,al
c001cdef:	50                   	push   eax
c001cdf0:	e8 0d f2 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cdf5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdfb:	5f                   	pop    edi
c001cdfc:	bf 64 00 00 00       	mov    edi,0x64
c001ce01:	58                   	pop    eax
c001ce02:	6a 0f                	push   0xf
c001ce04:	6a 00                	push   0x0
c001ce06:	e8 08 f2 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001ce0b:	5a                   	pop    edx
c001ce0c:	59                   	pop    ecx
c001ce0d:	0f b6 c0             	movzx  eax,al
c001ce10:	50                   	push   eax
c001ce11:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce16:	99                   	cdq    
c001ce17:	f7 ff                	idiv   edi
c001ce19:	99                   	cdq    
c001ce1a:	f7 fb                	idiv   ebx
c001ce1c:	8d 42 30             	lea    eax,[edx+0x30]
c001ce1f:	0f b6 c0             	movzx  eax,al
c001ce22:	50                   	push   eax
c001ce23:	e8 da f1 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001ce28:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce2e:	58                   	pop    eax
c001ce2f:	5a                   	pop    edx
c001ce30:	6a 0f                	push   0xf
c001ce32:	6a 00                	push   0x0
c001ce34:	e8 da f1 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001ce39:	59                   	pop    ecx
c001ce3a:	5a                   	pop    edx
c001ce3b:	0f b6 c0             	movzx  eax,al
c001ce3e:	50                   	push   eax
c001ce3f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce44:	99                   	cdq    
c001ce45:	f7 fb                	idiv   ebx
c001ce47:	99                   	cdq    
c001ce48:	f7 fb                	idiv   ebx
c001ce4a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce4d:	0f b6 c0             	movzx  eax,al
c001ce50:	50                   	push   eax
c001ce51:	e8 ac f1 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001ce56:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce5c:	59                   	pop    ecx
c001ce5d:	58                   	pop    eax
c001ce5e:	6a 0f                	push   0xf
c001ce60:	6a 00                	push   0x0
c001ce62:	e8 ac f1 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001ce67:	5a                   	pop    edx
c001ce68:	59                   	pop    ecx
c001ce69:	0f b6 c0             	movzx  eax,al
c001ce6c:	50                   	push   eax
c001ce6d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce72:	99                   	cdq    
c001ce73:	f7 fb                	idiv   ebx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 81 f1 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001ce81:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce87:	58                   	pop    eax
c001ce88:	5a                   	pop    edx
c001ce89:	6a 0f                	push   0xf
c001ce8b:	6a 00                	push   0x0
c001ce8d:	e8 81 f1 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001ce92:	59                   	pop    ecx
c001ce93:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce98:	5a                   	pop    edx
c001ce99:	0f b6 c0             	movzx  eax,al
c001ce9c:	50                   	push   eax
c001ce9d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cea2:	99                   	cdq    
c001cea3:	f7 f9                	idiv   ecx
c001cea5:	99                   	cdq    
c001cea6:	f7 fb                	idiv   ebx
c001cea8:	8d 42 30             	lea    eax,[edx+0x30]
c001ceab:	0f b6 c0             	movzx  eax,al
c001ceae:	50                   	push   eax
c001ceaf:	e8 4e f1 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001ceb4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ceba:	59                   	pop    ecx
c001cebb:	58                   	pop    eax
c001cebc:	6a 0f                	push   0xf
c001cebe:	6a 00                	push   0x0
c001cec0:	e8 4e f1 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cec5:	5a                   	pop    edx
c001cec6:	59                   	pop    ecx
c001cec7:	0f b6 c0             	movzx  eax,al
c001ceca:	50                   	push   eax
c001cecb:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ced0:	99                   	cdq    
c001ced1:	f7 fd                	idiv   ebp
c001ced3:	99                   	cdq    
c001ced4:	f7 fb                	idiv   ebx
c001ced6:	8d 42 30             	lea    eax,[edx+0x30]
c001ced9:	0f b6 c0             	movzx  eax,al
c001cedc:	50                   	push   eax
c001cedd:	e8 20 f1 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cee2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cee8:	5d                   	pop    ebp
c001cee9:	58                   	pop    eax
c001ceea:	6a 0f                	push   0xf
c001ceec:	6a 00                	push   0x0
c001ceee:	e8 20 f1 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cef3:	5a                   	pop    edx
c001cef4:	59                   	pop    ecx
c001cef5:	0f b6 c0             	movzx  eax,al
c001cef8:	50                   	push   eax
c001cef9:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cefe:	99                   	cdq    
c001ceff:	f7 ff                	idiv   edi
c001cf01:	99                   	cdq    
c001cf02:	f7 fb                	idiv   ebx
c001cf04:	8d 42 30             	lea    eax,[edx+0x30]
c001cf07:	0f b6 c0             	movzx  eax,al
c001cf0a:	50                   	push   eax
c001cf0b:	e8 f2 f0 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cf10:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf16:	5f                   	pop    edi
c001cf17:	5d                   	pop    ebp
c001cf18:	6a 0f                	push   0xf
c001cf1a:	6a 00                	push   0x0
c001cf1c:	e8 f2 f0 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cf21:	5a                   	pop    edx
c001cf22:	59                   	pop    ecx
c001cf23:	0f b6 c0             	movzx  eax,al
c001cf26:	50                   	push   eax
c001cf27:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf2c:	99                   	cdq    
c001cf2d:	f7 fb                	idiv   ebx
c001cf2f:	99                   	cdq    
c001cf30:	f7 fb                	idiv   ebx
c001cf32:	8d 42 30             	lea    eax,[edx+0x30]
c001cf35:	0f b6 c0             	movzx  eax,al
c001cf38:	50                   	push   eax
c001cf39:	e8 c4 f0 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cf3e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf44:	5f                   	pop    edi
c001cf45:	5d                   	pop    ebp
c001cf46:	6a 0f                	push   0xf
c001cf48:	6a 00                	push   0x0
c001cf4a:	e8 c4 f0 ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001cf4f:	5a                   	pop    edx
c001cf50:	59                   	pop    ecx
c001cf51:	0f b6 c0             	movzx  eax,al
c001cf54:	50                   	push   eax
c001cf55:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf5a:	99                   	cdq    
c001cf5b:	f7 fb                	idiv   ebx
c001cf5d:	83 c2 30             	add    edx,0x30
c001cf60:	0f b6 d2             	movzx  edx,dl
c001cf63:	52                   	push   edx
c001cf64:	e8 99 f0 ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf72:	eb 05                	jmp    c001cf79 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf74:	be 01 00 00 00       	mov    esi,0x1
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	89 f0                	mov    eax,esi
c001cf7e:	5b                   	pop    ebx
c001cf7f:	5e                   	pop    esi
c001cf80:	5f                   	pop    edi
c001cf81:	5d                   	pop    ebp
c001cf82:	c3                   	ret    
c001cf83:	90                   	nop

c001cf84 <SATA::write(unsigned long long, int, void*)>:
c001cf84:	55                   	push   ebp
c001cf85:	b8 04 00 00 00       	mov    eax,0x4
c001cf8a:	57                   	push   edi
c001cf8b:	56                   	push   esi
c001cf8c:	53                   	push   ebx
c001cf8d:	83 ec 1c             	sub    esp,0x1c
c001cf90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf94:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cf98:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cf9c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001cfa0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001cfa3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cfa9:	0f 87 32 02 00 00    	ja     c001d1e1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cfaf:	b8 06 00 00 00       	mov    eax,0x6
c001cfb4:	85 ff                	test   edi,edi
c001cfb6:	0f 84 25 02 00 00    	je     c001d1e1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cfbc:	89 ee                	mov    esi,ebp
c001cfbe:	c1 e6 09             	shl    esi,0x9
c001cfc1:	01 fe                	add    esi,edi
c001cfc3:	89 c8                	mov    eax,ecx
c001cfc5:	89 da                	mov    edx,ebx
c001cfc7:	83 c0 01             	add    eax,0x1
c001cfca:	83 d2 00             	adc    edx,0x0
c001cfcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cfd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cfd5:	50                   	push   eax
c001cfd6:	50                   	push   eax
c001cfd7:	6a 01                	push   0x1
c001cfd9:	57                   	push   edi
c001cfda:	81 c7 00 02 00 00    	add    edi,0x200
c001cfe0:	6a 01                	push   0x1
c001cfe2:	53                   	push   ebx
c001cfe3:	51                   	push   ecx
c001cfe4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cfe8:	e8 f3 fa ff ff       	call   c001cae0 <SATA::access(unsigned long long, int, void*, bool)>
c001cfed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cff1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cff5:	83 c4 20             	add    esp,0x20
c001cff8:	39 f7                	cmp    edi,esi
c001cffa:	75 c7                	jne    c001cfc3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001cffc:	50                   	push   eax
c001cffd:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001d003:	50                   	push   eax
c001d004:	bd 10 27 00 00       	mov    ebp,0x2710
c001d009:	6a 0f                	push   0xf
c001d00b:	bb 0a 00 00 00       	mov    ebx,0xa
c001d010:	6a 00                	push   0x0
c001d012:	e8 fc ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d017:	5a                   	pop    edx
c001d018:	59                   	pop    ecx
c001d019:	0f b6 c0             	movzx  eax,al
c001d01c:	50                   	push   eax
c001d01d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d022:	99                   	cdq    
c001d023:	f7 fd                	idiv   ebp
c001d025:	99                   	cdq    
c001d026:	f7 fb                	idiv   ebx
c001d028:	8d 42 30             	lea    eax,[edx+0x30]
c001d02b:	0f b6 c0             	movzx  eax,al
c001d02e:	50                   	push   eax
c001d02f:	e8 ce ef ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d034:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d03a:	5e                   	pop    esi
c001d03b:	5f                   	pop    edi
c001d03c:	bf e8 03 00 00       	mov    edi,0x3e8
c001d041:	6a 0f                	push   0xf
c001d043:	6a 00                	push   0x0
c001d045:	e8 c9 ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d04a:	5a                   	pop    edx
c001d04b:	59                   	pop    ecx
c001d04c:	0f b6 c0             	movzx  eax,al
c001d04f:	50                   	push   eax
c001d050:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d055:	99                   	cdq    
c001d056:	f7 ff                	idiv   edi
c001d058:	99                   	cdq    
c001d059:	f7 fb                	idiv   ebx
c001d05b:	8d 42 30             	lea    eax,[edx+0x30]
c001d05e:	0f b6 c0             	movzx  eax,al
c001d061:	50                   	push   eax
c001d062:	e8 9b ef ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d067:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d06d:	5e                   	pop    esi
c001d06e:	be 64 00 00 00       	mov    esi,0x64
c001d073:	58                   	pop    eax
c001d074:	6a 0f                	push   0xf
c001d076:	6a 00                	push   0x0
c001d078:	e8 96 ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d07d:	5a                   	pop    edx
c001d07e:	59                   	pop    ecx
c001d07f:	0f b6 c0             	movzx  eax,al
c001d082:	50                   	push   eax
c001d083:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d088:	99                   	cdq    
c001d089:	f7 fe                	idiv   esi
c001d08b:	99                   	cdq    
c001d08c:	f7 fb                	idiv   ebx
c001d08e:	8d 42 30             	lea    eax,[edx+0x30]
c001d091:	0f b6 c0             	movzx  eax,al
c001d094:	50                   	push   eax
c001d095:	e8 68 ef ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d09a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d0a0:	58                   	pop    eax
c001d0a1:	5a                   	pop    edx
c001d0a2:	6a 0f                	push   0xf
c001d0a4:	6a 00                	push   0x0
c001d0a6:	e8 68 ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d0ab:	59                   	pop    ecx
c001d0ac:	5a                   	pop    edx
c001d0ad:	0f b6 c0             	movzx  eax,al
c001d0b0:	50                   	push   eax
c001d0b1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0b6:	99                   	cdq    
c001d0b7:	f7 fb                	idiv   ebx
c001d0b9:	99                   	cdq    
c001d0ba:	f7 fb                	idiv   ebx
c001d0bc:	8d 42 30             	lea    eax,[edx+0x30]
c001d0bf:	0f b6 c0             	movzx  eax,al
c001d0c2:	50                   	push   eax
c001d0c3:	e8 3a ef ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d0c8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d0ce:	59                   	pop    ecx
c001d0cf:	58                   	pop    eax
c001d0d0:	6a 0f                	push   0xf
c001d0d2:	6a 00                	push   0x0
c001d0d4:	e8 3a ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d0d9:	5a                   	pop    edx
c001d0da:	59                   	pop    ecx
c001d0db:	0f b6 c0             	movzx  eax,al
c001d0de:	50                   	push   eax
c001d0df:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0e4:	99                   	cdq    
c001d0e5:	f7 fb                	idiv   ebx
c001d0e7:	83 c2 30             	add    edx,0x30
c001d0ea:	0f b6 d2             	movzx  edx,dl
c001d0ed:	52                   	push   edx
c001d0ee:	e8 0f ef ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d0f3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0f9:	58                   	pop    eax
c001d0fa:	5a                   	pop    edx
c001d0fb:	6a 0f                	push   0xf
c001d0fd:	6a 00                	push   0x0
c001d0ff:	e8 0f ef ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d104:	59                   	pop    ecx
c001d105:	5a                   	pop    edx
c001d106:	0f b6 c0             	movzx  eax,al
c001d109:	50                   	push   eax
c001d10a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d10f:	99                   	cdq    
c001d110:	f7 fd                	idiv   ebp
c001d112:	99                   	cdq    
c001d113:	f7 fb                	idiv   ebx
c001d115:	8d 42 30             	lea    eax,[edx+0x30]
c001d118:	0f b6 c0             	movzx  eax,al
c001d11b:	50                   	push   eax
c001d11c:	e8 e1 ee ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d121:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d127:	59                   	pop    ecx
c001d128:	5d                   	pop    ebp
c001d129:	6a 0f                	push   0xf
c001d12b:	6a 00                	push   0x0
c001d12d:	e8 e1 ee ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d132:	5a                   	pop    edx
c001d133:	59                   	pop    ecx
c001d134:	0f b6 c0             	movzx  eax,al
c001d137:	50                   	push   eax
c001d138:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d13d:	99                   	cdq    
c001d13e:	f7 ff                	idiv   edi
c001d140:	99                   	cdq    
c001d141:	f7 fb                	idiv   ebx
c001d143:	8d 42 30             	lea    eax,[edx+0x30]
c001d146:	0f b6 c0             	movzx  eax,al
c001d149:	50                   	push   eax
c001d14a:	e8 b3 ee ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d14f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d155:	5f                   	pop    edi
c001d156:	5d                   	pop    ebp
c001d157:	6a 0f                	push   0xf
c001d159:	6a 00                	push   0x0
c001d15b:	e8 b3 ee ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d160:	5a                   	pop    edx
c001d161:	59                   	pop    ecx
c001d162:	0f b6 c0             	movzx  eax,al
c001d165:	50                   	push   eax
c001d166:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d16b:	99                   	cdq    
c001d16c:	f7 fe                	idiv   esi
c001d16e:	99                   	cdq    
c001d16f:	f7 fb                	idiv   ebx
c001d171:	8d 42 30             	lea    eax,[edx+0x30]
c001d174:	0f b6 c0             	movzx  eax,al
c001d177:	50                   	push   eax
c001d178:	e8 85 ee ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d17d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d183:	5e                   	pop    esi
c001d184:	5f                   	pop    edi
c001d185:	6a 0f                	push   0xf
c001d187:	6a 00                	push   0x0
c001d189:	e8 85 ee ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d18e:	5d                   	pop    ebp
c001d18f:	5a                   	pop    edx
c001d190:	0f b6 c0             	movzx  eax,al
c001d193:	50                   	push   eax
c001d194:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d199:	99                   	cdq    
c001d19a:	f7 fb                	idiv   ebx
c001d19c:	99                   	cdq    
c001d19d:	f7 fb                	idiv   ebx
c001d19f:	8d 42 30             	lea    eax,[edx+0x30]
c001d1a2:	0f b6 c0             	movzx  eax,al
c001d1a5:	50                   	push   eax
c001d1a6:	e8 57 ee ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d1ab:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d1b1:	59                   	pop    ecx
c001d1b2:	5e                   	pop    esi
c001d1b3:	6a 0f                	push   0xf
c001d1b5:	6a 00                	push   0x0
c001d1b7:	e8 57 ee ff ff       	call   c001c013 <combineColours(unsigned char, unsigned char)>
c001d1bc:	5f                   	pop    edi
c001d1bd:	5d                   	pop    ebp
c001d1be:	0f b6 c0             	movzx  eax,al
c001d1c1:	50                   	push   eax
c001d1c2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d1c7:	99                   	cdq    
c001d1c8:	f7 fb                	idiv   ebx
c001d1ca:	83 c2 30             	add    edx,0x30
c001d1cd:	0f b6 d2             	movzx  edx,dl
c001d1d0:	52                   	push   edx
c001d1d1:	e8 2c ee ff ff       	call   c001c002 <combineCharAndColour(char, unsigned char)>
c001d1d6:	83 c4 10             	add    esp,0x10
c001d1d9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d1df:	31 c0                	xor    eax,eax
c001d1e1:	83 c4 1c             	add    esp,0x1c
c001d1e4:	5b                   	pop    ebx
c001d1e5:	5e                   	pop    esi
c001d1e6:	5f                   	pop    edi
c001d1e7:	5d                   	pop    ebp
c001d1e8:	c3                   	ret    
c001d1e9:	90                   	nop

c001d1ea <SATAPI::write(unsigned long long, int, void*)>:
c001d1ea:	b8 03 00 00 00       	mov    eax,0x3
c001d1ef:	c3                   	ret    

c001d1f0 <SATAPI::close(int, int, void*)>:
c001d1f0:	83 ec 0c             	sub    esp,0xc
c001d1f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1fd:	85 c0                	test   eax,eax
c001d1ff:	74 0c                	je     c001d20d <SATAPI::close(int, int, void*)+0x1d>
c001d201:	83 ec 0c             	sub    esp,0xc
c001d204:	8b 10                	mov    edx,DWORD PTR [eax]
c001d206:	50                   	push   eax
c001d207:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d20a:	83 c4 10             	add    esp,0x10
c001d20d:	31 c0                	xor    eax,eax
c001d20f:	83 c4 0c             	add    esp,0xc
c001d212:	c3                   	ret    
c001d213:	90                   	nop

c001d214 <SATAPI::SATAPI()>:
c001d214:	83 ec 0c             	sub    esp,0xc
c001d217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d21b:	83 ec 04             	sub    esp,0x4
c001d21e:	68 00 08 00 00       	push   0x800
c001d223:	68 14 1c 02 c0       	push   0xc0021c14
c001d228:	50                   	push   eax
c001d229:	e8 24 ef fe ff       	call   c000c152 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d22e:	83 c4 10             	add    esp,0x10
c001d231:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001d236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d23a:	89 10                	mov    DWORD PTR [eax],edx
c001d23c:	90                   	nop
c001d23d:	83 c4 0c             	add    esp,0xc
c001d240:	c3                   	ret    
c001d241:	90                   	nop

c001d242 <SATAPI::diskRemoved()>:
c001d242:	c3                   	ret    
c001d243:	90                   	nop

c001d244 <SATAPI::diskInserted()>:
c001d244:	83 ec 18             	sub    esp,0x18
c001d247:	68 20 1c 02 c0       	push   0xc0021c20
c001d24c:	e8 02 d7 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001d251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d255:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d25c:	83 c4 1c             	add    esp,0x1c
c001d25f:	c3                   	ret    

c001d260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d260:	55                   	push   ebp
c001d261:	57                   	push   edi
c001d262:	56                   	push   esi
c001d263:	53                   	push   ebx
c001d264:	83 ec 34             	sub    esp,0x34
c001d267:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d26b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d26f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d273:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d277:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d27d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d281:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d287:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d28b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d291:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d295:	83 c0 02             	add    eax,0x2
c001d298:	c1 e0 07             	shl    eax,0x7
c001d29b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d29f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2a7:	c1 e0 07             	shl    eax,0x7
c001d2aa:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d2ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2b2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d2bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d2c0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d2c6:	e8 ef e4 ff ff       	call   c001b7ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d2cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2cf:	83 c4 10             	add    esp,0x10
c001d2d2:	b8 01 00 00 00       	mov    eax,0x1
c001d2d7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d2dc:	0f 84 53 02 00 00    	je     c001d535 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2ee:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d2f4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d2fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2fe:	c1 e1 05             	shl    ecx,0x5
c001d301:	01 c8                	add    eax,ecx
c001d303:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d305:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d30b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d311:	89 08                	mov    DWORD PTR [eax],ecx
c001d313:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d319:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d31f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d325:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d328:	50                   	push   eax
c001d329:	68 90 00 00 00       	push   0x90
c001d32e:	6a 00                	push   0x0
c001d330:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d333:	53                   	push   ebx
c001d334:	e8 a7 31 fe ff       	call   c00004e0 <memset>
c001d339:	b9 0c 00 00 00       	mov    ecx,0xc
c001d33e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d342:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d344:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d34a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d34e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d354:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d358:	48                   	dec    eax
c001d359:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d35d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d362:	89 c1                	mov    ecx,eax
c001d364:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d36a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d36f:	09 c8                	or     eax,ecx
c001d371:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d377:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d37d:	83 c8 80             	or     eax,0xffffff80
c001d380:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d386:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d389:	25 00 7f 00 00       	and    eax,0x7f00
c001d38e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d392:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d397:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d39b:	66 89 03             	mov    WORD PTR [ebx],ax
c001d39e:	89 d0                	mov    eax,edx
c001d3a0:	c1 e8 10             	shr    eax,0x10
c001d3a3:	c1 ea 18             	shr    edx,0x18
c001d3a6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d3a9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d3ad:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d3b0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d3b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3b7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d3ba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d3be:	83 c4 10             	add    esp,0x10
c001d3c1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d3c5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3c9:	31 c0                	xor    eax,eax
c001d3cb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d3d1:	80 e1 88             	and    cl,0x88
c001d3d4:	74 0a                	je     c001d3e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d3d6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3db:	74 0a                	je     c001d3e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d3dd:	40                   	inc    eax
c001d3de:	eb eb                	jmp    c001d3cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d3e0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3e5:	75 43                	jne    c001d42a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d3e7:	83 ec 0c             	sub    esp,0xc
c001d3ea:	68 38 1c 02 c0       	push   0xc0021c38
c001d3ef:	e8 5f d5 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001d3f4:	58                   	pop    eax
c001d3f5:	5a                   	pop    edx
c001d3f6:	68 4d 1c 02 c0       	push   0xc0021c4d
c001d3fb:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d401:	e8 7e b6 fe ff       	call   c0008a84 <VgaText::puts(char const*)>
c001d406:	59                   	pop    ecx
c001d407:	5b                   	pop    ebx
c001d408:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d40c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d412:	e8 3d e4 ff ff       	call   c001b854 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d417:	5e                   	pop    esi
c001d418:	5f                   	pop    edi
c001d419:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d41d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d423:	e8 0c e4 ff ff       	call   c001b834 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d428:	eb 48                	jmp    c001d472 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d42a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d42e:	be 01 00 00 00       	mov    esi,0x1
c001d433:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d437:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d43c:	c1 e7 07             	shl    edi,0x7
c001d43f:	d3 e6                	shl    esi,cl
c001d441:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d445:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d44b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d451:	85 c6                	test   esi,eax
c001d453:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d459:	0f 84 a3 00 00 00    	je     c001d502 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d45f:	0f ba e0 1e          	bt     eax,0x1e
c001d463:	73 1a                	jae    c001d47f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d465:	83 ec 0c             	sub    esp,0xc
c001d468:	68 5f 1c 02 c0       	push   0xc0021c5f
c001d46d:	e8 e1 d4 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001d472:	83 c4 10             	add    esp,0x10
c001d475:	b8 01 00 00 00       	mov    eax,0x1
c001d47a:	e9 b6 00 00 00       	jmp    c001d535 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d47f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d485:	83 f8 0d             	cmp    eax,0xd
c001d488:	77 0a                	ja     c001d494 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d48a:	83 ec 0c             	sub    esp,0xc
c001d48d:	68 c8 00 00 00       	push   0xc8
c001d492:	eb 28                	jmp    c001d4bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d494:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d49a:	83 f8 0d             	cmp    eax,0xd
c001d49d:	77 0a                	ja     c001d4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	68 58 02 00 00       	push   0x258
c001d4a7:	eb 13                	jmp    c001d4bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d4a9:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d4af:	83 f8 06             	cmp    eax,0x6
c001d4b2:	77 10                	ja     c001d4c4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d4b4:	83 ec 0c             	sub    esp,0xc
c001d4b7:	68 dc 05 00 00       	push   0x5dc
c001d4bc:	e8 9b 7e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d4c8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d4cb:	75 06                	jne    c001d4d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d4cd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d4d1:	74 15                	je     c001d4e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4d3:	83 fb 06             	cmp    ebx,0x6
c001d4d6:	77 10                	ja     c001d4e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4d8:	83 ec 0c             	sub    esp,0xc
c001d4db:	68 c4 09 00 00       	push   0x9c4
c001d4e0:	e8 77 7e ff ff       	call   c001535c <milliTenthSleep(unsigned int)>
c001d4e5:	83 c4 10             	add    esp,0x10
c001d4e8:	43                   	inc    ebx
c001d4e9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d4ef:	0f 85 56 ff ff ff    	jne    c001d44b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	68 72 1c 02 c0       	push   0xc0021c72
c001d4fd:	e9 6b ff ff ff       	jmp    c001d46d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d502:	0f ba e0 1e          	bt     eax,0x1e
c001d506:	73 0d                	jae    c001d515 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	68 86 1c 02 c0       	push   0xc0021c86
c001d510:	e9 58 ff ff ff       	jmp    c001d46d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d515:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d51a:	74 17                	je     c001d533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d51c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d521:	74 10                	je     c001d533 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d523:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d529:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d52d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d533:	31 c0                	xor    eax,eax
c001d535:	83 c4 2c             	add    esp,0x2c
c001d538:	5b                   	pop    ebx
c001d539:	5e                   	pop    esi
c001d53a:	5f                   	pop    edi
c001d53b:	5d                   	pop    ebp
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <SATAPI::eject()>:
c001d53e:	57                   	push   edi
c001d53f:	b9 03 00 00 00       	mov    ecx,0x3
c001d544:	83 ec 18             	sub    esp,0x18
c001d547:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d54b:	fc                   	cld    
c001d54c:	31 c0                	xor    eax,eax
c001d54e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d550:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d555:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d55a:	50                   	push   eax
c001d55b:	6a 00                	push   0x0
c001d55d:	6a 00                	push   0x0
c001d55f:	6a 00                	push   0x0
c001d561:	6a 00                	push   0x0
c001d563:	6a 02                	push   0x2
c001d565:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d569:	50                   	push   eax
c001d56a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d56e:	e8 ed fc ff ff       	call   c001d260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d573:	83 c4 38             	add    esp,0x38
c001d576:	31 c0                	xor    eax,eax
c001d578:	5f                   	pop    edi
c001d579:	c3                   	ret    

c001d57a <SATAPI::detectMedia()>:
c001d57a:	53                   	push   ebx
c001d57b:	83 ec 14             	sub    esp,0x14
c001d57e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d582:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d588:	e8 53 05 ff ff       	call   c000dae0 <VCache::writeWriteBuffer()>
c001d58d:	59                   	pop    ecx
c001d58e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d594:	e8 37 05 ff ff       	call   c000dad0 <VCache::invalidateReadBuffer()>
c001d599:	c7 04 24 9b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c9b
c001d5a0:	e8 ae d3 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	31 c0                	xor    eax,eax
c001d5aa:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d5b1:	85 d2                	test   edx,edx
c001d5b3:	74 0f                	je     c001d5c4 <SATAPI::detectMedia()+0x4a>
c001d5b5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d5bb:	75 07                	jne    c001d5c4 <SATAPI::detectMedia()+0x4a>
c001d5bd:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d5c4:	40                   	inc    eax
c001d5c5:	83 f8 1a             	cmp    eax,0x1a
c001d5c8:	75 e0                	jne    c001d5aa <SATAPI::detectMedia()+0x30>
c001d5ca:	83 c4 08             	add    esp,0x8
c001d5cd:	5b                   	pop    ebx
c001d5ce:	c3                   	ret    
c001d5cf:	90                   	nop

c001d5d0 <SATAPI::open(int, int, void*)>:
c001d5d0:	56                   	push   esi
c001d5d1:	53                   	push   ebx
c001d5d2:	51                   	push   ecx
c001d5d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5e5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5eb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5f5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5ff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d609:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d610:	e8 7c a7 fe ff       	call   c0007d91 <Phys::allocatePage()>
c001d615:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d61b:	89 c6                	mov    esi,eax
c001d61d:	e8 6f a7 fe ff       	call   c0007d91 <Phys::allocatePage()>
c001d622:	81 c6 00 10 00 00    	add    esi,0x1000
c001d628:	39 c6                	cmp    esi,eax
c001d62a:	74 10                	je     c001d63c <SATAPI::open(int, int, void*)+0x6c>
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	68 b0 1c 02 c0       	push   0xc0021cb0
c001d634:	e8 06 32 ff ff       	call   c001083f <KePanic(char const*)>
c001d639:	83 c4 10             	add    esp,0x10
c001d63c:	83 ec 0c             	sub    esp,0xc
c001d63f:	6a 02                	push   0x2
c001d641:	e8 ab bf fe ff       	call   c00095f1 <Virt::allocateKernelVirtualPages(int)>
c001d646:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d64c:	6a 03                	push   0x3
c001d64e:	50                   	push   eax
c001d64f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d655:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d65b:	e8 7a c6 fe ff       	call   c0009cda <VAS::mapPage(unsigned long, unsigned long, int)>
c001d660:	83 c4 14             	add    esp,0x14
c001d663:	68 78 01 00 00       	push   0x178
c001d668:	e8 1f a4 fe ff       	call   c0007a8c <malloc>
c001d66d:	83 c4 0c             	add    esp,0xc
c001d670:	89 c6                	mov    esi,eax
c001d672:	6a 00                	push   0x0
c001d674:	68 ff ff ff 7f       	push   0x7fffffff
c001d679:	6a 00                	push   0x0
c001d67b:	6a 00                	push   0x0
c001d67d:	53                   	push   ebx
c001d67e:	68 c6 1c 02 c0       	push   0xc0021cc6
c001d683:	50                   	push   eax
c001d684:	e8 b1 f8 fe ff       	call   c000cf3a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d689:	83 c4 14             	add    esp,0x14
c001d68c:	56                   	push   esi
c001d68d:	e8 68 f9 fe ff       	call   c000cffa <LogicalDisk::assignDriveLetter()>
c001d692:	5a                   	pop    edx
c001d693:	59                   	pop    ecx
c001d694:	0f be c0             	movsx  eax,al
c001d697:	50                   	push   eax
c001d698:	68 18 1b 02 c0       	push   0xc0021b18
c001d69d:	e8 b1 d2 fe ff       	call   c000a953 <Dbg::kprintf(char const*, ...)>
c001d6a2:	58                   	pop    eax
c001d6a3:	5a                   	pop    edx
c001d6a4:	56                   	push   esi
c001d6a5:	53                   	push   ebx
c001d6a6:	e8 db e6 fe ff       	call   c000bd86 <Device::addChild(Device*)>
c001d6ab:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d6b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6b4:	e8 01 eb fe ff       	call   c000c1ba <PhysicalDisk::startCache()>
c001d6b9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d6c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6c3:	e8 b2 fe ff ff       	call   c001d57a <SATAPI::detectMedia()>
c001d6c8:	83 c4 14             	add    esp,0x14
c001d6cb:	31 c0                	xor    eax,eax
c001d6cd:	5b                   	pop    ebx
c001d6ce:	5e                   	pop    esi
c001d6cf:	c3                   	ret    

c001d6d0 <SATAPI::read(unsigned long long, int, void*)>:
c001d6d0:	57                   	push   edi
c001d6d1:	56                   	push   esi
c001d6d2:	53                   	push   ebx
c001d6d3:	83 ec 30             	sub    esp,0x30
c001d6d6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d6de:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d6e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6ee:	83 fe 04             	cmp    esi,0x4
c001d6f1:	7e 10                	jle    c001d703 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	68 d4 1c 02 c0       	push   0xc0021cd4
c001d6fb:	e8 3f 31 ff ff       	call   c001083f <KePanic(char const*)>
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d709:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d70f:	51                   	push   ecx
c001d710:	50                   	push   eax
c001d711:	83 c0 02             	add    eax,0x2
c001d714:	c1 e0 07             	shl    eax,0x7
c001d717:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d71d:	50                   	push   eax
c001d71e:	52                   	push   edx
c001d71f:	e8 5a e1 ff ff       	call   c001b87e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d724:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d728:	b9 03 00 00 00       	mov    ecx,0x3
c001d72d:	fc                   	cld    
c001d72e:	31 c0                	xor    eax,eax
c001d730:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d732:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d737:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d73c:	83 c4 0c             	add    esp,0xc
c001d73f:	6a 00                	push   0x0
c001d741:	6a 00                	push   0x0
c001d743:	6a 00                	push   0x0
c001d745:	6a 00                	push   0x0
c001d747:	6a 02                	push   0x2
c001d749:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d74d:	50                   	push   eax
c001d74e:	53                   	push   ebx
c001d74f:	e8 0c fb ff ff       	call   c001d260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d754:	83 c4 20             	add    esp,0x20
c001d757:	85 c0                	test   eax,eax
c001d759:	75 44                	jne    c001d79f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d75b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d75f:	b9 03 00 00 00       	mov    ecx,0x3
c001d764:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d76a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d76f:	0f c8                	bswap  eax
c001d771:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d775:	89 f0                	mov    eax,esi
c001d777:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d77b:	50                   	push   eax
c001d77c:	56                   	push   esi
c001d77d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d789:	c1 e6 0b             	shl    esi,0xb
c001d78c:	56                   	push   esi
c001d78d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d791:	50                   	push   eax
c001d792:	53                   	push   ebx
c001d793:	e8 c8 fa ff ff       	call   c001d260 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d798:	83 c4 20             	add    esp,0x20
c001d79b:	85 c0                	test   eax,eax
c001d79d:	74 14                	je     c001d7b3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d79f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7a3:	83 ec 0c             	sub    esp,0xc
c001d7a6:	53                   	push   ebx
c001d7a7:	e8 ce fd ff ff       	call   c001d57a <SATAPI::detectMedia()>
c001d7ac:	83 c4 10             	add    esp,0x10
c001d7af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7b3:	83 c4 30             	add    esp,0x30
c001d7b6:	5b                   	pop    ebx
c001d7b7:	5e                   	pop    esi
c001d7b8:	5f                   	pop    edi
c001d7b9:	c3                   	ret    

c001d7ba <IOAPIC::close(int, int, void*)>:
c001d7ba:	b8 00 00 00 00       	mov    eax,0x0
c001d7bf:	c3                   	ret    

c001d7c0 <apicGetBase()>:
c001d7c0:	55                   	push   ebp
c001d7c1:	89 e5                	mov    ebp,esp
c001d7c3:	83 ec 18             	sub    esp,0x18
c001d7c6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7cb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d7d1:	83 e0 08             	and    eax,0x8
c001d7d4:	0f b6 c0             	movzx  eax,al
c001d7d7:	85 c0                	test   eax,eax
c001d7d9:	75 07                	jne    c001d7e2 <apicGetBase()+0x22>
c001d7db:	b8 00 00 00 00       	mov    eax,0x0
c001d7e0:	eb 21                	jmp    c001d803 <apicGetBase()+0x43>
c001d7e2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7e7:	83 ec 08             	sub    esp,0x8
c001d7ea:	6a 1b                	push   0x1b
c001d7ec:	50                   	push   eax
c001d7ed:	e8 bc 98 fe ff       	call   c00070ae <Computer::rdmsr(unsigned int)>
c001d7f2:	83 c4 10             	add    esp,0x10
c001d7f5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d7f8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d7fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7fe:	25 00 00 ff ff       	and    eax,0xffff0000
c001d803:	c9                   	leave  
c001d804:	c3                   	ret    
c001d805:	90                   	nop

c001d806 <IOAPIC::IOAPIC()>:
c001d806:	83 ec 0c             	sub    esp,0xc
c001d809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d80d:	83 ec 08             	sub    esp,0x8
c001d810:	68 38 1d 02 c0       	push   0xc0021d38
c001d815:	50                   	push   eax
c001d816:	e8 03 e7 fe ff       	call   c000bf1e <Device::Device(char const*)>
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c001d823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d827:	89 10                	mov    DWORD PTR [eax],edx
c001d829:	90                   	nop
c001d82a:	83 c4 0c             	add    esp,0xc
c001d82d:	c3                   	ret    

c001d82e <apicOpen()>:
c001d82e:	55                   	push   ebp
c001d82f:	89 e5                	mov    ebp,esp
c001d831:	53                   	push   ebx
c001d832:	83 ec 34             	sub    esp,0x34
c001d835:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d83a:	83 f0 01             	xor    eax,0x1
c001d83d:	0f b6 c0             	movzx  eax,al
c001d840:	85 c0                	test   eax,eax
c001d842:	0f 84 a3 00 00 00    	je     c001d8eb <apicOpen()+0xbd>
c001d848:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d84c:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d851:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d855:	0f b6 c0             	movzx  eax,al
c001d858:	39 c2                	cmp    edx,eax
c001d85a:	0f 83 84 00 00 00    	jae    c001d8e4 <apicOpen()+0xb6>
c001d860:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d867:	83 ec 0c             	sub    esp,0xc
c001d86a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d86d:	e8 1a a2 fe ff       	call   c0007a8c <malloc>
c001d872:	83 c4 10             	add    esp,0x10
c001d875:	89 c3                	mov    ebx,eax
c001d877:	83 ec 0c             	sub    esp,0xc
c001d87a:	53                   	push   ebx
c001d87b:	e8 86 ff ff ff       	call   c001d806 <IOAPIC::IOAPIC()>
c001d880:	83 c4 10             	add    esp,0x10
c001d883:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d886:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d88a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d88d:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d894:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d899:	83 c0 01             	add    eax,0x1
c001d89c:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d8a1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d8a6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d8ac:	83 ec 08             	sub    esp,0x8
c001d8af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8b2:	50                   	push   eax
c001d8b3:	e8 ce e4 fe ff       	call   c000bd86 <Device::addChild(Device*)>
c001d8b8:	83 c4 10             	add    esp,0x10
c001d8bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d8be:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8c0:	83 c0 08             	add    eax,0x8
c001d8c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8c5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d8c9:	6a 00                	push   0x0
c001d8cb:	6a 00                	push   0x0
c001d8cd:	52                   	push   edx
c001d8ce:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d8d1:	ff d0                	call   eax
c001d8d3:	83 c4 10             	add    esp,0x10
c001d8d6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d8d9:	83 c0 01             	add    eax,0x1
c001d8dc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8df:	e9 68 ff ff ff       	jmp    c001d84c <apicOpen()+0x1e>
c001d8e4:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d8eb:	e8 d0 fe ff ff       	call   c001d7c0 <apicGetBase()>
c001d8f0:	05 f0 00 00 00       	add    eax,0xf0
c001d8f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8fd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d900:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d907:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d90e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d911:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d914:	89 10                	mov    DWORD PTR [eax],edx
c001d916:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d91d:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d922:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d925:	7d 7c                	jge    c001d9a3 <apicOpen()+0x175>
c001d927:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d92a:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d931:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d934:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d937:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d93e:	c1 e8 08             	shr    eax,0x8
c001d941:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d945:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d948:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d94f:	c1 e8 18             	shr    eax,0x18
c001d952:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d955:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d959:	3d ff 00 00 00       	cmp    eax,0xff
c001d95e:	75 3a                	jne    c001d99a <apicOpen()+0x16c>
c001d960:	e8 5b fe ff ff       	call   c001d7c0 <apicGetBase()>
c001d965:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d969:	83 fa 01             	cmp    edx,0x1
c001d96c:	75 07                	jne    c001d975 <apicOpen()+0x147>
c001d96e:	ba 60 03 00 00       	mov    edx,0x360
c001d973:	eb 05                	jmp    c001d97a <apicOpen()+0x14c>
c001d975:	ba 50 03 00 00       	mov    edx,0x350
c001d97a:	01 d0                	add    eax,edx
c001d97c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d97f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d982:	8b 00                	mov    eax,DWORD PTR [eax]
c001d984:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d987:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d98e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d992:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d995:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d998:	89 10                	mov    DWORD PTR [eax],edx
c001d99a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d99e:	e9 7a ff ff ff       	jmp    c001d91d <apicOpen()+0xef>
c001d9a3:	90                   	nop
c001d9a4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d9a7:	c9                   	leave  
c001d9a8:	c3                   	ret    
c001d9a9:	90                   	nop

c001d9aa <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d9aa:	55                   	push   ebp
c001d9ab:	89 e5                	mov    ebp,esp
c001d9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9b6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9b9:	72 1d                	jb     c001d9d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9be:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9c7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d9cd:	01 d0                	add    eax,edx
c001d9cf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d9d2:	73 04                	jae    c001d9d8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d9d4:	b0 01                	mov    al,0x1
c001d9d6:	eb 02                	jmp    c001d9da <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d9d8:	b0 00                	mov    al,0x0
c001d9da:	5d                   	pop    ebp
c001d9db:	c3                   	ret    

c001d9dc <IOAPIC::read(int)>:
c001d9dc:	55                   	push   ebp
c001d9dd:	89 e5                	mov    ebp,esp
c001d9df:	83 ec 10             	sub    esp,0x10
c001d9e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9f1:	0f b6 d0             	movzx  edx,al
c001d9f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9f7:	89 10                	mov    DWORD PTR [eax],edx
c001d9f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9fc:	83 c0 10             	add    eax,0x10
c001d9ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001da01:	c9                   	leave  
c001da02:	c3                   	ret    
c001da03:	90                   	nop

c001da04 <IOAPIC::open(int, int, void*)>:
c001da04:	55                   	push   ebp
c001da05:	89 e5                	mov    ebp,esp
c001da07:	57                   	push   edi
c001da08:	56                   	push   esi
c001da09:	53                   	push   ebx
c001da0a:	83 ec 04             	sub    esp,0x4
c001da0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001da13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001da19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da22:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001da29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001da32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da35:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da3b:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da45:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da4e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da57:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da5d:	0f b6 f0             	movzx  esi,al
c001da60:	89 d0                	mov    eax,edx
c001da62:	ba 00 00 00 00       	mov    edx,0x0
c001da67:	89 c7                	mov    edi,eax
c001da69:	83 e7 ff             	and    edi,0xffffffff
c001da6c:	89 f9                	mov    ecx,edi
c001da6e:	0f b6 da             	movzx  ebx,dl
c001da71:	89 c8                	mov    eax,ecx
c001da73:	89 da                	mov    edx,ebx
c001da75:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da78:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da7b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da7f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da83:	83 e0 00             	and    eax,0x0
c001da86:	09 d0                	or     eax,edx
c001da88:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da8f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da95:	8d 50 01             	lea    edx,[eax+0x1]
c001da98:	88 d1                	mov    cl,dl
c001da9a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da9d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001daa3:	0f b6 d0             	movzx  edx,al
c001daa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daa9:	83 c2 08             	add    edx,0x8
c001daac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001dab0:	0f b6 c9             	movzx  ecx,cl
c001dab3:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001dab9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001dabd:	6a 01                	push   0x1
c001dabf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dac2:	e8 15 ff ff ff       	call   c001d9dc <IOAPIC::read(int)>
c001dac7:	83 c4 08             	add    esp,0x8
c001daca:	c1 f8 10             	sar    eax,0x10
c001dacd:	0f b6 c0             	movzx  eax,al
c001dad0:	8d 50 01             	lea    edx,[eax+0x1]
c001dad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dad6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001dadc:	b8 00 00 00 00       	mov    eax,0x0
c001dae1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001dae4:	5b                   	pop    ebx
c001dae5:	5e                   	pop    esi
c001dae6:	5f                   	pop    edi
c001dae7:	5d                   	pop    ebp
c001dae8:	c3                   	ret    
c001dae9:	90                   	nop

c001daea <IOAPIC::write(int, int)>:
c001daea:	55                   	push   ebp
c001daeb:	89 e5                	mov    ebp,esp
c001daed:	83 ec 10             	sub    esp,0x10
c001daf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001daf3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001daf9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dafc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001daff:	0f b6 d0             	movzx  edx,al
c001db02:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db05:	89 10                	mov    DWORD PTR [eax],edx
c001db07:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001db0a:	8d 50 10             	lea    edx,[eax+0x10]
c001db0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db10:	89 02                	mov    DWORD PTR [edx],eax
c001db12:	90                   	nop
c001db13:	c9                   	leave  
c001db14:	c3                   	ret    
c001db15:	90                   	nop

c001db16 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001db16:	55                   	push   ebp
c001db17:	89 e5                	mov    ebp,esp
c001db19:	53                   	push   ebx
c001db1a:	83 ec 2c             	sub    esp,0x2c
c001db1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db20:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001db23:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001db26:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001db29:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001db2c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001db2f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001db32:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001db35:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db38:	88 d8                	mov    al,bl
c001db3a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db3d:	88 c8                	mov    al,cl
c001db3f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db42:	88 d0                	mov    al,dl
c001db44:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db47:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db4b:	83 c0 08             	add    eax,0x8
c001db4e:	d1 e0                	shl    eax,1
c001db50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db53:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db57:	83 c0 08             	add    eax,0x8
c001db5a:	d1 e0                	shl    eax,1
c001db5c:	83 c0 01             	add    eax,0x1
c001db5f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db65:	50                   	push   eax
c001db66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db69:	e8 6e fe ff ff       	call   c001d9dc <IOAPIC::read(int)>
c001db6e:	83 c4 08             	add    esp,0x8
c001db71:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db74:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db7b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db7e:	c1 e0 18             	shl    eax,0x18
c001db81:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db84:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db87:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db8a:	52                   	push   edx
c001db8b:	50                   	push   eax
c001db8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db8f:	e8 56 ff ff ff       	call   c001daea <IOAPIC::write(int, int)>
c001db94:	83 c4 0c             	add    esp,0xc
c001db97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db9a:	50                   	push   eax
c001db9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db9e:	e8 39 fe ff ff       	call   c001d9dc <IOAPIC::read(int)>
c001dba3:	83 c4 08             	add    esp,0x8
c001dba6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dba9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001dbb0:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001dbb7:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001dbbe:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001dbc2:	85 c0                	test   eax,eax
c001dbc4:	74 09                	je     c001dbcf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001dbc6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001dbcd:	eb 07                	jmp    c001dbd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001dbcf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001dbd6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dbda:	85 c0                	test   eax,eax
c001dbdc:	74 09                	je     c001dbe7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dbde:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dbe5:	eb 07                	jmp    c001dbee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dbe7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dbee:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dbf5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dbf9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dbfc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dbff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dc02:	52                   	push   edx
c001dc03:	50                   	push   eax
c001dc04:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc07:	e8 de fe ff ff       	call   c001daea <IOAPIC::write(int, int)>
c001dc0c:	83 c4 0c             	add    esp,0xc
c001dc0f:	90                   	nop
c001dc10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dc13:	c9                   	leave  
c001dc14:	c3                   	ret    
c001dc15:	66 90                	xchg   ax,ax
c001dc17:	90                   	nop

c001dc18 <APICTimer::close(int, int, void*)>:
c001dc18:	b8 00 00 00 00       	mov    eax,0x0
c001dc1d:	c3                   	ret    
c001dc1e:	66 90                	xchg   ax,ax

c001dc20 <apicTimerHandler(regs*, void*)>:
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc27:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc29:	b8 10 27 00 00       	mov    eax,0x2710
c001dc2e:	ba 00 00 00 00       	mov    edx,0x0
c001dc33:	f7 f1                	div    ecx
c001dc35:	83 ec 0c             	sub    esp,0xc
c001dc38:	50                   	push   eax
c001dc39:	e8 ba fb fe ff       	call   c000d7f8 <timerHandler(unsigned int)>
c001dc3e:	83 c4 10             	add    esp,0x10
c001dc41:	90                   	nop
c001dc42:	83 c4 0c             	add    esp,0xc
c001dc45:	c3                   	ret    
c001dc46:	66 90                	xchg   ax,ax

c001dc48 <APICTimer::open(int, int, void*)>:
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4f:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc51:	83 c0 24             	add    eax,0x24
c001dc54:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc56:	83 ec 08             	sub    esp,0x8
c001dc59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc61:	ff d0                	call   eax
c001dc63:	83 c4 10             	add    esp,0x10
c001dc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc6e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc7c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc86:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc8c:	83 ec 0c             	sub    esp,0xc
c001dc8f:	51                   	push   ecx
c001dc90:	6a 01                	push   0x1
c001dc92:	68 20 dc 01 c0       	push   0xc001dc20
c001dc97:	52                   	push   edx
c001dc98:	50                   	push   eax
c001dc99:	e8 94 e0 fe ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc9e:	83 c4 20             	add    esp,0x20
c001dca1:	89 c2                	mov    edx,eax
c001dca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dcad:	b8 00 00 00 00       	mov    eax,0x0
c001dcb2:	83 c4 0c             	add    esp,0xc
c001dcb5:	c3                   	ret    
c001dcb6:	66 90                	xchg   ax,ax

c001dcb8 <APICTimer::write(int)>:
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	68 6c 1d 02 c0       	push   0xc0021d6c
c001dcc3:	e8 77 2b ff ff       	call   c001083f <KePanic(char const*)>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dcd3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dcd9:	90                   	nop
c001dcda:	83 c4 0c             	add    esp,0xc
c001dcdd:	c3                   	ret    
c001dcde:	66 90                	xchg   ax,ax

c001dce0 <APICTimer::APICTimer()>:
c001dce0:	83 ec 0c             	sub    esp,0xc
c001dce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce7:	83 ec 08             	sub    esp,0x8
c001dcea:	68 7c 1d 02 c0       	push   0xc0021d7c
c001dcef:	50                   	push   eax
c001dcf0:	e8 37 fa fe ff       	call   c000d72c <Timer::Timer(char const*)>
c001dcf5:	83 c4 10             	add    esp,0x10
c001dcf8:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c001dcfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd01:	89 10                	mov    DWORD PTR [eax],edx
c001dd03:	90                   	nop
c001dd04:	83 c4 0c             	add    esp,0xc
c001dd07:	c3                   	ret    

c001dd08 <PIT::write(int)>:
c001dd08:	83 ec 10             	sub    esp,0x10
c001dd0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dd13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dd19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd1d:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dd22:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dd27:	89 c2                	mov    edx,eax
c001dd29:	c1 fa 1f             	sar    edx,0x1f
c001dd2c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dd30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd34:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd3b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd49:	ee                   	out    dx,al
c001dd4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd4e:	0f b6 c0             	movzx  eax,al
c001dd51:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd58:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd5c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd60:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd65:	ee                   	out    dx,al
c001dd66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd6a:	c1 f8 08             	sar    eax,0x8
c001dd6d:	0f b6 c0             	movzx  eax,al
c001dd70:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd77:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd7b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd7f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd84:	ee                   	out    dx,al
c001dd85:	90                   	nop
c001dd86:	83 c4 10             	add    esp,0x10
c001dd89:	c3                   	ret    
c001dd8a:	66 90                	xchg   ax,ax

c001dd8c <pitHandler(regs*, void*)>:
c001dd8c:	83 ec 0c             	sub    esp,0xc
c001dd8f:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd95:	b8 10 27 00 00       	mov    eax,0x2710
c001dd9a:	89 c2                	mov    edx,eax
c001dd9c:	c1 fa 1f             	sar    edx,0x1f
c001dd9f:	f7 f9                	idiv   ecx
c001dda1:	83 ec 0c             	sub    esp,0xc
c001dda4:	50                   	push   eax
c001dda5:	e8 4e fa fe ff       	call   c000d7f8 <timerHandler(unsigned int)>
c001ddaa:	83 c4 10             	add    esp,0x10
c001ddad:	90                   	nop
c001ddae:	83 c4 0c             	add    esp,0xc
c001ddb1:	c3                   	ret    
c001ddb2:	66 90                	xchg   ax,ax

c001ddb4 <PIT::open(int, int, void*)>:
c001ddb4:	83 ec 0c             	sub    esp,0xc
c001ddb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddbd:	83 c0 24             	add    eax,0x24
c001ddc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddc2:	83 ec 08             	sub    esp,0x8
c001ddc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ddcd:	ff d0                	call   eax
c001ddcf:	83 c4 10             	add    esp,0x10
c001ddd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd6:	83 ec 0c             	sub    esp,0xc
c001ddd9:	6a 00                	push   0x0
c001dddb:	6a 01                	push   0x1
c001dddd:	68 8c dd 01 c0       	push   0xc001dd8c
c001dde2:	6a 00                	push   0x0
c001dde4:	50                   	push   eax
c001dde5:	e8 48 df fe ff       	call   c000bd32 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddea:	83 c4 20             	add    esp,0x20
c001dded:	89 c2                	mov    edx,eax
c001ddef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddf9:	b8 00 00 00 00       	mov    eax,0x0
c001ddfe:	83 c4 0c             	add    esp,0xc
c001de01:	c3                   	ret    
c001de02:	66 90                	xchg   ax,ax

c001de04 <PIT::close(int, int, void*)>:
c001de04:	83 ec 0c             	sub    esp,0xc
c001de07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001de15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de19:	6a 01                	push   0x1
c001de1b:	68 8c dd 01 c0       	push   0xc001dd8c
c001de20:	6a 00                	push   0x0
c001de22:	50                   	push   eax
c001de23:	e8 40 df fe ff       	call   c000bd68 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001de28:	83 c4 10             	add    esp,0x10
c001de2b:	b8 00 00 00 00       	mov    eax,0x0
c001de30:	83 c4 0c             	add    esp,0xc
c001de33:	c3                   	ret    

c001de34 <PIT::PIT()>:
c001de34:	83 ec 0c             	sub    esp,0xc
c001de37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3b:	83 ec 08             	sub    esp,0x8
c001de3e:	68 b8 1d 02 c0       	push   0xc0021db8
c001de43:	50                   	push   eax
c001de44:	e8 e3 f8 fe ff       	call   c000d72c <Timer::Timer(char const*)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c001de51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de55:	89 10                	mov    DWORD PTR [eax],edx
c001de57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de61:	0f b6 d0             	movzx  edx,al
c001de64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de68:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de79:	0f b6 d0             	movzx  edx,al
c001de7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de80:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de8f:	8d 50 01             	lea    edx,[eax+0x1]
c001de92:	88 d1                	mov    cl,dl
c001de94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de98:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de9e:	0f b6 d0             	movzx  edx,al
c001dea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dea5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dea9:	83 e1 3f             	and    ecx,0x3f
c001deac:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001deb0:	90                   	nop
c001deb1:	83 c4 0c             	add    esp,0xc
c001deb4:	c3                   	ret    
c001deb5:	66 90                	xchg   ax,ax
c001deb7:	66 90                	xchg   ax,ax
c001deb9:	66 90                	xchg   ax,ax
c001debb:	66 90                	xchg   ax,ax
c001debd:	66 90                	xchg   ax,ax
c001debf:	90                   	nop

c001dec0 <avxDetect>:
c001dec0:	b8 01 00 00 00       	mov    eax,0x1
c001dec5:	0f a2                	cpuid  
c001dec7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001decd:	74 15                	je     c001dee4 <avxDetect.noAVX>
c001decf:	b8 01 00 00 00       	mov    eax,0x1
c001ded4:	0f a2                	cpuid  
c001ded6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dedc:	74 06                	je     c001dee4 <avxDetect.noAVX>
c001dede:	b8 01 00 00 00       	mov    eax,0x1
c001dee3:	c3                   	ret    

c001dee4 <avxDetect.noAVX>:
c001dee4:	b8 00 00 00 00       	mov    eax,0x0
c001dee9:	c3                   	ret    

c001deea <avxSave>:
c001deea:	53                   	push   ebx
c001deeb:	52                   	push   edx
c001deec:	31 c0                	xor    eax,eax
c001deee:	48                   	dec    eax
c001deef:	89 c2                	mov    edx,eax
c001def1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001def5:	0f ae 23             	xsave  [ebx]
c001def8:	5a                   	pop    edx
c001def9:	5b                   	pop    ebx
c001defa:	c3                   	ret    

c001defb <avxLoad>:
c001defb:	53                   	push   ebx
c001defc:	52                   	push   edx
c001defd:	31 c0                	xor    eax,eax
c001deff:	48                   	dec    eax
c001df00:	89 c2                	mov    edx,eax
c001df02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df06:	0f ae 2b             	xrstor [ebx]
c001df09:	5a                   	pop    edx
c001df0a:	5b                   	pop    ebx
c001df0b:	c3                   	ret    

c001df0c <avxInit>:
c001df0c:	e8 67 03 00 00       	call   c001e278 <sseInit>
c001df11:	50                   	push   eax
c001df12:	51                   	push   ecx
c001df13:	0f 20 e0             	mov    eax,cr4
c001df16:	0d 00 00 04 00       	or     eax,0x40000
c001df1b:	0f 22 e0             	mov    cr4,eax
c001df1e:	31 c9                	xor    ecx,ecx
c001df20:	0f 01 d0             	xgetbv 
c001df23:	0d 07 00 00 00       	or     eax,0x7
c001df28:	0f 01 d1             	xsetbv 
c001df2b:	59                   	pop    ecx
c001df2c:	58                   	pop    eax
c001df2d:	c3                   	ret    

c001df2e <avxClose>:
c001df2e:	c3                   	ret    

c001df2f <wouldSheSayYes>:
c001df2f:	c3                   	ret    
c001df30:	49                   	dec    ecx
c001df31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001df35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001df39:	75 20                	jne    c001df5b <isr0+0xb>
c001df3b:	4e                   	dec    esi
c001df3c:	79 61                	jns    c001df9f <isr7+0x3>
c001df3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df43:	66 90                	xchg   ax,ax
c001df45:	66 90                	xchg   ax,ax
c001df47:	66 90                	xchg   ax,ax
c001df49:	66 90                	xchg   ax,ax
c001df4b:	66 90                	xchg   ax,ax
c001df4d:	66 90                	xchg   ax,ax
c001df4f:	90                   	nop

c001df50 <isr0>:
c001df50:	fa                   	cli    
c001df51:	68 00 00 00 00       	push   0x0
c001df56:	68 00 00 00 00       	push   0x0
c001df5b:	e9 56 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df60 <isr1>:
c001df60:	fa                   	cli    
c001df61:	6a 00                	push   0x0
c001df63:	6a 01                	push   0x1
c001df65:	e9 4c 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df6a <isr2>:
c001df6a:	fa                   	cli    
c001df6b:	6a 00                	push   0x0
c001df6d:	6a 02                	push   0x2
c001df6f:	e9 42 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df74 <isr3>:
c001df74:	fa                   	cli    
c001df75:	6a 00                	push   0x0
c001df77:	6a 03                	push   0x3
c001df79:	e9 38 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df7e <isr4>:
c001df7e:	fa                   	cli    
c001df7f:	6a 00                	push   0x0
c001df81:	6a 04                	push   0x4
c001df83:	e9 2e 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df88 <isr5>:
c001df88:	fa                   	cli    
c001df89:	6a 00                	push   0x0
c001df8b:	6a 05                	push   0x5
c001df8d:	e9 24 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df92 <isr6>:
c001df92:	fa                   	cli    
c001df93:	6a 00                	push   0x0
c001df95:	6a 06                	push   0x6
c001df97:	e9 1a 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001df9c <isr7>:
c001df9c:	fa                   	cli    
c001df9d:	6a 00                	push   0x0
c001df9f:	6a 07                	push   0x7
c001dfa1:	e9 10 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfa6 <isr8>:
c001dfa6:	fa                   	cli    
c001dfa7:	6a 08                	push   0x8
c001dfa9:	e9 08 01 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfae <isr9>:
c001dfae:	fa                   	cli    
c001dfaf:	6a 00                	push   0x0
c001dfb1:	6a 09                	push   0x9
c001dfb3:	e9 fe 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfb8 <isr10>:
c001dfb8:	fa                   	cli    
c001dfb9:	6a 0a                	push   0xa
c001dfbb:	e9 f6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfc0 <isr11>:
c001dfc0:	fa                   	cli    
c001dfc1:	6a 0b                	push   0xb
c001dfc3:	e9 ee 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfc8 <isr12>:
c001dfc8:	fa                   	cli    
c001dfc9:	6a 0c                	push   0xc
c001dfcb:	e9 e6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfd0 <isr13>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 0d                	push   0xd
c001dfd3:	53                   	push   ebx
c001dfd4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfd8:	81 fb a6 e1 01 c0    	cmp    ebx,0xc001e1a6
c001dfde:	5b                   	pop    ebx
c001dfdf:	0f 84 c3 01 00 00    	je     c001e1a8 <finishSignal2>
c001dfe5:	e9 cc 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dfea <isr14>:
c001dfea:	fa                   	cli    
c001dfeb:	6a 0e                	push   0xe
c001dfed:	e9 c4 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dff2 <isr15>:
c001dff2:	fa                   	cli    
c001dff3:	6a 00                	push   0x0
c001dff5:	6a 0f                	push   0xf
c001dff7:	e9 ba 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001dffc <isr16>:
c001dffc:	fa                   	cli    
c001dffd:	6a 00                	push   0x0
c001dfff:	6a 10                	push   0x10
c001e001:	e9 b0 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e006 <isr17>:
c001e006:	fa                   	cli    
c001e007:	6a 00                	push   0x0
c001e009:	6a 11                	push   0x11
c001e00b:	e9 a6 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e010 <isr18>:
c001e010:	fa                   	cli    
c001e011:	6a 00                	push   0x0
c001e013:	6a 12                	push   0x12
c001e015:	e9 9c 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e01a <irq3>:
c001e01a:	fa                   	cli    
c001e01b:	6a 00                	push   0x0
c001e01d:	6a 23                	push   0x23
c001e01f:	e9 92 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e024 <irq4>:
c001e024:	fa                   	cli    
c001e025:	6a 00                	push   0x0
c001e027:	6a 24                	push   0x24
c001e029:	e9 88 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e02e <irq5>:
c001e02e:	fa                   	cli    
c001e02f:	6a 00                	push   0x0
c001e031:	6a 25                	push   0x25
c001e033:	e9 7e 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e038 <irq6>:
c001e038:	fa                   	cli    
c001e039:	6a 00                	push   0x0
c001e03b:	6a 26                	push   0x26
c001e03d:	e9 74 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e042 <irq7>:
c001e042:	fa                   	cli    
c001e043:	6a 00                	push   0x0
c001e045:	6a 27                	push   0x27
c001e047:	e9 6a 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e04c <irq8>:
c001e04c:	fa                   	cli    
c001e04d:	6a 00                	push   0x0
c001e04f:	6a 28                	push   0x28
c001e051:	e9 60 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e056 <irq9>:
c001e056:	fa                   	cli    
c001e057:	6a 00                	push   0x0
c001e059:	6a 29                	push   0x29
c001e05b:	e9 56 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e060 <irq10>:
c001e060:	fa                   	cli    
c001e061:	6a 00                	push   0x0
c001e063:	6a 2a                	push   0x2a
c001e065:	e9 4c 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e06a <irq11>:
c001e06a:	fa                   	cli    
c001e06b:	6a 00                	push   0x0
c001e06d:	6a 2b                	push   0x2b
c001e06f:	e9 42 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e074 <irq12>:
c001e074:	fa                   	cli    
c001e075:	6a 00                	push   0x0
c001e077:	6a 2c                	push   0x2c
c001e079:	e9 38 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e07e <irq13>:
c001e07e:	fa                   	cli    
c001e07f:	6a 00                	push   0x0
c001e081:	6a 2d                	push   0x2d
c001e083:	e9 2e 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e088 <irq14>:
c001e088:	fa                   	cli    
c001e089:	6a 00                	push   0x0
c001e08b:	6a 2e                	push   0x2e
c001e08d:	e9 24 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e092 <irq15>:
c001e092:	fa                   	cli    
c001e093:	6a 00                	push   0x0
c001e095:	6a 2f                	push   0x2f
c001e097:	e9 1a 00 00 00       	jmp    c001e0b6 <int_common_stub>

c001e09c <irq1>:
c001e09c:	fa                   	cli    
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 21                	push   0x21
c001e0a1:	eb 13                	jmp    c001e0b6 <int_common_stub>

c001e0a3 <irq2>:
c001e0a3:	fa                   	cli    
c001e0a4:	6a 00                	push   0x0
c001e0a6:	6a 22                	push   0x22
c001e0a8:	eb 0c                	jmp    c001e0b6 <int_common_stub>

c001e0aa <isr96>:
c001e0aa:	6a 00                	push   0x0
c001e0ac:	6a 60                	push   0x60
c001e0ae:	fb                   	sti    
c001e0af:	eb 37                	jmp    c001e0e8 <syscall_common_stub>

c001e0b1 <irq0>:
c001e0b1:	fa                   	cli    
c001e0b2:	6a 00                	push   0x0
c001e0b4:	6a 20                	push   0x20

c001e0b6 <int_common_stub>:
c001e0b6:	60                   	pusha  
c001e0b7:	1e                   	push   ds
c001e0b8:	06                   	push   es
c001e0b9:	0f a0                	push   fs
c001e0bb:	0f a8                	push   gs
c001e0bd:	66 b8 10 00          	mov    ax,0x10
c001e0c1:	66 8e d8             	mov    ds,ax
c001e0c4:	66 8e c0             	mov    es,ax
c001e0c7:	66 8e e0             	mov    fs,ax
c001e0ca:	66 8e e8             	mov    gs,ax
c001e0cd:	54                   	push   esp
c001e0ce:	fc                   	cld    
c001e0cf:	e8 5c e1 fe ff       	call   c000c230 <int_handler>
c001e0d4:	81 c4 04 00 00 00    	add    esp,0x4
c001e0da:	0f a9                	pop    gs
c001e0dc:	0f a1                	pop    fs
c001e0de:	07                   	pop    es
c001e0df:	1f                   	pop    ds
c001e0e0:	61                   	popa   
c001e0e1:	81 c4 08 00 00 00    	add    esp,0x8
c001e0e7:	cf                   	iret   

c001e0e8 <syscall_common_stub>:
c001e0e8:	60                   	pusha  
c001e0e9:	1e                   	push   ds
c001e0ea:	06                   	push   es
c001e0eb:	0f a0                	push   fs
c001e0ed:	0f a8                	push   gs
c001e0ef:	66 b8 10 00          	mov    ax,0x10
c001e0f3:	66 8e d8             	mov    ds,ax
c001e0f6:	66 8e c0             	mov    es,ax
c001e0f9:	66 8e e0             	mov    fs,ax
c001e0fc:	66 8e e8             	mov    gs,ax
c001e0ff:	54                   	push   esp
c001e100:	fc                   	cld    
c001e101:	e8 2a e1 fe ff       	call   c000c230 <int_handler>
c001e106:	81 c4 04 00 00 00    	add    esp,0x4
c001e10c:	0f a9                	pop    gs
c001e10e:	0f a1                	pop    fs
c001e110:	07                   	pop    es
c001e111:	1f                   	pop    ds
c001e112:	e8 30 2d ff ff       	call   c0010e47 <KiCheckSignalZ>
c001e117:	3d 00 00 00 00       	cmp    eax,0x0
c001e11c:	0f 84 c0 00 00 00    	je     c001e1e2 <skipSignals>
c001e122:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e127:	61                   	popa   
c001e128:	53                   	push   ebx
c001e129:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e12f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e132:	5b                   	pop    ebx
c001e133:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e138:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e13b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e13e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e141:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e144:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e147:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e14a:	81 c4 08 00 00 00    	add    esp,0x8
c001e150:	5e                   	pop    esi
c001e151:	5b                   	pop    ebx
c001e152:	59                   	pop    ecx
c001e153:	5a                   	pop    edx
c001e154:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e157:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e15a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e15d:	52                   	push   edx
c001e15e:	51                   	push   ecx
c001e15f:	53                   	push   ebx
c001e160:	56                   	push   esi
c001e161:	81 ec 08 00 00 00    	sub    esp,0x8
c001e167:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e16a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e16d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e170:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e173:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e176:	60                   	pusha  
c001e177:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e17d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e180:	89 e3                	mov    ebx,esp
c001e182:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e185:	52                   	push   edx
c001e186:	68 a6 e1 01 c0       	push   0xc001e1a6
c001e18b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e18e:	89 dc                	mov    esp,ebx
c001e190:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e193:	68 23 00 00 00       	push   0x23
c001e198:	51                   	push   ecx
c001e199:	68 02 02 00 00       	push   0x202
c001e19e:	68 1b 00 00 00       	push   0x1b
c001e1a3:	ff 36                	push   DWORD PTR [esi]
c001e1a5:	cf                   	iret   

c001e1a6 <finishSignal>:
c001e1a6:	cd 0f                	int    0xf

c001e1a8 <finishSignal2>:
c001e1a8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e1ae:	e8 11 2d ff ff       	call   c0010ec4 <KiFinishSignalZ>
c001e1b3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e1b9:	68 23 00 00 00       	push   0x23
c001e1be:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e1c1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e1c4:	68 1b 00 00 00       	push   0x1b
c001e1c9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e1cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e1d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e1d5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e1d8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e1db:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e1de:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e1e1:	cf                   	iret   

c001e1e2 <skipSignals>:
c001e1e2:	61                   	popa   
c001e1e3:	81 c4 08 00 00 00    	add    esp,0x8
c001e1e9:	cf                   	iret   
c001e1ea:	90                   	nop
c001e1eb:	90                   	nop

c001e1ec <irq16>:
c001e1ec:	fa                   	cli    
c001e1ed:	6a 00                	push   0x0
c001e1ef:	6a 30                	push   0x30
c001e1f1:	e9 c0 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e1f6 <irq17>:
c001e1f6:	fa                   	cli    
c001e1f7:	6a 00                	push   0x0
c001e1f9:	6a 31                	push   0x31
c001e1fb:	e9 b6 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e200 <irq18>:
c001e200:	fa                   	cli    
c001e201:	6a 00                	push   0x0
c001e203:	6a 32                	push   0x32
c001e205:	e9 ac fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e20a <irq19>:
c001e20a:	fa                   	cli    
c001e20b:	6a 00                	push   0x0
c001e20d:	6a 33                	push   0x33
c001e20f:	e9 a2 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e214 <irq20>:
c001e214:	fa                   	cli    
c001e215:	6a 00                	push   0x0
c001e217:	6a 34                	push   0x34
c001e219:	e9 98 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e21e <irq21>:
c001e21e:	fa                   	cli    
c001e21f:	6a 00                	push   0x0
c001e221:	6a 35                	push   0x35
c001e223:	e9 8e fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e228 <irq22>:
c001e228:	fa                   	cli    
c001e229:	6a 00                	push   0x0
c001e22b:	6a 36                	push   0x36
c001e22d:	e9 84 fe ff ff       	jmp    c001e0b6 <int_common_stub>

c001e232 <irq23>:
c001e232:	fa                   	cli    
c001e233:	6a 00                	push   0x0
c001e235:	6a 37                	push   0x37
c001e237:	e9 7a fe ff ff       	jmp    c001e0b6 <int_common_stub>
c001e23c:	66 90                	xchg   ax,ax
c001e23e:	66 90                	xchg   ax,ax

c001e240 <i386GetRDRAND>:
c001e240:	b9 64 00 00 00       	mov    ecx,0x64

c001e245 <retry>:
c001e245:	0f c7 f0             	rdrand eax
c001e248:	72 05                	jb     c001e24f <retry.done>
c001e24a:	e2 f9                	loop   c001e245 <retry>

c001e24c <retry.fail>:
c001e24c:	31 c0                	xor    eax,eax
c001e24e:	c3                   	ret    

c001e24f <retry.done>:
c001e24f:	c3                   	ret    

c001e250 <absolutelyNoChanceInHell>:
c001e250:	b8 01 00 00 00       	mov    eax,0x1
c001e255:	0f a2                	cpuid  
c001e257:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e25d:	74 06                	je     c001e265 <sseDetect.noSSE>
c001e25f:	b8 01 00 00 00       	mov    eax,0x1
c001e264:	c3                   	ret    

c001e265 <sseDetect.noSSE>:
c001e265:	31 c0                	xor    eax,eax
c001e267:	c3                   	ret    

c001e268 <sseSave>:
c001e268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e26c:	0f ae 00             	fxsave [eax]
c001e26f:	c3                   	ret    

c001e270 <sseLoad>:
c001e270:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e274:	0f ae 08             	fxrstor [eax]
c001e277:	c3                   	ret    

c001e278 <sseInit>:
c001e278:	e8 42 00 00 00       	call   c001e2bf <x87Init>
c001e27d:	0f 20 e0             	mov    eax,cr4
c001e280:	66 0d 00 06          	or     ax,0x600
c001e284:	0f 22 e0             	mov    cr4,eax
c001e287:	c3                   	ret    

c001e288 <sseClose>:
c001e288:	c3                   	ret    
c001e289:	66 90                	xchg   ax,ax
c001e28b:	66 90                	xchg   ax,ax
c001e28d:	66 90                	xchg   ax,ax
c001e28f:	90                   	nop

c001e290 <value_37F>:
c001e290:	7f 03                	jg     c001e295 <value_37A+0x1>

c001e292 <value_37E>:
c001e292:	7e 03                	jle    c001e297 <x87Detect+0x1>

c001e294 <value_37A>:
c001e294:	7a 03                	jp     c001e299 <x87Detect+0x3>

c001e296 <x87Detect>:
c001e296:	b8 01 00 00 00       	mov    eax,0x1
c001e29b:	0f a2                	cpuid  
c001e29d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e2a3:	74 06                	je     c001e2ab <x87Detect.nox87>
c001e2a5:	b8 01 00 00 00       	mov    eax,0x1
c001e2aa:	c3                   	ret    

c001e2ab <x87Detect.nox87>:
c001e2ab:	b8 00 00 00 00       	mov    eax,0x0
c001e2b0:	c3                   	ret    

c001e2b1 <x87Save>:
c001e2b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2b5:	dd 30                	fnsave [eax]
c001e2b7:	c3                   	ret    

c001e2b8 <x87Load>:
c001e2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2bc:	dd 20                	frstor [eax]
c001e2be:	c3                   	ret    

c001e2bf <x87Init>:
c001e2bf:	0f 20 c0             	mov    eax,cr0
c001e2c2:	66 25 fb ff          	and    ax,0xfffb
c001e2c6:	66 0d 22 00          	or     ax,0x22
c001e2ca:	0f 22 c0             	mov    cr0,eax
c001e2cd:	db e3                	fninit 
c001e2cf:	0f 06                	clts   
c001e2d1:	d9 2d 94 e2 01 c0    	fldcw  WORD PTR ds:0xc001e294
c001e2d7:	c3                   	ret    

c001e2d8 <x87Close>:
c001e2d8:	c3                   	ret    
c001e2d9:	66 90                	xchg   ax,ax
c001e2db:	90                   	nop

c001e2dc <__do_global_ctors_aux>:
c001e2dc:	a1 90 f2 01 c0       	mov    eax,ds:0xc001f290
c001e2e1:	83 f8 ff             	cmp    eax,0xffffffff
c001e2e4:	74 1a                	je     c001e300 <__do_global_ctors_aux+0x24>
c001e2e6:	55                   	push   ebp
c001e2e7:	89 e5                	mov    ebp,esp
c001e2e9:	53                   	push   ebx
c001e2ea:	52                   	push   edx
c001e2eb:	bb 90 f2 01 c0       	mov    ebx,0xc001f290
c001e2f0:	ff d0                	call   eax
c001e2f2:	83 eb 04             	sub    ebx,0x4
c001e2f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2f7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2fa:	75 f4                	jne    c001e2f0 <__do_global_ctors_aux+0x14>
c001e2fc:	58                   	pop    eax
c001e2fd:	5b                   	pop    ebx
c001e2fe:	5d                   	pop    ebp
c001e2ff:	c3                   	ret    
c001e300:	c3                   	ret    
c001e301:	66 90                	xchg   ax,ax
c001e303:	90                   	nop

c001e304 <__divdi3>:
c001e304:	55                   	push   ebp
c001e305:	57                   	push   edi
c001e306:	56                   	push   esi
c001e307:	53                   	push   ebx
c001e308:	83 ec 1c             	sub    esp,0x1c
c001e30b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e30f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e313:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e316:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e31a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e31e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e322:	85 db                	test   ebx,ebx
c001e324:	0f 88 8e 00 00 00    	js     c001e3b8 <__divdi3+0xb4>
c001e32a:	89 dd                	mov    ebp,ebx
c001e32c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e334:	89 d3                	mov    ebx,edx
c001e336:	85 d2                	test   edx,edx
c001e338:	79 0d                	jns    c001e347 <__divdi3+0x43>
c001e33a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e33e:	f7 d8                	neg    eax
c001e340:	83 d2 00             	adc    edx,0x0
c001e343:	f7 da                	neg    edx
c001e345:	89 d3                	mov    ebx,edx
c001e347:	89 c7                	mov    edi,eax
c001e349:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e34c:	85 db                	test   ebx,ebx
c001e34e:	75 48                	jne    c001e398 <__divdi3+0x94>
c001e350:	39 ef                	cmp    edi,ebp
c001e352:	76 24                	jbe    c001e378 <__divdi3+0x74>
c001e354:	89 ea                	mov    edx,ebp
c001e356:	f7 f7                	div    edi
c001e358:	89 c1                	mov    ecx,eax
c001e35a:	31 f6                	xor    esi,esi
c001e35c:	89 c8                	mov    eax,ecx
c001e35e:	89 f2                	mov    edx,esi
c001e360:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e364:	85 c9                	test   ecx,ecx
c001e366:	74 07                	je     c001e36f <__divdi3+0x6b>
c001e368:	f7 d8                	neg    eax
c001e36a:	83 d2 00             	adc    edx,0x0
c001e36d:	f7 da                	neg    edx
c001e36f:	83 c4 1c             	add    esp,0x1c
c001e372:	5b                   	pop    ebx
c001e373:	5e                   	pop    esi
c001e374:	5f                   	pop    edi
c001e375:	5d                   	pop    ebp
c001e376:	c3                   	ret    
c001e377:	90                   	nop
c001e378:	85 ff                	test   edi,edi
c001e37a:	75 0b                	jne    c001e387 <__divdi3+0x83>
c001e37c:	b8 01 00 00 00       	mov    eax,0x1
c001e381:	31 d2                	xor    edx,edx
c001e383:	f7 f3                	div    ebx
c001e385:	89 c7                	mov    edi,eax
c001e387:	31 d2                	xor    edx,edx
c001e389:	89 e8                	mov    eax,ebp
c001e38b:	f7 f7                	div    edi
c001e38d:	89 c6                	mov    esi,eax
c001e38f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e392:	f7 f7                	div    edi
c001e394:	89 c1                	mov    ecx,eax
c001e396:	eb c4                	jmp    c001e35c <__divdi3+0x58>
c001e398:	39 eb                	cmp    ebx,ebp
c001e39a:	77 3c                	ja     c001e3d8 <__divdi3+0xd4>
c001e39c:	0f bd f3             	bsr    esi,ebx
c001e39f:	83 f6 1f             	xor    esi,0x1f
c001e3a2:	75 40                	jne    c001e3e4 <__divdi3+0xe0>
c001e3a4:	39 eb                	cmp    ebx,ebp
c001e3a6:	72 09                	jb     c001e3b1 <__divdi3+0xad>
c001e3a8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e3ab:	0f 87 97 00 00 00    	ja     c001e448 <__divdi3+0x144>
c001e3b1:	b9 01 00 00 00       	mov    ecx,0x1
c001e3b6:	eb a4                	jmp    c001e35c <__divdi3+0x58>
c001e3b8:	f7 d9                	neg    ecx
c001e3ba:	83 d3 00             	adc    ebx,0x0
c001e3bd:	f7 db                	neg    ebx
c001e3bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e3c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e3c6:	89 dd                	mov    ebp,ebx
c001e3c8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e3d0:	e9 5f ff ff ff       	jmp    c001e334 <__divdi3+0x30>
c001e3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d8:	31 f6                	xor    esi,esi
c001e3da:	31 c9                	xor    ecx,ecx
c001e3dc:	e9 7b ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3e4:	b8 20 00 00 00       	mov    eax,0x20
c001e3e9:	29 f0                	sub    eax,esi
c001e3eb:	89 f1                	mov    ecx,esi
c001e3ed:	d3 e3                	shl    ebx,cl
c001e3ef:	89 fa                	mov    edx,edi
c001e3f1:	88 c1                	mov    cl,al
c001e3f3:	d3 ea                	shr    edx,cl
c001e3f5:	09 da                	or     edx,ebx
c001e3f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3fb:	89 f1                	mov    ecx,esi
c001e3fd:	d3 e7                	shl    edi,cl
c001e3ff:	89 eb                	mov    ebx,ebp
c001e401:	88 c1                	mov    cl,al
c001e403:	d3 eb                	shr    ebx,cl
c001e405:	89 f1                	mov    ecx,esi
c001e407:	d3 e5                	shl    ebp,cl
c001e409:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e40c:	88 c1                	mov    cl,al
c001e40e:	d3 ea                	shr    edx,cl
c001e410:	09 d5                	or     ebp,edx
c001e412:	89 e8                	mov    eax,ebp
c001e414:	89 da                	mov    edx,ebx
c001e416:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e41a:	89 d3                	mov    ebx,edx
c001e41c:	89 c5                	mov    ebp,eax
c001e41e:	f7 e7                	mul    edi
c001e420:	39 d3                	cmp    ebx,edx
c001e422:	72 18                	jb     c001e43c <__divdi3+0x138>
c001e424:	74 0a                	je     c001e430 <__divdi3+0x12c>
c001e426:	89 e9                	mov    ecx,ebp
c001e428:	31 f6                	xor    esi,esi
c001e42a:	e9 2d ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e42f:	90                   	nop
c001e430:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e433:	89 f1                	mov    ecx,esi
c001e435:	d3 e7                	shl    edi,cl
c001e437:	39 c7                	cmp    edi,eax
c001e439:	73 eb                	jae    c001e426 <__divdi3+0x122>
c001e43b:	90                   	nop
c001e43c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e43f:	31 f6                	xor    esi,esi
c001e441:	e9 16 ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e446:	66 90                	xchg   ax,ax
c001e448:	31 c9                	xor    ecx,ecx
c001e44a:	e9 0d ff ff ff       	jmp    c001e35c <__divdi3+0x58>
c001e44f:	90                   	nop

c001e450 <__moddi3>:
c001e450:	55                   	push   ebp
c001e451:	57                   	push   edi
c001e452:	56                   	push   esi
c001e453:	53                   	push   ebx
c001e454:	83 ec 2c             	sub    esp,0x2c
c001e457:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e45b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e45f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e463:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e467:	85 db                	test   ebx,ebx
c001e469:	0f 88 85 00 00 00    	js     c001e4f4 <__moddi3+0xa4>
c001e46f:	89 de                	mov    esi,ebx
c001e471:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e479:	89 d7                	mov    edi,edx
c001e47b:	85 d2                	test   edx,edx
c001e47d:	79 09                	jns    c001e488 <__moddi3+0x38>
c001e47f:	f7 d8                	neg    eax
c001e481:	83 d2 00             	adc    edx,0x0
c001e484:	f7 da                	neg    edx
c001e486:	89 d7                	mov    edi,edx
c001e488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e48c:	89 cd                	mov    ebp,ecx
c001e48e:	85 ff                	test   edi,edi
c001e490:	75 52                	jne    c001e4e4 <__moddi3+0x94>
c001e492:	89 c3                	mov    ebx,eax
c001e494:	39 f0                	cmp    eax,esi
c001e496:	76 24                	jbe    c001e4bc <__moddi3+0x6c>
c001e498:	89 c8                	mov    eax,ecx
c001e49a:	89 f2                	mov    edx,esi
c001e49c:	f7 f3                	div    ebx
c001e49e:	89 d6                	mov    esi,edx
c001e4a0:	89 f0                	mov    eax,esi
c001e4a2:	31 d2                	xor    edx,edx
c001e4a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e4a8:	85 c9                	test   ecx,ecx
c001e4aa:	74 07                	je     c001e4b3 <__moddi3+0x63>
c001e4ac:	f7 d8                	neg    eax
c001e4ae:	83 d2 00             	adc    edx,0x0
c001e4b1:	f7 da                	neg    edx
c001e4b3:	83 c4 2c             	add    esp,0x2c
c001e4b6:	5b                   	pop    ebx
c001e4b7:	5e                   	pop    esi
c001e4b8:	5f                   	pop    edi
c001e4b9:	5d                   	pop    ebp
c001e4ba:	c3                   	ret    
c001e4bb:	90                   	nop
c001e4bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e4c0:	85 db                	test   ebx,ebx
c001e4c2:	75 0d                	jne    c001e4d1 <__moddi3+0x81>
c001e4c4:	b8 01 00 00 00       	mov    eax,0x1
c001e4c9:	31 d2                	xor    edx,edx
c001e4cb:	f7 f7                	div    edi
c001e4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4d1:	89 f0                	mov    eax,esi
c001e4d3:	31 d2                	xor    edx,edx
c001e4d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e4d9:	f7 f7                	div    edi
c001e4db:	89 e8                	mov    eax,ebp
c001e4dd:	f7 f7                	div    edi
c001e4df:	89 d6                	mov    esi,edx
c001e4e1:	eb bd                	jmp    c001e4a0 <__moddi3+0x50>
c001e4e3:	90                   	nop
c001e4e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4e8:	39 f7                	cmp    edi,esi
c001e4ea:	76 20                	jbe    c001e50c <__moddi3+0xbc>
c001e4ec:	89 c8                	mov    eax,ecx
c001e4ee:	89 f2                	mov    edx,esi
c001e4f0:	eb b2                	jmp    c001e4a4 <__moddi3+0x54>
c001e4f2:	66 90                	xchg   ax,ax
c001e4f4:	f7 d9                	neg    ecx
c001e4f6:	83 d3 00             	adc    ebx,0x0
c001e4f9:	f7 db                	neg    ebx
c001e4fb:	89 de                	mov    esi,ebx
c001e4fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e505:	e9 6f ff ff ff       	jmp    c001e479 <__moddi3+0x29>
c001e50a:	66 90                	xchg   ax,ax
c001e50c:	0f bd c7             	bsr    eax,edi
c001e50f:	83 f0 1f             	xor    eax,0x1f
c001e512:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e516:	75 24                	jne    c001e53c <__moddi3+0xec>
c001e518:	39 f7                	cmp    edi,esi
c001e51a:	72 06                	jb     c001e522 <__moddi3+0xd2>
c001e51c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e520:	77 0c                	ja     c001e52e <__moddi3+0xde>
c001e522:	89 e9                	mov    ecx,ebp
c001e524:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e528:	19 fe                	sbb    esi,edi
c001e52a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e52e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e532:	89 f2                	mov    edx,esi
c001e534:	e9 6b ff ff ff       	jmp    c001e4a4 <__moddi3+0x54>
c001e539:	8d 76 00             	lea    esi,[esi+0x0]
c001e53c:	b8 20 00 00 00       	mov    eax,0x20
c001e541:	89 c2                	mov    edx,eax
c001e543:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e547:	29 da                	sub    edx,ebx
c001e549:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e54d:	88 d9                	mov    cl,bl
c001e54f:	d3 e7                	shl    edi,cl
c001e551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e555:	88 d1                	mov    cl,dl
c001e557:	d3 e8                	shr    eax,cl
c001e559:	09 c7                	or     edi,eax
c001e55b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e55f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e563:	89 d8                	mov    eax,ebx
c001e565:	88 d9                	mov    cl,bl
c001e567:	d3 e7                	shl    edi,cl
c001e569:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e56d:	89 f3                	mov    ebx,esi
c001e56f:	88 d1                	mov    cl,dl
c001e571:	d3 eb                	shr    ebx,cl
c001e573:	89 c7                	mov    edi,eax
c001e575:	88 c1                	mov    cl,al
c001e577:	d3 e6                	shl    esi,cl
c001e579:	89 e8                	mov    eax,ebp
c001e57b:	88 d1                	mov    cl,dl
c001e57d:	d3 e8                	shr    eax,cl
c001e57f:	09 f0                	or     eax,esi
c001e581:	89 f9                	mov    ecx,edi
c001e583:	d3 e5                	shl    ebp,cl
c001e585:	89 da                	mov    edx,ebx
c001e587:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e58b:	89 d3                	mov    ebx,edx
c001e58d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e591:	89 c6                	mov    esi,eax
c001e593:	89 d1                	mov    ecx,edx
c001e595:	39 d3                	cmp    ebx,edx
c001e597:	72 27                	jb     c001e5c0 <__moddi3+0x170>
c001e599:	74 21                	je     c001e5bc <__moddi3+0x16c>
c001e59b:	29 f5                	sub    ebp,esi
c001e59d:	19 cb                	sbb    ebx,ecx
c001e59f:	89 de                	mov    esi,ebx
c001e5a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e5a5:	d3 e6                	shl    esi,cl
c001e5a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e5ab:	89 f9                	mov    ecx,edi
c001e5ad:	d3 ed                	shr    ebp,cl
c001e5af:	09 ee                	or     esi,ebp
c001e5b1:	89 f0                	mov    eax,esi
c001e5b3:	d3 eb                	shr    ebx,cl
c001e5b5:	89 da                	mov    edx,ebx
c001e5b7:	e9 e8 fe ff ff       	jmp    c001e4a4 <__moddi3+0x54>
c001e5bc:	39 c5                	cmp    ebp,eax
c001e5be:	73 db                	jae    c001e59b <__moddi3+0x14b>
c001e5c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e5c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e5c8:	89 d1                	mov    ecx,edx
c001e5ca:	89 c6                	mov    esi,eax
c001e5cc:	eb cd                	jmp    c001e59b <__moddi3+0x14b>
c001e5ce:	66 90                	xchg   ax,ax

c001e5d0 <__udivdi3>:
c001e5d0:	55                   	push   ebp
c001e5d1:	57                   	push   edi
c001e5d2:	56                   	push   esi
c001e5d3:	53                   	push   ebx
c001e5d4:	83 ec 1c             	sub    esp,0x1c
c001e5d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e5db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e5df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5e7:	85 d2                	test   edx,edx
c001e5e9:	75 41                	jne    c001e62c <__udivdi3+0x5c>
c001e5eb:	39 f7                	cmp    edi,esi
c001e5ed:	76 15                	jbe    c001e604 <__udivdi3+0x34>
c001e5ef:	89 e8                	mov    eax,ebp
c001e5f1:	89 f2                	mov    edx,esi
c001e5f3:	f7 f7                	div    edi
c001e5f5:	31 db                	xor    ebx,ebx
c001e5f7:	89 da                	mov    edx,ebx
c001e5f9:	83 c4 1c             	add    esp,0x1c
c001e5fc:	5b                   	pop    ebx
c001e5fd:	5e                   	pop    esi
c001e5fe:	5f                   	pop    edi
c001e5ff:	5d                   	pop    ebp
c001e600:	c3                   	ret    
c001e601:	8d 76 00             	lea    esi,[esi+0x0]
c001e604:	89 f9                	mov    ecx,edi
c001e606:	85 ff                	test   edi,edi
c001e608:	75 0b                	jne    c001e615 <__udivdi3+0x45>
c001e60a:	b8 01 00 00 00       	mov    eax,0x1
c001e60f:	31 d2                	xor    edx,edx
c001e611:	f7 f7                	div    edi
c001e613:	89 c1                	mov    ecx,eax
c001e615:	31 d2                	xor    edx,edx
c001e617:	89 f0                	mov    eax,esi
c001e619:	f7 f1                	div    ecx
c001e61b:	89 c3                	mov    ebx,eax
c001e61d:	89 e8                	mov    eax,ebp
c001e61f:	f7 f1                	div    ecx
c001e621:	89 da                	mov    edx,ebx
c001e623:	83 c4 1c             	add    esp,0x1c
c001e626:	5b                   	pop    ebx
c001e627:	5e                   	pop    esi
c001e628:	5f                   	pop    edi
c001e629:	5d                   	pop    ebp
c001e62a:	c3                   	ret    
c001e62b:	90                   	nop
c001e62c:	39 f2                	cmp    edx,esi
c001e62e:	77 1c                	ja     c001e64c <__udivdi3+0x7c>
c001e630:	0f bd da             	bsr    ebx,edx
c001e633:	83 f3 1f             	xor    ebx,0x1f
c001e636:	75 24                	jne    c001e65c <__udivdi3+0x8c>
c001e638:	39 f2                	cmp    edx,esi
c001e63a:	72 08                	jb     c001e644 <__udivdi3+0x74>
c001e63c:	39 ef                	cmp    edi,ebp
c001e63e:	0f 87 84 00 00 00    	ja     c001e6c8 <__udivdi3+0xf8>
c001e644:	b8 01 00 00 00       	mov    eax,0x1
c001e649:	eb ac                	jmp    c001e5f7 <__udivdi3+0x27>
c001e64b:	90                   	nop
c001e64c:	31 db                	xor    ebx,ebx
c001e64e:	31 c0                	xor    eax,eax
c001e650:	89 da                	mov    edx,ebx
c001e652:	83 c4 1c             	add    esp,0x1c
c001e655:	5b                   	pop    ebx
c001e656:	5e                   	pop    esi
c001e657:	5f                   	pop    edi
c001e658:	5d                   	pop    ebp
c001e659:	c3                   	ret    
c001e65a:	66 90                	xchg   ax,ax
c001e65c:	b8 20 00 00 00       	mov    eax,0x20
c001e661:	29 d8                	sub    eax,ebx
c001e663:	88 d9                	mov    cl,bl
c001e665:	d3 e2                	shl    edx,cl
c001e667:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e66b:	89 fa                	mov    edx,edi
c001e66d:	88 c1                	mov    cl,al
c001e66f:	d3 ea                	shr    edx,cl
c001e671:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e675:	09 d1                	or     ecx,edx
c001e677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e67b:	88 d9                	mov    cl,bl
c001e67d:	d3 e7                	shl    edi,cl
c001e67f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e683:	89 f7                	mov    edi,esi
c001e685:	88 c1                	mov    cl,al
c001e687:	d3 ef                	shr    edi,cl
c001e689:	88 d9                	mov    cl,bl
c001e68b:	d3 e6                	shl    esi,cl
c001e68d:	89 ea                	mov    edx,ebp
c001e68f:	88 c1                	mov    cl,al
c001e691:	d3 ea                	shr    edx,cl
c001e693:	09 d6                	or     esi,edx
c001e695:	89 f0                	mov    eax,esi
c001e697:	89 fa                	mov    edx,edi
c001e699:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e69d:	89 d7                	mov    edi,edx
c001e69f:	89 c6                	mov    esi,eax
c001e6a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6a5:	39 d7                	cmp    edi,edx
c001e6a7:	72 13                	jb     c001e6bc <__udivdi3+0xec>
c001e6a9:	74 09                	je     c001e6b4 <__udivdi3+0xe4>
c001e6ab:	89 f0                	mov    eax,esi
c001e6ad:	31 db                	xor    ebx,ebx
c001e6af:	e9 43 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6b4:	88 d9                	mov    cl,bl
c001e6b6:	d3 e5                	shl    ebp,cl
c001e6b8:	39 c5                	cmp    ebp,eax
c001e6ba:	73 ef                	jae    c001e6ab <__udivdi3+0xdb>
c001e6bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001e6bf:	31 db                	xor    ebx,ebx
c001e6c1:	e9 31 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6c6:	66 90                	xchg   ax,ax
c001e6c8:	31 c0                	xor    eax,eax
c001e6ca:	e9 28 ff ff ff       	jmp    c001e5f7 <__udivdi3+0x27>
c001e6cf:	90                   	nop

c001e6d0 <__umoddi3>:
c001e6d0:	55                   	push   ebp
c001e6d1:	57                   	push   edi
c001e6d2:	56                   	push   esi
c001e6d3:	53                   	push   ebx
c001e6d4:	83 ec 1c             	sub    esp,0x1c
c001e6d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e6db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e6df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6e7:	89 da                	mov    edx,ebx
c001e6e9:	85 c0                	test   eax,eax
c001e6eb:	75 37                	jne    c001e724 <__umoddi3+0x54>
c001e6ed:	39 df                	cmp    edi,ebx
c001e6ef:	76 13                	jbe    c001e704 <__umoddi3+0x34>
c001e6f1:	89 f0                	mov    eax,esi
c001e6f3:	f7 f7                	div    edi
c001e6f5:	89 d0                	mov    eax,edx
c001e6f7:	31 d2                	xor    edx,edx
c001e6f9:	83 c4 1c             	add    esp,0x1c
c001e6fc:	5b                   	pop    ebx
c001e6fd:	5e                   	pop    esi
c001e6fe:	5f                   	pop    edi
c001e6ff:	5d                   	pop    ebp
c001e700:	c3                   	ret    
c001e701:	8d 76 00             	lea    esi,[esi+0x0]
c001e704:	89 fd                	mov    ebp,edi
c001e706:	85 ff                	test   edi,edi
c001e708:	75 0b                	jne    c001e715 <__umoddi3+0x45>
c001e70a:	b8 01 00 00 00       	mov    eax,0x1
c001e70f:	31 d2                	xor    edx,edx
c001e711:	f7 f7                	div    edi
c001e713:	89 c5                	mov    ebp,eax
c001e715:	89 d8                	mov    eax,ebx
c001e717:	31 d2                	xor    edx,edx
c001e719:	f7 f5                	div    ebp
c001e71b:	89 f0                	mov    eax,esi
c001e71d:	f7 f5                	div    ebp
c001e71f:	89 d0                	mov    eax,edx
c001e721:	eb d4                	jmp    c001e6f7 <__umoddi3+0x27>
c001e723:	90                   	nop
c001e724:	89 f1                	mov    ecx,esi
c001e726:	39 d8                	cmp    eax,ebx
c001e728:	76 0a                	jbe    c001e734 <__umoddi3+0x64>
c001e72a:	89 f0                	mov    eax,esi
c001e72c:	83 c4 1c             	add    esp,0x1c
c001e72f:	5b                   	pop    ebx
c001e730:	5e                   	pop    esi
c001e731:	5f                   	pop    edi
c001e732:	5d                   	pop    ebp
c001e733:	c3                   	ret    
c001e734:	0f bd e8             	bsr    ebp,eax
c001e737:	83 f5 1f             	xor    ebp,0x1f
c001e73a:	75 1c                	jne    c001e758 <__umoddi3+0x88>
c001e73c:	39 d8                	cmp    eax,ebx
c001e73e:	72 04                	jb     c001e744 <__umoddi3+0x74>
c001e740:	39 f7                	cmp    edi,esi
c001e742:	77 08                	ja     c001e74c <__umoddi3+0x7c>
c001e744:	89 da                	mov    edx,ebx
c001e746:	29 fe                	sub    esi,edi
c001e748:	19 c2                	sbb    edx,eax
c001e74a:	89 f1                	mov    ecx,esi
c001e74c:	89 c8                	mov    eax,ecx
c001e74e:	83 c4 1c             	add    esp,0x1c
c001e751:	5b                   	pop    ebx
c001e752:	5e                   	pop    esi
c001e753:	5f                   	pop    edi
c001e754:	5d                   	pop    ebp
c001e755:	c3                   	ret    
c001e756:	66 90                	xchg   ax,ax
c001e758:	ba 20 00 00 00       	mov    edx,0x20
c001e75d:	29 ea                	sub    edx,ebp
c001e75f:	89 e9                	mov    ecx,ebp
c001e761:	d3 e0                	shl    eax,cl
c001e763:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e767:	89 f8                	mov    eax,edi
c001e769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e76d:	88 d1                	mov    cl,dl
c001e76f:	d3 e8                	shr    eax,cl
c001e771:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e775:	09 c1                	or     ecx,eax
c001e777:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e77b:	89 e9                	mov    ecx,ebp
c001e77d:	d3 e7                	shl    edi,cl
c001e77f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e783:	89 d8                	mov    eax,ebx
c001e785:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e789:	88 d1                	mov    cl,dl
c001e78b:	d3 e8                	shr    eax,cl
c001e78d:	89 c7                	mov    edi,eax
c001e78f:	89 e9                	mov    ecx,ebp
c001e791:	d3 e3                	shl    ebx,cl
c001e793:	89 f0                	mov    eax,esi
c001e795:	88 d1                	mov    cl,dl
c001e797:	d3 e8                	shr    eax,cl
c001e799:	09 d8                	or     eax,ebx
c001e79b:	89 e9                	mov    ecx,ebp
c001e79d:	d3 e6                	shl    esi,cl
c001e79f:	89 f3                	mov    ebx,esi
c001e7a1:	89 fa                	mov    edx,edi
c001e7a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7a7:	89 d1                	mov    ecx,edx
c001e7a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7ad:	89 c6                	mov    esi,eax
c001e7af:	89 d7                	mov    edi,edx
c001e7b1:	39 d1                	cmp    ecx,edx
c001e7b3:	72 27                	jb     c001e7dc <__umoddi3+0x10c>
c001e7b5:	74 21                	je     c001e7d8 <__umoddi3+0x108>
c001e7b7:	89 ca                	mov    edx,ecx
c001e7b9:	29 f3                	sub    ebx,esi
c001e7bb:	19 fa                	sbb    edx,edi
c001e7bd:	89 d0                	mov    eax,edx
c001e7bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e7c3:	d3 e0                	shl    eax,cl
c001e7c5:	89 e9                	mov    ecx,ebp
c001e7c7:	d3 eb                	shr    ebx,cl
c001e7c9:	09 d8                	or     eax,ebx
c001e7cb:	d3 ea                	shr    edx,cl
c001e7cd:	83 c4 1c             	add    esp,0x1c
c001e7d0:	5b                   	pop    ebx
c001e7d1:	5e                   	pop    esi
c001e7d2:	5f                   	pop    edi
c001e7d3:	5d                   	pop    ebp
c001e7d4:	c3                   	ret    
c001e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d8:	39 c3                	cmp    ebx,eax
c001e7da:	73 db                	jae    c001e7b7 <__umoddi3+0xe7>
c001e7dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7e4:	89 d7                	mov    edi,edx
c001e7e6:	89 c6                	mov    esi,eax
c001e7e8:	eb cd                	jmp    c001e7b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e7ea <_init>:
c001e7ea:	55                   	push   ebp
c001e7eb:	89 e5                	mov    ebp,esp
c001e7ed:	e8 02 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7f2:	e8 e5 fa ff ff       	call   c001e2dc <__do_global_ctors_aux>
c001e7f7:	5d                   	pop    ebp
c001e7f8:	c3                   	ret    

Disassembly of section .fini:

c001e7f9 <_fini>:
c001e7f9:	55                   	push   ebp
c001e7fa:	89 e5                	mov    ebp,esp
c001e7fc:	e8 83 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e801:	5d                   	pop    ebp
c001e802:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e804 <Computer::~Computer()>:
c001e804:	83 ec 0c             	sub    esp,0xc
c001e807:	ba f0 fa 01 c0       	mov    edx,0xc001faf0
c001e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e810:	89 10                	mov    DWORD PTR [eax],edx
c001e812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e816:	83 ec 0c             	sub    esp,0xc
c001e819:	50                   	push   eax
c001e81a:	e8 6d d4 fe ff       	call   c000bc8c <Device::~Device()>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	90                   	nop
c001e823:	83 c4 0c             	add    esp,0xc
c001e826:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e828 <Computer::~Computer()>:
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	83 ec 0c             	sub    esp,0xc
c001e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e832:	e8 cd ff ff ff       	call   c001e804 <Computer::~Computer()>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	83 ec 08             	sub    esp,0x8
c001e83d:	68 70 01 00 00       	push   0x170
c001e842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e846:	e8 0c c0 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001e84b:	83 c4 10             	add    esp,0x10
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e852 <idleCommon()>:
c001e852:	83 ec 0c             	sub    esp,0xc
c001e855:	fa                   	cli    
c001e856:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e85c:	e8 df 67 ff ff       	call   c0015040 <schedule()>
c001e861:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e866:	48                   	dec    eax
c001e867:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e86c:	75 01                	jne    c001e86f <idleCommon()+0x1d>
c001e86e:	fb                   	sti    
c001e86f:	83 c4 0c             	add    esp,0xc
c001e872:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e874 <LinkedList<UnixFile>::~LinkedList()>:
c001e874:	90                   	nop
c001e875:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e876 <LinkedList<UnixFile>::LinkedList()>:
c001e876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e87a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e88b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e88f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e89a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8b6:	90                   	nop
c001e8b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e8b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e8c0:	75 10                	jne    c001e8d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	68 04 fd 01 c0       	push   0xc001fd04
c001e8ca:	e8 70 1f ff ff       	call   c001083f <KePanic(char const*)>
c001e8cf:	83 c4 10             	add    esp,0x10
c001e8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d8:	85 c0                	test   eax,eax
c001e8da:	74 34                	je     c001e910 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e3:	85 c0                	test   eax,eax
c001e8e5:	74 29                	je     c001e910 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e907:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e90e:	eb 65                	jmp    c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e914:	8b 00                	mov    eax,DWORD PTR [eax]
c001e916:	85 c0                	test   eax,eax
c001e918:	75 4b                	jne    c001e965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e921:	85 c0                	test   eax,eax
c001e923:	75 40                	jne    c001e965 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e929:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e92d:	89 10                	mov    DWORD PTR [eax],edx
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e937:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e941:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e94c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e94f:	85 c0                	test   eax,eax
c001e951:	74 22                	je     c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e953:	83 ec 0c             	sub    esp,0xc
c001e956:	68 26 fd 01 c0       	push   0xc001fd26
c001e95b:	e8 df 1e ff ff       	call   c001083f <KePanic(char const*)>
c001e960:	83 c4 10             	add    esp,0x10
c001e963:	eb 10                	jmp    c001e975 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e965:	83 ec 0c             	sub    esp,0xc
c001e968:	68 30 fd 01 c0       	push   0xc001fd30
c001e96d:	e8 cd 1e ff ff       	call   c001083f <KePanic(char const*)>
c001e972:	83 c4 10             	add    esp,0x10
c001e975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97c:	8d 50 01             	lea    edx,[eax+0x1]
c001e97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e983:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e986:	90                   	nop
c001e987:	83 c4 0c             	add    esp,0xc
c001e98a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e98c <LinkedList<UnixFile>::getFirstElement()>:
c001e98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e990:	8b 00                	mov    eax,DWORD PTR [eax]
c001e992:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e994 <LinkedList<UnixFile>::removeFirst()>:
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99d:	85 c0                	test   eax,eax
c001e99f:	75 12                	jne    c001e9b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 3c fd 01 c0       	push   0xc001fd3c
c001e9a9:	e8 91 1e ff ff       	call   c001083f <KePanic(char const*)>
c001e9ae:	83 c4 10             	add    esp,0x10
c001e9b1:	eb 7e                	jmp    c001ea31 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	74 10                	je     c001e9d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e9c1:	83 ec 0c             	sub    esp,0xc
c001e9c4:	68 87 fd 01 c0       	push   0xc001fd87
c001e9c9:	e8 71 1e ff ff       	call   c001083f <KePanic(char const*)>
c001e9ce:	83 c4 10             	add    esp,0x10
c001e9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9da:	85 c0                	test   eax,eax
c001e9dc:	75 33                	jne    c001ea11 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9fa:	83 f8 01             	cmp    eax,0x1
c001e9fd:	74 21                	je     c001ea20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9ff:	83 ec 0c             	sub    esp,0xc
c001ea02:	68 60 fd 01 c0       	push   0xc001fd60
c001ea07:	e8 33 1e ff ff       	call   c001083f <KePanic(char const*)>
c001ea0c:	83 c4 10             	add    esp,0x10
c001ea0f:	eb 0f                	jmp    c001ea20 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ea11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea15:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea17:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ea1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1e:	89 10                	mov    DWORD PTR [eax],edx
c001ea20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea27:	8d 50 ff             	lea    edx,[eax-0x1]
c001ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea31:	83 c4 0c             	add    esp,0xc
c001ea34:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ea36 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ea36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ea3a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea3d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001ea3e <DriverlessDevice::~DriverlessDevice()>:
c001ea3e:	ba dc 03 02 c0       	mov    edx,0xc00203dc
c001ea43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea47:	89 10                	mov    DWORD PTR [eax],edx
c001ea49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea4d:	50                   	push   eax
c001ea4e:	e8 39 d2 fe ff       	call   c000bc8c <Device::~Device()>
c001ea53:	83 c4 04             	add    esp,0x4
c001ea56:	90                   	nop
c001ea57:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea58 <DriverlessDevice::~DriverlessDevice()>:
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	83 ec 0c             	sub    esp,0xc
c001ea5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea62:	e8 d7 ff ff ff       	call   c001ea3e <DriverlessDevice::~DriverlessDevice()>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	83 ec 08             	sub    esp,0x8
c001ea6d:	68 58 01 00 00       	push   0x158
c001ea72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea76:	e8 dc bd fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001ea7b:	83 c4 10             	add    esp,0x10
c001ea7e:	83 c4 0c             	add    esp,0xc
c001ea81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea82 <LinkedList<Device>::addElement(Device*)>:
c001ea82:	83 ec 0c             	sub    esp,0xc
c001ea85:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea8a:	75 10                	jne    c001ea9c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	68 04 fd 01 c0       	push   0xc001fd04
c001ea94:	e8 a6 1d ff ff       	call   c001083f <KePanic(char const*)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa2:	85 c0                	test   eax,eax
c001eaa4:	74 3a                	je     c001eae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eaa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaad:	85 c0                	test   eax,eax
c001eaaf:	74 2f                	je     c001eae0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001eab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001eac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eaca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eade:	eb 68                	jmp    c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eae6:	85 c0                	test   eax,eax
c001eae8:	75 4e                	jne    c001eb38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaf1:	85 c0                	test   eax,eax
c001eaf3:	75 43                	jne    c001eb38 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eafd:	89 10                	mov    DWORD PTR [eax],edx
c001eaff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb11:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb22:	85 c0                	test   eax,eax
c001eb24:	74 22                	je     c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb26:	83 ec 0c             	sub    esp,0xc
c001eb29:	68 26 fd 01 c0       	push   0xc001fd26
c001eb2e:	e8 0c 1d ff ff       	call   c001083f <KePanic(char const*)>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	eb 10                	jmp    c001eb48 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eb38:	83 ec 0c             	sub    esp,0xc
c001eb3b:	68 30 fd 01 c0       	push   0xc001fd30
c001eb40:	e8 fa 1c ff ff       	call   c001083f <KePanic(char const*)>
c001eb45:	83 c4 10             	add    esp,0x10
c001eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb4f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb56:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb59:	90                   	nop
c001eb5a:	83 c4 0c             	add    esp,0xc
c001eb5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb5e <LinkedList<Device>::LinkedList()>:
c001eb5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb77:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb82:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb97:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb9e:	90                   	nop
c001eb9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eba0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eba4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eba6:	85 c0                	test   eax,eax
c001eba8:	75 0e                	jne    c001ebb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebb1:	85 c0                	test   eax,eax
c001ebb3:	75 03                	jne    c001ebb8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebb5:	b0 01                	mov    al,0x1
c001ebb7:	c3                   	ret    
c001ebb8:	b0 00                	mov    al,0x0
c001ebba:	90                   	nop
c001ebbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ebbc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ebbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebc2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebc4:	83 ec 0c             	sub    esp,0xc
c001ebc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebcb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebcd:	85 c0                	test   eax,eax
c001ebcf:	75 17                	jne    c001ebe8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001ebd1:	83 ec 0c             	sub    esp,0xc
c001ebd4:	68 3c fd 01 c0       	push   0xc001fd3c
c001ebd9:	e8 61 1c ff ff       	call   c001083f <KePanic(char const*)>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	e9 96 00 00 00       	jmp    c001ec7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001ebe6:	66 90                	xchg   ax,ax
c001ebe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebf2:	85 c0                	test   eax,eax
c001ebf4:	0f 95 c0             	setne  al
c001ebf7:	0f b6 c0             	movzx  eax,al
c001ebfa:	85 c0                	test   eax,eax
c001ebfc:	74 12                	je     c001ec10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	68 87 fd 01 c0       	push   0xc001fd87
c001ec06:	e8 34 1c ff ff       	call   c001083f <KePanic(char const*)>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	66 90                	xchg   ax,ax
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec19:	85 c0                	test   eax,eax
c001ec1b:	0f 94 c0             	sete   al
c001ec1e:	0f b6 c0             	movzx  eax,al
c001ec21:	85 c0                	test   eax,eax
c001ec23:	74 33                	je     c001ec58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec41:	83 f8 01             	cmp    eax,0x1
c001ec44:	74 22                	je     c001ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec46:	83 ec 0c             	sub    esp,0xc
c001ec49:	68 60 fd 01 c0       	push   0xc001fd60
c001ec4e:	e8 ec 1b ff ff       	call   c001083f <KePanic(char const*)>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	eb 10                	jmp    c001ec68 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec65:	89 10                	mov    DWORD PTR [eax],edx
c001ec67:	90                   	nop
c001ec68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec6f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec79:	8d 76 00             	lea    esi,[esi+0x0]
c001ec7c:	83 c4 0c             	add    esp,0xc
c001ec7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec80 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec88:	75 12                	jne    c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec8a:	83 ec 0c             	sub    esp,0xc
c001ec8d:	68 04 fd 01 c0       	push   0xc001fd04
c001ec92:	e8 a8 1b ff ff       	call   c001083f <KePanic(char const*)>
c001ec97:	83 c4 10             	add    esp,0x10
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca2:	85 c0                	test   eax,eax
c001eca4:	74 36                	je     c001ecdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	74 2b                	je     c001ecdc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecbc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ecbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecc3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecd1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecd8:	eb 6a                	jmp    c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecda:	66 90                	xchg   ax,ax
c001ecdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ece0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ece2:	85 c0                	test   eax,eax
c001ece4:	75 4e                	jne    c001ed34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ece6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eced:	85 c0                	test   eax,eax
c001ecef:	75 43                	jne    c001ed34 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecf9:	89 10                	mov    DWORD PTR [eax],edx
c001ecfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed03:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ed06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed0d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed1b:	85 c0                	test   eax,eax
c001ed1d:	74 25                	je     c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 26 fd 01 c0       	push   0xc001fd26
c001ed27:	e8 13 1b ff ff       	call   c001083f <KePanic(char const*)>
c001ed2c:	83 c4 10             	add    esp,0x10
c001ed2f:	eb 13                	jmp    c001ed44 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ed31:	8d 76 00             	lea    esi,[esi+0x0]
c001ed34:	83 ec 0c             	sub    esp,0xc
c001ed37:	68 30 fd 01 c0       	push   0xc001fd30
c001ed3c:	e8 fe 1a ff ff       	call   c001083f <KePanic(char const*)>
c001ed41:	83 c4 10             	add    esp,0x10
c001ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed4b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed55:	90                   	nop
c001ed56:	83 c4 0c             	add    esp,0xc
c001ed59:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed5c <ACPI::~ACPI()>:
c001ed5c:	83 ec 0c             	sub    esp,0xc
c001ed5f:	ba a8 09 02 c0       	mov    edx,0xc00209a8
c001ed64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed68:	89 10                	mov    DWORD PTR [eax],edx
c001ed6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6e:	83 ec 0c             	sub    esp,0xc
c001ed71:	50                   	push   eax
c001ed72:	e8 15 cf fe ff       	call   c000bc8c <Device::~Device()>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	90                   	nop
c001ed7b:	83 c4 0c             	add    esp,0xc
c001ed7e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed80 <ACPI::~ACPI()>:
c001ed80:	83 ec 0c             	sub    esp,0xc
c001ed83:	83 ec 0c             	sub    esp,0xc
c001ed86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed8a:	e8 cd ff ff ff       	call   c001ed5c <ACPI::~ACPI()>
c001ed8f:	83 c4 10             	add    esp,0x10
c001ed92:	83 ec 08             	sub    esp,0x8
c001ed95:	68 64 12 00 00       	push   0x1264
c001ed9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed9e:	e8 b4 ba fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001eda3:	83 c4 10             	add    esp,0x10
c001eda6:	83 c4 0c             	add    esp,0xc
c001eda9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001edac <LinkedList<Device>::~LinkedList()>:
c001edac:	90                   	nop
c001edad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001edb0 <LinkedList<Device>::isEmpty()>:
c001edb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001edb6:	85 c0                	test   eax,eax
c001edb8:	75 0e                	jne    c001edc8 <LinkedList<Device>::isEmpty()+0x18>
c001edba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edc1:	85 c0                	test   eax,eax
c001edc3:	75 03                	jne    c001edc8 <LinkedList<Device>::isEmpty()+0x18>
c001edc5:	b0 01                	mov    al,0x1
c001edc7:	c3                   	ret    
c001edc8:	b0 00                	mov    al,0x0
c001edca:	90                   	nop
c001edcb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001edcc <LinkedList<Device>::getFirstElement()>:
c001edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001edd2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001edd4 <LinkedList<Device>::removeFirst()>:
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddb:	8b 00                	mov    eax,DWORD PTR [eax]
c001eddd:	85 c0                	test   eax,eax
c001eddf:	75 17                	jne    c001edf8 <LinkedList<Device>::removeFirst()+0x24>
c001ede1:	83 ec 0c             	sub    esp,0xc
c001ede4:	68 3c fd 01 c0       	push   0xc001fd3c
c001ede9:	e8 51 1a ff ff       	call   c001083f <KePanic(char const*)>
c001edee:	83 c4 10             	add    esp,0x10
c001edf1:	e9 92 00 00 00       	jmp    c001ee88 <LinkedList<Device>::removeFirst()+0xb4>
c001edf6:	66 90                	xchg   ax,ax
c001edf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edff:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee05:	85 c0                	test   eax,eax
c001ee07:	74 13                	je     c001ee1c <LinkedList<Device>::removeFirst()+0x48>
c001ee09:	83 ec 0c             	sub    esp,0xc
c001ee0c:	68 87 fd 01 c0       	push   0xc001fd87
c001ee11:	e8 29 1a ff ff       	call   c001083f <KePanic(char const*)>
c001ee16:	83 c4 10             	add    esp,0x10
c001ee19:	8d 76 00             	lea    esi,[esi+0x0]
c001ee1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee20:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee22:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ee28:	85 c0                	test   eax,eax
c001ee2a:	75 34                	jne    c001ee60 <LinkedList<Device>::removeFirst()+0x8c>
c001ee2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ee36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee48:	83 f8 01             	cmp    eax,0x1
c001ee4b:	74 27                	je     c001ee74 <LinkedList<Device>::removeFirst()+0xa0>
c001ee4d:	83 ec 0c             	sub    esp,0xc
c001ee50:	68 60 fd 01 c0       	push   0xc001fd60
c001ee55:	e8 e5 19 ff ff       	call   c001083f <KePanic(char const*)>
c001ee5a:	83 c4 10             	add    esp,0x10
c001ee5d:	eb 15                	jmp    c001ee74 <LinkedList<Device>::removeFirst()+0xa0>
c001ee5f:	90                   	nop
c001ee60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee66:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee70:	89 10                	mov    DWORD PTR [eax],edx
c001ee72:	66 90                	xchg   ax,ax
c001ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee7b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee85:	8d 76 00             	lea    esi,[esi+0x0]
c001ee88:	83 c4 0c             	add    esp,0xc
c001ee8b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee8c <CPU::~CPU()>:
c001ee8c:	83 ec 0c             	sub    esp,0xc
c001ee8f:	ba 44 0b 02 c0       	mov    edx,0xc0020b44
c001ee94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee98:	89 10                	mov    DWORD PTR [eax],edx
c001ee9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee9e:	83 ec 0c             	sub    esp,0xc
c001eea1:	50                   	push   eax
c001eea2:	e8 e5 cd fe ff       	call   c000bc8c <Device::~Device()>
c001eea7:	83 c4 10             	add    esp,0x10
c001eeaa:	90                   	nop
c001eeab:	83 c4 0c             	add    esp,0xc
c001eeae:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001eeb0 <CPU::~CPU()>:
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	83 ec 0c             	sub    esp,0xc
c001eeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeba:	e8 cd ff ff ff       	call   c001ee8c <CPU::~CPU()>
c001eebf:	83 c4 10             	add    esp,0x10
c001eec2:	83 ec 08             	sub    esp,0x8
c001eec5:	68 94 11 00 00       	push   0x1194
c001eeca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eece:	e8 84 b9 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001eed3:	83 c4 10             	add    esp,0x10
c001eed6:	83 c4 0c             	add    esp,0xc
c001eed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001eedc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001eedc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eee0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eee3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eee4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eee4:	90                   	nop
c001eee5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eee8 <ThreadControlBlock::ThreadControlBlock()>:
c001eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eef3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ef09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef18:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ef1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef23:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ef27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ef2f:	90                   	nop
c001ef30:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ef34 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef74:	90                   	nop
c001ef75:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef76 <PCI::~PCI()>:
c001ef76:	83 ec 0c             	sub    esp,0xc
c001ef79:	ba a4 19 02 c0       	mov    edx,0xc00219a4
c001ef7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef82:	89 10                	mov    DWORD PTR [eax],edx
c001ef84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef88:	83 ec 0c             	sub    esp,0xc
c001ef8b:	50                   	push   eax
c001ef8c:	e8 93 c7 fe ff       	call   c000b724 <Bus::~Bus()>
c001ef91:	83 c4 10             	add    esp,0x10
c001ef94:	90                   	nop
c001ef95:	83 c4 0c             	add    esp,0xc
c001ef98:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef9a <PCI::~PCI()>:
c001ef9a:	83 ec 0c             	sub    esp,0xc
c001ef9d:	83 ec 0c             	sub    esp,0xc
c001efa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efa4:	e8 cd ff ff ff       	call   c001ef76 <PCI::~PCI()>
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	83 ec 08             	sub    esp,0x8
c001efaf:	68 5c 01 00 00       	push   0x15c
c001efb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb8:	e8 9a b8 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	83 c4 0c             	add    esp,0xc
c001efc3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001efc4 <IDE::~IDE()>:
c001efc4:	83 ec 0c             	sub    esp,0xc
c001efc7:	ba 58 1a 02 c0       	mov    edx,0xc0021a58
c001efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd0:	89 10                	mov    DWORD PTR [eax],edx
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	83 ec 0c             	sub    esp,0xc
c001efd9:	50                   	push   eax
c001efda:	e8 21 d1 fe ff       	call   c000c100 <HardDiskController::~HardDiskController()>
c001efdf:	83 c4 10             	add    esp,0x10
c001efe2:	90                   	nop
c001efe3:	83 c4 0c             	add    esp,0xc
c001efe6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001efe8 <IDE::~IDE()>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	83 ec 0c             	sub    esp,0xc
c001efee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eff2:	e8 cd ff ff ff       	call   c001efc4 <IDE::~IDE()>
c001eff7:	83 c4 10             	add    esp,0x10
c001effa:	83 ec 08             	sub    esp,0x8
c001effd:	68 70 02 00 00       	push   0x270
c001f002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f006:	e8 4c b8 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f00b:	83 c4 10             	add    esp,0x10
c001f00e:	83 c4 0c             	add    esp,0xc
c001f011:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001f012 <SATABus::~SATABus()>:
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01e:	89 10                	mov    DWORD PTR [eax],edx
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	83 ec 0c             	sub    esp,0xc
c001f027:	50                   	push   eax
c001f028:	e8 d3 d0 fe ff       	call   c000c100 <HardDiskController::~HardDiskController()>
c001f02d:	83 c4 10             	add    esp,0x10
c001f030:	90                   	nop
c001f031:	83 c4 0c             	add    esp,0xc
c001f034:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001f036 <SATABus::~SATABus()>:
c001f036:	83 ec 0c             	sub    esp,0xc
c001f039:	83 ec 0c             	sub    esp,0xc
c001f03c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f040:	e8 cd ff ff ff       	call   c001f012 <SATABus::~SATABus()>
c001f045:	83 c4 10             	add    esp,0x10
c001f048:	83 ec 08             	sub    esp,0x8
c001f04b:	68 64 01 00 00       	push   0x164
c001f050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f054:	e8 fe b7 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f059:	83 c4 10             	add    esp,0x10
c001f05c:	83 c4 0c             	add    esp,0xc
c001f05f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f060 <ATA::~ATA()>:
c001f060:	83 ec 0c             	sub    esp,0xc
c001f063:	ba e8 1a 02 c0       	mov    edx,0xc0021ae8
c001f068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06c:	89 10                	mov    DWORD PTR [eax],edx
c001f06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f072:	83 ec 0c             	sub    esp,0xc
c001f075:	50                   	push   eax
c001f076:	e8 67 d1 fe ff       	call   c000c1e2 <PhysicalDisk::~PhysicalDisk()>
c001f07b:	83 c4 10             	add    esp,0x10
c001f07e:	90                   	nop
c001f07f:	83 c4 0c             	add    esp,0xc
c001f082:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f084 <ATA::~ATA()>:
c001f084:	83 ec 0c             	sub    esp,0xc
c001f087:	83 ec 0c             	sub    esp,0xc
c001f08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08e:	e8 cd ff ff ff       	call   c001f060 <ATA::~ATA()>
c001f093:	83 c4 10             	add    esp,0x10
c001f096:	83 ec 08             	sub    esp,0x8
c001f099:	68 7c 01 00 00       	push   0x17c
c001f09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0a2:	e8 b0 b7 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f0a7:	83 c4 10             	add    esp,0x10
c001f0aa:	83 c4 0c             	add    esp,0xc
c001f0ad:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f0ae <ATAPI::~ATAPI()>:
c001f0ae:	83 ec 0c             	sub    esp,0xc
c001f0b1:	ba 30 1b 02 c0       	mov    edx,0xc0021b30
c001f0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ba:	89 10                	mov    DWORD PTR [eax],edx
c001f0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c0:	83 ec 0c             	sub    esp,0xc
c001f0c3:	50                   	push   eax
c001f0c4:	e8 19 d1 fe ff       	call   c000c1e2 <PhysicalDisk::~PhysicalDisk()>
c001f0c9:	83 c4 10             	add    esp,0x10
c001f0cc:	90                   	nop
c001f0cd:	83 c4 0c             	add    esp,0xc
c001f0d0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f0d2 <ATAPI::~ATAPI()>:
c001f0d2:	83 ec 0c             	sub    esp,0xc
c001f0d5:	83 ec 0c             	sub    esp,0xc
c001f0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0dc:	e8 cd ff ff ff       	call   c001f0ae <ATAPI::~ATAPI()>
c001f0e1:	83 c4 10             	add    esp,0x10
c001f0e4:	83 ec 08             	sub    esp,0x8
c001f0e7:	68 84 01 00 00       	push   0x184
c001f0ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0f0:	e8 62 b7 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f0f5:	83 c4 10             	add    esp,0x10
c001f0f8:	83 c4 0c             	add    esp,0xc
c001f0fb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0fc <SATA::~SATA()>:
c001f0fc:	83 ec 0c             	sub    esp,0xc
c001f0ff:	ba e4 1b 02 c0       	mov    edx,0xc0021be4
c001f104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f108:	89 10                	mov    DWORD PTR [eax],edx
c001f10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10e:	83 ec 0c             	sub    esp,0xc
c001f111:	50                   	push   eax
c001f112:	e8 cb d0 fe ff       	call   c000c1e2 <PhysicalDisk::~PhysicalDisk()>
c001f117:	83 c4 10             	add    esp,0x10
c001f11a:	90                   	nop
c001f11b:	83 c4 0c             	add    esp,0xc
c001f11e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f120 <SATA::~SATA()>:
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	83 ec 0c             	sub    esp,0xc
c001f126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f12a:	e8 cd ff ff ff       	call   c001f0fc <SATA::~SATA()>
c001f12f:	83 c4 10             	add    esp,0x10
c001f132:	83 ec 08             	sub    esp,0x8
c001f135:	68 7c 01 00 00       	push   0x17c
c001f13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13e:	e8 14 b7 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	83 c4 0c             	add    esp,0xc
c001f149:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f14a <SATAPI::~SATAPI()>:
c001f14a:	83 ec 0c             	sub    esp,0xc
c001f14d:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001f152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f156:	89 10                	mov    DWORD PTR [eax],edx
c001f158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15c:	83 ec 0c             	sub    esp,0xc
c001f15f:	50                   	push   eax
c001f160:	e8 7d d0 fe ff       	call   c000c1e2 <PhysicalDisk::~PhysicalDisk()>
c001f165:	83 c4 10             	add    esp,0x10
c001f168:	90                   	nop
c001f169:	83 c4 0c             	add    esp,0xc
c001f16c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f16e <SATAPI::~SATAPI()>:
c001f16e:	83 ec 0c             	sub    esp,0xc
c001f171:	83 ec 0c             	sub    esp,0xc
c001f174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f178:	e8 cd ff ff ff       	call   c001f14a <SATAPI::~SATAPI()>
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	83 ec 08             	sub    esp,0x8
c001f183:	68 84 01 00 00       	push   0x184
c001f188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f18c:	e8 c6 b6 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f191:	83 c4 10             	add    esp,0x10
c001f194:	83 c4 0c             	add    esp,0xc
c001f197:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f198 <IOAPIC::~IOAPIC()>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	ba 48 1d 02 c0       	mov    edx,0xc0021d48
c001f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a4:	89 10                	mov    DWORD PTR [eax],edx
c001f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1aa:	83 ec 0c             	sub    esp,0xc
c001f1ad:	50                   	push   eax
c001f1ae:	e8 d9 ca fe ff       	call   c000bc8c <Device::~Device()>
c001f1b3:	83 c4 10             	add    esp,0x10
c001f1b6:	90                   	nop
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f1bc <IOAPIC::~IOAPIC()>:
c001f1bc:	83 ec 0c             	sub    esp,0xc
c001f1bf:	83 ec 0c             	sub    esp,0xc
c001f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1c6:	e8 cd ff ff ff       	call   c001f198 <IOAPIC::~IOAPIC()>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 ec 08             	sub    esp,0x8
c001f1d1:	68 68 01 00 00       	push   0x168
c001f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1da:	e8 78 b6 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f1df:	83 c4 10             	add    esp,0x10
c001f1e2:	83 c4 0c             	add    esp,0xc
c001f1e5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1e8 <APICTimer::~APICTimer()>:
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	ba 90 1d 02 c0       	mov    edx,0xc0021d90
c001f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1f4:	89 10                	mov    DWORD PTR [eax],edx
c001f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	50                   	push   eax
c001f1fe:	e8 61 e5 fe ff       	call   c000d764 <Timer::~Timer()>
c001f203:	83 c4 10             	add    esp,0x10
c001f206:	90                   	nop
c001f207:	83 c4 0c             	add    esp,0xc
c001f20a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f20c <APICTimer::~APICTimer()>:
c001f20c:	83 ec 0c             	sub    esp,0xc
c001f20f:	83 ec 0c             	sub    esp,0xc
c001f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f216:	e8 cd ff ff ff       	call   c001f1e8 <APICTimer::~APICTimer()>
c001f21b:	83 c4 10             	add    esp,0x10
c001f21e:	83 ec 08             	sub    esp,0x8
c001f221:	68 60 01 00 00       	push   0x160
c001f226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f22a:	e8 28 b6 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f22f:	83 c4 10             	add    esp,0x10
c001f232:	83 c4 0c             	add    esp,0xc
c001f235:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f238 <PIT::~PIT()>:
c001f238:	83 ec 0c             	sub    esp,0xc
c001f23b:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c001f240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f244:	89 10                	mov    DWORD PTR [eax],edx
c001f246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f24a:	83 ec 0c             	sub    esp,0xc
c001f24d:	50                   	push   eax
c001f24e:	e8 11 e5 fe ff       	call   c000d764 <Timer::~Timer()>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	90                   	nop
c001f257:	83 c4 0c             	add    esp,0xc
c001f25a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f25c <PIT::~PIT()>:
c001f25c:	83 ec 0c             	sub    esp,0xc
c001f25f:	83 ec 0c             	sub    esp,0xc
c001f262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f266:	e8 cd ff ff ff       	call   c001f238 <PIT::~PIT()>
c001f26b:	83 c4 10             	add    esp,0x10
c001f26e:	83 ec 08             	sub    esp,0x8
c001f271:	68 5c 01 00 00       	push   0x15c
c001f276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f27a:	e8 d8 b5 fe ff       	call   c000a857 <operator delete(void*, unsigned long)>
c001f27f:	83 c4 10             	add    esp,0x10
c001f282:	83 c4 0c             	add    esp,0xc
c001f285:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 35 0c 02 c0       	mov    esi,0xc0020c35
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	8d 44 24 04          	lea    eax,[esp+0x4]
c0023018:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 51 0c 02 c0       	mov    esi,0xc0020c51
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
