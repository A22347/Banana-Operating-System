
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5d 9d 00 00       	call   c0009d7d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 35 15 02 00       	call   c002155a <_init>
c0000025:	c3                   	ret    
c0000026:	bb 06 20 02 c0       	mov    ebx,0xc0022006
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 14 20 02 c0    	cmp    ebx,0xc0022014
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e4 5c 02 c0       	mov    eax,0xc0025ce4
c0000049:	3d e4 5c 02 c0       	cmp    eax,0xc0025ce4
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e4 5c 02 c0       	push   0xc0025ce4
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e4 5c 02 c0       	mov    eax,0xc0025ce4
c0000075:	2d e4 5c 02 c0       	sub    eax,0xc0025ce4
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e4 5c 02 c0       	push   0xc0025ce4
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025e6c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 1c 20 02 c0       	mov    ebx,0xc002201c
c00000bb:	81 eb 18 20 02 c0    	sub    ebx,0xc0022018
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 18 20 02 c0       	mov    esi,0xc0022018
c00000ca:	a1 70 5e 02 c0       	mov    eax,ds:0xc0025e70
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 5e 02 c0       	mov    ds:0xc0025e70,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 5e 02 c0       	mov    eax,ds:0xc0025e70
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e4 5c 02 c0       	push   0xc0025ce4
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025e6c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 5e 02 c0       	push   0xc0025e74
c000012c:	68 e4 5c 02 c0       	push   0xc0025ce4
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 c0 5f 01 00       	call   c0016290 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 4a ca 00 00       	call   c000cd32 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 9e 5f 01 00       	call   c0016290 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 5f 64 01 00       	call   c0016770 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 a2 6a 01 00       	call   c0016dbc <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 62 02 c0 	lgdtd  ds:0xc00262b0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 49 e4 00 00       	call   c000e958 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 8c 5e 02 c0       	mov    ds:0xc0025e8c,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 8c 5e 02 c0    	mov    DWORD PTR ds:0xc0025e8c,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 8c 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025e8c
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 20 20 02 c0 02 	test   BYTE PTR [edx-0x3ffddfe0],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 20 20 02 c0 01 	test   BYTE PTR [edx-0x3ffddfe0],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 20 20 02 c0 08 	test   BYTE PTR [edx-0x3ffddfe0],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 20 20 02 c0 04 	test   BYTE PTR [ebx-0x3ffddfe0],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 20 20 02 c0 01 	test   BYTE PTR [edx-0x3ffddfe0],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d a0 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ea0
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d a0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ea0,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 a4 5e 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffda15c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 a4 5e 02 c0 	mov    DWORD PTR [eax*4-0x3ffda15c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d a0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ea0,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 cc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025ecc,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d dc 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025edc
c0000d64:	c7 42 0c d4 5e 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025ed4
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 cc 5e 02 c0    	mov    DWORD PTR ds:0xc0025ecc,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 a0 5e 02 c0 02 	test   BYTE PTR ds:0xc0025ea0,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 3b 8d 00 00       	call   c0009b80 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 7d 8c 00 00       	call   c0009b80 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 67 8c 00 00       	call   c0009b80 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 43 8c 00 00       	call   c0009b80 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d a0 5e 02 c0    	mov    edi,DWORD PTR ds:0xc0025ea0
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 a4 5e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda15c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 a4 5e 02 c0 	mov    DWORD PTR [edx*4-0x3ffda15c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 d4 5e 02 c0 	lea    edx,[eax*8-0x3ffda12c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d e0 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ee0
c00010e6:	81 fb d4 5e 02 c0    	cmp    ebx,0xc0025ed4
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d d4 5e 02 c0       	cmp    eax,0xc0025ed4
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d d0 5e 02 c0    	cmp    DWORD PTR ds:0xc0025ed0,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 dc 5e 02 c0       	mov    ds:0xc0025edc,eax
c0001122:	a3 e0 5e 02 c0       	mov    ds:0xc0025ee0,eax
c0001127:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 d4 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ed4
c0001135:	c7 40 0c d4 5e 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025ed4
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 e0 5e 02 c0       	mov    ds:0xc0025ee0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 d4 5e 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025ed4
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 98 5e 02 c0 	lea    ebp,[edx*4-0x3ffda168]
c0001186:	8b 14 95 a0 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda160]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 a0 5e 02 c0 	lea    ecx,[edx*4-0x3ffda160]
c00011a1:	8b 14 95 a0 5e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda160]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd d4 61 02 c0 	or     DWORD PTR [edi*4-0x3ffd9e2c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 d4 5e 02 c0 	lea    eax,[eax*8-0x3ffda12c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ecx
c000125b:	89 0d e0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee0,ecx
c0001261:	c7 41 08 d4 5e 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025ed4
c0001268:	c7 41 0c d4 5e 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025ed4
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd cc 5e 02 c0 	lea    edx,[ecx*8-0x3ffda134]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d d4 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e2c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d d4 61 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9e2c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 cc 5e 02 c0 	lea    edx,[eax*4-0x3ffda134]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d d4 61 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9e2c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,edi
c000132e:	89 3d e0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee0,edi
c0001334:	c7 47 08 d4 5e 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025ed4
c000133b:	c7 47 0c d4 5e 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025ed4
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d d0 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed0,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 cc 5e 02 c0       	mov    eax,ds:0xc0025ecc
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d cc 5e 02 c0    	mov    DWORD PTR ds:0xc0025ecc,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba a0 5e 02 c0       	mov    edx,0xc0025ea0
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d a0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ea0,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d f4 61 02 c0    	mov    ebx,DWORD PTR ds:0xc00261f4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 f4 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261f4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d f4 61 02 c0    	mov    DWORD PTR ds:0xc00261f4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 cc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025ecc,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d cc 5e 02 c0    	mov    DWORD PTR ds:0xc0025ecc,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d a0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ea0,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 fc 61 02 c0    	push   DWORD PTR ds:0xc00261fc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d a0 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ea0,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 fc 61 02 c0       	mov    eax,ds:0xc00261fc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d cc 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025ecc,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 cc 5e 02 c0       	mov    eax,ds:0xc0025ecc
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 a4 5e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda15c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 d4 5e 02 c0       	mov    eax,0xc0025ed4
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d cc 61 02 c0       	cmp    eax,0xc00261cc
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 08 62 02 c0       	mov    eax,ds:0xc0026208
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 f0 61 02 c0    	mov    esi,DWORD PTR ds:0xc00261f0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 04 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026204
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 14 62 02 c0    	mov    esi,DWORD PTR ds:0xc0026214
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 24 21 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddedc]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 a0 5e 02 c0       	mov    eax,ds:0xc0025ea0
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 a0 5e 02 c0       	mov    ds:0xc0025ea0,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d e4 61 02 c0    	mov    DWORD PTR ds:0xc00261e4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d e8 61 02 c0    	mov    DWORD PTR ds:0xc00261e8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d ec 61 02 c0    	mov    DWORD PTR ds:0xc00261ec,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 f4 61 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00261f4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 6a 93 01 00       	jmp    c001ae88 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 9c 93 01 00       	jmp    c001aed0 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 60 99 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd66a0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 c5 93 01 00       	jmp    c001af18 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 0a f5 01 00       	call   c0021340 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 40 22 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdddc0]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 40 22 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdddc0]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba 40 21 02 c0       	mov    edx,0xc0022140
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba b5 4b 02 c0       	mov    edx,0xc0024bb5
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba 50 22 02 c0       	mov    edx,0xc0022250
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 40 62 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9dc0]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 20 62 02 c0    	mov    ax,ds:0xc0026220
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 20 62 02 c0    	mov    ds:0xc0026220,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 07 e3 01 00       	call   c0021340 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 72 22 02 c0       	mov    eax,0xc0022272
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad c0 21 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdde40]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 7b 22 02 c0       	mov    eax,0xc002227b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 40 22 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdddc0]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 d2 cc 01 00       	call   c0021340 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba 50 22 02 c0       	mov    edx,0xc0022250
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba 40 21 02 c0       	mov    edx,0xc0022140
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba 50 21 02 c0       	mov    edx,0xc0022150
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 40 62 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9dc0]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 40 62 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9dc0],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 99 b6 01 00       	call   c0021340 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 7f b6 01 00       	call   c0021340 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 97 21 02 c0       	mov    eax,0xc0022197
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 90 21 02 c0       	mov    eax,0xc0022190
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 18 a2 01 00       	call   c0021340 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 40 62 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9dc0]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 80 21 02 c0       	mov    esi,0xc0022180
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 8c 9b 01 00       	call   c0021340 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 60 21 02 c0       	mov    edx,0xc0022160
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 70 21 02 c0       	mov    edx,0xc0022170
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 82 22 02 c0       	mov    edx,0xc0022282
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 8e 22 02 c0       	mov    edx,0xc002228e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba a2 22 02 c0       	mov    edx,0xc00222a2
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 ec 16 00 00       	call   c0009cb7 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 e4 16 00 00       	call   c0009cc7 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c c0 25 02 c0 	mov    DWORD PTR [esp+0xc],0xc00225c0
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 c0 25 02 c0 	mov    DWORD PTR [esp+0x10],0xc00225c0
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 c0 23 02 c0       	mov    eax,0xc00223c0
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 00 23 02 c0       	mov    eax,0xc0022300
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 c0 22 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddd40]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 46 14 00 00       	jmp    c0009cb7 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 61 14 00 00       	jmp    c0009cd7 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0008883:	48                   	dec    eax
c0008884:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000889a:	48                   	dec    eax
c000889b:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00088ab:	ff 05 c4 97 02 c0    	inc    DWORD PTR ds:0xc00297c4
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00088ba:	48                   	dec    eax
c00088bb:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d c0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297c0,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c00088d5:	e8 02 e1 00 00       	call   c00169dc <schedule()>
c00088da:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00088df:	48                   	dec    eax
c00088e0:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 d4 63 02 c0       	mov    eax,ds:0xc00263d4
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 c0 26 02 c0       	push   0xc00226c0
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 a8 62 02 c0       	mov    eax,0xc00262a8
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 c9 26 02 c0       	push   0xc00226c9
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 40 13 02 c0       	mov    eax,0xc0021340
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 d3 26 02 c0       	push   0xc00226d3
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 74 10 02 c0       	mov    eax,0xc0021074
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 dc 26 02 c0       	push   0xc00226dc
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 40 14 02 c0       	mov    eax,0xc0021440
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 e6 26 02 c0       	push   0xc00226e6
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 c0 11 02 c0       	mov    eax,0xc00211c0
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 ef 26 02 c0       	push   0xc00226ef
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 ac 62 02 c0       	mov    eax,0xc00262ac
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 fc 26 02 c0       	push   0xc00226fc
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 ad 62 02 c0       	mov    eax,0xc00262ad
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 8f 5b 00 00       	call   c000e5cc <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 09 27 02 c0       	push   0xc0022709
c0008a6d:	e8 9f 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 20 27 02 c0 	mov    DWORD PTR [esp],0xc0022720
c0008a7a:	e8 92 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 2c 12 00 00       	call   c0009cb7 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c0008a9a:	68 39 27 02 c0       	push   0xc0022739
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 11 db 00 00       	call   c00165b8 <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 01 97 00 c0       	push   0xc0009701
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 04 dd 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 04 72 01 c0       	push   0xc0017204
c0008ac5:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c0008acb:	e8 f0 dc 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 a8 97 02 c0       	mov    ds:0xc00297a8,eax
c0008ad8:	68 84 29 02 c0       	push   0xc0022984
c0008add:	c6 05 ad 62 02 c0 01 	mov    BYTE PTR ds:0xc00262ad,0x1
c0008ae4:	e8 28 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 f1 ea 00 00       	call   c00175df <Vm::initialise8086()>
c0008aee:	e8 69 48 00 00       	call   c000d35c <Fs::initVFS()>
c0008af3:	c7 04 24 46 27 02 c0 	mov    DWORD PTR [esp],0xc0022746
c0008afa:	e8 12 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 84 29 02 c0       	push   0xc0022984
c0008b1e:	e8 ee 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 04 c3 00 00       	call   c0014e2c <Sys::loadSyscalls()>
c0008b28:	e8 41 a7 00 00       	call   c001326e <Krnl::loadSystemEnv()>
c0008b2d:	e8 93 ab 00 00       	call   c00136c5 <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 60 27 02 c0       	push   0xc0022760
c0008b3c:	68 69 27 02 c0       	push   0xc0022769
c0008b41:	e8 a9 b0 00 00       	call   c0013bef <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 6a 53 00 00       	call   c000deb8 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 a8 29 02 c0 	mov    DWORD PTR [esp],0xc00229a8
c0008b55:	e8 b7 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 21 5a 00 00       	call   c000e58c <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 71 27 02 c0 	mov    DWORD PTR [esp],0xc0022771
c0008b72:	e8 9a 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 5a a2 00 00       	call   c0012dd6 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 8b 27 02 c0 	mov    DWORD PTR [esp],0xc002278b
c0008b83:	e8 89 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 9c 27 02 c0       	push   0xc002279c
c0008b97:	e8 60 d4 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 88 d6 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 22 e0 00 00       	call   c0016bd4 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 b8 27 02 c0       	push   0xc00227b8
c0008bc7:	50                   	push   eax
c0008bc8:	e8 79 5a 00 00       	call   c000e646 <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba 18 2a 02 c0       	mov    edx,0xc0022a18
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 c1 62 02 c0 04 	test   BYTE PTR ds:0xc00262c1,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 a5 82 01 00       	call   c0021006 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 54 92 00 00       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 2d 92 00 00       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 0b 92 00 00       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 e9 91 00 00       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 c0 62 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00262c0,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 f7 90 00 00       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 d2 90 00 00       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 0f 81 01 00       	call   c0020fc0 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 4c 80 01 00       	call   c0020f20 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 ee 90 00 00       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 c8 27 02 c0       	push   0xc00227c8
c0008f2d:	e8 93 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 db 27 02 c0       	push   0xc00227db
c0008f50:	e8 70 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 ec 27 02 c0       	push   0xc00227ec
c0008f73:	e8 4d 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 fd 27 02 c0       	push   0xc00227fd
c0008f96:	e8 2a 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 0e 28 02 c0       	push   0xc002280e
c0008fb9:	e8 07 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 1f 28 02 c0       	push   0xc002281f
c0008fdc:	e8 e4 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 30 28 02 c0       	push   0xc0022830
c0008fff:	e8 c1 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 41 28 02 c0       	push   0xc0022841
c0009022:	e8 9e 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 52 28 02 c0       	push   0xc0022852
c0009045:	e8 7b 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 63 28 02 c0       	push   0xc0022863
c0009068:	e8 58 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 74 28 02 c0       	push   0xc0022874
c000908b:	e8 35 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 85 28 02 c0       	push   0xc0022885
c00090ae:	e8 12 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 96 28 02 c0       	push   0xc0022896
c00090d1:	e8 ef 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 a7 28 02 c0       	push   0xc00228a7
c00090f4:	e8 cc 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 b8 28 02 c0       	push   0xc00228b8
c0009117:	e8 a9 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 c9 28 02 c0       	push   0xc00228c9
c000913a:	e8 86 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 da 28 02 c0       	push   0xc00228da
c000915d:	e8 63 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 eb 28 02 c0       	push   0xc00228eb
c0009180:	e8 40 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 c5 27 02 c0       	mov    eax,0xc00227c5
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 fc 28 02 c0       	push   0xc00228fc
c000919f:	e8 21 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 bb 40 02 c0 	mov    DWORD PTR [esp+0x20],0xc00240bb
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 10 3e 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 c1 27 02 c0       	mov    eax,0xc00227c1
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 0d 29 02 c0       	push   0xc002290d
c0009288:	e8 ea a0 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 13 29 02 c0       	push   0xc0022913
c00092c0:	e8 b2 a0 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 f3 86 00 00       	jmp    c0011a00 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 c8 29 02 c0       	push   0xc00229c8
c000935a:	e8 b2 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 c0 62 02 c0 04 	test   BYTE PTR ds:0xc00262c0,0x4
c0009366:	c7 04 24 19 29 02 c0 	mov    DWORD PTR [esp],0xc0022919
c000936d:	0f 94 05 40 59 02 c0 	sete   BYTE PTR ds:0xc0025940
c0009374:	e8 98 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 32 09 00 00       	call   c0009cb7 <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 29 7f 00 00       	call   c00112b8 <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 a4 50 00 00       	call   c000e442 <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 71 27 02 c0 	mov    DWORD PTR [esp],0xc0022771
c00093bf:	e8 4d 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00093cb:	e8 e7 08 00 00       	call   c0009cb7 <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 ce 8c 00 00       	call   c00120a8 <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 59 50 00 00       	call   c000e442 <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 14             	add    esp,0x14
c0009400:	68 ec 29 02 c0       	push   0xc00229ec
c0009405:	e8 07 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000940a:	e8 5b 09 01 00       	call   c0019d6a <Hal::initialiseCoprocessor()>
c000940f:	c7 04 24 31 29 02 c0 	mov    DWORD PTR [esp],0xc0022931
c0009416:	e8 f6 08 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000941b:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c0009422:	e8 ad d4 00 00       	call   c00168d4 <setupMultitasking(void (*)())>
c0009427:	83 c4 14             	add    esp,0x14
c000942a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000942f:	5b                   	pop    ebx
c0009430:	5e                   	pop    esi
c0009431:	c3                   	ret    

c0009432 <Computer::disableNMI()>:
c0009432:	6a 00                	push   0x0
c0009434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009438:	e8 f7 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c000943d:	58                   	pop    eax
c000943e:	5a                   	pop    edx
c000943f:	c3                   	ret    

c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009444:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000944b:	19 c0                	sbb    eax,eax
c000944d:	83 e0 80             	and    eax,0xffffff80
c0009450:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009454:	e6 70                	out    0x70,al
c0009456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000945a:	e6 71                	out    0x71,al
c000945c:	c3                   	ret    
c000945d:	90                   	nop

c000945e <Computer::handleNMI()>:
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 10             	sub    esp,0x10
c0009463:	e4 92                	in     al,0x92
c0009465:	89 c6                	mov    esi,eax
c0009467:	e4 61                	in     al,0x61
c0009469:	68 4c 29 02 c0       	push   0xc002294c
c000946e:	88 c3                	mov    bl,al
c0009470:	e8 50 3b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 e6 10             	and    esi,0x10
c000947b:	75 0d                	jne    c000948a <Computer::handleNMI()+0x2c>
c000947d:	f6 c3 40             	test   bl,0x40
c0009480:	75 1d                	jne    c000949f <Computer::handleNMI()+0x41>
c0009482:	84 db                	test   bl,bl
c0009484:	78 2d                	js     c00094b3 <Computer::handleNMI()+0x55>
c0009486:	58                   	pop    eax
c0009487:	5b                   	pop    ebx
c0009488:	5e                   	pop    esi
c0009489:	c3                   	ret    
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 5d 29 02 c0       	push   0xc002295d
c0009492:	e8 e0 9e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	f6 c3 40             	test   bl,0x40
c000949d:	74 e3                	je     c0009482 <Computer::handleNMI()+0x24>
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	68 6a 29 02 c0       	push   0xc002296a
c00094a7:	e8 cb 9e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	84 db                	test   bl,bl
c00094b1:	79 d3                	jns    c0009486 <Computer::handleNMI()+0x28>
c00094b3:	c7 44 24 10 74 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022974
c00094bb:	5a                   	pop    edx
c00094bc:	5b                   	pop    ebx
c00094bd:	5e                   	pop    esi
c00094be:	e9 b4 9e 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c00094c3:	90                   	nop

c00094c4 <Computer::setDiskActivityLight(int, bool)>:
c00094c4:	56                   	push   esi
c00094c5:	53                   	push   ebx
c00094c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094cf:	77 1b                	ja     c00094ec <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d1:	e4 92                	in     al,0x92
c00094d3:	bb 40 00 00 00       	mov    ebx,0x40
c00094d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094dc:	89 da                	mov    edx,ebx
c00094de:	d3 e2                	shl    edx,cl
c00094e0:	89 f1                	mov    ecx,esi
c00094e2:	f7 d2                	not    edx
c00094e4:	d3 e3                	shl    ebx,cl
c00094e6:	21 d0                	and    eax,edx
c00094e8:	09 d8                	or     eax,ebx
c00094ea:	e6 92                	out    0x92,al
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <GDTEntry::setBase(unsigned int)>:
c00094f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094f8:	89 c1                	mov    ecx,eax
c00094fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00094fe:	c1 e9 10             	shr    ecx,0x10
c0009501:	c1 e8 18             	shr    eax,0x18
c0009504:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009507:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <GDTEntry::setLimit(unsigned int)>:
c000950c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009514:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009517:	66 89 01             	mov    WORD PTR [ecx],ax
c000951a:	83 e2 f0             	and    edx,0xfffffff0
c000951d:	c1 e8 10             	shr    eax,0x10
c0009520:	83 e0 0f             	and    eax,0xf
c0009523:	09 d0                	or     eax,edx
c0009525:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <GDT::GDT()>:
c000952a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009538:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953e:	90                   	nop
c000953f:	c3                   	ret    

c0009540 <GDT::addEntry(GDTEntry)>:
c0009540:	53                   	push   ebx
c0009541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009549:	8b 02                	mov    eax,DWORD PTR [edx]
c000954b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000954f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009553:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009557:	8d 48 01             	lea    ecx,[eax+0x1]
c000955a:	c1 e0 03             	shl    eax,0x3
c000955d:	89 0a                	mov    DWORD PTR [edx],ecx
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <GDT::getNumberOfEntries()>:
c0009562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009566:	8b 00                	mov    eax,DWORD PTR [eax]
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::flush()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	83 c0 04             	add    eax,0x4
c0009573:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000957a:	a3 b2 62 02 c0       	mov    ds:0xc00262b2,eax
c000957f:	66 89 15 b0 62 02 c0 	mov    WORD PTR ds:0xc00262b0,dx
c0009586:	e9 f2 6d ff ff       	jmp    c000037d <loadGDT>
c000958b:	90                   	nop

c000958c <GDT::setup()>:
c000958c:	57                   	push   edi
c000958d:	56                   	push   esi
c000958e:	53                   	push   ebx
c000958f:	83 ec 40             	sub    esp,0x40
c0009592:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009596:	6a 00                	push   0x0
c0009598:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000959c:	56                   	push   esi
c000959d:	e8 4e ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095a2:	6a 00                	push   0x0
c00095a4:	56                   	push   esi
c00095a5:	e8 62 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095aa:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095b2:	6a 00                	push   0x0
c00095b4:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095b8:	56                   	push   esi
c00095b9:	e8 32 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095be:	68 ff ff ff 00       	push   0xffffff
c00095c3:	56                   	push   esi
c00095c4:	e8 43 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	6a 00                	push   0x0
c00095e0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095e4:	56                   	push   esi
c00095e5:	e8 06 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095ea:	68 ff ff ff 00       	push   0xffffff
c00095ef:	56                   	push   esi
c00095f0:	e8 17 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00095f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00095fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009605:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009609:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000960e:	0d 00 92 c0 00       	or     eax,0xc09200
c0009613:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0009617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000961b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000961f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000962b:	89 fa                	mov    edx,edi
c000962d:	80 cc 60             	or     ah,0x60
c0009630:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009636:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000963a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000963e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009646:	80 cc 60             	or     ah,0x60
c0009649:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000964d:	89 f8                	mov    eax,edi
c000964f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009654:	09 d0                	or     eax,edx
c0009656:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000965a:	89 c7                	mov    edi,eax
c000965c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000966c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009676:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000967b:	09 d0                	or     eax,edx
c000967d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009681:	83 c4 0c             	add    esp,0xc
c0009684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968c:	53                   	push   ebx
c000968d:	e8 ae fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c0009692:	83 c4 0c             	add    esp,0xc
c0009695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000969d:	53                   	push   ebx
c000969e:	e8 9d fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096ae:	53                   	push   ebx
c00096af:	e8 8c fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096b4:	83 c4 0c             	add    esp,0xc
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bf:	53                   	push   ebx
c00096c0:	e8 7b fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096c5:	83 c4 0c             	add    esp,0xc
c00096c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d0:	53                   	push   ebx
c00096d1:	e8 6a fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096d6:	83 c4 0c             	add    esp,0xc
c00096d9:	57                   	push   edi
c00096da:	56                   	push   esi
c00096db:	53                   	push   ebx
c00096dc:	e8 5f fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096e1:	83 c4 0c             	add    esp,0xc
c00096e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096ec:	53                   	push   ebx
c00096ed:	e8 4e fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096f5:	e8 70 fe ff ff       	call   c000956a <GDT::flush()>
c00096fa:	83 c4 50             	add    esp,0x50
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	c3                   	ret    

c0009701 <idleFunction(void*)>:
c0009701:	83 ec 0c             	sub    esp,0xc
c0009704:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0009709:	48                   	dec    eax
c000970a:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000970f:	75 01                	jne    c0009712 <idleFunction(void*)+0x11>
c0009711:	fb                   	sti    
c0009712:	f4                   	hlt    
c0009713:	e8 aa 7e 01 00       	call   c00215c2 <idleCommon()>
c0009718:	eb f8                	jmp    c0009712 <idleFunction(void*)+0x11>
c000971a:	66 90                	xchg   ax,ax

c000971c <IDTEntry::IDTEntry(bool)>:
c000971c:	83 ec 04             	sub    esp,0x4
c000971f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009723:	88 04 24             	mov    BYTE PTR [esp],al
c0009726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000972a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009734:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000973f:	83 e2 f0             	and    edx,0xfffffff0
c0009742:	83 ca 0e             	or     edx,0xe
c0009745:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000974c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000974f:	83 e2 ef             	and    edx,0xffffffef
c0009752:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009755:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009759:	74 05                	je     c0009760 <IDTEntry::IDTEntry(bool)+0x44>
c000975b:	b2 03                	mov    dl,0x3
c000975d:	eb 05                	jmp    c0009764 <IDTEntry::IDTEntry(bool)+0x48>
c000975f:	90                   	nop
c0009760:	b2 00                	mov    dl,0x0
c0009762:	66 90                	xchg   ax,ax
c0009764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009768:	83 e2 03             	and    edx,0x3
c000976b:	88 d1                	mov    cl,dl
c000976d:	c1 e1 05             	shl    ecx,0x5
c0009770:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009773:	83 e2 9f             	and    edx,0xffffff9f
c0009776:	09 ca                	or     edx,ecx
c0009778:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000977b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009782:	83 ca 80             	or     edx,0xffffff80
c0009785:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009788:	90                   	nop
c0009789:	83 c4 04             	add    esp,0x4
c000978c:	c3                   	ret    
c000978d:	90                   	nop

c000978e <IDTEntry::setOffset(unsigned int)>:
c000978e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009796:	66 89 02             	mov    WORD PTR [edx],ax
c0009799:	c1 e8 10             	shr    eax,0x10
c000979c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097a0:	c3                   	ret    
c00097a1:	90                   	nop
c00097a2:	66 90                	xchg   ax,ax

c00097a4 <IDT::IDT()>:
c00097a4:	90                   	nop
c00097a5:	c3                   	ret    

c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097aa:	83 c0 30             	add    eax,0x30
c00097ad:	c3                   	ret    

c00097ae <IDT::addEntry(IDTEntry, int)>:
c00097ae:	53                   	push   ebx
c00097af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00097bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00097bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00097c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00097c6:	5b                   	pop    ebx
c00097c7:	c3                   	ret    

c00097c8 <IDT::addEntry(int, void (*)(), bool)>:
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00097d1:	50                   	push   eax
c00097d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00097d6:	53                   	push   ebx
c00097d7:	e8 40 ff ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c00097dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00097e0:	53                   	push   ebx
c00097e1:	e8 a8 ff ff ff       	call   c000978e <IDTEntry::setOffset(unsigned int)>
c00097e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097f6:	e8 b3 ff ff ff       	call   c00097ae <IDT::addEntry(IDTEntry, int)>
c00097fb:	83 c4 30             	add    esp,0x30
c00097fe:	5b                   	pop    ebx
c00097ff:	c3                   	ret    

c0009800 <IDT::flush()>:
c0009800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009804:	66 c7 05 b8 62 02 c0 ff 07 	mov    WORD PTR ds:0xc00262b8,0x7ff
c000980d:	a3 ba 62 02 c0       	mov    ds:0xc00262ba,eax
c0009812:	0f 01 1d b8 62 02 c0 	lidtd  ds:0xc00262b8
c0009819:	c3                   	ret    

c000981a <IDT::setup()>:
c000981a:	57                   	push   edi
c000981b:	56                   	push   esi
c000981c:	53                   	push   ebx
c000981d:	83 ec 10             	sub    esp,0x10
c0009820:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009824:	6a 00                	push   0x0
c0009826:	68 9d 03 00 c0       	push   0xc000039d
c000982b:	6a 00                	push   0x0
c000982d:	53                   	push   ebx
c000982e:	e8 95 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009833:	6a 00                	push   0x0
c0009835:	68 ad 03 00 c0       	push   0xc00003ad
c000983a:	6a 01                	push   0x1
c000983c:	53                   	push   ebx
c000983d:	e8 86 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009842:	83 c4 20             	add    esp,0x20
c0009845:	6a 00                	push   0x0
c0009847:	68 b7 03 00 c0       	push   0xc00003b7
c000984c:	6a 02                	push   0x2
c000984e:	53                   	push   ebx
c000984f:	e8 74 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009854:	6a 00                	push   0x0
c0009856:	68 c1 03 00 c0       	push   0xc00003c1
c000985b:	6a 03                	push   0x3
c000985d:	53                   	push   ebx
c000985e:	e8 65 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009863:	83 c4 20             	add    esp,0x20
c0009866:	6a 00                	push   0x0
c0009868:	68 cb 03 00 c0       	push   0xc00003cb
c000986d:	6a 04                	push   0x4
c000986f:	53                   	push   ebx
c0009870:	e8 53 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009875:	6a 00                	push   0x0
c0009877:	68 d5 03 00 c0       	push   0xc00003d5
c000987c:	6a 05                	push   0x5
c000987e:	53                   	push   ebx
c000987f:	e8 44 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009884:	83 c4 20             	add    esp,0x20
c0009887:	6a 00                	push   0x0
c0009889:	68 df 03 00 c0       	push   0xc00003df
c000988e:	6a 06                	push   0x6
c0009890:	53                   	push   ebx
c0009891:	e8 32 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009896:	6a 00                	push   0x0
c0009898:	68 e9 03 00 c0       	push   0xc00003e9
c000989d:	6a 07                	push   0x7
c000989f:	53                   	push   ebx
c00098a0:	e8 23 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098a5:	83 c4 20             	add    esp,0x20
c00098a8:	6a 00                	push   0x0
c00098aa:	68 f3 03 00 c0       	push   0xc00003f3
c00098af:	6a 08                	push   0x8
c00098b1:	53                   	push   ebx
c00098b2:	e8 11 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098b7:	6a 00                	push   0x0
c00098b9:	68 fb 03 00 c0       	push   0xc00003fb
c00098be:	6a 09                	push   0x9
c00098c0:	53                   	push   ebx
c00098c1:	e8 02 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098c6:	83 c4 20             	add    esp,0x20
c00098c9:	6a 00                	push   0x0
c00098cb:	68 05 04 00 c0       	push   0xc0000405
c00098d0:	6a 0a                	push   0xa
c00098d2:	53                   	push   ebx
c00098d3:	e8 f0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098d8:	6a 00                	push   0x0
c00098da:	68 0d 04 00 c0       	push   0xc000040d
c00098df:	6a 0b                	push   0xb
c00098e1:	53                   	push   ebx
c00098e2:	e8 e1 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098e7:	83 c4 20             	add    esp,0x20
c00098ea:	6a 00                	push   0x0
c00098ec:	68 15 04 00 c0       	push   0xc0000415
c00098f1:	6a 0c                	push   0xc
c00098f3:	53                   	push   ebx
c00098f4:	e8 cf fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098f9:	6a 00                	push   0x0
c00098fb:	68 1d 04 00 c0       	push   0xc000041d
c0009900:	6a 0d                	push   0xd
c0009902:	53                   	push   ebx
c0009903:	e8 c0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009908:	83 c4 20             	add    esp,0x20
c000990b:	6a 00                	push   0x0
c000990d:	68 25 04 00 c0       	push   0xc0000425
c0009912:	6a 0e                	push   0xe
c0009914:	53                   	push   ebx
c0009915:	e8 ae fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000991a:	6a 00                	push   0x0
c000991c:	68 2d 04 00 c0       	push   0xc000042d
c0009921:	6a 0f                	push   0xf
c0009923:	53                   	push   ebx
c0009924:	e8 9f fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009929:	83 c4 20             	add    esp,0x20
c000992c:	6a 00                	push   0x0
c000992e:	68 37 04 00 c0       	push   0xc0000437
c0009933:	6a 10                	push   0x10
c0009935:	53                   	push   ebx
c0009936:	e8 8d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000993b:	6a 00                	push   0x0
c000993d:	68 41 04 00 c0       	push   0xc0000441
c0009942:	6a 11                	push   0x11
c0009944:	53                   	push   ebx
c0009945:	e8 7e fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000994a:	83 c4 20             	add    esp,0x20
c000994d:	6a 00                	push   0x0
c000994f:	68 4b 04 00 c0       	push   0xc000044b
c0009954:	6a 12                	push   0x12
c0009956:	53                   	push   ebx
c0009957:	e8 6c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000995c:	6a 01                	push   0x1
c000995e:	68 e5 04 00 c0       	push   0xc00004e5
c0009963:	6a 60                	push   0x60
c0009965:	53                   	push   ebx
c0009966:	e8 5d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000996b:	83 c4 20             	add    esp,0x20
c000996e:	6a 00                	push   0x0
c0009970:	68 ec 04 00 c0       	push   0xc00004ec
c0009975:	6a 20                	push   0x20
c0009977:	53                   	push   ebx
c0009978:	e8 4b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000997d:	6a 00                	push   0x0
c000997f:	68 d7 04 00 c0       	push   0xc00004d7
c0009984:	6a 21                	push   0x21
c0009986:	53                   	push   ebx
c0009987:	e8 3c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000998c:	83 c4 20             	add    esp,0x20
c000998f:	6a 00                	push   0x0
c0009991:	68 de 04 00 c0       	push   0xc00004de
c0009996:	6a 22                	push   0x22
c0009998:	53                   	push   ebx
c0009999:	e8 2a fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000999e:	6a 00                	push   0x0
c00099a0:	68 55 04 00 c0       	push   0xc0000455
c00099a5:	6a 23                	push   0x23
c00099a7:	53                   	push   ebx
c00099a8:	e8 1b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ad:	83 c4 20             	add    esp,0x20
c00099b0:	6a 00                	push   0x0
c00099b2:	68 5f 04 00 c0       	push   0xc000045f
c00099b7:	6a 24                	push   0x24
c00099b9:	53                   	push   ebx
c00099ba:	e8 09 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099bf:	6a 00                	push   0x0
c00099c1:	68 69 04 00 c0       	push   0xc0000469
c00099c6:	6a 25                	push   0x25
c00099c8:	53                   	push   ebx
c00099c9:	e8 fa fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ce:	83 c4 20             	add    esp,0x20
c00099d1:	6a 00                	push   0x0
c00099d3:	68 73 04 00 c0       	push   0xc0000473
c00099d8:	6a 26                	push   0x26
c00099da:	53                   	push   ebx
c00099db:	e8 e8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099e0:	6a 00                	push   0x0
c00099e2:	68 7d 04 00 c0       	push   0xc000047d
c00099e7:	6a 27                	push   0x27
c00099e9:	53                   	push   ebx
c00099ea:	e8 d9 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	6a 00                	push   0x0
c00099f4:	68 87 04 00 c0       	push   0xc0000487
c00099f9:	6a 28                	push   0x28
c00099fb:	53                   	push   ebx
c00099fc:	e8 c7 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a01:	6a 00                	push   0x0
c0009a03:	68 91 04 00 c0       	push   0xc0000491
c0009a08:	6a 29                	push   0x29
c0009a0a:	53                   	push   ebx
c0009a0b:	e8 b8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a10:	83 c4 20             	add    esp,0x20
c0009a13:	6a 00                	push   0x0
c0009a15:	68 9b 04 00 c0       	push   0xc000049b
c0009a1a:	6a 2a                	push   0x2a
c0009a1c:	53                   	push   ebx
c0009a1d:	e8 a6 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a22:	6a 00                	push   0x0
c0009a24:	68 a5 04 00 c0       	push   0xc00004a5
c0009a29:	6a 2b                	push   0x2b
c0009a2b:	53                   	push   ebx
c0009a2c:	e8 97 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a31:	83 c4 20             	add    esp,0x20
c0009a34:	6a 00                	push   0x0
c0009a36:	68 af 04 00 c0       	push   0xc00004af
c0009a3b:	6a 2c                	push   0x2c
c0009a3d:	53                   	push   ebx
c0009a3e:	e8 85 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a43:	6a 00                	push   0x0
c0009a45:	68 b9 04 00 c0       	push   0xc00004b9
c0009a4a:	6a 2d                	push   0x2d
c0009a4c:	53                   	push   ebx
c0009a4d:	e8 76 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a52:	83 c4 20             	add    esp,0x20
c0009a55:	6a 00                	push   0x0
c0009a57:	68 c3 04 00 c0       	push   0xc00004c3
c0009a5c:	6a 2e                	push   0x2e
c0009a5e:	53                   	push   ebx
c0009a5f:	e8 64 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a64:	6a 00                	push   0x0
c0009a66:	68 cd 04 00 c0       	push   0xc00004cd
c0009a6b:	6a 2f                	push   0x2f
c0009a6d:	53                   	push   ebx
c0009a6e:	e8 55 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a73:	83 c4 20             	add    esp,0x20
c0009a76:	6a 00                	push   0x0
c0009a78:	68 23 05 00 c0       	push   0xc0000523
c0009a7d:	6a 30                	push   0x30
c0009a7f:	53                   	push   ebx
c0009a80:	e8 43 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a85:	6a 00                	push   0x0
c0009a87:	68 2d 05 00 c0       	push   0xc000052d
c0009a8c:	6a 31                	push   0x31
c0009a8e:	53                   	push   ebx
c0009a8f:	e8 34 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a94:	83 c4 20             	add    esp,0x20
c0009a97:	6a 00                	push   0x0
c0009a99:	68 37 05 00 c0       	push   0xc0000537
c0009a9e:	6a 32                	push   0x32
c0009aa0:	53                   	push   ebx
c0009aa1:	e8 22 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009aa6:	6a 00                	push   0x0
c0009aa8:	68 41 05 00 c0       	push   0xc0000541
c0009aad:	6a 33                	push   0x33
c0009aaf:	53                   	push   ebx
c0009ab0:	e8 13 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ab5:	83 c4 20             	add    esp,0x20
c0009ab8:	6a 00                	push   0x0
c0009aba:	68 4b 05 00 c0       	push   0xc000054b
c0009abf:	6a 34                	push   0x34
c0009ac1:	53                   	push   ebx
c0009ac2:	e8 01 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ac7:	6a 00                	push   0x0
c0009ac9:	68 55 05 00 c0       	push   0xc0000555
c0009ace:	6a 35                	push   0x35
c0009ad0:	53                   	push   ebx
c0009ad1:	e8 f2 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ad6:	83 c4 20             	add    esp,0x20
c0009ad9:	6a 00                	push   0x0
c0009adb:	68 5f 05 00 c0       	push   0xc000055f
c0009ae0:	6a 36                	push   0x36
c0009ae2:	53                   	push   ebx
c0009ae3:	e8 e0 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ae8:	6a 00                	push   0x0
c0009aea:	68 69 05 00 c0       	push   0xc0000569
c0009aef:	6a 37                	push   0x37
c0009af1:	53                   	push   ebx
c0009af2:	e8 d1 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009af7:	83 c4 1c             	add    esp,0x1c
c0009afa:	6a 03                	push   0x3
c0009afc:	6a 02                	push   0x2
c0009afe:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c0009b04:	e8 cf 28 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009b09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b10:	89 c6                	mov    esi,eax
c0009b12:	e8 a0 01 00 00       	call   c0009cb7 <malloc>
c0009b17:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b20:	89 c7                	mov    edi,eax
c0009b22:	e8 85 1a 00 00       	call   c000b5ac <TSS::TSS()>
c0009b27:	83 c4 0c             	add    esp,0xc
c0009b2a:	68 f3 03 00 c0       	push   0xc00003f3
c0009b2f:	56                   	push   esi
c0009b30:	57                   	push   edi
c0009b31:	e8 ba 1a 00 00       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c0009b36:	89 c6                	mov    esi,eax
c0009b38:	58                   	pop    eax
c0009b39:	5a                   	pop    edx
c0009b3a:	6a 00                	push   0x0
c0009b3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b40:	50                   	push   eax
c0009b41:	e8 d6 fb ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c0009b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b4a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b4f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009b56:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b60:	80 ce 05             	or     dh,0x5
c0009b63:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009b66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b6e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b74:	e8 87 fc ff ff       	call   c0009800 <IDT::flush()>
c0009b79:	83 c4 20             	add    esp,0x20
c0009b7c:	5b                   	pop    ebx
c0009b7d:	5e                   	pop    esi
c0009b7e:	5f                   	pop    edi
c0009b7f:	c3                   	ret    

c0009b80 <sbrk>:
c0009b80:	55                   	push   ebp
c0009b81:	57                   	push   edi
c0009b82:	56                   	push   esi
c0009b83:	53                   	push   ebx
c0009b84:	83 ec 24             	sub    esp,0x24
c0009b87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b8b:	53                   	push   ebx
c0009b8c:	68 3c 2a 02 c0       	push   0xc0022a3c
c0009b91:	e8 2f 34 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009b96:	83 c4 10             	add    esp,0x10
c0009b99:	85 db                	test   ebx,ebx
c0009b9b:	74 5f                	je     c0009bfc <sbrk+0x7c>
c0009b9d:	78 64                	js     c0009c03 <sbrk+0x83>
c0009b9f:	a1 dc 57 02 c0       	mov    eax,ds:0xc00257dc
c0009ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ba8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bae:	89 dd                	mov    ebp,ebx
c0009bb0:	78 69                	js     c0009c1b <sbrk+0x9b>
c0009bb2:	c1 fd 0c             	sar    ebp,0xc
c0009bb5:	bb 00 00 00 00       	mov    ebx,0x0
c0009bba:	8b 35 d4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263d4
c0009bc0:	8b 3d dc 57 02 c0    	mov    edi,DWORD PTR ds:0xc00257dc
c0009bc6:	e8 a3 07 00 00       	call   c000a36e <Phys::allocatePage()>
c0009bcb:	68 01 04 00 00       	push   0x401
c0009bd0:	57                   	push   edi
c0009bd1:	50                   	push   eax
c0009bd2:	56                   	push   esi
c0009bd3:	e8 fc 26 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd8:	81 05 dc 57 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00257dc,0x1000
c0009be2:	43                   	inc    ebx
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	39 dd                	cmp    ebp,ebx
c0009be8:	75 d0                	jne    c0009bba <sbrk+0x3a>
c0009bea:	0f 20 d8             	mov    eax,cr3
c0009bed:	0f 22 d8             	mov    cr3,eax
c0009bf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf4:	83 c4 1c             	add    esp,0x1c
c0009bf7:	5b                   	pop    ebx
c0009bf8:	5e                   	pop    esi
c0009bf9:	5f                   	pop    edi
c0009bfa:	5d                   	pop    ebp
c0009bfb:	c3                   	ret    
c0009bfc:	a1 dc 57 02 c0       	mov    eax,ds:0xc00257dc
c0009c01:	eb f1                	jmp    c0009bf4 <sbrk+0x74>
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	53                   	push   ebx
c0009c07:	68 68 2a 02 c0       	push   0xc0022a68
c0009c0c:	e8 b4 33 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c19:	eb d9                	jmp    c0009bf4 <sbrk+0x74>
c0009c1b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c21:	eb 8f                	jmp    c0009bb2 <sbrk+0x32>

c0009c23 <mmap>:
c0009c23:	83 ec 18             	sub    esp,0x18
c0009c26:	68 5a 2a 02 c0       	push   0xc0022a5a
c0009c2b:	e8 47 97 00 00       	call   c0013377 <Krnl::panic(char const*)>
c0009c30:	b8 00 00 00 00       	mov    eax,0x0
c0009c35:	83 c4 1c             	add    esp,0x1c
c0009c38:	c3                   	ret    

c0009c39 <munmap>:
c0009c39:	83 ec 18             	sub    esp,0x18
c0009c3c:	68 5f 2a 02 c0       	push   0xc0022a5f
c0009c41:	e8 31 97 00 00       	call   c0013377 <Krnl::panic(char const*)>
c0009c46:	b8 00 00 00 00       	mov    eax,0x0
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	c3                   	ret    

c0009c4f <liballoc_lock()>:
c0009c4f:	fa                   	cli    
c0009c50:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0009c56:	b8 00 00 00 00       	mov    eax,0x0
c0009c5b:	c3                   	ret    

c0009c5c <liballoc_unlock()>:
c0009c5c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0009c61:	48                   	dec    eax
c0009c62:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0009c67:	75 01                	jne    c0009c6a <liballoc_unlock()+0xe>
c0009c69:	fb                   	sti    
c0009c6a:	b8 00 00 00 00       	mov    eax,0x0
c0009c6f:	c3                   	ret    

c0009c70 <liballoc_alloc(int)>:
c0009c70:	83 ec 10             	sub    esp,0x10
c0009c73:	6a 01                	push   0x1
c0009c75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c79:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c0009c7f:	e8 54 27 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009c84:	83 c4 1c             	add    esp,0x1c
c0009c87:	c3                   	ret    

c0009c88 <liballoc_free(void*, int)>:
c0009c88:	83 ec 14             	sub    esp,0x14
c0009c8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c8f:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c0009c95:	e8 e6 23 00 00       	call   c000c080 <VAS::freeAllocatedPages(unsigned long)>
c0009c9a:	b8 00 00 00 00       	mov    eax,0x0
c0009c9f:	83 c4 1c             	add    esp,0x1c
c0009ca2:	c3                   	ret    

c0009ca3 <realloc>:
c0009ca3:	83 ec 14             	sub    esp,0x14
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cae:	e8 a5 78 ff ff       	call   c0001558 <dlrealloc>
c0009cb3:	83 c4 1c             	add    esp,0x1c
c0009cb6:	c3                   	ret    

c0009cb7 <malloc>:
c0009cb7:	83 ec 18             	sub    esp,0x18
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	e8 58 73 ff ff       	call   c000101b <dlmalloc>
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	c3                   	ret    

c0009cc7 <free>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cce:	e8 ed 6f ff ff       	call   c0000cc0 <dlfree>
c0009cd3:	83 c4 1c             	add    esp,0x1c
c0009cd6:	c3                   	ret    

c0009cd7 <rfree>:
c0009cd7:	83 ec 18             	sub    esp,0x18
c0009cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cde:	e8 dd 6f ff ff       	call   c0000cc0 <dlfree>
c0009ce3:	83 c4 1c             	add    esp,0x1c
c0009ce6:	c3                   	ret    

c0009ce7 <calloc>:
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	83 ec 10             	sub    esp,0x10
c0009cec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cf0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009cf5:	53                   	push   ebx
c0009cf6:	e8 bc ff ff ff       	call   c0009cb7 <malloc>
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	53                   	push   ebx
c0009d01:	6a 00                	push   0x0
c0009d03:	50                   	push   eax
c0009d04:	e8 73 69 ff ff       	call   c000067c <memset>
c0009d09:	89 f0                	mov    eax,esi
c0009d0b:	83 c4 14             	add    esp,0x14
c0009d0e:	5b                   	pop    ebx
c0009d0f:	5e                   	pop    esi
c0009d10:	c3                   	ret    

c0009d11 <Krnl::setBootMessage(char const*)>:
c0009d11:	57                   	push   edi
c0009d12:	56                   	push   esi
c0009d13:	53                   	push   ebx
c0009d14:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d1a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d21:	68 9e 00 00 00       	push   0x9e
c0009d26:	6a 00                	push   0x0
c0009d28:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d2c:	56                   	push   esi
c0009d2d:	e8 4a 69 ff ff       	call   c000067c <memset>
c0009d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d35:	e8 5e 69 ff ff       	call   c0000698 <strlen>
c0009d3a:	ba 50 00 00 00       	mov    edx,0x50
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	29 c2                	sub    edx,eax
c0009d44:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d48:	d1 ea                	shr    edx,1
c0009d4a:	84 c0                	test   al,al
c0009d4c:	74 19                	je     c0009d67 <Krnl::setBootMessage(char const*)+0x56>
c0009d4e:	01 d2                	add    edx,edx
c0009d50:	43                   	inc    ebx
c0009d51:	01 f2                	add    edx,esi
c0009d53:	80 cc 0f             	or     ah,0xf
c0009d56:	83 c2 02             	add    edx,0x2
c0009d59:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009d5d:	43                   	inc    ebx
c0009d5e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009d63:	84 c0                	test   al,al
c0009d65:	75 ec                	jne    c0009d53 <Krnl::setBootMessage(char const*)+0x42>
c0009d67:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009d6c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009d71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009d73:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009d79:	5b                   	pop    ebx
c0009d7a:	5e                   	pop    esi
c0009d7b:	5f                   	pop    edi
c0009d7c:	c3                   	ret    

c0009d7d <kernel_main>:
c0009d7d:	57                   	push   edi
c0009d7e:	56                   	push   esi
c0009d7f:	53                   	push   ebx
c0009d80:	83 ec 20             	sub    esp,0x20
c0009d83:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009d88:	a3 c0 62 02 c0       	mov    ds:0xc00262c0,eax
c0009d8d:	f6 c4 08             	test   ah,0x8
c0009d90:	0f 85 7a 03 00 00    	jne    c000a110 <kernel_main+0x393>
c0009d96:	31 f6                	xor    esi,esi
c0009d98:	bf f9 03 00 00       	mov    edi,0x3f9
c0009d9d:	89 f0                	mov    eax,esi
c0009d9f:	89 fa                	mov    edx,edi
c0009da1:	ee                   	out    dx,al
c0009da2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009da7:	b0 80                	mov    al,0x80
c0009da9:	89 da                	mov    edx,ebx
c0009dab:	ee                   	out    dx,al
c0009dac:	b1 03                	mov    cl,0x3
c0009dae:	ba f8 03 00 00       	mov    edx,0x3f8
c0009db3:	88 c8                	mov    al,cl
c0009db5:	ee                   	out    dx,al
c0009db6:	89 f0                	mov    eax,esi
c0009db8:	89 fa                	mov    edx,edi
c0009dba:	ee                   	out    dx,al
c0009dbb:	88 c8                	mov    al,cl
c0009dbd:	89 da                	mov    edx,ebx
c0009dbf:	ee                   	out    dx,al
c0009dc0:	b0 c7                	mov    al,0xc7
c0009dc2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009dc7:	ee                   	out    dx,al
c0009dc8:	b0 0b                	mov    al,0xb
c0009dca:	ba fc 03 00 00       	mov    edx,0x3fc
c0009dcf:	ee                   	out    dx,al
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	68 98 2a 02 c0       	push   0xc0022a98
c0009dd8:	e8 e8 31 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009de7:	0f 85 eb 02 00 00    	jne    c000a0d8 <kernel_main+0x35b>
c0009ded:	e8 c6 0c 00 00       	call   c000aab8 <installVgaTextImplementation()>
c0009df2:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009df9:	0f 85 94 02 00 00    	jne    c000a093 <kernel_main+0x316>
c0009dff:	0f b6 05 e0 57 02 c0 	movzx  eax,BYTE PTR ds:0xc00257e0
c0009e06:	84 c0                	test   al,al
c0009e08:	74 7b                	je     c0009e85 <kernel_main+0x108>
c0009e0a:	31 db                	xor    ebx,ebx
c0009e0c:	bf 0a 00 00 00       	mov    edi,0xa
c0009e11:	be 05 00 00 00       	mov    esi,0x5
c0009e16:	31 c9                	xor    ecx,ecx
c0009e18:	eb 2a                	jmp    c0009e44 <kernel_main+0xc7>
c0009e1a:	3c 0d                	cmp    al,0xd
c0009e1c:	74 1a                	je     c0009e38 <kernel_main+0xbb>
c0009e1e:	3c 0a                	cmp    al,0xa
c0009e20:	74 40                	je     c0009e62 <kernel_main+0xe5>
c0009e22:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e25:	80 cc 0e             	or     ah,0xe
c0009e28:	c1 e2 04             	shl    edx,0x4
c0009e2b:	01 ca                	add    edx,ecx
c0009e2d:	41                   	inc    ecx
c0009e2e:	01 fa                	add    edx,edi
c0009e30:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e38:	43                   	inc    ebx
c0009e39:	0f b6 83 e0 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda820]
c0009e40:	84 c0                	test   al,al
c0009e42:	74 32                	je     c0009e76 <kernel_main+0xf9>
c0009e44:	80 b9 16 58 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda7ea],0xdb
c0009e4b:	75 cd                	jne    c0009e1a <kernel_main+0x9d>
c0009e4d:	0f b6 91 15 58 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda7eb]
c0009e54:	83 e2 fe             	and    edx,0xfffffffe
c0009e57:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009e5d:	75 bb                	jne    c0009e1a <kernel_main+0x9d>
c0009e5f:	47                   	inc    edi
c0009e60:	eb b8                	jmp    c0009e1a <kernel_main+0x9d>
c0009e62:	43                   	inc    ebx
c0009e63:	46                   	inc    esi
c0009e64:	31 c9                	xor    ecx,ecx
c0009e66:	0f b6 83 e0 57 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda820]
c0009e6d:	bf 0a 00 00 00       	mov    edi,0xa
c0009e72:	84 c0                	test   al,al
c0009e74:	75 ce                	jne    c0009e44 <kernel_main+0xc7>
c0009e76:	8b 15 c0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c0
c0009e7c:	80 e6 08             	and    dh,0x8
c0009e7f:	0f 85 bf 00 00 00    	jne    c0009f44 <kernel_main+0x1c7>
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 34 2b 02 c0       	push   0xc0022b34
c0009e8d:	e8 7f fe ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009e92:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009e97:	05 ff 0f 00 00       	add    eax,0xfff
c0009e9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ea4:	e8 44 06 00 00       	call   c000a4ed <Phys::physicalMemorySetup(unsigned int)>
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009eb3:	0f 85 a2 01 00 00    	jne    c000a05b <kernel_main+0x2de>
c0009eb9:	e8 6a 1f 00 00       	call   c000be28 <Virt::virtualMemorySetup()>
c0009ebe:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009ec5:	0f 85 58 01 00 00    	jne    c000a023 <kernel_main+0x2a6>
c0009ecb:	83 ec 0c             	sub    esp,0xc
c0009ece:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009ed2:	56                   	push   esi
c0009ed3:	e8 28 2b 00 00       	call   c000ca00 <VAS::VAS()>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 35 d4 63 02 c0    	mov    DWORD PTR ds:0xc00263d4,esi
c0009ee1:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009ee8:	0f 85 fd 00 00 00    	jne    c0009feb <kernel_main+0x26e>
c0009eee:	e8 2d 61 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ef3:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009efa:	0f 85 b3 00 00 00    	jne    c0009fb3 <kernel_main+0x236>
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 ec 01 00 00       	push   0x1ec
c0009f08:	e8 aa fd ff ff       	call   c0009cb7 <malloc>
c0009f0d:	89 c3                	mov    ebx,eax
c0009f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f12:	e8 a1 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	89 1d a8 62 02 c0    	mov    DWORD PTR ds:0xc00262a8,ebx
c0009f20:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0009f27:	75 53                	jne    c0009f7c <kernel_main+0x1ff>
c0009f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f2b:	6a 00                	push   0x0
c0009f2d:	6a 00                	push   0x0
c0009f2f:	6a 00                	push   0x0
c0009f31:	53                   	push   ebx
c0009f32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f38:	e8 1b 22 00 00       	call   c000c158 <VAS::~VAS()>
c0009f3d:	83 c4 30             	add    esp,0x30
c0009f40:	5b                   	pop    ebx
c0009f41:	5e                   	pop    esi
c0009f42:	5f                   	pop    edi
c0009f43:	c3                   	ret    
c0009f44:	83 ec 0c             	sub    esp,0xc
c0009f47:	68 e3 2a 02 c0       	push   0xc0022ae3
c0009f4c:	e8 c0 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f51:	83 c4 10             	add    esp,0x10
c0009f54:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c0009f5b:	0f 85 24 ff ff ff    	jne    c0009e85 <kernel_main+0x108>
c0009f61:	eb 04                	jmp    c0009f67 <kernel_main+0x1ea>
c0009f63:	3c 1c                	cmp    al,0x1c
c0009f65:	74 06                	je     c0009f6d <kernel_main+0x1f0>
c0009f67:	e4 60                	in     al,0x60
c0009f69:	3c 5a                	cmp    al,0x5a
c0009f6b:	75 f6                	jne    c0009f63 <kernel_main+0x1e6>
c0009f6d:	e4 60                	in     al,0x60
c0009f6f:	3c 5a                	cmp    al,0x5a
c0009f71:	74 fa                	je     c0009f6d <kernel_main+0x1f0>
c0009f73:	3c 1c                	cmp    al,0x1c
c0009f75:	74 f6                	je     c0009f6d <kernel_main+0x1f0>
c0009f77:	e9 09 ff ff ff       	jmp    c0009e85 <kernel_main+0x108>
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	68 22 2b 02 c0       	push   0xc0022b22
c0009f84:	e8 88 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c0009f93:	74 0c                	je     c0009fa1 <kernel_main+0x224>
c0009f95:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0009f9b:	eb 8c                	jmp    c0009f29 <kernel_main+0x1ac>
c0009f9d:	3c 1c                	cmp    al,0x1c
c0009f9f:	74 06                	je     c0009fa7 <kernel_main+0x22a>
c0009fa1:	e4 60                	in     al,0x60
c0009fa3:	3c 5a                	cmp    al,0x5a
c0009fa5:	75 f6                	jne    c0009f9d <kernel_main+0x220>
c0009fa7:	e4 60                	in     al,0x60
c0009fa9:	3c 5a                	cmp    al,0x5a
c0009fab:	74 fa                	je     c0009fa7 <kernel_main+0x22a>
c0009fad:	3c 1c                	cmp    al,0x1c
c0009faf:	74 f6                	je     c0009fa7 <kernel_main+0x22a>
c0009fb1:	eb e2                	jmp    c0009f95 <kernel_main+0x218>
c0009fb3:	83 ec 0c             	sub    esp,0xc
c0009fb6:	68 0f 2b 02 c0       	push   0xc0022b0f
c0009fbb:	e8 51 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c0009fca:	0f 85 30 ff ff ff    	jne    c0009f00 <kernel_main+0x183>
c0009fd0:	eb 04                	jmp    c0009fd6 <kernel_main+0x259>
c0009fd2:	3c 1c                	cmp    al,0x1c
c0009fd4:	74 06                	je     c0009fdc <kernel_main+0x25f>
c0009fd6:	e4 60                	in     al,0x60
c0009fd8:	3c 5a                	cmp    al,0x5a
c0009fda:	75 f6                	jne    c0009fd2 <kernel_main+0x255>
c0009fdc:	e4 60                	in     al,0x60
c0009fde:	3c 5a                	cmp    al,0x5a
c0009fe0:	74 fa                	je     c0009fdc <kernel_main+0x25f>
c0009fe2:	3c 1c                	cmp    al,0x1c
c0009fe4:	74 f6                	je     c0009fdc <kernel_main+0x25f>
c0009fe6:	e9 15 ff ff ff       	jmp    c0009f00 <kernel_main+0x183>
c0009feb:	83 ec 0c             	sub    esp,0xc
c0009fee:	68 05 2b 02 c0       	push   0xc0022b05
c0009ff3:	e8 19 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c000a002:	0f 85 e6 fe ff ff    	jne    c0009eee <kernel_main+0x171>
c000a008:	eb 04                	jmp    c000a00e <kernel_main+0x291>
c000a00a:	3c 1c                	cmp    al,0x1c
c000a00c:	74 06                	je     c000a014 <kernel_main+0x297>
c000a00e:	e4 60                	in     al,0x60
c000a010:	3c 5a                	cmp    al,0x5a
c000a012:	75 f6                	jne    c000a00a <kernel_main+0x28d>
c000a014:	e4 60                	in     al,0x60
c000a016:	3c 5a                	cmp    al,0x5a
c000a018:	74 fa                	je     c000a014 <kernel_main+0x297>
c000a01a:	3c 1c                	cmp    al,0x1c
c000a01c:	74 f6                	je     c000a014 <kernel_main+0x297>
c000a01e:	e9 cb fe ff ff       	jmp    c0009eee <kernel_main+0x171>
c000a023:	83 ec 0c             	sub    esp,0xc
c000a026:	68 fa 2a 02 c0       	push   0xc0022afa
c000a02b:	e8 e1 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a030:	83 c4 10             	add    esp,0x10
c000a033:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c000a03a:	0f 85 8b fe ff ff    	jne    c0009ecb <kernel_main+0x14e>
c000a040:	eb 04                	jmp    c000a046 <kernel_main+0x2c9>
c000a042:	3c 1c                	cmp    al,0x1c
c000a044:	74 06                	je     c000a04c <kernel_main+0x2cf>
c000a046:	e4 60                	in     al,0x60
c000a048:	3c 5a                	cmp    al,0x5a
c000a04a:	75 f6                	jne    c000a042 <kernel_main+0x2c5>
c000a04c:	e4 60                	in     al,0x60
c000a04e:	3c 5a                	cmp    al,0x5a
c000a050:	74 fa                	je     c000a04c <kernel_main+0x2cf>
c000a052:	3c 1c                	cmp    al,0x1c
c000a054:	74 f6                	je     c000a04c <kernel_main+0x2cf>
c000a056:	e9 70 fe ff ff       	jmp    c0009ecb <kernel_main+0x14e>
c000a05b:	83 ec 0c             	sub    esp,0xc
c000a05e:	68 ef 2a 02 c0       	push   0xc0022aef
c000a063:	e8 a9 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c000a072:	0f 85 41 fe ff ff    	jne    c0009eb9 <kernel_main+0x13c>
c000a078:	eb 04                	jmp    c000a07e <kernel_main+0x301>
c000a07a:	3c 1c                	cmp    al,0x1c
c000a07c:	74 06                	je     c000a084 <kernel_main+0x307>
c000a07e:	e4 60                	in     al,0x60
c000a080:	3c 5a                	cmp    al,0x5a
c000a082:	75 f6                	jne    c000a07a <kernel_main+0x2fd>
c000a084:	e4 60                	in     al,0x60
c000a086:	3c 5a                	cmp    al,0x5a
c000a088:	74 fa                	je     c000a084 <kernel_main+0x307>
c000a08a:	3c 1c                	cmp    al,0x1c
c000a08c:	74 f6                	je     c000a084 <kernel_main+0x307>
c000a08e:	e9 26 fe ff ff       	jmp    c0009eb9 <kernel_main+0x13c>
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 d1 2a 02 c0       	push   0xc0022ad1
c000a09b:	e8 71 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0a0:	8b 15 c0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c0
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	f6 c2 80             	test   dl,0x80
c000a0ac:	74 18                	je     c000a0c6 <kernel_main+0x349>
c000a0ae:	0f b6 05 e0 57 02 c0 	movzx  eax,BYTE PTR ds:0xc00257e0
c000a0b5:	84 c0                	test   al,al
c000a0b7:	0f 85 4d fd ff ff    	jne    c0009e0a <kernel_main+0x8d>
c000a0bd:	e9 ba fd ff ff       	jmp    c0009e7c <kernel_main+0xff>
c000a0c2:	3c 1c                	cmp    al,0x1c
c000a0c4:	74 06                	je     c000a0cc <kernel_main+0x34f>
c000a0c6:	e4 60                	in     al,0x60
c000a0c8:	3c 5a                	cmp    al,0x5a
c000a0ca:	75 f6                	jne    c000a0c2 <kernel_main+0x345>
c000a0cc:	e4 60                	in     al,0x60
c000a0ce:	3c 5a                	cmp    al,0x5a
c000a0d0:	74 fa                	je     c000a0cc <kernel_main+0x34f>
c000a0d2:	3c 1c                	cmp    al,0x1c
c000a0d4:	74 f6                	je     c000a0cc <kernel_main+0x34f>
c000a0d6:	eb d6                	jmp    c000a0ae <kernel_main+0x331>
c000a0d8:	83 ec 0c             	sub    esp,0xc
c000a0db:	68 c2 2a 02 c0       	push   0xc0022ac2
c000a0e0:	e8 2c fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c000a0ef:	0f 85 f8 fc ff ff    	jne    c0009ded <kernel_main+0x70>
c000a0f5:	eb 04                	jmp    c000a0fb <kernel_main+0x37e>
c000a0f7:	3c 1c                	cmp    al,0x1c
c000a0f9:	74 06                	je     c000a101 <kernel_main+0x384>
c000a0fb:	e4 60                	in     al,0x60
c000a0fd:	3c 5a                	cmp    al,0x5a
c000a0ff:	75 f6                	jne    c000a0f7 <kernel_main+0x37a>
c000a101:	e4 60                	in     al,0x60
c000a103:	3c 5a                	cmp    al,0x5a
c000a105:	74 fa                	je     c000a101 <kernel_main+0x384>
c000a107:	3c 1c                	cmp    al,0x1c
c000a109:	74 f6                	je     c000a101 <kernel_main+0x384>
c000a10b:	e9 dd fc ff ff       	jmp    c0009ded <kernel_main+0x70>
c000a110:	83 ec 0c             	sub    esp,0xc
c000a113:	68 af 2a 02 c0       	push   0xc0022aaf
c000a118:	e8 f4 fb ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c000a127:	0f 85 69 fc ff ff    	jne    c0009d96 <kernel_main+0x19>
c000a12d:	eb 04                	jmp    c000a133 <kernel_main+0x3b6>
c000a12f:	3c 1c                	cmp    al,0x1c
c000a131:	74 06                	je     c000a139 <kernel_main+0x3bc>
c000a133:	e4 60                	in     al,0x60
c000a135:	3c 5a                	cmp    al,0x5a
c000a137:	75 f6                	jne    c000a12f <kernel_main+0x3b2>
c000a139:	e4 60                	in     al,0x60
c000a13b:	3c 5a                	cmp    al,0x5a
c000a13d:	74 fa                	je     c000a139 <kernel_main+0x3bc>
c000a13f:	3c 1c                	cmp    al,0x1c
c000a141:	74 f6                	je     c000a139 <kernel_main+0x3bc>
c000a143:	e9 4e fc ff ff       	jmp    c0009d96 <kernel_main+0x19>

c000a148 <Phys::allocateDMA(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	31 ed                	xor    ebp,ebp
c000a14b:	57                   	push   edi
c000a14c:	56                   	push   esi
c000a14d:	53                   	push   ebx
c000a14e:	31 db                	xor    ebx,ebx
c000a150:	83 ec 28             	sub    esp,0x28
c000a153:	68 53 2b 02 c0       	push   0xc0022b53
c000a158:	e8 68 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a16a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a172:	c1 ef 0c             	shr    edi,0xc
c000a175:	31 c0                	xor    eax,eax
c000a177:	eb 19                	jmp    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a179:	85 c0                	test   eax,eax
c000a17b:	75 06                	jne    c000a183 <Phys::allocateDMA(unsigned long)+0x3b>
c000a17d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a181:	89 dd                	mov    ebp,ebx
c000a183:	8d 70 01             	lea    esi,[eax+0x1]
c000a186:	39 f7                	cmp    edi,esi
c000a188:	74 3f                	je     c000a1c9 <Phys::allocateDMA(unsigned long)+0x81>
c000a18a:	89 f0                	mov    eax,esi
c000a18c:	43                   	inc    ebx
c000a18d:	83 fb 0f             	cmp    ebx,0xf
c000a190:	7f 11                	jg     c000a1a3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a192:	80 bb dc 62 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9d24],0x0
c000a199:	74 de                	je     c000a179 <Phys::allocateDMA(unsigned long)+0x31>
c000a19b:	31 c0                	xor    eax,eax
c000a19d:	43                   	inc    ebx
c000a19e:	83 fb 0f             	cmp    ebx,0xf
c000a1a1:	7e ef                	jle    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1a3:	83 ec 0c             	sub    esp,0xc
c000a1a6:	68 83 2b 02 c0       	push   0xc0022b83
c000a1ab:	e8 15 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a1b0:	c7 04 24 40 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c40
c000a1b7:	e8 bb 91 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	83 c4 1c             	add    esp,0x1c
c000a1c4:	5b                   	pop    ebx
c000a1c5:	5e                   	pop    esi
c000a1c6:	5f                   	pop    edi
c000a1c7:	5d                   	pop    ebp
c000a1c8:	c3                   	ret    
c000a1c9:	89 e9                	mov    ecx,ebp
c000a1cb:	c1 f9 04             	sar    ecx,0x4
c000a1ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1d2:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a1d6:	89 ca                	mov    edx,ecx
c000a1d8:	4a                   	dec    edx
c000a1d9:	79 03                	jns    c000a1de <Phys::allocateDMA(unsigned long)+0x96>
c000a1db:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a1de:	c1 fa 04             	sar    edx,0x4
c000a1e1:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a1e5:	74 08                	je     c000a1ef <Phys::allocateDMA(unsigned long)+0xa7>
c000a1e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1eb:	31 c0                	xor    eax,eax
c000a1ed:	eb ae                	jmp    c000a19d <Phys::allocateDMA(unsigned long)+0x55>
c000a1ef:	85 f6                	test   esi,esi
c000a1f1:	74 15                	je     c000a208 <Phys::allocateDMA(unsigned long)+0xc0>
c000a1f3:	8d 95 dc 62 02 c0    	lea    edx,[ebp-0x3ffd9d24]
c000a1f9:	8d 84 05 dd 62 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9d23]
c000a200:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a203:	42                   	inc    edx
c000a204:	39 d0                	cmp    eax,edx
c000a206:	75 f8                	jne    c000a200 <Phys::allocateDMA(unsigned long)+0xb8>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	01 3d d4 62 02 c0    	add    DWORD PTR ds:0xc00262d4,edi
c000a211:	68 6c 2b 02 c0       	push   0xc0022b6c
c000a216:	e8 aa 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a222:	85 c0                	test   eax,eax
c000a224:	74 23                	je     c000a249 <Phys::allocateDMA(unsigned long)+0x101>
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	68 8c 56 02 c0       	push   0xc002568c
c000a22e:	e8 92 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a233:	c7 04 24 40 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c40
c000a23a:	e8 38 91 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	89 f0                	mov    eax,esi
c000a244:	e9 43 ff ff ff       	jmp    c000a18c <Phys::allocateDMA(unsigned long)+0x44>
c000a249:	c1 e5 0c             	shl    ebp,0xc
c000a24c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a252:	e9 6a ff ff ff       	jmp    c000a1c1 <Phys::allocateDMA(unsigned long)+0x79>

c000a257 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a257:	83 ec 18             	sub    esp,0x18
c000a25a:	68 87 2b 02 c0       	push   0xc0022b87
c000a25f:	e8 61 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a268:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a272:	c1 ea 0c             	shr    edx,0xc
c000a275:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a27a:	29 15 d4 62 02 c0    	sub    DWORD PTR ds:0xc00262d4,edx
c000a280:	c1 e8 0c             	shr    eax,0xc
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	85 d2                	test   edx,edx
c000a288:	74 0f                	je     c000a299 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a28a:	05 dc 62 02 c0       	add    eax,0xc00262dc
c000a28f:	01 c2                	add    edx,eax
c000a291:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a294:	40                   	inc    eax
c000a295:	39 d0                	cmp    eax,edx
c000a297:	75 f8                	jne    c000a291 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a299:	83 c4 0c             	add    esp,0xc
c000a29c:	c3                   	ret    

c000a29d <Phys::setPageState(unsigned long, bool)>:
c000a29d:	56                   	push   esi
c000a29e:	ba 01 00 00 00       	mov    edx,0x1
c000a2a3:	53                   	push   ebx
c000a2a4:	8b 35 24 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025924
c000a2aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b2:	89 c8                	mov    eax,ecx
c000a2b4:	83 e1 07             	and    ecx,0x7
c000a2b7:	c1 e8 03             	shr    eax,0x3
c000a2ba:	d3 e3                	shl    ebx,cl
c000a2bc:	01 c6                	add    esi,eax
c000a2be:	d3 e2                	shl    edx,cl
c000a2c0:	f7 d2                	not    edx
c000a2c2:	20 16                	and    BYTE PTR [esi],dl
c000a2c4:	03 05 24 59 02 c0    	add    eax,DWORD PTR ds:0xc0025924
c000a2ca:	08 18                	or     BYTE PTR [eax],bl
c000a2cc:	5b                   	pop    ebx
c000a2cd:	5e                   	pop    esi
c000a2ce:	c3                   	ret    

c000a2cf <Phys::getPageState(unsigned long)>:
c000a2cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a2d3:	8b 15 24 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025924
c000a2d9:	89 c8                	mov    eax,ecx
c000a2db:	83 e1 07             	and    ecx,0x7
c000a2de:	c1 e8 03             	shr    eax,0x3
c000a2e1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a2e5:	d3 f8                	sar    eax,cl
c000a2e7:	83 e0 01             	and    eax,0x1
c000a2ea:	c3                   	ret    

c000a2eb <Phys::freePage(unsigned long)>:
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 10             	sub    esp,0x10
c000a2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2f3:	53                   	push   ebx
c000a2f4:	68 9d 2b 02 c0       	push   0xc0022b9d
c000a2f9:	e8 c7 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a2fe:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	3d ff ff 00 00       	cmp    eax,0xffff
c000a30c:	76 3d                	jbe    c000a34b <Phys::freePage(unsigned long)+0x60>
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	c1 eb 0c             	shr    ebx,0xc
c000a314:	53                   	push   ebx
c000a315:	e8 b5 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a31a:	83 c4 10             	add    esp,0x10
c000a31d:	84 c0                	test   al,al
c000a31f:	74 19                	je     c000a33a <Phys::freePage(unsigned long)+0x4f>
c000a321:	83 ec 08             	sub    esp,0x8
c000a324:	ff 0d d4 62 02 c0    	dec    DWORD PTR ds:0xc00262d4
c000a32a:	6a 00                	push   0x0
c000a32c:	53                   	push   ebx
c000a32d:	e8 6b ff ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	83 c4 08             	add    esp,0x8
c000a338:	5b                   	pop    ebx
c000a339:	c3                   	ret    
c000a33a:	c7 44 24 10 c7 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022bc7
c000a342:	83 c4 08             	add    esp,0x8
c000a345:	5b                   	pop    ebx
c000a346:	e9 2c 90 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c000a34b:	83 ec 08             	sub    esp,0x8
c000a34e:	53                   	push   ebx
c000a34f:	68 b0 2b 02 c0       	push   0xc0022bb0
c000a354:	e8 6c 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a359:	58                   	pop    eax
c000a35a:	5a                   	pop    edx
c000a35b:	68 00 10 00 00       	push   0x1000
c000a360:	53                   	push   ebx
c000a361:	e8 f1 fe ff ff       	call   c000a257 <Phys::freeDMA(unsigned long, unsigned long)>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	83 c4 08             	add    esp,0x8
c000a36c:	5b                   	pop    ebx
c000a36d:	c3                   	ret    

c000a36e <Phys::allocatePage()>:
c000a36e:	56                   	push   esi
c000a36f:	53                   	push   ebx
c000a370:	83 ec 14             	sub    esp,0x14
c000a373:	8b 35 c8 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262c8
c000a379:	89 f3                	mov    ebx,esi
c000a37b:	eb 0a                	jmp    c000a387 <Phys::allocatePage()+0x19>
c000a37d:	89 1d c8 62 02 c0    	mov    DWORD PTR ds:0xc00262c8,ebx
c000a383:	39 de                	cmp    esi,ebx
c000a385:	74 24                	je     c000a3ab <Phys::allocatePage()+0x3d>
c000a387:	53                   	push   ebx
c000a388:	e8 42 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a38d:	5a                   	pop    edx
c000a38e:	84 c0                	test   al,al
c000a390:	74 69                	je     c000a3fb <Phys::allocatePage()+0x8d>
c000a392:	43                   	inc    ebx
c000a393:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a399:	75 e2                	jne    c000a37d <Phys::allocatePage()+0xf>
c000a39b:	31 db                	xor    ebx,ebx
c000a39d:	c7 05 c8 62 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00262c8,0x0
c000a3a7:	39 de                	cmp    esi,ebx
c000a3a9:	75 dc                	jne    c000a387 <Phys::allocatePage()+0x19>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	80 35 ec 62 02 c0 01 	xor    BYTE PTR ds:0xc00262ec,0x1
c000a3b5:	68 68 2c 02 c0       	push   0xc0022c68
c000a3ba:	e8 06 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a3bf:	58                   	pop    eax
c000a3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a3ce:	e8 81 28 00 00       	call   c000cc54 <VAS::scanForEviction()>
c000a3d3:	83 c4 10             	add    esp,0x10
c000a3d6:	85 c0                	test   eax,eax
c000a3d8:	75 62                	jne    c000a43c <Phys::allocatePage()+0xce>
c000a3da:	83 ec 0c             	sub    esp,0xc
c000a3dd:	68 8c 2c 02 c0       	push   0xc0022c8c
c000a3e2:	e8 90 8f 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	8b 1d c8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262c8
c000a3f0:	53                   	push   ebx
c000a3f1:	e8 d9 fe ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a3f6:	5a                   	pop    edx
c000a3f7:	84 c0                	test   al,al
c000a3f9:	75 97                	jne    c000a392 <Phys::allocatePage()+0x24>
c000a3fb:	6a 01                	push   0x1
c000a3fd:	53                   	push   ebx
c000a3fe:	e8 9a fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a403:	5a                   	pop    edx
c000a404:	a1 d4 62 02 c0       	mov    eax,ds:0xc00262d4
c000a409:	59                   	pop    ecx
c000a40a:	40                   	inc    eax
c000a40b:	8b 15 c8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c8
c000a411:	a3 d4 62 02 c0       	mov    ds:0xc00262d4,eax
c000a416:	c1 e2 0c             	shl    edx,0xc
c000a419:	52                   	push   edx
c000a41a:	ff 35 d8 62 02 c0    	push   DWORD PTR ds:0xc00262d8
c000a420:	50                   	push   eax
c000a421:	68 dd 2b 02 c0       	push   0xc0022bdd
c000a426:	e8 9a 2b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a42b:	a1 c8 62 02 c0       	mov    eax,ds:0xc00262c8
c000a430:	83 c4 10             	add    esp,0x10
c000a433:	c1 e0 0c             	shl    eax,0xc
c000a436:	83 c4 14             	add    esp,0x14
c000a439:	5b                   	pop    ebx
c000a43a:	5e                   	pop    esi
c000a43b:	c3                   	ret    
c000a43c:	83 ec 08             	sub    esp,0x8
c000a43f:	89 c2                	mov    edx,eax
c000a441:	6a 01                	push   0x1
c000a443:	c1 ea 0c             	shr    edx,0xc
c000a446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a44a:	52                   	push   edx
c000a44b:	e8 4d fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a450:	83 c4 10             	add    esp,0x10
c000a453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a457:	eb dd                	jmp    c000a436 <Phys::allocatePage()+0xc8>

c000a459 <Phys::allocateContiguousPages(int)>:
c000a459:	57                   	push   edi
c000a45a:	56                   	push   esi
c000a45b:	53                   	push   ebx
c000a45c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a460:	fa                   	cli    
c000a461:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c000a467:	31 db                	xor    ebx,ebx
c000a469:	85 db                	test   ebx,ebx
c000a46b:	75 11                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a46d:	e8 fc fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a472:	83 fe 01             	cmp    esi,0x1
c000a475:	89 c7                	mov    edi,eax
c000a477:	74 21                	je     c000a49a <Phys::allocateContiguousPages(int)+0x41>
c000a479:	bb 01 00 00 00       	mov    ebx,0x1
c000a47e:	e8 eb fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a483:	89 da                	mov    edx,ebx
c000a485:	c1 e2 0c             	shl    edx,0xc
c000a488:	01 fa                	add    edx,edi
c000a48a:	39 c2                	cmp    edx,eax
c000a48c:	74 20                	je     c000a4ae <Phys::allocateContiguousPages(int)+0x55>
c000a48e:	bb 01 00 00 00       	mov    ebx,0x1
c000a493:	89 c7                	mov    edi,eax
c000a495:	83 fe 01             	cmp    esi,0x1
c000a498:	75 e4                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a49a:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000a49f:	48                   	dec    eax
c000a4a0:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000a4a5:	75 01                	jne    c000a4a8 <Phys::allocateContiguousPages(int)+0x4f>
c000a4a7:	fb                   	sti    
c000a4a8:	89 f8                	mov    eax,edi
c000a4aa:	5b                   	pop    ebx
c000a4ab:	5e                   	pop    esi
c000a4ac:	5f                   	pop    edi
c000a4ad:	c3                   	ret    
c000a4ae:	43                   	inc    ebx
c000a4af:	39 f3                	cmp    ebx,esi
c000a4b1:	75 b6                	jne    c000a469 <Phys::allocateContiguousPages(int)+0x10>
c000a4b3:	eb e5                	jmp    c000a49a <Phys::allocateContiguousPages(int)+0x41>

c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a4b5:	56                   	push   esi
c000a4b6:	53                   	push   ebx
c000a4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4bb:	39 1d cc 62 02 c0    	cmp    DWORD PTR ds:0xc00262cc,ebx
c000a4c1:	73 06                	jae    c000a4c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a4c3:	89 1d cc 62 02 c0    	mov    DWORD PTR ds:0xc00262cc,ebx
c000a4c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4cd:	c1 eb 0c             	shr    ebx,0xc
c000a4d0:	c1 e8 0c             	shr    eax,0xc
c000a4d3:	39 d8                	cmp    eax,ebx
c000a4d5:	73 13                	jae    c000a4ea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a4d7:	6a 00                	push   0x0
c000a4d9:	8d 70 01             	lea    esi,[eax+0x1]
c000a4dc:	50                   	push   eax
c000a4dd:	e8 bb fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a4e2:	5a                   	pop    edx
c000a4e3:	89 f0                	mov    eax,esi
c000a4e5:	59                   	pop    ecx
c000a4e6:	39 f3                	cmp    ebx,esi
c000a4e8:	75 ed                	jne    c000a4d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a4ea:	5b                   	pop    ebx
c000a4eb:	5e                   	pop    esi
c000a4ec:	c3                   	ret    

c000a4ed <Phys::physicalMemorySetup(unsigned int)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	57                   	push   edi
c000a4ef:	56                   	push   esi
c000a4f0:	53                   	push   ebx
c000a4f1:	31 db                	xor    ebx,ebx
c000a4f3:	83 ec 40             	sub    esp,0x40
c000a4f6:	6a 10                	push   0x10
c000a4f8:	6a 00                	push   0x0
c000a4fa:	68 dc 62 02 c0       	push   0xc00262dc
c000a4ff:	e8 78 61 ff ff       	call   c000067c <memset>
c000a504:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a508:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a50d:	05 00 10 00 00       	add    eax,0x1000
c000a512:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a516:	5a                   	pop    edx
c000a517:	59                   	pop    ecx
c000a518:	50                   	push   eax
c000a519:	68 fb 2b 02 c0       	push   0xc0022bfb
c000a51e:	e8 a2 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 ec 08             	sub    esp,0x8
c000a529:	6a 01                	push   0x1
c000a52b:	53                   	push   ebx
c000a52c:	43                   	inc    ebx
c000a52d:	e8 6b fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a53b:	75 e9                	jne    c000a526 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a53d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a544:	66 85 c0             	test   ax,ax
c000a547:	0f 84 8e 01 00 00    	je     c000a6db <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a54d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a551:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a559:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a55d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a562:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a566:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a56e:	eb 15                	jmp    c000a585 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a570:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a574:	83 c3 18             	add    ebx,0x18
c000a577:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a57b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a57f:	0f 84 66 01 00 00    	je     c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a585:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a588:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a58b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a58e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a596:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a598:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a59b:	01 f0                	add    eax,esi
c000a59d:	55                   	push   ebp
c000a59e:	11 fa                	adc    edx,edi
c000a5a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5ac:	56                   	push   esi
c000a5ad:	68 bc 2c 02 c0       	push   0xc0022cbc
c000a5b2:	e8 0e 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	09 f8                	or     eax,edi
c000a5c0:	0f 85 25 01 00 00    	jne    c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5c6:	4d                   	dec    ebp
c000a5c7:	75 a7                	jne    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a5c9:	ba 00 00 08 00       	mov    edx,0x80000
c000a5ce:	89 c1                	mov    ecx,eax
c000a5d0:	39 f2                	cmp    edx,esi
c000a5d2:	19 f9                	sbb    ecx,edi
c000a5d4:	0f 82 a7 00 00 00    	jb     c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5da:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a5de:	89 c1                	mov    ecx,eax
c000a5e0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a5e4:	0f 83 97 00 00 00    	jae    c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5ea:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a5ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a5f3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a5f7:	39 fa                	cmp    edx,edi
c000a5f9:	19 e8                	sbb    eax,ebp
c000a5fb:	0f 82 9a 01 00 00    	jb     c000a79b <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a601:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a605:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a609:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a60f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a614:	83 d5 ff             	adc    ebp,0xffffffff
c000a617:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a61b:	31 c0                	xor    eax,eax
c000a61d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a621:	39 fa                	cmp    edx,edi
c000a623:	89 c1                	mov    ecx,eax
c000a625:	19 e9                	sbb    ecx,ebp
c000a627:	0f 83 43 ff ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a62d:	be 00 00 08 00       	mov    esi,0x80000
c000a632:	51                   	push   ecx
c000a633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	68 e0 2c 02 c0       	push   0xc0022ce0
c000a63e:	e8 82 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a643:	5d                   	pop    ebp
c000a644:	58                   	pop    eax
c000a645:	57                   	push   edi
c000a646:	56                   	push   esi
c000a647:	e8 69 fe ff ff       	call   c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a64c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a654:	83 c4 0c             	add    esp,0xc
c000a657:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a65b:	03 05 d8 62 02 c0    	add    eax,DWORD PTR ds:0xc00262d8
c000a661:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a668:	a3 d8 62 02 c0       	mov    ds:0xc00262d8,eax
c000a66d:	52                   	push   edx
c000a66e:	50                   	push   eax
c000a66f:	68 21 2c 02 c0       	push   0xc0022c21
c000a674:	e8 4c 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	e9 ef fe ff ff       	jmp    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a681:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a68d:	39 ea                	cmp    edx,ebp
c000a68f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a693:	0f 82 d7 fe ff ff    	jb     c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a699:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a69e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6a6:	0f 83 c4 fe ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6ac:	39 ee                	cmp    esi,ebp
c000a6ae:	89 f8                	mov    eax,edi
c000a6b0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a6b4:	0f 83 78 ff ff ff    	jae    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a6be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a6c2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a6c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a6ca:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6d6:	e9 57 ff ff ff       	jmp    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6db:	83 ec 0c             	sub    esp,0xc
c000a6de:	68 13 2c 02 c0       	push   0xc0022c13
c000a6e3:	e8 8f 8c 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	83 ec 08             	sub    esp,0x8
c000a6ee:	bb 60 00 00 00       	mov    ebx,0x60
c000a6f3:	6a 00                	push   0x0
c000a6f5:	6a 06                	push   0x6
c000a6f7:	e8 a1 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a6fc:	58                   	pop    eax
c000a6fd:	5a                   	pop    edx
c000a6fe:	6a 00                	push   0x0
c000a700:	6a 07                	push   0x7
c000a702:	e8 96 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a707:	83 05 d8 62 02 c0 02 	add    DWORD PTR ds:0xc00262d8,0x2
c000a70e:	83 c4 10             	add    esp,0x10
c000a711:	83 ec 08             	sub    esp,0x8
c000a714:	6a 00                	push   0x0
c000a716:	53                   	push   ebx
c000a717:	43                   	inc    ebx
c000a718:	e8 80 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a726:	75 e9                	jne    c000a711 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a728:	a1 d8 62 02 c0       	mov    eax,ds:0xc00262d8
c000a72d:	bb 40 01 00 00       	mov    ebx,0x140
c000a732:	83 c0 20             	add    eax,0x20
c000a735:	a3 d8 62 02 c0       	mov    ds:0xc00262d8,eax
c000a73a:	eb 22                	jmp    c000a75e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a73c:	83 ec 08             	sub    esp,0x8
c000a73f:	6a 00                	push   0x0
c000a741:	53                   	push   ebx
c000a742:	43                   	inc    ebx
c000a743:	e8 55 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a748:	a1 d8 62 02 c0       	mov    eax,ds:0xc00262d8
c000a74d:	83 c4 10             	add    esp,0x10
c000a750:	40                   	inc    eax
c000a751:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a757:	a3 d8 62 02 c0       	mov    ds:0xc00262d8,eax
c000a75c:	74 07                	je     c000a765 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a75e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a763:	7e d7                	jle    c000a73c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a765:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a76a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a76f:	7f 22                	jg     c000a793 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a771:	83 ec 08             	sub    esp,0x8
c000a774:	6a 00                	push   0x0
c000a776:	53                   	push   ebx
c000a777:	43                   	inc    ebx
c000a778:	e8 20 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a77d:	a1 d8 62 02 c0       	mov    eax,ds:0xc00262d8
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	40                   	inc    eax
c000a786:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a78c:	a3 d8 62 02 c0       	mov    ds:0xc00262d8,eax
c000a791:	75 d7                	jne    c000a76a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a793:	83 c4 3c             	add    esp,0x3c
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	5d                   	pop    ebp
c000a79a:	c3                   	ret    
c000a79b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7ab:	e9 51 fe ff ff       	jmp    c000a601 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a7b0 <Pipe::isAtty()>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <Pipe::~Pipe()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 39 12 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Pipe::~Pipe()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Pipe::~Pipe()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	6a 20                	push   0x20
c000a7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f3:	e8 ec 26 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	c3                   	ret    
c000a7ff:	90                   	nop

c000a800 <Pipe::write(unsigned long long, void*, int*)>:
c000a800:	55                   	push   ebp
c000a801:	57                   	push   edi
c000a802:	56                   	push   esi
c000a803:	53                   	push   ebx
c000a804:	83 ec 1c             	sub    esp,0x1c
c000a807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a80f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a812:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a816:	89 04 24             	mov    DWORD PTR [esp],eax
c000a819:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a81d:	89 d8                	mov    eax,ebx
c000a81f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a822:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a826:	89 d6                	mov    esi,edx
c000a828:	89 d7                	mov    edi,edx
c000a82a:	c1 ff 1f             	sar    edi,0x1f
c000a82d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a830:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a834:	c1 f8 1f             	sar    eax,0x1f
c000a837:	39 f3                	cmp    ebx,esi
c000a839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a841:	19 f8                	sbb    eax,edi
c000a843:	b8 01 00 00 00       	mov    eax,0x1
c000a848:	72 6e                	jb     c000a8b8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a84a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a84d:	01 d0                	add    eax,edx
c000a84f:	99                   	cdq    
c000a850:	f7 fb                	idiv   ebx
c000a852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a856:	29 d3                	sub    ebx,edx
c000a858:	89 d7                	mov    edi,edx
c000a85a:	89 de                	mov    esi,ebx
c000a85c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a85f:	c1 fb 1f             	sar    ebx,0x1f
c000a862:	39 f2                	cmp    edx,esi
c000a864:	19 d8                	sbb    eax,ebx
c000a866:	b8 00 00 00 00       	mov    eax,0x0
c000a86b:	72 04                	jb     c000a871 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a86d:	89 d0                	mov    eax,edx
c000a86f:	29 f0                	sub    eax,esi
c000a871:	89 d3                	mov    ebx,edx
c000a873:	29 c3                	sub    ebx,eax
c000a875:	74 0b                	je     c000a882 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a877:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a87a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a87e:	89 d9                	mov    ecx,ebx
c000a880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a882:	85 c0                	test   eax,eax
c000a884:	74 0d                	je     c000a893 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a886:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a88a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a88d:	89 de                	mov    esi,ebx
c000a88f:	89 c1                	mov    ecx,eax
c000a891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a893:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a896:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a89b:	75 10                	jne    c000a8ad <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a89d:	83 ec 0c             	sub    esp,0xc
c000a8a0:	68 09 2d 02 c0       	push   0xc0022d09
c000a8a5:	e8 cd 8a 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a8aa:	83 c4 10             	add    esp,0x10
c000a8ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a8b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a8b4:	89 08                	mov    DWORD PTR [eax],ecx
c000a8b6:	31 c0                	xor    eax,eax
c000a8b8:	83 c4 1c             	add    esp,0x1c
c000a8bb:	5b                   	pop    ebx
c000a8bc:	5e                   	pop    esi
c000a8bd:	5f                   	pop    edi
c000a8be:	5d                   	pop    ebp
c000a8bf:	c3                   	ret    

c000a8c0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c0:	55                   	push   ebp
c000a8c1:	57                   	push   edi
c000a8c2:	56                   	push   esi
c000a8c3:	53                   	push   ebx
c000a8c4:	83 ec 1c             	sub    esp,0x1c
c000a8c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8d6:	89 c8                	mov    eax,ecx
c000a8d8:	99                   	cdq    
c000a8d9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8dd:	74 24                	je     c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8df:	39 f9                	cmp    ecx,edi
c000a8e1:	89 d1                	mov    ecx,edx
c000a8e3:	19 f1                	sbb    ecx,esi
c000a8e5:	73 1c                	jae    c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	fa                   	cli    
c000a8e8:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c000a8ee:	e8 e9 c0 00 00       	call   c00169dc <schedule()>
c000a8f3:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000a8f8:	48                   	dec    eax
c000a8f9:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000a8fe:	75 d3                	jne    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a900:	fb                   	sti    
c000a901:	eb d0                	jmp    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a903:	39 f8                	cmp    eax,edi
c000a905:	89 d1                	mov    ecx,edx
c000a907:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a90a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a90e:	19 f1                	sbb    ecx,esi
c000a910:	73 07                	jae    c000a919 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a919:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a91c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a91f:	29 f7                	sub    edi,esi
c000a921:	89 f8                	mov    eax,edi
c000a923:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a927:	99                   	cdq    
c000a928:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92f:	19 d0                	sbb    eax,edx
c000a931:	73 07                	jae    c000a93a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a933:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a93d:	89 ea                	mov    edx,ebp
c000a93f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a943:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a948:	74 0d                	je     c000a957 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a94a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a94d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a957:	85 d2                	test   edx,edx
c000a959:	74 11                	je     c000a96c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a95f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a962:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a966:	89 d1                	mov    ecx,edx
c000a968:	89 c7                	mov    edi,eax
c000a96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a96c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a96f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a972:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a975:	99                   	cdq    
c000a976:	89 f7                	mov    edi,esi
c000a978:	03 04 24             	add    eax,DWORD PTR [esp]
c000a97b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a97f:	c1 ff 1f             	sar    edi,0x1f
c000a982:	57                   	push   edi
c000a983:	56                   	push   esi
c000a984:	52                   	push   edx
c000a985:	50                   	push   eax
c000a986:	e8 b5 6a 01 00       	call   c0021440 <__umoddi3>
c000a98b:	83 c4 10             	add    esp,0x10
c000a98e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a991:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a996:	75 10                	jne    c000a9a8 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	68 26 2d 02 c0       	push   0xc0022d26
c000a9a0:	e8 d2 89 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9af:	89 10                	mov    DWORD PTR [eax],edx
c000a9b1:	83 c4 1c             	add    esp,0x1c
c000a9b4:	31 c0                	xor    eax,eax
c000a9b6:	5b                   	pop    ebx
c000a9b7:	5e                   	pop    esi
c000a9b8:	5f                   	pop    edi
c000a9b9:	5d                   	pop    ebp
c000a9ba:	c3                   	ret    
c000a9bb:	90                   	nop

c000a9bc <Pipe::Pipe(int)>:
c000a9bc:	83 ec 0c             	sub    esp,0xc
c000a9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c3:	83 ec 08             	sub    esp,0x8
c000a9c6:	6a 00                	push   0x0
c000a9c8:	50                   	push   eax
c000a9c9:	e8 58 0e 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	ba 4c 2d 02 c0       	mov    edx,0xc0022d4c
c000a9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9da:	89 10                	mov    DWORD PTR [eax],edx
c000a9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa01:	83 ec 0c             	sub    esp,0xc
c000aa04:	50                   	push   eax
c000aa05:	e8 ad f2 ff ff       	call   c0009cb7 <malloc>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	89 c2                	mov    edx,eax
c000aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa1e:	90                   	nop
c000aa1f:	83 c4 0c             	add    esp,0xc
c000aa22:	c3                   	ret    
c000aa23:	90                   	nop

c000aa24 <VgaText::isAtty()>:
c000aa24:	b0 01                	mov    al,0x1
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VgaText::~VgaText()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba d4 2d 02 c0       	mov    edx,0xc0022dd4
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	83 ec 0c             	sub    esp,0xc
c000aa3d:	50                   	push   eax
c000aa3e:	e8 c5 0f 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	90                   	nop
c000aa47:	83 c4 0c             	add    esp,0xc
c000aa4a:	c3                   	ret    
c000aa4b:	90                   	nop

c000aa4c <VgaText::~VgaText()>:
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	e8 cd ff ff ff       	call   c000aa28 <VgaText::~VgaText()>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	83 ec 08             	sub    esp,0x8
c000aa61:	68 b4 01 00 00       	push   0x1b4
c000aa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6a:	e8 75 24 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	83 c4 0c             	add    esp,0xc
c000aa75:	c3                   	ret    

c000aa76 <VgaText::read(unsigned long long, void*, int*)>:
c000aa76:	83 ec 10             	sub    esp,0x10
c000aa79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa85:	e8 17 48 00 00       	call   c000f2a1 <readKeyboard(VgaText*, char*, unsigned long)>
c000aa8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aa8e:	89 02                	mov    DWORD PTR [edx],eax
c000aa90:	31 c0                	xor    eax,eax
c000aa92:	83 c4 1c             	add    esp,0x1c
c000aa95:	c3                   	ret    

c000aa96 <setTerminalScrollLock(bool)>:
c000aa96:	c3                   	ret    

c000aa97 <addToTerminalCycle(VgaText*)>:
c000aa97:	8b 15 20 63 02 c0    	mov    edx,DWORD PTR ds:0xc0026320
c000aa9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa1:	85 d2                	test   edx,edx
c000aaa3:	75 09                	jne    c000aaae <addToTerminalCycle(VgaText*)+0x17>
c000aaa5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aaa8:	a3 20 63 02 c0       	mov    ds:0xc0026320,eax
c000aaad:	c3                   	ret    
c000aaae:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000aab1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000aab4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000aab7:	c3                   	ret    

c000aab8 <installVgaTextImplementation()>:
c000aab8:	83 ec 10             	sub    esp,0x10
c000aabb:	6a 20                	push   0x20
c000aabd:	6a 00                	push   0x0
c000aabf:	68 00 63 02 c0       	push   0xc0026300
c000aac4:	e8 b3 5b ff ff       	call   c000067c <memset>
c000aac9:	83 c4 1c             	add    esp,0x1c
c000aacc:	c3                   	ret    

c000aacd <scrollTerminalScrollLock(int)>:
c000aacd:	c3                   	ret    

c000aace <VgaText::updateTitle()>:
c000aace:	53                   	push   ebx
c000aacf:	31 c0                	xor    eax,eax
c000aad1:	83 ec 58             	sub    esp,0x58
c000aad4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aad8:	89 e1                	mov    ecx,esp
c000aada:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aade:	40                   	inc    eax
c000aadf:	83 f8 50             	cmp    eax,0x50
c000aae2:	75 f6                	jne    c000aada <VgaText::updateTitle()+0xc>
c000aae4:	31 c0                	xor    eax,eax
c000aae6:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000aaed:	84 db                	test   bl,bl
c000aaef:	74 06                	je     c000aaf7 <VgaText::updateTitle()+0x29>
c000aaf1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aaf4:	40                   	inc    eax
c000aaf5:	eb ef                	jmp    c000aae6 <VgaText::updateTitle()+0x18>
c000aaf7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aafa:	85 c0                	test   eax,eax
c000aafc:	74 09                	je     c000ab07 <VgaText::updateTitle()+0x39>
c000aafe:	53                   	push   ebx
c000aaff:	53                   	push   ebx
c000ab00:	51                   	push   ecx
c000ab01:	52                   	push   edx
c000ab02:	ff d0                	call   eax
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 58             	add    esp,0x58
c000ab0a:	5b                   	pop    ebx
c000ab0b:	c3                   	ret    

c000ab0c <VgaText::load()>:
c000ab0c:	53                   	push   ebx
c000ab0d:	31 c0                	xor    eax,eax
c000ab0f:	83 ec 58             	sub    esp,0x58
c000ab12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab16:	89 e2                	mov    edx,esp
c000ab18:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab1c:	40                   	inc    eax
c000ab1d:	83 f8 50             	cmp    eax,0x50
c000ab20:	75 f6                	jne    c000ab18 <VgaText::load()+0xc>
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab2b:	84 c9                	test   cl,cl
c000ab2d:	74 06                	je     c000ab35 <VgaText::load()+0x29>
c000ab2f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab32:	40                   	inc    eax
c000ab33:	eb ef                	jmp    c000ab24 <VgaText::load()+0x18>
c000ab35:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab38:	85 c0                	test   eax,eax
c000ab3a:	74 09                	je     c000ab45 <VgaText::load()+0x39>
c000ab3c:	51                   	push   ecx
c000ab3d:	51                   	push   ecx
c000ab3e:	52                   	push   edx
c000ab3f:	53                   	push   ebx
c000ab40:	ff d0                	call   eax
c000ab42:	83 c4 10             	add    esp,0x10
c000ab45:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab48:	85 c0                	test   eax,eax
c000ab4a:	74 09                	je     c000ab55 <VgaText::load()+0x49>
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	53                   	push   ebx
c000ab50:	ff d0                	call   eax
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	83 c4 58             	add    esp,0x58
c000ab58:	5b                   	pop    ebx
c000ab59:	c3                   	ret    

c000ab5a <VgaText::updateCursor()>:
c000ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab5e:	39 05 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,eax
c000ab64:	75 09                	jne    c000ab6f <VgaText::updateCursor()+0x15>
c000ab66:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ab69:	85 c0                	test   eax,eax
c000ab6b:	74 02                	je     c000ab6f <VgaText::updateCursor()+0x15>
c000ab6d:	ff e0                	jmp    eax
c000ab6f:	c3                   	ret    

c000ab70 <VgaText::doANSI_SGR(int)>:
c000ab70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab78:	85 d2                	test   edx,edx
c000ab7a:	75 0b                	jne    c000ab87 <VgaText::doANSI_SGR(int)+0x17>
c000ab7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ab7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ab82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab85:	eb 59                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab87:	83 fa 07             	cmp    edx,0x7
c000ab8a:	75 0b                	jne    c000ab97 <VgaText::doANSI_SGR(int)+0x27>
c000ab8c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ab8f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ab92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ab95:	eb 49                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab97:	83 fa 1b             	cmp    edx,0x1b
c000ab9a:	74 e0                	je     c000ab7c <VgaText::doANSI_SGR(int)+0xc>
c000ab9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ab9f:	83 f9 07             	cmp    ecx,0x7
c000aba2:	77 09                	ja     c000abad <VgaText::doANSI_SGR(int)+0x3d>
c000aba4:	8b 14 8d 60 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda6a0]
c000abab:	eb 20                	jmp    c000abcd <VgaText::doANSI_SGR(int)+0x5d>
c000abad:	8d 4a d8             	lea    ecx,[edx-0x28]
c000abb0:	83 f9 07             	cmp    ecx,0x7
c000abb3:	77 09                	ja     c000abbe <VgaText::doANSI_SGR(int)+0x4e>
c000abb5:	8b 14 8d 60 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda6a0]
c000abbc:	eb 22                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000abbe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000abc1:	83 f9 07             	cmp    ecx,0x7
c000abc4:	77 0b                	ja     c000abd1 <VgaText::doANSI_SGR(int)+0x61>
c000abc6:	8b 14 95 18 58 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda7e8]
c000abcd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd0:	c3                   	ret    
c000abd1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000abd4:	83 f9 07             	cmp    ecx,0x7
c000abd7:	77 0a                	ja     c000abe3 <VgaText::doANSI_SGR(int)+0x73>
c000abd9:	8b 14 95 f0 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda810]
c000abe0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abe3:	c3                   	ret    

c000abe4 <VgaText::setDefaultBgColour(VgaColour)>:
c000abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000abef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <VgaText::setDefaultFgColour(VgaColour)>:
c000abf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abfc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000abff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac02:	c3                   	ret    
c000ac03:	90                   	nop

c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac04:	53                   	push   ebx
c000ac05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac11:	51                   	push   ecx
c000ac12:	e8 cd ff ff ff       	call   c000abe4 <VgaText::setDefaultBgColour(VgaColour)>
c000ac17:	58                   	pop    eax
c000ac18:	5a                   	pop    edx
c000ac19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac21:	5b                   	pop    ebx
c000ac22:	eb d0                	jmp    c000abf4 <VgaText::setDefaultFgColour(VgaColour)>

c000ac24 <VgaText::setTitleTextColour(VgaColour)>:
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac2f:	e9 9a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac34 <VgaText::setTitleColour(VgaColour)>:
c000ac34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac3f:	e9 8a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac44 <VgaText::setTitle(char*)>:
c000ac44:	53                   	push   ebx
c000ac45:	83 ec 10             	sub    esp,0x10
c000ac48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac50:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ac56:	50                   	push   eax
c000ac57:	e8 dc 5a ff ff       	call   c0000738 <strcpy>
c000ac5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ac60:	83 c4 18             	add    esp,0x18
c000ac63:	5b                   	pop    ebx
c000ac64:	e9 65 fe ff ff       	jmp    c000aace <VgaText::updateTitle()>
c000ac69:	90                   	nop

c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ac6a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ac6e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ac73:	83 e0 0f             	and    eax,0xf
c000ac76:	c1 e2 04             	shl    edx,0x4
c000ac79:	09 d0                	or     eax,edx
c000ac7b:	c3                   	ret    

c000ac7c <VgaText::scrollScreen()>:
c000ac7c:	55                   	push   ebp
c000ac7d:	b9 01 00 00 00       	mov    ecx,0x1
c000ac82:	57                   	push   edi
c000ac83:	56                   	push   esi
c000ac84:	53                   	push   ebx
c000ac85:	83 ec 0c             	sub    esp,0xc
c000ac88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac8c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ac92:	31 ff                	xor    edi,edi
c000ac94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ac97:	83 f9 17             	cmp    ecx,0x17
c000ac9a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ac9d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aca4:	75 27                	jne    c000accd <VgaText::scrollScreen()+0x51>
c000aca6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aca9:	01 f5                	add    ebp,esi
c000acab:	f7 c7 01 00 00 00    	test   edi,0x1
c000acb1:	74 16                	je     c000acc9 <VgaText::scrollScreen()+0x4d>
c000acb3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000acb7:	50                   	push   eax
c000acb8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000acbc:	50                   	push   eax
c000acbd:	e8 a8 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000acc2:	5a                   	pop    edx
c000acc3:	5a                   	pop    edx
c000acc4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000acc7:	eb 04                	jmp    c000accd <VgaText::scrollScreen()+0x51>
c000acc9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000accd:	47                   	inc    edi
c000acce:	46                   	inc    esi
c000accf:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000acd5:	75 bd                	jne    c000ac94 <VgaText::scrollScreen()+0x18>
c000acd7:	41                   	inc    ecx
c000acd8:	83 f9 18             	cmp    ecx,0x18
c000acdb:	75 af                	jne    c000ac8c <VgaText::scrollScreen()+0x10>
c000acdd:	39 1d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ebx
c000ace3:	75 1b                	jne    c000ad00 <VgaText::scrollScreen()+0x84>
c000ace5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ace9:	74 05                	je     c000acf0 <VgaText::scrollScreen()+0x74>
c000aceb:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000acee:	eb 10                	jmp    c000ad00 <VgaText::scrollScreen()+0x84>
c000acf0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000acf3:	85 c0                	test   eax,eax
c000acf5:	74 09                	je     c000ad00 <VgaText::scrollScreen()+0x84>
c000acf7:	83 ec 0c             	sub    esp,0xc
c000acfa:	53                   	push   ebx
c000acfb:	ff d0                	call   eax
c000acfd:	83 c4 10             	add    esp,0x10
c000ad00:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	5f                   	pop    edi
c000ad0a:	5d                   	pop    ebp
c000ad0b:	e9 4a fe ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad15:	c1 e0 08             	shl    eax,0x8
c000ad18:	89 c2                	mov    edx,eax
c000ad1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad1f:	09 d0                	or     eax,edx
c000ad21:	c3                   	ret    

c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad22:	56                   	push   esi
c000ad23:	53                   	push   ebx
c000ad24:	51                   	push   ecx
c000ad25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad29:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad2e:	50                   	push   eax
c000ad2f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad34:	50                   	push   eax
c000ad35:	e8 30 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad3a:	5b                   	pop    ebx
c000ad3b:	0f b6 c0             	movzx  eax,al
c000ad3e:	5e                   	pop    esi
c000ad3f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad44:	50                   	push   eax
c000ad45:	53                   	push   ebx
c000ad46:	e8 c5 ff ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad4b:	5a                   	pop    edx
c000ad4c:	5e                   	pop    esi
c000ad4d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ad50:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ad56:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ad5a:	0f b7 d2             	movzx  edx,dx
c000ad5d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ad61:	39 0d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ecx
c000ad67:	75 10                	jne    c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad69:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ad6c:	85 c0                	test   eax,eax
c000ad6e:	74 09                	je     c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad70:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad74:	5a                   	pop    edx
c000ad75:	5b                   	pop    ebx
c000ad76:	5e                   	pop    esi
c000ad77:	ff e0                	jmp    eax
c000ad79:	58                   	pop    eax
c000ad7a:	5b                   	pop    ebx
c000ad7b:	5e                   	pop    esi
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <VgaText::getCursorX()>:
c000ad7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ad85:	c3                   	ret    

c000ad86 <VgaText::getCursorY()>:
c000ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ad8d:	c3                   	ret    

c000ad8e <VgaText::setCursor(int, int)>:
c000ad8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad96:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ad99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ada0:	e9 b5 fd ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ada5 <setActiveTerminal(VgaText*)>:
c000ada5:	53                   	push   ebx
c000ada6:	83 ec 08             	sub    esp,0x8
c000ada9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adad:	85 db                	test   ebx,ebx
c000adaf:	75 11                	jne    c000adc2 <setActiveTerminal(VgaText*)+0x1d>
c000adb1:	c7 44 24 10 60 2d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022d60
c000adb9:	83 c4 08             	add    esp,0x8
c000adbc:	5b                   	pop    ebx
c000adbd:	e9 b5 85 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c000adc2:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 0c                	je     c000add7 <setActiveTerminal(VgaText*)+0x32>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	50                   	push   eax
c000adcf:	e8 86 fd ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	89 1d 24 63 02 c0    	mov    DWORD PTR ds:0xc0026324,ebx
c000addd:	51                   	push   ecx
c000adde:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ade1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ade4:	53                   	push   ebx
c000ade5:	e8 a4 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adf1:	75 07                	jne    c000adfa <setActiveTerminal(VgaText*)+0x55>
c000adf3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000adfa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adfe:	83 c4 08             	add    esp,0x8
c000ae01:	5b                   	pop    ebx
c000ae02:	e9 05 fd ff ff       	jmp    c000ab0c <VgaText::load()>

c000ae07 <doTerminalCycle()>:
c000ae07:	83 ec 18             	sub    esp,0x18
c000ae0a:	a1 20 63 02 c0       	mov    eax,ds:0xc0026320
c000ae0f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae12:	50                   	push   eax
c000ae13:	a3 20 63 02 c0       	mov    ds:0xc0026320,eax
c000ae18:	e8 88 ff ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c000ae1d:	83 c4 1c             	add    esp,0x1c
c000ae20:	c3                   	ret    
c000ae21:	90                   	nop

c000ae22 <VgaText::setCursorX(int)>:
c000ae22:	83 ec 10             	sub    esp,0x10
c000ae25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae30:	50                   	push   eax
c000ae31:	e8 58 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae36:	83 c4 1c             	add    esp,0x1c
c000ae39:	c3                   	ret    

c000ae3a <VgaText::setCursorY(int)>:
c000ae3a:	83 ec 10             	sub    esp,0x10
c000ae3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae48:	50                   	push   eax
c000ae49:	e8 40 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae4e:	83 c4 1c             	add    esp,0x1c
c000ae51:	c3                   	ret    

c000ae52 <VgaText::incrementCursor(bool)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae60:	40                   	inc    eax
c000ae61:	83 f8 50             	cmp    eax,0x50
c000ae64:	74 05                	je     c000ae6b <VgaText::incrementCursor(bool)+0x19>
c000ae66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae69:	eb 24                	jmp    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ae6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ae75:	8d 50 01             	lea    edx,[eax+0x1]
c000ae78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ae7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ae7e:	75 0f                	jne    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ae86:	53                   	push   ebx
c000ae87:	e8 f0 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 f0                	mov    eax,esi
c000ae91:	84 c0                	test   al,al
c000ae93:	74 0c                	je     c000aea1 <VgaText::incrementCursor(bool)+0x4f>
c000ae95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae99:	5a                   	pop    edx
c000ae9a:	5b                   	pop    ebx
c000ae9b:	5e                   	pop    esi
c000ae9c:	e9 b9 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aea1:	58                   	pop    eax
c000aea2:	5b                   	pop    ebx
c000aea3:	5e                   	pop    esi
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <VgaText::decrementCursor(bool)>:
c000aea6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aeaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aeae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000aeb1:	85 c0                	test   eax,eax
c000aeb3:	74 04                	je     c000aeb9 <VgaText::decrementCursor(bool)+0x13>
c000aeb5:	48                   	dec    eax
c000aeb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aeb9:	84 c9                	test   cl,cl
c000aebb:	74 09                	je     c000aec6 <VgaText::decrementCursor(bool)+0x20>
c000aebd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aec1:	e9 94 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aec6:	c3                   	ret    
c000aec7:	90                   	nop

c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aec8:	53                   	push   ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aedc:	3c 07                	cmp    al,0x7
c000aede:	75 21                	jne    c000af01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000aee0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aee8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aef0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000aef8:	83 c4 08             	add    esp,0x8
c000aefb:	5b                   	pop    ebx
c000aefc:	e9 5e 2f 00 00       	jmp    c000de5f <Krnl::beep(int, int, bool)>
c000af01:	3c 0d                	cmp    al,0xd
c000af03:	75 09                	jne    c000af0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af0c:	eb 2c                	jmp    c000af3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af0e:	3c 0a                	cmp    al,0xa
c000af10:	75 31                	jne    c000af43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1c:	8d 50 01             	lea    edx,[eax+0x1]
c000af1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af25:	75 0f                	jne    c000af36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2d:	53                   	push   ebx
c000af2e:	e8 49 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af3a:	83 c4 08             	add    esp,0x8
c000af3d:	5b                   	pop    ebx
c000af3e:	e9 17 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000af43:	3c 08                	cmp    al,0x8
c000af45:	75 25                	jne    c000af6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af47:	50                   	push   eax
c000af48:	50                   	push   eax
c000af49:	6a 01                	push   0x1
c000af4b:	53                   	push   ebx
c000af4c:	e8 55 ff ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000af51:	5a                   	pop    edx
c000af52:	59                   	pop    ecx
c000af53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af5f:	6a 20                	push   0x20
c000af61:	53                   	push   ebx
c000af62:	e8 bb fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af67:	83 c4 28             	add    esp,0x28
c000af6a:	5b                   	pop    ebx
c000af6b:	c3                   	ret    
c000af6c:	83 ec 08             	sub    esp,0x8
c000af6f:	0f be c0             	movsx  eax,al
c000af72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af78:	51                   	push   ecx
c000af79:	52                   	push   edx
c000af7a:	50                   	push   eax
c000af7b:	53                   	push   ebx
c000af7c:	e8 a1 fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000af85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000af8d:	83 c4 28             	add    esp,0x28
c000af90:	5b                   	pop    ebx
c000af91:	e9 bc fe ff ff       	jmp    c000ae52 <VgaText::incrementCursor(bool)>

c000af96 <VgaText::doUpdate()>:
c000af96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af9a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000af9d:	85 c0                	test   eax,eax
c000af9f:	74 02                	je     c000afa3 <VgaText::doUpdate()+0xd>
c000afa1:	ff e0                	jmp    eax
c000afa3:	c3                   	ret    

c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000afa4:	55                   	push   ebp
c000afa5:	31 ed                	xor    ebp,ebp
c000afa7:	57                   	push   edi
c000afa8:	56                   	push   esi
c000afa9:	53                   	push   ebx
c000afaa:	83 ec 1c             	sub    esp,0x1c
c000afad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afb6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000afbd:	50                   	push   eax
c000afbe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afc3:	50                   	push   eax
c000afc4:	e8 a1 fc ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000afc9:	59                   	pop    ecx
c000afca:	0f b6 c0             	movzx  eax,al
c000afcd:	5e                   	pop    esi
c000afce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000afd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000afd7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000afda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afde:	0f b7 f6             	movzx  esi,si
c000afe1:	01 f6                	add    esi,esi
c000afe3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000afe6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe9:	84 c0                	test   al,al
c000afeb:	0f 84 fd 00 00 00    	je     c000b0ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aff1:	3c 0d                	cmp    al,0xd
c000aff3:	75 0c                	jne    c000b001 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aff5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000affc:	e9 e7 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b001:	3c 0a                	cmp    al,0xa
c000b003:	75 47                	jne    c000b04c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b005:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b008:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b00f:	8d 48 01             	lea    ecx,[eax+0x1]
c000b012:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b015:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b018:	75 0f                	jne    c000b029 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b01a:	83 ec 0c             	sub    esp,0xc
c000b01d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b020:	53                   	push   ebx
c000b021:	e8 56 fc ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	31 ed                	xor    ebp,ebp
c000b02e:	53                   	push   ebx
c000b02f:	e8 26 fb ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b034:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b03f:	0f b7 f6             	movzx  esi,si
c000b042:	01 f6                	add    esi,esi
c000b044:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b047:	e9 9c 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b04c:	3c 08                	cmp    al,0x8
c000b04e:	75 35                	jne    c000b085 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b050:	56                   	push   esi
c000b051:	56                   	push   esi
c000b052:	6a 01                	push   0x1
c000b054:	53                   	push   ebx
c000b055:	e8 4c fe ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000b05a:	58                   	pop    eax
c000b05b:	5a                   	pop    edx
c000b05c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b05f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b062:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b065:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b068:	6a 20                	push   0x20
c000b06a:	53                   	push   ebx
c000b06b:	e8 b2 fc ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b070:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b075:	83 c4 20             	add    esp,0x20
c000b078:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b07b:	0f b7 f6             	movzx  esi,si
c000b07e:	01 f6                	add    esi,esi
c000b080:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b083:	eb 63                	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b085:	51                   	push   ecx
c000b086:	51                   	push   ecx
c000b087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b08b:	50                   	push   eax
c000b08c:	e8 7f fc ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	66 89 06             	mov    WORD PTR [esi],ax
c000b097:	39 1d 24 63 02 c0    	cmp    DWORD PTR ds:0xc0026324,ebx
c000b09d:	75 21                	jne    c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b09f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 1a                	je     c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0a6:	52                   	push   edx
c000b0a7:	52                   	push   edx
c000b0a8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b0b9:	51                   	push   ecx
c000b0ba:	53                   	push   ebx
c000b0bb:	ff d0                	call   eax
c000b0bd:	83 c4 20             	add    esp,0x20
c000b0c0:	83 c6 02             	add    esi,0x2
c000b0c3:	50                   	push   eax
c000b0c4:	50                   	push   eax
c000b0c5:	6a 00                	push   0x0
c000b0c7:	53                   	push   ebx
c000b0c8:	e8 85 fd ff ff       	call   c000ae52 <VgaText::incrementCursor(bool)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b0d4:	75 0d                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b0d6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0db:	0f b7 f6             	movzx  esi,si
c000b0de:	01 f6                	add    esi,esi
c000b0e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0e3:	bd 01 00 00 00       	mov    ebp,0x1
c000b0e8:	47                   	inc    edi
c000b0e9:	e9 f8 fe ff ff       	jmp    c000afe6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	53                   	push   ebx
c000b0f2:	e8 63 fa ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	89 e8                	mov    eax,ebp
c000b0fc:	84 c0                	test   al,al
c000b0fe:	74 0c                	je     c000b10c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	53                   	push   ebx
c000b104:	e8 8d fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b113:	83 c4 1c             	add    esp,0x1c
c000b116:	5b                   	pop    ebx
c000b117:	5e                   	pop    esi
c000b118:	5f                   	pop    edi
c000b119:	5d                   	pop    ebp
c000b11a:	c3                   	ret    
c000b11b:	90                   	nop

c000b11c <VgaText::clearScreen()>:
c000b11c:	57                   	push   edi
c000b11d:	56                   	push   esi
c000b11e:	31 f6                	xor    esi,esi
c000b120:	53                   	push   ebx
c000b121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b125:	52                   	push   edx
c000b126:	6a 00                	push   0x0
c000b128:	6a 00                	push   0x0
c000b12a:	53                   	push   ebx
c000b12b:	e8 5e fc ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b130:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b13d:	7e 20                	jle    c000b15f <VgaText::clearScreen()+0x43>
c000b13f:	31 ff                	xor    edi,edi
c000b141:	50                   	push   eax
c000b142:	50                   	push   eax
c000b143:	56                   	push   esi
c000b144:	57                   	push   edi
c000b145:	47                   	inc    edi
c000b146:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b149:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b14c:	6a 20                	push   0x20
c000b14e:	53                   	push   ebx
c000b14f:	e8 ce fb ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b154:	83 c4 20             	add    esp,0x20
c000b157:	83 ff 50             	cmp    edi,0x50
c000b15a:	75 e5                	jne    c000b141 <VgaText::clearScreen()+0x25>
c000b15c:	46                   	inc    esi
c000b15d:	eb db                	jmp    c000b13a <VgaText::clearScreen()+0x1e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	53                   	push   ebx
c000b163:	e8 2e fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b168:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	5b                   	pop    ebx
c000b173:	5e                   	pop    esi
c000b174:	5f                   	pop    edi
c000b175:	c3                   	ret    

c000b176 <VgaText::putchar(char)>:
c000b176:	56                   	push   esi
c000b177:	53                   	push   ebx
c000b178:	83 ec 14             	sub    esp,0x14
c000b17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b17f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b183:	3c 5b                	cmp    al,0x5b
c000b185:	75 18                	jne    c000b19f <VgaText::putchar(char)+0x29>
c000b187:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b18b:	74 1f                	je     c000b1ac <VgaText::putchar(char)+0x36>
c000b18d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b193:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b19a:	e9 bd 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b19f:	3c 1b                	cmp    al,0x1b
c000b1a1:	75 09                	jne    c000b1ac <VgaText::putchar(char)+0x36>
c000b1a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1a7:	e9 b0 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b1ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1af:	84 c9                	test   cl,cl
c000b1b1:	0f 84 92 00 00 00    	je     c000b249 <VgaText::putchar(char)+0xd3>
c000b1b7:	8d 50 c0             	lea    edx,[eax-0x40]
c000b1ba:	80 fa 3e             	cmp    dl,0x3e
c000b1bd:	77 76                	ja     c000b235 <VgaText::putchar(char)+0xbf>
c000b1bf:	3c 6d                	cmp    al,0x6d
c000b1c1:	75 47                	jne    c000b20a <VgaText::putchar(char)+0x94>
c000b1c3:	31 f6                	xor    esi,esi
c000b1c5:	31 d2                	xor    edx,edx
c000b1c7:	31 c0                	xor    eax,eax
c000b1c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b1cc:	7e 2d                	jle    c000b1fb <VgaText::putchar(char)+0x85>
c000b1ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b1d3:	80 fa 3b             	cmp    dl,0x3b
c000b1d6:	75 17                	jne    c000b1ef <VgaText::putchar(char)+0x79>
c000b1d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b1dc:	50                   	push   eax
c000b1dd:	53                   	push   ebx
c000b1de:	e8 8d f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b1e3:	59                   	pop    ecx
c000b1e4:	31 d2                	xor    edx,edx
c000b1e6:	58                   	pop    eax
c000b1e7:	31 c0                	xor    eax,eax
c000b1e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b1ed:	eb 09                	jmp    c000b1f8 <VgaText::putchar(char)+0x82>
c000b1ef:	6b c0 0a             	imul   eax,eax,0xa
c000b1f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b1f6:	88 ca                	mov    dl,cl
c000b1f8:	46                   	inc    esi
c000b1f9:	eb ce                	jmp    c000b1c9 <VgaText::putchar(char)+0x53>
c000b1fb:	84 d2                	test   dl,dl
c000b1fd:	74 2e                	je     c000b22d <VgaText::putchar(char)+0xb7>
c000b1ff:	50                   	push   eax
c000b200:	53                   	push   ebx
c000b201:	e8 6a f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b206:	58                   	pop    eax
c000b207:	5a                   	pop    edx
c000b208:	eb 23                	jmp    c000b22d <VgaText::putchar(char)+0xb7>
c000b20a:	3c 4a                	cmp    al,0x4a
c000b20c:	75 1f                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b20e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b212:	75 19                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	53                   	push   ebx
c000b218:	e8 ff fe ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	6a 00                	push   0x0
c000b222:	6a 00                	push   0x0
c000b224:	53                   	push   ebx
c000b225:	e8 64 fb ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b233:	eb 27                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b235:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b238:	83 fa 0e             	cmp    edx,0xe
c000b23b:	7f 1f                	jg     c000b25c <VgaText::putchar(char)+0xe6>
c000b23d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b240:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b243:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b247:	eb 13                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b249:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b24c:	0f be c0             	movsx  eax,al
c000b24f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b252:	50                   	push   eax
c000b253:	53                   	push   ebx
c000b254:	e8 6f fc ff ff       	call   c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 14             	add    esp,0x14
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	c3                   	ret    

c000b262 <VgaText::putx(unsigned int)>:
c000b262:	57                   	push   edi
c000b263:	b9 11 00 00 00       	mov    ecx,0x11
c000b268:	56                   	push   esi
c000b269:	be 6e 2d 02 c0       	mov    esi,0xc0022d6e
c000b26e:	53                   	push   ebx
c000b26f:	83 ec 20             	sub    esp,0x20
c000b272:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b276:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b27a:	fc                   	cld    
c000b27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b27d:	be 08 00 00 00       	mov    esi,0x8
c000b282:	50                   	push   eax
c000b283:	50                   	push   eax
c000b284:	89 d8                	mov    eax,ebx
c000b286:	c1 e3 04             	shl    ebx,0x4
c000b289:	c1 e8 1c             	shr    eax,0x1c
c000b28c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b291:	50                   	push   eax
c000b292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b296:	e8 db fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	4e                   	dec    esi
c000b29f:	75 e1                	jne    c000b282 <VgaText::putx(unsigned int)+0x20>
c000b2a1:	83 c4 20             	add    esp,0x20
c000b2a4:	5b                   	pop    ebx
c000b2a5:	5e                   	pop    esi
c000b2a6:	5f                   	pop    edi
c000b2a7:	c3                   	ret    

c000b2a8 <VgaText::puts(char const*)>:
c000b2a8:	53                   	push   ebx
c000b2a9:	83 ec 08             	sub    esp,0x8
c000b2ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b2b3:	84 c0                	test   al,al
c000b2b5:	74 12                	je     c000b2c9 <VgaText::puts(char const*)+0x21>
c000b2b7:	43                   	inc    ebx
c000b2b8:	51                   	push   ecx
c000b2b9:	51                   	push   ecx
c000b2ba:	50                   	push   eax
c000b2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bf:	e8 b2 fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb e7                	jmp    c000b2b0 <VgaText::puts(char const*)+0x8>
c000b2c9:	83 c4 08             	add    esp,0x8
c000b2cc:	5b                   	pop    ebx
c000b2cd:	c3                   	ret    

c000b2ce <VgaText::VgaText(char const*)>:
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d5:	83 ec 08             	sub    esp,0x8
c000b2d8:	6a 00                	push   0x0
c000b2da:	50                   	push   eax
c000b2db:	e8 46 05 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	ba d4 2d 02 c0       	mov    edx,0xc0022dd4
c000b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ec:	89 10                	mov    DWORD PTR [eax],edx
c000b2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b308:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b310:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b318:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b323:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b339:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b344:	8d 50 60             	lea    edx,[eax+0x60]
c000b347:	bb 00 63 02 c0       	mov    ebx,0xc0026300
c000b34c:	b8 08 00 00 00       	mov    eax,0x8
c000b351:	fc                   	cld    
c000b352:	89 d7                	mov    edi,edx
c000b354:	89 de                	mov    esi,ebx
c000b356:	89 c1                	mov    ecx,eax
c000b358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35e:	05 82 00 00 00       	add    eax,0x82
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b36a:	50                   	push   eax
c000b36b:	e8 c8 53 ff ff       	call   c0000738 <strcpy>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b377:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	6a 01                	push   0x1
c000b383:	e8 e1 08 00 00       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 c2                	mov    edx,eax
c000b38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b394:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3a1:	89 c6                	mov    esi,eax
c000b3a3:	e8 c6 ef ff ff       	call   c000a36e <Phys::allocatePage()>
c000b3a8:	68 05 0c 00 00       	push   0xc05
c000b3ad:	56                   	push   esi
c000b3ae:	50                   	push   eax
c000b3af:	53                   	push   ebx
c000b3b0:	e8 1f 0f 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bf:	83 ec 04             	sub    esp,0x4
c000b3c2:	68 00 0f 00 00       	push   0xf00
c000b3c7:	6a 00                	push   0x0
c000b3c9:	50                   	push   eax
c000b3ca:	e8 ad 52 ff ff       	call   c000067c <memset>
c000b3cf:	83 c4 10             	add    esp,0x10
c000b3d2:	83 ec 04             	sub    esp,0x4
c000b3d5:	6a 00                	push   0x0
c000b3d7:	6a 07                	push   0x7
c000b3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3dd:	e8 22 f8 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	83 ec 04             	sub    esp,0x4
c000b3e8:	6a 00                	push   0x0
c000b3ea:	6a 00                	push   0x0
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	e8 99 f9 ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b3f5:	83 c4 10             	add    esp,0x10
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	e8 18 fd ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	05 02 01 00 00       	add    eax,0x102
c000b418:	83 ec 04             	sub    esp,0x4
c000b41b:	6a 30                	push   0x30
c000b41d:	6a 00                	push   0x0
c000b41f:	50                   	push   eax
c000b420:	e8 57 52 ff ff       	call   c000067c <memset>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	05 32 01 00 00       	add    eax,0x132
c000b431:	83 ec 04             	sub    esp,0x4
c000b434:	68 80 00 00 00       	push   0x80
c000b439:	6a 00                	push   0x0
c000b43b:	50                   	push   eax
c000b43c:	e8 3b 52 ff ff       	call   c000067c <memset>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	90                   	nop
c000b445:	5b                   	pop    ebx
c000b446:	5e                   	pop    esi
c000b447:	5f                   	pop    edi
c000b448:	c3                   	ret    
c000b449:	90                   	nop

c000b44a <VgaText::receiveKey(unsigned char)>:
c000b44a:	55                   	push   ebp
c000b44b:	57                   	push   edi
c000b44c:	56                   	push   esi
c000b44d:	53                   	push   ebx
c000b44e:	83 ec 1c             	sub    esp,0x1c
c000b451:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b459:	84 db                	test   bl,bl
c000b45b:	0f 84 c6 00 00 00    	je     c000b527 <VgaText::receiveKey(unsigned char)+0xdd>
c000b461:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b467:	80 fb 08             	cmp    bl,0x8
c000b46a:	75 2c                	jne    c000b498 <VgaText::receiveKey(unsigned char)+0x4e>
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	57                   	push   edi
c000b470:	e8 23 52 ff ff       	call   c0000698 <strlen>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	85 c0                	test   eax,eax
c000b47a:	74 41                	je     c000b4bd <VgaText::receiveKey(unsigned char)+0x73>
c000b47c:	50                   	push   eax
c000b47d:	50                   	push   eax
c000b47e:	6a 08                	push   0x8
c000b480:	56                   	push   esi
c000b481:	e8 f0 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b486:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b489:	e8 0a 52 ff ff       	call   c0000698 <strlen>
c000b48e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b496:	eb 22                	jmp    c000b4ba <VgaText::receiveKey(unsigned char)+0x70>
c000b498:	0f be c3             	movsx  eax,bl
c000b49b:	52                   	push   edx
c000b49c:	52                   	push   edx
c000b49d:	50                   	push   eax
c000b49e:	56                   	push   esi
c000b49f:	e8 d2 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b4a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4ad:	59                   	pop    ecx
c000b4ae:	5d                   	pop    ebp
c000b4af:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b4b3:	50                   	push   eax
c000b4b4:	57                   	push   edi
c000b4b5:	e8 be 53 ff ff       	call   c0000878 <strcat>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b4c4:	75 05                	jne    c000b4cb <VgaText::receiveKey(unsigned char)+0x81>
c000b4c6:	80 fb 0a             	cmp    bl,0xa
c000b4c9:	75 50                	jne    c000b51b <VgaText::receiveKey(unsigned char)+0xd1>
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b4d4:	53                   	push   ebx
c000b4d5:	e8 be 51 ff ff       	call   c0000698 <strlen>
c000b4da:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4dd:	89 c5                	mov    ebp,eax
c000b4df:	e8 b4 51 ff ff       	call   c0000698 <strlen>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b4eb:	3d 80 00 00 00       	cmp    eax,0x80
c000b4f0:	76 10                	jbe    c000b502 <VgaText::receiveKey(unsigned char)+0xb8>
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	68 7f 2d 02 c0       	push   0xc0022d7f
c000b4fa:	e8 78 7e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	50                   	push   eax
c000b503:	50                   	push   eax
c000b504:	57                   	push   edi
c000b505:	53                   	push   ebx
c000b506:	e8 6d 53 ff ff       	call   c0000878 <strcat>
c000b50b:	83 c4 0c             	add    esp,0xc
c000b50e:	6a 30                	push   0x30
c000b510:	6a 00                	push   0x0
c000b512:	57                   	push   edi
c000b513:	e8 64 51 ff ff       	call   c000067c <memset>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	56                   	push   esi
c000b51f:	e8 72 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	83 c4 1c             	add    esp,0x1c
c000b52a:	5b                   	pop    ebx
c000b52b:	5e                   	pop    esi
c000b52c:	5f                   	pop    edi
c000b52d:	5d                   	pop    ebp
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <VgaText::write(unsigned long long, void*, int*)>:
c000b530:	55                   	push   ebp
c000b531:	57                   	push   edi
c000b532:	56                   	push   esi
c000b533:	53                   	push   ebx
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b53b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b53f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b543:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b54a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b54d:	39 eb                	cmp    ebx,ebp
c000b54f:	74 13                	je     c000b564 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b551:	43                   	inc    ebx
c000b552:	50                   	push   eax
c000b553:	50                   	push   eax
c000b554:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b558:	50                   	push   eax
c000b559:	56                   	push   esi
c000b55a:	e8 17 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	eb e9                	jmp    c000b54d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b56e:	56                   	push   esi
c000b56f:	e8 22 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b574:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b578:	89 38                	mov    DWORD PTR [eax],edi
c000b57a:	83 c4 1c             	add    esp,0x1c
c000b57d:	31 c0                	xor    eax,eax
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	5d                   	pop    ebp
c000b583:	c3                   	ret    

c000b584 <newTerminal(char*)>:
c000b584:	83 ec 28             	sub    esp,0x28
c000b587:	68 b4 01 00 00       	push   0x1b4
c000b58c:	e8 26 e7 ff ff       	call   c0009cb7 <malloc>
c000b591:	5a                   	pop    edx
c000b592:	59                   	pop    ecx
c000b593:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b597:	50                   	push   eax
c000b598:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59c:	e8 2d fd ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c000b5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a5:	83 c4 2c             	add    esp,0x2c
c000b5a8:	c3                   	ret    
c000b5a9:	66 90                	xchg   ax,ax
c000b5ab:	90                   	nop

c000b5ac <TSS::TSS()>:
c000b5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5b7:	90                   	nop
c000b5b8:	c3                   	ret    
c000b5b9:	90                   	nop
c000b5ba:	66 90                	xchg   ax,ax

c000b5bc <TSS::setESP(unsigned long)>:
c000b5bc:	55                   	push   ebp
c000b5bd:	89 e5                	mov    ebp,esp
c000b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b5c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5cb:	90                   	nop
c000b5cc:	5d                   	pop    ebp
c000b5cd:	c3                   	ret    
c000b5ce:	66 90                	xchg   ax,ax

c000b5d0 <TSS::flush()>:
c000b5d0:	55                   	push   ebp
c000b5d1:	89 e5                	mov    ebp,esp
c000b5d3:	83 ec 10             	sub    esp,0x10
c000b5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5db:	83 c8 03             	or     eax,0x3
c000b5de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b5e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b5e6:	66 89 d0             	mov    ax,dx
c000b5e9:	0f 00 d8             	ltr    ax
c000b5ec:	90                   	nop
c000b5ed:	c9                   	leave  
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <TSS::setup(unsigned long, unsigned long)>:
c000b5f0:	55                   	push   ebp
c000b5f1:	89 e5                	mov    ebp,esp
c000b5f3:	83 ec 18             	sub    esp,0x18
c000b5f6:	83 ec 0c             	sub    esp,0xc
c000b5f9:	6a 68                	push   0x68
c000b5fb:	e8 b7 e6 ff ff       	call   c0009cb7 <malloc>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	89 c2                	mov    edx,eax
c000b605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b608:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b611:	83 ec 04             	sub    esp,0x4
c000b614:	6a 68                	push   0x68
c000b616:	6a 00                	push   0x0
c000b618:	50                   	push   eax
c000b619:	e8 5e 50 ff ff       	call   c000067c <memset>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b627:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b633:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b63c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b63f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b642:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b64b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b654:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b657:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b663:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b66c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b66f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b687:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b693:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b696:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b69c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b8:	0f 20 da             	mov    edx,cr3
c000b6bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b6be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b6c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ca:	83 ec 08             	sub    esp,0x8
c000b6cd:	50                   	push   eax
c000b6ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6d1:	50                   	push   eax
c000b6d2:	e8 19 de ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 ec 08             	sub    esp,0x8
c000b6dd:	6a 68                	push   0x68
c000b6df:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6e2:	50                   	push   eax
c000b6e3:	e8 24 de ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b6ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6f2:	83 e0 0f             	and    eax,0xf
c000b6f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b6f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6fb:	83 c8 40             	or     eax,0x40
c000b6fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b701:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000b706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b70c:	05 78 01 00 00       	add    eax,0x178
c000b711:	83 ec 04             	sub    esp,0x4
c000b714:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b717:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b71a:	50                   	push   eax
c000b71b:	e8 20 de ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	89 c2                	mov    edx,eax
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	89 10                	mov    DWORD PTR [eax],edx
c000b72a:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000b72f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b735:	05 78 01 00 00       	add    eax,0x178
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 27 de ff ff       	call   c000956a <GDT::flush()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b749:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74b:	c9                   	leave  
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b752:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b759:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b75e:	75 08                	jne    c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b760:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b766:	eb 38                	jmp    c000b7a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b768:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b76d:	75 17                	jne    c000b786 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b77d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b77f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b783:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b786:	89 c1                	mov    ecx,eax
c000b788:	83 e1 fd             	and    ecx,0xfffffffd
c000b78b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b791:	74 cd                	je     c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b793:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b798:	83 e0 ef             	and    eax,0xffffffef
c000b79b:	83 f8 08             	cmp    eax,0x8
c000b79e:	76 c0                	jbe    c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7a0:	31 c0                	xor    eax,eax
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <ReservedFilename::isAtty()>:
c000b7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7ab:	31 c0                	xor    eax,eax
c000b7ad:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b7b3:	74 09                	je     c000b7be <ReservedFilename::isAtty()+0x1a>
c000b7b5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b7bb:	0f 94 c0             	sete   al
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7d4:	75 08                	jne    c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b7d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7dc:	eb 3d                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b7de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7e3:	75 17                	jne    c000b7fc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b7f9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b7fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b801:	75 04                	jne    c000b807 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b803:	89 0a                	mov    DWORD PTR [edx],ecx
c000b805:	eb 14                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b807:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b80c:	74 c8                	je     c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b80e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b813:	83 e0 ef             	and    eax,0xffffffef
c000b816:	83 f8 08             	cmp    eax,0x8
c000b819:	76 bb                	jbe    c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b81b:	31 c0                	xor    eax,eax
c000b81d:	c3                   	ret    

c000b81e <UnixFile::getFileDescriptor()>:
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b825:	c3                   	ret    

c000b826 <UnixFile::UnixFile(int)>:
c000b826:	53                   	push   ebx
c000b827:	83 ec 28             	sub    esp,0x28
c000b82a:	ba 9c 2e 02 c0       	mov    edx,0xc0022e9c
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b83d:	0f 8f 8c 01 00 00    	jg     c000b9cf <UnixFile::UnixFile(int)+0x1a9>
c000b843:	a1 a0 59 02 c0       	mov    eax,ds:0xc00259a0
c000b848:	8d 50 01             	lea    edx,[eax+0x1]
c000b84b:	89 15 a0 59 02 c0    	mov    DWORD PTR ds:0xc00259a0,edx
c000b851:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b855:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b858:	83 ec 08             	sub    esp,0x8
c000b85b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b85f:	68 b8 63 02 c0       	push   0xc00263b8
c000b864:	e8 bf 5d 01 00       	call   c0021628 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	a0 b4 63 02 c0       	mov    al,ds:0xc00263b4
c000b871:	83 f0 01             	xor    eax,0x1
c000b874:	84 c0                	test   al,al
c000b876:	0f 84 54 01 00 00    	je     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b87c:	c6 05 b4 63 02 c0 01 	mov    BYTE PTR ds:0xc00263b4,0x1
c000b883:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	e8 20 e4 ff ff       	call   c0009cb7 <malloc>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	89 c3                	mov    ebx,eax
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 03 ff ff 0f       	push   0xfffff03
c000b8a4:	53                   	push   ebx
c000b8a5:	e8 2c 01 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 1d ac 63 02 c0    	mov    DWORD PTR ds:0xc00263ac,ebx
c000b8b3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b8bb:	83 ec 0c             	sub    esp,0xc
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 f0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	89 c3                	mov    ebx,eax
c000b8cc:	83 ec 08             	sub    esp,0x8
c000b8cf:	68 01 ff ff 0f       	push   0xfffff01
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 fc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	89 1d b0 63 02 c0    	mov    DWORD PTR ds:0xc00263b0,ebx
c000b8e3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8f2:	e8 c0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8f7:	83 c4 10             	add    esp,0x10
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	83 ec 08             	sub    esp,0x8
c000b8ff:	68 00 ff ff 0f       	push   0xfffff00
c000b904:	53                   	push   ebx
c000b905:	e8 cc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	89 1d a4 63 02 c0    	mov    DWORD PTR ds:0xc00263a4,ebx
c000b913:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b922:	e8 90 e3 ff ff       	call   c0009cb7 <malloc>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	89 c3                	mov    ebx,eax
c000b92c:	83 ec 08             	sub    esp,0x8
c000b92f:	68 02 ff ff 0f       	push   0xfffff02
c000b934:	53                   	push   ebx
c000b935:	e8 9c 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	89 1d a8 63 02 c0    	mov    DWORD PTR ds:0xc00263a8,ebx
c000b943:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b94b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b950:	7f 7e                	jg     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b952:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b95a:	83 ec 0c             	sub    esp,0xc
c000b95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b961:	e8 51 e3 ff ff       	call   c0009cb7 <malloc>
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	89 c3                	mov    ebx,eax
c000b96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b974:	83 ec 08             	sub    esp,0x8
c000b977:	50                   	push   eax
c000b978:	53                   	push   ebx
c000b979:	e8 58 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b985:	89 1c 85 80 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c80],ebx
c000b98c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99b:	e8 17 e3 ff ff       	call   c0009cb7 <malloc>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	89 c3                	mov    ebx,eax
c000b9a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9a9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9ae:	83 ec 08             	sub    esp,0x8
c000b9b1:	50                   	push   eax
c000b9b2:	53                   	push   ebx
c000b9b3:	e8 1e 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9bf:	89 1c 85 40 63 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9cc0],ebx
c000b9c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9ca:	e9 7c ff ff ff       	jmp    c000b94b <UnixFile::UnixFile(int)+0x125>
c000b9cf:	90                   	nop
c000b9d0:	83 c4 28             	add    esp,0x28
c000b9d3:	5b                   	pop    ebx
c000b9d4:	c3                   	ret    
c000b9d5:	90                   	nop

c000b9d6 <ReservedFilename::ReservedFilename(int)>:
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e4:	50                   	push   eax
c000b9e5:	e8 3c fe ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c000b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f6:	89 10                	mov    DWORD PTR [eax],edx
c000b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba03:	90                   	nop
c000ba04:	83 c4 0c             	add    esp,0xc
c000ba07:	c3                   	ret    

c000ba08 <UnixFile::~UnixFile()>:
c000ba08:	83 ec 1c             	sub    esp,0x1c
c000ba0b:	ba 9c 2e 02 c0       	mov    edx,0xc0022e9c
c000ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba1d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba22:	7f 73                	jg     c000ba97 <UnixFile::~UnixFile()+0x8f>
c000ba24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	68 b8 63 02 c0       	push   0xc00263b8
c000ba34:	e8 c3 5c 01 00       	call   c00216fc <LinkedList<UnixFile>::getFirstElement()>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	68 b8 63 02 c0       	push   0xc00263b8
c000ba48:	e8 b7 5c 01 00       	call   c0021704 <LinkedList<UnixFile>::removeFirst()>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba54:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ba58:	74 40                	je     c000ba9a <UnixFile::~UnixFile()+0x92>
c000ba5a:	83 ec 08             	sub    esp,0x8
c000ba5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba61:	68 b8 63 02 c0       	push   0xc00263b8
c000ba66:	e8 bd 5b 01 00       	call   c0021628 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba72:	8d 50 01             	lea    edx,[eax+0x1]
c000ba75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba79:	3d 88 13 00 00       	cmp    eax,0x1388
c000ba7e:	0f 94 c0             	sete   al
c000ba81:	84 c0                	test   al,al
c000ba83:	74 a7                	je     c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba85:	83 ec 0c             	sub    esp,0xc
c000ba88:	68 74 2e 02 c0       	push   0xc0022e74
c000ba8d:	e8 e5 78 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	eb 95                	jmp    c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba97:	90                   	nop
c000ba98:	eb 01                	jmp    c000ba9b <UnixFile::~UnixFile()+0x93>
c000ba9a:	90                   	nop
c000ba9b:	90                   	nop
c000ba9c:	83 c4 1c             	add    esp,0x1c
c000ba9f:	c3                   	ret    

c000baa0 <UnixFile::~UnixFile()>:
c000baa0:	83 ec 0c             	sub    esp,0xc
c000baa3:	83 ec 0c             	sub    esp,0xc
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	e8 59 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000baaf:	83 c4 10             	add    esp,0x10
c000bab2:	83 ec 08             	sub    esp,0x8
c000bab5:	6a 0c                	push   0xc
c000bab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babb:	e8 24 14 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bac0:	83 c4 10             	add    esp,0x10
c000bac3:	83 c4 0c             	add    esp,0xc
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <ReservedFilename::~ReservedFilename()>:
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	ba b8 2e 02 c0       	mov    edx,0xc0022eb8
c000bad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad4:	89 10                	mov    DWORD PTR [eax],edx
c000bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	50                   	push   eax
c000bade:	e8 25 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000bae3:	83 c4 10             	add    esp,0x10
c000bae6:	90                   	nop
c000bae7:	83 c4 0c             	add    esp,0xc
c000baea:	c3                   	ret    
c000baeb:	90                   	nop

c000baec <ReservedFilename::~ReservedFilename()>:
c000baec:	83 ec 0c             	sub    esp,0xc
c000baef:	83 ec 0c             	sub    esp,0xc
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	e8 cd ff ff ff       	call   c000bac8 <ReservedFilename::~ReservedFilename()>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	6a 0c                	push   0xc
c000bb03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb07:	e8 d8 13 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	83 c4 0c             	add    esp,0xc
c000bb12:	c3                   	ret    

c000bb13 <getFromFileDescriptor(int)>:
c000bb13:	53                   	push   ebx
c000bb14:	83 ec 08             	sub    esp,0x8
c000bb17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb1b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb21:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb27:	7f 2c                	jg     c000bb55 <getFromFileDescriptor(int)+0x42>
c000bb29:	83 ec 0c             	sub    esp,0xc
c000bb2c:	68 b8 63 02 c0       	push   0xc00263b8
c000bb31:	e8 c6 5b 01 00       	call   c00216fc <LinkedList<UnixFile>::getFirstElement()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 c0                	test   eax,eax
c000bb3b:	75 04                	jne    c000bb41 <getFromFileDescriptor(int)+0x2e>
c000bb3d:	31 c0                	xor    eax,eax
c000bb3f:	eb 6e                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb41:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb44:	74 69                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb46:	52                   	push   edx
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	68 b8 63 02 c0       	push   0xc00263b8
c000bb4e:	e8 53 5c 01 00       	call   c00217a6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bb53:	eb e1                	jmp    c000bb36 <getFromFileDescriptor(int)+0x23>
c000bb55:	a1 ac 63 02 c0       	mov    eax,ds:0xc00263ac
c000bb5a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bb60:	74 4d                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb62:	a1 b0 63 02 c0       	mov    eax,ds:0xc00263b0
c000bb67:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bb6d:	74 40                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb6f:	a1 a8 63 02 c0       	mov    eax,ds:0xc00263a8
c000bb74:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bb7a:	74 33                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb7c:	a1 a4 63 02 c0       	mov    eax,ds:0xc00263a4
c000bb81:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bb87:	74 26                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb89:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bb8f:	83 f8 08             	cmp    eax,0x8
c000bb92:	77 09                	ja     c000bb9d <getFromFileDescriptor(int)+0x8a>
c000bb94:	8b 04 85 80 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9c80]
c000bb9b:	eb 12                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb9d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bba3:	83 fb 08             	cmp    ebx,0x8
c000bba6:	77 95                	ja     c000bb3d <getFromFileDescriptor(int)+0x2a>
c000bba8:	8b 04 9d 40 63 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9cc0]
c000bbaf:	83 c4 08             	add    esp,0x8
c000bbb2:	5b                   	pop    ebx
c000bbb3:	c3                   	ret    

c000bbb4 <__static_initialization_and_destruction_0(int, int)>:
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bbbc:	75 34                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bbc6:	75 2a                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbc8:	83 ec 0c             	sub    esp,0xc
c000bbcb:	68 b8 63 02 c0       	push   0xc00263b8
c000bbd0:	e8 11 5a 01 00       	call   c00215e6 <LinkedList<UnixFile>::LinkedList()>
c000bbd5:	83 c4 10             	add    esp,0x10
c000bbd8:	83 ec 04             	sub    esp,0x4
c000bbdb:	68 d8 57 02 c0       	push   0xc00257d8
c000bbe0:	68 b8 63 02 c0       	push   0xc00263b8
c000bbe5:	68 e4 15 02 c0       	push   0xc00215e4
c000bbea:	e8 6f 12 00 00       	call   c000ce5e <__cxa_atexit>
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	90                   	nop
c000bbf3:	83 c4 0c             	add    esp,0xc
c000bbf6:	c3                   	ret    

c000bbf7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	83 ec 08             	sub    esp,0x8
c000bbfd:	68 ff ff 00 00       	push   0xffff
c000bc02:	6a 01                	push   0x1
c000bc04:	e8 ab ff ff ff       	call   c000bbb4 <__static_initialization_and_destruction_0(int, int)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	c3                   	ret    

c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc10:	53                   	push   ebx
c000bc11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc19:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc1f:	89 c8                	mov    eax,ecx
c000bc21:	d1 e8                	shr    eax,1
c000bc23:	03 05 a8 59 02 c0    	add    eax,DWORD PTR ds:0xc00259a8
c000bc29:	83 e1 01             	and    ecx,0x1
c000bc2c:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc2e:	75 09                	jne    c000bc39 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc30:	83 e2 f0             	and    edx,0xfffffff0
c000bc33:	09 da                	or     edx,ebx
c000bc35:	88 10                	mov    BYTE PTR [eax],dl
c000bc37:	5b                   	pop    ebx
c000bc38:	c3                   	ret    
c000bc39:	c1 e3 04             	shl    ebx,0x4
c000bc3c:	83 e2 0f             	and    edx,0xf
c000bc3f:	09 da                	or     edx,ebx
c000bc41:	88 10                	mov    BYTE PTR [eax],dl
c000bc43:	5b                   	pop    ebx
c000bc44:	c3                   	ret    

c000bc45 <Virt::getPageState(unsigned long)>:
c000bc45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc49:	8b 0d a8 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259a8
c000bc4f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bc55:	89 d0                	mov    eax,edx
c000bc57:	d1 e8                	shr    eax,1
c000bc59:	83 e2 01             	and    edx,0x1
c000bc5c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bc5f:	75 04                	jne    c000bc65 <Virt::getPageState(unsigned long)+0x20>
c000bc61:	83 e0 0f             	and    eax,0xf
c000bc64:	c3                   	ret    
c000bc65:	c0 e8 04             	shr    al,0x4
c000bc68:	c3                   	ret    

c000bc69 <Virt::allocateKernelVirtualPages(int)>:
c000bc69:	55                   	push   ebp
c000bc6a:	31 ed                	xor    ebp,ebp
c000bc6c:	57                   	push   edi
c000bc6d:	56                   	push   esi
c000bc6e:	53                   	push   ebx
c000bc6f:	31 db                	xor    ebx,ebx
c000bc71:	83 ec 1c             	sub    esp,0x1c
c000bc74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc78:	8b 3d a4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259a4
c000bc7e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bc83:	57                   	push   edi
c000bc84:	e8 bc ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bc89:	5a                   	pop    edx
c000bc8a:	84 c0                	test   al,al
c000bc8c:	75 3a                	jne    c000bcc8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bc8e:	85 db                	test   ebx,ebx
c000bc90:	75 02                	jne    c000bc94 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bc92:	89 fd                	mov    ebp,edi
c000bc94:	43                   	inc    ebx
c000bc95:	39 f3                	cmp    ebx,esi
c000bc97:	74 5a                	je     c000bcf3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bc99:	47                   	inc    edi
c000bc9a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bca0:	76 31                	jbe    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bca2:	c7 05 a4 59 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00259a4,0xc8000
c000bcac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bcb1:	75 28                	jne    c000bcdb <Virt::allocateKernelVirtualPages(int)+0x72>
c000bcb3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bcb8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bcbd:	57                   	push   edi
c000bcbe:	e8 82 ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bcc3:	5a                   	pop    edx
c000bcc4:	84 c0                	test   al,al
c000bcc6:	74 c6                	je     c000bc8e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bcc8:	31 db                	xor    ebx,ebx
c000bcca:	47                   	inc    edi
c000bccb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcd1:	77 cf                	ja     c000bca2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bcd3:	89 3d a4 59 02 c0    	mov    DWORD PTR ds:0xc00259a4,edi
c000bcd9:	eb a8                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	68 cc 2e 02 c0       	push   0xc0022ecc
c000bce3:	e8 8f 76 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000bce8:	8b 3d a4 59 02 c0    	mov    edi,DWORD PTR ds:0xc00259a4
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	eb 90                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcf3:	89 2d a4 59 02 c0    	mov    DWORD PTR ds:0xc00259a4,ebp
c000bcf9:	4b                   	dec    ebx
c000bcfa:	74 5f                	je     c000bd5b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bcfc:	85 f6                	test   esi,esi
c000bcfe:	74 3d                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd00:	89 e8                	mov    eax,ebp
c000bd02:	31 db                	xor    ebx,ebx
c000bd04:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd07:	eb 14                	jmp    c000bd1d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd09:	6a 01                	push   0x1
c000bd0b:	43                   	inc    ebx
c000bd0c:	50                   	push   eax
c000bd0d:	e8 fe fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd12:	58                   	pop    eax
c000bd13:	39 f3                	cmp    ebx,esi
c000bd15:	5a                   	pop    edx
c000bd16:	74 25                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd18:	a1 a4 59 02 c0       	mov    eax,ds:0xc00259a4
c000bd1d:	8d 50 01             	lea    edx,[eax+0x1]
c000bd20:	85 db                	test   ebx,ebx
c000bd22:	89 15 a4 59 02 c0    	mov    DWORD PTR ds:0xc00259a4,edx
c000bd28:	74 20                	je     c000bd4a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd2a:	39 df                	cmp    edi,ebx
c000bd2c:	75 db                	jne    c000bd09 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd2e:	6a 03                	push   0x3
c000bd30:	43                   	inc    ebx
c000bd31:	50                   	push   eax
c000bd32:	e8 d9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd37:	59                   	pop    ecx
c000bd38:	39 f3                	cmp    ebx,esi
c000bd3a:	58                   	pop    eax
c000bd3b:	75 db                	jne    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd3d:	83 c4 1c             	add    esp,0x1c
c000bd40:	89 e8                	mov    eax,ebp
c000bd42:	5b                   	pop    ebx
c000bd43:	c1 e0 0c             	shl    eax,0xc
c000bd46:	5e                   	pop    esi
c000bd47:	5f                   	pop    edi
c000bd48:	5d                   	pop    ebp
c000bd49:	c3                   	ret    
c000bd4a:	6a 02                	push   0x2
c000bd4c:	bb 01 00 00 00       	mov    ebx,0x1
c000bd51:	50                   	push   eax
c000bd52:	e8 b9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd57:	58                   	pop    eax
c000bd58:	5a                   	pop    edx
c000bd59:	eb bd                	jmp    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd5b:	6a 04                	push   0x4
c000bd5d:	8d 45 01             	lea    eax,[ebp+0x1]
c000bd60:	55                   	push   ebp
c000bd61:	a3 a4 59 02 c0       	mov    ds:0xc00259a4,eax
c000bd66:	e8 a5 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd6b:	59                   	pop    ecx
c000bd6c:	89 e8                	mov    eax,ebp
c000bd6e:	5b                   	pop    ebx
c000bd6f:	c1 e0 0c             	shl    eax,0xc
c000bd72:	83 c4 1c             	add    esp,0x1c
c000bd75:	5b                   	pop    ebx
c000bd76:	5e                   	pop    esi
c000bd77:	5f                   	pop    edi
c000bd78:	5d                   	pop    ebp
c000bd79:	c3                   	ret    

c000bd7a <Virt::freeSwapfilePage(unsigned long)>:
c000bd7a:	53                   	push   ebx
c000bd7b:	8b 15 d0 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263d0
c000bd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd85:	b8 01 00 00 00       	mov    eax,0x1
c000bd8a:	89 cb                	mov    ebx,ecx
c000bd8c:	d3 e0                	shl    eax,cl
c000bd8e:	c1 eb 05             	shr    ebx,0x5
c000bd91:	f7 d0                	not    eax
c000bd93:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bd96:	5b                   	pop    ebx
c000bd97:	c3                   	ret    

c000bd98 <Virt::swapIDToSector(unsigned long)>:
c000bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd9c:	0f af 05 ac 59 02 c0 	imul   eax,DWORD PTR ds:0xc00259ac
c000bda3:	03 05 b4 59 02 c0    	add    eax,DWORD PTR ds:0xc00259b4
c000bda9:	c3                   	ret    

c000bdaa <Virt::allocateSwapfilePage()>:
c000bdaa:	55                   	push   ebp
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	57                   	push   edi
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	8b 0d ac 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259ac
c000bdb9:	a1 b0 59 02 c0       	mov    eax,ds:0xc00259b0
c000bdbe:	f7 f1                	div    ecx
c000bdc0:	39 0d b0 59 02 c0    	cmp    DWORD PTR ds:0xc00259b0,ecx
c000bdc6:	72 2d                	jb     c000bdf5 <Virt::allocateSwapfilePage()+0x4b>
c000bdc8:	8b 35 d0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263d0
c000bdce:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdd0:	f6 c2 01             	test   dl,0x1
c000bdd3:	74 3c                	je     c000be11 <Virt::allocateSwapfilePage()+0x67>
c000bdd5:	31 c9                	xor    ecx,ecx
c000bdd7:	bf 01 00 00 00       	mov    edi,0x1
c000bddc:	eb 12                	jmp    c000bdf0 <Virt::allocateSwapfilePage()+0x46>
c000bdde:	89 fd                	mov    ebp,edi
c000bde0:	89 ca                	mov    edx,ecx
c000bde2:	d3 e5                	shl    ebp,cl
c000bde4:	c1 ea 05             	shr    edx,0x5
c000bde7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bdea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdec:	85 ea                	test   edx,ebp
c000bdee:	74 2a                	je     c000be1a <Virt::allocateSwapfilePage()+0x70>
c000bdf0:	41                   	inc    ecx
c000bdf1:	39 c8                	cmp    eax,ecx
c000bdf3:	77 e9                	ja     c000bdde <Virt::allocateSwapfilePage()+0x34>
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	68 84 30 02 c0       	push   0xc0023084
c000bdfd:	e8 75 75 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	31 c9                	xor    ecx,ecx
c000be07:	83 c4 0c             	add    esp,0xc
c000be0a:	89 c8                	mov    eax,ecx
c000be0c:	5b                   	pop    ebx
c000be0d:	5e                   	pop    esi
c000be0e:	5f                   	pop    edi
c000be0f:	5d                   	pop    ebp
c000be10:	c3                   	ret    
c000be11:	89 f3                	mov    ebx,esi
c000be13:	bd 01 00 00 00       	mov    ebp,0x1
c000be18:	31 c9                	xor    ecx,ecx
c000be1a:	09 ea                	or     edx,ebp
c000be1c:	89 c8                	mov    eax,ecx
c000be1e:	89 13                	mov    DWORD PTR [ebx],edx
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	5d                   	pop    ebp
c000be27:	c3                   	ret    

c000be28 <Virt::virtualMemorySetup()>:
c000be28:	53                   	push   ebx
c000be29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be2e:	6a 0f                	push   0xf
c000be30:	53                   	push   ebx
c000be31:	43                   	inc    ebx
c000be32:	e8 d9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be37:	58                   	pop    eax
c000be38:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be3e:	5a                   	pop    edx
c000be3f:	75 ed                	jne    c000be2e <Virt::virtualMemorySetup()+0x6>
c000be41:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be46:	6a 00                	push   0x0
c000be48:	53                   	push   ebx
c000be49:	43                   	inc    ebx
c000be4a:	e8 c1 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4f:	59                   	pop    ecx
c000be50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be56:	58                   	pop    eax
c000be57:	75 ed                	jne    c000be46 <Virt::virtualMemorySetup()+0x1e>
c000be59:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000be5e:	6a 0f                	push   0xf
c000be60:	53                   	push   ebx
c000be61:	43                   	inc    ebx
c000be62:	e8 a9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be67:	58                   	pop    eax
c000be68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000be6e:	5a                   	pop    edx
c000be6f:	75 ed                	jne    c000be5e <Virt::virtualMemorySetup()+0x36>
c000be71:	5b                   	pop    ebx
c000be72:	c3                   	ret    

c000be73 <Virt::setupPageSwapping(int)>:
c000be73:	53                   	push   ebx
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be7b:	a1 68 88 02 c0       	mov    eax,ds:0xc0028868
c000be80:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000be86:	8b 10                	mov    edx,DWORD PTR [eax]
c000be88:	53                   	push   ebx
c000be89:	c1 e3 0b             	shl    ebx,0xb
c000be8c:	68 9b 30 02 c0       	push   0xc002309b
c000be91:	50                   	push   eax
c000be92:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000be95:	89 1d b0 59 02 c0    	mov    DWORD PTR ds:0xc00259b0,ebx
c000be9b:	c6 05 b8 59 02 c0 43 	mov    BYTE PTR ds:0xc00259b8,0x43
c000bea2:	c1 eb 08             	shr    ebx,0x8
c000bea5:	a3 b4 59 02 c0       	mov    ds:0xc00259b4,eax
c000beaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bead:	c7 05 ac 59 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00259ac,0x8
c000beb7:	e8 fb dd ff ff       	call   c0009cb7 <malloc>
c000bebc:	83 c4 0c             	add    esp,0xc
c000bebf:	89 c1                	mov    ecx,eax
c000bec1:	a3 d0 63 02 c0       	mov    ds:0xc00263d0,eax
c000bec6:	31 d2                	xor    edx,edx
c000bec8:	a1 b0 59 02 c0       	mov    eax,ds:0xc00259b0
c000becd:	f7 35 ac 59 02 c0    	div    DWORD PTR ds:0xc00259ac
c000bed3:	c1 e8 05             	shr    eax,0x5
c000bed6:	50                   	push   eax
c000bed7:	6a 00                	push   0x0
c000bed9:	51                   	push   ecx
c000beda:	e8 9d 47 ff ff       	call   c000067c <memset>
c000bedf:	83 c4 18             	add    esp,0x18
c000bee2:	5b                   	pop    ebx
c000bee3:	c3                   	ret    

c000bee4 <VAS::VAS(VAS*)>:
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	68 ec 2e 02 c0       	push   0xc0022eec
c000bf05:	e8 6d 74 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	90                   	nop
c000bf0e:	83 c4 0c             	add    esp,0xc
c000bf11:	c3                   	ret    

c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf16:	89 c2                	mov    edx,eax
c000bf18:	c1 e8 0a             	shr    eax,0xa
c000bf1b:	c1 ea 16             	shr    edx,0x16
c000bf1e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf23:	19 c9                	sbb    ecx,ecx
c000bf25:	c1 e2 0c             	shl    edx,0xc
c000bf28:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf2e:	25 fc 0f 00 00       	and    eax,0xffc
c000bf33:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf3a:	01 d0                	add    eax,edx
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <VAS::getPageTableEntry(unsigned long)>:
c000bf3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf42:	89 ca                	mov    edx,ecx
c000bf44:	c1 e9 0a             	shr    ecx,0xa
c000bf47:	c1 ea 16             	shr    edx,0x16
c000bf4a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bf50:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bf56:	c1 e0 0c             	shl    eax,0xc
c000bf59:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bf5c:	c3                   	ret    

c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>:
c000bf5d:	57                   	push   edi
c000bf5e:	56                   	push   esi
c000bf5f:	be 01 00 00 00       	mov    esi,0x1
c000bf64:	53                   	push   ebx
c000bf65:	83 ec 10             	sub    esp,0x10
c000bf68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf6c:	c1 eb 0c             	shr    ebx,0xc
c000bf6f:	eb 3f                	jmp    c000bfb0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bf71:	83 ec 08             	sub    esp,0x8
c000bf74:	57                   	push   edi
c000bf75:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c000bf7b:	e8 be ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf85:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bf89:	f6 c4 04             	test   ah,0x4
c000bf8c:	75 5f                	jne    c000bfed <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bf8e:	80 fa 04             	cmp    dl,0x4
c000bf91:	74 78                	je     c000c00b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bf93:	80 fa 02             	cmp    dl,0x2
c000bf96:	0f 84 88 00 00 00    	je     c000c024 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bf9c:	80 fa 03             	cmp    dl,0x3
c000bf9f:	0f 84 ad 00 00 00    	je     c000c052 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bfa5:	fe ca                	dec    dl
c000bfa7:	0f 84 92 00 00 00    	je     c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bfad:	43                   	inc    ebx
c000bfae:	31 f6                	xor    esi,esi
c000bfb0:	53                   	push   ebx
c000bfb1:	89 df                	mov    edi,ebx
c000bfb3:	e8 8d fc ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bfb8:	c1 e7 0c             	shl    edi,0xc
c000bfbb:	59                   	pop    ecx
c000bfbc:	84 c0                	test   al,al
c000bfbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bfc2:	75 ad                	jne    c000bf71 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bfc4:	83 ec 0c             	sub    esp,0xc
c000bfc7:	68 b2 30 02 c0       	push   0xc00230b2
c000bfcc:	e8 a6 73 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000bfd1:	58                   	pop    eax
c000bfd2:	5a                   	pop    edx
c000bfd3:	57                   	push   edi
c000bfd4:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c000bfda:	e8 5f ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfe4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bfe8:	f6 c4 04             	test   ah,0x4
c000bfeb:	74 c0                	je     c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bfed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bff1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	50                   	push   eax
c000bffa:	e8 ec e2 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c006:	80 fa 04             	cmp    dl,0x4
c000c009:	75 88                	jne    c000bf93 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c00b:	89 f0                	mov    eax,esi
c000c00d:	84 c0                	test   al,al
c000c00f:	75 47                	jne    c000c058 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c011:	c7 44 24 20 10 2f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022f10
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	5b                   	pop    ebx
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	e9 53 73 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c000c024:	89 f0                	mov    eax,esi
c000c026:	84 c0                	test   al,al
c000c028:	75 15                	jne    c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	68 ce 30 02 c0       	push   0xc00230ce
c000c032:	e8 40 73 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 6e ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	53                   	push   ebx
c000c045:	e8 c6 fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	e9 5b ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c052:	89 f0                	mov    eax,esi
c000c054:	84 c0                	test   al,al
c000c056:	75 15                	jne    c000c06d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c058:	83 ec 08             	sub    esp,0x8
c000c05b:	6a 00                	push   0x0
c000c05d:	53                   	push   ebx
c000c05e:	e8 ad fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	c7 44 24 20 ea 30 02 c0 	mov    DWORD PTR [esp+0x20],0xc00230ea
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	5b                   	pop    ebx
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	e9 f7 72 00 00       	jmp    c0013377 <Krnl::panic(char const*)>

c000c080 <VAS::freeAllocatedPages(unsigned long)>:
c000c080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c088:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c08c:	74 09                	je     c000c097 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c08e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c092:	e9 c6 fe ff ff       	jmp    c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c097:	c7 44 24 04 34 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022f34
c000c09f:	e9 21 0f 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000c0a4 <VAS::virtualToPhysical(unsigned long)>:
c000c0a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0ac:	e8 8d fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0b1:	5a                   	pop    edx
c000c0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b4:	59                   	pop    ecx
c000c0b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>:
c000c0bc:	55                   	push   ebp
c000c0bd:	57                   	push   edi
c000c0be:	56                   	push   esi
c000c0bf:	53                   	push   ebx
c000c0c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c0c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c0cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0d0:	85 db                	test   ebx,ebx
c000c0d2:	7e 22                	jle    c000c0f6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c0d4:	c1 e3 0c             	shl    ebx,0xc
c000c0d7:	01 f3                	add    ebx,esi
c000c0d9:	56                   	push   esi
c000c0da:	81 c6 00 10 00 00    	add    esi,0x1000
c000c0e0:	55                   	push   ebp
c000c0e1:	e8 58 fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0e6:	5a                   	pop    edx
c000c0e7:	59                   	pop    ecx
c000c0e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c0ea:	21 f9                	and    ecx,edi
c000c0ec:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c0f0:	39 f3                	cmp    ebx,esi
c000c0f2:	89 08                	mov    DWORD PTR [eax],ecx
c000c0f4:	75 e3                	jne    c000c0d9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c0f6:	5b                   	pop    ebx
c000c0f7:	5e                   	pop    esi
c000c0f8:	5f                   	pop    edi
c000c0f9:	5d                   	pop    ebp
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <VAS::setToWriteCombining(unsigned long, int)>:
c000c0fc:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c107:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000c10e:	75 01                	jne    c000c111 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c110:	c3                   	ret    
c000c111:	68 80 00 00 00       	push   0x80
c000c116:	6a ff                	push   0xffffffff
c000c118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	e8 93 ff ff ff       	call   c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>
c000c129:	83 c4 14             	add    esp,0x14
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop

c000c12e <VAS::mapOtherVASIn(bool, VAS*)>:
c000c12e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c137:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c13e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c141:	19 c0                	sbb    eax,eax
c000c143:	83 ca 03             	or     edx,0x3
c000c146:	83 e0 fc             	and    eax,0xfffffffc
c000c149:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c150:	0f 20 d8             	mov    eax,cr3
c000c153:	0f 22 d8             	mov    cr3,eax
c000c156:	c3                   	ret    
c000c157:	90                   	nop

c000c158 <VAS::~VAS()>:
c000c158:	83 ec 2c             	sub    esp,0x2c
c000c15b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c163:	fa                   	cli    
c000c164:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c169:	40                   	inc    eax
c000c16a:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000c16f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c174:	8b 00                	mov    eax,DWORD PTR [eax]
c000c176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c179:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c17f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c183:	6a 01                	push   0x1
c000c185:	50                   	push   eax
c000c186:	e8 a3 ff ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c000c18b:	83 c4 0c             	add    esp,0xc
c000c18e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c196:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c19e:	0f 8f d4 00 00 00    	jg     c000c278 <VAS::~VAS()+0x120>
c000c1a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1af:	c1 e2 02             	shl    edx,0x2
c000c1b2:	01 d0                	add    eax,edx
c000c1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	83 e0 01             	and    eax,0x1
c000c1c1:	0f 84 a8 00 00 00    	je     c000c26f <VAS::~VAS()+0x117>
c000c1c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1cf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c1d7:	7f 72                	jg     c000c24b <VAS::~VAS()+0xf3>
c000c1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1dd:	c1 e0 0a             	shl    eax,0xa
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1e6:	01 d0                	add    eax,edx
c000c1e8:	c1 e0 0c             	shl    eax,0xc
c000c1eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c1f9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c1ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c203:	6a 01                	push   0x1
c000c205:	50                   	push   eax
c000c206:	e8 07 fd ff ff       	call   c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c20b:	83 c4 0c             	add    esp,0xc
c000c20e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c216:	8b 00                	mov    eax,DWORD PTR [eax]
c000c218:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c220:	25 01 04 00 00       	and    eax,0x401
c000c225:	3d 01 04 00 00       	cmp    eax,0x401
c000c22a:	75 19                	jne    c000c245 <VAS::~VAS()+0xed>
c000c22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c230:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	50                   	push   eax
c000c239:	e8 ad e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c245:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c249:	eb 84                	jmp    c000c1cf <VAS::~VAS()+0x77>
c000c24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24f:	25 00 04 00 00       	and    eax,0x400
c000c254:	74 19                	je     c000c26f <VAS::~VAS()+0x117>
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	50                   	push   eax
c000c263:	e8 83 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c268:	83 c4 10             	add    esp,0x10
c000c26b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c26f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c273:	e9 1e ff ff ff       	jmp    c000c196 <VAS::~VAS()+0x3e>
c000c278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	50                   	push   eax
c000c283:	e8 d5 fc ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	50                   	push   eax
c000c296:	e8 50 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c29b:	83 c4 10             	add    esp,0x10
c000c29e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a6:	c1 e0 02             	shl    eax,0x2
c000c2a9:	83 ec 08             	sub    esp,0x8
c000c2ac:	50                   	push   eax
c000c2ad:	68 58 2f 02 c0       	push   0xc0022f58
c000c2b2:	e8 0e 0d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c2bf:	48                   	dec    eax
c000c2c0:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000c2c5:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c2ca:	85 c0                	test   eax,eax
c000c2cc:	75 01                	jne    c000c2cf <VAS::~VAS()+0x177>
c000c2ce:	fb                   	sti    
c000c2cf:	90                   	nop
c000c2d0:	83 c4 2c             	add    esp,0x2c
c000c2d3:	c3                   	ret    

c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c2d4:	55                   	push   ebp
c000c2d5:	57                   	push   edi
c000c2d6:	56                   	push   esi
c000c2d7:	53                   	push   ebx
c000c2d8:	83 ec 1c             	sub    esp,0x1c
c000c2db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c2df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2e3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c2e9:	77 0b                	ja     c000c2f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000c2eb:	0f 20 d8             	mov    eax,cr3
c000c2ee:	0f 20 d8             	mov    eax,cr3
c000c2f1:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c2f4:	75 47                	jne    c000c33d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000c2f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2fa:	09 d8                	or     eax,ebx
c000c2fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c301:	75 57                	jne    c000c35a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000c303:	89 de                	mov    esi,ebx
c000c305:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c308:	c1 ee 16             	shr    esi,0x16
c000c30b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c312:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c316:	74 54                	je     c000c36c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000c318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c31c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c322:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c326:	c1 e6 0c             	shl    esi,0xc
c000c329:	c1 eb 0a             	shr    ebx,0xa
c000c32c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c332:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c335:	83 c4 1c             	add    esp,0x1c
c000c338:	5b                   	pop    ebx
c000c339:	5e                   	pop    esi
c000c33a:	5f                   	pop    edi
c000c33b:	5d                   	pop    ebp
c000c33c:	c3                   	ret    
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	68 78 2f 02 c0       	push   0xc0022f78
c000c345:	e8 7b 0c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c351:	09 d8                	or     eax,ebx
c000c353:	a9 ff 0f 00 00       	test   eax,0xfff
c000c358:	74 a9                	je     c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	68 e0 2f 02 c0       	push   0xc0022fe0
c000c362:	e8 10 70 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	eb 97                	jmp    c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c36c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c370:	e8 f9 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c375:	83 ec 0c             	sub    esp,0xc
c000c378:	89 c5                	mov    ebp,eax
c000c37a:	8b 0d d4 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263d4
c000c380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c384:	6a 01                	push   0x1
c000c386:	e8 de f8 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c38b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c392:	6a 01                	push   0x1
c000c394:	50                   	push   eax
c000c395:	55                   	push   ebp
c000c396:	81 cd 07 04 00 00    	or     ebp,0x407
c000c39c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3a0:	51                   	push   ecx
c000c3a1:	e8 26 02 00 00       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3a6:	83 c4 1c             	add    esp,0x1c
c000c3a9:	68 00 10 00 00       	push   0x1000
c000c3ae:	6a 00                	push   0x0
c000c3b0:	50                   	push   eax
c000c3b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3b5:	e8 c2 42 ff ff       	call   c000067c <memset>
c000c3ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3c1:	e8 97 fb ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3cd:	83 c4 10             	add    esp,0x10
c000c3d0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c3d3:	e9 40 ff ff ff       	jmp    c000c318 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c3d8 <VAS::allocatePages(int, int)>:
c000c3d8:	55                   	push   ebp
c000c3d9:	57                   	push   edi
c000c3da:	56                   	push   esi
c000c3db:	53                   	push   ebx
c000c3dc:	83 ec 1c             	sub    esp,0x1c
c000c3df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3e3:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c3e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3ee:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c3f4:	83 e0 01             	and    eax,0x1
c000c3f7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c3fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3ff:	0f 85 cc 00 00 00    	jne    c000c4d1 <VAS::allocatePages(int, int)+0xf9>
c000c405:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c408:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c40c:	85 c0                	test   eax,eax
c000c40e:	0f 84 a1 00 00 00    	je     c000c4b5 <VAS::allocatePages(int, int)+0xdd>
c000c414:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c41c:	c1 e6 0c             	shl    esi,0xc
c000c41f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c423:	85 c0                	test   eax,eax
c000c425:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c428:	7e 33                	jle    c000c45d <VAS::allocatePages(int, int)+0x85>
c000c42a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c42e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c432:	81 cd 00 04 00 00    	or     ebp,0x400
c000c438:	e8 31 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c43d:	55                   	push   ebp
c000c43e:	53                   	push   ebx
c000c43f:	50                   	push   eax
c000c440:	57                   	push   edi
c000c441:	e8 8e fe ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c44e:	74 03                	je     c000c453 <VAS::allocatePages(int, int)+0x7b>
c000c450:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c453:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c459:	39 de                	cmp    esi,ebx
c000c45b:	75 db                	jne    c000c438 <VAS::allocatePages(int, int)+0x60>
c000c45d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c462:	75 12                	jne    c000c476 <VAS::allocatePages(int, int)+0x9e>
c000c464:	0f 20 d8             	mov    eax,cr3
c000c467:	0f 22 d8             	mov    cr3,eax
c000c46a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c46e:	83 c4 1c             	add    esp,0x1c
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	5f                   	pop    edi
c000c474:	5d                   	pop    ebp
c000c475:	c3                   	ret    
c000c476:	c1 ee 0a             	shr    esi,0xa
c000c479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c47d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c483:	c1 eb 0a             	shr    ebx,0xa
c000c486:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c48c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c492:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c498:	39 c3                	cmp    ebx,eax
c000c49a:	77 ce                	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c49c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c49f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4a5:	39 d8                	cmp    eax,ebx
c000c4a7:	73 f3                	jae    c000c49c <VAS::allocatePages(int, int)+0xc4>
c000c4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4ad:	83 c4 1c             	add    esp,0x1c
c000c4b0:	5b                   	pop    ebx
c000c4b1:	5e                   	pop    esi
c000c4b2:	5f                   	pop    edi
c000c4b3:	5d                   	pop    ebp
c000c4b4:	c3                   	ret    
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	68 04 30 02 c0       	push   0xc0023004
c000c4bd:	e8 b5 6e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000c4c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	e9 43 ff ff ff       	jmp    c000c414 <VAS::allocatePages(int, int)+0x3c>
c000c4d1:	83 ec 0c             	sub    esp,0xc
c000c4d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c4d8:	e8 8c f7 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c4e9:	0f 87 9b 00 00 00    	ja     c000c58a <VAS::allocatePages(int, int)+0x1b2>
c000c4ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c4f3:	85 d2                	test   edx,edx
c000c4f5:	7e 3c                	jle    c000c533 <VAS::allocatePages(int, int)+0x15b>
c000c4f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c4ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c503:	c1 e5 0c             	shl    ebp,0xc
c000c506:	81 ce 00 04 00 00    	or     esi,0x400
c000c50c:	01 dd                	add    ebp,ebx
c000c50e:	e8 5b de ff ff       	call   c000a36e <Phys::allocatePage()>
c000c513:	56                   	push   esi
c000c514:	53                   	push   ebx
c000c515:	50                   	push   eax
c000c516:	57                   	push   edi
c000c517:	e8 b8 fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c524:	74 03                	je     c000c529 <VAS::allocatePages(int, int)+0x151>
c000c526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c529:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c52f:	39 dd                	cmp    ebp,ebx
c000c531:	75 db                	jne    c000c50e <VAS::allocatePages(int, int)+0x136>
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	0f 84 26 ff ff ff    	je     c000c464 <VAS::allocatePages(int, int)+0x8c>
c000c53e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c546:	89 d3                	mov    ebx,edx
c000c548:	c1 e0 0c             	shl    eax,0xc
c000c54b:	c1 eb 0a             	shr    ebx,0xa
c000c54e:	01 d0                	add    eax,edx
c000c550:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c556:	c1 e8 0a             	shr    eax,0xa
c000c559:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c55f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c564:	2d 00 00 40 00       	sub    eax,0x400000
c000c569:	39 c3                	cmp    ebx,eax
c000c56b:	0f 87 f9 fe ff ff    	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c571:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c574:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c57a:	39 d8                	cmp    eax,ebx
c000c57c:	73 f3                	jae    c000c571 <VAS::allocatePages(int, int)+0x199>
c000c57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c582:	83 c4 1c             	add    esp,0x1c
c000c585:	5b                   	pop    ebx
c000c586:	5e                   	pop    esi
c000c587:	5f                   	pop    edi
c000c588:	5d                   	pop    ebp
c000c589:	c3                   	ret    
c000c58a:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c58f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c595:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000c59c:	0f 84 4d ff ff ff    	je     c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5aa:	e9 40 ff ff ff       	jmp    c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5af:	90                   	nop

c000c5b0 <VAS::setCPUSpecific(unsigned long)>:
c000c5b0:	83 ec 0c             	sub    esp,0xc
c000c5b3:	6a 05                	push   0x5
c000c5b5:	68 00 00 40 c2       	push   0xc2400000
c000c5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5c2:	e8 0d fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5c7:	83 c4 1c             	add    esp,0x1c
c000c5ca:	c3                   	ret    
c000c5cb:	90                   	nop

c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c5cc:	55                   	push   ebp
c000c5cd:	57                   	push   edi
c000c5ce:	56                   	push   esi
c000c5cf:	53                   	push   ebx
c000c5d0:	83 ec 1c             	sub    esp,0x1c
c000c5d3:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c5d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c5dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e6:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c5ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c5f0:	83 e0 01             	and    eax,0x1
c000c5f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c5f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c5fb:	85 c0                	test   eax,eax
c000c5fd:	7e 39                	jle    c000c638 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c603:	89 f3                	mov    ebx,esi
c000c605:	c1 e0 0c             	shl    eax,0xc
c000c608:	01 f0                	add    eax,esi
c000c60a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c60e:	55                   	push   ebp
c000c60f:	53                   	push   ebx
c000c610:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c614:	29 f0                	sub    eax,esi
c000c616:	01 d8                	add    eax,ebx
c000c618:	50                   	push   eax
c000c619:	57                   	push   edi
c000c61a:	e8 b5 fc ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c627:	74 03                	je     c000c62c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c629:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c62c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c632:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c636:	75 d6                	jne    c000c60e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c638:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c63d:	75 10                	jne    c000c64f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c63f:	0f 20 d8             	mov    eax,cr3
c000c642:	0f 22 d8             	mov    cr3,eax
c000c645:	83 c4 1c             	add    esp,0x1c
c000c648:	89 f0                	mov    eax,esi
c000c64a:	5b                   	pop    ebx
c000c64b:	5e                   	pop    esi
c000c64c:	5f                   	pop    edi
c000c64d:	5d                   	pop    ebp
c000c64e:	c3                   	ret    
c000c64f:	89 f3                	mov    ebx,esi
c000c651:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c655:	c1 eb 0a             	shr    ebx,0xa
c000c658:	c1 e0 0c             	shl    eax,0xc
c000c65b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c661:	01 f0                	add    eax,esi
c000c663:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c669:	c1 e8 0a             	shr    eax,0xa
c000c66c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c671:	2d 00 00 40 00       	sub    eax,0x400000
c000c676:	39 c3                	cmp    ebx,eax
c000c678:	77 cb                	ja     c000c645 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c67a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c683:	39 d8                	cmp    eax,ebx
c000c685:	73 f3                	jae    c000c67a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c687:	83 c4 1c             	add    esp,0x1c
c000c68a:	89 f0                	mov    eax,esi
c000c68c:	5b                   	pop    ebx
c000c68d:	5e                   	pop    esi
c000c68e:	5f                   	pop    edi
c000c68f:	5d                   	pop    ebp
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c692:	55                   	push   ebp
c000c693:	57                   	push   edi
c000c694:	56                   	push   esi
c000c695:	53                   	push   ebx
c000c696:	83 ec 1c             	sub    esp,0x1c
c000c699:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6a1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6ae:	75 4a                	jne    c000c6fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c6b4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c6b7:	c1 eb 16             	shr    ebx,0x16
c000c6ba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c6c1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c6c5:	74 4d                	je     c000c714 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c6c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c6cf:	c1 e8 0a             	shr    eax,0xa
c000c6d2:	80 fa 01             	cmp    dl,0x1
c000c6d5:	19 d2                	sbb    edx,edx
c000c6d7:	c1 e3 0c             	shl    ebx,0xc
c000c6da:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c6de:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c6e4:	25 fc 0f 00 00       	and    eax,0xffc
c000c6e9:	01 d8                	add    eax,ebx
c000c6eb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c6f2:	83 c4 1c             	add    esp,0x1c
c000c6f5:	5b                   	pop    ebx
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	5d                   	pop    ebp
c000c6f9:	c3                   	ret    
c000c6fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	68 30 30 02 c0       	push   0xc0023030
c000c706:	e8 6c 6c 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000c70b:	83 c4 10             	add    esp,0x10
c000c70e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c712:	eb 9c                	jmp    c000c6b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c714:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c718:	e8 51 dc ff ff       	call   c000a36e <Phys::allocatePage()>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	89 c5                	mov    ebp,eax
c000c722:	8b 0d d4 63 02 c0    	mov    ecx,DWORD PTR ds:0xc00263d4
c000c728:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c72c:	6a 01                	push   0x1
c000c72e:	e8 36 f5 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c733:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c73a:	6a 01                	push   0x1
c000c73c:	50                   	push   eax
c000c73d:	55                   	push   ebp
c000c73e:	81 cd 07 04 00 00    	or     ebp,0x407
c000c744:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c748:	51                   	push   ecx
c000c749:	e8 7e fe ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c74e:	83 c4 1c             	add    esp,0x1c
c000c751:	68 00 10 00 00       	push   0x1000
c000c756:	6a 00                	push   0x0
c000c758:	50                   	push   eax
c000c759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75d:	e8 1a 3f ff ff       	call   c000067c <memset>
c000c762:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c766:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c769:	e8 ef f7 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c76e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77b:	e9 47 ff ff ff       	jmp    c000c6c7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c780 <VAS::VAS(bool)>:
c000c780:	53                   	push   ebx
c000c781:	83 ec 28             	sub    esp,0x28
c000c784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c788:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c78c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c79b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7aa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7ad:	e8 bc db ff ff       	call   c000a36e <Phys::allocatePage()>
c000c7b2:	89 c2                	mov    edx,eax
c000c7b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c7bb:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c000c7c1:	83 ec 0c             	sub    esp,0xc
c000c7c4:	6a 01                	push   0x1
c000c7c6:	e8 9e f4 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	89 c2                	mov    edx,eax
c000c7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	6a 03                	push   0x3
c000c7dc:	6a 01                	push   0x1
c000c7de:	52                   	push   edx
c000c7df:	50                   	push   eax
c000c7e0:	53                   	push   ebx
c000c7e1:	e8 e6 fd ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7e6:	83 c4 20             	add    esp,0x20
c000c7e9:	89 c2                	mov    edx,eax
c000c7eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c7fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c802:	7f 1c                	jg     c000c820 <VAS::VAS(bool)+0xa0>
c000c804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c808:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c80f:	c1 e2 02             	shl    edx,0x2
c000c812:	01 d0                	add    eax,edx
c000c814:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c81a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c81e:	eb da                	jmp    c000c7fa <VAS::VAS(bool)+0x7a>
c000c820:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c828:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c830:	7f 7a                	jg     c000c8ac <VAS::VAS(bool)+0x12c>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	2d 00 02 00 00       	sub    eax,0x200
c000c83b:	c1 e0 0c             	shl    eax,0xc
c000c83e:	83 c8 03             	or     eax,0x3
c000c841:	89 c2                	mov    edx,eax
c000c843:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c84e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c854:	83 e0 10             	and    eax,0x10
c000c857:	84 c0                	test   al,al
c000c859:	74 07                	je     c000c862 <VAS::VAS(bool)+0xe2>
c000c85b:	b8 00 01 00 00       	mov    eax,0x100
c000c860:	eb 05                	jmp    c000c867 <VAS::VAS(bool)+0xe7>
c000c862:	b8 00 00 00 00       	mov    eax,0x0
c000c867:	09 d0                	or     eax,edx
c000c869:	89 c1                	mov    ecx,eax
c000c86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c876:	c1 e2 02             	shl    edx,0x2
c000c879:	01 d0                	add    eax,edx
c000c87b:	89 ca                	mov    edx,ecx
c000c87d:	89 10                	mov    DWORD PTR [eax],edx
c000c87f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c883:	2d 40 03 00 00       	sub    eax,0x340
c000c888:	83 f8 7f             	cmp    eax,0x7f
c000c88b:	77 16                	ja     c000c8a3 <VAS::VAS(bool)+0x123>
c000c88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c898:	c1 e2 02             	shl    edx,0x2
c000c89b:	01 d0                	add    eax,edx
c000c89d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8a3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8a7:	e9 7c ff ff ff       	jmp    c000c828 <VAS::VAS(bool)+0xa8>
c000c8ac:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c8b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8b7:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c8bd:	83 e0 10             	and    eax,0x10
c000c8c0:	84 c0                	test   al,al
c000c8c2:	74 07                	je     c000c8cb <VAS::VAS(bool)+0x14b>
c000c8c4:	b8 03 41 00 00       	mov    eax,0x4103
c000c8c9:	eb 05                	jmp    c000c8d0 <VAS::VAS(bool)+0x150>
c000c8cb:	b8 03 40 00 00       	mov    eax,0x4003
c000c8d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8d4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c8d7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c8dd:	89 02                	mov    DWORD PTR [edx],eax
c000c8df:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c8f0:	83 ec 08             	sub    esp,0x8
c000c8f3:	50                   	push   eax
c000c8f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8f8:	e8 b3 fc ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c000c8fd:	83 c4 10             	add    esp,0x10
c000c900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c904:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c907:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c90c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c912:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c918:	83 e0 10             	and    eax,0x10
c000c91b:	84 c0                	test   al,al
c000c91d:	74 07                	je     c000c926 <VAS::VAS(bool)+0x1a6>
c000c91f:	b8 00 01 00 00       	mov    eax,0x100
c000c924:	eb 05                	jmp    c000c92b <VAS::VAS(bool)+0x1ab>
c000c926:	b8 00 00 00 00       	mov    eax,0x0
c000c92b:	09 c2                	or     edx,eax
c000c92d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c931:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c934:	05 fc 0f 00 00       	add    eax,0xffc
c000c939:	83 ca 03             	or     edx,0x3
c000c93c:	89 10                	mov    DWORD PTR [eax],edx
c000c93e:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	50                   	push   eax
c000c94d:	e8 f0 1d 00 00       	call   c000e742 <Device::getName()>
c000c952:	83 c4 10             	add    esp,0x10
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	68 04 31 02 c0       	push   0xc0023104
c000c95d:	50                   	push   eax
c000c95e:	e8 61 3e ff ff       	call   c00007c4 <strcmp>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	85 c0                	test   eax,eax
c000c968:	0f 94 c0             	sete   al
c000c96b:	84 c0                	test   al,al
c000c96d:	0f 84 87 00 00 00    	je     c000c9fa <VAS::VAS(bool)+0x27a>
c000c973:	fa                   	cli    
c000c974:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c979:	40                   	inc    eax
c000c97a:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000c97f:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c984:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c98a:	05 7c 09 00 00       	add    eax,0x97c
c000c98f:	83 ec 0c             	sub    esp,0xc
c000c992:	50                   	push   eax
c000c993:	e8 0e ce ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a0:	89 c3                	mov    ebx,eax
c000c9a2:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000c9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ad:	05 7c 09 00 00       	add    eax,0x97c
c000c9b2:	83 ec 0c             	sub    esp,0xc
c000c9b5:	50                   	push   eax
c000c9b6:	e8 eb cd ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	50                   	push   eax
c000c9c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9c6:	e8 73 f5 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c9cb:	83 c4 10             	add    esp,0x10
c000c9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9d5:	6a 11                	push   0x11
c000c9d7:	53                   	push   ebx
c000c9d8:	50                   	push   eax
c000c9d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9dd:	e8 f2 f8 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c9ea:	48                   	dec    eax
c000c9eb:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000c9f0:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <VAS::VAS(bool)+0x27a>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	83 c4 28             	add    esp,0x28
c000c9fe:	5b                   	pop    ebx
c000c9ff:	c3                   	ret    

c000ca00 <VAS::VAS()>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 18             	sub    esp,0x18
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1e:	a3 d4 63 02 c0       	mov    ds:0xc00263d4,eax
c000ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca27:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca36:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca3d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca45:	83 ec 0c             	sub    esp,0xc
c000ca48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4c:	e8 66 d2 ff ff       	call   c0009cb7 <malloc>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	89 c3                	mov    ebx,eax
c000ca56:	83 ec 08             	sub    esp,0x8
c000ca59:	6a 01                	push   0x1
c000ca5b:	53                   	push   ebx
c000ca5c:	e8 1f fd ff ff       	call   c000c780 <VAS::VAS(bool)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	89 1d cc 63 02 c0    	mov    DWORD PTR ds:0xc00263cc,ebx
c000ca6a:	90                   	nop
c000ca6b:	83 c4 18             	add    esp,0x18
c000ca6e:	5b                   	pop    ebx
c000ca6f:	c3                   	ret    

c000ca70 <VAS::evict(unsigned long)>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 1c             	sub    esp,0x1c
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca83:	e8 22 f3 ff ff       	call   c000bdaa <Virt::allocateSwapfilePage()>
c000ca88:	89 c7                	mov    edi,eax
c000ca8a:	a1 ac 59 02 c0       	mov    eax,ds:0xc00259ac
c000ca8f:	85 c0                	test   eax,eax
c000ca91:	7e 3d                	jle    c000cad0 <VAS::evict(unsigned long)+0x60>
c000ca93:	89 ee                	mov    esi,ebp
c000ca95:	31 db                	xor    ebx,ebx
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	57                   	push   edi
c000ca9b:	e8 f8 f2 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000caa0:	89 34 24             	mov    DWORD PTR [esp],esi
c000caa3:	01 d8                	add    eax,ebx
c000caa5:	6a 01                	push   0x1
c000caa7:	31 d2                	xor    edx,edx
c000caa9:	43                   	inc    ebx
c000caaa:	52                   	push   edx
c000caab:	81 c6 00 02 00 00    	add    esi,0x200
c000cab1:	50                   	push   eax
c000cab2:	0f be 05 b8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259b8
c000cab9:	ff 34 85 5c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78a4]
c000cac0:	e8 15 2d 00 00       	call   c000f7da <LogicalDisk::write(unsigned long long, int, void*)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 1d ac 59 02 c0    	cmp    DWORD PTR ds:0xc00259ac,ebx
c000cace:	7f c7                	jg     c000ca97 <VAS::evict(unsigned long)+0x27>
c000cad0:	83 ec 08             	sub    esp,0x8
c000cad3:	c1 e7 0b             	shl    edi,0xb
c000cad6:	55                   	push   ebp
c000cad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cadb:	e8 5e f4 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cae0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cae2:	89 d3                	mov    ebx,edx
c000cae4:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000caea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000caf0:	09 d7                	or     edi,edx
c000caf2:	89 38                	mov    DWORD PTR [eax],edi
c000caf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caf7:	ff 05 c8 63 02 c0    	inc    DWORD PTR ds:0xc00263c8
c000cafd:	e8 e9 d7 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000cb02:	0f 20 d8             	mov    eax,cr3
c000cb05:	0f 22 d8             	mov    cr3,eax
c000cb08:	ff 35 c8 63 02 c0    	push   DWORD PTR ds:0xc00263c8
c000cb0e:	55                   	push   ebp
c000cb0f:	53                   	push   ebx
c000cb10:	68 54 30 02 c0       	push   0xc0023054
c000cb15:	e8 ab 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb1a:	a1 c4 63 02 c0       	mov    eax,ds:0xc00263c4
c000cb1f:	c7 44 24 50 12 31 02 c0 	mov    DWORD PTR [esp+0x50],0xc0023112
c000cb27:	8d 50 01             	lea    edx,[eax+0x1]
c000cb2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb2e:	89 15 c4 63 02 c0    	mov    DWORD PTR ds:0xc00263c4,edx
c000cb34:	83 c4 3c             	add    esp,0x3c
c000cb37:	5b                   	pop    ebx
c000cb38:	5e                   	pop    esi
c000cb39:	5f                   	pop    edi
c000cb3a:	5d                   	pop    ebp
c000cb3b:	e9 85 04 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb40:	55                   	push   ebp
c000cb41:	57                   	push   edi
c000cb42:	56                   	push   esi
c000cb43:	53                   	push   ebx
c000cb44:	83 ec 14             	sub    esp,0x14
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	68 23 31 02 c0       	push   0xc0023123
c000cb50:	e8 70 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cb5c:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cb62:	74 20                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb64:	83 ec 08             	sub    esp,0x8
c000cb67:	55                   	push   ebp
c000cb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6c:	e8 cd f3 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cb71:	83 c4 10             	add    esp,0x10
c000cb74:	89 c3                	mov    ebx,eax
c000cb76:	85 c0                	test   eax,eax
c000cb78:	74 0a                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb7a:	8b 38                	mov    edi,DWORD PTR [eax]
c000cb7c:	f7 c7 01 00 00 00    	test   edi,0x1
c000cb82:	74 0a                	je     c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cb84:	31 c0                	xor    eax,eax
c000cb86:	83 c4 0c             	add    esp,0xc
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    
c000cb8e:	e8 db d7 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cb93:	c1 ef 0b             	shr    edi,0xb
c000cb96:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb98:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cb9e:	09 c2                	or     edx,eax
c000cba0:	81 ca 01 08 00 00    	or     edx,0x801
c000cba6:	89 13                	mov    DWORD PTR [ebx],edx
c000cba8:	8b 0d ac 59 02 c0    	mov    ecx,DWORD PTR ds:0xc00259ac
c000cbae:	85 c9                	test   ecx,ecx
c000cbb0:	7e 3d                	jle    c000cbef <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cbb2:	89 ee                	mov    esi,ebp
c000cbb4:	31 db                	xor    ebx,ebx
c000cbb6:	83 ec 0c             	sub    esp,0xc
c000cbb9:	57                   	push   edi
c000cbba:	e8 d9 f1 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000cbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbc2:	01 d8                	add    eax,ebx
c000cbc4:	6a 01                	push   0x1
c000cbc6:	31 d2                	xor    edx,edx
c000cbc8:	43                   	inc    ebx
c000cbc9:	52                   	push   edx
c000cbca:	81 c6 00 02 00 00    	add    esi,0x200
c000cbd0:	50                   	push   eax
c000cbd1:	0f be 05 b8 59 02 c0 	movsx  eax,BYTE PTR ds:0xc00259b8
c000cbd8:	ff 34 85 5c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78a4]
c000cbdf:	e8 8a 2b 00 00       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c000cbe4:	83 c4 20             	add    esp,0x20
c000cbe7:	39 1d ac 59 02 c0    	cmp    DWORD PTR ds:0xc00259ac,ebx
c000cbed:	7f c7                	jg     c000cbb6 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cbef:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c000cbf4:	48                   	dec    eax
c000cbf5:	52                   	push   edx
c000cbf6:	a3 c8 63 02 c0       	mov    ds:0xc00263c8,eax
c000cbfb:	50                   	push   eax
c000cbfc:	55                   	push   ebp
c000cbfd:	68 36 31 02 c0       	push   0xc0023136
c000cc02:	e8 be 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc07:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc0a:	e8 6b f1 ff ff       	call   c000bd7a <Virt::freeSwapfilePage(unsigned long)>
c000cc0f:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	48                   	dec    eax
c000cc18:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 1d                	je     c000cc3e <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc25:	25 ff 0f 00 00       	and    eax,0xfff
c000cc2a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc2f:	77 10                	ja     c000cc41 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc31:	0f 20 d8             	mov    eax,cr3
c000cc34:	0f 22 d8             	mov    cr3,eax
c000cc37:	b0 01                	mov    al,0x1
c000cc39:	e9 48 ff ff ff       	jmp    c000cb86 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc3e:	fb                   	sti    
c000cc3f:	eb e0                	jmp    c000cc21 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc41:	83 ec 0c             	sub    esp,0xc
c000cc44:	68 4b 31 02 c0       	push   0xc002314b
c000cc49:	e8 77 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc4e:	83 c4 10             	add    esp,0x10
c000cc51:	eb de                	jmp    c000cc31 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cc53:	90                   	nop

c000cc54 <VAS::scanForEviction()>:
c000cc54:	57                   	push   edi
c000cc55:	31 ff                	xor    edi,edi
c000cc57:	56                   	push   esi
c000cc58:	53                   	push   ebx
c000cc59:	83 ec 10             	sub    esp,0x10
c000cc5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc60:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cc63:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cc69:	75 0e                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000cc6b:	89 da                	mov    edx,ebx
c000cc6d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc70:	c1 ea 16             	shr    edx,0x16
c000cc73:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cc77:	74 4e                	je     c000ccc7 <VAS::scanForEviction()+0x73>
c000cc79:	53                   	push   ebx
c000cc7a:	56                   	push   esi
c000cc7b:	e8 be f2 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cc80:	5a                   	pop    edx
c000cc81:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc83:	59                   	pop    ecx
c000cc84:	89 d1                	mov    ecx,edx
c000cc86:	81 e1 01 08 00 00    	and    ecx,0x801
c000cc8c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cc92:	74 3e                	je     c000ccd2 <VAS::scanForEviction()+0x7e>
c000cc94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cc9a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cca0:	76 2b                	jbe    c000cccd <VAS::scanForEviction()+0x79>
c000cca2:	47                   	inc    edi
c000cca3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccaa:	83 ff 03             	cmp    edi,0x3
c000ccad:	74 32                	je     c000cce1 <VAS::scanForEviction()+0x8d>
c000ccaf:	31 db                	xor    ebx,ebx
c000ccb1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccb7:	75 c0                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccb9:	89 da                	mov    edx,ebx
c000ccbb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccbe:	c1 ea 16             	shr    edx,0x16
c000ccc1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccc5:	75 b2                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccc7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cccd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ccd0:	eb 91                	jmp    c000cc63 <VAS::scanForEviction()+0xf>
c000ccd2:	f6 c2 20             	test   dl,0x20
c000ccd5:	74 13                	je     c000ccea <VAS::scanForEviction()+0x96>
c000ccd7:	83 e2 df             	and    edx,0xffffffdf
c000ccda:	89 10                	mov    DWORD PTR [eax],edx
c000ccdc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdf:	eb b3                	jmp    c000cc94 <VAS::scanForEviction()+0x40>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	31 c0                	xor    eax,eax
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	c3                   	ret    
c000ccea:	83 ec 08             	sub    esp,0x8
c000cced:	89 d0                	mov    eax,edx
c000ccef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ccf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccf8:	53                   	push   ebx
c000ccf9:	68 5b 31 02 c0       	push   0xc002315b
c000ccfe:	e8 c2 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd03:	58                   	pop    eax
c000cd04:	5a                   	pop    edx
c000cd05:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd08:	56                   	push   esi
c000cd09:	e8 62 fd ff ff       	call   c000ca70 <VAS::evict(unsigned long)>
c000cd0e:	59                   	pop    ecx
c000cd0f:	5b                   	pop    ebx
c000cd10:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd13:	68 6f 31 02 c0       	push   0xc002316f
c000cd18:	e8 a8 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd1d:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	5b                   	pop    ebx
c000cd2f:	5e                   	pop    esi
c000cd30:	5f                   	pop    edi
c000cd31:	c3                   	ret    

c000cd32 <mapVASFirstTime>:
c000cd32:	55                   	push   ebp
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	53                   	push   ebx
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd41:	4a                   	dec    edx
c000cd42:	0f 84 fe 00 00 00    	je     c000ce46 <mapVASFirstTime+0x114>
c000cd48:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd4b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd4e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cd53:	c1 e5 15             	shl    ebp,0x15
c000cd56:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cd5b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cd61:	29 eb                	sub    ebx,ebp
c000cd63:	29 ef                	sub    edi,ebp
c000cd65:	83 ec 08             	sub    esp,0x8
c000cd68:	53                   	push   ebx
c000cd69:	68 9b 31 02 c0       	push   0xc002319b
c000cd6e:	e8 52 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd73:	e8 f6 d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cd78:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cd7f:	6a 01                	push   0x1
c000cd81:	53                   	push   ebx
c000cd82:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cd88:	50                   	push   eax
c000cd89:	56                   	push   esi
c000cd8a:	e8 3d f8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd8f:	83 c4 20             	add    esp,0x20
c000cd92:	39 fb                	cmp    ebx,edi
c000cd94:	75 cf                	jne    c000cd65 <mapVASFirstTime+0x33>
c000cd96:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cd9b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cda0:	29 eb                	sub    ebx,ebp
c000cda2:	29 ef                	sub    edi,ebp
c000cda4:	83 ec 08             	sub    esp,0x8
c000cda7:	53                   	push   ebx
c000cda8:	68 b7 31 02 c0       	push   0xc00231b7
c000cdad:	e8 13 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdb2:	58                   	pop    eax
c000cdb3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cdb7:	5a                   	pop    edx
c000cdb8:	19 c0                	sbb    eax,eax
c000cdba:	83 e0 04             	and    eax,0x4
c000cdbd:	05 03 04 00 00       	add    eax,0x403
c000cdc2:	50                   	push   eax
c000cdc3:	68 cb 31 02 c0       	push   0xc00231cb
c000cdc8:	e8 f8 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdcd:	e8 9c d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cdd2:	59                   	pop    ecx
c000cdd3:	89 c5                	mov    ebp,eax
c000cdd5:	58                   	pop    eax
c000cdd6:	55                   	push   ebp
c000cdd7:	68 d9 31 02 c0       	push   0xc00231d9
c000cddc:	e8 e4 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cde1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cde5:	19 d2                	sbb    edx,edx
c000cde7:	83 e2 04             	and    edx,0x4
c000cdea:	81 c2 03 04 00 00    	add    edx,0x403
c000cdf0:	89 14 24             	mov    DWORD PTR [esp],edx
c000cdf3:	6a 01                	push   0x1
c000cdf5:	53                   	push   ebx
c000cdf6:	55                   	push   ebp
c000cdf7:	56                   	push   esi
c000cdf8:	e8 cf f7 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cdfd:	83 c4 18             	add    esp,0x18
c000ce00:	53                   	push   ebx
c000ce01:	56                   	push   esi
c000ce02:	e8 37 f1 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000ce07:	5a                   	pop    edx
c000ce08:	59                   	pop    ecx
c000ce09:	ff 30                	push   DWORD PTR [eax]
c000ce0b:	68 f5 31 02 c0       	push   0xc00231f5
c000ce10:	e8 b0 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce15:	0f 20 d8             	mov    eax,cr3
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce21:	56                   	push   esi
c000ce22:	50                   	push   eax
c000ce23:	68 00 32 02 c0       	push   0xc0023200
c000ce28:	e8 98 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	39 df                	cmp    edi,ebx
c000ce32:	0f 85 6c ff ff ff    	jne    c000cda4 <mapVASFirstTime+0x72>
c000ce38:	0f 20 d8             	mov    eax,cr3
c000ce3b:	0f 22 d8             	mov    cr3,eax
c000ce3e:	83 c4 0c             	add    esp,0xc
c000ce41:	5b                   	pop    ebx
c000ce42:	5e                   	pop    esi
c000ce43:	5f                   	pop    edi
c000ce44:	5d                   	pop    ebp
c000ce45:	c3                   	ret    
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	68 82 31 02 c0       	push   0xc0023182
c000ce4e:	e8 72 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce53:	83 c4 10             	add    esp,0x10
c000ce56:	83 c4 0c             	add    esp,0xc
c000ce59:	5b                   	pop    ebx
c000ce5a:	5e                   	pop    esi
c000ce5b:	5f                   	pop    edi
c000ce5c:	5d                   	pop    ebp
c000ce5d:	c3                   	ret    

c000ce5e <__cxa_atexit>:
c000ce5e:	31 c0                	xor    eax,eax
c000ce60:	c3                   	ret    

c000ce61 <__cxa_finalize>:
c000ce61:	c3                   	ret    

c000ce62 <__stack_chk_fail>:
c000ce62:	55                   	push   ebp
c000ce63:	89 e5                	mov    ebp,esp
c000ce65:	83 ec 14             	sub    esp,0x14
c000ce68:	68 18 32 02 c0       	push   0xc0023218
c000ce6d:	e8 53 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce72:	58                   	pop    eax
c000ce73:	5a                   	pop    edx
c000ce74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce77:	68 68 32 02 c0       	push   0xc0023268
c000ce7c:	e8 44 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce81:	59                   	pop    ecx
c000ce82:	58                   	pop    eax
c000ce83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce86:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce89:	68 68 32 02 c0       	push   0xc0023268
c000ce8e:	e8 32 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce93:	5a                   	pop    edx
c000ce94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce97:	59                   	pop    ecx
c000ce98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce9d:	68 68 32 02 c0       	push   0xc0023268
c000cea2:	e8 1e 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cea7:	5a                   	pop    edx
c000cea8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ceab:	59                   	pop    ecx
c000ceac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceae:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ceb3:	68 68 32 02 c0       	push   0xc0023268
c000ceb8:	e8 08 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cebd:	c7 04 24 70 32 02 c0 	mov    DWORD PTR [esp],0xc0023270
c000cec4:	e8 ae 64 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	c9                   	leave  
c000cecd:	c3                   	ret    

c000cece <__cxa_pure_virtual>:
c000cece:	83 ec 18             	sub    esp,0x18
c000ced1:	68 88 32 02 c0       	push   0xc0023288
c000ced6:	e8 9c 64 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000cedb:	83 c4 1c             	add    esp,0x1c
c000cede:	c3                   	ret    

c000cedf <operator new[](unsigned long)>:
c000cedf:	e9 d3 cd ff ff       	jmp    c0009cb7 <malloc>

c000cee4 <operator delete(void*, unsigned long)>:
c000cee4:	e9 ee cd ff ff       	jmp    c0009cd7 <rfree>

c000cee9 <operator delete[](void*)>:
c000cee9:	e9 e9 cd ff ff       	jmp    c0009cd7 <rfree>

c000ceee <operator delete[](void*, unsigned long)>:
c000ceee:	e9 e4 cd ff ff       	jmp    c0009cd7 <rfree>

c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cef3:	55                   	push   ebp
c000cef4:	b9 11 00 00 00       	mov    ecx,0x11
c000cef9:	57                   	push   edi
c000cefa:	56                   	push   esi
c000cefb:	be 6e 2d 02 c0       	mov    esi,0xc0022d6e
c000cf00:	53                   	push   ebx
c000cf01:	83 ec 20             	sub    esp,0x20
c000cf04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf0c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf10:	fc                   	cld    
c000cf11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf13:	89 ee                	mov    esi,ebp
c000cf15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf19:	eb 02                	jmp    c000cf1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf1b:	89 c6                	mov    esi,eax
c000cf1d:	31 d2                	xor    edx,edx
c000cf1f:	41                   	inc    ecx
c000cf20:	89 f0                	mov    eax,esi
c000cf22:	f7 f3                	div    ebx
c000cf24:	39 de                	cmp    esi,ebx
c000cf26:	73 f3                	jae    c000cf1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf28:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf2b:	eb 02                	jmp    c000cf2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf2d:	89 c5                	mov    ebp,eax
c000cf2f:	31 d2                	xor    edx,edx
c000cf31:	49                   	dec    ecx
c000cf32:	89 e8                	mov    eax,ebp
c000cf34:	f7 f3                	div    ebx
c000cf36:	39 dd                	cmp    ebp,ebx
c000cf38:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf3c:	88 11                	mov    BYTE PTR [ecx],dl
c000cf3e:	73 ed                	jae    c000cf2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf44:	83 c4 20             	add    esp,0x20
c000cf47:	5b                   	pop    ebx
c000cf48:	5e                   	pop    esi
c000cf49:	5f                   	pop    edi
c000cf4a:	5d                   	pop    ebp
c000cf4b:	c3                   	ret    

c000cf4c <Dbg::logc(char)>:
c000cf4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf50:	f6 05 c0 62 02 c0 10 	test   BYTE PTR ds:0xc00262c0,0x10
c000cf57:	75 12                	jne    c000cf6b <Dbg::logc(char)+0x1f>
c000cf59:	ba fd 03 00 00       	mov    edx,0x3fd
c000cf5e:	ec                   	in     al,dx
c000cf5f:	a8 20                	test   al,0x20
c000cf61:	74 fb                	je     c000cf5e <Dbg::logc(char)+0x12>
c000cf63:	ba f8 03 00 00       	mov    edx,0x3f8
c000cf68:	88 c8                	mov    al,cl
c000cf6a:	ee                   	out    dx,al
c000cf6b:	c3                   	ret    

c000cf6c <Dbg::logs(char*)>:
c000cf6c:	53                   	push   ebx
c000cf6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cf71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0f                	je     c000cf87 <Dbg::logs(char*)+0x1b>
c000cf78:	50                   	push   eax
c000cf79:	43                   	inc    ebx
c000cf7a:	e8 cd ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000cf7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf82:	5a                   	pop    edx
c000cf83:	84 c0                	test   al,al
c000cf85:	75 f1                	jne    c000cf78 <Dbg::logs(char*)+0xc>
c000cf87:	5b                   	pop    ebx
c000cf88:	c3                   	ret    

c000cf89 <Dbg::logWriteInt(unsigned int)>:
c000cf89:	83 ec 10             	sub    esp,0x10
c000cf8c:	6a 0a                	push   0xa
c000cf8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cf92:	50                   	push   eax
c000cf93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf97:	e8 57 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cf9c:	50                   	push   eax
c000cf9d:	e8 ca ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfa2:	83 c4 20             	add    esp,0x20
c000cfa5:	c3                   	ret    

c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cfa6:	83 ec 10             	sub    esp,0x10
c000cfa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfad:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfb1:	50                   	push   eax
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 38 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfbb:	50                   	push   eax
c000cfbc:	e8 ab ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfc1:	83 c4 20             	add    esp,0x20
c000cfc4:	c3                   	ret    

c000cfc5 <Dbg::kprintf(char const*, ...)>:
c000cfc5:	55                   	push   ebp
c000cfc6:	57                   	push   edi
c000cfc7:	56                   	push   esi
c000cfc8:	53                   	push   ebx
c000cfc9:	83 ec 0c             	sub    esp,0xc
c000cfcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd0:	f6 05 c0 62 02 c0 10 	test   BYTE PTR ds:0xc00262c0,0x10
c000cfd7:	74 08                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x1c>
c000cfd9:	83 c4 0c             	add    esp,0xc
c000cfdc:	5b                   	pop    ebx
c000cfdd:	5e                   	pop    esi
c000cfde:	5f                   	pop    edi
c000cfdf:	5d                   	pop    ebp
c000cfe0:	c3                   	ret    
c000cfe1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfe5:	31 db                	xor    ebx,ebx
c000cfe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfeb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 e7                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000cff2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cff5:	3c 25                	cmp    al,0x25
c000cff7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cffa:	75 44                	jne    c000d040 <Dbg::kprintf(char const*, ...)+0x7b>
c000cffc:	83 c3 02             	add    ebx,0x2
c000cfff:	8a 07                	mov    al,BYTE PTR [edi]
c000d001:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d004:	83 e8 25             	sub    eax,0x25
c000d007:	3c 53                	cmp    al,0x53
c000d009:	0f 87 c9 00 00 00    	ja     c000d0d8 <Dbg::kprintf(char const*, ...)+0x113>
c000d00f:	0f b6 c0             	movzx  eax,al
c000d012:	ff 24 85 9c 32 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcd64]
c000d019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d01d:	89 c8                	mov    eax,ecx
c000d01f:	83 c1 04             	add    ecx,0x4
c000d022:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d026:	ff 30                	push   DWORD PTR [eax]
c000d028:	e8 5c ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d02d:	5f                   	pop    edi
c000d02e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d032:	84 c0                	test   al,al
c000d034:	74 a3                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000d036:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d039:	3c 25                	cmp    al,0x25
c000d03b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d03e:	74 bc                	je     c000cffc <Dbg::kprintf(char const*, ...)+0x37>
c000d040:	50                   	push   eax
c000d041:	89 eb                	mov    ebx,ebp
c000d043:	e8 04 ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d048:	89 fd                	mov    ebp,edi
c000d04a:	58                   	pop    eax
c000d04b:	eb e1                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d051:	89 c8                	mov    eax,ecx
c000d053:	83 c1 04             	add    ecx,0x4
c000d056:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d05a:	ff 30                	push   DWORD PTR [eax]
c000d05c:	e8 0b ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000d061:	58                   	pop    eax
c000d062:	eb ca                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d064:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d068:	89 d0                	mov    eax,edx
c000d06a:	83 c2 04             	add    edx,0x4
c000d06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d071:	ff 30                	push   DWORD PTR [eax]
c000d073:	e8 11 ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d078:	58                   	pop    eax
c000d079:	eb b3                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d07b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d07f:	89 d0                	mov    eax,edx
c000d081:	83 c2 04             	add    edx,0x4
c000d084:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d087:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d08b:	50                   	push   eax
c000d08c:	e8 bb fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d091:	58                   	pop    eax
c000d092:	eb 9a                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d094:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d098:	89 c8                	mov    eax,ecx
c000d09a:	83 c1 04             	add    ecx,0x4
c000d09d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a1:	6a 10                	push   0x10
c000d0a3:	ff 30                	push   DWORD PTR [eax]
c000d0a5:	e8 fc fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0aa:	59                   	pop    ecx
c000d0ab:	5f                   	pop    edi
c000d0ac:	eb 80                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b2:	89 d0                	mov    eax,edx
c000d0b4:	83 c2 08             	add    edx,0x8
c000d0b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0bb:	6a 10                	push   0x10
c000d0bd:	ff 30                	push   DWORD PTR [eax]
c000d0bf:	e8 e2 fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0c4:	58                   	pop    eax
c000d0c5:	5a                   	pop    edx
c000d0c6:	e9 63 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0cb:	6a 25                	push   0x25
c000d0cd:	e8 7a fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0d2:	58                   	pop    eax
c000d0d3:	e9 56 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0d8:	6a 25                	push   0x25
c000d0da:	e8 6d fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0df:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d0e2:	50                   	push   eax
c000d0e3:	e8 64 fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0e8:	5a                   	pop    edx
c000d0e9:	59                   	pop    ecx
c000d0ea:	e9 3f ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ef:	90                   	nop

c000d0f0 <File::read(unsigned long long, void*, int*)>:
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d0f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d100:	3c 19                	cmp    al,0x19
c000d102:	77 35                	ja     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d104:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d10b:	85 c0                	test   eax,eax
c000d10d:	74 2a                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d10f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d115:	85 c0                	test   eax,eax
c000d117:	74 20                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d119:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d11d:	74 21                	je     c000d140 <File::read(unsigned long long, void*, int*)+0x50>
c000d11f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d121:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d125:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d12b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d12f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d133:	5b                   	pop    ebx
c000d134:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d137:	ff e0                	jmp    eax
c000d139:	b8 0b 00 00 00       	mov    eax,0xb
c000d13e:	eb 05                	jmp    c000d145 <File::read(unsigned long long, void*, int*)+0x55>
c000d140:	b8 05 00 00 00       	mov    eax,0x5
c000d145:	5b                   	pop    ebx
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <File::write(unsigned long long, void*, int*)>:
c000d148:	53                   	push   ebx
c000d149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d158:	3c 19                	cmp    al,0x19
c000d15a:	77 35                	ja     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d15c:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d163:	85 c0                	test   eax,eax
c000d165:	74 2a                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d16d:	85 c0                	test   eax,eax
c000d16f:	74 20                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d171:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d175:	74 21                	je     c000d198 <File::write(unsigned long long, void*, int*)+0x50>
c000d177:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d179:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d17d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d18b:	5b                   	pop    ebx
c000d18c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d18f:	ff e0                	jmp    eax
c000d191:	b8 0b 00 00 00       	mov    eax,0xb
c000d196:	eb 05                	jmp    c000d19d <File::write(unsigned long long, void*, int*)+0x55>
c000d198:	b8 05 00 00 00       	mov    eax,0x5
c000d19d:	5b                   	pop    ebx
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <Directory::read(unsigned long long, void*, int*)>:
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1b0:	3c 19                	cmp    al,0x19
c000d1b2:	77 35                	ja     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1b4:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d1bb:	85 c0                	test   eax,eax
c000d1bd:	74 2a                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	74 20                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1cd:	74 21                	je     c000d1f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d1cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1e3:	5b                   	pop    ebx
c000d1e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d1e7:	ff e0                	jmp    eax
c000d1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ee:	eb 05                	jmp    c000d1f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d1f0:	b8 05 00 00 00       	mov    eax,0x5
c000d1f5:	5b                   	pop    ebx
c000d1f6:	c3                   	ret    
c000d1f7:	90                   	nop

c000d1f8 <Directory::write(unsigned long long, void*, int*)>:
c000d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d203:	b8 0b 00 00 00       	mov    eax,0xb
c000d208:	80 fa 19             	cmp    dl,0x19
c000d20b:	77 18                	ja     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d20d:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000d214:	85 d2                	test   edx,edx
c000d216:	74 0d                	je     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d218:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d21f:	19 c0                	sbb    eax,eax
c000d221:	83 e0 0a             	and    eax,0xa
c000d224:	40                   	inc    eax
c000d225:	c3                   	ret    

c000d226 <File::isAtty()>:
c000d226:	31 c0                	xor    eax,eax
c000d228:	c3                   	ret    
c000d229:	90                   	nop

c000d22a <Directory::isAtty()>:
c000d22a:	31 c0                	xor    eax,eax
c000d22c:	c3                   	ret    
c000d22d:	90                   	nop

c000d22e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d22e:	b8 0a 00 00 00       	mov    eax,0xa
c000d233:	c3                   	ret    

c000d234 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d234:	b8 0a 00 00 00       	mov    eax,0xa
c000d239:	c3                   	ret    

c000d23a <Filesystem::allocateSwapfile(char const*, int)>:
c000d23a:	31 c0                	xor    eax,eax
c000d23c:	31 d2                	xor    edx,edx
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <File::~File()>:
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	89 10                	mov    DWORD PTR [eax],edx
c000d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	50                   	push   eax
c000d256:	e8 ad e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	90                   	nop
c000d25f:	83 c4 0c             	add    esp,0xc
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::~File()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26e:	e8 cd ff ff ff       	call   c000d240 <File::~File()>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	68 14 01 00 00       	push   0x114
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	e8 5d fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d287:	83 c4 10             	add    esp,0x10
c000d28a:	83 c4 0c             	add    esp,0xc
c000d28d:	c3                   	ret    

c000d28e <Directory::~Directory()>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	ba f4 34 02 c0       	mov    edx,0xc00234f4
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	89 10                	mov    DWORD PTR [eax],edx
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	50                   	push   eax
c000d2a4:	e8 5f e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	83 c4 0c             	add    esp,0xc
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <Directory::~Directory()>:
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2bc:	e8 cd ff ff ff       	call   c000d28e <Directory::~Directory()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	68 14 01 00 00       	push   0x114
c000d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d0:	e8 0f fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <Filesystem::Filesystem()>:
c000d2dc:	ba 70 34 02 c0       	mov    edx,0xc0023470
c000d2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e5:	89 10                	mov    DWORD PTR [eax],edx
c000d2e7:	8b 15 d8 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263d8
c000d2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f8:	a3 d8 63 02 c0       	mov    ds:0xc00263d8,eax
c000d2fd:	90                   	nop
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <Filesystem::~Filesystem()>:
c000d300:	ba 70 34 02 c0       	mov    edx,0xc0023470
c000d305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d309:	89 10                	mov    DWORD PTR [eax],edx
c000d30b:	90                   	nop
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop

c000d30e <Filesystem::~Filesystem()>:
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d315:	e8 e6 ff ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c000d31a:	83 c4 04             	add    esp,0x4
c000d31d:	83 ec 08             	sub    esp,0x8
c000d320:	6a 08                	push   0x8
c000d322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d326:	e8 b9 fb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	83 c4 0c             	add    esp,0xc
c000d331:	c3                   	ret    

c000d332 <Fs::getcwd(Process*, char*, int)>:
c000d332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d336:	31 c0                	xor    eax,eax
c000d338:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d33b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d33f:	7d 15                	jge    c000d356 <Fs::getcwd(Process*, char*, int)+0x24>
c000d341:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d345:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d34c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d34f:	84 c9                	test   cl,cl
c000d351:	74 06                	je     c000d359 <Fs::getcwd(Process*, char*, int)+0x27>
c000d353:	40                   	inc    eax
c000d354:	eb e2                	jmp    c000d338 <Fs::getcwd(Process*, char*, int)+0x6>
c000d356:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d359:	31 c0                	xor    eax,eax
c000d35b:	c3                   	ret    

c000d35c <Fs::initVFS()>:
c000d35c:	83 ec 18             	sub    esp,0x18
c000d35f:	6a 08                	push   0x8
c000d361:	e8 51 c9 ff ff       	call   c0009cb7 <malloc>
c000d366:	89 04 24             	mov    DWORD PTR [esp],eax
c000d369:	e8 ba dc 00 00       	call   c001b028 <FAT::FAT()>
c000d36e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d375:	e8 3d c9 ff ff       	call   c0009cb7 <malloc>
c000d37a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37d:	e8 36 ef 00 00       	call   c001c2b8 <ISO9660::ISO9660()>
c000d382:	83 c4 1c             	add    esp,0x1c
c000d385:	c3                   	ret    

c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 10 04 00 00    	sub    esp,0x410
c000d390:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d397:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d39e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3a5:	68 00 04 00 00       	push   0x400
c000d3aa:	6a 00                	push   0x0
c000d3ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3b0:	56                   	push   esi
c000d3b1:	e8 c6 32 ff ff       	call   c000067c <memset>
c000d3b6:	83 c4 10             	add    esp,0x10
c000d3b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d3bd:	75 0b                	jne    c000d3ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d3bf:	50                   	push   eax
c000d3c0:	50                   	push   eax
c000d3c1:	57                   	push   edi
c000d3c2:	56                   	push   esi
c000d3c3:	e8 70 33 ff ff       	call   c0000738 <strcpy>
c000d3c8:	eb 41                	jmp    c000d40b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d3ca:	8a 07                	mov    al,BYTE PTR [edi]
c000d3cc:	3c 5c                	cmp    al,0x5c
c000d3ce:	74 04                	je     c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d3d0:	3c 2f                	cmp    al,0x2f
c000d3d2:	75 18                	jne    c000d3ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d3d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d3d7:	3c 60                	cmp    al,0x60
c000d3d9:	7e 03                	jle    c000d3de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d3db:	83 e8 20             	sub    eax,0x20
c000d3de:	88 04 24             	mov    BYTE PTR [esp],al
c000d3e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d3e8:	50                   	push   eax
c000d3e9:	50                   	push   eax
c000d3ea:	eb 18                	jmp    c000d404 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d3ec:	50                   	push   eax
c000d3ed:	50                   	push   eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	e8 43 33 ff ff       	call   c0000738 <strcpy>
c000d3f5:	5a                   	pop    edx
c000d3f6:	59                   	pop    ecx
c000d3f7:	68 cb 45 02 c0       	push   0xc00245cb
c000d3fc:	56                   	push   esi
c000d3fd:	e8 76 34 ff ff       	call   c0000878 <strcat>
c000d402:	5d                   	pop    ebp
c000d403:	58                   	pop    eax
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	e8 6d 34 ff ff       	call   c0000878 <strcat>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d411:	3c 60                	cmp    al,0x60
c000d413:	7e 03                	jle    c000d418 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d415:	83 e8 20             	sub    eax,0x20
c000d418:	88 04 24             	mov    BYTE PTR [esp],al
c000d41b:	88 03                	mov    BYTE PTR [ebx],al
c000d41d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d424:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d42a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d42e:	bf 03 00 00 00       	mov    edi,0x3
c000d433:	b8 03 00 00 00       	mov    eax,0x3
c000d438:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d43b:	84 d2                	test   dl,dl
c000d43d:	0f 84 91 00 00 00    	je     c000d4d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d443:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d446:	80 fa 5c             	cmp    dl,0x5c
c000d449:	74 05                	je     c000d450 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d44b:	80 fa 2f             	cmp    dl,0x2f
c000d44e:	75 12                	jne    c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d450:	89 c5                	mov    ebp,eax
c000d452:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d457:	74 09                	je     c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d459:	40                   	inc    eax
c000d45a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d45e:	89 cf                	mov    edi,ecx
c000d460:	eb d6                	jmp    c000d438 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d462:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d467:	75 5b                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d469:	80 fa 2e             	cmp    dl,0x2e
c000d46c:	75 56                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d46e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d472:	74 19                	je     c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d474:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d479:	74 53                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d47b:	89 f9                	mov    ecx,edi
c000d47d:	41                   	inc    ecx
c000d47e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d481:	80 fa 2f             	cmp    dl,0x2f
c000d484:	74 f7                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d486:	80 fa 5c             	cmp    dl,0x5c
c000d489:	74 f2                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d48b:	eb d1                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d48d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d492:	74 3a                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d494:	83 f8 03             	cmp    eax,0x3
c000d497:	74 c5                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d499:	41                   	inc    ecx
c000d49a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d49d:	80 fa 2f             	cmp    dl,0x2f
c000d4a0:	74 f7                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a2:	80 fa 5c             	cmp    dl,0x5c
c000d4a5:	74 f2                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a7:	48                   	dec    eax
c000d4a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4ac:	75 06                	jne    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4b2:	eb f3                	jmp    c000d4a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d4b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4b8:	74 07                	je     c000d4c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d4ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4be:	48                   	dec    eax
c000d4bf:	eb f3                	jmp    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4c1:	40                   	inc    eax
c000d4c2:	eb 9a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c4:	80 fa 2f             	cmp    dl,0x2f
c000d4c7:	74 95                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c9:	80 fa 5c             	cmp    dl,0x5c
c000d4cc:	74 90                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4ce:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d4d1:	40                   	inc    eax
c000d4d2:	eb 8a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	53                   	push   ebx
c000d4dc:	e8 b7 31 ff ff       	call   c0000698 <strlen>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d4e9:	75 26                	jne    c000d511 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	53                   	push   ebx
c000d4ef:	e8 a4 31 ff ff       	call   c0000698 <strlen>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d4fc:	74 26                	je     c000d524 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d4fe:	83 ec 0c             	sub    esp,0xc
c000d501:	53                   	push   ebx
c000d502:	e8 91 31 ff ff       	call   c0000698 <strlen>
c000d507:	83 c4 10             	add    esp,0x10
c000d50a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d50f:	eb c7                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	53                   	push   ebx
c000d515:	e8 7e 31 ff ff       	call   c0000698 <strlen>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d522:	74 c7                	je     c000d4eb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d524:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    
c000d52f:	90                   	nop

c000d530 <File::File(char const*, Process*)>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	83 ec 08             	sub    esp,0x8
c000d53a:	6a 00                	push   0x0
c000d53c:	50                   	push   eax
c000d53d:	e8 e4 e2 ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	ba d8 34 02 c0       	mov    edx,0xc00234d8
c000d54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54e:	89 10                	mov    DWORD PTR [eax],edx
c000d550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d554:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	83 c0 0d             	add    eax,0xd
c000d561:	83 ec 04             	sub    esp,0x4
c000d564:	52                   	push   edx
c000d565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d569:	50                   	push   eax
c000d56a:	e8 17 fe ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d576:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d579:	8d 50 bf             	lea    edx,[eax-0x41]
c000d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d580:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d592:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d598:	0f b6 c0             	movzx  eax,al
c000d59b:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d5a2:	85 c0                	test   eax,eax
c000d5a4:	74 5e                	je     c000d604 <File::File(char const*, Process*)+0xd4>
c000d5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5b0:	0f b6 c0             	movzx  eax,al
c000d5b3:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d5ba:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5c0:	85 c0                	test   eax,eax
c000d5c2:	75 40                	jne    c000d604 <File::File(char const*, Process*)+0xd4>
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	68 14 34 02 c0       	push   0xc0023414
c000d5cc:	e8 f4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d5d1:	83 c4 10             	add    esp,0x10
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5de:	0f b6 c0             	movzx  eax,al
c000d5e1:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	50                   	push   eax
c000d5ec:	e8 7b 20 00 00       	call   c000f66c <LogicalDisk::mount()>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	68 fb 52 02 c0       	push   0xc00252fb
c000d5fc:	e8 c4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	90                   	nop
c000d605:	83 c4 0c             	add    esp,0xc
c000d608:	c3                   	ret    
c000d609:	90                   	nop

c000d60a <File::open(FileOpenMode)>:
c000d60a:	53                   	push   ebx
c000d60b:	b8 0b 00 00 00       	mov    eax,0xb
c000d610:	83 ec 08             	sub    esp,0x8
c000d613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d617:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d61e:	80 fa 19             	cmp    dl,0x19
c000d621:	77 40                	ja     c000d663 <File::open(FileOpenMode)+0x59>
c000d623:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000d62a:	85 d2                	test   edx,edx
c000d62c:	74 35                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d62e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d634:	85 d2                	test   edx,edx
c000d636:	74 2b                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d638:	b8 06 00 00 00       	mov    eax,0x6
c000d63d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d641:	75 20                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d643:	8b 02                	mov    eax,DWORD PTR [edx]
c000d645:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	51                   	push   ecx
c000d650:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d653:	51                   	push   ecx
c000d654:	52                   	push   edx
c000d655:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	85 c0                	test   eax,eax
c000d65d:	75 04                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d65f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d663:	83 c4 08             	add    esp,0x8
c000d666:	5b                   	pop    ebx
c000d667:	c3                   	ret    

c000d668 <File::close()>:
c000d668:	53                   	push   ebx
c000d669:	b8 0b 00 00 00       	mov    eax,0xb
c000d66e:	83 ec 08             	sub    esp,0x8
c000d671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d675:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d67c:	80 fa 19             	cmp    dl,0x19
c000d67f:	77 41                	ja     c000d6c2 <File::close()+0x5a>
c000d681:	8b 1c 95 60 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77a0]
c000d688:	85 db                	test   ebx,ebx
c000d68a:	74 36                	je     c000d6c2 <File::close()+0x5a>
c000d68c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d693:	74 2d                	je     c000d6c2 <File::close()+0x5a>
c000d695:	b8 05 00 00 00       	mov    eax,0x5
c000d69a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d69e:	74 22                	je     c000d6c2 <File::close()+0x5a>
c000d6a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6a4:	8b 04 95 60 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77a0]
c000d6ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6b1:	53                   	push   ebx
c000d6b2:	53                   	push   ebx
c000d6b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d6bb:	50                   	push   eax
c000d6bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	83 c4 08             	add    esp,0x8
c000d6c5:	5b                   	pop    ebx
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <File::seek(unsigned long long)>:
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	b8 0b 00 00 00       	mov    eax,0xb
c000d6cf:	51                   	push   ecx
c000d6d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d6d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d6df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6e3:	80 fa 19             	cmp    dl,0x19
c000d6e6:	77 31                	ja     c000d719 <File::seek(unsigned long long)+0x51>
c000d6e8:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000d6ef:	85 d2                	test   edx,edx
c000d6f1:	74 26                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6f9:	85 d2                	test   edx,edx
c000d6fb:	74 1c                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6fd:	b8 05 00 00 00       	mov    eax,0x5
c000d702:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d706:	74 11                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d708:	8b 02                	mov    eax,DWORD PTR [edx]
c000d70a:	53                   	push   ebx
c000d70b:	51                   	push   ecx
c000d70c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d712:	52                   	push   edx
c000d713:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	5a                   	pop    edx
c000d71a:	5b                   	pop    ebx
c000d71b:	5e                   	pop    esi
c000d71c:	c3                   	ret    
c000d71d:	90                   	nop

c000d71e <File::tell(unsigned long long*)>:
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	b8 0b 00 00 00       	mov    eax,0xb
c000d726:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d72a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d731:	80 fa 19             	cmp    dl,0x19
c000d734:	77 34                	ja     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d736:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000d73d:	85 d2                	test   edx,edx
c000d73f:	74 29                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d741:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d747:	85 d2                	test   edx,edx
c000d749:	74 1f                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d74b:	b8 05 00 00 00       	mov    eax,0x5
c000d750:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d754:	74 14                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d756:	50                   	push   eax
c000d757:	8b 02                	mov    eax,DWORD PTR [edx]
c000d759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d75d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d763:	52                   	push   edx
c000d764:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 0c             	add    esp,0xc
c000d76d:	c3                   	ret    

c000d76e <File::rewind()>:
c000d76e:	83 ec 10             	sub    esp,0x10
c000d771:	6a 00                	push   0x0
c000d773:	6a 00                	push   0x0
c000d775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d779:	e8 4a ff ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c000d77e:	83 c4 1c             	add    esp,0x1c
c000d781:	c3                   	ret    

c000d782 <File::unlink()>:
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	b8 0b 00 00 00       	mov    eax,0xb
c000d78a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d78e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d795:	80 f9 19             	cmp    cl,0x19
c000d798:	77 2f                	ja     c000d7c9 <File::unlink()+0x47>
c000d79a:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000d7a1:	85 c9                	test   ecx,ecx
c000d7a3:	74 24                	je     c000d7c9 <File::unlink()+0x47>
c000d7a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ab:	85 c9                	test   ecx,ecx
c000d7ad:	74 1a                	je     c000d7c9 <File::unlink()+0x47>
c000d7af:	b8 06 00 00 00       	mov    eax,0x6
c000d7b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7b8:	75 0f                	jne    c000d7c9 <File::unlink()+0x47>
c000d7ba:	83 c2 0d             	add    edx,0xd
c000d7bd:	50                   	push   eax
c000d7be:	50                   	push   eax
c000d7bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7c1:	52                   	push   edx
c000d7c2:	51                   	push   ecx
c000d7c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	83 c4 0c             	add    esp,0xc
c000d7cc:	c3                   	ret    
c000d7cd:	90                   	nop

c000d7ce <File::rename(char const*)>:
c000d7ce:	83 ec 0c             	sub    esp,0xc
c000d7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e1:	80 f9 19             	cmp    cl,0x19
c000d7e4:	77 32                	ja     c000d818 <File::rename(char const*)+0x4a>
c000d7e6:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000d7ed:	85 c9                	test   ecx,ecx
c000d7ef:	74 27                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7f7:	85 c9                	test   ecx,ecx
c000d7f9:	74 1d                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7fb:	b8 06 00 00 00       	mov    eax,0x6
c000d800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d804:	75 12                	jne    c000d818 <File::rename(char const*)+0x4a>
c000d806:	83 c2 0d             	add    edx,0xd
c000d809:	50                   	push   eax
c000d80a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d810:	52                   	push   edx
c000d811:	51                   	push   ecx
c000d812:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	83 c4 0c             	add    esp,0xc
c000d81b:	c3                   	ret    

c000d81c <File::chfatattr(unsigned char, unsigned char)>:
c000d81c:	57                   	push   edi
c000d81d:	b8 0b 00 00 00       	mov    eax,0xb
c000d822:	56                   	push   esi
c000d823:	53                   	push   ebx
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d82c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d837:	80 f9 19             	cmp    cl,0x19
c000d83a:	77 37                	ja     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d83c:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000d843:	85 c9                	test   ecx,ecx
c000d845:	74 2c                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d847:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d84d:	85 c9                	test   ecx,ecx
c000d84f:	74 22                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d851:	b8 06 00 00 00       	mov    eax,0x6
c000d856:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d85a:	75 17                	jne    c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d85c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d85e:	89 f0                	mov    eax,esi
c000d860:	83 c2 0d             	add    edx,0xd
c000d863:	0f b6 f0             	movzx  esi,al
c000d866:	0f b6 db             	movzx  ebx,bl
c000d869:	56                   	push   esi
c000d86a:	53                   	push   ebx
c000d86b:	52                   	push   edx
c000d86c:	51                   	push   ecx
c000d86d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	5b                   	pop    ebx
c000d874:	5e                   	pop    esi
c000d875:	5f                   	pop    edi
c000d876:	c3                   	ret    
c000d877:	90                   	nop

c000d878 <File::exists()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	31 c0                	xor    eax,eax
c000d87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d881:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d888:	80 f9 19             	cmp    cl,0x19
c000d88b:	77 24                	ja     c000d8b1 <File::exists()+0x39>
c000d88d:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000d894:	85 c9                	test   ecx,ecx
c000d896:	74 19                	je     c000d8b1 <File::exists()+0x39>
c000d898:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89e:	85 c9                	test   ecx,ecx
c000d8a0:	74 0f                	je     c000d8b1 <File::exists()+0x39>
c000d8a2:	83 c2 0d             	add    edx,0xd
c000d8a5:	50                   	push   eax
c000d8a6:	50                   	push   eax
c000d8a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8a9:	52                   	push   edx
c000d8aa:	51                   	push   ecx
c000d8ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	83 c4 0c             	add    esp,0xc
c000d8b4:	c3                   	ret    
c000d8b5:	90                   	nop

c000d8b6 <File::stat(unsigned long long*, bool*)>:
c000d8b6:	56                   	push   esi
c000d8b7:	53                   	push   ebx
c000d8b8:	50                   	push   eax
c000d8b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8d1:	80 f9 19             	cmp    cl,0x19
c000d8d4:	77 3d                	ja     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8d6:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000d8dd:	85 c9                	test   ecx,ecx
c000d8df:	74 32                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	74 28                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f1:	74 13                	je     c000d906 <File::stat(unsigned long long*, bool*)+0x50>
c000d8f3:	83 ec 04             	sub    esp,0x4
c000d8f6:	56                   	push   esi
c000d8f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d8fd:	51                   	push   ecx
c000d8fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d901:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d904:	eb 0a                	jmp    c000d910 <File::stat(unsigned long long*, bool*)+0x5a>
c000d906:	53                   	push   ebx
c000d907:	83 c2 0d             	add    edx,0xd
c000d90a:	56                   	push   esi
c000d90b:	52                   	push   edx
c000d90c:	51                   	push   ecx
c000d90d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d910:	83 c4 10             	add    esp,0x10
c000d913:	5a                   	pop    edx
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	c3                   	ret    

c000d917 <Fs::setcwd(Process*, char*)>:
c000d917:	55                   	push   ebp
c000d918:	57                   	push   edi
c000d919:	56                   	push   esi
c000d91a:	53                   	push   ebx
c000d91b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d921:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d928:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d92e:	57                   	push   edi
c000d92f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d936:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d93a:	56                   	push   esi
c000d93b:	e8 46 fa ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d940:	89 34 24             	mov    DWORD PTR [esp],esi
c000d943:	e8 50 2d ff ff       	call   c0000698 <strlen>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	83 f8 02             	cmp    eax,0x2
c000d94e:	77 15                	ja     c000d965 <Fs::setcwd(Process*, char*)+0x4e>
c000d950:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d955:	83 eb 41             	sub    ebx,0x41
c000d958:	8b 04 9d 60 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd77a0]
c000d95f:	85 c0                	test   eax,eax
c000d961:	75 1c                	jne    c000d97f <Fs::setcwd(Process*, char*)+0x68>
c000d963:	eb 4c                	jmp    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d965:	83 ec 0c             	sub    esp,0xc
c000d968:	56                   	push   esi
c000d969:	e8 2a 2d ff ff       	call   c0000698 <strlen>
c000d96e:	83 c4 10             	add    esp,0x10
c000d971:	83 f8 03             	cmp    eax,0x3
c000d974:	75 74                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d976:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d97b:	75 6d                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d97d:	eb d1                	jmp    c000d950 <Fs::setcwd(Process*, char*)+0x39>
c000d97f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d986:	75 29                	jne    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 ec 33 02 c0       	push   0xc00233ec
c000d990:	e8 30 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d995:	5a                   	pop    edx
c000d996:	ff 34 9d 60 88 02 c0 	push   DWORD PTR [ebx*4-0x3ffd77a0]
c000d99d:	e8 ca 1c 00 00       	call   c000f66c <LogicalDisk::mount()>
c000d9a2:	c7 04 24 fb 52 02 c0 	mov    DWORD PTR [esp],0xc00252fb
c000d9a9:	e8 17 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	b8 03 00 00 00       	mov    eax,0x3
c000d9b6:	83 fb 19             	cmp    ebx,0x19
c000d9b9:	0f 87 c6 00 00 00    	ja     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9bf:	8b 14 9d 60 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd77a0]
c000d9c6:	b8 05 00 00 00       	mov    eax,0x5
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	0f 84 b2 00 00 00    	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9d3:	b8 06 00 00 00       	mov    eax,0x6
c000d9d8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9df:	0f 85 92 00 00 00    	jne    c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000d9e5:	e9 9b 00 00 00       	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	68 14 01 00 00       	push   0x114
c000d9f2:	e8 c0 c2 ff ff       	call   c0009cb7 <malloc>
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	89 c3                	mov    ebx,eax
c000d9fc:	55                   	push   ebp
c000d9fd:	56                   	push   esi
c000d9fe:	50                   	push   eax
c000d9ff:	e8 2c fb ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000da04:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da10:	50                   	push   eax
c000da11:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da15:	50                   	push   eax
c000da16:	53                   	push   ebx
c000da17:	e8 9a fe ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	83 f8 02             	cmp    eax,0x2
c000da22:	74 04                	je     c000da28 <Fs::setcwd(Process*, char*)+0x111>
c000da24:	85 c0                	test   eax,eax
c000da26:	74 1c                	je     c000da44 <Fs::setcwd(Process*, char*)+0x12d>
c000da28:	b8 01 00 00 00       	mov    eax,0x1
c000da2d:	85 db                	test   ebx,ebx
c000da2f:	74 54                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da31:	83 ec 0c             	sub    esp,0xc
c000da34:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da36:	53                   	push   ebx
c000da37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da3a:	83 c4 10             	add    esp,0x10
c000da3d:	b8 01 00 00 00       	mov    eax,0x1
c000da42:	eb 41                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da44:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da49:	75 1c                	jne    c000da67 <Fs::setcwd(Process*, char*)+0x150>
c000da4b:	b8 02 00 00 00       	mov    eax,0x2
c000da50:	85 db                	test   ebx,ebx
c000da52:	74 31                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da59:	53                   	push   ebx
c000da5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	b8 02 00 00 00       	mov    eax,0x2
c000da65:	eb 1e                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da67:	85 db                	test   ebx,ebx
c000da69:	74 0c                	je     c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da70:	53                   	push   ebx
c000da71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	50                   	push   eax
c000da78:	50                   	push   eax
c000da79:	56                   	push   esi
c000da7a:	57                   	push   edi
c000da7b:	e8 b8 2c ff ff       	call   c0000738 <strcpy>
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	31 c0                	xor    eax,eax
c000da85:	81 c4 1c 02 00 00    	add    esp,0x21c
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <Directory::Directory(char const*, Process*)>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da97:	83 ec 08             	sub    esp,0x8
c000da9a:	6a 00                	push   0x0
c000da9c:	50                   	push   eax
c000da9d:	e8 84 dd ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	ba f4 34 02 c0       	mov    edx,0xc00234f4
c000daaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daae:	89 10                	mov    DWORD PTR [eax],edx
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 c0 0d             	add    eax,0xd
c000dac1:	83 ec 04             	sub    esp,0x4
c000dac4:	52                   	push   edx
c000dac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac9:	50                   	push   eax
c000daca:	e8 b7 f8 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dad9:	8d 50 bf             	lea    edx,[eax-0x41]
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000daf8:	0f b6 c0             	movzx  eax,al
c000dafb:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000db02:	85 c0                	test   eax,eax
c000db04:	74 5e                	je     c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db10:	0f b6 c0             	movzx  eax,al
c000db13:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000db1a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db20:	85 c0                	test   eax,eax
c000db22:	75 40                	jne    c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	68 3c 34 02 c0       	push   0xc002343c
c000db2c:	e8 94 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db3e:	0f b6 c0             	movzx  eax,al
c000db41:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	50                   	push   eax
c000db4c:	e8 1b 1b 00 00       	call   c000f66c <LogicalDisk::mount()>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	68 fb 52 02 c0       	push   0xc00252fb
c000db5c:	e8 64 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	90                   	nop
c000db65:	83 c4 0c             	add    esp,0xc
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Directory::open()>:
c000db6a:	53                   	push   ebx
c000db6b:	b8 0b 00 00 00       	mov    eax,0xb
c000db70:	83 ec 08             	sub    esp,0x8
c000db73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db77:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000db7e:	80 fa 19             	cmp    dl,0x19
c000db81:	77 3d                	ja     c000dbc0 <Directory::open()+0x56>
c000db83:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000db8a:	85 d2                	test   edx,edx
c000db8c:	74 32                	je     c000dbc0 <Directory::open()+0x56>
c000db8e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000db94:	85 d2                	test   edx,edx
c000db96:	74 28                	je     c000dbc0 <Directory::open()+0x56>
c000db98:	b8 06 00 00 00       	mov    eax,0x6
c000db9d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dba1:	75 1d                	jne    c000dbc0 <Directory::open()+0x56>
c000dba3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dba9:	50                   	push   eax
c000dbaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbac:	51                   	push   ecx
c000dbad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbb0:	51                   	push   ecx
c000dbb1:	52                   	push   edx
c000dbb2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	75 04                	jne    c000dbc0 <Directory::open()+0x56>
c000dbbc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dbc0:	83 c4 08             	add    esp,0x8
c000dbc3:	5b                   	pop    ebx
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <Directory::close()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	b8 0b 00 00 00       	mov    eax,0xb
c000dbcc:	83 ec 08             	sub    esp,0x8
c000dbcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbd3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dbda:	80 fa 19             	cmp    dl,0x19
c000dbdd:	77 41                	ja     c000dc20 <Directory::close()+0x5a>
c000dbdf:	8b 1c 95 60 88 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd77a0]
c000dbe6:	85 db                	test   ebx,ebx
c000dbe8:	74 36                	je     c000dc20 <Directory::close()+0x5a>
c000dbea:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dbf1:	74 2d                	je     c000dc20 <Directory::close()+0x5a>
c000dbf3:	b8 05 00 00 00       	mov    eax,0x5
c000dbf8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dbfc:	74 22                	je     c000dc20 <Directory::close()+0x5a>
c000dbfe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc02:	8b 04 95 60 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77a0]
c000dc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc0f:	53                   	push   ebx
c000dc10:	53                   	push   ebx
c000dc11:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc19:	50                   	push   eax
c000dc1a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	83 c4 08             	add    esp,0x8
c000dc23:	5b                   	pop    ebx
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop

c000dc26 <Directory::unlink()>:
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	b8 0b 00 00 00       	mov    eax,0xb
c000dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc39:	80 f9 19             	cmp    cl,0x19
c000dc3c:	77 2f                	ja     c000dc6d <Directory::unlink()+0x47>
c000dc3e:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000dc45:	85 c9                	test   ecx,ecx
c000dc47:	74 24                	je     c000dc6d <Directory::unlink()+0x47>
c000dc49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc4f:	85 c9                	test   ecx,ecx
c000dc51:	74 1a                	je     c000dc6d <Directory::unlink()+0x47>
c000dc53:	b8 06 00 00 00       	mov    eax,0x6
c000dc58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dc5c:	75 0f                	jne    c000dc6d <Directory::unlink()+0x47>
c000dc5e:	83 c2 0d             	add    edx,0xd
c000dc61:	50                   	push   eax
c000dc62:	50                   	push   eax
c000dc63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc65:	52                   	push   edx
c000dc66:	51                   	push   ecx
c000dc67:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 c4 0c             	add    esp,0xc
c000dc70:	c3                   	ret    
c000dc71:	90                   	nop

c000dc72 <Directory::rename(char const*)>:
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc85:	80 f9 19             	cmp    cl,0x19
c000dc88:	77 32                	ja     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc8a:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000dc91:	85 c9                	test   ecx,ecx
c000dc93:	74 27                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc9b:	85 c9                	test   ecx,ecx
c000dc9d:	74 1d                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc9f:	b8 06 00 00 00       	mov    eax,0x6
c000dca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dca8:	75 12                	jne    c000dcbc <Directory::rename(char const*)+0x4a>
c000dcaa:	83 c2 0d             	add    edx,0xd
c000dcad:	50                   	push   eax
c000dcae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcb4:	52                   	push   edx
c000dcb5:	51                   	push   ecx
c000dcb6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	83 c4 0c             	add    esp,0xc
c000dcbf:	c3                   	ret    

c000dcc0 <Directory::exists()>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	31 c0                	xor    eax,eax
c000dcc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcc9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd0:	80 f9 19             	cmp    cl,0x19
c000dcd3:	77 24                	ja     c000dcf9 <Directory::exists()+0x39>
c000dcd5:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000dcdc:	85 c9                	test   ecx,ecx
c000dcde:	74 19                	je     c000dcf9 <Directory::exists()+0x39>
c000dce0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce6:	85 c9                	test   ecx,ecx
c000dce8:	74 0f                	je     c000dcf9 <Directory::exists()+0x39>
c000dcea:	83 c2 0d             	add    edx,0xd
c000dced:	50                   	push   eax
c000dcee:	50                   	push   eax
c000dcef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf1:	52                   	push   edx
c000dcf2:	51                   	push   ecx
c000dcf3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Directory::read(dirent*)>:
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	b8 0b 00 00 00       	mov    eax,0xb
c000dd06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd0a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd11:	80 fa 19             	cmp    dl,0x19
c000dd14:	77 30                	ja     c000dd46 <Directory::read(dirent*)+0x48>
c000dd16:	8b 14 95 60 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd77a0]
c000dd1d:	85 d2                	test   edx,edx
c000dd1f:	74 25                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd21:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd28:	74 1c                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd2a:	83 ec 0c             	sub    esp,0xc
c000dd2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd33:	52                   	push   edx
c000dd34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd38:	6a 00                	push   0x0
c000dd3a:	68 10 01 00 00       	push   0x110
c000dd3f:	51                   	push   ecx
c000dd40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd43:	83 c4 20             	add    esp,0x20
c000dd46:	83 c4 1c             	add    esp,0x1c
c000dd49:	c3                   	ret    

c000dd4a <Directory::create()>:
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000dd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd5d:	80 f9 19             	cmp    cl,0x19
c000dd60:	77 2f                	ja     c000dd91 <Directory::create()+0x47>
c000dd62:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c000dd69:	85 c9                	test   ecx,ecx
c000dd6b:	74 24                	je     c000dd91 <Directory::create()+0x47>
c000dd6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd73:	85 c9                	test   ecx,ecx
c000dd75:	74 1a                	je     c000dd91 <Directory::create()+0x47>
c000dd77:	b8 06 00 00 00       	mov    eax,0x6
c000dd7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd80:	75 0f                	jne    c000dd91 <Directory::create()+0x47>
c000dd82:	83 c2 0d             	add    edx,0xd
c000dd85:	50                   	push   eax
c000dd86:	50                   	push   eax
c000dd87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd89:	52                   	push   edx
c000dd8a:	51                   	push   ecx
c000dd8b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dd8e:	83 c4 10             	add    esp,0x10
c000dd91:	83 c4 0c             	add    esp,0xc
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dd96:	b8 0a 00 00 00       	mov    eax,0xa
c000dd9b:	c3                   	ret    

c000dd9c <Bus::Bus(char const*)>:
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda3:	83 ec 08             	sub    esp,0x8
c000dda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaa:	50                   	push   eax
c000ddab:	e8 96 08 00 00       	call   c000e646 <Device::Device(char const*)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	ba 10 35 02 c0       	mov    edx,0xc0023510
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	89 10                	mov    DWORD PTR [eax],edx
c000ddbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ddcc:	90                   	nop
c000ddcd:	83 c4 0c             	add    esp,0xc
c000ddd0:	c3                   	ret    
c000ddd1:	90                   	nop
c000ddd2:	66 90                	xchg   ax,ax

c000ddd4 <Bus::~Bus()>:
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	ba 10 35 02 c0       	mov    edx,0xc0023510
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	89 10                	mov    DWORD PTR [eax],edx
c000dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	50                   	push   eax
c000ddea:	e8 55 05 00 00       	call   c000e344 <Device::~Device()>
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	90                   	nop
c000ddf3:	83 c4 0c             	add    esp,0xc
c000ddf6:	c3                   	ret    
c000ddf7:	90                   	nop

c000ddf8 <Bus::~Bus()>:
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	e8 cd ff ff ff       	call   c000ddd4 <Bus::~Bus()>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	68 58 01 00 00       	push   0x158
c000de12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de16:	e8 c9 f0 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	83 c4 0c             	add    esp,0xc
c000de21:	c3                   	ret    

c000de22 <beepThread(void*)>:
c000de22:	83 ec 0c             	sub    esp,0xc
c000de25:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000de2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de2e:	48                   	dec    eax
c000de2f:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000de34:	75 01                	jne    c000de37 <beepThread(void*)+0x15>
c000de36:	fb                   	sti    
c000de37:	83 ec 0c             	sub    esp,0xc
c000de3a:	6b c2 0a             	imul   eax,edx,0xa
c000de3d:	50                   	push   eax
c000de3e:	e8 91 8e 00 00       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c000de43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de4a:	e8 e0 c1 00 00       	call   c001a02f <Hal::makeBeep(int)>
c000de4f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000de57:	83 c4 1c             	add    esp,0x1c
c000de5a:	e9 75 8d 00 00       	jmp    c0016bd4 <blockTask(TaskState)>

c000de5f <Krnl::beep(int, int, bool)>:
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	83 ec 10             	sub    esp,0x10
c000de64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000de68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de70:	e8 ba c1 00 00       	call   c001a02f <Hal::makeBeep(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 f0                	mov    eax,esi
c000de7a:	84 c0                	test   al,al
c000de7c:	74 1e                	je     c000de9c <Krnl::beep(int, int, bool)+0x3d>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	6b db 0a             	imul   ebx,ebx,0xa
c000de84:	53                   	push   ebx
c000de85:	e8 4a 8e 00 00       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c000de8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000de92:	83 c4 14             	add    esp,0x14
c000de95:	5b                   	pop    ebx
c000de96:	5e                   	pop    esi
c000de97:	e9 93 c1 00 00       	jmp    c001a02f <Hal::makeBeep(int)>
c000de9c:	68 e6 00 00 00       	push   0xe6
c000dea1:	53                   	push   ebx
c000dea2:	68 22 de 00 c0       	push   0xc000de22
c000dea7:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c000dead:	e8 0e 89 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c000deb2:	83 c4 14             	add    esp,0x14
c000deb5:	5b                   	pop    ebx
c000deb6:	5e                   	pop    esi
c000deb7:	c3                   	ret    

c000deb8 <User::loadClockSettings(int)>:
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 14             	sub    esp,0x14
c000debc:	68 14 01 00 00       	push   0x114
c000dec1:	e8 f1 bd ff ff       	call   c0009cb7 <malloc>
c000dec6:	83 c4 0c             	add    esp,0xc
c000dec9:	89 c3                	mov    ebx,eax
c000decb:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c000ded1:	68 34 35 02 c0       	push   0xc0023534
c000ded6:	50                   	push   eax
c000ded7:	e8 54 f6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000dedc:	58                   	pop    eax
c000dedd:	5a                   	pop    edx
c000dede:	6a 01                	push   0x1
c000dee0:	53                   	push   ebx
c000dee1:	e8 24 f7 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c000dee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dee9:	e8 7a f7 ff ff       	call   c000d668 <File::close()>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	85 db                	test   ebx,ebx
c000def3:	74 0f                	je     c000df04 <User::loadClockSettings(int)+0x4c>
c000def5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000def7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000defb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000defe:	83 c4 08             	add    esp,0x8
c000df01:	5b                   	pop    ebx
c000df02:	ff e0                	jmp    eax
c000df04:	83 c4 08             	add    esp,0x8
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	90                   	nop

c000df0a <Clock::Clock(char const*)>:
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df11:	83 ec 08             	sub    esp,0x8
c000df14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df18:	50                   	push   eax
c000df19:	e8 28 07 00 00       	call   c000e646 <Device::Device(char const*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c000df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2a:	89 10                	mov    DWORD PTR [eax],edx
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df3a:	90                   	nop
c000df3b:	83 c4 0c             	add    esp,0xc
c000df3e:	c3                   	ret    
c000df3f:	90                   	nop

c000df40 <Clock::~Clock()>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	83 ec 0c             	sub    esp,0xc
c000df55:	50                   	push   eax
c000df56:	e8 e9 03 00 00       	call   c000e344 <Device::~Device()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <Clock::~Clock()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 cd ff ff ff       	call   c000df40 <Clock::~Clock()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 08             	sub    esp,0x8
c000df79:	68 58 01 00 00       	push   0x158
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 5d ef ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	c3                   	ret    

c000df8e <Clock::timeInSecondsLocal()>:
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 14             	sub    esp,0x14
c000df92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df96:	8b 10                	mov    edx,DWORD PTR [eax]
c000df98:	50                   	push   eax
c000df99:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df9c:	0f b6 0d dc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263dc
c000dfa3:	03 0d e0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263e0
c000dfa9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfaf:	89 cb                	mov    ebx,ecx
c000dfb1:	c1 fb 1f             	sar    ebx,0x1f
c000dfb4:	01 c8                	add    eax,ecx
c000dfb6:	11 da                	adc    edx,ebx
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	31 c9                	xor    ecx,ecx
c000dfbd:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000dfc4:	74 05                	je     c000dfcb <Clock::timeInSecondsLocal()+0x3d>
c000dfc6:	b9 08 07 00 00       	mov    ecx,0x708
c000dfcb:	31 db                	xor    ebx,ebx
c000dfcd:	01 c8                	add    eax,ecx
c000dfcf:	11 da                	adc    edx,ebx
c000dfd1:	83 c4 08             	add    esp,0x8
c000dfd4:	5b                   	pop    ebx
c000dfd5:	c3                   	ret    

c000dfd6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dfd6:	57                   	push   edi
c000dfd7:	56                   	push   esi
c000dfd8:	53                   	push   ebx
c000dfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dfe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dfe7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dfea:	0f b6 05 dc 63 02 c0 	movzx  eax,BYTE PTR ds:0xc00263dc
c000dff1:	03 05 e0 63 02 c0    	add    eax,DWORD PTR ds:0xc00263e0
c000dff7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dffd:	99                   	cdq    
c000dffe:	29 c6                	sub    esi,eax
c000e000:	19 d7                	sbb    edi,edx
c000e002:	89 f0                	mov    eax,esi
c000e004:	89 fa                	mov    edx,edi
c000e006:	31 f6                	xor    esi,esi
c000e008:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000e00f:	74 05                	je     c000e016 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e011:	be 08 07 00 00       	mov    esi,0x708
c000e016:	31 ff                	xor    edi,edi
c000e018:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e01c:	29 f0                	sub    eax,esi
c000e01e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e022:	19 fa                	sbb    edx,edi
c000e024:	89 d8                	mov    eax,ebx
c000e026:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	ff e0                	jmp    eax

c000e02f <datetimeToSeconds(datetime_t)>:
c000e02f:	55                   	push   ebp
c000e030:	57                   	push   edi
c000e031:	56                   	push   esi
c000e032:	53                   	push   ebx
c000e033:	83 ec 14             	sub    esp,0x14
c000e036:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e03a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e03e:	89 d3                	mov    ebx,edx
c000e040:	0f b6 c6             	movzx  eax,dh
c000e043:	c1 eb 10             	shr    ebx,0x10
c000e046:	48                   	dec    eax
c000e047:	66 81 eb 6c 07       	sub    bx,0x76c
c000e04c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e050:	0f b6 f5             	movzx  esi,ch
c000e053:	89 cf                	mov    edi,ecx
c000e055:	6b f6 3c             	imul   esi,esi,0x3c
c000e058:	c1 ef 10             	shr    edi,0x10
c000e05b:	0f b6 c9             	movzx  ecx,cl
c000e05e:	89 f8                	mov    eax,edi
c000e060:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e066:	0f b6 f8             	movzx  edi,al
c000e069:	0f b6 d2             	movzx  edx,dl
c000e06c:	01 fe                	add    esi,edi
c000e06e:	01 f1                	add    ecx,esi
c000e070:	0f b7 f3             	movzx  esi,bx
c000e073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e077:	c1 f9 1f             	sar    ecx,0x1f
c000e07a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e07f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e083:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e088:	8b 0c 8d a0 35 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdca60]
c000e08f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e093:	76 29                	jbe    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e095:	f6 c3 03             	test   bl,0x3
c000e098:	75 24                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e09a:	31 d2                	xor    edx,edx
c000e09c:	bf 64 00 00 00       	mov    edi,0x64
c000e0a1:	89 d8                	mov    eax,ebx
c000e0a3:	66 f7 f7             	div    di
c000e0a6:	66 85 d2             	test   dx,dx
c000e0a9:	75 12                	jne    c000e0bd <datetimeToSeconds(datetime_t)+0x8e>
c000e0ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e0b1:	bf 90 01 00 00       	mov    edi,0x190
c000e0b6:	99                   	cdq    
c000e0b7:	f7 ff                	idiv   edi
c000e0b9:	85 d2                	test   edx,edx
c000e0bb:	75 01                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e0bd:	41                   	inc    ecx
c000e0be:	66 83 fb 46          	cmp    bx,0x46
c000e0c2:	76 45                	jbe    c000e109 <datetimeToSeconds(datetime_t)+0xda>
c000e0c4:	bb 46 00 00 00       	mov    ebx,0x46
c000e0c9:	bf 64 00 00 00       	mov    edi,0x64
c000e0ce:	bd 90 01 00 00       	mov    ebp,0x190
c000e0d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000e0d8:	f6 c3 03             	test   bl,0x3
c000e0db:	75 23                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0dd:	89 d8                	mov    eax,ebx
c000e0df:	99                   	cdq    
c000e0e0:	f7 ff                	idiv   edi
c000e0e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000e0e7:	85 d2                	test   edx,edx
c000e0e9:	75 15                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e0f1:	99                   	cdq    
c000e0f2:	f7 fd                	idiv   ebp
c000e0f4:	83 fa 01             	cmp    edx,0x1
c000e0f7:	19 c0                	sbb    eax,eax
c000e0f9:	f7 d0                	not    eax
c000e0fb:	05 6e 01 00 00       	add    eax,0x16e
c000e100:	01 c1                	add    ecx,eax
c000e102:	43                   	inc    ebx
c000e103:	39 f3                	cmp    ebx,esi
c000e105:	7c cc                	jl     c000e0d3 <datetimeToSeconds(datetime_t)+0xa4>
c000e107:	eb 35                	jmp    c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e109:	74 33                	je     c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e10b:	b8 45 00 00 00       	mov    eax,0x45
c000e110:	89 c2                	mov    edx,eax
c000e112:	83 e2 03             	and    edx,0x3
c000e115:	39 f0                	cmp    eax,esi
c000e117:	7e 0f                	jle    c000e128 <datetimeToSeconds(datetime_t)+0xf9>
c000e119:	83 fa 01             	cmp    edx,0x1
c000e11c:	19 d2                	sbb    edx,edx
c000e11e:	48                   	dec    eax
c000e11f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e126:	eb e8                	jmp    c000e110 <datetimeToSeconds(datetime_t)+0xe1>
c000e128:	b8 6d 01 00 00       	mov    eax,0x16d
c000e12d:	85 d2                	test   edx,edx
c000e12f:	75 0b                	jne    c000e13c <datetimeToSeconds(datetime_t)+0x10d>
c000e131:	66 83 fb 01          	cmp    bx,0x1
c000e135:	19 c0                	sbb    eax,eax
c000e137:	05 6e 01 00 00       	add    eax,0x16e
c000e13c:	29 c1                	sub    ecx,eax
c000e13e:	b8 80 51 01 00       	mov    eax,0x15180
c000e143:	f7 e9                	imul   ecx
c000e145:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e149:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e14d:	83 c4 14             	add    esp,0x14
c000e150:	5b                   	pop    ebx
c000e151:	5e                   	pop    esi
c000e152:	5f                   	pop    edi
c000e153:	5d                   	pop    ebp
c000e154:	c3                   	ret    
c000e155:	90                   	nop

c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e156:	57                   	push   edi
c000e157:	56                   	push   esi
c000e158:	53                   	push   ebx
c000e159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e15d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e15f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16a:	e8 c0 fe ff ff       	call   c000e02f <datetimeToSeconds(datetime_t)>
c000e16f:	59                   	pop    ecx
c000e170:	0f b6 0d dc 63 02 c0 	movzx  ecx,BYTE PTR ds:0xc00263dc
c000e177:	5b                   	pop    ebx
c000e178:	03 0d e0 63 02 c0    	add    ecx,DWORD PTR ds:0xc00263e0
c000e17e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e184:	89 cb                	mov    ebx,ecx
c000e186:	c1 fb 1f             	sar    ebx,0x1f
c000e189:	29 c8                	sub    eax,ecx
c000e18b:	19 da                	sbb    edx,ebx
c000e18d:	31 c9                	xor    ecx,ecx
c000e18f:	80 3d dd 63 02 c0 00 	cmp    BYTE PTR ds:0xc00263dd,0x0
c000e196:	74 05                	je     c000e19d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e198:	b9 08 07 00 00       	mov    ecx,0x708
c000e19d:	31 db                	xor    ebx,ebx
c000e19f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1a3:	29 c8                	sub    eax,ecx
c000e1a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1a9:	19 da                	sbb    edx,ebx
c000e1ab:	89 f8                	mov    eax,edi
c000e1ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1b1:	5b                   	pop    ebx
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	ff e0                	jmp    eax

c000e1b6 <secondsToDatetime(unsigned long long)>:
c000e1b6:	55                   	push   ebp
c000e1b7:	57                   	push   edi
c000e1b8:	56                   	push   esi
c000e1b9:	53                   	push   ebx
c000e1ba:	83 ec 1c             	sub    esp,0x1c
c000e1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e1c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e1c9:	6a 00                	push   0x0
c000e1cb:	68 80 51 01 00       	push   0x15180
c000e1d0:	55                   	push   ebp
c000e1d1:	57                   	push   edi
c000e1d2:	e8 69 31 01 00       	call   c0021340 <__udivdi3>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e1e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e4:	6a 00                	push   0x0
c000e1e6:	68 80 51 01 00       	push   0x15180
c000e1eb:	55                   	push   ebp
c000e1ec:	57                   	push   edi
c000e1ed:	bf 10 0e 00 00       	mov    edi,0xe10
c000e1f2:	e8 49 32 01 00       	call   c0021440 <__umoddi3>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	bf 3c 00 00 00       	mov    edi,0x3c
c000e202:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e205:	89 d0                	mov    eax,edx
c000e207:	99                   	cdq    
c000e208:	f7 ff                	idiv   edi
c000e20a:	85 db                	test   ebx,ebx
c000e20c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e20f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e212:	79 11                	jns    c000e225 <secondsToDatetime(unsigned long long)+0x6f>
c000e214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e218:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e21e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e223:	eb 07                	jmp    c000e22c <secondsToDatetime(unsigned long long)+0x76>
c000e225:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e22a:	89 d8                	mov    eax,ebx
c000e22c:	bf b4 05 00 00       	mov    edi,0x5b4
c000e231:	99                   	cdq    
c000e232:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e237:	f7 f9                	idiv   ecx
c000e239:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	31 d2                	xor    edx,edx
c000e244:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e24c:	01 c3                	add    ebx,eax
c000e24e:	89 d8                	mov    eax,ebx
c000e250:	f7 f1                	div    ecx
c000e252:	31 d2                	xor    edx,edx
c000e254:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e257:	89 d8                	mov    eax,ebx
c000e259:	f7 f7                	div    edi
c000e25b:	31 d2                	xor    edx,edx
c000e25d:	29 c1                	sub    ecx,eax
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	f7 f5                	div    ebp
c000e263:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e268:	29 c1                	sub    ecx,eax
c000e26a:	31 d2                	xor    edx,edx
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	f7 f5                	div    ebp
c000e270:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e279:	31 d2                	xor    edx,edx
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	f7 f5                	div    ebp
c000e27f:	31 d2                	xor    edx,edx
c000e281:	01 c3                	add    ebx,eax
c000e283:	89 c8                	mov    eax,ecx
c000e285:	f7 f7                	div    edi
c000e287:	bf 99 00 00 00       	mov    edi,0x99
c000e28c:	29 c3                	sub    ebx,eax
c000e28e:	31 d2                	xor    edx,edx
c000e290:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e298:	29 c3                	sub    ebx,eax
c000e29a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e29d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2a0:	bb 05 00 00 00       	mov    ebx,0x5
c000e2a5:	83 c1 02             	add    ecx,0x2
c000e2a8:	89 c8                	mov    eax,ecx
c000e2aa:	f7 f7                	div    edi
c000e2ac:	31 d2                	xor    edx,edx
c000e2ae:	89 c7                	mov    edi,eax
c000e2b0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e2b6:	83 c0 02             	add    eax,0x2
c000e2b9:	f7 f3                	div    ebx
c000e2bb:	89 eb                	mov    ebx,ebp
c000e2bd:	29 c3                	sub    ebx,eax
c000e2bf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e2c5:	88 1e                	mov    BYTE PTR [esi],bl
c000e2c7:	19 c0                	sbb    eax,eax
c000e2c9:	31 d2                	xor    edx,edx
c000e2cb:	83 e0 0c             	and    eax,0xc
c000e2ce:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e2d2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e2da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2de:	83 f9 01             	cmp    ecx,0x1
c000e2e1:	0f 96 c2             	setbe  dl
c000e2e4:	41                   	inc    ecx
c000e2e5:	01 d0                	add    eax,edx
c000e2e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e2ea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e2ee:	83 c4 1c             	add    esp,0x1c
c000e2f1:	89 f0                	mov    eax,esi
c000e2f3:	5b                   	pop    ebx
c000e2f4:	5e                   	pop    esi
c000e2f5:	5f                   	pop    edi
c000e2f6:	5d                   	pop    ebp
c000e2f7:	c2 04 00             	ret    0x4

c000e2fa <Clock::timeInDatetimeLocal()>:
c000e2fa:	53                   	push   ebx
c000e2fb:	83 ec 14             	sub    esp,0x14
c000e2fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	e8 83 fc ff ff       	call   c000df8e <Clock::timeInSecondsLocal()>
c000e30b:	83 c4 0c             	add    esp,0xc
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	53                   	push   ebx
c000e311:	e8 a0 fe ff ff       	call   c000e1b6 <secondsToDatetime(unsigned long long)>
c000e316:	89 d8                	mov    eax,ebx
c000e318:	83 c4 14             	add    esp,0x14
c000e31b:	5b                   	pop    ebx
c000e31c:	c2 04 00             	ret    0x4
c000e31f:	90                   	nop

c000e320 <Device::hibernate()>:
c000e320:	c3                   	ret    
c000e321:	90                   	nop

c000e322 <Device::wake()>:
c000e322:	c3                   	ret    
c000e323:	90                   	nop

c000e324 <Device::detect()>:
c000e324:	c3                   	ret    
c000e325:	90                   	nop

c000e326 <Device::disableLegacy()>:
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <Device::powerSaving(PowerSavingLevel)>:
c000e328:	c3                   	ret    
c000e329:	90                   	nop

c000e32a <DriverlessDevice::close(int, int, void*)>:
c000e32a:	31 c0                	xor    eax,eax
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <DriverlessDevice::detect()>:
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <DriverlessDevice::open(int, int, void*)>:
c000e330:	83 ec 18             	sub    esp,0x18
c000e333:	68 d0 35 02 c0       	push   0xc00235d0
c000e338:	e8 3a 50 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000e33d:	83 c8 ff             	or     eax,0xffffffff
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <Device::~Device()>:
c000e344:	ba 30 36 02 c0       	mov    edx,0xc0023630
c000e349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	90                   	nop
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <Device::~Device()>:
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e359:	e8 e6 ff ff ff       	call   c000e344 <Device::~Device()>
c000e35e:	83 c4 04             	add    esp,0x4
c000e361:	83 ec 08             	sub    esp,0x8
c000e364:	68 58 01 00 00       	push   0x158
c000e369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36d:	e8 72 eb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	83 c4 0c             	add    esp,0xc
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <Device::findAndLoadDriver()>:
c000e37a:	c7 44 24 04 ee 35 02 c0 	mov    DWORD PTR [esp+0x4],0xc00235ee
c000e382:	e9 3e ec ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c000e387:	90                   	nop

c000e388 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e388:	57                   	push   edi
c000e389:	b9 09 00 00 00       	mov    ecx,0x9
c000e38e:	56                   	push   esi
c000e38f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e393:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e397:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3a1:	81 c7 18 01 00 00    	add    edi,0x118
c000e3a7:	fc                   	cld    
c000e3a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3aa:	5e                   	pop    esi
c000e3ab:	5f                   	pop    edi
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop

c000e3ae <Device::preOpenACPI(void*, char*, char*)>:
c000e3ae:	57                   	push   edi
c000e3af:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e3b4:	56                   	push   esi
c000e3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3bd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e3c7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e3cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e3d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e3de:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e3e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3ea:	5e                   	pop    esi
c000e3eb:	5f                   	pop    edi
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e3ee:	53                   	push   ebx
c000e3ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e3ff:	0f b6 c0             	movzx  eax,al
c000e402:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e406:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e40a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e40e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e412:	5b                   	pop    ebx
c000e413:	e9 10 06 00 00       	jmp    c000ea28 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000e418 <Device::getParent()>:
c000e418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e42c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000e431:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e435:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e439:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e43d:	e9 45 07 00 00       	jmp    c000eb87 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000e442 <Device::addChild(Device*)>:
c000e442:	53                   	push   ebx
c000e443:	83 ec 08             	sub    esp,0x8
c000e446:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e44a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e44e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e454:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e45a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e45c:	85 d2                	test   edx,edx
c000e45e:	74 04                	je     c000e464 <Device::addChild(Device*)+0x22>
c000e460:	89 d3                	mov    ebx,edx
c000e462:	eb f6                	jmp    c000e45a <Device::addChild(Device*)+0x18>
c000e464:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	6a 08                	push   0x8
c000e46c:	e8 46 b8 ff ff       	call   c0009cb7 <malloc>
c000e471:	89 03                	mov    DWORD PTR [ebx],eax
c000e473:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e479:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e480:	83 c4 18             	add    esp,0x18
c000e483:	5b                   	pop    ebx
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <Device::removeAllChildren()>:
c000e486:	56                   	push   esi
c000e487:	53                   	push   ebx
c000e488:	52                   	push   edx
c000e489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e48d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e493:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e496:	74 17                	je     c000e4af <Device::removeAllChildren()+0x29>
c000e498:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e49b:	85 c0                	test   eax,eax
c000e49d:	74 0c                	je     c000e4ab <Device::removeAllChildren()+0x25>
c000e49f:	83 ec 0c             	sub    esp,0xc
c000e4a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4a4:	50                   	push   eax
c000e4a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4ad:	eb e4                	jmp    c000e493 <Device::removeAllChildren()+0xd>
c000e4af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4c8:	58                   	pop    eax
c000e4c9:	5b                   	pop    ebx
c000e4ca:	5e                   	pop    esi
c000e4cb:	c3                   	ret    

c000e4cc <Device::hibernateAll()>:
c000e4cc:	53                   	push   ebx
c000e4cd:	83 ec 14             	sub    esp,0x14
c000e4d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4d6:	53                   	push   ebx
c000e4d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e4da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e4e0:	83 c4 10             	add    esp,0x10
c000e4e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4e6:	74 0f                	je     c000e4f7 <Device::hibernateAll()+0x2b>
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e4ee:	e8 d9 ff ff ff       	call   c000e4cc <Device::hibernateAll()>
c000e4f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4f5:	eb e9                	jmp    c000e4e0 <Device::hibernateAll()+0x14>
c000e4f7:	83 c4 08             	add    esp,0x8
c000e4fa:	5b                   	pop    ebx
c000e4fb:	c3                   	ret    

c000e4fc <Device::wakeAll()>:
c000e4fc:	53                   	push   ebx
c000e4fd:	83 ec 14             	sub    esp,0x14
c000e500:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e504:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e506:	53                   	push   ebx
c000e507:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e50a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e510:	83 c4 10             	add    esp,0x10
c000e513:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e516:	74 0f                	je     c000e527 <Device::wakeAll()+0x2b>
c000e518:	83 ec 0c             	sub    esp,0xc
c000e51b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e51e:	e8 d9 ff ff ff       	call   c000e4fc <Device::wakeAll()>
c000e523:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e525:	eb e9                	jmp    c000e510 <Device::wakeAll()+0x14>
c000e527:	83 c4 08             	add    esp,0x8
c000e52a:	5b                   	pop    ebx
c000e52b:	c3                   	ret    

c000e52c <Device::detectAll()>:
c000e52c:	53                   	push   ebx
c000e52d:	83 ec 14             	sub    esp,0x14
c000e530:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e534:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e536:	53                   	push   ebx
c000e537:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e53a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e540:	83 c4 10             	add    esp,0x10
c000e543:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e546:	74 0f                	je     c000e557 <Device::detectAll()+0x2b>
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e54e:	e8 d9 ff ff ff       	call   c000e52c <Device::detectAll()>
c000e553:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e555:	eb e9                	jmp    c000e540 <Device::detectAll()+0x14>
c000e557:	83 c4 08             	add    esp,0x8
c000e55a:	5b                   	pop    ebx
c000e55b:	c3                   	ret    

c000e55c <Device::disableLegacyAll()>:
c000e55c:	53                   	push   ebx
c000e55d:	83 ec 14             	sub    esp,0x14
c000e560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e564:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e566:	53                   	push   ebx
c000e567:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e56a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e570:	83 c4 10             	add    esp,0x10
c000e573:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e576:	74 0f                	je     c000e587 <Device::disableLegacyAll()+0x2b>
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e57e:	e8 d9 ff ff ff       	call   c000e55c <Device::disableLegacyAll()>
c000e583:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e585:	eb e9                	jmp    c000e570 <Device::disableLegacyAll()+0x14>
c000e587:	83 c4 08             	add    esp,0x8
c000e58a:	5b                   	pop    ebx
c000e58b:	c3                   	ret    

c000e58c <Device::loadDriversForAll()>:
c000e58c:	53                   	push   ebx
c000e58d:	83 ec 08             	sub    esp,0x8
c000e590:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e594:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e59b:	75 0c                	jne    c000e5a9 <Device::loadDriversForAll()+0x1d>
c000e59d:	83 ec 0c             	sub    esp,0xc
c000e5a0:	53                   	push   ebx
c000e5a1:	e8 d4 fd ff ff       	call   c000e37a <Device::findAndLoadDriver()>
c000e5a6:	83 c4 10             	add    esp,0x10
c000e5a9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5b2:	74 12                	je     c000e5c6 <Device::loadDriversForAll()+0x3a>
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ba:	e8 cd ff ff ff       	call   c000e58c <Device::loadDriversForAll()>
c000e5bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5c1:	83 c4 10             	add    esp,0x10
c000e5c4:	eb e9                	jmp    c000e5af <Device::loadDriversForAll()+0x23>
c000e5c6:	83 c4 08             	add    esp,0x8
c000e5c9:	5b                   	pop    ebx
c000e5ca:	c3                   	ret    
c000e5cb:	90                   	nop

c000e5cc <Device::closeAll()>:
c000e5cc:	53                   	push   ebx
c000e5cd:	83 ec 08             	sub    esp,0x8
c000e5d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5d6:	6a 00                	push   0x0
c000e5d8:	6a 00                	push   0x0
c000e5da:	6a 00                	push   0x0
c000e5dc:	53                   	push   ebx
c000e5dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e5e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5e6:	83 c4 10             	add    esp,0x10
c000e5e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5ec:	74 0f                	je     c000e5fd <Device::closeAll()+0x31>
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5f4:	e8 d3 ff ff ff       	call   c000e5cc <Device::closeAll()>
c000e5f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5fb:	eb e9                	jmp    c000e5e6 <Device::closeAll()+0x1a>
c000e5fd:	83 c4 08             	add    esp,0x8
c000e600:	5b                   	pop    ebx
c000e601:	c3                   	ret    

c000e602 <Device::powerSavingAll(PowerSavingLevel)>:
c000e602:	56                   	push   esi
c000e603:	53                   	push   ebx
c000e604:	83 ec 0c             	sub    esp,0xc
c000e607:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e60b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e60f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e611:	56                   	push   esi
c000e612:	53                   	push   ebx
c000e613:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e616:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e61c:	83 c4 10             	add    esp,0x10
c000e61f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e622:	74 0f                	je     c000e633 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e624:	52                   	push   edx
c000e625:	52                   	push   edx
c000e626:	56                   	push   esi
c000e627:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e62a:	e8 d3 ff ff ff       	call   c000e602 <Device::powerSavingAll(PowerSavingLevel)>
c000e62f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e631:	eb e9                	jmp    c000e61c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e633:	58                   	pop    eax
c000e634:	5b                   	pop    ebx
c000e635:	5e                   	pop    esi
c000e636:	c3                   	ret    
c000e637:	90                   	nop

c000e638 <Device::setName(char const*)>:
c000e638:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e640:	e9 f3 20 ff ff       	jmp    c0000738 <strcpy>
c000e645:	90                   	nop

c000e646 <Device::Device(char const*)>:
c000e646:	83 ec 1c             	sub    esp,0x1c
c000e649:	ba 30 36 02 c0       	mov    edx,0xc0023630
c000e64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e652:	89 10                	mov    DWORD PTR [eax],edx
c000e654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e658:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e666:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e674:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e682:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e68c:	83 ec 08             	sub    esp,0x8
c000e68f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e697:	e8 9c ff ff ff       	call   c000e638 <Device::setName(char const*)>
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e6a7:	83 ec 0c             	sub    esp,0xc
c000e6aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ae:	e8 04 b6 ff ff       	call   c0009cb7 <malloc>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6c7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e6d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e6e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e6f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e708:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e716:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e724:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e732:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e73c:	90                   	nop
c000e73d:	83 c4 1c             	add    esp,0x1c
c000e740:	c3                   	ret    
c000e741:	90                   	nop

c000e742 <Device::getName()>:
c000e742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e746:	05 d0 00 00 00       	add    eax,0xd0
c000e74b:	c3                   	ret    

c000e74c <DriverlessDevice::DriverlessDevice(char const*)>:
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e753:	83 ec 08             	sub    esp,0x8
c000e756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75a:	50                   	push   eax
c000e75b:	e8 e6 fe ff ff       	call   c000e646 <Device::Device(char const*)>
c000e760:	83 c4 10             	add    esp,0x10
c000e763:	ba 5c 36 02 c0       	mov    edx,0xc002365c
c000e768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76c:	89 10                	mov    DWORD PTR [eax],edx
c000e76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e772:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e77c:	90                   	nop
c000e77d:	83 c4 0c             	add    esp,0xc
c000e780:	c3                   	ret    
c000e781:	90                   	nop

c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e782:	57                   	push   edi
c000e783:	56                   	push   esi
c000e784:	53                   	push   ebx
c000e785:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e789:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e78d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e791:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e797:	75 0c                	jne    c000e7a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e799:	52                   	push   edx
c000e79a:	52                   	push   edx
c000e79b:	53                   	push   ebx
c000e79c:	56                   	push   esi
c000e79d:	e8 50 30 01 00       	call   c00217f2 <LinkedList<Device>::addElement(Device*)>
c000e7a2:	83 c4 10             	add    esp,0x10
c000e7a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7ae:	74 12                	je     c000e7c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e7b0:	50                   	push   eax
c000e7b1:	57                   	push   edi
c000e7b2:	56                   	push   esi
c000e7b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7b6:	e8 c7 ff ff ff       	call   c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7bd:	83 c4 10             	add    esp,0x10
c000e7c0:	eb e9                	jmp    c000e7ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e7c2:	5b                   	pop    ebx
c000e7c3:	5e                   	pop    esi
c000e7c4:	5f                   	pop    edi
c000e7c5:	c3                   	ret    

c000e7c6 <getDevicesOfType(DeviceType)>:
c000e7c6:	53                   	push   ebx
c000e7c7:	83 ec 14             	sub    esp,0x14
c000e7ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ce:	53                   	push   ebx
c000e7cf:	e8 fa 30 01 00       	call   c00218ce <LinkedList<Device>::LinkedList()>
c000e7d4:	83 c4 0c             	add    esp,0xc
c000e7d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7db:	53                   	push   ebx
c000e7dc:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c000e7e2:	e8 9b ff ff ff       	call   c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7e7:	89 d8                	mov    eax,ebx
c000e7e9:	83 c4 18             	add    esp,0x18
c000e7ec:	5b                   	pop    ebx
c000e7ed:	c2 04 00             	ret    0x4

c000e7f0 <HardDiskController::HardDiskController(char const*)>:
c000e7f0:	83 ec 0c             	sub    esp,0xc
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	83 ec 08             	sub    esp,0x8
c000e7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fe:	50                   	push   eax
c000e7ff:	e8 42 fe ff ff       	call   c000e646 <Device::Device(char const*)>
c000e804:	83 c4 10             	add    esp,0x10
c000e807:	ba 88 36 02 c0       	mov    edx,0xc0023688
c000e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e810:	89 10                	mov    DWORD PTR [eax],edx
c000e812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e816:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e820:	90                   	nop
c000e821:	83 c4 0c             	add    esp,0xc
c000e824:	c3                   	ret    
c000e825:	90                   	nop
c000e826:	66 90                	xchg   ax,ax

c000e828 <HardDiskController::~HardDiskController()>:
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	ba 88 36 02 c0       	mov    edx,0xc0023688
c000e830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e834:	89 10                	mov    DWORD PTR [eax],edx
c000e836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83a:	83 ec 0c             	sub    esp,0xc
c000e83d:	50                   	push   eax
c000e83e:	e8 01 fb ff ff       	call   c000e344 <Device::~Device()>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	90                   	nop
c000e847:	83 c4 0c             	add    esp,0xc
c000e84a:	c3                   	ret    
c000e84b:	90                   	nop

c000e84c <HardDiskController::~HardDiskController()>:
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	83 ec 0c             	sub    esp,0xc
c000e852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e856:	e8 cd ff ff ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c000e85b:	83 c4 10             	add    esp,0x10
c000e85e:	83 ec 08             	sub    esp,0x8
c000e861:	68 58 01 00 00       	push   0x158
c000e866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86a:	e8 75 e6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	83 c4 0c             	add    esp,0xc
c000e875:	c3                   	ret    

c000e876 <PhysicalDisk::eject()>:
c000e876:	83 c8 ff             	or     eax,0xffffffff
c000e879:	c3                   	ret    

c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e87a:	83 ec 0c             	sub    esp,0xc
c000e87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e881:	83 ec 08             	sub    esp,0x8
c000e884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e888:	50                   	push   eax
c000e889:	e8 b8 fd ff ff       	call   c000e646 <Device::Device(char const*)>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c000e896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89a:	89 10                	mov    DWORD PTR [eax],edx
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8dc:	90                   	nop
c000e8dd:	83 c4 0c             	add    esp,0xc
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <PhysicalDisk::startCache()>:
c000e8e2:	56                   	push   esi
c000e8e3:	53                   	push   ebx
c000e8e4:	83 ec 10             	sub    esp,0x10
c000e8e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e8eb:	6a 44                	push   0x44
c000e8ed:	e8 c5 b3 ff ff       	call   c0009cb7 <malloc>
c000e8f2:	89 c6                	mov    esi,eax
c000e8f4:	58                   	pop    eax
c000e8f5:	5a                   	pop    edx
c000e8f6:	53                   	push   ebx
c000e8f7:	56                   	push   esi
c000e8f8:	e8 c7 15 00 00       	call   c000fec4 <VCache::VCache(PhysicalDisk*)>
c000e8fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e903:	83 c4 14             	add    esp,0x14
c000e906:	5b                   	pop    ebx
c000e907:	5e                   	pop    esi
c000e908:	c3                   	ret    
c000e909:	90                   	nop

c000e90a <PhysicalDisk::~PhysicalDisk()>:
c000e90a:	83 ec 0c             	sub    esp,0xc
c000e90d:	ba b4 36 02 c0       	mov    edx,0xc00236b4
c000e912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e916:	89 10                	mov    DWORD PTR [eax],edx
c000e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	50                   	push   eax
c000e920:	e8 1f fa ff ff       	call   c000e344 <Device::~Device()>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	90                   	nop
c000e929:	83 c4 0c             	add    esp,0xc
c000e92c:	c3                   	ret    
c000e92d:	90                   	nop

c000e92e <PhysicalDisk::~PhysicalDisk()>:
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	83 ec 0c             	sub    esp,0xc
c000e934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e938:	e8 cd ff ff ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	83 ec 08             	sub    esp,0x8
c000e943:	68 6c 01 00 00       	push   0x16c
c000e948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94c:	e8 93 e5 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	83 c4 0c             	add    esp,0xc
c000e957:	c3                   	ret    

c000e958 <int_handler>:
c000e958:	55                   	push   ebp
c000e959:	57                   	push   edi
c000e95a:	56                   	push   esi
c000e95b:	53                   	push   ebx
c000e95c:	83 ec 0c             	sub    esp,0xc
c000e95f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e963:	80 3d 84 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d84,0x0
c000e96a:	74 0b                	je     c000e977 <int_handler+0x1f>
c000e96c:	fa                   	cli    
c000e96d:	f4                   	hlt    
c000e96e:	80 3d 84 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028d84,0x0
c000e975:	75 f5                	jne    c000e96c <int_handler+0x14>
c000e977:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e97a:	8d 46 e0             	lea    eax,[esi-0x20]
c000e97d:	83 f8 17             	cmp    eax,0x17
c000e980:	76 3e                	jbe    c000e9c0 <int_handler+0x68>
c000e982:	c1 e6 04             	shl    esi,0x4
c000e985:	31 db                	xor    ebx,ebx
c000e987:	8d ae 00 74 02 c0    	lea    ebp,[esi-0x3ffd8c00]
c000e98d:	81 c6 00 64 02 c0    	add    esi,0xc0026400
c000e993:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e997:	85 c0                	test   eax,eax
c000e999:	74 13                	je     c000e9ae <int_handler+0x56>
c000e99b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e99e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e9a2:	74 2a                	je     c000e9ce <int_handler+0x76>
c000e9a4:	83 ec 08             	sub    esp,0x8
c000e9a7:	52                   	push   edx
c000e9a8:	57                   	push   edi
c000e9a9:	ff d0                	call   eax
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	43                   	inc    ebx
c000e9af:	83 fb 04             	cmp    ebx,0x4
c000e9b2:	75 df                	jne    c000e993 <int_handler+0x3b>
c000e9b4:	83 c4 0c             	add    esp,0xc
c000e9b7:	31 c0                	xor    eax,eax
c000e9b9:	5b                   	pop    ebx
c000e9ba:	31 d2                	xor    edx,edx
c000e9bc:	5e                   	pop    esi
c000e9bd:	5f                   	pop    edi
c000e9be:	5d                   	pop    ebp
c000e9bf:	c3                   	ret    
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	50                   	push   eax
c000e9c4:	e8 a3 b6 00 00       	call   c001a06c <Hal::endOfInterrupt(int)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	eb b4                	jmp    c000e982 <int_handler+0x2a>
c000e9ce:	83 ec 08             	sub    esp,0x8
c000e9d1:	52                   	push   edx
c000e9d2:	57                   	push   edi
c000e9d3:	ff d0                	call   eax
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	83 c4 0c             	add    esp,0xc
c000e9db:	5b                   	pop    ebx
c000e9dc:	5e                   	pop    esi
c000e9dd:	5f                   	pop    edi
c000e9de:	5d                   	pop    ebp
c000e9df:	c3                   	ret    

c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e9e0:	56                   	push   esi
c000e9e1:	31 c0                	xor    eax,eax
c000e9e3:	53                   	push   ebx
c000e9e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9ec:	89 ca                	mov    edx,ecx
c000e9ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9f2:	c1 e2 04             	shl    edx,0x4
c000e9f5:	83 bc 82 00 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8c00],0x0
c000e9fd:	74 15                	je     c000ea14 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e9ff:	40                   	inc    eax
c000ea00:	83 f8 04             	cmp    eax,0x4
c000ea03:	75 f0                	jne    c000e9f5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ea05:	c7 44 24 0c e4 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc00236e4
c000ea0d:	5b                   	pop    ebx
c000ea0e:	5e                   	pop    esi
c000ea0f:	e9 63 49 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c000ea14:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ea17:	89 1c 85 00 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c00],ebx
c000ea1e:	89 34 85 00 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c00],esi
c000ea25:	5b                   	pop    ebx
c000ea26:	5e                   	pop    esi
c000ea27:	c3                   	ret    

c000ea28 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea28:	57                   	push   edi
c000ea29:	8b 15 a8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262a8
c000ea2f:	56                   	push   esi
c000ea30:	53                   	push   ebx
c000ea31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea39:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000ea40:	74 55                	je     c000ea97 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000ea42:	89 c7                	mov    edi,eax
c000ea44:	84 c0                	test   al,al
c000ea46:	74 1e                	je     c000ea66 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000ea48:	83 fe 0f             	cmp    esi,0xf
c000ea4b:	0f 8f cc 00 00 00    	jg     c000eb1d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000ea51:	0f b6 b6 c0 59 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda640]
c000ea58:	66 8b bc 36 a0 8b 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd7460]
c000ea60:	66 d1 ef             	shr    di,1
c000ea63:	83 e7 01             	and    edi,0x1
c000ea66:	83 ec 08             	sub    esp,0x8
c000ea69:	31 db                	xor    ebx,ebx
c000ea6b:	ff 35 00 a2 02 c0    	push   DWORD PTR ds:0xc002a200
c000ea71:	68 f1 36 02 c0       	push   0xc00236f1
c000ea76:	e8 4a e5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c000ea83:	85 c0                	test   eax,eax
c000ea85:	7f 51                	jg     c000ead8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000ea87:	83 ec 0c             	sub    esp,0xc
c000ea8a:	68 08 37 02 c0       	push   0xc0023708
c000ea8f:	e8 e3 48 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	8d 4e 20             	lea    ecx,[esi+0x20]
c000ea9a:	31 d2                	xor    edx,edx
c000ea9c:	89 c8                	mov    eax,ecx
c000ea9e:	c1 e0 04             	shl    eax,0x4
c000eaa1:	8b 9c 90 00 74 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd8c00]
c000eaa8:	85 db                	test   ebx,ebx
c000eaaa:	0f 84 84 00 00 00    	je     c000eb34 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000eab0:	42                   	inc    edx
c000eab1:	83 fa 04             	cmp    edx,0x4
c000eab4:	75 eb                	jne    c000eaa1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000eab6:	83 ec 0c             	sub    esp,0xc
c000eab9:	68 5c 37 02 c0       	push   0xc002375c
c000eabe:	e8 b4 48 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000eac3:	83 c4 10             	add    esp,0x10
c000eac6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eacb:	5b                   	pop    ebx
c000eacc:	5e                   	pop    esi
c000eacd:	5f                   	pop    edi
c000eace:	c3                   	ret    
c000eacf:	43                   	inc    ebx
c000ead0:	39 1d 00 a2 02 c0    	cmp    DWORD PTR ds:0xc002a200,ebx
c000ead6:	7e af                	jle    c000ea87 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000ead8:	83 ec 08             	sub    esp,0x8
c000eadb:	56                   	push   esi
c000eadc:	ff 34 9d 20 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5de0]
c000eae3:	e8 20 1f 01 00       	call   c0020a08 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	84 c0                	test   al,al
c000eaed:	74 e0                	je     c000eacf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000eaef:	50                   	push   eax
c000eaf0:	89 f8                	mov    eax,edi
c000eaf2:	0f b6 f8             	movzx  edi,al
c000eaf5:	8d 46 20             	lea    eax,[esi+0x20]
c000eaf8:	57                   	push   edi
c000eaf9:	0f b6 c0             	movzx  eax,al
c000eafc:	6a 00                	push   0x0
c000eafe:	50                   	push   eax
c000eaff:	89 f0                	mov    eax,esi
c000eb01:	6a 00                	push   0x0
c000eb03:	0f b6 c0             	movzx  eax,al
c000eb06:	6a 00                	push   0x0
c000eb08:	50                   	push   eax
c000eb09:	ff 34 9d 20 a2 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5de0]
c000eb10:	e8 6f 20 01 00       	call   c0020b84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000eb15:	83 c4 20             	add    esp,0x20
c000eb18:	e9 7a ff ff ff       	jmp    c000ea97 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000eb1d:	83 ec 0c             	sub    esp,0xc
c000eb20:	31 ff                	xor    edi,edi
c000eb22:	68 24 37 02 c0       	push   0xc0023724
c000eb27:	e8 4b 48 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	e9 32 ff ff ff       	jmp    c000ea66 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000eb34:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000eb37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb3b:	89 14 85 00 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c00],edx
c000eb42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb46:	5b                   	pop    ebx
c000eb47:	89 14 85 00 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9c00],edx
c000eb4e:	89 f0                	mov    eax,esi
c000eb50:	5e                   	pop    esi
c000eb51:	5f                   	pop    edi
c000eb52:	c3                   	ret    

c000eb53 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000eb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000eb5b:	c1 e0 04             	shl    eax,0x4
c000eb5e:	8d 50 10             	lea    edx,[eax+0x10]
c000eb61:	39 88 00 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8c00],ecx
c000eb67:	74 08                	je     c000eb71 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000eb69:	83 c0 04             	add    eax,0x4
c000eb6c:	39 d0                	cmp    eax,edx
c000eb6e:	75 f1                	jne    c000eb61 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000eb70:	c3                   	ret    
c000eb71:	c7 80 00 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c00],0x0
c000eb7b:	c7 80 00 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c00],0x0
c000eb85:	eb e2                	jmp    c000eb69 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000eb87 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eb87:	53                   	push   ebx
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eb8f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eb94:	74 0e                	je     c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000eb96:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c000eb9b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000eba2:	75 37                	jne    c000ebdb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba8:	83 c0 20             	add    eax,0x20
c000ebab:	c1 e0 04             	shl    eax,0x4
c000ebae:	8d 50 10             	lea    edx,[eax+0x10]
c000ebb1:	39 98 00 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8c00],ebx
c000ebb7:	74 0c                	je     c000ebc5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ebb9:	83 c0 04             	add    eax,0x4
c000ebbc:	39 d0                	cmp    eax,edx
c000ebbe:	75 f1                	jne    c000ebb1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ebc0:	83 c4 08             	add    esp,0x8
c000ebc3:	5b                   	pop    ebx
c000ebc4:	c3                   	ret    
c000ebc5:	c7 80 00 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c00],0x0
c000ebcf:	c7 80 00 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c00],0x0
c000ebd9:	eb de                	jmp    c000ebb9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ebdb:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ebe0:	7f 11                	jg     c000ebf3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe6:	0f b6 80 c0 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda640]
c000ebed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ebf1:	eb b1                	jmp    c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ebf3:	83 ec 0c             	sub    esp,0xc
c000ebf6:	68 15 37 02 c0       	push   0xc0023715
c000ebfb:	e8 77 47 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000ec00:	83 c4 10             	add    esp,0x10
c000ec03:	eb 9f                	jmp    c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ec05 <setupINTS()>:
c000ec05:	31 c0                	xor    eax,eax
c000ec07:	c7 80 00 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8c00],0x0
c000ec11:	c7 80 00 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9c00],0x0
c000ec1b:	c7 80 04 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bfc],0x0
c000ec25:	c7 80 04 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bfc],0x0
c000ec2f:	c7 80 08 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bf8],0x0
c000ec39:	c7 80 08 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf8],0x0
c000ec43:	c7 80 0c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bf4],0x0
c000ec4d:	c7 80 0c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf4],0x0
c000ec57:	83 c0 10             	add    eax,0x10
c000ec5a:	3d 00 10 00 00       	cmp    eax,0x1000
c000ec5f:	75 a6                	jne    c000ec07 <setupINTS()+0x2>
c000ec61:	c3                   	ret    

c000ec62 <convertLegacyIRQNumber(int)>:
c000ec62:	83 ec 0c             	sub    esp,0xc
c000ec65:	8b 15 a8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262a8
c000ec6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000ec76:	74 0c                	je     c000ec84 <convertLegacyIRQNumber(int)+0x22>
c000ec78:	83 f8 0f             	cmp    eax,0xf
c000ec7b:	7f 0b                	jg     c000ec88 <convertLegacyIRQNumber(int)+0x26>
c000ec7d:	0f b6 80 c0 59 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda640]
c000ec84:	83 c4 0c             	add    esp,0xc
c000ec87:	c3                   	ret    
c000ec88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	68 24 37 02 c0       	push   0xc0023724
c000ec94:	e8 de 46 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eca0:	83 c4 0c             	add    esp,0xc
c000eca3:	c3                   	ret    

c000eca4 <startGUI(void*)>:
c000eca4:	55                   	push   ebp
c000eca5:	89 e5                	mov    ebp,esp
c000eca7:	53                   	push   ebx
c000eca8:	83 ec 04             	sub    esp,0x4
c000ecab:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ecb0:	48                   	dec    eax
c000ecb1:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000ecb6:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ecbb:	85 c0                	test   eax,eax
c000ecbd:	75 01                	jne    c000ecc0 <startGUI(void*)+0x1c>
c000ecbf:	fb                   	sti    
c000ecc0:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c000ecc6:	83 ec 08             	sub    esp,0x8
c000ecc9:	6a 01                	push   0x1
c000eccb:	68 81 37 02 c0       	push   0xc0023781
c000ecd0:	e8 27 73 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c000ecd5:	83 c4 10             	add    esp,0x10
c000ecd8:	83 ec 08             	sub    esp,0x8
c000ecdb:	53                   	push   ebx
c000ecdc:	50                   	push   eax
c000ecdd:	e8 4b 75 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c000ece2:	83 c4 10             	add    esp,0x10
c000ece5:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c000eceb:	83 ec 08             	sub    esp,0x8
c000ecee:	6a 01                	push   0x1
c000ecf0:	68 9b 37 02 c0       	push   0xc002379b
c000ecf5:	e8 02 73 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	53                   	push   ebx
c000ed01:	50                   	push   eax
c000ed02:	e8 26 75 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	90                   	nop
c000ed0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ed0e:	c9                   	leave  
c000ed0f:	c3                   	ret    

c000ed10 <startGUIVESA(void*)>:
c000ed10:	55                   	push   ebp
c000ed11:	89 e5                	mov    ebp,esp
c000ed13:	53                   	push   ebx
c000ed14:	83 ec 04             	sub    esp,0x4
c000ed17:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ed1c:	48                   	dec    eax
c000ed1d:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000ed22:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ed27:	85 c0                	test   eax,eax
c000ed29:	75 01                	jne    c000ed2c <startGUIVESA(void*)+0x1c>
c000ed2b:	fb                   	sti    
c000ed2c:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c000ed32:	83 ec 08             	sub    esp,0x8
c000ed35:	6a 01                	push   0x1
c000ed37:	68 b9 37 02 c0       	push   0xc00237b9
c000ed3c:	e8 bb 72 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	83 ec 08             	sub    esp,0x8
c000ed47:	53                   	push   ebx
c000ed48:	50                   	push   eax
c000ed49:	e8 df 74 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c000ed57:	83 ec 08             	sub    esp,0x8
c000ed5a:	6a 01                	push   0x1
c000ed5c:	68 9b 37 02 c0       	push   0xc002379b
c000ed61:	e8 96 72 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c000ed66:	83 c4 10             	add    esp,0x10
c000ed69:	83 ec 08             	sub    esp,0x8
c000ed6c:	53                   	push   ebx
c000ed6d:	50                   	push   eax
c000ed6e:	e8 ba 74 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c000ed73:	83 c4 10             	add    esp,0x10
c000ed76:	90                   	nop
c000ed77:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ed7a:	c9                   	leave  
c000ed7b:	c3                   	ret    

c000ed7c <sendKeyToTerminal(unsigned char)>:
c000ed7c:	55                   	push   ebp
c000ed7d:	89 e5                	mov    ebp,esp
c000ed7f:	83 ec 28             	sub    esp,0x28
c000ed82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed85:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ed88:	a1 24 63 02 c0       	mov    eax,ds:0xc0026324
c000ed8d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ed91:	83 ec 08             	sub    esp,0x8
c000ed94:	52                   	push   edx
c000ed95:	50                   	push   eax
c000ed96:	e8 af c6 ff ff       	call   c000b44a <VgaText::receiveKey(unsigned char)>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000eda2:	0f 85 8f 00 00 00    	jne    c000ee37 <sendKeyToTerminal(unsigned char)+0xbb>
c000eda8:	fa                   	cli    
c000eda9:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000edae:	40                   	inc    eax
c000edaf:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000edb4:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c000edb9:	40                   	inc    eax
c000edba:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c000edbf:	a1 00 84 02 c0       	mov    eax,ds:0xc0028400
c000edc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000edc7:	c7 05 00 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028400,0x0
c000edd1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000edd5:	74 1f                	je     c000edf6 <sendKeyToTerminal(unsigned char)+0x7a>
c000edd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000edda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000eddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ede0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ede3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ede6:	83 ec 0c             	sub    esp,0xc
c000ede9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000edec:	e8 a7 80 00 00       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c000edf1:	83 c4 10             	add    esp,0x10
c000edf4:	eb db                	jmp    c000edd1 <sendKeyToTerminal(unsigned char)+0x55>
c000edf6:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c000edfb:	48                   	dec    eax
c000edfc:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c000ee01:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c000ee06:	85 c0                	test   eax,eax
c000ee08:	75 18                	jne    c000ee22 <sendKeyToTerminal(unsigned char)+0xa6>
c000ee0a:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c000ee0f:	85 c0                	test   eax,eax
c000ee11:	74 0f                	je     c000ee22 <sendKeyToTerminal(unsigned char)+0xa6>
c000ee13:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c000ee1d:	e8 ba 7b 00 00       	call   c00169dc <schedule()>
c000ee22:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ee27:	48                   	dec    eax
c000ee28:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000ee2d:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000ee32:	85 c0                	test   eax,eax
c000ee34:	75 01                	jne    c000ee37 <sendKeyToTerminal(unsigned char)+0xbb>
c000ee36:	fb                   	sti    
c000ee37:	90                   	nop
c000ee38:	c9                   	leave  
c000ee39:	c3                   	ret    

c000ee3a <sendKeyboardToken(KeyboardToken)>:
c000ee3a:	55                   	push   ebp
c000ee3b:	89 e5                	mov    ebp,esp
c000ee3d:	83 ec 18             	sub    esp,0x18
c000ee40:	e8 0b 48 00 00       	call   c0013650 <Krnl::userIOReceived()>
c000ee45:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ee48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee4b:	0f b7 c0             	movzx  eax,ax
c000ee4e:	83 f2 01             	xor    edx,0x1
c000ee51:	88 90 20 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7be0],dl
c000ee57:	a1 08 84 02 c0       	mov    eax,ds:0xc0028408
c000ee5c:	85 c0                	test   eax,eax
c000ee5e:	74 24                	je     c000ee84 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ee60:	8b 0d 08 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028408
c000ee66:	83 ec 04             	sub    esp,0x4
c000ee69:	68 20 84 02 c0       	push   0xc0028420
c000ee6e:	83 ec 08             	sub    esp,0x8
c000ee71:	89 e2                	mov    edx,esp
c000ee73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee76:	89 02                	mov    DWORD PTR [edx],eax
c000ee78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ee7b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ee7f:	ff d1                	call   ecx
c000ee81:	83 c4 10             	add    esp,0x10
c000ee84:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ee88:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ee8b:	a0 28 88 02 c0       	mov    al,ds:0xc0028828
c000ee90:	38 c2                	cmp    dl,al
c000ee92:	74 1c                	je     c000eeb0 <sendKeyboardToken(KeyboardToken)+0x76>
c000ee94:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ee97:	a2 28 88 02 c0       	mov    ds:0xc0028828,al
c000ee9c:	a0 28 88 02 c0       	mov    al,ds:0xc0028828
c000eea1:	0f b6 c0             	movzx  eax,al
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	50                   	push   eax
c000eea8:	e8 e9 bb ff ff       	call   c000aa96 <setTerminalScrollLock(bool)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000eeb3:	84 c0                	test   al,al
c000eeb5:	0f 84 ae 00 00 00    	je     c000ef69 <sendKeyboardToken(KeyboardToken)+0x12f>
c000eebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eebe:	66 3d 10 03          	cmp    ax,0x310
c000eec2:	75 06                	jne    c000eeca <sendKeyboardToken(KeyboardToken)+0x90>
c000eec4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000eeca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eecd:	66 3d 11 03          	cmp    ax,0x311
c000eed1:	75 06                	jne    c000eed9 <sendKeyboardToken(KeyboardToken)+0x9f>
c000eed3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000eed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eedc:	66 3d 12 03          	cmp    ax,0x312
c000eee0:	75 06                	jne    c000eee8 <sendKeyboardToken(KeyboardToken)+0xae>
c000eee2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000eee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeeb:	66 3d 13 03          	cmp    ax,0x313
c000eeef:	75 06                	jne    c000eef7 <sendKeyboardToken(KeyboardToken)+0xbd>
c000eef1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000eef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefa:	66 3d 14 03          	cmp    ax,0x314
c000eefe:	75 06                	jne    c000ef06 <sendKeyboardToken(KeyboardToken)+0xcc>
c000ef00:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ef06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef09:	66 3d 15 03          	cmp    ax,0x315
c000ef0d:	75 06                	jne    c000ef15 <sendKeyboardToken(KeyboardToken)+0xdb>
c000ef0f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ef15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef18:	66 3d 16 03          	cmp    ax,0x316
c000ef1c:	75 06                	jne    c000ef24 <sendKeyboardToken(KeyboardToken)+0xea>
c000ef1e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ef24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef27:	66 3d 17 03          	cmp    ax,0x317
c000ef2b:	75 06                	jne    c000ef33 <sendKeyboardToken(KeyboardToken)+0xf9>
c000ef2d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ef33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef36:	66 3d 18 03          	cmp    ax,0x318
c000ef3a:	75 06                	jne    c000ef42 <sendKeyboardToken(KeyboardToken)+0x108>
c000ef3c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ef42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef45:	66 3d 19 03          	cmp    ax,0x319
c000ef49:	75 06                	jne    c000ef51 <sendKeyboardToken(KeyboardToken)+0x117>
c000ef4b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ef51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef54:	66 3d 1a 03          	cmp    ax,0x31a
c000ef58:	0f 85 c9 00 00 00    	jne    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ef5e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ef64:	e9 be 00 00 00       	jmp    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ef69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6c:	66 3d 10 03          	cmp    ax,0x310
c000ef70:	75 0a                	jne    c000ef7c <sendKeyboardToken(KeyboardToken)+0x142>
c000ef72:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ef78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ef7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef7f:	66 3d 11 03          	cmp    ax,0x311
c000ef83:	75 0a                	jne    c000ef8f <sendKeyboardToken(KeyboardToken)+0x155>
c000ef85:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ef8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ef8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef92:	66 3d 12 03          	cmp    ax,0x312
c000ef96:	75 0a                	jne    c000efa2 <sendKeyboardToken(KeyboardToken)+0x168>
c000ef98:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ef9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa5:	66 3d 13 03          	cmp    ax,0x313
c000efa9:	75 0a                	jne    c000efb5 <sendKeyboardToken(KeyboardToken)+0x17b>
c000efab:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000efb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efb8:	66 3d 14 03          	cmp    ax,0x314
c000efbc:	75 0a                	jne    c000efc8 <sendKeyboardToken(KeyboardToken)+0x18e>
c000efbe:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000efc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efcb:	66 3d 15 03          	cmp    ax,0x315
c000efcf:	75 0a                	jne    c000efdb <sendKeyboardToken(KeyboardToken)+0x1a1>
c000efd1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000efd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efde:	66 3d 16 03          	cmp    ax,0x316
c000efe2:	75 0a                	jne    c000efee <sendKeyboardToken(KeyboardToken)+0x1b4>
c000efe4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000efea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff1:	66 3d 17 03          	cmp    ax,0x317
c000eff5:	75 0a                	jne    c000f001 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000eff7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000effd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f004:	66 3d 18 03          	cmp    ax,0x318
c000f008:	75 0a                	jne    c000f014 <sendKeyboardToken(KeyboardToken)+0x1da>
c000f00a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000f010:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f017:	66 3d 19 03          	cmp    ax,0x319
c000f01b:	75 0a                	jne    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000f01d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000f023:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f02a:	66 3d 00 02          	cmp    ax,0x200
c000f02e:	75 2c                	jne    c000f05c <sendKeyboardToken(KeyboardToken)+0x222>
c000f030:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c000f035:	83 f0 01             	xor    eax,0x1
c000f038:	84 c0                	test   al,al
c000f03a:	74 20                	je     c000f05c <sendKeyboardToken(KeyboardToken)+0x222>
c000f03c:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c000f041:	6a 01                	push   0x1
c000f043:	6a 00                	push   0x0
c000f045:	68 a4 ec 00 c0       	push   0xc000eca4
c000f04a:	50                   	push   eax
c000f04b:	e8 70 77 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	c6 05 20 88 02 c0 01 	mov    BYTE PTR ds:0xc0028820,0x1
c000f05a:	eb 33                	jmp    c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f05c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f05f:	66 3d 01 02          	cmp    ax,0x201
c000f063:	75 2a                	jne    c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f065:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c000f06a:	83 f0 01             	xor    eax,0x1
c000f06d:	84 c0                	test   al,al
c000f06f:	74 1e                	je     c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f071:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c000f076:	6a 01                	push   0x1
c000f078:	6a 00                	push   0x0
c000f07a:	68 10 ed 00 c0       	push   0xc000ed10
c000f07f:	50                   	push   eax
c000f080:	e8 3b 77 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	c6 05 20 88 02 c0 01 	mov    BYTE PTR ds:0xc0028820,0x1
c000f08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f092:	66 3d 1d 03          	cmp    ax,0x31d
c000f096:	75 06                	jne    c000f09e <sendKeyboardToken(KeyboardToken)+0x264>
c000f098:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000f09e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a1:	66 3d 1c 03          	cmp    ax,0x31c
c000f0a5:	75 06                	jne    c000f0ad <sendKeyboardToken(KeyboardToken)+0x273>
c000f0a7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000f0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b0:	66 3d 1b 03          	cmp    ax,0x31b
c000f0b4:	75 06                	jne    c000f0bc <sendKeyboardToken(KeyboardToken)+0x282>
c000f0b6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000f0bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bf:	66 3d 1e 03          	cmp    ax,0x31e
c000f0c3:	75 06                	jne    c000f0cb <sendKeyboardToken(KeyboardToken)+0x291>
c000f0c5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000f0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ce:	66 3d 1f 03          	cmp    ax,0x31f
c000f0d2:	75 06                	jne    c000f0da <sendKeyboardToken(KeyboardToken)+0x2a0>
c000f0d4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000f0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0dd:	66 3d 1a 03          	cmp    ax,0x31a
c000f0e1:	75 06                	jne    c000f0e9 <sendKeyboardToken(KeyboardToken)+0x2af>
c000f0e3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000f0e9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000f0ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f0f0:	83 f0 01             	xor    eax,0x1
c000f0f3:	84 c0                	test   al,al
c000f0f5:	74 77                	je     c000f16e <sendKeyboardToken(KeyboardToken)+0x334>
c000f0f7:	a0 21 85 02 c0       	mov    al,ds:0xc0028521
c000f0fc:	84 c0                	test   al,al
c000f0fe:	74 41                	je     c000f141 <sendKeyboardToken(KeyboardToken)+0x307>
c000f100:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f104:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000f108:	74 2b                	je     c000f135 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000f10a:	8b 15 24 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028824
c000f110:	89 d0                	mov    eax,edx
c000f112:	c1 e0 02             	shl    eax,0x2
c000f115:	01 d0                	add    eax,edx
c000f117:	01 c0                	add    eax,eax
c000f119:	a3 24 88 02 c0       	mov    ds:0xc0028824,eax
c000f11e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f121:	0f b7 c0             	movzx  eax,ax
c000f124:	8d 50 d0             	lea    edx,[eax-0x30]
c000f127:	a1 24 88 02 c0       	mov    eax,ds:0xc0028824
c000f12c:	01 d0                	add    eax,edx
c000f12e:	a3 24 88 02 c0       	mov    ds:0xc0028824,eax
c000f133:	eb 6d                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f135:	c7 05 24 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028824,0x0
c000f13f:	eb 61                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f141:	a1 24 88 02 c0       	mov    eax,ds:0xc0028824
c000f146:	85 c0                	test   eax,eax
c000f148:	74 18                	je     c000f162 <sendKeyboardToken(KeyboardToken)+0x328>
c000f14a:	a1 24 88 02 c0       	mov    eax,ds:0xc0028824
c000f14f:	0f b6 c0             	movzx  eax,al
c000f152:	83 ec 0c             	sub    esp,0xc
c000f155:	50                   	push   eax
c000f156:	e8 21 fc ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f15b:	83 c4 10             	add    esp,0x10
c000f15e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f162:	c7 05 24 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028824,0x0
c000f16c:	eb 34                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f171:	66 3d 01 01          	cmp    ax,0x101
c000f175:	75 2b                	jne    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f177:	a1 24 88 02 c0       	mov    eax,ds:0xc0028824
c000f17c:	85 c0                	test   eax,eax
c000f17e:	74 18                	je     c000f198 <sendKeyboardToken(KeyboardToken)+0x35e>
c000f180:	a1 24 88 02 c0       	mov    eax,ds:0xc0028824
c000f185:	0f b6 c0             	movzx  eax,al
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	50                   	push   eax
c000f18c:	e8 eb fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f191:	83 c4 10             	add    esp,0x10
c000f194:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f198:	c7 05 24 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028824,0x0
c000f1a2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f1a5:	83 f0 01             	xor    eax,0x1
c000f1a8:	84 c0                	test   al,al
c000f1aa:	74 4c                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f1af:	83 f0 01             	xor    eax,0x1
c000f1b2:	84 c0                	test   al,al
c000f1b4:	74 42                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1b6:	a0 20 85 02 c0       	mov    al,ds:0xc0028520
c000f1bb:	83 f0 01             	xor    eax,0x1
c000f1be:	84 c0                	test   al,al
c000f1c0:	74 36                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c5:	66 83 f8 1f          	cmp    ax,0x1f
c000f1c9:	76 09                	jbe    c000f1d4 <sendKeyboardToken(KeyboardToken)+0x39a>
c000f1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ce:	66 83 f8 7e          	cmp    ax,0x7e
c000f1d2:	76 12                	jbe    c000f1e6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f1d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d7:	66 83 f8 0a          	cmp    ax,0xa
c000f1db:	74 09                	je     c000f1e6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e0:	66 83 f8 08          	cmp    ax,0x8
c000f1e4:	75 12                	jne    c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e9:	0f b6 c0             	movzx  eax,al
c000f1ec:	83 ec 0c             	sub    esp,0xc
c000f1ef:	50                   	push   eax
c000f1f0:	e8 87 fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f1f5:	83 c4 10             	add    esp,0x10
c000f1f8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f1fb:	83 f0 01             	xor    eax,0x1
c000f1fe:	84 c0                	test   al,al
c000f200:	74 4f                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f202:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f205:	83 f0 01             	xor    eax,0x1
c000f208:	84 c0                	test   al,al
c000f20a:	74 45                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f20c:	a0 20 85 02 c0       	mov    al,ds:0xc0028520
c000f211:	84 c0                	test   al,al
c000f213:	74 3c                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f218:	66 83 f8 3f          	cmp    ax,0x3f
c000f21c:	76 33                	jbe    c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f221:	66 83 f8 7f          	cmp    ax,0x7f
c000f225:	77 2a                	ja     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22a:	88 c2                	mov    dl,al
c000f22c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22f:	66 83 f8 5f          	cmp    ax,0x5f
c000f233:	76 04                	jbe    c000f239 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000f235:	b0 20                	mov    al,0x20
c000f237:	eb 02                	jmp    c000f23b <sendKeyboardToken(KeyboardToken)+0x401>
c000f239:	b0 00                	mov    al,0x0
c000f23b:	29 c2                	sub    edx,eax
c000f23d:	88 d0                	mov    al,dl
c000f23f:	83 e8 40             	sub    eax,0x40
c000f242:	0f b6 c0             	movzx  eax,al
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	50                   	push   eax
c000f249:	e8 2e fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f24e:	83 c4 10             	add    esp,0x10
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	66 3d 00 03          	cmp    ax,0x300
c000f258:	75 0f                	jne    c000f269 <sendKeyboardToken(KeyboardToken)+0x42f>
c000f25a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f25d:	83 f0 01             	xor    eax,0x1
c000f260:	84 c0                	test   al,al
c000f262:	74 05                	je     c000f269 <sendKeyboardToken(KeyboardToken)+0x42f>
c000f264:	e8 9e bb ff ff       	call   c000ae07 <doTerminalCycle()>
c000f269:	90                   	nop
c000f26a:	c9                   	leave  
c000f26b:	c3                   	ret    

c000f26c <clearInternalKeybuffer(VgaText*)>:
c000f26c:	55                   	push   ebp
c000f26d:	89 e5                	mov    ebp,esp
c000f26f:	83 ec 08             	sub    esp,0x8
c000f272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f275:	05 32 01 00 00       	add    eax,0x132
c000f27a:	83 ec 0c             	sub    esp,0xc
c000f27d:	50                   	push   eax
c000f27e:	e8 15 14 ff ff       	call   c0000698 <strlen>
c000f283:	83 c4 10             	add    esp,0x10
c000f286:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f289:	81 c2 32 01 00 00    	add    edx,0x132
c000f28f:	83 ec 04             	sub    esp,0x4
c000f292:	50                   	push   eax
c000f293:	6a 00                	push   0x0
c000f295:	52                   	push   edx
c000f296:	e8 e1 13 ff ff       	call   c000067c <memset>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	90                   	nop
c000f29f:	c9                   	leave  
c000f2a0:	c3                   	ret    

c000f2a1 <readKeyboard(VgaText*, char*, unsigned long)>:
c000f2a1:	55                   	push   ebp
c000f2a2:	89 e5                	mov    ebp,esp
c000f2a4:	83 ec 18             	sub    esp,0x18
c000f2a7:	a1 08 84 02 c0       	mov    eax,ds:0xc0028408
c000f2ac:	85 c0                	test   eax,eax
c000f2ae:	74 2a                	je     c000f2da <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000f2b0:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000f2b6:	8b 0d 08 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028408
c000f2bc:	83 ec 04             	sub    esp,0x4
c000f2bf:	68 20 84 02 c0       	push   0xc0028420
c000f2c4:	83 ec 08             	sub    esp,0x8
c000f2c7:	89 e2                	mov    edx,esp
c000f2c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f2cc:	89 02                	mov    DWORD PTR [edx],eax
c000f2ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2d1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f2d5:	ff d1                	call   ecx
c000f2d7:	83 c4 10             	add    esp,0x10
c000f2da:	fb                   	sti    
c000f2db:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000f2e2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000f2e6:	0f 84 a1 00 00 00    	je     c000f38d <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000f2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ef:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f2f5:	84 c0                	test   al,al
c000f2f7:	75 28                	jne    c000f321 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000f2f9:	fa                   	cli    
c000f2fa:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000f2ff:	40                   	inc    eax
c000f300:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000f305:	e8 d2 76 00 00       	call   c00169dc <schedule()>
c000f30a:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000f30f:	48                   	dec    eax
c000f310:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000f315:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000f31a:	85 c0                	test   eax,eax
c000f31c:	75 ce                	jne    c000f2ec <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f31e:	fb                   	sti    
c000f31f:	eb cb                	jmp    c000f2ec <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f321:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f324:	8d 50 01             	lea    edx,[eax+0x1]
c000f327:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000f32a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f32d:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000f333:	88 10                	mov    BYTE PTR [eax],dl
c000f335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f338:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f33e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000f341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f344:	05 32 01 00 00       	add    eax,0x132
c000f349:	83 ec 0c             	sub    esp,0xc
c000f34c:	50                   	push   eax
c000f34d:	e8 46 13 ff ff       	call   c0000698 <strlen>
c000f352:	83 c4 10             	add    esp,0x10
c000f355:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f358:	81 c2 32 01 00 00    	add    edx,0x132
c000f35e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f361:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f364:	81 c2 32 01 00 00    	add    edx,0x132
c000f36a:	83 ec 04             	sub    esp,0x4
c000f36d:	50                   	push   eax
c000f36e:	51                   	push   ecx
c000f36f:	52                   	push   edx
c000f370:	e8 3f 12 ff ff       	call   c00005b4 <memmove>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000f37b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f37e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000f382:	0f 85 5a ff ff ff    	jne    c000f2e2 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000f388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f38b:	eb 03                	jmp    c000f390 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000f38d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f390:	c9                   	leave  
c000f391:	c3                   	ret    

c000f392 <Keyboard::Keyboard(char const*)>:
c000f392:	83 ec 0c             	sub    esp,0xc
c000f395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f399:	83 ec 08             	sub    esp,0x8
c000f39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3a0:	50                   	push   eax
c000f3a1:	e8 a0 f2 ff ff       	call   c000e646 <Device::Device(char const*)>
c000f3a6:	83 c4 10             	add    esp,0x10
c000f3a9:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c000f3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b2:	89 10                	mov    DWORD PTR [eax],edx
c000f3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000f3c2:	c6 05 04 84 02 c0 01 	mov    BYTE PTR ds:0xc0028404,0x1
c000f3c9:	90                   	nop
c000f3ca:	83 c4 0c             	add    esp,0xc
c000f3cd:	c3                   	ret    

c000f3ce <Keyboard::~Keyboard()>:
c000f3ce:	83 ec 0c             	sub    esp,0xc
c000f3d1:	ba dc 37 02 c0       	mov    edx,0xc00237dc
c000f3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3da:	89 10                	mov    DWORD PTR [eax],edx
c000f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e0:	83 ec 0c             	sub    esp,0xc
c000f3e3:	50                   	push   eax
c000f3e4:	e8 5b ef ff ff       	call   c000e344 <Device::~Device()>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	90                   	nop
c000f3ed:	83 c4 0c             	add    esp,0xc
c000f3f0:	c3                   	ret    
c000f3f1:	90                   	nop

c000f3f2 <Keyboard::~Keyboard()>:
c000f3f2:	83 ec 0c             	sub    esp,0xc
c000f3f5:	83 ec 0c             	sub    esp,0xc
c000f3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3fc:	e8 cd ff ff ff       	call   c000f3ce <Keyboard::~Keyboard()>
c000f401:	83 c4 10             	add    esp,0x10
c000f404:	83 ec 08             	sub    esp,0x8
c000f407:	68 5c 01 00 00       	push   0x15c
c000f40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f410:	e8 cf da ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	83 c4 0c             	add    esp,0xc
c000f41b:	c3                   	ret    

c000f41c <LogicalDisk::close(int, int, void*)>:
c000f41c:	83 c8 ff             	or     eax,0xffffffff
c000f41f:	c3                   	ret    

c000f420 <LogicalDisk::~LogicalDisk()>:
c000f420:	83 ec 0c             	sub    esp,0xc
c000f423:	ba ac 38 02 c0       	mov    edx,0xc00238ac
c000f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42c:	89 10                	mov    DWORD PTR [eax],edx
c000f42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f432:	83 ec 0c             	sub    esp,0xc
c000f435:	50                   	push   eax
c000f436:	e8 09 ef ff ff       	call   c000e344 <Device::~Device()>
c000f43b:	83 c4 10             	add    esp,0x10
c000f43e:	90                   	nop
c000f43f:	83 c4 0c             	add    esp,0xc
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <LogicalDisk::~LogicalDisk()>:
c000f444:	83 ec 0c             	sub    esp,0xc
c000f447:	83 ec 0c             	sub    esp,0xc
c000f44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f44e:	e8 cd ff ff ff       	call   c000f420 <LogicalDisk::~LogicalDisk()>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	83 ec 08             	sub    esp,0x8
c000f459:	68 74 01 00 00       	push   0x174
c000f45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f462:	e8 7d da ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	83 c4 0c             	add    esp,0xc
c000f46d:	c3                   	ret    

c000f46e <LogicalDisk::open(int, int, void*)>:
c000f46e:	83 ec 18             	sub    esp,0x18
c000f471:	68 08 38 02 c0       	push   0xc0023808
c000f476:	e8 fc 3e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c000f47b:	83 c8 ff             	or     eax,0xffffffff
c000f47e:	83 c4 1c             	add    esp,0x1c
c000f481:	c3                   	ret    

c000f482 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000f482:	53                   	push   ebx
c000f483:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f48b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f48f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000f495:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000f49b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000f4a1:	77 10                	ja     c000f4b3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000f4a3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000f4a9:	89 d3                	mov    ebx,edx
c000f4ab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000f4b1:	72 05                	jb     c000f4b8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000f4b3:	83 c8 ff             	or     eax,0xffffffff
c000f4b6:	89 c2                	mov    edx,eax
c000f4b8:	5b                   	pop    ebx
c000f4b9:	c3                   	ret    

c000f4ba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000f4ba:	56                   	push   esi
c000f4bb:	83 c8 ff             	or     eax,0xffffffff
c000f4be:	53                   	push   ebx
c000f4bf:	89 c2                	mov    edx,eax
c000f4c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f4c5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f4c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f4cd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f4d3:	77 27                	ja     c000f4fc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f4d5:	89 d8                	mov    eax,ebx
c000f4d7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000f4dd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000f4e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e8:	89 c2                	mov    edx,eax
c000f4ea:	73 10                	jae    c000f4fc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f4ec:	89 c8                	mov    eax,ecx
c000f4ee:	89 da                	mov    edx,ebx
c000f4f0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000f4f6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000f4fc:	5b                   	pop    ebx
c000f4fd:	5e                   	pop    esi
c000f4fe:	c3                   	ret    
c000f4ff:	90                   	nop

c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f500:	83 ec 1c             	sub    esp,0x1c
c000f503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f50b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f50f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f513:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f517:	89 04 24             	mov    DWORD PTR [esp],eax
c000f51a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f51e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f526:	83 ec 08             	sub    esp,0x8
c000f529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f52d:	50                   	push   eax
c000f52e:	e8 13 f1 ff ff       	call   c000e646 <Device::Device(char const*)>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	ba ac 38 02 c0       	mov    edx,0xc00238ac
c000f53b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f53f:	89 10                	mov    DWORD PTR [eax],edx
c000f541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f545:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f550:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f55b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000f565:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f56d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f571:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000f577:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000f57d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f581:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f584:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f588:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000f58e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000f594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f59c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000f5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5a6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f5b0:	90                   	nop
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    
c000f5b5:	90                   	nop

c000f5b6 <LogicalDisk::assignDriveLetter()>:
c000f5b6:	55                   	push   ebp
c000f5b7:	57                   	push   edi
c000f5b8:	56                   	push   esi
c000f5b9:	53                   	push   ebx
c000f5ba:	83 ec 14             	sub    esp,0x14
c000f5bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5c1:	8b 3d 40 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028840
c000f5c7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000f5cd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f5d1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000f5d7:	8b 3d 44 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028844
c000f5dd:	3c 01                	cmp    al,0x1
c000f5df:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000f5e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f5e7:	19 c0                	sbb    eax,eax
c000f5e9:	83 e0 02             	and    eax,0x2
c000f5ec:	83 c0 41             	add    eax,0x41
c000f5ef:	0f be e8             	movsx  ebp,al
c000f5f2:	3c 43                	cmp    al,0x43
c000f5f4:	75 10                	jne    c000f606 <LogicalDisk::assignDriveLetter()+0x50>
c000f5f6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000f5fd:	75 5d                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f5ff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000f604:	75 56                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f606:	8d 75 bf             	lea    esi,[ebp-0x41]
c000f609:	ba 01 00 00 00       	mov    edx,0x1
c000f60e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f612:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f616:	d3 e2                	shl    edx,cl
c000f618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f61c:	89 d7                	mov    edi,edx
c000f61e:	89 d6                	mov    esi,edx
c000f620:	c1 ff 1f             	sar    edi,0x1f
c000f623:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000f627:	21 f9                	and    ecx,edi
c000f629:	09 d1                	or     ecx,edx
c000f62b:	75 2f                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f62d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000f631:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f635:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000f63b:	09 f2                	or     edx,esi
c000f63d:	89 15 40 88 02 c0    	mov    DWORD PTR ds:0xc0028840,edx
c000f643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f647:	09 fa                	or     edx,edi
c000f649:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f64d:	89 15 44 88 02 c0    	mov    DWORD PTR ds:0xc0028844,edx
c000f653:	89 1c bd 60 88 02 c0 	mov    DWORD PTR [edi*4-0x3ffd77a0],ebx
c000f65a:	eb 08                	jmp    c000f664 <LogicalDisk::assignDriveLetter()+0xae>
c000f65c:	45                   	inc    ebp
c000f65d:	40                   	inc    eax
c000f65e:	3c 5b                	cmp    al,0x5b
c000f660:	75 90                	jne    c000f5f2 <LogicalDisk::assignDriveLetter()+0x3c>
c000f662:	31 c0                	xor    eax,eax
c000f664:	83 c4 14             	add    esp,0x14
c000f667:	5b                   	pop    ebx
c000f668:	5e                   	pop    esi
c000f669:	5f                   	pop    edi
c000f66a:	5d                   	pop    ebp
c000f66b:	c3                   	ret    

c000f66c <LogicalDisk::mount()>:
c000f66c:	56                   	push   esi
c000f66d:	53                   	push   ebx
c000f66e:	83 ec 1c             	sub    esp,0x1c
c000f671:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f675:	8b 1d d8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d8
c000f67b:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f682:	50                   	push   eax
c000f683:	68 2c 38 02 c0       	push   0xc002382c
c000f688:	e8 38 d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f68d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000f697:	83 c4 10             	add    esp,0x10
c000f69a:	85 db                	test   ebx,ebx
c000f69c:	74 4e                	je     c000f6ec <LogicalDisk::mount()+0x80>
c000f69e:	83 ec 0c             	sub    esp,0xc
c000f6a1:	68 4d 38 02 c0       	push   0xc002384d
c000f6a6:	e8 1a d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f6ab:	83 c4 0c             	add    esp,0xc
c000f6ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f6b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f6b7:	83 e8 41             	sub    eax,0x41
c000f6ba:	50                   	push   eax
c000f6bb:	56                   	push   esi
c000f6bc:	53                   	push   ebx
c000f6bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f6c0:	83 c4 10             	add    esp,0x10
c000f6c3:	84 c0                	test   al,al
c000f6c5:	74 20                	je     c000f6e7 <LogicalDisk::mount()+0x7b>
c000f6c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f6cb:	83 ec 0c             	sub    esp,0xc
c000f6ce:	68 69 38 02 c0       	push   0xc0023869
c000f6d3:	e8 ed d8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000f6e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f6e5:	eb 07                	jmp    c000f6ee <LogicalDisk::mount()+0x82>
c000f6e7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f6ea:	eb ae                	jmp    c000f69a <LogicalDisk::mount()+0x2e>
c000f6ec:	31 c0                	xor    eax,eax
c000f6ee:	83 c4 14             	add    esp,0x14
c000f6f1:	5b                   	pop    ebx
c000f6f2:	5e                   	pop    esi
c000f6f3:	c3                   	ret    

c000f6f4 <LogicalDisk::unmount()>:
c000f6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f702:	c3                   	ret    
c000f703:	90                   	nop

c000f704 <LogicalDisk::eject()>:
c000f704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f708:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000f70e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f714:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000f717:	90                   	nop

c000f718 <LogicalDisk::unassignDriveLetter()>:
c000f718:	57                   	push   edi
c000f719:	56                   	push   esi
c000f71a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f71e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000f725:	84 c9                	test   cl,cl
c000f727:	75 0f                	jne    c000f738 <LogicalDisk::unassignDriveLetter()+0x20>
c000f729:	c7 44 24 0c 82 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023882
c000f731:	5e                   	pop    esi
c000f732:	5f                   	pop    edi
c000f733:	e9 3f 3c 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c000f738:	83 e9 41             	sub    ecx,0x41
c000f73b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000f742:	b8 01 00 00 00       	mov    eax,0x1
c000f747:	c7 04 8d 60 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd77a0],0x0
c000f752:	d3 e0                	shl    eax,cl
c000f754:	89 c7                	mov    edi,eax
c000f756:	f7 d0                	not    eax
c000f758:	c1 ff 1f             	sar    edi,0x1f
c000f75b:	21 05 40 88 02 c0    	and    DWORD PTR ds:0xc0028840,eax
c000f761:	89 fe                	mov    esi,edi
c000f763:	f7 d6                	not    esi
c000f765:	21 35 44 88 02 c0    	and    DWORD PTR ds:0xc0028844,esi
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	c3                   	ret    

c000f76e <LogicalDisk::read(unsigned long long, int, void*)>:
c000f76e:	57                   	push   edi
c000f76f:	56                   	push   esi
c000f770:	53                   	push   ebx
c000f771:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f787:	77 41                	ja     c000f7ca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000f789:	99                   	cdq    
c000f78a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f790:	01 c8                	add    eax,ecx
c000f792:	11 da                	adc    edx,ebx
c000f794:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f79a:	19 d7                	sbb    edi,edx
c000f79c:	72 33                	jb     c000f7d1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000f79e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f7a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f7ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f7b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f7b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	5f                   	pop    edi
c000f7c5:	e9 34 0a 00 00       	jmp    c00101fe <VCache::read(unsigned long long, int, void*)>
c000f7ca:	b8 05 00 00 00       	mov    eax,0x5
c000f7cf:	eb 05                	jmp    c000f7d6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000f7d1:	b8 07 00 00 00       	mov    eax,0x7
c000f7d6:	5b                   	pop    ebx
c000f7d7:	5e                   	pop    esi
c000f7d8:	5f                   	pop    edi
c000f7d9:	c3                   	ret    

c000f7da <LogicalDisk::write(unsigned long long, int, void*)>:
c000f7da:	57                   	push   edi
c000f7db:	56                   	push   esi
c000f7dc:	53                   	push   ebx
c000f7dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f7f3:	77 41                	ja     c000f836 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000f7f5:	99                   	cdq    
c000f7f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f7fc:	01 c8                	add    eax,ecx
c000f7fe:	11 da                	adc    edx,ebx
c000f800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f806:	19 d7                	sbb    edi,edx
c000f808:	72 33                	jb     c000f83d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000f80a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f81a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f81e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f82a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f82e:	5b                   	pop    ebx
c000f82f:	5e                   	pop    esi
c000f830:	5f                   	pop    edi
c000f831:	e9 ce 08 00 00       	jmp    c0010104 <VCache::write(unsigned long long, int, void*)>
c000f836:	b8 05 00 00 00       	mov    eax,0x5
c000f83b:	eb 05                	jmp    c000f842 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000f83d:	b8 07 00 00 00       	mov    eax,0x7
c000f842:	5b                   	pop    ebx
c000f843:	5e                   	pop    esi
c000f844:	5f                   	pop    edi
c000f845:	c3                   	ret    
c000f846:	66 90                	xchg   ax,ax

c000f848 <Mouse::Mouse(char const*)>:
c000f848:	83 ec 0c             	sub    esp,0xc
c000f84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f84f:	83 ec 08             	sub    esp,0x8
c000f852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f856:	50                   	push   eax
c000f857:	e8 ea ed ff ff       	call   c000e646 <Device::Device(char const*)>
c000f85c:	83 c4 10             	add    esp,0x10
c000f85f:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c000f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f868:	89 10                	mov    DWORD PTR [eax],edx
c000f86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000f878:	90                   	nop
c000f879:	83 c4 0c             	add    esp,0xc
c000f87c:	c3                   	ret    
c000f87d:	90                   	nop
c000f87e:	66 90                	xchg   ax,ax

c000f880 <Mouse::~Mouse()>:
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	ba d8 38 02 c0       	mov    edx,0xc00238d8
c000f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88c:	89 10                	mov    DWORD PTR [eax],edx
c000f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f892:	83 ec 0c             	sub    esp,0xc
c000f895:	50                   	push   eax
c000f896:	e8 a9 ea ff ff       	call   c000e344 <Device::~Device()>
c000f89b:	83 c4 10             	add    esp,0x10
c000f89e:	90                   	nop
c000f89f:	83 c4 0c             	add    esp,0xc
c000f8a2:	c3                   	ret    
c000f8a3:	90                   	nop

c000f8a4 <Mouse::~Mouse()>:
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	83 ec 0c             	sub    esp,0xc
c000f8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ae:	e8 cd ff ff ff       	call   c000f880 <Mouse::~Mouse()>
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	83 ec 08             	sub    esp,0x8
c000f8b9:	68 58 01 00 00       	push   0x158
c000f8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c2:	e8 1d d6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f8c7:	83 c4 10             	add    esp,0x10
c000f8ca:	83 c4 0c             	add    esp,0xc
c000f8cd:	c3                   	ret    

c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f8ce:	55                   	push   ebp
c000f8cf:	57                   	push   edi
c000f8d0:	56                   	push   esi
c000f8d1:	53                   	push   ebx
c000f8d2:	81 ec 28 01 00 00    	sub    esp,0x128
c000f8d8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f8df:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f8e6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f8ed:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f8f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f8fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f903:	e8 3a ee ff ff       	call   c000e742 <Device::getName()>
c000f908:	5a                   	pop    edx
c000f909:	59                   	pop    ecx
c000f90a:	50                   	push   eax
c000f90b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f90f:	55                   	push   ebp
c000f910:	e8 23 0e ff ff       	call   c0000738 <strcpy>
c000f915:	5b                   	pop    ebx
c000f916:	58                   	pop    eax
c000f917:	68 fc 38 02 c0       	push   0xc00238fc
c000f91c:	55                   	push   ebp
c000f91d:	e8 56 0f ff ff       	call   c0000878 <strcat>
c000f922:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f929:	e8 89 a3 ff ff       	call   c0009cb7 <malloc>
c000f92e:	83 c4 0c             	add    esp,0xc
c000f931:	89 c3                	mov    ebx,eax
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f93d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f944:	55                   	push   ebp
c000f945:	50                   	push   eax
c000f946:	e8 b5 fb ff ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f94b:	83 c4 14             	add    esp,0x14
c000f94e:	53                   	push   ebx
c000f94f:	e8 62 fc ff ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c000f954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f957:	e8 10 fd ff ff       	call   c000f66c <LogicalDisk::mount()>
c000f95c:	58                   	pop    eax
c000f95d:	5a                   	pop    edx
c000f95e:	53                   	push   ebx
c000f95f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f966:	e8 d7 ea ff ff       	call   c000e442 <Device::addChild(Device*)>
c000f96b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f971:	5b                   	pop    ebx
c000f972:	5e                   	pop    esi
c000f973:	5f                   	pop    edi
c000f974:	5d                   	pop    ebp
c000f975:	c3                   	ret    

c000f976 <createPartitionsForDisk(PhysicalDisk*)>:
c000f976:	55                   	push   ebp
c000f977:	57                   	push   edi
c000f978:	56                   	push   esi
c000f979:	53                   	push   ebx
c000f97a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f980:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f987:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f98d:	3d 00 02 00 00       	cmp    eax,0x200
c000f992:	74 27                	je     c000f9bb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f994:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f99a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f9a0:	83 ec 10             	sub    esp,0x10
c000f9a3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f9a7:	99                   	cdq    
c000f9a8:	c1 e6 0a             	shl    esi,0xa
c000f9ab:	52                   	push   edx
c000f9ac:	89 fd                	mov    ebp,edi
c000f9ae:	50                   	push   eax
c000f9af:	55                   	push   ebp
c000f9b0:	56                   	push   esi
c000f9b1:	e8 8a 19 01 00       	call   c0021340 <__udivdi3>
c000f9b6:	e9 b1 00 00 00       	jmp    c000fa6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9c0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f9c4:	56                   	push   esi
c000f9c5:	6a 01                	push   0x1
c000f9c7:	6a 00                	push   0x0
c000f9c9:	6a 00                	push   0x0
c000f9cb:	53                   	push   ebx
c000f9cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f9cf:	83 c4 20             	add    esp,0x20
c000f9d2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f9da:	75 0a                	jne    c000f9e6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f9dc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f9e4:	74 2c                	je     c000fa12 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f9e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f9ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f9f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f9f8:	83 ec 10             	sub    esp,0x10
c000f9fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f9ff:	89 f7                	mov    edi,esi
c000fa01:	c1 e0 0a             	shl    eax,0xa
c000fa04:	c1 ff 1f             	sar    edi,0x1f
c000fa07:	57                   	push   edi
c000fa08:	56                   	push   esi
c000fa09:	52                   	push   edx
c000fa0a:	50                   	push   eax
c000fa0b:	e8 30 19 01 00       	call   c0021340 <__udivdi3>
c000fa10:	eb 5a                	jmp    c000fa6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000fa12:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000fa19:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000fa20:	83 e1 7f             	and    ecx,0x7f
c000fa23:	83 e0 7f             	and    eax,0x7f
c000fa26:	01 c1                	add    ecx,eax
c000fa28:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000fa2f:	83 e0 7f             	and    eax,0x7f
c000fa32:	01 c1                	add    ecx,eax
c000fa34:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000fa3b:	83 e0 7f             	and    eax,0x7f
c000fa3e:	00 c1                	add    cl,al
c000fa40:	74 41                	je     c000fa83 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000fa42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fa48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fa4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fa54:	83 ec 10             	sub    esp,0x10
c000fa57:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fa5b:	89 f7                	mov    edi,esi
c000fa5d:	c1 e0 0a             	shl    eax,0xa
c000fa60:	c1 ff 1f             	sar    edi,0x1f
c000fa63:	57                   	push   edi
c000fa64:	56                   	push   esi
c000fa65:	52                   	push   edx
c000fa66:	50                   	push   eax
c000fa67:	e8 d4 18 01 00       	call   c0021340 <__udivdi3>
c000fa6c:	83 c4 14             	add    esp,0x14
c000fa6f:	52                   	push   edx
c000fa70:	50                   	push   eax
c000fa71:	6a 00                	push   0x0
c000fa73:	6a 00                	push   0x0
c000fa75:	53                   	push   ebx
c000fa76:	e8 53 fe ff ff       	call   c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fa7b:	83 c4 20             	add    esp,0x20
c000fa7e:	e9 79 01 00 00       	jmp    c000fbfc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000fa83:	89 f0                	mov    eax,esi
c000fa85:	31 f6                	xor    esi,esi
c000fa87:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000fa8e:	75 02                	jne    c000fa92 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000fa90:	89 f1                	mov    ecx,esi
c000fa92:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000fa99:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000faa0:	c1 e2 08             	shl    edx,0x8
c000faa3:	c1 e7 10             	shl    edi,0x10
c000faa6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000faae:	09 fa                	or     edx,edi
c000fab0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000fab8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000fabf:	83 c0 10             	add    eax,0x10
c000fac2:	09 fa                	or     edx,edi
c000fac4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000facb:	c1 e7 18             	shl    edi,0x18
c000face:	09 fa                	or     edx,edi
c000fad0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000fad7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000fadb:	c1 e7 10             	shl    edi,0x10
c000fade:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000fae5:	c1 e2 08             	shl    edx,0x8
c000fae8:	09 fa                	or     edx,edi
c000faea:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000faf1:	09 fa                	or     edx,edi
c000faf3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000fafa:	c1 e7 18             	shl    edi,0x18
c000fafd:	09 fa                	or     edx,edi
c000faff:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000fb03:	46                   	inc    esi
c000fb04:	83 fe 04             	cmp    esi,0x4
c000fb07:	0f 85 7a ff ff ff    	jne    c000fa87 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb11:	83 f0 01             	xor    eax,0x1
c000fb14:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fb18:	75 57                	jne    c000fb71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fb1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb1e:	83 f0 01             	xor    eax,0x1
c000fb21:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000fb25:	75 4a                	jne    c000fb71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fb27:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000fb2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000fb33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb3b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fb41:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fb47:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fb4d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fb51:	89 f7                	mov    edi,esi
c000fb53:	c1 e0 0a             	shl    eax,0xa
c000fb56:	c1 ff 1f             	sar    edi,0x1f
c000fb59:	57                   	push   edi
c000fb5a:	56                   	push   esi
c000fb5b:	52                   	push   edx
c000fb5c:	50                   	push   eax
c000fb5d:	e8 de 17 01 00       	call   c0021340 <__udivdi3>
c000fb62:	83 c4 10             	add    esp,0x10
c000fb65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fb69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fb6d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000fb71:	84 c9                	test   cl,cl
c000fb73:	74 53                	je     c000fbc8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000fb75:	0f b6 c9             	movzx  ecx,cl
c000fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fb80:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb84:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fb88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb90:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000fb94:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000fb98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000fba0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fba4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fba8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000fbac:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000fbb0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000fbb4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000fbb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fbbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fbc0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000fbc4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000fbc8:	31 ed                	xor    ebp,ebp
c000fbca:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000fbce:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000fbd2:	89 f8                	mov    eax,edi
c000fbd4:	09 f0                	or     eax,esi
c000fbd6:	74 1e                	je     c000fbf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fbd8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000fbdc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000fbe0:	89 d1                	mov    ecx,edx
c000fbe2:	09 c1                	or     ecx,eax
c000fbe4:	74 10                	je     c000fbf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	57                   	push   edi
c000fbea:	56                   	push   esi
c000fbeb:	52                   	push   edx
c000fbec:	50                   	push   eax
c000fbed:	53                   	push   ebx
c000fbee:	e8 db fc ff ff       	call   c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fbf3:	83 c4 20             	add    esp,0x20
c000fbf6:	45                   	inc    ebp
c000fbf7:	83 fd 04             	cmp    ebp,0x4
c000fbfa:	75 ce                	jne    c000fbca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000fbfc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000fc02:	5b                   	pop    ebx
c000fc03:	5e                   	pop    esi
c000fc04:	5f                   	pop    edi
c000fc05:	5d                   	pop    ebp
c000fc06:	c3                   	ret    
c000fc07:	90                   	nop

c000fc08 <Serial::Serial(char const*)>:
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0f:	83 ec 08             	sub    esp,0x8
c000fc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc16:	50                   	push   eax
c000fc17:	e8 2a ea ff ff       	call   c000e646 <Device::Device(char const*)>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc28:	89 10                	mov    DWORD PTR [eax],edx
c000fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000fc38:	90                   	nop
c000fc39:	83 c4 0c             	add    esp,0xc
c000fc3c:	c3                   	ret    
c000fc3d:	90                   	nop
c000fc3e:	66 90                	xchg   ax,ax

c000fc40 <Serial::~Serial()>:
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	ba 10 39 02 c0       	mov    edx,0xc0023910
c000fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4c:	89 10                	mov    DWORD PTR [eax],edx
c000fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	50                   	push   eax
c000fc56:	e8 e9 e6 ff ff       	call   c000e344 <Device::~Device()>
c000fc5b:	83 c4 10             	add    esp,0x10
c000fc5e:	90                   	nop
c000fc5f:	83 c4 0c             	add    esp,0xc
c000fc62:	c3                   	ret    
c000fc63:	90                   	nop

c000fc64 <Serial::~Serial()>:
c000fc64:	83 ec 0c             	sub    esp,0xc
c000fc67:	83 ec 0c             	sub    esp,0xc
c000fc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc6e:	e8 cd ff ff ff       	call   c000fc40 <Serial::~Serial()>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	83 ec 08             	sub    esp,0x8
c000fc79:	68 58 01 00 00       	push   0x158
c000fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc82:	e8 5d d2 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	83 c4 0c             	add    esp,0xc
c000fc8d:	c3                   	ret    
c000fc8e:	66 90                	xchg   ax,ax

c000fc90 <Timer::Timer(char const*)>:
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc97:	83 ec 08             	sub    esp,0x8
c000fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc9e:	50                   	push   eax
c000fc9f:	e8 a2 e9 ff ff       	call   c000e646 <Device::Device(char const*)>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	ba 54 39 02 c0       	mov    edx,0xc0023954
c000fcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb0:	89 10                	mov    DWORD PTR [eax],edx
c000fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000fcc0:	90                   	nop
c000fcc1:	83 c4 0c             	add    esp,0xc
c000fcc4:	c3                   	ret    
c000fcc5:	90                   	nop
c000fcc6:	66 90                	xchg   ax,ax

c000fcc8 <Timer::~Timer()>:
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	ba 54 39 02 c0       	mov    edx,0xc0023954
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	89 10                	mov    DWORD PTR [eax],edx
c000fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcda:	83 ec 0c             	sub    esp,0xc
c000fcdd:	50                   	push   eax
c000fcde:	e8 61 e6 ff ff       	call   c000e344 <Device::~Device()>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	90                   	nop
c000fce7:	83 c4 0c             	add    esp,0xc
c000fcea:	c3                   	ret    
c000fceb:	90                   	nop

c000fcec <Timer::~Timer()>:
c000fcec:	83 ec 0c             	sub    esp,0xc
c000fcef:	83 ec 0c             	sub    esp,0xc
c000fcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf6:	e8 cd ff ff ff       	call   c000fcc8 <Timer::~Timer()>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	83 ec 08             	sub    esp,0x8
c000fd01:	68 5c 01 00 00       	push   0x15c
c000fd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd0a:	e8 d5 d1 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fd0f:	83 c4 10             	add    esp,0x10
c000fd12:	83 c4 0c             	add    esp,0xc
c000fd15:	c3                   	ret    

c000fd16 <Timer::read()>:
c000fd16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fd20:	c3                   	ret    

c000fd21 <setupTimer(int)>:
c000fd21:	53                   	push   ebx
c000fd22:	83 ec 14             	sub    esp,0x14
c000fd25:	68 5c 01 00 00       	push   0x15c
c000fd2a:	e8 88 9f ff ff       	call   c0009cb7 <malloc>
c000fd2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd32:	89 c3                	mov    ebx,eax
c000fd34:	e8 5b 11 01 00       	call   c0020e94 <PIT::PIT()>
c000fd39:	58                   	pop    eax
c000fd3a:	5a                   	pop    edx
c000fd3b:	53                   	push   ebx
c000fd3c:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c000fd42:	e8 fb e6 ff ff       	call   c000e442 <Device::addChild(Device*)>
c000fd47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd49:	6a 00                	push   0x0
c000fd4b:	6a 00                	push   0x0
c000fd4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd51:	53                   	push   ebx
c000fd52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fd55:	89 d8                	mov    eax,ebx
c000fd57:	83 c4 28             	add    esp,0x28
c000fd5a:	5b                   	pop    ebx
c000fd5b:	c3                   	ret    

c000fd5c <timerHandler(unsigned int)>:
c000fd5c:	56                   	push   esi
c000fd5d:	53                   	push   ebx
c000fd5e:	51                   	push   ecx
c000fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd63:	01 05 cc 88 02 c0    	add    DWORD PTR ds:0xc00288cc,eax
c000fd69:	80 3d ad 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262ad,0x0
c000fd70:	0f 84 4a 01 00 00    	je     c000fec0 <timerHandler(unsigned int)+0x164>
c000fd76:	fa                   	cli    
c000fd77:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c000fd7d:	83 ec 0c             	sub    esp,0xc
c000fd80:	ff 05 c4 97 02 c0    	inc    DWORD PTR ds:0xc00297c4
c000fd86:	68 d8 97 02 c0       	push   0xc00297d8
c000fd8b:	e8 80 1b 01 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	84 c0                	test   al,al
c000fd95:	0f 85 a1 00 00 00    	jne    c000fe3c <timerHandler(unsigned int)+0xe0>
c000fd9b:	83 ec 0c             	sub    esp,0xc
c000fd9e:	68 d8 97 02 c0       	push   0xc00297d8
c000fda3:	e8 84 1b 01 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	89 c6                	mov    esi,eax
c000fdad:	8d 76 00             	lea    esi,[esi+0x0]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	68 d8 97 02 c0       	push   0xc00297d8
c000fdb8:	e8 6f 1b 01 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fdbd:	c7 04 24 d8 97 02 c0 	mov    DWORD PTR [esp],0xc00297d8
c000fdc4:	89 c3                	mov    ebx,eax
c000fdc6:	e8 69 1b 01 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000fdcb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	3b 05 cc 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288cc
c000fdd7:	77 23                	ja     c000fdfc <timerHandler(unsigned int)+0xa0>
c000fdd9:	83 ec 0c             	sub    esp,0xc
c000fddc:	53                   	push   ebx
c000fddd:	e8 b6 70 00 00       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	39 de                	cmp    esi,ebx
c000fde7:	75 27                	jne    c000fe10 <timerHandler(unsigned int)+0xb4>
c000fde9:	83 ec 0c             	sub    esp,0xc
c000fdec:	68 d8 97 02 c0       	push   0xc00297d8
c000fdf1:	e8 36 1b 01 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fdf6:	89 c6                	mov    esi,eax
c000fdf8:	eb 12                	jmp    c000fe0c <timerHandler(unsigned int)+0xb0>
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	52                   	push   edx
c000fdfd:	52                   	push   edx
c000fdfe:	53                   	push   ebx
c000fdff:	68 d8 97 02 c0       	push   0xc00297d8
c000fe04:	e8 e3 1b 01 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000fe09:	8d 76 00             	lea    esi,[esi+0x0]
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	90                   	nop
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	68 d8 97 02 c0       	push   0xc00297d8
c000fe18:	e8 f3 1a 01 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fe1d:	83 c4 10             	add    esp,0x10
c000fe20:	84 c0                	test   al,al
c000fe22:	75 18                	jne    c000fe3c <timerHandler(unsigned int)+0xe0>
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	68 d8 97 02 c0       	push   0xc00297d8
c000fe2c:	e8 fb 1a 01 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	39 f0                	cmp    eax,esi
c000fe36:	0f 85 74 ff ff ff    	jne    c000fdb0 <timerHandler(unsigned int)+0x54>
c000fe3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe41:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000fe45:	74 41                	je     c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe47:	80 3d ac 62 02 c0 00 	cmp    BYTE PTR ds:0xc00262ac,0x0
c000fe4e:	74 38                	je     c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe50:	fa                   	cli    
c000fe51:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c000fe57:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c000fe5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fe62:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000fe65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fe6b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000fe6e:	72 08                	jb     c000fe78 <timerHandler(unsigned int)+0x11c>
c000fe70:	e8 67 6b 00 00       	call   c00169dc <schedule()>
c000fe75:	8d 76 00             	lea    esi,[esi+0x0]
c000fe78:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000fe7d:	48                   	dec    eax
c000fe7e:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000fe83:	75 03                	jne    c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe85:	fb                   	sti    
c000fe86:	66 90                	xchg   ax,ax
c000fe88:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c000fe8d:	48                   	dec    eax
c000fe8e:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c000fe93:	75 1b                	jne    c000feb0 <timerHandler(unsigned int)+0x154>
c000fe95:	83 3d c0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297c0,0x0
c000fe9c:	74 12                	je     c000feb0 <timerHandler(unsigned int)+0x154>
c000fe9e:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c000fea8:	e8 2f 6b 00 00       	call   c00169dc <schedule()>
c000fead:	8d 76 00             	lea    esi,[esi+0x0]
c000feb0:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c000feb5:	48                   	dec    eax
c000feb6:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c000febb:	75 03                	jne    c000fec0 <timerHandler(unsigned int)+0x164>
c000febd:	fb                   	sti    
c000febe:	66 90                	xchg   ax,ax
c000fec0:	58                   	pop    eax
c000fec1:	5b                   	pop    ebx
c000fec2:	5e                   	pop    esi
c000fec3:	c3                   	ret    

c000fec4 <VCache::VCache(PhysicalDisk*)>:
c000fec4:	53                   	push   ebx
c000fec5:	83 ec 18             	sub    esp,0x18
c000fec8:	ba 84 39 02 c0       	mov    edx,0xc0023984
c000fecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fed1:	89 10                	mov    DWORD PTR [eax],edx
c000fed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fed7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000fede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fee2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000fee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000fef4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000fefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000ff06:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000ff0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff11:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000ff20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff24:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000ff2b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ff3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000ff42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff46:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ff4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff4e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000ff55:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff64:	e8 4e 9d ff ff       	call   c0009cb7 <malloc>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	89 c3                	mov    ebx,eax
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	53                   	push   ebx
c000ff72:	e8 35 68 00 00       	call   c00167ac <Mutex::Mutex()>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff7e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ff81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff89:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff90:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000ff97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff9b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ffa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffa8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000ffb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ffb8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffbc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000ffbf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000ffc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ffca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ffd4:	05 00 01 00 00       	add    eax,0x100
c000ffd9:	c1 e0 04             	shl    eax,0x4
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	50                   	push   eax
c000ffe0:	e8 d2 9c ff ff       	call   c0009cb7 <malloc>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	89 c2                	mov    edx,eax
c000ffea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000fffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010000:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010004:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010008:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001000e:	c1 e0 06             	shl    eax,0x6
c0010011:	83 ec 0c             	sub    esp,0xc
c0010014:	50                   	push   eax
c0010015:	e8 9d 9c ff ff       	call   c0009cb7 <malloc>
c001001a:	83 c4 10             	add    esp,0x10
c001001d:	89 c2                	mov    edx,eax
c001001f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010023:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010026:	90                   	nop
c0010027:	83 c4 18             	add    esp,0x18
c001002a:	5b                   	pop    ebx
c001002b:	c3                   	ret    

c001002c <VCache::invalidateReadBuffer()>:
c001002c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010030:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010036:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <VCache::writeWriteBuffer()>:
c001003c:	53                   	push   ebx
c001003d:	83 ec 08             	sub    esp,0x8
c0010040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010044:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010048:	74 1e                	je     c0010068 <VCache::writeWriteBuffer()+0x2c>
c001004a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001004d:	83 ec 0c             	sub    esp,0xc
c0010050:	8b 10                	mov    edx,DWORD PTR [eax]
c0010052:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010055:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010058:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001005b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001005e:	50                   	push   eax
c001005f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010062:	83 c4 20             	add    esp,0x20
c0010065:	8d 76 00             	lea    esi,[esi+0x0]
c0010068:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001006f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010076:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001007a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010081:	83 c4 08             	add    esp,0x8
c0010084:	5b                   	pop    ebx
c0010085:	c3                   	ret    
c0010086:	66 90                	xchg   ax,ax

c0010088 <VCache::~VCache()>:
c0010088:	83 ec 0c             	sub    esp,0xc
c001008b:	ba 84 39 02 c0       	mov    edx,0xc0023984
c0010090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010094:	89 10                	mov    DWORD PTR [eax],edx
c0010096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001009d:	84 c0                	test   al,al
c001009f:	74 0f                	je     c00100b0 <VCache::~VCache()+0x28>
c00100a1:	83 ec 0c             	sub    esp,0xc
c00100a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100a8:	e8 8f ff ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c00100ad:	83 c4 10             	add    esp,0x10
c00100b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00100b7:	83 ec 0c             	sub    esp,0xc
c00100ba:	50                   	push   eax
c00100bb:	e8 07 9c ff ff       	call   c0009cc7 <free>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00100ca:	83 ec 0c             	sub    esp,0xc
c00100cd:	50                   	push   eax
c00100ce:	e8 f4 9b ff ff       	call   c0009cc7 <free>
c00100d3:	83 c4 10             	add    esp,0x10
c00100d6:	90                   	nop
c00100d7:	83 c4 0c             	add    esp,0xc
c00100da:	c3                   	ret    
c00100db:	90                   	nop

c00100dc <VCache::~VCache()>:
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e6:	e8 9d ff ff ff       	call   c0010088 <VCache::~VCache()>
c00100eb:	83 c4 10             	add    esp,0x10
c00100ee:	83 ec 08             	sub    esp,0x8
c00100f1:	6a 44                	push   0x44
c00100f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f7:	e8 e8 cd ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00100fc:	83 c4 10             	add    esp,0x10
c00100ff:	83 c4 0c             	add    esp,0xc
c0010102:	c3                   	ret    
c0010103:	90                   	nop

c0010104 <VCache::write(unsigned long long, int, void*)>:
c0010104:	55                   	push   ebp
c0010105:	31 c0                	xor    eax,eax
c0010107:	57                   	push   edi
c0010108:	56                   	push   esi
c0010109:	53                   	push   ebx
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010111:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010115:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010119:	8d 76 00             	lea    esi,[esi+0x0]
c001011c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010120:	7d 1a                	jge    c001013c <VCache::write(unsigned long long, int, void*)+0x38>
c0010122:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010125:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001012b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001012f:	0f af c8             	imul   ecx,eax
c0010132:	01 ca                	add    edx,ecx
c0010134:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010136:	40                   	inc    eax
c0010137:	eb e3                	jmp    c001011c <VCache::write(unsigned long long, int, void*)+0x18>
c0010139:	8d 76 00             	lea    esi,[esi+0x0]
c001013c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010140:	74 0a                	je     c001014c <VCache::write(unsigned long long, int, void*)+0x48>
c0010142:	53                   	push   ebx
c0010143:	e8 e4 fe ff ff       	call   c001002c <VCache::invalidateReadBuffer()>
c0010148:	58                   	pop    eax
c0010149:	8d 76 00             	lea    esi,[esi+0x0]
c001014c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010150:	74 5e                	je     c00101b0 <VCache::write(unsigned long long, int, void*)+0xac>
c0010152:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010155:	89 e8                	mov    eax,ebp
c0010157:	99                   	cdq    
c0010158:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001015b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001015e:	89 c1                	mov    ecx,eax
c0010160:	89 d0                	mov    eax,edx
c0010162:	31 f1                	xor    ecx,esi
c0010164:	31 f8                	xor    eax,edi
c0010166:	09 c1                	or     ecx,eax
c0010168:	75 3a                	jne    c00101a4 <VCache::write(unsigned long long, int, void*)+0xa0>
c001016a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001016f:	75 33                	jne    c00101a4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010171:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010174:	89 ef                	mov    edi,ebp
c0010176:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001017c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010180:	0f af f9             	imul   edi,ecx
c0010183:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010188:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001018b:	40                   	inc    eax
c001018c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001018f:	83 f8 40             	cmp    eax,0x40
c0010192:	75 60                	jne    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010194:	83 ec 0c             	sub    esp,0xc
c0010197:	53                   	push   ebx
c0010198:	e8 9f fe ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	eb 52                	jmp    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c00101a2:	66 90                	xchg   ax,ax
c00101a4:	83 ec 0c             	sub    esp,0xc
c00101a7:	53                   	push   ebx
c00101a8:	e8 8f fe ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101b3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00101b8:	7f 22                	jg     c00101dc <VCache::write(unsigned long long, int, void*)+0xd8>
c00101ba:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00101bd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00101c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00101c8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00101cb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00101ce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00101d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00101d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101da:	eb 18                	jmp    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	8b 10                	mov    edx,DWORD PTR [eax]
c00101e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00101e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00101e9:	57                   	push   edi
c00101ea:	56                   	push   esi
c00101eb:	50                   	push   eax
c00101ec:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00101ef:	83 c4 20             	add    esp,0x20
c00101f2:	66 90                	xchg   ax,ax
c00101f4:	83 c4 0c             	add    esp,0xc
c00101f7:	31 c0                	xor    eax,eax
c00101f9:	5b                   	pop    ebx
c00101fa:	5e                   	pop    esi
c00101fb:	5f                   	pop    edi
c00101fc:	5d                   	pop    ebp
c00101fd:	c3                   	ret    

c00101fe <VCache::read(unsigned long long, int, void*)>:
c00101fe:	55                   	push   ebp
c00101ff:	31 c0                	xor    eax,eax
c0010201:	57                   	push   edi
c0010202:	56                   	push   esi
c0010203:	53                   	push   ebx
c0010204:	83 ec 1c             	sub    esp,0x1c
c0010207:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001020b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001020f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010213:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010217:	90                   	nop
c0010218:	39 e8                	cmp    eax,ebp
c001021a:	7d 18                	jge    c0010234 <VCache::read(unsigned long long, int, void*)+0x36>
c001021c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001021f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010225:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010229:	0f af c8             	imul   ecx,eax
c001022c:	01 ca                	add    edx,ecx
c001022e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010230:	40                   	inc    eax
c0010231:	eb e5                	jmp    c0010218 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010233:	90                   	nop
c0010234:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010238:	74 0e                	je     c0010248 <VCache::read(unsigned long long, int, void*)+0x4a>
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	53                   	push   ebx
c001023e:	e8 f9 fd ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c0010243:	83 c4 10             	add    esp,0x10
c0010246:	66 90                	xchg   ax,ax
c0010248:	83 fd 01             	cmp    ebp,0x1
c001024b:	0f 85 87 00 00 00    	jne    c00102d8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010251:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010254:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010258:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001025f:	75 77                	jne    c00102d8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010261:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010264:	89 e9                	mov    ecx,ebp
c0010266:	f7 d9                	neg    ecx
c0010268:	89 c8                	mov    eax,ecx
c001026a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001026e:	c1 f8 1f             	sar    eax,0x1f
c0010271:	21 f1                	and    ecx,esi
c0010273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010277:	89 c8                	mov    eax,ecx
c0010279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001027d:	21 f9                	and    ecx,edi
c001027f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010283:	89 ca                	mov    edx,ecx
c0010285:	74 0d                	je     c0010294 <VCache::read(unsigned long long, int, void*)+0x96>
c0010287:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001028a:	75 08                	jne    c0010294 <VCache::read(unsigned long long, int, void*)+0x96>
c001028c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001028f:	74 27                	je     c00102b8 <VCache::read(unsigned long long, int, void*)+0xba>
c0010291:	8d 76 00             	lea    esi,[esi+0x0]
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001029b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001029f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00102a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00102a5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00102a7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00102aa:	55                   	push   ebp
c00102ab:	52                   	push   edx
c00102ac:	50                   	push   eax
c00102ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00102b1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00102b4:	83 c4 20             	add    esp,0x20
c00102b7:	90                   	nop
c00102b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102bb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00102bf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00102c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00102c8:	48                   	dec    eax
c00102c9:	21 c6                	and    esi,eax
c00102cb:	0f af f1             	imul   esi,ecx
c00102ce:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00102d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d3:	eb 23                	jmp    c00102f8 <VCache::read(unsigned long long, int, void*)+0xfa>
c00102d5:	8d 76 00             	lea    esi,[esi+0x0]
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	53                   	push   ebx
c00102dc:	e8 4b fd ff ff       	call   c001002c <VCache::invalidateReadBuffer()>
c00102e1:	5a                   	pop    edx
c00102e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00102e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00102eb:	55                   	push   ebp
c00102ec:	57                   	push   edi
c00102ed:	56                   	push   esi
c00102ee:	50                   	push   eax
c00102ef:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00102f2:	83 c4 20             	add    esp,0x20
c00102f5:	8d 76 00             	lea    esi,[esi+0x0]
c00102f8:	83 c4 1c             	add    esp,0x1c
c00102fb:	31 c0                	xor    eax,eax
c00102fd:	5b                   	pop    ebx
c00102fe:	5e                   	pop    esi
c00102ff:	5f                   	pop    edi
c0010300:	5d                   	pop    ebp
c0010301:	c3                   	ret    

c0010302 <Video::putrect(int, int, int, int, unsigned int)>:
c0010302:	55                   	push   ebp
c0010303:	57                   	push   edi
c0010304:	56                   	push   esi
c0010305:	53                   	push   ebx
c0010306:	83 ec 1c             	sub    esp,0x1c
c0010309:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001030d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010311:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010315:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001031d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010321:	01 df                	add    edi,ebx
c0010323:	39 fb                	cmp    ebx,edi
c0010325:	7d 1f                	jge    c0010346 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010327:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001032b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001032f:	7d 12                	jge    c0010343 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010331:	8b 16                	mov    edx,DWORD PTR [esi]
c0010333:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010337:	53                   	push   ebx
c0010338:	55                   	push   ebp
c0010339:	45                   	inc    ebp
c001033a:	56                   	push   esi
c001033b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001033e:	83 c4 10             	add    esp,0x10
c0010341:	eb e8                	jmp    c001032b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010343:	43                   	inc    ebx
c0010344:	eb dd                	jmp    c0010323 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010346:	83 c4 1c             	add    esp,0x1c
c0010349:	5b                   	pop    ebx
c001034a:	5e                   	pop    esi
c001034b:	5f                   	pop    edi
c001034c:	5d                   	pop    ebp
c001034d:	c3                   	ret    

c001034e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001034e:	55                   	push   ebp
c001034f:	57                   	push   edi
c0010350:	31 ff                	xor    edi,edi
c0010352:	56                   	push   esi
c0010353:	53                   	push   ebx
c0010354:	83 ec 1c             	sub    esp,0x1c
c0010357:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001035b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001035f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010366:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001036b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001036f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010373:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010377:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001037a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001037e:	01 f9                	add    ecx,edi
c0010380:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010384:	7d 2f                	jge    c00103b5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010386:	31 f6                	xor    esi,esi
c0010388:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001038c:	01 f2                	add    edx,esi
c001038e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010392:	7d 1a                	jge    c00103ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010394:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010397:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001039a:	46                   	inc    esi
c001039b:	51                   	push   ecx
c001039c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00103a0:	52                   	push   edx
c00103a1:	55                   	push   ebp
c00103a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103ac:	eb da                	jmp    c0010388 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00103ae:	47                   	inc    edi
c00103af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00103b3:	eb c5                	jmp    c001037a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00103b5:	83 c4 1c             	add    esp,0x1c
c00103b8:	5b                   	pop    ebx
c00103b9:	5e                   	pop    esi
c00103ba:	5f                   	pop    edi
c00103bb:	5d                   	pop    ebp
c00103bc:	c3                   	ret    
c00103bd:	90                   	nop

c00103be <Video::blit(unsigned int*, int, int, int, int)>:
c00103be:	55                   	push   ebp
c00103bf:	57                   	push   edi
c00103c0:	56                   	push   esi
c00103c1:	53                   	push   ebx
c00103c2:	83 ec 1c             	sub    esp,0x1c
c00103c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00103cd:	85 c0                	test   eax,eax
c00103cf:	79 02                	jns    c00103d3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	c1 e0 02             	shl    eax,0x2
c00103d6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00103da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00103e2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00103e6:	39 d8                	cmp    eax,ebx
c00103e8:	7e 49                	jle    c0010433 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00103ea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00103f0:	7c 41                	jl     c0010433 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00103f2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00103f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00103fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00103fe:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010402:	39 f9                	cmp    ecx,edi
c0010404:	7e 22                	jle    c0010428 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010406:	83 c5 04             	add    ebp,0x4
c0010409:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001040f:	7c 14                	jl     c0010425 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010411:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010413:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010416:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001041a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001041e:	56                   	push   esi
c001041f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	47                   	inc    edi
c0010426:	eb d2                	jmp    c00103fa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042c:	43                   	inc    ebx
c001042d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010431:	eb ab                	jmp    c00103de <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010433:	83 c4 1c             	add    esp,0x1c
c0010436:	5b                   	pop    ebx
c0010437:	5e                   	pop    esi
c0010438:	5f                   	pop    edi
c0010439:	5d                   	pop    ebp
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <Video::clearScreen(unsigned int)>:
c001043c:	57                   	push   edi
c001043d:	56                   	push   esi
c001043e:	53                   	push   ebx
c001043f:	31 db                	xor    ebx,ebx
c0010441:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010445:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001044b:	7e 1f                	jle    c001046c <Video::clearScreen(unsigned int)+0x30>
c001044d:	31 ff                	xor    edi,edi
c001044f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010455:	7e 12                	jle    c0010469 <Video::clearScreen(unsigned int)+0x2d>
c0010457:	8b 06                	mov    eax,DWORD PTR [esi]
c0010459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001045d:	53                   	push   ebx
c001045e:	57                   	push   edi
c001045f:	47                   	inc    edi
c0010460:	56                   	push   esi
c0010461:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010464:	83 c4 10             	add    esp,0x10
c0010467:	eb e6                	jmp    c001044f <Video::clearScreen(unsigned int)+0x13>
c0010469:	43                   	inc    ebx
c001046a:	eb d9                	jmp    c0010445 <Video::clearScreen(unsigned int)+0x9>
c001046c:	5b                   	pop    ebx
c001046d:	5e                   	pop    esi
c001046e:	5f                   	pop    edi
c001046f:	c3                   	ret    

c0010470 <Video::putpixel(int, int, unsigned int)>:
c0010470:	c7 44 24 04 8c 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc002398c
c0010478:	e9 fa 2e 00 00       	jmp    c0013377 <Krnl::panic(char const*)>
c001047d:	90                   	nop

c001047e <Video::Video(char const*)>:
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010485:	83 ec 08             	sub    esp,0x8
c0010488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001048c:	50                   	push   eax
c001048d:	e8 b4 e1 ff ff       	call   c000e646 <Device::Device(char const*)>
c0010492:	83 c4 10             	add    esp,0x10
c0010495:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c001049a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049e:	89 10                	mov    DWORD PTR [eax],edx
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00104ae:	90                   	nop
c00104af:	83 c4 0c             	add    esp,0xc
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <Video::~Video()>:
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	ba fc 39 02 c0       	mov    edx,0xc00239fc
c00104bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c0:	89 10                	mov    DWORD PTR [eax],edx
c00104c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	50                   	push   eax
c00104ca:	e8 75 de ff ff       	call   c000e344 <Device::~Device()>
c00104cf:	83 c4 10             	add    esp,0x10
c00104d2:	90                   	nop
c00104d3:	83 c4 0c             	add    esp,0xc
c00104d6:	c3                   	ret    
c00104d7:	90                   	nop

c00104d8 <Video::~Video()>:
c00104d8:	83 ec 0c             	sub    esp,0xc
c00104db:	83 ec 0c             	sub    esp,0xc
c00104de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e2:	e8 cd ff ff ff       	call   c00104b4 <Video::~Video()>
c00104e7:	83 c4 10             	add    esp,0x10
c00104ea:	83 ec 08             	sub    esp,0x8
c00104ed:	68 64 01 00 00       	push   0x164
c00104f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f6:	e8 e9 c9 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	83 c4 0c             	add    esp,0xc
c0010501:	c3                   	ret    

c0010502 <Video::isMonochrome()>:
c0010502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010506:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001050c:	c3                   	ret    
c001050d:	90                   	nop

c001050e <Video::getWidth()>:
c001050e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010512:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <Video::getHeight()>:
c001051a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010524:	c3                   	ret    
c0010525:	90                   	nop

c0010526 <Video::drawCursor(int, int, unsigned char*, int)>:
c0010526:	55                   	push   ebp
c0010527:	57                   	push   edi
c0010528:	56                   	push   esi
c0010529:	53                   	push   ebx
c001052a:	83 ec 2c             	sub    esp,0x2c
c001052d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010531:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010535:	83 f8 01             	cmp    eax,0x1
c0010538:	19 c9                	sbb    ecx,ecx
c001053a:	31 db                	xor    ebx,ebx
c001053c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0010540:	89 cd                	mov    ebp,ecx
c0010542:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001054a:	f7 d5                	not    ebp
c001054c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0010552:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010556:	01 d8                	add    eax,ebx
c0010558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001055c:	56                   	push   esi
c001055d:	e8 b8 ff ff ff       	call   c001051a <Video::getHeight()>
c0010562:	59                   	pop    ecx
c0010563:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0010567:	7e 70                	jle    c00105d9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0010569:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001056d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010571:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0010574:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010578:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001057c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0010583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010587:	89 f8                	mov    eax,edi
c0010589:	83 c0 20             	add    eax,0x20
c001058c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010590:	56                   	push   esi
c0010591:	e8 78 ff ff ff       	call   c001050e <Video::getWidth()>
c0010596:	5a                   	pop    edx
c0010597:	39 c7                	cmp    edi,eax
c0010599:	7d 34                	jge    c00105cf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001059b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00105a0:	74 05                	je     c00105a7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00105a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00105a4:	55                   	push   ebp
c00105a5:	eb 0d                	jmp    c00105b4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00105a7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00105ac:	74 12                	je     c00105c0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00105ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00105b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00105b8:	57                   	push   edi
c00105b9:	56                   	push   esi
c00105ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00105bd:	83 c4 10             	add    esp,0x10
c00105c0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00105c4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00105c8:	47                   	inc    edi
c00105c9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00105cd:	75 c1                	jne    c0010590 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00105cf:	43                   	inc    ebx
c00105d0:	83 fb 20             	cmp    ebx,0x20
c00105d3:	0f 85 79 ff ff ff    	jne    c0010552 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00105d9:	83 c4 2c             	add    esp,0x2c
c00105dc:	5b                   	pop    ebx
c00105dd:	5e                   	pop    esi
c00105de:	5f                   	pop    edi
c00105df:	5d                   	pop    ebp
c00105e0:	c3                   	ret    
c00105e1:	90                   	nop

c00105e2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00105e2:	55                   	push   ebp
c00105e3:	57                   	push   edi
c00105e4:	56                   	push   esi
c00105e5:	53                   	push   ebx
c00105e6:	83 ec 28             	sub    esp,0x28
c00105e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00105ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00105f1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00105f5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00105f9:	c1 e6 08             	shl    esi,0x8
c00105fc:	01 c6                	add    esi,eax
c00105fe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0010602:	c1 e0 08             	shl    eax,0x8
c0010605:	01 d0                	add    eax,edx
c0010607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001060b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001060f:	0f af c6             	imul   eax,esi
c0010612:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0010619:	50                   	push   eax
c001061a:	e8 98 96 ff ff       	call   c0009cb7 <malloc>
c001061f:	83 c4 10             	add    esp,0x10
c0010622:	89 c7                	mov    edi,eax
c0010624:	85 c0                	test   eax,eax
c0010626:	75 10                	jne    c0010638 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	68 ad 39 02 c0       	push   0xc00239ad
c0010630:	e8 42 2d 00 00       	call   c0013377 <Krnl::panic(char const*)>
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001063b:	ba 12 00 00 00       	mov    edx,0x12
c0010640:	84 c0                	test   al,al
c0010642:	74 11                	je     c0010655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0010644:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0010648:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001064c:	c1 fa 03             	sar    edx,0x3
c001064f:	0f af d1             	imul   edx,ecx
c0010652:	83 c2 12             	add    edx,0x12
c0010655:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0010659:	74 04                	je     c001065f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001065b:	85 f6                	test   esi,esi
c001065d:	75 12                	jne    c0010671 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001065f:	83 ec 0c             	sub    esp,0xc
c0010662:	68 bd 39 02 c0       	push   0xc00239bd
c0010667:	e8 59 c9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001066c:	e9 b8 00 00 00       	jmp    c0010729 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0010671:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0010675:	80 f9 02             	cmp    cl,0x2
c0010678:	0f 85 96 00 00 00    	jne    c0010714 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001067e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0010683:	75 0e                	jne    c0010693 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010685:	84 c0                	test   al,al
c0010687:	75 0a                	jne    c0010693 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010689:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001068c:	83 e8 18             	sub    eax,0x18
c001068f:	a8 f7                	test   al,0xf7
c0010691:	74 0a                	je     c001069d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0010693:	83 ec 0c             	sub    esp,0xc
c0010696:	68 d2 39 02 c0       	push   0xc00239d2
c001069b:	eb 7f                	jmp    c001071c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001069d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00106a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00106ad:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00106b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00106b9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00106bd:	75 0c                	jne    c00106cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00106bf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00106c4:	c1 e0 18             	shl    eax,0x18
c00106c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106cb:	45                   	inc    ebp
c00106cc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00106d1:	c1 e1 10             	shl    ecx,0x10
c00106d4:	89 c8                	mov    eax,ecx
c00106d6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00106db:	c1 e1 08             	shl    ecx,0x8
c00106de:	09 c1                	or     ecx,eax
c00106e0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00106e4:	09 c1                	or     ecx,eax
c00106e6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00106ea:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00106ee:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00106f2:	c1 f8 03             	sar    eax,0x3
c00106f5:	01 c2                	add    edx,eax
c00106f7:	89 e8                	mov    eax,ebp
c00106f9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00106fd:	39 c6                	cmp    esi,eax
c00106ff:	7f b0                	jg     c00106b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0010701:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010705:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010709:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001070c:	7e 22                	jle    c0010730 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001070e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0010712:	eb 99                	jmp    c00106ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0010714:	50                   	push   eax
c0010715:	50                   	push   eax
c0010716:	51                   	push   ecx
c0010717:	68 e0 39 02 c0       	push   0xc00239e0
c001071c:	e8 a4 c8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010721:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010724:	e8 9e 95 ff ff       	call   c0009cc7 <free>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	31 ff                	xor    edi,edi
c001072e:	eb 0f                	jmp    c001073f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0010730:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010734:	89 30                	mov    DWORD PTR [eax],esi
c0010736:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001073a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001073d:	89 30                	mov    DWORD PTR [eax],esi
c001073f:	83 c4 1c             	add    esp,0x1c
c0010742:	89 f8                	mov    eax,edi
c0010744:	5b                   	pop    ebx
c0010745:	5e                   	pop    esi
c0010746:	5f                   	pop    edi
c0010747:	5d                   	pop    ebp
c0010748:	c3                   	ret    
c0010749:	90                   	nop

c001074a <Video::putTGA(int, int, unsigned char*, int)>:
c001074a:	55                   	push   ebp
c001074b:	57                   	push   edi
c001074c:	56                   	push   esi
c001074d:	53                   	push   ebx
c001074e:	83 ec 28             	sub    esp,0x28
c0010751:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010755:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010759:	50                   	push   eax
c001075a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001075e:	50                   	push   eax
c001075f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010763:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010767:	56                   	push   esi
c0010768:	e8 75 fe ff ff       	call   c00105e2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001076d:	83 c4 20             	add    esp,0x20
c0010770:	85 c0                	test   eax,eax
c0010772:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010776:	74 35                	je     c00107ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0010778:	89 c7                	mov    edi,eax
c001077a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001077e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010782:	39 d8                	cmp    eax,ebx
c0010784:	7e 27                	jle    c00107ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0010786:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001078a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001078e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010792:	39 e8                	cmp    eax,ebp
c0010794:	7e 14                	jle    c00107aa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0010796:	8b 06                	mov    eax,DWORD PTR [esi]
c0010798:	83 c7 04             	add    edi,0x4
c001079b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001079e:	53                   	push   ebx
c001079f:	55                   	push   ebp
c00107a0:	45                   	inc    ebp
c00107a1:	56                   	push   esi
c00107a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	eb e0                	jmp    c001078a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00107aa:	43                   	inc    ebx
c00107ab:	eb cd                	jmp    c001077a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00107ad:	83 c4 1c             	add    esp,0x1c
c00107b0:	5b                   	pop    ebx
c00107b1:	5e                   	pop    esi
c00107b2:	5f                   	pop    edi
c00107b3:	5d                   	pop    ebp
c00107b4:	c3                   	ret    
c00107b5:	66 90                	xchg   ax,ax
c00107b7:	90                   	nop

c00107b8 <ACPI::close(int, int, void*)>:
c00107b8:	83 ec 1c             	sub    esp,0x1c
c00107bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00107c3:	74 0b                	je     c00107d0 <ACPI::close(int, int, void*)+0x18>
c00107c5:	b8 00 00 00 00       	mov    eax,0x0
c00107ca:	e9 99 00 00 00       	jmp    c0010868 <ACPI::close(int, int, void*)+0xb0>
c00107cf:	90                   	nop
c00107d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00107d5:	75 29                	jne    c0010800 <ACPI::close(int, int, void*)+0x48>
c00107d7:	a1 e8 88 02 c0       	mov    eax,ds:0xc00288e8
c00107dc:	85 c0                	test   eax,eax
c00107de:	74 08                	je     c00107e8 <ACPI::close(int, int, void*)+0x30>
c00107e0:	a1 e8 88 02 c0       	mov    eax,ds:0xc00288e8
c00107e5:	ff d0                	call   eax
c00107e7:	90                   	nop
c00107e8:	83 ec 0c             	sub    esp,0xc
c00107eb:	68 3c 3a 02 c0       	push   0xc0023a3c
c00107f0:	e8 82 2b 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107fd:	eb 69                	jmp    c0010868 <ACPI::close(int, int, void*)+0xb0>
c00107ff:	90                   	nop
c0010800:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0010805:	75 59                	jne    c0010860 <ACPI::close(int, int, void*)+0xa8>
c0010807:	a1 e4 88 02 c0       	mov    eax,ds:0xc00288e4
c001080c:	85 c0                	test   eax,eax
c001080e:	74 08                	je     c0010818 <ACPI::close(int, int, void*)+0x60>
c0010810:	a1 e4 88 02 c0       	mov    eax,ds:0xc00288e4
c0010815:	ff d0                	call   eax
c0010817:	90                   	nop
c0010818:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001081d:	8d 76 00             	lea    esi,[esi+0x0]
c0010820:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010825:	83 e0 02             	and    eax,0x2
c0010828:	74 1e                	je     c0010848 <ACPI::close(int, int, void*)+0x90>
c001082a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0010831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010835:	89 c2                	mov    edx,eax
c0010837:	ec                   	in     al,dx
c0010838:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001083c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010840:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010844:	eb da                	jmp    c0010820 <ACPI::close(int, int, void*)+0x68>
c0010846:	66 90                	xchg   ax,ax
c0010848:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001084f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0010854:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0010858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085c:	ee                   	out    dx,al
c001085d:	8d 76 00             	lea    esi,[esi+0x0]
c0010860:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010865:	8d 76 00             	lea    esi,[esi+0x0]
c0010868:	83 c4 1c             	add    esp,0x1c
c001086b:	c3                   	ret    

c001086c <findRSDP()>:
c001086c:	83 ec 1c             	sub    esp,0x1c
c001086f:	83 ec 0c             	sub    esp,0xc
c0010872:	68 5f 3b 02 c0       	push   0xc0023b5f
c0010877:	e8 95 94 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010884:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001088a:	83 e0 04             	and    eax,0x4
c001088d:	84 c0                	test   al,al
c001088f:	75 0b                	jne    c001089c <findRSDP()+0x30>
c0010891:	b8 00 00 00 00       	mov    eax,0x0
c0010896:	e9 a1 00 00 00       	jmp    c001093c <findRSDP()+0xd0>
c001089b:	90                   	nop
c001089c:	a1 d8 62 02 c0       	mov    eax,ds:0xc00262d8
c00108a1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00108a6:	7f 1c                	jg     c00108c4 <findRSDP()+0x58>
c00108a8:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00108ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00108b3:	83 e2 fb             	and    edx,0xfffffffb
c00108b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00108bc:	b8 00 00 00 00       	mov    eax,0x0
c00108c1:	eb 79                	jmp    c001093c <findRSDP()+0xd0>
c00108c3:	90                   	nop
c00108c4:	83 ec 0c             	sub    esp,0xc
c00108c7:	68 6f 3b 02 c0       	push   0xc0023b6f
c00108cc:	e8 40 94 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00108d1:	83 c4 10             	add    esp,0x10
c00108d4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00108dc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00108e4:	77 3e                	ja     c0010924 <findRSDP()+0xb8>
c00108e6:	83 ec 04             	sub    esp,0x4
c00108e9:	6a 08                	push   0x8
c00108eb:	68 88 3b 02 c0       	push   0xc0023b88
c00108f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f4:	e8 7f fc fe ff       	call   c0000578 <memcmp>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	85 c0                	test   eax,eax
c00108fe:	0f 94 c0             	sete   al
c0010901:	84 c0                	test   al,al
c0010903:	74 17                	je     c001091c <findRSDP()+0xb0>
c0010905:	83 ec 0c             	sub    esp,0xc
c0010908:	68 91 3b 02 c0       	push   0xc0023b91
c001090d:	e8 ff 93 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010919:	eb 21                	jmp    c001093c <findRSDP()+0xd0>
c001091b:	90                   	nop
c001091c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0010921:	eb b9                	jmp    c00108dc <findRSDP()+0x70>
c0010923:	90                   	nop
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	68 9f 3b 02 c0       	push   0xc0023b9f
c001092c:	e8 e0 93 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	b8 00 00 00 00       	mov    eax,0x0
c0010939:	8d 76 00             	lea    esi,[esi+0x0]
c001093c:	83 c4 1c             	add    esp,0x1c
c001093f:	c3                   	ret    

c0010940 <loadACPITables(unsigned char*)>:
c0010940:	57                   	push   edi
c0010941:	56                   	push   esi
c0010942:	53                   	push   ebx
c0010943:	83 ec 60             	sub    esp,0x60
c0010946:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001094b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010951:	83 e0 04             	and    eax,0x4
c0010954:	84 c0                	test   al,al
c0010956:	0f 84 3c 02 00 00    	je     c0010b98 <loadACPITables(unsigned char*)+0x258>
c001095c:	a0 00 8b 02 c0       	mov    al,ds:0xc0028b00
c0010961:	84 c0                	test   al,al
c0010963:	74 77                	je     c00109dc <loadACPITables(unsigned char*)+0x9c>
c0010965:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010969:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001096d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010971:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010974:	83 e8 24             	sub    eax,0x24
c0010977:	c1 e8 03             	shr    eax,0x3
c001097a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001097e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0010986:	66 90                	xchg   ax,ax
c0010988:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001098c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0010990:	0f 8d b6 00 00 00    	jge    c0010a4c <loadACPITables(unsigned char*)+0x10c>
c0010996:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001099a:	83 c0 24             	add    eax,0x24
c001099d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00109a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00109a5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00109a9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00109ad:	c1 e0 03             	shl    eax,0x3
c00109b0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00109b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00109b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00109bd:	89 c1                	mov    ecx,eax
c00109bf:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c00109c4:	8d 50 01             	lea    edx,[eax+0x1]
c00109c7:	89 15 ec 88 02 c0    	mov    DWORD PTR ds:0xc00288ec,edx
c00109cd:	89 ca                	mov    edx,ecx
c00109cf:	89 14 c5 04 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76fc],edx
c00109d6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00109da:	eb ac                	jmp    c0010988 <loadACPITables(unsigned char*)+0x48>
c00109dc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00109e0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00109e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00109e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109eb:	83 e8 24             	sub    eax,0x24
c00109ee:	c1 e8 02             	shr    eax,0x2
c00109f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00109f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00109fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010a00:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010a04:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010a08:	7d 42                	jge    c0010a4c <loadACPITables(unsigned char*)+0x10c>
c0010a0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010a0e:	83 c0 24             	add    eax,0x24
c0010a11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010a15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010a19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010a1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010a21:	c1 e0 02             	shl    eax,0x2
c0010a24:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010a28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010a2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010a2e:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0010a33:	8d 50 01             	lea    edx,[eax+0x1]
c0010a36:	89 15 ec 88 02 c0    	mov    DWORD PTR ds:0xc00288ec,edx
c0010a3c:	89 ca                	mov    edx,ecx
c0010a3e:	89 14 c5 04 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76fc],edx
c0010a45:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0010a49:	eb b5                	jmp    c0010a00 <loadACPITables(unsigned char*)+0xc0>
c0010a4b:	90                   	nop
c0010a4c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0010a54:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0010a59:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0010a5d:	0f 8d 39 01 00 00    	jge    c0010b9c <loadACPITables(unsigned char*)+0x25c>
c0010a63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010a67:	8b 04 c5 04 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76fc]
c0010a6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	25 ff 0f 00 00       	and    eax,0xfff
c0010a83:	89 c6                	mov    esi,eax
c0010a85:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c0010a8b:	83 ec 0c             	sub    esp,0xc
c0010a8e:	6a 01                	push   0x1
c0010a90:	e8 d4 b1 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010a9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010aa2:	83 ec 0c             	sub    esp,0xc
c0010aa5:	6a 01                	push   0x1
c0010aa7:	6a 01                	push   0x1
c0010aa9:	50                   	push   eax
c0010aaa:	52                   	push   edx
c0010aab:	53                   	push   ebx
c0010aac:	e8 1b bb ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010ab1:	83 c4 20             	add    esp,0x20
c0010ab4:	09 f0                	or     eax,esi
c0010ab6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010aba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010abe:	c1 e0 03             	shl    eax,0x3
c0010ac1:	05 00 89 02 c0       	add    eax,0xc0028900
c0010ac6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010aca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ace:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ad2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ade:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010aea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010aee:	89 c6                	mov    esi,eax
c0010af0:	89 d7                	mov    edi,edx
c0010af2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af4:	89 c8                	mov    eax,ecx
c0010af6:	89 fa                	mov    edx,edi
c0010af8:	89 f3                	mov    ebx,esi
c0010afa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010afe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010b02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010b11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b15:	05 00 10 00 00       	add    eax,0x1000
c0010b1a:	c1 e8 0c             	shr    eax,0xc
c0010b1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010b29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b2d:	25 ff 0f 00 00       	and    eax,0xfff
c0010b32:	89 c6                	mov    esi,eax
c0010b34:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b41:	e8 23 b1 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010b4d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010b53:	83 ec 0c             	sub    esp,0xc
c0010b56:	6a 01                	push   0x1
c0010b58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010b5c:	50                   	push   eax
c0010b5d:	52                   	push   edx
c0010b5e:	53                   	push   ebx
c0010b5f:	e8 68 ba ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010b64:	83 c4 20             	add    esp,0x20
c0010b67:	09 f0                	or     eax,esi
c0010b69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b71:	83 ec 0c             	sub    esp,0xc
c0010b74:	50                   	push   eax
c0010b75:	e8 e3 b3 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010b81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010b85:	89 14 c5 04 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76fc],edx
c0010b8c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0010b90:	e9 bf fe ff ff       	jmp    c0010a54 <loadACPITables(unsigned char*)+0x114>
c0010b95:	8d 76 00             	lea    esi,[esi+0x0]
c0010b98:	90                   	nop
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]
c0010b9c:	83 c4 60             	add    esp,0x60
c0010b9f:	5b                   	pop    ebx
c0010ba0:	5e                   	pop    esi
c0010ba1:	5f                   	pop    edi
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <findRSDT(unsigned char*)>:
c0010ba4:	57                   	push   edi
c0010ba5:	56                   	push   esi
c0010ba6:	53                   	push   ebx
c0010ba7:	83 ec 50             	sub    esp,0x50
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	68 b3 3b 02 c0       	push   0xc0023bb3
c0010bb2:	e8 5a 91 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010bb7:	83 c4 10             	add    esp,0x10
c0010bba:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010bbf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bc5:	83 e0 04             	and    eax,0x4
c0010bc8:	84 c0                	test   al,al
c0010bca:	75 0c                	jne    c0010bd8 <findRSDT(unsigned char*)+0x34>
c0010bcc:	b8 00 00 00 00       	mov    eax,0x0
c0010bd1:	e9 86 01 00 00       	jmp    c0010d5c <findRSDT(unsigned char*)+0x1b8>
c0010bd6:	66 90                	xchg   ax,ax
c0010bd8:	83 ec 0c             	sub    esp,0xc
c0010bdb:	68 c5 3b 02 c0       	push   0xc0023bc5
c0010be0:	e8 2c 91 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010be5:	83 c4 10             	add    esp,0x10
c0010be8:	89 e0                	mov    eax,esp
c0010bea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010bee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010bf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010bf6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0010bfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010c02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010c0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0010c0e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0010c12:	89 c6                	mov    esi,eax
c0010c14:	89 d7                	mov    edi,edx
c0010c16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c18:	89 c8                	mov    eax,ecx
c0010c1a:	89 fa                	mov    edx,edi
c0010c1c:	89 f3                	mov    ebx,esi
c0010c1e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010c22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010c26:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	68 d7 3b 02 c0       	push   0xc0023bd7
c0010c32:	e8 da 90 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c3e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0010c42:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	68 e9 3b 02 c0       	push   0xc0023be9
c0010c52:	e8 ba 90 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010c57:	83 c4 10             	add    esp,0x10
c0010c5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010c5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010c62:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c6a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010c6e:	83 ec 04             	sub    esp,0x4
c0010c71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010c75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010c79:	68 60 3a 02 c0       	push   0xc0023a60
c0010c7e:	e8 42 c3 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010c8a:	25 ff 0f 00 00       	and    eax,0xfff
c0010c8f:	89 c6                	mov    esi,eax
c0010c91:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c0010c97:	83 ec 0c             	sub    esp,0xc
c0010c9a:	6a 02                	push   0x2
c0010c9c:	e8 c8 af ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010ca8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	6a 01                	push   0x1
c0010cb3:	6a 02                	push   0x2
c0010cb5:	50                   	push   eax
c0010cb6:	52                   	push   edx
c0010cb7:	53                   	push   ebx
c0010cb8:	e8 0f b9 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010cbd:	83 c4 20             	add    esp,0x20
c0010cc0:	09 f0                	or     eax,esi
c0010cc2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010cc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010cca:	25 ff 0f 00 00       	and    eax,0xfff
c0010ccf:	89 c6                	mov    esi,eax
c0010cd1:	8b 1d d4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d4
c0010cd7:	83 ec 0c             	sub    esp,0xc
c0010cda:	6a 02                	push   0x2
c0010cdc:	e8 88 af ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010ce8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	6a 01                	push   0x1
c0010cf3:	6a 02                	push   0x2
c0010cf5:	50                   	push   eax
c0010cf6:	52                   	push   edx
c0010cf7:	53                   	push   ebx
c0010cf8:	e8 cf b8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010cfd:	83 c4 20             	add    esp,0x20
c0010d00:	09 f0                	or     eax,esi
c0010d02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010d06:	83 ec 04             	sub    esp,0x4
c0010d09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010d0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010d11:	68 80 3a 02 c0       	push   0xc0023a80
c0010d16:	e8 aa c2 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010d1b:	83 c4 10             	add    esp,0x10
c0010d1e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0010d23:	75 13                	jne    c0010d38 <findRSDT(unsigned char*)+0x194>
c0010d25:	c6 05 00 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b00,0x0
c0010d2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010d34:	eb 22                	jmp    c0010d58 <findRSDT(unsigned char*)+0x1b4>
c0010d36:	66 90                	xchg   ax,ax
c0010d38:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0010d3d:	75 11                	jne    c0010d50 <findRSDT(unsigned char*)+0x1ac>
c0010d3f:	c6 05 00 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b00,0x1
c0010d46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010d4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010d4e:	eb 08                	jmp    c0010d58 <findRSDT(unsigned char*)+0x1b4>
c0010d50:	b8 00 00 00 00       	mov    eax,0x0
c0010d55:	eb 05                	jmp    c0010d5c <findRSDT(unsigned char*)+0x1b8>
c0010d57:	90                   	nop
c0010d58:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010d5c:	83 c4 50             	add    esp,0x50
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	c3                   	ret    
c0010d63:	90                   	nop

c0010d64 <findDataTable(unsigned char*, char*)>:
c0010d64:	83 ec 1c             	sub    esp,0x1c
c0010d67:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010d6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010d72:	83 e0 04             	and    eax,0x4
c0010d75:	84 c0                	test   al,al
c0010d77:	75 07                	jne    c0010d80 <findDataTable(unsigned char*, char*)+0x1c>
c0010d79:	b8 00 00 00 00       	mov    eax,0x0
c0010d7e:	eb 58                	jmp    c0010dd8 <findDataTable(unsigned char*, char*)+0x74>
c0010d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d88:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0010d8d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d91:	7d 3d                	jge    c0010dd0 <findDataTable(unsigned char*, char*)+0x6c>
c0010d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d97:	c1 e0 03             	shl    eax,0x3
c0010d9a:	05 00 89 02 c0       	add    eax,0xc0028900
c0010d9f:	83 ec 04             	sub    esp,0x4
c0010da2:	6a 04                	push   0x4
c0010da4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010da8:	50                   	push   eax
c0010da9:	e8 ca f7 fe ff       	call   c0000578 <memcmp>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	85 c0                	test   eax,eax
c0010db3:	0f 94 c0             	sete   al
c0010db6:	84 c0                	test   al,al
c0010db8:	74 0e                	je     c0010dc8 <findDataTable(unsigned char*, char*)+0x64>
c0010dba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dbe:	8b 04 c5 04 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76fc]
c0010dc5:	eb 11                	jmp    c0010dd8 <findDataTable(unsigned char*, char*)+0x74>
c0010dc7:	90                   	nop
c0010dc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010dcc:	eb ba                	jmp    c0010d88 <findDataTable(unsigned char*, char*)+0x24>
c0010dce:	66 90                	xchg   ax,ax
c0010dd0:	b8 00 00 00 00       	mov    eax,0x0
c0010dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd8:	83 c4 1c             	add    esp,0x1c
c0010ddb:	c3                   	ret    

c0010ddc <scanMADT()>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 38             	sub    esp,0x38
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	68 fb 3b 02 c0       	push   0xc0023bfb
c0010de8:	e8 24 8f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c0010df5:	25 00 04 00 00       	and    eax,0x400
c0010dfa:	74 14                	je     c0010e10 <scanMADT()+0x34>
c0010dfc:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010e01:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e07:	83 e2 fb             	and    edx,0xfffffffb
c0010e0a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010e10:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010e15:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010e1b:	83 e0 04             	and    eax,0x4
c0010e1e:	84 c0                	test   al,al
c0010e20:	0f 84 82 04 00 00    	je     c00112a8 <scanMADT()+0x4cc>
c0010e26:	83 ec 0c             	sub    esp,0xc
c0010e29:	68 08 3c 02 c0       	push   0xc0023c08
c0010e2e:	e8 de 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	e8 31 fa ff ff       	call   c001086c <findRSDP()>
c0010e3b:	a3 0c 8b 02 c0       	mov    ds:0xc0028b0c,eax
c0010e40:	a1 0c 8b 02 c0       	mov    eax,ds:0xc0028b0c
c0010e45:	85 c0                	test   eax,eax
c0010e47:	75 1b                	jne    c0010e64 <scanMADT()+0x88>
c0010e49:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010e4e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e54:	83 e2 fb             	and    edx,0xfffffffb
c0010e57:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010e5d:	e9 4e 04 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010e62:	66 90                	xchg   ax,ax
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	68 1a 3c 02 c0       	push   0xc0023c1a
c0010e6c:	e8 a0 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e71:	83 c4 10             	add    esp,0x10
c0010e74:	a1 0c 8b 02 c0       	mov    eax,ds:0xc0028b0c
c0010e79:	83 ec 0c             	sub    esp,0xc
c0010e7c:	50                   	push   eax
c0010e7d:	e8 22 fd ff ff       	call   c0010ba4 <findRSDT(unsigned char*)>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	a3 08 8b 02 c0       	mov    ds:0xc0028b08,eax
c0010e8a:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c0010e8f:	85 c0                	test   eax,eax
c0010e91:	75 19                	jne    c0010eac <scanMADT()+0xd0>
c0010e93:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010e98:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e9e:	83 e2 fb             	and    edx,0xfffffffb
c0010ea1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010ea7:	e9 04 04 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	68 2a 3c 02 c0       	push   0xc0023c2a
c0010eb4:	e8 58 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	50                   	push   eax
c0010ec5:	e8 76 fa ff ff       	call   c0010940 <loadACPITables(unsigned char*)>
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c0010ed2:	83 ec 08             	sub    esp,0x8
c0010ed5:	68 42 3c 02 c0       	push   0xc0023c42
c0010eda:	50                   	push   eax
c0010edb:	e8 84 fe ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010ee7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010eec:	75 1a                	jne    c0010f08 <scanMADT()+0x12c>
c0010eee:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0010ef3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010ef9:	83 e2 fe             	and    edx,0xfffffffe
c0010efc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010f02:	e9 a9 03 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010f07:	90                   	nop
c0010f08:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010f10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f17:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010f1b:	0f 87 8f 03 00 00    	ja     c00112b0 <scanMADT()+0x4d4>
c0010f21:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010f29:	0f 87 81 03 00 00    	ja     c00112b0 <scanMADT()+0x4d4>
c0010f2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010f37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f3b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010f46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010f4a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0010f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f52:	8d 50 01             	lea    edx,[eax+0x1]
c0010f55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010f5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010f61:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0010f65:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0010f6a:	0f 86 3c 03 00 00    	jbe    c00112ac <scanMADT()+0x4d0>
c0010f70:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0010f75:	75 59                	jne    c0010fd0 <scanMADT()+0x1f4>
c0010f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f82:	8a 15 00 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d00
c0010f88:	0f b6 d2             	movzx  edx,dl
c0010f8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010f8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010f93:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c0010f99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0010fa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010fa4:	8a 15 00 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d00
c0010faa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fad:	88 0d 00 8d 02 c0    	mov    BYTE PTR ds:0xc0028d00,cl
c0010fb3:	0f b6 d2             	movzx  edx,dl
c0010fb6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010fba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010fbe:	88 82 20 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72e0],al
c0010fc4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010fc9:	e9 c6 02 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c0010fce:	66 90                	xchg   ax,ax
c0010fd0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010fd5:	0f 85 15 01 00 00    	jne    c00110f0 <scanMADT()+0x314>
c0010fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0010fe2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010fe6:	8a 15 c0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028bc0
c0010fec:	0f b6 d2             	movzx  edx,dl
c0010fef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010ff3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010ff7:	88 82 e0 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd7420],al
c0010ffd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011009:	01 d0                	add    eax,edx
c001100b:	83 c0 2c             	add    eax,0x2c
c001100e:	8a 00                	mov    al,BYTE PTR [eax]
c0011010:	0f b6 d0             	movzx  edx,al
c0011013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011017:	8d 48 01             	lea    ecx,[eax+0x1]
c001101a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001101e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011022:	0f b6 c0             	movzx  eax,al
c0011025:	c1 e0 08             	shl    eax,0x8
c0011028:	89 d1                	mov    ecx,edx
c001102a:	09 c1                	or     ecx,eax
c001102c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011030:	8d 50 02             	lea    edx,[eax+0x2]
c0011033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011037:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001103b:	0f b6 c0             	movzx  eax,al
c001103e:	c1 e0 10             	shl    eax,0x10
c0011041:	09 c1                	or     ecx,eax
c0011043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011047:	8d 50 03             	lea    edx,[eax+0x3]
c001104a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001104e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011052:	0f b6 c0             	movzx  eax,al
c0011055:	c1 e0 18             	shl    eax,0x18
c0011058:	09 c1                	or     ecx,eax
c001105a:	89 ca                	mov    edx,ecx
c001105c:	a0 c0 8b 02 c0       	mov    al,ds:0xc0028bc0
c0011061:	0f b6 c0             	movzx  eax,al
c0011064:	89 14 85 00 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7400],edx
c001106b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011070:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011078:	01 d0                	add    eax,edx
c001107a:	83 c0 2c             	add    eax,0x2c
c001107d:	8a 00                	mov    al,BYTE PTR [eax]
c001107f:	0f b6 d0             	movzx  edx,al
c0011082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011086:	8d 48 01             	lea    ecx,[eax+0x1]
c0011089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001108d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011091:	0f b6 c0             	movzx  eax,al
c0011094:	c1 e0 08             	shl    eax,0x8
c0011097:	89 d1                	mov    ecx,edx
c0011099:	09 c1                	or     ecx,eax
c001109b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001109f:	8d 50 02             	lea    edx,[eax+0x2]
c00110a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00110aa:	0f b6 c0             	movzx  eax,al
c00110ad:	c1 e0 10             	shl    eax,0x10
c00110b0:	09 c1                	or     ecx,eax
c00110b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b6:	8d 50 03             	lea    edx,[eax+0x3]
c00110b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00110c1:	0f b6 c0             	movzx  eax,al
c00110c4:	c1 e0 18             	shl    eax,0x18
c00110c7:	09 c1                	or     ecx,eax
c00110c9:	89 ca                	mov    edx,ecx
c00110cb:	a0 c0 8b 02 c0       	mov    al,ds:0xc0028bc0
c00110d0:	0f b6 c0             	movzx  eax,al
c00110d3:	89 14 85 80 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7380],edx
c00110da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00110df:	a0 c0 8b 02 c0       	mov    al,ds:0xc0028bc0
c00110e4:	40                   	inc    eax
c00110e5:	a2 c0 8b 02 c0       	mov    ds:0xc0028bc0,al
c00110ea:	e9 a5 01 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c00110ef:	90                   	nop
c00110f0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00110f5:	0f 85 e9 00 00 00    	jne    c00111e4 <scanMADT()+0x408>
c00110fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110ff:	8d 50 01             	lea    edx,[eax+0x1]
c0011102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001110a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001110e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011116:	8d 50 01             	lea    edx,[eax+0x1]
c0011119:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001111d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011121:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011125:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001112d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011131:	01 d0                	add    eax,edx
c0011133:	83 c0 2c             	add    eax,0x2c
c0011136:	8a 00                	mov    al,BYTE PTR [eax]
c0011138:	0f b6 d0             	movzx  edx,al
c001113b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001113f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011146:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001114a:	0f b6 c0             	movzx  eax,al
c001114d:	c1 e0 08             	shl    eax,0x8
c0011150:	89 d1                	mov    ecx,edx
c0011152:	09 c1                	or     ecx,eax
c0011154:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011158:	8d 50 02             	lea    edx,[eax+0x2]
c001115b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001115f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011163:	0f b6 c0             	movzx  eax,al
c0011166:	c1 e0 10             	shl    eax,0x10
c0011169:	09 c1                	or     ecx,eax
c001116b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001116f:	8d 50 03             	lea    edx,[eax+0x3]
c0011172:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011176:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001117a:	0f b6 c0             	movzx  eax,al
c001117d:	c1 e0 18             	shl    eax,0x18
c0011180:	09 c8                	or     eax,ecx
c0011182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011186:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001118b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001118f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011193:	01 d0                	add    eax,edx
c0011195:	83 c0 2c             	add    eax,0x2c
c0011198:	8a 00                	mov    al,BYTE PTR [eax]
c001119a:	0f b6 c0             	movzx  eax,al
c001119d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00111a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00111a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00111a8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00111ac:	0f b6 d2             	movzx  edx,dl
c00111af:	c1 e2 08             	shl    edx,0x8
c00111b2:	09 d0                	or     eax,edx
c00111b4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00111b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00111be:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00111c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111c7:	88 90 c0 59 02 c0    	mov    BYTE PTR [eax-0x3ffda640],dl
c00111cd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00111d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00111d7:	66 89 84 12 a0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7460],ax
c00111df:	e9 b0 00 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c00111e4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00111e9:	0f 85 99 00 00 00    	jne    c0011288 <scanMADT()+0x4ac>
c00111ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111f3:	8d 50 01             	lea    edx,[eax+0x1]
c00111f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00111fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00111fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011202:	0f b6 c0             	movzx  eax,al
c0011205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011209:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001120d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011211:	01 d0                	add    eax,edx
c0011213:	83 c0 2c             	add    eax,0x2c
c0011216:	8a 00                	mov    al,BYTE PTR [eax]
c0011218:	0f b6 d0             	movzx  edx,al
c001121b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001121f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011222:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011226:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001122a:	0f b6 c0             	movzx  eax,al
c001122d:	c1 e0 08             	shl    eax,0x8
c0011230:	09 d0                	or     eax,edx
c0011232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011236:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001123b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001123f:	8d 50 01             	lea    edx,[eax+0x1]
c0011242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011246:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001124a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001124e:	0f b6 c0             	movzx  eax,al
c0011251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c1 e0 08             	shl    eax,0x8
c001125c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011260:	89 c1                	mov    ecx,eax
c0011262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011266:	c1 e0 18             	shl    eax,0x18
c0011269:	89 c3                	mov    ebx,eax
c001126b:	a1 10 8b 02 c0       	mov    eax,ds:0xc0028b10
c0011270:	8d 50 01             	lea    edx,[eax+0x1]
c0011273:	89 15 10 8b 02 c0    	mov    DWORD PTR ds:0xc0028b10,edx
c0011279:	09 d9                	or     ecx,ebx
c001127b:	89 ca                	mov    edx,ecx
c001127d:	89 14 85 20 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74e0],edx
c0011284:	eb 0e                	jmp    c0011294 <scanMADT()+0x4b8>
c0011286:	66 90                	xchg   ax,ax
c0011288:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001128d:	75 05                	jne    c0011294 <scanMADT()+0x4b8>
c001128f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011294:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001129d:	01 d0                	add    eax,edx
c001129f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00112a3:	e9 68 fc ff ff       	jmp    c0010f10 <scanMADT()+0x134>
c00112a8:	90                   	nop
c00112a9:	eb 05                	jmp    c00112b0 <scanMADT()+0x4d4>
c00112ab:	90                   	nop
c00112ac:	90                   	nop
c00112ad:	8d 76 00             	lea    esi,[esi+0x0]
c00112b0:	83 c4 38             	add    esp,0x38
c00112b3:	5b                   	pop    ebx
c00112b4:	c3                   	ret    
c00112b5:	90                   	nop
c00112b6:	66 90                	xchg   ax,ax

c00112b8 <ACPI::ACPI()>:
c00112b8:	83 ec 0c             	sub    esp,0xc
c00112bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bf:	83 ec 08             	sub    esp,0x8
c00112c2:	68 47 3c 02 c0       	push   0xc0023c47
c00112c7:	50                   	push   eax
c00112c8:	e8 79 d3 ff ff       	call   c000e646 <Device::Device(char const*)>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	ba 08 3e 02 c0       	mov    edx,0xc0023e08
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	89 10                	mov    DWORD PTR [eax],edx
c00112db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00112e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ea:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00112f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011302:	83 ec 0c             	sub    esp,0xc
c0011305:	68 4c 3c 02 c0       	push   0xc0023c4c
c001130a:	e8 02 8a ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	e8 c5 fa ff ff       	call   c0010ddc <scanMADT()>
c0011317:	90                   	nop
c0011318:	83 c4 0c             	add    esp,0xc
c001131b:	c3                   	ret    

c001131c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001131c:	83 ec 2c             	sub    esp,0x2c
c001131f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011327:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001132b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001132f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011334:	88 d0                	mov    al,dl
c0011336:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001133a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001133f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011347:	90                   	nop
c0011348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001134c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011352:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011356:	0f 8d 9c 00 00 00    	jge    c00113f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c001135c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011360:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011364:	83 c2 2a             	add    edx,0x2a
c0011367:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001136b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011370:	75 7a                	jne    c00113ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011372:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011376:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001137a:	83 c2 2a             	add    edx,0x2a
c001137d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011381:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011385:	75 65                	jne    c00113ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011387:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001138c:	74 3a                	je     c00113c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001138e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011392:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011396:	83 c2 2a             	add    edx,0x2a
c0011399:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001139d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a4:	39 c2                	cmp    edx,eax
c00113a6:	74 10                	je     c00113b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	68 a0 3a 02 c0       	push   0xc0023aa0
c00113b0:	e8 c2 1f 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	68 5a 3c 02 c0       	push   0xc0023c5a
c00113c0:	e8 b2 1f 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00113cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00113d4:	83 c2 2a             	add    edx,0x2a
c00113d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00113db:	8b 02                	mov    eax,DWORD PTR [edx]
c00113dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00113e0:	89 01                	mov    DWORD PTR [ecx],eax
c00113e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00113e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00113ea:	66 90                	xchg   ax,ax
c00113ec:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00113f0:	e9 53 ff ff ff       	jmp    c0011348 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00113f5:	8d 76 00             	lea    esi,[esi+0x0]
c00113f8:	90                   	nop
c00113f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113fd:	83 c4 2c             	add    esp,0x2c
c0011400:	c2 04 00             	ret    0x4
c0011403:	90                   	nop

c0011404 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011404:	83 ec 1c             	sub    esp,0x1c
c0011407:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001140b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001140f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011413:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011418:	88 c8                	mov    al,cl
c001141a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001141e:	88 d0                	mov    al,dl
c0011420:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011428:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001142e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011432:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011435:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011439:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001143d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011441:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011447:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001144b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001144e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011452:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001145b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011461:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011465:	8d 48 01             	lea    ecx,[eax+0x1]
c0011468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001146c:	83 c2 2a             	add    edx,0x2a
c001146f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011477:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001147d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011481:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011484:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011488:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011490:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011496:	8d 50 01             	lea    edx,[eax+0x1]
c0011499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001149d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00114a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00114ad:	3d 00 02 00 00       	cmp    eax,0x200
c00114b2:	75 10                	jne    c00114c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	68 69 3c 02 c0       	push   0xc0023c69
c00114bc:	e8 b6 1e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	90                   	nop
c00114c5:	83 c4 1c             	add    esp,0x1c
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop
c00114ca:	66 90                	xchg   ax,ax

c00114cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00114cc:	b8 00 00 00 00       	mov    eax,0x0
c00114d1:	c3                   	ret    
c00114d2:	66 90                	xchg   ax,ax

c00114d4 <ACPI::detectPCI()>:
c00114d4:	53                   	push   ebx
c00114d5:	83 ec 68             	sub    esp,0x68
c00114d8:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00114dd:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00114e2:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00114e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114ed:	83 e0 04             	and    eax,0x4
c00114f0:	84 c0                	test   al,al
c00114f2:	74 2c                	je     c0011520 <ACPI::detectPCI()+0x4c>
c00114f4:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c00114f9:	83 ec 08             	sub    esp,0x8
c00114fc:	68 86 3c 02 c0       	push   0xc0023c86
c0011501:	50                   	push   eax
c0011502:	e8 5d f8 ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0011507:	83 c4 10             	add    esp,0x10
c001150a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001150e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0011513:	74 0b                	je     c0011520 <ACPI::detectPCI()+0x4c>
c0011515:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001151a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001151f:	90                   	nop
c0011520:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0011528:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001152c:	8a 00                	mov    al,BYTE PTR [eax]
c001152e:	3c 01                	cmp    al,0x1
c0011530:	75 0e                	jne    c0011540 <ACPI::detectPCI()+0x6c>
c0011532:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011537:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001153c:	eb 2a                	jmp    c0011568 <ACPI::detectPCI()+0x94>
c001153e:	66 90                	xchg   ax,ax
c0011540:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011544:	8a 00                	mov    al,BYTE PTR [eax]
c0011546:	3c 02                	cmp    al,0x2
c0011548:	75 1e                	jne    c0011568 <ACPI::detectPCI()+0x94>
c001154a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001154f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011554:	74 12                	je     c0011568 <ACPI::detectPCI()+0x94>
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 d0 3a 02 c0       	push   0xc0023ad0
c001155e:	e8 14 1e 00 00       	call   c0013377 <Krnl::panic(char const*)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	66 90                	xchg   ax,ax
c0011568:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001156c:	83 f0 01             	xor    eax,0x1
c001156f:	84 c0                	test   al,al
c0011571:	74 41                	je     c00115b4 <ACPI::detectPCI()+0xe0>
c0011573:	e8 d8 eb fe ff       	call   c0000150 <manualPCIProbe>
c0011578:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001157c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0011581:	75 0d                	jne    c0011590 <ACPI::detectPCI()+0xbc>
c0011583:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011588:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001158d:	eb 25                	jmp    c00115b4 <ACPI::detectPCI()+0xe0>
c001158f:	90                   	nop
c0011590:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0011595:	75 1d                	jne    c00115b4 <ACPI::detectPCI()+0xe0>
c0011597:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001159c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00115a1:	74 11                	je     c00115b4 <ACPI::detectPCI()+0xe0>
c00115a3:	83 ec 0c             	sub    esp,0xc
c00115a6:	68 d0 3a 02 c0       	push   0xc0023ad0
c00115ab:	e8 c7 1d 00 00       	call   c0013377 <Krnl::panic(char const*)>
c00115b0:	83 c4 10             	add    esp,0x10
c00115b3:	90                   	nop
c00115b4:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00115b9:	0f 84 49 03 00 00    	je     c0011908 <ACPI::detectPCI()+0x434>
c00115bf:	83 ec 0c             	sub    esp,0xc
c00115c2:	68 8b 3c 02 c0       	push   0xc0023c8b
c00115c7:	e8 45 87 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00115d4:	0f 84 8e 00 00 00    	je     c0011668 <ACPI::detectPCI()+0x194>
c00115da:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c00115df:	25 00 08 00 00       	and    eax,0x800
c00115e4:	0f 84 16 01 00 00    	je     c0011700 <ACPI::detectPCI()+0x22c>
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	68 f8 3a 02 c0       	push   0xc0023af8
c00115f2:	e8 1a 87 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c00115ff:	25 80 00 00 00       	and    eax,0x80
c0011604:	0f 85 f6 00 00 00    	jne    c0011700 <ACPI::detectPCI()+0x22c>
c001160a:	66 90                	xchg   ax,ax
c001160c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0011613:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0011618:	89 c2                	mov    edx,eax
c001161a:	ec                   	in     al,dx
c001161b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001161f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0011623:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0011627:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c001162c:	74 0a                	je     c0011638 <ACPI::detectPCI()+0x164>
c001162e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0011633:	74 03                	je     c0011638 <ACPI::detectPCI()+0x164>
c0011635:	eb d5                	jmp    c001160c <ACPI::detectPCI()+0x138>
c0011637:	90                   	nop
c0011638:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001163f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0011644:	89 c2                	mov    edx,eax
c0011646:	ec                   	in     al,dx
c0011647:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001164b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001164f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0011653:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0011658:	74 de                	je     c0011638 <ACPI::detectPCI()+0x164>
c001165a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001165f:	0f 85 93 00 00 00    	jne    c00116f8 <ACPI::detectPCI()+0x224>
c0011665:	eb d1                	jmp    c0011638 <ACPI::detectPCI()+0x164>
c0011667:	90                   	nop
c0011668:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c001166c:	83 f0 01             	xor    eax,0x1
c001166f:	84 c0                	test   al,al
c0011671:	0f 84 89 00 00 00    	je     c0011700 <ACPI::detectPCI()+0x22c>
c0011677:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c001167c:	25 00 08 00 00       	and    eax,0x800
c0011681:	74 7d                	je     c0011700 <ACPI::detectPCI()+0x22c>
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	68 1c 3b 02 c0       	push   0xc0023b1c
c001168b:	e8 81 86 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c0011698:	25 80 00 00 00       	and    eax,0x80
c001169d:	75 61                	jne    c0011700 <ACPI::detectPCI()+0x22c>
c001169f:	90                   	nop
c00116a0:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00116a7:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00116ac:	89 c2                	mov    edx,eax
c00116ae:	ec                   	in     al,dx
c00116af:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00116b3:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00116b7:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00116bb:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00116c0:	74 0a                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116c2:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00116c7:	74 03                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116c9:	eb d5                	jmp    c00116a0 <ACPI::detectPCI()+0x1cc>
c00116cb:	90                   	nop
c00116cc:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00116d3:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00116d8:	89 c2                	mov    edx,eax
c00116da:	ec                   	in     al,dx
c00116db:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00116df:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00116e3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00116e7:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00116ec:	74 de                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116ee:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00116f3:	75 07                	jne    c00116fc <ACPI::detectPCI()+0x228>
c00116f5:	eb d5                	jmp    c00116cc <ACPI::detectPCI()+0x1f8>
c00116f7:	90                   	nop
c00116f8:	90                   	nop
c00116f9:	eb 05                	jmp    c0011700 <ACPI::detectPCI()+0x22c>
c00116fb:	90                   	nop
c00116fc:	90                   	nop
c00116fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011700:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0011708:	83 ec 0c             	sub    esp,0xc
c001170b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001170f:	e8 a3 85 ff ff       	call   c0009cb7 <malloc>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	89 c3                	mov    ebx,eax
c0011719:	83 ec 0c             	sub    esp,0xc
c001171c:	53                   	push   ebx
c001171d:	e8 70 b2 00 00       	call   c001c992 <PCI::PCI()>
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0011729:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c001172e:	25 00 08 00 00       	and    eax,0x800
c0011733:	74 7b                	je     c00117b0 <ACPI::detectPCI()+0x2dc>
c0011735:	83 ec 0c             	sub    esp,0xc
c0011738:	68 a3 3c 02 c0       	push   0xc0023ca3
c001173d:	e8 cf 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c001174a:	25 80 00 00 00       	and    eax,0x80
c001174f:	75 5f                	jne    c00117b0 <ACPI::detectPCI()+0x2dc>
c0011751:	8d 76 00             	lea    esi,[esi+0x0]
c0011754:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001175b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0011760:	89 c2                	mov    edx,eax
c0011762:	ec                   	in     al,dx
c0011763:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0011767:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001176b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001176f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0011774:	74 0a                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c0011776:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001177b:	74 03                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c001177d:	eb d5                	jmp    c0011754 <ACPI::detectPCI()+0x280>
c001177f:	90                   	nop
c0011780:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0011787:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c001178c:	89 c2                	mov    edx,eax
c001178e:	ec                   	in     al,dx
c001178f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011793:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0011797:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001179b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00117a0:	74 de                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c00117a2:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00117a7:	75 03                	jne    c00117ac <ACPI::detectPCI()+0x2d8>
c00117a9:	eb d5                	jmp    c0011780 <ACPI::detectPCI()+0x2ac>
c00117ab:	90                   	nop
c00117ac:	90                   	nop
c00117ad:	8d 76 00             	lea    esi,[esi+0x0]
c00117b0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00117bb:	50                   	push   eax
c00117bc:	e8 81 cc ff ff       	call   c000e442 <Device::addChild(Device*)>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c00117c9:	25 00 08 00 00       	and    eax,0x800
c00117ce:	74 78                	je     c0011848 <ACPI::detectPCI()+0x374>
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	68 a9 3c 02 c0       	push   0xc0023ca9
c00117d8:	e8 34 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c00117e5:	25 80 00 00 00       	and    eax,0x80
c00117ea:	75 5c                	jne    c0011848 <ACPI::detectPCI()+0x374>
c00117ec:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00117f3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00117f8:	89 c2                	mov    edx,eax
c00117fa:	ec                   	in     al,dx
c00117fb:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00117ff:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011803:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0011807:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c001180c:	74 0a                	je     c0011818 <ACPI::detectPCI()+0x344>
c001180e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0011813:	74 03                	je     c0011818 <ACPI::detectPCI()+0x344>
c0011815:	eb d5                	jmp    c00117ec <ACPI::detectPCI()+0x318>
c0011817:	90                   	nop
c0011818:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c001181f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011824:	89 c2                	mov    edx,eax
c0011826:	ec                   	in     al,dx
c0011827:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001182b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001182f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0011833:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0011838:	74 de                	je     c0011818 <ACPI::detectPCI()+0x344>
c001183a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c001183f:	75 03                	jne    c0011844 <ACPI::detectPCI()+0x370>
c0011841:	eb d5                	jmp    c0011818 <ACPI::detectPCI()+0x344>
c0011843:	90                   	nop
c0011844:	90                   	nop
c0011845:	8d 76 00             	lea    esi,[esi+0x0]
c0011848:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001184c:	8b 00                	mov    eax,DWORD PTR [eax]
c001184e:	83 c0 08             	add    eax,0x8
c0011851:	8b 00                	mov    eax,DWORD PTR [eax]
c0011853:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011858:	74 0a                	je     c0011864 <ACPI::detectPCI()+0x390>
c001185a:	ba 01 00 00 00       	mov    edx,0x1
c001185f:	eb 0b                	jmp    c001186c <ACPI::detectPCI()+0x398>
c0011861:	8d 76 00             	lea    esi,[esi+0x0]
c0011864:	ba 02 00 00 00       	mov    edx,0x2
c0011869:	8d 76 00             	lea    esi,[esi+0x0]
c001186c:	6a 00                	push   0x0
c001186e:	6a 00                	push   0x0
c0011870:	52                   	push   edx
c0011871:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011875:	ff d0                	call   eax
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c001187f:	25 00 08 00 00       	and    eax,0x800
c0011884:	0f 84 26 01 00 00    	je     c00119b0 <ACPI::detectPCI()+0x4dc>
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	68 af 3c 02 c0       	push   0xc0023caf
c0011892:	e8 7a 84 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c001189f:	25 80 00 00 00       	and    eax,0x80
c00118a4:	0f 85 06 01 00 00    	jne    c00119b0 <ACPI::detectPCI()+0x4dc>
c00118aa:	66 90                	xchg   ax,ax
c00118ac:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c00118b3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00118b8:	89 c2                	mov    edx,eax
c00118ba:	ec                   	in     al,dx
c00118bb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00118bf:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00118c3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00118c7:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00118cc:	74 0a                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118ce:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00118d3:	74 03                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118d5:	eb d5                	jmp    c00118ac <ACPI::detectPCI()+0x3d8>
c00118d7:	90                   	nop
c00118d8:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00118df:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00118e4:	89 c2                	mov    edx,eax
c00118e6:	ec                   	in     al,dx
c00118e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00118eb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00118ef:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00118f3:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c00118f8:	74 de                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118fa:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c00118ff:	0f 85 a7 00 00 00    	jne    c00119ac <ACPI::detectPCI()+0x4d8>
c0011905:	eb d1                	jmp    c00118d8 <ACPI::detectPCI()+0x404>
c0011907:	90                   	nop
c0011908:	83 ec 0c             	sub    esp,0xc
c001190b:	68 b5 3c 02 c0       	push   0xc0023cb5
c0011910:	e8 b0 b6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	83 ec 0c             	sub    esp,0xc
c001191b:	68 c0 3c 02 c0       	push   0xc0023cc0
c0011920:	e8 ec 83 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0011930:	83 ec 0c             	sub    esp,0xc
c0011933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011937:	e8 7b 83 ff ff       	call   c0009cb7 <malloc>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	89 c3                	mov    ebx,eax
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	53                   	push   ebx
c0011945:	e8 b2 c1 00 00       	call   c001dafc <IDE::IDE()>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011951:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011955:	83 ec 08             	sub    esp,0x8
c0011958:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001195c:	50                   	push   eax
c001195d:	e8 e0 ca ff ff       	call   c000e442 <Device::addChild(Device*)>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011969:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0011973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011977:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0011980:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011984:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001198d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011991:	8b 00                	mov    eax,DWORD PTR [eax]
c0011993:	83 c0 08             	add    eax,0x8
c0011996:	8b 00                	mov    eax,DWORD PTR [eax]
c0011998:	6a 00                	push   0x0
c001199a:	6a 00                	push   0x0
c001199c:	6a 00                	push   0x0
c001199e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119a2:	ff d0                	call   eax
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	eb 07                	jmp    c00119b0 <ACPI::detectPCI()+0x4dc>
c00119a9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ac:	90                   	nop
c00119ad:	8d 76 00             	lea    esi,[esi+0x0]
c00119b0:	90                   	nop
c00119b1:	83 c4 68             	add    esp,0x68
c00119b4:	5b                   	pop    ebx
c00119b5:	c3                   	ret    
c00119b6:	66 90                	xchg   ax,ax

c00119b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00119b8:	83 ec 1c             	sub    esp,0x1c
c00119bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00119bf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00119c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119c6:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00119cb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	52                   	push   edx
c00119d4:	50                   	push   eax
c00119d5:	e8 40 79 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00119e1:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00119e6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00119eb:	83 ec 04             	sub    esp,0x4
c00119ee:	6a 01                	push   0x1
c00119f0:	52                   	push   edx
c00119f1:	50                   	push   eax
c00119f2:	e8 49 7a ff ff       	call   c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	90                   	nop
c00119fb:	83 c4 1c             	add    esp,0x1c
c00119fe:	c3                   	ret    
c00119ff:	90                   	nop

c0011a00 <ACPI::sleep()>:
c0011a00:	83 ec 0c             	sub    esp,0xc
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 d5 3c 02 c0       	push   0xc0023cd5
c0011a0b:	e8 b5 b5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	a1 e0 88 02 c0       	mov    eax,ds:0xc00288e0
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	74 18                	je     c0011a34 <ACPI::sleep()+0x34>
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	68 e2 3c 02 c0       	push   0xc0023ce2
c0011a24:	e8 9c b5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	a1 e0 88 02 c0       	mov    eax,ds:0xc00288e0
c0011a31:	ff d0                	call   eax
c0011a33:	90                   	nop
c0011a34:	90                   	nop
c0011a35:	83 c4 0c             	add    esp,0xc
c0011a38:	c3                   	ret    
c0011a39:	90                   	nop
c0011a3a:	66 90                	xchg   ax,ax

c0011a3c <ACPI::open(int, int, void*)>:
c0011a3c:	57                   	push   edi
c0011a3d:	56                   	push   esi
c0011a3e:	53                   	push   ebx
c0011a3f:	81 ec 70 01 00 00    	sub    esp,0x170
c0011a45:	83 ec 0c             	sub    esp,0xc
c0011a48:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011a4f:	e8 80 fa ff ff       	call   c00114d4 <ACPI::detectPCI()>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 40 3b 02 c0       	push   0xc0023b40
c0011a5f:	e8 ad 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	68 fc 3c 02 c0       	push   0xc0023cfc
c0011a6f:	e8 11 3b 00 00       	call   c0015585 <Thr::loadKernelSymbolTable(char const*)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0011a7f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0011a8a:	83 ec 0c             	sub    esp,0xc
c0011a8d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011a94:	e8 1e 82 ff ff       	call   c0009cb7 <malloc>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	89 c3                	mov    ebx,eax
c0011a9e:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0011aa3:	83 ec 04             	sub    esp,0x4
c0011aa6:	50                   	push   eax
c0011aa7:	68 1a 3d 02 c0       	push   0xc0023d1a
c0011aac:	53                   	push   ebx
c0011aad:	e8 7e ba ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011abc:	83 ec 08             	sub    esp,0x8
c0011abf:	6a 01                	push   0x1
c0011ac1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011ac8:	e8 3d bb ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0011ad7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0011adf:	75 17                	jne    c0011af8 <ACPI::open(int, int, void*)+0xbc>
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011aeb:	e8 78 bb ff ff       	call   c000d668 <File::close()>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	eb 0b                	jmp    c0011b00 <ACPI::open(int, int, void*)+0xc4>
c0011af5:	8d 76 00             	lea    esi,[esi+0x0]
c0011af8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0011b00:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011b08:	74 1e                	je     c0011b28 <ACPI::open(int, int, void*)+0xec>
c0011b0a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0011b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b13:	83 c0 08             	add    eax,0x8
c0011b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011b22:	ff d0                	call   eax
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	90                   	nop
c0011b28:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0011b2f:	83 f0 01             	xor    eax,0x1
c0011b32:	84 c0                	test   al,al
c0011b34:	74 42                	je     c0011b78 <ACPI::open(int, int, void*)+0x13c>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	68 38 3d 02 c0       	push   0xc0023d38
c0011b3e:	e8 ce 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	83 ec 04             	sub    esp,0x4
c0011b49:	6a 0c                	push   0xc
c0011b4b:	68 53 3d 02 c0       	push   0xc0023d53
c0011b50:	68 64 3d 02 c0       	push   0xc0023d64
c0011b55:	e8 95 20 00 00       	call   c0013bef <Reg::readIntWithDefault(char*, char*, int)>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0011b64:	83 ec 0c             	sub    esp,0xc
c0011b67:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0011b6e:	e8 00 a3 ff ff       	call   c000be73 <Virt::setupPageSwapping(int)>
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	66 90                	xchg   ax,ax
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	68 46 27 02 c0       	push   0xc0022746
c0011b80:	e8 8c 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0011b8e:	83 ec 08             	sub    esp,0x8
c0011b91:	6a 01                	push   0x1
c0011b93:	68 6b 3d 02 c0       	push   0xc0023d6b
c0011b98:	e8 5f 44 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	83 ec 08             	sub    esp,0x8
c0011ba3:	53                   	push   ebx
c0011ba4:	50                   	push   eax
c0011ba5:	e8 83 46 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	6a 12                	push   0x12
c0011bb9:	50                   	push   eax
c0011bba:	e8 07 cc ff ff       	call   c000e7c6 <getDevicesOfType(DeviceType)>
c0011bbf:	83 c4 0c             	add    esp,0xc
c0011bc2:	66 90                	xchg   ax,ax
c0011bc4:	83 ec 0c             	sub    esp,0xc
c0011bc7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011bce:	50                   	push   eax
c0011bcf:	e8 48 ff 00 00       	call   c0021b1c <LinkedList<Device>::isEmpty()>
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	83 f0 01             	xor    eax,0x1
c0011bda:	84 c0                	test   al,al
c0011bdc:	0f 84 46 01 00 00    	je     c0011d28 <ACPI::open(int, int, void*)+0x2ec>
c0011be2:	83 ec 0c             	sub    esp,0xc
c0011be5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011bec:	50                   	push   eax
c0011bed:	e8 46 ff 00 00       	call   c0021b38 <LinkedList<Device>::getFirstElement()>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0011bfc:	83 ec 0c             	sub    esp,0xc
c0011bff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011c06:	50                   	push   eax
c0011c07:	e8 34 ff 00 00       	call   c0021b40 <LinkedList<Device>::removeFirst()>
c0011c0c:	83 c4 10             	add    esp,0x10
c0011c0f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0011c16:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011c1d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0011c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c28:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0011c2e:	ba 09 00 00 00       	mov    edx,0x9
c0011c33:	fc                   	cld    
c0011c34:	89 c7                	mov    edi,eax
c0011c36:	89 de                	mov    esi,ebx
c0011c38:	89 d1                	mov    ecx,edx
c0011c3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011c3c:	83 ec 08             	sub    esp,0x8
c0011c3f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0011c43:	50                   	push   eax
c0011c44:	83 ec 24             	sub    esp,0x24
c0011c47:	89 e0                	mov    eax,esp
c0011c49:	89 c3                	mov    ebx,eax
c0011c4b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011c4f:	ba 09 00 00 00       	mov    edx,0x9
c0011c54:	89 df                	mov    edi,ebx
c0011c56:	89 c6                	mov    esi,eax
c0011c58:	89 d1                	mov    ecx,edx
c0011c5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011c5c:	e8 0f b2 00 00       	call   c001ce70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0011c61:	83 c4 30             	add    esp,0x30
c0011c64:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0011c6b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0011c73:	0f 84 4b ff ff ff    	je     c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011c79:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0011c84:	83 ec 0c             	sub    esp,0xc
c0011c87:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011c8e:	e8 24 80 ff ff       	call   c0009cb7 <malloc>
c0011c93:	83 c4 10             	add    esp,0x10
c0011c96:	89 c3                	mov    ebx,eax
c0011c98:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0011c9d:	83 ec 04             	sub    esp,0x4
c0011ca0:	50                   	push   eax
c0011ca1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011ca8:	53                   	push   ebx
c0011ca9:	e8 82 b8 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011cc2:	e8 b1 bb ff ff       	call   c000d878 <File::exists()>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	84 c0                	test   al,al
c0011ccc:	74 2a                	je     c0011cf8 <ACPI::open(int, int, void*)+0x2bc>
c0011cce:	83 ec 08             	sub    esp,0x8
c0011cd1:	6a 01                	push   0x1
c0011cd3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011cda:	e8 1d 43 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	83 ec 08             	sub    esp,0x8
c0011ce5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011cec:	50                   	push   eax
c0011ced:	e8 3b 45 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cf8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0011d00:	0f 84 be fe ff ff    	je     c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011d06:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	83 c0 08             	add    eax,0x8
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	83 ec 0c             	sub    esp,0xc
c0011d17:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011d1e:	ff d0                	call   eax
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	e9 9c fe ff ff       	jmp    c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011d32:	50                   	push   eax
c0011d33:	e8 e0 fd 00 00       	call   c0021b18 <LinkedList<Device>::~LinkedList()>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	6a 01                	push   0x1
c0011d46:	68 86 3d 02 c0       	push   0xc0023d86
c0011d4b:	e8 ac 42 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	83 ec 08             	sub    esp,0x8
c0011d56:	53                   	push   ebx
c0011d57:	50                   	push   eax
c0011d58:	e8 d0 44 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	8b 1d a8 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262a8
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	6a 01                	push   0x1
c0011d6b:	68 a3 3d 02 c0       	push   0xc0023da3
c0011d70:	e8 87 42 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	83 ec 08             	sub    esp,0x8
c0011d7b:	53                   	push   ebx
c0011d7c:	50                   	push   eax
c0011d7d:	e8 ab 44 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0011d8a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d90:	83 e0 04             	and    eax,0x4
c0011d93:	84 c0                	test   al,al
c0011d95:	0f 84 15 01 00 00    	je     c0011eb0 <ACPI::open(int, int, void*)+0x474>
c0011d9b:	83 ec 0c             	sub    esp,0xc
c0011d9e:	68 c0 3d 02 c0       	push   0xc0023dc0
c0011da3:	e8 69 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0011db6:	83 ec 0c             	sub    esp,0xc
c0011db9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011dc0:	e8 f2 7e ff ff       	call   c0009cb7 <malloc>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	89 c3                	mov    ebx,eax
c0011dca:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0011dcf:	83 ec 04             	sub    esp,0x4
c0011dd2:	50                   	push   eax
c0011dd3:	68 dd 3d 02 c0       	push   0xc0023ddd
c0011dd8:	53                   	push   ebx
c0011dd9:	e8 52 b7 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0011de8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011df0:	74 1a                	je     c0011e0c <ACPI::open(int, int, void*)+0x3d0>
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011dfc:	e8 77 ba ff ff       	call   c000d878 <File::exists()>
c0011e01:	83 c4 10             	add    esp,0x10
c0011e04:	84 c0                	test   al,al
c0011e06:	74 04                	je     c0011e0c <ACPI::open(int, int, void*)+0x3d0>
c0011e08:	b0 01                	mov    al,0x1
c0011e0a:	eb 04                	jmp    c0011e10 <ACPI::open(int, int, void*)+0x3d4>
c0011e0c:	b0 00                	mov    al,0x0
c0011e0e:	66 90                	xchg   ax,ax
c0011e10:	84 c0                	test   al,al
c0011e12:	74 28                	je     c0011e3c <ACPI::open(int, int, void*)+0x400>
c0011e14:	83 ec 08             	sub    esp,0x8
c0011e17:	6a 01                	push   0x1
c0011e19:	68 dd 3d 02 c0       	push   0xc0023ddd
c0011e1e:	e8 d9 41 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	83 ec 08             	sub    esp,0x8
c0011e29:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011e30:	50                   	push   eax
c0011e31:	e8 f7 43 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	8d 76 00             	lea    esi,[esi+0x0]
c0011e3c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011e44:	74 2a                	je     c0011e70 <ACPI::open(int, int, void*)+0x434>
c0011e46:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011e4e:	74 20                	je     c0011e70 <ACPI::open(int, int, void*)+0x434>
c0011e50:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0011e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e59:	83 c0 08             	add    eax,0x8
c0011e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5e:	83 ec 0c             	sub    esp,0xc
c0011e61:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011e68:	ff d0                	call   eax
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011e70:	a1 08 8b 02 c0       	mov    eax,ds:0xc0028b08
c0011e75:	83 ec 08             	sub    esp,0x8
c0011e78:	68 fa 3d 02 c0       	push   0xc0023dfa
c0011e7d:	50                   	push   eax
c0011e7e:	e8 e1 ee ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0011e83:	83 c4 10             	add    esp,0x10
c0011e86:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0011e8d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0011e95:	74 19                	je     c0011eb0 <ACPI::open(int, int, void*)+0x474>
c0011e97:	83 ec 08             	sub    esp,0x8
c0011e9a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011ea1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011ea8:	e8 0b fb ff ff       	call   c00119b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	b8 00 00 00 00       	mov    eax,0x0
c0011eb5:	81 c4 70 01 00 00    	add    esp,0x170
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	c3                   	ret    
c0011ebf:	90                   	nop

c0011ec0 <CPU::close(int, int, void*)>:
c0011ec0:	31 c0                	xor    eax,eax
c0011ec2:	c3                   	ret    
c0011ec3:	90                   	nop

c0011ec4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0011ec4:	60                   	pusha  
c0011ec5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011ec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ecd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ed1:	9c                   	pushf  
c0011ed2:	fa                   	cli    
c0011ed3:	0f 09                	wbinvd 
c0011ed5:	0f 30                	wrmsr  
c0011ed7:	9d                   	popf   
c0011ed8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011edc:	89 02                	mov    DWORD PTR [edx],eax
c0011ede:	61                   	popa   
c0011edf:	c3                   	ret    

c0011ee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0011ee0:	60                   	pusha  
c0011ee1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0011ee5:	9c                   	pushf  
c0011ee6:	fa                   	cli    
c0011ee7:	0f 09                	wbinvd 
c0011ee9:	31 c0                	xor    eax,eax
c0011eeb:	31 d2                	xor    edx,edx
c0011eed:	0f 32                	rdmsr  
c0011eef:	9d                   	popf   
c0011ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ef4:	89 02                	mov    DWORD PTR [edx],eax
c0011ef6:	61                   	popa   
c0011ef7:	c3                   	ret    

c0011ef8 <CPU::AMD_K6_writeback(int, int, int)>:
c0011ef8:	56                   	push   esi
c0011ef9:	53                   	push   ebx
c0011efa:	83 ec 10             	sub    esp,0x10
c0011efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f01:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0011f06:	75 5d                	jne    c0011f65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011f08:	83 f8 08             	cmp    eax,0x8
c0011f0b:	75 09                	jne    c0011f16 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0011f0d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0011f12:	7e 13                	jle    c0011f27 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011f14:	eb 30                	jmp    c0011f46 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011f16:	83 f8 06             	cmp    eax,0x6
c0011f19:	7c 4a                	jl     c0011f65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011f1b:	83 f8 07             	cmp    eax,0x7
c0011f1e:	7e 07                	jle    c0011f27 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0011f20:	83 f8 09             	cmp    eax,0x9
c0011f23:	74 21                	je     c0011f46 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0011f25:	eb 3e                	jmp    c0011f65 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0011f27:	89 e6                	mov    esi,esp
c0011f29:	8b 1d cc 62 02 c0    	mov    ebx,DWORD PTR ds:0xc00262cc
c0011f2f:	56                   	push   esi
c0011f30:	c1 eb 15             	shr    ebx,0x15
c0011f33:	68 82 00 00 c0       	push   0xc0000082
c0011f38:	83 e3 7e             	and    ebx,0x7e
c0011f3b:	e8 a0 ff ff ff       	call   c0011ee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011f40:	56                   	push   esi
c0011f41:	6a 00                	push   0x0
c0011f43:	53                   	push   ebx
c0011f44:	eb 12                	jmp    c0011f58 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0011f46:	89 e3                	mov    ebx,esp
c0011f48:	53                   	push   ebx
c0011f49:	68 82 00 00 c0       	push   0xc0000082
c0011f4e:	e8 8d ff ff ff       	call   c0011ee0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0011f53:	53                   	push   ebx
c0011f54:	6a 00                	push   0x0
c0011f56:	6a 00                	push   0x0
c0011f58:	68 82 00 00 c0       	push   0xc0000082
c0011f5d:	e8 62 ff ff ff       	call   c0011ec4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0011f62:	83 c4 18             	add    esp,0x18
c0011f65:	83 c4 10             	add    esp,0x10
c0011f68:	5b                   	pop    ebx
c0011f69:	5e                   	pop    esi
c0011f6a:	c3                   	ret    
c0011f6b:	90                   	nop

c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0011f6c:	55                   	push   ebp
c0011f6d:	57                   	push   edi
c0011f6e:	56                   	push   esi
c0011f6f:	53                   	push   ebx
c0011f70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011f78:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0011f7c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0011f80:	39 05 d0 59 02 c0    	cmp    DWORD PTR ds:0xc00259d0,eax
c0011f86:	75 23                	jne    c0011fab <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0011f88:	a1 6c 8d 02 c0       	mov    eax,ds:0xc0028d6c
c0011f8d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f91:	89 06                	mov    DWORD PTR [esi],eax
c0011f93:	a1 68 8d 02 c0       	mov    eax,ds:0xc0028d68
c0011f98:	89 07                	mov    DWORD PTR [edi],eax
c0011f9a:	a1 64 8d 02 c0       	mov    eax,ds:0xc0028d64
c0011f9f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011fa2:	a1 60 8d 02 c0       	mov    eax,ds:0xc0028d60
c0011fa7:	89 02                	mov    DWORD PTR [edx],eax
c0011fa9:	eb 3f                	jmp    c0011fea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0011fab:	31 c9                	xor    ecx,ecx
c0011fad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fb1:	0f a2                	cpuid  
c0011fb3:	89 06                	mov    DWORD PTR [esi],eax
c0011fb5:	89 1f                	mov    DWORD PTR [edi],ebx
c0011fb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011fbb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0011fbe:	89 10                	mov    DWORD PTR [eax],edx
c0011fc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fc4:	a3 d0 59 02 c0       	mov    ds:0xc00259d0,eax
c0011fc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011fcb:	a3 6c 8d 02 c0       	mov    ds:0xc0028d6c,eax
c0011fd0:	8b 07                	mov    eax,DWORD PTR [edi]
c0011fd2:	a3 68 8d 02 c0       	mov    ds:0xc0028d68,eax
c0011fd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011fda:	a3 64 8d 02 c0       	mov    ds:0xc0028d64,eax
c0011fdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011fe3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe5:	a3 60 8d 02 c0       	mov    ds:0xc0028d60,eax
c0011fea:	5b                   	pop    ebx
c0011feb:	5e                   	pop    esi
c0011fec:	5f                   	pop    edi
c0011fed:	5d                   	pop    ebp
c0011fee:	c3                   	ret    
c0011fef:	90                   	nop

c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>:
c0011ff0:	83 ec 10             	sub    esp,0x10
c0011ff3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ff7:	50                   	push   eax
c0011ff8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011ffc:	50                   	push   eax
c0011ffd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012001:	50                   	push   eax
c0012002:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012006:	50                   	push   eax
c0012007:	6a 01                	push   0x1
c0012009:	e8 5e ff ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001200e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012012:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012016:	0f 95 c0             	setne  al
c0012019:	83 c4 24             	add    esp,0x24
c001201c:	c3                   	ret    
c001201d:	90                   	nop

c001201e <CPU::cpuidCheckECX(unsigned int)>:
c001201e:	83 ec 10             	sub    esp,0x10
c0012021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012025:	50                   	push   eax
c0012026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001202a:	50                   	push   eax
c001202b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001202f:	50                   	push   eax
c0012030:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012034:	50                   	push   eax
c0012035:	6a 01                	push   0x1
c0012037:	e8 30 ff ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001203c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012040:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012044:	0f 95 c0             	setne  al
c0012047:	83 c4 24             	add    esp,0x24
c001204a:	c3                   	ret    
c001204b:	90                   	nop

c001204c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001204c:	83 ec 10             	sub    esp,0x10
c001204f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012053:	50                   	push   eax
c0012054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012058:	50                   	push   eax
c0012059:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001205d:	50                   	push   eax
c001205e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012062:	50                   	push   eax
c0012063:	6a 07                	push   0x7
c0012065:	e8 02 ff ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001206a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001206e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012072:	0f 95 c0             	setne  al
c0012075:	83 c4 24             	add    esp,0x24
c0012078:	c3                   	ret    
c0012079:	90                   	nop

c001207a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001207a:	83 ec 10             	sub    esp,0x10
c001207d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012081:	50                   	push   eax
c0012082:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012086:	50                   	push   eax
c0012087:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001208b:	50                   	push   eax
c001208c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012090:	50                   	push   eax
c0012091:	6a 07                	push   0x7
c0012093:	e8 d4 fe ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012098:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001209c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00120a0:	0f 95 c0             	setne  al
c00120a3:	83 c4 24             	add    esp,0x24
c00120a6:	c3                   	ret    
c00120a7:	90                   	nop

c00120a8 <CPU::CPU()>:
c00120a8:	83 ec 0c             	sub    esp,0xc
c00120ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120af:	83 ec 08             	sub    esp,0x8
c00120b2:	68 1d 3f 02 c0       	push   0xc0023f1d
c00120b7:	50                   	push   eax
c00120b8:	e8 89 c5 ff ff       	call   c000e646 <Device::Device(char const*)>
c00120bd:	83 c4 10             	add    esp,0x10
c00120c0:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c00120c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120c9:	89 10                	mov    DWORD PTR [eax],edx
c00120cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120cf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00120d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120dd:	05 78 01 00 00       	add    eax,0x178
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	50                   	push   eax
c00120e6:	e8 3f 74 ff ff       	call   c000952a <GDT::GDT()>
c00120eb:	83 c4 10             	add    esp,0x10
c00120ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f2:	05 7c 09 00 00       	add    eax,0x97c
c00120f7:	83 ec 0c             	sub    esp,0xc
c00120fa:	50                   	push   eax
c00120fb:	e8 a4 76 ff ff       	call   c00097a4 <IDT::IDT()>
c0012100:	83 c4 10             	add    esp,0x10
c0012103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012107:	05 7c 11 00 00       	add    eax,0x117c
c001210c:	83 ec 0c             	sub    esp,0xc
c001210f:	50                   	push   eax
c0012110:	e8 97 94 ff ff       	call   c000b5ac <TSS::TSS()>
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001211c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0012123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012127:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012131:	90                   	nop
c0012132:	83 c4 0c             	add    esp,0xc
c0012135:	c3                   	ret    

c0012136 <CPU::displayFeatures()>:
c0012136:	c3                   	ret    
c0012137:	90                   	nop

c0012138 <CPU::detectFeatures()>:
c0012138:	55                   	push   ebp
c0012139:	57                   	push   edi
c001213a:	56                   	push   esi
c001213b:	53                   	push   ebx
c001213c:	83 ec 30             	sub    esp,0x30
c001213f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012143:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001214d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0012154:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001215a:	6a 0d                	push   0xd
c001215c:	6a 00                	push   0x0
c001215e:	55                   	push   ebp
c001215f:	e8 18 e5 fe ff       	call   c000067c <memset>
c0012164:	83 c4 10             	add    esp,0x10
c0012167:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001216c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012173:	0f 84 e8 05 00 00    	je     c0012761 <CPU::detectFeatures()+0x629>
c0012179:	83 ec 0c             	sub    esp,0xc
c001217c:	89 ef                	mov    edi,ebp
c001217e:	6a 10                	push   0x10
c0012180:	e8 6b fe ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0012185:	83 e0 01             	and    eax,0x1
c0012188:	8d 14 00             	lea    edx,[eax+eax*1]
c001218b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012191:	83 e0 fd             	and    eax,0xfffffffd
c0012194:	09 d0                	or     eax,edx
c0012196:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001219c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00121a3:	e8 48 fe ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c00121a8:	83 e0 01             	and    eax,0x1
c00121ab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00121b2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00121b8:	83 e0 fb             	and    eax,0xfffffffb
c00121bb:	09 d0                	or     eax,edx
c00121bd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00121c3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00121ca:	e8 21 fe ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c00121cf:	83 e0 01             	and    eax,0x1
c00121d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00121d9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00121df:	83 e0 f7             	and    eax,0xfffffff7
c00121e2:	09 d0                	or     eax,edx
c00121e4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00121ea:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00121f1:	e8 fa fd ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c00121f6:	83 e0 01             	and    eax,0x1
c00121f9:	c1 e0 04             	shl    eax,0x4
c00121fc:	88 c2                	mov    dl,al
c00121fe:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012204:	83 e0 ef             	and    eax,0xffffffef
c0012207:	09 d0                	or     eax,edx
c0012209:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001220f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012216:	e8 d5 fd ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c001221b:	83 e0 01             	and    eax,0x1
c001221e:	c1 e0 05             	shl    eax,0x5
c0012221:	88 c2                	mov    dl,al
c0012223:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012229:	83 e0 df             	and    eax,0xffffffdf
c001222c:	09 d0                	or     eax,edx
c001222e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0012234:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001223b:	e8 b0 fd ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0012240:	83 e0 01             	and    eax,0x1
c0012243:	8d 14 00             	lea    edx,[eax+eax*1]
c0012246:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001224c:	83 e0 fd             	and    eax,0xfffffffd
c001224f:	09 d0                	or     eax,edx
c0012251:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0012257:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001225e:	e8 8d fd ff ff       	call   c0011ff0 <CPU::cpuidCheckEDX(unsigned int)>
c0012263:	83 e0 01             	and    eax,0x1
c0012266:	c1 e0 06             	shl    eax,0x6
c0012269:	88 c2                	mov    dl,al
c001226b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012271:	83 e0 bf             	and    eax,0xffffffbf
c0012274:	09 d0                	or     eax,edx
c0012276:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001227c:	58                   	pop    eax
c001227d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012281:	50                   	push   eax
c0012282:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012286:	50                   	push   eax
c0012287:	8d 74 24 28          	lea    esi,[esp+0x28]
c001228b:	56                   	push   esi
c001228c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012290:	50                   	push   eax
c0012291:	6a 00                	push   0x0
c0012293:	e8 d4 fc ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012298:	b8 04 00 00 00       	mov    eax,0x4
c001229d:	89 c1                	mov    ecx,eax
c001229f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122a1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00122a7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00122ab:	89 c1                	mov    ecx,eax
c00122ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122af:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00122b5:	8d 74 24 38          	lea    esi,[esp+0x38]
c00122b9:	89 c1                	mov    ecx,eax
c00122bb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00122bd:	83 c4 18             	add    esp,0x18
c00122c0:	68 2c 3e 02 c0       	push   0xc0023e2c
c00122c5:	55                   	push   ebp
c00122c6:	e8 f9 e4 fe ff       	call   c00007c4 <strcmp>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	85 c0                	test   eax,eax
c00122d0:	75 0f                	jne    c00122e1 <CPU::detectFeatures()+0x1a9>
c00122d2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00122dc:	e9 22 02 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c00122e1:	50                   	push   eax
c00122e2:	50                   	push   eax
c00122e3:	68 39 3e 02 c0       	push   0xc0023e39
c00122e8:	55                   	push   ebp
c00122e9:	e8 d6 e4 fe ff       	call   c00007c4 <strcmp>
c00122ee:	83 c4 10             	add    esp,0x10
c00122f1:	85 c0                	test   eax,eax
c00122f3:	74 dd                	je     c00122d2 <CPU::detectFeatures()+0x19a>
c00122f5:	50                   	push   eax
c00122f6:	50                   	push   eax
c00122f7:	68 46 3e 02 c0       	push   0xc0023e46
c00122fc:	55                   	push   ebp
c00122fd:	e8 c2 e4 fe ff       	call   c00007c4 <strcmp>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	85 c0                	test   eax,eax
c0012307:	74 2a                	je     c0012333 <CPU::detectFeatures()+0x1fb>
c0012309:	50                   	push   eax
c001230a:	50                   	push   eax
c001230b:	68 53 3e 02 c0       	push   0xc0023e53
c0012310:	55                   	push   ebp
c0012311:	e8 ae e4 fe ff       	call   c00007c4 <strcmp>
c0012316:	83 c4 10             	add    esp,0x10
c0012319:	85 c0                	test   eax,eax
c001231b:	74 16                	je     c0012333 <CPU::detectFeatures()+0x1fb>
c001231d:	50                   	push   eax
c001231e:	50                   	push   eax
c001231f:	68 60 3e 02 c0       	push   0xc0023e60
c0012324:	55                   	push   ebp
c0012325:	e8 9a e4 fe ff       	call   c00007c4 <strcmp>
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	85 c0                	test   eax,eax
c001232f:	74 48                	je     c0012379 <CPU::detectFeatures()+0x241>
c0012331:	eb 0f                	jmp    c0012342 <CPU::detectFeatures()+0x20a>
c0012333:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001233d:	e9 c1 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c0012342:	50                   	push   eax
c0012343:	50                   	push   eax
c0012344:	68 6d 3e 02 c0       	push   0xc0023e6d
c0012349:	55                   	push   ebp
c001234a:	e8 75 e4 fe ff       	call   c00007c4 <strcmp>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	85 c0                	test   eax,eax
c0012354:	74 23                	je     c0012379 <CPU::detectFeatures()+0x241>
c0012356:	57                   	push   edi
c0012357:	57                   	push   edi
c0012358:	68 7a 3e 02 c0       	push   0xc0023e7a
c001235d:	55                   	push   ebp
c001235e:	e8 61 e4 fe ff       	call   c00007c4 <strcmp>
c0012363:	83 c4 10             	add    esp,0x10
c0012366:	85 c0                	test   eax,eax
c0012368:	75 1e                	jne    c0012388 <CPU::detectFeatures()+0x250>
c001236a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012374:	e9 8a 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c0012379:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012383:	e9 7b 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c0012388:	56                   	push   esi
c0012389:	56                   	push   esi
c001238a:	68 87 3e 02 c0       	push   0xc0023e87
c001238f:	55                   	push   ebp
c0012390:	e8 2f e4 fe ff       	call   c00007c4 <strcmp>
c0012395:	83 c4 10             	add    esp,0x10
c0012398:	85 c0                	test   eax,eax
c001239a:	75 0f                	jne    c00123ab <CPU::detectFeatures()+0x273>
c001239c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00123a6:	e9 58 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c00123ab:	51                   	push   ecx
c00123ac:	51                   	push   ecx
c00123ad:	68 46 3e 02 c0       	push   0xc0023e46
c00123b2:	55                   	push   ebp
c00123b3:	e8 0c e4 fe ff       	call   c00007c4 <strcmp>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	85 c0                	test   eax,eax
c00123bd:	75 0f                	jne    c00123ce <CPU::detectFeatures()+0x296>
c00123bf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00123c9:	e9 35 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c00123ce:	52                   	push   edx
c00123cf:	52                   	push   edx
c00123d0:	68 94 3e 02 c0       	push   0xc0023e94
c00123d5:	55                   	push   ebp
c00123d6:	e8 e9 e3 fe ff       	call   c00007c4 <strcmp>
c00123db:	83 c4 10             	add    esp,0x10
c00123de:	85 c0                	test   eax,eax
c00123e0:	75 0f                	jne    c00123f1 <CPU::detectFeatures()+0x2b9>
c00123e2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00123ec:	e9 12 01 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c00123f1:	50                   	push   eax
c00123f2:	50                   	push   eax
c00123f3:	68 a1 3e 02 c0       	push   0xc0023ea1
c00123f8:	55                   	push   ebp
c00123f9:	e8 c6 e3 fe ff       	call   c00007c4 <strcmp>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	85 c0                	test   eax,eax
c0012403:	75 0f                	jne    c0012414 <CPU::detectFeatures()+0x2dc>
c0012405:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001240f:	e9 ef 00 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c0012414:	50                   	push   eax
c0012415:	50                   	push   eax
c0012416:	68 ae 3e 02 c0       	push   0xc0023eae
c001241b:	55                   	push   ebp
c001241c:	e8 a3 e3 fe ff       	call   c00007c4 <strcmp>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	85 c0                	test   eax,eax
c0012426:	75 0f                	jne    c0012437 <CPU::detectFeatures()+0x2ff>
c0012428:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0012432:	e9 cc 00 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c0012437:	50                   	push   eax
c0012438:	50                   	push   eax
c0012439:	68 bb 3e 02 c0       	push   0xc0023ebb
c001243e:	55                   	push   ebp
c001243f:	e8 80 e3 fe ff       	call   c00007c4 <strcmp>
c0012444:	83 c4 10             	add    esp,0x10
c0012447:	85 c0                	test   eax,eax
c0012449:	75 0f                	jne    c001245a <CPU::detectFeatures()+0x322>
c001244b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0012455:	e9 a9 00 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c001245a:	50                   	push   eax
c001245b:	50                   	push   eax
c001245c:	68 c8 3e 02 c0       	push   0xc0023ec8
c0012461:	55                   	push   ebp
c0012462:	e8 5d e3 fe ff       	call   c00007c4 <strcmp>
c0012467:	83 c4 10             	add    esp,0x10
c001246a:	85 c0                	test   eax,eax
c001246c:	75 0f                	jne    c001247d <CPU::detectFeatures()+0x345>
c001246e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0012478:	e9 86 00 00 00       	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c001247d:	50                   	push   eax
c001247e:	50                   	push   eax
c001247f:	68 d5 3e 02 c0       	push   0xc0023ed5
c0012484:	55                   	push   ebp
c0012485:	e8 3a e3 fe ff       	call   c00007c4 <strcmp>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	85 c0                	test   eax,eax
c001248f:	75 0c                	jne    c001249d <CPU::detectFeatures()+0x365>
c0012491:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001249b:	eb 66                	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c001249d:	50                   	push   eax
c001249e:	50                   	push   eax
c001249f:	68 e2 3e 02 c0       	push   0xc0023ee2
c00124a4:	55                   	push   ebp
c00124a5:	e8 1a e3 fe ff       	call   c00007c4 <strcmp>
c00124aa:	83 c4 10             	add    esp,0x10
c00124ad:	85 c0                	test   eax,eax
c00124af:	75 0c                	jne    c00124bd <CPU::detectFeatures()+0x385>
c00124b1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00124bb:	eb 46                	jmp    c0012503 <CPU::detectFeatures()+0x3cb>
c00124bd:	57                   	push   edi
c00124be:	57                   	push   edi
c00124bf:	68 ef 3e 02 c0       	push   0xc0023eef
c00124c4:	55                   	push   ebp
c00124c5:	e8 fa e2 fe ff       	call   c00007c4 <strcmp>
c00124ca:	83 c4 10             	add    esp,0x10
c00124cd:	85 c0                	test   eax,eax
c00124cf:	74 e0                	je     c00124b1 <CPU::detectFeatures()+0x379>
c00124d1:	56                   	push   esi
c00124d2:	56                   	push   esi
c00124d3:	68 fc 3e 02 c0       	push   0xc0023efc
c00124d8:	55                   	push   ebp
c00124d9:	e8 e6 e2 fe ff       	call   c00007c4 <strcmp>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	85 c0                	test   eax,eax
c00124e3:	74 cc                	je     c00124b1 <CPU::detectFeatures()+0x379>
c00124e5:	51                   	push   ecx
c00124e6:	51                   	push   ecx
c00124e7:	68 09 3f 02 c0       	push   0xc0023f09
c00124ec:	55                   	push   ebp
c00124ed:	e8 d2 e2 fe ff       	call   c00007c4 <strcmp>
c00124f2:	83 c4 10             	add    esp,0x10
c00124f5:	85 c0                	test   eax,eax
c00124f7:	74 b8                	je     c00124b1 <CPU::detectFeatures()+0x379>
c00124f9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0012503:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0012508:	0f 86 be 00 00 00    	jbe    c00125cc <CPU::detectFeatures()+0x494>
c001250e:	83 ec 0c             	sub    esp,0xc
c0012511:	68 80 00 00 00       	push   0x80
c0012516:	e8 31 fb ff ff       	call   c001204c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001251b:	83 e0 01             	and    eax,0x1
c001251e:	c1 e0 06             	shl    eax,0x6
c0012521:	88 c2                	mov    dl,al
c0012523:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012529:	83 e0 bf             	and    eax,0xffffffbf
c001252c:	09 d0                	or     eax,edx
c001252e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0012534:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001253b:	e8 0c fb ff ff       	call   c001204c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012540:	83 e0 01             	and    eax,0x1
c0012543:	c1 e0 04             	shl    eax,0x4
c0012546:	88 c2                	mov    dl,al
c0012548:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001254e:	83 e0 ef             	and    eax,0xffffffef
c0012551:	09 d0                	or     eax,edx
c0012553:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012559:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0012560:	e8 e7 fa ff ff       	call   c001204c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012565:	c1 e0 07             	shl    eax,0x7
c0012568:	88 c2                	mov    dl,al
c001256a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012570:	83 e0 7f             	and    eax,0x7f
c0012573:	09 d0                	or     eax,edx
c0012575:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001257b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012582:	e8 f3 fa ff ff       	call   c001207a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012587:	83 e0 01             	and    eax,0x1
c001258a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012591:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012597:	83 e0 f7             	and    eax,0xfffffff7
c001259a:	09 d0                	or     eax,edx
c001259c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00125a2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00125a9:	e8 cc fa ff ff       	call   c001207a <CPU::cpuidCheckExtendedECX(unsigned int)>
c00125ae:	83 c4 10             	add    esp,0x10
c00125b1:	83 e0 01             	and    eax,0x1
c00125b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00125bb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00125c1:	83 e0 fb             	and    eax,0xfffffffb
c00125c4:	09 d0                	or     eax,edx
c00125c6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00125cc:	83 ec 0c             	sub    esp,0xc
c00125cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00125d3:	50                   	push   eax
c00125d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00125d8:	50                   	push   eax
c00125d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00125dd:	56                   	push   esi
c00125de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00125e2:	50                   	push   eax
c00125e3:	6a 01                	push   0x1
c00125e5:	e8 82 f9 ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00125ea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125ee:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00125f4:	88 ca                	mov    dl,cl
c00125f6:	83 e0 f0             	and    eax,0xfffffff0
c00125f9:	83 e2 0f             	and    edx,0xf
c00125fc:	09 d0                	or     eax,edx
c00125fe:	88 ca                	mov    dl,cl
c0012600:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0012606:	c0 ea 04             	shr    dl,0x4
c0012609:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001260d:	0f b6 c2             	movzx  eax,dl
c0012610:	83 c4 20             	add    esp,0x20
c0012613:	c1 e0 06             	shl    eax,0x6
c0012616:	89 c7                	mov    edi,eax
c0012618:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001261e:	66 25 3f c0          	and    ax,0xc03f
c0012622:	09 f8                	or     eax,edi
c0012624:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001262b:	89 c8                	mov    eax,ecx
c001262d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0012634:	c1 e8 08             	shr    eax,0x8
c0012637:	83 e5 3f             	and    ebp,0x3f
c001263a:	83 e0 0f             	and    eax,0xf
c001263d:	89 c7                	mov    edi,eax
c001263f:	c1 e7 06             	shl    edi,0x6
c0012642:	09 ef                	or     edi,ebp
c0012644:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001264b:	89 fa                	mov    edx,edi
c001264d:	83 e5 c0             	and    ebp,0xffffffc0
c0012650:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0012656:	88 c2                	mov    dl,al
c0012658:	c0 ea 02             	shr    dl,0x2
c001265b:	89 d7                	mov    edi,edx
c001265d:	09 ef                	or     edi,ebp
c001265f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0012665:	89 fa                	mov    edx,edi
c0012667:	83 e5 cf             	and    ebp,0xffffffcf
c001266a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0012670:	89 cf                	mov    edi,ecx
c0012672:	c1 ef 0c             	shr    edi,0xc
c0012675:	83 e7 03             	and    edi,0x3
c0012678:	c1 e7 04             	shl    edi,0x4
c001267b:	09 ef                	or     edi,ebp
c001267d:	3c 06                	cmp    al,0x6
c001267f:	89 fa                	mov    edx,edi
c0012681:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0012687:	74 04                	je     c001268d <CPU::detectFeatures()+0x555>
c0012689:	3c 0f                	cmp    al,0xf
c001268b:	75 5c                	jne    c00126e9 <CPU::detectFeatures()+0x5b1>
c001268d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012691:	89 cf                	mov    edi,ecx
c0012693:	c1 ef 10             	shr    edi,0x10
c0012696:	c1 e7 04             	shl    edi,0x4
c0012699:	09 fa                	or     edx,edi
c001269b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00126a1:	0f b6 d2             	movzx  edx,dl
c00126a4:	66 81 e7 3f c0       	and    di,0xc03f
c00126a9:	c1 e2 06             	shl    edx,0x6
c00126ac:	09 fa                	or     edx,edi
c00126ae:	3c 0f                	cmp    al,0xf
c00126b0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00126b7:	75 30                	jne    c00126e9 <CPU::detectFeatures()+0x5b1>
c00126b9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00126bf:	c1 e9 14             	shr    ecx,0x14
c00126c2:	83 e0 3f             	and    eax,0x3f
c00126c5:	83 c1 0f             	add    ecx,0xf
c00126c8:	88 ca                	mov    dl,cl
c00126ca:	c0 e9 02             	shr    cl,0x2
c00126cd:	c1 e2 06             	shl    edx,0x6
c00126d0:	09 d0                	or     eax,edx
c00126d2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00126d8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00126de:	83 e0 c0             	and    eax,0xffffffc0
c00126e1:	09 c1                	or     ecx,eax
c00126e3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00126e9:	83 ec 0c             	sub    esp,0xc
c00126ec:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c00126f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00126f7:	50                   	push   eax
c00126f8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00126fc:	55                   	push   ebp
c00126fd:	56                   	push   esi
c00126fe:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0012702:	57                   	push   edi
c0012703:	68 00 00 00 80       	push   0x80000000
c0012708:	e8 5f f8 ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001270d:	83 c4 20             	add    esp,0x20
c0012710:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0012718:	76 22                	jbe    c001273c <CPU::detectFeatures()+0x604>
c001271a:	83 ec 0c             	sub    esp,0xc
c001271d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012721:	50                   	push   eax
c0012722:	55                   	push   ebp
c0012723:	56                   	push   esi
c0012724:	57                   	push   edi
c0012725:	68 01 00 00 80       	push   0x80000001
c001272a:	e8 3d f8 ff ff       	call   c0011f6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001272f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0012739:	83 c4 20             	add    esp,0x20
c001273c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0012742:	8d 50 ff             	lea    edx,[eax-0x1]
c0012745:	83 fa 03             	cmp    edx,0x3
c0012748:	76 7e                	jbe    c00127c8 <CPU::detectFeatures()+0x690>
c001274a:	83 f8 06             	cmp    eax,0x6
c001274d:	74 79                	je     c00127c8 <CPU::detectFeatures()+0x690>
c001274f:	52                   	push   edx
c0012750:	52                   	push   edx
c0012751:	68 15 3f 02 c0       	push   0xc0023f15
c0012756:	53                   	push   ebx
c0012757:	e8 dc be ff ff       	call   c000e638 <Device::setName(char const*)>
c001275c:	83 c4 10             	add    esp,0x10
c001275f:	eb 67                	jmp    c00127c8 <CPU::detectFeatures()+0x690>
c0012761:	50                   	push   eax
c0012762:	50                   	push   eax
c0012763:	68 7a 3e 02 c0       	push   0xc0023e7a
c0012768:	55                   	push   ebp
c0012769:	e8 ca df fe ff       	call   c0000738 <strcpy>
c001276e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012778:	e8 66 da fe ff       	call   c00001e3 <is486>
c001277d:	83 c4 10             	add    esp,0x10
c0012780:	85 c0                	test   eax,eax
c0012782:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012788:	74 1d                	je     c00127a7 <CPU::detectFeatures()+0x66f>
c001278a:	83 c8 07             	or     eax,0x7
c001278d:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012793:	0f 20 c0             	mov    eax,cr0
c0012796:	83 e0 14             	and    eax,0x14
c0012799:	83 f8 04             	cmp    eax,0x4
c001279c:	75 0e                	jne    c00127ac <CPU::detectFeatures()+0x674>
c001279e:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c00127a5:	eb 21                	jmp    c00127c8 <CPU::detectFeatures()+0x690>
c00127a7:	83 e0 f8             	and    eax,0xfffffff8
c00127aa:	eb e1                	jmp    c001278d <CPU::detectFeatures()+0x655>
c00127ac:	e8 0d da fe ff       	call   c00001be <hasLegacyFPU>
c00127b1:	83 e0 01             	and    eax,0x1
c00127b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00127b7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00127bd:	83 e0 fd             	and    eax,0xfffffffd
c00127c0:	09 d0                	or     eax,edx
c00127c2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00127c8:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00127cf:	74 0e                	je     c00127df <CPU::detectFeatures()+0x6a7>
c00127d1:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00127d6:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c00127dd:	eb 20                	jmp    c00127ff <CPU::detectFeatures()+0x6c7>
c00127df:	e8 da d9 fe ff       	call   c00001be <hasLegacyFPU>
c00127e4:	83 e0 01             	and    eax,0x1
c00127e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00127ea:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00127f0:	83 e0 fd             	and    eax,0xfffffffd
c00127f3:	09 d0                	or     eax,edx
c00127f5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00127fb:	a8 02                	test   al,0x2
c00127fd:	75 d2                	jne    c00127d1 <CPU::detectFeatures()+0x699>
c00127ff:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0012806:	83 c4 2c             	add    esp,0x2c
c0012809:	5b                   	pop    ebx
c001280a:	5e                   	pop    esi
c001280b:	5f                   	pop    edi
c001280c:	5d                   	pop    ebp
c001280d:	c3                   	ret    

c001280e <CPU::setupSMEP()>:
c001280e:	0f 20 e0             	mov    eax,cr4
c0012811:	0d 00 00 10 00       	or     eax,0x100000
c0012816:	0f 22 e0             	mov    cr4,eax
c0012819:	c3                   	ret    

c001281a <CPU::setupUMIP()>:
c001281a:	0f 20 e0             	mov    eax,cr4
c001281d:	80 cc 08             	or     ah,0x8
c0012820:	0f 22 e0             	mov    cr4,eax
c0012823:	c3                   	ret    

c0012824 <CPU::setupTSC()>:
c0012824:	0f 20 e0             	mov    eax,cr4
c0012827:	83 c8 04             	or     eax,0x4
c001282a:	0f 22 e0             	mov    cr4,eax
c001282d:	c3                   	ret    

c001282e <CPU::setupLargePages()>:
c001282e:	0f 20 e0             	mov    eax,cr4
c0012831:	83 c8 10             	or     eax,0x10
c0012834:	0f 22 e0             	mov    cr4,eax
c0012837:	c3                   	ret    

c0012838 <CPU::setupPAT()>:
c0012838:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001283d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0012844:	74 2c                	je     c0012872 <CPU::setupPAT()+0x3a>
c0012846:	53                   	push   ebx
c0012847:	83 ec 10             	sub    esp,0x10
c001284a:	68 77 02 00 00       	push   0x277
c001284f:	50                   	push   eax
c0012850:	e8 11 6a ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0012855:	83 e2 f8             	and    edx,0xfffffff8
c0012858:	83 ca 01             	or     edx,0x1
c001285b:	52                   	push   edx
c001285c:	50                   	push   eax
c001285d:	68 77 02 00 00       	push   0x277
c0012862:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0012868:	e8 25 6a ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c001286d:	83 c4 28             	add    esp,0x28
c0012870:	5b                   	pop    ebx
c0012871:	c3                   	ret    
c0012872:	c3                   	ret    
c0012873:	90                   	nop

c0012874 <CPU::setupMTRR()>:
c0012874:	c3                   	ret    
c0012875:	90                   	nop

c0012876 <CPU::setupGlobalPages()>:
c0012876:	0f 20 e0             	mov    eax,cr4
c0012879:	0c 80                	or     al,0x80
c001287b:	0f 22 e0             	mov    cr4,eax
c001287e:	c3                   	ret    
c001287f:	90                   	nop

c0012880 <CPU::allowUsermodeDataAccess()>:
c0012880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012884:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001288b:	74 03                	je     c0012890 <CPU::allowUsermodeDataAccess()+0x10>
c001288d:	0f 01 cb             	stac   
c0012890:	c3                   	ret    
c0012891:	90                   	nop

c0012892 <CPU::prohibitUsermodeDataAccess()>:
c0012892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012896:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001289d:	74 03                	je     c00128a2 <CPU::prohibitUsermodeDataAccess()+0x10>
c001289f:	0f 01 ca             	clac   
c00128a2:	c3                   	ret    
c00128a3:	90                   	nop

c00128a4 <CPU::setupSMAP()>:
c00128a4:	0f 20 e0             	mov    eax,cr4
c00128a7:	0d 00 00 20 00       	or     eax,0x200000
c00128ac:	0f 22 e0             	mov    cr4,eax
c00128af:	eb e1                	jmp    c0012892 <CPU::prohibitUsermodeDataAccess()>
c00128b1:	90                   	nop

c00128b2 <CPU::setupFeatures()>:
c00128b2:	53                   	push   ebx
c00128b3:	83 ec 08             	sub    esp,0x8
c00128b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00128ba:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00128c1:	74 18                	je     c00128db <CPU::setupFeatures()+0x29>
c00128c3:	83 ec 0c             	sub    esp,0xc
c00128c6:	68 21 3f 02 c0       	push   0xc0023f21
c00128cb:	e8 f5 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00128d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128d3:	e8 42 ff ff ff       	call   c001281a <CPU::setupUMIP()>
c00128d8:	83 c4 10             	add    esp,0x10
c00128db:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00128e2:	74 18                	je     c00128fc <CPU::setupFeatures()+0x4a>
c00128e4:	83 ec 0c             	sub    esp,0xc
c00128e7:	68 2b 3f 02 c0       	push   0xc0023f2b
c00128ec:	e8 d4 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00128f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00128f4:	e8 2b ff ff ff       	call   c0012824 <CPU::setupTSC()>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0012903:	74 18                	je     c001291d <CPU::setupFeatures()+0x6b>
c0012905:	83 ec 0c             	sub    esp,0xc
c0012908:	68 34 3f 02 c0       	push   0xc0023f34
c001290d:	e8 b3 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012912:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012915:	e8 14 ff ff ff       	call   c001282e <CPU::setupLargePages()>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0012924:	74 18                	je     c001293e <CPU::setupFeatures()+0x8c>
c0012926:	83 ec 0c             	sub    esp,0xc
c0012929:	68 3d 3f 02 c0       	push   0xc0023f3d
c001292e:	e8 92 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012933:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012936:	e8 3b ff ff ff       	call   c0012876 <CPU::setupGlobalPages()>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0012945:	74 18                	je     c001295f <CPU::setupFeatures()+0xad>
c0012947:	83 ec 0c             	sub    esp,0xc
c001294a:	68 4f 3f 02 c0       	push   0xc0023f4f
c001294f:	e8 71 a6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012957:	e8 dc fe ff ff       	call   c0012838 <CPU::setupPAT()>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0012966:	74 11                	je     c0012979 <CPU::setupFeatures()+0xc7>
c0012968:	c7 44 24 10 58 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f58
c0012970:	83 c4 08             	add    esp,0x8
c0012973:	5b                   	pop    ebx
c0012974:	e9 4c a6 ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012979:	83 c4 08             	add    esp,0x8
c001297c:	5b                   	pop    ebx
c001297d:	c3                   	ret    

c001297e <CPU::open(int, int, void*)>:
c001297e:	57                   	push   edi
c001297f:	56                   	push   esi
c0012980:	53                   	push   ebx
c0012981:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012985:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012989:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001298f:	83 ec 0c             	sub    esp,0xc
c0012992:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0012998:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001299e:	50                   	push   eax
c001299f:	e8 e8 6b ff ff       	call   c000958c <GDT::setup()>
c00129a4:	83 c4 0c             	add    esp,0xc
c00129a7:	6a 00                	push   0x0
c00129a9:	68 ef be ad de       	push   0xdeadbeef
c00129ae:	57                   	push   edi
c00129af:	e8 3c 8c ff ff       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c00129b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00129b7:	e8 14 8c ff ff       	call   c000b5d0 <TSS::flush()>
c00129bc:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00129c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00129c5:	e8 50 6e ff ff       	call   c000981a <IDT::setup()>
c00129ca:	b8 00 04 00 00       	mov    eax,0x400
c00129cf:	0f 23 f8             	mov    db7,eax
c00129d2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00129dc:	e8 8d 79 ff ff       	call   c000a36e <Phys::allocatePage()>
c00129e1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00129e7:	89 30                	mov    DWORD PTR [eax],esi
c00129e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00129ef:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00129f2:	58                   	pop    eax
c00129f3:	5a                   	pop    edx
c00129f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00129fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129fe:	e8 ad 9b ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c0012a03:	c7 04 24 62 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f62
c0012a0a:	e8 02 73 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a12:	e8 21 f7 ff ff       	call   c0012138 <CPU::detectFeatures()>
c0012a17:	c7 04 24 85 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f85
c0012a1e:	e8 ee 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a23:	e8 29 74 00 00       	call   c0019e51 <Hal::initialise()>
c0012a28:	c7 04 24 99 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f99
c0012a2f:	e8 dd 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a34:	a1 c0 62 02 c0       	mov    eax,ds:0xc00262c0
c0012a39:	83 e0 10             	and    eax,0x10
c0012a3c:	83 f8 01             	cmp    eax,0x1
c0012a3f:	19 c0                	sbb    eax,eax
c0012a41:	83 e0 46             	and    eax,0x46
c0012a44:	83 c0 1e             	add    eax,0x1e
c0012a47:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a4a:	e8 d2 d2 ff ff       	call   c000fd21 <setupTimer(int)>
c0012a4f:	83 c4 10             	add    esp,0x10
c0012a52:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0012a58:	f6 05 c0 62 02 c0 20 	test   BYTE PTR ds:0xc00262c0,0x20
c0012a5f:	74 18                	je     c0012a79 <CPU::open(int, int, void*)+0xfb>
c0012a61:	83 ec 0c             	sub    esp,0xc
c0012a64:	68 b4 3f 02 c0       	push   0xc0023fb4
c0012a69:	e8 a3 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a71:	e8 3c fe ff ff       	call   c00128b2 <CPU::setupFeatures()>
c0012a76:	83 c4 10             	add    esp,0x10
c0012a79:	83 ec 0c             	sub    esp,0xc
c0012a7c:	68 cf 3f 02 c0       	push   0xc0023fcf
c0012a81:	e8 8b 72 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	31 c0                	xor    eax,eax
c0012a8b:	5b                   	pop    ebx
c0012a8c:	5e                   	pop    esi
c0012a8d:	5f                   	pop    edi
c0012a8e:	c3                   	ret    
c0012a8f:	90                   	nop

c0012a90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0012a90:	57                   	push   edi
c0012a91:	56                   	push   esi
c0012a92:	53                   	push   ebx
c0012a93:	51                   	push   ecx
c0012a94:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a98:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0012a9b:	0f 02 c0             	lar    eax,ax
c0012a9e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0012aa1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012aa5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0012aa8:	88 ca                	mov    dl,cl
c0012aaa:	c0 ea 06             	shr    dl,0x6
c0012aad:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0012ab1:	89 ca                	mov    edx,ecx
c0012ab3:	66 c1 ea 03          	shr    dx,0x3
c0012ab7:	83 e2 07             	and    edx,0x7
c0012aba:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0012abf:	88 17                	mov    BYTE PTR [edi],dl
c0012ac1:	0f 84 a6 01 00 00    	je     c0012c6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0012ac7:	83 e1 07             	and    ecx,0x7
c0012aca:	80 f9 04             	cmp    cl,0x4
c0012acd:	0f 84 98 00 00 00    	je     c0012b6b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0012ad3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012ad8:	0f 95 c0             	setne  al
c0012adb:	80 f9 05             	cmp    cl,0x5
c0012ade:	0f 95 c2             	setne  dl
c0012ae1:	08 c2                	or     dl,al
c0012ae3:	74 79                	je     c0012b5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0012ae5:	84 c9                	test   cl,cl
c0012ae7:	75 05                	jne    c0012aee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0012ae9:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0012aec:	eb 3c                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012aee:	80 f9 01             	cmp    cl,0x1
c0012af1:	75 05                	jne    c0012af8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0012af3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012af6:	eb 32                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012af8:	80 f9 02             	cmp    cl,0x2
c0012afb:	75 05                	jne    c0012b02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0012afd:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012b00:	eb 28                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012b02:	31 c0                	xor    eax,eax
c0012b04:	80 f9 03             	cmp    cl,0x3
c0012b07:	75 05                	jne    c0012b0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0012b09:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012b0c:	eb 1c                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012b0e:	80 f9 05             	cmp    cl,0x5
c0012b11:	75 05                	jne    c0012b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0012b13:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0012b16:	eb 12                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012b18:	80 f9 06             	cmp    cl,0x6
c0012b1b:	75 05                	jne    c0012b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0012b1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012b20:	eb 08                	jmp    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012b22:	80 f9 07             	cmp    cl,0x7
c0012b25:	75 03                	jne    c0012b2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0012b27:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012b2a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012b2f:	75 10                	jne    c0012b41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0012b31:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0012b35:	b9 03 00 00 00       	mov    ecx,0x3
c0012b3a:	01 d0                	add    eax,edx
c0012b3c:	e9 37 01 00 00       	jmp    c0012c78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012b41:	b9 02 00 00 00       	mov    ecx,0x2
c0012b46:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0012b4b:	0f 85 27 01 00 00    	jne    c0012c78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012b51:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0012b54:	b9 06 00 00 00       	mov    ecx,0x6
c0012b59:	e9 1a 01 00 00       	jmp    c0012c78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012b5e:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0012b61:	b9 06 00 00 00       	mov    ecx,0x6
c0012b66:	e9 0f 01 00 00       	jmp    c0012c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012b6b:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0012b6e:	88 ca                	mov    dl,cl
c0012b70:	c0 ea 06             	shr    dl,0x6
c0012b73:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0012b77:	89 ca                	mov    edx,ecx
c0012b79:	66 c1 ea 03          	shr    dx,0x3
c0012b7d:	83 e2 07             	and    edx,0x7
c0012b80:	80 e1 07             	and    cl,0x7
c0012b83:	75 05                	jne    c0012b8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0012b85:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0012b88:	eb 4c                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012b8a:	80 f9 01             	cmp    cl,0x1
c0012b8d:	75 05                	jne    c0012b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0012b8f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0012b92:	eb 42                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012b94:	80 f9 02             	cmp    cl,0x2
c0012b97:	75 05                	jne    c0012b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0012b99:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012b9c:	eb 38                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012b9e:	80 f9 03             	cmp    cl,0x3
c0012ba1:	75 05                	jne    c0012ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0012ba3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0012ba6:	eb 2e                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012ba8:	80 f9 04             	cmp    cl,0x4
c0012bab:	75 12                	jne    c0012bbf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0012bad:	f6 c4 60             	test   ah,0x60
c0012bb0:	75 08                	jne    c0012bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0012bb2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0012bb5:	8d 78 14             	lea    edi,[eax+0x14]
c0012bb8:	eb 1c                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012bba:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0012bbd:	eb 17                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012bbf:	80 f9 05             	cmp    cl,0x5
c0012bc2:	75 05                	jne    c0012bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0012bc4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0012bc7:	eb 0d                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012bc9:	80 f9 06             	cmp    cl,0x6
c0012bcc:	75 05                	jne    c0012bd3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0012bce:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0012bd1:	eb 03                	jmp    c0012bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0012bd3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0012bd6:	84 d2                	test   dl,dl
c0012bd8:	75 05                	jne    c0012bdf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0012bda:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0012bdd:	eb 3c                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012bdf:	80 fa 01             	cmp    dl,0x1
c0012be2:	75 05                	jne    c0012be9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0012be4:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012be7:	eb 32                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012be9:	80 fa 02             	cmp    dl,0x2
c0012bec:	75 05                	jne    c0012bf3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0012bee:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0012bf1:	eb 28                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012bf3:	80 fa 03             	cmp    dl,0x3
c0012bf6:	75 05                	jne    c0012bfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0012bf8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0012bfb:	eb 1e                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012bfd:	31 c0                	xor    eax,eax
c0012bff:	80 fa 04             	cmp    dl,0x4
c0012c02:	74 17                	je     c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012c04:	80 fa 05             	cmp    dl,0x5
c0012c07:	75 05                	jne    c0012c0e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0012c09:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0012c0c:	eb 0d                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012c0e:	80 fa 06             	cmp    dl,0x6
c0012c11:	75 05                	jne    c0012c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0012c13:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012c16:	eb 03                	jmp    c0012c1b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0012c18:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012c1b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012c20:	0f 94 c2             	sete   dl
c0012c23:	80 f9 05             	cmp    cl,0x5
c0012c26:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0012c2a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0012c2f:	d3 e0                	shl    eax,cl
c0012c31:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0012c35:	74 0a                	je     c0012c41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0012c37:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0012c3a:	b9 07 00 00 00       	mov    ecx,0x7
c0012c3f:	eb 37                	jmp    c0012c78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0012c41:	01 f8                	add    eax,edi
c0012c43:	b9 03 00 00 00       	mov    ecx,0x3
c0012c48:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0012c4d:	74 2b                	je     c0012c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012c4f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0012c54:	75 0d                	jne    c0012c63 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0012c56:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0012c5a:	01 c8                	add    eax,ecx
c0012c5c:	b9 04 00 00 00       	mov    ecx,0x4
c0012c61:	eb 17                	jmp    c0012c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012c63:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0012c66:	b9 07 00 00 00       	mov    ecx,0x7
c0012c6b:	eb 0d                	jmp    c0012c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012c6d:	b9 02 00 00 00       	mov    ecx,0x2
c0012c72:	b2 01                	mov    dl,0x1
c0012c74:	31 c0                	xor    eax,eax
c0012c76:	eb 02                	jmp    c0012c7a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0012c78:	31 d2                	xor    edx,edx
c0012c7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c7e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0012c80:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012c84:	88 11                	mov    BYTE PTR [ecx],dl
c0012c86:	5a                   	pop    edx
c0012c87:	5b                   	pop    ebx
c0012c88:	5e                   	pop    esi
c0012c89:	5f                   	pop    edi
c0012c8a:	c3                   	ret    

c0012c8b <Krnl::smpEntry()>:
c0012c8b:	eb fe                	jmp    c0012c8b <Krnl::smpEntry()>

c0012c8d <Krnl::startCPU(int)>:
c0012c8d:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0012c92:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0012c99:	0f 84 36 01 00 00    	je     c0012dd5 <Krnl::startCPU(int)+0x148>
c0012c9f:	53                   	push   ebx
c0012ca0:	83 ec 10             	sub    esp,0x10
c0012ca3:	fa                   	cli    
c0012ca4:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0012caa:	6a 1b                	push   0x1b
c0012cac:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0012cb2:	e8 af 65 ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0012cb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cbc:	89 c3                	mov    ebx,eax
c0012cbe:	58                   	pop    eax
c0012cbf:	5a                   	pop    edx
c0012cc0:	53                   	push   ebx
c0012cc1:	68 18 40 02 c0       	push   0xc0024018
c0012cc6:	e8 fa a2 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012ccb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012cd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cd9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012ce3:	c1 e0 18             	shl    eax,0x18
c0012ce6:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0012cec:	83 c4 10             	add    esp,0x10
c0012cef:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012cf5:	09 c2                	or     edx,eax
c0012cf7:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0012cfd:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0012d03:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012d09:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012d0f:	80 cd c5             	or     ch,0xc5
c0012d12:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012d18:	f3 90                	pause  
c0012d1a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012d1c:	0f ba e1 0c          	bt     ecx,0xc
c0012d20:	72 f6                	jb     c0012d18 <Krnl::startCPU(int)+0x8b>
c0012d22:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012d28:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012d2e:	09 c1                	or     ecx,eax
c0012d30:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0012d36:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012d3c:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0012d42:	80 cd 85             	or     ch,0x85
c0012d45:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012d4b:	f3 90                	pause  
c0012d4d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012d4f:	0f ba e1 0c          	bt     ecx,0xc
c0012d53:	72 f6                	jb     c0012d4b <Krnl::startCPU(int)+0xbe>
c0012d55:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012d5f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012d65:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012d6b:	09 c1                	or     ecx,eax
c0012d6d:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0012d73:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0012d79:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0012d7f:	81 c9 02 06 00 00    	or     ecx,0x602
c0012d85:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0012d8b:	f3 90                	pause  
c0012d8d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012d8f:	0f ba e1 0c          	bt     ecx,0xc
c0012d93:	72 f6                	jb     c0012d8b <Krnl::startCPU(int)+0xfe>
c0012d95:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0012d9f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0012da5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0012dab:	09 c8                	or     eax,ecx
c0012dad:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0012db3:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0012db9:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0012dbe:	0d 02 06 00 00       	or     eax,0x602
c0012dc3:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0012dc9:	f3 90                	pause  
c0012dcb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dcd:	0f ba e0 0c          	bt     eax,0xc
c0012dd1:	72 f6                	jb     c0012dc9 <Krnl::startCPU(int)+0x13c>
c0012dd3:	eb fe                	jmp    c0012dd3 <Krnl::startCPU(int)+0x146>
c0012dd5:	c3                   	ret    

c0012dd6 <Krnl::startCPUs()>:
c0012dd6:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0012ddb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012de1:	88 c2                	mov    dl,al
c0012de3:	83 e2 0a             	and    edx,0xa
c0012de6:	80 fa 0a             	cmp    dl,0xa
c0012de9:	75 09                	jne    c0012df4 <Krnl::startCPUs()+0x1e>
c0012deb:	a8 01                	test   al,0x1
c0012ded:	74 05                	je     c0012df4 <Krnl::startCPUs()+0x1e>
c0012def:	e9 a7 d3 fe ff       	jmp    c000019b <prepareTramp>
c0012df4:	c3                   	ret    
c0012df5:	90                   	nop

c0012df6 <EnvVarContainer::getEnv(char const*)>:
c0012df6:	57                   	push   edi
c0012df7:	56                   	push   esi
c0012df8:	53                   	push   ebx
c0012df9:	31 db                	xor    ebx,ebx
c0012dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012dff:	39 1e                	cmp    DWORD PTR [esi],ebx
c0012e01:	7e 2b                	jle    c0012e2e <EnvVarContainer::getEnv(char const*)+0x38>
c0012e03:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0012e0a:	50                   	push   eax
c0012e0b:	50                   	push   eax
c0012e0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012e0f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0012e12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012e16:	e8 a9 d9 fe ff       	call   c00007c4 <strcmp>
c0012e1b:	83 c4 10             	add    esp,0x10
c0012e1e:	85 c0                	test   eax,eax
c0012e20:	75 09                	jne    c0012e2b <EnvVarContainer::getEnv(char const*)+0x35>
c0012e22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012e25:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0012e29:	eb 05                	jmp    c0012e30 <EnvVarContainer::getEnv(char const*)+0x3a>
c0012e2b:	43                   	inc    ebx
c0012e2c:	eb d1                	jmp    c0012dff <EnvVarContainer::getEnv(char const*)+0x9>
c0012e2e:	31 c0                	xor    eax,eax
c0012e30:	5b                   	pop    ebx
c0012e31:	5e                   	pop    esi
c0012e32:	5f                   	pop    edi
c0012e33:	c3                   	ret    

c0012e34 <EnvVarContainer::setEnv(char const*, char const*)>:
c0012e34:	55                   	push   ebp
c0012e35:	57                   	push   edi
c0012e36:	56                   	push   esi
c0012e37:	53                   	push   ebx
c0012e38:	83 ec 28             	sub    esp,0x28
c0012e3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012e3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012e43:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012e47:	56                   	push   esi
c0012e48:	e8 4b d8 fe ff       	call   c0000698 <strlen>
c0012e4d:	40                   	inc    eax
c0012e4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e51:	e8 61 6e ff ff       	call   c0009cb7 <malloc>
c0012e56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e5d:	e8 36 d8 fe ff       	call   c0000698 <strlen>
c0012e62:	40                   	inc    eax
c0012e63:	89 04 24             	mov    DWORD PTR [esp],eax
c0012e66:	e8 4c 6e ff ff       	call   c0009cb7 <malloc>
c0012e6b:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e72:	e8 21 d8 fe ff       	call   c0000698 <strlen>
c0012e77:	83 c4 0c             	add    esp,0xc
c0012e7a:	40                   	inc    eax
c0012e7b:	50                   	push   eax
c0012e7c:	6a 00                	push   0x0
c0012e7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e82:	e8 f5 d7 fe ff       	call   c000067c <memset>
c0012e87:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e8a:	e8 09 d8 fe ff       	call   c0000698 <strlen>
c0012e8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012e93:	8d 48 01             	lea    ecx,[eax+0x1]
c0012e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e9b:	89 de                	mov    esi,ebx
c0012e9d:	e8 f6 d7 fe ff       	call   c0000698 <strlen>
c0012ea2:	83 c4 0c             	add    esp,0xc
c0012ea5:	40                   	inc    eax
c0012ea6:	50                   	push   eax
c0012ea7:	6a 00                	push   0x0
c0012ea9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ead:	e8 ca d7 fe ff       	call   c000067c <memset>
c0012eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012eb5:	e8 de d7 fe ff       	call   c0000698 <strlen>
c0012eba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012ebe:	8d 48 01             	lea    ecx,[eax+0x1]
c0012ec1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ec3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ec6:	40                   	inc    eax
c0012ec7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012eca:	c1 e0 03             	shl    eax,0x3
c0012ecd:	5a                   	pop    edx
c0012ece:	59                   	pop    ecx
c0012ecf:	50                   	push   eax
c0012ed0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ed3:	e8 cb 6d ff ff       	call   c0009ca3 <realloc>
c0012ed8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0012edc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012edf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0012ee2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0012ee6:	b9 08 00 00 00       	mov    ecx,0x8
c0012eeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eed:	83 c4 2c             	add    esp,0x2c
c0012ef0:	5b                   	pop    ebx
c0012ef1:	5e                   	pop    esi
c0012ef2:	5f                   	pop    edi
c0012ef3:	5d                   	pop    ebp
c0012ef4:	c3                   	ret    
c0012ef5:	90                   	nop

c0012ef6 <EnvVarContainer::deleteEnv(char const*)>:
c0012ef6:	c3                   	ret    
c0012ef7:	90                   	nop

c0012ef8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0012ef8:	55                   	push   ebp
c0012ef9:	57                   	push   edi
c0012efa:	56                   	push   esi
c0012efb:	53                   	push   ebx
c0012efc:	81 ec 38 01 00 00    	sub    esp,0x138
c0012f02:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0012f09:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0012f10:	68 14 01 00 00       	push   0x114
c0012f15:	e8 9d 6d ff ff       	call   c0009cb7 <malloc>
c0012f1a:	83 c4 0c             	add    esp,0xc
c0012f1d:	89 c3                	mov    ebx,eax
c0012f1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0012f22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012f29:	50                   	push   eax
c0012f2a:	e8 01 a6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0012f2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f32:	e8 41 a9 ff ff       	call   c000d878 <File::exists()>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	84 c0                	test   al,al
c0012f3c:	75 31                	jne    c0012f6f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0012f3e:	50                   	push   eax
c0012f3f:	50                   	push   eax
c0012f40:	6a 12                	push   0x12
c0012f42:	53                   	push   ebx
c0012f43:	e8 c2 a6 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0012f48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f4a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0012f4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f50:	e8 43 d7 fe ff       	call   c0000698 <strlen>
c0012f55:	5a                   	pop    edx
c0012f56:	31 d2                	xor    edx,edx
c0012f58:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012f5c:	51                   	push   ecx
c0012f5d:	56                   	push   esi
c0012f5e:	52                   	push   edx
c0012f5f:	50                   	push   eax
c0012f60:	53                   	push   ebx
c0012f61:	ff d7                	call   edi
c0012f63:	83 c4 14             	add    esp,0x14
c0012f66:	53                   	push   ebx
c0012f67:	e8 fc a6 ff ff       	call   c000d668 <File::close()>
c0012f6c:	83 c4 10             	add    esp,0x10
c0012f6f:	56                   	push   esi
c0012f70:	31 f6                	xor    esi,esi
c0012f72:	68 00 01 00 00       	push   0x100
c0012f77:	6a 00                	push   0x0
c0012f79:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0012f7d:	50                   	push   eax
c0012f7e:	e8 f9 d6 fe ff       	call   c000067c <memset>
c0012f83:	5f                   	pop    edi
c0012f84:	58                   	pop    eax
c0012f85:	6a 01                	push   0x1
c0012f87:	53                   	push   ebx
c0012f88:	e8 7d a6 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0012f8d:	83 c4 10             	add    esp,0x10
c0012f90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f9d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0012fa1:	51                   	push   ecx
c0012fa2:	8d 54 24 23          	lea    edx,[esp+0x23]
c0012fa6:	52                   	push   edx
c0012fa7:	6a 00                	push   0x0
c0012fa9:	6a 01                	push   0x1
c0012fab:	53                   	push   ebx
c0012fac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012faf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0012fb3:	83 c4 20             	add    esp,0x20
c0012fb6:	3c 0d                	cmp    al,0xd
c0012fb8:	0f 84 09 01 00 00    	je     c00130c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0012fbe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0012fc3:	0f 84 ef 00 00 00    	je     c00130b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012fc9:	3c 0a                	cmp    al,0xa
c0012fcb:	74 13                	je     c0012fe0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012fcd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012fd2:	74 0c                	je     c0012fe0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0012fd4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0012fda:	0f 8e d8 00 00 00    	jle    c00130b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0012fe0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fe4:	83 ec 0c             	sub    esp,0xc
c0012fe7:	8d 78 01             	lea    edi,[eax+0x1]
c0012fea:	57                   	push   edi
c0012feb:	e8 c7 6c ff ff       	call   c0009cb7 <malloc>
c0012ff0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0012ff4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012ff8:	8d 56 04             	lea    edx,[esi+0x4]
c0012ffb:	89 14 24             	mov    DWORD PTR [esp],edx
c0012ffe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013002:	e8 b0 6c ff ff       	call   c0009cb7 <malloc>
c0013007:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001300b:	83 c4 0c             	add    esp,0xc
c001300e:	57                   	push   edi
c001300f:	6a 00                	push   0x0
c0013011:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013015:	e8 62 d6 fe ff       	call   c000067c <memset>
c001301a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001301e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013022:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013026:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013028:	83 c4 0c             	add    esp,0xc
c001302b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001302f:	52                   	push   edx
c0013030:	6a 00                	push   0x0
c0013032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013036:	e8 41 d6 fe ff       	call   c000067c <memset>
c001303b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001303f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013043:	89 34 24             	mov    DWORD PTR [esp],esi
c0013046:	e8 4d d6 fe ff       	call   c0000698 <strlen>
c001304b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001304f:	89 c1                	mov    ecx,eax
c0013051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013053:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013056:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013059:	40                   	inc    eax
c001305a:	83 c4 10             	add    esp,0x10
c001305d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013060:	85 d2                	test   edx,edx
c0013062:	75 0c                	jne    c0013070 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	6a 08                	push   0x8
c0013069:	e8 49 6c ff ff       	call   c0009cb7 <malloc>
c001306e:	eb 0c                	jmp    c001307c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013070:	c1 e0 03             	shl    eax,0x3
c0013073:	51                   	push   ecx
c0013074:	51                   	push   ecx
c0013075:	50                   	push   eax
c0013076:	52                   	push   edx
c0013077:	e8 27 6c ff ff       	call   c0009ca3 <realloc>
c001307c:	83 c4 10             	add    esp,0x10
c001307f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013082:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013085:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013088:	8d 74 24 18          	lea    esi,[esp+0x18]
c001308c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013090:	b9 08 00 00 00       	mov    ecx,0x8
c0013095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013097:	31 f6                	xor    esi,esi
c0013099:	50                   	push   eax
c001309a:	68 00 01 00 00       	push   0x100
c001309f:	6a 00                	push   0x0
c00130a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00130a5:	50                   	push   eax
c00130a6:	e8 d1 d5 fe ff       	call   c000067c <memset>
c00130ab:	83 c4 10             	add    esp,0x10
c00130ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00130b6:	eb 0f                	jmp    c00130c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00130b8:	3c 3d                	cmp    al,0x3d
c00130ba:	74 07                	je     c00130c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00130bc:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00130c0:	46                   	inc    esi
c00130c1:	eb 04                	jmp    c00130c7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00130c3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00130c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00130cc:	0f 85 c6 fe ff ff    	jne    c0012f98 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00130d2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00130d8:	5b                   	pop    ebx
c00130d9:	5e                   	pop    esi
c00130da:	5f                   	pop    edi
c00130db:	5d                   	pop    ebp
c00130dc:	c3                   	ret    
c00130dd:	90                   	nop

c00130de <EnvVarContainer::__loadSystem()>:
c00130de:	83 ec 10             	sub    esp,0x10
c00130e1:	68 e0 59 02 c0       	push   0xc00259e0
c00130e6:	68 29 40 02 c0       	push   0xc0024029
c00130eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ef:	e8 04 fe ff ff       	call   c0012ef8 <EnvVarContainer::loadFrom(char const*, char const*)>
c00130f4:	83 c4 1c             	add    esp,0x1c
c00130f7:	c3                   	ret    

c00130f8 <EnvVarContainer::__loadUser()>:
c00130f8:	c3                   	ret    
c00130f9:	90                   	nop

c00130fa <EnvVarContainer::EnvVarContainer(Process*)>:
c00130fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001310c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001310f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013113:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001311a:	90                   	nop
c001311b:	c3                   	ret    

c001311c <EnvVarContainer::~EnvVarContainer()>:
c001311c:	83 ec 0c             	sub    esp,0xc
c001311f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013123:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013126:	85 c0                	test   eax,eax
c0013128:	74 1d                	je     c0013147 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013130:	85 c0                	test   eax,eax
c0013132:	74 13                	je     c0013147 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013138:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001313b:	83 ec 0c             	sub    esp,0xc
c001313e:	50                   	push   eax
c001313f:	e8 83 6b ff ff       	call   c0009cc7 <free>
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	90                   	nop
c0013148:	83 c4 0c             	add    esp,0xc
c001314b:	c3                   	ret    

c001314c <Krnl::getEnv(Process*, char const*)>:
c001314c:	53                   	push   ebx
c001314d:	83 ec 08             	sub    esp,0x8
c0013150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013154:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013158:	39 05 f0 97 02 c0    	cmp    DWORD PTR ds:0xc00297f0,eax
c001315e:	74 04                	je     c0013164 <Krnl::getEnv(Process*, char const*)+0x18>
c0013160:	85 c0                	test   eax,eax
c0013162:	75 0b                	jne    c001316f <Krnl::getEnv(Process*, char const*)+0x23>
c0013164:	a1 74 8d 02 c0       	mov    eax,ds:0xc0028d74
c0013169:	85 c0                	test   eax,eax
c001316b:	75 19                	jne    c0013186 <Krnl::getEnv(Process*, char const*)+0x3a>
c001316d:	eb 27                	jmp    c0013196 <Krnl::getEnv(Process*, char const*)+0x4a>
c001316f:	52                   	push   edx
c0013170:	52                   	push   edx
c0013171:	53                   	push   ebx
c0013172:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0013178:	e8 79 fc ff ff       	call   c0012df6 <EnvVarContainer::getEnv(char const*)>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	85 c0                	test   eax,eax
c0013182:	75 28                	jne    c00131ac <Krnl::getEnv(Process*, char const*)+0x60>
c0013184:	eb de                	jmp    c0013164 <Krnl::getEnv(Process*, char const*)+0x18>
c0013186:	52                   	push   edx
c0013187:	52                   	push   edx
c0013188:	53                   	push   ebx
c0013189:	50                   	push   eax
c001318a:	e8 67 fc ff ff       	call   c0012df6 <EnvVarContainer::getEnv(char const*)>
c001318f:	83 c4 10             	add    esp,0x10
c0013192:	85 c0                	test   eax,eax
c0013194:	75 16                	jne    c00131ac <Krnl::getEnv(Process*, char const*)+0x60>
c0013196:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001319a:	a1 78 8d 02 c0       	mov    eax,ds:0xc0028d78
c001319f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131a3:	83 c4 08             	add    esp,0x8
c00131a6:	5b                   	pop    ebx
c00131a7:	e9 4a fc ff ff       	jmp    c0012df6 <EnvVarContainer::getEnv(char const*)>
c00131ac:	83 c4 08             	add    esp,0x8
c00131af:	5b                   	pop    ebx
c00131b0:	c3                   	ret    

c00131b1 <Krnl::setEnvSystem(char const*, char const*)>:
c00131b1:	83 ec 10             	sub    esp,0x10
c00131b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131bc:	ff 35 78 8d 02 c0    	push   DWORD PTR ds:0xc0028d78
c00131c2:	e8 6d fc ff ff       	call   c0012e34 <EnvVarContainer::setEnv(char const*, char const*)>
c00131c7:	83 c4 1c             	add    esp,0x1c
c00131ca:	c3                   	ret    

c00131cb <Krnl::setEnvUser(char const*, char const*)>:
c00131cb:	a1 74 8d 02 c0       	mov    eax,ds:0xc0028d74
c00131d0:	85 c0                	test   eax,eax
c00131d2:	74 15                	je     c00131e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00131d4:	83 ec 10             	sub    esp,0x10
c00131d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131df:	50                   	push   eax
c00131e0:	e8 4f fc ff ff       	call   c0012e34 <EnvVarContainer::setEnv(char const*, char const*)>
c00131e5:	83 c4 1c             	add    esp,0x1c
c00131e8:	c3                   	ret    
c00131e9:	c3                   	ret    

c00131ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00131ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131ee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00131f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131f8:	e9 37 fc ff ff       	jmp    c0012e34 <EnvVarContainer::setEnv(char const*, char const*)>

c00131fd <Krnl::deleteEnvSystem(char const*)>:
c00131fd:	c3                   	ret    

c00131fe <Krnl::deleteEnvUser(char const*)>:
c00131fe:	c3                   	ret    

c00131ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c00131ff:	c3                   	ret    

c0013200 <Krnl::newProcessEnv(Process*)>:
c0013200:	83 ec 28             	sub    esp,0x28
c0013203:	6a 0c                	push   0xc
c0013205:	e8 ad 6a ff ff       	call   c0009cb7 <malloc>
c001320a:	5a                   	pop    edx
c001320b:	59                   	pop    ecx
c001320c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013210:	50                   	push   eax
c0013211:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013215:	e8 e0 fe ff ff       	call   c00130fa <EnvVarContainer::EnvVarContainer(Process*)>
c001321a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001321e:	83 c4 2c             	add    esp,0x2c
c0013221:	c3                   	ret    

c0013222 <Krnl::copyProcessEnv(Process*, Process*)>:
c0013222:	57                   	push   edi
c0013223:	56                   	push   esi
c0013224:	53                   	push   ebx
c0013225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013229:	83 ec 0c             	sub    esp,0xc
c001322c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0013232:	6a 0c                	push   0xc
c0013234:	e8 7e 6a ff ff       	call   c0009cb7 <malloc>
c0013239:	89 c3                	mov    ebx,eax
c001323b:	58                   	pop    eax
c001323c:	5a                   	pop    edx
c001323d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013241:	53                   	push   ebx
c0013242:	e8 b3 fe ff ff       	call   c00130fa <EnvVarContainer::EnvVarContainer(Process*)>
c0013247:	8b 07                	mov    eax,DWORD PTR [edi]
c0013249:	89 03                	mov    DWORD PTR [ebx],eax
c001324b:	c1 e0 03             	shl    eax,0x3
c001324e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013251:	e8 61 6a ff ff       	call   c0009cb7 <malloc>
c0013256:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013259:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001325b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001325e:	c1 e1 03             	shl    ecx,0x3
c0013261:	89 c7                	mov    edi,eax
c0013263:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013265:	83 c4 10             	add    esp,0x10
c0013268:	89 d8                	mov    eax,ebx
c001326a:	5b                   	pop    ebx
c001326b:	5e                   	pop    esi
c001326c:	5f                   	pop    edi
c001326d:	c3                   	ret    

c001326e <Krnl::loadSystemEnv()>:
c001326e:	53                   	push   ebx
c001326f:	83 ec 14             	sub    esp,0x14
c0013272:	6a 0c                	push   0xc
c0013274:	e8 3e 6a ff ff       	call   c0009cb7 <malloc>
c0013279:	89 c3                	mov    ebx,eax
c001327b:	58                   	pop    eax
c001327c:	5a                   	pop    edx
c001327d:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c0013283:	53                   	push   ebx
c0013284:	e8 71 fe ff ff       	call   c00130fa <EnvVarContainer::EnvVarContainer(Process*)>
c0013289:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001328c:	89 1d 78 8d 02 c0    	mov    DWORD PTR ds:0xc0028d78,ebx
c0013292:	e8 47 fe ff ff       	call   c00130de <EnvVarContainer::__loadSystem()>
c0013297:	83 c4 18             	add    esp,0x18
c001329a:	5b                   	pop    ebx
c001329b:	c3                   	ret    

c001329c <Krnl::loadUserEnv()>:
c001329c:	53                   	push   ebx
c001329d:	83 ec 14             	sub    esp,0x14
c00132a0:	6a 0c                	push   0xc
c00132a2:	e8 10 6a ff ff       	call   c0009cb7 <malloc>
c00132a7:	89 c3                	mov    ebx,eax
c00132a9:	58                   	pop    eax
c00132aa:	5a                   	pop    edx
c00132ab:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c00132b1:	53                   	push   ebx
c00132b2:	e8 43 fe ff ff       	call   c00130fa <EnvVarContainer::EnvVarContainer(Process*)>
c00132b7:	89 1d 74 8d 02 c0    	mov    DWORD PTR ds:0xc0028d74,ebx
c00132bd:	83 c4 18             	add    esp,0x18
c00132c0:	5b                   	pop    ebx
c00132c1:	c3                   	ret    

c00132c2 <Krnl::flushEnv()>:
c00132c2:	c3                   	ret    

c00132c3 <Krnl::getProcessTotalEnvCount(Process*)>:
c00132c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c7:	8b 15 74 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d74
c00132cd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00132d3:	a1 78 8d 02 c0       	mov    eax,ds:0xc0028d78
c00132d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00132da:	03 01                	add    eax,DWORD PTR [ecx]
c00132dc:	85 d2                	test   edx,edx
c00132de:	74 02                	je     c00132e2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00132e0:	03 02                	add    eax,DWORD PTR [edx]
c00132e2:	c3                   	ret    

c00132e3 <Krnl::getProcessEnvPair(Process*, int)>:
c00132e3:	57                   	push   edi
c00132e4:	56                   	push   esi
c00132e5:	8b 35 74 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d74
c00132eb:	53                   	push   ebx
c00132ec:	85 f6                	test   esi,esi
c00132ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00132fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013300:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013302:	75 16                	jne    c001331a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0013304:	39 c2                	cmp    edx,eax
c0013306:	7c 16                	jl     c001331e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0013308:	8b 0d 78 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028d78
c001330e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0013310:	01 c6                	add    esi,eax
c0013312:	39 d6                	cmp    esi,edx
c0013314:	7e 3c                	jle    c0013352 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0013316:	29 c2                	sub    edx,eax
c0013318:	eb 04                	jmp    c001331e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001331a:	39 c2                	cmp    edx,eax
c001331c:	7d 05                	jge    c0013323 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001331e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0013321:	eb 20                	jmp    c0013343 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0013323:	8b 3e                	mov    edi,DWORD PTR [esi]
c0013325:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0013328:	39 d1                	cmp    ecx,edx
c001332a:	7e 04                	jle    c0013330 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001332c:	29 c2                	sub    edx,eax
c001332e:	eb 10                	jmp    c0013340 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0013330:	8b 35 78 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028d78
c0013336:	03 0e                	add    ecx,DWORD PTR [esi]
c0013338:	39 d1                	cmp    ecx,edx
c001333a:	7e 16                	jle    c0013352 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001333c:	29 c2                	sub    edx,eax
c001333e:	29 fa                	sub    edx,edi
c0013340:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013343:	8d 14 d0             	lea    edx,[eax+edx*8]
c0013346:	8b 02                	mov    eax,DWORD PTR [edx]
c0013348:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001334b:	89 03                	mov    DWORD PTR [ebx],eax
c001334d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0013350:	eb 1d                	jmp    c001336f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0013352:	83 ec 0c             	sub    esp,0xc
c0013355:	68 4b 40 02 c0       	push   0xc002404b
c001335a:	e8 18 00 00 00       	call   c0013377 <Krnl::panic(char const*)>
c001335f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0013365:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001336c:	83 c4 10             	add    esp,0x10
c001336f:	89 d8                	mov    eax,ebx
c0013371:	5b                   	pop    ebx
c0013372:	5e                   	pop    esi
c0013373:	5f                   	pop    edi
c0013374:	c2 04 00             	ret    0x4

c0013377 <Krnl::panic(char const*)>:
c0013377:	53                   	push   ebx
c0013378:	83 ec 10             	sub    esp,0x10
c001337b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001337f:	fa                   	cli    
c0013380:	c6 05 84 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d84,0x1
c0013387:	53                   	push   ebx
c0013388:	68 65 40 02 c0       	push   0xc0024065
c001338d:	e8 33 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013392:	83 c4 0c             	add    esp,0xc
c0013395:	6a 01                	push   0x1
c0013397:	6a 0f                	push   0xf
c0013399:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c001339f:	e8 60 78 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00133a4:	59                   	pop    ecx
c00133a5:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00133ab:	e8 6c 7d ff ff       	call   c000b11c <VgaText::clearScreen()>
c00133b0:	58                   	pop    eax
c00133b1:	5a                   	pop    edx
c00133b2:	68 bc 40 02 c0       	push   0xc00240bc
c00133b7:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00133bd:	e8 82 78 ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c00133c2:	83 c4 0c             	add    esp,0xc
c00133c5:	6a 01                	push   0x1
c00133c7:	6a 0f                	push   0xf
c00133c9:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00133cf:	e8 30 78 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00133d4:	59                   	pop    ecx
c00133d5:	58                   	pop    eax
c00133d6:	68 7e 40 02 c0       	push   0xc002407e
c00133db:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00133e1:	e8 c2 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00133e6:	58                   	pop    eax
c00133e7:	5a                   	pop    edx
c00133e8:	68 08 41 02 c0       	push   0xc0024108
c00133ed:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00133f3:	e8 b0 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00133f8:	59                   	pop    ecx
c00133f9:	58                   	pop    eax
c00133fa:	68 9a 40 02 c0       	push   0xc002409a
c00133ff:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013405:	e8 9e 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001340a:	58                   	pop    eax
c001340b:	5a                   	pop    edx
c001340c:	53                   	push   ebx
c001340d:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013413:	e8 90 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013418:	59                   	pop    ecx
c0013419:	5b                   	pop    ebx
c001341a:	68 ba 40 02 c0       	push   0xc00240ba
c001341f:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013425:	e8 7e 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001342a:	58                   	pop    eax
c001342b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001342f:	e8 77 2b 00 00       	call   c0015fab <Thr::getDriverNameFromAddress(unsigned long)>
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	85 c0                	test   eax,eax
c0013439:	0f 84 36 01 00 00    	je     c0013575 <Krnl::panic(char const*)+0x1fe>
c001343f:	83 ec 08             	sub    esp,0x8
c0013442:	89 c3                	mov    ebx,eax
c0013444:	68 44 41 02 c0       	push   0xc0024144
c0013449:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c001344f:	e8 54 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013454:	59                   	pop    ecx
c0013455:	58                   	pop    eax
c0013456:	68 9a 40 02 c0       	push   0xc002409a
c001345b:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013461:	e8 42 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013466:	58                   	pop    eax
c0013467:	5a                   	pop    edx
c0013468:	53                   	push   ebx
c0013469:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c001346f:	e8 34 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013474:	83 c4 10             	add    esp,0x10
c0013477:	83 ec 08             	sub    esp,0x8
c001347a:	68 b9 40 02 c0       	push   0xc00240b9
c001347f:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013485:	e8 1e 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001348a:	58                   	pop    eax
c001348b:	5a                   	pop    edx
c001348c:	68 9c 41 02 c0       	push   0xc002419c
c0013491:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013497:	e8 0c 7e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001349c:	59                   	pop    ecx
c001349d:	5b                   	pop    ebx
c001349e:	68 dc 41 02 c0       	push   0xc00241dc
c00134a3:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00134a9:	e8 fa 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00134ae:	58                   	pop    eax
c00134af:	5a                   	pop    edx
c00134b0:	68 a5 40 02 c0       	push   0xc00240a5
c00134b5:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00134bb:	e8 e8 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00134c0:	59                   	pop    ecx
c00134c1:	5b                   	pop    ebx
c00134c2:	68 20 42 02 c0       	push   0xc0024220
c00134c7:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00134cd:	e8 d6 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00134d2:	58                   	pop    eax
c00134d3:	5a                   	pop    edx
c00134d4:	68 bd 40 02 c0       	push   0xc00240bd
c00134d9:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00134df:	e8 c4 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00134e4:	0f 20 c0             	mov    eax,cr0
c00134e7:	59                   	pop    ecx
c00134e8:	5b                   	pop    ebx
c00134e9:	50                   	push   eax
c00134ea:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00134f0:	e8 6d 7d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00134f5:	58                   	pop    eax
c00134f6:	5a                   	pop    edx
c00134f7:	68 c7 40 02 c0       	push   0xc00240c7
c00134fc:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013502:	e8 a1 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013507:	0f 20 d0             	mov    eax,cr2
c001350a:	59                   	pop    ecx
c001350b:	5b                   	pop    ebx
c001350c:	50                   	push   eax
c001350d:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013513:	e8 4a 7d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0013518:	58                   	pop    eax
c0013519:	5a                   	pop    edx
c001351a:	68 d1 40 02 c0       	push   0xc00240d1
c001351f:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013525:	e8 7e 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001352a:	0f 20 d8             	mov    eax,cr3
c001352d:	59                   	pop    ecx
c001352e:	5b                   	pop    ebx
c001352f:	50                   	push   eax
c0013530:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013536:	e8 27 7d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001353b:	58                   	pop    eax
c001353c:	5a                   	pop    edx
c001353d:	68 e4 40 02 c0       	push   0xc00240e4
c0013542:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013548:	e8 5b 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001354d:	0f 20 e0             	mov    eax,cr4
c0013550:	59                   	pop    ecx
c0013551:	5b                   	pop    ebx
c0013552:	50                   	push   eax
c0013553:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013559:	e8 04 7d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001355e:	58                   	pop    eax
c001355f:	5a                   	pop    edx
c0013560:	68 ee 40 02 c0       	push   0xc00240ee
c0013565:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c001356b:	e8 38 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013570:	83 c4 10             	add    esp,0x10
c0013573:	eb fe                	jmp    c0013573 <Krnl::panic(char const*)+0x1fc>
c0013575:	51                   	push   ecx
c0013576:	51                   	push   ecx
c0013577:	68 70 41 02 c0       	push   0xc0024170
c001357c:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013582:	e8 21 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013587:	5b                   	pop    ebx
c0013588:	58                   	pop    eax
c0013589:	68 9a 40 02 c0       	push   0xc002409a
c001358e:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c0013594:	e8 0f 7d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013599:	58                   	pop    eax
c001359a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001359f:	5a                   	pop    edx
c00135a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135a3:	83 c0 0c             	add    eax,0xc
c00135a6:	50                   	push   eax
c00135a7:	ff 35 24 63 02 c0    	push   DWORD PTR ds:0xc0026324
c00135ad:	e8 f6 7c ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00135b2:	83 c4 10             	add    esp,0x10
c00135b5:	e9 bd fe ff ff       	jmp    c0013477 <Krnl::panic(char const*)+0x100>

c00135ba <Krnl::powerThread(void*)>:
c00135ba:	53                   	push   ebx
c00135bb:	83 ec 08             	sub    esp,0x8
c00135be:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00135c3:	48                   	dec    eax
c00135c4:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00135c9:	75 01                	jne    c00135cc <Krnl::powerThread(void*)+0x12>
c00135cb:	fb                   	sti    
c00135cc:	52                   	push   edx
c00135cd:	52                   	push   edx
c00135ce:	ff 35 e4 8d 02 c0    	push   DWORD PTR ds:0xc0028de4
c00135d4:	68 46 42 02 c0       	push   0xc0024246
c00135d9:	e8 e7 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00135de:	59                   	pop    ecx
c00135df:	8b 1d d4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028dd4
c00135e5:	58                   	pop    eax
c00135e6:	c6 05 a0 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028da0,0x0
c00135ed:	53                   	push   ebx
c00135ee:	68 50 42 02 c0       	push   0xc0024250
c00135f3:	e8 cd 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00135f8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00135ff:	e8 e0 36 00 00       	call   c0016ce4 <sleep(unsigned int)>
c0013604:	a1 e4 8d 02 c0       	mov    eax,ds:0xc0028de4
c0013609:	83 c4 10             	add    esp,0x10
c001360c:	83 c0 0a             	add    eax,0xa
c001360f:	85 db                	test   ebx,ebx
c0013611:	a3 e4 8d 02 c0       	mov    ds:0xc0028de4,eax
c0013616:	74 b4                	je     c00135cc <Krnl::powerThread(void*)+0x12>
c0013618:	39 d8                	cmp    eax,ebx
c001361a:	7e b0                	jle    c00135cc <Krnl::powerThread(void*)+0x12>
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	68 68 42 02 c0       	push   0xc0024268
c0013624:	e8 9c 99 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013629:	58                   	pop    eax
c001362a:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0013630:	e8 c5 5c ff ff       	call   c00092fa <Computer::sleep()>
c0013635:	83 c4 10             	add    esp,0x10
c0013638:	eb 92                	jmp    c00135cc <Krnl::powerThread(void*)+0x12>

c001363a <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001363a:	57                   	push   edi
c001363b:	b9 09 00 00 00       	mov    ecx,0x9
c0013640:	56                   	push   esi
c0013641:	bf c0 8d 02 c0       	mov    edi,0xc0028dc0
c0013646:	fc                   	cld    
c0013647:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001364b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001364d:	5e                   	pop    esi
c001364e:	5f                   	pop    edi
c001364f:	c3                   	ret    

c0013650 <Krnl::userIOReceived()>:
c0013650:	c7 05 e4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028de4,0x0
c001365a:	c3                   	ret    

c001365b <Krnl::handlePowerButton()>:
c001365b:	83 ec 0c             	sub    esp,0xc
c001365e:	a1 c0 8d 02 c0       	mov    eax,ds:0xc0028dc0
c0013663:	83 f8 02             	cmp    eax,0x2
c0013666:	75 10                	jne    c0013678 <Krnl::handlePowerButton()+0x1d>
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0013671:	e8 54 5c ff ff       	call   c00092ca <Computer::shutdown()>
c0013676:	eb 11                	jmp    c0013689 <Krnl::handlePowerButton()+0x2e>
c0013678:	48                   	dec    eax
c0013679:	75 11                	jne    c001368c <Krnl::handlePowerButton()+0x31>
c001367b:	83 ec 0c             	sub    esp,0xc
c001367e:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0013684:	e8 71 5c ff ff       	call   c00092fa <Computer::sleep()>
c0013689:	83 c4 10             	add    esp,0x10
c001368c:	83 c4 0c             	add    esp,0xc
c001368f:	c3                   	ret    

c0013690 <Krnl::handleSleepButton()>:
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	a1 c4 8d 02 c0       	mov    eax,ds:0xc0028dc4
c0013698:	83 f8 02             	cmp    eax,0x2
c001369b:	75 10                	jne    c00136ad <Krnl::handleSleepButton()+0x1d>
c001369d:	83 ec 0c             	sub    esp,0xc
c00136a0:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c00136a6:	e8 1f 5c ff ff       	call   c00092ca <Computer::shutdown()>
c00136ab:	eb 11                	jmp    c00136be <Krnl::handleSleepButton()+0x2e>
c00136ad:	48                   	dec    eax
c00136ae:	75 11                	jne    c00136c1 <Krnl::handleSleepButton()+0x31>
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c00136b9:	e8 3c 5c ff ff       	call   c00092fa <Computer::sleep()>
c00136be:	83 c4 10             	add    esp,0x10
c00136c1:	83 c4 0c             	add    esp,0xc
c00136c4:	c3                   	ret    

c00136c5 <Krnl::setupPowerManager()>:
c00136c5:	83 ec 0c             	sub    esp,0xc
c00136c8:	c7 05 e4 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028de4,0x0
c00136d2:	68 f0 00 00 00       	push   0xf0
c00136d7:	c6 05 a0 8d 02 c0 00 	mov    BYTE PTR ds:0xc0028da0,0x0
c00136de:	6a 00                	push   0x0
c00136e0:	68 ba 35 01 c0       	push   0xc00135ba
c00136e5:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c00136eb:	e8 d0 30 00 00       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c00136f0:	c7 05 c0 8d 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028dc0,0x2
c00136fa:	c7 05 c4 8d 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028dc4,0x1
c0013704:	c7 05 c8 8d 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028dc8,0x3
c001370e:	c7 05 cc 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dcc,0x0
c0013718:	c7 05 d8 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dd8,0x0
c0013722:	c7 05 d0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dd0,0x0
c001372c:	c7 05 dc 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ddc,0x0
c0013736:	c7 05 d4 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028dd4,0x3c
c0013740:	c7 05 e0 8d 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028de0,0x3c
c001374a:	83 c4 1c             	add    esp,0x1c
c001374d:	c3                   	ret    

c001374e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001374e:	55                   	push   ebp
c001374f:	57                   	push   edi
c0013750:	56                   	push   esi
c0013751:	53                   	push   ebx
c0013752:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013758:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001375f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0013761:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013764:	80 fb 40             	cmp    bl,0x40
c0013767:	75 1b                	jne    c0013784 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0013769:	8a 16                	mov    dl,BYTE PTR [esi]
c001376b:	84 d2                	test   dl,dl
c001376d:	0f 84 f1 00 00 00    	je     c0013864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0013773:	8d 46 01             	lea    eax,[esi+0x1]
c0013776:	80 fa 3a             	cmp    dl,0x3a
c0013779:	74 04                	je     c001377f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001377b:	89 c6                	mov    esi,eax
c001377d:	eb ea                	jmp    c0013769 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001377f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013782:	89 c6                	mov    esi,eax
c0013784:	50                   	push   eax
c0013785:	6a 40                	push   0x40
c0013787:	6a 00                	push   0x0
c0013789:	8d 44 24 24          	lea    eax,[esp+0x24]
c001378d:	50                   	push   eax
c001378e:	e8 e9 ce fe ff       	call   c000067c <memset>
c0013793:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001379a:	31 c0                	xor    eax,eax
c001379c:	83 c4 10             	add    esp,0x10
c001379f:	8a 0f                	mov    cl,BYTE PTR [edi]
c00137a1:	84 c9                	test   cl,cl
c00137a3:	0f 84 bb 00 00 00    	je     c0013864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00137a9:	3d c7 00 00 00       	cmp    eax,0xc7
c00137ae:	0f 8f b0 00 00 00    	jg     c0013864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00137b4:	80 f9 0a             	cmp    cl,0xa
c00137b7:	0f 85 98 00 00 00    	jne    c0013855 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00137bd:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00137c2:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00137c6:	a8 df                	test   al,0xdf
c00137c8:	0f 94 c1             	sete   cl
c00137cb:	3c 23                	cmp    al,0x23
c00137cd:	0f 94 c2             	sete   dl
c00137d0:	08 d1                	or     cl,dl
c00137d2:	75 4a                	jne    c001381e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00137d4:	8d 50 f7             	lea    edx,[eax-0x9]
c00137d7:	80 fa 01             	cmp    dl,0x1
c00137da:	76 42                	jbe    c001381e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00137dc:	3c 5b                	cmp    al,0x5b
c00137de:	75 42                	jne    c0013822 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00137e0:	80 fb 40             	cmp    bl,0x40
c00137e3:	75 39                	jne    c001381e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00137e5:	83 ec 0c             	sub    esp,0xc
c00137e8:	8d 54 24 65          	lea    edx,[esp+0x65]
c00137ec:	52                   	push   edx
c00137ed:	e8 a6 ce fe ff       	call   c0000698 <strlen>
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	83 f8 3f             	cmp    eax,0x3f
c00137f8:	77 6a                	ja     c0013864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00137fa:	50                   	push   eax
c00137fb:	50                   	push   eax
c00137fc:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013800:	52                   	push   edx
c0013801:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013805:	52                   	push   edx
c0013806:	e8 2d cf fe ff       	call   c0000738 <strcpy>
c001380b:	58                   	pop    eax
c001380c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013810:	52                   	push   edx
c0013811:	e8 82 ce fe ff       	call   c0000698 <strlen>
c0013816:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001381b:	83 c4 10             	add    esp,0x10
c001381e:	31 d2                	xor    edx,edx
c0013820:	eb 3a                	jmp    c001385c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0013822:	80 fb 40             	cmp    bl,0x40
c0013825:	74 06                	je     c001382d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0013827:	8d 44 24 58          	lea    eax,[esp+0x58]
c001382b:	eb 20                	jmp    c001384d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001382d:	50                   	push   eax
c001382e:	50                   	push   eax
c001382f:	55                   	push   ebp
c0013830:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013834:	50                   	push   eax
c0013835:	e8 8a cf fe ff       	call   c00007c4 <strcmp>
c001383a:	83 c4 10             	add    esp,0x10
c001383d:	85 c0                	test   eax,eax
c001383f:	75 dd                	jne    c001381e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0013841:	eb e4                	jmp    c0013827 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0013843:	8d 50 01             	lea    edx,[eax+0x1]
c0013846:	80 f9 3d             	cmp    cl,0x3d
c0013849:	74 1d                	je     c0013868 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001384b:	89 d0                	mov    eax,edx
c001384d:	8a 08                	mov    cl,BYTE PTR [eax]
c001384f:	84 c9                	test   cl,cl
c0013851:	75 f0                	jne    c0013843 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0013853:	eb 0f                	jmp    c0013864 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0013855:	8d 50 01             	lea    edx,[eax+0x1]
c0013858:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001385c:	47                   	inc    edi
c001385d:	89 d0                	mov    eax,edx
c001385f:	e9 3b ff ff ff       	jmp    c001379f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0013864:	31 c0                	xor    eax,eax
c0013866:	eb 33                	jmp    c001389b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0013868:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001386c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001386f:	50                   	push   eax
c0013870:	50                   	push   eax
c0013871:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013875:	50                   	push   eax
c0013876:	56                   	push   esi
c0013877:	e8 48 cf fe ff       	call   c00007c4 <strcmp>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	85 c0                	test   eax,eax
c0013881:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013885:	75 97                	jne    c001381e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0013887:	51                   	push   ecx
c0013888:	51                   	push   ecx
c0013889:	52                   	push   edx
c001388a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013891:	e8 a2 ce fe ff       	call   c0000738 <strcpy>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	b0 01                	mov    al,0x1
c001389b:	81 c4 2c 01 00 00    	add    esp,0x12c
c00138a1:	5b                   	pop    ebx
c00138a2:	5e                   	pop    esi
c00138a3:	5f                   	pop    edi
c00138a4:	5d                   	pop    ebp
c00138a5:	c3                   	ret    

c00138a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00138a6:	57                   	push   edi
c00138a7:	56                   	push   esi
c00138a8:	53                   	push   ebx
c00138a9:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00138af:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00138b6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00138bd:	53                   	push   ebx
c00138be:	e8 d5 cd fe ff       	call   c0000698 <strlen>
c00138c3:	89 34 24             	mov    DWORD PTR [esp],esi
c00138c6:	89 c7                	mov    edi,eax
c00138c8:	e8 cb cd fe ff       	call   c0000698 <strlen>
c00138cd:	83 c4 10             	add    esp,0x10
c00138d0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00138d4:	3d ff 00 00 00       	cmp    eax,0xff
c00138d9:	0f 87 d3 00 00 00    	ja     c00139b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00138df:	57                   	push   edi
c00138e0:	57                   	push   edi
c00138e1:	56                   	push   esi
c00138e2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00138e6:	56                   	push   esi
c00138e7:	e8 4c ce fe ff       	call   c0000738 <strcpy>
c00138ec:	58                   	pop    eax
c00138ed:	5a                   	pop    edx
c00138ee:	68 cb 45 02 c0       	push   0xc00245cb
c00138f3:	56                   	push   esi
c00138f4:	e8 7f cf fe ff       	call   c0000878 <strcat>
c00138f9:	59                   	pop    ecx
c00138fa:	5f                   	pop    edi
c00138fb:	53                   	push   ebx
c00138fc:	56                   	push   esi
c00138fd:	e8 76 cf fe ff       	call   c0000878 <strcat>
c0013902:	58                   	pop    eax
c0013903:	5a                   	pop    edx
c0013904:	68 75 42 02 c0       	push   0xc0024275
c0013909:	56                   	push   esi
c001390a:	e8 69 cf fe ff       	call   c0000878 <strcat>
c001390f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013916:	e8 9c 63 ff ff       	call   c0009cb7 <malloc>
c001391b:	83 c4 0c             	add    esp,0xc
c001391e:	89 c3                	mov    ebx,eax
c0013920:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c0013926:	56                   	push   esi
c0013927:	50                   	push   eax
c0013928:	e8 03 9c ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001392d:	83 c4 10             	add    esp,0x10
c0013930:	85 db                	test   ebx,ebx
c0013932:	74 7e                	je     c00139b2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013934:	51                   	push   ecx
c0013935:	51                   	push   ecx
c0013936:	6a 01                	push   0x1
c0013938:	53                   	push   ebx
c0013939:	e8 cc 9c ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001393e:	83 c4 10             	add    esp,0x10
c0013941:	85 c0                	test   eax,eax
c0013943:	74 08                	je     c001394d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013945:	83 ec 0c             	sub    esp,0xc
c0013948:	8b 03                	mov    eax,DWORD PTR [ebx]
c001394a:	53                   	push   ebx
c001394b:	eb 5f                	jmp    c00139ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001394d:	52                   	push   edx
c001394e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013952:	50                   	push   eax
c0013953:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013957:	50                   	push   eax
c0013958:	53                   	push   ebx
c0013959:	e8 58 9f ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001395e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013962:	83 c4 10             	add    esp,0x10
c0013965:	89 c1                	mov    ecx,eax
c0013967:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001396b:	74 31                	je     c001399e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001396d:	83 ec 0c             	sub    esp,0xc
c0013970:	50                   	push   eax
c0013971:	e8 41 63 ff ff       	call   c0009cb7 <malloc>
c0013976:	89 c6                	mov    esi,eax
c0013978:	58                   	pop    eax
c0013979:	8b 03                	mov    eax,DWORD PTR [ebx]
c001397b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001397f:	52                   	push   edx
c0013980:	56                   	push   esi
c0013981:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013985:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013989:	53                   	push   ebx
c001398a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001398d:	83 c4 20             	add    esp,0x20
c0013990:	85 c0                	test   eax,eax
c0013992:	75 0a                	jne    c001399e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013994:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013998:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001399c:	74 18                	je     c00139b6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001399e:	83 ec 0c             	sub    esp,0xc
c00139a1:	53                   	push   ebx
c00139a2:	e8 c1 9c ff ff       	call   c000d668 <File::close()>
c00139a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139af:	83 c4 10             	add    esp,0x10
c00139b2:	31 c0                	xor    eax,eax
c00139b4:	eb 3b                	jmp    c00139f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00139b6:	83 ec 0c             	sub    esp,0xc
c00139b9:	53                   	push   ebx
c00139ba:	e8 a9 9c ff ff       	call   c000d668 <File::close()>
c00139bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139c4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139c7:	83 c4 0c             	add    esp,0xc
c00139ca:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00139d1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00139d8:	56                   	push   esi
c00139d9:	e8 70 fd ff ff       	call   c001374e <Reg::findLineFromLoadedData(char*, char*, char*)>
c00139de:	89 34 24             	mov    DWORD PTR [esp],esi
c00139e1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00139e5:	e8 dd 62 ff ff       	call   c0009cc7 <free>
c00139ea:	83 c4 10             	add    esp,0x10
c00139ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00139f1:	81 c4 20 01 00 00    	add    esp,0x120
c00139f7:	5b                   	pop    ebx
c00139f8:	5e                   	pop    esi
c00139f9:	5f                   	pop    edi
c00139fa:	c3                   	ret    

c00139fb <Reg::getLine(char*, char*, char*)>:
c00139fb:	57                   	push   edi
c00139fc:	56                   	push   esi
c00139fd:	53                   	push   ebx
c00139fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a06:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013a0a:	57                   	push   edi
c0013a0b:	56                   	push   esi
c0013a0c:	53                   	push   ebx
c0013a0d:	68 7a 42 02 c0       	push   0xc002427a
c0013a12:	e8 8f fe ff ff       	call   c00138a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	84 c0                	test   al,al
c0013a1c:	75 10                	jne    c0013a2e <Reg::getLine(char*, char*, char*)+0x33>
c0013a1e:	57                   	push   edi
c0013a1f:	56                   	push   esi
c0013a20:	53                   	push   ebx
c0013a21:	68 9f 42 02 c0       	push   0xc002429f
c0013a26:	e8 7b fe ff ff       	call   c00138a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	5b                   	pop    ebx
c0013a2f:	5e                   	pop    esi
c0013a30:	5f                   	pop    edi
c0013a31:	c3                   	ret    

c0013a32 <Reg::readInt(char*, char*, int*)>:
c0013a32:	55                   	push   ebp
c0013a33:	57                   	push   edi
c0013a34:	56                   	push   esi
c0013a35:	53                   	push   ebx
c0013a36:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013a3c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0013a40:	57                   	push   edi
c0013a41:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013a48:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013a4f:	e8 a7 ff ff ff       	call   c00139fb <Reg::getLine(char*, char*, char*)>
c0013a54:	83 c4 10             	add    esp,0x10
c0013a57:	84 c0                	test   al,al
c0013a59:	0f 84 b3 00 00 00    	je     c0013b12 <Reg::readInt(char*, char*, int*)+0xe0>
c0013a5f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0013a63:	80 fa 2b             	cmp    dl,0x2b
c0013a66:	74 0c                	je     c0013a74 <Reg::readInt(char*, char*, int*)+0x42>
c0013a68:	80 fa 2d             	cmp    dl,0x2d
c0013a6b:	75 0e                	jne    c0013a7b <Reg::readInt(char*, char*, int*)+0x49>
c0013a6d:	ba 01 00 00 00       	mov    edx,0x1
c0013a72:	eb 0b                	jmp    c0013a7f <Reg::readInt(char*, char*, int*)+0x4d>
c0013a74:	ba 01 00 00 00       	mov    edx,0x1
c0013a79:	eb 02                	jmp    c0013a7d <Reg::readInt(char*, char*, int*)+0x4b>
c0013a7b:	31 d2                	xor    edx,edx
c0013a7d:	31 c0                	xor    eax,eax
c0013a7f:	be 0a 00 00 00       	mov    esi,0xa
c0013a84:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013a89:	75 20                	jne    c0013aab <Reg::readInt(char*, char*, int*)+0x79>
c0013a8b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0013a8f:	80 f9 78             	cmp    cl,0x78
c0013a92:	75 0a                	jne    c0013a9e <Reg::readInt(char*, char*, int*)+0x6c>
c0013a94:	83 c2 02             	add    edx,0x2
c0013a97:	be 10 00 00 00       	mov    esi,0x10
c0013a9c:	eb 0d                	jmp    c0013aab <Reg::readInt(char*, char*, int*)+0x79>
c0013a9e:	80 f9 62             	cmp    cl,0x62
c0013aa1:	75 08                	jne    c0013aab <Reg::readInt(char*, char*, int*)+0x79>
c0013aa3:	83 c2 02             	add    edx,0x2
c0013aa6:	be 02 00 00 00       	mov    esi,0x2
c0013aab:	01 d7                	add    edi,edx
c0013aad:	31 d2                	xor    edx,edx
c0013aaf:	8a 1f                	mov    bl,BYTE PTR [edi]
c0013ab1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0013ab5:	80 fb 0d             	cmp    bl,0xd
c0013ab8:	0f 94 c3             	sete   bl
c0013abb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013ac0:	0f 94 c1             	sete   cl
c0013ac3:	08 cb                	or     bl,cl
c0013ac5:	75 3a                	jne    c0013b01 <Reg::readInt(char*, char*, int*)+0xcf>
c0013ac7:	0f af d6             	imul   edx,esi
c0013aca:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0013acf:	83 fe 10             	cmp    esi,0x10
c0013ad2:	75 26                	jne    c0013afa <Reg::readInt(char*, char*, int*)+0xc8>
c0013ad4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013ad8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0013adb:	89 e9                	mov    ecx,ebp
c0013add:	80 f9 05             	cmp    cl,0x5
c0013ae0:	77 06                	ja     c0013ae8 <Reg::readInt(char*, char*, int*)+0xb6>
c0013ae2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0013ae6:	eb 16                	jmp    c0013afe <Reg::readInt(char*, char*, int*)+0xcc>
c0013ae8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0013aec:	83 e9 61             	sub    ecx,0x61
c0013aef:	80 f9 05             	cmp    cl,0x5
c0013af2:	77 06                	ja     c0013afa <Reg::readInt(char*, char*, int*)+0xc8>
c0013af4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0013af8:	eb 04                	jmp    c0013afe <Reg::readInt(char*, char*, int*)+0xcc>
c0013afa:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0013afe:	47                   	inc    edi
c0013aff:	eb ae                	jmp    c0013aaf <Reg::readInt(char*, char*, int*)+0x7d>
c0013b01:	84 c0                	test   al,al
c0013b03:	74 02                	je     c0013b07 <Reg::readInt(char*, char*, int*)+0xd5>
c0013b05:	f7 da                	neg    edx
c0013b07:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013b0e:	89 10                	mov    DWORD PTR [eax],edx
c0013b10:	88 d8                	mov    al,bl
c0013b12:	81 c4 ec 00 00 00    	add    esp,0xec
c0013b18:	5b                   	pop    ebx
c0013b19:	5e                   	pop    esi
c0013b1a:	5f                   	pop    edi
c0013b1b:	5d                   	pop    ebp
c0013b1c:	c3                   	ret    

c0013b1d <Reg::readString(char*, char*, char*, int)>:
c0013b1d:	57                   	push   edi
c0013b1e:	56                   	push   esi
c0013b1f:	53                   	push   ebx
c0013b20:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013b26:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013b2d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013b31:	57                   	push   edi
c0013b32:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013b39:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013b40:	e8 b6 fe ff ff       	call   c00139fb <Reg::getLine(char*, char*, char*)>
c0013b45:	83 c4 10             	add    esp,0x10
c0013b48:	89 c6                	mov    esi,eax
c0013b4a:	84 c0                	test   al,al
c0013b4c:	74 44                	je     c0013b92 <Reg::readString(char*, char*, char*, int)+0x75>
c0013b4e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013b55:	31 c0                	xor    eax,eax
c0013b57:	4a                   	dec    edx
c0013b58:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013b5b:	84 c9                	test   cl,cl
c0013b5d:	74 0f                	je     c0013b6e <Reg::readString(char*, char*, char*, int)+0x51>
c0013b5f:	39 c2                	cmp    edx,eax
c0013b61:	7e 0b                	jle    c0013b6e <Reg::readString(char*, char*, char*, int)+0x51>
c0013b63:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013b66:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013b6b:	40                   	inc    eax
c0013b6c:	eb ea                	jmp    c0013b58 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013b6e:	83 ec 0c             	sub    esp,0xc
c0013b71:	53                   	push   ebx
c0013b72:	e8 21 cb fe ff       	call   c0000698 <strlen>
c0013b77:	83 c4 10             	add    esp,0x10
c0013b7a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013b7f:	75 11                	jne    c0013b92 <Reg::readString(char*, char*, char*, int)+0x75>
c0013b81:	83 ec 0c             	sub    esp,0xc
c0013b84:	53                   	push   ebx
c0013b85:	e8 0e cb fe ff       	call   c0000698 <strlen>
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013b92:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013b98:	89 f0                	mov    eax,esi
c0013b9a:	5b                   	pop    ebx
c0013b9b:	5e                   	pop    esi
c0013b9c:	5f                   	pop    edi
c0013b9d:	c3                   	ret    

c0013b9e <Reg::readBool(char*, char*, bool*)>:
c0013b9e:	83 ec 20             	sub    esp,0x20
c0013ba1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013ba5:	50                   	push   eax
c0013ba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013baa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bae:	e8 7f fe ff ff       	call   c0013a32 <Reg::readInt(char*, char*, int*)>
c0013bb3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013bb8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013bbc:	0f 95 02             	setne  BYTE PTR [edx]
c0013bbf:	83 c4 2c             	add    esp,0x2c
c0013bc2:	c3                   	ret    

c0013bc3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013bc3:	53                   	push   ebx
c0013bc4:	83 ec 1c             	sub    esp,0x1c
c0013bc7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013bcb:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013bcf:	50                   	push   eax
c0013bd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bd8:	e8 c1 ff ff ff       	call   c0013b9e <Reg::readBool(char*, char*, bool*)>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	84 c0                	test   al,al
c0013be2:	74 04                	je     c0013be8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013be4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013be8:	88 d8                	mov    al,bl
c0013bea:	83 c4 18             	add    esp,0x18
c0013bed:	5b                   	pop    ebx
c0013bee:	c3                   	ret    

c0013bef <Reg::readIntWithDefault(char*, char*, int)>:
c0013bef:	53                   	push   ebx
c0013bf0:	83 ec 1c             	sub    esp,0x1c
c0013bf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013bf7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013bfb:	50                   	push   eax
c0013bfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c04:	e8 29 fe ff ff       	call   c0013a32 <Reg::readInt(char*, char*, int*)>
c0013c09:	83 c4 10             	add    esp,0x10
c0013c0c:	84 c0                	test   al,al
c0013c0e:	74 04                	je     c0013c14 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013c10:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013c14:	89 d8                	mov    eax,ebx
c0013c16:	83 c4 18             	add    esp,0x18
c0013c19:	5b                   	pop    ebx
c0013c1a:	c3                   	ret    

c0013c1b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013c1b:	57                   	push   edi
c0013c1c:	56                   	push   esi
c0013c1d:	56                   	push   esi
c0013c1e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c22:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013c26:	56                   	push   esi
c0013c27:	57                   	push   edi
c0013c28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c30:	e8 e8 fe ff ff       	call   c0013b1d <Reg::readString(char*, char*, char*, int)>
c0013c35:	83 c4 10             	add    esp,0x10
c0013c38:	84 c0                	test   al,al
c0013c3a:	75 1a                	jne    c0013c56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013c3c:	51                   	push   ecx
c0013c3d:	56                   	push   esi
c0013c3e:	6a 00                	push   0x0
c0013c40:	57                   	push   edi
c0013c41:	e8 36 ca fe ff       	call   c000067c <memset>
c0013c46:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013c49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c4f:	83 c4 10             	add    esp,0x10
c0013c52:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013c56:	89 f8                	mov    eax,edi
c0013c58:	5a                   	pop    edx
c0013c59:	5e                   	pop    esi
c0013c5a:	5f                   	pop    edi
c0013c5b:	c3                   	ret    

c0013c5c <Sys::eject(regs*)>:
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	83 ca ff             	or     edx,0xffffffff
c0013c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c66:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013c69:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013c6e:	83 e9 41             	sub    ecx,0x41
c0013c71:	83 f9 19             	cmp    ecx,0x19
c0013c74:	77 18                	ja     c0013c8e <Sys::eject(regs*)+0x32>
c0013c76:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c0013c7d:	85 c9                	test   ecx,ecx
c0013c7f:	74 0d                	je     c0013c8e <Sys::eject(regs*)+0x32>
c0013c81:	83 ec 0c             	sub    esp,0xc
c0013c84:	51                   	push   ecx
c0013c85:	e8 7a ba ff ff       	call   c000f704 <LogicalDisk::eject()>
c0013c8a:	83 c4 10             	add    esp,0x10
c0013c8d:	99                   	cdq    
c0013c8e:	83 c4 0c             	add    esp,0xc
c0013c91:	c3                   	ret    

c0013c92 <Sys::exit(regs*)>:
c0013c92:	83 ec 18             	sub    esp,0x18
c0013c95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c99:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c9c:	e8 53 36 00 00       	call   c00172f4 <terminateTask(int)>
c0013ca1:	83 c8 ff             	or     eax,0xffffffff
c0013ca4:	83 c4 1c             	add    esp,0x1c
c0013ca7:	89 c2                	mov    edx,eax
c0013ca9:	c3                   	ret    

c0013caa <Sys::getCwd(regs*)>:
c0013caa:	83 ec 10             	sub    esp,0x10
c0013cad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cb1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013cb4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cbc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013cbf:	e8 6e 96 ff ff       	call   c000d332 <Fs::getcwd(Process*, char*, int)>
c0013cc4:	83 c4 1c             	add    esp,0x1c
c0013cc7:	99                   	cdq    
c0013cc8:	c3                   	ret    

c0013cc9 <Sys::getPID(regs*)>:
c0013cc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cd3:	99                   	cdq    
c0013cd4:	c3                   	ret    

c0013cd5 <Sys::getRAMData(regs*)>:
c0013cd5:	8b 0d d8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262d8
c0013cdb:	69 05 d4 62 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00262d4,0xc8
c0013ce5:	99                   	cdq    
c0013ce6:	f7 f9                	idiv   ecx
c0013ce8:	c1 e0 18             	shl    eax,0x18
c0013ceb:	09 c8                	or     eax,ecx
c0013ced:	99                   	cdq    
c0013cee:	c3                   	ret    

c0013cef <Sys::getVGAPtr(regs*)>:
c0013cef:	55                   	push   ebp
c0013cf0:	57                   	push   edi
c0013cf1:	56                   	push   esi
c0013cf2:	53                   	push   ebx
c0013cf3:	83 ec 18             	sub    esp,0x18
c0013cf6:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0013cfa:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0013cfd:	e8 f6 30 00 00       	call   c0016df8 <Thr::processFromPID(int)>
c0013d02:	83 c4 10             	add    esp,0x10
c0013d05:	89 c1                	mov    ecx,eax
c0013d07:	b8 01 00 00 00       	mov    eax,0x1
c0013d0c:	85 c9                	test   ecx,ecx
c0013d0e:	74 59                	je     c0013d69 <Sys::getVGAPtr(regs*)+0x7a>
c0013d10:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0013d16:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0013d1a:	74 0c                	je     c0013d28 <Sys::getVGAPtr(regs*)+0x39>
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	53                   	push   ebx
c0013d20:	e8 80 70 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c0013d25:	83 c4 10             	add    esp,0x10
c0013d28:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0013d2b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0013d2e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013d33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d35:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0013d38:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013d3b:	81 c3 82 00 00 00    	add    ebx,0x82
c0013d41:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013d47:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013d4a:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0013d4d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013d53:	50                   	push   eax
c0013d54:	50                   	push   eax
c0013d55:	53                   	push   ebx
c0013d56:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013d59:	05 a8 0f 00 00       	add    eax,0xfa8
c0013d5e:	50                   	push   eax
c0013d5f:	e8 d4 c9 fe ff       	call   c0000738 <strcpy>
c0013d64:	83 c4 10             	add    esp,0x10
c0013d67:	31 c0                	xor    eax,eax
c0013d69:	83 c4 0c             	add    esp,0xc
c0013d6c:	31 d2                	xor    edx,edx
c0013d6e:	5b                   	pop    ebx
c0013d6f:	5e                   	pop    esi
c0013d70:	5f                   	pop    edi
c0013d71:	5d                   	pop    ebp
c0013d72:	c3                   	ret    

c0013d73 <Sys::loadDLL(regs*)>:
c0013d73:	56                   	push   esi
c0013d74:	53                   	push   ebx
c0013d75:	31 d2                	xor    edx,edx
c0013d77:	51                   	push   ecx
c0013d78:	b8 01 00 00 00       	mov    eax,0x1
c0013d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d81:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013d85:	0f 84 8c 00 00 00    	je     c0013e17 <Sys::loadDLL(regs*)+0xa4>
c0013d8b:	83 ec 0c             	sub    esp,0xc
c0013d8e:	68 14 01 00 00       	push   0x114
c0013d93:	e8 1f 5f ff ff       	call   c0009cb7 <malloc>
c0013d98:	83 c4 0c             	add    esp,0xc
c0013d9b:	89 c3                	mov    ebx,eax
c0013d9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013da2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013da5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013da8:	53                   	push   ebx
c0013da9:	e8 82 97 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0013dae:	83 c4 10             	add    esp,0x10
c0013db1:	31 d2                	xor    edx,edx
c0013db3:	b8 02 00 00 00       	mov    eax,0x2
c0013db8:	85 db                	test   ebx,ebx
c0013dba:	74 5b                	je     c0013e17 <Sys::loadDLL(regs*)+0xa4>
c0013dbc:	83 ec 0c             	sub    esp,0xc
c0013dbf:	53                   	push   ebx
c0013dc0:	e8 b3 9a ff ff       	call   c000d878 <File::exists()>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	84 c0                	test   al,al
c0013dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dcc:	75 11                	jne    c0013ddf <Sys::loadDLL(regs*)+0x6c>
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	53                   	push   ebx
c0013dd2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013dd5:	83 c4 10             	add    esp,0x10
c0013dd8:	b8 03 00 00 00       	mov    eax,0x3
c0013ddd:	eb 36                	jmp    c0013e15 <Sys::loadDLL(regs*)+0xa2>
c0013ddf:	83 ec 0c             	sub    esp,0xc
c0013de2:	53                   	push   ebx
c0013de3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013de6:	58                   	pop    eax
c0013de7:	5a                   	pop    edx
c0013de8:	6a 00                	push   0x0
c0013dea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013ded:	e8 0a 22 00 00       	call   c0015ffc <Thr::loadDLL(char const*, bool)>
c0013df2:	83 c4 10             	add    esp,0x10
c0013df5:	89 c1                	mov    ecx,eax
c0013df7:	31 d2                	xor    edx,edx
c0013df9:	b8 04 00 00 00       	mov    eax,0x4
c0013dfe:	85 c9                	test   ecx,ecx
c0013e00:	74 15                	je     c0013e17 <Sys::loadDLL(regs*)+0xa4>
c0013e02:	53                   	push   ebx
c0013e03:	53                   	push   ebx
c0013e04:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c0013e0a:	51                   	push   ecx
c0013e0b:	e8 1d 24 00 00       	call   c001622d <Thr::executeDLL(unsigned long, void*)>
c0013e10:	83 c4 10             	add    esp,0x10
c0013e13:	31 c0                	xor    eax,eax
c0013e15:	31 d2                	xor    edx,edx
c0013e17:	59                   	pop    ecx
c0013e18:	5b                   	pop    ebx
c0013e19:	5e                   	pop    esi
c0013e1a:	c3                   	ret    

c0013e1b <Sys::read(regs*)>:
c0013e1b:	57                   	push   edi
c0013e1c:	56                   	push   esi
c0013e1d:	53                   	push   ebx
c0013e1e:	83 ec 10             	sub    esp,0x10
c0013e21:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013e25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013e28:	83 f8 02             	cmp    eax,0x2
c0013e2b:	77 10                	ja     c0013e3d <Sys::read(regs*)+0x22>
c0013e2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e35:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013e3b:	eb 0e                	jmp    c0013e4b <Sys::read(regs*)+0x30>
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	50                   	push   eax
c0013e41:	e8 cd 7c ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	89 c1                	mov    ecx,eax
c0013e4b:	83 c8 ff             	or     eax,0xffffffff
c0013e4e:	85 c9                	test   ecx,ecx
c0013e50:	89 c2                	mov    edx,eax
c0013e52:	74 28                	je     c0013e7c <Sys::read(regs*)+0x61>
c0013e54:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013e5c:	31 ff                	xor    edi,edi
c0013e5e:	83 ec 0c             	sub    esp,0xc
c0013e61:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e63:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013e67:	52                   	push   edx
c0013e68:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013e6b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013e6e:	57                   	push   edi
c0013e6f:	56                   	push   esi
c0013e70:	51                   	push   ecx
c0013e71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e78:	83 c4 20             	add    esp,0x20
c0013e7b:	99                   	cdq    
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	5b                   	pop    ebx
c0013e80:	5e                   	pop    esi
c0013e81:	5f                   	pop    edi
c0013e82:	c3                   	ret    

c0013e83 <Sys::sbrk(regs*)>:
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	50                   	push   eax
c0013e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e92:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e95:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e9b:	85 db                	test   ebx,ebx
c0013e9d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013ea0:	74 02                	je     c0013ea4 <Sys::sbrk(regs*)+0x21>
c0013ea2:	79 06                	jns    c0013eaa <Sys::sbrk(regs*)+0x27>
c0013ea4:	89 f0                	mov    eax,esi
c0013ea6:	31 d2                	xor    edx,edx
c0013ea8:	eb 2a                	jmp    c0013ed4 <Sys::sbrk(regs*)+0x51>
c0013eaa:	83 c8 ff             	or     eax,0xffffffff
c0013ead:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013eb3:	89 c2                	mov    edx,eax
c0013eb5:	77 1d                	ja     c0013ed4 <Sys::sbrk(regs*)+0x51>
c0013eb7:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013ebd:	50                   	push   eax
c0013ebe:	c1 ea 0c             	shr    edx,0xc
c0013ec1:	68 07 0c 00 00       	push   0xc07
c0013ec6:	52                   	push   edx
c0013ec7:	51                   	push   ecx
c0013ec8:	e8 0b 85 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0013ecd:	89 f0                	mov    eax,esi
c0013ecf:	31 d2                	xor    edx,edx
c0013ed1:	83 c4 10             	add    esp,0x10
c0013ed4:	59                   	pop    ecx
c0013ed5:	5b                   	pop    ebx
c0013ed6:	5e                   	pop    esi
c0013ed7:	c3                   	ret    

c0013ed8 <Sys::setCwd(regs*)>:
c0013ed8:	83 ec 14             	sub    esp,0x14
c0013edb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013edf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ee7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013eea:	e8 28 9a ff ff       	call   c000d917 <Fs::setcwd(Process*, char*)>
c0013eef:	83 c4 1c             	add    esp,0x1c
c0013ef2:	99                   	cdq    
c0013ef3:	c3                   	ret    

c0013ef4 <Sys::setTime(regs*)>:
c0013ef4:	55                   	push   ebp
c0013ef5:	31 c9                	xor    ecx,ecx
c0013ef7:	57                   	push   edi
c0013ef8:	bd 0c 00 00 00       	mov    ebp,0xc
c0013efd:	56                   	push   esi
c0013efe:	53                   	push   ebx
c0013eff:	31 db                	xor    ebx,ebx
c0013f01:	83 ec 10             	sub    esp,0x10
c0013f04:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f08:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f0b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f0e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f11:	89 c2                	mov    edx,eax
c0013f13:	66 81 ef 6c 07       	sub    di,0x76c
c0013f18:	83 e2 1f             	and    edx,0x1f
c0013f1b:	c1 e7 10             	shl    edi,0x10
c0013f1e:	42                   	inc    edx
c0013f1f:	c1 e8 05             	shr    eax,0x5
c0013f22:	88 d1                	mov    cl,dl
c0013f24:	31 d2                	xor    edx,edx
c0013f26:	f7 f5                	div    ebp
c0013f28:	89 dd                	mov    ebp,ebx
c0013f2a:	88 d5                	mov    ch,dl
c0013f2c:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f32:	0f b7 c1             	movzx  eax,cx
c0013f35:	31 d2                	xor    edx,edx
c0013f37:	09 f8                	or     eax,edi
c0013f39:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f3e:	89 c1                	mov    ecx,eax
c0013f40:	89 f0                	mov    eax,esi
c0013f42:	f7 f7                	div    edi
c0013f44:	c1 e2 10             	shl    edx,0x10
c0013f47:	09 d5                	or     ebp,edx
c0013f49:	31 d2                	xor    edx,edx
c0013f4b:	89 eb                	mov    ebx,ebp
c0013f4d:	f7 f7                	div    edi
c0013f4f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f54:	88 d7                	mov    bh,dl
c0013f56:	89 f0                	mov    eax,esi
c0013f58:	31 d2                	xor    edx,edx
c0013f5a:	f7 f7                	div    edi
c0013f5c:	bf 18 00 00 00       	mov    edi,0x18
c0013f61:	31 d2                	xor    edx,edx
c0013f63:	f7 f7                	div    edi
c0013f65:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0013f6a:	88 d3                	mov    bl,dl
c0013f6c:	53                   	push   ebx
c0013f6d:	51                   	push   ecx
c0013f6e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f74:	e8 dd a1 ff ff       	call   c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f79:	83 c4 1c             	add    esp,0x1c
c0013f7c:	83 f0 01             	xor    eax,0x1
c0013f7f:	5b                   	pop    ebx
c0013f80:	0f b6 c0             	movzx  eax,al
c0013f83:	5e                   	pop    esi
c0013f84:	31 d2                	xor    edx,edx
c0013f86:	5f                   	pop    edi
c0013f87:	5d                   	pop    ebp
c0013f88:	c3                   	ret    

c0013f89 <Sys::timezone(regs*)>:
c0013f89:	53                   	push   ebx
c0013f8a:	83 ec 08             	sub    esp,0x8
c0013f8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f91:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f95:	75 17                	jne    c0013fae <Sys::timezone(regs*)+0x25>
c0013f97:	83 ec 0c             	sub    esp,0xc
c0013f9a:	68 ba 42 02 c0       	push   0xc00242ba
c0013f9f:	e8 21 90 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013fa4:	83 c8 ff             	or     eax,0xffffffff
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	89 c2                	mov    edx,eax
c0013fac:	eb 20                	jmp    c0013fce <Sys::timezone(regs*)+0x45>
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	68 cf 42 02 c0       	push   0xc00242cf
c0013fb6:	e8 0a 90 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013fbb:	58                   	pop    eax
c0013fbc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fbf:	e8 f4 9e ff ff       	call   c000deb8 <User::loadClockSettings(int)>
c0013fc4:	83 c4 10             	add    esp,0x10
c0013fc7:	b8 01 00 00 00       	mov    eax,0x1
c0013fcc:	31 d2                	xor    edx,edx
c0013fce:	83 c4 08             	add    esp,0x8
c0013fd1:	5b                   	pop    ebx
c0013fd2:	c3                   	ret    

c0013fd3 <Sys::write(regs*)>:
c0013fd3:	57                   	push   edi
c0013fd4:	56                   	push   esi
c0013fd5:	53                   	push   ebx
c0013fd6:	83 ec 10             	sub    esp,0x10
c0013fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fdd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fe0:	83 f8 02             	cmp    eax,0x2
c0013fe3:	77 10                	ja     c0013ff5 <Sys::write(regs*)+0x22>
c0013fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fed:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013ff3:	eb 0e                	jmp    c0014003 <Sys::write(regs*)+0x30>
c0013ff5:	83 ec 0c             	sub    esp,0xc
c0013ff8:	50                   	push   eax
c0013ff9:	e8 15 7b ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	89 c1                	mov    ecx,eax
c0014003:	83 c8 ff             	or     eax,0xffffffff
c0014006:	85 c9                	test   ecx,ecx
c0014008:	89 c2                	mov    edx,eax
c001400a:	74 28                	je     c0014034 <Sys::write(regs*)+0x61>
c001400c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014014:	31 ff                	xor    edi,edi
c0014016:	83 ec 0c             	sub    esp,0xc
c0014019:	8b 01                	mov    eax,DWORD PTR [ecx]
c001401b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001401f:	52                   	push   edx
c0014020:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014023:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014026:	57                   	push   edi
c0014027:	56                   	push   esi
c0014028:	51                   	push   ecx
c0014029:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001402c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014030:	83 c4 20             	add    esp,0x20
c0014033:	99                   	cdq    
c0014034:	83 c4 10             	add    esp,0x10
c0014037:	5b                   	pop    ebx
c0014038:	5e                   	pop    esi
c0014039:	5f                   	pop    edi
c001403a:	c3                   	ret    

c001403b <Sys::wsbe(regs*)>:
c001403b:	57                   	push   edi
c001403c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014041:	56                   	push   esi
c0014042:	be 0e 43 02 c0       	mov    esi,0xc002430e
c0014047:	53                   	push   ebx
c0014048:	83 ec 30             	sub    esp,0x30
c001404b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001404f:	fc                   	cld    
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014055:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014059:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001405e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014061:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014067:	8b 06                	mov    eax,DWORD PTR [esi]
c0014069:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001406c:	57                   	push   edi
c001406d:	e8 26 c6 fe ff       	call   c0000698 <strlen>
c0014072:	5a                   	pop    edx
c0014073:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014077:	52                   	push   edx
c0014078:	31 d2                	xor    edx,edx
c001407a:	57                   	push   edi
c001407b:	52                   	push   edx
c001407c:	50                   	push   eax
c001407d:	56                   	push   esi
c001407e:	ff d3                	call   ebx
c0014080:	83 c4 14             	add    esp,0x14
c0014083:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014087:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001408a:	e8 65 32 00 00       	call   c00172f4 <terminateTask(int)>
c001408f:	83 c4 40             	add    esp,0x40
c0014092:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014097:	5b                   	pop    ebx
c0014098:	31 d2                	xor    edx,edx
c001409a:	5e                   	pop    esi
c001409b:	5f                   	pop    edi
c001409c:	c3                   	ret    

c001409d <Sys::yield(regs*)>:
c001409d:	83 ec 0c             	sub    esp,0xc
c00140a0:	fa                   	cli    
c00140a1:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00140a7:	e8 30 29 00 00       	call   c00169dc <schedule()>
c00140ac:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00140b1:	48                   	dec    eax
c00140b2:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00140b7:	75 01                	jne    c00140ba <Sys::yield(regs*)+0x1d>
c00140b9:	fb                   	sti    
c00140ba:	8b 15 cc 88 02 c0    	mov    edx,DWORD PTR ds:0xc00288cc
c00140c0:	83 c4 0c             	add    esp,0xc
c00140c3:	89 d0                	mov    eax,edx
c00140c5:	c1 ea 11             	shr    edx,0x11
c00140c8:	c1 e0 07             	shl    eax,0x7
c00140cb:	25 80 30 0f 00       	and    eax,0xf3080
c00140d0:	31 d0                	xor    eax,edx
c00140d2:	31 d2                	xor    edx,edx
c00140d4:	c3                   	ret    

c00140d5 <sysCallSeekDir(regs*)>:
c00140d5:	31 c0                	xor    eax,eax
c00140d7:	31 d2                	xor    edx,edx
c00140d9:	c3                   	ret    

c00140da <sysCallTellDir(regs*)>:
c00140da:	31 c0                	xor    eax,eax
c00140dc:	31 d2                	xor    edx,edx
c00140de:	c3                   	ret    

c00140df <sysCallVerify(regs*)>:
c00140df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140e3:	31 d2                	xor    edx,edx
c00140e5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00140e8:	c3                   	ret    

c00140e9 <sysCallGetArgc(regs*)>:
c00140e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140f1:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00140f7:	99                   	cdq    
c00140f8:	c3                   	ret    

c00140f9 <sysFormatDisk(regs*)>:
c00140f9:	56                   	push   esi
c00140fa:	53                   	push   ebx
c00140fb:	53                   	push   ebx
c00140fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014100:	8b 1d d8 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263d8
c0014106:	eb 25                	jmp    c001412d <sysFormatDisk(regs*)+0x34>
c0014108:	83 ec 0c             	sub    esp,0xc
c001410b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001410e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014110:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014113:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014116:	50                   	push   eax
c0014117:	ff 34 85 60 88 02 c0 	push   DWORD PTR [eax*4-0x3ffd77a0]
c001411e:	53                   	push   ebx
c001411f:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0014122:	83 c4 20             	add    esp,0x20
c0014125:	83 f8 08             	cmp    eax,0x8
c0014128:	75 12                	jne    c001413c <sysFormatDisk(regs*)+0x43>
c001412a:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001412d:	85 db                	test   ebx,ebx
c001412f:	75 d7                	jne    c0014108 <sysFormatDisk(regs*)+0xf>
c0014131:	59                   	pop    ecx
c0014132:	b8 03 00 00 00       	mov    eax,0x3
c0014137:	31 d2                	xor    edx,edx
c0014139:	5b                   	pop    ebx
c001413a:	5e                   	pop    esi
c001413b:	c3                   	ret    
c001413c:	85 c0                	test   eax,eax
c001413e:	74 1b                	je     c001415b <sysFormatDisk(regs*)+0x62>
c0014140:	83 f8 09             	cmp    eax,0x9
c0014143:	74 0b                	je     c0014150 <sysFormatDisk(regs*)+0x57>
c0014145:	59                   	pop    ecx
c0014146:	b8 02 00 00 00       	mov    eax,0x2
c001414b:	31 d2                	xor    edx,edx
c001414d:	5b                   	pop    ebx
c001414e:	5e                   	pop    esi
c001414f:	c3                   	ret    
c0014150:	59                   	pop    ecx
c0014151:	b8 01 00 00 00       	mov    eax,0x1
c0014156:	31 d2                	xor    edx,edx
c0014158:	5b                   	pop    ebx
c0014159:	5e                   	pop    esi
c001415a:	c3                   	ret    
c001415b:	59                   	pop    ecx
c001415c:	31 c0                	xor    eax,eax
c001415e:	31 d2                	xor    edx,edx
c0014160:	5b                   	pop    ebx
c0014161:	5e                   	pop    esi
c0014162:	c3                   	ret    

c0014163 <sysSetDiskVolumeLabel(regs*)>:
c0014163:	56                   	push   esi
c0014164:	53                   	push   ebx
c0014165:	53                   	push   ebx
c0014166:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001416a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001416d:	83 f8 19             	cmp    eax,0x19
c0014170:	77 2d                	ja     c001419f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014172:	8b 0c 85 60 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd77a0]
c0014179:	85 c9                	test   ecx,ecx
c001417b:	74 22                	je     c001419f <sysSetDiskVolumeLabel(regs*)+0x3c>
c001417d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0014180:	85 db                	test   ebx,ebx
c0014182:	74 1b                	je     c001419f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014184:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001418a:	85 d2                	test   edx,edx
c001418c:	74 11                	je     c001419f <sysSetDiskVolumeLabel(regs*)+0x3c>
c001418e:	8b 32                	mov    esi,DWORD PTR [edx]
c0014190:	53                   	push   ebx
c0014191:	50                   	push   eax
c0014192:	51                   	push   ecx
c0014193:	52                   	push   edx
c0014194:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	99                   	cdq    
c001419b:	59                   	pop    ecx
c001419c:	5b                   	pop    ebx
c001419d:	5e                   	pop    esi
c001419e:	c3                   	ret    
c001419f:	59                   	pop    ecx
c00141a0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00141a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00141aa:	5b                   	pop    ebx
c00141ab:	5e                   	pop    esi
c00141ac:	c3                   	ret    

c00141ad <sysGetDiskVolumeLabel(regs*)>:
c00141ad:	57                   	push   edi
c00141ae:	56                   	push   esi
c00141af:	53                   	push   ebx
c00141b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00141b7:	83 fa 19             	cmp    edx,0x19
c00141ba:	77 38                	ja     c00141f4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00141bc:	8b 0c 95 60 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd77a0]
c00141c3:	85 c9                	test   ecx,ecx
c00141c5:	74 2d                	je     c00141f4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00141c7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00141ca:	85 db                	test   ebx,ebx
c00141cc:	74 26                	je     c00141f4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00141ce:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00141d1:	85 f6                	test   esi,esi
c00141d3:	74 1f                	je     c00141f4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00141d5:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00141db:	85 c0                	test   eax,eax
c00141dd:	74 15                	je     c00141f4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00141df:	83 ec 0c             	sub    esp,0xc
c00141e2:	8b 38                	mov    edi,DWORD PTR [eax]
c00141e4:	56                   	push   esi
c00141e5:	53                   	push   ebx
c00141e6:	52                   	push   edx
c00141e7:	51                   	push   ecx
c00141e8:	50                   	push   eax
c00141e9:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00141ec:	83 c4 20             	add    esp,0x20
c00141ef:	99                   	cdq    
c00141f0:	5b                   	pop    ebx
c00141f1:	5e                   	pop    esi
c00141f2:	5f                   	pop    edi
c00141f3:	c3                   	ret    
c00141f4:	5b                   	pop    ebx
c00141f5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00141fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00141ff:	5e                   	pop    esi
c0014200:	5f                   	pop    edi
c0014201:	c3                   	ret    

c0014202 <sysShutdown(regs*)>:
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014209:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001420c:	85 c0                	test   eax,eax
c001420e:	74 18                	je     c0014228 <sysShutdown(regs*)+0x26>
c0014210:	83 f8 01             	cmp    eax,0x1
c0014213:	74 38                	je     c001424d <sysShutdown(regs*)+0x4b>
c0014215:	83 f8 02             	cmp    eax,0x2
c0014218:	74 24                	je     c001423e <sysShutdown(regs*)+0x3c>
c001421a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001421f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014224:	83 c4 0c             	add    esp,0xc
c0014227:	c3                   	ret    
c0014228:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001422d:	8b 10                	mov    edx,DWORD PTR [eax]
c001422f:	6a 00                	push   0x0
c0014231:	6a 00                	push   0x0
c0014233:	6a 00                	push   0x0
c0014235:	50                   	push   eax
c0014236:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	eb dc                	jmp    c001421a <sysShutdown(regs*)+0x18>
c001423e:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0014243:	8b 10                	mov    edx,DWORD PTR [eax]
c0014245:	6a 00                	push   0x0
c0014247:	6a 00                	push   0x0
c0014249:	6a 01                	push   0x1
c001424b:	eb e8                	jmp    c0014235 <sysShutdown(regs*)+0x33>
c001424d:	a1 e0 88 02 c0       	mov    eax,ds:0xc00288e0
c0014252:	85 c0                	test   eax,eax
c0014254:	74 02                	je     c0014258 <sysShutdown(regs*)+0x56>
c0014256:	ff d0                	call   eax
c0014258:	31 c0                	xor    eax,eax
c001425a:	31 d2                	xor    edx,edx
c001425c:	83 c4 0c             	add    esp,0xc
c001425f:	c3                   	ret    

c0014260 <sysCallRealpath(regs*)>:
c0014260:	83 ec 0c             	sub    esp,0xc
c0014263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014267:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001426a:	85 d2                	test   edx,edx
c001426c:	74 07                	je     c0014275 <sysCallRealpath(regs*)+0x15>
c001426e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014271:	85 c0                	test   eax,eax
c0014273:	75 0b                	jne    c0014280 <sysCallRealpath(regs*)+0x20>
c0014275:	b8 01 00 00 00       	mov    eax,0x1
c001427a:	31 d2                	xor    edx,edx
c001427c:	83 c4 0c             	add    esp,0xc
c001427f:	c3                   	ret    
c0014280:	51                   	push   ecx
c0014281:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014287:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001428a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0014290:	51                   	push   ecx
c0014291:	52                   	push   edx
c0014292:	50                   	push   eax
c0014293:	e8 ee 90 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	31 c0                	xor    eax,eax
c001429d:	31 d2                	xor    edx,edx
c001429f:	83 c4 0c             	add    esp,0xc
c00142a2:	c3                   	ret    

c00142a3 <sysCallReadDir(regs*)>:
c00142a3:	53                   	push   ebx
c00142a4:	83 ec 18             	sub    esp,0x18
c00142a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00142ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00142ae:	83 f8 02             	cmp    eax,0x2
c00142b1:	76 60                	jbe    c0014313 <sysCallReadDir(regs*)+0x70>
c00142b3:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00142ba:	77 48                	ja     c0014304 <sysCallReadDir(regs*)+0x61>
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	50                   	push   eax
c00142c0:	e8 4e 78 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00142c5:	83 c4 10             	add    esp,0x10
c00142c8:	85 c0                	test   eax,eax
c00142ca:	74 38                	je     c0014304 <sysCallReadDir(regs*)+0x61>
c00142cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00142d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00142dd:	51                   	push   ecx
c00142de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00142e1:	6a 00                	push   0x0
c00142e3:	68 10 01 00 00       	push   0x110
c00142e8:	50                   	push   eax
c00142e9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00142ec:	83 c4 20             	add    esp,0x20
c00142ef:	85 c0                	test   eax,eax
c00142f1:	74 29                	je     c001431c <sysCallReadDir(regs*)+0x79>
c00142f3:	83 f8 07             	cmp    eax,0x7
c00142f6:	74 1b                	je     c0014313 <sysCallReadDir(regs*)+0x70>
c00142f8:	b8 02 00 00 00       	mov    eax,0x2
c00142fd:	31 d2                	xor    edx,edx
c00142ff:	83 c4 18             	add    esp,0x18
c0014302:	5b                   	pop    ebx
c0014303:	c3                   	ret    
c0014304:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014309:	ba ff ff ff ff       	mov    edx,0xffffffff
c001430e:	83 c4 18             	add    esp,0x18
c0014311:	5b                   	pop    ebx
c0014312:	c3                   	ret    
c0014313:	b8 01 00 00 00       	mov    eax,0x1
c0014318:	31 d2                	xor    edx,edx
c001431a:	eb e3                	jmp    c00142ff <sysCallReadDir(regs*)+0x5c>
c001431c:	31 c0                	xor    eax,eax
c001431e:	31 d2                	xor    edx,edx
c0014320:	eb dd                	jmp    c00142ff <sysCallReadDir(regs*)+0x5c>

c0014322 <sysCallIsATTY(regs*)>:
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014329:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001432c:	83 f8 02             	cmp    eax,0x2
c001432f:	76 07                	jbe    c0014338 <sysCallIsATTY(regs*)+0x16>
c0014331:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0014336:	75 26                	jne    c001435e <sysCallIsATTY(regs*)+0x3c>
c0014338:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001433d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014340:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014346:	85 c0                	test   eax,eax
c0014348:	74 24                	je     c001436e <sysCallIsATTY(regs*)+0x4c>
c001434a:	83 ec 0c             	sub    esp,0xc
c001434d:	8b 10                	mov    edx,DWORD PTR [eax]
c001434f:	50                   	push   eax
c0014350:	ff 12                	call   DWORD PTR [edx]
c0014352:	31 d2                	xor    edx,edx
c0014354:	0f b6 c0             	movzx  eax,al
c0014357:	83 c4 10             	add    esp,0x10
c001435a:	83 c4 0c             	add    esp,0xc
c001435d:	c3                   	ret    
c001435e:	83 ec 0c             	sub    esp,0xc
c0014361:	50                   	push   eax
c0014362:	e8 ac 77 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014367:	83 c4 10             	add    esp,0x10
c001436a:	85 c0                	test   eax,eax
c001436c:	75 dc                	jne    c001434a <sysCallIsATTY(regs*)+0x28>
c001436e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014373:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014378:	83 c4 0c             	add    esp,0xc
c001437b:	c3                   	ret    

c001437c <sysCallSeek(regs*)>:
c001437c:	53                   	push   ebx
c001437d:	83 ec 08             	sub    esp,0x8
c0014380:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014384:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014387:	8d 50 fd             	lea    edx,[eax-0x3]
c001438a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0014390:	77 32                	ja     c00143c4 <sysCallSeek(regs*)+0x48>
c0014392:	83 ec 0c             	sub    esp,0xc
c0014395:	50                   	push   eax
c0014396:	e8 78 77 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c001439b:	83 c4 0c             	add    esp,0xc
c001439e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00143a1:	31 db                	xor    ebx,ebx
c00143a3:	53                   	push   ebx
c00143a4:	51                   	push   ecx
c00143a5:	50                   	push   eax
c00143a6:	e8 1d 93 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00143ab:	83 c4 10             	add    esp,0x10
c00143ae:	85 c0                	test   eax,eax
c00143b0:	0f 95 c0             	setne  al
c00143b3:	31 d2                	xor    edx,edx
c00143b5:	0f b6 c0             	movzx  eax,al
c00143b8:	f7 d8                	neg    eax
c00143ba:	83 d2 00             	adc    edx,0x0
c00143bd:	83 c4 08             	add    esp,0x8
c00143c0:	f7 da                	neg    edx
c00143c2:	5b                   	pop    ebx
c00143c3:	c3                   	ret    
c00143c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00143ce:	83 c4 08             	add    esp,0x8
c00143d1:	5b                   	pop    ebx
c00143d2:	c3                   	ret    

c00143d3 <sysCallTell(regs*)>:
c00143d3:	53                   	push   ebx
c00143d4:	83 ec 08             	sub    esp,0x8
c00143d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143de:	83 f8 02             	cmp    eax,0x2
c00143e1:	76 4d                	jbe    c0014430 <sysCallTell(regs*)+0x5d>
c00143e3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00143e8:	76 19                	jbe    c0014403 <sysCallTell(regs*)+0x30>
c00143ea:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00143ed:	31 d2                	xor    edx,edx
c00143ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00143f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00143fc:	31 c0                	xor    eax,eax
c00143fe:	83 c4 08             	add    esp,0x8
c0014401:	5b                   	pop    ebx
c0014402:	c3                   	ret    
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	50                   	push   eax
c0014407:	e8 07 77 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c001440c:	5a                   	pop    edx
c001440d:	59                   	pop    ecx
c001440e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014411:	50                   	push   eax
c0014412:	e8 07 93 ff ff       	call   c000d71e <File::tell(unsigned long long*)>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	85 c0                	test   eax,eax
c001441c:	0f 95 c0             	setne  al
c001441f:	31 d2                	xor    edx,edx
c0014421:	0f b6 c0             	movzx  eax,al
c0014424:	f7 d8                	neg    eax
c0014426:	83 d2 00             	adc    edx,0x0
c0014429:	83 c4 08             	add    esp,0x8
c001442c:	f7 da                	neg    edx
c001442e:	5b                   	pop    ebx
c001442f:	c3                   	ret    
c0014430:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014435:	ba ff ff ff ff       	mov    edx,0xffffffff
c001443a:	83 c4 08             	add    esp,0x8
c001443d:	5b                   	pop    ebx
c001443e:	c3                   	ret    

c001443f <sysCallSize(regs*)>:
c001443f:	53                   	push   ebx
c0014440:	83 ec 18             	sub    esp,0x18
c0014443:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014447:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001444a:	83 f8 02             	cmp    eax,0x2
c001444d:	76 53                	jbe    c00144a2 <sysCallSize(regs*)+0x63>
c001444f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014454:	76 19                	jbe    c001446f <sysCallSize(regs*)+0x30>
c0014456:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014459:	31 d2                	xor    edx,edx
c001445b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014461:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014468:	31 c0                	xor    eax,eax
c001446a:	83 c4 18             	add    esp,0x18
c001446d:	5b                   	pop    ebx
c001446e:	c3                   	ret    
c001446f:	83 ec 0c             	sub    esp,0xc
c0014472:	50                   	push   eax
c0014473:	e8 9b 76 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014478:	83 c4 0c             	add    esp,0xc
c001447b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001447f:	52                   	push   edx
c0014480:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014483:	50                   	push   eax
c0014484:	e8 2d 94 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	85 c0                	test   eax,eax
c001448e:	0f 95 c0             	setne  al
c0014491:	31 d2                	xor    edx,edx
c0014493:	0f b6 c0             	movzx  eax,al
c0014496:	f7 d8                	neg    eax
c0014498:	83 d2 00             	adc    edx,0x0
c001449b:	83 c4 18             	add    esp,0x18
c001449e:	f7 da                	neg    edx
c00144a0:	5b                   	pop    ebx
c00144a1:	c3                   	ret    
c00144a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00144a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00144ac:	83 c4 18             	add    esp,0x18
c00144af:	5b                   	pop    ebx
c00144b0:	c3                   	ret    

c00144b1 <sysCallSizeFromFilename(regs*)>:
c00144b1:	57                   	push   edi
c00144b2:	56                   	push   esi
c00144b3:	53                   	push   ebx
c00144b4:	83 ec 20             	sub    esp,0x20
c00144b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00144bb:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00144be:	83 fb 02             	cmp    ebx,0x2
c00144c1:	0f 86 88 00 00 00    	jbe    c001454f <sysCallSizeFromFilename(regs*)+0x9e>
c00144c7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00144cd:	76 1b                	jbe    c00144ea <sysCallSizeFromFilename(regs*)+0x39>
c00144cf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00144d2:	31 d2                	xor    edx,edx
c00144d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144e1:	83 c4 20             	add    esp,0x20
c00144e4:	31 c0                	xor    eax,eax
c00144e6:	5b                   	pop    ebx
c00144e7:	5e                   	pop    esi
c00144e8:	5f                   	pop    edi
c00144e9:	c3                   	ret    
c00144ea:	83 ec 0c             	sub    esp,0xc
c00144ed:	68 14 01 00 00       	push   0x114
c00144f2:	e8 c0 57 ff ff       	call   c0009cb7 <malloc>
c00144f7:	83 c4 0c             	add    esp,0xc
c00144fa:	89 c7                	mov    edi,eax
c00144fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014501:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014504:	53                   	push   ebx
c0014505:	57                   	push   edi
c0014506:	e8 25 90 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001450b:	83 c4 0c             	add    esp,0xc
c001450e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0014512:	50                   	push   eax
c0014513:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014516:	57                   	push   edi
c0014517:	e8 9a 93 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001451c:	83 c4 10             	add    esp,0x10
c001451f:	85 ff                	test   edi,edi
c0014521:	74 14                	je     c0014537 <sysCallSizeFromFilename(regs*)+0x86>
c0014523:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014527:	8b 17                	mov    edx,DWORD PTR [edi]
c0014529:	83 ec 0c             	sub    esp,0xc
c001452c:	57                   	push   edi
c001452d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014537:	85 c0                	test   eax,eax
c0014539:	0f 95 c0             	setne  al
c001453c:	31 d2                	xor    edx,edx
c001453e:	0f b6 c0             	movzx  eax,al
c0014541:	f7 d8                	neg    eax
c0014543:	83 d2 00             	adc    edx,0x0
c0014546:	83 c4 20             	add    esp,0x20
c0014549:	f7 da                	neg    edx
c001454b:	5b                   	pop    ebx
c001454c:	5e                   	pop    esi
c001454d:	5f                   	pop    edi
c001454e:	c3                   	ret    
c001454f:	83 c4 20             	add    esp,0x20
c0014552:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014557:	5b                   	pop    ebx
c0014558:	ba ff ff ff ff       	mov    edx,0xffffffff
c001455d:	5e                   	pop    esi
c001455e:	5f                   	pop    edi
c001455f:	c3                   	ret    

c0014560 <sysCallClose(regs*)>:
c0014560:	53                   	push   ebx
c0014561:	83 ec 08             	sub    esp,0x8
c0014564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014568:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001456b:	83 f8 02             	cmp    eax,0x2
c001456e:	76 41                	jbe    c00145b1 <sysCallClose(regs*)+0x51>
c0014570:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0014576:	83 fa 01             	cmp    edx,0x1
c0014579:	76 2d                	jbe    c00145a8 <sysCallClose(regs*)+0x48>
c001457b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014580:	77 2f                	ja     c00145b1 <sysCallClose(regs*)+0x51>
c0014582:	83 ec 0c             	sub    esp,0xc
c0014585:	50                   	push   eax
c0014586:	e8 88 75 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c001458b:	89 c3                	mov    ebx,eax
c001458d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014590:	e8 d3 90 ff ff       	call   c000d668 <File::close()>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	85 db                	test   ebx,ebx
c001459a:	74 0c                	je     c00145a8 <sysCallClose(regs*)+0x48>
c001459c:	83 ec 0c             	sub    esp,0xc
c001459f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145a1:	53                   	push   ebx
c00145a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	31 c0                	xor    eax,eax
c00145aa:	31 d2                	xor    edx,edx
c00145ac:	83 c4 08             	add    esp,0x8
c00145af:	5b                   	pop    ebx
c00145b0:	c3                   	ret    
c00145b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00145b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00145bb:	83 c4 08             	add    esp,0x8
c00145be:	5b                   	pop    ebx
c00145bf:	c3                   	ret    

c00145c0 <sysCallOpenDir(regs*)>:
c00145c0:	56                   	push   esi
c00145c1:	53                   	push   ebx
c00145c2:	53                   	push   ebx
c00145c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145c7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00145ca:	85 f6                	test   esi,esi
c00145cc:	74 59                	je     c0014627 <sysCallOpenDir(regs*)+0x67>
c00145ce:	83 ec 0c             	sub    esp,0xc
c00145d1:	68 14 01 00 00       	push   0x114
c00145d6:	e8 dc 56 ff ff       	call   c0009cb7 <malloc>
c00145db:	83 c4 0c             	add    esp,0xc
c00145de:	89 c6                	mov    esi,eax
c00145e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145e5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145e8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00145eb:	56                   	push   esi
c00145ec:	e8 9f 94 ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c00145f1:	83 c4 10             	add    esp,0x10
c00145f4:	85 f6                	test   esi,esi
c00145f6:	74 2f                	je     c0014627 <sysCallOpenDir(regs*)+0x67>
c00145f8:	83 ec 0c             	sub    esp,0xc
c00145fb:	56                   	push   esi
c00145fc:	e8 69 95 ff ff       	call   c000db6a <Directory::open()>
c0014601:	83 c4 10             	add    esp,0x10
c0014604:	85 c0                	test   eax,eax
c0014606:	75 1f                	jne    c0014627 <sysCallOpenDir(regs*)+0x67>
c0014608:	83 ec 0c             	sub    esp,0xc
c001460b:	56                   	push   esi
c001460c:	e8 0d 72 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0014611:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	89 02                	mov    DWORD PTR [edx],eax
c0014619:	c1 f8 1f             	sar    eax,0x1f
c001461c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001461f:	31 c0                	xor    eax,eax
c0014621:	59                   	pop    ecx
c0014622:	31 d2                	xor    edx,edx
c0014624:	5b                   	pop    ebx
c0014625:	5e                   	pop    esi
c0014626:	c3                   	ret    
c0014627:	59                   	pop    ecx
c0014628:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001462d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014632:	5b                   	pop    ebx
c0014633:	5e                   	pop    esi
c0014634:	c3                   	ret    

c0014635 <sysCallCloseDir(regs*)>:
c0014635:	53                   	push   ebx
c0014636:	83 ec 08             	sub    esp,0x8
c0014639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014640:	8d 50 fd             	lea    edx,[eax-0x3]
c0014643:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0014649:	77 2f                	ja     c001467a <sysCallCloseDir(regs*)+0x45>
c001464b:	83 ec 0c             	sub    esp,0xc
c001464e:	50                   	push   eax
c001464f:	e8 bf 74 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014654:	89 c3                	mov    ebx,eax
c0014656:	89 04 24             	mov    DWORD PTR [esp],eax
c0014659:	e8 68 95 ff ff       	call   c000dbc6 <Directory::close()>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	85 db                	test   ebx,ebx
c0014663:	74 0c                	je     c0014671 <sysCallCloseDir(regs*)+0x3c>
c0014665:	83 ec 0c             	sub    esp,0xc
c0014668:	8b 03                	mov    eax,DWORD PTR [ebx]
c001466a:	53                   	push   ebx
c001466b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	31 c0                	xor    eax,eax
c0014673:	31 d2                	xor    edx,edx
c0014675:	83 c4 08             	add    esp,0x8
c0014678:	5b                   	pop    ebx
c0014679:	c3                   	ret    
c001467a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001467f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014684:	83 c4 08             	add    esp,0x8
c0014687:	5b                   	pop    ebx
c0014688:	c3                   	ret    

c0014689 <sysCallMakeDir(regs*)>:
c0014689:	56                   	push   esi
c001468a:	53                   	push   ebx
c001468b:	83 ec 10             	sub    esp,0x10
c001468e:	68 14 01 00 00       	push   0x114
c0014693:	e8 1f 56 ff ff       	call   c0009cb7 <malloc>
c0014698:	83 c4 0c             	add    esp,0xc
c001469b:	89 c3                	mov    ebx,eax
c001469d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146a2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00146a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146a9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146ac:	53                   	push   ebx
c00146ad:	e8 de 93 ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c00146b2:	83 c4 10             	add    esp,0x10
c00146b5:	85 db                	test   ebx,ebx
c00146b7:	74 32                	je     c00146eb <sysCallMakeDir(regs*)+0x62>
c00146b9:	83 ec 0c             	sub    esp,0xc
c00146bc:	53                   	push   ebx
c00146bd:	e8 88 96 ff ff       	call   c000dd4a <Directory::create()>
c00146c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146c5:	89 c6                	mov    esi,eax
c00146c7:	e8 fa 94 ff ff       	call   c000dbc6 <Directory::close()>
c00146cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00146d4:	83 c4 10             	add    esp,0x10
c00146d7:	31 c0                	xor    eax,eax
c00146d9:	59                   	pop    ecx
c00146da:	85 f6                	test   esi,esi
c00146dc:	5b                   	pop    ebx
c00146dd:	0f 95 c0             	setne  al
c00146e0:	5e                   	pop    esi
c00146e1:	31 d2                	xor    edx,edx
c00146e3:	f7 d8                	neg    eax
c00146e5:	83 d2 00             	adc    edx,0x0
c00146e8:	f7 da                	neg    edx
c00146ea:	c3                   	ret    
c00146eb:	59                   	pop    ecx
c00146ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00146f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00146f6:	5b                   	pop    ebx
c00146f7:	5e                   	pop    esi
c00146f8:	c3                   	ret    

c00146f9 <sysCallWait(regs*)>:
c00146f9:	83 ec 10             	sub    esp,0x10
c00146fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014700:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014703:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014706:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014709:	e8 f6 24 00 00       	call   c0016c04 <waitTask(int, int*, int)>
c001470e:	83 c4 1c             	add    esp,0x1c
c0014711:	99                   	cdq    
c0014712:	c3                   	ret    

c0014713 <sysCallNotImpl(regs*)>:
c0014713:	83 ec 18             	sub    esp,0x18
c0014716:	68 3a 43 02 c0       	push   0xc002433a
c001471b:	e8 57 ec ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0014720:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014725:	ba ff ff ff ff       	mov    edx,0xffffffff
c001472a:	83 c4 1c             	add    esp,0x1c
c001472d:	c3                   	ret    

c001472e <sysPanic(regs*)>:
c001472e:	83 ec 18             	sub    esp,0x18
c0014731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014735:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014738:	e8 3a ec ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001473d:	b8 01 00 00 00       	mov    eax,0x1
c0014742:	31 d2                	xor    edx,edx
c0014744:	83 c4 1c             	add    esp,0x1c
c0014747:	c3                   	ret    

c0014748 <sysCallRmdir(regs*)>:
c0014748:	56                   	push   esi
c0014749:	53                   	push   ebx
c001474a:	83 ec 20             	sub    esp,0x20
c001474d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014751:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0014754:	68 14 01 00 00       	push   0x114
c0014759:	e8 59 55 ff ff       	call   c0009cb7 <malloc>
c001475e:	83 c4 0c             	add    esp,0xc
c0014761:	89 c3                	mov    ebx,eax
c0014763:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014768:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001476b:	56                   	push   esi
c001476c:	53                   	push   ebx
c001476d:	e8 be 8d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014775:	e8 08 90 ff ff       	call   c000d782 <File::unlink()>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	85 db                	test   ebx,ebx
c001477f:	74 14                	je     c0014795 <sysCallRmdir(regs*)+0x4d>
c0014781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014785:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014787:	83 ec 0c             	sub    esp,0xc
c001478a:	53                   	push   ebx
c001478b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014795:	85 c0                	test   eax,eax
c0014797:	0f 95 c0             	setne  al
c001479a:	31 d2                	xor    edx,edx
c001479c:	0f b6 c0             	movzx  eax,al
c001479f:	f7 d8                	neg    eax
c00147a1:	83 d2 00             	adc    edx,0x0
c00147a4:	83 c4 14             	add    esp,0x14
c00147a7:	f7 da                	neg    edx
c00147a9:	5b                   	pop    ebx
c00147aa:	5e                   	pop    esi
c00147ab:	c3                   	ret    

c00147ac <sysCallUnlink(regs*)>:
c00147ac:	56                   	push   esi
c00147ad:	53                   	push   ebx
c00147ae:	83 ec 20             	sub    esp,0x20
c00147b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00147b5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00147b8:	68 14 01 00 00       	push   0x114
c00147bd:	e8 f5 54 ff ff       	call   c0009cb7 <malloc>
c00147c2:	83 c4 0c             	add    esp,0xc
c00147c5:	89 c3                	mov    ebx,eax
c00147c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00147cf:	56                   	push   esi
c00147d0:	53                   	push   ebx
c00147d1:	e8 5a 8d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00147d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147d9:	e8 a4 8f ff ff       	call   c000d782 <File::unlink()>
c00147de:	83 c4 10             	add    esp,0x10
c00147e1:	85 db                	test   ebx,ebx
c00147e3:	74 14                	je     c00147f9 <sysCallUnlink(regs*)+0x4d>
c00147e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00147eb:	83 ec 0c             	sub    esp,0xc
c00147ee:	53                   	push   ebx
c00147ef:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00147f2:	83 c4 10             	add    esp,0x10
c00147f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147f9:	85 c0                	test   eax,eax
c00147fb:	0f 95 c0             	setne  al
c00147fe:	31 d2                	xor    edx,edx
c0014800:	0f b6 c0             	movzx  eax,al
c0014803:	f7 d8                	neg    eax
c0014805:	83 d2 00             	adc    edx,0x0
c0014808:	83 c4 14             	add    esp,0x14
c001480b:	f7 da                	neg    edx
c001480d:	5b                   	pop    ebx
c001480e:	5e                   	pop    esi
c001480f:	c3                   	ret    

c0014810 <sysCallGetArgv(regs*)>:
c0014810:	83 ec 0c             	sub    esp,0xc
c0014813:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014817:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001481a:	85 c0                	test   eax,eax
c001481c:	78 2b                	js     c0014849 <sysCallGetArgv(regs*)+0x39>
c001481e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014824:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0014827:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001482d:	7d 1a                	jge    c0014849 <sysCallGetArgv(regs*)+0x39>
c001482f:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0014836:	85 c0                	test   eax,eax
c0014838:	74 17                	je     c0014851 <sysCallGetArgv(regs*)+0x41>
c001483a:	83 ec 08             	sub    esp,0x8
c001483d:	50                   	push   eax
c001483e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014841:	e8 f2 be fe ff       	call   c0000738 <strcpy>
c0014846:	83 c4 10             	add    esp,0x10
c0014849:	31 c0                	xor    eax,eax
c001484b:	31 d2                	xor    edx,edx
c001484d:	83 c4 0c             	add    esp,0xc
c0014850:	c3                   	ret    
c0014851:	b8 01 00 00 00       	mov    eax,0x1
c0014856:	31 d2                	xor    edx,edx
c0014858:	83 c4 0c             	add    esp,0xc
c001485b:	c3                   	ret    

c001485c <sysCallTTYName(regs*)>:
c001485c:	56                   	push   esi
c001485d:	53                   	push   ebx
c001485e:	53                   	push   ebx
c001485f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014863:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014866:	85 c0                	test   eax,eax
c0014868:	74 5f                	je     c00148c9 <sysCallTTYName(regs*)+0x6d>
c001486a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001486d:	83 f8 02             	cmp    eax,0x2
c0014870:	77 3e                	ja     c00148b0 <sysCallTTYName(regs*)+0x54>
c0014872:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014877:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001487a:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0014880:	85 db                	test   ebx,ebx
c0014882:	74 45                	je     c00148c9 <sysCallTTYName(regs*)+0x6d>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014889:	53                   	push   ebx
c001488a:	ff 10                	call   DWORD PTR [eax]
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	84 c0                	test   al,al
c0014891:	74 41                	je     c00148d4 <sysCallTTYName(regs*)+0x78>
c0014893:	83 ec 08             	sub    esp,0x8
c0014896:	81 c3 82 00 00 00    	add    ebx,0x82
c001489c:	53                   	push   ebx
c001489d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00148a0:	e8 93 be fe ff       	call   c0000738 <strcpy>
c00148a5:	83 c4 10             	add    esp,0x10
c00148a8:	31 c0                	xor    eax,eax
c00148aa:	59                   	pop    ecx
c00148ab:	31 d2                	xor    edx,edx
c00148ad:	5b                   	pop    ebx
c00148ae:	5e                   	pop    esi
c00148af:	c3                   	ret    
c00148b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00148b5:	74 bb                	je     c0014872 <sysCallTTYName(regs*)+0x16>
c00148b7:	83 ec 0c             	sub    esp,0xc
c00148ba:	50                   	push   eax
c00148bb:	e8 53 72 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00148c0:	83 c4 10             	add    esp,0x10
c00148c3:	89 c3                	mov    ebx,eax
c00148c5:	85 db                	test   ebx,ebx
c00148c7:	75 bb                	jne    c0014884 <sysCallTTYName(regs*)+0x28>
c00148c9:	59                   	pop    ecx
c00148ca:	b8 01 00 00 00       	mov    eax,0x1
c00148cf:	31 d2                	xor    edx,edx
c00148d1:	5b                   	pop    ebx
c00148d2:	5e                   	pop    esi
c00148d3:	c3                   	ret    
c00148d4:	59                   	pop    ecx
c00148d5:	b8 02 00 00 00       	mov    eax,0x2
c00148da:	31 d2                	xor    edx,edx
c00148dc:	5b                   	pop    ebx
c00148dd:	5e                   	pop    esi
c00148de:	c3                   	ret    

c00148df <sysCallUSleep(regs*)>:
c00148df:	83 ec 1c             	sub    esp,0x1c
c00148e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00148e6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00148e9:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00148ec:	6a 00                	push   0x0
c00148ee:	6a 64                	push   0x64
c00148f0:	52                   	push   edx
c00148f1:	50                   	push   eax
c00148f2:	e8 49 ca 00 00       	call   c0021340 <__udivdi3>
c00148f7:	83 c4 14             	add    esp,0x14
c00148fa:	50                   	push   eax
c00148fb:	e8 d4 23 00 00       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c0014900:	31 c0                	xor    eax,eax
c0014902:	31 d2                	xor    edx,edx
c0014904:	83 c4 1c             	add    esp,0x1c
c0014907:	c3                   	ret    

c0014908 <sysCallSpawn(regs*)>:
c0014908:	56                   	push   esi
c0014909:	53                   	push   ebx
c001490a:	50                   	push   eax
c001490b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001490f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014912:	85 c0                	test   eax,eax
c0014914:	75 08                	jne    c001491e <sysCallSpawn(regs*)+0x16>
c0014916:	59                   	pop    ecx
c0014917:	31 c0                	xor    eax,eax
c0014919:	31 d2                	xor    edx,edx
c001491b:	5b                   	pop    ebx
c001491c:	5e                   	pop    esi
c001491d:	c3                   	ret    
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	68 1f 07 00 00       	push   0x71f
c0014926:	e8 8c 53 ff ff       	call   c0009cb7 <malloc>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	89 c6                	mov    esi,eax
c0014930:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014933:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014936:	85 c0                	test   eax,eax
c0014938:	75 32                	jne    c001496c <sysCallSpawn(regs*)+0x64>
c001493a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014942:	52                   	push   edx
c0014943:	50                   	push   eax
c0014944:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014947:	56                   	push   esi
c0014948:	e8 7f 1a 00 00       	call   c00163cc <Process::Process(char const*, Process*, char**)>
c001494d:	83 c4 10             	add    esp,0x10
c0014950:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0014957:	75 bd                	jne    c0014916 <sysCallSpawn(regs*)+0xe>
c0014959:	83 ec 0c             	sub    esp,0xc
c001495c:	56                   	push   esi
c001495d:	e8 56 1f 00 00       	call   c00168b8 <Process::createUserThread()>
c0014962:	8b 06                	mov    eax,DWORD PTR [esi]
c0014964:	83 c4 10             	add    esp,0x10
c0014967:	99                   	cdq    
c0014968:	59                   	pop    ecx
c0014969:	5b                   	pop    ebx
c001496a:	5e                   	pop    esi
c001496b:	c3                   	ret    
c001496c:	31 c0                	xor    eax,eax
c001496e:	eb d2                	jmp    c0014942 <sysCallSpawn(regs*)+0x3a>

c0014970 <sysCallGetEnv(regs*)>:
c0014970:	57                   	push   edi
c0014971:	56                   	push   esi
c0014972:	53                   	push   ebx
c0014973:	83 ec 1c             	sub    esp,0x1c
c0014976:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001497a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001497f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014982:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0014985:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014988:	e8 36 e9 ff ff       	call   c00132c3 <Krnl::getProcessTotalEnvCount(Process*)>
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	39 c7                	cmp    edi,eax
c0014992:	7c 14                	jl     c00149a8 <sysCallGetEnv(regs*)+0x38>
c0014994:	85 f6                	test   esi,esi
c0014996:	75 0b                	jne    c00149a3 <sysCallGetEnv(regs*)+0x33>
c0014998:	83 c4 10             	add    esp,0x10
c001499b:	31 c0                	xor    eax,eax
c001499d:	5b                   	pop    ebx
c001499e:	31 d2                	xor    edx,edx
c00149a0:	5e                   	pop    esi
c00149a1:	5f                   	pop    edi
c00149a2:	c3                   	ret    
c00149a3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00149a6:	eb f0                	jmp    c0014998 <sysCallGetEnv(regs*)+0x28>
c00149a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00149ac:	52                   	push   edx
c00149ad:	57                   	push   edi
c00149ae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149b4:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00149b7:	50                   	push   eax
c00149b8:	e8 26 e9 ff ff       	call   c00132e3 <Krnl::getProcessEnvPair(Process*, int)>
c00149bd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00149c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00149c8:	83 c4 0c             	add    esp,0xc
c00149cb:	85 c9                	test   ecx,ecx
c00149cd:	75 23                	jne    c00149f2 <sysCallGetEnv(regs*)+0x82>
c00149cf:	83 ec 0c             	sub    esp,0xc
c00149d2:	50                   	push   eax
c00149d3:	e8 c0 bc fe ff       	call   c0000698 <strlen>
c00149d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149db:	89 c3                	mov    ebx,eax
c00149dd:	e8 b6 bc fe ff       	call   c0000698 <strlen>
c00149e2:	83 c4 10             	add    esp,0x10
c00149e5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00149e9:	83 c4 10             	add    esp,0x10
c00149ec:	31 d2                	xor    edx,edx
c00149ee:	5b                   	pop    ebx
c00149ef:	5e                   	pop    esi
c00149f0:	5f                   	pop    edi
c00149f1:	c3                   	ret    
c00149f2:	83 ec 08             	sub    esp,0x8
c00149f5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00149f8:	50                   	push   eax
c00149f9:	56                   	push   esi
c00149fa:	e8 39 bd fe ff       	call   c0000738 <strcpy>
c00149ff:	58                   	pop    eax
c0014a00:	5a                   	pop    edx
c0014a01:	68 54 43 02 c0       	push   0xc0024354
c0014a06:	56                   	push   esi
c0014a07:	e8 6c be fe ff       	call   c0000878 <strcat>
c0014a0c:	59                   	pop    ecx
c0014a0d:	5b                   	pop    ebx
c0014a0e:	57                   	push   edi
c0014a0f:	56                   	push   esi
c0014a10:	e8 63 be fe ff       	call   c0000878 <strcat>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	e9 7b ff ff ff       	jmp    c0014998 <sysCallGetEnv(regs*)+0x28>

c0014a1d <sysAppSettings(regs*)>:
c0014a1d:	57                   	push   edi
c0014a1e:	56                   	push   esi
c0014a1f:	56                   	push   esi
c0014a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a24:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0014a27:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0014a2d:	25 e0 1f 00 00       	and    eax,0x1fe0
c0014a32:	66 3d c0 09          	cmp    ax,0x9c0
c0014a36:	75 2e                	jne    c0014a66 <sysAppSettings(regs*)+0x49>
c0014a38:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0014a3e:	83 e0 1f             	and    eax,0x1f
c0014a41:	3c 01                	cmp    al,0x1
c0014a43:	74 2c                	je     c0014a71 <sysAppSettings(regs*)+0x54>
c0014a45:	3c 07                	cmp    al,0x7
c0014a47:	0f 84 b3 00 00 00    	je     c0014b00 <sysAppSettings(regs*)+0xe3>
c0014a4d:	84 c0                	test   al,al
c0014a4f:	0f 84 d2 00 00 00    	je     c0014b27 <sysAppSettings(regs*)+0x10a>
c0014a55:	3c 08                	cmp    al,0x8
c0014a57:	74 63                	je     c0014abc <sysAppSettings(regs*)+0x9f>
c0014a59:	59                   	pop    ecx
c0014a5a:	0f b6 c0             	movzx  eax,al
c0014a5d:	5e                   	pop    esi
c0014a5e:	05 e8 03 00 00       	add    eax,0x3e8
c0014a63:	5f                   	pop    edi
c0014a64:	99                   	cdq    
c0014a65:	c3                   	ret    
c0014a66:	b8 01 00 00 00       	mov    eax,0x1
c0014a6b:	59                   	pop    ecx
c0014a6c:	31 d2                	xor    edx,edx
c0014a6e:	5e                   	pop    esi
c0014a6f:	5f                   	pop    edi
c0014a70:	c3                   	ret    
c0014a71:	50                   	push   eax
c0014a72:	68 00 01 00 00       	push   0x100
c0014a77:	6a 00                	push   0x0
c0014a79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a81:	83 c0 0c             	add    eax,0xc
c0014a84:	50                   	push   eax
c0014a85:	e8 f2 bb fe ff       	call   c000067c <memset>
c0014a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a8f:	b9 ff 00 00 00       	mov    ecx,0xff
c0014a94:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0014a97:	83 c7 0c             	add    edi,0xc
c0014a9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aa1:	5a                   	pop    edx
c0014aa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aa5:	59                   	pop    ecx
c0014aa6:	8d 50 0c             	lea    edx,[eax+0xc]
c0014aa9:	52                   	push   edx
c0014aaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ab0:	e8 8f 61 ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0014ab5:	83 c4 10             	add    esp,0x10
c0014ab8:	31 c0                	xor    eax,eax
c0014aba:	eb af                	jmp    c0014a6b <sysAppSettings(regs*)+0x4e>
c0014abc:	83 ec 08             	sub    esp,0x8
c0014abf:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0014ac5:	83 e0 0f             	and    eax,0xf
c0014ac8:	50                   	push   eax
c0014ac9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ace:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ad1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad7:	e8 58 61 ff ff       	call   c000ac34 <VgaText::setTitleColour(VgaColour)>
c0014adc:	5f                   	pop    edi
c0014add:	58                   	pop    eax
c0014ade:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0014ae4:	c1 e8 04             	shr    eax,0x4
c0014ae7:	83 e0 0f             	and    eax,0xf
c0014aea:	50                   	push   eax
c0014aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014af0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014af3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014af9:	e8 26 61 ff ff       	call   c000ac24 <VgaText::setTitleTextColour(VgaColour)>
c0014afe:	eb b5                	jmp    c0014ab5 <sysAppSettings(regs*)+0x98>
c0014b00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b05:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b08:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014b0e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0014b14:	c0 e8 06             	shr    al,0x6
c0014b17:	83 e0 01             	and    eax,0x1
c0014b1a:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0014b20:	31 c0                	xor    eax,eax
c0014b22:	e9 44 ff ff ff       	jmp    c0014a6b <sysAppSettings(regs*)+0x4e>
c0014b27:	b8 02 00 00 00       	mov    eax,0x2
c0014b2c:	e9 3a ff ff ff       	jmp    c0014a6b <sysAppSettings(regs*)+0x4e>

c0014b31 <sysSetFatAttrib(regs*)>:
c0014b31:	57                   	push   edi
c0014b32:	56                   	push   esi
c0014b33:	53                   	push   ebx
c0014b34:	83 ec 1c             	sub    esp,0x1c
c0014b37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014b3b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014b3e:	68 14 01 00 00       	push   0x114
c0014b43:	e8 6f 51 ff ff       	call   c0009cb7 <malloc>
c0014b48:	83 c4 0c             	add    esp,0xc
c0014b4b:	89 c3                	mov    ebx,eax
c0014b4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b52:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014b55:	57                   	push   edi
c0014b56:	53                   	push   ebx
c0014b57:	e8 d4 89 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014b5c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014b5f:	83 c4 0c             	add    esp,0xc
c0014b62:	0f b6 d4             	movzx  edx,ah
c0014b65:	0f b6 c0             	movzx  eax,al
c0014b68:	52                   	push   edx
c0014b69:	50                   	push   eax
c0014b6a:	53                   	push   ebx
c0014b6b:	e8 ac 8c ff ff       	call   c000d81c <File::chfatattr(unsigned char, unsigned char)>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	85 db                	test   ebx,ebx
c0014b75:	74 14                	je     c0014b8b <sysSetFatAttrib(regs*)+0x5a>
c0014b77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014b7d:	83 ec 0c             	sub    esp,0xc
c0014b80:	53                   	push   ebx
c0014b81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014b8b:	85 c0                	test   eax,eax
c0014b8d:	0f 95 c0             	setne  al
c0014b90:	31 d2                	xor    edx,edx
c0014b92:	0f b6 c0             	movzx  eax,al
c0014b95:	f7 d8                	neg    eax
c0014b97:	83 d2 00             	adc    edx,0x0
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	f7 da                	neg    edx
c0014b9f:	5b                   	pop    ebx
c0014ba0:	5e                   	pop    esi
c0014ba1:	5f                   	pop    edi
c0014ba2:	c3                   	ret    

c0014ba3 <sysPipe(regs*)>:
c0014ba3:	57                   	push   edi
c0014ba4:	56                   	push   esi
c0014ba5:	53                   	push   ebx
c0014ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014baa:	83 ec 0c             	sub    esp,0xc
c0014bad:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0014bb0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0014bb3:	6a 20                	push   0x20
c0014bb5:	e8 fd 50 ff ff       	call   c0009cb7 <malloc>
c0014bba:	89 c3                	mov    ebx,eax
c0014bbc:	58                   	pop    eax
c0014bbd:	5a                   	pop    edx
c0014bbe:	68 00 50 00 00       	push   0x5000
c0014bc3:	53                   	push   ebx
c0014bc4:	e8 f3 5d ff ff       	call   c000a9bc <Pipe::Pipe(int)>
c0014bc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bcc:	e8 4d 6c ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0014bd1:	89 07                	mov    DWORD PTR [edi],eax
c0014bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bd6:	e8 43 6c ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0014bdb:	83 c4 10             	add    esp,0x10
c0014bde:	89 06                	mov    DWORD PTR [esi],eax
c0014be0:	31 d2                	xor    edx,edx
c0014be2:	5b                   	pop    ebx
c0014be3:	31 c0                	xor    eax,eax
c0014be5:	5e                   	pop    esi
c0014be6:	5f                   	pop    edi
c0014be7:	c3                   	ret    

c0014be8 <sysGetUnixTime(regs*)>:
c0014be8:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0014bed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0014bf3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bf7:	e9 92 93 ff ff       	jmp    c000df8e <Clock::timeInSecondsLocal()>

c0014bfc <string_ends_with(char const*, char const*)>:
c0014bfc:	57                   	push   edi
c0014bfd:	56                   	push   esi
c0014bfe:	53                   	push   ebx
c0014bff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	53                   	push   ebx
c0014c0b:	e8 88 ba fe ff       	call   c0000698 <strlen>
c0014c10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014c13:	89 c6                	mov    esi,eax
c0014c15:	e8 7e ba fe ff       	call   c0000698 <strlen>
c0014c1a:	83 c4 10             	add    esp,0x10
c0014c1d:	39 c6                	cmp    esi,eax
c0014c1f:	7d 06                	jge    c0014c27 <string_ends_with(char const*, char const*)+0x2b>
c0014c21:	5b                   	pop    ebx
c0014c22:	31 c0                	xor    eax,eax
c0014c24:	5e                   	pop    esi
c0014c25:	5f                   	pop    edi
c0014c26:	c3                   	ret    
c0014c27:	83 ec 08             	sub    esp,0x8
c0014c2a:	29 c6                	sub    esi,eax
c0014c2c:	57                   	push   edi
c0014c2d:	01 f3                	add    ebx,esi
c0014c2f:	53                   	push   ebx
c0014c30:	e8 8f bb fe ff       	call   c00007c4 <strcmp>
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	85 c0                	test   eax,eax
c0014c3a:	5b                   	pop    ebx
c0014c3b:	0f 94 c0             	sete   al
c0014c3e:	5e                   	pop    esi
c0014c3f:	0f b6 c0             	movzx  eax,al
c0014c42:	5f                   	pop    edi
c0014c43:	c3                   	ret    

c0014c44 <sysCallOpen(regs*)>:
c0014c44:	56                   	push   esi
c0014c45:	53                   	push   ebx
c0014c46:	81 ec 04 01 00 00    	sub    esp,0x104
c0014c4c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0014c53:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014c56:	85 c9                	test   ecx,ecx
c0014c58:	0f 84 ad 01 00 00    	je     c0014e0b <sysCallOpen(regs*)+0x1c7>
c0014c5e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0014c61:	85 c0                	test   eax,eax
c0014c63:	0f 84 a2 01 00 00    	je     c0014e0b <sysCallOpen(regs*)+0x1c7>
c0014c69:	52                   	push   edx
c0014c6a:	68 56 43 02 c0       	push   0xc0024356
c0014c6f:	50                   	push   eax
c0014c70:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c74:	56                   	push   esi
c0014c75:	e8 0c 87 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0014c7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c7d:	e8 16 ba fe ff       	call   c0000698 <strlen>
c0014c82:	83 c4 10             	add    esp,0x10
c0014c85:	48                   	dec    eax
c0014c86:	74 1d                	je     c0014ca5 <sysCallOpen(regs*)+0x61>
c0014c88:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0014c8b:	eb 0f                	jmp    c0014c9c <sysCallOpen(regs*)+0x58>
c0014c8d:	80 fa 3a             	cmp    dl,0x3a
c0014c90:	74 0f                	je     c0014ca1 <sysCallOpen(regs*)+0x5d>
c0014c92:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0014c96:	48                   	dec    eax
c0014c97:	74 0c                	je     c0014ca5 <sysCallOpen(regs*)+0x61>
c0014c99:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0014c9c:	80 fa 2e             	cmp    dl,0x2e
c0014c9f:	75 ec                	jne    c0014c8d <sysCallOpen(regs*)+0x49>
c0014ca1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0014ca5:	83 ec 08             	sub    esp,0x8
c0014ca8:	68 5a 43 02 c0       	push   0xc002435a
c0014cad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cb0:	e8 47 ff ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	85 c0                	test   eax,eax
c0014cba:	74 1d                	je     c0014cd9 <sysCallOpen(regs*)+0x95>
c0014cbc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014cbf:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0014cc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ccc:	81 c4 04 01 00 00    	add    esp,0x104
c0014cd2:	31 c0                	xor    eax,eax
c0014cd4:	31 d2                	xor    edx,edx
c0014cd6:	5b                   	pop    ebx
c0014cd7:	5e                   	pop    esi
c0014cd8:	c3                   	ret    
c0014cd9:	83 ec 08             	sub    esp,0x8
c0014cdc:	68 5f 43 02 c0       	push   0xc002435f
c0014ce1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ce4:	e8 13 ff ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	85 c0                	test   eax,eax
c0014cee:	75 cc                	jne    c0014cbc <sysCallOpen(regs*)+0x78>
c0014cf0:	83 ec 08             	sub    esp,0x8
c0014cf3:	68 5b 43 02 c0       	push   0xc002435b
c0014cf8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cfb:	e8 c4 ba fe ff       	call   c00007c4 <strcmp>
c0014d00:	83 c4 10             	add    esp,0x10
c0014d03:	85 c0                	test   eax,eax
c0014d05:	74 b5                	je     c0014cbc <sysCallOpen(regs*)+0x78>
c0014d07:	83 ec 08             	sub    esp,0x8
c0014d0a:	68 5a 43 02 c0       	push   0xc002435a
c0014d0f:	56                   	push   esi
c0014d10:	e8 e7 fe ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	85 c0                	test   eax,eax
c0014d1a:	75 a0                	jne    c0014cbc <sysCallOpen(regs*)+0x78>
c0014d1c:	83 ec 08             	sub    esp,0x8
c0014d1f:	68 64 43 02 c0       	push   0xc0024364
c0014d24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d27:	e8 d0 fe ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014d2c:	83 c4 10             	add    esp,0x10
c0014d2f:	85 c0                	test   eax,eax
c0014d31:	0f 85 e7 00 00 00    	jne    c0014e1e <sysCallOpen(regs*)+0x1da>
c0014d37:	83 ec 08             	sub    esp,0x8
c0014d3a:	68 69 43 02 c0       	push   0xc0024369
c0014d3f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d42:	e8 b5 fe ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	85 c0                	test   eax,eax
c0014d4c:	0f 85 cc 00 00 00    	jne    c0014e1e <sysCallOpen(regs*)+0x1da>
c0014d52:	83 ec 08             	sub    esp,0x8
c0014d55:	68 65 43 02 c0       	push   0xc0024365
c0014d5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d5d:	e8 62 ba fe ff       	call   c00007c4 <strcmp>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	85 c0                	test   eax,eax
c0014d67:	0f 84 b1 00 00 00    	je     c0014e1e <sysCallOpen(regs*)+0x1da>
c0014d6d:	83 ec 08             	sub    esp,0x8
c0014d70:	68 64 43 02 c0       	push   0xc0024364
c0014d75:	56                   	push   esi
c0014d76:	e8 81 fe ff ff       	call   c0014bfc <string_ends_with(char const*, char const*)>
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	85 c0                	test   eax,eax
c0014d80:	0f 85 98 00 00 00    	jne    c0014e1e <sysCallOpen(regs*)+0x1da>
c0014d86:	83 ec 0c             	sub    esp,0xc
c0014d89:	68 14 01 00 00       	push   0x114
c0014d8e:	e8 24 4f ff ff       	call   c0009cb7 <malloc>
c0014d93:	83 c4 0c             	add    esp,0xc
c0014d96:	89 c6                	mov    esi,eax
c0014d98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d9d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014da0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014da3:	56                   	push   esi
c0014da4:	e8 87 87 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014da9:	83 c4 10             	add    esp,0x10
c0014dac:	85 f6                	test   esi,esi
c0014dae:	74 5b                	je     c0014e0b <sysCallOpen(regs*)+0x1c7>
c0014db0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0014db3:	0f b6 c2             	movzx  eax,dl
c0014db6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0014db9:	89 d0                	mov    eax,edx
c0014dbb:	83 e0 01             	and    eax,0x1
c0014dbe:	f6 c2 02             	test   dl,0x2
c0014dc1:	74 03                	je     c0014dc6 <sysCallOpen(regs*)+0x182>
c0014dc3:	83 c8 02             	or     eax,0x2
c0014dc6:	f6 c2 04             	test   dl,0x4
c0014dc9:	74 03                	je     c0014dce <sysCallOpen(regs*)+0x18a>
c0014dcb:	83 c8 04             	or     eax,0x4
c0014dce:	f6 c2 08             	test   dl,0x8
c0014dd1:	74 03                	je     c0014dd6 <sysCallOpen(regs*)+0x192>
c0014dd3:	83 c8 0a             	or     eax,0xa
c0014dd6:	83 e2 10             	and    edx,0x10
c0014dd9:	74 03                	je     c0014dde <sysCallOpen(regs*)+0x19a>
c0014ddb:	83 c8 12             	or     eax,0x12
c0014dde:	83 ec 08             	sub    esp,0x8
c0014de1:	50                   	push   eax
c0014de2:	56                   	push   esi
c0014de3:	e8 22 88 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0014de8:	83 c4 10             	add    esp,0x10
c0014deb:	85 c0                	test   eax,eax
c0014ded:	75 1c                	jne    c0014e0b <sysCallOpen(regs*)+0x1c7>
c0014def:	83 ec 0c             	sub    esp,0xc
c0014df2:	56                   	push   esi
c0014df3:	e8 26 6a ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0014df8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0014dfb:	83 c4 10             	add    esp,0x10
c0014dfe:	89 02                	mov    DWORD PTR [edx],eax
c0014e00:	c1 f8 1f             	sar    eax,0x1f
c0014e03:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014e06:	e9 c1 fe ff ff       	jmp    c0014ccc <sysCallOpen(regs*)+0x88>
c0014e0b:	81 c4 04 01 00 00    	add    esp,0x104
c0014e11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014e16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e1b:	5b                   	pop    ebx
c0014e1c:	5e                   	pop    esi
c0014e1d:	c3                   	ret    
c0014e1e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014e21:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0014e27:	e9 99 fe ff ff       	jmp    c0014cc5 <sysCallOpen(regs*)+0x81>

c0014e2c <Sys::loadSyscalls()>:
c0014e2c:	c7 05 00 8e 02 c0 9d 40 01 c0 	mov    DWORD PTR ds:0xc0028e00,0xc001409d
c0014e36:	c7 05 04 8e 02 c0 92 3c 01 c0 	mov    DWORD PTR ds:0xc0028e04,0xc0013c92
c0014e40:	c7 05 08 8e 02 c0 83 3e 01 c0 	mov    DWORD PTR ds:0xc0028e08,0xc0013e83
c0014e4a:	c7 05 0c 8e 02 c0 d3 3f 01 c0 	mov    DWORD PTR ds:0xc0028e0c,0xc0013fd3
c0014e54:	c7 05 10 8e 02 c0 1b 3e 01 c0 	mov    DWORD PTR ds:0xc0028e10,0xc0013e1b
c0014e5e:	c7 05 14 8e 02 c0 c9 3c 01 c0 	mov    DWORD PTR ds:0xc0028e14,0xc0013cc9
c0014e68:	c7 05 18 8e 02 c0 aa 3c 01 c0 	mov    DWORD PTR ds:0xc0028e18,0xc0013caa
c0014e72:	c7 05 1c 8e 02 c0 d8 3e 01 c0 	mov    DWORD PTR ds:0xc0028e1c,0xc0013ed8
c0014e7c:	c7 05 24 8e 02 c0 60 45 01 c0 	mov    DWORD PTR ds:0xc0028e24,0xc0014560
c0014e86:	c7 05 20 8e 02 c0 44 4c 01 c0 	mov    DWORD PTR ds:0xc0028e20,0xc0014c44
c0014e90:	c7 05 28 8e 02 c0 c0 45 01 c0 	mov    DWORD PTR ds:0xc0028e28,0xc00145c0
c0014e9a:	c7 05 2c 8e 02 c0 a3 42 01 c0 	mov    DWORD PTR ds:0xc0028e2c,0xc00142a3
c0014ea4:	c7 05 30 8e 02 c0 d5 40 01 c0 	mov    DWORD PTR ds:0xc0028e30,0xc00140d5
c0014eae:	c7 05 34 8e 02 c0 da 40 01 c0 	mov    DWORD PTR ds:0xc0028e34,0xc00140da
c0014eb8:	c7 05 38 8e 02 c0 89 46 01 c0 	mov    DWORD PTR ds:0xc0028e38,0xc0014689
c0014ec2:	c7 05 3c 8e 02 c0 35 46 01 c0 	mov    DWORD PTR ds:0xc0028e3c,0xc0014635
c0014ecc:	c7 05 40 8e 02 c0 7c 43 01 c0 	mov    DWORD PTR ds:0xc0028e40,0xc001437c
c0014ed6:	c7 05 44 8e 02 c0 d3 43 01 c0 	mov    DWORD PTR ds:0xc0028e44,0xc00143d3
c0014ee0:	c7 05 48 8e 02 c0 3f 44 01 c0 	mov    DWORD PTR ds:0xc0028e48,0xc001443f
c0014eea:	c7 05 4c 8e 02 c0 df 40 01 c0 	mov    DWORD PTR ds:0xc0028e4c,0xc00140df
c0014ef4:	c7 05 50 8e 02 c0 f9 46 01 c0 	mov    DWORD PTR ds:0xc0028e50,0xc00146f9
c0014efe:	c7 05 54 8e 02 c0 13 47 01 c0 	mov    DWORD PTR ds:0xc0028e54,0xc0014713
c0014f08:	c7 05 58 8e 02 c0 13 47 01 c0 	mov    DWORD PTR ds:0xc0028e58,0xc0014713
c0014f12:	c7 05 5c 8e 02 c0 48 47 01 c0 	mov    DWORD PTR ds:0xc0028e5c,0xc0014748
c0014f1c:	c7 05 60 8e 02 c0 ac 47 01 c0 	mov    DWORD PTR ds:0xc0028e60,0xc00147ac
c0014f26:	c7 05 64 8e 02 c0 e9 40 01 c0 	mov    DWORD PTR ds:0xc0028e64,0xc00140e9
c0014f30:	c7 05 68 8e 02 c0 10 48 01 c0 	mov    DWORD PTR ds:0xc0028e68,0xc0014810
c0014f3a:	c7 05 6c 8e 02 c0 60 42 01 c0 	mov    DWORD PTR ds:0xc0028e6c,0xc0014260
c0014f44:	c7 05 70 8e 02 c0 5c 48 01 c0 	mov    DWORD PTR ds:0xc0028e70,0xc001485c
c0014f4e:	c7 05 74 8e 02 c0 22 43 01 c0 	mov    DWORD PTR ds:0xc0028e74,0xc0014322
c0014f58:	c7 05 78 8e 02 c0 df 48 01 c0 	mov    DWORD PTR ds:0xc0028e78,0xc00148df
c0014f62:	c7 05 7c 8e 02 c0 b1 44 01 c0 	mov    DWORD PTR ds:0xc0028e7c,0xc00144b1
c0014f6c:	c7 05 80 8e 02 c0 08 49 01 c0 	mov    DWORD PTR ds:0xc0028e80,0xc0014908
c0014f76:	c7 05 84 8e 02 c0 70 49 01 c0 	mov    DWORD PTR ds:0xc0028e84,0xc0014970
c0014f80:	c7 05 88 8e 02 c0 1d 4a 01 c0 	mov    DWORD PTR ds:0xc0028e88,0xc0014a1d
c0014f8a:	c7 05 8c 8e 02 c0 f9 40 01 c0 	mov    DWORD PTR ds:0xc0028e8c,0xc00140f9
c0014f94:	c7 05 90 8e 02 c0 63 41 01 c0 	mov    DWORD PTR ds:0xc0028e90,0xc0014163
c0014f9e:	c7 05 94 8e 02 c0 ad 41 01 c0 	mov    DWORD PTR ds:0xc0028e94,0xc00141ad
c0014fa8:	c7 05 98 8e 02 c0 31 4b 01 c0 	mov    DWORD PTR ds:0xc0028e98,0xc0014b31
c0014fb2:	c7 05 9c 8e 02 c0 2e 47 01 c0 	mov    DWORD PTR ds:0xc0028e9c,0xc001472e
c0014fbc:	c7 05 a0 8e 02 c0 02 42 01 c0 	mov    DWORD PTR ds:0xc0028ea0,0xc0014202
c0014fc6:	c7 05 a4 8e 02 c0 a3 4b 01 c0 	mov    DWORD PTR ds:0xc0028ea4,0xc0014ba3
c0014fd0:	c7 05 a8 8e 02 c0 e8 4b 01 c0 	mov    DWORD PTR ds:0xc0028ea8,0xc0014be8
c0014fda:	c7 05 ac 8e 02 c0 73 3d 01 c0 	mov    DWORD PTR ds:0xc0028eac,0xc0013d73
c0014fe4:	c7 05 b0 8e 02 c0 f4 3e 01 c0 	mov    DWORD PTR ds:0xc0028eb0,0xc0013ef4
c0014fee:	c7 05 b4 8e 02 c0 89 3f 01 c0 	mov    DWORD PTR ds:0xc0028eb4,0xc0013f89
c0014ff8:	c7 05 b8 8e 02 c0 5c 3c 01 c0 	mov    DWORD PTR ds:0xc0028eb8,0xc0013c5c
c0015002:	c7 05 bc 8e 02 c0 3b 40 01 c0 	mov    DWORD PTR ds:0xc0028ebc,0xc001403b
c001500c:	c7 05 c0 8e 02 c0 d5 3c 01 c0 	mov    DWORD PTR ds:0xc0028ec0,0xc0013cd5
c0015016:	c7 05 c4 8e 02 c0 ef 3c 01 c0 	mov    DWORD PTR ds:0xc0028ec4,0xc0013cef
c0015020:	c3                   	ret    

c0015021 <Sys::systemCall(regs*, void*)>:
c0015021:	53                   	push   ebx
c0015022:	83 ec 08             	sub    esp,0x8
c0015025:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015029:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001502c:	83 f8 7f             	cmp    eax,0x7f
c001502f:	77 16                	ja     c0015047 <Sys::systemCall(regs*, void*)+0x26>
c0015031:	8b 14 85 00 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7200]
c0015038:	85 d2                	test   edx,edx
c001503a:	74 0b                	je     c0015047 <Sys::systemCall(regs*, void*)+0x26>
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	53                   	push   ebx
c0015040:	ff d2                	call   edx
c0015042:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015045:	eb 0d                	jmp    c0015054 <Sys::systemCall(regs*, void*)+0x33>
c0015047:	52                   	push   edx
c0015048:	52                   	push   edx
c0015049:	50                   	push   eax
c001504a:	68 6e 43 02 c0       	push   0xc002436e
c001504f:	e8 71 7f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015054:	83 c4 10             	add    esp,0x10
c0015057:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001505c:	31 d2                	xor    edx,edx
c001505e:	83 c4 08             	add    esp,0x8
c0015061:	5b                   	pop    ebx
c0015062:	c3                   	ret    

c0015063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015063:	55                   	push   ebp
c0015064:	57                   	push   edi
c0015065:	56                   	push   esi
c0015066:	53                   	push   ebx
c0015067:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001506d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015074:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001507b:	85 c0                	test   eax,eax
c001507d:	0f 95 c1             	setne  cl
c0015080:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015088:	0f 94 c2             	sete   dl
c001508b:	84 d1                	test   cl,dl
c001508d:	74 23                	je     c00150b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001508f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0015095:	74 1b                	je     c00150b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0015097:	81 c3 00 10 00 00    	add    ebx,0x1000
c001509d:	89 da                	mov    edx,ebx
c001509f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00150a5:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00150ab:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00150b2:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c00150b9:	05 ff 0f 00 00       	add    eax,0xfff
c00150be:	83 ec 0c             	sub    esp,0xc
c00150c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00150c5:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c00150cb:	c1 e8 0c             	shr    eax,0xc
c00150ce:	89 fe                	mov    esi,edi
c00150d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00150d4:	c1 ee 0c             	shr    esi,0xc
c00150d7:	6a 01                	push   0x1
c00150d9:	e8 8b 6b ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c00150de:	89 c5                	mov    ebp,eax
c00150e0:	58                   	pop    eax
c00150e1:	5a                   	pop    edx
c00150e2:	56                   	push   esi
c00150e3:	68 82 43 02 c0       	push   0xc0024382
c00150e8:	e8 d8 7e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00150ed:	59                   	pop    ecx
c00150ee:	58                   	pop    eax
c00150ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00150f3:	68 94 43 02 c0       	push   0xc0024394
c00150f8:	e8 c8 7e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0015106:	0f 86 31 01 00 00    	jbe    c001523d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001510c:	c1 e6 0c             	shl    esi,0xc
c001510f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015112:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0015115:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015119:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015123:	01 df                	add    edi,ebx
c0015125:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0015128:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001512c:	0f 84 08 01 00 00    	je     c001523a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0015132:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015138:	76 05                	jbe    c001513f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001513a:	bf 00 10 00 00       	mov    edi,0x1000
c001513f:	83 ec 0c             	sub    esp,0xc
c0015142:	31 d2                	xor    edx,edx
c0015144:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001514b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001514d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015151:	50                   	push   eax
c0015152:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015156:	56                   	push   esi
c0015157:	52                   	push   edx
c0015158:	57                   	push   edi
c0015159:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015160:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015163:	83 c4 20             	add    esp,0x20
c0015166:	85 c0                	test   eax,eax
c0015168:	74 0a                	je     c0015174 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001516a:	53                   	push   ebx
c001516b:	53                   	push   ebx
c001516c:	50                   	push   eax
c001516d:	68 a6 43 02 c0       	push   0xc00243a6
c0015172:	eb 0f                	jmp    c0015183 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0015174:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015178:	74 20                	je     c001519a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001517a:	51                   	push   ecx
c001517b:	51                   	push   ecx
c001517c:	6a 00                	push   0x0
c001517e:	68 d1 43 02 c0       	push   0xc00243d1
c0015183:	e8 3d 7e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015188:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001518b:	e8 cd 6d ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0015190:	83 c4 10             	add    esp,0x10
c0015193:	31 c0                	xor    eax,eax
c0015195:	e9 68 01 00 00       	jmp    c0015302 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001519a:	fa                   	cli    
c001519b:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00151a1:	e8 c8 51 ff ff       	call   c000a36e <Phys::allocatePage()>
c00151a6:	6a 07                	push   0x7
c00151a8:	89 c7                	mov    edi,eax
c00151aa:	55                   	push   ebp
c00151ab:	50                   	push   eax
c00151ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151b4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00151ba:	e8 15 71 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00151bf:	83 c4 0c             	add    esp,0xc
c00151c2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00151c9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00151cf:	6a 00                	push   0x0
c00151d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151d9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00151df:	e8 4a 6f ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c00151e4:	58                   	pop    eax
c00151e5:	5a                   	pop    edx
c00151e6:	68 07 0c 00 00       	push   0xc07
c00151eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151ef:	57                   	push   edi
c00151f0:	89 ef                	mov    edi,ebp
c00151f2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00151f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00151ff:	6a 00                	push   0x0
c0015201:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015206:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015209:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001520f:	e8 7e 74 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015214:	b9 00 10 00 00       	mov    ecx,0x1000
c0015219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001521b:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0015220:	83 c4 20             	add    esp,0x20
c0015223:	48                   	dec    eax
c0015224:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015229:	85 c0                	test   eax,eax
c001522b:	75 01                	jne    c001522e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001522d:	fb                   	sti    
c001522e:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0015235:	e9 df fe ff ff       	jmp    c0015119 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001523a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001523d:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0015245:	0f 86 a9 00 00 00    	jbe    c00152f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001524b:	fa                   	cli    
c001524c:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0015252:	51                   	push   ecx
c0015253:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001525a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015260:	6a 00                	push   0x0
c0015262:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015267:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001526a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015270:	e8 b9 6e ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0015275:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015279:	c1 e6 0c             	shl    esi,0xc
c001527c:	01 de                	add    esi,ebx
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	39 de                	cmp    esi,ebx
c0015283:	74 61                	je     c00152e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0015285:	e8 e4 50 ff ff       	call   c000a36e <Phys::allocatePage()>
c001528a:	6a 07                	push   0x7
c001528c:	89 c7                	mov    edi,eax
c001528e:	55                   	push   ebp
c001528f:	50                   	push   eax
c0015290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015295:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015298:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001529e:	e8 31 70 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00152a3:	58                   	pop    eax
c00152a4:	5a                   	pop    edx
c00152a5:	68 07 0c 00 00       	push   0xc07
c00152aa:	53                   	push   ebx
c00152ab:	81 c3 00 10 00 00    	add    ebx,0x1000
c00152b1:	57                   	push   edi
c00152b2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00152b9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00152bf:	6a 00                	push   0x0
c00152c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152c9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00152cf:	e8 be 73 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00152d4:	83 c4 1c             	add    esp,0x1c
c00152d7:	68 00 10 00 00       	push   0x1000
c00152dc:	6a 00                	push   0x0
c00152de:	55                   	push   ebp
c00152df:	e8 98 b3 fe ff       	call   c000067c <memset>
c00152e4:	eb 98                	jmp    c001527e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00152e6:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00152eb:	48                   	dec    eax
c00152ec:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00152f1:	75 01                	jne    c00152f4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00152f3:	fb                   	sti    
c00152f4:	83 ec 0c             	sub    esp,0xc
c00152f7:	55                   	push   ebp
c00152f8:	e8 60 6c ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	b0 01                	mov    al,0x1
c0015302:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015308:	5b                   	pop    ebx
c0015309:	5e                   	pop    esi
c001530a:	5f                   	pop    edi
c001530b:	5d                   	pop    ebp
c001530c:	c3                   	ret    

c001530d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001530d:	55                   	push   ebp
c001530e:	57                   	push   edi
c001530f:	56                   	push   esi
c0015310:	53                   	push   ebx
c0015311:	83 ec 48             	sub    esp,0x48
c0015314:	68 14 01 00 00       	push   0x114
c0015319:	e8 99 49 ff ff       	call   c0009cb7 <malloc>
c001531e:	83 c4 0c             	add    esp,0xc
c0015321:	89 c6                	mov    esi,eax
c0015323:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0015327:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001532b:	50                   	push   eax
c001532c:	e8 ff 81 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015331:	58                   	pop    eax
c0015332:	5a                   	pop    edx
c0015333:	6a 01                	push   0x1
c0015335:	56                   	push   esi
c0015336:	e8 cf 82 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	85 c0                	test   eax,eax
c0015340:	0f 85 47 01 00 00    	jne    c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015346:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001534e:	83 ec 0c             	sub    esp,0xc
c0015351:	6a 34                	push   0x34
c0015353:	e8 5f 49 ff ff       	call   c0009cb7 <malloc>
c0015358:	89 c3                	mov    ebx,eax
c001535a:	58                   	pop    eax
c001535b:	8b 06                	mov    eax,DWORD PTR [esi]
c001535d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015361:	57                   	push   edi
c0015362:	53                   	push   ebx
c0015363:	6a 00                	push   0x0
c0015365:	6a 34                	push   0x34
c0015367:	56                   	push   esi
c0015368:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001536b:	83 c4 20             	add    esp,0x20
c001536e:	85 c0                	test   eax,eax
c0015370:	0f 85 17 01 00 00    	jne    c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015376:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001537c:	0f 85 0b 01 00 00    	jne    c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015382:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015385:	85 c0                	test   eax,eax
c0015387:	0f 84 00 01 00 00    	je     c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001538d:	31 d2                	xor    edx,edx
c001538f:	55                   	push   ebp
c0015390:	52                   	push   edx
c0015391:	50                   	push   eax
c0015392:	56                   	push   esi
c0015393:	e8 30 83 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	85 c0                	test   eax,eax
c001539d:	0f 85 ea 00 00 00    	jne    c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00153a3:	83 ec 0c             	sub    esp,0xc
c00153a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00153a9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00153ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00153b1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00153b5:	0f af c2             	imul   eax,edx
c00153b8:	50                   	push   eax
c00153b9:	e8 f9 48 ff ff       	call   c0009cb7 <malloc>
c00153be:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00153c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00153c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00153c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00153cb:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00153cf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00153d3:	0f af c2             	imul   eax,edx
c00153d6:	99                   	cdq    
c00153d7:	52                   	push   edx
c00153d8:	50                   	push   eax
c00153d9:	56                   	push   esi
c00153da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153dd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00153e0:	83 c4 20             	add    esp,0x20
c00153e3:	85 c0                	test   eax,eax
c00153e5:	0f 84 a2 00 00 00    	je     c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00153eb:	31 d2                	xor    edx,edx
c00153ed:	51                   	push   ecx
c00153ee:	52                   	push   edx
c00153ef:	50                   	push   eax
c00153f0:	56                   	push   esi
c00153f1:	e8 d2 82 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00153f6:	83 c4 10             	add    esp,0x10
c00153f9:	85 c0                	test   eax,eax
c00153fb:	0f 85 8c 00 00 00    	jne    c001548d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015401:	83 ec 0c             	sub    esp,0xc
c0015404:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015408:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001540c:	31 ed                	xor    ebp,ebp
c001540e:	0f af c2             	imul   eax,edx
c0015411:	50                   	push   eax
c0015412:	e8 a0 48 ff ff       	call   c0009cb7 <malloc>
c0015417:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015419:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001541d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015420:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015424:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015428:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001542c:	0f af c2             	imul   eax,edx
c001542f:	99                   	cdq    
c0015430:	52                   	push   edx
c0015431:	50                   	push   eax
c0015432:	56                   	push   esi
c0015433:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015436:	83 c4 20             	add    esp,0x20
c0015439:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015441:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0015445:	0f 86 80 00 00 00    	jbe    c00154cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001544b:	0f b7 fd             	movzx  edi,bp
c001544e:	c1 e7 05             	shl    edi,0x5
c0015451:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015455:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015458:	75 6b                	jne    c00154c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001545a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001545d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015461:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015468:	52                   	push   edx
c0015469:	31 d2                	xor    edx,edx
c001546b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001546e:	52                   	push   edx
c001546f:	50                   	push   eax
c0015470:	56                   	push   esi
c0015471:	e8 52 82 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	85 c0                	test   eax,eax
c001547b:	74 17                	je     c0015494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001547d:	83 ec 0c             	sub    esp,0xc
c0015480:	68 fd 43 02 c0       	push   0xc00243fd
c0015485:	e8 3b 7b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001548a:	83 c4 10             	add    esp,0x10
c001548d:	31 c0                	xor    eax,eax
c001548f:	e9 87 00 00 00       	jmp    c001551b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0015494:	83 ec 0c             	sub    esp,0xc
c0015497:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001549a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001549d:	50                   	push   eax
c001549e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00154a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00154a6:	56                   	push   esi
c00154a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00154ab:	e8 b3 fb ff ff       	call   c0015063 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00154b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00154b4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00154b8:	83 c4 20             	add    esp,0x20
c00154bb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00154bf:	73 04                	jae    c00154c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00154c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00154c5:	45                   	inc    ebp
c00154c6:	e9 76 ff ff ff       	jmp    c0015441 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00154cb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00154cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00154d7:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00154dd:	83 ec 0c             	sub    esp,0xc
c00154e0:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00154e6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154eb:	05 00 10 00 00       	add    eax,0x1000
c00154f0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154f7:	e8 cb 47 ff ff       	call   c0009cc7 <free>
c00154fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154ff:	e8 c3 47 ff ff       	call   c0009cc7 <free>
c0015504:	58                   	pop    eax
c0015505:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015509:	e8 b9 47 ff ff       	call   c0009cc7 <free>
c001550e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015511:	e8 52 81 ff ff       	call   c000d668 <File::close()>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	b0 01                	mov    al,0x1
c001551b:	83 c4 3c             	add    esp,0x3c
c001551e:	5b                   	pop    ebx
c001551f:	5e                   	pop    esi
c0015520:	5f                   	pop    edi
c0015521:	5d                   	pop    ebp
c0015522:	c3                   	ret    

c0015523 <Thr::runtimeReferenceHelper()>:
c0015523:	83 ec 18             	sub    esp,0x18
c0015526:	68 05 44 02 c0       	push   0xc0024405
c001552b:	e8 95 7a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015530:	fa                   	cli    
c0015531:	83 c4 10             	add    esp,0x10
c0015534:	eb fe                	jmp    c0015534 <Thr::runtimeReferenceHelper()+0x11>

c0015536 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015536:	57                   	push   edi
c0015537:	56                   	push   esi
c0015538:	53                   	push   ebx
c0015539:	31 db                	xor    ebx,ebx
c001553b:	39 1d a0 97 02 c0    	cmp    DWORD PTR ds:0xc00297a0,ebx
c0015541:	7e 3c                	jle    c001557f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015543:	8b 34 9d 20 97 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd68e0]
c001554a:	31 ff                	xor    edi,edi
c001554c:	39 3c 9d 20 96 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd69e0],edi
c0015553:	7e 27                	jle    c001557c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015555:	50                   	push   eax
c0015556:	50                   	push   eax
c0015557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001555b:	8b 06                	mov    eax,DWORD PTR [esi]
c001555d:	03 04 9d a0 96 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6960]
c0015564:	50                   	push   eax
c0015565:	e8 5a b2 fe ff       	call   c00007c4 <strcmp>
c001556a:	83 c4 10             	add    esp,0x10
c001556d:	85 c0                	test   eax,eax
c001556f:	75 05                	jne    c0015576 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015571:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015574:	eb 0b                	jmp    c0015581 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015576:	83 c6 10             	add    esi,0x10
c0015579:	47                   	inc    edi
c001557a:	eb d0                	jmp    c001554c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001557c:	43                   	inc    ebx
c001557d:	eb bc                	jmp    c001553b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001557f:	31 c0                	xor    eax,eax
c0015581:	5b                   	pop    ebx
c0015582:	5e                   	pop    esi
c0015583:	5f                   	pop    edi
c0015584:	c3                   	ret    

c0015585 <Thr::loadKernelSymbolTable(char const*)>:
c0015585:	55                   	push   ebp
c0015586:	57                   	push   edi
c0015587:	56                   	push   esi
c0015588:	53                   	push   ebx
c0015589:	83 ec 68             	sub    esp,0x68
c001558c:	8b 35 f0 97 02 c0    	mov    esi,DWORD PTR ds:0xc00297f0
c0015592:	68 14 01 00 00       	push   0x114
c0015597:	e8 1b 47 ff ff       	call   c0009cb7 <malloc>
c001559c:	83 c4 0c             	add    esp,0xc
c001559f:	89 c3                	mov    ebx,eax
c00155a1:	56                   	push   esi
c00155a2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00155a6:	50                   	push   eax
c00155a7:	e8 84 7f ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00155ac:	5e                   	pop    esi
c00155ad:	5f                   	pop    edi
c00155ae:	6a 01                	push   0x1
c00155b0:	53                   	push   ebx
c00155b1:	e8 54 80 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	85 c0                	test   eax,eax
c00155bb:	74 0a                	je     c00155c7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c00155bd:	83 ec 0c             	sub    esp,0xc
c00155c0:	68 27 44 02 c0       	push   0xc0024427
c00155c5:	eb 34                	jmp    c00155fb <Thr::loadKernelSymbolTable(char const*)+0x76>
c00155c7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00155cf:	83 ec 0c             	sub    esp,0xc
c00155d2:	6a 34                	push   0x34
c00155d4:	e8 de 46 ff ff       	call   c0009cb7 <malloc>
c00155d9:	59                   	pop    ecx
c00155da:	89 c7                	mov    edi,eax
c00155dc:	8d 74 24 34          	lea    esi,[esp+0x34]
c00155e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00155e2:	56                   	push   esi
c00155e3:	57                   	push   edi
c00155e4:	6a 00                	push   0x0
c00155e6:	6a 34                	push   0x34
c00155e8:	53                   	push   ebx
c00155e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00155ec:	83 c4 20             	add    esp,0x20
c00155ef:	85 c0                	test   eax,eax
c00155f1:	74 17                	je     c001560a <Thr::loadKernelSymbolTable(char const*)+0x85>
c00155f3:	83 ec 0c             	sub    esp,0xc
c00155f6:	68 3e 44 02 c0       	push   0xc002443e
c00155fb:	e8 77 dd ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	31 c0                	xor    eax,eax
c0015605:	e9 31 02 00 00       	jmp    c001583b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001560a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015610:	75 e1                	jne    c00155f3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015612:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015615:	85 c0                	test   eax,eax
c0015617:	74 da                	je     c00155f3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015619:	52                   	push   edx
c001561a:	31 d2                	xor    edx,edx
c001561c:	52                   	push   edx
c001561d:	50                   	push   eax
c001561e:	53                   	push   ebx
c001561f:	e8 a4 80 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	85 c0                	test   eax,eax
c0015629:	75 c8                	jne    c00155f3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001562b:	83 ec 0c             	sub    esp,0xc
c001562e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015632:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015636:	31 ed                	xor    ebp,ebp
c0015638:	0f af c2             	imul   eax,edx
c001563b:	50                   	push   eax
c001563c:	e8 76 46 ff ff       	call   c0009cb7 <malloc>
c0015641:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015647:	89 34 24             	mov    DWORD PTR [esp],esi
c001564a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001564e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015652:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015656:	0f af c2             	imul   eax,edx
c0015659:	99                   	cdq    
c001565a:	52                   	push   edx
c001565b:	50                   	push   eax
c001565c:	53                   	push   ebx
c001565d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015660:	83 c4 20             	add    esp,0x20
c0015663:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001566b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015673:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001567b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015683:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0015687:	0f 86 aa 00 00 00    	jbe    c0015737 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001568d:	0f b7 f5             	movzx  esi,bp
c0015690:	6b f6 28             	imul   esi,esi,0x28
c0015693:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015697:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001569a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001569e:	50                   	push   eax
c001569f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156a3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00156a7:	8b 16                	mov    edx,DWORD PTR [esi]
c00156a9:	6b c0 28             	imul   eax,eax,0x28
c00156ac:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00156b0:	89 d0                	mov    eax,edx
c00156b2:	31 d2                	xor    edx,edx
c00156b4:	52                   	push   edx
c00156b5:	50                   	push   eax
c00156b6:	53                   	push   ebx
c00156b7:	e8 0c 80 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00156bc:	83 c4 0c             	add    esp,0xc
c00156bf:	6a 20                	push   0x20
c00156c1:	6a 00                	push   0x0
c00156c3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00156c7:	52                   	push   edx
c00156c8:	e8 af af fe ff       	call   c000067c <memset>
c00156cd:	58                   	pop    eax
c00156ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156d0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00156d4:	51                   	push   ecx
c00156d5:	8d 54 24 40          	lea    edx,[esp+0x40]
c00156d9:	52                   	push   edx
c00156da:	6a 00                	push   0x0
c00156dc:	6a 1f                	push   0x1f
c00156de:	53                   	push   ebx
c00156df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00156e2:	83 c4 18             	add    esp,0x18
c00156e5:	68 55 44 02 c0       	push   0xc0024455
c00156ea:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00156ee:	52                   	push   edx
c00156ef:	e8 d0 b0 fe ff       	call   c00007c4 <strcmp>
c00156f4:	83 c4 10             	add    esp,0x10
c00156f7:	85 c0                	test   eax,eax
c00156f9:	75 0f                	jne    c001570a <Thr::loadKernelSymbolTable(char const*)+0x185>
c00156fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00156fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015706:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001570a:	50                   	push   eax
c001570b:	50                   	push   eax
c001570c:	68 5d 44 02 c0       	push   0xc002445d
c0015711:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015715:	50                   	push   eax
c0015716:	e8 a9 b0 fe ff       	call   c00007c4 <strcmp>
c001571b:	83 c4 10             	add    esp,0x10
c001571e:	85 c0                	test   eax,eax
c0015720:	75 0f                	jne    c0015731 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015722:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015725:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015729:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001572d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015731:	45                   	inc    ebp
c0015732:	e9 4c ff ff ff       	jmp    c0015683 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015737:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001573c:	75 10                	jne    c001574e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001573e:	83 ec 0c             	sub    esp,0xc
c0015741:	68 65 44 02 c0       	push   0xc0024465
c0015746:	e8 2c dc ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015753:	75 10                	jne    c0015765 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015755:	83 ec 0c             	sub    esp,0xc
c0015758:	68 65 44 02 c0       	push   0xc0024465
c001575d:	e8 15 dc ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	31 d2                	xor    edx,edx
c0015767:	50                   	push   eax
c0015768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001576c:	52                   	push   edx
c001576d:	50                   	push   eax
c001576e:	53                   	push   ebx
c001576f:	e8 54 7f ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015774:	5a                   	pop    edx
c0015775:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015779:	e8 39 45 ff ff       	call   c0009cb7 <malloc>
c001577e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015782:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015786:	31 c9                	xor    ecx,ecx
c0015788:	5e                   	pop    esi
c0015789:	8b 03                	mov    eax,DWORD PTR [ebx]
c001578b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001578f:	55                   	push   ebp
c0015790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015794:	51                   	push   ecx
c0015795:	52                   	push   edx
c0015796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001579a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001579e:	53                   	push   ebx
c001579f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157a2:	83 c4 14             	add    esp,0x14
c00157a5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00157a9:	e8 09 45 ff ff       	call   c0009cb7 <malloc>
c00157ae:	89 c6                	mov    esi,eax
c00157b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157b5:	56                   	push   esi
c00157b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00157ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00157be:	51                   	push   ecx
c00157bf:	52                   	push   edx
c00157c0:	53                   	push   ebx
c00157c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00157c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00157c8:	8b 15 a0 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297a0
c00157ce:	83 c4 1c             	add    esp,0x1c
c00157d1:	c1 e8 04             	shr    eax,0x4
c00157d4:	89 04 95 20 96 02 c0 	mov    DWORD PTR [edx*4-0x3ffd69e0],eax
c00157db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00157df:	31 d2                	xor    edx,edx
c00157e1:	52                   	push   edx
c00157e2:	50                   	push   eax
c00157e3:	53                   	push   ebx
c00157e4:	e8 df 7e ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00157e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00157eb:	31 d2                	xor    edx,edx
c00157ed:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157f0:	56                   	push   esi
c00157f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00157f5:	52                   	push   edx
c00157f6:	50                   	push   eax
c00157f7:	53                   	push   ebx
c00157f8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157fb:	83 c4 14             	add    esp,0x14
c00157fe:	53                   	push   ebx
c00157ff:	e8 64 7e ff ff       	call   c000d668 <File::close()>
c0015804:	5d                   	pop    ebp
c0015805:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015809:	e8 b9 44 ff ff       	call   c0009cc7 <free>
c001580e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015811:	e8 b1 44 ff ff       	call   c0009cc7 <free>
c0015816:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c001581b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001581f:	8d 50 01             	lea    edx,[eax+0x1]
c0015822:	89 0c 85 20 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68e0],ecx
c0015829:	89 34 85 a0 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6960],esi
c0015830:	89 15 a0 97 02 c0    	mov    DWORD PTR ds:0xc00297a0,edx
c0015836:	83 c4 10             	add    esp,0x10
c0015839:	b0 01                	mov    al,0x1
c001583b:	83 c4 5c             	add    esp,0x5c
c001583e:	5b                   	pop    ebx
c001583f:	5e                   	pop    esi
c0015840:	5f                   	pop    edi
c0015841:	5d                   	pop    ebp
c0015842:	c3                   	ret    

c0015843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015843:	55                   	push   ebp
c0015844:	57                   	push   edi
c0015845:	56                   	push   esi
c0015846:	53                   	push   ebx
c0015847:	81 ec 68 03 00 00    	sub    esp,0x368
c001584d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015854:	8b 1d f0 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297f0
c001585a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001585e:	68 14 01 00 00       	push   0x114
c0015863:	e8 4f 44 ff ff       	call   c0009cb7 <malloc>
c0015868:	83 c4 0c             	add    esp,0xc
c001586b:	89 c5                	mov    ebp,eax
c001586d:	53                   	push   ebx
c001586e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015875:	50                   	push   eax
c0015876:	e8 b5 7c ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001587b:	5e                   	pop    esi
c001587c:	5f                   	pop    edi
c001587d:	6a 01                	push   0x1
c001587f:	55                   	push   ebp
c0015880:	e8 85 7d ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	85 c0                	test   eax,eax
c001588a:	0f 85 a7 06 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015890:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	6a 34                	push   0x34
c001589d:	e8 15 44 ff ff       	call   c0009cb7 <malloc>
c00158a2:	5b                   	pop    ebx
c00158a3:	89 c7                	mov    edi,eax
c00158a5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00158a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00158ac:	53                   	push   ebx
c00158ad:	57                   	push   edi
c00158ae:	6a 00                	push   0x0
c00158b0:	6a 34                	push   0x34
c00158b2:	55                   	push   ebp
c00158b3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00158b6:	83 c4 20             	add    esp,0x20
c00158b9:	85 c0                	test   eax,eax
c00158bb:	0f 85 76 06 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00158c1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00158c7:	0f 85 6a 06 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00158cd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00158d0:	85 c0                	test   eax,eax
c00158d2:	0f 84 5f 06 00 00    	je     c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00158d8:	31 d2                	xor    edx,edx
c00158da:	51                   	push   ecx
c00158db:	52                   	push   edx
c00158dc:	50                   	push   eax
c00158dd:	55                   	push   ebp
c00158de:	e8 e5 7d ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00158e3:	83 c4 10             	add    esp,0x10
c00158e6:	85 c0                	test   eax,eax
c00158e8:	0f 85 49 06 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00158f4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00158f8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00158fc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015900:	0f af c2             	imul   eax,edx
c0015903:	50                   	push   eax
c0015904:	e8 ae 43 ff ff       	call   c0009cb7 <malloc>
c0015909:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001590c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015913:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015917:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001591b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001591f:	0f af c2             	imul   eax,edx
c0015922:	99                   	cdq    
c0015923:	52                   	push   edx
c0015924:	50                   	push   eax
c0015925:	55                   	push   ebp
c0015926:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015929:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001592c:	83 c4 20             	add    esp,0x20
c001592f:	85 c0                	test   eax,eax
c0015931:	0f 84 00 06 00 00    	je     c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015937:	52                   	push   edx
c0015938:	31 d2                	xor    edx,edx
c001593a:	52                   	push   edx
c001593b:	50                   	push   eax
c001593c:	55                   	push   ebp
c001593d:	e8 86 7d ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	85 c0                	test   eax,eax
c0015947:	0f 85 ea 05 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001594d:	83 ec 0c             	sub    esp,0xc
c0015950:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015954:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015958:	31 f6                	xor    esi,esi
c001595a:	0f af c2             	imul   eax,edx
c001595d:	50                   	push   eax
c001595e:	e8 54 43 ff ff       	call   c0009cb7 <malloc>
c0015963:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015966:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001596a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001596d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015971:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015975:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015979:	0f af c2             	imul   eax,edx
c001597c:	99                   	cdq    
c001597d:	52                   	push   edx
c001597e:	50                   	push   eax
c001597f:	55                   	push   ebp
c0015980:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015983:	83 c4 20             	add    esp,0x20
c0015986:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001598a:	0f 86 8a 00 00 00    	jbe    c0015a1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015990:	0f b7 de             	movzx  ebx,si
c0015993:	c1 e3 05             	shl    ebx,0x5
c0015996:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001599a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001599d:	75 75                	jne    c0015a14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001599f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00159a2:	31 d2                	xor    edx,edx
c00159a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00159ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00159af:	50                   	push   eax
c00159b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00159b3:	52                   	push   edx
c00159b4:	50                   	push   eax
c00159b5:	55                   	push   ebp
c00159b6:	e8 0d 7d ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	85 c0                	test   eax,eax
c00159c0:	0f 85 71 05 00 00    	jne    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00159c6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00159cd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00159d0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00159d4:	31 d2                	xor    edx,edx
c00159d6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00159da:	83 ec 0c             	sub    esp,0xc
c00159dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00159e1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00159e8:	50                   	push   eax
c00159e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00159ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00159f1:	52                   	push   edx
c00159f2:	50                   	push   eax
c00159f3:	55                   	push   ebp
c00159f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159f7:	83 c4 1c             	add    esp,0x1c
c00159fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00159fd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015a00:	50                   	push   eax
c0015a01:	6a 00                	push   0x0
c0015a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a07:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015a0b:	50                   	push   eax
c0015a0c:	e8 6b ac fe ff       	call   c000067c <memset>
c0015a11:	83 c4 10             	add    esp,0x10
c0015a14:	46                   	inc    esi
c0015a15:	e9 6c ff ff ff       	jmp    c0015986 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015a1a:	53                   	push   ebx
c0015a1b:	31 db                	xor    ebx,ebx
c0015a1d:	68 00 01 00 00       	push   0x100
c0015a22:	6a 00                	push   0x0
c0015a24:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015a28:	50                   	push   eax
c0015a29:	e8 4e ac fe ff       	call   c000067c <memset>
c0015a2e:	83 c4 0c             	add    esp,0xc
c0015a31:	68 00 01 00 00       	push   0x100
c0015a36:	6a 00                	push   0x0
c0015a38:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015a3f:	50                   	push   eax
c0015a40:	e8 37 ac fe ff       	call   c000067c <memset>
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a50:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015a58:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0015a60:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015a68:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015a70:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0015a74:	0f 86 30 01 00 00    	jbe    c0015baa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015a7a:	0f b7 f3             	movzx  esi,bx
c0015a7d:	6b f6 28             	imul   esi,esi,0x28
c0015a80:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a84:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a8b:	52                   	push   edx
c0015a8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a90:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015a94:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a96:	6b d2 28             	imul   edx,edx,0x28
c0015a99:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015a9d:	31 d2                	xor    edx,edx
c0015a9f:	52                   	push   edx
c0015aa0:	50                   	push   eax
c0015aa1:	55                   	push   ebp
c0015aa2:	e8 21 7c ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015aa7:	83 c4 0c             	add    esp,0xc
c0015aaa:	6a 20                	push   0x20
c0015aac:	6a 00                	push   0x0
c0015aae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ab5:	51                   	push   ecx
c0015ab6:	e8 c1 ab fe ff       	call   c000067c <memset>
c0015abb:	59                   	pop    ecx
c0015abc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015abf:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015ac3:	52                   	push   edx
c0015ac4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015acb:	51                   	push   ecx
c0015acc:	6a 00                	push   0x0
c0015ace:	6a 1f                	push   0x1f
c0015ad0:	55                   	push   ebp
c0015ad1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ad4:	83 c4 1c             	add    esp,0x1c
c0015ad7:	6a 09                	push   0x9
c0015ad9:	68 7f 44 02 c0       	push   0xc002447f
c0015ade:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ae5:	51                   	push   ecx
c0015ae6:	e8 8d aa fe ff       	call   c0000578 <memcmp>
c0015aeb:	83 c4 10             	add    esp,0x10
c0015aee:	85 c0                	test   eax,eax
c0015af0:	75 21                	jne    c0015b13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015af6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015afa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015afe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b02:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b05:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015b0c:	89 d0                	mov    eax,edx
c0015b0e:	40                   	inc    eax
c0015b0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b13:	50                   	push   eax
c0015b14:	6a 09                	push   0x9
c0015b16:	68 89 44 02 c0       	push   0xc0024489
c0015b1b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b22:	50                   	push   eax
c0015b23:	e8 50 aa fe ff       	call   c0000578 <memcmp>
c0015b28:	83 c4 10             	add    esp,0x10
c0015b2b:	85 c0                	test   eax,eax
c0015b2d:	75 21                	jne    c0015b50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015b2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b37:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015b3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b3f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b42:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015b49:	89 d0                	mov    eax,edx
c0015b4b:	40                   	inc    eax
c0015b4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b50:	50                   	push   eax
c0015b51:	50                   	push   eax
c0015b52:	68 55 44 02 c0       	push   0xc0024455
c0015b57:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b5e:	50                   	push   eax
c0015b5f:	e8 60 ac fe ff       	call   c00007c4 <strcmp>
c0015b64:	83 c4 10             	add    esp,0x10
c0015b67:	85 c0                	test   eax,eax
c0015b69:	75 0f                	jne    c0015b7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015b6b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b7a:	50                   	push   eax
c0015b7b:	50                   	push   eax
c0015b7c:	68 5d 44 02 c0       	push   0xc002445d
c0015b81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015b88:	50                   	push   eax
c0015b89:	e8 36 ac fe ff       	call   c00007c4 <strcmp>
c0015b8e:	83 c4 10             	add    esp,0x10
c0015b91:	85 c0                	test   eax,eax
c0015b93:	75 0f                	jne    c0015ba4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015b95:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b98:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ba0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0015ba4:	43                   	inc    ebx
c0015ba5:	e9 c6 fe ff ff       	jmp    c0015a70 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015baa:	31 d2                	xor    edx,edx
c0015bac:	50                   	push   eax
c0015bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015bb1:	52                   	push   edx
c0015bb2:	50                   	push   eax
c0015bb3:	55                   	push   ebp
c0015bb4:	e8 0f 7b ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015bb9:	58                   	pop    eax
c0015bba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015bbe:	e8 f4 40 ff ff       	call   c0009cb7 <malloc>
c0015bc3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015bc6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015bca:	31 d2                	xor    edx,edx
c0015bcc:	58                   	pop    eax
c0015bcd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015bd1:	53                   	push   ebx
c0015bd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015bd6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015bda:	52                   	push   edx
c0015bdb:	50                   	push   eax
c0015bdc:	55                   	push   ebp
c0015bdd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015be0:	83 c4 14             	add    esp,0x14
c0015be3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be7:	e8 cb 40 ff ff       	call   c0009cb7 <malloc>
c0015bec:	31 d2                	xor    edx,edx
c0015bee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015bf2:	83 c4 0c             	add    esp,0xc
c0015bf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015bf9:	52                   	push   edx
c0015bfa:	50                   	push   eax
c0015bfb:	55                   	push   ebp
c0015bfc:	e8 c7 7a ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015c01:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015c04:	31 d2                	xor    edx,edx
c0015c06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015c0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c11:	52                   	push   edx
c0015c12:	50                   	push   eax
c0015c13:	55                   	push   ebp
c0015c14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c17:	83 c4 20             	add    esp,0x20
c0015c1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015c26:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015c2a:	0f 84 0b 03 00 00    	je     c0015f3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0015c30:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015c37:	31 d2                	xor    edx,edx
c0015c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c3d:	c1 e8 03             	shr    eax,0x3
c0015c40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015c44:	51                   	push   ecx
c0015c45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c49:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015c4d:	52                   	push   edx
c0015c4e:	50                   	push   eax
c0015c4f:	55                   	push   ebp
c0015c50:	e8 73 7a ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015c55:	5b                   	pop    ebx
c0015c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015c61:	e8 51 40 ff ff       	call   c0009cb7 <malloc>
c0015c66:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015c69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c6d:	31 d2                	xor    edx,edx
c0015c6f:	5e                   	pop    esi
c0015c70:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015c74:	50                   	push   eax
c0015c75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c7d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015c84:	52                   	push   edx
c0015c85:	50                   	push   eax
c0015c86:	55                   	push   ebp
c0015c87:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c8a:	83 c4 20             	add    esp,0x20
c0015c8d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015c95:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015c99:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0015c9d:	0f 8d 7c 02 00 00    	jge    c0015f1f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0015ca3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ca7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cab:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0015cb0:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0015cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015cbb:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0015cbf:	89 d8                	mov    eax,ebx
c0015cc1:	c1 e8 08             	shr    eax,0x8
c0015cc4:	89 c6                	mov    esi,eax
c0015cc6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cca:	c1 e6 04             	shl    esi,0x4
c0015ccd:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015cd1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0015cd4:	85 d2                	test   edx,edx
c0015cd6:	0f 85 bf 00 00 00    	jne    c0015d9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015cdc:	83 ec 0c             	sub    esp,0xc
c0015cdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ce3:	03 06                	add    eax,DWORD PTR [esi]
c0015ce5:	50                   	push   eax
c0015ce6:	e8 4b f8 ff ff       	call   c0015536 <Thr::getAddressOfKernelSymbol(char const*)>
c0015ceb:	83 c4 10             	add    esp,0x10
c0015cee:	89 c2                	mov    edx,eax
c0015cf0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0015cf5:	85 c0                	test   eax,eax
c0015cf7:	0f 85 9e 00 00 00    	jne    c0015d9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015cfd:	83 ec 0c             	sub    esp,0xc
c0015d00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015d04:	03 06                	add    eax,DWORD PTR [esi]
c0015d06:	50                   	push   eax
c0015d07:	e8 fc 2b ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	89 c2                	mov    edx,eax
c0015d11:	85 c0                	test   eax,eax
c0015d13:	0f 85 82 00 00 00    	jne    c0015d9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0015d19:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d1d:	50                   	push   eax
c0015d1e:	50                   	push   eax
c0015d1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d23:	03 06                	add    eax,DWORD PTR [esi]
c0015d25:	50                   	push   eax
c0015d26:	68 93 44 02 c0       	push   0xc0024493
c0015d2b:	e8 95 72 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015d30:	58                   	pop    eax
c0015d31:	5a                   	pop    edx
c0015d32:	68 ad 44 02 c0       	push   0xc00244ad
c0015d37:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d3e:	50                   	push   eax
c0015d3f:	e8 f4 a9 fe ff       	call   c0000738 <strcpy>
c0015d44:	59                   	pop    ecx
c0015d45:	58                   	pop    eax
c0015d46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d4a:	03 06                	add    eax,DWORD PTR [esi]
c0015d4c:	50                   	push   eax
c0015d4d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d54:	50                   	push   eax
c0015d55:	e8 1e ab fe ff       	call   c0000878 <strcat>
c0015d5a:	58                   	pop    eax
c0015d5b:	5a                   	pop    edx
c0015d5c:	68 43 45 02 c0       	push   0xc0024543
c0015d61:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d68:	50                   	push   eax
c0015d69:	e8 0a ab fe ff       	call   c0000878 <strcat>
c0015d6e:	83 c4 10             	add    esp,0x10
c0015d71:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015d76:	0f 84 5d 01 00 00    	je     c0015ed9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015d7c:	83 ec 0c             	sub    esp,0xc
c0015d7f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015d86:	50                   	push   eax
c0015d87:	e8 eb d5 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015d8c:	83 c4 10             	add    esp,0x10
c0015d8f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015d93:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d97:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015d9b:	80 fb 01             	cmp    bl,0x1
c0015d9e:	0f 85 88 00 00 00    	jne    c0015e2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0015da4:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015dab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015daf:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0015db3:	01 ce                	add    esi,ecx
c0015db5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0015dbb:	0f 94 c0             	sete   al
c0015dbe:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015dc4:	0f 94 c3             	sete   bl
c0015dc7:	09 c3                	or     ebx,eax
c0015dc9:	8b 06                	mov    eax,DWORD PTR [esi]
c0015dcb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015dd0:	74 41                	je     c0015e13 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0015dd2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015dd5:	84 db                	test   bl,bl
c0015dd7:	75 15                	jne    c0015dee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0015dd9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ddd:	66 83 f8 0c          	cmp    ax,0xc
c0015de1:	76 05                	jbe    c0015de8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0015de3:	b8 0c 00 00 00       	mov    eax,0xc
c0015de8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015dec:	76 37                	jbe    c0015e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015dee:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0015df2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015df7:	0f 84 dc 00 00 00    	je     c0015ed9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015dfd:	83 ec 0c             	sub    esp,0xc
c0015e00:	68 c4 44 02 c0       	push   0xc00244c4
c0015e05:	e8 6d d5 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015e0a:	83 c4 10             	add    esp,0x10
c0015e0d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e11:	eb 12                	jmp    c0015e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015e13:	01 c1                	add    ecx,eax
c0015e15:	84 db                	test   bl,bl
c0015e17:	75 0c                	jne    c0015e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015e19:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e1d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0015e21:	77 02                	ja     c0015e25 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0015e23:	01 d1                	add    ecx,edx
c0015e25:	89 0e                	mov    DWORD PTR [esi],ecx
c0015e27:	e9 ea 00 00 00       	jmp    c0015f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015e2c:	80 fb 02             	cmp    bl,0x2
c0015e2f:	75 7c                	jne    c0015ead <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015e31:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015e38:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0015e3c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0015e40:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0015e46:	74 20                	je     c0015e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015e48:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0015e4e:	74 18                	je     c0015e68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0015e50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e54:	b9 0a 00 00 00       	mov    ecx,0xa
c0015e59:	66 83 f8 0e          	cmp    ax,0xe
c0015e5d:	77 03                	ja     c0015e62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0015e5f:	8d 48 fc             	lea    ecx,[eax-0x4]
c0015e62:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0015e66:	76 1f                	jbe    c0015e87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0015e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0015e6c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015e71:	74 66                	je     c0015ed9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	68 e0 44 02 c0       	push   0xc00244e0
c0015e7b:	e8 f7 d4 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015e80:	83 c4 10             	add    esp,0x10
c0015e83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015e87:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e89:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0015e8e:	74 13                	je     c0015ea3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0015e90:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0015e94:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0015e9b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0015e9f:	01 c8                	add    eax,ecx
c0015ea1:	eb 04                	jmp    c0015ea7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0015ea3:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0015ea7:	01 c2                	add    edx,eax
c0015ea9:	89 16                	mov    DWORD PTR [esi],edx
c0015eab:	eb 69                	jmp    c0015f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015ead:	0f b6 db             	movzx  ebx,bl
c0015eb0:	50                   	push   eax
c0015eb1:	50                   	push   eax
c0015eb2:	53                   	push   ebx
c0015eb3:	68 fc 44 02 c0       	push   0xc00244fc
c0015eb8:	e8 08 71 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015ebd:	83 c4 10             	add    esp,0x10
c0015ec0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0015ec5:	74 12                	je     c0015ed9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0015ec7:	83 ec 0c             	sub    esp,0xc
c0015eca:	68 07 45 02 c0       	push   0xc0024507
c0015ecf:	e8 a3 d4 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0015ed4:	83 c4 10             	add    esp,0x10
c0015ed7:	eb 3d                	jmp    c0015f16 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0015ed9:	83 ec 0c             	sub    esp,0xc
c0015edc:	55                   	push   ebp
c0015edd:	e8 86 77 ff ff       	call   c000d668 <File::close()>
c0015ee2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ee5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015ee8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015eeb:	59                   	pop    ecx
c0015eec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ef0:	e8 d2 3d ff ff       	call   c0009cc7 <free>
c0015ef5:	5b                   	pop    ebx
c0015ef6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015efa:	e8 c8 3d ff ff       	call   c0009cc7 <free>
c0015eff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f02:	e8 c0 3d ff ff       	call   c0009cc7 <free>
c0015f07:	5e                   	pop    esi
c0015f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f0c:	e8 b6 3d ff ff       	call   c0009cc7 <free>
c0015f11:	83 c4 10             	add    esp,0x10
c0015f14:	eb 21                	jmp    c0015f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0015f16:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015f1a:	e9 76 fd ff ff       	jmp    c0015c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0015f1f:	83 ec 0c             	sub    esp,0xc
c0015f22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f26:	e8 9c 3d ff ff       	call   c0009cc7 <free>
c0015f2b:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	e9 eb fc ff ff       	jmp    c0015c22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0015f37:	31 c0                	xor    eax,eax
c0015f39:	eb 33                	jmp    c0015f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0015f3b:	83 ec 0c             	sub    esp,0xc
c0015f3e:	55                   	push   ebp
c0015f3f:	e8 24 77 ff ff       	call   c000d668 <File::close()>
c0015f44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015f47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015f4a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f4d:	58                   	pop    eax
c0015f4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015f52:	e8 70 3d ff ff       	call   c0009cc7 <free>
c0015f57:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f5a:	e8 68 3d ff ff       	call   c0009cc7 <free>
c0015f5f:	5a                   	pop    edx
c0015f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f64:	e8 5e 3d ff ff       	call   c0009cc7 <free>
c0015f69:	83 c4 10             	add    esp,0x10
c0015f6c:	b0 01                	mov    al,0x1
c0015f6e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015f74:	5b                   	pop    ebx
c0015f75:	5e                   	pop    esi
c0015f76:	5f                   	pop    edi
c0015f77:	5d                   	pop    ebp
c0015f78:	c3                   	ret    

c0015f79 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015f79:	56                   	push   esi
c0015f7a:	31 d2                	xor    edx,edx
c0015f7c:	53                   	push   ebx
c0015f7d:	8b 1d 00 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029000
c0015f83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f87:	39 d3                	cmp    ebx,edx
c0015f89:	7e 1b                	jle    c0015fa6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015f8b:	8b 04 95 20 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6de0]
c0015f92:	39 c8                	cmp    eax,ecx
c0015f94:	77 0d                	ja     c0015fa3 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015f96:	8b 34 95 20 90 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6fe0]
c0015f9d:	01 c6                	add    esi,eax
c0015f9f:	39 ce                	cmp    esi,ecx
c0015fa1:	77 05                	ja     c0015fa8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015fa3:	42                   	inc    edx
c0015fa4:	eb e1                	jmp    c0015f87 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015fa6:	31 c0                	xor    eax,eax
c0015fa8:	5b                   	pop    ebx
c0015fa9:	5e                   	pop    esi
c0015faa:	c3                   	ret    

c0015fab <Thr::getDriverNameFromAddress(unsigned long)>:
c0015fab:	53                   	push   ebx
c0015fac:	31 c0                	xor    eax,eax
c0015fae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015fb2:	8b 1d 00 90 02 c0    	mov    ebx,DWORD PTR ds:0xc0029000
c0015fb8:	39 c3                	cmp    ebx,eax
c0015fba:	7e 22                	jle    c0015fde <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015fbc:	8b 14 85 20 92 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6de0]
c0015fc3:	39 ca                	cmp    edx,ecx
c0015fc5:	77 14                	ja     c0015fdb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015fc7:	03 14 85 20 90 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6fe0]
c0015fce:	39 ca                	cmp    edx,ecx
c0015fd0:	76 09                	jbe    c0015fdb <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015fd2:	8b 04 85 20 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6be0]
c0015fd9:	eb 05                	jmp    c0015fe0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015fdb:	40                   	inc    eax
c0015fdc:	eb da                	jmp    c0015fb8 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015fde:	31 c0                	xor    eax,eax
c0015fe0:	5b                   	pop    ebx
c0015fe1:	c3                   	ret    

c0015fe2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015fe2:	53                   	push   ebx
c0015fe3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015fe7:	53                   	push   ebx
c0015fe8:	e8 8c ff ff ff       	call   c0015f79 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015fed:	5a                   	pop    edx
c0015fee:	31 d2                	xor    edx,edx
c0015ff0:	85 c0                	test   eax,eax
c0015ff2:	74 04                	je     c0015ff8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015ff4:	89 da                	mov    edx,ebx
c0015ff6:	29 c2                	sub    edx,eax
c0015ff8:	89 d0                	mov    eax,edx
c0015ffa:	5b                   	pop    ebx
c0015ffb:	c3                   	ret    

c0015ffc <Thr::loadDLL(char const*, bool)>:
c0015ffc:	55                   	push   ebp
c0015ffd:	57                   	push   edi
c0015ffe:	56                   	push   esi
c0015fff:	53                   	push   ebx
c0016000:	81 ec 34 01 00 00    	sub    esp,0x134
c0016006:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001600d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016014:	56                   	push   esi
c0016015:	68 1f 45 02 c0       	push   0xc002451f
c001601a:	e8 a6 6f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001601f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016026:	e8 8c 3c ff ff       	call   c0009cb7 <malloc>
c001602b:	83 c4 0c             	add    esp,0xc
c001602e:	89 c3                	mov    ebx,eax
c0016030:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c0016036:	56                   	push   esi
c0016037:	50                   	push   eax
c0016038:	e8 f3 74 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001603d:	83 c4 10             	add    esp,0x10
c0016040:	85 db                	test   ebx,ebx
c0016042:	75 3c                	jne    c0016080 <Thr::loadDLL(char const*, bool)+0x84>
c0016044:	89 f8                	mov    eax,edi
c0016046:	84 c0                	test   al,al
c0016048:	0f 84 d2 01 00 00    	je     c0016220 <Thr::loadDLL(char const*, bool)+0x224>
c001604e:	55                   	push   ebp
c001604f:	55                   	push   ebp
c0016050:	68 30 45 02 c0       	push   0xc0024530
c0016055:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016059:	55                   	push   ebp
c001605a:	e8 d9 a6 fe ff       	call   c0000738 <strcpy>
c001605f:	58                   	pop    eax
c0016060:	5a                   	pop    edx
c0016061:	56                   	push   esi
c0016062:	55                   	push   ebp
c0016063:	e8 10 a8 fe ff       	call   c0000878 <strcat>
c0016068:	59                   	pop    ecx
c0016069:	58                   	pop    eax
c001606a:	68 43 45 02 c0       	push   0xc0024543
c001606f:	55                   	push   ebp
c0016070:	e8 03 a8 fe ff       	call   c0000878 <strcat>
c0016075:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016078:	e8 fa d2 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001607d:	83 c4 10             	add    esp,0x10
c0016080:	51                   	push   ecx
c0016081:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016085:	50                   	push   eax
c0016086:	8d 44 24 20          	lea    eax,[esp+0x20]
c001608a:	50                   	push   eax
c001608b:	53                   	push   ebx
c001608c:	e8 25 78 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0016091:	83 c4 10             	add    esp,0x10
c0016094:	85 db                	test   ebx,ebx
c0016096:	74 0c                	je     c00160a4 <Thr::loadDLL(char const*, bool)+0xa8>
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001609d:	53                   	push   ebx
c001609e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00160a9:	75 0a                	jne    c00160b5 <Thr::loadDLL(char const*, bool)+0xb9>
c00160ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160af:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00160b3:	75 3c                	jne    c00160f1 <Thr::loadDLL(char const*, bool)+0xf5>
c00160b5:	89 f8                	mov    eax,edi
c00160b7:	84 c0                	test   al,al
c00160b9:	0f 84 49 01 00 00    	je     c0016208 <Thr::loadDLL(char const*, bool)+0x20c>
c00160bf:	51                   	push   ecx
c00160c0:	51                   	push   ecx
c00160c1:	68 30 45 02 c0       	push   0xc0024530
c00160c6:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00160ca:	53                   	push   ebx
c00160cb:	e8 68 a6 fe ff       	call   c0000738 <strcpy>
c00160d0:	5d                   	pop    ebp
c00160d1:	58                   	pop    eax
c00160d2:	56                   	push   esi
c00160d3:	53                   	push   ebx
c00160d4:	e8 9f a7 fe ff       	call   c0000878 <strcat>
c00160d9:	58                   	pop    eax
c00160da:	5a                   	pop    edx
c00160db:	68 43 45 02 c0       	push   0xc0024543
c00160e0:	53                   	push   ebx
c00160e1:	e8 92 a7 fe ff       	call   c0000878 <strcat>
c00160e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160e9:	e8 89 d2 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	52                   	push   edx
c00160f2:	6a 03                	push   0x3
c00160f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00160fc:	05 ff 0f 00 00       	add    eax,0xfff
c0016101:	83 d2 00             	adc    edx,0x0
c0016104:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016108:	50                   	push   eax
c0016109:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c001610f:	e8 c4 62 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0016114:	59                   	pop    ecx
c0016115:	89 c3                	mov    ebx,eax
c0016117:	5d                   	pop    ebp
c0016118:	50                   	push   eax
c0016119:	68 06 2c 02 c0       	push   0xc0022c06
c001611e:	e8 a2 6e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016123:	89 34 24             	mov    DWORD PTR [esp],esi
c0016126:	e8 6d a5 fe ff       	call   c0000698 <strlen>
c001612b:	8b 2d 00 90 02 c0    	mov    ebp,DWORD PTR ds:0xc0029000
c0016131:	40                   	inc    eax
c0016132:	89 04 24             	mov    DWORD PTR [esp],eax
c0016135:	e8 7d 3b ff ff       	call   c0009cb7 <malloc>
c001613a:	89 04 ad 20 94 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6be0],eax
c0016141:	58                   	pop    eax
c0016142:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c0016147:	5a                   	pop    edx
c0016148:	56                   	push   esi
c0016149:	ff 34 85 20 94 02 c0 	push   DWORD PTR [eax*4-0x3ffd6be0]
c0016150:	e8 e3 a5 fe ff       	call   c0000738 <strcpy>
c0016155:	a1 00 90 02 c0       	mov    eax,ds:0xc0029000
c001615a:	8d 50 01             	lea    edx,[eax+0x1]
c001615d:	89 1c 85 20 92 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6de0],ebx
c0016164:	89 15 00 90 02 c0    	mov    DWORD PTR ds:0xc0029000,edx
c001616a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001616e:	83 c4 0c             	add    esp,0xc
c0016171:	89 14 85 20 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fe0],edx
c0016178:	6a 01                	push   0x1
c001617a:	53                   	push   ebx
c001617b:	56                   	push   esi
c001617c:	e8 c2 f6 ff ff       	call   c0015843 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016181:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016185:	83 c4 10             	add    esp,0x10
c0016188:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001618d:	0f 85 89 00 00 00    	jne    c001621c <Thr::loadDLL(char const*, bool)+0x220>
c0016193:	89 f8                	mov    eax,edi
c0016195:	84 c0                	test   al,al
c0016197:	74 73                	je     c001620c <Thr::loadDLL(char const*, bool)+0x210>
c0016199:	83 ec 0c             	sub    esp,0xc
c001619c:	68 45 45 02 c0       	push   0xc0024545
c00161a1:	e8 d1 d1 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	eb 61                	jmp    c001620c <Thr::loadDLL(char const*, bool)+0x210>
c00161ab:	50                   	push   eax
c00161ac:	50                   	push   eax
c00161ad:	89 e8                	mov    eax,ebp
c00161af:	c1 e0 0c             	shl    eax,0xc
c00161b2:	01 d8                	add    eax,ebx
c00161b4:	50                   	push   eax
c00161b5:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c00161bb:	e8 7e 5d ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c00161c0:	83 c4 10             	add    esp,0x10
c00161c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00161c5:	a8 60                	test   al,0x60
c00161c7:	75 11                	jne    c00161da <Thr::loadDLL(char const*, bool)+0x1de>
c00161c9:	83 ec 0c             	sub    esp,0xc
c00161cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00161d1:	50                   	push   eax
c00161d2:	e8 14 41 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c00161d7:	83 c4 10             	add    esp,0x10
c00161da:	45                   	inc    ebp
c00161db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161e3:	05 ff 0f 00 00       	add    eax,0xfff
c00161e8:	bf 00 00 00 00       	mov    edi,0x0
c00161ed:	83 d2 00             	adc    edx,0x0
c00161f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00161f4:	c1 ea 0c             	shr    edx,0xc
c00161f7:	39 c5                	cmp    ebp,eax
c00161f9:	89 d1                	mov    ecx,edx
c00161fb:	89 f8                	mov    eax,edi
c00161fd:	19 c8                	sbb    eax,ecx
c00161ff:	72 aa                	jb     c00161ab <Thr::loadDLL(char const*, bool)+0x1af>
c0016201:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016206:	75 18                	jne    c0016220 <Thr::loadDLL(char const*, bool)+0x224>
c0016208:	31 db                	xor    ebx,ebx
c001620a:	eb 14                	jmp    c0016220 <Thr::loadDLL(char const*, bool)+0x224>
c001620c:	83 ec 0c             	sub    esp,0xc
c001620f:	68 64 45 02 c0       	push   0xc0024564
c0016214:	e8 5e d1 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0016219:	83 c4 10             	add    esp,0x10
c001621c:	31 ed                	xor    ebp,ebp
c001621e:	eb bb                	jmp    c00161db <Thr::loadDLL(char const*, bool)+0x1df>
c0016220:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016226:	89 d8                	mov    eax,ebx
c0016228:	5b                   	pop    ebx
c0016229:	5e                   	pop    esi
c001622a:	5f                   	pop    edi
c001622b:	5d                   	pop    ebp
c001622c:	c3                   	ret    

c001622d <Thr::executeDLL(unsigned long, void*)>:
c001622d:	56                   	push   esi
c001622e:	53                   	push   ebx
c001622f:	52                   	push   edx
c0016230:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016234:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016238:	85 db                	test   ebx,ebx
c001623a:	75 10                	jne    c001624c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001623c:	83 ec 0c             	sub    esp,0xc
c001623f:	68 80 45 02 c0       	push   0xc0024580
c0016244:	e8 2e d1 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0016249:	83 c4 10             	add    esp,0x10
c001624c:	50                   	push   eax
c001624d:	50                   	push   eax
c001624e:	53                   	push   ebx
c001624f:	68 aa 45 02 c0       	push   0xc00245aa
c0016254:	e8 6c 6d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016259:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001625d:	89 d8                	mov    eax,ebx
c001625f:	83 c4 14             	add    esp,0x14
c0016262:	5b                   	pop    ebx
c0016263:	5e                   	pop    esi
c0016264:	ff e0                	jmp    eax
c0016266:	66 90                	xchg   ax,ax

c0016268 <userModeEntryPoint(void*)>:
c0016268:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001626d:	48                   	dec    eax
c001626e:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016273:	75 03                	jne    c0016278 <userModeEntryPoint(void*)+0x10>
c0016275:	fb                   	sti    
c0016276:	66 90                	xchg   ax,ax
c0016278:	fb                   	sti    
c0016279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016281:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0016287:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001628b:	e9 cf 9f fe ff       	jmp    c000025f <goToUsermode>

c0016290 <changeTSS>:
c0016290:	83 ec 14             	sub    esp,0x14
c0016293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016298:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001629b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00162a0:	c1 e2 15             	shl    edx,0x15
c00162a3:	29 d0                	sub    eax,edx
c00162a5:	50                   	push   eax
c00162a6:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00162ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00162b1:	05 7c 11 00 00       	add    eax,0x117c
c00162b6:	50                   	push   eax
c00162b7:	e8 00 53 ff ff       	call   c000b5bc <TSS::setESP(unsigned long)>
c00162bc:	83 c4 1c             	add    esp,0x1c
c00162bf:	c3                   	ret    

c00162c0 <switchToThread(ThreadControlBlock*)>:
c00162c0:	57                   	push   edi
c00162c1:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00162c6:	56                   	push   esi
c00162c7:	85 c0                	test   eax,eax
c00162c9:	53                   	push   ebx
c00162ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162ce:	0f 85 88 00 00 00    	jne    c001635c <switchToThread(ThreadControlBlock*)+0x9c>
c00162d4:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c00162d7:	3c ff                	cmp    al,0xff
c00162d9:	74 7d                	je     c0016358 <switchToThread(ThreadControlBlock*)+0x98>
c00162db:	0f b6 d0             	movzx  edx,al
c00162de:	b8 00 04 00 00       	mov    eax,0x400
c00162e3:	29 d0                	sub    eax,edx
c00162e5:	d1 f8                	sar    eax,1
c00162e7:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00162ea:	66 90                	xchg   ax,ax
c00162ec:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00162ef:	ff 15 b8 98 02 c0    	call   DWORD PTR ds:0xc00298b8
c00162f5:	a3 08 98 02 c0       	mov    ds:0xc0029808,eax
c00162fa:	89 15 0c 98 02 c0    	mov    DWORD PTR ds:0xc002980c,edx
c0016300:	89 c6                	mov    esi,eax
c0016302:	89 d7                	mov    edi,edx
c0016304:	2b 35 f8 97 02 c0    	sub    esi,DWORD PTR ds:0xc00297f8
c001630a:	a3 f8 97 02 c0       	mov    ds:0xc00297f8,eax
c001630f:	1b 3d fc 97 02 c0    	sbb    edi,DWORD PTR ds:0xc00297fc
c0016315:	89 35 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,esi
c001631b:	89 3d 04 98 02 c0    	mov    DWORD PTR ds:0xc0029804,edi
c0016321:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016327:	89 15 fc 97 02 c0    	mov    DWORD PTR ds:0xc00297fc,edx
c001632d:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016330:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016333:	01 c6                	add    esi,eax
c0016335:	11 d7                	adc    edi,edx
c0016337:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001633a:	83 ec 0c             	sub    esp,0xc
c001633d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016340:	53                   	push   ebx
c0016341:	e8 51 9f fe ff       	call   c0000297 <switchToThreadASM>
c0016346:	0f 20 c0             	mov    eax,cr0
c0016349:	83 c8 08             	or     eax,0x8
c001634c:	0f 22 c0             	mov    cr0,eax
c001634f:	83 c4 10             	add    esp,0x10
c0016352:	5b                   	pop    ebx
c0016353:	5e                   	pop    esi
c0016354:	5f                   	pop    edi
c0016355:	c3                   	ret    
c0016356:	66 90                	xchg   ax,ax
c0016358:	31 c0                	xor    eax,eax
c001635a:	eb 90                	jmp    c00162ec <switchToThread(ThreadControlBlock*)+0x2c>
c001635c:	5b                   	pop    ebx
c001635d:	c7 05 c0 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x1
c0016367:	5e                   	pop    esi
c0016368:	5f                   	pop    edi
c0016369:	c3                   	ret    
c001636a:	66 90                	xchg   ax,ax

c001636c <Process::addArgs(char**)>:
c001636c:	57                   	push   edi
c001636d:	56                   	push   esi
c001636e:	53                   	push   ebx
c001636f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016373:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016377:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0016381:	85 ff                	test   edi,edi
c0016383:	74 43                	je     c00163c8 <Process::addArgs(char**)+0x5c>
c0016385:	8b 07                	mov    eax,DWORD PTR [edi]
c0016387:	85 c0                	test   eax,eax
c0016389:	74 3d                	je     c00163c8 <Process::addArgs(char**)+0x5c>
c001638b:	31 db                	xor    ebx,ebx
c001638d:	8d 76 00             	lea    esi,[esi+0x0]
c0016390:	83 ec 0c             	sub    esp,0xc
c0016393:	50                   	push   eax
c0016394:	e8 ff a2 fe ff       	call   c0000698 <strlen>
c0016399:	40                   	inc    eax
c001639a:	89 04 24             	mov    DWORD PTR [esp],eax
c001639d:	e8 15 39 ff ff       	call   c0009cb7 <malloc>
c00163a2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00163a9:	5a                   	pop    edx
c00163aa:	59                   	pop    ecx
c00163ab:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00163ae:	43                   	inc    ebx
c00163af:	50                   	push   eax
c00163b0:	e8 83 a3 fe ff       	call   c0000738 <strcpy>
c00163b5:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c00163bb:	83 c4 10             	add    esp,0x10
c00163be:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00163c1:	85 c0                	test   eax,eax
c00163c3:	75 cb                	jne    c0016390 <Process::addArgs(char**)+0x24>
c00163c5:	8d 76 00             	lea    esi,[esi+0x0]
c00163c8:	5b                   	pop    ebx
c00163c9:	5e                   	pop    esi
c00163ca:	5f                   	pop    edi
c00163cb:	c3                   	ret    

c00163cc <Process::Process(char const*, Process*, char**)>:
c00163cc:	56                   	push   esi
c00163cd:	53                   	push   ebx
c00163ce:	83 ec 14             	sub    esp,0x14
c00163d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d5:	05 0c 02 00 00       	add    eax,0x20c
c00163da:	bb 07 00 00 00       	mov    ebx,0x7
c00163df:	89 c6                	mov    esi,eax
c00163e1:	8d 76 00             	lea    esi,[esi+0x0]
c00163e4:	85 db                	test   ebx,ebx
c00163e6:	78 14                	js     c00163fc <Process::Process(char const*, Process*, char**)+0x30>
c00163e8:	83 ec 0c             	sub    esp,0xc
c00163eb:	56                   	push   esi
c00163ec:	e8 5b b8 00 00       	call   c0021c4c <ThreadControlBlock::ThreadControlBlock()>
c00163f1:	83 c4 10             	add    esp,0x10
c00163f4:	83 c6 5f             	add    esi,0x5f
c00163f7:	4b                   	dec    ebx
c00163f8:	eb ea                	jmp    c00163e4 <Process::Process(char const*, Process*, char**)+0x18>
c00163fa:	66 90                	xchg   ax,ax
c00163fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016400:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001640e:	e8 ed cd ff ff       	call   c0013200 <Krnl::newProcessEnv(Process*)>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	89 c2                	mov    edx,eax
c0016418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001641c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016426:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001642f:	a1 30 5a 02 c0       	mov    eax,ds:0xc0025a30
c0016434:	8d 50 01             	lea    edx,[eax+0x1]
c0016437:	89 15 30 5a 02 c0    	mov    DWORD PTR ds:0xc0025a30,edx
c001643d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016441:	89 02                	mov    DWORD PTR [edx],eax
c0016443:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001644b:	83 ec 0c             	sub    esp,0xc
c001644e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016452:	e8 60 38 ff ff       	call   c0009cb7 <malloc>
c0016457:	83 c4 10             	add    esp,0x10
c001645a:	89 c3                	mov    ebx,eax
c001645c:	83 ec 08             	sub    esp,0x8
c001645f:	6a 00                	push   0x0
c0016461:	53                   	push   ebx
c0016462:	e8 19 63 ff ff       	call   c000c780 <VAS::VAS(bool)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001646e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0016474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016478:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016486:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001648a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016494:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001649a:	85 c0                	test   eax,eax
c001649c:	74 42                	je     c00164e0 <Process::Process(char const*, Process*, char**)+0x114>
c001649e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164a2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00164a8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00164ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164b2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00164b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164bc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00164c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00164c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00164cc:	05 0c 01 00 00       	add    eax,0x10c
c00164d1:	83 ec 08             	sub    esp,0x8
c00164d4:	52                   	push   edx
c00164d5:	50                   	push   eax
c00164d6:	e8 5d a2 fe ff       	call   c0000738 <strcpy>
c00164db:	83 c4 10             	add    esp,0x10
c00164de:	eb 64                	jmp    c0016544 <Process::Process(char const*, Process*, char**)+0x178>
c00164e0:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00164ef:	e8 c3 37 ff ff       	call   c0009cb7 <malloc>
c00164f4:	83 c4 10             	add    esp,0x10
c00164f7:	89 c3                	mov    ebx,eax
c00164f9:	83 ec 08             	sub    esp,0x8
c00164fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016500:	53                   	push   ebx
c0016501:	e8 c8 4d ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001650d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0016513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016517:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001651d:	83 ec 0c             	sub    esp,0xc
c0016520:	50                   	push   eax
c0016521:	e8 71 45 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c0016526:	83 c4 10             	add    esp,0x10
c0016529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001652d:	05 0c 01 00 00       	add    eax,0x10c
c0016532:	83 ec 08             	sub    esp,0x8
c0016535:	68 c9 45 02 c0       	push   0xc00245c9
c001653a:	50                   	push   eax
c001653b:	e8 f8 a1 fe ff       	call   c0000738 <strcpy>
c0016540:	83 c4 10             	add    esp,0x10
c0016543:	90                   	nop
c0016544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016548:	83 c0 0c             	add    eax,0xc
c001654b:	83 ec 08             	sub    esp,0x8
c001654e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016552:	50                   	push   eax
c0016553:	e8 e0 a1 fe ff       	call   c0000738 <strcpy>
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	83 ec 08             	sub    esp,0x8
c001655e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016562:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016566:	e8 01 fe ff ff       	call   c001636c <Process::addArgs(char**)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	83 ec 08             	sub    esp,0x8
c0016571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016579:	e8 8f ed ff ff       	call   c001530d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016585:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016589:	83 f0 01             	xor    eax,0x1
c001658c:	88 c2                	mov    dl,al
c001658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016592:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0016598:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001659d:	83 ec 08             	sub    esp,0x8
c00165a0:	50                   	push   eax
c00165a1:	68 20 46 02 c0       	push   0xc0024620
c00165a6:	e8 1a 6a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00165ab:	83 c4 10             	add    esp,0x10
c00165ae:	90                   	nop
c00165af:	83 c4 14             	add    esp,0x14
c00165b2:	5b                   	pop    ebx
c00165b3:	5e                   	pop    esi
c00165b4:	c3                   	ret    
c00165b5:	90                   	nop
c00165b6:	66 90                	xchg   ax,ax

c00165b8 <Process::Process(bool, char const*, Process*, char**)>:
c00165b8:	56                   	push   esi
c00165b9:	53                   	push   ebx
c00165ba:	83 ec 24             	sub    esp,0x24
c00165bd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c9:	05 0c 02 00 00       	add    eax,0x20c
c00165ce:	bb 07 00 00 00       	mov    ebx,0x7
c00165d3:	89 c6                	mov    esi,eax
c00165d5:	8d 76 00             	lea    esi,[esi+0x0]
c00165d8:	85 db                	test   ebx,ebx
c00165da:	78 14                	js     c00165f0 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	56                   	push   esi
c00165e0:	e8 67 b6 00 00       	call   c0021c4c <ThreadControlBlock::ThreadControlBlock()>
c00165e5:	83 c4 10             	add    esp,0x10
c00165e8:	83 c6 5f             	add    esi,0x5f
c00165eb:	4b                   	dec    ebx
c00165ec:	eb ea                	jmp    c00165d8 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00165ee:	66 90                	xchg   ax,ax
c00165f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165f4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00165fb:	83 ec 0c             	sub    esp,0xc
c00165fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016602:	e8 f9 cb ff ff       	call   c0013200 <Krnl::newProcessEnv(Process*)>
c0016607:	83 c4 10             	add    esp,0x10
c001660a:	89 c2                	mov    edx,eax
c001660c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016610:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001661a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0016623:	a1 30 5a 02 c0       	mov    eax,ds:0xc0025a30
c0016628:	8d 50 01             	lea    edx,[eax+0x1]
c001662b:	89 15 30 5a 02 c0    	mov    DWORD PTR ds:0xc0025a30,edx
c0016631:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016635:	89 02                	mov    DWORD PTR [edx],eax
c0016637:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001663f:	83 ec 0c             	sub    esp,0xc
c0016642:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016646:	e8 6c 36 ff ff       	call   c0009cb7 <malloc>
c001664b:	83 c4 10             	add    esp,0x10
c001664e:	89 c3                	mov    ebx,eax
c0016650:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016655:	83 ec 08             	sub    esp,0x8
c0016658:	50                   	push   eax
c0016659:	53                   	push   ebx
c001665a:	e8 21 61 ff ff       	call   c000c780 <VAS::VAS(bool)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016666:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001666c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016670:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001667a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001667e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016682:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016688:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001668c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016692:	85 c0                	test   eax,eax
c0016694:	74 42                	je     c00166d8 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0016696:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001669a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166a0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00166a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166aa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00166b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00166ba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00166c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166c4:	05 0c 01 00 00       	add    eax,0x10c
c00166c9:	83 ec 08             	sub    esp,0x8
c00166cc:	52                   	push   edx
c00166cd:	50                   	push   eax
c00166ce:	e8 65 a0 fe ff       	call   c0000738 <strcpy>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	eb 64                	jmp    c001673c <Process::Process(bool, char const*, Process*, char**)+0x184>
c00166d8:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00166e0:	83 ec 0c             	sub    esp,0xc
c00166e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00166e7:	e8 cb 35 ff ff       	call   c0009cb7 <malloc>
c00166ec:	83 c4 10             	add    esp,0x10
c00166ef:	89 c3                	mov    ebx,eax
c00166f1:	83 ec 08             	sub    esp,0x8
c00166f4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00166f8:	53                   	push   ebx
c00166f9:	e8 d0 4b ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c00166fe:	83 c4 10             	add    esp,0x10
c0016701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016705:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001670b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001670f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016715:	83 ec 0c             	sub    esp,0xc
c0016718:	50                   	push   eax
c0016719:	e8 79 43 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c001671e:	83 c4 10             	add    esp,0x10
c0016721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016725:	05 0c 01 00 00       	add    eax,0x10c
c001672a:	83 ec 08             	sub    esp,0x8
c001672d:	68 c9 45 02 c0       	push   0xc00245c9
c0016732:	50                   	push   eax
c0016733:	e8 00 a0 fe ff       	call   c0000738 <strcpy>
c0016738:	83 c4 10             	add    esp,0x10
c001673b:	90                   	nop
c001673c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016740:	83 c0 0c             	add    eax,0xc
c0016743:	83 ec 08             	sub    esp,0x8
c0016746:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001674a:	50                   	push   eax
c001674b:	e8 e8 9f fe ff       	call   c0000738 <strcpy>
c0016750:	83 c4 10             	add    esp,0x10
c0016753:	83 ec 08             	sub    esp,0x8
c0016756:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001675a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001675e:	e8 09 fc ff ff       	call   c001636c <Process::addArgs(char**)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	90                   	nop
c0016767:	83 c4 24             	add    esp,0x24
c001676a:	5b                   	pop    ebx
c001676b:	5e                   	pop    esi
c001676c:	c3                   	ret    
c001676d:	8d 76 00             	lea    esi,[esi+0x0]

c0016770 <taskStartupFunction>:
c0016770:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016775:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0016778:	c3                   	ret    
c0016779:	90                   	nop
c001677a:	66 90                	xchg   ax,ax

c001677c <Semaphore::Semaphore(int)>:
c001677c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016780:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016784:	89 10                	mov    DWORD PTR [eax],edx
c0016786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001678a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0016791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016795:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001679c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00167a7:	90                   	nop
c00167a8:	c3                   	ret    
c00167a9:	90                   	nop
c00167aa:	66 90                	xchg   ax,ax

c00167ac <Mutex::Mutex()>:
c00167ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167b0:	6a 01                	push   0x1
c00167b2:	50                   	push   eax
c00167b3:	e8 c4 ff ff ff       	call   c001677c <Semaphore::Semaphore(int)>
c00167b8:	83 c4 08             	add    esp,0x8
c00167bb:	90                   	nop
c00167bc:	c3                   	ret    
c00167bd:	90                   	nop
c00167be:	66 90                	xchg   ax,ax

c00167c0 <Process::createThread(void (*)(void*), void*, int)>:
c00167c0:	57                   	push   edi
c00167c1:	31 c9                	xor    ecx,ecx
c00167c3:	56                   	push   esi
c00167c4:	53                   	push   ebx
c00167c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167c9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00167d0:	89 f2                	mov    edx,esi
c00167d2:	66 90                	xchg   ax,ax
c00167d4:	0f b7 c2             	movzx  eax,dx
c00167d7:	83 e2 01             	and    edx,0x1
c00167da:	74 14                	je     c00167f0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00167dc:	d1 f8                	sar    eax,1
c00167de:	41                   	inc    ecx
c00167df:	89 c2                	mov    edx,eax
c00167e1:	83 f9 10             	cmp    ecx,0x10
c00167e4:	75 ee                	jne    c00167d4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00167e6:	31 db                	xor    ebx,ebx
c00167e8:	89 d8                	mov    eax,ebx
c00167ea:	5b                   	pop    ebx
c00167eb:	5e                   	pop    esi
c00167ec:	5f                   	pop    edi
c00167ed:	c3                   	ret    
c00167ee:	66 90                	xchg   ax,ax
c00167f0:	b8 01 00 00 00       	mov    eax,0x1
c00167f5:	d3 e0                	shl    eax,cl
c00167f7:	09 c6                	or     esi,eax
c00167f9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00167fc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0016803:	01 c0                	add    eax,eax
c0016805:	01 c8                	add    eax,ecx
c0016807:	8d 04 80             	lea    eax,[eax+eax*4]
c001680a:	01 d8                	add    eax,ebx
c001680c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0016813:	75 0b                	jne    c0016820 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016815:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001681f:	90                   	nop
c0016820:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016826:	83 ec 08             	sub    esp,0x8
c0016829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001682c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001682f:	01 c0                	add    eax,eax
c0016831:	01 c8                	add    eax,ecx
c0016833:	8d 3c 80             	lea    edi,[eax+eax*4]
c0016836:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0016839:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001683f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016845:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016849:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001684f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0016855:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001685c:	89 ca                	mov    edx,ecx
c001685e:	f7 da                	neg    edx
c0016860:	c1 e2 15             	shl    edx,0x15
c0016863:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016869:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001686f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016873:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001687d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016883:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016887:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001688d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016897:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00168a1:	53                   	push   ebx
c00168a2:	68 e4 97 02 c0       	push   0xc00297e4
c00168a7:	e8 40 b1 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	89 d8                	mov    eax,ebx
c00168b1:	5b                   	pop    ebx
c00168b2:	5e                   	pop    esi
c00168b3:	5f                   	pop    edi
c00168b4:	c3                   	ret    
c00168b5:	90                   	nop
c00168b6:	66 90                	xchg   ax,ax

c00168b8 <Process::createUserThread()>:
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	68 80 00 00 00       	push   0x80
c00168c0:	6a 00                	push   0x0
c00168c2:	68 68 62 01 c0       	push   0xc0016268
c00168c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168cb:	e8 f0 fe ff ff       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c00168d0:	83 c4 1c             	add    esp,0x1c
c00168d3:	c3                   	ret    

c00168d4 <setupMultitasking(void (*)())>:
c00168d4:	56                   	push   esi
c00168d5:	53                   	push   ebx
c00168d6:	51                   	push   ecx
c00168d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168db:	eb 13                	jmp    c00168f0 <setupMultitasking(void (*)())+0x1c>
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	68 e4 97 02 c0       	push   0xc00297e4
c00168e8:	e8 47 b0 00 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 e4 97 02 c0       	push   0xc00297e4
c00168f8:	e8 13 b0 00 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	84 c0                	test   al,al
c0016902:	74 dc                	je     c00168e0 <setupMultitasking(void (*)())+0xc>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	68 1f 07 00 00       	push   0x71f
c001690c:	e8 a6 33 ff ff       	call   c0009cb7 <malloc>
c0016911:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016918:	89 c3                	mov    ebx,eax
c001691a:	6a 00                	push   0x0
c001691c:	68 cd 45 02 c0       	push   0xc00245cd
c0016921:	6a 01                	push   0x1
c0016923:	50                   	push   eax
c0016924:	e8 8f fc ff ff       	call   c00165b8 <Process::Process(bool, char const*, Process*, char**)>
c0016929:	83 c4 14             	add    esp,0x14
c001692c:	89 1d f0 97 02 c0    	mov    DWORD PTR ds:0xc00297f0,ebx
c0016932:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0016938:	e8 68 44 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c001693d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0016945:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001694f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016955:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016958:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016962:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016968:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001696e:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016978:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016982:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001698c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016992:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001699c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00169a2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00169ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00169b2:	58                   	pop    eax
c00169b3:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00169b9:	5a                   	pop    edx
c00169ba:	68 c9 45 02 c0       	push   0xc00245c9
c00169bf:	50                   	push   eax
c00169c0:	e8 73 9d fe ff       	call   c0000738 <strcpy>
c00169c5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00169cc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00169d0:	83 c4 14             	add    esp,0x14
c00169d3:	5b                   	pop    ebx
c00169d4:	5e                   	pop    esi
c00169d5:	e9 af 98 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00169da:	66 90                	xchg   ax,ax

c00169dc <schedule()>:
c00169dc:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00169e1:	85 c0                	test   eax,eax
c00169e3:	74 0b                	je     c00169f0 <schedule()+0x14>
c00169e5:	c7 05 c0 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x1
c00169ef:	c3                   	ret    
c00169f0:	53                   	push   ebx
c00169f1:	83 ec 14             	sub    esp,0x14
c00169f4:	68 e4 97 02 c0       	push   0xc00297e4
c00169f9:	e8 12 af 00 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	84 c0                	test   al,al
c0016a03:	75 3b                	jne    c0016a40 <schedule()+0x64>
c0016a05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016a0d:	4a                   	dec    edx
c0016a0e:	74 38                	je     c0016a48 <schedule()+0x6c>
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	68 e4 97 02 c0       	push   0xc00297e4
c0016a18:	e8 0f af 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a1d:	c7 04 24 e4 97 02 c0 	mov    DWORD PTR [esp],0xc00297e4
c0016a24:	89 c3                	mov    ebx,eax
c0016a26:	e8 09 af 00 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016a2b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a35:	e8 86 f8 ff ff       	call   c00162c0 <switchToThread(ThreadControlBlock*)>
c0016a3a:	83 c4 10             	add    esp,0x10
c0016a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a40:	83 c4 08             	add    esp,0x8
c0016a43:	5b                   	pop    ebx
c0016a44:	c3                   	ret    
c0016a45:	8d 76 00             	lea    esi,[esi+0x0]
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a52:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0016a58:	68 e4 97 02 c0       	push   0xc00297e4
c0016a5d:	e8 8a af 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	eb a9                	jmp    c0016a10 <schedule()+0x34>
c0016a67:	90                   	nop

c0016a68 <Semaphore::tryAcquire()>:
c0016a68:	53                   	push   ebx
c0016a69:	83 ec 08             	sub    esp,0x8
c0016a6c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a70:	fa                   	cli    
c0016a71:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016a76:	8d 50 01             	lea    edx,[eax+0x1]
c0016a79:	89 15 c8 97 02 c0    	mov    DWORD PTR ds:0xc00297c8,edx
c0016a7f:	8b 15 c4 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297c4
c0016a85:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016a88:	89 1d c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,ebx
c0016a8e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0016a91:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0016a93:	7c 33                	jl     c0016ac8 <Semaphore::tryAcquire()+0x60>
c0016a95:	89 15 c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,edx
c0016a9b:	85 d2                	test   edx,edx
c0016a9d:	75 0d                	jne    c0016aac <Semaphore::tryAcquire()+0x44>
c0016a9f:	8b 15 c0 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297c0
c0016aa5:	85 d2                	test   edx,edx
c0016aa7:	75 6b                	jne    c0016b14 <Semaphore::tryAcquire()+0xac>
c0016aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016aac:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016ab1:	85 c0                	test   eax,eax
c0016ab3:	74 0b                	je     c0016ac0 <Semaphore::tryAcquire()+0x58>
c0016ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ab8:	31 c0                	xor    eax,eax
c0016aba:	83 c4 08             	add    esp,0x8
c0016abd:	5b                   	pop    ebx
c0016abe:	c3                   	ret    
c0016abf:	90                   	nop
c0016ac0:	fb                   	sti    
c0016ac1:	83 c4 08             	add    esp,0x8
c0016ac4:	5b                   	pop    ebx
c0016ac5:	c3                   	ret    
c0016ac6:	66 90                	xchg   ax,ax
c0016ac8:	43                   	inc    ebx
c0016ac9:	89 15 c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,edx
c0016acf:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016ad2:	85 d2                	test   edx,edx
c0016ad4:	75 22                	jne    c0016af8 <Semaphore::tryAcquire()+0x90>
c0016ad6:	8b 0d c0 97 02 c0    	mov    ecx,DWORD PTR ds:0xc00297c0
c0016adc:	85 c9                	test   ecx,ecx
c0016ade:	74 18                	je     c0016af8 <Semaphore::tryAcquire()+0x90>
c0016ae0:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0016aea:	e8 ed fe ff ff       	call   c00169dc <schedule()>
c0016aef:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016af4:	48                   	dec    eax
c0016af5:	8d 76 00             	lea    esi,[esi+0x0]
c0016af8:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016afd:	85 c0                	test   eax,eax
c0016aff:	75 0b                	jne    c0016b0c <Semaphore::tryAcquire()+0xa4>
c0016b01:	fb                   	sti    
c0016b02:	b0 01                	mov    al,0x1
c0016b04:	83 c4 08             	add    esp,0x8
c0016b07:	5b                   	pop    ebx
c0016b08:	c3                   	ret    
c0016b09:	8d 76 00             	lea    esi,[esi+0x0]
c0016b0c:	b0 01                	mov    al,0x1
c0016b0e:	83 c4 08             	add    esp,0x8
c0016b11:	5b                   	pop    ebx
c0016b12:	c3                   	ret    
c0016b13:	90                   	nop
c0016b14:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0016b1e:	e8 b9 fe ff ff       	call   c00169dc <schedule()>
c0016b23:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016b28:	48                   	dec    eax
c0016b29:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016b2e:	85 c0                	test   eax,eax
c0016b30:	75 86                	jne    c0016ab8 <Semaphore::tryAcquire()+0x50>
c0016b32:	eb 8c                	jmp    c0016ac0 <Semaphore::tryAcquire()+0x58>

c0016b34 <Semaphore::assertLocked(char const*)>:
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b3b:	fa                   	cli    
c0016b3c:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016b42:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0016b47:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b4a:	89 0d c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,ecx
c0016b50:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0016b52:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016b55:	7c 29                	jl     c0016b80 <Semaphore::assertLocked(char const*)+0x4c>
c0016b57:	90                   	nop
c0016b58:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c0016b5d:	85 c0                	test   eax,eax
c0016b5f:	75 0b                	jne    c0016b6c <Semaphore::assertLocked(char const*)+0x38>
c0016b61:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0016b66:	85 c0                	test   eax,eax
c0016b68:	75 2e                	jne    c0016b98 <Semaphore::assertLocked(char const*)+0x64>
c0016b6a:	66 90                	xchg   ax,ax
c0016b6c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016b71:	48                   	dec    eax
c0016b72:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016b77:	75 03                	jne    c0016b7c <Semaphore::assertLocked(char const*)+0x48>
c0016b79:	fb                   	sti    
c0016b7a:	66 90                	xchg   ax,ax
c0016b7c:	83 c4 0c             	add    esp,0xc
c0016b7f:	c3                   	ret    
c0016b80:	83 ec 0c             	sub    esp,0xc
c0016b83:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016b87:	e8 eb c7 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0016b8c:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	48                   	dec    eax
c0016b95:	eb c1                	jmp    c0016b58 <Semaphore::assertLocked(char const*)+0x24>
c0016b97:	90                   	nop
c0016b98:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0016ba2:	e8 35 fe ff ff       	call   c00169dc <schedule()>
c0016ba7:	eb c3                	jmp    c0016b6c <Semaphore::assertLocked(char const*)+0x38>
c0016ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016bac:	83 ec 0c             	sub    esp,0xc
c0016baf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016bb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016bbb:	e8 1c fe ff ff       	call   c00169dc <schedule()>
c0016bc0:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016bc5:	48                   	dec    eax
c0016bc6:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016bcb:	75 03                	jne    c0016bd0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0016bcd:	fb                   	sti    
c0016bce:	66 90                	xchg   ax,ax
c0016bd0:	83 c4 0c             	add    esp,0xc
c0016bd3:	c3                   	ret    

c0016bd4 <blockTask(TaskState)>:
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	fa                   	cli    
c0016bd8:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016bde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016bea:	e8 ed fd ff ff       	call   c00169dc <schedule()>
c0016bef:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016bf4:	48                   	dec    eax
c0016bf5:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016bfa:	75 04                	jne    c0016c00 <blockTask(TaskState)+0x2c>
c0016bfc:	fb                   	sti    
c0016bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0016c00:	83 c4 0c             	add    esp,0xc
c0016c03:	c3                   	ret    

c0016c04 <waitTask(int, int*, int)>:
c0016c04:	83 ec 18             	sub    esp,0x18
c0016c07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c10:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016c13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c1c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016c1f:	6a 07                	push   0x7
c0016c21:	e8 ae ff ff ff       	call   c0016bd4 <blockTask(TaskState)>
c0016c26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c2b:	83 c4 10             	add    esp,0x10
c0016c2e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016c31:	85 d2                	test   edx,edx
c0016c33:	74 0b                	je     c0016c40 <waitTask(int, int*, int)+0x3c>
c0016c35:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016c38:	89 02                	mov    DWORD PTR [edx],eax
c0016c3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c3f:	90                   	nop
c0016c40:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016c43:	83 c4 0c             	add    esp,0xc
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <milliTenthSleepUntil(unsigned int)>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4f:	39 05 cc 88 02 c0    	cmp    DWORD PTR ds:0xc00288cc,eax
c0016c55:	76 05                	jbe    c0016c5c <milliTenthSleepUntil(unsigned int)+0x14>
c0016c57:	90                   	nop
c0016c58:	83 c4 0c             	add    esp,0xc
c0016c5b:	c3                   	ret    
c0016c5c:	fa                   	cli    
c0016c5d:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016c63:	83 ec 08             	sub    esp,0x8
c0016c66:	ff 05 c4 97 02 c0    	inc    DWORD PTR ds:0xc00297c4
c0016c6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016c72:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016c75:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0016c7b:	68 d8 97 02 c0       	push   0xc00297d8
c0016c80:	e8 67 ad 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c85:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016c8c:	e8 43 ff ff ff       	call   c0016bd4 <blockTask(TaskState)>
c0016c91:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0016c96:	83 c4 10             	add    esp,0x10
c0016c99:	48                   	dec    eax
c0016c9a:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c0016c9f:	85 c0                	test   eax,eax
c0016ca1:	75 09                	jne    c0016cac <milliTenthSleepUntil(unsigned int)+0x64>
c0016ca3:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0016ca8:	85 c0                	test   eax,eax
c0016caa:	75 14                	jne    c0016cc0 <milliTenthSleepUntil(unsigned int)+0x78>
c0016cac:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016cb1:	48                   	dec    eax
c0016cb2:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016cb7:	75 9f                	jne    c0016c58 <milliTenthSleepUntil(unsigned int)+0x10>
c0016cb9:	fb                   	sti    
c0016cba:	83 c4 0c             	add    esp,0xc
c0016cbd:	c3                   	ret    
c0016cbe:	66 90                	xchg   ax,ax
c0016cc0:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0016cca:	e8 0d fd ff ff       	call   c00169dc <schedule()>
c0016ccf:	eb db                	jmp    c0016cac <milliTenthSleepUntil(unsigned int)+0x64>
c0016cd1:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd4 <milliTenthSleep(unsigned int)>:
c0016cd4:	a1 cc 88 02 c0       	mov    eax,ds:0xc00288cc
c0016cd9:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016cdd:	e9 66 ff ff ff       	jmp    c0016c48 <milliTenthSleepUntil(unsigned int)>
c0016ce2:	66 90                	xchg   ax,ax

c0016ce4 <sleep(unsigned int)>:
c0016ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ce8:	8d 04 80             	lea    eax,[eax+eax*4]
c0016ceb:	8d 04 80             	lea    eax,[eax+eax*4]
c0016cee:	8d 04 80             	lea    eax,[eax+eax*4]
c0016cf1:	8d 04 80             	lea    eax,[eax+eax*4]
c0016cf4:	c1 e0 04             	shl    eax,0x4
c0016cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cfb:	eb d7                	jmp    c0016cd4 <milliTenthSleep(unsigned int)>
c0016cfd:	90                   	nop
c0016cfe:	66 90                	xchg   ax,ax

c0016d00 <Semaphore::acquire()>:
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d07:	fa                   	cli    
c0016d08:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0016d0d:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016d13:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d16:	89 0d c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,ecx
c0016d1c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016d1f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016d21:	7d 2d                	jge    c0016d50 <Semaphore::acquire()+0x50>
c0016d23:	41                   	inc    ecx
c0016d24:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016d27:	90                   	nop
c0016d28:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c0016d2d:	85 c0                	test   eax,eax
c0016d2f:	75 0b                	jne    c0016d3c <Semaphore::acquire()+0x3c>
c0016d31:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0016d36:	85 c0                	test   eax,eax
c0016d38:	75 62                	jne    c0016d9c <Semaphore::acquire()+0x9c>
c0016d3a:	66 90                	xchg   ax,ax
c0016d3c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016d41:	48                   	dec    eax
c0016d42:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016d47:	75 03                	jne    c0016d4c <Semaphore::acquire()+0x4c>
c0016d49:	fb                   	sti    
c0016d4a:	66 90                	xchg   ax,ax
c0016d4c:	83 c4 0c             	add    esp,0xc
c0016d4f:	c3                   	ret    
c0016d50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d55:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016d5c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016d5f:	85 c9                	test   ecx,ecx
c0016d61:	74 4d                	je     c0016db0 <Semaphore::acquire()+0xb0>
c0016d63:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0016d66:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d6c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016d6f:	90                   	nop
c0016d70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d75:	83 ec 0c             	sub    esp,0xc
c0016d78:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016d7b:	68 48 46 02 c0       	push   0xc0024648
c0016d80:	e8 40 62 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016d85:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016d8c:	e8 43 fe ff ff       	call   c0016bd4 <blockTask(TaskState)>
c0016d91:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0016d96:	83 c4 10             	add    esp,0x10
c0016d99:	48                   	dec    eax
c0016d9a:	eb 8c                	jmp    c0016d28 <Semaphore::acquire()+0x28>
c0016d9c:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0016da6:	e8 31 fc ff ff       	call   c00169dc <schedule()>
c0016dab:	eb 8f                	jmp    c0016d3c <Semaphore::acquire()+0x3c>
c0016dad:	8d 76 00             	lea    esi,[esi+0x0]
c0016db0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016db5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016db8:	eb b6                	jmp    c0016d70 <Semaphore::acquire()+0x70>
c0016dba:	66 90                	xchg   ax,ax

c0016dbc <taskReturned>:
c0016dbc:	83 ec 18             	sub    esp,0x18
c0016dbf:	68 68 46 02 c0       	push   0xc0024668
c0016dc4:	e8 ae c5 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	6a 02                	push   0x2
c0016dd1:	e8 fe fd ff ff       	call   c0016bd4 <blockTask(TaskState)>
c0016dd6:	fa                   	cli    
c0016dd7:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016ddd:	e8 fa fb ff ff       	call   c00169dc <schedule()>
c0016de2:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	48                   	dec    eax
c0016deb:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016df0:	85 c0                	test   eax,eax
c0016df2:	75 d8                	jne    c0016dcc <taskReturned+0x10>
c0016df4:	fb                   	sti    
c0016df5:	eb d5                	jmp    c0016dcc <taskReturned+0x10>
c0016df7:	90                   	nop

c0016df8 <Thr::processFromPID(int)>:
c0016df8:	57                   	push   edi
c0016df9:	56                   	push   esi
c0016dfa:	53                   	push   ebx
c0016dfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016dff:	fa                   	cli    
c0016e00:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	68 e4 97 02 c0       	push   0xc00297e4
c0016e0e:	e8 19 ab 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	89 c7                	mov    edi,eax
c0016e18:	eb 16                	jmp    c0016e30 <Thr::processFromPID(int)+0x38>
c0016e1a:	66 90                	xchg   ax,ax
c0016e1c:	83 ec 0c             	sub    esp,0xc
c0016e1f:	68 e4 97 02 c0       	push   0xc00297e4
c0016e24:	e8 03 ab 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e29:	83 c4 10             	add    esp,0x10
c0016e2c:	39 f8                	cmp    eax,edi
c0016e2e:	74 4c                	je     c0016e7c <Thr::processFromPID(int)+0x84>
c0016e30:	83 ec 0c             	sub    esp,0xc
c0016e33:	68 e4 97 02 c0       	push   0xc00297e4
c0016e38:	e8 ef aa 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e3d:	c7 04 24 e4 97 02 c0 	mov    DWORD PTR [esp],0xc00297e4
c0016e44:	89 c3                	mov    ebx,eax
c0016e46:	e8 e9 aa 00 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e4b:	58                   	pop    eax
c0016e4c:	5a                   	pop    edx
c0016e4d:	53                   	push   ebx
c0016e4e:	68 e4 97 02 c0       	push   0xc00297e4
c0016e53:	e8 94 ab 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e58:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e5b:	83 c4 10             	add    esp,0x10
c0016e5e:	39 30                	cmp    DWORD PTR [eax],esi
c0016e60:	75 ba                	jne    c0016e1c <Thr::processFromPID(int)+0x24>
c0016e62:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016e67:	48                   	dec    eax
c0016e68:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016e6d:	74 09                	je     c0016e78 <Thr::processFromPID(int)+0x80>
c0016e6f:	90                   	nop
c0016e70:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e73:	5b                   	pop    ebx
c0016e74:	5e                   	pop    esi
c0016e75:	5f                   	pop    edi
c0016e76:	c3                   	ret    
c0016e77:	90                   	nop
c0016e78:	fb                   	sti    
c0016e79:	eb f5                	jmp    c0016e70 <Thr::processFromPID(int)+0x78>
c0016e7b:	90                   	nop
c0016e7c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016e81:	48                   	dec    eax
c0016e82:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016e87:	75 07                	jne    c0016e90 <Thr::processFromPID(int)+0x98>
c0016e89:	fb                   	sti    
c0016e8a:	5b                   	pop    ebx
c0016e8b:	5e                   	pop    esi
c0016e8c:	5f                   	pop    edi
c0016e8d:	c3                   	ret    
c0016e8e:	66 90                	xchg   ax,ax
c0016e90:	5b                   	pop    ebx
c0016e91:	31 c0                	xor    eax,eax
c0016e93:	5e                   	pop    esi
c0016e94:	5f                   	pop    edi
c0016e95:	c3                   	ret    
c0016e96:	66 90                	xchg   ax,ax

c0016e98 <unblockTask(ThreadControlBlock*)>:
c0016e98:	53                   	push   ebx
c0016e99:	83 ec 08             	sub    esp,0x8
c0016e9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ea0:	fa                   	cli    
c0016ea1:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0016ea7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016eaa:	85 c0                	test   eax,eax
c0016eac:	74 66                	je     c0016f14 <unblockTask(ThreadControlBlock*)+0x7c>
c0016eae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016eb1:	48                   	dec    eax
c0016eb2:	74 38                	je     c0016eec <unblockTask(ThreadControlBlock*)+0x54>
c0016eb4:	83 ec 0c             	sub    esp,0xc
c0016eb7:	68 e4 97 02 c0       	push   0xc00297e4
c0016ebc:	e8 6b aa 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ec1:	83 c4 10             	add    esp,0x10
c0016ec4:	85 c0                	test   eax,eax
c0016ec6:	75 1c                	jne    c0016ee4 <unblockTask(ThreadControlBlock*)+0x4c>
c0016ec8:	eb 5e                	jmp    c0016f28 <unblockTask(ThreadControlBlock*)+0x90>
c0016eca:	66 90                	xchg   ax,ax
c0016ecc:	83 ec 08             	sub    esp,0x8
c0016ecf:	50                   	push   eax
c0016ed0:	68 e4 97 02 c0       	push   0xc00297e4
c0016ed5:	e8 02 ae 00 00       	call   c0021cdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	85 c0                	test   eax,eax
c0016edf:	74 47                	je     c0016f28 <unblockTask(ThreadControlBlock*)+0x90>
c0016ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee4:	39 c3                	cmp    ebx,eax
c0016ee6:	75 e4                	jne    c0016ecc <unblockTask(ThreadControlBlock*)+0x34>
c0016ee8:	eb 12                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x64>
c0016eea:	66 90                	xchg   ax,ax
c0016eec:	83 ec 0c             	sub    esp,0xc
c0016eef:	68 eb 45 02 c0       	push   0xc00245eb
c0016ef4:	e8 cc 60 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0016f01:	48                   	dec    eax
c0016f02:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0016f07:	75 03                	jne    c0016f0c <unblockTask(ThreadControlBlock*)+0x74>
c0016f09:	fb                   	sti    
c0016f0a:	66 90                	xchg   ax,ax
c0016f0c:	83 c4 08             	add    esp,0x8
c0016f0f:	5b                   	pop    ebx
c0016f10:	c3                   	ret    
c0016f11:	8d 76 00             	lea    esi,[esi+0x0]
c0016f14:	83 ec 0c             	sub    esp,0xc
c0016f17:	68 d4 45 02 c0       	push   0xc00245d4
c0016f1c:	e8 a4 60 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016f21:	83 c4 10             	add    esp,0x10
c0016f24:	eb d6                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x64>
c0016f26:	66 90                	xchg   ax,ax
c0016f28:	83 ec 08             	sub    esp,0x8
c0016f2b:	53                   	push   ebx
c0016f2c:	68 e4 97 02 c0       	push   0xc00297e4
c0016f31:	e8 b6 aa 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f36:	83 c4 10             	add    esp,0x10
c0016f39:	eb c1                	jmp    c0016efc <unblockTask(ThreadControlBlock*)+0x64>
c0016f3b:	90                   	nop

c0016f3c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016f3c:	55                   	push   ebp
c0016f3d:	57                   	push   edi
c0016f3e:	56                   	push   esi
c0016f3f:	53                   	push   ebx
c0016f40:	83 ec 1c             	sub    esp,0x1c
c0016f43:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f47:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f4a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0016f50:	85 ff                	test   edi,edi
c0016f52:	7e 24                	jle    c0016f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0016f54:	31 f6                	xor    esi,esi
c0016f56:	66 90                	xchg   ax,ax
c0016f58:	83 ec 0c             	sub    esp,0xc
c0016f5b:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0016f62:	46                   	inc    esi
c0016f63:	e8 5f 2d ff ff       	call   c0009cc7 <free>
c0016f68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016f74:	7f e2                	jg     c0016f58 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016f76:	66 90                	xchg   ax,ax
c0016f78:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016f82:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016f87:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016f8a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016f8d:	d3 c0                	rol    eax,cl
c0016f8f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0016f96:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016f99:	89 f7                	mov    edi,esi
c0016f9b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016fa3:	0f 85 73 01 00 00    	jne    c001711c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0016fa9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016faf:	85 ed                	test   ebp,ebp
c0016fb1:	74 1d                	je     c0016fd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0016fb3:	83 ec 0c             	sub    esp,0xc
c0016fb6:	55                   	push   ebp
c0016fb7:	e8 60 c1 ff ff       	call   c001311c <EnvVarContainer::~EnvVarContainer()>
c0016fbc:	59                   	pop    ecx
c0016fbd:	5e                   	pop    esi
c0016fbe:	6a 0c                	push   0xc
c0016fc0:	55                   	push   ebp
c0016fc1:	e8 1e 5f ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0016fc6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016fc9:	83 c4 10             	add    esp,0x10
c0016fcc:	89 f7                	mov    edi,esi
c0016fce:	66 90                	xchg   ax,ax
c0016fd0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016fd6:	85 c0                	test   eax,eax
c0016fd8:	0f 84 b2 00 00 00    	je     c0017090 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016fde:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016fe1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fe5:	31 c9                	xor    ecx,ecx
c0016fe7:	eb 17                	jmp    c0017000 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	41                   	inc    ecx
c0016fed:	83 f9 10             	cmp    ecx,0x10
c0016ff0:	0f 84 9a 00 00 00    	je     c0017090 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0016ff6:	66 90                	xchg   ax,ax
c0016ff8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016ffe:	66 90                	xchg   ax,ax
c0017000:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0017007:	d3 fa                	sar    edx,cl
c0017009:	83 e2 01             	and    edx,0x1
c001700c:	74 de                	je     c0016fec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001700e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0017011:	01 d2                	add    edx,edx
c0017013:	01 ca                	add    edx,ecx
c0017015:	8d 14 92             	lea    edx,[edx+edx*4]
c0017018:	01 d0                	add    eax,edx
c001701a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017020:	83 fd 07             	cmp    ebp,0x7
c0017023:	75 c7                	jne    c0016fec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017025:	05 40 02 00 00       	add    eax,0x240
c001702a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001702d:	83 fd ff             	cmp    ebp,0xffffffff
c0017030:	0f 8c ee 00 00 00    	jl     c0017124 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017036:	0f 84 ac 01 00 00    	je     c00171e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c001703c:	85 ed                	test   ebp,ebp
c001703e:	0f 84 90 01 00 00    	je     c00171d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0017044:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017046:	75 a4                	jne    c0016fec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017048:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001704e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017052:	01 d0                	add    eax,edx
c0017054:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017058:	83 ec 0c             	sub    esp,0xc
c001705b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0017061:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017064:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001706a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017071:	50                   	push   eax
c0017072:	e8 21 fe ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c0017077:	83 c4 10             	add    esp,0x10
c001707a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001707d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017081:	89 f7                	mov    edi,esi
c0017083:	41                   	inc    ecx
c0017084:	83 f9 10             	cmp    ecx,0x10
c0017087:	0f 85 6b ff ff ff    	jne    c0016ff8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001708d:	8d 76 00             	lea    esi,[esi+0x0]
c0017090:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0017096:	85 c0                	test   eax,eax
c0017098:	74 62                	je     c00170fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001709a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00170a0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00170a6:	74 54                	je     c00170fc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c00170a8:	83 ec 0c             	sub    esp,0xc
c00170ab:	68 e4 97 02 c0       	push   0xc00297e4
c00170b0:	e8 77 a8 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00170b5:	c7 04 24 e4 97 02 c0 	mov    DWORD PTR [esp],0xc00297e4
c00170bc:	89 c7                	mov    edi,eax
c00170be:	e8 4d a8 00 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	84 c0                	test   al,al
c00170c8:	0f 84 ce 00 00 00    	je     c001719c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c00170ce:	66 90                	xchg   ax,ax
c00170d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170d3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00170d9:	85 d2                	test   edx,edx
c00170db:	74 0f                	je     c00170ec <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00170dd:	83 ec 0c             	sub    esp,0xc
c00170e0:	8b 02                	mov    eax,DWORD PTR [edx]
c00170e2:	52                   	push   edx
c00170e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00170e6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170e9:	83 c4 10             	add    esp,0x10
c00170ec:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00170f6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00170f9:	8d 76 00             	lea    esi,[esi+0x0]
c00170fc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0017102:	85 db                	test   ebx,ebx
c0017104:	74 16                	je     c001711c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0017106:	83 ec 0c             	sub    esp,0xc
c0017109:	53                   	push   ebx
c001710a:	e8 49 50 ff ff       	call   c000c158 <VAS::~VAS()>
c001710f:	58                   	pop    eax
c0017110:	5a                   	pop    edx
c0017111:	6a 14                	push   0x14
c0017113:	53                   	push   ebx
c0017114:	e8 cb 5d ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0017119:	83 c4 10             	add    esp,0x10
c001711c:	83 c4 1c             	add    esp,0x1c
c001711f:	5b                   	pop    ebx
c0017120:	5e                   	pop    esi
c0017121:	5f                   	pop    edi
c0017122:	5d                   	pop    ebp
c0017123:	c3                   	ret    
c0017124:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	68 9c 46 02 c0       	push   0xc002469c
c0017130:	e8 42 c2 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0017135:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	89 f7                	mov    edi,esi
c001713d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017141:	e9 a6 fe ff ff       	jmp    c0016fec <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017146:	66 90                	xchg   ax,ax
c0017148:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001714e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0017154:	75 1e                	jne    c0017174 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	68 04 47 02 c0       	push   0xc0024704
c001715e:	e8 62 5e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017163:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001716a:	e8 65 fa ff ff       	call   c0016bd4 <blockTask(TaskState)>
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	66 90                	xchg   ax,ax
c0017174:	83 ec 08             	sub    esp,0x8
c0017177:	56                   	push   esi
c0017178:	68 e4 97 02 c0       	push   0xc00297e4
c001717d:	e8 6a a8 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017182:	c7 04 24 e4 97 02 c0 	mov    DWORD PTR [esp],0xc00297e4
c0017189:	e8 9e a7 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	39 f8                	cmp    eax,edi
c0017193:	0f 84 37 ff ff ff    	je     c00170d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0017199:	8d 76 00             	lea    esi,[esi+0x0]
c001719c:	83 ec 0c             	sub    esp,0xc
c001719f:	68 e4 97 02 c0       	push   0xc00297e4
c00171a4:	e8 83 a7 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171a9:	c7 04 24 e4 97 02 c0 	mov    DWORD PTR [esp],0xc00297e4
c00171b0:	89 c6                	mov    esi,eax
c00171b2:	e8 7d a7 00 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00171b7:	83 c4 10             	add    esp,0x10
c00171ba:	39 f3                	cmp    ebx,esi
c00171bc:	74 b6                	je     c0017174 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00171be:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00171c1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171c4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00171ca:	75 a8                	jne    c0017174 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00171cc:	e9 77 ff ff ff       	jmp    c0017148 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c00171d1:	8d 76 00             	lea    esi,[esi+0x0]
c00171d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00171d8:	83 ec 0c             	sub    esp,0xc
c00171db:	68 d0 46 02 c0       	push   0xc00246d0
c00171e0:	e9 4b ff ff ff       	jmp    c0017130 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00171e5:	8d 76 00             	lea    esi,[esi+0x0]
c00171e8:	8b 36                	mov    esi,DWORD PTR [esi]
c00171ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00171ee:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00171f1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00171f4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00171fa:	01 d7                	add    edi,edx
c00171fc:	89 f8                	mov    eax,edi
c00171fe:	e9 51 fe ff ff       	jmp    c0017054 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0017203:	90                   	nop

c0017204 <cleanerTaskFunction(void*)>:
c0017204:	53                   	push   ebx
c0017205:	83 ec 08             	sub    esp,0x8
c0017208:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001720d:	48                   	dec    eax
c001720e:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017213:	75 03                	jne    c0017218 <cleanerTaskFunction(void*)+0x14>
c0017215:	fb                   	sti    
c0017216:	66 90                	xchg   ax,ax
c0017218:	fa                   	cli    
c0017219:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001721e:	80 3d ac 97 02 c0 00 	cmp    BYTE PTR ds:0xc00297ac,0x0
c0017225:	8d 50 01             	lea    edx,[eax+0x1]
c0017228:	89 15 c8 97 02 c0    	mov    DWORD PTR ds:0xc00297c8,edx
c001722e:	0f 84 ac 00 00 00    	je     c00172e0 <cleanerTaskFunction(void*)+0xdc>
c0017234:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017239:	85 c0                	test   eax,eax
c001723b:	75 03                	jne    c0017240 <cleanerTaskFunction(void*)+0x3c>
c001723d:	fb                   	sti    
c001723e:	66 90                	xchg   ax,ax
c0017240:	c6 05 ac 97 02 c0 00 	mov    BYTE PTR ds:0xc00297ac,0x0
c0017247:	fa                   	cli    
c0017248:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c001724e:	ff 05 c4 97 02 c0    	inc    DWORD PTR ds:0xc00297c4
c0017254:	fa                   	cli    
c0017255:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c001725b:	eb 2b                	jmp    c0017288 <cleanerTaskFunction(void*)+0x84>
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	68 cc 97 02 c0       	push   0xc00297cc
c0017268:	e8 bf a6 00 00       	call   c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001726d:	c7 04 24 cc 97 02 c0 	mov    DWORD PTR [esp],0xc00297cc
c0017274:	89 c3                	mov    ebx,eax
c0017276:	e8 b9 a6 00 00       	call   c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001727b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001727e:	e8 b9 fc ff ff       	call   c0016f3c <cleanupTerminatedTask(ThreadControlBlock*)>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	66 90                	xchg   ax,ax
c0017288:	83 ec 0c             	sub    esp,0xc
c001728b:	68 cc 97 02 c0       	push   0xc00297cc
c0017290:	e8 7b a6 00 00       	call   c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	84 c0                	test   al,al
c001729a:	74 c4                	je     c0017260 <cleanerTaskFunction(void*)+0x5c>
c001729c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00172a1:	48                   	dec    eax
c00172a2:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00172a7:	75 03                	jne    c00172ac <cleanerTaskFunction(void*)+0xa8>
c00172a9:	fb                   	sti    
c00172aa:	66 90                	xchg   ax,ax
c00172ac:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00172b1:	48                   	dec    eax
c00172b2:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c00172b7:	0f 85 4b ff ff ff    	jne    c0017208 <cleanerTaskFunction(void*)+0x4>
c00172bd:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c00172c2:	85 c0                	test   eax,eax
c00172c4:	0f 84 3e ff ff ff    	je     c0017208 <cleanerTaskFunction(void*)+0x4>
c00172ca:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c00172d4:	e8 03 f7 ff ff       	call   c00169dc <schedule()>
c00172d9:	e9 2a ff ff ff       	jmp    c0017208 <cleanerTaskFunction(void*)+0x4>
c00172de:	66 90                	xchg   ax,ax
c00172e0:	83 ec 0c             	sub    esp,0xc
c00172e3:	6a 02                	push   0x2
c00172e5:	e8 c2 f8 ff ff       	call   c0016bac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	e9 4e ff ff ff       	jmp    c0017240 <cleanerTaskFunction(void*)+0x3c>
c00172f2:	66 90                	xchg   ax,ax

c00172f4 <terminateTask(int)>:
c00172f4:	83 ec 14             	sub    esp,0x14
c00172f7:	fa                   	cli    
c00172f8:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00172fe:	ff 05 c4 97 02 c0    	inc    DWORD PTR ds:0xc00297c4
c0017304:	fa                   	cli    
c0017305:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c001730b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001730f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017314:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0017317:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001731c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001731f:	50                   	push   eax
c0017320:	68 cc 97 02 c0       	push   0xc00297cc
c0017325:	e8 c2 a6 00 00       	call   c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001732a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001732f:	83 c4 10             	add    esp,0x10
c0017332:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017339:	a1 a8 97 02 c0       	mov    eax,ds:0xc00297a8
c001733e:	85 c0                	test   eax,eax
c0017340:	74 5e                	je     c00173a0 <terminateTask(int)+0xac>
c0017342:	83 ec 0c             	sub    esp,0xc
c0017345:	c6 05 ac 97 02 c0 01 	mov    BYTE PTR ds:0xc00297ac,0x1
c001734c:	50                   	push   eax
c001734d:	e8 46 fb ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c0017352:	83 c4 10             	add    esp,0x10
c0017355:	8d 76 00             	lea    esi,[esi+0x0]
c0017358:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001735d:	48                   	dec    eax
c001735e:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017363:	75 03                	jne    c0017368 <terminateTask(int)+0x74>
c0017365:	fb                   	sti    
c0017366:	66 90                	xchg   ax,ax
c0017368:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c001736d:	48                   	dec    eax
c001736e:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c0017373:	75 0b                	jne    c0017380 <terminateTask(int)+0x8c>
c0017375:	83 3d c0 97 02 c0 00 	cmp    DWORD PTR ds:0xc00297c0,0x0
c001737c:	75 36                	jne    c00173b4 <terminateTask(int)+0xc0>
c001737e:	66 90                	xchg   ax,ax
c0017380:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017385:	48                   	dec    eax
c0017386:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c001738b:	75 03                	jne    c0017390 <terminateTask(int)+0x9c>
c001738d:	fb                   	sti    
c001738e:	66 90                	xchg   ax,ax
c0017390:	fa                   	cli    
c0017391:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0017397:	90                   	nop
c0017398:	e8 3f f6 ff ff       	call   c00169dc <schedule()>
c001739d:	eb e1                	jmp    c0017380 <terminateTask(int)+0x8c>
c001739f:	90                   	nop
c00173a0:	83 ec 0c             	sub    esp,0xc
c00173a3:	68 02 46 02 c0       	push   0xc0024602
c00173a8:	e8 18 5c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00173ad:	83 c4 10             	add    esp,0x10
c00173b0:	eb a6                	jmp    c0017358 <terminateTask(int)+0x64>
c00173b2:	66 90                	xchg   ax,ax
c00173b4:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c00173be:	eb d8                	jmp    c0017398 <terminateTask(int)+0xa4>

c00173c0 <Thr::terminateFromIRQ(int)>:
c00173c0:	83 ec 18             	sub    esp,0x18
c00173c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173c7:	e8 28 ff ff ff       	call   c00172f4 <terminateTask(int)>

c00173cc <Semaphore::release()>:
c00173cc:	83 ec 0c             	sub    esp,0xc
c00173cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173d3:	fa                   	cli    
c00173d4:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00173d9:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00173df:	8d 48 01             	lea    ecx,[eax+0x1]
c00173e2:	89 0d c4 97 02 c0    	mov    DWORD PTR ds:0xc00297c4,ecx
c00173e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00173eb:	85 c9                	test   ecx,ecx
c00173ed:	74 41                	je     c0017430 <Semaphore::release()+0x64>
c00173ef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00173f2:	83 ec 0c             	sub    esp,0xc
c00173f5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00173f8:	51                   	push   ecx
c00173f9:	e8 9a fa ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c00173fe:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c0017403:	83 c4 10             	add    esp,0x10
c0017406:	48                   	dec    eax
c0017407:	90                   	nop
c0017408:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c001740d:	85 c0                	test   eax,eax
c001740f:	75 0b                	jne    c001741c <Semaphore::release()+0x50>
c0017411:	a1 c0 97 02 c0       	mov    eax,ds:0xc00297c0
c0017416:	85 c0                	test   eax,eax
c0017418:	75 1e                	jne    c0017438 <Semaphore::release()+0x6c>
c001741a:	66 90                	xchg   ax,ax
c001741c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017421:	48                   	dec    eax
c0017422:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017427:	75 03                	jne    c001742c <Semaphore::release()+0x60>
c0017429:	fb                   	sti    
c001742a:	66 90                	xchg   ax,ax
c001742c:	83 c4 0c             	add    esp,0xc
c001742f:	c3                   	ret    
c0017430:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0017433:	eb d3                	jmp    c0017408 <Semaphore::release()+0x3c>
c0017435:	8d 76 00             	lea    esi,[esi+0x0]
c0017438:	c7 05 c0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x0
c0017442:	e8 95 f5 ff ff       	call   c00169dc <schedule()>
c0017447:	eb d3                	jmp    c001741c <Semaphore::release()+0x50>
c0017449:	8d 76 00             	lea    esi,[esi+0x0]

c001744c <__static_initialization_and_destruction_0(int, int)>:
c001744c:	83 ec 0c             	sub    esp,0xc
c001744f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017454:	0f 85 8e 00 00 00    	jne    c00174e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001745a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017462:	0f 85 80 00 00 00    	jne    c00174e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017468:	83 ec 0c             	sub    esp,0xc
c001746b:	68 e4 97 02 c0       	push   0xc00297e4
c0017470:	e8 23 a8 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017475:	83 c4 10             	add    esp,0x10
c0017478:	83 ec 04             	sub    esp,0x4
c001747b:	68 d8 57 02 c0       	push   0xc00257d8
c0017480:	68 e4 97 02 c0       	push   0xc00297e4
c0017485:	68 48 1c 02 c0       	push   0xc0021c48
c001748a:	e8 cf 59 ff ff       	call   c000ce5e <__cxa_atexit>
c001748f:	83 c4 10             	add    esp,0x10
c0017492:	83 ec 0c             	sub    esp,0xc
c0017495:	68 d8 97 02 c0       	push   0xc00297d8
c001749a:	e8 f9 a7 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001749f:	83 c4 10             	add    esp,0x10
c00174a2:	83 ec 04             	sub    esp,0x4
c00174a5:	68 d8 57 02 c0       	push   0xc00257d8
c00174aa:	68 d8 97 02 c0       	push   0xc00297d8
c00174af:	68 48 1c 02 c0       	push   0xc0021c48
c00174b4:	e8 a5 59 ff ff       	call   c000ce5e <__cxa_atexit>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	68 cc 97 02 c0       	push   0xc00297cc
c00174c4:	e8 cf a7 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	83 ec 04             	sub    esp,0x4
c00174cf:	68 d8 57 02 c0       	push   0xc00257d8
c00174d4:	68 cc 97 02 c0       	push   0xc00297cc
c00174d9:	68 48 1c 02 c0       	push   0xc0021c48
c00174de:	e8 7b 59 ff ff       	call   c000ce5e <__cxa_atexit>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	66 90                	xchg   ax,ax
c00174e8:	90                   	nop
c00174e9:	83 c4 0c             	add    esp,0xc
c00174ec:	c3                   	ret    
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]

c00174f0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	83 ec 08             	sub    esp,0x8
c00174f6:	68 ff ff 00 00       	push   0xffff
c00174fb:	6a 01                	push   0x1
c00174fd:	e8 4a ff ff ff       	call   c001744c <__static_initialization_and_destruction_0(int, int)>
c0017502:	83 c4 10             	add    esp,0x10
c0017505:	83 c4 0c             	add    esp,0xc
c0017508:	c3                   	ret    

c0017509 <Vm::inbv(unsigned short)>:
c0017509:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001750d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017512:	75 06                	jne    c001751a <Vm::inbv(unsigned short)+0x11>
c0017514:	a0 2c 98 02 c0       	mov    al,ds:0xc002982c
c0017519:	c3                   	ret    
c001751a:	ec                   	in     al,dx
c001751b:	c3                   	ret    

c001751c <Vm::outbv(unsigned short, unsigned char)>:
c001751c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017524:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017529:	75 25                	jne    c0017550 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001752b:	8b 0d 2c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002982c
c0017531:	8d 51 01             	lea    edx,[ecx+0x1]
c0017534:	88 81 40 98 02 c0    	mov    BYTE PTR [ecx-0x3ffd67c0],al
c001753a:	89 15 2c 98 02 c0    	mov    DWORD PTR ds:0xc002982c,edx
c0017540:	83 fa 20             	cmp    edx,0x20
c0017543:	75 0c                	jne    c0017551 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017545:	c7 05 2c 98 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002982c,0x1f
c001754f:	c3                   	ret    
c0017550:	ee                   	out    dx,al
c0017551:	c3                   	ret    

c0017552 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017552:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017557:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001755c:	c1 e0 04             	shl    eax,0x4
c001755f:	01 d0                	add    eax,edx
c0017561:	c3                   	ret    

c0017562 <Vm::getSegment(unsigned int)>:
c0017562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017566:	c1 e8 10             	shr    eax,0x10
c0017569:	c3                   	ret    

c001756a <Vm::getOffset(unsigned int)>:
c001756a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001756e:	c3                   	ret    

c001756f <Vm::mainloop2()>:
c001756f:	83 ec 18             	sub    esp,0x18
c0017572:	fa                   	cli    
c0017573:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c0017579:	6a 02                	push   0x2
c001757b:	c6 05 25 98 02 c0 01 	mov    BYTE PTR ds:0xc0029825,0x1
c0017582:	e8 25 f6 ff ff       	call   c0016bac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017587:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001758c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0017590:	52                   	push   edx
c0017591:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0017595:	52                   	push   edx
c0017596:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001759a:	52                   	push   edx
c001759b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001759f:	50                   	push   eax
c00175a0:	e8 8a 8c fe ff       	call   c000022f <goToVM86>
c00175a5:	83 c4 2c             	add    esp,0x2c
c00175a8:	c3                   	ret    

c00175a9 <Vm::mainVm8086Loop(void*)>:
c00175a9:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00175ae:	48                   	dec    eax
c00175af:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00175b4:	75 01                	jne    c00175b7 <Vm::mainVm8086Loop(void*)+0xe>
c00175b6:	fb                   	sti    
c00175b7:	eb b6                	jmp    c001756f <Vm::mainloop2()>

c00175b9 <Vm::mainloop3(unsigned long)>:
c00175b9:	83 ec 18             	sub    esp,0x18
c00175bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175c0:	fa                   	cli    
c00175c1:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00175c7:	6a 02                	push   0x2
c00175c9:	c6 05 24 98 02 c0 01 	mov    BYTE PTR ds:0xc0029824,0x1
c00175d0:	a3 20 98 02 c0       	mov    ds:0xc0029820,eax
c00175d5:	e8 d2 f5 ff ff       	call   c0016bac <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00175da:	83 c4 1c             	add    esp,0x1c
c00175dd:	eb 90                	jmp    c001756f <Vm::mainloop2()>

c00175df <Vm::initialise8086()>:
c00175df:	83 ec 0c             	sub    esp,0xc
c00175e2:	68 80 00 00 00       	push   0x80
c00175e7:	6a 00                	push   0x0
c00175e9:	68 a9 75 01 c0       	push   0xc00175a9
c00175ee:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c00175f4:	e8 c7 f1 ff ff       	call   c00167c0 <Process::createThread(void (*)(void*), void*, int)>
c00175f9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017600:	a3 28 98 02 c0       	mov    ds:0xc0029828,eax
c0017605:	68 00 01 00 00       	push   0x100
c001760a:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001760f:	6a 00                	push   0x0
c0017611:	6a 00                	push   0x0
c0017613:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017619:	e8 ae 4f ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001761e:	83 c4 2c             	add    esp,0x2c
c0017621:	c3                   	ret    

c0017622 <Vm::finish8086()>:
c0017622:	53                   	push   ebx
c0017623:	83 ec 08             	sub    esp,0x8
c0017626:	fa                   	cli    
c0017627:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c001762d:	80 3d 24 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029824,0x0
c0017634:	75 15                	jne    c001764b <Vm::finish8086()+0x29>
c0017636:	e8 a1 f3 ff ff       	call   c00169dc <schedule()>
c001763b:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017640:	48                   	dec    eax
c0017641:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017646:	75 de                	jne    c0017626 <Vm::finish8086()+0x4>
c0017648:	fb                   	sti    
c0017649:	eb db                	jmp    c0017626 <Vm::finish8086()+0x4>
c001764b:	83 ec 0c             	sub    esp,0xc
c001764e:	8b 1d 20 98 02 c0    	mov    ebx,DWORD PTR ds:0xc0029820
c0017654:	ff 35 28 98 02 c0    	push   DWORD PTR ds:0xc0029828
c001765a:	c6 05 24 98 02 c0 00 	mov    BYTE PTR ds:0xc0029824,0x0
c0017661:	e8 32 f8 ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c0017666:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001766b:	83 c4 10             	add    esp,0x10
c001766e:	8d 50 ff             	lea    edx,[eax-0x1]
c0017671:	89 15 c8 97 02 c0    	mov    DWORD PTR ds:0xc00297c8,edx
c0017677:	85 d2                	test   edx,edx
c0017679:	75 01                	jne    c001767c <Vm::finish8086()+0x5a>
c001767b:	fb                   	sti    
c001767c:	89 d8                	mov    eax,ebx
c001767e:	83 c4 08             	add    esp,0x8
c0017681:	5b                   	pop    ebx
c0017682:	c3                   	ret    

c0017683 <Vm::getOutput8086(unsigned char*)>:
c0017683:	57                   	push   edi
c0017684:	8b 0d 2c 98 02 c0    	mov    ecx,DWORD PTR ds:0xc002982c
c001768a:	56                   	push   esi
c001768b:	be 40 98 02 c0       	mov    esi,0xc0029840
c0017690:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017694:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017696:	a1 2c 98 02 c0       	mov    eax,ds:0xc002982c
c001769b:	5e                   	pop    esi
c001769c:	c7 05 2c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002982c,0x0
c00176a6:	5f                   	pop    edi
c00176a7:	c3                   	ret    

c00176a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00176a8:	55                   	push   ebp
c00176a9:	57                   	push   edi
c00176aa:	56                   	push   esi
c00176ab:	53                   	push   ebx
c00176ac:	83 ec 0c             	sub    esp,0xc
c00176af:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00176b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00176b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00176bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00176bf:	fa                   	cli    
c00176c0:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00176c6:	80 3d 25 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029825,0x0
c00176cd:	75 15                	jne    c00176e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00176cf:	e8 08 f3 ff ff       	call   c00169dc <schedule()>
c00176d4:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00176d9:	48                   	dec    eax
c00176da:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00176df:	75 de                	jne    c00176bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00176e1:	fb                   	sti    
c00176e2:	eb db                	jmp    c00176bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00176e4:	a1 28 98 02 c0       	mov    eax,ds:0xc0029828
c00176e9:	c7 05 2c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002982c,0x0
c00176f3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00176f7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00176fb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00176ff:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017703:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017707:	0f b7 ff             	movzx  edi,di
c001770a:	0f b7 f6             	movzx  esi,si
c001770d:	50                   	push   eax
c001770e:	6a 20                	push   0x20
c0017710:	6a 00                	push   0x0
c0017712:	68 40 98 02 c0       	push   0xc0029840
c0017717:	e8 60 8f fe ff       	call   c000067c <memset>
c001771c:	5a                   	pop    edx
c001771d:	59                   	pop    ecx
c001771e:	57                   	push   edi
c001771f:	56                   	push   esi
c0017720:	e8 2d fe ff ff       	call   c0017552 <Vm::realToLinear(unsigned short, unsigned short)>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	89 c7                	mov    edi,eax
c001772a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001772e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017732:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017734:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017739:	c6 05 25 98 02 c0 00 	mov    BYTE PTR ds:0xc0029825,0x0
c0017740:	48                   	dec    eax
c0017741:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0017746:	75 01                	jne    c0017749 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0017748:	fb                   	sti    
c0017749:	83 ec 0c             	sub    esp,0xc
c001774c:	ff 35 28 98 02 c0    	push   DWORD PTR ds:0xc0029828
c0017752:	e8 41 f7 ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c0017757:	83 c4 1c             	add    esp,0x1c
c001775a:	b0 01                	mov    al,0x1
c001775c:	5b                   	pop    ebx
c001775d:	5e                   	pop    esi
c001775e:	5f                   	pop    edi
c001775f:	5d                   	pop    ebp
c0017760:	c3                   	ret    

c0017761 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017761:	55                   	push   ebp
c0017762:	57                   	push   edi
c0017763:	56                   	push   esi
c0017764:	53                   	push   ebx
c0017765:	83 ec 2c             	sub    esp,0x2c
c0017768:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001776c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0017770:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0017774:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0017778:	fa                   	cli    
c0017779:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c001777f:	0f b6 35 25 98 02 c0 	movzx  esi,BYTE PTR ds:0xc0029825
c0017786:	89 f0                	mov    eax,esi
c0017788:	84 c0                	test   al,al
c001778a:	75 1d                	jne    c00177a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001778c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017790:	e8 47 f2 ff ff       	call   c00169dc <schedule()>
c0017795:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001779a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001779e:	48                   	dec    eax
c001779f:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00177a4:	75 d2                	jne    c0017778 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00177a6:	fb                   	sti    
c00177a7:	eb cf                	jmp    c0017778 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00177a9:	a1 28 98 02 c0       	mov    eax,ds:0xc0029828
c00177ae:	c7 05 2c 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002982c,0x0
c00177b8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00177bc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00177c0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00177c4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00177c8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00177cc:	50                   	push   eax
c00177cd:	6a 20                	push   0x20
c00177cf:	6a 00                	push   0x0
c00177d1:	68 40 98 02 c0       	push   0xc0029840
c00177d6:	e8 a1 8e fe ff       	call   c000067c <memset>
c00177db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00177e2:	e8 d0 24 ff ff       	call   c0009cb7 <malloc>
c00177e7:	83 c4 0c             	add    esp,0xc
c00177ea:	89 c3                	mov    ebx,eax
c00177ec:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c00177f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00177f6:	50                   	push   eax
c00177f7:	e8 34 5d ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00177fc:	83 c4 10             	add    esp,0x10
c00177ff:	85 db                	test   ebx,ebx
c0017801:	75 0a                	jne    c001780d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0017803:	83 ec 0c             	sub    esp,0xc
c0017806:	68 2c 47 02 c0       	push   0xc002472c
c001780b:	eb 3e                	jmp    c001784b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001780d:	50                   	push   eax
c001780e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017812:	50                   	push   eax
c0017813:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017817:	50                   	push   eax
c0017818:	53                   	push   ebx
c0017819:	e8 98 60 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0017826:	74 0a                	je     c0017832 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0017828:	83 ec 0c             	sub    esp,0xc
c001782b:	68 40 47 02 c0       	push   0xc0024740
c0017830:	eb 19                	jmp    c001784b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0017832:	51                   	push   ecx
c0017833:	51                   	push   ecx
c0017834:	6a 01                	push   0x1
c0017836:	53                   	push   ebx
c0017837:	e8 ce 5d ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001783c:	83 c4 10             	add    esp,0x10
c001783f:	85 c0                	test   eax,eax
c0017841:	74 24                	je     c0017867 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0017843:	83 ec 0c             	sub    esp,0xc
c0017846:	68 59 47 02 c0       	push   0xc0024759
c001784b:	e8 27 bb ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0017850:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017855:	83 c4 10             	add    esp,0x10
c0017858:	48                   	dec    eax
c0017859:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c001785e:	85 c0                	test   eax,eax
c0017860:	75 01                	jne    c0017863 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0017862:	fb                   	sti    
c0017863:	31 f6                	xor    esi,esi
c0017865:	eb 58                	jmp    c00178bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0017867:	0f b7 ed             	movzx  ebp,bp
c001786a:	50                   	push   eax
c001786b:	0f b7 ff             	movzx  edi,di
c001786e:	50                   	push   eax
c001786f:	55                   	push   ebp
c0017870:	57                   	push   edi
c0017871:	e8 dc fc ff ff       	call   c0017552 <Vm::realToLinear(unsigned short, unsigned short)>
c0017876:	5a                   	pop    edx
c0017877:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017879:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001787d:	51                   	push   ecx
c001787e:	50                   	push   eax
c001787f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017883:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017887:	53                   	push   ebx
c0017888:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001788b:	83 c4 14             	add    esp,0x14
c001788e:	53                   	push   ebx
c001788f:	e8 d4 5d ff ff       	call   c000d668 <File::close()>
c0017894:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0017899:	83 c4 10             	add    esp,0x10
c001789c:	48                   	dec    eax
c001789d:	c6 05 25 98 02 c0 00 	mov    BYTE PTR ds:0xc0029825,0x0
c00178a4:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00178a9:	85 c0                	test   eax,eax
c00178ab:	75 01                	jne    c00178ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00178ad:	fb                   	sti    
c00178ae:	83 ec 0c             	sub    esp,0xc
c00178b1:	ff 35 28 98 02 c0    	push   DWORD PTR ds:0xc0029828
c00178b7:	e8 dc f5 ff ff       	call   c0016e98 <unblockTask(ThreadControlBlock*)>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	83 c4 2c             	add    esp,0x2c
c00178c2:	89 f0                	mov    eax,esi
c00178c4:	5b                   	pop    ebx
c00178c5:	5e                   	pop    esi
c00178c6:	5f                   	pop    edi
c00178c7:	5d                   	pop    ebp
c00178c8:	c3                   	ret    

c00178c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00178c9:	57                   	push   edi
c00178ca:	56                   	push   esi
c00178cb:	53                   	push   ebx
c00178cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00178d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00178d8:	83 e8 06             	sub    eax,0x6
c00178db:	0f b7 c0             	movzx  eax,ax
c00178de:	50                   	push   eax
c00178df:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00178e4:	50                   	push   eax
c00178e5:	e8 68 fc ff ff       	call   c0017552 <Vm::realToLinear(unsigned short, unsigned short)>
c00178ea:	5a                   	pop    edx
c00178eb:	5e                   	pop    esi
c00178ec:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00178ef:	8d 56 fa             	lea    edx,[esi-0x6]
c00178f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00178f8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00178fb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00178fe:	83 c2 02             	add    edx,0x2
c0017901:	66 89 10             	mov    WORD PTR [eax],dx
c0017904:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0017907:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001790b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001790e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017912:	89 d6                	mov    esi,edx
c0017914:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001791a:	66 81 e6 ff fd       	and    si,0xfdff
c001791f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0017923:	74 07                	je     c001792c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0017925:	89 d6                	mov    esi,edx
c0017927:	66 81 ce 00 02       	or     si,0x200
c001792c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0017930:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017935:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017939:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0017941:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0017944:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001794c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001794f:	5b                   	pop    ebx
c0017950:	5e                   	pop    esi
c0017951:	5f                   	pop    edi
c0017952:	c3                   	ret    

c0017953 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017953:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017958:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001795d:	c1 e0 04             	shl    eax,0x4
c0017960:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017963:	c3                   	ret    

c0017964 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017964:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017969:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001796e:	c1 e0 04             	shl    eax,0x4
c0017971:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017975:	c3                   	ret    

c0017976 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017976:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001797b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017980:	c1 e0 04             	shl    eax,0x4
c0017983:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017986:	c3                   	ret    

c0017987 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017987:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001798c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017991:	c1 e0 04             	shl    eax,0x4
c0017994:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017998:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001799b:	c3                   	ret    

c001799c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001799c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00179a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00179a6:	c1 e0 04             	shl    eax,0x4
c00179a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00179ad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00179b1:	c3                   	ret    

c00179b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00179b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00179b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00179bc:	c1 e0 04             	shl    eax,0x4
c00179bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00179c3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00179c6:	c3                   	ret    

c00179c7 <Vm::faultHandler(regs*)>:
c00179c7:	55                   	push   ebp
c00179c8:	57                   	push   edi
c00179c9:	56                   	push   esi
c00179ca:	53                   	push   ebx
c00179cb:	83 ec 1c             	sub    esp,0x1c
c00179ce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00179d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00179d5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00179d9:	0f b7 f8             	movzx  edi,ax
c00179dc:	52                   	push   edx
c00179dd:	0f b7 c0             	movzx  eax,ax
c00179e0:	50                   	push   eax
c00179e1:	e8 6c fb ff ff       	call   c0017552 <Vm::realToLinear(unsigned short, unsigned short)>
c00179e6:	5a                   	pop    edx
c00179e7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00179ea:	59                   	pop    ecx
c00179eb:	89 c1                	mov    ecx,eax
c00179ed:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00179f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00179f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00179fd:	0f b7 c5             	movzx  eax,bp
c0017a00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0017a08:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a0c:	e8 41 fb ff ff       	call   c0017552 <Vm::realToLinear(unsigned short, unsigned short)>
c0017a11:	5e                   	pop    esi
c0017a12:	be 06 00 00 00       	mov    esi,0x6
c0017a17:	5a                   	pop    edx
c0017a18:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0017a1d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0017a22:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017a25:	80 fa 9d             	cmp    dl,0x9d
c0017a28:	0f 84 2c 02 00 00    	je     c0017c5a <Vm::faultHandler(regs*)+0x293>
c0017a2e:	0f 87 91 00 00 00    	ja     c0017ac5 <Vm::faultHandler(regs*)+0xfe>
c0017a34:	80 fa 66             	cmp    dl,0x66
c0017a37:	0f 84 98 01 00 00    	je     c0017bd5 <Vm::faultHandler(regs*)+0x20e>
c0017a3d:	77 47                	ja     c0017a86 <Vm::faultHandler(regs*)+0xbf>
c0017a3f:	80 fa 36             	cmp    dl,0x36
c0017a42:	0f 84 80 01 00 00    	je     c0017bc8 <Vm::faultHandler(regs*)+0x201>
c0017a48:	77 1a                	ja     c0017a64 <Vm::faultHandler(regs*)+0x9d>
c0017a4a:	80 fa 26             	cmp    dl,0x26
c0017a4d:	0f 84 4e 01 00 00    	je     c0017ba1 <Vm::faultHandler(regs*)+0x1da>
c0017a53:	80 fa 2e             	cmp    dl,0x2e
c0017a56:	0f 85 e2 05 00 00    	jne    c001803e <Vm::faultHandler(regs*)+0x677>
c0017a5c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017a5f:	31 f6                	xor    esi,esi
c0017a61:	41                   	inc    ecx
c0017a62:	eb be                	jmp    c0017a22 <Vm::faultHandler(regs*)+0x5b>
c0017a64:	80 fa 64             	cmp    dl,0x64
c0017a67:	0f 84 41 01 00 00    	je     c0017bae <Vm::faultHandler(regs*)+0x1e7>
c0017a6d:	0f 87 48 01 00 00    	ja     c0017bbb <Vm::faultHandler(regs*)+0x1f4>
c0017a73:	80 fa 3e             	cmp    dl,0x3e
c0017a76:	0f 85 c2 05 00 00    	jne    c001803e <Vm::faultHandler(regs*)+0x677>
c0017a7c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017a7f:	be 01 00 00 00       	mov    esi,0x1
c0017a84:	eb db                	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017a86:	80 fa 6d             	cmp    dl,0x6d
c0017a89:	0f 84 ec 02 00 00    	je     c0017d7b <Vm::faultHandler(regs*)+0x3b4>
c0017a8f:	77 17                	ja     c0017aa8 <Vm::faultHandler(regs*)+0xe1>
c0017a91:	80 fa 67             	cmp    dl,0x67
c0017a94:	0f 84 48 01 00 00    	je     c0017be2 <Vm::faultHandler(regs*)+0x21b>
c0017a9a:	80 fa 6c             	cmp    dl,0x6c
c0017a9d:	0f 84 69 02 00 00    	je     c0017d0c <Vm::faultHandler(regs*)+0x345>
c0017aa3:	e9 96 05 00 00       	jmp    c001803e <Vm::faultHandler(regs*)+0x677>
c0017aa8:	80 fa 6f             	cmp    dl,0x6f
c0017aab:	0f 84 f4 03 00 00    	je     c0017ea5 <Vm::faultHandler(regs*)+0x4de>
c0017ab1:	0f 82 59 03 00 00    	jb     c0017e10 <Vm::faultHandler(regs*)+0x449>
c0017ab7:	80 fa 9c             	cmp    dl,0x9c
c0017aba:	0f 84 2f 01 00 00    	je     c0017bef <Vm::faultHandler(regs*)+0x228>
c0017ac0:	e9 79 05 00 00       	jmp    c001803e <Vm::faultHandler(regs*)+0x677>
c0017ac5:	80 fa ec             	cmp    dl,0xec
c0017ac8:	0f 84 14 05 00 00    	je     c0017fe2 <Vm::faultHandler(regs*)+0x61b>
c0017ace:	77 7b                	ja     c0017b4b <Vm::faultHandler(regs*)+0x184>
c0017ad0:	80 fa e4             	cmp    dl,0xe4
c0017ad3:	0f 84 93 04 00 00    	je     c0017f6c <Vm::faultHandler(regs*)+0x5a5>
c0017ad9:	77 53                	ja     c0017b2e <Vm::faultHandler(regs*)+0x167>
c0017adb:	80 fa cd             	cmp    dl,0xcd
c0017ade:	0f 84 d9 01 00 00    	je     c0017cbd <Vm::faultHandler(regs*)+0x2f6>
c0017ae4:	80 fa cf             	cmp    dl,0xcf
c0017ae7:	0f 85 51 05 00 00    	jne    c001803e <Vm::faultHandler(regs*)+0x677>
c0017aed:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017af0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017af3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0017af7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017afa:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0017afe:	81 ca 00 02 02 00    	or     edx,0x20200
c0017b04:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017b07:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0017b0b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017b11:	66 c1 e8 09          	shr    ax,0x9
c0017b15:	83 e0 01             	and    eax,0x1
c0017b18:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017b1b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017b1e:	83 c0 06             	add    eax,0x6
c0017b21:	25 ff ff 00 00       	and    eax,0xffff
c0017b26:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017b29:	e9 0c 05 00 00       	jmp    c001803a <Vm::faultHandler(regs*)+0x673>
c0017b2e:	80 fa e6             	cmp    dl,0xe6
c0017b31:	0f 84 7f 04 00 00    	je     c0017fb6 <Vm::faultHandler(regs*)+0x5ef>
c0017b37:	0f 82 4b 04 00 00    	jb     c0017f88 <Vm::faultHandler(regs*)+0x5c1>
c0017b3d:	80 fa e7             	cmp    dl,0xe7
c0017b40:	0f 84 87 04 00 00    	je     c0017fcd <Vm::faultHandler(regs*)+0x606>
c0017b46:	e9 f3 04 00 00       	jmp    c001803e <Vm::faultHandler(regs*)+0x677>
c0017b4b:	80 fa ef             	cmp    dl,0xef
c0017b4e:	0f 84 d1 04 00 00    	je     c0018025 <Vm::faultHandler(regs*)+0x65e>
c0017b54:	77 28                	ja     c0017b7e <Vm::faultHandler(regs*)+0x1b7>
c0017b56:	80 fa ed             	cmp    dl,0xed
c0017b59:	0f 84 9f 04 00 00    	je     c0017ffe <Vm::faultHandler(regs*)+0x637>
c0017b5f:	80 fa ee             	cmp    dl,0xee
c0017b62:	0f 85 d6 04 00 00    	jne    c001803e <Vm::faultHandler(regs*)+0x677>
c0017b68:	50                   	push   eax
c0017b69:	50                   	push   eax
c0017b6a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017b6e:	50                   	push   eax
c0017b6f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017b73:	50                   	push   eax
c0017b74:	e8 a3 f9 ff ff       	call   c001751c <Vm::outbv(unsigned short, unsigned char)>
c0017b79:	e9 9f 04 00 00       	jmp    c001801d <Vm::faultHandler(regs*)+0x656>
c0017b7e:	80 fa fa             	cmp    dl,0xfa
c0017b81:	0f 84 69 01 00 00    	je     c0017cf0 <Vm::faultHandler(regs*)+0x329>
c0017b87:	80 fa fb             	cmp    dl,0xfb
c0017b8a:	0f 84 6e 01 00 00    	je     c0017cfe <Vm::faultHandler(regs*)+0x337>
c0017b90:	80 fa f3             	cmp    dl,0xf3
c0017b93:	0f 85 a5 04 00 00    	jne    c001803e <Vm::faultHandler(regs*)+0x677>
c0017b99:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017b9c:	e9 c0 fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017ba1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017ba4:	be 02 00 00 00       	mov    esi,0x2
c0017ba9:	e9 b3 fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017bae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bb1:	be 03 00 00 00       	mov    esi,0x3
c0017bb6:	e9 a6 fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017bbb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bbe:	be 04 00 00 00       	mov    esi,0x4
c0017bc3:	e9 99 fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017bc8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bcb:	be 05 00 00 00       	mov    esi,0x5
c0017bd0:	e9 8c fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017bd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bd8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0017bdd:	e9 7f fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017be2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017be5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0017bea:	e9 72 fe ff ff       	jmp    c0017a61 <Vm::faultHandler(regs*)+0x9a>
c0017bef:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017bf2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017bf6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017bfb:	74 30                	je     c0017c2d <Vm::faultHandler(regs*)+0x266>
c0017bfd:	83 e9 04             	sub    ecx,0x4
c0017c00:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017c06:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017c0c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017c0f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017c12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017c18:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017c1c:	0f 84 15 04 00 00    	je     c0018037 <Vm::faultHandler(regs*)+0x670>
c0017c22:	80 ce 02             	or     dh,0x2
c0017c25:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017c28:	e9 0a 04 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017c2d:	83 e9 02             	sub    ecx,0x2
c0017c30:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017c36:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017c39:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017c3d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017c43:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017c47:	74 05                	je     c0017c4e <Vm::faultHandler(regs*)+0x287>
c0017c49:	80 ce 02             	or     dh,0x2
c0017c4c:	eb 03                	jmp    c0017c51 <Vm::faultHandler(regs*)+0x28a>
c0017c4e:	80 e6 fd             	and    dh,0xfd
c0017c51:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017c55:	e9 dd 03 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017c5a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017c5f:	74 2a                	je     c0017c8b <Vm::faultHandler(regs*)+0x2c4>
c0017c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0017c63:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017c69:	81 ca 00 02 02 00    	or     edx,0x20200
c0017c6f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017c7a:	c1 e8 09             	shr    eax,0x9
c0017c7d:	83 e0 01             	and    eax,0x1
c0017c80:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017c83:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017c86:	83 c0 04             	add    eax,0x4
c0017c89:	eb 25                	jmp    c0017cb0 <Vm::faultHandler(regs*)+0x2e9>
c0017c8b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017c8e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017c94:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017c97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017c9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017ca0:	66 c1 e8 09          	shr    ax,0x9
c0017ca4:	83 e0 01             	and    eax,0x1
c0017ca7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017caa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017cad:	83 c0 02             	add    eax,0x2
c0017cb0:	25 ff ff 00 00       	and    eax,0xffff
c0017cb5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017cb8:	e9 7a 03 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017cbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017cc1:	3c ee                	cmp    al,0xee
c0017cc3:	75 10                	jne    c0017cd5 <Vm::faultHandler(regs*)+0x30e>
c0017cc5:	83 ec 0c             	sub    esp,0xc
c0017cc8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017ccb:	e8 e9 f8 ff ff       	call   c00175b9 <Vm::mainloop3(unsigned long)>
c0017cd0:	e9 4b 03 00 00       	jmp    c0018020 <Vm::faultHandler(regs*)+0x659>
c0017cd5:	83 ec 0c             	sub    esp,0xc
c0017cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ce0:	51                   	push   ecx
c0017ce1:	50                   	push   eax
c0017ce2:	53                   	push   ebx
c0017ce3:	e8 e1 fb ff ff       	call   c00178c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017ce8:	83 c4 20             	add    esp,0x20
c0017ceb:	e9 4a 03 00 00       	jmp    c001803a <Vm::faultHandler(regs*)+0x673>
c0017cf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017cf5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017cf9:	e9 39 03 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017cfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d03:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017d07:	e9 2b 03 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017d0c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017d0f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017d14:	74 2b                	je     c0017d41 <Vm::faultHandler(regs*)+0x37a>
c0017d16:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017d1d:	76 22                	jbe    c0017d41 <Vm::faultHandler(regs*)+0x37a>
c0017d1f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017d23:	50                   	push   eax
c0017d24:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017d28:	50                   	push   eax
c0017d29:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017d2d:	50                   	push   eax
c0017d2e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017d32:	50                   	push   eax
c0017d33:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017d37:	50                   	push   eax
c0017d38:	6a 6c                	push   0x6c
c0017d3a:	6a 6c                	push   0x6c
c0017d3c:	e9 b9 01 00 00       	jmp    c0017efa <Vm::faultHandler(regs*)+0x533>
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017d48:	0f b7 f6             	movzx  esi,si
c0017d4b:	50                   	push   eax
c0017d4c:	e8 b8 f7 ff ff       	call   c0017509 <Vm::inbv(unsigned short)>
c0017d51:	83 c4 0c             	add    esp,0xc
c0017d54:	0f b6 c0             	movzx  eax,al
c0017d57:	50                   	push   eax
c0017d58:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017d5c:	50                   	push   eax
c0017d5d:	56                   	push   esi
c0017d5e:	e8 24 fc ff ff       	call   c0017987 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017d63:	83 c4 10             	add    esp,0x10
c0017d66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d69:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017d6d:	74 03                	je     c0017d72 <Vm::faultHandler(regs*)+0x3ab>
c0017d6f:	48                   	dec    eax
c0017d70:	eb 01                	jmp    c0017d73 <Vm::faultHandler(regs*)+0x3ac>
c0017d72:	40                   	inc    eax
c0017d73:	0f b7 c0             	movzx  eax,ax
c0017d76:	e9 8d 00 00 00       	jmp    c0017e08 <Vm::faultHandler(regs*)+0x441>
c0017d7b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017d7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d81:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017d86:	74 29                	je     c0017db1 <Vm::faultHandler(regs*)+0x3ea>
c0017d88:	3d ff ff 00 00       	cmp    eax,0xffff
c0017d8d:	76 22                	jbe    c0017db1 <Vm::faultHandler(regs*)+0x3ea>
c0017d8f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017d93:	50                   	push   eax
c0017d94:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017d98:	50                   	push   eax
c0017d99:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017d9d:	50                   	push   eax
c0017d9e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017da2:	50                   	push   eax
c0017da3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017da7:	50                   	push   eax
c0017da8:	6a 6d                	push   0x6d
c0017daa:	6a 6d                	push   0x6d
c0017dac:	e9 49 01 00 00       	jmp    c0017efa <Vm::faultHandler(regs*)+0x533>
c0017db1:	0f b7 c8             	movzx  ecx,ax
c0017db4:	0f b7 f6             	movzx  esi,si
c0017db7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017dba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017dbf:	74 20                	je     c0017de1 <Vm::faultHandler(regs*)+0x41a>
c0017dc1:	ed                   	in     eax,dx
c0017dc2:	55                   	push   ebp
c0017dc3:	50                   	push   eax
c0017dc4:	51                   	push   ecx
c0017dc5:	56                   	push   esi
c0017dc6:	e8 e7 fb ff ff       	call   c00179b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017dcb:	83 c4 10             	add    esp,0x10
c0017dce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dd1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017dd5:	74 05                	je     c0017ddc <Vm::faultHandler(regs*)+0x415>
c0017dd7:	83 e8 04             	sub    eax,0x4
c0017dda:	eb 27                	jmp    c0017e03 <Vm::faultHandler(regs*)+0x43c>
c0017ddc:	83 c0 04             	add    eax,0x4
c0017ddf:	eb 22                	jmp    c0017e03 <Vm::faultHandler(regs*)+0x43c>
c0017de1:	66 ed                	in     ax,dx
c0017de3:	0f b7 c0             	movzx  eax,ax
c0017de6:	57                   	push   edi
c0017de7:	50                   	push   eax
c0017de8:	51                   	push   ecx
c0017de9:	56                   	push   esi
c0017dea:	e8 ad fb ff ff       	call   c001799c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017def:	83 c4 10             	add    esp,0x10
c0017df2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017df5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017df9:	74 05                	je     c0017e00 <Vm::faultHandler(regs*)+0x439>
c0017dfb:	83 e8 02             	sub    eax,0x2
c0017dfe:	eb 03                	jmp    c0017e03 <Vm::faultHandler(regs*)+0x43c>
c0017e00:	83 c0 02             	add    eax,0x2
c0017e03:	25 ff ff 00 00       	and    eax,0xffff
c0017e08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017e0b:	e9 27 02 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017e10:	8d 46 ff             	lea    eax,[esi-0x1]
c0017e13:	3c 05                	cmp    al,0x5
c0017e15:	77 24                	ja     c0017e3b <Vm::faultHandler(regs*)+0x474>
c0017e17:	0f b6 c0             	movzx  eax,al
c0017e1a:	ff 24 85 cc 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb834]
c0017e21:	0f b7 fd             	movzx  edi,bp
c0017e24:	eb 15                	jmp    c0017e3b <Vm::faultHandler(regs*)+0x474>
c0017e26:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017e2a:	eb 0f                	jmp    c0017e3b <Vm::faultHandler(regs*)+0x474>
c0017e2c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017e30:	eb 09                	jmp    c0017e3b <Vm::faultHandler(regs*)+0x474>
c0017e32:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017e36:	eb 03                	jmp    c0017e3b <Vm::faultHandler(regs*)+0x474>
c0017e38:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017e3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e3e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017e43:	74 29                	je     c0017e6e <Vm::faultHandler(regs*)+0x4a7>
c0017e45:	3d ff ff 00 00       	cmp    eax,0xffff
c0017e4a:	76 22                	jbe    c0017e6e <Vm::faultHandler(regs*)+0x4a7>
c0017e4c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017e50:	50                   	push   eax
c0017e51:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017e55:	50                   	push   eax
c0017e56:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017e5a:	50                   	push   eax
c0017e5b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017e5f:	50                   	push   eax
c0017e60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017e64:	50                   	push   eax
c0017e65:	6a 6e                	push   0x6e
c0017e67:	6a 6e                	push   0x6e
c0017e69:	e9 8c 00 00 00       	jmp    c0017efa <Vm::faultHandler(regs*)+0x533>
c0017e6e:	0f b7 c0             	movzx  eax,ax
c0017e71:	52                   	push   edx
c0017e72:	52                   	push   edx
c0017e73:	50                   	push   eax
c0017e74:	57                   	push   edi
c0017e75:	e8 d9 fa ff ff       	call   c0017953 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017e7a:	59                   	pop    ecx
c0017e7b:	0f b6 c0             	movzx  eax,al
c0017e7e:	5e                   	pop    esi
c0017e7f:	50                   	push   eax
c0017e80:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017e84:	50                   	push   eax
c0017e85:	e8 92 f6 ff ff       	call   c001751c <Vm::outbv(unsigned short, unsigned char)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e90:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017e94:	74 03                	je     c0017e99 <Vm::faultHandler(regs*)+0x4d2>
c0017e96:	48                   	dec    eax
c0017e97:	eb 01                	jmp    c0017e9a <Vm::faultHandler(regs*)+0x4d3>
c0017e99:	40                   	inc    eax
c0017e9a:	0f b7 c0             	movzx  eax,ax
c0017e9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017ea0:	e9 92 01 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017ea5:	8d 46 ff             	lea    eax,[esi-0x1]
c0017ea8:	3c 05                	cmp    al,0x5
c0017eaa:	77 1f                	ja     c0017ecb <Vm::faultHandler(regs*)+0x504>
c0017eac:	0f b6 c0             	movzx  eax,al
c0017eaf:	ff 24 85 e4 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb81c]
c0017eb6:	89 ef                	mov    edi,ebp
c0017eb8:	eb 11                	jmp    c0017ecb <Vm::faultHandler(regs*)+0x504>
c0017eba:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017ebd:	eb 0c                	jmp    c0017ecb <Vm::faultHandler(regs*)+0x504>
c0017ebf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0017ec2:	eb 07                	jmp    c0017ecb <Vm::faultHandler(regs*)+0x504>
c0017ec4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017ec7:	eb 02                	jmp    c0017ecb <Vm::faultHandler(regs*)+0x504>
c0017ec9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017ecb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017ece:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0017ed3:	74 37                	je     c0017f0c <Vm::faultHandler(regs*)+0x545>
c0017ed5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017edb:	76 2f                	jbe    c0017f0c <Vm::faultHandler(regs*)+0x545>
c0017edd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017ee1:	50                   	push   eax
c0017ee2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017ee6:	50                   	push   eax
c0017ee7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017eeb:	50                   	push   eax
c0017eec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017ef0:	50                   	push   eax
c0017ef1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ef5:	50                   	push   eax
c0017ef6:	6a 6f                	push   0x6f
c0017ef8:	6a 6f                	push   0x6f
c0017efa:	68 72 47 02 c0       	push   0xc0024772
c0017eff:	e8 c1 50 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017f04:	83 c4 20             	add    esp,0x20
c0017f07:	e9 86 01 00 00       	jmp    c0018092 <Vm::faultHandler(regs*)+0x6cb>
c0017f0c:	0f b7 d7             	movzx  edx,di
c0017f0f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017f12:	0f b7 c6             	movzx  eax,si
c0017f15:	81 e1 00 04 00 00    	and    ecx,0x400
c0017f1b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017f1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017f23:	74 1d                	je     c0017f42 <Vm::faultHandler(regs*)+0x57b>
c0017f25:	55                   	push   ebp
c0017f26:	55                   	push   ebp
c0017f27:	50                   	push   eax
c0017f28:	52                   	push   edx
c0017f29:	e8 48 fa ff ff       	call   c0017976 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0017f2e:	83 c4 10             	add    esp,0x10
c0017f31:	89 fa                	mov    edx,edi
c0017f33:	ef                   	out    dx,eax
c0017f34:	85 c9                	test   ecx,ecx
c0017f36:	74 05                	je     c0017f3d <Vm::faultHandler(regs*)+0x576>
c0017f38:	83 ee 04             	sub    esi,0x4
c0017f3b:	eb 21                	jmp    c0017f5e <Vm::faultHandler(regs*)+0x597>
c0017f3d:	83 c6 04             	add    esi,0x4
c0017f40:	eb 1c                	jmp    c0017f5e <Vm::faultHandler(regs*)+0x597>
c0017f42:	55                   	push   ebp
c0017f43:	55                   	push   ebp
c0017f44:	50                   	push   eax
c0017f45:	52                   	push   edx
c0017f46:	e8 19 fa ff ff       	call   c0017964 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	89 fa                	mov    edx,edi
c0017f50:	66 ef                	out    dx,ax
c0017f52:	85 c9                	test   ecx,ecx
c0017f54:	74 05                	je     c0017f5b <Vm::faultHandler(regs*)+0x594>
c0017f56:	83 ee 02             	sub    esi,0x2
c0017f59:	eb 03                	jmp    c0017f5e <Vm::faultHandler(regs*)+0x597>
c0017f5b:	83 c6 02             	add    esi,0x2
c0017f5e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017f64:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017f67:	e9 cb 00 00 00       	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0017f6c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017f73:	83 ec 0c             	sub    esp,0xc
c0017f76:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f7a:	50                   	push   eax
c0017f7b:	e8 89 f5 ff ff       	call   c0017509 <Vm::inbv(unsigned short)>
c0017f80:	0f b6 c0             	movzx  eax,al
c0017f83:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017f86:	eb 3f                	jmp    c0017fc7 <Vm::faultHandler(regs*)+0x600>
c0017f88:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017f8d:	74 07                	je     c0017f96 <Vm::faultHandler(regs*)+0x5cf>
c0017f8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017f93:	ed                   	in     eax,dx
c0017f94:	eb 14                	jmp    c0017faa <Vm::faultHandler(regs*)+0x5e3>
c0017f96:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017f99:	66 31 f6             	xor    si,si
c0017f9c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017f9f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017fa3:	66 ed                	in     ax,dx
c0017fa5:	0f b7 c0             	movzx  eax,ax
c0017fa8:	09 f0                	or     eax,esi
c0017faa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017fad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017fb1:	e9 84 00 00 00       	jmp    c001803a <Vm::faultHandler(regs*)+0x673>
c0017fb6:	52                   	push   edx
c0017fb7:	52                   	push   edx
c0017fb8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017fbc:	50                   	push   eax
c0017fbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017fc1:	50                   	push   eax
c0017fc2:	e8 55 f5 ff ff       	call   c001751c <Vm::outbv(unsigned short, unsigned char)>
c0017fc7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017fcb:	eb 53                	jmp    c0018020 <Vm::faultHandler(regs*)+0x659>
c0017fcd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017fd0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017fd4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0017fd9:	74 03                	je     c0017fde <Vm::faultHandler(regs*)+0x617>
c0017fdb:	ef                   	out    dx,eax
c0017fdc:	eb cf                	jmp    c0017fad <Vm::faultHandler(regs*)+0x5e6>
c0017fde:	66 ef                	out    dx,ax
c0017fe0:	eb cb                	jmp    c0017fad <Vm::faultHandler(regs*)+0x5e6>
c0017fe2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017fe9:	83 ec 0c             	sub    esp,0xc
c0017fec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017ff0:	50                   	push   eax
c0017ff1:	e8 13 f5 ff ff       	call   c0017509 <Vm::inbv(unsigned short)>
c0017ff6:	0f b6 c0             	movzx  eax,al
c0017ff9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017ffc:	eb 1f                	jmp    c001801d <Vm::faultHandler(regs*)+0x656>
c0017ffe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018001:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018006:	74 03                	je     c001800b <Vm::faultHandler(regs*)+0x644>
c0018008:	ed                   	in     eax,dx
c0018009:	eb 0d                	jmp    c0018018 <Vm::faultHandler(regs*)+0x651>
c001800b:	66 ed                	in     ax,dx
c001800d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018010:	0f b7 c0             	movzx  eax,ax
c0018013:	66 31 d2             	xor    dx,dx
c0018016:	09 d0                	or     eax,edx
c0018018:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001801b:	eb 1a                	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c001801d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	eb 15                	jmp    c001803a <Vm::faultHandler(regs*)+0x673>
c0018025:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018028:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001802b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018030:	74 03                	je     c0018035 <Vm::faultHandler(regs*)+0x66e>
c0018032:	ef                   	out    dx,eax
c0018033:	eb 02                	jmp    c0018037 <Vm::faultHandler(regs*)+0x670>
c0018035:	66 ef                	out    dx,ax
c0018037:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001803a:	b0 01                	mov    al,0x1
c001803c:	eb 56                	jmp    c0018094 <Vm::faultHandler(regs*)+0x6cd>
c001803e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018042:	50                   	push   eax
c0018043:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018047:	50                   	push   eax
c0018048:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001804c:	50                   	push   eax
c001804d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018051:	50                   	push   eax
c0018052:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018056:	50                   	push   eax
c0018057:	52                   	push   edx
c0018058:	52                   	push   edx
c0018059:	68 9f 47 02 c0       	push   0xc002479f
c001805e:	e8 62 4f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018063:	83 c4 20             	add    esp,0x20
c0018066:	83 ec 0c             	sub    esp,0xc
c0018069:	6a 60                	push   0x60
c001806b:	e8 99 f4 ff ff       	call   c0017509 <Vm::inbv(unsigned short)>
c0018070:	83 c4 10             	add    esp,0x10
c0018073:	3c 1c                	cmp    al,0x1c
c0018075:	74 04                	je     c001807b <Vm::faultHandler(regs*)+0x6b4>
c0018077:	3c 5a                	cmp    al,0x5a
c0018079:	75 eb                	jne    c0018066 <Vm::faultHandler(regs*)+0x69f>
c001807b:	3c 5a                	cmp    al,0x5a
c001807d:	74 04                	je     c0018083 <Vm::faultHandler(regs*)+0x6bc>
c001807f:	3c 1c                	cmp    al,0x1c
c0018081:	75 0f                	jne    c0018092 <Vm::faultHandler(regs*)+0x6cb>
c0018083:	83 ec 0c             	sub    esp,0xc
c0018086:	6a 60                	push   0x60
c0018088:	e8 7c f4 ff ff       	call   c0017509 <Vm::inbv(unsigned short)>
c001808d:	83 c4 10             	add    esp,0x10
c0018090:	eb e9                	jmp    c001807b <Vm::faultHandler(regs*)+0x6b4>
c0018092:	31 c0                	xor    eax,eax
c0018094:	83 c4 1c             	add    esp,0x1c
c0018097:	5b                   	pop    ebx
c0018098:	5e                   	pop    esi
c0018099:	5f                   	pop    edi
c001809a:	5d                   	pop    ebp
c001809b:	c3                   	ret    

c001809c <Vm::fpuInternalTo32(unsigned long long)>:
c001809c:	57                   	push   edi
c001809d:	56                   	push   esi
c001809e:	53                   	push   ebx
c001809f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a7:	89 d6                	mov    esi,edx
c00180a9:	89 d7                	mov    edi,edx
c00180ab:	89 c1                	mov    ecx,eax
c00180ad:	c1 ef 14             	shr    edi,0x14
c00180b0:	89 d3                	mov    ebx,edx
c00180b2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00180b8:	31 d2                	xor    edx,edx
c00180ba:	89 f8                	mov    eax,edi
c00180bc:	81 e6 00 00 00 80    	and    esi,0x80000000
c00180c2:	bf ff 00 00 00       	mov    edi,0xff
c00180c7:	05 80 fc ff ff       	add    eax,0xfffffc80
c00180cc:	83 d2 ff             	adc    edx,0xffffffff
c00180cf:	39 c7                	cmp    edi,eax
c00180d1:	bf 00 00 00 00       	mov    edi,0x0
c00180d6:	19 d7                	sbb    edi,edx
c00180d8:	72 16                	jb     c00180f0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c00180da:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c00180de:	c1 e0 17             	shl    eax,0x17
c00180e1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00180e7:	09 f1                	or     ecx,esi
c00180e9:	09 c1                	or     ecx,eax
c00180eb:	89 cf                	mov    edi,ecx
c00180ed:	eb 05                	jmp    c00180f4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00180ef:	90                   	nop
c00180f0:	31 ff                	xor    edi,edi
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	89 f8                	mov    eax,edi
c00180f6:	5b                   	pop    ebx
c00180f7:	5e                   	pop    esi
c00180f8:	5f                   	pop    edi
c00180f9:	c3                   	ret    

c00180fa <Vm::fpuInternalTo64(unsigned long long)>:
c00180fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018102:	c3                   	ret    

c0018103 <Vm::fpu32ToInternal(unsigned int)>:
c0018103:	57                   	push   edi
c0018104:	31 ff                	xor    edi,edi
c0018106:	56                   	push   esi
c0018107:	53                   	push   ebx
c0018108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001810c:	89 cb                	mov    ebx,ecx
c001810e:	89 ce                	mov    esi,ecx
c0018110:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0018116:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001811c:	c1 e9 17             	shr    ecx,0x17
c001811f:	89 f0                	mov    eax,esi
c0018121:	0f b6 d1             	movzx  edx,cl
c0018124:	81 c2 80 03 00 00    	add    edx,0x380
c001812a:	89 d1                	mov    ecx,edx
c001812c:	89 fa                	mov    edx,edi
c001812e:	c1 e1 14             	shl    ecx,0x14
c0018131:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0018135:	c1 e0 1d             	shl    eax,0x1d
c0018138:	89 d7                	mov    edi,edx
c001813a:	89 c6                	mov    esi,eax
c001813c:	89 ca                	mov    edx,ecx
c001813e:	89 f0                	mov    eax,esi
c0018140:	09 fa                	or     edx,edi
c0018142:	09 da                	or     edx,ebx
c0018144:	5b                   	pop    ebx
c0018145:	5e                   	pop    esi
c0018146:	5f                   	pop    edi
c0018147:	c3                   	ret    

c0018148 <Vm::fpu64ToInternal(unsigned long long)>:
c0018148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001814c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018150:	c3                   	ret    

c0018151 <Vm::fpuFloatToLong(unsigned long long)>:
c0018151:	57                   	push   edi
c0018152:	31 c0                	xor    eax,eax
c0018154:	56                   	push   esi
c0018155:	31 d2                	xor    edx,edx
c0018157:	53                   	push   ebx
c0018158:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001815c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018160:	89 d9                	mov    ecx,ebx
c0018162:	c1 e9 14             	shr    ecx,0x14
c0018165:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001816b:	89 cf                	mov    edi,ecx
c001816d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0018173:	78 37                	js     c00181ac <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0018175:	89 d9                	mov    ecx,ebx
c0018177:	89 f0                	mov    eax,esi
c0018179:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001817f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0018185:	89 ca                	mov    edx,ecx
c0018187:	b9 34 00 00 00       	mov    ecx,0x34
c001818c:	29 f9                	sub    ecx,edi
c001818e:	0f ad d0             	shrd   eax,edx,cl
c0018191:	d3 fa                	sar    edx,cl
c0018193:	f6 c1 20             	test   cl,0x20
c0018196:	74 08                	je     c00181a0 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0018198:	89 d0                	mov    eax,edx
c001819a:	c1 fa 1f             	sar    edx,0x1f
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	85 db                	test   ebx,ebx
c00181a2:	79 08                	jns    c00181ac <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c00181a4:	f7 d8                	neg    eax
c00181a6:	83 d2 00             	adc    edx,0x0
c00181a9:	f7 da                	neg    edx
c00181ab:	90                   	nop
c00181ac:	5b                   	pop    ebx
c00181ad:	5e                   	pop    esi
c00181ae:	5f                   	pop    edi
c00181af:	c3                   	ret    

c00181b0 <Vm::fpuULongToFloat(unsigned long long)>:
c00181b0:	57                   	push   edi
c00181b1:	31 c9                	xor    ecx,ecx
c00181b3:	56                   	push   esi
c00181b4:	53                   	push   ebx
c00181b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181b9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00181bd:	8d 76 00             	lea    esi,[esi+0x0]
c00181c0:	0f ba e7 14          	bt     edi,0x14
c00181c4:	72 0a                	jb     c00181d0 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c00181c6:	01 f6                	add    esi,esi
c00181c8:	11 ff                	adc    edi,edi
c00181ca:	41                   	inc    ecx
c00181cb:	eb f3                	jmp    c00181c0 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c00181cd:	8d 76 00             	lea    esi,[esi+0x0]
c00181d0:	89 fa                	mov    edx,edi
c00181d2:	89 f0                	mov    eax,esi
c00181d4:	bb 33 04 00 00       	mov    ebx,0x433
c00181d9:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00181df:	29 cb                	sub    ebx,ecx
c00181e1:	89 d9                	mov    ecx,ebx
c00181e3:	5b                   	pop    ebx
c00181e4:	c1 e1 14             	shl    ecx,0x14
c00181e7:	5e                   	pop    esi
c00181e8:	09 ca                	or     edx,ecx
c00181ea:	5f                   	pop    edi
c00181eb:	c3                   	ret    

c00181ec <Vm::fpuLongToFloat(long long)>:
c00181ec:	56                   	push   esi
c00181ed:	31 c0                	xor    eax,eax
c00181ef:	53                   	push   ebx
c00181f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00181f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00181f8:	39 c8                	cmp    eax,ecx
c00181fa:	19 d8                	sbb    eax,ebx
c00181fc:	7d 06                	jge    c0018204 <Vm::fpuLongToFloat(long long)+0x18>
c00181fe:	31 f6                	xor    esi,esi
c0018200:	eb 0e                	jmp    c0018210 <Vm::fpuLongToFloat(long long)+0x24>
c0018202:	66 90                	xchg   ax,ax
c0018204:	f7 d9                	neg    ecx
c0018206:	be 01 00 00 00       	mov    esi,0x1
c001820b:	83 d3 00             	adc    ebx,0x0
c001820e:	f7 db                	neg    ebx
c0018210:	31 c0                	xor    eax,eax
c0018212:	66 90                	xchg   ax,ax
c0018214:	0f ba e3 14          	bt     ebx,0x14
c0018218:	72 0a                	jb     c0018224 <Vm::fpuLongToFloat(long long)+0x38>
c001821a:	01 c9                	add    ecx,ecx
c001821c:	11 db                	adc    ebx,ebx
c001821e:	40                   	inc    eax
c001821f:	eb f3                	jmp    c0018214 <Vm::fpuLongToFloat(long long)+0x28>
c0018221:	8d 76 00             	lea    esi,[esi+0x0]
c0018224:	ba 33 04 00 00       	mov    edx,0x433
c0018229:	29 c2                	sub    edx,eax
c001822b:	89 c8                	mov    eax,ecx
c001822d:	c1 e2 14             	shl    edx,0x14
c0018230:	89 d9                	mov    ecx,ebx
c0018232:	89 f3                	mov    ebx,esi
c0018234:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001823a:	09 ca                	or     edx,ecx
c001823c:	84 db                	test   bl,bl
c001823e:	74 08                	je     c0018248 <Vm::fpuLongToFloat(long long)+0x5c>
c0018240:	81 ca 00 00 00 80    	or     edx,0x80000000
c0018246:	66 90                	xchg   ax,ax
c0018248:	5b                   	pop    ebx
c0018249:	5e                   	pop    esi
c001824a:	c3                   	ret    

c001824b <Vm::fpuGet0()>:
c001824b:	31 c0                	xor    eax,eax
c001824d:	31 d2                	xor    edx,edx
c001824f:	c3                   	ret    

c0018250 <Vm::fpuGet1()>:
c0018250:	b8 01 00 00 00       	mov    eax,0x1
c0018255:	31 d2                	xor    edx,edx
c0018257:	c3                   	ret    

c0018258 <Vm::fpuGetPi()>:
c0018258:	b8 03 00 00 00       	mov    eax,0x3
c001825d:	31 d2                	xor    edx,edx
c001825f:	c3                   	ret    

c0018260 <Vm::fpuGetLog2E()>:
c0018260:	83 ec 18             	sub    esp,0x18
c0018263:	68 fc 47 02 c0       	push   0xc00247fc
c0018268:	e8 0a b1 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001826d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018272:	31 d2                	xor    edx,edx
c0018274:	83 c4 1c             	add    esp,0x1c
c0018277:	c3                   	ret    

c0018278 <Vm::fpuGetLogE2()>:
c0018278:	83 ec 18             	sub    esp,0x18
c001827b:	68 08 48 02 c0       	push   0xc0024808
c0018280:	e8 f2 b0 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0018285:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001828a:	31 d2                	xor    edx,edx
c001828c:	83 c4 1c             	add    esp,0x1c
c001828f:	c3                   	ret    

c0018290 <Vm::fpuGetLog210()>:
c0018290:	83 ec 18             	sub    esp,0x18
c0018293:	68 14 48 02 c0       	push   0xc0024814
c0018298:	e8 da b0 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001829d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00182a2:	31 d2                	xor    edx,edx
c00182a4:	83 c4 1c             	add    esp,0x1c
c00182a7:	c3                   	ret    

c00182a8 <Vm::fpuGetLog102()>:
c00182a8:	83 ec 18             	sub    esp,0x18
c00182ab:	68 21 48 02 c0       	push   0xc0024821
c00182b0:	e8 c2 b0 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00182b5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00182ba:	31 d2                	xor    edx,edx
c00182bc:	83 c4 1c             	add    esp,0x1c
c00182bf:	c3                   	ret    

c00182c0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00182c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182c4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00182c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182cc:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00182d0:	0f 92 c0             	setb   al
c00182d3:	c3                   	ret    

c00182d4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00182d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00182d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182dc:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00182e0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00182e4:	09 c2                	or     edx,eax
c00182e6:	0f 94 c0             	sete   al
c00182e9:	c3                   	ret    

c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00182ea:	57                   	push   edi
c00182eb:	56                   	push   esi
c00182ec:	53                   	push   ebx
c00182ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00182f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00182f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00182fd:	57                   	push   edi
c00182fe:	56                   	push   esi
c00182ff:	53                   	push   ebx
c0018300:	51                   	push   ecx
c0018301:	e8 ce ff ff ff       	call   c00182d4 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0018306:	83 c4 10             	add    esp,0x10
c0018309:	88 c2                	mov    dl,al
c001830b:	31 c0                	xor    eax,eax
c001830d:	84 d2                	test   dl,dl
c001830f:	75 0f                	jne    c0018320 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0018311:	57                   	push   edi
c0018312:	56                   	push   esi
c0018313:	53                   	push   ebx
c0018314:	51                   	push   ecx
c0018315:	e8 a6 ff ff ff       	call   c00182c0 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001831a:	83 c4 10             	add    esp,0x10
c001831d:	8d 76 00             	lea    esi,[esi+0x0]
c0018320:	83 e0 01             	and    eax,0x1
c0018323:	5b                   	pop    ebx
c0018324:	88 c1                	mov    cl,al
c0018326:	83 e2 01             	and    edx,0x1
c0018329:	a0 61 98 02 c0       	mov    al,ds:0xc0029861
c001832e:	c1 e2 06             	shl    edx,0x6
c0018331:	83 e0 ba             	and    eax,0xffffffba
c0018334:	5e                   	pop    esi
c0018335:	09 c8                	or     eax,ecx
c0018337:	5f                   	pop    edi
c0018338:	09 d0                	or     eax,edx
c001833a:	a2 61 98 02 c0       	mov    ds:0xc0029861,al
c001833f:	c3                   	ret    

c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0018340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018344:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018348:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001834c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0018350:	c3                   	ret    

c0018351 <Vm::fpuAbs(unsigned long long)>:
c0018351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018359:	c3                   	ret    

c001835a <Vm::fpuChs(unsigned long long)>:
c001835a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001835e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018362:	f7 d8                	neg    eax
c0018364:	83 d2 00             	adc    edx,0x0
c0018367:	f7 da                	neg    edx
c0018369:	c3                   	ret    

c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001836a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001836e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0018373:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0018377:	eb c7                	jmp    c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0018379:	53                   	push   ebx
c001837a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001837e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018382:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018386:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001838a:	0f af ca             	imul   ecx,edx
c001838d:	0f af d8             	imul   ebx,eax
c0018390:	f7 e2                	mul    edx
c0018392:	01 d9                	add    ecx,ebx
c0018394:	5b                   	pop    ebx
c0018395:	01 ca                	add    edx,ecx
c0018397:	c3                   	ret    

c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0018398:	83 ec 0c             	sub    esp,0xc
c001839b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001839f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183ab:	e8 90 8f 00 00       	call   c0021340 <__udivdi3>
c00183b0:	83 c4 1c             	add    esp,0x1c
c00183b3:	c3                   	ret    

c00183b4 <Vm::fpuSquare(unsigned long long)>:
c00183b4:	50                   	push   eax
c00183b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00183bd:	52                   	push   edx
c00183be:	50                   	push   eax
c00183bf:	52                   	push   edx
c00183c0:	50                   	push   eax
c00183c1:	e8 b3 ff ff ff       	call   c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00183c6:	83 c4 14             	add    esp,0x14
c00183c9:	c3                   	ret    

c00183ca <Vm::fpuGetReg(int)>:
c00183ca:	83 ec 0c             	sub    esp,0xc
c00183cd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00183d2:	76 10                	jbe    c00183e4 <Vm::fpuGetReg(int)+0x1a>
c00183d4:	83 ec 0c             	sub    esp,0xc
c00183d7:	68 2e 48 02 c0       	push   0xc002482e
c00183dc:	e8 96 af ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00183e1:	83 c4 10             	add    esp,0x10
c00183e4:	a0 61 98 02 c0       	mov    al,ds:0xc0029861
c00183e9:	b9 08 00 00 00       	mov    ecx,0x8
c00183ee:	c0 e8 03             	shr    al,0x3
c00183f1:	83 e0 07             	and    eax,0x7
c00183f4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00183f8:	99                   	cdq    
c00183f9:	f7 f9                	idiv   ecx
c00183fb:	8b 04 d5 64 98 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd679c]
c0018402:	8b 14 d5 68 98 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6798]
c0018409:	83 c4 0c             	add    esp,0xc
c001840c:	c3                   	ret    

c001840d <Vm::fpuSetReg(int, unsigned long long)>:
c001840d:	57                   	push   edi
c001840e:	56                   	push   esi
c001840f:	52                   	push   edx
c0018410:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018414:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018418:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001841d:	76 11                	jbe    c0018430 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001841f:	83 ec 0c             	sub    esp,0xc
c0018422:	68 41 48 02 c0       	push   0xc0024841
c0018427:	e8 4b af ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	90                   	nop
c0018430:	a0 61 98 02 c0       	mov    al,ds:0xc0029861
c0018435:	b9 08 00 00 00       	mov    ecx,0x8
c001843a:	c0 e8 03             	shr    al,0x3
c001843d:	83 e0 07             	and    eax,0x7
c0018440:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018444:	99                   	cdq    
c0018445:	f7 f9                	idiv   ecx
c0018447:	89 34 d5 64 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd679c],esi
c001844e:	89 3c d5 68 98 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6798],edi
c0018455:	58                   	pop    eax
c0018456:	5e                   	pop    esi
c0018457:	5f                   	pop    edi
c0018458:	c3                   	ret    

c0018459 <Vm::fpuPush(unsigned long long)>:
c0018459:	a0 61 98 02 c0       	mov    al,ds:0xc0029861
c001845e:	c0 e8 03             	shr    al,0x3
c0018461:	83 e0 07             	and    eax,0x7
c0018464:	83 c0 07             	add    eax,0x7
c0018467:	88 c2                	mov    dl,al
c0018469:	83 e0 07             	and    eax,0x7
c001846c:	83 e2 07             	and    edx,0x7
c001846f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0018476:	8a 15 61 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029861
c001847c:	83 e2 c7             	and    edx,0xffffffc7
c001847f:	09 ca                	or     edx,ecx
c0018481:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018485:	88 15 61 98 02 c0    	mov    BYTE PTR ds:0xc0029861,dl
c001848b:	89 0c c5 68 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6798],ecx
c0018492:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018496:	89 14 c5 64 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd679c],edx
c001849d:	a1 a4 98 02 c0       	mov    eax,ds:0xc00298a4
c00184a2:	83 f8 08             	cmp    eax,0x8
c00184a5:	75 09                	jne    c00184b0 <Vm::fpuPush(unsigned long long)+0x57>
c00184a7:	80 0d 60 98 02 c0 40 	or     BYTE PTR ds:0xc0029860,0x40
c00184ae:	c3                   	ret    
c00184af:	90                   	nop
c00184b0:	40                   	inc    eax
c00184b1:	a3 a4 98 02 c0       	mov    ds:0xc00298a4,eax
c00184b6:	c3                   	ret    

c00184b7 <Vm::fpuPop()>:
c00184b7:	8a 0d 61 98 02 c0    	mov    cl,BYTE PTR ds:0xc0029861
c00184bd:	53                   	push   ebx
c00184be:	c0 e9 03             	shr    cl,0x3
c00184c1:	8a 1d 61 98 02 c0    	mov    bl,BYTE PTR ds:0xc0029861
c00184c7:	83 e1 07             	and    ecx,0x7
c00184ca:	83 e3 c7             	and    ebx,0xffffffc7
c00184cd:	8b 04 cd 64 98 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd679c]
c00184d4:	8b 14 cd 68 98 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6798]
c00184db:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00184e2:	83 e1 38             	and    ecx,0x38
c00184e5:	09 d9                	or     ecx,ebx
c00184e7:	88 0d 61 98 02 c0    	mov    BYTE PTR ds:0xc0029861,cl
c00184ed:	8b 0d a4 98 02 c0    	mov    ecx,DWORD PTR ds:0xc00298a4
c00184f3:	85 c9                	test   ecx,ecx
c00184f5:	74 09                	je     c0018500 <Vm::fpuPop()+0x49>
c00184f7:	49                   	dec    ecx
c00184f8:	89 0d a4 98 02 c0    	mov    DWORD PTR ds:0xc00298a4,ecx
c00184fe:	eb 08                	jmp    c0018508 <Vm::fpuPop()+0x51>
c0018500:	80 0d 60 98 02 c0 40 	or     BYTE PTR ds:0xc0029860,0x40
c0018507:	90                   	nop
c0018508:	5b                   	pop    ebx
c0018509:	c3                   	ret    

c001850a <Vm::x87Handler(regs*)>:
c001850a:	55                   	push   ebp
c001850b:	57                   	push   edi
c001850c:	56                   	push   esi
c001850d:	53                   	push   ebx
c001850e:	83 ec 1c             	sub    esp,0x1c
c0018511:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018515:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001851a:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001851d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0018525:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0018529:	50                   	push   eax
c001852a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001852e:	50                   	push   eax
c001852f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018533:	50                   	push   eax
c0018534:	53                   	push   ebx
c0018535:	e8 56 a5 ff ff       	call   c0012a90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001853a:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001853d:	83 c4 10             	add    esp,0x10
c0018540:	89 c6                	mov    esi,eax
c0018542:	80 fa d9             	cmp    dl,0xd9
c0018545:	0f 85 79 01 00 00    	jne    c00186c4 <Vm::x87Handler(regs*)+0x1ba>
c001854b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001854f:	8d 50 20             	lea    edx,[eax+0x20]
c0018552:	80 fa 0e             	cmp    dl,0xe
c0018555:	0f 87 a5 00 00 00    	ja     c0018600 <Vm::x87Handler(regs*)+0xf6>
c001855b:	0f b6 d2             	movzx  edx,dl
c001855e:	ff 24 95 54 48 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb7ac]
c0018565:	8d 76 00             	lea    esi,[esi+0x0]
c0018568:	e8 de fc ff ff       	call   c001824b <Vm::fpuGet0()>
c001856d:	eb 09                	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c001856f:	90                   	nop
c0018570:	e8 db fc ff ff       	call   c0018250 <Vm::fpuGet1()>
c0018575:	8d 76 00             	lea    esi,[esi+0x0]
c0018578:	57                   	push   edi
c0018579:	57                   	push   edi
c001857a:	66 90                	xchg   ax,ax
c001857c:	52                   	push   edx
c001857d:	50                   	push   eax
c001857e:	e8 d6 fe ff ff       	call   c0018459 <Vm::fpuPush(unsigned long long)>
c0018583:	90                   	nop
c0018584:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	90                   	nop
c001858c:	b0 01                	mov    al,0x1
c001858e:	e9 89 0a 00 00       	jmp    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018593:	90                   	nop
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	6a 00                	push   0x0
c0018599:	e8 2c fe ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001859e:	59                   	pop    ecx
c001859f:	5e                   	pop    esi
c00185a0:	52                   	push   edx
c00185a1:	50                   	push   eax
c00185a2:	e8 b3 fd ff ff       	call   c001835a <Vm::fpuChs(unsigned long long)>
c00185a7:	eb 17                	jmp    c00185c0 <Vm::x87Handler(regs*)+0xb6>
c00185a9:	8d 76 00             	lea    esi,[esi+0x0]
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	6a 00                	push   0x0
c00185b1:	e8 14 fe ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00185b6:	5f                   	pop    edi
c00185b7:	5d                   	pop    ebp
c00185b8:	52                   	push   edx
c00185b9:	50                   	push   eax
c00185ba:	e8 92 fd ff ff       	call   c0018351 <Vm::fpuAbs(unsigned long long)>
c00185bf:	90                   	nop
c00185c0:	83 c4 0c             	add    esp,0xc
c00185c3:	90                   	nop
c00185c4:	52                   	push   edx
c00185c5:	50                   	push   eax
c00185c6:	66 90                	xchg   ax,ax
c00185c8:	6a 00                	push   0x0
c00185ca:	66 90                	xchg   ax,ax
c00185cc:	e8 3c fe ff ff       	call   c001840d <Vm::fpuSetReg(int, unsigned long long)>
c00185d1:	eb b1                	jmp    c0018584 <Vm::x87Handler(regs*)+0x7a>
c00185d3:	90                   	nop
c00185d4:	e8 b7 fc ff ff       	call   c0018290 <Vm::fpuGetLog210()>
c00185d9:	eb 9d                	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c00185db:	90                   	nop
c00185dc:	e8 7f fc ff ff       	call   c0018260 <Vm::fpuGetLog2E()>
c00185e1:	eb 95                	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c00185e3:	90                   	nop
c00185e4:	e8 6f fc ff ff       	call   c0018258 <Vm::fpuGetPi()>
c00185e9:	eb 8d                	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c00185eb:	90                   	nop
c00185ec:	e8 b7 fc ff ff       	call   c00182a8 <Vm::fpuGetLog102()>
c00185f1:	eb 85                	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c00185f3:	90                   	nop
c00185f4:	e8 7f fc ff ff       	call   c0018278 <Vm::fpuGetLogE2()>
c00185f9:	e9 7a ff ff ff       	jmp    c0018578 <Vm::x87Handler(regs*)+0x6e>
c00185fe:	66 90                	xchg   ax,ax
c0018600:	8d 50 40             	lea    edx,[eax+0x40]
c0018603:	80 fa 07             	cmp    dl,0x7
c0018606:	77 18                	ja     c0018620 <Vm::x87Handler(regs*)+0x116>
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	2d c0 00 00 00       	sub    eax,0xc0
c0018610:	50                   	push   eax
c0018611:	e8 b4 fd ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018616:	59                   	pop    ecx
c0018617:	5e                   	pop    esi
c0018618:	e9 5f ff ff ff       	jmp    c001857c <Vm::x87Handler(regs*)+0x72>
c001861d:	8d 76 00             	lea    esi,[esi+0x0]
c0018620:	8d 50 38             	lea    edx,[eax+0x38]
c0018623:	80 fa 07             	cmp    dl,0x7
c0018626:	77 3c                	ja     c0018664 <Vm::x87Handler(regs*)+0x15a>
c0018628:	83 ec 0c             	sub    esp,0xc
c001862b:	2d c8 00 00 00       	sub    eax,0xc8
c0018630:	50                   	push   eax
c0018631:	e8 94 fd ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018636:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001863d:	89 c6                	mov    esi,eax
c001863f:	89 d7                	mov    edi,edx
c0018641:	e8 84 fd ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018646:	83 c4 0c             	add    esp,0xc
c0018649:	52                   	push   edx
c001864a:	50                   	push   eax
c001864b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001864f:	2d c8 00 00 00       	sub    eax,0xc8
c0018654:	50                   	push   eax
c0018655:	e8 b3 fd ff ff       	call   c001840d <Vm::fpuSetReg(int, unsigned long long)>
c001865a:	83 c4 0c             	add    esp,0xc
c001865d:	57                   	push   edi
c001865e:	56                   	push   esi
c001865f:	e9 64 ff ff ff       	jmp    c00185c8 <Vm::x87Handler(regs*)+0xbe>
c0018664:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018668:	84 d2                	test   dl,dl
c001866a:	75 10                	jne    c001867c <Vm::x87Handler(regs*)+0x172>
c001866c:	83 ec 0c             	sub    esp,0xc
c001866f:	ff 36                	push   DWORD PTR [esi]
c0018671:	e8 8d fa ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018676:	e9 c9 00 00 00       	jmp    c0018744 <Vm::x87Handler(regs*)+0x23a>
c001867b:	90                   	nop
c001867c:	80 fa 03             	cmp    dl,0x3
c001867f:	75 13                	jne    c0018694 <Vm::x87Handler(regs*)+0x18a>
c0018681:	e8 31 fe ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018686:	55                   	push   ebp
c0018687:	55                   	push   ebp
c0018688:	52                   	push   edx
c0018689:	50                   	push   eax
c001868a:	e8 0d fa ff ff       	call   c001809c <Vm::fpuInternalTo32(unsigned long long)>
c001868f:	e9 90 00 00 00       	jmp    c0018724 <Vm::x87Handler(regs*)+0x21a>
c0018694:	80 fa 05             	cmp    dl,0x5
c0018697:	75 0f                	jne    c00186a8 <Vm::x87Handler(regs*)+0x19e>
c0018699:	66 8b 06             	mov    ax,WORD PTR [esi]
c001869c:	66 a3 62 98 02 c0    	mov    ds:0xc0029862,ax
c00186a2:	e9 ed 00 00 00       	jmp    c0018794 <Vm::x87Handler(regs*)+0x28a>
c00186a7:	90                   	nop
c00186a8:	31 c0                	xor    eax,eax
c00186aa:	80 fa 07             	cmp    dl,0x7
c00186ad:	0f 85 69 09 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c00186b3:	66 a1 62 98 02 c0    	mov    ax,ds:0xc0029862
c00186b9:	66 89 06             	mov    WORD PTR [esi],ax
c00186bc:	e9 d3 00 00 00       	jmp    c0018794 <Vm::x87Handler(regs*)+0x28a>
c00186c1:	8d 76 00             	lea    esi,[esi+0x0]
c00186c4:	80 fa d8             	cmp    dl,0xd8
c00186c7:	0f 84 d3 00 00 00    	je     c00187a0 <Vm::x87Handler(regs*)+0x296>
c00186cd:	80 fa dc             	cmp    dl,0xdc
c00186d0:	0f 84 2a 02 00 00    	je     c0018900 <Vm::x87Handler(regs*)+0x3f6>
c00186d6:	80 fa de             	cmp    dl,0xde
c00186d9:	0f 84 f1 02 00 00    	je     c00189d0 <Vm::x87Handler(regs*)+0x4c6>
c00186df:	80 fa dd             	cmp    dl,0xdd
c00186e2:	0f 84 94 04 00 00    	je     c0018b7c <Vm::x87Handler(regs*)+0x672>
c00186e8:	80 fa da             	cmp    dl,0xda
c00186eb:	0f 84 5f 05 00 00    	je     c0018c50 <Vm::x87Handler(regs*)+0x746>
c00186f1:	80 fa df             	cmp    dl,0xdf
c00186f4:	0f 84 aa 05 00 00    	je     c0018ca4 <Vm::x87Handler(regs*)+0x79a>
c00186fa:	31 c0                	xor    eax,eax
c00186fc:	80 fa db             	cmp    dl,0xdb
c00186ff:	0f 85 17 09 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018705:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018709:	80 fa 03             	cmp    dl,0x3
c001870c:	0f 85 c2 06 00 00    	jne    c0018dd4 <Vm::x87Handler(regs*)+0x8ca>
c0018712:	e8 a0 fd ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018717:	55                   	push   ebp
c0018718:	55                   	push   ebp
c0018719:	8d 76 00             	lea    esi,[esi+0x0]
c001871c:	52                   	push   edx
c001871d:	50                   	push   eax
c001871e:	e8 2e fa ff ff       	call   c0018151 <Vm::fpuFloatToLong(unsigned long long)>
c0018723:	90                   	nop
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	89 06                	mov    DWORD PTR [esi],eax
c0018729:	eb 69                	jmp    c0018794 <Vm::x87Handler(regs*)+0x28a>
c001872b:	90                   	nop
c001872c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018730:	84 d2                	test   dl,dl
c0018732:	0f 85 2c 06 00 00    	jne    c0018d64 <Vm::x87Handler(regs*)+0x85a>
c0018738:	57                   	push   edi
c0018739:	57                   	push   edi
c001873a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001873d:	ff 36                	push   DWORD PTR [esi]
c001873f:	e8 04 fa ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018744:	5e                   	pop    esi
c0018745:	5f                   	pop    edi
c0018746:	52                   	push   edx
c0018747:	50                   	push   eax
c0018748:	e8 0c fd ff ff       	call   c0018459 <Vm::fpuPush(unsigned long long)>
c001874d:	8d 76 00             	lea    esi,[esi+0x0]
c0018750:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018754:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0018757:	e9 2c fe ff ff       	jmp    c0018588 <Vm::x87Handler(regs*)+0x7e>
c001875c:	80 fa 03             	cmp    dl,0x3
c001875f:	0f 85 2b 07 00 00    	jne    c0018e90 <Vm::x87Handler(regs*)+0x986>
c0018765:	57                   	push   edi
c0018766:	57                   	push   edi
c0018767:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001876a:	ff 36                	push   DWORD PTR [esi]
c001876c:	e8 d7 f9 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018771:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018778:	89 c6                	mov    esi,eax
c001877a:	89 d7                	mov    edi,edx
c001877c:	e8 49 fc ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018781:	57                   	push   edi
c0018782:	56                   	push   esi
c0018783:	52                   	push   edx
c0018784:	50                   	push   eax
c0018785:	e8 60 fb ff ff       	call   c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001878a:	83 c4 20             	add    esp,0x20
c001878d:	e8 25 fd ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018792:	66 90                	xchg   ax,ax
c0018794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018798:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001879b:	e9 ec fd ff ff       	jmp    c001858c <Vm::x87Handler(regs*)+0x82>
c00187a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00187a4:	8d 50 40             	lea    edx,[eax+0x40]
c00187a7:	80 fa 07             	cmp    dl,0x7
c00187aa:	77 2c                	ja     c00187d8 <Vm::x87Handler(regs*)+0x2ce>
c00187ac:	83 ec 0c             	sub    esp,0xc
c00187af:	2d c0 00 00 00       	sub    eax,0xc0
c00187b4:	50                   	push   eax
c00187b5:	e8 10 fc ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00187ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00187c1:	89 c6                	mov    esi,eax
c00187c3:	89 d7                	mov    edi,edx
c00187c5:	e8 00 fc ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00187ca:	57                   	push   edi
c00187cb:	56                   	push   esi
c00187cc:	52                   	push   edx
c00187cd:	50                   	push   eax
c00187ce:	e8 6d fb ff ff       	call   c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00187d3:	eb 33                	jmp    c0018808 <Vm::x87Handler(regs*)+0x2fe>
c00187d5:	8d 76 00             	lea    esi,[esi+0x0]
c00187d8:	8d 50 38             	lea    edx,[eax+0x38]
c00187db:	80 fa 07             	cmp    dl,0x7
c00187de:	77 30                	ja     c0018810 <Vm::x87Handler(regs*)+0x306>
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	2d c8 00 00 00       	sub    eax,0xc8
c00187e8:	50                   	push   eax
c00187e9:	e8 dc fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00187ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00187f5:	89 c6                	mov    esi,eax
c00187f7:	89 d7                	mov    edi,edx
c00187f9:	e8 cc fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00187fe:	57                   	push   edi
c00187ff:	56                   	push   esi
c0018800:	52                   	push   edx
c0018801:	50                   	push   eax
c0018802:	e8 72 fb ff ff       	call   c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018807:	90                   	nop
c0018808:	83 c4 1c             	add    esp,0x1c
c001880b:	e9 b4 fd ff ff       	jmp    c00185c4 <Vm::x87Handler(regs*)+0xba>
c0018810:	8d 50 30             	lea    edx,[eax+0x30]
c0018813:	80 fa 07             	cmp    dl,0x7
c0018816:	77 10                	ja     c0018828 <Vm::x87Handler(regs*)+0x31e>
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	2d d0 00 00 00       	sub    eax,0xd0
c0018820:	e9 c3 03 00 00       	jmp    c0018be8 <Vm::x87Handler(regs*)+0x6de>
c0018825:	8d 76 00             	lea    esi,[esi+0x0]
c0018828:	8d 50 28             	lea    edx,[eax+0x28]
c001882b:	80 fa 07             	cmp    dl,0x7
c001882e:	77 10                	ja     c0018840 <Vm::x87Handler(regs*)+0x336>
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	2d d8 00 00 00       	sub    eax,0xd8
c0018838:	e9 e7 03 00 00       	jmp    c0018c24 <Vm::x87Handler(regs*)+0x71a>
c001883d:	8d 76 00             	lea    esi,[esi+0x0]
c0018840:	8d 50 20             	lea    edx,[eax+0x20]
c0018843:	80 fa 07             	cmp    dl,0x7
c0018846:	77 1c                	ja     c0018864 <Vm::x87Handler(regs*)+0x35a>
c0018848:	83 ec 0c             	sub    esp,0xc
c001884b:	2d e0 00 00 00       	sub    eax,0xe0
c0018850:	50                   	push   eax
c0018851:	e8 74 fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018856:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001885d:	89 c6                	mov    esi,eax
c001885f:	89 d7                	mov    edi,edx
c0018861:	eb 25                	jmp    c0018888 <Vm::x87Handler(regs*)+0x37e>
c0018863:	90                   	nop
c0018864:	8d 50 18             	lea    edx,[eax+0x18]
c0018867:	80 fa 07             	cmp    dl,0x7
c001886a:	77 30                	ja     c001889c <Vm::x87Handler(regs*)+0x392>
c001886c:	83 ec 0c             	sub    esp,0xc
c001886f:	6a 00                	push   0x0
c0018871:	e8 54 fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018876:	89 c6                	mov    esi,eax
c0018878:	89 d7                	mov    edi,edx
c001887a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001887e:	2d e8 00 00 00       	sub    eax,0xe8
c0018883:	89 04 24             	mov    DWORD PTR [esp],eax
c0018886:	66 90                	xchg   ax,ax
c0018888:	e8 3d fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001888d:	57                   	push   edi
c001888e:	56                   	push   esi
c001888f:	52                   	push   edx
c0018890:	50                   	push   eax
c0018891:	e8 d4 fa ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018896:	e9 6d ff ff ff       	jmp    c0018808 <Vm::x87Handler(regs*)+0x2fe>
c001889b:	90                   	nop
c001889c:	8d 50 10             	lea    edx,[eax+0x10]
c001889f:	80 fa 07             	cmp    dl,0x7
c00188a2:	77 1c                	ja     c00188c0 <Vm::x87Handler(regs*)+0x3b6>
c00188a4:	83 ec 0c             	sub    esp,0xc
c00188a7:	2d f0 00 00 00       	sub    eax,0xf0
c00188ac:	50                   	push   eax
c00188ad:	e8 18 fb ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00188b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00188b9:	89 c6                	mov    esi,eax
c00188bb:	89 d7                	mov    edi,edx
c00188bd:	eb 25                	jmp    c00188e4 <Vm::x87Handler(regs*)+0x3da>
c00188bf:	90                   	nop
c00188c0:	3c f7                	cmp    al,0xf7
c00188c2:	0f 86 00 04 00 00    	jbe    c0018cc8 <Vm::x87Handler(regs*)+0x7be>
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	6a 00                	push   0x0
c00188cd:	e8 f8 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00188d2:	89 c6                	mov    esi,eax
c00188d4:	89 d7                	mov    edi,edx
c00188d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00188da:	2d f8 00 00 00       	sub    eax,0xf8
c00188df:	89 04 24             	mov    DWORD PTR [esp],eax
c00188e2:	66 90                	xchg   ax,ax
c00188e4:	e8 e1 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00188e9:	57                   	push   edi
c00188ea:	56                   	push   esi
c00188eb:	52                   	push   edx
c00188ec:	50                   	push   eax
c00188ed:	e8 a6 fa ff ff       	call   c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00188f2:	83 c4 1c             	add    esp,0x1c
c00188f5:	52                   	push   edx
c00188f6:	50                   	push   eax
c00188f7:	6a 00                	push   0x0
c00188f9:	e9 6a 02 00 00       	jmp    c0018b68 <Vm::x87Handler(regs*)+0x65e>
c00188fe:	66 90                	xchg   ax,ax
c0018900:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018904:	8d 50 40             	lea    edx,[eax+0x40]
c0018907:	80 fa 07             	cmp    dl,0x7
c001890a:	77 38                	ja     c0018944 <Vm::x87Handler(regs*)+0x43a>
c001890c:	83 ec 0c             	sub    esp,0xc
c001890f:	2d c0 00 00 00       	sub    eax,0xc0
c0018914:	50                   	push   eax
c0018915:	e8 b0 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001891a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018921:	89 c6                	mov    esi,eax
c0018923:	89 d7                	mov    edi,edx
c0018925:	e8 a0 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001892a:	57                   	push   edi
c001892b:	56                   	push   esi
c001892c:	52                   	push   edx
c001892d:	50                   	push   eax
c001892e:	e8 0d fa ff ff       	call   c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018933:	83 c4 1c             	add    esp,0x1c
c0018936:	52                   	push   edx
c0018937:	50                   	push   eax
c0018938:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001893c:	2d c0 00 00 00       	sub    eax,0xc0
c0018941:	eb 41                	jmp    c0018984 <Vm::x87Handler(regs*)+0x47a>
c0018943:	90                   	nop
c0018944:	8d 50 38             	lea    edx,[eax+0x38]
c0018947:	80 fa 07             	cmp    dl,0x7
c001894a:	77 40                	ja     c001898c <Vm::x87Handler(regs*)+0x482>
c001894c:	83 ec 0c             	sub    esp,0xc
c001894f:	2d c8 00 00 00       	sub    eax,0xc8
c0018954:	50                   	push   eax
c0018955:	e8 70 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001895a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018961:	89 c6                	mov    esi,eax
c0018963:	89 d7                	mov    edi,edx
c0018965:	e8 60 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c001896a:	57                   	push   edi
c001896b:	56                   	push   esi
c001896c:	52                   	push   edx
c001896d:	50                   	push   eax
c001896e:	e8 06 fa ff ff       	call   c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018973:	83 c4 1c             	add    esp,0x1c
c0018976:	52                   	push   edx
c0018977:	50                   	push   eax
c0018978:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001897c:	2d c8 00 00 00       	sub    eax,0xc8
c0018981:	8d 76 00             	lea    esi,[esi+0x0]
c0018984:	50                   	push   eax
c0018985:	e9 42 fc ff ff       	jmp    c00185cc <Vm::x87Handler(regs*)+0xc2>
c001898a:	66 90                	xchg   ax,ax
c001898c:	83 c0 18             	add    eax,0x18
c001898f:	3c 07                	cmp    al,0x7
c0018991:	0f 87 6d 04 00 00    	ja     c0018e04 <Vm::x87Handler(regs*)+0x8fa>
c0018997:	83 ec 0c             	sub    esp,0xc
c001899a:	6a 00                	push   0x0
c001899c:	e8 29 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00189a1:	89 c6                	mov    esi,eax
c00189a3:	89 d7                	mov    edi,edx
c00189a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00189a9:	2d e8 00 00 00       	sub    eax,0xe8
c00189ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00189b1:	e8 14 fa ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00189b6:	57                   	push   edi
c00189b7:	56                   	push   esi
c00189b8:	52                   	push   edx
c00189b9:	50                   	push   eax
c00189ba:	e8 ab f9 ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c00189bf:	83 c4 1c             	add    esp,0x1c
c00189c2:	52                   	push   edx
c00189c3:	50                   	push   eax
c00189c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00189c8:	2d e8 00 00 00       	sub    eax,0xe8
c00189cd:	eb b5                	jmp    c0018984 <Vm::x87Handler(regs*)+0x47a>
c00189cf:	90                   	nop
c00189d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00189d4:	8d 50 40             	lea    edx,[eax+0x40]
c00189d7:	80 fa 07             	cmp    dl,0x7
c00189da:	77 3c                	ja     c0018a18 <Vm::x87Handler(regs*)+0x50e>
c00189dc:	83 ec 0c             	sub    esp,0xc
c00189df:	2d c0 00 00 00       	sub    eax,0xc0
c00189e4:	50                   	push   eax
c00189e5:	e8 e0 f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00189ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00189f1:	89 c6                	mov    esi,eax
c00189f3:	89 d7                	mov    edi,edx
c00189f5:	e8 d0 f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c00189fa:	57                   	push   edi
c00189fb:	56                   	push   esi
c00189fc:	52                   	push   edx
c00189fd:	50                   	push   eax
c00189fe:	e8 3d f9 ff ff       	call   c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018a03:	83 c4 1c             	add    esp,0x1c
c0018a06:	52                   	push   edx
c0018a07:	50                   	push   eax
c0018a08:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018a0c:	2d c0 00 00 00       	sub    eax,0xc0
c0018a11:	e9 b2 01 00 00       	jmp    c0018bc8 <Vm::x87Handler(regs*)+0x6be>
c0018a16:	66 90                	xchg   ax,ax
c0018a18:	8d 50 20             	lea    edx,[eax+0x20]
c0018a1b:	80 fa 07             	cmp    dl,0x7
c0018a1e:	77 3c                	ja     c0018a5c <Vm::x87Handler(regs*)+0x552>
c0018a20:	83 ec 0c             	sub    esp,0xc
c0018a23:	2d e0 00 00 00       	sub    eax,0xe0
c0018a28:	50                   	push   eax
c0018a29:	e8 9c f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018a2e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018a35:	89 c6                	mov    esi,eax
c0018a37:	89 d7                	mov    edi,edx
c0018a39:	e8 8c f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018a3e:	57                   	push   edi
c0018a3f:	56                   	push   esi
c0018a40:	52                   	push   edx
c0018a41:	50                   	push   eax
c0018a42:	e8 23 f9 ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018a47:	83 c4 1c             	add    esp,0x1c
c0018a4a:	52                   	push   edx
c0018a4b:	50                   	push   eax
c0018a4c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018a50:	2d e0 00 00 00       	sub    eax,0xe0
c0018a55:	e9 6e 01 00 00       	jmp    c0018bc8 <Vm::x87Handler(regs*)+0x6be>
c0018a5a:	66 90                	xchg   ax,ax
c0018a5c:	8d 50 18             	lea    edx,[eax+0x18]
c0018a5f:	80 fa 07             	cmp    dl,0x7
c0018a62:	77 3c                	ja     c0018aa0 <Vm::x87Handler(regs*)+0x596>
c0018a64:	83 ec 0c             	sub    esp,0xc
c0018a67:	6a 00                	push   0x0
c0018a69:	e8 5c f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018a6e:	89 c6                	mov    esi,eax
c0018a70:	89 d7                	mov    edi,edx
c0018a72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018a76:	2d e8 00 00 00       	sub    eax,0xe8
c0018a7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a7e:	e8 47 f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018a83:	57                   	push   edi
c0018a84:	56                   	push   esi
c0018a85:	52                   	push   edx
c0018a86:	50                   	push   eax
c0018a87:	e8 de f8 ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018a8c:	83 c4 1c             	add    esp,0x1c
c0018a8f:	52                   	push   edx
c0018a90:	50                   	push   eax
c0018a91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018a95:	2d e8 00 00 00       	sub    eax,0xe8
c0018a9a:	e9 29 01 00 00       	jmp    c0018bc8 <Vm::x87Handler(regs*)+0x6be>
c0018a9f:	90                   	nop
c0018aa0:	8d 50 38             	lea    edx,[eax+0x38]
c0018aa3:	80 fa 07             	cmp    dl,0x7
c0018aa6:	77 3c                	ja     c0018ae4 <Vm::x87Handler(regs*)+0x5da>
c0018aa8:	83 ec 0c             	sub    esp,0xc
c0018aab:	2d c8 00 00 00       	sub    eax,0xc8
c0018ab0:	50                   	push   eax
c0018ab1:	e8 14 f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018ab6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018abd:	89 c6                	mov    esi,eax
c0018abf:	89 d7                	mov    edi,edx
c0018ac1:	e8 04 f9 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018ac6:	57                   	push   edi
c0018ac7:	56                   	push   esi
c0018ac8:	52                   	push   edx
c0018ac9:	50                   	push   eax
c0018aca:	e8 aa f8 ff ff       	call   c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018acf:	83 c4 1c             	add    esp,0x1c
c0018ad2:	52                   	push   edx
c0018ad3:	50                   	push   eax
c0018ad4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018ad8:	2d c8 00 00 00       	sub    eax,0xc8
c0018add:	e9 82 00 00 00       	jmp    c0018b64 <Vm::x87Handler(regs*)+0x65a>
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	3c f7                	cmp    al,0xf7
c0018ae6:	76 38                	jbe    c0018b20 <Vm::x87Handler(regs*)+0x616>
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	6a 00                	push   0x0
c0018aed:	e8 d8 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018af2:	89 c6                	mov    esi,eax
c0018af4:	89 d7                	mov    edi,edx
c0018af6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018afa:	2d f8 00 00 00       	sub    eax,0xf8
c0018aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b02:	e8 c3 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018b07:	57                   	push   edi
c0018b08:	56                   	push   esi
c0018b09:	52                   	push   edx
c0018b0a:	50                   	push   eax
c0018b0b:	e8 88 f8 ff ff       	call   c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018b10:	83 c4 1c             	add    esp,0x1c
c0018b13:	52                   	push   edx
c0018b14:	50                   	push   eax
c0018b15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018b19:	2d f8 00 00 00       	sub    eax,0xf8
c0018b1e:	eb 44                	jmp    c0018b64 <Vm::x87Handler(regs*)+0x65a>
c0018b20:	8d 50 10             	lea    edx,[eax+0x10]
c0018b23:	80 fa 07             	cmp    dl,0x7
c0018b26:	0f 87 6c 01 00 00    	ja     c0018c98 <Vm::x87Handler(regs*)+0x78e>
c0018b2c:	83 ec 0c             	sub    esp,0xc
c0018b2f:	2d f0 00 00 00       	sub    eax,0xf0
c0018b34:	50                   	push   eax
c0018b35:	e8 90 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018b3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018b41:	89 c6                	mov    esi,eax
c0018b43:	89 d7                	mov    edi,edx
c0018b45:	e8 80 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018b4a:	57                   	push   edi
c0018b4b:	56                   	push   esi
c0018b4c:	52                   	push   edx
c0018b4d:	50                   	push   eax
c0018b4e:	e8 45 f8 ff ff       	call   c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018b53:	83 c4 1c             	add    esp,0x1c
c0018b56:	52                   	push   edx
c0018b57:	50                   	push   eax
c0018b58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018b5c:	2d f0 00 00 00       	sub    eax,0xf0
c0018b61:	8d 76 00             	lea    esi,[esi+0x0]
c0018b64:	50                   	push   eax
c0018b65:	8d 76 00             	lea    esi,[esi+0x0]
c0018b68:	e8 a0 f8 ff ff       	call   c001840d <Vm::fpuSetReg(int, unsigned long long)>
c0018b6d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b71:	e8 41 f9 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018b76:	e9 0d fa ff ff       	jmp    c0018588 <Vm::x87Handler(regs*)+0x7e>
c0018b7b:	90                   	nop
c0018b7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018b80:	8d 50 30             	lea    edx,[eax+0x30]
c0018b83:	80 fa 07             	cmp    dl,0x7
c0018b86:	77 20                	ja     c0018ba8 <Vm::x87Handler(regs*)+0x69e>
c0018b88:	83 ec 0c             	sub    esp,0xc
c0018b8b:	6a 00                	push   0x0
c0018b8d:	e8 38 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018b92:	83 c4 0c             	add    esp,0xc
c0018b95:	52                   	push   edx
c0018b96:	50                   	push   eax
c0018b97:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018b9b:	2d d0 00 00 00       	sub    eax,0xd0
c0018ba0:	e9 df fd ff ff       	jmp    c0018984 <Vm::x87Handler(regs*)+0x47a>
c0018ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba8:	8d 50 28             	lea    edx,[eax+0x28]
c0018bab:	80 fa 07             	cmp    dl,0x7
c0018bae:	77 28                	ja     c0018bd8 <Vm::x87Handler(regs*)+0x6ce>
c0018bb0:	83 ec 0c             	sub    esp,0xc
c0018bb3:	6a 00                	push   0x0
c0018bb5:	e8 10 f8 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018bba:	83 c4 0c             	add    esp,0xc
c0018bbd:	52                   	push   edx
c0018bbe:	50                   	push   eax
c0018bbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018bc3:	2d d8 00 00 00       	sub    eax,0xd8
c0018bc8:	50                   	push   eax
c0018bc9:	e8 3f f8 ff ff       	call   c001840d <Vm::fpuSetReg(int, unsigned long long)>
c0018bce:	e8 e4 f8 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018bd3:	e9 ac f9 ff ff       	jmp    c0018584 <Vm::x87Handler(regs*)+0x7a>
c0018bd8:	8d 50 20             	lea    edx,[eax+0x20]
c0018bdb:	80 fa 07             	cmp    dl,0x7
c0018bde:	77 30                	ja     c0018c10 <Vm::x87Handler(regs*)+0x706>
c0018be0:	83 ec 0c             	sub    esp,0xc
c0018be3:	2d e0 00 00 00       	sub    eax,0xe0
c0018be8:	50                   	push   eax
c0018be9:	e8 dc f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018bee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018bf5:	89 c6                	mov    esi,eax
c0018bf7:	89 d7                	mov    edi,edx
c0018bf9:	e8 cc f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018bfe:	57                   	push   edi
c0018bff:	56                   	push   esi
c0018c00:	52                   	push   edx
c0018c01:	50                   	push   eax
c0018c02:	e8 e3 f6 ff ff       	call   c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018c07:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c0b:	e9 78 02 00 00       	jmp    c0018e88 <Vm::x87Handler(regs*)+0x97e>
c0018c10:	8d 50 18             	lea    edx,[eax+0x18]
c0018c13:	80 fa 07             	cmp    dl,0x7
c0018c16:	0f 87 10 fb ff ff    	ja     c001872c <Vm::x87Handler(regs*)+0x222>
c0018c1c:	83 ec 0c             	sub    esp,0xc
c0018c1f:	2d e8 00 00 00       	sub    eax,0xe8
c0018c24:	50                   	push   eax
c0018c25:	e8 a0 f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018c2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c31:	89 c6                	mov    esi,eax
c0018c33:	89 d7                	mov    edi,edx
c0018c35:	e8 90 f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018c3a:	57                   	push   edi
c0018c3b:	56                   	push   esi
c0018c3c:	52                   	push   edx
c0018c3d:	50                   	push   eax
c0018c3e:	e8 a7 f6 ff ff       	call   c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018c43:	83 c4 20             	add    esp,0x20
c0018c46:	e8 6c f8 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018c4b:	eb 6f                	jmp    c0018cbc <Vm::x87Handler(regs*)+0x7b2>
c0018c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c50:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0018c54:	0f 85 22 01 00 00    	jne    c0018d7c <Vm::x87Handler(regs*)+0x872>
c0018c5a:	66 90                	xchg   ax,ax
c0018c5c:	83 ec 0c             	sub    esp,0xc
c0018c5f:	6a 01                	push   0x1
c0018c61:	e8 64 f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018c66:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018c6d:	89 c6                	mov    esi,eax
c0018c6f:	89 d7                	mov    edi,edx
c0018c71:	e8 54 f7 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018c76:	57                   	push   edi
c0018c77:	56                   	push   esi
c0018c78:	52                   	push   edx
c0018c79:	50                   	push   eax
c0018c7a:	e8 6b f6 ff ff       	call   c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018c7f:	83 c4 20             	add    esp,0x20
c0018c82:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018c86:	e8 2c f8 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018c8b:	e8 27 f8 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018c90:	e9 f7 f8 ff ff       	jmp    c001858c <Vm::x87Handler(regs*)+0x82>
c0018c95:	8d 76 00             	lea    esi,[esi+0x0]
c0018c98:	3c d9                	cmp    al,0xd9
c0018c9a:	0f 85 e8 02 00 00    	jne    c0018f88 <Vm::x87Handler(regs*)+0xa7e>
c0018ca0:	eb ba                	jmp    c0018c5c <Vm::x87Handler(regs*)+0x752>
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0018ca8:	0f 85 2a 03 00 00    	jne    c0018fd8 <Vm::x87Handler(regs*)+0xace>
c0018cae:	0f b7 05 60 98 02 c0 	movzx  eax,WORD PTR ds:0xc0029860
c0018cb5:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0018cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018cbc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018cc0:	e9 c7 f8 ff ff       	jmp    c001858c <Vm::x87Handler(regs*)+0x82>
c0018cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018cc8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018ccc:	84 d2                	test   dl,dl
c0018cce:	75 10                	jne    c0018ce0 <Vm::x87Handler(regs*)+0x7d6>
c0018cd0:	83 ec 0c             	sub    esp,0xc
c0018cd3:	ff 36                	push   DWORD PTR [esi]
c0018cd5:	e8 29 f4 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018cda:	e9 39 01 00 00       	jmp    c0018e18 <Vm::x87Handler(regs*)+0x90e>
c0018cdf:	90                   	nop
c0018ce0:	80 fa 01             	cmp    dl,0x1
c0018ce3:	75 0f                	jne    c0018cf4 <Vm::x87Handler(regs*)+0x7ea>
c0018ce5:	83 ec 0c             	sub    esp,0xc
c0018ce8:	ff 36                	push   DWORD PTR [esi]
c0018cea:	e8 14 f4 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018cef:	e9 b4 02 00 00       	jmp    c0018fa8 <Vm::x87Handler(regs*)+0xa9e>
c0018cf4:	80 fa 04             	cmp    dl,0x4
c0018cf7:	75 0f                	jne    c0018d08 <Vm::x87Handler(regs*)+0x7fe>
c0018cf9:	83 ec 0c             	sub    esp,0xc
c0018cfc:	ff 36                	push   DWORD PTR [esi]
c0018cfe:	e8 00 f4 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018d03:	e9 9c 01 00 00       	jmp    c0018ea4 <Vm::x87Handler(regs*)+0x99a>
c0018d08:	80 fa 05             	cmp    dl,0x5
c0018d0b:	75 1b                	jne    c0018d28 <Vm::x87Handler(regs*)+0x81e>
c0018d0d:	83 ec 0c             	sub    esp,0xc
c0018d10:	6a 00                	push   0x0
c0018d12:	e8 b3 f6 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018d17:	89 c7                	mov    edi,eax
c0018d19:	89 d5                	mov    ebp,edx
c0018d1b:	58                   	pop    eax
c0018d1c:	ff 36                	push   DWORD PTR [esi]
c0018d1e:	e8 e0 f3 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018d23:	e9 bc 01 00 00       	jmp    c0018ee4 <Vm::x87Handler(regs*)+0x9da>
c0018d28:	80 fa 06             	cmp    dl,0x6
c0018d2b:	75 0f                	jne    c0018d3c <Vm::x87Handler(regs*)+0x832>
c0018d2d:	83 ec 0c             	sub    esp,0xc
c0018d30:	ff 36                	push   DWORD PTR [esi]
c0018d32:	e8 cc f3 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018d37:	e9 cc 01 00 00       	jmp    c0018f08 <Vm::x87Handler(regs*)+0x9fe>
c0018d3c:	31 c0                	xor    eax,eax
c0018d3e:	80 fa 07             	cmp    dl,0x7
c0018d41:	0f 85 d5 02 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018d47:	83 ec 0c             	sub    esp,0xc
c0018d4a:	6a 00                	push   0x0
c0018d4c:	e8 79 f6 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018d51:	89 c7                	mov    edi,eax
c0018d53:	89 d5                	mov    ebp,edx
c0018d55:	58                   	pop    eax
c0018d56:	ff 36                	push   DWORD PTR [esi]
c0018d58:	e8 a6 f3 ff ff       	call   c0018103 <Vm::fpu32ToInternal(unsigned int)>
c0018d5d:	e9 ee 01 00 00       	jmp    c0018f50 <Vm::x87Handler(regs*)+0xa46>
c0018d62:	66 90                	xchg   ax,ax
c0018d64:	80 fa 03             	cmp    dl,0x3
c0018d67:	0f 85 f7 01 00 00    	jne    c0018f64 <Vm::x87Handler(regs*)+0xa5a>
c0018d6d:	e8 45 f7 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0018d72:	51                   	push   ecx
c0018d73:	51                   	push   ecx
c0018d74:	e9 03 02 00 00       	jmp    c0018f7c <Vm::x87Handler(regs*)+0xa72>
c0018d79:	8d 76 00             	lea    esi,[esi+0x0]
c0018d7c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018d80:	80 fa 01             	cmp    dl,0x1
c0018d83:	75 0b                	jne    c0018d90 <Vm::x87Handler(regs*)+0x886>
c0018d85:	57                   	push   edi
c0018d86:	57                   	push   edi
c0018d87:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d89:	e9 0e 02 00 00       	jmp    c0018f9c <Vm::x87Handler(regs*)+0xa92>
c0018d8e:	66 90                	xchg   ax,ax
c0018d90:	80 fa 04             	cmp    dl,0x4
c0018d93:	75 13                	jne    c0018da8 <Vm::x87Handler(regs*)+0x89e>
c0018d95:	31 d2                	xor    edx,edx
c0018d97:	51                   	push   ecx
c0018d98:	51                   	push   ecx
c0018d99:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d9b:	52                   	push   edx
c0018d9c:	50                   	push   eax
c0018d9d:	e8 4a f4 ff ff       	call   c00181ec <Vm::fpuLongToFloat(long long)>
c0018da2:	e9 fd 00 00 00       	jmp    c0018ea4 <Vm::x87Handler(regs*)+0x99a>
c0018da7:	90                   	nop
c0018da8:	31 c0                	xor    eax,eax
c0018daa:	80 fa 07             	cmp    dl,0x7
c0018dad:	0f 85 69 02 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018db3:	83 ec 0c             	sub    esp,0xc
c0018db6:	6a 00                	push   0x0
c0018db8:	e8 0d f6 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018dbd:	89 c7                	mov    edi,eax
c0018dbf:	89 d5                	mov    ebp,edx
c0018dc1:	58                   	pop    eax
c0018dc2:	8b 06                	mov    eax,DWORD PTR [esi]
c0018dc4:	5a                   	pop    edx
c0018dc5:	31 d2                	xor    edx,edx
c0018dc7:	52                   	push   edx
c0018dc8:	50                   	push   eax
c0018dc9:	e8 1e f4 ff ff       	call   c00181ec <Vm::fpuLongToFloat(long long)>
c0018dce:	e9 7d 01 00 00       	jmp    c0018f50 <Vm::x87Handler(regs*)+0xa46>
c0018dd3:	90                   	nop
c0018dd4:	84 d2                	test   dl,dl
c0018dd6:	75 10                	jne    c0018de8 <Vm::x87Handler(regs*)+0x8de>
c0018dd8:	31 d2                	xor    edx,edx
c0018dda:	55                   	push   ebp
c0018ddb:	55                   	push   ebp
c0018ddc:	8b 06                	mov    eax,DWORD PTR [esi]
c0018dde:	52                   	push   edx
c0018ddf:	50                   	push   eax
c0018de0:	e9 03 02 00 00       	jmp    c0018fe8 <Vm::x87Handler(regs*)+0xade>
c0018de5:	8d 76 00             	lea    esi,[esi+0x0]
c0018de8:	31 c0                	xor    eax,eax
c0018dea:	80 fa 02             	cmp    dl,0x2
c0018ded:	0f 85 29 02 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018df3:	83 ec 0c             	sub    esp,0xc
c0018df6:	6a 00                	push   0x0
c0018df8:	e8 cd f5 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018dfd:	59                   	pop    ecx
c0018dfe:	5f                   	pop    edi
c0018dff:	e9 18 f9 ff ff       	jmp    c001871c <Vm::x87Handler(regs*)+0x212>
c0018e04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018e08:	84 d2                	test   dl,dl
c0018e0a:	75 2c                	jne    c0018e38 <Vm::x87Handler(regs*)+0x92e>
c0018e0c:	50                   	push   eax
c0018e0d:	50                   	push   eax
c0018e0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018e11:	ff 36                	push   DWORD PTR [esi]
c0018e13:	e8 30 f3 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018e18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e1f:	89 c6                	mov    esi,eax
c0018e21:	89 d7                	mov    edi,edx
c0018e23:	e8 a2 f5 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018e28:	57                   	push   edi
c0018e29:	56                   	push   esi
c0018e2a:	52                   	push   edx
c0018e2b:	50                   	push   eax
c0018e2c:	e8 0f f5 ff ff       	call   c0018340 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0018e31:	e9 8e 01 00 00       	jmp    c0018fc4 <Vm::x87Handler(regs*)+0xaba>
c0018e36:	66 90                	xchg   ax,ax
c0018e38:	80 fa 01             	cmp    dl,0x1
c0018e3b:	75 13                	jne    c0018e50 <Vm::x87Handler(regs*)+0x946>
c0018e3d:	50                   	push   eax
c0018e3e:	50                   	push   eax
c0018e3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018e42:	ff 36                	push   DWORD PTR [esi]
c0018e44:	e8 ff f2 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018e49:	e9 5a 01 00 00       	jmp    c0018fa8 <Vm::x87Handler(regs*)+0xa9e>
c0018e4e:	66 90                	xchg   ax,ax
c0018e50:	80 fa 02             	cmp    dl,0x2
c0018e53:	0f 85 03 f9 ff ff    	jne    c001875c <Vm::x87Handler(regs*)+0x252>
c0018e59:	55                   	push   ebp
c0018e5a:	55                   	push   ebp
c0018e5b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018e5e:	ff 36                	push   DWORD PTR [esi]
c0018e60:	e8 e3 f2 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018e65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018e6c:	89 c6                	mov    esi,eax
c0018e6e:	89 d7                	mov    edi,edx
c0018e70:	e8 55 f5 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018e75:	57                   	push   edi
c0018e76:	56                   	push   esi
c0018e77:	52                   	push   edx
c0018e78:	50                   	push   eax
c0018e79:	e8 6c f4 ff ff       	call   c00182ea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0018e7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018e82:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0018e85:	8d 76 00             	lea    esi,[esi+0x0]
c0018e88:	83 c4 20             	add    esp,0x20
c0018e8b:	e9 fc f6 ff ff       	jmp    c001858c <Vm::x87Handler(regs*)+0x82>
c0018e90:	80 fa 04             	cmp    dl,0x4
c0018e93:	75 2f                	jne    c0018ec4 <Vm::x87Handler(regs*)+0x9ba>
c0018e95:	51                   	push   ecx
c0018e96:	51                   	push   ecx
c0018e97:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018e9a:	ff 36                	push   DWORD PTR [esi]
c0018e9c:	e8 a7 f2 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018eab:	89 c6                	mov    esi,eax
c0018ead:	89 d7                	mov    edi,edx
c0018eaf:	e8 16 f5 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018eb4:	57                   	push   edi
c0018eb5:	56                   	push   esi
c0018eb6:	52                   	push   edx
c0018eb7:	50                   	push   eax
c0018eb8:	e8 ad f4 ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018ebd:	e9 02 01 00 00       	jmp    c0018fc4 <Vm::x87Handler(regs*)+0xaba>
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	80 fa 05             	cmp    dl,0x5
c0018ec7:	75 2b                	jne    c0018ef4 <Vm::x87Handler(regs*)+0x9ea>
c0018ec9:	83 ec 0c             	sub    esp,0xc
c0018ecc:	6a 00                	push   0x0
c0018ece:	e8 f7 f4 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018ed3:	89 c7                	mov    edi,eax
c0018ed5:	89 d5                	mov    ebp,edx
c0018ed7:	58                   	pop    eax
c0018ed8:	5a                   	pop    edx
c0018ed9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018edc:	ff 36                	push   DWORD PTR [esi]
c0018ede:	e8 65 f2 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018ee3:	90                   	nop
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	55                   	push   ebp
c0018ee8:	57                   	push   edi
c0018ee9:	52                   	push   edx
c0018eea:	50                   	push   eax
c0018eeb:	e8 7a f4 ff ff       	call   c001836a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0018ef0:	eb 6a                	jmp    c0018f5c <Vm::x87Handler(regs*)+0xa52>
c0018ef2:	66 90                	xchg   ax,ax
c0018ef4:	80 fa 06             	cmp    dl,0x6
c0018ef7:	75 2f                	jne    c0018f28 <Vm::x87Handler(regs*)+0xa1e>
c0018ef9:	51                   	push   ecx
c0018efa:	51                   	push   ecx
c0018efb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018efe:	ff 36                	push   DWORD PTR [esi]
c0018f00:	e8 43 f2 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018f05:	8d 76 00             	lea    esi,[esi+0x0]
c0018f08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018f0f:	89 c6                	mov    esi,eax
c0018f11:	89 d7                	mov    edi,edx
c0018f13:	e8 b2 f4 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018f18:	57                   	push   edi
c0018f19:	56                   	push   esi
c0018f1a:	52                   	push   edx
c0018f1b:	50                   	push   eax
c0018f1c:	e8 77 f4 ff ff       	call   c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018f21:	e9 9e 00 00 00       	jmp    c0018fc4 <Vm::x87Handler(regs*)+0xaba>
c0018f26:	66 90                	xchg   ax,ax
c0018f28:	31 c0                	xor    eax,eax
c0018f2a:	80 fa 07             	cmp    dl,0x7
c0018f2d:	0f 85 e9 00 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018f33:	83 ec 0c             	sub    esp,0xc
c0018f36:	6a 00                	push   0x0
c0018f38:	e8 8d f4 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018f3d:	89 c7                	mov    edi,eax
c0018f3f:	89 d5                	mov    ebp,edx
c0018f41:	58                   	pop    eax
c0018f42:	5a                   	pop    edx
c0018f43:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018f46:	ff 36                	push   DWORD PTR [esi]
c0018f48:	e8 fb f1 ff ff       	call   c0018148 <Vm::fpu64ToInternal(unsigned long long)>
c0018f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f50:	83 c4 10             	add    esp,0x10
c0018f53:	55                   	push   ebp
c0018f54:	57                   	push   edi
c0018f55:	52                   	push   edx
c0018f56:	50                   	push   eax
c0018f57:	e8 3c f4 ff ff       	call   c0018398 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0018f5c:	83 c4 0c             	add    esp,0xc
c0018f5f:	eb 67                	jmp    c0018fc8 <Vm::x87Handler(regs*)+0xabe>
c0018f61:	8d 76 00             	lea    esi,[esi+0x0]
c0018f64:	31 c0                	xor    eax,eax
c0018f66:	80 fa 02             	cmp    dl,0x2
c0018f69:	0f 85 ad 00 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018f6f:	83 ec 0c             	sub    esp,0xc
c0018f72:	6a 00                	push   0x0
c0018f74:	e8 51 f4 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018f79:	59                   	pop    ecx
c0018f7a:	5f                   	pop    edi
c0018f7b:	90                   	nop
c0018f7c:	52                   	push   edx
c0018f7d:	50                   	push   eax
c0018f7e:	e8 77 f1 ff ff       	call   c00180fa <Vm::fpuInternalTo64(unsigned long long)>
c0018f83:	e9 84 00 00 00       	jmp    c001900c <Vm::x87Handler(regs*)+0xb02>
c0018f88:	31 c0                	xor    eax,eax
c0018f8a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0018f8f:	0f 85 87 00 00 00    	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018f95:	50                   	push   eax
c0018f96:	50                   	push   eax
c0018f97:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0018f9a:	66 90                	xchg   ax,ax
c0018f9c:	31 d2                	xor    edx,edx
c0018f9e:	52                   	push   edx
c0018f9f:	50                   	push   eax
c0018fa0:	e8 47 f2 ff ff       	call   c00181ec <Vm::fpuLongToFloat(long long)>
c0018fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018faf:	89 c6                	mov    esi,eax
c0018fb1:	89 d7                	mov    edi,edx
c0018fb3:	e8 12 f4 ff ff       	call   c00183ca <Vm::fpuGetReg(int)>
c0018fb8:	57                   	push   edi
c0018fb9:	56                   	push   esi
c0018fba:	52                   	push   edx
c0018fbb:	50                   	push   eax
c0018fbc:	e8 b8 f3 ff ff       	call   c0018379 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018fc4:	83 c4 1c             	add    esp,0x1c
c0018fc7:	90                   	nop
c0018fc8:	52                   	push   edx
c0018fc9:	50                   	push   eax
c0018fca:	6a 00                	push   0x0
c0018fcc:	e8 3c f4 ff ff       	call   c001840d <Vm::fpuSetReg(int, unsigned long long)>
c0018fd1:	e9 7a f7 ff ff       	jmp    c0018750 <Vm::x87Handler(regs*)+0x246>
c0018fd6:	66 90                	xchg   ax,ax
c0018fd8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0018fdc:	80 fa 05             	cmp    dl,0x5
c0018fdf:	75 13                	jne    c0018ff4 <Vm::x87Handler(regs*)+0xaea>
c0018fe1:	55                   	push   ebp
c0018fe2:	55                   	push   ebp
c0018fe3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0018fe6:	ff 36                	push   DWORD PTR [esi]
c0018fe8:	e8 c3 f1 ff ff       	call   c00181b0 <Vm::fpuULongToFloat(unsigned long long)>
c0018fed:	e9 52 f7 ff ff       	jmp    c0018744 <Vm::x87Handler(regs*)+0x23a>
c0018ff2:	66 90                	xchg   ax,ax
c0018ff4:	31 c0                	xor    eax,eax
c0018ff6:	80 fa 07             	cmp    dl,0x7
c0018ff9:	75 21                	jne    c001901c <Vm::x87Handler(regs*)+0xb12>
c0018ffb:	e8 b7 f4 ff ff       	call   c00184b7 <Vm::fpuPop()>
c0019000:	51                   	push   ecx
c0019001:	51                   	push   ecx
c0019002:	52                   	push   edx
c0019003:	50                   	push   eax
c0019004:	e8 48 f1 ff ff       	call   c0018151 <Vm::fpuFloatToLong(unsigned long long)>
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	89 06                	mov    DWORD PTR [esi],eax
c0019011:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019014:	e9 7b f7 ff ff       	jmp    c0018794 <Vm::x87Handler(regs*)+0x28a>
c0019019:	8d 76 00             	lea    esi,[esi+0x0]
c001901c:	83 c4 1c             	add    esp,0x1c
c001901f:	5b                   	pop    ebx
c0019020:	5e                   	pop    esi
c0019021:	5f                   	pop    edi
c0019022:	5d                   	pop    ebp
c0019023:	c3                   	ret    

c0019024 <__static_initialization_and_destruction_0(int, int)>:
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001902c:	75 1a                	jne    c0019048 <__static_initialization_and_destruction_0(int, int)+0x24>
c001902e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019036:	75 10                	jne    c0019048 <__static_initialization_and_destruction_0(int, int)+0x24>
c0019038:	83 ec 0c             	sub    esp,0xc
c001903b:	68 60 98 02 c0       	push   0xc0029860
c0019040:	e8 9f 8c 00 00       	call   c0021ce4 <Vm::_FPUState::_FPUState()>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	90                   	nop
c0019049:	83 c4 0c             	add    esp,0xc
c001904c:	c3                   	ret    
c001904d:	8d 76 00             	lea    esi,[esi+0x0]

c0019050 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0019050:	83 ec 0c             	sub    esp,0xc
c0019053:	83 ec 08             	sub    esp,0x8
c0019056:	68 ff ff 00 00       	push   0xffff
c001905b:	6a 01                	push   0x1
c001905d:	e8 c2 ff ff ff       	call   c0019024 <__static_initialization_and_destruction_0(int, int)>
c0019062:	83 c4 10             	add    esp,0x10
c0019065:	83 c4 0c             	add    esp,0xc
c0019068:	c3                   	ret    

c0019069 <Hal::noCopro(unsigned long)>:
c0019069:	c3                   	ret    

c001906a <Hal::noTSC()>:
c001906a:	31 c0                	xor    eax,eax
c001906c:	31 d2                	xor    edx,edx
c001906e:	c3                   	ret    

c001906f <Hal::readTSC()>:
c001906f:	0f 31                	rdtsc  
c0019071:	c3                   	ret    

c0019072 <nmiHandler(regs*, void*)>:
c0019072:	83 ec 0c             	sub    esp,0xc
c0019075:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001907a:	83 ec 0c             	sub    esp,0xc
c001907d:	50                   	push   eax
c001907e:	e8 db 03 ff ff       	call   c000945e <Computer::handleNMI()>
c0019083:	83 c4 10             	add    esp,0x10
c0019086:	90                   	nop
c0019087:	83 c4 0c             	add    esp,0xc
c001908a:	c3                   	ret    

c001908b <doubleFault(regs*, void*)>:
c001908b:	55                   	push   ebp
c001908c:	89 e5                	mov    ebp,esp
c001908e:	83 ec 08             	sub    esp,0x8
c0019091:	83 ec 0c             	sub    esp,0xc
c0019094:	68 90 48 02 c0       	push   0xc0024890
c0019099:	e8 d9 a2 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001909e:	83 c4 10             	add    esp,0x10
c00190a1:	90                   	nop
c00190a2:	c9                   	leave  
c00190a3:	c3                   	ret    

c00190a4 <displayDebugInfo(regs*)>:
c00190a4:	53                   	push   ebx
c00190a5:	83 ec 38             	sub    esp,0x38
c00190a8:	0f 20 c0             	mov    eax,cr0
c00190ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00190af:	0f 20 d0             	mov    eax,cr2
c00190b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00190b6:	0f 20 d8             	mov    eax,cr3
c00190b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00190bd:	0f 20 e0             	mov    eax,cr4
c00190c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00190c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190c8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00190cb:	83 ec 08             	sub    esp,0x8
c00190ce:	50                   	push   eax
c00190cf:	68 9d 48 02 c0       	push   0xc002489d
c00190d4:	e8 ec 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00190d9:	83 c4 10             	add    esp,0x10
c00190dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00190e3:	83 ec 08             	sub    esp,0x8
c00190e6:	50                   	push   eax
c00190e7:	68 a8 48 02 c0       	push   0xc00248a8
c00190ec:	e8 d4 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00190f1:	83 c4 10             	add    esp,0x10
c00190f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00190f8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00190fb:	83 ec 08             	sub    esp,0x8
c00190fe:	50                   	push   eax
c00190ff:	68 b3 48 02 c0       	push   0xc00248b3
c0019104:	e8 bc 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019110:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019113:	83 ec 08             	sub    esp,0x8
c0019116:	50                   	push   eax
c0019117:	68 be 48 02 c0       	push   0xc00248be
c001911c:	e8 a4 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019121:	83 c4 10             	add    esp,0x10
c0019124:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019128:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001912b:	83 ec 08             	sub    esp,0x8
c001912e:	50                   	push   eax
c001912f:	68 c9 48 02 c0       	push   0xc00248c9
c0019134:	e8 8c 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019139:	83 c4 10             	add    esp,0x10
c001913c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019143:	83 ec 08             	sub    esp,0x8
c0019146:	50                   	push   eax
c0019147:	68 d4 48 02 c0       	push   0xc00248d4
c001914c:	e8 74 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019151:	83 c4 10             	add    esp,0x10
c0019154:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019158:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001915b:	83 ec 08             	sub    esp,0x8
c001915e:	50                   	push   eax
c001915f:	68 ee 48 02 c0       	push   0xc00248ee
c0019164:	e8 5c 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019169:	83 c4 10             	add    esp,0x10
c001916c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019170:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019173:	83 ec 08             	sub    esp,0x8
c0019176:	50                   	push   eax
c0019177:	68 df 48 02 c0       	push   0xc00248df
c001917c:	e8 44 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019188:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001918b:	83 ec 08             	sub    esp,0x8
c001918e:	50                   	push   eax
c001918f:	68 ea 48 02 c0       	push   0xc00248ea
c0019194:	e8 2c 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00191a3:	83 ec 08             	sub    esp,0x8
c00191a6:	50                   	push   eax
c00191a7:	68 f9 48 02 c0       	push   0xc00248f9
c00191ac:	e8 14 3e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00191b1:	83 c4 10             	add    esp,0x10
c00191b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00191b8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00191bb:	83 ec 08             	sub    esp,0x8
c00191be:	50                   	push   eax
c00191bf:	68 04 49 02 c0       	push   0xc0024904
c00191c4:	e8 fc 3d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	83 ec 08             	sub    esp,0x8
c00191cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191d3:	68 0f 49 02 c0       	push   0xc002490f
c00191d8:	e8 e8 3d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00191dd:	83 c4 10             	add    esp,0x10
c00191e0:	83 ec 08             	sub    esp,0x8
c00191e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e7:	68 1a 49 02 c0       	push   0xc002491a
c00191ec:	e8 d4 3d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00191f1:	83 c4 10             	add    esp,0x10
c00191f4:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00191f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00191ff:	83 ec 0c             	sub    esp,0xc
c0019202:	50                   	push   eax
c0019203:	e8 9d 1b ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019210:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019216:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001921a:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001921d:	c1 e2 05             	shl    edx,0x5
c0019220:	81 c2 40 5a 02 c0    	add    edx,0xc0025a40
c0019226:	83 ec 08             	sub    esp,0x8
c0019229:	52                   	push   edx
c001922a:	50                   	push   eax
c001922b:	e8 78 20 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019238:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001923e:	83 ec 08             	sub    esp,0x8
c0019241:	68 25 49 02 c0       	push   0xc0024925
c0019246:	50                   	push   eax
c0019247:	e8 5c 20 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019254:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001925a:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001925f:	8b 12                	mov    edx,DWORD PTR [edx]
c0019261:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019264:	83 c2 0c             	add    edx,0xc
c0019267:	83 ec 08             	sub    esp,0x8
c001926a:	52                   	push   edx
c001926b:	50                   	push   eax
c001926c:	e8 37 20 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019271:	83 c4 10             	add    esp,0x10
c0019274:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019279:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001927f:	83 ec 08             	sub    esp,0x8
c0019282:	68 2e 49 02 c0       	push   0xc002492e
c0019287:	50                   	push   eax
c0019288:	e8 1b 20 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001928d:	83 c4 10             	add    esp,0x10
c0019290:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019295:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001929b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001929f:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00192a2:	83 ec 08             	sub    esp,0x8
c00192a5:	52                   	push   edx
c00192a6:	50                   	push   eax
c00192a7:	e8 b6 1f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00192b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00192ba:	83 ec 08             	sub    esp,0x8
c00192bd:	68 36 49 02 c0       	push   0xc0024936
c00192c2:	50                   	push   eax
c00192c3:	e8 e0 1f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00192c8:	83 c4 10             	add    esp,0x10
c00192cb:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00192d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00192d6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00192da:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00192dd:	83 ec 08             	sub    esp,0x8
c00192e0:	52                   	push   edx
c00192e1:	50                   	push   eax
c00192e2:	e8 7b 1f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00192e7:	83 c4 10             	add    esp,0x10
c00192ea:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00192ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00192f5:	83 ec 08             	sub    esp,0x8
c00192f8:	68 3e 49 02 c0       	push   0xc002493e
c00192fd:	50                   	push   eax
c00192fe:	e8 a5 1f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001930b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019311:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019315:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019318:	83 ec 08             	sub    esp,0x8
c001931b:	52                   	push   edx
c001931c:	50                   	push   eax
c001931d:	e8 40 1f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019322:	83 c4 10             	add    esp,0x10
c0019325:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001932a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019330:	83 ec 08             	sub    esp,0x8
c0019333:	68 46 49 02 c0       	push   0xc0024946
c0019338:	50                   	push   eax
c0019339:	e8 6a 1f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019346:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001934c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019350:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019353:	83 ec 08             	sub    esp,0x8
c0019356:	52                   	push   edx
c0019357:	50                   	push   eax
c0019358:	e8 05 1f ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001935d:	83 c4 10             	add    esp,0x10
c0019360:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019365:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001936b:	83 ec 08             	sub    esp,0x8
c001936e:	68 4e 49 02 c0       	push   0xc002494e
c0019373:	50                   	push   eax
c0019374:	e8 2f 1f ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019379:	83 c4 10             	add    esp,0x10
c001937c:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019381:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019387:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001938b:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001938e:	83 ec 08             	sub    esp,0x8
c0019391:	52                   	push   edx
c0019392:	50                   	push   eax
c0019393:	e8 ca 1e ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00193a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00193a6:	83 ec 08             	sub    esp,0x8
c00193a9:	68 56 49 02 c0       	push   0xc0024956
c00193ae:	50                   	push   eax
c00193af:	e8 f4 1e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00193b4:	83 c4 10             	add    esp,0x10
c00193b7:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00193bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00193c2:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00193c6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00193c9:	83 ec 08             	sub    esp,0x8
c00193cc:	52                   	push   edx
c00193cd:	50                   	push   eax
c00193ce:	e8 8f 1e ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00193d3:	83 c4 10             	add    esp,0x10
c00193d6:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00193db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00193e1:	83 ec 08             	sub    esp,0x8
c00193e4:	68 5e 49 02 c0       	push   0xc002495e
c00193e9:	50                   	push   eax
c00193ea:	e8 b9 1e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00193ef:	83 c4 10             	add    esp,0x10
c00193f2:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00193f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00193fd:	83 ec 08             	sub    esp,0x8
c0019400:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019404:	50                   	push   eax
c0019405:	e8 58 1e ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019412:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019418:	83 ec 08             	sub    esp,0x8
c001941b:	68 67 49 02 c0       	push   0xc0024967
c0019420:	50                   	push   eax
c0019421:	e8 82 1e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019426:	83 c4 10             	add    esp,0x10
c0019429:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001942e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019434:	83 ec 08             	sub    esp,0x8
c0019437:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001943b:	50                   	push   eax
c001943c:	e8 21 1e ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019441:	83 c4 10             	add    esp,0x10
c0019444:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019449:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001944f:	83 ec 08             	sub    esp,0x8
c0019452:	68 6f 49 02 c0       	push   0xc002496f
c0019457:	50                   	push   eax
c0019458:	e8 4b 1e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001945d:	83 c4 10             	add    esp,0x10
c0019460:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019465:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001946b:	83 ec 08             	sub    esp,0x8
c001946e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019472:	50                   	push   eax
c0019473:	e8 ea 1d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019478:	83 c4 10             	add    esp,0x10
c001947b:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019480:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019486:	83 ec 08             	sub    esp,0x8
c0019489:	68 77 49 02 c0       	push   0xc0024977
c001948e:	50                   	push   eax
c001948f:	e8 14 1e ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019494:	83 c4 10             	add    esp,0x10
c0019497:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001949c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194a2:	83 ec 08             	sub    esp,0x8
c00194a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194a9:	50                   	push   eax
c00194aa:	e8 b3 1d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00194b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194bd:	83 ec 08             	sub    esp,0x8
c00194c0:	68 7f 49 02 c0       	push   0xc002497f
c00194c5:	50                   	push   eax
c00194c6:	e8 dd 1d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00194cb:	83 c4 10             	add    esp,0x10
c00194ce:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00194d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194d9:	0f 21 c2             	mov    edx,db0
c00194dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00194e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194e4:	83 ec 08             	sub    esp,0x8
c00194e7:	52                   	push   edx
c00194e8:	50                   	push   eax
c00194e9:	e8 74 1d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00194ee:	83 c4 10             	add    esp,0x10
c00194f1:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00194f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00194fc:	83 ec 08             	sub    esp,0x8
c00194ff:	68 88 49 02 c0       	push   0xc0024988
c0019504:	50                   	push   eax
c0019505:	e8 9e 1d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001950a:	83 c4 10             	add    esp,0x10
c001950d:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019512:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019518:	0f 21 ca             	mov    edx,db1
c001951b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001951f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019523:	83 ec 08             	sub    esp,0x8
c0019526:	52                   	push   edx
c0019527:	50                   	push   eax
c0019528:	e8 35 1d ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001952d:	83 c4 10             	add    esp,0x10
c0019530:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019535:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001953b:	83 ec 08             	sub    esp,0x8
c001953e:	68 90 49 02 c0       	push   0xc0024990
c0019543:	50                   	push   eax
c0019544:	e8 5f 1d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019549:	83 c4 10             	add    esp,0x10
c001954c:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019551:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019557:	0f 21 d2             	mov    edx,db2
c001955a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001955e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019562:	83 ec 08             	sub    esp,0x8
c0019565:	52                   	push   edx
c0019566:	50                   	push   eax
c0019567:	e8 f6 1c ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019574:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001957a:	83 ec 08             	sub    esp,0x8
c001957d:	68 98 49 02 c0       	push   0xc0024998
c0019582:	50                   	push   eax
c0019583:	e8 20 1d ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019590:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019596:	0f 21 da             	mov    edx,db3
c0019599:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001959d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195a1:	83 ec 08             	sub    esp,0x8
c00195a4:	52                   	push   edx
c00195a5:	50                   	push   eax
c00195a6:	e8 b7 1c ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00195ab:	83 c4 10             	add    esp,0x10
c00195ae:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00195b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195b9:	83 ec 08             	sub    esp,0x8
c00195bc:	68 a0 49 02 c0       	push   0xc00249a0
c00195c1:	50                   	push   eax
c00195c2:	e8 e1 1c ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00195c7:	83 c4 10             	add    esp,0x10
c00195ca:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00195cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195d5:	0f 21 f2             	mov    edx,db6
c00195d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00195dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195e0:	83 ec 08             	sub    esp,0x8
c00195e3:	52                   	push   edx
c00195e4:	50                   	push   eax
c00195e5:	e8 78 1c ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00195ea:	83 c4 10             	add    esp,0x10
c00195ed:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00195f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00195f8:	83 ec 08             	sub    esp,0x8
c00195fb:	68 a8 49 02 c0       	push   0xc00249a8
c0019600:	50                   	push   eax
c0019601:	e8 a2 1c ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019606:	83 c4 10             	add    esp,0x10
c0019609:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001960e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019614:	0f 21 fa             	mov    edx,db7
c0019617:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001961b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001961f:	83 ec 08             	sub    esp,0x8
c0019622:	52                   	push   edx
c0019623:	50                   	push   eax
c0019624:	e8 39 1c ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019630:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019633:	83 ec 0c             	sub    esp,0xc
c0019636:	50                   	push   eax
c0019637:	e8 6f c9 ff ff       	call   c0015fab <Thr::getDriverNameFromAddress(unsigned long)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019643:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019648:	0f 84 a6 00 00 00    	je     c00196f4 <displayDebugInfo(regs*)+0x650>
c001964e:	83 ec 08             	sub    esp,0x8
c0019651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019655:	68 b0 49 02 c0       	push   0xc00249b0
c001965a:	e8 66 39 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001965f:	83 c4 10             	add    esp,0x10
c0019662:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019667:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001966d:	83 ec 08             	sub    esp,0x8
c0019670:	68 be 49 02 c0       	push   0xc00249be
c0019675:	50                   	push   eax
c0019676:	e8 2d 1c ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001967b:	83 c4 10             	add    esp,0x10
c001967e:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c0019683:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019689:	83 ec 08             	sub    esp,0x8
c001968c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019690:	50                   	push   eax
c0019691:	e8 12 1c ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019696:	83 c4 10             	add    esp,0x10
c0019699:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001969e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196a4:	83 ec 08             	sub    esp,0x8
c00196a7:	68 ca 49 02 c0       	push   0xc00249ca
c00196ac:	50                   	push   eax
c00196ad:	e8 f6 1b ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c00196b2:	83 c4 10             	add    esp,0x10
c00196b5:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c00196ba:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00196c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00196c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00196c7:	83 ec 0c             	sub    esp,0xc
c00196ca:	50                   	push   eax
c00196cb:	e8 12 c9 ff ff       	call   c0015fe2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00196d0:	83 c4 10             	add    esp,0x10
c00196d3:	83 ec 08             	sub    esp,0x8
c00196d6:	50                   	push   eax
c00196d7:	53                   	push   ebx
c00196d8:	e8 85 1b ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	83 ec 08             	sub    esp,0x8
c00196e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00196e7:	68 d6 49 02 c0       	push   0xc00249d6
c00196ec:	e8 d4 38 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00196f1:	83 c4 10             	add    esp,0x10
c00196f4:	fa                   	cli    
c00196f5:	f4                   	hlt    
c00196f6:	eb fe                	jmp    c00196f6 <displayDebugInfo(regs*)+0x652>

c00196f8 <displayProgramFault(char const*)>:
c00196f8:	83 ec 0c             	sub    esp,0xc
c00196fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019700:	8b 00                	mov    eax,DWORD PTR [eax]
c0019702:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019705:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001970b:	85 c0                	test   eax,eax
c001970d:	74 21                	je     c0019730 <displayProgramFault(char const*)+0x38>
c001970f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019714:	8b 00                	mov    eax,DWORD PTR [eax]
c0019716:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019719:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001971f:	6a 04                	push   0x4
c0019721:	6a 0f                	push   0xf
c0019723:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019727:	50                   	push   eax
c0019728:	e8 77 18 ff ff       	call   c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001972d:	83 c4 10             	add    esp,0x10
c0019730:	90                   	nop
c0019731:	83 c4 0c             	add    esp,0xc
c0019734:	c3                   	ret    

c0019735 <gpFault(regs*, void*)>:
c0019735:	83 ec 1c             	sub    esp,0x1c
c0019738:	c7 05 bc 98 02 c0 c7 79 01 c0 	mov    DWORD PTR ds:0xc00298bc,0xc00179c7
c0019742:	a1 bc 98 02 c0       	mov    eax,ds:0xc00298bc
c0019747:	85 c0                	test   eax,eax
c0019749:	74 1c                	je     c0019767 <gpFault(regs*, void*)+0x32>
c001974b:	a1 bc 98 02 c0       	mov    eax,ds:0xc00298bc
c0019750:	83 ec 0c             	sub    esp,0xc
c0019753:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019757:	ff d0                	call   eax
c0019759:	83 c4 10             	add    esp,0x10
c001975c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019760:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019765:	75 3e                	jne    c00197a5 <gpFault(regs*, void*)+0x70>
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	68 e6 49 02 c0       	push   0xc00249e6
c001976f:	e8 51 38 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019774:	83 c4 10             	add    esp,0x10
c0019777:	83 ec 0c             	sub    esp,0xc
c001977a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001977e:	e8 21 f9 ff ff       	call   c00190a4 <displayDebugInfo(regs*)>
c0019783:	83 c4 10             	add    esp,0x10
c0019786:	83 ec 0c             	sub    esp,0xc
c0019789:	68 01 4a 02 c0       	push   0xc0024a01
c001978e:	e8 65 ff ff ff       	call   c00196f8 <displayProgramFault(char const*)>
c0019793:	83 c4 10             	add    esp,0x10
c0019796:	83 ec 0c             	sub    esp,0xc
c0019799:	6a 00                	push   0x0
c001979b:	e8 20 dc ff ff       	call   c00173c0 <Thr::terminateFromIRQ(int)>
c00197a0:	83 c4 10             	add    esp,0x10
c00197a3:	eb 01                	jmp    c00197a6 <gpFault(regs*, void*)+0x71>
c00197a5:	90                   	nop
c00197a6:	83 c4 1c             	add    esp,0x1c
c00197a9:	c3                   	ret    

c00197aa <pgFault(regs*, void*)>:
c00197aa:	83 ec 1c             	sub    esp,0x1c
c00197ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197b1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00197b4:	83 ec 08             	sub    esp,0x8
c00197b7:	50                   	push   eax
c00197b8:	68 1a 4a 02 c0       	push   0xc0024a1a
c00197bd:	e8 03 38 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00197c2:	83 c4 10             	add    esp,0x10
c00197c5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00197ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00197cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00197cf:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00197d5:	0f 20 d2             	mov    edx,cr2
c00197d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197e0:	83 ec 08             	sub    esp,0x8
c00197e3:	52                   	push   edx
c00197e4:	50                   	push   eax
c00197e5:	e8 56 33 ff ff       	call   c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>
c00197ea:	83 c4 10             	add    esp,0x10
c00197ed:	84 c0                	test   al,al
c00197ef:	75 3e                	jne    c001982f <pgFault(regs*, void*)+0x85>
c00197f1:	83 ec 0c             	sub    esp,0xc
c00197f4:	68 2f 4a 02 c0       	push   0xc0024a2f
c00197f9:	e8 c7 37 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00197fe:	83 c4 10             	add    esp,0x10
c0019801:	83 ec 0c             	sub    esp,0xc
c0019804:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019808:	e8 97 f8 ff ff       	call   c00190a4 <displayDebugInfo(regs*)>
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	83 ec 0c             	sub    esp,0xc
c0019813:	68 3c 4a 02 c0       	push   0xc0024a3c
c0019818:	e8 db fe ff ff       	call   c00196f8 <displayProgramFault(char const*)>
c001981d:	83 c4 10             	add    esp,0x10
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	6a 00                	push   0x0
c0019825:	e8 96 db ff ff       	call   c00173c0 <Thr::terminateFromIRQ(int)>
c001982a:	83 c4 10             	add    esp,0x10
c001982d:	eb 01                	jmp    c0019830 <pgFault(regs*, void*)+0x86>
c001982f:	90                   	nop
c0019830:	83 c4 1c             	add    esp,0x1c
c0019833:	c3                   	ret    

c0019834 <otherISRHandler(regs*, void*)>:
c0019834:	83 ec 0c             	sub    esp,0xc
c0019837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001983b:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001983e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019842:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019845:	83 ec 04             	sub    esp,0x4
c0019848:	52                   	push   edx
c0019849:	50                   	push   eax
c001984a:	68 47 4a 02 c0       	push   0xc0024a47
c001984f:	e8 71 37 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	83 ec 0c             	sub    esp,0xc
c001985a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001985e:	e8 41 f8 ff ff       	call   c00190a4 <displayDebugInfo(regs*)>
c0019863:	83 c4 10             	add    esp,0x10
c0019866:	83 ec 0c             	sub    esp,0xc
c0019869:	68 f8 4a 02 c0       	push   0xc0024af8
c001986e:	e8 85 fe ff ff       	call   c00196f8 <displayProgramFault(char const*)>
c0019873:	83 c4 10             	add    esp,0x10
c0019876:	83 ec 0c             	sub    esp,0xc
c0019879:	6a 00                	push   0x0
c001987b:	e8 40 db ff ff       	call   c00173c0 <Thr::terminateFromIRQ(int)>
c0019880:	83 c4 10             	add    esp,0x10
c0019883:	90                   	nop
c0019884:	83 c4 0c             	add    esp,0xc
c0019887:	c3                   	ret    

c0019888 <opcodeFault(regs*, void*)>:
c0019888:	55                   	push   ebp
c0019889:	89 e5                	mov    ebp,esp
c001988b:	56                   	push   esi
c001988c:	53                   	push   ebx
c001988d:	83 ec 30             	sub    esp,0x30
c0019890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019893:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019896:	83 ec 08             	sub    esp,0x8
c0019899:	50                   	push   eax
c001989a:	68 64 4a 02 c0       	push   0xc0024a64
c001989f:	e8 21 37 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00198a4:	83 c4 10             	add    esp,0x10
c00198a7:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c00198ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00198b2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00198b8:	84 c0                	test   al,al
c00198ba:	74 24                	je     c00198e0 <opcodeFault(regs*, void*)+0x58>
c00198bc:	83 ec 0c             	sub    esp,0xc
c00198bf:	68 20 4b 02 c0       	push   0xc0024b20
c00198c4:	e8 fc 36 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198cf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198d2:	8d 50 19             	lea    edx,[eax+0x19]
c00198d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00198db:	e9 9b 03 00 00       	jmp    c0019c7b <opcodeFault(regs*, void*)+0x3f3>
c00198e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00198e9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00198ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00198f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00198f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00198f9:	8a 00                	mov    al,BYTE PTR [eax]
c00198fb:	3c f0                	cmp    al,0xf0
c00198fd:	75 17                	jne    c0019916 <opcodeFault(regs*, void*)+0x8e>
c00198ff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019905:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019908:	8d 50 01             	lea    edx,[eax+0x1]
c001990b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001990e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019911:	e9 d6 00 00 00       	jmp    c00199ec <opcodeFault(regs*, void*)+0x164>
c0019916:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019919:	8a 00                	mov    al,BYTE PTR [eax]
c001991b:	3c f2                	cmp    al,0xf2
c001991d:	74 09                	je     c0019928 <opcodeFault(regs*, void*)+0xa0>
c001991f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019922:	8a 00                	mov    al,BYTE PTR [eax]
c0019924:	3c f3                	cmp    al,0xf3
c0019926:	75 1b                	jne    c0019943 <opcodeFault(regs*, void*)+0xbb>
c0019928:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001992c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001992f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019932:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019935:	8d 50 01             	lea    edx,[eax+0x1]
c0019938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001993b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001993e:	e9 a9 00 00 00       	jmp    c00199ec <opcodeFault(regs*, void*)+0x164>
c0019943:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019946:	8a 00                	mov    al,BYTE PTR [eax]
c0019948:	3c 66                	cmp    al,0x66
c001994a:	75 1b                	jne    c0019967 <opcodeFault(regs*, void*)+0xdf>
c001994c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019950:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019956:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019959:	8d 50 01             	lea    edx,[eax+0x1]
c001995c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001995f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019962:	e9 85 00 00 00       	jmp    c00199ec <opcodeFault(regs*, void*)+0x164>
c0019967:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001996a:	8a 00                	mov    al,BYTE PTR [eax]
c001996c:	3c 67                	cmp    al,0x67
c001996e:	75 18                	jne    c0019988 <opcodeFault(regs*, void*)+0x100>
c0019970:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0019974:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001997a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001997d:	8d 50 01             	lea    edx,[eax+0x1]
c0019980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019983:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019986:	eb 64                	jmp    c00199ec <opcodeFault(regs*, void*)+0x164>
c0019988:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001998b:	8a 00                	mov    al,BYTE PTR [eax]
c001998d:	3c 2e                	cmp    al,0x2e
c001998f:	74 09                	je     c001999a <opcodeFault(regs*, void*)+0x112>
c0019991:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0019994:	8a 00                	mov    al,BYTE PTR [eax]
c0019996:	3c 3e                	cmp    al,0x3e
c0019998:	75 18                	jne    c00199b2 <opcodeFault(regs*, void*)+0x12a>
c001999a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001999e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00199a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00199a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00199a7:	8d 50 01             	lea    edx,[eax+0x1]
c00199aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00199ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00199b0:	eb 3a                	jmp    c00199ec <opcodeFault(regs*, void*)+0x164>
c00199b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199b5:	8a 00                	mov    al,BYTE PTR [eax]
c00199b7:	3c 36                	cmp    al,0x36
c00199b9:	74 1b                	je     c00199d6 <opcodeFault(regs*, void*)+0x14e>
c00199bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199be:	8a 00                	mov    al,BYTE PTR [eax]
c00199c0:	3c 26                	cmp    al,0x26
c00199c2:	74 12                	je     c00199d6 <opcodeFault(regs*, void*)+0x14e>
c00199c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199c7:	8a 00                	mov    al,BYTE PTR [eax]
c00199c9:	3c 64                	cmp    al,0x64
c00199cb:	74 09                	je     c00199d6 <opcodeFault(regs*, void*)+0x14e>
c00199cd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199d0:	8a 00                	mov    al,BYTE PTR [eax]
c00199d2:	3c 65                	cmp    al,0x65
c00199d4:	75 16                	jne    c00199ec <opcodeFault(regs*, void*)+0x164>
c00199d6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00199da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00199dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00199e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00199e3:	8d 50 01             	lea    edx,[eax+0x1]
c00199e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00199e9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00199ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199ef:	8a 00                	mov    al,BYTE PTR [eax]
c00199f1:	3c 0f                	cmp    al,0xf
c00199f3:	0f 85 8d 01 00 00    	jne    c0019b86 <opcodeFault(regs*, void*)+0x2fe>
c00199f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00199fc:	40                   	inc    eax
c00199fd:	8a 00                	mov    al,BYTE PTR [eax]
c00199ff:	3c c7                	cmp    al,0xc7
c0019a01:	0f 85 7f 01 00 00    	jne    c0019b86 <opcodeFault(regs*, void*)+0x2fe>
c0019a07:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0019a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019a10:	8d 50 01             	lea    edx,[eax+0x1]
c0019a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a16:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019a19:	8d 45 d2             	lea    eax,[ebp-0x2e]
c0019a1c:	50                   	push   eax
c0019a1d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c0019a20:	50                   	push   eax
c0019a21:	8d 45 d4             	lea    eax,[ebp-0x2c]
c0019a24:	50                   	push   eax
c0019a25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019a28:	e8 63 90 ff ff       	call   c0012a90 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019a2d:	83 c4 10             	add    esp,0x10
c0019a30:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019a33:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0019a36:	83 f0 01             	xor    eax,0x1
c0019a39:	84 c0                	test   al,al
c0019a3b:	0f 84 45 01 00 00    	je     c0019b86 <opcodeFault(regs*, void*)+0x2fe>
c0019a41:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c0019a44:	3c 01                	cmp    al,0x1
c0019a46:	0f 85 3a 01 00 00    	jne    c0019b86 <opcodeFault(regs*, void*)+0x2fe>
c0019a4c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0019a4f:	83 f0 01             	xor    eax,0x1
c0019a52:	84 c0                	test   al,al
c0019a54:	0f 84 2c 01 00 00    	je     c0019b86 <opcodeFault(regs*, void*)+0x2fe>
c0019a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a5d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019a60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019a63:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0019a6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0019a6d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019a70:	89 c2                	mov    edx,eax
c0019a72:	b8 00 00 00 00       	mov    eax,0x0
c0019a77:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019a7a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0019a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a80:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019a83:	ba 00 00 00 00       	mov    edx,0x0
c0019a88:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c0019a8b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c0019a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019a91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019a94:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019a97:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0019a9e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019aa1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0019aa4:	89 c2                	mov    edx,eax
c0019aa6:	b8 00 00 00 00       	mov    eax,0x0
c0019aab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0019aae:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c0019ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019ab4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019ab7:	ba 00 00 00 00       	mov    edx,0x0
c0019abc:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c0019abf:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c0019ac2:	fa                   	cli    
c0019ac3:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0019ac8:	40                   	inc    eax
c0019ac9:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0019ace:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019ad1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ad6:	89 c1                	mov    ecx,eax
c0019ad8:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c0019adb:	89 cb                	mov    ebx,ecx
c0019add:	89 d0                	mov    eax,edx
c0019adf:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0019ae2:	89 c6                	mov    esi,eax
c0019ae4:	89 f0                	mov    eax,esi
c0019ae6:	09 d8                	or     eax,ebx
c0019ae8:	85 c0                	test   eax,eax
c0019aea:	75 21                	jne    c0019b0d <opcodeFault(regs*, void*)+0x285>
c0019aec:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0019aef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0019af2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0019af5:	89 01                	mov    DWORD PTR [ecx],eax
c0019af7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019afd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b00:	83 c8 40             	or     eax,0x40
c0019b03:	89 c2                	mov    edx,eax
c0019b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b08:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0019b0b:	eb 3e                	jmp    c0019b4b <opcodeFault(regs*, void*)+0x2c3>
c0019b0d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0019b10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019b13:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b15:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0019b18:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0019b1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0019b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b21:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0019b24:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0019b27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0019b2a:	89 d0                	mov    eax,edx
c0019b2c:	31 d2                	xor    edx,edx
c0019b2e:	89 c3                	mov    ebx,eax
c0019b30:	89 d6                	mov    esi,edx
c0019b32:	89 da                	mov    edx,ebx
c0019b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b37:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0019b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019b40:	83 e0 bf             	and    eax,0xffffffbf
c0019b43:	89 c2                	mov    edx,eax
c0019b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b48:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0019b4b:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0019b50:	48                   	dec    eax
c0019b51:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0019b56:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0019b5b:	85 c0                	test   eax,eax
c0019b5d:	75 01                	jne    c0019b60 <opcodeFault(regs*, void*)+0x2d8>
c0019b5f:	fb                   	sti    
c0019b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b66:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0019b69:	01 c2                	add    edx,eax
c0019b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b6e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019b71:	83 ec 0c             	sub    esp,0xc
c0019b74:	68 72 4a 02 c0       	push   0xc0024a72
c0019b79:	e8 47 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019b7e:	83 c4 10             	add    esp,0x10
c0019b81:	e9 f5 00 00 00       	jmp    c0019c7b <opcodeFault(regs*, void*)+0x3f3>
c0019b86:	83 ec 0c             	sub    esp,0xc
c0019b89:	68 85 4a 02 c0       	push   0xc0024a85
c0019b8e:	e8 32 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019b93:	83 c4 10             	add    esp,0x10
c0019b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b99:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019b9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019ba2:	c1 e0 04             	shl    eax,0x4
c0019ba5:	01 d0                	add    eax,edx
c0019ba7:	83 c0 03             	add    eax,0x3
c0019baa:	8a 00                	mov    al,BYTE PTR [eax]
c0019bac:	0f b6 d8             	movzx  ebx,al
c0019baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019bb2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019bb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019bbb:	c1 e0 04             	shl    eax,0x4
c0019bbe:	01 d0                	add    eax,edx
c0019bc0:	83 c0 02             	add    eax,0x2
c0019bc3:	8a 00                	mov    al,BYTE PTR [eax]
c0019bc5:	0f b6 c8             	movzx  ecx,al
c0019bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019bcb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0019bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019bd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019bd4:	c1 e0 04             	shl    eax,0x4
c0019bd7:	01 d0                	add    eax,edx
c0019bd9:	40                   	inc    eax
c0019bda:	8a 00                	mov    al,BYTE PTR [eax]
c0019bdc:	0f b6 d0             	movzx  edx,al
c0019bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019be2:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0019be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019be8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0019beb:	c1 e0 04             	shl    eax,0x4
c0019bee:	01 f0                	add    eax,esi
c0019bf0:	8a 00                	mov    al,BYTE PTR [eax]
c0019bf2:	0f b6 c0             	movzx  eax,al
c0019bf5:	83 ec 0c             	sub    esp,0xc
c0019bf8:	53                   	push   ebx
c0019bf9:	51                   	push   ecx
c0019bfa:	52                   	push   edx
c0019bfb:	50                   	push   eax
c0019bfc:	68 44 4b 02 c0       	push   0xc0024b44
c0019c01:	e8 bf 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c06:	83 c4 20             	add    esp,0x20
c0019c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019c0c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c0f:	83 c0 03             	add    eax,0x3
c0019c12:	8a 00                	mov    al,BYTE PTR [eax]
c0019c14:	0f b6 d8             	movzx  ebx,al
c0019c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019c1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c1d:	83 c0 02             	add    eax,0x2
c0019c20:	8a 00                	mov    al,BYTE PTR [eax]
c0019c22:	0f b6 c8             	movzx  ecx,al
c0019c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019c28:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c2b:	40                   	inc    eax
c0019c2c:	8a 00                	mov    al,BYTE PTR [eax]
c0019c2e:	0f b6 d0             	movzx  edx,al
c0019c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0019c34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c37:	8a 00                	mov    al,BYTE PTR [eax]
c0019c39:	0f b6 c0             	movzx  eax,al
c0019c3c:	83 ec 0c             	sub    esp,0xc
c0019c3f:	53                   	push   ebx
c0019c40:	51                   	push   ecx
c0019c41:	52                   	push   edx
c0019c42:	50                   	push   eax
c0019c43:	68 6c 4b 02 c0       	push   0xc0024b6c
c0019c48:	e8 78 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c4d:	83 c4 20             	add    esp,0x20
c0019c50:	83 ec 0c             	sub    esp,0xc
c0019c53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019c56:	e8 49 f4 ff ff       	call   c00190a4 <displayDebugInfo(regs*)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	83 ec 0c             	sub    esp,0xc
c0019c61:	68 96 4a 02 c0       	push   0xc0024a96
c0019c66:	e8 8d fa ff ff       	call   c00196f8 <displayProgramFault(char const*)>
c0019c6b:	83 c4 10             	add    esp,0x10
c0019c6e:	83 ec 0c             	sub    esp,0xc
c0019c71:	6a 00                	push   0x0
c0019c73:	e8 48 d7 ff ff       	call   c00173c0 <Thr::terminateFromIRQ(int)>
c0019c78:	83 c4 10             	add    esp,0x10
c0019c7b:	8d 65 f8             	lea    esp,[ebp-0x8]
c0019c7e:	5b                   	pop    ebx
c0019c7f:	5e                   	pop    esi
c0019c80:	5d                   	pop    ebp
c0019c81:	c3                   	ret    

c0019c82 <i386SaveCoprocessor(void*)>:
c0019c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c86:	83 c0 3f             	add    eax,0x3f
c0019c89:	83 e0 c0             	and    eax,0xffffffc0
c0019c8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019c90:	ff 25 b4 98 02 c0    	jmp    DWORD PTR ds:0xc00298b4

c0019c96 <i386LoadCoprocessor(void*)>:
c0019c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c9a:	83 c0 3f             	add    eax,0x3f
c0019c9d:	83 e0 c0             	and    eax,0xffffffc0
c0019ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca4:	ff 25 b0 98 02 c0    	jmp    DWORD PTR ds:0xc00298b0

c0019caa <x87EmulHandler(regs*, void*)>:
c0019caa:	53                   	push   ebx
c0019cab:	83 ec 14             	sub    esp,0x14
c0019cae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019cb2:	68 a3 4a 02 c0       	push   0xc0024aa3
c0019cb7:	e8 09 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019cbc:	83 c4 10             	add    esp,0x10
c0019cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cc4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0019cc8:	74 10                	je     c0019cda <x87EmulHandler(regs*, void*)+0x30>
c0019cca:	83 ec 0c             	sub    esp,0xc
c0019ccd:	68 b3 4a 02 c0       	push   0xc0024ab3
c0019cd2:	e8 a0 96 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0019cd7:	83 c4 10             	add    esp,0x10
c0019cda:	0f 20 c0             	mov    eax,cr0
c0019cdd:	a8 08                	test   al,0x8
c0019cdf:	74 56                	je     c0019d37 <x87EmulHandler(regs*, void*)+0x8d>
c0019ce1:	0f 06                	clts   
c0019ce3:	a1 ac 98 02 c0       	mov    eax,ds:0xc00298ac
c0019ce8:	85 c0                	test   eax,eax
c0019cea:	74 0e                	je     c0019cfa <x87EmulHandler(regs*, void*)+0x50>
c0019cec:	83 ec 0c             	sub    esp,0xc
c0019cef:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019cf2:	e8 8b ff ff ff       	call   c0019c82 <i386SaveCoprocessor(void*)>
c0019cf7:	83 c4 10             	add    esp,0x10
c0019cfa:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019d00:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019d04:	75 12                	jne    c0019d18 <x87EmulHandler(regs*, void*)+0x6e>
c0019d06:	83 ec 0c             	sub    esp,0xc
c0019d09:	68 40 02 00 00       	push   0x240
c0019d0e:	e8 a4 ff fe ff       	call   c0009cb7 <malloc>
c0019d13:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0019d16:	eb 10                	jmp    c0019d28 <x87EmulHandler(regs*, void*)+0x7e>
c0019d18:	83 ec 0c             	sub    esp,0xc
c0019d1b:	a1 ac 98 02 c0       	mov    eax,ds:0xc00298ac
c0019d20:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019d23:	e8 6e ff ff ff       	call   c0019c96 <i386LoadCoprocessor(void*)>
c0019d28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d2d:	83 c4 10             	add    esp,0x10
c0019d30:	a3 ac 98 02 c0       	mov    ds:0xc00298ac,eax
c0019d35:	eb 2e                	jmp    c0019d65 <x87EmulHandler(regs*, void*)+0xbb>
c0019d37:	83 ec 0c             	sub    esp,0xc
c0019d3a:	53                   	push   ebx
c0019d3b:	e8 ca e7 ff ff       	call   c001850a <Vm::x87Handler(regs*)>
c0019d40:	83 c4 10             	add    esp,0x10
c0019d43:	84 c0                	test   al,al
c0019d45:	75 1e                	jne    c0019d65 <x87EmulHandler(regs*, void*)+0xbb>
c0019d47:	83 ec 0c             	sub    esp,0xc
c0019d4a:	68 c7 4a 02 c0       	push   0xc0024ac7
c0019d4f:	e8 71 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d54:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019d5c:	83 c4 18             	add    esp,0x18
c0019d5f:	5b                   	pop    ebx
c0019d60:	e9 5b d6 ff ff       	jmp    c00173c0 <Thr::terminateFromIRQ(int)>
c0019d65:	83 c4 08             	add    esp,0x8
c0019d68:	5b                   	pop    ebx
c0019d69:	c3                   	ret    

c0019d6a <Hal::initialiseCoprocessor()>:
c0019d6a:	83 ec 10             	sub    esp,0x10
c0019d6d:	c7 05 ac 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00298ac,0x0
c0019d77:	6a 00                	push   0x0
c0019d79:	68 aa 9c 01 c0       	push   0xc0019caa
c0019d7e:	6a 07                	push   0x7
c0019d80:	e8 5b 4c ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019d85:	e8 96 71 00 00       	call   c0020f20 <avxDetect>
c0019d8a:	83 c4 10             	add    esp,0x10
c0019d8d:	85 c0                	test   eax,eax
c0019d8f:	74 29                	je     c0019dba <Hal::initialiseCoprocessor()+0x50>
c0019d91:	83 ec 0c             	sub    esp,0xc
c0019d94:	68 dd 4a 02 c0       	push   0xc0024add
c0019d99:	e8 27 32 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019d9e:	c7 05 b4 98 02 c0 4a 0f 02 c0 	mov    DWORD PTR ds:0xc00298b4,0xc0020f4a
c0019da8:	c7 05 b0 98 02 c0 5b 0f 02 c0 	mov    DWORD PTR ds:0xc00298b0,0xc0020f5b
c0019db2:	83 c4 1c             	add    esp,0x1c
c0019db5:	e9 b2 71 00 00       	jmp    c0020f6c <avxInit>
c0019dba:	e8 01 72 00 00       	call   c0020fc0 <absolutelyNoChanceInHell>
c0019dbf:	85 c0                	test   eax,eax
c0019dc1:	74 29                	je     c0019dec <Hal::initialiseCoprocessor()+0x82>
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	68 e3 4a 02 c0       	push   0xc0024ae3
c0019dcb:	e8 f5 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019dd0:	c7 05 b4 98 02 c0 d8 0f 02 c0 	mov    DWORD PTR ds:0xc00298b4,0xc0020fd8
c0019dda:	c7 05 b0 98 02 c0 e0 0f 02 c0 	mov    DWORD PTR ds:0xc00298b0,0xc0020fe0
c0019de4:	83 c4 1c             	add    esp,0x1c
c0019de7:	e9 fc 71 00 00       	jmp    c0020fe8 <sseInit>
c0019dec:	e8 15 72 00 00       	call   c0021006 <x87Detect>
c0019df1:	85 c0                	test   eax,eax
c0019df3:	74 29                	je     c0019e1e <Hal::initialiseCoprocessor()+0xb4>
c0019df5:	83 ec 0c             	sub    esp,0xc
c0019df8:	68 e9 4a 02 c0       	push   0xc0024ae9
c0019dfd:	e8 c3 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e02:	c7 05 b4 98 02 c0 21 10 02 c0 	mov    DWORD PTR ds:0xc00298b4,0xc0021021
c0019e0c:	c7 05 b0 98 02 c0 28 10 02 c0 	mov    DWORD PTR ds:0xc00298b0,0xc0021028
c0019e16:	83 c4 1c             	add    esp,0x1c
c0019e19:	e9 11 72 00 00       	jmp    c002102f <x87Init>
c0019e1e:	83 ec 0c             	sub    esp,0xc
c0019e21:	68 ef 4a 02 c0       	push   0xc0024aef
c0019e26:	e8 9a 31 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019e2b:	c7 05 b4 98 02 c0 69 90 01 c0 	mov    DWORD PTR ds:0xc00298b4,0xc0019069
c0019e35:	c7 05 b0 98 02 c0 69 90 01 c0 	mov    DWORD PTR ds:0xc00298b0,0xc0019069
c0019e3f:	0f 20 c0             	mov    eax,cr0
c0019e42:	83 c8 04             	or     eax,0x4
c0019e45:	0f 22 c0             	mov    cr0,eax
c0019e48:	83 c4 1c             	add    esp,0x1c
c0019e4b:	c3                   	ret    

c0019e4c <Hal::panic(char const*)>:
c0019e4c:	e9 26 95 ff ff       	jmp    c0013377 <Krnl::panic(char const*)>

c0019e51 <Hal::initialise()>:
c0019e51:	83 ec 0c             	sub    esp,0xc
c0019e54:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0019e59:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0019e5f:	b8 6a 90 01 c0       	mov    eax,0xc001906a
c0019e64:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c0019e6b:	74 05                	je     c0019e72 <Hal::initialise()+0x21>
c0019e6d:	b8 6f 90 01 c0       	mov    eax,0xc001906f
c0019e72:	a3 b8 98 02 c0       	mov    ds:0xc00298b8,eax
c0019e77:	e8 89 4d ff ff       	call   c000ec05 <setupINTS()>
c0019e7c:	80 3d c0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bc0,0x0
c0019e83:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0019e88:	75 07                	jne    c0019e91 <Hal::initialise()+0x40>
c0019e8a:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c0019e91:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e97:	83 e0 01             	and    eax,0x1
c0019e9a:	a2 a8 98 02 c0       	mov    ds:0xc00298a8,al
c0019e9f:	e8 b4 02 00 00       	call   c001a158 <picOpen()>
c0019ea4:	80 3d a8 98 02 c0 00 	cmp    BYTE PTR ds:0xc00298a8,0x0
c0019eab:	74 0a                	je     c0019eb7 <Hal::initialise()+0x66>
c0019ead:	e8 f6 01 00 00       	call   c001a0a8 <picDisable()>
c0019eb2:	e8 f7 69 00 00       	call   c00208ae <apicOpen()>
c0019eb7:	50                   	push   eax
c0019eb8:	6a 00                	push   0x0
c0019eba:	68 34 98 01 c0       	push   0xc0019834
c0019ebf:	6a 00                	push   0x0
c0019ec1:	e8 1a 4b ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019ec6:	83 c4 0c             	add    esp,0xc
c0019ec9:	6a 00                	push   0x0
c0019ecb:	68 34 98 01 c0       	push   0xc0019834
c0019ed0:	6a 01                	push   0x1
c0019ed2:	e8 09 4b ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019ed7:	83 c4 0c             	add    esp,0xc
c0019eda:	6a 00                	push   0x0
c0019edc:	68 72 90 01 c0       	push   0xc0019072
c0019ee1:	6a 02                	push   0x2
c0019ee3:	e8 f8 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019ee8:	83 c4 0c             	add    esp,0xc
c0019eeb:	6a 00                	push   0x0
c0019eed:	68 34 98 01 c0       	push   0xc0019834
c0019ef2:	6a 03                	push   0x3
c0019ef4:	e8 e7 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019ef9:	83 c4 0c             	add    esp,0xc
c0019efc:	6a 00                	push   0x0
c0019efe:	68 34 98 01 c0       	push   0xc0019834
c0019f03:	6a 04                	push   0x4
c0019f05:	e8 d6 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f0a:	83 c4 0c             	add    esp,0xc
c0019f0d:	6a 00                	push   0x0
c0019f0f:	68 34 98 01 c0       	push   0xc0019834
c0019f14:	6a 05                	push   0x5
c0019f16:	e8 c5 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f1b:	83 c4 0c             	add    esp,0xc
c0019f1e:	6a 00                	push   0x0
c0019f20:	68 88 98 01 c0       	push   0xc0019888
c0019f25:	6a 06                	push   0x6
c0019f27:	e8 b4 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f2c:	83 c4 0c             	add    esp,0xc
c0019f2f:	6a 00                	push   0x0
c0019f31:	68 8b 90 01 c0       	push   0xc001908b
c0019f36:	6a 08                	push   0x8
c0019f38:	e8 a3 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f3d:	83 c4 0c             	add    esp,0xc
c0019f40:	6a 00                	push   0x0
c0019f42:	68 34 98 01 c0       	push   0xc0019834
c0019f47:	6a 09                	push   0x9
c0019f49:	e8 92 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f4e:	83 c4 0c             	add    esp,0xc
c0019f51:	6a 00                	push   0x0
c0019f53:	68 34 98 01 c0       	push   0xc0019834
c0019f58:	6a 0a                	push   0xa
c0019f5a:	e8 81 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f5f:	83 c4 0c             	add    esp,0xc
c0019f62:	6a 00                	push   0x0
c0019f64:	68 34 98 01 c0       	push   0xc0019834
c0019f69:	6a 0b                	push   0xb
c0019f6b:	e8 70 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f70:	83 c4 0c             	add    esp,0xc
c0019f73:	6a 00                	push   0x0
c0019f75:	68 34 98 01 c0       	push   0xc0019834
c0019f7a:	6a 0c                	push   0xc
c0019f7c:	e8 5f 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f81:	83 c4 0c             	add    esp,0xc
c0019f84:	6a 00                	push   0x0
c0019f86:	68 35 97 01 c0       	push   0xc0019735
c0019f8b:	6a 0d                	push   0xd
c0019f8d:	e8 4e 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019f92:	83 c4 0c             	add    esp,0xc
c0019f95:	6a 00                	push   0x0
c0019f97:	68 aa 97 01 c0       	push   0xc00197aa
c0019f9c:	6a 0e                	push   0xe
c0019f9e:	e8 3d 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019fa3:	83 c4 0c             	add    esp,0xc
c0019fa6:	6a 00                	push   0x0
c0019fa8:	68 34 98 01 c0       	push   0xc0019834
c0019fad:	6a 0f                	push   0xf
c0019faf:	e8 2c 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019fb4:	83 c4 0c             	add    esp,0xc
c0019fb7:	6a 00                	push   0x0
c0019fb9:	68 34 98 01 c0       	push   0xc0019834
c0019fbe:	6a 10                	push   0x10
c0019fc0:	e8 1b 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019fc5:	83 c4 0c             	add    esp,0xc
c0019fc8:	6a 00                	push   0x0
c0019fca:	68 34 98 01 c0       	push   0xc0019834
c0019fcf:	6a 11                	push   0x11
c0019fd1:	e8 0a 4a ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019fd6:	83 c4 0c             	add    esp,0xc
c0019fd9:	6a 00                	push   0x0
c0019fdb:	68 34 98 01 c0       	push   0xc0019834
c0019fe0:	6a 12                	push   0x12
c0019fe2:	e8 f9 49 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019fe7:	83 c4 0c             	add    esp,0xc
c0019fea:	6a 00                	push   0x0
c0019fec:	68 34 98 01 c0       	push   0xc0019834
c0019ff1:	6a 13                	push   0x13
c0019ff3:	e8 e8 49 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0019ff8:	83 c4 0c             	add    esp,0xc
c0019ffb:	6a 00                	push   0x0
c0019ffd:	68 34 98 01 c0       	push   0xc0019834
c001a002:	6a 14                	push   0x14
c001a004:	e8 d7 49 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a009:	83 c4 0c             	add    esp,0xc
c001a00c:	6a 00                	push   0x0
c001a00e:	68 34 98 01 c0       	push   0xc0019834
c001a013:	6a 1e                	push   0x1e
c001a015:	e8 c6 49 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a01a:	83 c4 0c             	add    esp,0xc
c001a01d:	6a 00                	push   0x0
c001a01f:	68 21 50 01 c0       	push   0xc0015021
c001a024:	6a 60                	push   0x60
c001a026:	e8 b5 49 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a02b:	83 c4 1c             	add    esp,0x1c
c001a02e:	c3                   	ret    

c001a02f <Hal::makeBeep(int)>:
c001a02f:	53                   	push   ebx
c001a030:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a034:	85 db                	test   ebx,ebx
c001a036:	75 07                	jne    c001a03f <Hal::makeBeep(int)+0x10>
c001a038:	e4 61                	in     al,0x61
c001a03a:	83 e0 fc             	and    eax,0xfffffffc
c001a03d:	eb 26                	jmp    c001a065 <Hal::makeBeep(int)+0x36>
c001a03f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a044:	99                   	cdq    
c001a045:	f7 fb                	idiv   ebx
c001a047:	89 c1                	mov    ecx,eax
c001a049:	b0 b6                	mov    al,0xb6
c001a04b:	e6 43                	out    0x43,al
c001a04d:	88 c8                	mov    al,cl
c001a04f:	e6 42                	out    0x42,al
c001a051:	89 c8                	mov    eax,ecx
c001a053:	c1 e8 08             	shr    eax,0x8
c001a056:	e6 42                	out    0x42,al
c001a058:	e4 61                	in     al,0x61
c001a05a:	88 c2                	mov    dl,al
c001a05c:	83 ca 03             	or     edx,0x3
c001a05f:	38 c2                	cmp    dl,al
c001a061:	74 04                	je     c001a067 <Hal::makeBeep(int)+0x38>
c001a063:	88 d0                	mov    al,dl
c001a065:	e6 61                	out    0x61,al
c001a067:	5b                   	pop    ebx
c001a068:	c3                   	ret    

c001a069 <Hal::getRand()>:
c001a069:	31 c0                	xor    eax,eax
c001a06b:	c3                   	ret    

c001a06c <Hal::endOfInterrupt(int)>:
c001a06c:	80 3d a8 98 02 c0 00 	cmp    BYTE PTR ds:0xc00298a8,0x0
c001a073:	74 23                	je     c001a098 <Hal::endOfInterrupt(int)+0x2c>
c001a075:	83 ec 14             	sub    esp,0x14
c001a078:	6a 1b                	push   0x1b
c001a07a:	ff 35 a8 62 02 c0    	push   DWORD PTR ds:0xc00262a8
c001a080:	e8 e1 f1 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001a085:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a08a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a094:	83 c4 1c             	add    esp,0x1c
c001a097:	c3                   	ret    
c001a098:	e9 3f 02 00 00       	jmp    c001a2dc <picEOI(int)>
c001a09d:	66 90                	xchg   ax,ax
c001a09f:	90                   	nop

c001a0a0 <picIoWait()>:
c001a0a0:	eb 00                	jmp    c001a0a2 <picIoWait()+0x2>
c001a0a2:	eb 00                	jmp    c001a0a4 <picIoWait()+0x4>
c001a0a4:	90                   	nop
c001a0a5:	c3                   	ret    
c001a0a6:	66 90                	xchg   ax,ax

c001a0a8 <picDisable()>:
c001a0a8:	83 ec 10             	sub    esp,0x10
c001a0ab:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a0b2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a0b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a0bb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a0c0:	ee                   	out    dx,al
c001a0c1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a0c8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a0cd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a0d1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a0d6:	ee                   	out    dx,al
c001a0d7:	90                   	nop
c001a0d8:	83 c4 10             	add    esp,0x10
c001a0db:	c3                   	ret    

c001a0dc <picGetIRQReg(int)>:
c001a0dc:	83 ec 10             	sub    esp,0x10
c001a0df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0e3:	0f b6 c0             	movzx  eax,al
c001a0e6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a0ed:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a0f1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a0f5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a0fa:	ee                   	out    dx,al
c001a0fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0ff:	0f b6 c0             	movzx  eax,al
c001a102:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a109:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a10d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a111:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a116:	ee                   	out    dx,al
c001a117:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a11e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a123:	89 c2                	mov    edx,eax
c001a125:	ec                   	in     al,dx
c001a126:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a12a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a12e:	0f b6 c0             	movzx  eax,al
c001a131:	c1 e0 08             	shl    eax,0x8
c001a134:	89 c1                	mov    ecx,eax
c001a136:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a13d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a142:	89 c2                	mov    edx,eax
c001a144:	ec                   	in     al,dx
c001a145:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a149:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a14d:	0f b6 c0             	movzx  eax,al
c001a150:	09 c8                	or     eax,ecx
c001a152:	83 c4 10             	add    esp,0x10
c001a155:	c3                   	ret    
c001a156:	66 90                	xchg   ax,ax

c001a158 <picOpen()>:
c001a158:	83 ec 50             	sub    esp,0x50
c001a15b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a162:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a167:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a16b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a16f:	ee                   	out    dx,al
c001a170:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a177:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a17c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a180:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a184:	ee                   	out    dx,al
c001a185:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a18d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a195:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a19c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1a0:	89 c2                	mov    edx,eax
c001a1a2:	ec                   	in     al,dx
c001a1a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a1a7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a1ab:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a1af:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a1b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1ba:	89 c2                	mov    edx,eax
c001a1bc:	ec                   	in     al,dx
c001a1bd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a1c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a1c5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a1c9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a1d0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a1d5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a1d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a1dd:	ee                   	out    dx,al
c001a1de:	e8 bd fe ff ff       	call   c001a0a0 <picIoWait()>
c001a1e3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a1ea:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a1ef:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a1f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a1f7:	ee                   	out    dx,al
c001a1f8:	e8 a3 fe ff ff       	call   c001a0a0 <picIoWait()>
c001a1fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a201:	0f b6 c0             	movzx  eax,al
c001a204:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a20b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a20f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a213:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a217:	ee                   	out    dx,al
c001a218:	e8 83 fe ff ff       	call   c001a0a0 <picIoWait()>
c001a21d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a221:	0f b6 c0             	movzx  eax,al
c001a224:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a22b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a22f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a233:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a237:	ee                   	out    dx,al
c001a238:	e8 63 fe ff ff       	call   c001a0a0 <picIoWait()>
c001a23d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a244:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a249:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a24d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a251:	ee                   	out    dx,al
c001a252:	e8 49 fe ff ff       	call   c001a0a0 <picIoWait()>
c001a257:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a25e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a263:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a267:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a26b:	ee                   	out    dx,al
c001a26c:	e8 2f fe ff ff       	call   c001a0a0 <picIoWait()>
c001a271:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a278:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a27d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a281:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a285:	ee                   	out    dx,al
c001a286:	e8 15 fe ff ff       	call   c001a0a0 <picIoWait()>
c001a28b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a292:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a297:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a29b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a29f:	ee                   	out    dx,al
c001a2a0:	e8 fb fd ff ff       	call   c001a0a0 <picIoWait()>
c001a2a5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a2aa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a2b1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a2b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a2b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a2bd:	ee                   	out    dx,al
c001a2be:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a2c3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a2ca:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a2ce:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a2d2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a2d6:	ee                   	out    dx,al
c001a2d7:	90                   	nop
c001a2d8:	83 c4 50             	add    esp,0x50
c001a2db:	c3                   	ret    

c001a2dc <picEOI(int)>:
c001a2dc:	83 ec 10             	sub    esp,0x10
c001a2df:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a2e4:	75 1e                	jne    c001a304 <picEOI(int)+0x28>
c001a2e6:	6a 0b                	push   0xb
c001a2e8:	e8 ef fd ff ff       	call   c001a0dc <picGetIRQReg(int)>
c001a2ed:	83 c4 04             	add    esp,0x4
c001a2f0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a2f5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a2fa:	25 80 00 00 00       	and    eax,0x80
c001a2ff:	74 73                	je     c001a374 <picEOI(int)+0x98>
c001a301:	8d 76 00             	lea    esi,[esi+0x0]
c001a304:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a309:	75 31                	jne    c001a33c <picEOI(int)+0x60>
c001a30b:	6a 0b                	push   0xb
c001a30d:	e8 ca fd ff ff       	call   c001a0dc <picGetIRQReg(int)>
c001a312:	83 c4 04             	add    esp,0x4
c001a315:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a31a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a31e:	66 85 c0             	test   ax,ax
c001a321:	78 19                	js     c001a33c <picEOI(int)+0x60>
c001a323:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a32a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a32f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a333:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a338:	ee                   	out    dx,al
c001a339:	eb 3d                	jmp    c001a378 <picEOI(int)+0x9c>
c001a33b:	90                   	nop
c001a33c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a341:	7e 19                	jle    c001a35c <picEOI(int)+0x80>
c001a343:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a34a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a34f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a353:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a358:	ee                   	out    dx,al
c001a359:	8d 76 00             	lea    esi,[esi+0x0]
c001a35c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a363:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a368:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a36c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a371:	ee                   	out    dx,al
c001a372:	eb 04                	jmp    c001a378 <picEOI(int)+0x9c>
c001a374:	90                   	nop
c001a375:	8d 76 00             	lea    esi,[esi+0x0]
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	c3                   	ret    

c001a37c <FAT::getName()>:
c001a37c:	b8 91 4b 02 c0       	mov    eax,0xc0024b91
c001a381:	c3                   	ret    
c001a382:	66 90                	xchg   ax,ax

c001a384 <FAT::tell(void*, unsigned long long*)>:
c001a384:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a389:	75 09                	jne    c001a394 <FAT::tell(void*, unsigned long long*)+0x10>
c001a38b:	b8 04 00 00 00       	mov    eax,0x4
c001a390:	c3                   	ret    
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a399:	75 09                	jne    c001a3a4 <FAT::tell(void*, unsigned long long*)+0x20>
c001a39b:	b8 04 00 00 00       	mov    eax,0x4
c001a3a0:	c3                   	ret    
c001a3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a3ab:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a3ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a3b2:	89 01                	mov    DWORD PTR [ecx],eax
c001a3b4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a3b7:	b8 00 00 00 00       	mov    eax,0x0
c001a3bc:	c3                   	ret    
c001a3bd:	90                   	nop
c001a3be:	66 90                	xchg   ax,ax

c001a3c0 <FAT::stat(void*, unsigned long long*)>:
c001a3c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a3c5:	75 09                	jne    c001a3d0 <FAT::stat(void*, unsigned long long*)+0x10>
c001a3c7:	b8 04 00 00 00       	mov    eax,0x4
c001a3cc:	c3                   	ret    
c001a3cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a3d5:	75 09                	jne    c001a3e0 <FAT::stat(void*, unsigned long long*)+0x20>
c001a3d7:	b8 04 00 00 00       	mov    eax,0x4
c001a3dc:	c3                   	ret    
c001a3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3e4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a3e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a3ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a3ee:	89 01                	mov    DWORD PTR [ecx],eax
c001a3f0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a3f3:	b8 00 00 00 00       	mov    eax,0x0
c001a3f8:	c3                   	ret    
c001a3f9:	90                   	nop
c001a3fa:	66 90                	xchg   ax,ax

c001a3fc <FAT::~FAT()>:
c001a3fc:	83 ec 0c             	sub    esp,0xc
c001a3ff:	ba dc 4b 02 c0       	mov    edx,0xc0024bdc
c001a404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a408:	89 10                	mov    DWORD PTR [eax],edx
c001a40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40e:	83 ec 0c             	sub    esp,0xc
c001a411:	50                   	push   eax
c001a412:	e8 e9 2e ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001a417:	83 c4 10             	add    esp,0x10
c001a41a:	90                   	nop
c001a41b:	83 c4 0c             	add    esp,0xc
c001a41e:	c3                   	ret    
c001a41f:	90                   	nop

c001a420 <FAT::~FAT()>:
c001a420:	83 ec 0c             	sub    esp,0xc
c001a423:	83 ec 0c             	sub    esp,0xc
c001a426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a42a:	e8 cd ff ff ff       	call   c001a3fc <FAT::~FAT()>
c001a42f:	83 c4 10             	add    esp,0x10
c001a432:	83 ec 08             	sub    esp,0x8
c001a435:	6a 08                	push   0x8
c001a437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a43b:	e8 a4 2a ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001a440:	83 c4 10             	add    esp,0x10
c001a443:	83 c4 0c             	add    esp,0xc
c001a446:	c3                   	ret    
c001a447:	90                   	nop

c001a448 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a448:	83 ec 1c             	sub    esp,0x1c
c001a44b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a452:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a457:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a45b:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a462:	83 f8 ff             	cmp    eax,0xffffffff
c001a465:	75 35                	jne    c001a49c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a467:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a46b:	88 c2                	mov    dl,al
c001a46d:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a472:	01 d0                	add    eax,edx
c001a474:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a478:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a47e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a482:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a489:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a48e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a492:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a499:	eb 19                	jmp    c001a4b4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a49b:	90                   	nop
c001a49c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a4a0:	88 c2                	mov    dl,al
c001a4a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4a6:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a4ad:	01 d0                	add    eax,edx
c001a4af:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a4b3:	90                   	nop
c001a4b4:	83 ec 04             	sub    esp,0x4
c001a4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a4bf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a4c3:	50                   	push   eax
c001a4c4:	e8 61 c7 fe ff       	call   c0006c2a <f_getlabel>
c001a4c9:	83 c4 10             	add    esp,0x10
c001a4cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a4d5:	75 09                	jne    c001a4e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a4d7:	b8 00 00 00 00       	mov    eax,0x0
c001a4dc:	eb 0a                	jmp    c001a4e8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a4de:	66 90                	xchg   ax,ax
c001a4e0:	b8 01 00 00 00       	mov    eax,0x1
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	83 c4 1c             	add    esp,0x1c
c001a4eb:	c3                   	ret    

c001a4ec <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a4ec:	57                   	push   edi
c001a4ed:	83 ec 58             	sub    esp,0x58
c001a4f0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a4f8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a4fc:	b9 0f 00 00 00       	mov    ecx,0xf
c001a501:	b8 00 00 00 00       	mov    eax,0x0
c001a506:	fc                   	cld    
c001a507:	89 d7                	mov    edi,edx
c001a509:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a50b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a50f:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a516:	83 f8 ff             	cmp    eax,0xffffffff
c001a519:	75 35                	jne    c001a550 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a51b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a51f:	88 c2                	mov    dl,al
c001a521:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a526:	01 d0                	add    eax,edx
c001a528:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a52c:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a532:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a536:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a53d:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a542:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a546:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a54d:	eb 19                	jmp    c001a568 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a54f:	90                   	nop
c001a550:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a554:	88 c2                	mov    dl,al
c001a556:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a55a:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a561:	01 d0                	add    eax,edx
c001a563:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a567:	90                   	nop
c001a568:	83 ec 08             	sub    esp,0x8
c001a56b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a56f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a573:	50                   	push   eax
c001a574:	e8 ff 62 fe ff       	call   c0000878 <strcat>
c001a579:	83 c4 10             	add    esp,0x10
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a583:	50                   	push   eax
c001a584:	e8 8f c8 fe ff       	call   c0006e18 <f_setlabel>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a590:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a595:	75 09                	jne    c001a5a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a597:	b8 00 00 00 00       	mov    eax,0x0
c001a59c:	eb 0a                	jmp    c001a5a8 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a59e:	66 90                	xchg   ax,ax
c001a5a0:	b8 01 00 00 00       	mov    eax,0x1
c001a5a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5a8:	83 c4 58             	add    esp,0x58
c001a5ab:	5f                   	pop    edi
c001a5ac:	c3                   	ret    
c001a5ad:	90                   	nop
c001a5ae:	66 90                	xchg   ax,ax

c001a5b0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a5b0:	83 ec 2c             	sub    esp,0x2c
c001a5b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a5bb:	83 ec 08             	sub    esp,0x8
c001a5be:	68 b5 4b 02 c0       	push   0xc0024bb5
c001a5c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a5c7:	e8 f8 61 fe ff       	call   c00007c4 <strcmp>
c001a5cc:	83 c4 10             	add    esp,0x10
c001a5cf:	85 c0                	test   eax,eax
c001a5d1:	0f 94 c0             	sete   al
c001a5d4:	84 c0                	test   al,al
c001a5d6:	74 10                	je     c001a5e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a5d8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a5e0:	e9 b3 00 00 00       	jmp    c001a698 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a5e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5e8:	83 ec 08             	sub    esp,0x8
c001a5eb:	68 a7 4b 02 c0       	push   0xc0024ba7
c001a5f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a5f4:	e8 cb 61 fe ff       	call   c00007c4 <strcmp>
c001a5f9:	83 c4 10             	add    esp,0x10
c001a5fc:	85 c0                	test   eax,eax
c001a5fe:	0f 94 c0             	sete   al
c001a601:	84 c0                	test   al,al
c001a603:	74 0f                	je     c001a614 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a605:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a60d:	e9 86 00 00 00       	jmp    c001a698 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a612:	66 90                	xchg   ax,ax
c001a614:	83 ec 08             	sub    esp,0x8
c001a617:	68 ad 4b 02 c0       	push   0xc0024bad
c001a61c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a620:	e8 9f 61 fe ff       	call   c00007c4 <strcmp>
c001a625:	83 c4 10             	add    esp,0x10
c001a628:	85 c0                	test   eax,eax
c001a62a:	0f 94 c0             	sete   al
c001a62d:	84 c0                	test   al,al
c001a62f:	74 0b                	je     c001a63c <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a631:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a639:	eb 5d                	jmp    c001a698 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a63b:	90                   	nop
c001a63c:	83 ec 08             	sub    esp,0x8
c001a63f:	68 6c 22 02 c0       	push   0xc002226c
c001a644:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a648:	e8 77 61 fe ff       	call   c00007c4 <strcmp>
c001a64d:	83 c4 10             	add    esp,0x10
c001a650:	85 c0                	test   eax,eax
c001a652:	0f 94 c0             	sete   al
c001a655:	84 c0                	test   al,al
c001a657:	74 0b                	je     c001a664 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a659:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a661:	eb 35                	jmp    c001a698 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a663:	90                   	nop
c001a664:	83 ec 08             	sub    esp,0x8
c001a667:	68 b3 4b 02 c0       	push   0xc0024bb3
c001a66c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a670:	e8 4f 61 fe ff       	call   c00007c4 <strcmp>
c001a675:	83 c4 10             	add    esp,0x10
c001a678:	85 c0                	test   eax,eax
c001a67a:	0f 94 c0             	sete   al
c001a67d:	84 c0                	test   al,al
c001a67f:	74 0b                	je     c001a68c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a681:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a689:	eb 0d                	jmp    c001a698 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a68b:	90                   	nop
c001a68c:	b8 08 00 00 00       	mov    eax,0x8
c001a691:	e9 ea 00 00 00       	jmp    c001a780 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a696:	66 90                	xchg   ax,ax
c001a698:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a69f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a6a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6a8:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a6af:	83 f8 ff             	cmp    eax,0xffffffff
c001a6b2:	75 34                	jne    c001a6e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a6b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a6b8:	88 c2                	mov    dl,al
c001a6ba:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a6bf:	01 d0                	add    eax,edx
c001a6c1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a6c5:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a6cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6cf:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a6d6:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a6db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a6df:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a6e6:	eb 18                	jmp    c001a700 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a6e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a6ec:	88 c2                	mov    dl,al
c001a6ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6f2:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a6f9:	01 d0                	add    eax,edx
c001a6fb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a6ff:	90                   	nop
c001a700:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a704:	88 04 24             	mov    BYTE PTR [esp],al
c001a707:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a70b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a70f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a717:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a71c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a724:	83 ec 0c             	sub    esp,0xc
c001a727:	68 00 20 00 00       	push   0x2000
c001a72c:	e8 86 f5 fe ff       	call   c0009cb7 <malloc>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a738:	68 00 20 00 00       	push   0x2000
c001a73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a741:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a745:	50                   	push   eax
c001a746:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a74a:	50                   	push   eax
c001a74b:	e8 49 cd fe ff       	call   c0007499 <f_mkfs>
c001a750:	83 c4 10             	add    esp,0x10
c001a753:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a757:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a75c:	75 0a                	jne    c001a768 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a75e:	b8 00 00 00 00       	mov    eax,0x0
c001a763:	eb 1b                	jmp    c001a780 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a765:	8d 76 00             	lea    esi,[esi+0x0]
c001a768:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a76d:	75 09                	jne    c001a778 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a76f:	b8 09 00 00 00       	mov    eax,0x9
c001a774:	eb 0a                	jmp    c001a780 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a776:	66 90                	xchg   ax,ax
c001a778:	b8 01 00 00 00       	mov    eax,0x1
c001a77d:	8d 76 00             	lea    esi,[esi+0x0]
c001a780:	83 c4 2c             	add    esp,0x2c
c001a783:	c3                   	ret    

c001a784 <FAT::tryMount(LogicalDisk*, int)>:
c001a784:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a78a:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a78f:	83 f8 14             	cmp    eax,0x14
c001a792:	75 18                	jne    c001a7ac <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a794:	83 ec 0c             	sub    esp,0xc
c001a797:	68 b9 4b 02 c0       	push   0xc0024bb9
c001a79c:	e8 d6 8b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	b0 00                	mov    al,0x0
c001a7a6:	e9 e9 01 00 00       	jmp    c001a994 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a7ab:	90                   	nop
c001a7ac:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a7b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a7b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a7bf:	3d 00 02 00 00       	cmp    eax,0x200
c001a7c4:	74 0a                	je     c001a7d0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a7c6:	b0 00                	mov    al,0x0
c001a7c8:	e9 c7 01 00 00       	jmp    c001a994 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a7d0:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a7d8:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a7df:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001a7e6:	83 f8 ff             	cmp    eax,0xffffffff
c001a7e9:	74 09                	je     c001a7f4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a7eb:	b0 01                	mov    al,0x1
c001a7ed:	e9 a2 01 00 00       	jmp    c001a994 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a7f2:	66 90                	xchg   ax,ax
c001a7f4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a7fe:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a806:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a80d:	88 c2                	mov    dl,al
c001a80f:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a814:	01 d0                	add    eax,edx
c001a816:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a81d:	8b 15 c0 98 02 c0    	mov    edx,DWORD PTR ds:0xc00298c0
c001a823:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a82a:	89 14 85 e0 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6720],edx
c001a831:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a836:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a83d:	89 14 85 60 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd66a0],edx
c001a844:	83 ec 0c             	sub    esp,0xc
c001a847:	68 54 02 00 00       	push   0x254
c001a84c:	e8 66 f4 fe ff       	call   c0009cb7 <malloc>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a85b:	83 ec 04             	sub    esp,0x4
c001a85e:	6a 00                	push   0x0
c001a860:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a867:	50                   	push   eax
c001a868:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a86f:	e8 ad a5 fe ff       	call   c0004e21 <f_mount>
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a87e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a886:	74 1c                	je     c001a8a4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001a888:	83 ec 0c             	sub    esp,0xc
c001a88b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a892:	e8 40 f4 fe ff       	call   c0009cd7 <rfree>
c001a897:	83 c4 10             	add    esp,0x10
c001a89a:	b0 00                	mov    al,0x0
c001a89c:	e9 f3 00 00 00       	jmp    c001a994 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8a4:	83 ec 04             	sub    esp,0x4
c001a8a7:	68 00 01 00 00       	push   0x100
c001a8ac:	6a 00                	push   0x0
c001a8ae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a8b5:	50                   	push   eax
c001a8b6:	e8 c1 5d fe ff       	call   c000067c <memset>
c001a8bb:	83 c4 10             	add    esp,0x10
c001a8be:	83 ec 08             	sub    esp,0x8
c001a8c1:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a8c8:	50                   	push   eax
c001a8c9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a8d0:	50                   	push   eax
c001a8d1:	e8 a2 5f fe ff       	call   c0000878 <strcat>
c001a8d6:	83 c4 10             	add    esp,0x10
c001a8d9:	83 ec 08             	sub    esp,0x8
c001a8dc:	68 c7 4b 02 c0       	push   0xc0024bc7
c001a8e1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a8e8:	50                   	push   eax
c001a8e9:	e8 8a 5f fe ff       	call   c0000878 <strcat>
c001a8ee:	83 c4 10             	add    esp,0x10
c001a8f1:	83 ec 04             	sub    esp,0x4
c001a8f4:	6a 01                	push   0x1
c001a8f6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a8fd:	50                   	push   eax
c001a8fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a902:	50                   	push   eax
c001a903:	e8 7b a5 fe ff       	call   c0004e83 <f_open>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a912:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a919:	85 c0                	test   eax,eax
c001a91b:	74 0b                	je     c001a928 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001a91d:	78 31                	js     c001a950 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a91f:	83 e8 04             	sub    eax,0x4
c001a922:	83 f8 01             	cmp    eax,0x1
c001a925:	77 29                	ja     c001a950 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001a927:	90                   	nop
c001a928:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a937:	50                   	push   eax
c001a938:	e8 98 b0 fe ff       	call   c00059d5 <f_close>
c001a93d:	83 c4 10             	add    esp,0x10
c001a940:	90                   	nop
c001a941:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a949:	74 41                	je     c001a98c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001a94b:	eb 33                	jmp    c001a980 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001a94d:	8d 76 00             	lea    esi,[esi+0x0]
c001a950:	83 ec 0c             	sub    esp,0xc
c001a953:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a95a:	e8 78 f3 fe ff       	call   c0009cd7 <rfree>
c001a95f:	83 c4 10             	add    esp,0x10
c001a962:	83 ec 04             	sub    esp,0x4
c001a965:	6a 00                	push   0x0
c001a967:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a96e:	50                   	push   eax
c001a96f:	6a 00                	push   0x0
c001a971:	e8 ab a4 fe ff       	call   c0004e21 <f_mount>
c001a976:	83 c4 10             	add    esp,0x10
c001a979:	b0 00                	mov    al,0x0
c001a97b:	eb 17                	jmp    c001a994 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a97d:	8d 76 00             	lea    esi,[esi+0x0]
c001a980:	a1 c0 98 02 c0       	mov    eax,ds:0xc00298c0
c001a985:	40                   	inc    eax
c001a986:	a3 c0 98 02 c0       	mov    ds:0xc00298c0,eax
c001a98b:	90                   	nop
c001a98c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a993:	90                   	nop
c001a994:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a99a:	c3                   	ret    
c001a99b:	90                   	nop

c001a99c <FAT::allocateSwapfile(char const*, int)>:
c001a99c:	55                   	push   ebp
c001a99d:	57                   	push   edi
c001a99e:	56                   	push   esi
c001a99f:	53                   	push   ebx
c001a9a0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001a9a6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001a9b1:	83 ec 0c             	sub    esp,0xc
c001a9b4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001a9bb:	e8 f7 f2 fe ff       	call   c0009cb7 <malloc>
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	89 c7                	mov    edi,eax
c001a9c5:	a1 f0 97 02 c0       	mov    eax,ds:0xc00297f0
c001a9ca:	83 ec 04             	sub    esp,0x4
c001a9cd:	50                   	push   eax
c001a9ce:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001a9d5:	57                   	push   edi
c001a9d6:	e8 55 2b ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001a9db:	83 c4 10             	add    esp,0x10
c001a9de:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001a9e5:	83 ec 04             	sub    esp,0x4
c001a9e8:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a9ec:	50                   	push   eax
c001a9ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9f1:	50                   	push   eax
c001a9f2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001a9f9:	e8 b8 2e ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001a9fe:	83 c4 10             	add    esp,0x10
c001aa01:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aa08:	c1 e0 14             	shl    eax,0x14
c001aa0b:	89 c7                	mov    edi,eax
c001aa0d:	89 c5                	mov    ebp,eax
c001aa0f:	c1 fd 1f             	sar    ebp,0x1f
c001aa12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aa1a:	89 f9                	mov    ecx,edi
c001aa1c:	31 c1                	xor    ecx,eax
c001aa1e:	89 cb                	mov    ebx,ecx
c001aa20:	89 e9                	mov    ecx,ebp
c001aa22:	31 d1                	xor    ecx,edx
c001aa24:	89 ce                	mov    esi,ecx
c001aa26:	89 f0                	mov    eax,esi
c001aa28:	09 d8                	or     eax,ebx
c001aa2a:	0f 84 98 00 00 00    	je     c001aac8 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001aa30:	83 ec 0c             	sub    esp,0xc
c001aa33:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa3a:	e8 43 2d ff ff       	call   c000d782 <File::unlink()>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	83 ec 08             	sub    esp,0x8
c001aa45:	6a 12                	push   0x12
c001aa47:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aa4e:	e8 b7 2b ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa5d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001aa63:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001aa6a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001aa71:	c1 e0 14             	shl    eax,0x14
c001aa74:	99                   	cdq    
c001aa75:	6a 01                	push   0x1
c001aa77:	52                   	push   edx
c001aa78:	50                   	push   eax
c001aa79:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001aa80:	e8 00 c6 fe ff       	call   c0007085 <f_expand>
c001aa85:	83 c4 10             	add    esp,0x10
c001aa88:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aa8f:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa91:	83 c0 10             	add    eax,0x10
c001aa94:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa96:	83 ec 0c             	sub    esp,0xc
c001aa99:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aa9d:	52                   	push   edx
c001aa9e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001aaa2:	52                   	push   edx
c001aaa3:	6a 00                	push   0x0
c001aaa5:	68 00 04 00 00       	push   0x400
c001aaaa:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001aab1:	ff d0                	call   eax
c001aab3:	83 c4 20             	add    esp,0x20
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aac0:	e8 a3 2b ff ff       	call   c000d668 <File::close()>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	83 ec 08             	sub    esp,0x8
c001aacb:	6a 01                	push   0x1
c001aacd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aad4:	e8 31 2b ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001aad9:	83 c4 10             	add    esp,0x10
c001aadc:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001aae3:	8b 00                	mov    eax,DWORD PTR [eax]
c001aae5:	83 c0 0c             	add    eax,0xc
c001aae8:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaea:	83 ec 0c             	sub    esp,0xc
c001aaed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aaf1:	52                   	push   edx
c001aaf2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001aaf6:	52                   	push   edx
c001aaf7:	6a 00                	push   0x0
c001aaf9:	6a 04                	push   0x4
c001aafb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ab02:	ff d0                	call   eax
c001ab04:	83 c4 20             	add    esp,0x20
c001ab07:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ab0e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ab14:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ab1b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ab22:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001ab25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ab28:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ab39:	e8 2a 2b ff ff       	call   c000d668 <File::close()>
c001ab3e:	83 c4 10             	add    esp,0x10
c001ab41:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ab48:	ba 00 00 00 00       	mov    edx,0x0
c001ab4d:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ab53:	5b                   	pop    ebx
c001ab54:	5e                   	pop    esi
c001ab55:	5f                   	pop    edi
c001ab56:	5d                   	pop    ebp
c001ab57:	c3                   	ret    

c001ab58 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ab58:	57                   	push   edi
c001ab59:	56                   	push   esi
c001ab5a:	53                   	push   ebx
c001ab5b:	81 ec 50 02 00 00    	sub    esp,0x250
c001ab61:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ab69:	74 0d                	je     c001ab78 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ab6b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ab73:	75 0f                	jne    c001ab84 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ab75:	8d 76 00             	lea    esi,[esi+0x0]
c001ab78:	b8 04 00 00 00       	mov    eax,0x4
c001ab7d:	e9 36 01 00 00       	jmp    c001acb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ab82:	66 90                	xchg   ax,ax
c001ab84:	83 ec 08             	sub    esp,0x8
c001ab87:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ab8e:	50                   	push   eax
c001ab8f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ab96:	e8 44 b4 fe ff       	call   c0005fdf <f_readdir>
c001ab9b:	83 c4 10             	add    esp,0x10
c001ab9e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001aba5:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001abac:	83 ec 0c             	sub    esp,0xc
c001abaf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001abb6:	83 c0 1a             	add    eax,0x1a
c001abb9:	50                   	push   eax
c001abba:	e8 d9 5a fe ff       	call   c0000698 <strlen>
c001abbf:	83 c4 10             	add    esp,0x10
c001abc2:	ba 00 00 00 00       	mov    edx,0x0
c001abc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001abcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001abcf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001abd6:	0f b6 c0             	movzx  eax,al
c001abd9:	83 e0 10             	and    eax,0x10
c001abdc:	74 0a                	je     c001abe8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001abde:	b8 02 00 00 00       	mov    eax,0x2
c001abe3:	eb 0b                	jmp    c001abf0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001abe5:	8d 76 00             	lea    esi,[esi+0x0]
c001abe8:	b8 01 00 00 00       	mov    eax,0x1
c001abed:	8d 76 00             	lea    esi,[esi+0x0]
c001abf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001abf4:	83 ec 08             	sub    esp,0x8
c001abf7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001abfe:	83 c0 1a             	add    eax,0x1a
c001ac01:	50                   	push   eax
c001ac02:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac06:	83 c0 10             	add    eax,0x10
c001ac09:	50                   	push   eax
c001ac0a:	e8 29 5b fe ff       	call   c0000738 <strcpy>
c001ac0f:	83 c4 10             	add    esp,0x10
c001ac12:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ac19:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001ac20:	8d 44 24 04          	lea    eax,[esp+0x4]
c001ac24:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001ac2b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ac32:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ac39:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ac40:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ac47:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ac4e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ac55:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ac5c:	89 c6                	mov    esi,eax
c001ac5e:	89 d7                	mov    edi,edx
c001ac60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac62:	89 c8                	mov    eax,ecx
c001ac64:	89 fa                	mov    edx,edi
c001ac66:	89 f3                	mov    ebx,esi
c001ac68:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ac6f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ac76:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ac7d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ac84:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ac8a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ac91:	84 c0                	test   al,al
c001ac93:	75 07                	jne    c001ac9c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ac95:	b8 07 00 00 00       	mov    eax,0x7
c001ac9a:	eb 1c                	jmp    c001acb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ac9c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001aca3:	85 c0                	test   eax,eax
c001aca5:	75 09                	jne    c001acb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001aca7:	b8 00 00 00 00       	mov    eax,0x0
c001acac:	eb 0a                	jmp    c001acb8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001acae:	66 90                	xchg   ax,ax
c001acb0:	b8 01 00 00 00       	mov    eax,0x1
c001acb5:	8d 76 00             	lea    esi,[esi+0x0]
c001acb8:	81 c4 50 02 00 00    	add    esp,0x250
c001acbe:	5b                   	pop    ebx
c001acbf:	5e                   	pop    esi
c001acc0:	5f                   	pop    edi
c001acc1:	c3                   	ret    
c001acc2:	66 90                	xchg   ax,ax

c001acc4 <FAT::read(void*, unsigned long, void*, int*)>:
c001acc4:	83 ec 1c             	sub    esp,0x1c
c001acc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001accc:	74 0a                	je     c001acd8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001acce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001acd3:	75 0b                	jne    c001ace0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001acd5:	8d 76 00             	lea    esi,[esi+0x0]
c001acd8:	b8 04 00 00 00       	mov    eax,0x4
c001acdd:	eb 41                	jmp    c001ad20 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001acdf:	90                   	nop
c001ace0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ace4:	50                   	push   eax
c001ace5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ace9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aced:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001acf1:	e8 c9 a5 fe ff       	call   c00052bf <f_read>
c001acf6:	83 c4 10             	add    esp,0x10
c001acf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad01:	89 c2                	mov    edx,eax
c001ad03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad07:	89 10                	mov    DWORD PTR [eax],edx
c001ad09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad0d:	85 c0                	test   eax,eax
c001ad0f:	75 07                	jne    c001ad18 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001ad11:	b8 00 00 00 00       	mov    eax,0x0
c001ad16:	eb 08                	jmp    c001ad20 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ad18:	b8 01 00 00 00       	mov    eax,0x1
c001ad1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad20:	83 c4 1c             	add    esp,0x1c
c001ad23:	c3                   	ret    

c001ad24 <FAT::write(void*, unsigned long, void*, int*)>:
c001ad24:	83 ec 1c             	sub    esp,0x1c
c001ad27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad2c:	74 0a                	je     c001ad38 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001ad2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ad33:	75 0b                	jne    c001ad40 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001ad35:	8d 76 00             	lea    esi,[esi+0x0]
c001ad38:	b8 04 00 00 00       	mov    eax,0x4
c001ad3d:	eb 41                	jmp    c001ad80 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ad3f:	90                   	nop
c001ad40:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad44:	50                   	push   eax
c001ad45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad51:	e8 e9 a7 fe ff       	call   c000553f <f_write>
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad61:	89 c2                	mov    edx,eax
c001ad63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad67:	89 10                	mov    DWORD PTR [eax],edx
c001ad69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad6d:	85 c0                	test   eax,eax
c001ad6f:	75 07                	jne    c001ad78 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001ad71:	b8 00 00 00 00       	mov    eax,0x0
c001ad76:	eb 08                	jmp    c001ad80 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001ad78:	b8 01 00 00 00       	mov    eax,0x1
c001ad7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad80:	83 c4 1c             	add    esp,0x1c
c001ad83:	c3                   	ret    

c001ad84 <FAT::close(void*)>:
c001ad84:	83 ec 1c             	sub    esp,0x1c
c001ad87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ad8c:	75 0a                	jne    c001ad98 <FAT::close(void*)+0x14>
c001ad8e:	b8 04 00 00 00       	mov    eax,0x4
c001ad93:	eb 3f                	jmp    c001add4 <FAT::close(void*)+0x50>
c001ad95:	8d 76 00             	lea    esi,[esi+0x0]
c001ad98:	83 ec 0c             	sub    esp,0xc
c001ad9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ad9f:	e8 31 ac fe ff       	call   c00059d5 <f_close>
c001ada4:	83 c4 10             	add    esp,0x10
c001ada7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adab:	83 ec 0c             	sub    esp,0xc
c001adae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adb2:	e8 10 ef fe ff       	call   c0009cc7 <free>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adbe:	85 c0                	test   eax,eax
c001adc0:	75 0a                	jne    c001adcc <FAT::close(void*)+0x48>
c001adc2:	b8 00 00 00 00       	mov    eax,0x0
c001adc7:	eb 0b                	jmp    c001add4 <FAT::close(void*)+0x50>
c001adc9:	8d 76 00             	lea    esi,[esi+0x0]
c001adcc:	b8 01 00 00 00       	mov    eax,0x1
c001add1:	8d 76 00             	lea    esi,[esi+0x0]
c001add4:	83 c4 1c             	add    esp,0x1c
c001add7:	c3                   	ret    

c001add8 <FAT::closeDir(void*)>:
c001add8:	83 ec 1c             	sub    esp,0x1c
c001addb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ade0:	75 0a                	jne    c001adec <FAT::closeDir(void*)+0x14>
c001ade2:	b8 04 00 00 00       	mov    eax,0x4
c001ade7:	eb 3f                	jmp    c001ae28 <FAT::closeDir(void*)+0x50>
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	83 ec 0c             	sub    esp,0xc
c001adef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adf3:	e8 c5 b1 fe ff       	call   c0005fbd <f_closedir>
c001adf8:	83 c4 10             	add    esp,0x10
c001adfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adff:	83 ec 0c             	sub    esp,0xc
c001ae02:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae06:	e8 bc ee fe ff       	call   c0009cc7 <free>
c001ae0b:	83 c4 10             	add    esp,0x10
c001ae0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae12:	85 c0                	test   eax,eax
c001ae14:	75 0a                	jne    c001ae20 <FAT::closeDir(void*)+0x48>
c001ae16:	b8 00 00 00 00       	mov    eax,0x0
c001ae1b:	eb 0b                	jmp    c001ae28 <FAT::closeDir(void*)+0x50>
c001ae1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae20:	b8 01 00 00 00       	mov    eax,0x1
c001ae25:	8d 76 00             	lea    esi,[esi+0x0]
c001ae28:	83 c4 1c             	add    esp,0x1c
c001ae2b:	c3                   	ret    

c001ae2c <FAT::seek(void*, unsigned long long)>:
c001ae2c:	83 ec 2c             	sub    esp,0x2c
c001ae2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae3f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001ae44:	75 0a                	jne    c001ae50 <FAT::seek(void*, unsigned long long)+0x24>
c001ae46:	b8 04 00 00 00       	mov    eax,0x4
c001ae4b:	eb 37                	jmp    c001ae84 <FAT::seek(void*, unsigned long long)+0x58>
c001ae4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae50:	83 ec 04             	sub    esp,0x4
c001ae53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ae57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ae5b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ae5f:	e8 a0 ab fe ff       	call   c0005a04 <f_lseek>
c001ae64:	83 c4 10             	add    esp,0x10
c001ae67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae6f:	85 c0                	test   eax,eax
c001ae71:	75 09                	jne    c001ae7c <FAT::seek(void*, unsigned long long)+0x50>
c001ae73:	b8 00 00 00 00       	mov    eax,0x0
c001ae78:	eb 0a                	jmp    c001ae84 <FAT::seek(void*, unsigned long long)+0x58>
c001ae7a:	66 90                	xchg   ax,ax
c001ae7c:	b8 01 00 00 00       	mov    eax,0x1
c001ae81:	8d 76 00             	lea    esi,[esi+0x0]
c001ae84:	83 c4 2c             	add    esp,0x2c
c001ae87:	c3                   	ret    

c001ae88 <fatWrapperReadDisk>:
c001ae88:	83 ec 1c             	sub    esp,0x1c
c001ae8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae8f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae97:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aea2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aea7:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c001aeae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aeb2:	83 ec 0c             	sub    esp,0xc
c001aeb5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aeb9:	52                   	push   edx
c001aeba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aebe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aec2:	50                   	push   eax
c001aec3:	e8 a6 48 ff ff       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c001aec8:	83 c4 20             	add    esp,0x20
c001aecb:	83 c4 1c             	add    esp,0x1c
c001aece:	c3                   	ret    
c001aecf:	90                   	nop

c001aed0 <fatWrapperWriteDisk>:
c001aed0:	83 ec 1c             	sub    esp,0x1c
c001aed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aed7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aedb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aedf:	89 04 24             	mov    DWORD PTR [esp],eax
c001aee2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aee6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aeea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001aeef:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c001aef6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aefa:	83 ec 0c             	sub    esp,0xc
c001aefd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af01:	52                   	push   edx
c001af02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af06:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af0a:	50                   	push   eax
c001af0b:	e8 ca 48 ff ff       	call   c000f7da <LogicalDisk::write(unsigned long long, int, void*)>
c001af10:	83 c4 20             	add    esp,0x20
c001af13:	83 c4 1c             	add    esp,0x1c
c001af16:	c3                   	ret    
c001af17:	90                   	nop

c001af18 <fatWrapperIoctl>:
c001af18:	53                   	push   ebx
c001af19:	83 ec 28             	sub    esp,0x28
c001af1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001af20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af24:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001af28:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001af2c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001af31:	75 31                	jne    c001af64 <fatWrapperIoctl+0x4c>
c001af33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af3b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af40:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c001af47:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001af4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001af53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001af57:	66 89 02             	mov    WORD PTR [edx],ax
c001af5a:	b8 00 00 00 00       	mov    eax,0x0
c001af5f:	e9 bc 00 00 00       	jmp    c001b020 <fatWrapperIoctl+0x108>
c001af64:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001af69:	75 6d                	jne    c001afd8 <fatWrapperIoctl+0xc0>
c001af6b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af73:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af78:	8b 04 85 60 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd77a0]
c001af7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001af85:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001af8b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001af91:	89 c8                	mov    eax,ecx
c001af93:	89 da                	mov    edx,ebx
c001af95:	0f a4 c2 0a          	shld   edx,eax,0xa
c001af99:	c1 e0 0a             	shl    eax,0xa
c001af9c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001afa1:	8b 0c 8d 60 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd77a0]
c001afa8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001afae:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001afb4:	89 cb                	mov    ebx,ecx
c001afb6:	c1 fb 1f             	sar    ebx,0x1f
c001afb9:	53                   	push   ebx
c001afba:	51                   	push   ecx
c001afbb:	52                   	push   edx
c001afbc:	50                   	push   eax
c001afbd:	e8 7e 63 00 00       	call   c0021340 <__udivdi3>
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001afc9:	89 01                	mov    DWORD PTR [ecx],eax
c001afcb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001afce:	b8 00 00 00 00       	mov    eax,0x0
c001afd3:	eb 4b                	jmp    c001b020 <fatWrapperIoctl+0x108>
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001afdd:	75 09                	jne    c001afe8 <fatWrapperIoctl+0xd0>
c001afdf:	b8 00 00 00 00       	mov    eax,0x0
c001afe4:	eb 3a                	jmp    c001b020 <fatWrapperIoctl+0x108>
c001afe6:	66 90                	xchg   ax,ax
c001afe8:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001afed:	75 19                	jne    c001b008 <fatWrapperIoctl+0xf0>
c001afef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aff3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001affb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b001:	b8 00 00 00 00       	mov    eax,0x0
c001b006:	eb 18                	jmp    c001b020 <fatWrapperIoctl+0x108>
c001b008:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b00d:	75 09                	jne    c001b018 <fatWrapperIoctl+0x100>
c001b00f:	b8 00 00 00 00       	mov    eax,0x0
c001b014:	eb 0a                	jmp    c001b020 <fatWrapperIoctl+0x108>
c001b016:	66 90                	xchg   ax,ax
c001b018:	b8 04 00 00 00       	mov    eax,0x4
c001b01d:	8d 76 00             	lea    esi,[esi+0x0]
c001b020:	83 c4 28             	add    esp,0x28
c001b023:	5b                   	pop    ebx
c001b024:	c3                   	ret    
c001b025:	90                   	nop
c001b026:	66 90                	xchg   ax,ax

c001b028 <FAT::FAT()>:
c001b028:	83 ec 1c             	sub    esp,0x1c
c001b02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b02f:	83 ec 0c             	sub    esp,0xc
c001b032:	50                   	push   eax
c001b033:	e8 a4 22 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001b038:	83 c4 10             	add    esp,0x10
c001b03b:	ba dc 4b 02 c0       	mov    edx,0xc0024bdc
c001b040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b044:	89 10                	mov    DWORD PTR [eax],edx
c001b046:	c7 05 c0 98 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00298c0,0x0
c001b050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b058:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b05d:	7f 15                	jg     c001b074 <FAT::FAT()+0x4c>
c001b05f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b063:	c7 04 85 e0 98 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6720],0xffffffff
c001b06e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b072:	eb e4                	jmp    c001b058 <FAT::FAT()+0x30>
c001b074:	90                   	nop
c001b075:	83 c4 1c             	add    esp,0x1c
c001b078:	c3                   	ret    
c001b079:	90                   	nop
c001b07a:	66 90                	xchg   ax,ax

c001b07c <FAT::fixFilepath(char*)>:
c001b07c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b080:	8a 00                	mov    al,BYTE PTR [eax]
c001b082:	3c 40                	cmp    al,0x40
c001b084:	7e 2e                	jle    c001b0b4 <FAT::fixFilepath(char*)+0x38>
c001b086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b08a:	8a 00                	mov    al,BYTE PTR [eax]
c001b08c:	83 e8 41             	sub    eax,0x41
c001b08f:	88 c2                	mov    dl,al
c001b091:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b095:	88 10                	mov    BYTE PTR [eax],dl
c001b097:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b09b:	8a 00                	mov    al,BYTE PTR [eax]
c001b09d:	0f be c0             	movsx  eax,al
c001b0a0:	8b 04 85 e0 98 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6720]
c001b0a7:	83 c0 30             	add    eax,0x30
c001b0aa:	88 c2                	mov    dl,al
c001b0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0b0:	88 10                	mov    BYTE PTR [eax],dl
c001b0b2:	66 90                	xchg   ax,ax
c001b0b4:	90                   	nop
c001b0b5:	c3                   	ret    
c001b0b6:	66 90                	xchg   ax,ax

c001b0b8 <FAT::open(char const*, void**, FileOpenMode)>:
c001b0b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b0be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b0c6:	74 0c                	je     c001b0d4 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b0c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b0d0:	75 0e                	jne    c001b0e0 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b0d2:	66 90                	xchg   ax,ax
c001b0d4:	b8 04 00 00 00       	mov    eax,0x4
c001b0d9:	e9 06 01 00 00       	jmp    c001b1e4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b0de:	66 90                	xchg   ax,ax
c001b0e0:	83 ec 08             	sub    esp,0x8
c001b0e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b0ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b0ee:	50                   	push   eax
c001b0ef:	e8 44 56 fe ff       	call   c0000738 <strcpy>
c001b0f4:	83 c4 10             	add    esp,0x10
c001b0f7:	83 ec 08             	sub    esp,0x8
c001b0fa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0fe:	50                   	push   eax
c001b0ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b106:	e8 71 ff ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b10b:	83 c4 10             	add    esp,0x10
c001b10e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b116:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b11d:	83 e0 01             	and    eax,0x1
c001b120:	74 0a                	je     c001b12c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b122:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b12a:	66 90                	xchg   ax,ax
c001b12c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b133:	83 e0 04             	and    eax,0x4
c001b136:	74 10                	je     c001b148 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b138:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b140:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b148:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b14f:	83 e0 02             	and    eax,0x2
c001b152:	74 08                	je     c001b15c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b154:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b15c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b163:	83 e0 08             	and    eax,0x8
c001b166:	74 08                	je     c001b170 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b168:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b170:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b177:	83 e0 10             	and    eax,0x10
c001b17a:	74 08                	je     c001b184 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b17c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b184:	83 ec 0c             	sub    esp,0xc
c001b187:	68 50 02 00 00       	push   0x250
c001b18c:	e8 26 eb fe ff       	call   c0009cb7 <malloc>
c001b191:	83 c4 10             	add    esp,0x10
c001b194:	89 c2                	mov    edx,eax
c001b196:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b19d:	89 10                	mov    DWORD PTR [eax],edx
c001b19f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b1a7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b1ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1b0:	83 ec 04             	sub    esp,0x4
c001b1b3:	52                   	push   edx
c001b1b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b1b8:	52                   	push   edx
c001b1b9:	50                   	push   eax
c001b1ba:	e8 c4 9c fe ff       	call   c0004e83 <f_open>
c001b1bf:	83 c4 10             	add    esp,0x10
c001b1c2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b1c9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b1d1:	74 09                	je     c001b1dc <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b1d3:	b8 01 00 00 00       	mov    eax,0x1
c001b1d8:	eb 0a                	jmp    c001b1e4 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b1da:	66 90                	xchg   ax,ax
c001b1dc:	b8 00 00 00 00       	mov    eax,0x0
c001b1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1e4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b1ea:	c3                   	ret    
c001b1eb:	90                   	nop

c001b1ec <FAT::openDir(char const*, void**)>:
c001b1ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b1f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b1fa:	74 0c                	je     c001b208 <FAT::openDir(char const*, void**)+0x1c>
c001b1fc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b204:	75 0e                	jne    c001b214 <FAT::openDir(char const*, void**)+0x28>
c001b206:	66 90                	xchg   ax,ax
c001b208:	b8 04 00 00 00       	mov    eax,0x4
c001b20d:	e9 82 00 00 00       	jmp    c001b294 <FAT::openDir(char const*, void**)+0xa8>
c001b212:	66 90                	xchg   ax,ax
c001b214:	83 ec 08             	sub    esp,0x8
c001b217:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b21e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b222:	50                   	push   eax
c001b223:	e8 10 55 fe ff       	call   c0000738 <strcpy>
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	83 ec 08             	sub    esp,0x8
c001b22e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b232:	50                   	push   eax
c001b233:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b23a:	e8 3d fe ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	6a 4c                	push   0x4c
c001b247:	e8 6b ea fe ff       	call   c0009cb7 <malloc>
c001b24c:	83 c4 10             	add    esp,0x10
c001b24f:	89 c2                	mov    edx,eax
c001b251:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b258:	89 10                	mov    DWORD PTR [eax],edx
c001b25a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b261:	8b 00                	mov    eax,DWORD PTR [eax]
c001b263:	83 ec 08             	sub    esp,0x8
c001b266:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b26a:	52                   	push   edx
c001b26b:	50                   	push   eax
c001b26c:	e8 4a ac fe ff       	call   c0005ebb <f_opendir>
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b27b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b283:	74 07                	je     c001b28c <FAT::openDir(char const*, void**)+0xa0>
c001b285:	b8 01 00 00 00       	mov    eax,0x1
c001b28a:	eb 08                	jmp    c001b294 <FAT::openDir(char const*, void**)+0xa8>
c001b28c:	b8 00 00 00 00       	mov    eax,0x0
c001b291:	8d 76 00             	lea    esi,[esi+0x0]
c001b294:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b29a:	c3                   	ret    
c001b29b:	90                   	nop

c001b29c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b29c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b2a2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b2aa:	75 0c                	jne    c001b2b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b2ac:	b8 04 00 00 00       	mov    eax,0x4
c001b2b1:	e9 d2 00 00 00       	jmp    c001b388 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2b6:	66 90                	xchg   ax,ax
c001b2b8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b2c0:	75 0a                	jne    c001b2cc <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b2c2:	b8 04 00 00 00       	mov    eax,0x4
c001b2c7:	e9 bc 00 00 00       	jmp    c001b388 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2cc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b2d4:	75 0a                	jne    c001b2e0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b2d6:	b8 04 00 00 00       	mov    eax,0x4
c001b2db:	e9 a8 00 00 00       	jmp    c001b388 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b2e0:	83 ec 08             	sub    esp,0x8
c001b2e3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b2ea:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b2f1:	50                   	push   eax
c001b2f2:	e8 41 54 fe ff       	call   c0000738 <strcpy>
c001b2f7:	83 c4 10             	add    esp,0x10
c001b2fa:	83 ec 08             	sub    esp,0x8
c001b2fd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b304:	50                   	push   eax
c001b305:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b30c:	e8 6b fd ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b311:	83 c4 10             	add    esp,0x10
c001b314:	83 ec 08             	sub    esp,0x8
c001b317:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b31b:	50                   	push   eax
c001b31c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b323:	50                   	push   eax
c001b324:	e8 51 ad fe ff       	call   c000607a <f_stat>
c001b329:	83 c4 10             	add    esp,0x10
c001b32c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b333:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b33a:	85 c0                	test   eax,eax
c001b33c:	74 0a                	je     c001b348 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b33e:	83 f8 04             	cmp    eax,0x4
c001b341:	74 35                	je     c001b378 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b343:	eb 3b                	jmp    c001b380 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b345:	8d 76 00             	lea    esi,[esi+0x0]
c001b348:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b34c:	0f b6 c0             	movzx  eax,al
c001b34f:	83 e0 10             	and    eax,0x10
c001b352:	0f 95 c2             	setne  dl
c001b355:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b35c:	88 10                	mov    BYTE PTR [eax],dl
c001b35e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b361:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b365:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b36c:	89 01                	mov    DWORD PTR [ecx],eax
c001b36e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b371:	b8 00 00 00 00       	mov    eax,0x0
c001b376:	eb 10                	jmp    c001b388 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b378:	b8 02 00 00 00       	mov    eax,0x2
c001b37d:	eb 09                	jmp    c001b388 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b37f:	90                   	nop
c001b380:	b8 01 00 00 00       	mov    eax,0x1
c001b385:	8d 76 00             	lea    esi,[esi+0x0]
c001b388:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b38e:	c3                   	ret    
c001b38f:	90                   	nop

c001b390 <FAT::unlink(char const*)>:
c001b390:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b396:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b39e:	75 08                	jne    c001b3a8 <FAT::unlink(char const*)+0x18>
c001b3a0:	b8 04 00 00 00       	mov    eax,0x4
c001b3a5:	eb 61                	jmp    c001b408 <FAT::unlink(char const*)+0x78>
c001b3a7:	90                   	nop
c001b3a8:	83 ec 08             	sub    esp,0x8
c001b3ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3b6:	50                   	push   eax
c001b3b7:	e8 7c 53 fe ff       	call   c0000738 <strcpy>
c001b3bc:	83 c4 10             	add    esp,0x10
c001b3bf:	83 ec 08             	sub    esp,0x8
c001b3c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3c6:	50                   	push   eax
c001b3c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3ce:	e8 a9 fc ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b3d3:	83 c4 10             	add    esp,0x10
c001b3d6:	83 ec 0c             	sub    esp,0xc
c001b3d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3dd:	50                   	push   eax
c001b3de:	e8 e9 af fe ff       	call   c00063cc <f_unlink>
c001b3e3:	83 c4 10             	add    esp,0x10
c001b3e6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b3ed:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b3f4:	85 c0                	test   eax,eax
c001b3f6:	75 08                	jne    c001b400 <FAT::unlink(char const*)+0x70>
c001b3f8:	b8 00 00 00 00       	mov    eax,0x0
c001b3fd:	eb 09                	jmp    c001b408 <FAT::unlink(char const*)+0x78>
c001b3ff:	90                   	nop
c001b400:	b8 01 00 00 00       	mov    eax,0x1
c001b405:	8d 76 00             	lea    esi,[esi+0x0]
c001b408:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b40e:	c3                   	ret    
c001b40f:	90                   	nop

c001b410 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b410:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b416:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b41d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b424:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b428:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b42c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b434:	75 0a                	jne    c001b440 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b436:	b8 04 00 00 00       	mov    eax,0x4
c001b43b:	e9 30 01 00 00       	jmp    c001b570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b440:	83 ec 08             	sub    esp,0x8
c001b443:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b44a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b44e:	50                   	push   eax
c001b44f:	e8 e4 52 fe ff       	call   c0000738 <strcpy>
c001b454:	83 c4 10             	add    esp,0x10
c001b457:	83 ec 08             	sub    esp,0x8
c001b45a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b45e:	50                   	push   eax
c001b45f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b466:	e8 11 fc ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b476:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b47e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b483:	83 e0 01             	and    eax,0x1
c001b486:	74 08                	je     c001b490 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b488:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b490:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b495:	83 e0 02             	and    eax,0x2
c001b498:	74 0a                	je     c001b4a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b49a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b4a2:	66 90                	xchg   ax,ax
c001b4a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4a9:	83 e0 04             	and    eax,0x4
c001b4ac:	74 0a                	je     c001b4b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b4ae:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b4b6:	66 90                	xchg   ax,ax
c001b4b8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b4bd:	83 e0 08             	and    eax,0x8
c001b4c0:	74 0a                	je     c001b4cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b4c2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b4ca:	66 90                	xchg   ax,ax
c001b4cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4d1:	83 e0 01             	and    eax,0x1
c001b4d4:	74 0a                	je     c001b4e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b4d6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b4de:	66 90                	xchg   ax,ax
c001b4e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4e5:	83 e0 02             	and    eax,0x2
c001b4e8:	74 0a                	je     c001b4f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b4ea:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b4f2:	66 90                	xchg   ax,ax
c001b4f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4f9:	83 e0 04             	and    eax,0x4
c001b4fc:	74 0a                	je     c001b508 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b4fe:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b506:	66 90                	xchg   ax,ax
c001b508:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b50d:	83 e0 08             	and    eax,0x8
c001b510:	74 0a                	je     c001b51c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b512:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b51a:	66 90                	xchg   ax,ax
c001b51c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b523:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b52a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b532:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b53a:	83 ec 04             	sub    esp,0x4
c001b53d:	52                   	push   edx
c001b53e:	50                   	push   eax
c001b53f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b543:	50                   	push   eax
c001b544:	e8 25 b5 fe ff       	call   c0006a6e <f_chmod>
c001b549:	83 c4 10             	add    esp,0x10
c001b54c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b553:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b55a:	85 c0                	test   eax,eax
c001b55c:	75 0a                	jne    c001b568 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b55e:	b8 00 00 00 00       	mov    eax,0x0
c001b563:	eb 0b                	jmp    c001b570 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b565:	8d 76 00             	lea    esi,[esi+0x0]
c001b568:	b8 01 00 00 00       	mov    eax,0x1
c001b56d:	8d 76 00             	lea    esi,[esi+0x0]
c001b570:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b576:	c3                   	ret    
c001b577:	90                   	nop

c001b578 <FAT::rename(char const*, char const*)>:
c001b578:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b57e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b586:	74 0c                	je     c001b594 <FAT::rename(char const*, char const*)+0x1c>
c001b588:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b590:	75 0e                	jne    c001b5a0 <FAT::rename(char const*, char const*)+0x28>
c001b592:	66 90                	xchg   ax,ax
c001b594:	b8 04 00 00 00       	mov    eax,0x4
c001b599:	e9 9e 00 00 00       	jmp    c001b63c <FAT::rename(char const*, char const*)+0xc4>
c001b59e:	66 90                	xchg   ax,ax
c001b5a0:	83 ec 08             	sub    esp,0x8
c001b5a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b5aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b5b1:	50                   	push   eax
c001b5b2:	e8 81 51 fe ff       	call   c0000738 <strcpy>
c001b5b7:	83 c4 10             	add    esp,0x10
c001b5ba:	83 ec 08             	sub    esp,0x8
c001b5bd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b5c4:	50                   	push   eax
c001b5c5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b5cc:	e8 ab fa ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b5d1:	83 c4 10             	add    esp,0x10
c001b5d4:	83 ec 08             	sub    esp,0x8
c001b5d7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b5de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b5e2:	50                   	push   eax
c001b5e3:	e8 50 51 fe ff       	call   c0000738 <strcpy>
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	83 ec 08             	sub    esp,0x8
c001b5ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b5f2:	50                   	push   eax
c001b5f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b5fa:	e8 7d fa ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b5ff:	83 c4 10             	add    esp,0x10
c001b602:	83 ec 08             	sub    esp,0x8
c001b605:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b609:	50                   	push   eax
c001b60a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b611:	50                   	push   eax
c001b612:	e8 64 b1 fe ff       	call   c000677b <f_rename>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b621:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b628:	85 c0                	test   eax,eax
c001b62a:	75 08                	jne    c001b634 <FAT::rename(char const*, char const*)+0xbc>
c001b62c:	b8 00 00 00 00       	mov    eax,0x0
c001b631:	eb 09                	jmp    c001b63c <FAT::rename(char const*, char const*)+0xc4>
c001b633:	90                   	nop
c001b634:	b8 01 00 00 00       	mov    eax,0x1
c001b639:	8d 76 00             	lea    esi,[esi+0x0]
c001b63c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b642:	c3                   	ret    
c001b643:	90                   	nop

c001b644 <FAT::mkdir(char const*)>:
c001b644:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b64a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b652:	75 08                	jne    c001b65c <FAT::mkdir(char const*)+0x18>
c001b654:	b8 04 00 00 00       	mov    eax,0x4
c001b659:	eb 61                	jmp    c001b6bc <FAT::mkdir(char const*)+0x78>
c001b65b:	90                   	nop
c001b65c:	83 ec 08             	sub    esp,0x8
c001b65f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b666:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b66a:	50                   	push   eax
c001b66b:	e8 c8 50 fe ff       	call   c0000738 <strcpy>
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	83 ec 08             	sub    esp,0x8
c001b676:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b67a:	50                   	push   eax
c001b67b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b682:	e8 f5 f9 ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b691:	50                   	push   eax
c001b692:	e8 b8 ae fe ff       	call   c000654f <f_mkdir>
c001b697:	83 c4 10             	add    esp,0x10
c001b69a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b6a1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b6a8:	85 c0                	test   eax,eax
c001b6aa:	75 08                	jne    c001b6b4 <FAT::mkdir(char const*)+0x70>
c001b6ac:	b8 00 00 00 00       	mov    eax,0x0
c001b6b1:	eb 09                	jmp    c001b6bc <FAT::mkdir(char const*)+0x78>
c001b6b3:	90                   	nop
c001b6b4:	b8 01 00 00 00       	mov    eax,0x1
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b6c2:	c3                   	ret    
c001b6c3:	90                   	nop

c001b6c4 <FAT::exists(char const*)>:
c001b6c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b6ca:	83 ec 08             	sub    esp,0x8
c001b6cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b6d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b6d8:	50                   	push   eax
c001b6d9:	e8 5a 50 fe ff       	call   c0000738 <strcpy>
c001b6de:	83 c4 10             	add    esp,0x10
c001b6e1:	83 ec 08             	sub    esp,0x8
c001b6e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6e8:	50                   	push   eax
c001b6e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b6f0:	e8 87 f9 ff ff       	call   c001b07c <FAT::fixFilepath(char*)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	83 ec 08             	sub    esp,0x8
c001b6fb:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b702:	50                   	push   eax
c001b703:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b707:	50                   	push   eax
c001b708:	e8 6d a9 fe ff       	call   c000607a <f_stat>
c001b70d:	83 c4 10             	add    esp,0x10
c001b710:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b717:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b71e:	85 c0                	test   eax,eax
c001b720:	75 06                	jne    c001b728 <FAT::exists(char const*)+0x64>
c001b722:	b0 01                	mov    al,0x1
c001b724:	eb 06                	jmp    c001b72c <FAT::exists(char const*)+0x68>
c001b726:	66 90                	xchg   ax,ax
c001b728:	b0 00                	mov    al,0x0
c001b72a:	66 90                	xchg   ax,ax
c001b72c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b732:	c3                   	ret    
c001b733:	90                   	nop

c001b734 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b734:	b8 08 00 00 00       	mov    eax,0x8
c001b739:	c3                   	ret    

c001b73a <ISO9660::seek(void*, unsigned long long)>:
c001b73a:	53                   	push   ebx
c001b73b:	b8 04 00 00 00       	mov    eax,0x4
c001b740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b748:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b74c:	85 d2                	test   edx,edx
c001b74e:	74 17                	je     c001b767 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b750:	89 c8                	mov    eax,ecx
c001b752:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b755:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b758:	b8 01 00 00 00       	mov    eax,0x1
c001b75d:	73 08                	jae    c001b767 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b75f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b762:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b765:	31 c0                	xor    eax,eax
c001b767:	5b                   	pop    ebx
c001b768:	c3                   	ret    
c001b769:	90                   	nop

c001b76a <ISO9660::tell(void*, unsigned long long*)>:
c001b76a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b76e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b772:	85 d2                	test   edx,edx
c001b774:	74 12                	je     c001b788 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b776:	85 c0                	test   eax,eax
c001b778:	74 0e                	je     c001b788 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b77a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b77d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b780:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b783:	89 10                	mov    DWORD PTR [eax],edx
c001b785:	31 c0                	xor    eax,eax
c001b787:	c3                   	ret    
c001b788:	b8 04 00 00 00       	mov    eax,0x4
c001b78d:	c3                   	ret    

c001b78e <ISO9660::getName()>:
c001b78e:	b8 3c 4c 02 c0       	mov    eax,0xc0024c3c
c001b793:	c3                   	ret    

c001b794 <ISO9660::stat(void*, unsigned long long*)>:
c001b794:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79c:	85 d2                	test   edx,edx
c001b79e:	74 12                	je     c001b7b2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b7a0:	85 c0                	test   eax,eax
c001b7a2:	74 0e                	je     c001b7b2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b7a4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b7a7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b7aa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b7ad:	89 10                	mov    DWORD PTR [eax],edx
c001b7af:	31 c0                	xor    eax,eax
c001b7b1:	c3                   	ret    
c001b7b2:	b8 04 00 00 00       	mov    eax,0x4
c001b7b7:	c3                   	ret    

c001b7b8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b7b8:	b8 01 00 00 00       	mov    eax,0x1
c001b7bd:	c3                   	ret    

c001b7be <ISO9660::unlink(char const*)>:
c001b7be:	b8 01 00 00 00       	mov    eax,0x1
c001b7c3:	c3                   	ret    

c001b7c4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b7c4:	b8 01 00 00 00       	mov    eax,0x1
c001b7c9:	c3                   	ret    

c001b7ca <ISO9660::rename(char const*, char const*)>:
c001b7ca:	b8 01 00 00 00       	mov    eax,0x1
c001b7cf:	c3                   	ret    

c001b7d0 <ISO9660::mkdir(char const*)>:
c001b7d0:	b8 01 00 00 00       	mov    eax,0x1
c001b7d5:	c3                   	ret    

c001b7d6 <ISO9660::close(void*)>:
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	b8 04 00 00 00       	mov    eax,0x4
c001b7de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b7e2:	85 d2                	test   edx,edx
c001b7e4:	74 0e                	je     c001b7f4 <ISO9660::close(void*)+0x1e>
c001b7e6:	83 ec 0c             	sub    esp,0xc
c001b7e9:	52                   	push   edx
c001b7ea:	e8 d8 e4 fe ff       	call   c0009cc7 <free>
c001b7ef:	83 c4 10             	add    esp,0x10
c001b7f2:	31 c0                	xor    eax,eax
c001b7f4:	83 c4 0c             	add    esp,0xc
c001b7f7:	c3                   	ret    

c001b7f8 <ISO9660::closeDir(void*)>:
c001b7f8:	83 ec 0c             	sub    esp,0xc
c001b7fb:	b8 04 00 00 00       	mov    eax,0x4
c001b800:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b804:	85 d2                	test   edx,edx
c001b806:	74 0e                	je     c001b816 <ISO9660::closeDir(void*)+0x1e>
c001b808:	83 ec 0c             	sub    esp,0xc
c001b80b:	52                   	push   edx
c001b80c:	e8 b6 e4 fe ff       	call   c0009cc7 <free>
c001b811:	83 c4 10             	add    esp,0x10
c001b814:	31 c0                	xor    eax,eax
c001b816:	83 c4 0c             	add    esp,0xc
c001b819:	c3                   	ret    

c001b81a <ISO9660::~ISO9660()>:
c001b81a:	83 ec 0c             	sub    esp,0xc
c001b81d:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c001b822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b826:	89 10                	mov    DWORD PTR [eax],edx
c001b828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b82c:	83 ec 0c             	sub    esp,0xc
c001b82f:	50                   	push   eax
c001b830:	e8 cb 1a ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	90                   	nop
c001b839:	83 c4 0c             	add    esp,0xc
c001b83c:	c3                   	ret    
c001b83d:	90                   	nop

c001b83e <ISO9660::~ISO9660()>:
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	83 ec 0c             	sub    esp,0xc
c001b844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b848:	e8 cd ff ff ff       	call   c001b81a <ISO9660::~ISO9660()>
c001b84d:	83 c4 10             	add    esp,0x10
c001b850:	83 ec 08             	sub    esp,0x8
c001b853:	6a 08                	push   0x8
c001b855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b859:	e8 86 16 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001b85e:	83 c4 10             	add    esp,0x10
c001b861:	83 c4 0c             	add    esp,0xc
c001b864:	c3                   	ret    

c001b865 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b865:	55                   	push   ebp
c001b866:	31 c9                	xor    ecx,ecx
c001b868:	57                   	push   edi
c001b869:	56                   	push   esi
c001b86a:	53                   	push   ebx
c001b86b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b86f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b873:	89 eb                	mov    ebx,ebp
c001b875:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b879:	39 ce                	cmp    esi,ecx
c001b87b:	7e 17                	jle    c001b894 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b87d:	31 d2                	xor    edx,edx
c001b87f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b883:	7d 13                	jge    c001b898 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b885:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b889:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b88c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b88f:	75 0d                	jne    c001b89e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b891:	42                   	inc    edx
c001b892:	eb eb                	jmp    c001b87f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b894:	31 c0                	xor    eax,eax
c001b896:	eb 0a                	jmp    c001b8a2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b898:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b89c:	eb 04                	jmp    c001b8a2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b89e:	41                   	inc    ecx
c001b89f:	43                   	inc    ebx
c001b8a0:	eb d7                	jmp    c001b879 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b8a2:	5b                   	pop    ebx
c001b8a3:	5e                   	pop    esi
c001b8a4:	5f                   	pop    edi
c001b8a5:	5d                   	pop    ebp
c001b8a6:	c3                   	ret    

c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b8a7:	57                   	push   edi
c001b8a8:	56                   	push   esi
c001b8a9:	53                   	push   ebx
c001b8aa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b8b2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b8b6:	39 35 c0 99 02 c0    	cmp    DWORD PTR ds:0xc00299c0,esi
c001b8bc:	75 08                	jne    c001b8c6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b8be:	38 1d e0 5c 02 c0    	cmp    BYTE PTR ds:0xc0025ce0,bl
c001b8c4:	74 4a                	je     c001b910 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b8c6:	83 ec 0c             	sub    esp,0xc
c001b8c9:	31 d2                	xor    edx,edx
c001b8cb:	68 e0 99 02 c0       	push   0xc00299e0
c001b8d0:	0f be c3             	movsx  eax,bl
c001b8d3:	6a 01                	push   0x1
c001b8d5:	52                   	push   edx
c001b8d6:	56                   	push   esi
c001b8d7:	ff 34 85 5c 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78a4]
c001b8de:	e8 8b 3e ff ff       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c001b8e3:	83 c4 20             	add    esp,0x20
c001b8e6:	85 c0                	test   eax,eax
c001b8e8:	75 0e                	jne    c001b8f8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001b8ea:	89 35 c0 99 02 c0    	mov    DWORD PTR ds:0xc00299c0,esi
c001b8f0:	88 1d e0 5c 02 c0    	mov    BYTE PTR ds:0xc0025ce0,bl
c001b8f6:	eb 18                	jmp    c001b910 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001b8f8:	50                   	push   eax
c001b8f9:	68 00 08 00 00       	push   0x800
c001b8fe:	6a 00                	push   0x0
c001b900:	57                   	push   edi
c001b901:	e8 76 4d fe ff       	call   c000067c <memset>
c001b906:	83 c4 10             	add    esp,0x10
c001b909:	b8 01 00 00 00       	mov    eax,0x1
c001b90e:	eb 0e                	jmp    c001b91e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001b910:	be e0 99 02 c0       	mov    esi,0xc00299e0
c001b915:	b9 00 08 00 00       	mov    ecx,0x800
c001b91a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b91c:	31 c0                	xor    eax,eax
c001b91e:	5b                   	pop    ebx
c001b91f:	5e                   	pop    esi
c001b920:	5f                   	pop    edi
c001b921:	c3                   	ret    

c001b922 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b922:	81 ec 10 08 00 00    	sub    esp,0x810
c001b928:	c7 05 c0 99 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc00299c0,0xdeadbeef
c001b932:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b939:	83 c0 41             	add    eax,0x41
c001b93c:	0f be c0             	movsx  eax,al
c001b93f:	50                   	push   eax
c001b940:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b944:	50                   	push   eax
c001b945:	6a 10                	push   0x10
c001b947:	e8 5b ff ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b94c:	83 c4 10             	add    esp,0x10
c001b94f:	31 d2                	xor    edx,edx
c001b951:	85 c0                	test   eax,eax
c001b953:	75 24                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b955:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b95a:	75 1d                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b95c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b961:	75 16                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b963:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b968:	75 0f                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b96a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b96f:	75 08                	jne    c001b979 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001b971:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b976:	0f 94 c2             	sete   dl
c001b979:	88 d0                	mov    al,dl
c001b97b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b981:	c3                   	ret    

c001b982 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b982:	55                   	push   ebp
c001b983:	57                   	push   edi
c001b984:	56                   	push   esi
c001b985:	53                   	push   ebx
c001b986:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001b98c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001b993:	85 ed                	test   ebp,ebp
c001b995:	0f 84 da 01 00 00    	je     c001bb75 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b99b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b9a3:	0f 84 cc 01 00 00    	je     c001bb75 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001b9a9:	b8 01 00 00 00       	mov    eax,0x1
c001b9ae:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001b9b2:	0f 85 c2 01 00 00    	jne    c001bb7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001b9b8:	31 d2                	xor    edx,edx
c001b9ba:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b9c1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001b9c4:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b9c7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b9ca:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9d1:	01 c8                	add    eax,ecx
c001b9d3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001b9d6:	11 da                	adc    edx,ebx
c001b9d8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b9dc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b9e0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001b9e4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b9e8:	19 d7                	sbb    edi,edx
c001b9ea:	72 11                	jb     c001b9fd <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001b9ec:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001b9ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001b9f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9fb:	eb 0c                	jmp    c001ba09 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001b9fd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ba01:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ba05:	29 ce                	sub    esi,ecx
c001ba07:	19 df                	sbb    edi,ebx
c001ba09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ba0c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ba0f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ba13:	c1 e0 0b             	shl    eax,0xb
c001ba16:	01 c8                	add    eax,ecx
c001ba18:	11 da                	adc    edx,ebx
c001ba1a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba21:	51                   	push   ecx
c001ba22:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ba26:	50                   	push   eax
c001ba27:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ba2b:	53                   	push   ebx
c001ba2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba34:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ba38:	50                   	push   eax
c001ba39:	e8 69 fe ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ba3e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ba41:	b8 00 08 00 00       	mov    eax,0x800
c001ba46:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ba4c:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001ba50:	29 d0                	sub    eax,edx
c001ba52:	83 c4 10             	add    esp,0x10
c001ba55:	89 f9                	mov    ecx,edi
c001ba57:	39 c6                	cmp    esi,eax
c001ba59:	83 d9 00             	sbb    ecx,0x0
c001ba5c:	7d 1b                	jge    c001ba79 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001ba5e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ba63:	75 12                	jne    c001ba77 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001ba65:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ba6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba72:	e9 fa 00 00 00       	jmp    c001bb71 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001ba77:	89 f0                	mov    eax,esi
c001ba79:	01 d3                	add    ebx,edx
c001ba7b:	31 d2                	xor    edx,edx
c001ba7d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001ba81:	39 c2                	cmp    edx,eax
c001ba83:	7d 14                	jge    c001ba99 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001ba85:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001ba8c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba90:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001ba93:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001ba96:	42                   	inc    edx
c001ba97:	eb e8                	jmp    c001ba81 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001ba99:	89 c2                	mov    edx,eax
c001ba9b:	85 c0                	test   eax,eax
c001ba9d:	79 02                	jns    c001baa1 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001ba9f:	31 d2                	xor    edx,edx
c001baa1:	01 c2                	add    edx,eax
c001baa3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001baa6:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001baad:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bab1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bab5:	99                   	cdq    
c001bab6:	01 c1                	add    ecx,eax
c001bab8:	11 d3                	adc    ebx,edx
c001baba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001babe:	29 c6                	sub    esi,eax
c001bac0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bac4:	19 d7                	sbb    edi,edx
c001bac6:	89 34 24             	mov    DWORD PTR [esp],esi
c001bac9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bacd:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bad2:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bad5:	b8 00 00 00 00       	mov    eax,0x0
c001bada:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bade:	7d 43                	jge    c001bb23 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bae0:	52                   	push   edx
c001bae1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bae5:	50                   	push   eax
c001bae6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001baea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001baee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001baf2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001baf6:	50                   	push   eax
c001baf7:	e8 ab fd ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bafc:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bb04:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bb09:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bb11:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bb19:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bb1e:	83 c4 10             	add    esp,0x10
c001bb21:	eb aa                	jmp    c001bacd <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb27:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bb2a:	74 2a                	je     c001bb56 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bb2c:	50                   	push   eax
c001bb2d:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bb31:	50                   	push   eax
c001bb32:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bb36:	56                   	push   esi
c001bb37:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb3f:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bb43:	51                   	push   ecx
c001bb44:	e8 5e fd ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bb49:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb53:	83 c4 10             	add    esp,0x10
c001bb56:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bb5d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bb61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bb65:	89 18                	mov    DWORD PTR [eax],ebx
c001bb67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb6b:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bb6e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bb71:	31 c0                	xor    eax,eax
c001bb73:	eb 05                	jmp    c001bb7a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb75:	b8 04 00 00 00       	mov    eax,0x4
c001bb7a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bb80:	5b                   	pop    ebx
c001bb81:	5e                   	pop    esi
c001bb82:	5f                   	pop    edi
c001bb83:	5d                   	pop    ebp
c001bb84:	c3                   	ret    
c001bb85:	90                   	nop

c001bb86 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bb86:	55                   	push   ebp
c001bb87:	57                   	push   edi
c001bb88:	56                   	push   esi
c001bb89:	53                   	push   ebx
c001bb8a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bb90:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bb97:	85 ed                	test   ebp,ebp
c001bb99:	0f 84 51 02 00 00    	je     c001bdf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bb9f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bba7:	0f 84 43 02 00 00    	je     c001bdf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bbad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bbb0:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bbb3:	75 0a                	jne    c001bbbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bbb5:	b8 07 00 00 00       	mov    eax,0x7
c001bbba:	e9 36 02 00 00       	jmp    c001bdf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bbbf:	50                   	push   eax
c001bbc0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bbc4:	50                   	push   eax
c001bbc5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bbcc:	53                   	push   ebx
c001bbcd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bbd0:	c1 e0 0b             	shl    eax,0xb
c001bbd3:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bbd6:	c1 e8 0b             	shr    eax,0xb
c001bbd9:	50                   	push   eax
c001bbda:	e8 c8 fc ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbdf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	89 c1                	mov    ecx,eax
c001bbe7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bbea:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bbf0:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bbf3:	84 db                	test   bl,bl
c001bbf5:	0f 85 8b 00 00 00    	jne    c001bc86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bbfb:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bc01:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bc04:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bc0a:	29 c6                	sub    esi,eax
c001bc0c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bc10:	89 f3                	mov    ebx,esi
c001bc12:	89 f1                	mov    ecx,esi
c001bc14:	c1 fb 1f             	sar    ebx,0x1f
c001bc17:	01 f0                	add    eax,esi
c001bc19:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bc1c:	11 da                	adc    edx,ebx
c001bc1e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bc25:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bc28:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bc2b:	89 d8                	mov    eax,ebx
c001bc2d:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bc31:	ba 00 00 00 00       	mov    edx,0x0
c001bc36:	19 f8                	sbb    eax,edi
c001bc38:	b8 00 00 00 00       	mov    eax,0x0
c001bc3d:	73 08                	jae    c001bc47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bc3f:	89 f0                	mov    eax,esi
c001bc41:	89 fa                	mov    edx,edi
c001bc43:	29 c8                	sub    eax,ecx
c001bc45:	19 da                	sbb    edx,ebx
c001bc47:	89 d7                	mov    edi,edx
c001bc49:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bc4c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bc4f:	09 c7                	or     edi,eax
c001bc51:	0f 84 5e ff ff ff    	je     c001bbb5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bc57:	57                   	push   edi
c001bc58:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc5c:	50                   	push   eax
c001bc5d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bc64:	53                   	push   ebx
c001bc65:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bc68:	c1 e0 0b             	shl    eax,0xb
c001bc6b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bc6f:	c1 e8 0b             	shr    eax,0xb
c001bc72:	50                   	push   eax
c001bc73:	e8 2f fc ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	25 ff 07 00 00       	and    eax,0x7ff
c001bc83:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001bc86:	31 ff                	xor    edi,edi
c001bc88:	56                   	push   esi
c001bc89:	6a 28                	push   0x28
c001bc8b:	6a 00                	push   0x0
c001bc8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bc91:	50                   	push   eax
c001bc92:	e8 e5 49 fe ff       	call   c000067c <memset>
c001bc97:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc9a:	25 ff 07 00 00       	and    eax,0x7ff
c001bc9f:	89 c6                	mov    esi,eax
c001bca1:	83 c6 21             	add    esi,0x21
c001bca4:	83 d7 00             	adc    edi,0x0
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	31 c9                	xor    ecx,ecx
c001bcac:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001bcb3:	83 f9 28             	cmp    ecx,0x28
c001bcb6:	88 04 24             	mov    BYTE PTR [esp],al
c001bcb9:	0f 94 c2             	sete   dl
c001bcbc:	88 d0                	mov    al,dl
c001bcbe:	ba ff 07 00 00       	mov    edx,0x7ff
c001bcc3:	39 f2                	cmp    edx,esi
c001bcc5:	ba 00 00 00 00       	mov    edx,0x0
c001bcca:	19 fa                	sbb    edx,edi
c001bccc:	0f 92 c2             	setb   dl
c001bccf:	09 c2                	or     edx,eax
c001bcd1:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bcd5:	0f 94 c0             	sete   al
c001bcd8:	08 d0                	or     al,dl
c001bcda:	75 16                	jne    c001bcf2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bcdc:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001bce0:	74 10                	je     c001bcf2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001bce2:	8a 04 24             	mov    al,BYTE PTR [esp]
c001bce5:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001bce9:	41                   	inc    ecx
c001bcea:	83 c6 01             	add    esi,0x1
c001bced:	83 d7 00             	adc    edi,0x0
c001bcf0:	eb ba                	jmp    c001bcac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001bcf2:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001bcf9:	83 ec 0c             	sub    esp,0xc
c001bcfc:	8d 74 24 24          	lea    esi,[esp+0x24]
c001bd00:	56                   	push   esi
c001bd01:	e8 92 49 fe ff       	call   c0000698 <strlen>
c001bd06:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001bd0d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bd11:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001bd19:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd1c:	5a                   	pop    edx
c001bd1d:	25 ff 07 00 00       	and    eax,0x7ff
c001bd22:	59                   	pop    ecx
c001bd23:	01 f8                	add    eax,edi
c001bd25:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001bd2b:	83 e0 02             	and    eax,0x2
c001bd2e:	3c 01                	cmp    al,0x1
c001bd30:	19 c0                	sbb    eax,eax
c001bd32:	83 c0 02             	add    eax,0x2
c001bd35:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001bd39:	56                   	push   esi
c001bd3a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bd3e:	50                   	push   eax
c001bd3f:	e8 f4 49 fe ff       	call   c0000738 <strcpy>
c001bd44:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bd48:	83 c4 10             	add    esp,0x10
c001bd4b:	84 c0                	test   al,al
c001bd4d:	75 21                	jne    c001bd70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001bd4f:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bd57:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bd5f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bd67:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001bd6e:	eb 28                	jmp    c001bd98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bd70:	fe c8                	dec    al
c001bd72:	75 24                	jne    c001bd98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bd74:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001bd7c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bd84:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bd8c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bd93:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bd98:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bd9c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bda3:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bdaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bdac:	0f b6 f3             	movzx  esi,bl
c001bdaf:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bdb6:	31 db                	xor    ebx,ebx
c001bdb8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bdbe:	89 df                	mov    edi,ebx
c001bdc0:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bdc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdc6:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bdc9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bdcc:	39 c6                	cmp    esi,eax
c001bdce:	19 d7                	sbb    edi,edx
c001bdd0:	72 10                	jb     c001bde2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bdd2:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bdd9:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bde0:	eb 0a                	jmp    c001bdec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bde2:	29 f0                	sub    eax,esi
c001bde4:	19 da                	sbb    edx,ebx
c001bde6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bde9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bdec:	31 c0                	xor    eax,eax
c001bdee:	eb 05                	jmp    c001bdf5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bdf0:	b8 04 00 00 00       	mov    eax,0x4
c001bdf5:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bdfb:	5b                   	pop    ebx
c001bdfc:	5e                   	pop    esi
c001bdfd:	5f                   	pop    edi
c001bdfe:	5d                   	pop    ebp
c001bdff:	c3                   	ret    

c001be00 <readRoot(unsigned int*, unsigned int*, char)>:
c001be00:	57                   	push   edi
c001be01:	56                   	push   esi
c001be02:	81 ec 38 08 00 00    	sub    esp,0x838
c001be08:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001be10:	50                   	push   eax
c001be11:	8d 44 24 38          	lea    eax,[esp+0x38]
c001be15:	50                   	push   eax
c001be16:	6a 10                	push   0x10
c001be18:	e8 8a fa ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001be1d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001be24:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001be28:	b9 22 00 00 00       	mov    ecx,0x22
c001be2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001be2f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001be36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be3a:	89 10                	mov    DWORD PTR [eax],edx
c001be3c:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001be43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001be47:	89 10                	mov    DWORD PTR [eax],edx
c001be49:	81 c4 44 08 00 00    	add    esp,0x844
c001be4f:	b0 01                	mov    al,0x1
c001be51:	5e                   	pop    esi
c001be52:	5f                   	pop    edi
c001be53:	c3                   	ret    

c001be54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001be54:	55                   	push   ebp
c001be55:	57                   	push   edi
c001be56:	56                   	push   esi
c001be57:	53                   	push   ebx
c001be58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be5e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001be65:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001be6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be70:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001be74:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001be78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be7c:	75 03                	jne    c001be81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001be7e:	83 c3 02             	add    ebx,0x2
c001be81:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001be84:	75 03                	jne    c001be89 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001be86:	43                   	inc    ebx
c001be87:	eb f8                	jmp    c001be81 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001be89:	52                   	push   edx
c001be8a:	68 00 01 00 00       	push   0x100
c001be8f:	6a 00                	push   0x0
c001be91:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001be95:	50                   	push   eax
c001be96:	e8 e1 47 fe ff       	call   c000067c <memset>
c001be9b:	83 c4 10             	add    esp,0x10
c001be9e:	31 d2                	xor    edx,edx
c001bea0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bea3:	84 c0                	test   al,al
c001bea5:	74 21                	je     c001bec8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001bea7:	3c 2f                	cmp    al,0x2f
c001bea9:	75 0b                	jne    c001beb6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001beab:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001beaf:	bd 01 00 00 00       	mov    ebp,0x1
c001beb4:	eb 14                	jmp    c001beca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001beb6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001beb9:	80 f9 19             	cmp    cl,0x19
c001bebc:	77 03                	ja     c001bec1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001bebe:	83 e8 20             	sub    eax,0x20
c001bec1:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001bec5:	42                   	inc    edx
c001bec6:	eb d8                	jmp    c001bea0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001bec8:	31 ed                	xor    ebp,ebp
c001beca:	83 ec 0c             	sub    esp,0xc
c001becd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001bed4:	e8 de dd fe ff       	call   c0009cb7 <malloc>
c001bed9:	89 c6                	mov    esi,eax
c001bedb:	89 c2                	mov    edx,eax
c001bedd:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001bee4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001beea:	c1 ef 0b             	shr    edi,0xb
c001beed:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001bef4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001bf00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bf04:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001bf0b:	74 29                	je     c001bf36 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001bf0d:	50                   	push   eax
c001bf0e:	57                   	push   edi
c001bf0f:	52                   	push   edx
c001bf10:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bf14:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001bf1b:	e8 87 f9 ff ff       	call   c001b8a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf24:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001bf2b:	81 c2 00 08 00 00    	add    edx,0x800
c001bf31:	83 c4 10             	add    esp,0x10
c001bf34:	eb ca                	jmp    c001bf00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001bf36:	83 ec 0c             	sub    esp,0xc
c001bf39:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001bf3d:	57                   	push   edi
c001bf3e:	e8 55 47 fe ff       	call   c0000698 <strlen>
c001bf43:	50                   	push   eax
c001bf44:	57                   	push   edi
c001bf45:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001bf4c:	56                   	push   esi
c001bf4d:	e8 13 f9 ff ff       	call   c001b865 <__memmem(unsigned char*, int, unsigned char*, int)>
c001bf52:	83 c4 20             	add    esp,0x20
c001bf55:	85 c0                	test   eax,eax
c001bf57:	75 13                	jne    c001bf6c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001bf59:	83 ec 0c             	sub    esp,0xc
c001bf5c:	56                   	push   esi
c001bf5d:	e8 65 dd fe ff       	call   c0009cc7 <free>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	31 c0                	xor    eax,eax
c001bf67:	e9 b3 00 00 00       	jmp    c001c01f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001bf6c:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001bf70:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001bf74:	c1 e7 08             	shl    edi,0x8
c001bf77:	c1 e2 10             	shl    edx,0x10
c001bf7a:	09 d7                	or     edi,edx
c001bf7c:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001bf80:	09 d7                	or     edi,edx
c001bf82:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001bf86:	c1 e2 18             	shl    edx,0x18
c001bf89:	09 d7                	or     edi,edx
c001bf8b:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001bf8f:	89 d1                	mov    ecx,edx
c001bf91:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001bf95:	c1 e1 08             	shl    ecx,0x8
c001bf98:	c1 e2 10             	shl    edx,0x10
c001bf9b:	09 ca                	or     edx,ecx
c001bf9d:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001bfa1:	09 ca                	or     edx,ecx
c001bfa3:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001bfa7:	c1 e1 18             	shl    ecx,0x18
c001bfaa:	09 ca                	or     edx,ecx
c001bfac:	89 e9                	mov    ecx,ebp
c001bfae:	84 c9                	test   cl,cl
c001bfb0:	74 3c                	je     c001bfee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001bfb2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bfb6:	83 ec 0c             	sub    esp,0xc
c001bfb9:	56                   	push   esi
c001bfba:	e8 08 dd fe ff       	call   c0009cc7 <free>
c001bfbf:	83 c4 0c             	add    esp,0xc
c001bfc2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfc9:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001bfce:	50                   	push   eax
c001bfcf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfd6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001bfdd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfe1:	52                   	push   edx
c001bfe2:	57                   	push   edi
c001bfe3:	53                   	push   ebx
c001bfe4:	e8 6b fe ff ff       	call   c001be54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001bfe9:	83 c4 20             	add    esp,0x20
c001bfec:	eb 31                	jmp    c001c01f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001bfee:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001bff1:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001bff8:	d0 e8                	shr    al,1
c001bffa:	89 3b                	mov    DWORD PTR [ebx],edi
c001bffc:	83 e0 01             	and    eax,0x1
c001bfff:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c006:	83 ec 0c             	sub    esp,0xc
c001c009:	89 13                	mov    DWORD PTR [ebx],edx
c001c00b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c012:	89 03                	mov    DWORD PTR [ebx],eax
c001c014:	56                   	push   esi
c001c015:	e8 ad dc fe ff       	call   c0009cc7 <free>
c001c01a:	83 c4 10             	add    esp,0x10
c001c01d:	b0 01                	mov    al,0x1
c001c01f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c025:	5b                   	pop    ebx
c001c026:	5e                   	pop    esi
c001c027:	5f                   	pop    edi
c001c028:	5d                   	pop    ebp
c001c029:	c3                   	ret    

c001c02a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c02a:	55                   	push   ebp
c001c02b:	57                   	push   edi
c001c02c:	56                   	push   esi
c001c02d:	53                   	push   ebx
c001c02e:	83 ec 20             	sub    esp,0x20
c001c031:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c035:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c039:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c03d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c045:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c04d:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c052:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c058:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c05e:	57                   	push   edi
c001c05f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c063:	50                   	push   eax
c001c064:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c068:	50                   	push   eax
c001c069:	e8 92 fd ff ff       	call   c001be00 <readRoot(unsigned int*, unsigned int*, char)>
c001c06e:	5a                   	pop    edx
c001c06f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c073:	e8 20 46 fe ff       	call   c0000698 <strlen>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	83 f8 03             	cmp    eax,0x3
c001c07e:	77 17                	ja     c001c097 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c080:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c084:	89 03                	mov    DWORD PTR [ebx],eax
c001c086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c08a:	89 06                	mov    DWORD PTR [esi],eax
c001c08c:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c093:	b0 01                	mov    al,0x1
c001c095:	eb 19                	jmp    c001c0b0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c097:	50                   	push   eax
c001c098:	55                   	push   ebp
c001c099:	57                   	push   edi
c001c09a:	56                   	push   esi
c001c09b:	53                   	push   ebx
c001c09c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c0a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c0a4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c0a8:	e8 a7 fd ff ff       	call   c001be54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c0ad:	83 c4 20             	add    esp,0x20
c001c0b0:	83 c4 1c             	add    esp,0x1c
c001c0b3:	5b                   	pop    ebx
c001c0b4:	5e                   	pop    esi
c001c0b5:	5f                   	pop    edi
c001c0b6:	5d                   	pop    ebp
c001c0b7:	c3                   	ret    

c001c0b8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c0b8:	57                   	push   edi
c001c0b9:	56                   	push   esi
c001c0ba:	53                   	push   ebx
c001c0bb:	83 ec 10             	sub    esp,0x10
c001c0be:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c0c2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c0c6:	85 ff                	test   edi,edi
c001c0c8:	0f 84 8b 00 00 00    	je     c001c159 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c0ce:	85 f6                	test   esi,esi
c001c0d0:	0f 84 83 00 00 00    	je     c001c159 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c0d6:	b8 03 00 00 00       	mov    eax,0x3
c001c0db:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c0e0:	75 7c                	jne    c001c15e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c0e2:	83 ec 0c             	sub    esp,0xc
c001c0e5:	6a 1c                	push   0x1c
c001c0e7:	e8 cb db fe ff       	call   c0009cb7 <malloc>
c001c0ec:	89 07                	mov    DWORD PTR [edi],eax
c001c0ee:	89 c3                	mov    ebx,eax
c001c0f0:	58                   	pop    eax
c001c0f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0f5:	50                   	push   eax
c001c0f6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c0f9:	50                   	push   eax
c001c0fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0fe:	50                   	push   eax
c001c0ff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c103:	50                   	push   eax
c001c104:	56                   	push   esi
c001c105:	e8 20 ff ff ff       	call   c001c02a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c10a:	83 c4 20             	add    esp,0x20
c001c10d:	84 c0                	test   al,al
c001c10f:	74 07                	je     c001c118 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c111:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c116:	74 0b                	je     c001c123 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c118:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c11c:	b8 01 00 00 00       	mov    eax,0x1
c001c121:	eb 3b                	jmp    c001c15e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c127:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c12b:	89 03                	mov    DWORD PTR [ebx],eax
c001c12d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c138:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c13f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c146:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c149:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c150:	8a 06                	mov    al,BYTE PTR [esi]
c001c152:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c155:	31 c0                	xor    eax,eax
c001c157:	eb 05                	jmp    c001c15e <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c159:	b8 04 00 00 00       	mov    eax,0x4
c001c15e:	83 c4 10             	add    esp,0x10
c001c161:	5b                   	pop    ebx
c001c162:	5e                   	pop    esi
c001c163:	5f                   	pop    edi
c001c164:	c3                   	ret    
c001c165:	90                   	nop

c001c166 <ISO9660::exists(char const*)>:
c001c166:	83 ec 28             	sub    esp,0x28
c001c169:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c16d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c171:	52                   	push   edx
c001c172:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c175:	52                   	push   edx
c001c176:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c17a:	52                   	push   edx
c001c17b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c17f:	52                   	push   edx
c001c180:	50                   	push   eax
c001c181:	e8 a4 fe ff ff       	call   c001c02a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c186:	83 c4 3c             	add    esp,0x3c
c001c189:	c3                   	ret    

c001c18a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c18a:	56                   	push   esi
c001c18b:	53                   	push   ebx
c001c18c:	83 ec 14             	sub    esp,0x14
c001c18f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c193:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c197:	85 db                	test   ebx,ebx
c001c199:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c19d:	0f 94 c2             	sete   dl
c001c1a0:	85 f6                	test   esi,esi
c001c1a2:	0f 94 c0             	sete   al
c001c1a5:	08 c2                	or     dl,al
c001c1a7:	75 68                	jne    c001c211 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c1a9:	85 c9                	test   ecx,ecx
c001c1ab:	74 64                	je     c001c211 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c1ad:	83 ec 0c             	sub    esp,0xc
c001c1b0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c1b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c1bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1c4:	50                   	push   eax
c001c1c5:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c1c8:	50                   	push   eax
c001c1c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1cd:	50                   	push   eax
c001c1ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c1d2:	50                   	push   eax
c001c1d3:	51                   	push   ecx
c001c1d4:	e8 51 fe ff ff       	call   c001c02a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c1d9:	83 c4 20             	add    esp,0x20
c001c1dc:	ba 01 00 00 00       	mov    edx,0x1
c001c1e1:	84 c0                	test   al,al
c001c1e3:	74 31                	je     c001c216 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c1e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c1e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c1f0:	89 03                	mov    DWORD PTR [ebx],eax
c001c1f2:	ba 00 00 00 00       	mov    edx,0x0
c001c1f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1fb:	85 c0                	test   eax,eax
c001c1fd:	0f 95 06             	setne  BYTE PTR [esi]
c001c200:	74 14                	je     c001c216 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c202:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c208:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c20f:	eb 05                	jmp    c001c216 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c211:	ba 04 00 00 00       	mov    edx,0x4
c001c216:	83 c4 14             	add    esp,0x14
c001c219:	89 d0                	mov    eax,edx
c001c21b:	5b                   	pop    ebx
c001c21c:	5e                   	pop    esi
c001c21d:	c3                   	ret    

c001c21e <ISO9660::openDir(char const*, void**)>:
c001c21e:	57                   	push   edi
c001c21f:	56                   	push   esi
c001c220:	53                   	push   ebx
c001c221:	83 ec 10             	sub    esp,0x10
c001c224:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c228:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c22c:	85 ff                	test   edi,edi
c001c22e:	74 7b                	je     c001c2ab <ISO9660::openDir(char const*, void**)+0x8d>
c001c230:	85 f6                	test   esi,esi
c001c232:	74 77                	je     c001c2ab <ISO9660::openDir(char const*, void**)+0x8d>
c001c234:	83 ec 0c             	sub    esp,0xc
c001c237:	6a 1c                	push   0x1c
c001c239:	e8 79 da fe ff       	call   c0009cb7 <malloc>
c001c23e:	89 07                	mov    DWORD PTR [edi],eax
c001c240:	89 c3                	mov    ebx,eax
c001c242:	58                   	pop    eax
c001c243:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c247:	50                   	push   eax
c001c248:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c24b:	50                   	push   eax
c001c24c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c250:	50                   	push   eax
c001c251:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c255:	50                   	push   eax
c001c256:	56                   	push   esi
c001c257:	e8 ce fd ff ff       	call   c001c02a <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c25c:	83 c4 20             	add    esp,0x20
c001c25f:	84 c0                	test   al,al
c001c261:	74 07                	je     c001c26a <ISO9660::openDir(char const*, void**)+0x4c>
c001c263:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c268:	75 0b                	jne    c001c275 <ISO9660::openDir(char const*, void**)+0x57>
c001c26a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c26e:	b8 01 00 00 00       	mov    eax,0x1
c001c273:	eb 3b                	jmp    c001c2b0 <ISO9660::openDir(char const*, void**)+0x92>
c001c275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c279:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c27d:	89 03                	mov    DWORD PTR [ebx],eax
c001c27f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c28a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c291:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c298:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c29b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c2a2:	8a 06                	mov    al,BYTE PTR [esi]
c001c2a4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c2a7:	31 c0                	xor    eax,eax
c001c2a9:	eb 05                	jmp    c001c2b0 <ISO9660::openDir(char const*, void**)+0x92>
c001c2ab:	b8 04 00 00 00       	mov    eax,0x4
c001c2b0:	83 c4 10             	add    esp,0x10
c001c2b3:	5b                   	pop    ebx
c001c2b4:	5e                   	pop    esi
c001c2b5:	5f                   	pop    edi
c001c2b6:	c3                   	ret    
c001c2b7:	90                   	nop

c001c2b8 <ISO9660::ISO9660()>:
c001c2b8:	83 ec 0c             	sub    esp,0xc
c001c2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2bf:	83 ec 0c             	sub    esp,0xc
c001c2c2:	50                   	push   eax
c001c2c3:	e8 14 10 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001c2c8:	83 c4 10             	add    esp,0x10
c001c2cb:	ba 60 4c 02 c0       	mov    edx,0xc0024c60
c001c2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d4:	89 10                	mov    DWORD PTR [eax],edx
c001c2d6:	90                   	nop
c001c2d7:	83 c4 0c             	add    esp,0xc
c001c2da:	c3                   	ret    
c001c2db:	90                   	nop

c001c2dc <SoundCard::beginPlayback()>:
c001c2dc:	c7 44 24 04 c0 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cc0
c001c2e4:	e9 8e 70 ff ff       	jmp    c0013377 <Krnl::panic(char const*)>
c001c2e9:	90                   	nop

c001c2ea <SoundCard::stopPlayback()>:
c001c2ea:	c7 44 24 04 f4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cf4
c001c2f2:	e9 80 70 ff ff       	jmp    c0013377 <Krnl::panic(char const*)>
c001c2f7:	90                   	nop

c001c2f8 <SoundCard::SoundCard(char const*)>:
c001c2f8:	83 ec 1c             	sub    esp,0x1c
c001c2fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2ff:	83 ec 08             	sub    esp,0x8
c001c302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c306:	50                   	push   eax
c001c307:	e8 3a 23 ff ff       	call   c000e646 <Device::Device(char const*)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	ba 8c 4d 02 c0       	mov    edx,0xc0024d8c
c001c314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c318:	89 10                	mov    DWORD PTR [eax],edx
c001c31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c31e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c329:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c337:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c345:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c34f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c353:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c35d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c365:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c36a:	7f 19                	jg     c001c385 <SoundCard::SoundCard(char const*)+0x8d>
c001c36c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c370:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c374:	83 c2 54             	add    edx,0x54
c001c377:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c37f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c383:	eb e0                	jmp    c001c365 <SoundCard::SoundCard(char const*)+0x6d>
c001c385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c389:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c390:	90                   	nop
c001c391:	83 c4 1c             	add    esp,0x1c
c001c394:	c3                   	ret    
c001c395:	90                   	nop

c001c396 <SoundCard::~SoundCard()>:
c001c396:	83 ec 0c             	sub    esp,0xc
c001c399:	ba 8c 4d 02 c0       	mov    edx,0xc0024d8c
c001c39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a2:	89 10                	mov    DWORD PTR [eax],edx
c001c3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	50                   	push   eax
c001c3ac:	e8 93 1f ff ff       	call   c000e344 <Device::~Device()>
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	90                   	nop
c001c3b5:	83 c4 0c             	add    esp,0xc
c001c3b8:	c3                   	ret    
c001c3b9:	90                   	nop

c001c3ba <SoundCard::~SoundCard()>:
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	83 ec 0c             	sub    esp,0xc
c001c3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3c4:	e8 cd ff ff ff       	call   c001c396 <SoundCard::~SoundCard()>
c001c3c9:	83 c4 10             	add    esp,0x10
c001c3cc:	83 ec 08             	sub    esp,0x8
c001c3cf:	68 e8 01 00 00       	push   0x1e8
c001c3d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d8:	e8 07 0b ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001c3dd:	83 c4 10             	add    esp,0x10
c001c3e0:	83 c4 0c             	add    esp,0xc
c001c3e3:	c3                   	ret    

c001c3e4 <SoundCard::configureRates(int, int, int)>:
c001c3e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c3e8:	31 c0                	xor    eax,eax
c001c3ea:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c3f1:	75 20                	jne    c001c413 <SoundCard::configureRates(int, int, int)+0x2f>
c001c3f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3f7:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c3fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c401:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c411:	b0 01                	mov    al,0x1
c001c413:	c3                   	ret    

c001c414 <SoundCard::getSamples16(int, short*)>:
c001c414:	55                   	push   ebp
c001c415:	57                   	push   edi
c001c416:	31 ff                	xor    edi,edi
c001c418:	56                   	push   esi
c001c419:	53                   	push   ebx
c001c41a:	31 db                	xor    ebx,ebx
c001c41c:	83 ec 18             	sub    esp,0x18
c001c41f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c423:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c427:	68 27 4d 02 c0       	push   0xc0024d27
c001c42c:	e8 94 0b ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c431:	83 c4 0c             	add    esp,0xc
c001c434:	8d 04 36             	lea    eax,[esi+esi*1]
c001c437:	50                   	push   eax
c001c438:	6a 00                	push   0x0
c001c43a:	55                   	push   ebp
c001c43b:	e8 3c 42 fe ff       	call   c000067c <memset>
c001c440:	83 c4 10             	add    esp,0x10
c001c443:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c447:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c44e:	85 c0                	test   eax,eax
c001c450:	74 1b                	je     c001c46d <SoundCard::getSamples16(int, short*)+0x59>
c001c452:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c456:	75 15                	jne    c001c46d <SoundCard::getSamples16(int, short*)+0x59>
c001c458:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c45c:	55                   	push   ebp
c001c45d:	56                   	push   esi
c001c45e:	50                   	push   eax
c001c45f:	e8 58 03 00 00       	call   c001c7bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	39 c7                	cmp    edi,eax
c001c469:	7d 02                	jge    c001c46d <SoundCard::getSamples16(int, short*)+0x59>
c001c46b:	89 c7                	mov    edi,eax
c001c46d:	43                   	inc    ebx
c001c46e:	83 fb 20             	cmp    ebx,0x20
c001c471:	75 d0                	jne    c001c443 <SoundCard::getSamples16(int, short*)+0x2f>
c001c473:	83 c4 0c             	add    esp,0xc
c001c476:	89 f8                	mov    eax,edi
c001c478:	5b                   	pop    ebx
c001c479:	5e                   	pop    esi
c001c47a:	5f                   	pop    edi
c001c47b:	5d                   	pop    ebp
c001c47c:	c3                   	ret    
c001c47d:	90                   	nop

c001c47e <SoundCard::getSamples32(int, int*)>:
c001c47e:	55                   	push   ebp
c001c47f:	57                   	push   edi
c001c480:	31 ff                	xor    edi,edi
c001c482:	56                   	push   esi
c001c483:	31 f6                	xor    esi,esi
c001c485:	53                   	push   ebx
c001c486:	83 ec 10             	sub    esp,0x10
c001c489:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c48d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c491:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c495:	c1 e0 02             	shl    eax,0x2
c001c498:	50                   	push   eax
c001c499:	6a 00                	push   0x0
c001c49b:	55                   	push   ebp
c001c49c:	e8 db 41 fe ff       	call   c000067c <memset>
c001c4a1:	83 c4 10             	add    esp,0x10
c001c4a4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c4ab:	85 c0                	test   eax,eax
c001c4ad:	74 1b                	je     c001c4ca <SoundCard::getSamples32(int, int*)+0x4c>
c001c4af:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c4b3:	75 15                	jne    c001c4ca <SoundCard::getSamples32(int, int*)+0x4c>
c001c4b5:	53                   	push   ebx
c001c4b6:	55                   	push   ebp
c001c4b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4bb:	50                   	push   eax
c001c4bc:	e8 f7 03 00 00       	call   c001c8b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c4c1:	83 c4 10             	add    esp,0x10
c001c4c4:	39 c6                	cmp    esi,eax
c001c4c6:	7d 02                	jge    c001c4ca <SoundCard::getSamples32(int, int*)+0x4c>
c001c4c8:	89 c6                	mov    esi,eax
c001c4ca:	47                   	inc    edi
c001c4cb:	83 ff 20             	cmp    edi,0x20
c001c4ce:	75 d4                	jne    c001c4a4 <SoundCard::getSamples32(int, int*)+0x26>
c001c4d0:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c4d6:	85 f6                	test   esi,esi
c001c4d8:	75 0f                	jne    c001c4e9 <SoundCard::getSamples32(int, int*)+0x6b>
c001c4da:	84 c0                	test   al,al
c001c4dc:	74 1b                	je     c001c4f9 <SoundCard::getSamples32(int, int*)+0x7b>
c001c4de:	83 ec 0c             	sub    esp,0xc
c001c4e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4e3:	53                   	push   ebx
c001c4e4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c4e7:	eb 0d                	jmp    c001c4f6 <SoundCard::getSamples32(int, int*)+0x78>
c001c4e9:	84 c0                	test   al,al
c001c4eb:	75 0c                	jne    c001c4f9 <SoundCard::getSamples32(int, int*)+0x7b>
c001c4ed:	83 ec 0c             	sub    esp,0xc
c001c4f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4f2:	53                   	push   ebx
c001c4f3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c4f6:	83 c4 10             	add    esp,0x10
c001c4f9:	83 c4 0c             	add    esp,0xc
c001c4fc:	89 f0                	mov    eax,esi
c001c4fe:	5b                   	pop    ebx
c001c4ff:	5e                   	pop    esi
c001c500:	5f                   	pop    edi
c001c501:	5d                   	pop    ebp
c001c502:	c3                   	ret    
c001c503:	90                   	nop

c001c504 <SoundCard::addChannel(SoundPort*)>:
c001c504:	56                   	push   esi
c001c505:	53                   	push   ebx
c001c506:	53                   	push   ebx
c001c507:	31 db                	xor    ebx,ebx
c001c509:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c50d:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c515:	74 27                	je     c001c53e <SoundCard::addChannel(SoundPort*)+0x3a>
c001c517:	43                   	inc    ebx
c001c518:	83 fb 20             	cmp    ebx,0x20
c001c51b:	75 f0                	jne    c001c50d <SoundCard::addChannel(SoundPort*)+0x9>
c001c51d:	83 ec 0c             	sub    esp,0xc
c001c520:	83 cb ff             	or     ebx,0xffffffff
c001c523:	68 4d 4d 02 c0       	push   0xc0024d4d
c001c528:	e8 98 0a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c52d:	c7 04 24 46 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d46
c001c534:	e8 3e 6e ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c539:	83 c4 10             	add    esp,0x10
c001c53c:	eb 1b                	jmp    c001c559 <SoundCard::addChannel(SoundPort*)+0x55>
c001c53e:	51                   	push   ecx
c001c53f:	51                   	push   ecx
c001c540:	53                   	push   ebx
c001c541:	68 65 4d 02 c0       	push   0xc0024d65
c001c546:	e8 7a 0a ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c54b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c559:	89 d8                	mov    eax,ebx
c001c55b:	5a                   	pop    edx
c001c55c:	5b                   	pop    ebx
c001c55d:	5e                   	pop    esi
c001c55e:	c3                   	ret    
c001c55f:	90                   	nop

c001c560 <SoundCard::removeChannel(int)>:
c001c560:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c564:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c568:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c573:	c3                   	ret    

c001c574 <SoundPort::SoundPort(int, int, int, int)>:
c001c574:	83 ec 0c             	sub    esp,0xc
c001c577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c586:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c58e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c592:	89 10                	mov    DWORD PTR [eax],edx
c001c594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c598:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c59c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5a7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c5aa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c5af:	75 13                	jne    c001c5c4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5b7:	05 a0 0f 00 00       	add    eax,0xfa0
c001c5bc:	01 c0                	add    eax,eax
c001c5be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5c2:	66 90                	xchg   ax,ax
c001c5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c5cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c5e1:	c1 e0 02             	shl    eax,0x2
c001c5e4:	83 ec 0c             	sub    esp,0xc
c001c5e7:	50                   	push   eax
c001c5e8:	e8 ca d6 fe ff       	call   c0009cb7 <malloc>
c001c5ed:	83 c4 10             	add    esp,0x10
c001c5f0:	89 c2                	mov    edx,eax
c001c5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c5f9:	90                   	nop
c001c5fa:	83 c4 0c             	add    esp,0xc
c001c5fd:	c3                   	ret    
c001c5fe:	66 90                	xchg   ax,ax

c001c600 <SoundPort::~SoundPort()>:
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c607:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c60a:	85 c0                	test   eax,eax
c001c60c:	74 1e                	je     c001c62c <SoundPort::~SoundPort()+0x2c>
c001c60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c612:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c615:	83 ec 0c             	sub    esp,0xc
c001c618:	50                   	push   eax
c001c619:	e8 a9 d6 fe ff       	call   c0009cc7 <free>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c625:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c62c:	90                   	nop
c001c62d:	83 c4 0c             	add    esp,0xc
c001c630:	c3                   	ret    
c001c631:	90                   	nop
c001c632:	66 90                	xchg   ax,ax

c001c634 <SoundPort::unpause()>:
c001c634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c638:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c63c:	c3                   	ret    
c001c63d:	90                   	nop
c001c63e:	66 90                	xchg   ax,ax

c001c640 <SoundPort::pause()>:
c001c640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c644:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c648:	c3                   	ret    
c001c649:	90                   	nop
c001c64a:	66 90                	xchg   ax,ax

c001c64c <SoundPort::getBufferUsed()>:
c001c64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c650:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c653:	c3                   	ret    

c001c654 <SoundPort::getBufferSize()>:
c001c654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c658:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c65b:	c3                   	ret    

c001c65c <SoundPort::buffer16(short*, int)>:
c001c65c:	55                   	push   ebp
c001c65d:	57                   	push   edi
c001c65e:	56                   	push   esi
c001c65f:	53                   	push   ebx
c001c660:	83 ec 1c             	sub    esp,0x1c
c001c663:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c667:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c66b:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c66e:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c671:	0f 84 85 00 00 00    	je     c001c6fc <SoundPort::buffer16(short*, int)+0xa0>
c001c677:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c67b:	85 c9                	test   ecx,ecx
c001c67d:	7e 7d                	jle    c001c6fc <SoundPort::buffer16(short*, int)+0xa0>
c001c67f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c683:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c686:	c1 e1 0f             	shl    ecx,0xf
c001c689:	8d 70 01             	lea    esi,[eax+0x1]
c001c68c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c68f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c692:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c695:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c698:	74 6e                	je     c001c708 <SoundPort::buffer16(short*, int)+0xac>
c001c69a:	31 f6                	xor    esi,esi
c001c69c:	eb 22                	jmp    c001c6c0 <SoundPort::buffer16(short*, int)+0x64>
c001c69e:	66 90                	xchg   ax,ax
c001c6a0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c6a5:	8d 79 01             	lea    edi,[ecx+0x1]
c001c6a8:	c1 e3 0f             	shl    ebx,0xf
c001c6ab:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c6ae:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c6b1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c6b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c6b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c6ba:	74 1c                	je     c001c6d8 <SoundPort::buffer16(short*, int)+0x7c>
c001c6bc:	89 c6                	mov    esi,eax
c001c6be:	66 90                	xchg   ax,ax
c001c6c0:	8d 46 01             	lea    eax,[esi+0x1]
c001c6c3:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c6c7:	75 d7                	jne    c001c6a0 <SoundPort::buffer16(short*, int)+0x44>
c001c6c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6cd:	83 c4 1c             	add    esp,0x1c
c001c6d0:	5b                   	pop    ebx
c001c6d1:	5e                   	pop    esi
c001c6d2:	5f                   	pop    edi
c001c6d3:	5d                   	pop    ebp
c001c6d4:	c3                   	ret    
c001c6d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c6d8:	8d 46 02             	lea    eax,[esi+0x2]
c001c6db:	90                   	nop
c001c6dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	68 b8 4d 02 c0       	push   0xc0024db8
c001c6e8:	e8 d8 08 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c6ed:	83 c4 10             	add    esp,0x10
c001c6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6f4:	83 c4 1c             	add    esp,0x1c
c001c6f7:	5b                   	pop    ebx
c001c6f8:	5e                   	pop    esi
c001c6f9:	5f                   	pop    edi
c001c6fa:	5d                   	pop    ebp
c001c6fb:	c3                   	ret    
c001c6fc:	83 c4 1c             	add    esp,0x1c
c001c6ff:	31 c0                	xor    eax,eax
c001c701:	5b                   	pop    ebx
c001c702:	5e                   	pop    esi
c001c703:	5f                   	pop    edi
c001c704:	5d                   	pop    ebp
c001c705:	c3                   	ret    
c001c706:	66 90                	xchg   ax,ax
c001c708:	b8 01 00 00 00       	mov    eax,0x1
c001c70d:	eb cd                	jmp    c001c6dc <SoundPort::buffer16(short*, int)+0x80>
c001c70f:	90                   	nop

c001c710 <SoundPort::buffer32(int*, int)>:
c001c710:	55                   	push   ebp
c001c711:	57                   	push   edi
c001c712:	56                   	push   esi
c001c713:	53                   	push   ebx
c001c714:	83 ec 1c             	sub    esp,0x1c
c001c717:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c71b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c71f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c722:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c72a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c72d:	74 79                	je     c001c7a8 <SoundPort::buffer32(int*, int)+0x98>
c001c72f:	85 c0                	test   eax,eax
c001c731:	7e 75                	jle    c001c7a8 <SoundPort::buffer32(int*, int)+0x98>
c001c733:	8d 71 01             	lea    esi,[ecx+0x1]
c001c736:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c739:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c73c:	8b 37                	mov    esi,DWORD PTR [edi]
c001c73e:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c741:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c744:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c747:	74 6b                	je     c001c7b4 <SoundPort::buffer32(int*, int)+0xa4>
c001c749:	31 f6                	xor    esi,esi
c001c74b:	eb 1f                	jmp    c001c76c <SoundPort::buffer32(int*, int)+0x5c>
c001c74d:	8d 76 00             	lea    esi,[esi+0x0]
c001c750:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c753:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c756:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c759:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c75c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c760:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c763:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c766:	74 1c                	je     c001c784 <SoundPort::buffer32(int*, int)+0x74>
c001c768:	89 de                	mov    esi,ebx
c001c76a:	66 90                	xchg   ax,ax
c001c76c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c76f:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c773:	75 db                	jne    c001c750 <SoundPort::buffer32(int*, int)+0x40>
c001c775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c779:	83 c4 1c             	add    esp,0x1c
c001c77c:	5b                   	pop    ebx
c001c77d:	5e                   	pop    esi
c001c77e:	5f                   	pop    edi
c001c77f:	5d                   	pop    ebp
c001c780:	c3                   	ret    
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	8d 46 02             	lea    eax,[esi+0x2]
c001c787:	90                   	nop
c001c788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	68 d3 4d 02 c0       	push   0xc0024dd3
c001c794:	e8 2c 08 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c799:	83 c4 10             	add    esp,0x10
c001c79c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7a0:	83 c4 1c             	add    esp,0x1c
c001c7a3:	5b                   	pop    ebx
c001c7a4:	5e                   	pop    esi
c001c7a5:	5f                   	pop    edi
c001c7a6:	5d                   	pop    ebp
c001c7a7:	c3                   	ret    
c001c7a8:	83 c4 1c             	add    esp,0x1c
c001c7ab:	31 c0                	xor    eax,eax
c001c7ad:	5b                   	pop    ebx
c001c7ae:	5e                   	pop    esi
c001c7af:	5f                   	pop    edi
c001c7b0:	5d                   	pop    ebp
c001c7b1:	c3                   	ret    
c001c7b2:	66 90                	xchg   ax,ax
c001c7b4:	b8 01 00 00 00       	mov    eax,0x1
c001c7b9:	eb cd                	jmp    c001c788 <SoundPort::buffer32(int*, int)+0x78>
c001c7bb:	90                   	nop

c001c7bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c7bc:	57                   	push   edi
c001c7bd:	56                   	push   esi
c001c7be:	53                   	push   ebx
c001c7bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c7c3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c7c7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c7cd:	39 03                	cmp    DWORD PTR [ebx],eax
c001c7cf:	74 13                	je     c001c7e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	68 28 4e 02 c0       	push   0xc0024e28
c001c7d9:	e8 99 6b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7e4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c7ea:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c7ed:	74 11                	je     c001c800 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c7ef:	83 ec 0c             	sub    esp,0xc
c001c7f2:	68 ee 4d 02 c0       	push   0xc0024dee
c001c7f7:	e8 7b 6b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c7fc:	83 c4 10             	add    esp,0x10
c001c7ff:	90                   	nop
c001c800:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c806:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c809:	74 11                	je     c001c81c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c80b:	83 ec 0c             	sub    esp,0xc
c001c80e:	68 ee 4d 02 c0       	push   0xc0024dee
c001c813:	e8 5f 6b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	90                   	nop
c001c81c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c81f:	89 c6                	mov    esi,eax
c001c821:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c825:	7e 05                	jle    c001c82c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c827:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c82b:	90                   	nop
c001c82c:	85 f6                	test   esi,esi
c001c82e:	7e 30                	jle    c001c860 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001c830:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c834:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c837:	31 c9                	xor    ecx,ecx
c001c839:	01 d7                	add    edi,edx
c001c83b:	90                   	nop
c001c83c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c83f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c842:	85 c0                	test   eax,eax
c001c844:	79 06                	jns    c001c84c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c846:	05 ff 7f 00 00       	add    eax,0x7fff
c001c84b:	90                   	nop
c001c84c:	c1 f8 0f             	sar    eax,0xf
c001c84f:	83 c1 04             	add    ecx,0x4
c001c852:	66 01 02             	add    WORD PTR [edx],ax
c001c855:	83 c2 02             	add    edx,0x2
c001c858:	39 d7                	cmp    edi,edx
c001c85a:	75 e0                	jne    c001c83c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c85c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c85f:	90                   	nop
c001c860:	56                   	push   esi
c001c861:	89 c2                	mov    edx,eax
c001c863:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001c86a:	29 f2                	sub    edx,esi
c001c86c:	52                   	push   edx
c001c86d:	50                   	push   eax
c001c86e:	68 48 4e 02 c0       	push   0xc0024e48
c001c873:	e8 4d 07 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c878:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c87b:	50                   	push   eax
c001c87c:	01 f8                	add    eax,edi
c001c87e:	50                   	push   eax
c001c87f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c882:	29 f0                	sub    eax,esi
c001c884:	c1 e0 02             	shl    eax,0x2
c001c887:	50                   	push   eax
c001c888:	68 78 4e 02 c0       	push   0xc0024e78
c001c88d:	e8 33 07 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001c892:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c895:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c898:	83 c4 1c             	add    esp,0x1c
c001c89b:	01 d7                	add    edi,edx
c001c89d:	29 f0                	sub    eax,esi
c001c89f:	c1 e0 02             	shl    eax,0x2
c001c8a2:	50                   	push   eax
c001c8a3:	57                   	push   edi
c001c8a4:	52                   	push   edx
c001c8a5:	e8 0a 3d fe ff       	call   c00005b4 <memmove>
c001c8aa:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	89 f0                	mov    eax,esi
c001c8b2:	5b                   	pop    ebx
c001c8b3:	5e                   	pop    esi
c001c8b4:	5f                   	pop    edi
c001c8b5:	c3                   	ret    
c001c8b6:	66 90                	xchg   ax,ax

c001c8b8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c8b8:	57                   	push   edi
c001c8b9:	56                   	push   esi
c001c8ba:	53                   	push   ebx
c001c8bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c8bf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c8c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c8c7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c8cd:	39 06                	cmp    DWORD PTR [esi],eax
c001c8cf:	74 13                	je     c001c8e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c8d1:	83 ec 0c             	sub    esp,0xc
c001c8d4:	68 9c 4e 02 c0       	push   0xc0024e9c
c001c8d9:	e8 99 6a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c8de:	83 c4 10             	add    esp,0x10
c001c8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001c8e4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c8ea:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c8ed:	74 11                	je     c001c900 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c8ef:	83 ec 0c             	sub    esp,0xc
c001c8f2:	68 0a 4e 02 c0       	push   0xc0024e0a
c001c8f7:	e8 7b 6a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c8fc:	83 c4 10             	add    esp,0x10
c001c8ff:	90                   	nop
c001c900:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c906:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c909:	74 11                	je     c001c91c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c90b:	83 ec 0c             	sub    esp,0xc
c001c90e:	68 0a 4e 02 c0       	push   0xc0024e0a
c001c913:	e8 5f 6a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001c918:	83 c4 10             	add    esp,0x10
c001c91b:	90                   	nop
c001c91c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c91f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c923:	7e 07                	jle    c001c92c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c925:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c929:	8d 76 00             	lea    esi,[esi+0x0]
c001c92c:	85 ff                	test   edi,edi
c001c92e:	7e 1c                	jle    c001c94c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c930:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c937:	31 c0                	xor    eax,eax
c001c939:	8d 76 00             	lea    esi,[esi+0x0]
c001c93c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c93f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c942:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c945:	83 c0 04             	add    eax,0x4
c001c948:	39 c1                	cmp    ecx,eax
c001c94a:	75 f0                	jne    c001c93c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c94c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c94f:	50                   	push   eax
c001c950:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c953:	29 f8                	sub    eax,edi
c001c955:	c1 e0 02             	shl    eax,0x2
c001c958:	50                   	push   eax
c001c959:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c95c:	50                   	push   eax
c001c95d:	52                   	push   edx
c001c95e:	e8 51 3c fe ff       	call   c00005b4 <memmove>
c001c963:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	89 f8                	mov    eax,edi
c001c96b:	5b                   	pop    ebx
c001c96c:	5e                   	pop    esi
c001c96d:	5f                   	pop    edi
c001c96e:	c3                   	ret    
c001c96f:	90                   	nop

c001c970 <PCI::open(int, int, void*)>:
c001c970:	83 ec 18             	sub    esp,0x18
c001c973:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c977:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c97b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c981:	8b 10                	mov    edx,DWORD PTR [eax]
c001c983:	50                   	push   eax
c001c984:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c987:	31 c0                	xor    eax,eax
c001c989:	83 c4 1c             	add    esp,0x1c
c001c98c:	c3                   	ret    
c001c98d:	90                   	nop

c001c98e <PCI::close(int, int, void*)>:
c001c98e:	31 c0                	xor    eax,eax
c001c990:	c3                   	ret    
c001c991:	90                   	nop

c001c992 <PCI::PCI()>:
c001c992:	83 ec 0c             	sub    esp,0xc
c001c995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c999:	83 ec 08             	sub    esp,0x8
c001c99c:	68 bb 4e 02 c0       	push   0xc0024ebb
c001c9a1:	50                   	push   eax
c001c9a2:	e8 f5 13 ff ff       	call   c000dd9c <Bus::Bus(char const*)>
c001c9a7:	83 c4 10             	add    esp,0x10
c001c9aa:	ba 90 50 02 c0       	mov    edx,0xc0025090
c001c9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b3:	89 10                	mov    DWORD PTR [eax],edx
c001c9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c7:	a3 e0 a1 02 c0       	mov    ds:0xc002a1e0,eax
c001c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c9d6:	0f b6 d0             	movzx  edx,al
c001c9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9dd:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c9ee:	0f b6 d0             	movzx  edx,al
c001c9f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9fe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ca04:	8d 50 01             	lea    edx,[eax+0x1]
c001ca07:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca0b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ca11:	0f b6 d0             	movzx  edx,al
c001ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca18:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ca1c:	83 c9 c0             	or     ecx,0xffffffc0
c001ca1f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ca23:	90                   	nop
c001ca24:	83 c4 0c             	add    esp,0xc
c001ca27:	c3                   	ret    

c001ca28 <PCI::readBAR8(unsigned int, int)>:
c001ca28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca30:	f6 c2 01             	test   dl,0x1
c001ca33:	74 07                	je     c001ca3c <PCI::readBAR8(unsigned int, int)+0x14>
c001ca35:	83 e2 fc             	and    edx,0xfffffffc
c001ca38:	01 c2                	add    edx,eax
c001ca3a:	ec                   	in     al,dx
c001ca3b:	c3                   	ret    
c001ca3c:	83 e2 f0             	and    edx,0xfffffff0
c001ca3f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ca42:	c3                   	ret    
c001ca43:	90                   	nop

c001ca44 <PCI::readBAR16(unsigned int, int)>:
c001ca44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca4c:	f6 c2 01             	test   dl,0x1
c001ca4f:	74 08                	je     c001ca59 <PCI::readBAR16(unsigned int, int)+0x15>
c001ca51:	83 e2 fc             	and    edx,0xfffffffc
c001ca54:	01 c2                	add    edx,eax
c001ca56:	66 ed                	in     ax,dx
c001ca58:	c3                   	ret    
c001ca59:	83 e2 f0             	and    edx,0xfffffff0
c001ca5c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <PCI::readBAR32(unsigned int, int)>:
c001ca62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca6a:	f6 c2 01             	test   dl,0x1
c001ca6d:	74 07                	je     c001ca76 <PCI::readBAR32(unsigned int, int)+0x14>
c001ca6f:	83 e2 fc             	and    edx,0xfffffffc
c001ca72:	01 c2                	add    edx,eax
c001ca74:	ed                   	in     eax,dx
c001ca75:	c3                   	ret    
c001ca76:	83 e2 f0             	and    edx,0xfffffff0
c001ca79:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ca7c:	c3                   	ret    
c001ca7d:	90                   	nop

c001ca7e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ca7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ca8a:	f6 c2 01             	test   dl,0x1
c001ca8d:	74 07                	je     c001ca96 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ca8f:	83 e2 fc             	and    edx,0xfffffffc
c001ca92:	01 ca                	add    edx,ecx
c001ca94:	ee                   	out    dx,al
c001ca95:	c3                   	ret    
c001ca96:	83 e2 f0             	and    edx,0xfffffff0
c001ca99:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ca9c:	c3                   	ret    
c001ca9d:	90                   	nop

c001ca9e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ca9e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001caa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001caa6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001caaa:	f6 c2 01             	test   dl,0x1
c001caad:	74 08                	je     c001cab7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001caaf:	83 e2 fc             	and    edx,0xfffffffc
c001cab2:	01 ca                	add    edx,ecx
c001cab4:	66 ef                	out    dx,ax
c001cab6:	c3                   	ret    
c001cab7:	83 e2 f0             	and    edx,0xfffffff0
c001caba:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cabe:	c3                   	ret    
c001cabf:	90                   	nop

c001cac0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cac0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cac4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cac8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cacc:	f6 c2 01             	test   dl,0x1
c001cacf:	74 07                	je     c001cad8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cad1:	83 e2 fc             	and    edx,0xfffffffc
c001cad4:	01 ca                	add    edx,ecx
c001cad6:	ef                   	out    dx,eax
c001cad7:	c3                   	ret    
c001cad8:	83 e2 f0             	and    edx,0xfffffff0
c001cadb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001cade:	c3                   	ret    
c001cadf:	90                   	nop

c001cae0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cae0:	55                   	push   ebp
c001cae1:	57                   	push   edi
c001cae2:	56                   	push   esi
c001cae3:	53                   	push   ebx
c001cae4:	83 ec 0c             	sub    esp,0xc
c001cae7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001caeb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001caef:	89 f0                	mov    eax,esi
c001caf1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001caf5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001caf9:	3c 07                	cmp    al,0x7
c001cafb:	76 10                	jbe    c001cb0d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001cafd:	83 ec 0c             	sub    esp,0xc
c001cb00:	68 c3 4e 02 c0       	push   0xc0024ec3
c001cb05:	e8 6d 68 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001cb0a:	83 c4 10             	add    esp,0x10
c001cb0d:	80 fb 0f             	cmp    bl,0xf
c001cb10:	76 10                	jbe    c001cb22 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	68 f3 4e 02 c0       	push   0xc0024ef3
c001cb1a:	e8 58 68 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	8d 04 36             	lea    eax,[esi+esi*1]
c001cb25:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb2a:	83 c8 f0             	or     eax,0xfffffff0
c001cb2d:	ee                   	out    dx,al
c001cb2e:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cb33:	89 e8                	mov    eax,ebp
c001cb35:	ee                   	out    dx,al
c001cb36:	83 c4 0c             	add    esp,0xc
c001cb39:	89 d8                	mov    eax,ebx
c001cb3b:	66 81 e7 fc 00       	and    di,0xfc
c001cb40:	5b                   	pop    ebx
c001cb41:	c1 e0 08             	shl    eax,0x8
c001cb44:	5e                   	pop    esi
c001cb45:	09 f8                	or     eax,edi
c001cb47:	5f                   	pop    edi
c001cb48:	66 0d 00 c0          	or     ax,0xc000
c001cb4c:	5d                   	pop    ebp
c001cb4d:	c3                   	ret    

c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cb4e:	57                   	push   edi
c001cb4f:	56                   	push   esi
c001cb50:	53                   	push   ebx
c001cb51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cb59:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cb5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cb63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cb67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb6b:	83 ff 01             	cmp    edi,0x1
c001cb6e:	75 3e                	jne    c001cbae <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cb70:	89 de                	mov    esi,ebx
c001cb72:	0f b6 c0             	movzx  eax,al
c001cb75:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cb7b:	c1 e0 10             	shl    eax,0x10
c001cb7e:	0f b6 c9             	movzx  ecx,cl
c001cb81:	09 f0                	or     eax,esi
c001cb83:	c1 e1 08             	shl    ecx,0x8
c001cb86:	0f b6 d2             	movzx  edx,dl
c001cb89:	09 c8                	or     eax,ecx
c001cb8b:	c1 e2 0b             	shl    edx,0xb
c001cb8e:	09 d0                	or     eax,edx
c001cb90:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cb95:	0d 00 00 00 80       	or     eax,0x80000000
c001cb9a:	ef                   	out    dx,eax
c001cb9b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cba0:	ed                   	in     eax,dx
c001cba1:	83 e3 02             	and    ebx,0x2
c001cba4:	0f b6 cb             	movzx  ecx,bl
c001cba7:	c1 e1 03             	shl    ecx,0x3
c001cbaa:	d3 e8                	shr    eax,cl
c001cbac:	eb 43                	jmp    c001cbf1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cbae:	83 ff 02             	cmp    edi,0x2
c001cbb1:	75 2c                	jne    c001cbdf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cbb3:	83 ec 0c             	sub    esp,0xc
c001cbb6:	0f b6 c9             	movzx  ecx,cl
c001cbb9:	0f b6 d2             	movzx  edx,dl
c001cbbc:	0f b6 fb             	movzx  edi,bl
c001cbbf:	0f b6 c0             	movzx  eax,al
c001cbc2:	57                   	push   edi
c001cbc3:	51                   	push   ecx
c001cbc4:	52                   	push   edx
c001cbc5:	50                   	push   eax
c001cbc6:	56                   	push   esi
c001cbc7:	e8 14 ff ff ff       	call   c001cae0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbcc:	89 c2                	mov    edx,eax
c001cbce:	ed                   	in     eax,dx
c001cbcf:	83 e3 02             	and    ebx,0x2
c001cbd2:	83 c4 20             	add    esp,0x20
c001cbd5:	0f b6 cb             	movzx  ecx,bl
c001cbd8:	c1 e1 03             	shl    ecx,0x3
c001cbdb:	d3 e8                	shr    eax,cl
c001cbdd:	eb 12                	jmp    c001cbf1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	68 23 4f 02 c0       	push   0xc0024f23
c001cbe7:	e8 8b 67 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001cbec:	83 c4 10             	add    esp,0x10
c001cbef:	31 c0                	xor    eax,eax
c001cbf1:	5b                   	pop    ebx
c001cbf2:	5e                   	pop    esi
c001cbf3:	5f                   	pop    edi
c001cbf4:	c3                   	ret    
c001cbf5:	90                   	nop

c001cbf6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cbf6:	83 ec 18             	sub    esp,0x18
c001cbf9:	6a 00                	push   0x0
c001cbfb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc00:	50                   	push   eax
c001cc01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc06:	50                   	push   eax
c001cc07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc0c:	50                   	push   eax
c001cc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc11:	e8 38 ff ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc16:	83 c4 2c             	add    esp,0x2c
c001cc19:	c3                   	ret    

c001cc1a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cc1a:	83 ec 18             	sub    esp,0x18
c001cc1d:	6a 0e                	push   0xe
c001cc1f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc24:	50                   	push   eax
c001cc25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc2a:	50                   	push   eax
c001cc2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc30:	50                   	push   eax
c001cc31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc35:	e8 14 ff ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc3a:	83 c4 2c             	add    esp,0x2c
c001cc3d:	0f b6 c0             	movzx  eax,al
c001cc40:	c3                   	ret    
c001cc41:	90                   	nop

c001cc42 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cc42:	55                   	push   ebp
c001cc43:	57                   	push   edi
c001cc44:	56                   	push   esi
c001cc45:	53                   	push   ebx
c001cc46:	83 ec 18             	sub    esp,0x18
c001cc49:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cc4e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cc53:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cc58:	6a 0a                	push   0xa
c001cc5a:	56                   	push   esi
c001cc5b:	55                   	push   ebp
c001cc5c:	57                   	push   edi
c001cc5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc61:	e8 e8 fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc66:	83 c4 14             	add    esp,0x14
c001cc69:	89 c3                	mov    ebx,eax
c001cc6b:	6a 0a                	push   0xa
c001cc6d:	0f b6 db             	movzx  ebx,bl
c001cc70:	56                   	push   esi
c001cc71:	55                   	push   ebp
c001cc72:	57                   	push   edi
c001cc73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc77:	e8 d2 fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc7c:	83 c4 2c             	add    esp,0x2c
c001cc7f:	25 00 ff 00 00       	and    eax,0xff00
c001cc84:	09 d8                	or     eax,ebx
c001cc86:	5b                   	pop    ebx
c001cc87:	5e                   	pop    esi
c001cc88:	5f                   	pop    edi
c001cc89:	5d                   	pop    ebp
c001cc8a:	c3                   	ret    
c001cc8b:	90                   	nop

c001cc8c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cc8c:	83 ec 18             	sub    esp,0x18
c001cc8f:	6a 08                	push   0x8
c001cc91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc96:	50                   	push   eax
c001cc97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cc9c:	50                   	push   eax
c001cc9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cca2:	50                   	push   eax
c001cca3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cca7:	e8 a2 fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccac:	83 c4 2c             	add    esp,0x2c
c001ccaf:	0f b6 c4             	movzx  eax,ah
c001ccb2:	c3                   	ret    
c001ccb3:	90                   	nop

c001ccb4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ccb4:	83 ec 18             	sub    esp,0x18
c001ccb7:	6a 08                	push   0x8
c001ccb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccbe:	50                   	push   eax
c001ccbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccc4:	50                   	push   eax
c001ccc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccca:	50                   	push   eax
c001cccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cccf:	e8 7a fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccd4:	83 c4 2c             	add    esp,0x2c
c001ccd7:	c3                   	ret    

c001ccd8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ccd8:	83 ec 18             	sub    esp,0x18
c001ccdb:	6a 3c                	push   0x3c
c001ccdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cce2:	50                   	push   eax
c001cce3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cce8:	50                   	push   eax
c001cce9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ccee:	50                   	push   eax
c001ccef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccf3:	e8 56 fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ccf8:	83 c4 2c             	add    esp,0x2c
c001ccfb:	c3                   	ret    

c001ccfc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ccfc:	83 ec 18             	sub    esp,0x18
c001ccff:	6a 18                	push   0x18
c001cd01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd06:	50                   	push   eax
c001cd07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd0c:	50                   	push   eax
c001cd0d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cd12:	50                   	push   eax
c001cd13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd17:	e8 32 fe ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd1c:	83 c4 2c             	add    esp,0x2c
c001cd1f:	0f b6 c4             	movzx  eax,ah
c001cd22:	c3                   	ret    
c001cd23:	90                   	nop

c001cd24 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd24:	55                   	push   ebp
c001cd25:	57                   	push   edi
c001cd26:	56                   	push   esi
c001cd27:	53                   	push   ebx
c001cd28:	83 ec 28             	sub    esp,0x28
c001cd2b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cd2f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cd34:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cd39:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cd3e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cd45:	8d 43 12             	lea    eax,[ebx+0x12]
c001cd48:	83 c3 10             	add    ebx,0x10
c001cd4b:	0f b6 c0             	movzx  eax,al
c001cd4e:	0f b6 db             	movzx  ebx,bl
c001cd51:	50                   	push   eax
c001cd52:	51                   	push   ecx
c001cd53:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cd57:	57                   	push   edi
c001cd58:	55                   	push   ebp
c001cd59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd5d:	e8 ec fd ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd62:	83 c4 14             	add    esp,0x14
c001cd65:	89 c6                	mov    esi,eax
c001cd67:	53                   	push   ebx
c001cd68:	c1 e6 10             	shl    esi,0x10
c001cd6b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd6f:	51                   	push   ecx
c001cd70:	57                   	push   edi
c001cd71:	55                   	push   ebp
c001cd72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd76:	e8 d3 fd ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd7b:	83 c4 3c             	add    esp,0x3c
c001cd7e:	0f b7 c0             	movzx  eax,ax
c001cd81:	5b                   	pop    ebx
c001cd82:	09 f0                	or     eax,esi
c001cd84:	5e                   	pop    esi
c001cd85:	5f                   	pop    edi
c001cd86:	5d                   	pop    ebp
c001cd87:	c3                   	ret    

c001cd88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cd88:	55                   	push   ebp
c001cd89:	57                   	push   edi
c001cd8a:	56                   	push   esi
c001cd8b:	53                   	push   ebx
c001cd8c:	83 ec 0c             	sub    esp,0xc
c001cd8f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cd97:	89 f5                	mov    ebp,esi
c001cd99:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cd9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cda3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cda7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cdab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cdaf:	83 f9 01             	cmp    ecx,0x1
c001cdb2:	75 5d                	jne    c001ce11 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cdb4:	0f b6 c8             	movzx  ecx,al
c001cdb7:	0f b6 d2             	movzx  edx,dl
c001cdba:	c1 e1 10             	shl    ecx,0x10
c001cdbd:	c1 e2 0b             	shl    edx,0xb
c001cdc0:	89 f0                	mov    eax,esi
c001cdc2:	25 fc 00 00 00       	and    eax,0xfc
c001cdc7:	09 c1                	or     ecx,eax
c001cdc9:	89 e8                	mov    eax,ebp
c001cdcb:	0f b6 c0             	movzx  eax,al
c001cdce:	c1 e0 08             	shl    eax,0x8
c001cdd1:	09 c1                	or     ecx,eax
c001cdd3:	09 d1                	or     ecx,edx
c001cdd5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cdda:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cde0:	89 c8                	mov    eax,ecx
c001cde2:	ef                   	out    dx,eax
c001cde3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cde8:	ed                   	in     eax,dx
c001cde9:	0f b7 db             	movzx  ebx,bx
c001cdec:	83 e6 02             	and    esi,0x2
c001cdef:	74 0a                	je     c001cdfb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cdf1:	0f b7 d0             	movzx  edx,ax
c001cdf4:	c1 e3 10             	shl    ebx,0x10
c001cdf7:	09 d3                	or     ebx,edx
c001cdf9:	eb 05                	jmp    c001ce00 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cdfb:	66 31 c0             	xor    ax,ax
c001cdfe:	09 c3                	or     ebx,eax
c001ce00:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ce05:	89 c8                	mov    eax,ecx
c001ce07:	ef                   	out    dx,eax
c001ce08:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ce0d:	89 d8                	mov    eax,ebx
c001ce0f:	eb 41                	jmp    c001ce52 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ce11:	83 f9 02             	cmp    ecx,0x2
c001ce14:	75 45                	jne    c001ce5b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001ce16:	83 ec 0c             	sub    esp,0xc
c001ce19:	0f b6 d2             	movzx  edx,dl
c001ce1c:	89 f1                	mov    ecx,esi
c001ce1e:	0f b6 c0             	movzx  eax,al
c001ce21:	0f b6 f1             	movzx  esi,cl
c001ce24:	89 e9                	mov    ecx,ebp
c001ce26:	56                   	push   esi
c001ce27:	0f b6 c9             	movzx  ecx,cl
c001ce2a:	51                   	push   ecx
c001ce2b:	52                   	push   edx
c001ce2c:	50                   	push   eax
c001ce2d:	57                   	push   edi
c001ce2e:	e8 ad fc ff ff       	call   c001cae0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce33:	89 c2                	mov    edx,eax
c001ce35:	ed                   	in     eax,dx
c001ce36:	83 c4 20             	add    esp,0x20
c001ce39:	0f b7 db             	movzx  ebx,bx
c001ce3c:	f6 c2 02             	test   dl,0x2
c001ce3f:	74 0c                	je     c001ce4d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001ce41:	0f b7 c8             	movzx  ecx,ax
c001ce44:	89 d8                	mov    eax,ebx
c001ce46:	c1 e0 10             	shl    eax,0x10
c001ce49:	09 c8                	or     eax,ecx
c001ce4b:	eb 05                	jmp    c001ce52 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ce4d:	66 31 c0             	xor    ax,ax
c001ce50:	09 d8                	or     eax,ebx
c001ce52:	ef                   	out    dx,eax
c001ce53:	83 c4 0c             	add    esp,0xc
c001ce56:	5b                   	pop    ebx
c001ce57:	5e                   	pop    esi
c001ce58:	5f                   	pop    edi
c001ce59:	5d                   	pop    ebp
c001ce5a:	c3                   	ret    
c001ce5b:	c7 44 24 20 23 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f23
c001ce63:	83 c4 0c             	add    esp,0xc
c001ce66:	5b                   	pop    ebx
c001ce67:	5e                   	pop    esi
c001ce68:	5f                   	pop    edi
c001ce69:	5d                   	pop    ebp
c001ce6a:	e9 08 65 ff ff       	jmp    c0013377 <Krnl::panic(char const*)>
c001ce6f:	90                   	nop

c001ce70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001ce70:	55                   	push   ebp
c001ce71:	57                   	push   edi
c001ce72:	56                   	push   esi
c001ce73:	53                   	push   ebx
c001ce74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ce7a:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001ce81:	75 0f                	jne    c001ce92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001ce83:	80 3d ec a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a1ec,0x0
c001ce8a:	0f 85 fa 00 00 00    	jne    c001cf8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001ce90:	eb 2f                	jmp    c001cec1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001ce92:	83 ec 0c             	sub    esp,0xc
c001ce95:	68 29 4f 02 c0       	push   0xc0024f29
c001ce9a:	e8 72 ce fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001ce9f:	83 c4 10             	add    esp,0x10
c001cea2:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001cea9:	75 d8                	jne    c001ce83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001ceab:	e4 60                	in     al,0x60
c001cead:	3c 1c                	cmp    al,0x1c
c001ceaf:	74 04                	je     c001ceb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001ceb1:	3c 5a                	cmp    al,0x5a
c001ceb3:	75 f6                	jne    c001ceab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001ceb5:	e4 60                	in     al,0x60
c001ceb7:	3c 5a                	cmp    al,0x5a
c001ceb9:	74 fa                	je     c001ceb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cebb:	3c 1c                	cmp    al,0x1c
c001cebd:	74 f6                	je     c001ceb5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001cebf:	eb c2                	jmp    c001ce83 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001cec1:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001cec8:	0f 85 86 00 00 00    	jne    c001cf54 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001cece:	83 ec 0c             	sub    esp,0xc
c001ced1:	68 14 01 00 00       	push   0x114
c001ced6:	e8 dc cd fe ff       	call   c0009cb7 <malloc>
c001cedb:	83 c4 0c             	add    esp,0xc
c001cede:	89 c3                	mov    ebx,eax
c001cee0:	ff 35 f0 97 02 c0    	push   DWORD PTR ds:0xc00297f0
c001cee6:	68 43 4f 02 c0       	push   0xc0024f43
c001ceeb:	50                   	push   eax
c001ceec:	e8 3f 06 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001cef1:	5a                   	pop    edx
c001cef2:	59                   	pop    ecx
c001cef3:	6a 01                	push   0x1
c001cef5:	53                   	push   ebx
c001cef6:	e8 0f 07 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001cefb:	83 c4 0c             	add    esp,0xc
c001cefe:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001cf02:	50                   	push   eax
c001cf03:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cf07:	50                   	push   eax
c001cf08:	53                   	push   ebx
c001cf09:	e8 a8 09 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001cf0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf12:	40                   	inc    eax
c001cf13:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf16:	e8 9c cd fe ff       	call   c0009cb7 <malloc>
c001cf1b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf1f:	a3 e8 a1 02 c0       	mov    ds:0xc002a1e8,eax
c001cf24:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cf28:	5e                   	pop    esi
c001cf29:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cf2b:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001cf2f:	51                   	push   ecx
c001cf30:	50                   	push   eax
c001cf31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cf35:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001cf39:	53                   	push   ebx
c001cf3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cf3d:	83 c4 14             	add    esp,0x14
c001cf40:	53                   	push   ebx
c001cf41:	e8 22 07 ff ff       	call   c000d668 <File::close()>
c001cf46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cf4a:	83 c4 10             	add    esp,0x10
c001cf4d:	a3 e4 a1 02 c0       	mov    ds:0xc002a1e4,eax
c001cf52:	eb 36                	jmp    c001cf8a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001cf54:	83 ec 0c             	sub    esp,0xc
c001cf57:	68 5c 4f 02 c0       	push   0xc0024f5c
c001cf5c:	e8 b0 cd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001cf61:	83 c4 10             	add    esp,0x10
c001cf64:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001cf6b:	0f 85 5d ff ff ff    	jne    c001cece <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001cf71:	e4 60                	in     al,0x60
c001cf73:	3c 1c                	cmp    al,0x1c
c001cf75:	74 04                	je     c001cf7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cf77:	3c 5a                	cmp    al,0x5a
c001cf79:	75 f6                	jne    c001cf71 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001cf7b:	e4 60                	in     al,0x60
c001cf7d:	3c 5a                	cmp    al,0x5a
c001cf7f:	74 fa                	je     c001cf7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cf81:	3c 1c                	cmp    al,0x1c
c001cf83:	74 f6                	je     c001cf7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001cf85:	e9 44 ff ff ff       	jmp    c001cece <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001cf8a:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001cf91:	75 0b                	jne    c001cf9e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001cf93:	31 f6                	xor    esi,esi
c001cf95:	31 db                	xor    ebx,ebx
c001cf97:	31 ed                	xor    ebp,ebp
c001cf99:	e9 a3 01 00 00       	jmp    c001d141 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001cf9e:	83 ec 0c             	sub    esp,0xc
c001cfa1:	68 6e 4f 02 c0       	push   0xc0024f6e
c001cfa6:	e8 66 cd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001cfab:	8b 15 c0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c0
c001cfb1:	83 c4 10             	add    esp,0x10
c001cfb4:	f6 c2 80             	test   dl,0x80
c001cfb7:	74 0c                	je     c001cfc5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001cfb9:	0f ba e2 0b          	bt     edx,0xb
c001cfbd:	72 1a                	jb     c001cfd9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001cfbf:	eb d2                	jmp    c001cf93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cfc1:	3c 5a                	cmp    al,0x5a
c001cfc3:	74 0c                	je     c001cfd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cfc5:	e4 60                	in     al,0x60
c001cfc7:	3c 1c                	cmp    al,0x1c
c001cfc9:	75 f6                	jne    c001cfc1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001cfcb:	eb 04                	jmp    c001cfd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cfcd:	3c 1c                	cmp    al,0x1c
c001cfcf:	75 e8                	jne    c001cfb9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001cfd1:	e4 60                	in     al,0x60
c001cfd3:	3c 5a                	cmp    al,0x5a
c001cfd5:	74 fa                	je     c001cfd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001cfd7:	eb f4                	jmp    c001cfcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001cfd9:	83 ec 0c             	sub    esp,0xc
c001cfdc:	68 73 4f 02 c0       	push   0xc0024f73
c001cfe1:	e8 2b cd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001cff0:	75 a1                	jne    c001cf93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001cff2:	e4 60                	in     al,0x60
c001cff4:	3c 5a                	cmp    al,0x5a
c001cff6:	74 04                	je     c001cffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001cff8:	3c 1c                	cmp    al,0x1c
c001cffa:	75 f6                	jne    c001cff2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001cffc:	e4 60                	in     al,0x60
c001cffe:	3c 5a                	cmp    al,0x5a
c001d000:	74 fa                	je     c001cffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d002:	3c 1c                	cmp    al,0x1c
c001d004:	74 f6                	je     c001cffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d006:	eb 8b                	jmp    c001cf93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d008:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d00f:	0f 85 3d 01 00 00    	jne    c001d152 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d015:	a1 e8 a1 02 c0       	mov    eax,ds:0xc002a1e8
c001d01a:	8d 7e 01             	lea    edi,[esi+0x1]
c001d01d:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d020:	d4 40                	aam    0x40
c001d022:	d5 39                	aad    0x39
c001d024:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d02b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d02f:	0f 85 53 01 00 00    	jne    c001d188 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d035:	8b 15 e8 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1e8
c001d03b:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d03e:	d4 40                	aam    0x40
c001d040:	d5 39                	aad    0x39
c001d042:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d046:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d04a:	d4 40                	aam    0x40
c001d04c:	d5 39                	aad    0x39
c001d04e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d052:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d056:	d4 40                	aam    0x40
c001d058:	d5 39                	aad    0x39
c001d05a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d05e:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d062:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d066:	3c 56                	cmp    al,0x56
c001d068:	74 49                	je     c001d0b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d06a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d06e:	d4 40                	aam    0x40
c001d070:	d5 39                	aad    0x39
c001d072:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d075:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d079:	0f b6 c9             	movzx  ecx,cl
c001d07c:	c1 e1 04             	shl    ecx,0x4
c001d07f:	d4 40                	aam    0x40
c001d081:	d5 39                	aad    0x39
c001d083:	83 e8 30             	sub    eax,0x30
c001d086:	0f b6 c0             	movzx  eax,al
c001d089:	09 c1                	or     ecx,eax
c001d08b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d08f:	c1 e1 04             	shl    ecx,0x4
c001d092:	d4 40                	aam    0x40
c001d094:	d5 39                	aad    0x39
c001d096:	83 e8 30             	sub    eax,0x30
c001d099:	0f b6 c0             	movzx  eax,al
c001d09c:	09 c1                	or     ecx,eax
c001d09e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d0a2:	c1 e1 04             	shl    ecx,0x4
c001d0a5:	d4 40                	aam    0x40
c001d0a7:	d5 39                	aad    0x39
c001d0a9:	83 e8 30             	sub    eax,0x30
c001d0ac:	0f b6 c0             	movzx  eax,al
c001d0af:	09 c8                	or     eax,ecx
c001d0b1:	89 c5                	mov    ebp,eax
c001d0b3:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d0b7:	80 f9 44             	cmp    cl,0x44
c001d0ba:	74 47                	je     c001d103 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d0bc:	88 c8                	mov    al,cl
c001d0be:	d4 40                	aam    0x40
c001d0c0:	d5 39                	aad    0x39
c001d0c2:	83 e8 30             	sub    eax,0x30
c001d0c5:	0f b6 f8             	movzx  edi,al
c001d0c8:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d0cc:	c1 e7 04             	shl    edi,0x4
c001d0cf:	d4 40                	aam    0x40
c001d0d1:	d5 39                	aad    0x39
c001d0d3:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0d6:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d0da:	0f b6 db             	movzx  ebx,bl
c001d0dd:	09 fb                	or     ebx,edi
c001d0df:	c1 e3 04             	shl    ebx,0x4
c001d0e2:	d4 40                	aam    0x40
c001d0e4:	d5 39                	aad    0x39
c001d0e6:	83 e8 30             	sub    eax,0x30
c001d0e9:	0f b6 f8             	movzx  edi,al
c001d0ec:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d0f0:	09 fb                	or     ebx,edi
c001d0f2:	89 df                	mov    edi,ebx
c001d0f4:	c1 e7 04             	shl    edi,0x4
c001d0f7:	d4 40                	aam    0x40
c001d0f9:	d5 39                	aad    0x39
c001d0fb:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d0fe:	0f b6 db             	movzx  ebx,bl
c001d101:	09 fb                	or     ebx,edi
c001d103:	a1 e4 a1 02 c0       	mov    eax,ds:0xc002a1e4
c001d108:	83 c6 10             	add    esi,0x10
c001d10b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d10f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d113:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d116:	3c 0a                	cmp    al,0xa
c001d118:	0f 85 a0 00 00 00    	jne    c001d1be <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d11e:	3c 0a                	cmp    al,0xa
c001d120:	0f 94 c0             	sete   al
c001d123:	0f b6 c0             	movzx  eax,al
c001d126:	01 c6                	add    esi,eax
c001d128:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d12d:	0f 84 a2 00 00 00    	je     c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d133:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d13b:	0f 84 94 00 00 00    	je     c001d1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d141:	39 35 e4 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1e4,esi
c001d147:	0f 8f bb fe ff ff    	jg     c001d008 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d14d:	e9 e8 00 00 00       	jmp    c001d23a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d152:	83 ec 0c             	sub    esp,0xc
c001d155:	68 7a 4f 02 c0       	push   0xc0024f7a
c001d15a:	e8 b2 cb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d15f:	83 c4 10             	add    esp,0x10
c001d162:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d169:	0f 85 a6 fe ff ff    	jne    c001d015 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d16f:	e4 60                	in     al,0x60
c001d171:	3c 5a                	cmp    al,0x5a
c001d173:	74 04                	je     c001d179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d175:	3c 1c                	cmp    al,0x1c
c001d177:	75 f6                	jne    c001d16f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d179:	e4 60                	in     al,0x60
c001d17b:	3c 5a                	cmp    al,0x5a
c001d17d:	74 fa                	je     c001d179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d17f:	3c 1c                	cmp    al,0x1c
c001d181:	74 f6                	je     c001d179 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d183:	e9 8d fe ff ff       	jmp    c001d015 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d188:	83 ec 0c             	sub    esp,0xc
c001d18b:	68 82 4f 02 c0       	push   0xc0024f82
c001d190:	e8 7c cb fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d195:	83 c4 10             	add    esp,0x10
c001d198:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d19f:	0f 85 90 fe ff ff    	jne    c001d035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d1a5:	e4 60                	in     al,0x60
c001d1a7:	3c 5a                	cmp    al,0x5a
c001d1a9:	74 04                	je     c001d1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d1ab:	3c 1c                	cmp    al,0x1c
c001d1ad:	75 f6                	jne    c001d1a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d1af:	e4 60                	in     al,0x60
c001d1b1:	3c 5a                	cmp    al,0x5a
c001d1b3:	74 fa                	je     c001d1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d1b5:	3c 1c                	cmp    al,0x1c
c001d1b7:	74 f6                	je     c001d1af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d1b9:	e9 77 fe ff ff       	jmp    c001d035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d1be:	47                   	inc    edi
c001d1bf:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d1c3:	0f 84 55 ff ff ff    	je     c001d11e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d1c9:	46                   	inc    esi
c001d1ca:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d1cd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d1d0:	e9 3e ff ff ff       	jmp    c001d113 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d1d5:	80 f9 44             	cmp    cl,0x44
c001d1d8:	74 0e                	je     c001d1e8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d1da:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d1e2:	0f 85 59 ff ff ff    	jne    c001d141 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d1e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d1ec:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d1f0:	c1 e0 04             	shl    eax,0x4
c001d1f3:	83 ea 30             	sub    edx,0x30
c001d1f6:	09 d0                	or     eax,edx
c001d1f8:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d1ff:	0f 85 3c ff ff ff    	jne    c001d141 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d205:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d209:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d20d:	c1 e2 04             	shl    edx,0x4
c001d210:	83 e8 30             	sub    eax,0x30
c001d213:	09 d0                	or     eax,edx
c001d215:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d21c:	0f 85 1f ff ff ff    	jne    c001d141 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d222:	50                   	push   eax
c001d223:	50                   	push   eax
c001d224:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d228:	50                   	push   eax
c001d229:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d230:	e8 03 35 fe ff       	call   c0000738 <strcpy>
c001d235:	83 c4 10             	add    esp,0x10
c001d238:	eb 15                	jmp    c001d24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d23a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d241:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d24c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d24f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d256:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d25c:	5b                   	pop    ebx
c001d25d:	5e                   	pop    esi
c001d25e:	5f                   	pop    edi
c001d25f:	5d                   	pop    ebp
c001d260:	c3                   	ret    
c001d261:	90                   	nop

c001d262 <PCI::checkBus(unsigned char)>:
c001d262:	56                   	push   esi
c001d263:	53                   	push   ebx
c001d264:	31 db                	xor    ebx,ebx
c001d266:	51                   	push   ecx
c001d267:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d26c:	52                   	push   edx
c001d26d:	53                   	push   ebx
c001d26e:	43                   	inc    ebx
c001d26f:	56                   	push   esi
c001d270:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d274:	e8 bf 07 00 00       	call   c001da38 <PCI::checkDevice(unsigned char, unsigned char)>
c001d279:	83 c4 10             	add    esp,0x10
c001d27c:	83 fb 20             	cmp    ebx,0x20
c001d27f:	75 eb                	jne    c001d26c <PCI::checkBus(unsigned char)+0xa>
c001d281:	58                   	pop    eax
c001d282:	5b                   	pop    ebx
c001d283:	5e                   	pop    esi
c001d284:	c3                   	ret    
c001d285:	90                   	nop

c001d286 <PCI::foundDevice(PCIDeviceInfo)>:
c001d286:	55                   	push   ebp
c001d287:	57                   	push   edi
c001d288:	56                   	push   esi
c001d289:	53                   	push   ebx
c001d28a:	83 ec 1c             	sub    esp,0x1c
c001d28d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d291:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d297:	0f 84 20 04 00 00    	je     c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d29d:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d2a4:	75 37                	jne    c001d2dd <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001d2a6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d2aa:	66 81 f9 06 04       	cmp    cx,0x406
c001d2af:	75 5b                	jne    c001d30c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001d2b1:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d2b6:	50                   	push   eax
c001d2b7:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d2bc:	50                   	push   eax
c001d2bd:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d2c2:	50                   	push   eax
c001d2c3:	53                   	push   ebx
c001d2c4:	e8 33 fa ff ff       	call   c001ccfc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d2c9:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001d2cd:	0f b6 c0             	movzx  eax,al
c001d2d0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2d4:	83 c4 2c             	add    esp,0x2c
c001d2d7:	5b                   	pop    ebx
c001d2d8:	5e                   	pop    esi
c001d2d9:	5f                   	pop    edi
c001d2da:	5d                   	pop    ebp
c001d2db:	eb 85                	jmp    c001d262 <PCI::checkBus(unsigned char)>
c001d2dd:	83 ec 0c             	sub    esp,0xc
c001d2e0:	68 8b 4f 02 c0       	push   0xc0024f8b
c001d2e5:	e8 27 ca fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d2ea:	83 c4 10             	add    esp,0x10
c001d2ed:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d2f4:	75 b0                	jne    c001d2a6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d2f6:	e4 60                	in     al,0x60
c001d2f8:	3c 5a                	cmp    al,0x5a
c001d2fa:	74 04                	je     c001d300 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d2fc:	3c 1c                	cmp    al,0x1c
c001d2fe:	75 f6                	jne    c001d2f6 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001d300:	e4 60                	in     al,0x60
c001d302:	3c 5a                	cmp    al,0x5a
c001d304:	74 fa                	je     c001d300 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d306:	3c 1c                	cmp    al,0x1c
c001d308:	74 f6                	je     c001d300 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001d30a:	eb 9a                	jmp    c001d2a6 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001d30c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001d312:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d316:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d31a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d31e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d322:	88 d0                	mov    al,dl
c001d324:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d329:	74 3b                	je     c001d366 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001d32b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d32f:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001d332:	85 d2                	test   edx,edx
c001d334:	74 24                	je     c001d35a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d336:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d33c:	31 ef                	xor    edi,ebp
c001d33e:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d344:	75 14                	jne    c001d35a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d346:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001d34c:	75 0c                	jne    c001d35a <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001d34e:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001d354:	0f 84 63 03 00 00    	je     c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d35a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d35e:	8b 12                	mov    edx,DWORD PTR [edx]
c001d360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d364:	eb be                	jmp    c001d324 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001d366:	66 81 f9 01 06       	cmp    cx,0x601
c001d36b:	0f 85 81 01 00 00    	jne    c001d4f2 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001d371:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d378:	75 25                	jne    c001d39f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	68 64 01 00 00       	push   0x164
c001d382:	e8 30 c9 fe ff       	call   c0009cb7 <malloc>
c001d387:	89 04 24             	mov    DWORD PTR [esp],eax
c001d38a:	89 c5                	mov    ebp,eax
c001d38c:	e8 d3 12 00 00       	call   c001e664 <SATABus::SATABus()>
c001d391:	83 c4 10             	add    esp,0x10
c001d394:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d39b:	74 4a                	je     c001d3e7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d39d:	eb 2f                	jmp    c001d3ce <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001d39f:	83 ec 0c             	sub    esp,0xc
c001d3a2:	68 9b 4f 02 c0       	push   0xc0024f9b
c001d3a7:	e8 65 c9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d3b6:	75 c2                	jne    c001d37a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d3b8:	e4 60                	in     al,0x60
c001d3ba:	3c 1c                	cmp    al,0x1c
c001d3bc:	74 04                	je     c001d3c2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d3be:	3c 5a                	cmp    al,0x5a
c001d3c0:	75 f6                	jne    c001d3b8 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001d3c2:	e4 60                	in     al,0x60
c001d3c4:	3c 5a                	cmp    al,0x5a
c001d3c6:	74 fa                	je     c001d3c2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d3c8:	3c 1c                	cmp    al,0x1c
c001d3ca:	74 f6                	je     c001d3c2 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001d3cc:	eb ac                	jmp    c001d37a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001d3ce:	83 ec 0c             	sub    esp,0xc
c001d3d1:	68 a1 4f 02 c0       	push   0xc0024fa1
c001d3d6:	e8 36 c9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d3db:	83 c4 10             	add    esp,0x10
c001d3de:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d3e5:	74 1b                	je     c001d402 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001d3e7:	50                   	push   eax
c001d3e8:	50                   	push   eax
c001d3e9:	55                   	push   ebp
c001d3ea:	53                   	push   ebx
c001d3eb:	e8 52 10 ff ff       	call   c000e442 <Device::addChild(Device*)>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d3fa:	74 33                	je     c001d42f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d3fc:	eb 18                	jmp    c001d416 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001d3fe:	3c 1c                	cmp    al,0x1c
c001d400:	74 0c                	je     c001d40e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d402:	e4 60                	in     al,0x60
c001d404:	3c 5a                	cmp    al,0x5a
c001d406:	75 f6                	jne    c001d3fe <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001d408:	eb 04                	jmp    c001d40e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d40a:	3c 1c                	cmp    al,0x1c
c001d40c:	75 d9                	jne    c001d3e7 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001d40e:	e4 60                	in     al,0x60
c001d410:	3c 5a                	cmp    al,0x5a
c001d412:	74 fa                	je     c001d40e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001d414:	eb f4                	jmp    c001d40a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001d416:	83 ec 0c             	sub    esp,0xc
c001d419:	68 a9 4f 02 c0       	push   0xc0024fa9
c001d41e:	e8 ee c8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d423:	83 c4 10             	add    esp,0x10
c001d426:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d42d:	74 29                	je     c001d458 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001d42f:	83 ec 2c             	sub    esp,0x2c
c001d432:	b9 09 00 00 00       	mov    ecx,0x9
c001d437:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d43b:	fc                   	cld    
c001d43c:	89 e7                	mov    edi,esp
c001d43e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d440:	55                   	push   ebp
c001d441:	e8 42 0f ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001d446:	83 c4 30             	add    esp,0x30
c001d449:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d450:	74 33                	je     c001d485 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d452:	eb 18                	jmp    c001d46c <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001d454:	3c 1c                	cmp    al,0x1c
c001d456:	74 0c                	je     c001d464 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d458:	e4 60                	in     al,0x60
c001d45a:	3c 5a                	cmp    al,0x5a
c001d45c:	75 f6                	jne    c001d454 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001d45e:	eb 04                	jmp    c001d464 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d460:	3c 1c                	cmp    al,0x1c
c001d462:	75 cb                	jne    c001d42f <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001d464:	e4 60                	in     al,0x60
c001d466:	3c 5a                	cmp    al,0x5a
c001d468:	74 fa                	je     c001d464 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001d46a:	eb f4                	jmp    c001d460 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001d46c:	83 ec 0c             	sub    esp,0xc
c001d46f:	68 b1 4f 02 c0       	push   0xc0024fb1
c001d474:	e8 98 c8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d479:	83 c4 10             	add    esp,0x10
c001d47c:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d483:	74 23                	je     c001d4a8 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001d485:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d488:	6a 00                	push   0x0
c001d48a:	6a 00                	push   0x0
c001d48c:	6a 00                	push   0x0
c001d48e:	55                   	push   ebp
c001d48f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d492:	83 c4 10             	add    esp,0x10
c001d495:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d49c:	0f 84 1b 02 00 00    	je     c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d4a2:	eb 18                	jmp    c001d4bc <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001d4a4:	3c 1c                	cmp    al,0x1c
c001d4a6:	74 0c                	je     c001d4b4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d4a8:	e4 60                	in     al,0x60
c001d4aa:	3c 5a                	cmp    al,0x5a
c001d4ac:	75 f6                	jne    c001d4a4 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001d4ae:	eb 04                	jmp    c001d4b4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d4b0:	3c 1c                	cmp    al,0x1c
c001d4b2:	75 d1                	jne    c001d485 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001d4b4:	e4 60                	in     al,0x60
c001d4b6:	3c 5a                	cmp    al,0x5a
c001d4b8:	74 fa                	je     c001d4b4 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001d4ba:	eb f4                	jmp    c001d4b0 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	68 b9 4f 02 c0       	push   0xc0024fb9
c001d4c4:	e8 48 c8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d4c9:	83 c4 10             	add    esp,0x10
c001d4cc:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d4d3:	0f 85 e4 01 00 00    	jne    c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d4d9:	e4 60                	in     al,0x60
c001d4db:	3c 5a                	cmp    al,0x5a
c001d4dd:	74 04                	je     c001d4e3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d4df:	3c 1c                	cmp    al,0x1c
c001d4e1:	75 f6                	jne    c001d4d9 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001d4e3:	e4 60                	in     al,0x60
c001d4e5:	3c 5a                	cmp    al,0x5a
c001d4e7:	74 fa                	je     c001d4e3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d4e9:	3c 1c                	cmp    al,0x1c
c001d4eb:	74 f6                	je     c001d4e3 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001d4ed:	e9 cb 01 00 00       	jmp    c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d4f2:	66 81 f9 01 01       	cmp    cx,0x101
c001d4f7:	0f 85 7a 01 00 00    	jne    c001d677 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001d4fd:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d504:	75 25                	jne    c001d52b <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001d506:	83 ec 0c             	sub    esp,0xc
c001d509:	68 70 02 00 00       	push   0x270
c001d50e:	e8 a4 c7 fe ff       	call   c0009cb7 <malloc>
c001d513:	89 04 24             	mov    DWORD PTR [esp],eax
c001d516:	89 c5                	mov    ebp,eax
c001d518:	e8 df 05 00 00       	call   c001dafc <IDE::IDE()>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d527:	74 4a                	je     c001d573 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d529:	eb 2f                	jmp    c001d55a <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001d52b:	83 ec 0c             	sub    esp,0xc
c001d52e:	68 c1 4f 02 c0       	push   0xc0024fc1
c001d533:	e8 d9 c7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d538:	83 c4 10             	add    esp,0x10
c001d53b:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d542:	75 c2                	jne    c001d506 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d544:	e4 60                	in     al,0x60
c001d546:	3c 5a                	cmp    al,0x5a
c001d548:	74 04                	je     c001d54e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d54a:	3c 1c                	cmp    al,0x1c
c001d54c:	75 f6                	jne    c001d544 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001d54e:	e4 60                	in     al,0x60
c001d550:	3c 5a                	cmp    al,0x5a
c001d552:	74 fa                	je     c001d54e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d554:	3c 1c                	cmp    al,0x1c
c001d556:	74 f6                	je     c001d54e <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001d558:	eb ac                	jmp    c001d506 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	68 c8 4f 02 c0       	push   0xc0024fc8
c001d562:	e8 aa c7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d567:	83 c4 10             	add    esp,0x10
c001d56a:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d571:	74 1b                	je     c001d58e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001d573:	57                   	push   edi
c001d574:	57                   	push   edi
c001d575:	55                   	push   ebp
c001d576:	53                   	push   ebx
c001d577:	e8 c6 0e ff ff       	call   c000e442 <Device::addChild(Device*)>
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d586:	74 33                	je     c001d5bb <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d588:	eb 18                	jmp    c001d5a2 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001d58a:	3c 1c                	cmp    al,0x1c
c001d58c:	74 0c                	je     c001d59a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d58e:	e4 60                	in     al,0x60
c001d590:	3c 5a                	cmp    al,0x5a
c001d592:	75 f6                	jne    c001d58a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001d594:	eb 04                	jmp    c001d59a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d596:	3c 1c                	cmp    al,0x1c
c001d598:	75 d9                	jne    c001d573 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001d59a:	e4 60                	in     al,0x60
c001d59c:	3c 5a                	cmp    al,0x5a
c001d59e:	74 fa                	je     c001d59a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001d5a0:	eb f4                	jmp    c001d596 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001d5a2:	83 ec 0c             	sub    esp,0xc
c001d5a5:	68 cf 4f 02 c0       	push   0xc0024fcf
c001d5aa:	e8 62 c7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d5af:	83 c4 10             	add    esp,0x10
c001d5b2:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d5b9:	74 29                	je     c001d5e4 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001d5bb:	83 ec 2c             	sub    esp,0x2c
c001d5be:	b9 09 00 00 00       	mov    ecx,0x9
c001d5c3:	8d 74 24 60          	lea    esi,[esp+0x60]
c001d5c7:	fc                   	cld    
c001d5c8:	89 e7                	mov    edi,esp
c001d5ca:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5cc:	55                   	push   ebp
c001d5cd:	e8 b6 0d ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001d5d2:	83 c4 30             	add    esp,0x30
c001d5d5:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d5dc:	74 33                	je     c001d611 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d5de:	eb 18                	jmp    c001d5f8 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001d5e0:	3c 1c                	cmp    al,0x1c
c001d5e2:	74 0c                	je     c001d5f0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d5e4:	e4 60                	in     al,0x60
c001d5e6:	3c 5a                	cmp    al,0x5a
c001d5e8:	75 f6                	jne    c001d5e0 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001d5ea:	eb 04                	jmp    c001d5f0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d5ec:	3c 1c                	cmp    al,0x1c
c001d5ee:	75 cb                	jne    c001d5bb <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001d5f0:	e4 60                	in     al,0x60
c001d5f2:	3c 5a                	cmp    al,0x5a
c001d5f4:	74 fa                	je     c001d5f0 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001d5f6:	eb f4                	jmp    c001d5ec <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001d5f8:	83 ec 0c             	sub    esp,0xc
c001d5fb:	68 d6 4f 02 c0       	push   0xc0024fd6
c001d600:	e8 0c c7 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d605:	83 c4 10             	add    esp,0x10
c001d608:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d60f:	74 23                	je     c001d634 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001d611:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d614:	6a 00                	push   0x0
c001d616:	6a 00                	push   0x0
c001d618:	6a 00                	push   0x0
c001d61a:	55                   	push   ebp
c001d61b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d628:	0f 84 8f 00 00 00    	je     c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d62e:	eb 18                	jmp    c001d648 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001d630:	3c 1c                	cmp    al,0x1c
c001d632:	74 0c                	je     c001d640 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d634:	e4 60                	in     al,0x60
c001d636:	3c 5a                	cmp    al,0x5a
c001d638:	75 f6                	jne    c001d630 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001d63a:	eb 04                	jmp    c001d640 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d63c:	3c 1c                	cmp    al,0x1c
c001d63e:	75 d1                	jne    c001d611 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001d640:	e4 60                	in     al,0x60
c001d642:	3c 5a                	cmp    al,0x5a
c001d644:	74 fa                	je     c001d640 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001d646:	eb f4                	jmp    c001d63c <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001d648:	83 ec 0c             	sub    esp,0xc
c001d64b:	68 dd 4f 02 c0       	push   0xc0024fdd
c001d650:	e8 bc c6 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d65f:	75 5c                	jne    c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d661:	e4 60                	in     al,0x60
c001d663:	3c 5a                	cmp    al,0x5a
c001d665:	74 04                	je     c001d66b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d667:	3c 1c                	cmp    al,0x1c
c001d669:	75 f6                	jne    c001d661 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001d66b:	e4 60                	in     al,0x60
c001d66d:	3c 5a                	cmp    al,0x5a
c001d66f:	74 fa                	je     c001d66b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d671:	3c 1c                	cmp    al,0x1c
c001d673:	74 f6                	je     c001d66b <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001d675:	eb 46                	jmp    c001d6bd <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	68 58 01 00 00       	push   0x158
c001d67f:	e8 33 c6 fe ff       	call   c0009cb7 <malloc>
c001d684:	89 c5                	mov    ebp,eax
c001d686:	58                   	pop    eax
c001d687:	5a                   	pop    edx
c001d688:	68 e4 4f 02 c0       	push   0xc0024fe4
c001d68d:	55                   	push   ebp
c001d68e:	e8 b9 10 ff ff       	call   c000e74c <DriverlessDevice::DriverlessDevice(char const*)>
c001d693:	59                   	pop    ecx
c001d694:	5e                   	pop    esi
c001d695:	55                   	push   ebp
c001d696:	53                   	push   ebx
c001d697:	e8 a6 0d ff ff       	call   c000e442 <Device::addChild(Device*)>
c001d69c:	83 c4 10             	add    esp,0x10
c001d69f:	b9 09 00 00 00       	mov    ecx,0x9
c001d6a4:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001d6a8:	fc                   	cld    
c001d6a9:	89 fe                	mov    esi,edi
c001d6ab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d6ad:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001d6b1:	83 c4 1c             	add    esp,0x1c
c001d6b4:	5b                   	pop    ebx
c001d6b5:	5e                   	pop    esi
c001d6b6:	5f                   	pop    edi
c001d6b7:	5d                   	pop    ebp
c001d6b8:	e9 cb 0c ff ff       	jmp    c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001d6bd:	83 c4 1c             	add    esp,0x1c
c001d6c0:	5b                   	pop    ebx
c001d6c1:	5e                   	pop    esi
c001d6c2:	5f                   	pop    edi
c001d6c3:	5d                   	pop    ebp
c001d6c4:	c3                   	ret    
c001d6c5:	90                   	nop

c001d6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d6c6:	55                   	push   ebp
c001d6c7:	57                   	push   edi
c001d6c8:	56                   	push   esi
c001d6c9:	53                   	push   ebx
c001d6ca:	81 ec b4 00 00 00    	sub    esp,0xb4
c001d6d0:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001d6d7:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001d6de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d6e2:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001d6e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6ed:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001d6f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d6f8:	68 fe 4f 02 c0       	push   0xc0024ffe
c001d6fd:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001d701:	53                   	push   ebx
c001d702:	e8 31 30 fe ff       	call   c0000738 <strcpy>
c001d707:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001d70c:	b2 64                	mov    dl,0x64
c001d70e:	89 c8                	mov    eax,ecx
c001d710:	f6 f2                	div    dl
c001d712:	b2 0a                	mov    dl,0xa
c001d714:	83 c0 30             	add    eax,0x30
c001d717:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001d71b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	89 c8                	mov    eax,ecx
c001d724:	f6 f2                	div    dl
c001d726:	89 c1                	mov    ecx,eax
c001d728:	0f b6 c0             	movzx  eax,al
c001d72b:	88 e9                	mov    cl,ch
c001d72d:	f6 f2                	div    dl
c001d72f:	88 e0                	mov    al,ah
c001d731:	83 c0 30             	add    eax,0x30
c001d734:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d738:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d73c:	8d 41 30             	lea    eax,[ecx+0x30]
c001d73f:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001d743:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001d747:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001d74c:	f6 f2                	div    dl
c001d74e:	89 c1                	mov    ecx,eax
c001d750:	0f b6 c0             	movzx  eax,al
c001d753:	88 e9                	mov    cl,ch
c001d755:	f6 f2                	div    dl
c001d757:	88 e0                	mov    al,ah
c001d759:	83 c0 30             	add    eax,0x30
c001d75c:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001d760:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001d764:	8d 41 30             	lea    eax,[ecx+0x30]
c001d767:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001d76b:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001d76f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001d774:	f6 f2                	div    dl
c001d776:	89 c1                	mov    ecx,eax
c001d778:	0f b6 c0             	movzx  eax,al
c001d77b:	88 e9                	mov    cl,ch
c001d77d:	f6 f2                	div    dl
c001d77f:	88 e0                	mov    al,ah
c001d781:	83 c0 30             	add    eax,0x30
c001d784:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d78b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001d78f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d793:	8d 41 30             	lea    eax,[ecx+0x30]
c001d796:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001d79a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001d79e:	74 29                	je     c001d7c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d7a0:	83 ec 0c             	sub    esp,0xc
c001d7a3:	53                   	push   ebx
c001d7a4:	e8 68 c5 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d7a9:	83 c4 10             	add    esp,0x10
c001d7ac:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d7b3:	75 14                	jne    c001d7c9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001d7b5:	e4 60                	in     al,0x60
c001d7b7:	3c 1c                	cmp    al,0x1c
c001d7b9:	74 04                	je     c001d7bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d7bb:	3c 5a                	cmp    al,0x5a
c001d7bd:	75 f6                	jne    c001d7b5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001d7bf:	e4 60                	in     al,0x60
c001d7c1:	3c 5a                	cmp    al,0x5a
c001d7c3:	74 fa                	je     c001d7bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d7c5:	3c 1c                	cmp    al,0x1c
c001d7c7:	74 f6                	je     c001d7bf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001d7c9:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001d7ce:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001d7d3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d7d8:	83 ec 0c             	sub    esp,0xc
c001d7db:	6a 0c                	push   0xc
c001d7dd:	56                   	push   esi
c001d7de:	53                   	push   ebx
c001d7df:	57                   	push   edi
c001d7e0:	55                   	push   ebp
c001d7e1:	e8 68 f3 ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7e6:	83 c4 20             	add    esp,0x20
c001d7e9:	56                   	push   esi
c001d7ea:	53                   	push   ebx
c001d7eb:	57                   	push   edi
c001d7ec:	55                   	push   ebp
c001d7ed:	e8 50 f4 ff ff       	call   c001cc42 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d7f2:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001d7f7:	56                   	push   esi
c001d7f8:	53                   	push   ebx
c001d7f9:	57                   	push   edi
c001d7fa:	55                   	push   ebp
c001d7fb:	e8 d8 f4 ff ff       	call   c001ccd8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d800:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001d804:	83 c4 14             	add    esp,0x14
c001d807:	6a 3c                	push   0x3c
c001d809:	56                   	push   esi
c001d80a:	53                   	push   ebx
c001d80b:	57                   	push   edi
c001d80c:	55                   	push   ebp
c001d80d:	e8 3c f3 ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d812:	0f b6 c4             	movzx  eax,ah
c001d815:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d819:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d81d:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001d824:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001d829:	83 c4 20             	add    esp,0x20
c001d82c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d832:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d839:	0f 84 38 01 00 00    	je     c001d977 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d83f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d847:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001d84c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d850:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d856:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001d85c:	0f 8e 15 01 00 00    	jle    c001d977 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001d862:	50                   	push   eax
c001d863:	50                   	push   eax
c001d864:	68 19 50 02 c0       	push   0xc0025019
c001d869:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d86d:	50                   	push   eax
c001d86e:	e8 c5 2e fe ff       	call   c0000738 <strcpy>
c001d873:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001d877:	b9 0a 00 00 00       	mov    ecx,0xa
c001d87c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d880:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d884:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d888:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001d88c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001d890:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001d894:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001d898:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001d89c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001d8a0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d8a4:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001d8a8:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001d8ac:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001d8b0:	83 c4 10             	add    esp,0x10
c001d8b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8b7:	99                   	cdq    
c001d8b8:	f7 f9                	idiv   ecx
c001d8ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001d8be:	99                   	cdq    
c001d8bf:	f7 f9                	idiv   ecx
c001d8c1:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d8c5:	83 c2 30             	add    edx,0x30
c001d8c8:	83 c0 30             	add    eax,0x30
c001d8cb:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001d8cf:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001d8d3:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001d8da:	74 2d                	je     c001d909 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d8dc:	83 ec 0c             	sub    esp,0xc
c001d8df:	8d 44 24 68          	lea    eax,[esp+0x68]
c001d8e3:	50                   	push   eax
c001d8e4:	e8 28 c4 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d8e9:	83 c4 10             	add    esp,0x10
c001d8ec:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001d8f3:	75 14                	jne    c001d909 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001d8f5:	e4 60                	in     al,0x60
c001d8f7:	3c 5a                	cmp    al,0x5a
c001d8f9:	74 04                	je     c001d8ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d8fb:	3c 1c                	cmp    al,0x1c
c001d8fd:	75 f6                	jne    c001d8f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001d8ff:	e4 60                	in     al,0x60
c001d901:	3c 5a                	cmp    al,0x5a
c001d903:	74 fa                	je     c001d8ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d905:	3c 1c                	cmp    al,0x1c
c001d907:	74 f6                	je     c001d8ff <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001d909:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d90d:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001d912:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d918:	8d 04 d0             	lea    eax,[eax+edx*8]
c001d91b:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001d922:	39 d3                	cmp    ebx,edx
c001d924:	75 48                	jne    c001d96e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d926:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001d92d:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001d931:	75 3b                	jne    c001d96e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001d933:	83 ec 0c             	sub    esp,0xc
c001d936:	68 48 50 02 c0       	push   0xc0025048
c001d93b:	e8 85 f6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d940:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d944:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c001d949:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d94f:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001d957:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001d95b:	50                   	push   eax
c001d95c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d960:	53                   	push   ebx
c001d961:	68 6d 50 02 c0       	push   0xc002506d
c001d966:	e8 5a f6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d96b:	83 c4 20             	add    esp,0x20
c001d96e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d972:	e9 d0 fe ff ff       	jmp    c001d847 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001d977:	31 d2                	xor    edx,edx
c001d979:	83 ec 0c             	sub    esp,0xc
c001d97c:	56                   	push   esi
c001d97d:	53                   	push   ebx
c001d97e:	57                   	push   edi
c001d97f:	52                   	push   edx
c001d980:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d984:	55                   	push   ebp
c001d985:	e8 9a f3 ff ff       	call   c001cd24 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d98a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d98e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001d995:	42                   	inc    edx
c001d996:	83 c4 20             	add    esp,0x20
c001d999:	83 fa 06             	cmp    edx,0x6
c001d99c:	75 db                	jne    c001d979 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001d99e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001d9a3:	83 ec 0c             	sub    esp,0xc
c001d9a6:	86 e0                	xchg   al,ah
c001d9a8:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001d9b0:	6a 02                	push   0x2
c001d9b2:	56                   	push   esi
c001d9b3:	53                   	push   ebx
c001d9b4:	57                   	push   edi
c001d9b5:	55                   	push   ebp
c001d9b6:	e8 93 f1 ff ff       	call   c001cb4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9bb:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001d9c3:	83 c4 20             	add    esp,0x20
c001d9c6:	56                   	push   esi
c001d9c7:	53                   	push   ebx
c001d9c8:	57                   	push   edi
c001d9c9:	55                   	push   ebp
c001d9ca:	e8 bd f2 ff ff       	call   c001cc8c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d9cf:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001d9d6:	56                   	push   esi
c001d9d7:	53                   	push   ebx
c001d9d8:	57                   	push   edi
c001d9d9:	55                   	push   ebp
c001d9da:	e8 17 f2 ff ff       	call   c001cbf6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d9df:	b9 09 00 00 00       	mov    ecx,0x9
c001d9e4:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001d9ec:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001d9f0:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001d9f7:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d9fb:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001da02:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001da06:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001da0d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001da11:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001da18:	83 ec 0c             	sub    esp,0xc
c001da1b:	fc                   	cld    
c001da1c:	89 e7                	mov    edi,esp
c001da1e:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001da25:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001da27:	55                   	push   ebp
c001da28:	e8 59 f8 ff ff       	call   c001d286 <PCI::foundDevice(PCIDeviceInfo)>
c001da2d:	81 c4 dc 00 00 00    	add    esp,0xdc
c001da33:	5b                   	pop    ebx
c001da34:	5e                   	pop    esi
c001da35:	5f                   	pop    edi
c001da36:	5d                   	pop    ebp
c001da37:	c3                   	ret    

c001da38 <PCI::checkDevice(unsigned char, unsigned char)>:
c001da38:	55                   	push   ebp
c001da39:	57                   	push   edi
c001da3a:	56                   	push   esi
c001da3b:	53                   	push   ebx
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001da43:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001da48:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001da4d:	6a 00                	push   0x0
c001da4f:	56                   	push   esi
c001da50:	57                   	push   edi
c001da51:	55                   	push   ebp
c001da52:	e8 9f f1 ff ff       	call   c001cbf6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da57:	6a 00                	push   0x0
c001da59:	56                   	push   esi
c001da5a:	57                   	push   edi
c001da5b:	55                   	push   ebp
c001da5c:	e8 65 fc ff ff       	call   c001d6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001da61:	83 c4 20             	add    esp,0x20
c001da64:	6a 00                	push   0x0
c001da66:	56                   	push   esi
c001da67:	57                   	push   edi
c001da68:	55                   	push   ebp
c001da69:	e8 ac f1 ff ff       	call   c001cc1a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001da6e:	83 c4 10             	add    esp,0x10
c001da71:	84 c0                	test   al,al
c001da73:	79 27                	jns    c001da9c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001da75:	bb 01 00 00 00       	mov    ebx,0x1
c001da7a:	53                   	push   ebx
c001da7b:	56                   	push   esi
c001da7c:	57                   	push   edi
c001da7d:	55                   	push   ebp
c001da7e:	e8 73 f1 ff ff       	call   c001cbf6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001da83:	83 c4 10             	add    esp,0x10
c001da86:	66 40                	inc    ax
c001da88:	74 0c                	je     c001da96 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001da8a:	53                   	push   ebx
c001da8b:	56                   	push   esi
c001da8c:	57                   	push   edi
c001da8d:	55                   	push   ebp
c001da8e:	e8 33 fc ff ff       	call   c001d6c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001da93:	83 c4 10             	add    esp,0x10
c001da96:	43                   	inc    ebx
c001da97:	83 fb 08             	cmp    ebx,0x8
c001da9a:	75 de                	jne    c001da7a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001da9c:	83 c4 0c             	add    esp,0xc
c001da9f:	5b                   	pop    ebx
c001daa0:	5e                   	pop    esi
c001daa1:	5f                   	pop    edi
c001daa2:	5d                   	pop    ebp
c001daa3:	c3                   	ret    

c001daa4 <PCI::detect()>:
c001daa4:	56                   	push   esi
c001daa5:	53                   	push   ebx
c001daa6:	53                   	push   ebx
c001daa7:	31 db                	xor    ebx,ebx
c001daa9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001daad:	6a 00                	push   0x0
c001daaf:	6a 00                	push   0x0
c001dab1:	6a 00                	push   0x0
c001dab3:	56                   	push   esi
c001dab4:	e8 61 f1 ff ff       	call   c001cc1a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dab9:	83 c4 10             	add    esp,0x10
c001dabc:	a8 80                	test   al,0x80
c001dabe:	75 21                	jne    c001dae1 <PCI::detect()+0x3d>
c001dac0:	51                   	push   ecx
c001dac1:	51                   	push   ecx
c001dac2:	6a 00                	push   0x0
c001dac4:	56                   	push   esi
c001dac5:	e8 98 f7 ff ff       	call   c001d262 <PCI::checkBus(unsigned char)>
c001daca:	83 c4 10             	add    esp,0x10
c001dacd:	eb 24                	jmp    c001daf3 <PCI::detect()+0x4f>
c001dacf:	52                   	push   edx
c001dad0:	52                   	push   edx
c001dad1:	53                   	push   ebx
c001dad2:	43                   	inc    ebx
c001dad3:	56                   	push   esi
c001dad4:	e8 89 f7 ff ff       	call   c001d262 <PCI::checkBus(unsigned char)>
c001dad9:	83 c4 10             	add    esp,0x10
c001dadc:	83 fb 08             	cmp    ebx,0x8
c001dadf:	74 12                	je     c001daf3 <PCI::detect()+0x4f>
c001dae1:	53                   	push   ebx
c001dae2:	6a 00                	push   0x0
c001dae4:	6a 00                	push   0x0
c001dae6:	56                   	push   esi
c001dae7:	e8 0a f1 ff ff       	call   c001cbf6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001daec:	83 c4 10             	add    esp,0x10
c001daef:	66 40                	inc    ax
c001daf1:	74 dc                	je     c001dacf <PCI::detect()+0x2b>
c001daf3:	58                   	pop    eax
c001daf4:	5b                   	pop    ebx
c001daf5:	5e                   	pop    esi
c001daf6:	c3                   	ret    
c001daf7:	90                   	nop

c001daf8 <IDE::close(int, int, void*)>:
c001daf8:	83 c8 ff             	or     eax,0xffffffff
c001dafb:	c3                   	ret    

c001dafc <IDE::IDE()>:
c001dafc:	83 ec 0c             	sub    esp,0xc
c001daff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db03:	83 ec 08             	sub    esp,0x8
c001db06:	68 b4 50 02 c0       	push   0xc00250b4
c001db0b:	50                   	push   eax
c001db0c:	e8 df 0c ff ff       	call   c000e7f0 <HardDiskController::HardDiskController(char const*)>
c001db11:	83 c4 10             	add    esp,0x10
c001db14:	ba 60 51 02 c0       	mov    edx,0xc0025160
c001db19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1d:	89 10                	mov    DWORD PTR [eax],edx
c001db1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db23:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001db2a:	90                   	nop
c001db2b:	83 c4 0c             	add    esp,0xc
c001db2e:	c3                   	ret    
c001db2f:	90                   	nop

c001db30 <IDE::prepareInterrupt(unsigned char)>:
c001db30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001db35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db39:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001db41:	c3                   	ret    

c001db42 <selectDrive(unsigned char, unsigned char)>:
c001db42:	c3                   	ret    
c001db43:	90                   	nop

c001db44 <IDE::getBase(unsigned char)>:
c001db44:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001db49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db4d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001db55:	c3                   	ret    

c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001db56:	55                   	push   ebp
c001db57:	57                   	push   edi
c001db58:	56                   	push   esi
c001db59:	53                   	push   ebx
c001db5a:	83 ec 1c             	sub    esp,0x1c
c001db5d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db61:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001db65:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001db68:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001db6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001db70:	80 f9 03             	cmp    cl,0x3
c001db73:	77 51                	ja     c001dbc6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001db75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db79:	0f b6 f2             	movzx  esi,dl
c001db7c:	0f b6 db             	movzx  ebx,bl
c001db7f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001db82:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001db86:	83 ca 80             	or     edx,0xffffff80
c001db89:	0f b6 d2             	movzx  edx,dl
c001db8c:	52                   	push   edx
c001db8d:	6a 0c                	push   0xc
c001db8f:	56                   	push   esi
c001db90:	57                   	push   edi
c001db91:	e8 c0 ff ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db96:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001db9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db9f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001dba3:	ee                   	out    dx,al
c001dba4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001dba9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001dbad:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001dbb1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dbb5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dbbd:	83 c4 2c             	add    esp,0x2c
c001dbc0:	5b                   	pop    ebx
c001dbc1:	5e                   	pop    esi
c001dbc2:	5f                   	pop    edi
c001dbc3:	5d                   	pop    ebp
c001dbc4:	eb 90                	jmp    c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dbc6:	80 fb 07             	cmp    bl,0x7
c001dbc9:	77 12                	ja     c001dbdd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001dbcb:	0f b6 d2             	movzx  edx,dl
c001dbce:	0f b6 db             	movzx  ebx,bl
c001dbd1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001dbd9:	89 da                	mov    edx,ebx
c001dbdb:	eb 2f                	jmp    c001dc0c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001dbdd:	80 fb 0d             	cmp    bl,0xd
c001dbe0:	77 13                	ja     c001dbf5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001dbe2:	0f b6 d2             	movzx  edx,dl
c001dbe5:	0f b6 db             	movzx  ebx,bl
c001dbe8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001dbef:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001dbf3:	eb 17                	jmp    c001dc0c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001dbf5:	80 fb 15             	cmp    bl,0x15
c001dbf8:	77 13                	ja     c001dc0d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001dbfa:	0f b6 d2             	movzx  edx,dl
c001dbfd:	0f b6 db             	movzx  ebx,bl
c001dc00:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001dc08:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001dc0c:	ee                   	out    dx,al
c001dc0d:	83 c4 1c             	add    esp,0x1c
c001dc10:	5b                   	pop    ebx
c001dc11:	5e                   	pop    esi
c001dc12:	5f                   	pop    edi
c001dc13:	5d                   	pop    ebp
c001dc14:	c3                   	ret    
c001dc15:	90                   	nop

c001dc16 <IDE::read(unsigned char, unsigned char)>:
c001dc16:	55                   	push   ebp
c001dc17:	57                   	push   edi
c001dc18:	56                   	push   esi
c001dc19:	53                   	push   ebx
c001dc1a:	83 ec 1c             	sub    esp,0x1c
c001dc1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dc21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dc25:	8d 43 f8             	lea    eax,[ebx-0x8]
c001dc28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc2c:	3c 03                	cmp    al,0x3
c001dc2e:	77 43                	ja     c001dc73 <IDE::read(unsigned char, unsigned char)+0x5d>
c001dc30:	0f b6 f2             	movzx  esi,dl
c001dc33:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001dc36:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001dc3a:	83 c8 80             	or     eax,0xffffff80
c001dc3d:	0f b6 c0             	movzx  eax,al
c001dc40:	50                   	push   eax
c001dc41:	6a 0c                	push   0xc
c001dc43:	56                   	push   esi
c001dc44:	57                   	push   edi
c001dc45:	e8 0c ff ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc4a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001dc4f:	0f b6 c3             	movzx  eax,bl
c001dc52:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001dc56:	ec                   	in     al,dx
c001dc57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc5b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001dc60:	52                   	push   edx
c001dc61:	6a 0c                	push   0xc
c001dc63:	56                   	push   esi
c001dc64:	57                   	push   edi
c001dc65:	e8 ec fe ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc6a:	83 c4 20             	add    esp,0x20
c001dc6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc71:	eb 49                	jmp    c001dcbc <IDE::read(unsigned char, unsigned char)+0xa6>
c001dc73:	80 fb 07             	cmp    bl,0x7
c001dc76:	77 12                	ja     c001dc8a <IDE::read(unsigned char, unsigned char)+0x74>
c001dc78:	0f b6 d2             	movzx  edx,dl
c001dc7b:	0f b6 c3             	movzx  eax,bl
c001dc7e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001dc86:	89 c2                	mov    edx,eax
c001dc88:	eb 31                	jmp    c001dcbb <IDE::read(unsigned char, unsigned char)+0xa5>
c001dc8a:	80 fb 0d             	cmp    bl,0xd
c001dc8d:	77 13                	ja     c001dca2 <IDE::read(unsigned char, unsigned char)+0x8c>
c001dc8f:	0f b6 d2             	movzx  edx,dl
c001dc92:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001dc99:	0f b6 d3             	movzx  edx,bl
c001dc9c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dca0:	eb 19                	jmp    c001dcbb <IDE::read(unsigned char, unsigned char)+0xa5>
c001dca2:	31 c0                	xor    eax,eax
c001dca4:	80 fb 15             	cmp    bl,0x15
c001dca7:	77 13                	ja     c001dcbc <IDE::read(unsigned char, unsigned char)+0xa6>
c001dca9:	0f b6 d2             	movzx  edx,dl
c001dcac:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001dcb4:	0f b6 d3             	movzx  edx,bl
c001dcb7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dcbb:	ec                   	in     al,dx
c001dcbc:	83 c4 1c             	add    esp,0x1c
c001dcbf:	5b                   	pop    ebx
c001dcc0:	5e                   	pop    esi
c001dcc1:	5f                   	pop    edi
c001dcc2:	5d                   	pop    ebp
c001dcc3:	c3                   	ret    

c001dcc4 <IDE::waitInterrupt(unsigned char)>:
c001dcc4:	55                   	push   ebp
c001dcc5:	57                   	push   edi
c001dcc6:	56                   	push   esi
c001dcc7:	53                   	push   ebx
c001dcc8:	31 db                	xor    ebx,ebx
c001dcca:	83 ec 0c             	sub    esp,0xc
c001dccd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001dcd1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001dcd6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001dcde:	89 e8                	mov    eax,ebp
c001dce0:	84 c0                	test   al,al
c001dce2:	75 30                	jne    c001dd14 <IDE::waitInterrupt(unsigned char)+0x50>
c001dce4:	50                   	push   eax
c001dce5:	6a 0c                	push   0xc
c001dce7:	56                   	push   esi
c001dce8:	57                   	push   edi
c001dce9:	e8 28 ff ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001dcee:	83 c4 10             	add    esp,0x10
c001dcf1:	a8 01                	test   al,0x1
c001dcf3:	75 27                	jne    c001dd1c <IDE::waitInterrupt(unsigned char)+0x58>
c001dcf5:	f6 c3 04             	test   bl,0x4
c001dcf8:	75 12                	jne    c001dd0c <IDE::waitInterrupt(unsigned char)+0x48>
c001dcfa:	83 fb 32             	cmp    ebx,0x32
c001dcfd:	7e 0d                	jle    c001dd0c <IDE::waitInterrupt(unsigned char)+0x48>
c001dcff:	83 ec 0c             	sub    esp,0xc
c001dd02:	6a 64                	push   0x64
c001dd04:	e8 cb 8f ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c001dd09:	83 c4 10             	add    esp,0x10
c001dd0c:	83 fb 3c             	cmp    ebx,0x3c
c001dd0f:	74 0b                	je     c001dd1c <IDE::waitInterrupt(unsigned char)+0x58>
c001dd11:	43                   	inc    ebx
c001dd12:	eb c2                	jmp    c001dcd6 <IDE::waitInterrupt(unsigned char)+0x12>
c001dd14:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001dd1c:	83 c4 0c             	add    esp,0xc
c001dd1f:	89 e8                	mov    eax,ebp
c001dd21:	5b                   	pop    ebx
c001dd22:	5e                   	pop    esi
c001dd23:	5f                   	pop    edi
c001dd24:	5d                   	pop    ebp
c001dd25:	c3                   	ret    

c001dd26 <ideChannel0IRQHandler(regs*, void*)>:
c001dd26:	83 ec 10             	sub    esp,0x10
c001dd29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd2d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001dd34:	6a 07                	push   0x7
c001dd36:	6a 00                	push   0x0
c001dd38:	50                   	push   eax
c001dd39:	e8 d8 fe ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001dd3e:	83 c4 1c             	add    esp,0x1c
c001dd41:	c3                   	ret    

c001dd42 <ideChannel1IRQHandler(regs*, void*)>:
c001dd42:	83 ec 10             	sub    esp,0x10
c001dd45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd49:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001dd50:	6a 07                	push   0x7
c001dd52:	6a 01                	push   0x1
c001dd54:	50                   	push   eax
c001dd55:	e8 bc fe ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001dd5a:	83 c4 1c             	add    esp,0x1c
c001dd5d:	c3                   	ret    

c001dd5e <IDE::enableIRQs(unsigned char, bool)>:
c001dd5e:	57                   	push   edi
c001dd5f:	56                   	push   esi
c001dd60:	be 04 00 00 00       	mov    esi,0x4
c001dd65:	53                   	push   ebx
c001dd66:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001dd6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd6f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001dd74:	0f 94 c0             	sete   al
c001dd77:	d1 e0                	shl    eax,1
c001dd79:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001dd80:	0f b6 c0             	movzx  eax,al
c001dd83:	50                   	push   eax
c001dd84:	6a 0c                	push   0xc
c001dd86:	57                   	push   edi
c001dd87:	53                   	push   ebx
c001dd88:	e8 c9 fd ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd8d:	83 c4 10             	add    esp,0x10
c001dd90:	50                   	push   eax
c001dd91:	6a 0c                	push   0xc
c001dd93:	57                   	push   edi
c001dd94:	53                   	push   ebx
c001dd95:	e8 7c fe ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001dd9a:	83 c4 10             	add    esp,0x10
c001dd9d:	4e                   	dec    esi
c001dd9e:	75 f0                	jne    c001dd90 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001dda0:	5b                   	pop    ebx
c001dda1:	5e                   	pop    esi
c001dda2:	5f                   	pop    edi
c001dda3:	c3                   	ret    

c001dda4 <IDE::open(int, int, void*)>:
c001dda4:	55                   	push   ebp
c001dda5:	57                   	push   edi
c001dda6:	56                   	push   esi
c001dda7:	53                   	push   ebx
c001dda8:	83 ec 1c             	sub    esp,0x1c
c001ddab:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddaf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ddb8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ddc1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ddc8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ddcf:	0f 85 cb 02 00 00    	jne    c001e0a0 <IDE::open(int, int, void*)+0x2fc>
c001ddd5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001dddb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001dddf:	83 e0 7f             	and    eax,0x7f
c001dde2:	3c 05                	cmp    al,0x5
c001dde4:	74 04                	je     c001ddea <IDE::open(int, int, void*)+0x46>
c001dde6:	3c 0f                	cmp    al,0xf
c001dde8:	75 32                	jne    c001de1c <IDE::open(int, int, void*)+0x78>
c001ddea:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ddf0:	83 e0 fc             	and    eax,0xfffffffc
c001ddf3:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ddfa:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001de00:	83 e0 fc             	and    eax,0xfffffffc
c001de03:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001de0a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001de10:	83 e0 fc             	and    eax,0xfffffffc
c001de13:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001de1a:	eb 14                	jmp    c001de30 <IDE::open(int, int, void*)+0x8c>
c001de1c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001de26:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001de30:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001de37:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001de3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de42:	89 c6                	mov    esi,eax
c001de44:	bf f8 0c 00 00       	mov    edi,0xcf8
c001de49:	c1 e6 10             	shl    esi,0x10
c001de4c:	89 e8                	mov    eax,ebp
c001de4e:	89 fa                	mov    edx,edi
c001de50:	c1 e0 0b             	shl    eax,0xb
c001de53:	09 f0                	or     eax,esi
c001de55:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001de5c:	c1 e6 08             	shl    esi,0x8
c001de5f:	09 c6                	or     esi,eax
c001de61:	89 f0                	mov    eax,esi
c001de63:	0d 08 00 00 80       	or     eax,0x80000008
c001de68:	ef                   	out    dx,eax
c001de69:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001de6e:	89 ca                	mov    edx,ecx
c001de70:	ed                   	in     eax,dx
c001de71:	c1 e8 10             	shr    eax,0x10
c001de74:	3d ff ff 00 00       	cmp    eax,0xffff
c001de79:	0f 84 f5 00 00 00    	je     c001df74 <IDE::open(int, int, void*)+0x1d0>
c001de7f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001de85:	89 fa                	mov    edx,edi
c001de87:	89 f0                	mov    eax,esi
c001de89:	ef                   	out    dx,eax
c001de8a:	b0 fe                	mov    al,0xfe
c001de8c:	89 ca                	mov    edx,ecx
c001de8e:	ee                   	out    dx,al
c001de8f:	89 f0                	mov    eax,esi
c001de91:	89 fa                	mov    edx,edi
c001de93:	ef                   	out    dx,eax
c001de94:	89 ca                	mov    edx,ecx
c001de96:	ed                   	in     eax,dx
c001de97:	3c fe                	cmp    al,0xfe
c001de99:	0f 85 a9 00 00 00    	jne    c001df48 <IDE::open(int, int, void*)+0x1a4>
c001de9f:	8b 15 a8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262a8
c001dea5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001deac:	74 33                	je     c001dee1 <IDE::open(int, int, void*)+0x13d>
c001deae:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001deb4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001deb8:	40                   	inc    eax
c001deb9:	83 ec 0c             	sub    esp,0xc
c001debc:	0f b6 c0             	movzx  eax,al
c001debf:	50                   	push   eax
c001dec0:	55                   	push   ebp
c001dec1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dec5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001decb:	51                   	push   ecx
c001decc:	e8 4b 34 ff ff       	call   c001131c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ded1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ded6:	83 c4 1c             	add    esp,0x1c
c001ded9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dedf:	eb 0a                	jmp    c001deeb <IDE::open(int, int, void*)+0x147>
c001dee1:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001deeb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001def2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001def9:	c1 e1 10             	shl    ecx,0x10
c001defc:	c1 e0 08             	shl    eax,0x8
c001deff:	bf f8 0c 00 00       	mov    edi,0xcf8
c001df04:	09 c1                	or     ecx,eax
c001df06:	89 fa                	mov    edx,edi
c001df08:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001df0f:	c1 e0 0b             	shl    eax,0xb
c001df12:	09 c1                	or     ecx,eax
c001df14:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001df1a:	89 c8                	mov    eax,ecx
c001df1c:	ef                   	out    dx,eax
c001df1d:	be fc 0c 00 00       	mov    esi,0xcfc
c001df22:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001df28:	89 f2                	mov    edx,esi
c001df2a:	ee                   	out    dx,al
c001df2b:	89 c8                	mov    eax,ecx
c001df2d:	89 fa                	mov    edx,edi
c001df2f:	ef                   	out    dx,eax
c001df30:	89 f2                	mov    edx,esi
c001df32:	ed                   	in     eax,dx
c001df33:	0f b6 c0             	movzx  eax,al
c001df36:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001df3c:	74 46                	je     c001df84 <IDE::open(int, int, void*)+0x1e0>
c001df3e:	83 ec 0c             	sub    esp,0xc
c001df41:	68 cc 50 02 c0       	push   0xc00250cc
c001df46:	eb 34                	jmp    c001df7c <IDE::open(int, int, void*)+0x1d8>
c001df48:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001df51:	75 17                	jne    c001df6a <IDE::open(int, int, void*)+0x1c6>
c001df53:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001df58:	74 07                	je     c001df61 <IDE::open(int, int, void*)+0x1bd>
c001df5a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001df5f:	75 09                	jne    c001df6a <IDE::open(int, int, void*)+0x1c6>
c001df61:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001df68:	eb 1a                	jmp    c001df84 <IDE::open(int, int, void*)+0x1e0>
c001df6a:	83 ec 0c             	sub    esp,0xc
c001df6d:	68 d4 50 02 c0       	push   0xc00250d4
c001df72:	eb 08                	jmp    c001df7c <IDE::open(int, int, void*)+0x1d8>
c001df74:	83 ec 0c             	sub    esp,0xc
c001df77:	68 05 51 02 c0       	push   0xc0025105
c001df7c:	e8 f6 53 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001df81:	83 c4 10             	add    esp,0x10
c001df84:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001df8b:	79 1a                	jns    c001dfa7 <IDE::open(int, int, void*)+0x203>
c001df8d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001df93:	83 e0 fc             	and    eax,0xfffffffc
c001df96:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001df9d:	83 c0 08             	add    eax,0x8
c001dfa0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001dfa7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001dfad:	89 c2                	mov    edx,eax
c001dfaf:	83 e2 0f             	and    edx,0xf
c001dfb2:	66 83 fa 08          	cmp    dx,0x8
c001dfb6:	75 0a                	jne    c001dfc2 <IDE::open(int, int, void*)+0x21e>
c001dfb8:	83 e8 02             	sub    eax,0x2
c001dfbb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dfc2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dfc8:	89 c2                	mov    edx,eax
c001dfca:	83 e2 0f             	and    edx,0xf
c001dfcd:	66 83 fa 08          	cmp    dx,0x8
c001dfd1:	75 0a                	jne    c001dfdd <IDE::open(int, int, void*)+0x239>
c001dfd3:	83 e8 02             	sub    eax,0x2
c001dfd6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dfdd:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001dfe4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dfeb:	89 c8                	mov    eax,ecx
c001dfed:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dff0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dff4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dff8:	8d 51 01             	lea    edx,[ecx+0x1]
c001dffb:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e000:	0f b6 d2             	movzx  edx,dl
c001e003:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e00a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e00d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e011:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e015:	8d 48 02             	lea    ecx,[eax+0x2]
c001e018:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e01d:	0f b6 c9             	movzx  ecx,cl
c001e020:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e026:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e029:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e02d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e031:	8d 50 03             	lea    edx,[eax+0x3]
c001e034:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e039:	0f b6 d2             	movzx  edx,dl
c001e03c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e042:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e045:	83 c0 04             	add    eax,0x4
c001e048:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e04c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e050:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e056:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e05b:	56                   	push   esi
c001e05c:	56                   	push   esi
c001e05d:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001e064:	50                   	push   eax
c001e065:	68 2f 51 02 c0       	push   0xc002512f
c001e06a:	e8 56 ef fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e06f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e076:	83 c4 10             	add    esp,0x10
c001e079:	66 85 f6             	test   si,si
c001e07c:	74 5f                	je     c001e0dd <IDE::open(int, int, void*)+0x339>
c001e07e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e085:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e088:	89 d0                	mov    eax,edx
c001e08a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e08e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e092:	40                   	inc    eax
c001e093:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e099:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e09e:	eb 3d                	jmp    c001e0dd <IDE::open(int, int, void*)+0x339>
c001e0a0:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e0a6:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e0ad:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e0b4:	66 05 06 02          	add    ax,0x206
c001e0b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e0bf:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e0c6:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e0cd:	66 05 06 02          	add    ax,0x206
c001e0d1:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e0d8:	e9 ca fe ff ff       	jmp    c001dfa7 <IDE::open(int, int, void*)+0x203>
c001e0dd:	50                   	push   eax
c001e0de:	50                   	push   eax
c001e0df:	6a 00                	push   0x0
c001e0e1:	53                   	push   ebx
c001e0e2:	e8 49 fa ff ff       	call   c001db30 <IDE::prepareInterrupt(unsigned char)>
c001e0e7:	5a                   	pop    edx
c001e0e8:	59                   	pop    ecx
c001e0e9:	6a 01                	push   0x1
c001e0eb:	53                   	push   ebx
c001e0ec:	e8 3f fa ff ff       	call   c001db30 <IDE::prepareInterrupt(unsigned char)>
c001e0f1:	83 c4 0c             	add    esp,0xc
c001e0f4:	6a 00                	push   0x0
c001e0f6:	6a 00                	push   0x0
c001e0f8:	53                   	push   ebx
c001e0f9:	e8 60 fc ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001e0fe:	83 c4 0c             	add    esp,0xc
c001e101:	6a 00                	push   0x0
c001e103:	6a 01                	push   0x1
c001e105:	53                   	push   ebx
c001e106:	e8 53 fc ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001e10b:	83 c4 10             	add    esp,0x10
c001e10e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e115:	74 34                	je     c001e14b <IDE::open(int, int, void*)+0x3a7>
c001e117:	83 ec 0c             	sub    esp,0xc
c001e11a:	53                   	push   ebx
c001e11b:	6a 01                	push   0x1
c001e11d:	68 26 dd 01 c0       	push   0xc001dd26
c001e122:	6a 0e                	push   0xe
c001e124:	53                   	push   ebx
c001e125:	e8 c4 02 ff ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e12a:	83 c4 14             	add    esp,0x14
c001e12d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e133:	53                   	push   ebx
c001e134:	6a 01                	push   0x1
c001e136:	68 42 dd 01 c0       	push   0xc001dd42
c001e13b:	6a 0f                	push   0xf
c001e13d:	53                   	push   ebx
c001e13e:	e8 ab 02 ff ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e143:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e149:	eb 38                	jmp    c001e183 <IDE::open(int, int, void*)+0x3df>
c001e14b:	83 ec 0c             	sub    esp,0xc
c001e14e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e158:	53                   	push   ebx
c001e159:	6a 00                	push   0x0
c001e15b:	68 26 dd 01 c0       	push   0xc001dd26
c001e160:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e166:	53                   	push   ebx
c001e167:	e8 82 02 ff ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e16c:	83 c4 14             	add    esp,0x14
c001e16f:	53                   	push   ebx
c001e170:	6a 00                	push   0x0
c001e172:	68 42 dd 01 c0       	push   0xc001dd42
c001e177:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e17d:	53                   	push   ebx
c001e17e:	e8 6b 02 ff ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e183:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e185:	83 c4 20             	add    esp,0x20
c001e188:	83 ec 0c             	sub    esp,0xc
c001e18b:	53                   	push   ebx
c001e18c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e18f:	83 c4 0c             	add    esp,0xc
c001e192:	6a 07                	push   0x7
c001e194:	6a 00                	push   0x0
c001e196:	53                   	push   ebx
c001e197:	e8 7a fa ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e19c:	83 c4 0c             	add    esp,0xc
c001e19f:	6a 07                	push   0x7
c001e1a1:	6a 01                	push   0x1
c001e1a3:	53                   	push   ebx
c001e1a4:	e8 6d fa ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e1a9:	83 c4 0c             	add    esp,0xc
c001e1ac:	6a 01                	push   0x1
c001e1ae:	6a 00                	push   0x0
c001e1b0:	53                   	push   ebx
c001e1b1:	e8 a8 fb ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001e1b6:	83 c4 0c             	add    esp,0xc
c001e1b9:	6a 01                	push   0x1
c001e1bb:	6a 01                	push   0x1
c001e1bd:	53                   	push   ebx
c001e1be:	e8 9b fb ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001e1c3:	83 c4 2c             	add    esp,0x2c
c001e1c6:	31 c0                	xor    eax,eax
c001e1c8:	5b                   	pop    ebx
c001e1c9:	5e                   	pop    esi
c001e1ca:	5f                   	pop    edi
c001e1cb:	5d                   	pop    ebp
c001e1cc:	c3                   	ret    
c001e1cd:	90                   	nop

c001e1ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e1ce:	55                   	push   ebp
c001e1cf:	57                   	push   edi
c001e1d0:	56                   	push   esi
c001e1d1:	53                   	push   ebx
c001e1d2:	83 ec 1c             	sub    esp,0x1c
c001e1d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e1d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1dd:	8d 50 f8             	lea    edx,[eax-0x8]
c001e1e0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1e4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e1e8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e1ec:	80 fa 03             	cmp    dl,0x3
c001e1ef:	77 5d                	ja     c001e24e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001e1f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e1f9:	0f b6 db             	movzx  ebx,bl
c001e1fc:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e1ff:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001e203:	83 ca 80             	or     edx,0xffffff80
c001e206:	0f b6 d2             	movzx  edx,dl
c001e209:	52                   	push   edx
c001e20a:	6a 0c                	push   0xc
c001e20c:	53                   	push   ebx
c001e20d:	56                   	push   esi
c001e20e:	e8 43 f9 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e213:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e21c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e220:	0f b6 c0             	movzx  eax,al
c001e223:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001e227:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e229:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e22e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e232:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e236:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e23a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e242:	83 c4 2c             	add    esp,0x2c
c001e245:	5b                   	pop    ebx
c001e246:	5e                   	pop    esi
c001e247:	5f                   	pop    edi
c001e248:	5d                   	pop    ebp
c001e249:	e9 08 f9 ff ff       	jmp    c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e24e:	3c 07                	cmp    al,0x7
c001e250:	77 10                	ja     c001e262 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001e252:	0f b6 db             	movzx  ebx,bl
c001e255:	0f b6 d0             	movzx  edx,al
c001e258:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001e260:	eb 2d                	jmp    c001e28f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e262:	3c 0d                	cmp    al,0xd
c001e264:	77 13                	ja     c001e279 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001e266:	0f b6 db             	movzx  ebx,bl
c001e269:	0f b6 c0             	movzx  eax,al
c001e26c:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001e273:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001e277:	eb 16                	jmp    c001e28f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001e279:	3c 15                	cmp    al,0x15
c001e27b:	77 14                	ja     c001e291 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001e27d:	0f b6 db             	movzx  ebx,bl
c001e280:	0f b6 c0             	movzx  eax,al
c001e283:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001e28b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001e28f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e291:	83 c4 1c             	add    esp,0x1c
c001e294:	5b                   	pop    ebx
c001e295:	5e                   	pop    esi
c001e296:	5f                   	pop    edi
c001e297:	5d                   	pop    ebp
c001e298:	c3                   	ret    
c001e299:	90                   	nop

c001e29a <IDE::detect()>:
c001e29a:	55                   	push   ebp
c001e29b:	57                   	push   edi
c001e29c:	56                   	push   esi
c001e29d:	53                   	push   ebx
c001e29e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001e2a4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001e2ab:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001e2b2:	0f 85 97 02 00 00    	jne    c001e54f <IDE::detect()+0x2b5>
c001e2b8:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e2bf:	31 f6                	xor    esi,esi
c001e2c1:	31 ed                	xor    ebp,ebp
c001e2c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e2cb:	89 e8                	mov    eax,ebp
c001e2cd:	c1 e0 06             	shl    eax,0x6
c001e2d0:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e2d8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e2dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e2e0:	c1 e0 04             	shl    eax,0x4
c001e2e3:	83 c8 a0             	or     eax,0xffffffa0
c001e2e6:	0f b6 c0             	movzx  eax,al
c001e2e9:	50                   	push   eax
c001e2ea:	6a 06                	push   0x6
c001e2ec:	56                   	push   esi
c001e2ed:	53                   	push   ebx
c001e2ee:	e8 63 f8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e2f3:	83 c4 0c             	add    esp,0xc
c001e2f6:	6a 0c                	push   0xc
c001e2f8:	56                   	push   esi
c001e2f9:	53                   	push   ebx
c001e2fa:	e8 17 f9 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e2ff:	83 c4 0c             	add    esp,0xc
c001e302:	6a 0c                	push   0xc
c001e304:	56                   	push   esi
c001e305:	53                   	push   ebx
c001e306:	e8 0b f9 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e30b:	83 c4 0c             	add    esp,0xc
c001e30e:	6a 0c                	push   0xc
c001e310:	56                   	push   esi
c001e311:	53                   	push   ebx
c001e312:	e8 ff f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e317:	83 c4 0c             	add    esp,0xc
c001e31a:	6a 0c                	push   0xc
c001e31c:	56                   	push   esi
c001e31d:	53                   	push   ebx
c001e31e:	e8 f3 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e323:	68 ec 00 00 00       	push   0xec
c001e328:	6a 07                	push   0x7
c001e32a:	56                   	push   esi
c001e32b:	53                   	push   ebx
c001e32c:	e8 25 f8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e331:	83 c4 1c             	add    esp,0x1c
c001e334:	6a 0c                	push   0xc
c001e336:	56                   	push   esi
c001e337:	53                   	push   ebx
c001e338:	e8 d9 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e33d:	83 c4 0c             	add    esp,0xc
c001e340:	6a 0c                	push   0xc
c001e342:	56                   	push   esi
c001e343:	53                   	push   ebx
c001e344:	e8 cd f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e349:	83 c4 0c             	add    esp,0xc
c001e34c:	6a 0c                	push   0xc
c001e34e:	56                   	push   esi
c001e34f:	53                   	push   ebx
c001e350:	e8 c1 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e355:	83 c4 0c             	add    esp,0xc
c001e358:	6a 0c                	push   0xc
c001e35a:	56                   	push   esi
c001e35b:	53                   	push   ebx
c001e35c:	e8 b5 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e361:	83 c4 0c             	add    esp,0xc
c001e364:	6a 0c                	push   0xc
c001e366:	56                   	push   esi
c001e367:	53                   	push   ebx
c001e368:	e8 a9 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e36d:	83 c4 10             	add    esp,0x10
c001e370:	84 c0                	test   al,al
c001e372:	0f 84 5f 01 00 00    	je     c001e4d7 <IDE::detect()+0x23d>
c001e378:	31 ff                	xor    edi,edi
c001e37a:	50                   	push   eax
c001e37b:	6a 0c                	push   0xc
c001e37d:	56                   	push   esi
c001e37e:	53                   	push   ebx
c001e37f:	e8 92 f8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e384:	83 c4 10             	add    esp,0x10
c001e387:	a8 01                	test   al,0x1
c001e389:	0f 85 69 01 00 00    	jne    c001e4f8 <IDE::detect()+0x25e>
c001e38f:	84 c0                	test   al,al
c001e391:	78 04                	js     c001e397 <IDE::detect()+0xfd>
c001e393:	a8 08                	test   al,0x8
c001e395:	75 23                	jne    c001e3ba <IDE::detect()+0x120>
c001e397:	47                   	inc    edi
c001e398:	81 ff 17 01 00 00    	cmp    edi,0x117
c001e39e:	7e da                	jle    c001e37a <IDE::detect()+0xe0>
c001e3a0:	83 ec 0c             	sub    esp,0xc
c001e3a3:	6a 32                	push   0x32
c001e3a5:	e8 2a 89 ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001e3b3:	75 c5                	jne    c001e37a <IDE::detect()+0xe0>
c001e3b5:	e9 3e 01 00 00       	jmp    c001e4f8 <IDE::detect()+0x25e>
c001e3ba:	31 c9                	xor    ecx,ecx
c001e3bc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001e3c0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001e3c4:	83 ec 0c             	sub    esp,0xc
c001e3c7:	68 80 00 00 00       	push   0x80
c001e3cc:	57                   	push   edi
c001e3cd:	6a 00                	push   0x0
c001e3cf:	56                   	push   esi
c001e3d0:	53                   	push   ebx
c001e3d1:	e8 f8 fd ff ff       	call   c001e1ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e3d6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001e3db:	89 e8                	mov    eax,ebp
c001e3dd:	89 d1                	mov    ecx,edx
c001e3df:	c1 e0 06             	shl    eax,0x6
c001e3e2:	01 d8                	add    eax,ebx
c001e3e4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001e3eb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001e3f2:	89 f2                	mov    edx,esi
c001e3f4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001e3fa:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001e3fe:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001e404:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e408:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001e40f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001e417:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001e41e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001e426:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001e42c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001e433:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001e439:	8d 54 24 58          	lea    edx,[esp+0x58]
c001e43d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e441:	83 c4 20             	add    esp,0x20
c001e444:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e447:	83 c0 02             	add    eax,0x2
c001e44a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e450:	83 c7 02             	add    edi,0x2
c001e453:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e456:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e45c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e460:	75 e2                	jne    c001e444 <IDE::detect()+0x1aa>
c001e462:	89 e8                	mov    eax,ebp
c001e464:	c1 e0 06             	shl    eax,0x6
c001e467:	01 d8                	add    eax,ebx
c001e469:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e46f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e476:	66 c1 ea 09          	shr    dx,0x9
c001e47a:	83 e2 01             	and    edx,0x1
c001e47d:	84 c9                	test   cl,cl
c001e47f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e485:	75 22                	jne    c001e4a9 <IDE::detect()+0x20f>
c001e487:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e48e:	74 46                	je     c001e4d6 <IDE::detect()+0x23c>
c001e490:	83 ec 0c             	sub    esp,0xc
c001e493:	68 7c 01 00 00       	push   0x17c
c001e498:	e8 1a b8 fe ff       	call   c0009cb7 <malloc>
c001e49d:	89 c7                	mov    edi,eax
c001e49f:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4a2:	e8 49 06 00 00       	call   c001eaf0 <ATA::ATA()>
c001e4a7:	eb 17                	jmp    c001e4c0 <IDE::detect()+0x226>
c001e4a9:	83 ec 0c             	sub    esp,0xc
c001e4ac:	68 84 01 00 00       	push   0x184
c001e4b1:	e8 01 b8 fe ff       	call   c0009cb7 <malloc>
c001e4b6:	89 c7                	mov    edi,eax
c001e4b8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4bb:	e8 b8 0c 00 00       	call   c001f178 <ATAPI::ATAPI()>
c001e4c0:	5a                   	pop    edx
c001e4c1:	59                   	pop    ecx
c001e4c2:	57                   	push   edi
c001e4c3:	53                   	push   ebx
c001e4c4:	e8 79 ff fe ff       	call   c000e442 <Device::addChild(Device*)>
c001e4c9:	8b 07                	mov    eax,DWORD PTR [edi]
c001e4cb:	53                   	push   ebx
c001e4cc:	55                   	push   ebp
c001e4cd:	6a 00                	push   0x0
c001e4cf:	57                   	push   edi
c001e4d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4d3:	83 c4 20             	add    esp,0x20
c001e4d6:	45                   	inc    ebp
c001e4d7:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e4dc:	74 0d                	je     c001e4eb <IDE::detect()+0x251>
c001e4de:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e4e6:	e9 e0 fd ff ff       	jmp    c001e2cb <IDE::detect()+0x31>
c001e4eb:	4e                   	dec    esi
c001e4ec:	74 61                	je     c001e54f <IDE::detect()+0x2b5>
c001e4ee:	be 01 00 00 00       	mov    esi,0x1
c001e4f3:	e9 cb fd ff ff       	jmp    c001e2c3 <IDE::detect()+0x29>
c001e4f8:	50                   	push   eax
c001e4f9:	6a 04                	push   0x4
c001e4fb:	56                   	push   esi
c001e4fc:	53                   	push   ebx
c001e4fd:	e8 14 f7 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e502:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e506:	83 c4 0c             	add    esp,0xc
c001e509:	6a 05                	push   0x5
c001e50b:	56                   	push   esi
c001e50c:	53                   	push   ebx
c001e50d:	e8 04 f7 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e512:	83 c4 10             	add    esp,0x10
c001e515:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e519:	80 fa 14             	cmp    dl,0x14
c001e51c:	75 04                	jne    c001e522 <IDE::detect()+0x288>
c001e51e:	3c eb                	cmp    al,0xeb
c001e520:	eb 07                	jmp    c001e529 <IDE::detect()+0x28f>
c001e522:	3c 96                	cmp    al,0x96
c001e524:	75 b1                	jne    c001e4d7 <IDE::detect()+0x23d>
c001e526:	80 fa 69             	cmp    dl,0x69
c001e529:	75 ac                	jne    c001e4d7 <IDE::detect()+0x23d>
c001e52b:	68 a1 00 00 00       	push   0xa1
c001e530:	6a 07                	push   0x7
c001e532:	56                   	push   esi
c001e533:	53                   	push   ebx
c001e534:	e8 1d f6 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e539:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e540:	e8 8f 87 ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c001e545:	83 c4 10             	add    esp,0x10
c001e548:	b1 01                	mov    cl,0x1
c001e54a:	e9 6d fe ff ff       	jmp    c001e3bc <IDE::detect()+0x122>
c001e54f:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e555:	5b                   	pop    ebx
c001e556:	5e                   	pop    esi
c001e557:	5f                   	pop    edi
c001e558:	5d                   	pop    ebp
c001e559:	c3                   	ret    

c001e55a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e55a:	55                   	push   ebp
c001e55b:	57                   	push   edi
c001e55c:	56                   	push   esi
c001e55d:	53                   	push   ebx
c001e55e:	83 ec 1c             	sub    esp,0x1c
c001e561:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e565:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e569:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e56d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e571:	88 c3                	mov    bl,al
c001e573:	84 c0                	test   al,al
c001e575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e579:	0f 84 81 00 00 00    	je     c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e57f:	83 ec 0c             	sub    esp,0xc
c001e582:	68 4b 51 02 c0       	push   0xc002514b
c001e587:	e8 39 ea fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e58c:	83 c4 10             	add    esp,0x10
c001e58f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e593:	3c 01                	cmp    al,0x1
c001e595:	74 63                	je     c001e5fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e597:	3c 02                	cmp    al,0x2
c001e599:	75 53                	jne    c001e5ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e59b:	d1 e6                	shl    esi,1
c001e59d:	09 ee                	or     esi,ebp
c001e59f:	50                   	push   eax
c001e5a0:	89 f0                	mov    eax,esi
c001e5a2:	6a 01                	push   0x1
c001e5a4:	0f b6 f0             	movzx  esi,al
c001e5a7:	c1 e6 06             	shl    esi,0x6
c001e5aa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e5b2:	50                   	push   eax
c001e5b3:	57                   	push   edi
c001e5b4:	e8 5d f6 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	a8 01                	test   al,0x1
c001e5be:	74 02                	je     c001e5c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e5c0:	b3 07                	mov    bl,0x7
c001e5c2:	a8 02                	test   al,0x2
c001e5c4:	74 02                	je     c001e5c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e5c6:	b3 03                	mov    bl,0x3
c001e5c8:	a8 04                	test   al,0x4
c001e5ca:	74 02                	je     c001e5ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e5cc:	b3 14                	mov    bl,0x14
c001e5ce:	a8 08                	test   al,0x8
c001e5d0:	74 02                	je     c001e5d4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e5d2:	b3 03                	mov    bl,0x3
c001e5d4:	a8 10                	test   al,0x10
c001e5d6:	74 02                	je     c001e5da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e5d8:	b3 15                	mov    bl,0x15
c001e5da:	a8 20                	test   al,0x20
c001e5dc:	74 02                	je     c001e5e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e5de:	b3 03                	mov    bl,0x3
c001e5e0:	a8 40                	test   al,0x40
c001e5e2:	74 02                	je     c001e5e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e5e4:	b3 16                	mov    bl,0x16
c001e5e6:	84 c0                	test   al,al
c001e5e8:	79 16                	jns    c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e5ea:	b3 0d                	mov    bl,0xd
c001e5ec:	eb 12                	jmp    c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e5ee:	3c 03                	cmp    al,0x3
c001e5f0:	74 0c                	je     c001e5fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e5f2:	3c 04                	cmp    al,0x4
c001e5f4:	75 0a                	jne    c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e5f6:	b3 08                	mov    bl,0x8
c001e5f8:	eb 06                	jmp    c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e5fa:	b3 13                	mov    bl,0x13
c001e5fc:	eb 02                	jmp    c001e600 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e5fe:	b3 17                	mov    bl,0x17
c001e600:	83 c4 1c             	add    esp,0x1c
c001e603:	88 d8                	mov    al,bl
c001e605:	5b                   	pop    ebx
c001e606:	5e                   	pop    esi
c001e607:	5f                   	pop    edi
c001e608:	5d                   	pop    ebp
c001e609:	c3                   	ret    

c001e60a <IDE::polling(unsigned char, unsigned int)>:
c001e60a:	57                   	push   edi
c001e60b:	56                   	push   esi
c001e60c:	53                   	push   ebx
c001e60d:	bb 04 00 00 00       	mov    ebx,0x4
c001e612:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e616:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e61b:	52                   	push   edx
c001e61c:	6a 0c                	push   0xc
c001e61e:	56                   	push   esi
c001e61f:	57                   	push   edi
c001e620:	e8 f1 f5 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e625:	83 c4 10             	add    esp,0x10
c001e628:	4b                   	dec    ebx
c001e629:	75 f0                	jne    c001e61b <IDE::polling(unsigned char, unsigned int)+0x11>
c001e62b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e630:	50                   	push   eax
c001e631:	6a 0c                	push   0xc
c001e633:	56                   	push   esi
c001e634:	57                   	push   edi
c001e635:	e8 dc f5 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	a8 01                	test   al,0x1
c001e63f:	75 17                	jne    c001e658 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e641:	a8 20                	test   al,0x20
c001e643:	75 0f                	jne    c001e654 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e645:	4b                   	dec    ebx
c001e646:	74 10                	je     c001e658 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e648:	84 c0                	test   al,al
c001e64a:	78 e4                	js     c001e630 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e64c:	a8 08                	test   al,0x8
c001e64e:	74 e0                	je     c001e630 <IDE::polling(unsigned char, unsigned int)+0x26>
c001e650:	31 c0                	xor    eax,eax
c001e652:	eb 06                	jmp    c001e65a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e654:	b0 01                	mov    al,0x1
c001e656:	eb 02                	jmp    c001e65a <IDE::polling(unsigned char, unsigned int)+0x50>
c001e658:	b0 02                	mov    al,0x2
c001e65a:	5b                   	pop    ebx
c001e65b:	5e                   	pop    esi
c001e65c:	5f                   	pop    edi
c001e65d:	c3                   	ret    

c001e65e <SATABus::close(int, int, void*)>:
c001e65e:	31 c0                	xor    eax,eax
c001e660:	c3                   	ret    
c001e661:	90                   	nop

c001e662 <SATABus::detect()>:
c001e662:	c3                   	ret    
c001e663:	90                   	nop

c001e664 <SATABus::SATABus()>:
c001e664:	83 ec 0c             	sub    esp,0xc
c001e667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66b:	83 ec 08             	sub    esp,0x8
c001e66e:	68 84 51 02 c0       	push   0xc0025184
c001e673:	50                   	push   eax
c001e674:	e8 77 01 ff ff       	call   c000e7f0 <HardDiskController::HardDiskController(char const*)>
c001e679:	83 c4 10             	add    esp,0x10
c001e67c:	ba 2c 52 02 c0       	mov    edx,0xc002522c
c001e681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e685:	89 10                	mov    DWORD PTR [eax],edx
c001e687:	83 ec 0c             	sub    esp,0xc
c001e68a:	6a 50                	push   0x50
c001e68c:	e8 c8 bd fe ff       	call   c000a459 <Phys::allocateContiguousPages(int)>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	89 c2                	mov    edx,eax
c001e696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e6a0:	83 ec 0c             	sub    esp,0xc
c001e6a3:	6a 50                	push   0x50
c001e6a5:	e8 bf d5 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c001e6aa:	83 c4 10             	add    esp,0x10
c001e6ad:	89 c2                	mov    edx,eax
c001e6af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e6b9:	a1 d4 63 02 c0       	mov    eax,ds:0xc00263d4
c001e6be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6c2:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e6c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6cc:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e6d2:	83 ec 0c             	sub    esp,0xc
c001e6d5:	6a 03                	push   0x3
c001e6d7:	6a 50                	push   0x50
c001e6d9:	51                   	push   ecx
c001e6da:	52                   	push   edx
c001e6db:	50                   	push   eax
c001e6dc:	e8 eb de fe ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e6e1:	83 c4 20             	add    esp,0x20
c001e6e4:	90                   	nop
c001e6e5:	83 c4 0c             	add    esp,0xc
c001e6e8:	c3                   	ret    
c001e6e9:	90                   	nop

c001e6ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e6ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e6ee:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e6f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e6f4:	09 c2                	or     edx,eax
c001e6f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e700:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e702:	31 c0                	xor    eax,eax
c001e704:	c1 e9 08             	shr    ecx,0x8
c001e707:	83 e1 0f             	and    ecx,0xf
c001e70a:	39 c8                	cmp    eax,ecx
c001e70c:	74 0a                	je     c001e718 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e70e:	f6 c2 01             	test   dl,0x1
c001e711:	74 08                	je     c001e71b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e713:	d1 ea                	shr    edx,1
c001e715:	40                   	inc    eax
c001e716:	eb f2                	jmp    c001e70a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e718:	83 c8 ff             	or     eax,0xffffffff
c001e71b:	c3                   	ret    

c001e71c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e71c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e720:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e723:	89 c2                	mov    edx,eax
c001e725:	c1 ea 08             	shr    edx,0x8
c001e728:	83 e2 0f             	and    edx,0xf
c001e72b:	fe ca                	dec    dl
c001e72d:	75 31                	jne    c001e760 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e72f:	83 e0 0f             	and    eax,0xf
c001e732:	3c 03                	cmp    al,0x3
c001e734:	75 2a                	jne    c001e760 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e736:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e739:	b8 02 00 00 00       	mov    eax,0x2
c001e73e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e744:	74 1c                	je     c001e762 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e746:	b8 04 00 00 00       	mov    eax,0x4
c001e74b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e751:	74 0f                	je     c001e762 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e753:	31 c0                	xor    eax,eax
c001e755:	83 fa 03             	cmp    edx,0x3
c001e758:	0f 94 c0             	sete   al
c001e75b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e75f:	c3                   	ret    
c001e760:	31 c0                	xor    eax,eax
c001e762:	c3                   	ret    
c001e763:	90                   	nop

c001e764 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e768:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e76b:	0f ba e2 0f          	bt     edx,0xf
c001e76f:	72 f7                	jb     c001e768 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e771:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e774:	83 ca 10             	or     edx,0x10
c001e777:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e77a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e77d:	83 ca 01             	or     edx,0x1
c001e780:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e783:	c3                   	ret    

c001e784 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e788:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e78b:	83 e2 fe             	and    edx,0xfffffffe
c001e78e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e791:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e794:	83 e2 ef             	and    edx,0xffffffef
c001e797:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e79a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e79d:	0f ba e2 0e          	bt     edx,0xe
c001e7a1:	72 f7                	jb     c001e79a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e7a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e7a6:	0f ba e2 0f          	bt     edx,0xf
c001e7aa:	72 ee                	jb     c001e79a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e7ac:	c3                   	ret    
c001e7ad:	90                   	nop

c001e7ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e7ae:	55                   	push   ebp
c001e7af:	57                   	push   edi
c001e7b0:	56                   	push   esi
c001e7b1:	53                   	push   ebx
c001e7b2:	83 ec 1c             	sub    esp,0x1c
c001e7b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e7bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e7c1:	53                   	push   ebx
c001e7c2:	89 fd                	mov    ebp,edi
c001e7c4:	56                   	push   esi
c001e7c5:	c1 e5 0a             	shl    ebp,0xa
c001e7c8:	e8 b7 ff ff ff       	call   c001e784 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e7cd:	83 ec 0c             	sub    esp,0xc
c001e7d0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e7d6:	01 e8                	add    eax,ebp
c001e7d8:	89 03                	mov    DWORD PTR [ebx],eax
c001e7da:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e7dc:	68 00 04 00 00       	push   0x400
c001e7e1:	6a 00                	push   0x0
c001e7e3:	50                   	push   eax
c001e7e4:	e8 93 1e fe ff       	call   c000067c <memset>
c001e7e9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e7ef:	89 fa                	mov    edx,edi
c001e7f1:	01 e8                	add    eax,ebp
c001e7f3:	c1 e7 0d             	shl    edi,0xd
c001e7f6:	89 03                	mov    DWORD PTR [ebx],eax
c001e7f8:	c1 e2 08             	shl    edx,0x8
c001e7fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e802:	81 c2 00 80 00 00    	add    edx,0x8000
c001e808:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e80c:	89 d0                	mov    eax,edx
c001e80e:	83 c4 1c             	add    esp,0x1c
c001e811:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e817:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e81a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e81d:	68 00 01 00 00       	push   0x100
c001e822:	6a 00                	push   0x0
c001e824:	50                   	push   eax
c001e825:	e8 52 1e fe ff       	call   c000067c <memset>
c001e82a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e82e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e834:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e83a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e83e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e84b:	31 ff                	xor    edi,edi
c001e84d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e853:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e85d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e863:	83 c5 20             	add    ebp,0x20
c001e866:	01 f8                	add    eax,edi
c001e868:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e86b:	52                   	push   edx
c001e86c:	68 00 01 00 00       	push   0x100
c001e871:	6a 00                	push   0x0
c001e873:	50                   	push   eax
c001e874:	e8 03 1e fe ff       	call   c000067c <memset>
c001e879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e87d:	83 c4 10             	add    esp,0x10
c001e880:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e886:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e88d:	01 f8                	add    eax,edi
c001e88f:	81 c7 00 01 00 00    	add    edi,0x100
c001e895:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e898:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e89e:	75 b3                	jne    c001e853 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e8a0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e8a4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e8a8:	83 c4 1c             	add    esp,0x1c
c001e8ab:	5b                   	pop    ebx
c001e8ac:	5e                   	pop    esi
c001e8ad:	5f                   	pop    edi
c001e8ae:	5d                   	pop    ebp
c001e8af:	e9 b0 fe ff ff       	jmp    c001e764 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e8b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e8b4:	55                   	push   ebp
c001e8b5:	57                   	push   edi
c001e8b6:	56                   	push   esi
c001e8b7:	53                   	push   ebx
c001e8b8:	83 ec 0c             	sub    esp,0xc
c001e8bb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e8bf:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001e8c6:	74 2d                	je     c001e8f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e8c8:	83 ec 0c             	sub    esp,0xc
c001e8cb:	68 a8 51 02 c0       	push   0xc00251a8
c001e8d0:	e8 3c b4 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001e8df:	75 14                	jne    c001e8f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001e8e1:	e4 60                	in     al,0x60
c001e8e3:	3c 1c                	cmp    al,0x1c
c001e8e5:	74 04                	je     c001e8eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e8e7:	3c 5a                	cmp    al,0x5a
c001e8e9:	75 f6                	jne    c001e8e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001e8eb:	e4 60                	in     al,0x60
c001e8ed:	3c 5a                	cmp    al,0x5a
c001e8ef:	74 fa                	je     c001e8eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e8f1:	3c 1c                	cmp    al,0x1c
c001e8f3:	74 f6                	je     c001e8eb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001e8f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e8f9:	31 db                	xor    ebx,ebx
c001e8fb:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001e8fe:	f7 c5 01 00 00 00    	test   ebp,0x1
c001e904:	0f 84 78 01 00 00    	je     c001ea82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001e90a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e90e:	89 d8                	mov    eax,ebx
c001e910:	c1 e0 07             	shl    eax,0x7
c001e913:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001e91a:	50                   	push   eax
c001e91b:	50                   	push   eax
c001e91c:	57                   	push   edi
c001e91d:	56                   	push   esi
c001e91e:	e8 f9 fd ff ff       	call   c001e71c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	83 f8 01             	cmp    eax,0x1
c001e929:	0f 85 19 01 00 00    	jne    c001ea48 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001e92f:	50                   	push   eax
c001e930:	53                   	push   ebx
c001e931:	57                   	push   edi
c001e932:	56                   	push   esi
c001e933:	e8 76 fe ff ff       	call   c001e7ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e938:	83 c4 10             	add    esp,0x10
c001e93b:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001e942:	74 2d                	je     c001e971 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e944:	83 ec 0c             	sub    esp,0xc
c001e947:	68 bd 51 02 c0       	push   0xc00251bd
c001e94c:	e8 c0 b3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e951:	83 c4 10             	add    esp,0x10
c001e954:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001e95b:	75 14                	jne    c001e971 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001e95d:	e4 60                	in     al,0x60
c001e95f:	3c 1c                	cmp    al,0x1c
c001e961:	74 04                	je     c001e967 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e963:	3c 5a                	cmp    al,0x5a
c001e965:	75 f6                	jne    c001e95d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001e967:	e4 60                	in     al,0x60
c001e969:	3c 5a                	cmp    al,0x5a
c001e96b:	74 fa                	je     c001e967 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e96d:	3c 1c                	cmp    al,0x1c
c001e96f:	74 f6                	je     c001e967 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001e971:	83 ec 0c             	sub    esp,0xc
c001e974:	68 7c 01 00 00       	push   0x17c
c001e979:	e8 39 b3 fe ff       	call   c0009cb7 <malloc>
c001e97e:	89 04 24             	mov    DWORD PTR [esp],eax
c001e981:	89 c7                	mov    edi,eax
c001e983:	e8 28 10 00 00       	call   c001f9b0 <SATA::SATA()>
c001e988:	83 c4 10             	add    esp,0x10
c001e98b:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001e992:	74 2d                	je     c001e9c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	68 d2 51 02 c0       	push   0xc00251d2
c001e99c:	e8 70 b3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001e9ab:	75 14                	jne    c001e9c1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001e9ad:	e4 60                	in     al,0x60
c001e9af:	3c 5a                	cmp    al,0x5a
c001e9b1:	74 04                	je     c001e9b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e9b3:	3c 1c                	cmp    al,0x1c
c001e9b5:	75 f6                	jne    c001e9ad <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001e9b7:	e4 60                	in     al,0x60
c001e9b9:	3c 5a                	cmp    al,0x5a
c001e9bb:	74 fa                	je     c001e9b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e9bd:	3c 1c                	cmp    al,0x1c
c001e9bf:	74 f6                	je     c001e9b7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001e9c1:	50                   	push   eax
c001e9c2:	50                   	push   eax
c001e9c3:	57                   	push   edi
c001e9c4:	56                   	push   esi
c001e9c5:	e8 78 fa fe ff       	call   c000e442 <Device::addChild(Device*)>
c001e9ca:	83 c4 10             	add    esp,0x10
c001e9cd:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001e9d4:	74 2d                	je     c001ea03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e9d6:	83 ec 0c             	sub    esp,0xc
c001e9d9:	68 e7 51 02 c0       	push   0xc00251e7
c001e9de:	e8 2e b3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e9e3:	83 c4 10             	add    esp,0x10
c001e9e6:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001e9ed:	75 14                	jne    c001ea03 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001e9ef:	e4 60                	in     al,0x60
c001e9f1:	3c 1c                	cmp    al,0x1c
c001e9f3:	74 04                	je     c001e9f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e9f5:	3c 5a                	cmp    al,0x5a
c001e9f7:	75 f6                	jne    c001e9ef <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001e9f9:	e4 60                	in     al,0x60
c001e9fb:	3c 5a                	cmp    al,0x5a
c001e9fd:	74 fa                	je     c001e9f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001e9ff:	3c 1c                	cmp    al,0x1c
c001ea01:	74 f6                	je     c001e9f9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001ea03:	8b 07                	mov    eax,DWORD PTR [edi]
c001ea05:	56                   	push   esi
c001ea06:	6a 00                	push   0x0
c001ea08:	53                   	push   ebx
c001ea09:	57                   	push   edi
c001ea0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ea0d:	83 c4 10             	add    esp,0x10
c001ea10:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001ea17:	74 69                	je     c001ea82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ea19:	83 ec 0c             	sub    esp,0xc
c001ea1c:	68 fc 51 02 c0       	push   0xc00251fc
c001ea21:	e8 eb b2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001ea26:	83 c4 10             	add    esp,0x10
c001ea29:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001ea30:	75 50                	jne    c001ea82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ea32:	e4 60                	in     al,0x60
c001ea34:	3c 1c                	cmp    al,0x1c
c001ea36:	74 04                	je     c001ea3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ea38:	3c 5a                	cmp    al,0x5a
c001ea3a:	75 f6                	jne    c001ea32 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001ea3c:	e4 60                	in     al,0x60
c001ea3e:	3c 5a                	cmp    al,0x5a
c001ea40:	74 fa                	je     c001ea3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ea42:	3c 1c                	cmp    al,0x1c
c001ea44:	74 f6                	je     c001ea3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001ea46:	eb 3a                	jmp    c001ea82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ea48:	83 f8 04             	cmp    eax,0x4
c001ea4b:	75 35                	jne    c001ea82 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001ea4d:	50                   	push   eax
c001ea4e:	53                   	push   ebx
c001ea4f:	57                   	push   edi
c001ea50:	56                   	push   esi
c001ea51:	e8 58 fd ff ff       	call   c001e7ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ea56:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ea5d:	e8 55 b2 fe ff       	call   c0009cb7 <malloc>
c001ea62:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea65:	89 c7                	mov    edi,eax
c001ea67:	e8 ba 17 00 00       	call   c0020226 <SATAPI::SATAPI()>
c001ea6c:	5a                   	pop    edx
c001ea6d:	59                   	pop    ecx
c001ea6e:	57                   	push   edi
c001ea6f:	56                   	push   esi
c001ea70:	e8 cd f9 fe ff       	call   c000e442 <Device::addChild(Device*)>
c001ea75:	8b 07                	mov    eax,DWORD PTR [edi]
c001ea77:	56                   	push   esi
c001ea78:	6a 00                	push   0x0
c001ea7a:	53                   	push   ebx
c001ea7b:	57                   	push   edi
c001ea7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ea7f:	83 c4 20             	add    esp,0x20
c001ea82:	d1 ed                	shr    ebp,1
c001ea84:	43                   	inc    ebx
c001ea85:	83 fb 20             	cmp    ebx,0x20
c001ea88:	0f 85 70 fe ff ff    	jne    c001e8fe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001ea8e:	83 c4 0c             	add    esp,0xc
c001ea91:	5b                   	pop    ebx
c001ea92:	5e                   	pop    esi
c001ea93:	5f                   	pop    edi
c001ea94:	5d                   	pop    ebp
c001ea95:	c3                   	ret    

c001ea96 <SATABus::open(int, int, void*)>:
c001ea96:	53                   	push   ebx
c001ea97:	83 ec 10             	sub    esp,0x10
c001ea9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea9e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001eaa4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eaaa:	50                   	push   eax
c001eaab:	68 11 52 02 c0       	push   0xc0025211
c001eab0:	e8 10 e5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001eab5:	58                   	pop    eax
c001eab6:	5a                   	pop    edx
c001eab7:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001eabd:	53                   	push   ebx
c001eabe:	e8 f1 fd ff ff       	call   c001e8b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001eac3:	31 c0                	xor    eax,eax
c001eac5:	83 c4 18             	add    esp,0x18
c001eac8:	5b                   	pop    ebx
c001eac9:	c3                   	ret    

c001eaca <ATA::close(int, int, void*)>:
c001eaca:	83 ec 0c             	sub    esp,0xc
c001eacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ead7:	85 c0                	test   eax,eax
c001ead9:	74 0c                	je     c001eae7 <ATA::close(int, int, void*)+0x1d>
c001eadb:	83 ec 0c             	sub    esp,0xc
c001eade:	8b 10                	mov    edx,DWORD PTR [eax]
c001eae0:	50                   	push   eax
c001eae1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001eae4:	83 c4 10             	add    esp,0x10
c001eae7:	31 c0                	xor    eax,eax
c001eae9:	83 c4 0c             	add    esp,0xc
c001eaec:	c3                   	ret    
c001eaed:	90                   	nop

c001eaee <ATA::powerSaving(PowerSavingLevel)>:
c001eaee:	c3                   	ret    
c001eaef:	90                   	nop

c001eaf0 <ATA::ATA()>:
c001eaf0:	83 ec 0c             	sub    esp,0xc
c001eaf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf7:	83 ec 04             	sub    esp,0x4
c001eafa:	68 00 02 00 00       	push   0x200
c001eaff:	68 af 53 02 c0       	push   0xc00253af
c001eb04:	50                   	push   eax
c001eb05:	e8 70 fd fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001eb0a:	83 c4 10             	add    esp,0x10
c001eb0d:	ba a4 52 02 c0       	mov    edx,0xc00252a4
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	89 10                	mov    DWORD PTR [eax],edx
c001eb18:	90                   	nop
c001eb19:	83 c4 0c             	add    esp,0xc
c001eb1c:	c3                   	ret    
c001eb1d:	90                   	nop

c001eb1e <ATA::flush(bool)>:
c001eb1e:	53                   	push   ebx
c001eb1f:	83 ec 08             	sub    esp,0x8
c001eb22:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001eb27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb2b:	19 c0                	sbb    eax,eax
c001eb2d:	83 e0 fd             	and    eax,0xfffffffd
c001eb30:	05 ea 00 00 00       	add    eax,0xea
c001eb35:	50                   	push   eax
c001eb36:	6a 07                	push   0x7
c001eb38:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb3f:	50                   	push   eax
c001eb40:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb46:	e8 0b f0 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb4b:	83 c4 0c             	add    esp,0xc
c001eb4e:	6a 00                	push   0x0
c001eb50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb57:	50                   	push   eax
c001eb58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eb5e:	e8 a7 fa ff ff       	call   c001e60a <IDE::polling(unsigned char, unsigned int)>
c001eb63:	83 c4 18             	add    esp,0x18
c001eb66:	5b                   	pop    ebx
c001eb67:	c3                   	ret    

c001eb68 <ATA::readyForCommand()>:
c001eb68:	56                   	push   esi
c001eb69:	53                   	push   ebx
c001eb6a:	53                   	push   ebx
c001eb6b:	31 db                	xor    ebx,ebx
c001eb6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eb71:	51                   	push   ecx
c001eb72:	6a 0c                	push   0xc
c001eb74:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001eb7b:	50                   	push   eax
c001eb7c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eb82:	e8 8f f0 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	a8 88                	test   al,0x88
c001eb8c:	74 1f                	je     c001ebad <ATA::readyForCommand()+0x45>
c001eb8e:	43                   	inc    ebx
c001eb8f:	83 fb 63             	cmp    ebx,0x63
c001eb92:	7e dd                	jle    c001eb71 <ATA::readyForCommand()+0x9>
c001eb94:	83 ec 0c             	sub    esp,0xc
c001eb97:	6a 0a                	push   0xa
c001eb99:	e8 36 81 ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001eba7:	75 c8                	jne    c001eb71 <ATA::readyForCommand()+0x9>
c001eba9:	31 c0                	xor    eax,eax
c001ebab:	eb 02                	jmp    c001ebaf <ATA::readyForCommand()+0x47>
c001ebad:	b0 01                	mov    al,0x1
c001ebaf:	5a                   	pop    edx
c001ebb0:	5b                   	pop    ebx
c001ebb1:	5e                   	pop    esi
c001ebb2:	c3                   	ret    
c001ebb3:	90                   	nop

c001ebb4 <ATA::access(unsigned long long, int, void*, bool)>:
c001ebb4:	55                   	push   ebp
c001ebb5:	57                   	push   edi
c001ebb6:	56                   	push   esi
c001ebb7:	53                   	push   ebx
c001ebb8:	83 ec 38             	sub    esp,0x38
c001ebbb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ebbf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ebc3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ebc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ebcb:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ebcf:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ebd3:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ebd7:	68 50 52 02 c0       	push   0xc0025250
c001ebdc:	e8 e4 e3 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ebe1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ebe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ebf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ebf8:	c1 e0 06             	shl    eax,0x6
c001ebfb:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ec03:	74 5d                	je     c001ec62 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001ec05:	89 fa                	mov    edx,edi
c001ec07:	89 f0                	mov    eax,esi
c001ec09:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ec0d:	c1 ea 1c             	shr    edx,0x1c
c001ec10:	89 d1                	mov    ecx,edx
c001ec12:	09 c1                	or     ecx,eax
c001ec14:	74 25                	je     c001ec3b <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001ec16:	31 ed                	xor    ebp,ebp
c001ec18:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001ec1f:	89 fa                	mov    edx,edi
c001ec21:	89 f0                	mov    eax,esi
c001ec23:	0f ad d0             	shrd   eax,edx,cl
c001ec26:	d3 ea                	shr    edx,cl
c001ec28:	f6 c1 20             	test   cl,0x20
c001ec2b:	74 02                	je     c001ec2f <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001ec2d:	89 d0                	mov    eax,edx
c001ec2f:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001ec33:	45                   	inc    ebp
c001ec34:	83 fd 06             	cmp    ebp,0x6
c001ec37:	75 df                	jne    c001ec18 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001ec39:	eb 76                	jmp    c001ecb1 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001ec3b:	89 f0                	mov    eax,esi
c001ec3d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001ec42:	89 fa                	mov    edx,edi
c001ec44:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ec4b:	0f ac d0 10          	shrd   eax,edx,0x10
c001ec4f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ec54:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ec58:	c1 ee 18             	shr    esi,0x18
c001ec5b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ec60:	eb 56                	jmp    c001ecb8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ec62:	6a 00                	push   0x0
c001ec64:	6a 3f                	push   0x3f
c001ec66:	57                   	push   edi
c001ec67:	56                   	push   esi
c001ec68:	e8 d3 27 00 00       	call   c0021440 <__umoddi3>
c001ec6d:	83 c4 10             	add    esp,0x10
c001ec70:	40                   	inc    eax
c001ec71:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ec75:	6a 00                	push   0x0
c001ec77:	68 f0 03 00 00       	push   0x3f0
c001ec7c:	57                   	push   edi
c001ec7d:	56                   	push   esi
c001ec7e:	e8 bd 26 00 00       	call   c0021340 <__udivdi3>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ec8b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ec92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ec97:	6a 00                	push   0x0
c001ec99:	6a 3f                	push   0x3f
c001ec9b:	57                   	push   edi
c001ec9c:	56                   	push   esi
c001ec9d:	e8 9e 26 00 00       	call   c0021340 <__udivdi3>
c001eca2:	83 c4 10             	add    esp,0x10
c001eca5:	89 c6                	mov    esi,eax
c001eca7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ecac:	83 e6 0f             	and    esi,0xf
c001ecaf:	eb 07                	jmp    c001ecb8 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ecb1:	31 f6                	xor    esi,esi
c001ecb3:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ecb8:	bf 01 00 00 00       	mov    edi,0x1
c001ecbd:	50                   	push   eax
c001ecbe:	6a 00                	push   0x0
c001ecc0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecc7:	50                   	push   eax
c001ecc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eccc:	e8 8d f0 ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001ecd1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ecd4:	e8 8f fe ff ff       	call   c001eb68 <ATA::readyForCommand()>
c001ecd9:	83 c4 10             	add    esp,0x10
c001ecdc:	84 c0                	test   al,al
c001ecde:	0f 84 bc 02 00 00    	je     c001efa0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ece4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ecea:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ecf0:	c1 e0 04             	shl    eax,0x4
c001ecf3:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ecfa:	09 c6                	or     esi,eax
c001ecfc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed01:	75 05                	jne    c001ed08 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ed03:	83 ce a0             	or     esi,0xffffffa0
c001ed06:	eb 03                	jmp    c001ed0b <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ed08:	83 ce e0             	or     esi,0xffffffe0
c001ed0b:	89 f0                	mov    eax,esi
c001ed0d:	0f b6 f0             	movzx  esi,al
c001ed10:	56                   	push   esi
c001ed11:	6a 06                	push   0x6
c001ed13:	51                   	push   ecx
c001ed14:	52                   	push   edx
c001ed15:	e8 3c ee ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed1a:	83 c4 10             	add    esp,0x10
c001ed1d:	6a 00                	push   0x0
c001ed1f:	6a 01                	push   0x1
c001ed21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed28:	50                   	push   eax
c001ed29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed2f:	e8 22 ee ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ed3c:	75 6e                	jne    c001edac <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ed3e:	6a 00                	push   0x0
c001ed40:	6a 08                	push   0x8
c001ed42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed49:	50                   	push   eax
c001ed4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed50:	e8 01 ee ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed55:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ed5a:	50                   	push   eax
c001ed5b:	6a 09                	push   0x9
c001ed5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed64:	50                   	push   eax
c001ed65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed6b:	e8 e6 ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed70:	83 c4 20             	add    esp,0x20
c001ed73:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ed78:	50                   	push   eax
c001ed79:	6a 0a                	push   0xa
c001ed7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed82:	50                   	push   eax
c001ed83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed89:	e8 c8 ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed8e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ed93:	50                   	push   eax
c001ed94:	6a 0b                	push   0xb
c001ed96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed9d:	50                   	push   eax
c001ed9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eda4:	e8 ad ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eda9:	83 c4 20             	add    esp,0x20
c001edac:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001edb1:	50                   	push   eax
c001edb2:	6a 02                	push   0x2
c001edb4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edbb:	50                   	push   eax
c001edbc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edc2:	e8 8f ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc7:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001edcc:	50                   	push   eax
c001edcd:	6a 03                	push   0x3
c001edcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edd6:	50                   	push   eax
c001edd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eddd:	e8 74 ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede2:	83 c4 20             	add    esp,0x20
c001ede5:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001edea:	50                   	push   eax
c001edeb:	6a 04                	push   0x4
c001eded:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001edf4:	50                   	push   eax
c001edf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001edfb:	e8 56 ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee00:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ee05:	50                   	push   eax
c001ee06:	6a 05                	push   0x5
c001ee08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee0f:	50                   	push   eax
c001ee10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee16:	e8 3b ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee1b:	83 c4 20             	add    esp,0x20
c001ee1e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ee23:	0f 94 c0             	sete   al
c001ee26:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ee2b:	74 09                	je     c001ee36 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001ee2d:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001ee34:	eb 07                	jmp    c001ee3d <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001ee36:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001ee3d:	0f b6 c0             	movzx  eax,al
c001ee40:	50                   	push   eax
c001ee41:	6a 07                	push   0x7
c001ee43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee4a:	50                   	push   eax
c001ee4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee51:	e8 00 ed ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee56:	c7 04 24 5d 52 02 c0 	mov    DWORD PTR [esp],0xc002525d
c001ee5d:	e8 63 e1 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ee62:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	85 f6                	test   esi,esi
c001ee6b:	0f 84 f7 00 00 00    	je     c001ef68 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001ee71:	83 ec 0c             	sub    esp,0xc
c001ee74:	68 60 52 02 c0       	push   0xc0025260
c001ee79:	e8 47 e1 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ee7e:	83 c4 0c             	add    esp,0xc
c001ee81:	6a 01                	push   0x1
c001ee83:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ee8a:	50                   	push   eax
c001ee8b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ee91:	e8 74 f7 ff ff       	call   c001e60a <IDE::polling(unsigned char, unsigned int)>
c001ee96:	c7 04 24 63 52 02 c0 	mov    DWORD PTR [esp],0xc0025263
c001ee9d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eea1:	e8 1f e1 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001eea6:	83 c4 10             	add    esp,0x10
c001eea9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001eead:	84 c0                	test   al,al
c001eeaf:	74 2b                	je     c001eedc <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001eeb1:	0f b6 f8             	movzx  edi,al
c001eeb4:	57                   	push   edi
c001eeb5:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001eebc:	50                   	push   eax
c001eebd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eec4:	50                   	push   eax
c001eec5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001eecb:	e8 8a f6 ff ff       	call   c001e55a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001eed0:	c7 04 24 66 52 02 c0 	mov    DWORD PTR [esp],0xc0025266
c001eed7:	e9 bc 00 00 00       	jmp    c001ef98 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001eedc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eee1:	74 50                	je     c001ef33 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001eee3:	83 ec 0c             	sub    esp,0xc
c001eee6:	31 ed                	xor    ebp,ebp
c001eee8:	68 71 52 02 c0       	push   0xc0025271
c001eeed:	e8 d3 e0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001eef2:	83 c4 10             	add    esp,0x10
c001eef5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001eef9:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001eefd:	50                   	push   eax
c001eefe:	50                   	push   eax
c001eeff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef06:	50                   	push   eax
c001ef07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef0d:	e8 32 ec ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001ef12:	89 c2                	mov    edx,eax
c001ef14:	89 f8                	mov    eax,edi
c001ef16:	66 ef                	out    dx,ax
c001ef18:	45                   	inc    ebp
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ef22:	75 d1                	jne    c001eef5 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ef24:	83 ec 0c             	sub    esp,0xc
c001ef27:	68 74 52 02 c0       	push   0xc0025274
c001ef2c:	e8 94 e0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ef31:	eb 24                	jmp    c001ef57 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ef33:	51                   	push   ecx
c001ef34:	51                   	push   ecx
c001ef35:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ef3c:	50                   	push   eax
c001ef3d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ef43:	e8 fc eb ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001ef48:	b9 00 01 00 00       	mov    ecx,0x100
c001ef4d:	89 c2                	mov    edx,eax
c001ef4f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ef53:	fc                   	cld    
c001ef54:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ef57:	83 c4 10             	add    esp,0x10
c001ef5a:	4e                   	dec    esi
c001ef5b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ef63:	e9 01 ff ff ff       	jmp    c001ee69 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ef68:	31 ff                	xor    edi,edi
c001ef6a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ef6f:	74 2f                	je     c001efa0 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ef71:	83 ec 0c             	sub    esp,0xc
c001ef74:	68 77 52 02 c0       	push   0xc0025277
c001ef79:	e8 47 e0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ef7e:	58                   	pop    eax
c001ef7f:	31 c0                	xor    eax,eax
c001ef81:	5a                   	pop    edx
c001ef82:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ef87:	0f 94 c0             	sete   al
c001ef8a:	50                   	push   eax
c001ef8b:	53                   	push   ebx
c001ef8c:	e8 8d fb ff ff       	call   c001eb1e <ATA::flush(bool)>
c001ef91:	c7 04 24 7a 52 02 c0 	mov    DWORD PTR [esp],0xc002527a
c001ef98:	e8 28 e0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ef9d:	83 c4 10             	add    esp,0x10
c001efa0:	83 c4 2c             	add    esp,0x2c
c001efa3:	89 f8                	mov    eax,edi
c001efa5:	5b                   	pop    ebx
c001efa6:	5e                   	pop    esi
c001efa7:	5f                   	pop    edi
c001efa8:	5d                   	pop    ebp
c001efa9:	c3                   	ret    

c001efaa <ATA::read(unsigned long long, int, void*)>:
c001efaa:	57                   	push   edi
c001efab:	b8 04 00 00 00       	mov    eax,0x4
c001efb0:	56                   	push   esi
c001efb1:	53                   	push   ebx
c001efb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001efb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001efba:	8d 7a ff             	lea    edi,[edx-0x1]
c001efbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001efc1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001efc5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001efcb:	77 25                	ja     c001eff2 <ATA::read(unsigned long long, int, void*)+0x48>
c001efcd:	b8 06 00 00 00       	mov    eax,0x6
c001efd2:	85 f6                	test   esi,esi
c001efd4:	74 1c                	je     c001eff2 <ATA::read(unsigned long long, int, void*)+0x48>
c001efd6:	50                   	push   eax
c001efd7:	50                   	push   eax
c001efd8:	6a 00                	push   0x0
c001efda:	56                   	push   esi
c001efdb:	52                   	push   edx
c001efdc:	53                   	push   ebx
c001efdd:	51                   	push   ecx
c001efde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001efe2:	e8 cd fb ff ff       	call   c001ebb4 <ATA::access(unsigned long long, int, void*, bool)>
c001efe7:	83 c4 20             	add    esp,0x20
c001efea:	85 c0                	test   eax,eax
c001efec:	0f 95 c0             	setne  al
c001efef:	0f b6 c0             	movzx  eax,al
c001eff2:	5b                   	pop    ebx
c001eff3:	5e                   	pop    esi
c001eff4:	5f                   	pop    edi
c001eff5:	c3                   	ret    

c001eff6 <ATA::write(unsigned long long, int, void*)>:
c001eff6:	55                   	push   ebp
c001eff7:	57                   	push   edi
c001eff8:	56                   	push   esi
c001eff9:	53                   	push   ebx
c001effa:	83 ec 18             	sub    esp,0x18
c001effd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f001:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f005:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f009:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f00d:	68 7d 52 02 c0       	push   0xc002527d
c001f012:	e8 ae df fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f017:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f01a:	83 c4 10             	add    esp,0x10
c001f01d:	b8 04 00 00 00       	mov    eax,0x4
c001f022:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f028:	77 25                	ja     c001f04f <ATA::write(unsigned long long, int, void*)+0x59>
c001f02a:	b8 06 00 00 00       	mov    eax,0x6
c001f02f:	85 f6                	test   esi,esi
c001f031:	74 1c                	je     c001f04f <ATA::write(unsigned long long, int, void*)+0x59>
c001f033:	50                   	push   eax
c001f034:	50                   	push   eax
c001f035:	6a 01                	push   0x1
c001f037:	56                   	push   esi
c001f038:	53                   	push   ebx
c001f039:	55                   	push   ebp
c001f03a:	57                   	push   edi
c001f03b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f03f:	e8 70 fb ff ff       	call   c001ebb4 <ATA::access(unsigned long long, int, void*, bool)>
c001f044:	83 c4 20             	add    esp,0x20
c001f047:	85 c0                	test   eax,eax
c001f049:	0f 95 c0             	setne  al
c001f04c:	0f b6 c0             	movzx  eax,al
c001f04f:	83 c4 0c             	add    esp,0xc
c001f052:	5b                   	pop    ebx
c001f053:	5e                   	pop    esi
c001f054:	5f                   	pop    edi
c001f055:	5d                   	pop    ebp
c001f056:	c3                   	ret    
c001f057:	90                   	nop

c001f058 <ATA::detectCHS()>:
c001f058:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f05c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f062:	c1 e0 06             	shl    eax,0x6
c001f065:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f06b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f075:	c7 44 24 04 89 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025289
c001f07d:	e9 f5 42 ff ff       	jmp    c0013377 <Krnl::panic(char const*)>

c001f082 <ATA::open(int, int, void*)>:
c001f082:	53                   	push   ebx
c001f083:	83 ec 08             	sub    esp,0x8
c001f086:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f08a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f08e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f092:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f098:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f09e:	c1 e0 06             	shl    eax,0x6
c001f0a1:	01 d0                	add    eax,edx
c001f0a3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f0aa:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f0b0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f0b7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f0c1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f0c7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f0ce:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f0d5:	75 0c                	jne    c001f0e3 <ATA::open(int, int, void*)+0x61>
c001f0d7:	83 ec 0c             	sub    esp,0xc
c001f0da:	53                   	push   ebx
c001f0db:	e8 78 ff ff ff       	call   c001f058 <ATA::detectCHS()>
c001f0e0:	83 c4 10             	add    esp,0x10
c001f0e3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f0e9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f0ef:	c1 e0 06             	shl    eax,0x6
c001f0f2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f0f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f103:	d1 e8                	shr    eax,1
c001f105:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f10b:	6a 04                	push   0x4
c001f10d:	6a 0c                	push   0xc
c001f10f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f116:	50                   	push   eax
c001f117:	52                   	push   edx
c001f118:	e8 39 ea ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f11d:	90                   	nop
c001f11e:	90                   	nop
c001f11f:	6a 00                	push   0x0
c001f121:	6a 0c                	push   0xc
c001f123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f12a:	50                   	push   eax
c001f12b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f131:	e8 20 ea ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f136:	83 c4 14             	add    esp,0x14
c001f139:	53                   	push   ebx
c001f13a:	e8 a3 f7 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c001f13f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f142:	e8 2f 08 ff ff       	call   c000f976 <createPartitionsForDisk(PhysicalDisk*)>
c001f147:	31 c0                	xor    eax,eax
c001f149:	83 c4 18             	add    esp,0x18
c001f14c:	5b                   	pop    ebx
c001f14d:	c3                   	ret    

c001f14e <ATAPI::write(unsigned long long, int, void*)>:
c001f14e:	b8 03 00 00 00       	mov    eax,0x3
c001f153:	c3                   	ret    

c001f154 <ATAPI::close(int, int, void*)>:
c001f154:	83 ec 0c             	sub    esp,0xc
c001f157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f15b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f161:	85 c0                	test   eax,eax
c001f163:	74 0c                	je     c001f171 <ATAPI::close(int, int, void*)+0x1d>
c001f165:	83 ec 0c             	sub    esp,0xc
c001f168:	8b 10                	mov    edx,DWORD PTR [eax]
c001f16a:	50                   	push   eax
c001f16b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f16e:	83 c4 10             	add    esp,0x10
c001f171:	31 c0                	xor    eax,eax
c001f173:	83 c4 0c             	add    esp,0xc
c001f176:	c3                   	ret    
c001f177:	90                   	nop

c001f178 <ATAPI::ATAPI()>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f17f:	83 ec 04             	sub    esp,0x4
c001f182:	68 00 08 00 00       	push   0x800
c001f187:	68 89 55 02 c0       	push   0xc0025589
c001f18c:	50                   	push   eax
c001f18d:	e8 e8 f6 fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f192:	83 c4 10             	add    esp,0x10
c001f195:	ba 1c 53 02 c0       	mov    edx,0xc002531c
c001f19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f19e:	89 10                	mov    DWORD PTR [eax],edx
c001f1a0:	90                   	nop
c001f1a1:	83 c4 0c             	add    esp,0xc
c001f1a4:	c3                   	ret    
c001f1a5:	90                   	nop

c001f1a6 <ATAPI::readyForCommand()>:
c001f1a6:	56                   	push   esi
c001f1a7:	53                   	push   ebx
c001f1a8:	53                   	push   ebx
c001f1a9:	31 db                	xor    ebx,ebx
c001f1ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f1af:	51                   	push   ecx
c001f1b0:	6a 0c                	push   0xc
c001f1b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f1b9:	50                   	push   eax
c001f1ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f1c0:	e8 51 ea ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001f1c5:	83 c4 10             	add    esp,0x10
c001f1c8:	a8 88                	test   al,0x88
c001f1ca:	74 25                	je     c001f1f1 <ATAPI::readyForCommand()+0x4b>
c001f1cc:	43                   	inc    ebx
c001f1cd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f1d3:	7e da                	jle    c001f1af <ATAPI::readyForCommand()+0x9>
c001f1d5:	83 ec 0c             	sub    esp,0xc
c001f1d8:	68 5e 01 00 00       	push   0x15e
c001f1dd:	e8 f2 7a ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c001f1e2:	83 c4 10             	add    esp,0x10
c001f1e5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f1eb:	75 c2                	jne    c001f1af <ATAPI::readyForCommand()+0x9>
c001f1ed:	31 c0                	xor    eax,eax
c001f1ef:	eb 02                	jmp    c001f1f3 <ATAPI::readyForCommand()+0x4d>
c001f1f1:	b0 01                	mov    al,0x1
c001f1f3:	5a                   	pop    edx
c001f1f4:	5b                   	pop    ebx
c001f1f5:	5e                   	pop    esi
c001f1f6:	c3                   	ret    
c001f1f7:	90                   	nop

c001f1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f1f8:	55                   	push   ebp
c001f1f9:	57                   	push   edi
c001f1fa:	56                   	push   esi
c001f1fb:	53                   	push   ebx
c001f1fc:	83 ec 20             	sub    esp,0x20
c001f1ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f203:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f207:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f20b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f20f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f213:	6a 01                	push   0x1
c001f215:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f21c:	50                   	push   eax
c001f21d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f223:	e8 36 eb ff ff       	call   c001dd5e <IDE::enableIRQs(unsigned char, bool)>
c001f228:	5e                   	pop    esi
c001f229:	58                   	pop    eax
c001f22a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f231:	50                   	push   eax
c001f232:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f238:	e8 f3 e8 ff ff       	call   c001db30 <IDE::prepareInterrupt(unsigned char)>
c001f23d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f240:	e8 61 ff ff ff       	call   c001f1a6 <ATAPI::readyForCommand()>
c001f245:	83 c4 10             	add    esp,0x10
c001f248:	84 c0                	test   al,al
c001f24a:	75 0a                	jne    c001f256 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f24c:	bb 01 00 00 00       	mov    ebx,0x1
c001f251:	e9 57 02 00 00       	jmp    c001f4ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f256:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001f25c:	c1 e0 04             	shl    eax,0x4
c001f25f:	0f b6 c0             	movzx  eax,al
c001f262:	50                   	push   eax
c001f263:	6a 06                	push   0x6
c001f265:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f26c:	50                   	push   eax
c001f26d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f273:	e8 de e8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f278:	6a 00                	push   0x0
c001f27a:	6a 01                	push   0x1
c001f27c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f283:	50                   	push   eax
c001f284:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f28a:	e8 c7 e8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f28f:	83 c4 20             	add    esp,0x20
c001f292:	0f b6 c3             	movzx  eax,bl
c001f295:	0f b6 df             	movzx  ebx,bh
c001f298:	50                   	push   eax
c001f299:	6a 04                	push   0x4
c001f29b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2a2:	50                   	push   eax
c001f2a3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2a9:	e8 a8 e8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2ae:	53                   	push   ebx
c001f2af:	6a 05                	push   0x5
c001f2b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2b8:	50                   	push   eax
c001f2b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2bf:	e8 92 e8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2c4:	83 c4 20             	add    esp,0x20
c001f2c7:	68 a0 00 00 00       	push   0xa0
c001f2cc:	6a 07                	push   0x7
c001f2ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2d5:	50                   	push   eax
c001f2d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2dc:	e8 75 e8 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2e1:	83 c4 0c             	add    esp,0xc
c001f2e4:	6a 01                	push   0x1
c001f2e6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f2ed:	50                   	push   eax
c001f2ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f2f4:	e8 11 f3 ff ff       	call   c001e60a <IDE::polling(unsigned char, unsigned int)>
c001f2f9:	83 c4 10             	add    esp,0x10
c001f2fc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001f302:	84 c0                	test   al,al
c001f304:	74 23                	je     c001f329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f306:	0f b6 d8             	movzx  ebx,al
c001f309:	0f b6 d2             	movzx  edx,dl
c001f30c:	53                   	push   ebx
c001f30d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001f314:	50                   	push   eax
c001f315:	52                   	push   edx
c001f316:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f31c:	e8 39 f2 ff ff       	call   c001e55a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f321:	83 c4 10             	add    esp,0x10
c001f324:	e9 84 01 00 00       	jmp    c001f4ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f329:	0f b6 d2             	movzx  edx,dl
c001f32c:	53                   	push   ebx
c001f32d:	53                   	push   ebx
c001f32e:	52                   	push   edx
c001f32f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f335:	e8 0a e8 ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001f33a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f33e:	b9 06 00 00 00       	mov    ecx,0x6
c001f343:	89 c2                	mov    edx,eax
c001f345:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f348:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f34c:	83 c4 10             	add    esp,0x10
c001f34f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f355:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f35c:	85 db                	test   ebx,ebx
c001f35e:	0f 84 ec 00 00 00    	je     c001f450 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001f364:	51                   	push   ecx
c001f365:	51                   	push   ecx
c001f366:	52                   	push   edx
c001f367:	50                   	push   eax
c001f368:	e8 57 e9 ff ff       	call   c001dcc4 <IDE::waitInterrupt(unsigned char)>
c001f36d:	83 c4 10             	add    esp,0x10
c001f370:	84 c0                	test   al,al
c001f372:	0f 84 d4 fe ff ff    	je     c001f24c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f378:	56                   	push   esi
c001f379:	56                   	push   esi
c001f37a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f381:	50                   	push   eax
c001f382:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f388:	e8 a3 e7 ff ff       	call   c001db30 <IDE::prepareInterrupt(unsigned char)>
c001f38d:	83 c4 0c             	add    esp,0xc
c001f390:	6a 04                	push   0x4
c001f392:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f399:	50                   	push   eax
c001f39a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3a0:	e8 71 e8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001f3a5:	83 c4 0c             	add    esp,0xc
c001f3a8:	89 c6                	mov    esi,eax
c001f3aa:	6a 05                	push   0x5
c001f3ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f3b3:	50                   	push   eax
c001f3b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f3ba:	e8 57 e8 ff ff       	call   c001dc16 <IDE::read(unsigned char, unsigned char)>
c001f3bf:	89 f1                	mov    ecx,esi
c001f3c1:	0f b6 c0             	movzx  eax,al
c001f3c4:	0f b6 f1             	movzx  esi,cl
c001f3c7:	c1 e0 08             	shl    eax,0x8
c001f3ca:	09 c6                	or     esi,eax
c001f3cc:	d1 fe                	sar    esi,1
c001f3ce:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f3d2:	83 c4 10             	add    esp,0x10
c001f3d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001f3da:	74 41                	je     c001f41d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001f3dc:	31 c9                	xor    ecx,ecx
c001f3de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f3e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f3eb:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f3ef:	75 0a                	jne    c001f3fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001f3f1:	01 c9                	add    ecx,ecx
c001f3f3:	01 cd                	add    ebp,ecx
c001f3f5:	4b                   	dec    ebx
c001f3f6:	e9 54 ff ff ff       	jmp    c001f34f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001f3fb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f400:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f404:	51                   	push   ecx
c001f405:	51                   	push   ecx
c001f406:	52                   	push   edx
c001f407:	50                   	push   eax
c001f408:	e8 37 e7 ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001f40d:	89 c2                	mov    edx,eax
c001f40f:	89 f0                	mov    eax,esi
c001f411:	66 ef                	out    dx,ax
c001f413:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f417:	83 c4 10             	add    esp,0x10
c001f41a:	41                   	inc    ecx
c001f41b:	eb c1                	jmp    c001f3de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001f41d:	31 f6                	xor    esi,esi
c001f41f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f425:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f42c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f430:	75 06                	jne    c001f438 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001f432:	01 f6                	add    esi,esi
c001f434:	01 f5                	add    ebp,esi
c001f436:	eb bd                	jmp    c001f3f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001f438:	51                   	push   ecx
c001f439:	51                   	push   ecx
c001f43a:	52                   	push   edx
c001f43b:	50                   	push   eax
c001f43c:	e8 03 e7 ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001f441:	89 c2                	mov    edx,eax
c001f443:	66 ed                	in     ax,dx
c001f445:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f44a:	83 c4 10             	add    esp,0x10
c001f44d:	46                   	inc    esi
c001f44e:	eb cf                	jmp    c001f41f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001f450:	51                   	push   ecx
c001f451:	51                   	push   ecx
c001f452:	52                   	push   edx
c001f453:	50                   	push   eax
c001f454:	e8 6b e8 ff ff       	call   c001dcc4 <IDE::waitInterrupt(unsigned char)>
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	84 c0                	test   al,al
c001f45e:	0f 84 e8 fd ff ff    	je     c001f24c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f464:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f469:	52                   	push   edx
c001f46a:	52                   	push   edx
c001f46b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f472:	50                   	push   eax
c001f473:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f479:	e8 b2 e6 ff ff       	call   c001db30 <IDE::prepareInterrupt(unsigned char)>
c001f47e:	83 c4 10             	add    esp,0x10
c001f481:	50                   	push   eax
c001f482:	50                   	push   eax
c001f483:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f48a:	50                   	push   eax
c001f48b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f491:	e8 ae e6 ff ff       	call   c001db44 <IDE::getBase(unsigned char)>
c001f496:	8d 50 07             	lea    edx,[eax+0x7]
c001f499:	ec                   	in     al,dx
c001f49a:	83 c4 10             	add    esp,0x10
c001f49d:	a8 88                	test   al,0x88
c001f49f:	74 0a                	je     c001f4ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001f4a1:	4b                   	dec    ebx
c001f4a2:	75 dd                	jne    c001f481 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001f4a4:	bb 02 00 00 00       	mov    ebx,0x2
c001f4a9:	eb 02                	jmp    c001f4ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001f4ab:	31 db                	xor    ebx,ebx
c001f4ad:	83 c4 1c             	add    esp,0x1c
c001f4b0:	89 d8                	mov    eax,ebx
c001f4b2:	5b                   	pop    ebx
c001f4b3:	5e                   	pop    esi
c001f4b4:	5f                   	pop    edi
c001f4b5:	5d                   	pop    ebp
c001f4b6:	c3                   	ret    
c001f4b7:	90                   	nop

c001f4b8 <ATAPI::diskRemoved()>:
c001f4b8:	53                   	push   ebx
c001f4b9:	83 ec 14             	sub    esp,0x14
c001f4bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f4c0:	68 d4 52 02 c0       	push   0xc00252d4
c001f4c5:	e8 fb da fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f4ca:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f4d1:	c7 04 24 ea 52 02 c0 	mov    DWORD PTR [esp],0xc00252ea
c001f4d8:	e8 e8 da fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f4dd:	58                   	pop    eax
c001f4de:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f4e4:	e8 0b 02 ff ff       	call   c000f6f4 <LogicalDisk::unmount()>
c001f4e9:	c7 04 24 f9 52 02 c0 	mov    DWORD PTR [esp],0xc00252f9
c001f4f0:	e8 d0 da fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f4f5:	5a                   	pop    edx
c001f4f6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f4fc:	e8 3b 0b ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c001f501:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f507:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f50b:	83 c4 18             	add    esp,0x18
c001f50e:	5b                   	pop    ebx
c001f50f:	e9 18 0b ff ff       	jmp    c001002c <VCache::invalidateReadBuffer()>

c001f514 <ATAPI::eject()>:
c001f514:	57                   	push   edi
c001f515:	b9 03 00 00 00       	mov    ecx,0x3
c001f51a:	53                   	push   ebx
c001f51b:	83 ec 14             	sub    esp,0x14
c001f51e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f522:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f526:	fc                   	cld    
c001f527:	31 c0                	xor    eax,eax
c001f529:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f52b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f530:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f535:	50                   	push   eax
c001f536:	50                   	push   eax
c001f537:	6a 00                	push   0x0
c001f539:	6a 00                	push   0x0
c001f53b:	6a 00                	push   0x0
c001f53d:	6a 02                	push   0x2
c001f53f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f543:	50                   	push   eax
c001f544:	53                   	push   ebx
c001f545:	e8 ae fc ff ff       	call   c001f1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f54a:	83 c4 14             	add    esp,0x14
c001f54d:	53                   	push   ebx
c001f54e:	e8 65 ff ff ff       	call   c001f4b8 <ATAPI::diskRemoved()>
c001f553:	83 c4 24             	add    esp,0x24
c001f556:	31 c0                	xor    eax,eax
c001f558:	5b                   	pop    ebx
c001f559:	5f                   	pop    edi
c001f55a:	c3                   	ret    
c001f55b:	90                   	nop

c001f55c <ATAPI::diskInserted()>:
c001f55c:	83 ec 18             	sub    esp,0x18
c001f55f:	68 95 55 02 c0       	push   0xc0025595
c001f564:	e8 5c da fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f56d:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f574:	83 c4 1c             	add    esp,0x1c
c001f577:	c3                   	ret    

c001f578 <ATAPI::detectMedia()>:
c001f578:	56                   	push   esi
c001f579:	53                   	push   ebx
c001f57a:	83 ec 28             	sub    esp,0x28
c001f57d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f581:	6a 0c                	push   0xc
c001f583:	6a 00                	push   0x0
c001f585:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f589:	56                   	push   esi
c001f58a:	e8 ed 10 fe ff       	call   c000067c <memset>
c001f58f:	58                   	pop    eax
c001f590:	5a                   	pop    edx
c001f591:	6a 00                	push   0x0
c001f593:	6a 00                	push   0x0
c001f595:	6a 00                	push   0x0
c001f597:	6a 00                	push   0x0
c001f599:	56                   	push   esi
c001f59a:	53                   	push   ebx
c001f59b:	e8 58 fc ff ff       	call   c001f1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f5a0:	83 c4 1c             	add    esp,0x1c
c001f5a3:	6a 0c                	push   0xc
c001f5a5:	6a 00                	push   0x0
c001f5a7:	56                   	push   esi
c001f5a8:	e8 cf 10 fe ff       	call   c000067c <memset>
c001f5ad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f5b2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f5b7:	59                   	pop    ecx
c001f5b8:	58                   	pop    eax
c001f5b9:	6a 01                	push   0x1
c001f5bb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f5bf:	50                   	push   eax
c001f5c0:	6a 00                	push   0x0
c001f5c2:	6a 12                	push   0x12
c001f5c4:	56                   	push   esi
c001f5c5:	53                   	push   ebx
c001f5c6:	e8 2d fc ff ff       	call   c001f1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f5cb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f5cf:	83 c4 20             	add    esp,0x20
c001f5d2:	83 e0 7f             	and    eax,0x7f
c001f5d5:	3c 70                	cmp    al,0x70
c001f5d7:	74 15                	je     c001f5ee <ATAPI::detectMedia()+0x76>
c001f5d9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f5e0:	75 0c                	jne    c001f5ee <ATAPI::detectMedia()+0x76>
c001f5e2:	83 ec 0c             	sub    esp,0xc
c001f5e5:	53                   	push   ebx
c001f5e6:	e8 71 ff ff ff       	call   c001f55c <ATAPI::diskInserted()>
c001f5eb:	83 c4 10             	add    esp,0x10
c001f5ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f5f2:	83 e0 0f             	and    eax,0xf
c001f5f5:	3c 02                	cmp    al,0x2
c001f5f7:	75 1b                	jne    c001f614 <ATAPI::detectMedia()+0x9c>
c001f5f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f5fe:	75 2d                	jne    c001f62d <ATAPI::detectMedia()+0xb5>
c001f600:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f607:	74 24                	je     c001f62d <ATAPI::detectMedia()+0xb5>
c001f609:	83 ec 0c             	sub    esp,0xc
c001f60c:	53                   	push   ebx
c001f60d:	e8 a6 fe ff ff       	call   c001f4b8 <ATAPI::diskRemoved()>
c001f612:	eb 16                	jmp    c001f62a <ATAPI::detectMedia()+0xb2>
c001f614:	84 c0                	test   al,al
c001f616:	75 15                	jne    c001f62d <ATAPI::detectMedia()+0xb5>
c001f618:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f61f:	75 0c                	jne    c001f62d <ATAPI::detectMedia()+0xb5>
c001f621:	83 ec 0c             	sub    esp,0xc
c001f624:	53                   	push   ebx
c001f625:	e8 32 ff ff ff       	call   c001f55c <ATAPI::diskInserted()>
c001f62a:	83 c4 10             	add    esp,0x10
c001f62d:	83 c4 24             	add    esp,0x24
c001f630:	5b                   	pop    ebx
c001f631:	5e                   	pop    esi
c001f632:	c3                   	ret    
c001f633:	90                   	nop

c001f634 <ATAPI::open(int, int, void*)>:
c001f634:	56                   	push   esi
c001f635:	53                   	push   ebx
c001f636:	50                   	push   eax
c001f637:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f63b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f63f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f643:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f649:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f64f:	c1 e0 06             	shl    eax,0x6
c001f652:	01 d0                	add    eax,edx
c001f654:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f65b:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f661:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f668:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f672:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f678:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f67f:	6a 04                	push   0x4
c001f681:	6a 0c                	push   0xc
c001f683:	51                   	push   ecx
c001f684:	52                   	push   edx
c001f685:	e8 cc e4 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f68a:	90                   	nop
c001f68b:	90                   	nop
c001f68c:	6a 00                	push   0x0
c001f68e:	6a 0c                	push   0xc
c001f690:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f697:	50                   	push   eax
c001f698:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f69e:	e8 b3 e4 ff ff       	call   c001db56 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6a3:	83 c4 14             	add    esp,0x14
c001f6a6:	68 74 01 00 00       	push   0x174
c001f6ab:	e8 07 a6 fe ff       	call   c0009cb7 <malloc>
c001f6b0:	83 c4 0c             	add    esp,0xc
c001f6b3:	89 c6                	mov    esi,eax
c001f6b5:	6a 00                	push   0x0
c001f6b7:	68 ff ff ff 7f       	push   0x7fffffff
c001f6bc:	6a 00                	push   0x0
c001f6be:	6a 00                	push   0x0
c001f6c0:	53                   	push   ebx
c001f6c1:	68 72 56 02 c0       	push   0xc0025672
c001f6c6:	50                   	push   eax
c001f6c7:	e8 34 fe fe ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f6cc:	83 c4 14             	add    esp,0x14
c001f6cf:	56                   	push   esi
c001f6d0:	e8 e1 fe fe ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c001f6d5:	5a                   	pop    edx
c001f6d6:	0f be c0             	movsx  eax,al
c001f6d9:	59                   	pop    ecx
c001f6da:	50                   	push   eax
c001f6db:	68 07 53 02 c0       	push   0xc0025307
c001f6e0:	e8 e0 d8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f6e5:	58                   	pop    eax
c001f6e6:	5a                   	pop    edx
c001f6e7:	56                   	push   esi
c001f6e8:	53                   	push   ebx
c001f6e9:	e8 54 ed fe ff       	call   c000e442 <Device::addChild(Device*)>
c001f6ee:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f6f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f6f7:	e8 e6 f1 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c001f6fc:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f703:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f706:	e8 6d fe ff ff       	call   c001f578 <ATAPI::detectMedia()>
c001f70b:	83 c4 14             	add    esp,0x14
c001f70e:	31 c0                	xor    eax,eax
c001f710:	5b                   	pop    ebx
c001f711:	5e                   	pop    esi
c001f712:	c3                   	ret    
c001f713:	90                   	nop

c001f714 <ATAPI::read(unsigned long long, int, void*)>:
c001f714:	55                   	push   ebp
c001f715:	57                   	push   edi
c001f716:	56                   	push   esi
c001f717:	53                   	push   ebx
c001f718:	83 ec 1c             	sub    esp,0x1c
c001f71b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f71f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f723:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f727:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f72e:	74 41                	je     c001f771 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f730:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f734:	b9 03 00 00 00       	mov    ecx,0x3
c001f739:	fc                   	cld    
c001f73a:	31 c0                	xor    eax,eax
c001f73c:	86 fb                	xchg   bl,bh
c001f73e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f740:	c1 c3 10             	rol    ebx,0x10
c001f743:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f748:	89 e8                	mov    eax,ebp
c001f74a:	86 fb                	xchg   bl,bh
c001f74c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f750:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f754:	50                   	push   eax
c001f755:	50                   	push   eax
c001f756:	55                   	push   ebp
c001f757:	c1 e5 0b             	shl    ebp,0xb
c001f75a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f75e:	6a 00                	push   0x0
c001f760:	55                   	push   ebp
c001f761:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f765:	50                   	push   eax
c001f766:	56                   	push   esi
c001f767:	e8 8c fa ff ff       	call   c001f1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f76c:	83 c4 20             	add    esp,0x20
c001f76f:	eb 1a                	jmp    c001f78b <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f771:	83 ec 0c             	sub    esp,0xc
c001f774:	56                   	push   esi
c001f775:	e8 fe fd ff ff       	call   c001f578 <ATAPI::detectMedia()>
c001f77a:	83 c4 10             	add    esp,0x10
c001f77d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f784:	75 aa                	jne    c001f730 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f786:	b8 02 00 00 00       	mov    eax,0x2
c001f78b:	83 c4 1c             	add    esp,0x1c
c001f78e:	5b                   	pop    ebx
c001f78f:	5e                   	pop    esi
c001f790:	5f                   	pop    edi
c001f791:	5d                   	pop    ebp
c001f792:	c3                   	ret    
c001f793:	90                   	nop

c001f794 <SATA::close(int, int, void*)>:
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f7a1:	85 c0                	test   eax,eax
c001f7a3:	74 0c                	je     c001f7b1 <SATA::close(int, int, void*)+0x1d>
c001f7a5:	83 ec 0c             	sub    esp,0xc
c001f7a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001f7aa:	50                   	push   eax
c001f7ab:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f7ae:	83 c4 10             	add    esp,0x10
c001f7b1:	31 c0                	xor    eax,eax
c001f7b3:	83 c4 0c             	add    esp,0xc
c001f7b6:	c3                   	ret    
c001f7b7:	90                   	nop

c001f7b8 <SATA::powerSaving(PowerSavingLevel)>:
c001f7b8:	c3                   	ret    
c001f7b9:	90                   	nop

c001f7ba <SATA::open(int, int, void*)>:
c001f7ba:	56                   	push   esi
c001f7bb:	53                   	push   ebx
c001f7bc:	51                   	push   ecx
c001f7bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f7c1:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f7c8:	74 2d                	je     c001f7f7 <SATA::open(int, int, void*)+0x3d>
c001f7ca:	83 ec 0c             	sub    esp,0xc
c001f7cd:	68 4c 53 02 c0       	push   0xc002534c
c001f7d2:	e8 3a a5 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f7d7:	83 c4 10             	add    esp,0x10
c001f7da:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f7e1:	75 14                	jne    c001f7f7 <SATA::open(int, int, void*)+0x3d>
c001f7e3:	e4 60                	in     al,0x60
c001f7e5:	3c 5a                	cmp    al,0x5a
c001f7e7:	74 04                	je     c001f7ed <SATA::open(int, int, void*)+0x33>
c001f7e9:	3c 1c                	cmp    al,0x1c
c001f7eb:	75 f6                	jne    c001f7e3 <SATA::open(int, int, void*)+0x29>
c001f7ed:	e4 60                	in     al,0x60
c001f7ef:	3c 5a                	cmp    al,0x5a
c001f7f1:	74 fa                	je     c001f7ed <SATA::open(int, int, void*)+0x33>
c001f7f3:	3c 1c                	cmp    al,0x1c
c001f7f5:	74 f6                	je     c001f7ed <SATA::open(int, int, void*)+0x33>
c001f7f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f7fb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f805:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f80b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f819:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f823:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f829:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f830:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f837:	74 2d                	je     c001f866 <SATA::open(int, int, void*)+0xac>
c001f839:	83 ec 0c             	sub    esp,0xc
c001f83c:	68 59 53 02 c0       	push   0xc0025359
c001f841:	e8 cb a4 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f846:	83 c4 10             	add    esp,0x10
c001f849:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f850:	75 14                	jne    c001f866 <SATA::open(int, int, void*)+0xac>
c001f852:	e4 60                	in     al,0x60
c001f854:	3c 1c                	cmp    al,0x1c
c001f856:	74 04                	je     c001f85c <SATA::open(int, int, void*)+0xa2>
c001f858:	3c 5a                	cmp    al,0x5a
c001f85a:	75 f6                	jne    c001f852 <SATA::open(int, int, void*)+0x98>
c001f85c:	e4 60                	in     al,0x60
c001f85e:	3c 5a                	cmp    al,0x5a
c001f860:	74 fa                	je     c001f85c <SATA::open(int, int, void*)+0xa2>
c001f862:	3c 1c                	cmp    al,0x1c
c001f864:	74 f6                	je     c001f85c <SATA::open(int, int, void*)+0xa2>
c001f866:	e8 03 ab fe ff       	call   c000a36e <Phys::allocatePage()>
c001f86b:	89 c6                	mov    esi,eax
c001f86d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f873:	81 c6 00 10 00 00    	add    esi,0x1000
c001f879:	e8 f0 aa fe ff       	call   c000a36e <Phys::allocatePage()>
c001f87e:	39 c6                	cmp    esi,eax
c001f880:	74 10                	je     c001f892 <SATA::open(int, int, void*)+0xd8>
c001f882:	83 ec 0c             	sub    esp,0xc
c001f885:	68 66 53 02 c0       	push   0xc0025366
c001f88a:	e8 e8 3a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001f88f:	83 c4 10             	add    esp,0x10
c001f892:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f899:	74 2d                	je     c001f8c8 <SATA::open(int, int, void*)+0x10e>
c001f89b:	83 ec 0c             	sub    esp,0xc
c001f89e:	68 7a 53 02 c0       	push   0xc002537a
c001f8a3:	e8 69 a4 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f8a8:	83 c4 10             	add    esp,0x10
c001f8ab:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f8b2:	75 14                	jne    c001f8c8 <SATA::open(int, int, void*)+0x10e>
c001f8b4:	e4 60                	in     al,0x60
c001f8b6:	3c 1c                	cmp    al,0x1c
c001f8b8:	74 04                	je     c001f8be <SATA::open(int, int, void*)+0x104>
c001f8ba:	3c 5a                	cmp    al,0x5a
c001f8bc:	75 f6                	jne    c001f8b4 <SATA::open(int, int, void*)+0xfa>
c001f8be:	e4 60                	in     al,0x60
c001f8c0:	3c 5a                	cmp    al,0x5a
c001f8c2:	74 fa                	je     c001f8be <SATA::open(int, int, void*)+0x104>
c001f8c4:	3c 1c                	cmp    al,0x1c
c001f8c6:	74 f6                	je     c001f8be <SATA::open(int, int, void*)+0x104>
c001f8c8:	83 ec 0c             	sub    esp,0xc
c001f8cb:	6a 02                	push   0x2
c001f8cd:	e8 97 c3 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c001f8d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f8d8:	6a 03                	push   0x3
c001f8da:	50                   	push   eax
c001f8db:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f8e1:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c001f8e7:	e8 e8 c9 fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f8ec:	83 c4 20             	add    esp,0x20
c001f8ef:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f8f6:	74 2d                	je     c001f925 <SATA::open(int, int, void*)+0x16b>
c001f8f8:	83 ec 0c             	sub    esp,0xc
c001f8fb:	68 87 53 02 c0       	push   0xc0025387
c001f900:	e8 0c a4 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f905:	83 c4 10             	add    esp,0x10
c001f908:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f90f:	75 14                	jne    c001f925 <SATA::open(int, int, void*)+0x16b>
c001f911:	e4 60                	in     al,0x60
c001f913:	3c 1c                	cmp    al,0x1c
c001f915:	74 04                	je     c001f91b <SATA::open(int, int, void*)+0x161>
c001f917:	3c 5a                	cmp    al,0x5a
c001f919:	75 f6                	jne    c001f911 <SATA::open(int, int, void*)+0x157>
c001f91b:	e4 60                	in     al,0x60
c001f91d:	3c 5a                	cmp    al,0x5a
c001f91f:	74 fa                	je     c001f91b <SATA::open(int, int, void*)+0x161>
c001f921:	3c 1c                	cmp    al,0x1c
c001f923:	74 f6                	je     c001f91b <SATA::open(int, int, void*)+0x161>
c001f925:	83 ec 0c             	sub    esp,0xc
c001f928:	53                   	push   ebx
c001f929:	e8 b4 ef fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c001f92e:	83 c4 10             	add    esp,0x10
c001f931:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f938:	74 2d                	je     c001f967 <SATA::open(int, int, void*)+0x1ad>
c001f93a:	83 ec 0c             	sub    esp,0xc
c001f93d:	68 94 53 02 c0       	push   0xc0025394
c001f942:	e8 ca a3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f951:	75 14                	jne    c001f967 <SATA::open(int, int, void*)+0x1ad>
c001f953:	e4 60                	in     al,0x60
c001f955:	3c 1c                	cmp    al,0x1c
c001f957:	74 04                	je     c001f95d <SATA::open(int, int, void*)+0x1a3>
c001f959:	3c 5a                	cmp    al,0x5a
c001f95b:	75 f6                	jne    c001f953 <SATA::open(int, int, void*)+0x199>
c001f95d:	e4 60                	in     al,0x60
c001f95f:	3c 5a                	cmp    al,0x5a
c001f961:	74 fa                	je     c001f95d <SATA::open(int, int, void*)+0x1a3>
c001f963:	3c 1c                	cmp    al,0x1c
c001f965:	74 f6                	je     c001f95d <SATA::open(int, int, void*)+0x1a3>
c001f967:	83 ec 0c             	sub    esp,0xc
c001f96a:	53                   	push   ebx
c001f96b:	e8 06 00 ff ff       	call   c000f976 <createPartitionsForDisk(PhysicalDisk*)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f97a:	74 2d                	je     c001f9a9 <SATA::open(int, int, void*)+0x1ef>
c001f97c:	83 ec 0c             	sub    esp,0xc
c001f97f:	68 a1 53 02 c0       	push   0xc00253a1
c001f984:	e8 88 a3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f989:	83 c4 10             	add    esp,0x10
c001f98c:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001f993:	75 14                	jne    c001f9a9 <SATA::open(int, int, void*)+0x1ef>
c001f995:	e4 60                	in     al,0x60
c001f997:	3c 1c                	cmp    al,0x1c
c001f999:	74 04                	je     c001f99f <SATA::open(int, int, void*)+0x1e5>
c001f99b:	3c 5a                	cmp    al,0x5a
c001f99d:	75 f6                	jne    c001f995 <SATA::open(int, int, void*)+0x1db>
c001f99f:	e4 60                	in     al,0x60
c001f9a1:	3c 5a                	cmp    al,0x5a
c001f9a3:	74 fa                	je     c001f99f <SATA::open(int, int, void*)+0x1e5>
c001f9a5:	3c 1c                	cmp    al,0x1c
c001f9a7:	74 f6                	je     c001f99f <SATA::open(int, int, void*)+0x1e5>
c001f9a9:	5a                   	pop    edx
c001f9aa:	31 c0                	xor    eax,eax
c001f9ac:	5b                   	pop    ebx
c001f9ad:	5e                   	pop    esi
c001f9ae:	c3                   	ret    
c001f9af:	90                   	nop

c001f9b0 <SATA::SATA()>:
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	83 ec 04             	sub    esp,0x4
c001f9ba:	68 00 02 00 00       	push   0x200
c001f9bf:	68 ae 53 02 c0       	push   0xc00253ae
c001f9c4:	50                   	push   eax
c001f9c5:	e8 b0 ee fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	ba 58 55 02 c0       	mov    edx,0xc0025558
c001f9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d6:	89 10                	mov    DWORD PTR [eax],edx
c001f9d8:	90                   	nop
c001f9d9:	83 c4 0c             	add    esp,0xc
c001f9dc:	c3                   	ret    
c001f9dd:	90                   	nop

c001f9de <SATA::access(unsigned long long, int, void*, bool)>:
c001f9de:	55                   	push   ebp
c001f9df:	57                   	push   edi
c001f9e0:	56                   	push   esi
c001f9e1:	53                   	push   ebx
c001f9e2:	83 ec 2c             	sub    esp,0x2c
c001f9e5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001f9e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f9ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f9f1:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001f9f8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f9fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fa00:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fa04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fa08:	75 19                	jne    c001fa23 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c001fa0a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001fa0f:	7e 41                	jle    c001fa52 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001fa11:	83 ec 0c             	sub    esp,0xc
c001fa14:	68 cd 53 02 c0       	push   0xc00253cd
c001fa19:	e8 59 39 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c001fa1e:	83 c4 10             	add    esp,0x10
c001fa21:	eb 2f                	jmp    c001fa52 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c001fa23:	83 ec 0c             	sub    esp,0xc
c001fa26:	68 be 53 02 c0       	push   0xc00253be
c001fa2b:	e8 e1 a2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fa30:	83 c4 10             	add    esp,0x10
c001fa33:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fa3a:	75 ce                	jne    c001fa0a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fa3c:	e4 60                	in     al,0x60
c001fa3e:	3c 1c                	cmp    al,0x1c
c001fa40:	74 04                	je     c001fa46 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fa42:	3c 5a                	cmp    al,0x5a
c001fa44:	75 f6                	jne    c001fa3c <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c001fa46:	e4 60                	in     al,0x60
c001fa48:	3c 5a                	cmp    al,0x5a
c001fa4a:	74 fa                	je     c001fa46 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fa4c:	3c 1c                	cmp    al,0x1c
c001fa4e:	74 f6                	je     c001fa46 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c001fa50:	eb b8                	jmp    c001fa0a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c001fa52:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fa59:	75 29                	jne    c001fa84 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c001fa5b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fa61:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001fa67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fa6d:	8d 75 02             	lea    esi,[ebp+0x2]
c001fa70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fa74:	c1 e6 07             	shl    esi,0x7
c001fa77:	01 c6                	add    esi,eax
c001fa79:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fa80:	74 4a                	je     c001facc <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fa82:	eb 2f                	jmp    c001fab3 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c001fa84:	83 ec 0c             	sub    esp,0xc
c001fa87:	68 06 54 02 c0       	push   0xc0025406
c001fa8c:	e8 80 a2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fa91:	83 c4 10             	add    esp,0x10
c001fa94:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fa9b:	75 be                	jne    c001fa5b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fa9d:	e4 60                	in     al,0x60
c001fa9f:	3c 1c                	cmp    al,0x1c
c001faa1:	74 04                	je     c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001faa3:	3c 5a                	cmp    al,0x5a
c001faa5:	75 f6                	jne    c001fa9d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c001faa7:	e4 60                	in     al,0x60
c001faa9:	3c 5a                	cmp    al,0x5a
c001faab:	74 fa                	je     c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001faad:	3c 1c                	cmp    al,0x1c
c001faaf:	74 f6                	je     c001faa7 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c001fab1:	eb a8                	jmp    c001fa5b <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c001fab3:	83 ec 0c             	sub    esp,0xc
c001fab6:	68 15 54 02 c0       	push   0xc0025415
c001fabb:	e8 51 a2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fac0:	83 c4 10             	add    esp,0x10
c001fac3:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001faca:	74 3d                	je     c001fb09 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c001facc:	89 e8                	mov    eax,ebp
c001face:	c1 e0 07             	shl    eax,0x7
c001fad1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fad5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fadf:	52                   	push   edx
c001fae0:	52                   	push   edx
c001fae1:	56                   	push   esi
c001fae2:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fae8:	e8 fd eb ff ff       	call   c001e6ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001faed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001faf1:	83 c4 10             	add    esp,0x10
c001faf4:	b8 01 00 00 00       	mov    eax,0x1
c001faf9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fafe:	75 1d                	jne    c001fb1d <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c001fb00:	e9 c8 04 00 00       	jmp    c001ffcd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001fb05:	3c 5a                	cmp    al,0x5a
c001fb07:	74 0c                	je     c001fb15 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fb09:	e4 60                	in     al,0x60
c001fb0b:	3c 1c                	cmp    al,0x1c
c001fb0d:	75 f6                	jne    c001fb05 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c001fb0f:	eb 04                	jmp    c001fb15 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fb11:	3c 1c                	cmp    al,0x1c
c001fb13:	75 b7                	jne    c001facc <SATA::access(unsigned long long, int, void*, bool)+0xee>
c001fb15:	e4 60                	in     al,0x60
c001fb17:	3c 5a                	cmp    al,0x5a
c001fb19:	74 fa                	je     c001fb15 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c001fb1b:	eb f4                	jmp    c001fb11 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c001fb1d:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fb24:	74 3a                	je     c001fb60 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	68 24 54 02 c0       	push   0xc0025424
c001fb2e:	e8 de a1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fb33:	83 c4 10             	add    esp,0x10
c001fb36:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fb3d:	74 0d                	je     c001fb4c <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c001fb3f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fb44:	74 34                	je     c001fb7a <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c001fb46:	eb 1f                	jmp    c001fb67 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c001fb48:	3c 1c                	cmp    al,0x1c
c001fb4a:	74 0c                	je     c001fb58 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fb4c:	e4 60                	in     al,0x60
c001fb4e:	3c 5a                	cmp    al,0x5a
c001fb50:	75 f6                	jne    c001fb48 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c001fb52:	eb 04                	jmp    c001fb58 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fb54:	3c 1c                	cmp    al,0x1c
c001fb56:	75 e7                	jne    c001fb3f <SATA::access(unsigned long long, int, void*, bool)+0x161>
c001fb58:	e4 60                	in     al,0x60
c001fb5a:	3c 5a                	cmp    al,0x5a
c001fb5c:	74 fa                	je     c001fb58 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001fb5e:	eb f4                	jmp    c001fb54 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c001fb60:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fb65:	74 1c                	je     c001fb83 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fb67:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001fb6b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001fb71:	c1 e1 09             	shl    ecx,0x9
c001fb74:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fb78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb7a:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fb81:	75 55                	jne    c001fbd8 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c001fb83:	8d 45 02             	lea    eax,[ebp+0x2]
c001fb86:	c1 e0 07             	shl    eax,0x7
c001fb89:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fb8d:	8b 38                	mov    edi,DWORD PTR [eax]
c001fb8f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fb95:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001fb9b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001fba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba5:	c1 e0 05             	shl    eax,0x5
c001fba8:	01 c7                	add    edi,eax
c001fbaa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fbae:	83 e0 01             	and    eax,0x1
c001fbb1:	c1 e0 06             	shl    eax,0x6
c001fbb4:	88 c2                	mov    dl,al
c001fbb6:	8a 07                	mov    al,BYTE PTR [edi]
c001fbb8:	83 e0 bf             	and    eax,0xffffffbf
c001fbbb:	09 d0                	or     eax,edx
c001fbbd:	88 07                	mov    BYTE PTR [edi],al
c001fbbf:	8b 07                	mov    eax,DWORD PTR [edi]
c001fbc1:	25 e0 ff 00 00       	and    eax,0xffe0
c001fbc6:	0d 05 00 01 00       	or     eax,0x10005
c001fbcb:	89 07                	mov    DWORD PTR [edi],eax
c001fbcd:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fbd4:	74 4d                	je     c001fc23 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fbd6:	eb 32                	jmp    c001fc0a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	68 33 54 02 c0       	push   0xc0025433
c001fbe0:	e8 2c a1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fbe5:	83 c4 10             	add    esp,0x10
c001fbe8:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fbef:	75 92                	jne    c001fb83 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fbf1:	e4 60                	in     al,0x60
c001fbf3:	3c 1c                	cmp    al,0x1c
c001fbf5:	74 04                	je     c001fbfb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fbf7:	3c 5a                	cmp    al,0x5a
c001fbf9:	75 f6                	jne    c001fbf1 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c001fbfb:	e4 60                	in     al,0x60
c001fbfd:	3c 5a                	cmp    al,0x5a
c001fbff:	74 fa                	je     c001fbfb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fc01:	3c 1c                	cmp    al,0x1c
c001fc03:	74 f6                	je     c001fbfb <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001fc05:	e9 79 ff ff ff       	jmp    c001fb83 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c001fc0a:	83 ec 0c             	sub    esp,0xc
c001fc0d:	68 42 54 02 c0       	push   0xc0025442
c001fc12:	e8 fa a0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fc17:	83 c4 10             	add    esp,0x10
c001fc1a:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fc21:	74 3b                	je     c001fc5e <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001fc23:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fc29:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001fc2f:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001fc35:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001fc38:	50                   	push   eax
c001fc39:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c001fc3d:	83 c0 08             	add    eax,0x8
c001fc40:	c1 e0 04             	shl    eax,0x4
c001fc43:	50                   	push   eax
c001fc44:	6a 00                	push   0x0
c001fc46:	56                   	push   esi
c001fc47:	e8 30 0a fe ff       	call   c000067c <memset>
c001fc4c:	83 c4 10             	add    esp,0x10
c001fc4f:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fc56:	74 33                	je     c001fc8b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fc58:	eb 18                	jmp    c001fc72 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c001fc5a:	3c 1c                	cmp    al,0x1c
c001fc5c:	74 0c                	je     c001fc6a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fc5e:	e4 60                	in     al,0x60
c001fc60:	3c 5a                	cmp    al,0x5a
c001fc62:	75 f6                	jne    c001fc5a <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001fc64:	eb 04                	jmp    c001fc6a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fc66:	3c 1c                	cmp    al,0x1c
c001fc68:	75 b9                	jne    c001fc23 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c001fc6a:	e4 60                	in     al,0x60
c001fc6c:	3c 5a                	cmp    al,0x5a
c001fc6e:	74 fa                	je     c001fc6a <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c001fc70:	eb f4                	jmp    c001fc66 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c001fc72:	83 ec 0c             	sub    esp,0xc
c001fc75:	68 51 54 02 c0       	push   0xc0025451
c001fc7a:	e8 92 a0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fc89:	74 48                	je     c001fcd3 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c001fc8b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fc91:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001fc97:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fc9b:	c1 e0 09             	shl    eax,0x9
c001fc9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fca2:	48                   	dec    eax
c001fca3:	25 ff ff 3f 00       	and    eax,0x3fffff
c001fca8:	89 c2                	mov    edx,eax
c001fcaa:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001fcb0:	25 00 00 c0 ff       	and    eax,0xffc00000
c001fcb5:	09 d0                	or     eax,edx
c001fcb7:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001fcbd:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001fcc4:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fccb:	74 33                	je     c001fd00 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fccd:	eb 18                	jmp    c001fce7 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c001fccf:	3c 1c                	cmp    al,0x1c
c001fcd1:	74 0c                	je     c001fcdf <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fcd3:	e4 60                	in     al,0x60
c001fcd5:	3c 5a                	cmp    al,0x5a
c001fcd7:	75 f6                	jne    c001fccf <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c001fcd9:	eb 04                	jmp    c001fcdf <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fcdb:	3c 1c                	cmp    al,0x1c
c001fcdd:	75 ac                	jne    c001fc8b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001fcdf:	e4 60                	in     al,0x60
c001fce1:	3c 5a                	cmp    al,0x5a
c001fce3:	74 fa                	je     c001fcdf <SATA::access(unsigned long long, int, void*, bool)+0x301>
c001fce5:	eb f4                	jmp    c001fcdb <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c001fce7:	83 ec 0c             	sub    esp,0xc
c001fcea:	68 60 54 02 c0       	push   0xc0025460
c001fcef:	e8 1d a0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fcf4:	83 c4 10             	add    esp,0x10
c001fcf7:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fcfe:	74 63                	je     c001fd63 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c001fd00:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd03:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001fd07:	66 25 00 7f          	and    ax,0x7f00
c001fd0b:	66 0d 27 80          	or     ax,0x8027
c001fd0f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001fd14:	66 89 06             	mov    WORD PTR [esi],ax
c001fd17:	19 c0                	sbb    eax,eax
c001fd19:	83 e0 f0             	and    eax,0xfffffff0
c001fd1c:	83 c0 35             	add    eax,0x35
c001fd1f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001fd22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd26:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001fd2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd2e:	c1 e8 10             	shr    eax,0x10
c001fd31:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001fd34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fd38:	c1 e8 18             	shr    eax,0x18
c001fd3b:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fd42:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001fd45:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001fd49:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001fd4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd50:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001fd53:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fd57:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001fd5b:	74 33                	je     c001fd90 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fd5d:	eb 18                	jmp    c001fd77 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c001fd5f:	3c 1c                	cmp    al,0x1c
c001fd61:	74 0c                	je     c001fd6f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fd63:	e4 60                	in     al,0x60
c001fd65:	3c 5a                	cmp    al,0x5a
c001fd67:	75 f6                	jne    c001fd5f <SATA::access(unsigned long long, int, void*, bool)+0x381>
c001fd69:	eb 04                	jmp    c001fd6f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fd6b:	3c 1c                	cmp    al,0x1c
c001fd6d:	75 91                	jne    c001fd00 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c001fd6f:	e4 60                	in     al,0x60
c001fd71:	3c 5a                	cmp    al,0x5a
c001fd73:	74 fa                	je     c001fd6f <SATA::access(unsigned long long, int, void*, bool)+0x391>
c001fd75:	eb f4                	jmp    c001fd6b <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c001fd77:	83 ec 0c             	sub    esp,0xc
c001fd7a:	68 6f 54 02 c0       	push   0xc002546f
c001fd7f:	e8 8d 9f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fd8e:	74 11                	je     c001fda1 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001fd90:	89 e8                	mov    eax,ebp
c001fd92:	31 f6                	xor    esi,esi
c001fd94:	c1 e0 07             	shl    eax,0x7
c001fd97:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fd9b:	eb 21                	jmp    c001fdbe <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c001fd9d:	3c 1c                	cmp    al,0x1c
c001fd9f:	74 0c                	je     c001fdad <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fda1:	e4 60                	in     al,0x60
c001fda3:	3c 5a                	cmp    al,0x5a
c001fda5:	75 f6                	jne    c001fd9d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c001fda7:	eb 04                	jmp    c001fdad <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fda9:	3c 1c                	cmp    al,0x1c
c001fdab:	75 e3                	jne    c001fd90 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c001fdad:	e4 60                	in     al,0x60
c001fdaf:	3c 5a                	cmp    al,0x5a
c001fdb1:	74 fa                	je     c001fdad <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c001fdb3:	eb f4                	jmp    c001fda9 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c001fdb5:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fdbb:	74 0c                	je     c001fdc9 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c001fdbd:	46                   	inc    esi
c001fdbe:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c001fdc4:	80 e2 88             	and    dl,0x88
c001fdc7:	75 ec                	jne    c001fdb5 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c001fdc9:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fdd0:	74 3d                	je     c001fe0f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c001fdd2:	83 ec 0c             	sub    esp,0xc
c001fdd5:	68 7e 54 02 c0       	push   0xc002547e
c001fdda:	e8 32 9f fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fddf:	8b 15 c0 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262c0
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	f6 c2 80             	test   dl,0x80
c001fdeb:	74 0e                	je     c001fdfb <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c001fded:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fdf3:	75 2f                	jne    c001fe24 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c001fdf5:	eb 20                	jmp    c001fe17 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c001fdf7:	3c 1c                	cmp    al,0x1c
c001fdf9:	74 0c                	je     c001fe07 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fdfb:	e4 60                	in     al,0x60
c001fdfd:	3c 5a                	cmp    al,0x5a
c001fdff:	75 f6                	jne    c001fdf7 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c001fe01:	eb 04                	jmp    c001fe07 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fe03:	3c 1c                	cmp    al,0x1c
c001fe05:	75 e6                	jne    c001fded <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c001fe07:	e4 60                	in     al,0x60
c001fe09:	3c 5a                	cmp    al,0x5a
c001fe0b:	74 fa                	je     c001fe07 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c001fe0d:	eb f4                	jmp    c001fe03 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c001fe0f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c001fe15:	75 13                	jne    c001fe2a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fe17:	83 ec 0c             	sub    esp,0xc
c001fe1a:	68 8e 54 02 c0       	push   0xc002548e
c001fe1f:	e9 d2 00 00 00       	jmp    c001fef6 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c001fe24:	0f ba e2 0b          	bt     edx,0xb
c001fe28:	72 25                	jb     c001fe4f <SATA::access(unsigned long long, int, void*, bool)+0x471>
c001fe2a:	be 01 00 00 00       	mov    esi,0x1
c001fe2f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fe33:	89 e8                	mov    eax,ebp
c001fe35:	d3 e6                	shl    esi,cl
c001fe37:	c1 e0 07             	shl    eax,0x7
c001fe3a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe3e:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fe45:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c001fe4b:	74 4a                	je     c001fe97 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001fe4d:	eb 2f                	jmp    c001fe7e <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	68 9c 54 02 c0       	push   0xc002549c
c001fe57:	e8 b5 9e fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fe5c:	83 c4 10             	add    esp,0x10
c001fe5f:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fe66:	75 c2                	jne    c001fe2a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fe68:	e4 60                	in     al,0x60
c001fe6a:	3c 5a                	cmp    al,0x5a
c001fe6c:	74 04                	je     c001fe72 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fe6e:	3c 1c                	cmp    al,0x1c
c001fe70:	75 f6                	jne    c001fe68 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c001fe72:	e4 60                	in     al,0x60
c001fe74:	3c 5a                	cmp    al,0x5a
c001fe76:	74 fa                	je     c001fe72 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fe78:	3c 1c                	cmp    al,0x1c
c001fe7a:	74 f6                	je     c001fe72 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c001fe7c:	eb ac                	jmp    c001fe2a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c001fe7e:	83 ec 0c             	sub    esp,0xc
c001fe81:	68 ac 54 02 c0       	push   0xc00254ac
c001fe86:	e8 86 9e fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001fe95:	74 0f                	je     c001fea6 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c001fe97:	89 e8                	mov    eax,ebp
c001fe99:	c1 e0 07             	shl    eax,0x7
c001fe9c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fea0:	eb 24                	jmp    c001fec6 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c001fea2:	3c 1c                	cmp    al,0x1c
c001fea4:	74 0c                	je     c001feb2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001fea6:	e4 60                	in     al,0x60
c001fea8:	3c 5a                	cmp    al,0x5a
c001feaa:	75 f6                	jne    c001fea2 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c001feac:	eb 04                	jmp    c001feb2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001feae:	3c 1c                	cmp    al,0x1c
c001feb0:	75 e5                	jne    c001fe97 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c001feb2:	e4 60                	in     al,0x60
c001feb4:	3c 5a                	cmp    al,0x5a
c001feb6:	74 fa                	je     c001feb2 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c001feb8:	eb f4                	jmp    c001feae <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c001feba:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c001fec0:	0f ba e2 1e          	bt     edx,0x1e
c001fec4:	72 28                	jb     c001feee <SATA::access(unsigned long long, int, void*, bool)+0x510>
c001fec6:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c001fecc:	85 d6                	test   esi,edx
c001fece:	75 ea                	jne    c001feba <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c001fed0:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fed7:	75 2f                	jne    c001ff08 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c001fed9:	89 e8                	mov    eax,ebp
c001fedb:	c1 e0 07             	shl    eax,0x7
c001fede:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fee2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001fee8:	0f ba e0 1e          	bt     eax,0x1e
c001feec:	73 49                	jae    c001ff37 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c001feee:	83 ec 0c             	sub    esp,0xc
c001fef1:	68 bc 54 02 c0       	push   0xc00254bc
c001fef6:	e8 ca d0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fefb:	83 c4 10             	add    esp,0x10
c001fefe:	b8 01 00 00 00       	mov    eax,0x1
c001ff03:	e9 c5 00 00 00       	jmp    c001ffcd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001ff08:	83 ec 0c             	sub    esp,0xc
c001ff0b:	68 cd 54 02 c0       	push   0xc00254cd
c001ff10:	e8 fc 9d fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001ff15:	83 c4 10             	add    esp,0x10
c001ff18:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001ff1f:	75 b8                	jne    c001fed9 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001ff21:	e4 60                	in     al,0x60
c001ff23:	3c 5a                	cmp    al,0x5a
c001ff25:	74 04                	je     c001ff2b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ff27:	3c 1c                	cmp    al,0x1c
c001ff29:	75 f6                	jne    c001ff21 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c001ff2b:	e4 60                	in     al,0x60
c001ff2d:	3c 5a                	cmp    al,0x5a
c001ff2f:	74 fa                	je     c001ff2b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ff31:	3c 1c                	cmp    al,0x1c
c001ff33:	74 f6                	je     c001ff2b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c001ff35:	eb a2                	jmp    c001fed9 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c001ff37:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001ff3e:	74 3a                	je     c001ff7a <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c001ff40:	83 ec 0c             	sub    esp,0xc
c001ff43:	68 dd 54 02 c0       	push   0xc00254dd
c001ff48:	e8 c4 9d fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001ff4d:	83 c4 10             	add    esp,0x10
c001ff50:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001ff57:	74 0d                	je     c001ff66 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c001ff59:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ff5e:	75 31                	jne    c001ff91 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c001ff60:	eb 1f                	jmp    c001ff81 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c001ff62:	3c 1c                	cmp    al,0x1c
c001ff64:	74 0c                	je     c001ff72 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001ff66:	e4 60                	in     al,0x60
c001ff68:	3c 5a                	cmp    al,0x5a
c001ff6a:	75 f6                	jne    c001ff62 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c001ff6c:	eb 04                	jmp    c001ff72 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001ff6e:	3c 1c                	cmp    al,0x1c
c001ff70:	75 e7                	jne    c001ff59 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c001ff72:	e4 60                	in     al,0x60
c001ff74:	3c 5a                	cmp    al,0x5a
c001ff76:	74 fa                	je     c001ff72 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c001ff78:	eb f4                	jmp    c001ff6e <SATA::access(unsigned long long, int, void*, bool)+0x590>
c001ff7a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ff7f:	75 19                	jne    c001ff9a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ff81:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ff87:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ff8b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ff8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ff91:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001ff98:	75 04                	jne    c001ff9e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c001ff9a:	31 c0                	xor    eax,eax
c001ff9c:	eb 2f                	jmp    c001ffcd <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	68 ed 54 02 c0       	push   0xc00254ed
c001ffa6:	e8 66 9d fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c001ffb5:	75 e3                	jne    c001ff9a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ffb7:	e4 60                	in     al,0x60
c001ffb9:	3c 1c                	cmp    al,0x1c
c001ffbb:	74 04                	je     c001ffc1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ffbd:	3c 5a                	cmp    al,0x5a
c001ffbf:	75 f6                	jne    c001ffb7 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c001ffc1:	e4 60                	in     al,0x60
c001ffc3:	3c 5a                	cmp    al,0x5a
c001ffc5:	74 fa                	je     c001ffc1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ffc7:	3c 1c                	cmp    al,0x1c
c001ffc9:	74 f6                	je     c001ffc1 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c001ffcb:	eb cd                	jmp    c001ff9a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c001ffcd:	83 c4 2c             	add    esp,0x2c
c001ffd0:	5b                   	pop    ebx
c001ffd1:	5e                   	pop    esi
c001ffd2:	5f                   	pop    edi
c001ffd3:	5d                   	pop    ebp
c001ffd4:	c3                   	ret    
c001ffd5:	90                   	nop

c001ffd6 <SATA::read(unsigned long long, int, void*)>:
c001ffd6:	55                   	push   ebp
c001ffd7:	57                   	push   edi
c001ffd8:	56                   	push   esi
c001ffd9:	53                   	push   ebx
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ffe1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ffe5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ffe9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ffed:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c001fff4:	74 2d                	je     c0020023 <SATA::read(unsigned long long, int, void*)+0x4d>
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	68 fd 54 02 c0       	push   0xc00254fd
c001fffe:	e8 0e 9d fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c002000d:	75 14                	jne    c0020023 <SATA::read(unsigned long long, int, void*)+0x4d>
c002000f:	e4 60                	in     al,0x60
c0020011:	3c 1c                	cmp    al,0x1c
c0020013:	74 04                	je     c0020019 <SATA::read(unsigned long long, int, void*)+0x43>
c0020015:	3c 5a                	cmp    al,0x5a
c0020017:	75 f6                	jne    c002000f <SATA::read(unsigned long long, int, void*)+0x39>
c0020019:	e4 60                	in     al,0x60
c002001b:	3c 5a                	cmp    al,0x5a
c002001d:	74 fa                	je     c0020019 <SATA::read(unsigned long long, int, void*)+0x43>
c002001f:	3c 1c                	cmp    al,0x1c
c0020021:	74 f6                	je     c0020019 <SATA::read(unsigned long long, int, void*)+0x43>
c0020023:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020026:	b8 04 00 00 00       	mov    eax,0x4
c002002b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020031:	0f 87 96 00 00 00    	ja     c00200cd <SATA::read(unsigned long long, int, void*)+0xf7>
c0020037:	b8 06 00 00 00       	mov    eax,0x6
c002003c:	85 ed                	test   ebp,ebp
c002003e:	0f 84 89 00 00 00    	je     c00200cd <SATA::read(unsigned long long, int, void*)+0xf7>
c0020044:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c002004b:	74 2d                	je     c002007a <SATA::read(unsigned long long, int, void*)+0xa4>
c002004d:	83 ec 0c             	sub    esp,0xc
c0020050:	68 0a 55 02 c0       	push   0xc002550a
c0020055:	e8 b7 9c fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002005a:	83 c4 10             	add    esp,0x10
c002005d:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c0020064:	75 14                	jne    c002007a <SATA::read(unsigned long long, int, void*)+0xa4>
c0020066:	e4 60                	in     al,0x60
c0020068:	3c 5a                	cmp    al,0x5a
c002006a:	74 04                	je     c0020070 <SATA::read(unsigned long long, int, void*)+0x9a>
c002006c:	3c 1c                	cmp    al,0x1c
c002006e:	75 f6                	jne    c0020066 <SATA::read(unsigned long long, int, void*)+0x90>
c0020070:	e4 60                	in     al,0x60
c0020072:	3c 5a                	cmp    al,0x5a
c0020074:	74 fa                	je     c0020070 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020076:	3c 1c                	cmp    al,0x1c
c0020078:	74 f6                	je     c0020070 <SATA::read(unsigned long long, int, void*)+0x9a>
c002007a:	50                   	push   eax
c002007b:	50                   	push   eax
c002007c:	6a 00                	push   0x0
c002007e:	55                   	push   ebp
c002007f:	53                   	push   ebx
c0020080:	57                   	push   edi
c0020081:	56                   	push   esi
c0020082:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020086:	e8 53 f9 ff ff       	call   c001f9de <SATA::access(unsigned long long, int, void*, bool)>
c002008b:	83 c4 20             	add    esp,0x20
c002008e:	89 c3                	mov    ebx,eax
c0020090:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c0020097:	74 2d                	je     c00200c6 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020099:	83 ec 0c             	sub    esp,0xc
c002009c:	68 17 55 02 c0       	push   0xc0025517
c00200a1:	e8 6b 9c fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00200a6:	83 c4 10             	add    esp,0x10
c00200a9:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c00200b0:	75 14                	jne    c00200c6 <SATA::read(unsigned long long, int, void*)+0xf0>
c00200b2:	e4 60                	in     al,0x60
c00200b4:	3c 5a                	cmp    al,0x5a
c00200b6:	74 04                	je     c00200bc <SATA::read(unsigned long long, int, void*)+0xe6>
c00200b8:	3c 1c                	cmp    al,0x1c
c00200ba:	75 f6                	jne    c00200b2 <SATA::read(unsigned long long, int, void*)+0xdc>
c00200bc:	e4 60                	in     al,0x60
c00200be:	3c 5a                	cmp    al,0x5a
c00200c0:	74 fa                	je     c00200bc <SATA::read(unsigned long long, int, void*)+0xe6>
c00200c2:	3c 1c                	cmp    al,0x1c
c00200c4:	74 f6                	je     c00200bc <SATA::read(unsigned long long, int, void*)+0xe6>
c00200c6:	31 c0                	xor    eax,eax
c00200c8:	85 db                	test   ebx,ebx
c00200ca:	0f 95 c0             	setne  al
c00200cd:	83 c4 0c             	add    esp,0xc
c00200d0:	5b                   	pop    ebx
c00200d1:	5e                   	pop    esi
c00200d2:	5f                   	pop    edi
c00200d3:	5d                   	pop    ebp
c00200d4:	c3                   	ret    
c00200d5:	90                   	nop

c00200d6 <SATA::write(unsigned long long, int, void*)>:
c00200d6:	55                   	push   ebp
c00200d7:	57                   	push   edi
c00200d8:	56                   	push   esi
c00200d9:	53                   	push   ebx
c00200da:	83 ec 1c             	sub    esp,0x1c
c00200dd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00200e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00200e5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00200e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00200ed:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c00200f4:	74 2d                	je     c0020123 <SATA::write(unsigned long long, int, void*)+0x4d>
c00200f6:	83 ec 0c             	sub    esp,0xc
c00200f9:	68 24 55 02 c0       	push   0xc0025524
c00200fe:	e8 0e 9c fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020103:	83 c4 10             	add    esp,0x10
c0020106:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c002010d:	75 14                	jne    c0020123 <SATA::write(unsigned long long, int, void*)+0x4d>
c002010f:	e4 60                	in     al,0x60
c0020111:	3c 1c                	cmp    al,0x1c
c0020113:	74 04                	je     c0020119 <SATA::write(unsigned long long, int, void*)+0x43>
c0020115:	3c 5a                	cmp    al,0x5a
c0020117:	75 f6                	jne    c002010f <SATA::write(unsigned long long, int, void*)+0x39>
c0020119:	e4 60                	in     al,0x60
c002011b:	3c 5a                	cmp    al,0x5a
c002011d:	74 fa                	je     c0020119 <SATA::write(unsigned long long, int, void*)+0x43>
c002011f:	3c 1c                	cmp    al,0x1c
c0020121:	74 f6                	je     c0020119 <SATA::write(unsigned long long, int, void*)+0x43>
c0020123:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020126:	b8 04 00 00 00       	mov    eax,0x4
c002012b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020131:	0f 87 bd 00 00 00    	ja     c00201f4 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020137:	b8 06 00 00 00       	mov    eax,0x6
c002013c:	85 db                	test   ebx,ebx
c002013e:	0f 84 b0 00 00 00    	je     c00201f4 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020144:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c002014b:	74 2d                	je     c002017a <SATA::write(unsigned long long, int, void*)+0xa4>
c002014d:	83 ec 0c             	sub    esp,0xc
c0020150:	68 32 55 02 c0       	push   0xc0025532
c0020155:	e8 b7 9b fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002015a:	83 c4 10             	add    esp,0x10
c002015d:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c0020164:	75 14                	jne    c002017a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020166:	e4 60                	in     al,0x60
c0020168:	3c 1c                	cmp    al,0x1c
c002016a:	74 04                	je     c0020170 <SATA::write(unsigned long long, int, void*)+0x9a>
c002016c:	3c 5a                	cmp    al,0x5a
c002016e:	75 f6                	jne    c0020166 <SATA::write(unsigned long long, int, void*)+0x90>
c0020170:	e4 60                	in     al,0x60
c0020172:	3c 5a                	cmp    al,0x5a
c0020174:	74 fa                	je     c0020170 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020176:	3c 1c                	cmp    al,0x1c
c0020178:	74 f6                	je     c0020170 <SATA::write(unsigned long long, int, void*)+0x9a>
c002017a:	c1 e5 09             	shl    ebp,0x9
c002017d:	01 dd                	add    ebp,ebx
c002017f:	89 f0                	mov    eax,esi
c0020181:	89 fa                	mov    edx,edi
c0020183:	83 c0 01             	add    eax,0x1
c0020186:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002018a:	83 d2 00             	adc    edx,0x0
c002018d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020191:	50                   	push   eax
c0020192:	50                   	push   eax
c0020193:	6a 01                	push   0x1
c0020195:	53                   	push   ebx
c0020196:	81 c3 00 02 00 00    	add    ebx,0x200
c002019c:	6a 01                	push   0x1
c002019e:	57                   	push   edi
c002019f:	56                   	push   esi
c00201a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00201a4:	e8 35 f8 ff ff       	call   c001f9de <SATA::access(unsigned long long, int, void*, bool)>
c00201a9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00201ad:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00201b1:	83 c4 20             	add    esp,0x20
c00201b4:	39 dd                	cmp    ebp,ebx
c00201b6:	75 c7                	jne    c002017f <SATA::write(unsigned long long, int, void*)+0xa9>
c00201b8:	f6 05 c1 62 02 c0 08 	test   BYTE PTR ds:0xc00262c1,0x8
c00201bf:	75 04                	jne    c00201c5 <SATA::write(unsigned long long, int, void*)+0xef>
c00201c1:	31 c0                	xor    eax,eax
c00201c3:	eb 2f                	jmp    c00201f4 <SATA::write(unsigned long long, int, void*)+0x11e>
c00201c5:	83 ec 0c             	sub    esp,0xc
c00201c8:	68 40 55 02 c0       	push   0xc0025540
c00201cd:	e8 3f 9b fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00201d2:	83 c4 10             	add    esp,0x10
c00201d5:	f6 05 c0 62 02 c0 80 	test   BYTE PTR ds:0xc00262c0,0x80
c00201dc:	75 e3                	jne    c00201c1 <SATA::write(unsigned long long, int, void*)+0xeb>
c00201de:	e4 60                	in     al,0x60
c00201e0:	3c 5a                	cmp    al,0x5a
c00201e2:	74 04                	je     c00201e8 <SATA::write(unsigned long long, int, void*)+0x112>
c00201e4:	3c 1c                	cmp    al,0x1c
c00201e6:	75 f6                	jne    c00201de <SATA::write(unsigned long long, int, void*)+0x108>
c00201e8:	e4 60                	in     al,0x60
c00201ea:	3c 5a                	cmp    al,0x5a
c00201ec:	74 fa                	je     c00201e8 <SATA::write(unsigned long long, int, void*)+0x112>
c00201ee:	3c 1c                	cmp    al,0x1c
c00201f0:	74 f6                	je     c00201e8 <SATA::write(unsigned long long, int, void*)+0x112>
c00201f2:	eb cd                	jmp    c00201c1 <SATA::write(unsigned long long, int, void*)+0xeb>
c00201f4:	83 c4 1c             	add    esp,0x1c
c00201f7:	5b                   	pop    ebx
c00201f8:	5e                   	pop    esi
c00201f9:	5f                   	pop    edi
c00201fa:	5d                   	pop    ebp
c00201fb:	c3                   	ret    

c00201fc <SATAPI::write(unsigned long long, int, void*)>:
c00201fc:	b8 03 00 00 00       	mov    eax,0x3
c0020201:	c3                   	ret    

c0020202 <SATAPI::close(int, int, void*)>:
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020209:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002020f:	85 c0                	test   eax,eax
c0020211:	74 0c                	je     c002021f <SATAPI::close(int, int, void*)+0x1d>
c0020213:	83 ec 0c             	sub    esp,0xc
c0020216:	8b 10                	mov    edx,DWORD PTR [eax]
c0020218:	50                   	push   eax
c0020219:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002021c:	83 c4 10             	add    esp,0x10
c002021f:	31 c0                	xor    eax,eax
c0020221:	83 c4 0c             	add    esp,0xc
c0020224:	c3                   	ret    
c0020225:	90                   	nop

c0020226 <SATAPI::SATAPI()>:
c0020226:	83 ec 0c             	sub    esp,0xc
c0020229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022d:	83 ec 04             	sub    esp,0x4
c0020230:	68 00 08 00 00       	push   0x800
c0020235:	68 88 55 02 c0       	push   0xc0025588
c002023a:	50                   	push   eax
c002023b:	e8 3a e6 fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020240:	83 c4 10             	add    esp,0x10
c0020243:	ba c4 56 02 c0       	mov    edx,0xc00256c4
c0020248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024c:	89 10                	mov    DWORD PTR [eax],edx
c002024e:	90                   	nop
c002024f:	83 c4 0c             	add    esp,0xc
c0020252:	c3                   	ret    
c0020253:	90                   	nop

c0020254 <SATAPI::diskRemoved()>:
c0020254:	c3                   	ret    
c0020255:	90                   	nop

c0020256 <SATAPI::diskInserted()>:
c0020256:	83 ec 18             	sub    esp,0x18
c0020259:	68 94 55 02 c0       	push   0xc0025594
c002025e:	e8 62 cd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020267:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002026e:	83 c4 1c             	add    esp,0x1c
c0020271:	c3                   	ret    

c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020272:	55                   	push   ebp
c0020273:	57                   	push   edi
c0020274:	56                   	push   esi
c0020275:	53                   	push   ebx
c0020276:	83 ec 38             	sub    esp,0x38
c0020279:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002027d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020281:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020285:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020289:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002028d:	68 ac 55 02 c0       	push   0xc00255ac
c0020292:	e8 2e cd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020297:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002029d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00202a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202a7:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00202ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00202b1:	c1 e0 07             	shl    eax,0x7
c00202b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00202b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00202bc:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00202c6:	5a                   	pop    edx
c00202c7:	59                   	pop    ecx
c00202c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202cc:	8d 58 02             	lea    ebx,[eax+0x2]
c00202cf:	c1 e3 07             	shl    ebx,0x7
c00202d2:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00202d6:	53                   	push   ebx
c00202d7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00202dd:	e8 08 e4 ff ff       	call   c001e6ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00202e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00202e6:	83 c4 10             	add    esp,0x10
c00202e9:	b8 01 00 00 00       	mov    eax,0x1
c00202ee:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00202f3:	0f 84 ff 01 00 00    	je     c00204f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c00202f9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00202ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020301:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020307:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002030d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020311:	c1 e1 05             	shl    ecx,0x5
c0020314:	01 c8                	add    eax,ecx
c0020316:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020318:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002031e:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020324:	89 08                	mov    DWORD PTR [eax],ecx
c0020326:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002032c:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020332:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020338:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002033b:	8d 7b 40             	lea    edi,[ebx+0x40]
c002033e:	50                   	push   eax
c002033f:	68 90 00 00 00       	push   0x90
c0020344:	6a 00                	push   0x0
c0020346:	53                   	push   ebx
c0020347:	e8 30 03 fe ff       	call   c000067c <memset>
c002034c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020350:	b9 0c 00 00 00       	mov    ecx,0xc
c0020355:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020357:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002035d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020361:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020367:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002036b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002036f:	48                   	dec    eax
c0020370:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020375:	89 c1                	mov    ecx,eax
c0020377:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002037d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020382:	09 c8                	or     eax,ecx
c0020384:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002038a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002038d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020394:	66 25 00 7f          	and    ax,0x7f00
c0020398:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002039c:	66 0d 27 80          	or     ax,0x8027
c00203a0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00203a4:	66 89 03             	mov    WORD PTR [ebx],ax
c00203a7:	89 d0                	mov    eax,edx
c00203a9:	c1 ea 18             	shr    edx,0x18
c00203ac:	c1 e8 10             	shr    eax,0x10
c00203af:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00203b2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00203b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00203b9:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00203bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00203c0:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00203c3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00203c7:	83 c4 10             	add    esp,0x10
c00203ca:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00203ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00203d2:	31 c0                	xor    eax,eax
c00203d4:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00203da:	80 e1 88             	and    cl,0x88
c00203dd:	74 0a                	je     c00203e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c00203df:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00203e4:	74 0a                	je     c00203f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c00203e6:	40                   	inc    eax
c00203e7:	eb eb                	jmp    c00203d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c00203e9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00203ee:	75 0a                	jne    c00203fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c00203f0:	83 ec 0c             	sub    esp,0xc
c00203f3:	68 c6 55 02 c0       	push   0xc00255c6
c00203f8:	eb 43                	jmp    c002043d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00203fa:	be 01 00 00 00       	mov    esi,0x1
c00203ff:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020403:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020407:	d3 e6                	shl    esi,cl
c0020409:	c1 e7 07             	shl    edi,0x7
c002040c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020412:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020417:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002041b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020421:	85 c6                	test   esi,eax
c0020423:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020429:	0f 84 96 00 00 00    	je     c00204c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c002042f:	0f ba e0 1e          	bt     eax,0x1e
c0020433:	73 1a                	jae    c002044f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020435:	83 ec 0c             	sub    esp,0xc
c0020438:	68 db 55 02 c0       	push   0xc00255db
c002043d:	e8 83 cb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020442:	83 c4 10             	add    esp,0x10
c0020445:	b8 01 00 00 00       	mov    eax,0x1
c002044a:	e9 a9 00 00 00       	jmp    c00204f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c002044f:	83 fb 0d             	cmp    ebx,0xd
c0020452:	77 12                	ja     c0020466 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020454:	83 ec 0c             	sub    esp,0xc
c0020457:	68 c8 00 00 00       	push   0xc8
c002045c:	e8 73 68 ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c0020461:	83 c4 10             	add    esp,0x10
c0020464:	eb 2a                	jmp    c0020490 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020466:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002046c:	83 f8 0d             	cmp    eax,0xd
c002046f:	77 0a                	ja     c002047b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020471:	83 ec 0c             	sub    esp,0xc
c0020474:	68 58 02 00 00       	push   0x258
c0020479:	eb 28                	jmp    c00204a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c002047b:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020481:	83 f8 0d             	cmp    eax,0xd
c0020484:	77 0a                	ja     c0020490 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020486:	83 ec 0c             	sub    esp,0xc
c0020489:	68 dc 05 00 00       	push   0x5dc
c002048e:	eb 13                	jmp    c00204a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020490:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020496:	83 f8 0d             	cmp    eax,0xd
c0020499:	77 10                	ja     c00204ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c002049b:	83 ec 0c             	sub    esp,0xc
c002049e:	68 c4 09 00 00       	push   0x9c4
c00204a3:	e8 2c 68 ff ff       	call   c0016cd4 <milliTenthSleep(unsigned int)>
c00204a8:	83 c4 10             	add    esp,0x10
c00204ab:	43                   	inc    ebx
c00204ac:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c00204b2:	0f 85 63 ff ff ff    	jne    c002041b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	68 ee 55 02 c0       	push   0xc00255ee
c00204c0:	e9 78 ff ff ff       	jmp    c002043d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00204c5:	0f ba e0 1e          	bt     eax,0x1e
c00204c9:	73 0d                	jae    c00204d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c00204cb:	83 ec 0c             	sub    esp,0xc
c00204ce:	68 02 56 02 c0       	push   0xc0025602
c00204d3:	e9 65 ff ff ff       	jmp    c002043d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c00204d8:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00204dd:	74 17                	je     c00204f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00204df:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00204e4:	74 10                	je     c00204f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c00204e6:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00204ec:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00204f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00204f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00204f6:	31 c0                	xor    eax,eax
c00204f8:	83 c4 2c             	add    esp,0x2c
c00204fb:	5b                   	pop    ebx
c00204fc:	5e                   	pop    esi
c00204fd:	5f                   	pop    edi
c00204fe:	5d                   	pop    ebp
c00204ff:	c3                   	ret    

c0020500 <SATAPI::eject()>:
c0020500:	57                   	push   edi
c0020501:	b9 03 00 00 00       	mov    ecx,0x3
c0020506:	83 ec 18             	sub    esp,0x18
c0020509:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002050d:	fc                   	cld    
c002050e:	31 c0                	xor    eax,eax
c0020510:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020512:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020517:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002051c:	50                   	push   eax
c002051d:	6a 00                	push   0x0
c002051f:	6a 00                	push   0x0
c0020521:	6a 00                	push   0x0
c0020523:	6a 00                	push   0x0
c0020525:	6a 02                	push   0x2
c0020527:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002052b:	50                   	push   eax
c002052c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020530:	e8 3d fd ff ff       	call   c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020535:	31 c0                	xor    eax,eax
c0020537:	83 c4 38             	add    esp,0x38
c002053a:	5f                   	pop    edi
c002053b:	c3                   	ret    

c002053c <SATAPI::detectMedia()>:
c002053c:	56                   	push   esi
c002053d:	53                   	push   ebx
c002053e:	83 ec 30             	sub    esp,0x30
c0020541:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020545:	68 17 56 02 c0       	push   0xc0025617
c002054a:	e8 76 ca fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002054f:	83 c4 0c             	add    esp,0xc
c0020552:	6a 0c                	push   0xc
c0020554:	6a 00                	push   0x0
c0020556:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002055a:	56                   	push   esi
c002055b:	e8 1c 01 fe ff       	call   c000067c <memset>
c0020560:	83 c4 0c             	add    esp,0xc
c0020563:	6a 00                	push   0x0
c0020565:	6a 00                	push   0x0
c0020567:	6a 00                	push   0x0
c0020569:	6a 00                	push   0x0
c002056b:	6a 00                	push   0x0
c002056d:	56                   	push   esi
c002056e:	53                   	push   ebx
c002056f:	e8 fe fc ff ff       	call   c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020574:	83 c4 20             	add    esp,0x20
c0020577:	48                   	dec    eax
c0020578:	74 34                	je     c00205ae <SATAPI::detectMedia()+0x72>
c002057a:	50                   	push   eax
c002057b:	6a 0c                	push   0xc
c002057d:	6a 00                	push   0x0
c002057f:	56                   	push   esi
c0020580:	e8 f7 00 fe ff       	call   c000067c <memset>
c0020585:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002058a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002058f:	83 c4 0c             	add    esp,0xc
c0020592:	6a 01                	push   0x1
c0020594:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020598:	50                   	push   eax
c0020599:	6a 00                	push   0x0
c002059b:	6a 00                	push   0x0
c002059d:	6a 12                	push   0x12
c002059f:	56                   	push   esi
c00205a0:	53                   	push   ebx
c00205a1:	e8 cc fc ff ff       	call   c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00205a6:	83 c4 20             	add    esp,0x20
c00205a9:	48                   	dec    eax
c00205aa:	75 39                	jne    c00205e5 <SATAPI::detectMedia()+0xa9>
c00205ac:	eb 1e                	jmp    c00205cc <SATAPI::detectMedia()+0x90>
c00205ae:	83 ec 0c             	sub    esp,0xc
c00205b1:	68 2b 56 02 c0       	push   0xc002562b
c00205b6:	e8 0a ca fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00205c5:	74 b3                	je     c002057a <SATAPI::detectMedia()+0x3e>
c00205c7:	e9 93 00 00 00       	jmp    c002065f <SATAPI::detectMedia()+0x123>
c00205cc:	83 ec 0c             	sub    esp,0xc
c00205cf:	68 35 56 02 c0       	push   0xc0025635
c00205d4:	e8 ec c9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00205d9:	83 c4 10             	add    esp,0x10
c00205dc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00205e3:	75 7a                	jne    c002065f <SATAPI::detectMedia()+0x123>
c00205e5:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00205e9:	83 e0 7f             	and    eax,0x7f
c00205ec:	3c 70                	cmp    al,0x70
c00205ee:	74 25                	je     c0020615 <SATAPI::detectMedia()+0xd9>
c00205f0:	83 ec 0c             	sub    esp,0xc
c00205f3:	68 3f 56 02 c0       	push   0xc002563f
c00205f8:	e8 c8 c9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00205fd:	83 c4 10             	add    esp,0x10
c0020600:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020607:	75 0c                	jne    c0020615 <SATAPI::detectMedia()+0xd9>
c0020609:	83 ec 0c             	sub    esp,0xc
c002060c:	53                   	push   ebx
c002060d:	e8 44 fc ff ff       	call   c0020256 <SATAPI::diskInserted()>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020619:	83 e0 0f             	and    eax,0xf
c002061c:	3c 02                	cmp    al,0x2
c002061e:	75 16                	jne    c0020636 <SATAPI::detectMedia()+0xfa>
c0020620:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020625:	75 38                	jne    c002065f <SATAPI::detectMedia()+0x123>
c0020627:	83 ec 0c             	sub    esp,0xc
c002062a:	68 48 56 02 c0       	push   0xc0025648
c002062f:	e8 91 c9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020634:	eb 26                	jmp    c002065c <SATAPI::detectMedia()+0x120>
c0020636:	84 c0                	test   al,al
c0020638:	75 25                	jne    c002065f <SATAPI::detectMedia()+0x123>
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	68 51 56 02 c0       	push   0xc0025651
c0020642:	e8 7e c9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020647:	83 c4 10             	add    esp,0x10
c002064a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020651:	75 0c                	jne    c002065f <SATAPI::detectMedia()+0x123>
c0020653:	83 ec 0c             	sub    esp,0xc
c0020656:	53                   	push   ebx
c0020657:	e8 fa fb ff ff       	call   c0020256 <SATAPI::diskInserted()>
c002065c:	83 c4 10             	add    esp,0x10
c002065f:	83 c4 24             	add    esp,0x24
c0020662:	5b                   	pop    ebx
c0020663:	5e                   	pop    esi
c0020664:	c3                   	ret    
c0020665:	90                   	nop

c0020666 <SATAPI::open(int, int, void*)>:
c0020666:	56                   	push   esi
c0020667:	53                   	push   ebx
c0020668:	51                   	push   ecx
c0020669:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002066d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020671:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002067b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020681:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002068b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002068f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020699:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002069f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00206a6:	e8 c3 9c fe ff       	call   c000a36e <Phys::allocatePage()>
c00206ab:	89 c6                	mov    esi,eax
c00206ad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00206b3:	81 c6 00 10 00 00    	add    esi,0x1000
c00206b9:	e8 b0 9c fe ff       	call   c000a36e <Phys::allocatePage()>
c00206be:	39 c6                	cmp    esi,eax
c00206c0:	74 10                	je     c00206d2 <SATAPI::open(int, int, void*)+0x6c>
c00206c2:	83 ec 0c             	sub    esp,0xc
c00206c5:	68 5b 56 02 c0       	push   0xc002565b
c00206ca:	e8 a8 2c ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00206cf:	83 c4 10             	add    esp,0x10
c00206d2:	83 ec 0c             	sub    esp,0xc
c00206d5:	6a 02                	push   0x2
c00206d7:	e8 8d b5 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c00206dc:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00206e2:	6a 03                	push   0x3
c00206e4:	50                   	push   eax
c00206e5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00206eb:	ff 35 d4 63 02 c0    	push   DWORD PTR ds:0xc00263d4
c00206f1:	e8 de bb fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00206f6:	83 c4 14             	add    esp,0x14
c00206f9:	68 74 01 00 00       	push   0x174
c00206fe:	e8 b4 95 fe ff       	call   c0009cb7 <malloc>
c0020703:	83 c4 0c             	add    esp,0xc
c0020706:	89 c6                	mov    esi,eax
c0020708:	6a 00                	push   0x0
c002070a:	68 ff ff ff 7f       	push   0x7fffffff
c002070f:	6a 00                	push   0x0
c0020711:	6a 00                	push   0x0
c0020713:	53                   	push   ebx
c0020714:	68 71 56 02 c0       	push   0xc0025671
c0020719:	50                   	push   eax
c002071a:	e8 e1 ed fe ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002071f:	83 c4 14             	add    esp,0x14
c0020722:	56                   	push   esi
c0020723:	e8 8e ee fe ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c0020728:	5a                   	pop    edx
c0020729:	0f be c0             	movsx  eax,al
c002072c:	59                   	pop    ecx
c002072d:	50                   	push   eax
c002072e:	68 07 53 02 c0       	push   0xc0025307
c0020733:	e8 8d c8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020738:	58                   	pop    eax
c0020739:	5a                   	pop    edx
c002073a:	56                   	push   esi
c002073b:	53                   	push   ebx
c002073c:	e8 01 dd fe ff       	call   c000e442 <Device::addChild(Device*)>
c0020741:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020747:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002074a:	e8 93 e1 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c002074f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020756:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020759:	e8 de fd ff ff       	call   c002053c <SATAPI::detectMedia()>
c002075e:	83 c4 14             	add    esp,0x14
c0020761:	31 c0                	xor    eax,eax
c0020763:	5b                   	pop    ebx
c0020764:	5e                   	pop    esi
c0020765:	c3                   	ret    

c0020766 <SATAPI::read(unsigned long long, int, void*)>:
c0020766:	55                   	push   ebp
c0020767:	57                   	push   edi
c0020768:	56                   	push   esi
c0020769:	53                   	push   ebx
c002076a:	83 ec 48             	sub    esp,0x48
c002076d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0020771:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0020775:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0020779:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002077d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020781:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020785:	68 7f 56 02 c0       	push   0xc002567f
c002078a:	e8 36 c8 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	83 fb 04             	cmp    ebx,0x4
c0020795:	7e 10                	jle    c00207a7 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0020797:	83 ec 0c             	sub    esp,0xc
c002079a:	68 90 56 02 c0       	push   0xc0025690
c002079f:	e8 d3 2b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00207a4:	83 c4 10             	add    esp,0x10
c00207a7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00207ab:	31 ed                	xor    ebp,ebp
c00207ad:	b9 03 00 00 00       	mov    ecx,0x3
c00207b2:	fc                   	cld    
c00207b3:	89 e8                	mov    eax,ebp
c00207b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207b7:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00207bc:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00207c1:	50                   	push   eax
c00207c2:	6a 00                	push   0x0
c00207c4:	6a 00                	push   0x0
c00207c6:	6a 00                	push   0x0
c00207c8:	6a 00                	push   0x0
c00207ca:	6a 02                	push   0x2
c00207cc:	8d 44 24 30          	lea    eax,[esp+0x30]
c00207d0:	50                   	push   eax
c00207d1:	56                   	push   esi
c00207d2:	e8 9b fa ff ff       	call   c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00207d7:	8d 7c 24 44          	lea    edi,[esp+0x44]
c00207db:	89 e8                	mov    eax,ebp
c00207dd:	b9 03 00 00 00       	mov    ecx,0x3
c00207e2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207e8:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c00207ec:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c00207f1:	86 e0                	xchg   al,ah
c00207f3:	c1 c0 10             	rol    eax,0x10
c00207f6:	86 e0                	xchg   al,ah
c00207f8:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c00207fc:	83 c4 1c             	add    esp,0x1c
c00207ff:	53                   	push   ebx
c0020800:	c1 e3 0b             	shl    ebx,0xb
c0020803:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0020807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002080b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002080f:	53                   	push   ebx
c0020810:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020814:	50                   	push   eax
c0020815:	56                   	push   esi
c0020816:	e8 57 fa ff ff       	call   c0020272 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002081b:	83 c4 20             	add    esp,0x20
c002081e:	85 c0                	test   eax,eax
c0020820:	74 14                	je     c0020836 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0020822:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020826:	83 ec 0c             	sub    esp,0xc
c0020829:	56                   	push   esi
c002082a:	e8 0d fd ff ff       	call   c002053c <SATAPI::detectMedia()>
c002082f:	83 c4 10             	add    esp,0x10
c0020832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020836:	83 c4 3c             	add    esp,0x3c
c0020839:	5b                   	pop    ebx
c002083a:	5e                   	pop    esi
c002083b:	5f                   	pop    edi
c002083c:	5d                   	pop    ebp
c002083d:	c3                   	ret    

c002083e <IOAPIC::close(int, int, void*)>:
c002083e:	b8 00 00 00 00       	mov    eax,0x0
c0020843:	c3                   	ret    

c0020844 <apicGetBase()>:
c0020844:	55                   	push   ebp
c0020845:	89 e5                	mov    ebp,esp
c0020847:	83 ec 18             	sub    esp,0x18
c002084a:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c002084f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0020855:	83 e0 08             	and    eax,0x8
c0020858:	84 c0                	test   al,al
c002085a:	75 07                	jne    c0020863 <apicGetBase()+0x1f>
c002085c:	b8 00 00 00 00       	mov    eax,0x0
c0020861:	eb 21                	jmp    c0020884 <apicGetBase()+0x40>
c0020863:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0020868:	83 ec 08             	sub    esp,0x8
c002086b:	6a 1b                	push   0x1b
c002086d:	50                   	push   eax
c002086e:	e8 f3 89 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020879:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002087c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002087f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0020884:	c9                   	leave  
c0020885:	c3                   	ret    

c0020886 <IOAPIC::IOAPIC()>:
c0020886:	83 ec 0c             	sub    esp,0xc
c0020889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002088d:	83 ec 08             	sub    esp,0x8
c0020890:	68 f4 56 02 c0       	push   0xc00256f4
c0020895:	50                   	push   eax
c0020896:	e8 ab dd fe ff       	call   c000e646 <Device::Device(char const*)>
c002089b:	83 c4 10             	add    esp,0x10
c002089e:	ba 18 57 02 c0       	mov    edx,0xc0025718
c00208a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00208a7:	89 10                	mov    DWORD PTR [eax],edx
c00208a9:	90                   	nop
c00208aa:	83 c4 0c             	add    esp,0xc
c00208ad:	c3                   	ret    

c00208ae <apicOpen()>:
c00208ae:	55                   	push   ebp
c00208af:	89 e5                	mov    ebp,esp
c00208b1:	53                   	push   ebx
c00208b2:	83 ec 34             	sub    esp,0x34
c00208b5:	a0 40 a2 02 c0       	mov    al,ds:0xc002a240
c00208ba:	83 f0 01             	xor    eax,0x1
c00208bd:	84 c0                	test   al,al
c00208bf:	0f 84 91 00 00 00    	je     c0020956 <apicOpen()+0xa8>
c00208c5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00208c9:	a0 c0 8b 02 c0       	mov    al,ds:0xc0028bc0
c00208ce:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c00208d1:	73 7c                	jae    c002094f <apicOpen()+0xa1>
c00208d3:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00208da:	83 ec 0c             	sub    esp,0xc
c00208dd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00208e0:	e8 d2 93 fe ff       	call   c0009cb7 <malloc>
c00208e5:	83 c4 10             	add    esp,0x10
c00208e8:	89 c3                	mov    ebx,eax
c00208ea:	83 ec 0c             	sub    esp,0xc
c00208ed:	53                   	push   ebx
c00208ee:	e8 93 ff ff ff       	call   c0020886 <IOAPIC::IOAPIC()>
c00208f3:	83 c4 10             	add    esp,0x10
c00208f6:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00208f9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00208fd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020900:	89 14 85 20 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5de0],edx
c0020907:	a1 00 a2 02 c0       	mov    eax,ds:0xc002a200
c002090c:	40                   	inc    eax
c002090d:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c0020912:	a1 a8 62 02 c0       	mov    eax,ds:0xc00262a8
c0020917:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002091d:	83 ec 08             	sub    esp,0x8
c0020920:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020923:	50                   	push   eax
c0020924:	e8 19 db fe ff       	call   c000e442 <Device::addChild(Device*)>
c0020929:	83 c4 10             	add    esp,0x10
c002092c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002092f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020931:	83 c0 08             	add    eax,0x8
c0020934:	8b 00                	mov    eax,DWORD PTR [eax]
c0020936:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002093a:	6a 00                	push   0x0
c002093c:	6a 00                	push   0x0
c002093e:	52                   	push   edx
c002093f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020942:	ff d0                	call   eax
c0020944:	83 c4 10             	add    esp,0x10
c0020947:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c002094a:	e9 7a ff ff ff       	jmp    c00208c9 <apicOpen()+0x1b>
c002094f:	c6 05 40 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a240,0x1
c0020956:	e8 e9 fe ff ff       	call   c0020844 <apicGetBase()>
c002095b:	05 f0 00 00 00       	add    eax,0xf0
c0020960:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020963:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020966:	8b 00                	mov    eax,DWORD PTR [eax]
c0020968:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002096b:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020972:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020979:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002097c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002097f:	89 10                	mov    DWORD PTR [eax],edx
c0020981:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020988:	a1 10 8b 02 c0       	mov    eax,ds:0xc0028b10
c002098d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020990:	7d 70                	jge    c0020a02 <apicOpen()+0x154>
c0020992:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020995:	8b 04 85 20 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74e0]
c002099c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002099f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00209a2:	8b 04 85 20 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74e0]
c00209a9:	c1 e8 08             	shr    eax,0x8
c00209ac:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00209b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00209b3:	8b 04 85 20 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74e0]
c00209ba:	c1 e8 18             	shr    eax,0x18
c00209bd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00209c0:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c00209c4:	75 37                	jne    c00209fd <apicOpen()+0x14f>
c00209c6:	e8 79 fe ff ff       	call   c0020844 <apicGetBase()>
c00209cb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00209cf:	75 07                	jne    c00209d8 <apicOpen()+0x12a>
c00209d1:	ba 60 03 00 00       	mov    edx,0x360
c00209d6:	eb 05                	jmp    c00209dd <apicOpen()+0x12f>
c00209d8:	ba 50 03 00 00       	mov    edx,0x350
c00209dd:	01 d0                	add    eax,edx
c00209df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00209e2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00209e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00209e7:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00209ea:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c00209f1:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c00209f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00209f8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00209fb:	89 10                	mov    DWORD PTR [eax],edx
c00209fd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0020a00:	eb 86                	jmp    c0020988 <apicOpen()+0xda>
c0020a02:	90                   	nop
c0020a03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020a06:	c9                   	leave  
c0020a07:	c3                   	ret    

c0020a08 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020a08:	55                   	push   ebp
c0020a09:	89 e5                	mov    ebp,esp
c0020a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020a14:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020a17:	72 1d                	jb     c0020a36 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a1c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a25:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020a2b:	01 d0                	add    eax,edx
c0020a2d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020a30:	73 04                	jae    c0020a36 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020a32:	b0 01                	mov    al,0x1
c0020a34:	eb 02                	jmp    c0020a38 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020a36:	b0 00                	mov    al,0x0
c0020a38:	5d                   	pop    ebp
c0020a39:	c3                   	ret    

c0020a3a <IOAPIC::read(int)>:
c0020a3a:	55                   	push   ebp
c0020a3b:	89 e5                	mov    ebp,esp
c0020a3d:	83 ec 10             	sub    esp,0x10
c0020a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a49:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020a4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020a4f:	0f b6 d0             	movzx  edx,al
c0020a52:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a55:	89 10                	mov    DWORD PTR [eax],edx
c0020a57:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a5a:	83 c0 10             	add    eax,0x10
c0020a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a5f:	c9                   	leave  
c0020a60:	c3                   	ret    
c0020a61:	90                   	nop

c0020a62 <IOAPIC::open(int, int, void*)>:
c0020a62:	55                   	push   ebp
c0020a63:	89 e5                	mov    ebp,esp
c0020a65:	57                   	push   edi
c0020a66:	56                   	push   esi
c0020a67:	53                   	push   ebx
c0020a68:	83 ec 0c             	sub    esp,0xc
c0020a6b:	83 ec 0c             	sub    esp,0xc
c0020a6e:	68 fc 56 02 c0       	push   0xc00256fc
c0020a73:	e8 4d c5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020a78:	83 c4 10             	add    esp,0x10
c0020a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a7e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020a81:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a90:	8b 14 85 00 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7400]
c0020a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a9a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020aa3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020aa9:	8b 14 85 80 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7380]
c0020ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ab3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020abc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020ac5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020acb:	0f b6 f8             	movzx  edi,al
c0020ace:	89 d0                	mov    eax,edx
c0020ad0:	ba 00 00 00 00       	mov    edx,0x0
c0020ad5:	89 c1                	mov    ecx,eax
c0020ad7:	80 e5 ff             	and    ch,0xff
c0020ada:	89 cb                	mov    ebx,ecx
c0020adc:	0f b6 f2             	movzx  esi,dl
c0020adf:	89 d8                	mov    eax,ebx
c0020ae1:	89 f2                	mov    edx,esi
c0020ae3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020ae6:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020ae9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020aed:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020af1:	83 e0 00             	and    eax,0x0
c0020af4:	09 d0                	or     eax,edx
c0020af6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020afd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020b03:	8d 50 01             	lea    edx,[eax+0x1]
c0020b06:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020b09:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0020b0f:	0f b6 d0             	movzx  edx,al
c0020b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b15:	83 c2 08             	add    edx,0x8
c0020b18:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020b1c:	0f b6 c9             	movzx  ecx,cl
c0020b1f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020b25:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020b29:	83 ec 08             	sub    esp,0x8
c0020b2c:	6a 01                	push   0x1
c0020b2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b31:	e8 04 ff ff ff       	call   c0020a3a <IOAPIC::read(int)>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	c1 f8 10             	sar    eax,0x10
c0020b3c:	0f b6 c0             	movzx  eax,al
c0020b3f:	8d 50 01             	lea    edx,[eax+0x1]
c0020b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b45:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020b4b:	b8 00 00 00 00       	mov    eax,0x0
c0020b50:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020b53:	5b                   	pop    ebx
c0020b54:	5e                   	pop    esi
c0020b55:	5f                   	pop    edi
c0020b56:	5d                   	pop    ebp
c0020b57:	c3                   	ret    

c0020b58 <IOAPIC::write(int, int)>:
c0020b58:	55                   	push   ebp
c0020b59:	89 e5                	mov    ebp,esp
c0020b5b:	83 ec 10             	sub    esp,0x10
c0020b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020b61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b67:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020b6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020b6d:	0f b6 d0             	movzx  edx,al
c0020b70:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020b73:	89 10                	mov    DWORD PTR [eax],edx
c0020b75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020b78:	8d 50 10             	lea    edx,[eax+0x10]
c0020b7b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020b7e:	89 02                	mov    DWORD PTR [edx],eax
c0020b80:	90                   	nop
c0020b81:	c9                   	leave  
c0020b82:	c3                   	ret    
c0020b83:	90                   	nop

c0020b84 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020b84:	55                   	push   ebp
c0020b85:	89 e5                	mov    ebp,esp
c0020b87:	53                   	push   ebx
c0020b88:	83 ec 2c             	sub    esp,0x2c
c0020b8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020b8e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020b91:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020b94:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020b97:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020b9a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020b9d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020ba0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020ba3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020ba6:	88 d8                	mov    al,bl
c0020ba8:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020bab:	88 c8                	mov    al,cl
c0020bad:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020bb0:	88 d0                	mov    al,dl
c0020bb2:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020bb5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020bb9:	83 c0 08             	add    eax,0x8
c0020bbc:	01 c0                	add    eax,eax
c0020bbe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020bc1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020bc5:	83 c0 08             	add    eax,0x8
c0020bc8:	01 c0                	add    eax,eax
c0020bca:	40                   	inc    eax
c0020bcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020bce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020bd1:	50                   	push   eax
c0020bd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020bd5:	e8 60 fe ff ff       	call   c0020a3a <IOAPIC::read(int)>
c0020bda:	83 c4 08             	add    esp,0x8
c0020bdd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020be0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020be7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020bea:	c1 e0 18             	shl    eax,0x18
c0020bed:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020bf0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020bf3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020bf6:	52                   	push   edx
c0020bf7:	50                   	push   eax
c0020bf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020bfb:	e8 58 ff ff ff       	call   c0020b58 <IOAPIC::write(int, int)>
c0020c00:	83 c4 0c             	add    esp,0xc
c0020c03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c06:	50                   	push   eax
c0020c07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c0a:	e8 2b fe ff ff       	call   c0020a3a <IOAPIC::read(int)>
c0020c0f:	83 c4 08             	add    esp,0x8
c0020c12:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020c15:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020c1c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020c23:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020c2a:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020c2e:	74 09                	je     c0020c39 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0020c30:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020c37:	eb 07                	jmp    c0020c40 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020c39:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020c40:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0020c44:	74 09                	je     c0020c4f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020c46:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020c4d:	eb 07                	jmp    c0020c56 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020c4f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020c56:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020c5d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020c61:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020c64:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020c67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c6a:	52                   	push   edx
c0020c6b:	50                   	push   eax
c0020c6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020c6f:	e8 e4 fe ff ff       	call   c0020b58 <IOAPIC::write(int, int)>
c0020c74:	83 c4 0c             	add    esp,0xc
c0020c77:	90                   	nop
c0020c78:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020c7b:	c9                   	leave  
c0020c7c:	c3                   	ret    
c0020c7d:	66 90                	xchg   ax,ax
c0020c7f:	90                   	nop

c0020c80 <APICTimer::close(int, int, void*)>:
c0020c80:	b8 00 00 00 00       	mov    eax,0x0
c0020c85:	c3                   	ret    
c0020c86:	66 90                	xchg   ax,ax

c0020c88 <apicTimerHandler(regs*, void*)>:
c0020c88:	83 ec 0c             	sub    esp,0xc
c0020c8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c91:	b8 10 27 00 00       	mov    eax,0x2710
c0020c96:	ba 00 00 00 00       	mov    edx,0x0
c0020c9b:	f7 f1                	div    ecx
c0020c9d:	83 ec 0c             	sub    esp,0xc
c0020ca0:	50                   	push   eax
c0020ca1:	e8 b6 f0 fe ff       	call   c000fd5c <timerHandler(unsigned int)>
c0020ca6:	83 c4 10             	add    esp,0x10
c0020ca9:	90                   	nop
c0020caa:	83 c4 0c             	add    esp,0xc
c0020cad:	c3                   	ret    
c0020cae:	66 90                	xchg   ax,ax

c0020cb0 <APICTimer::open(int, int, void*)>:
c0020cb0:	83 ec 0c             	sub    esp,0xc
c0020cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cb9:	83 c0 24             	add    eax,0x24
c0020cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cbe:	83 ec 08             	sub    esp,0x8
c0020cc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020cc9:	ff d0                	call   eax
c0020ccb:	83 c4 10             	add    esp,0x10
c0020cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cd2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020cd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020ce4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020cea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020cee:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020cf4:	83 ec 0c             	sub    esp,0xc
c0020cf7:	51                   	push   ecx
c0020cf8:	6a 01                	push   0x1
c0020cfa:	68 88 0c 02 c0       	push   0xc0020c88
c0020cff:	52                   	push   edx
c0020d00:	50                   	push   eax
c0020d01:	e8 e8 d6 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d06:	83 c4 20             	add    esp,0x20
c0020d09:	89 c2                	mov    edx,eax
c0020d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d0f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020d15:	b8 00 00 00 00       	mov    eax,0x0
c0020d1a:	83 c4 0c             	add    esp,0xc
c0020d1d:	c3                   	ret    
c0020d1e:	66 90                	xchg   ax,ax

c0020d20 <APICTimer::write(int)>:
c0020d20:	83 ec 0c             	sub    esp,0xc
c0020d23:	83 ec 0c             	sub    esp,0xc
c0020d26:	68 3c 57 02 c0       	push   0xc002573c
c0020d2b:	e8 47 26 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0020d30:	83 c4 10             	add    esp,0x10
c0020d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020d3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d41:	90                   	nop
c0020d42:	83 c4 0c             	add    esp,0xc
c0020d45:	c3                   	ret    
c0020d46:	66 90                	xchg   ax,ax

c0020d48 <APICTimer::APICTimer()>:
c0020d48:	83 ec 0c             	sub    esp,0xc
c0020d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4f:	83 ec 08             	sub    esp,0x8
c0020d52:	68 4c 57 02 c0       	push   0xc002574c
c0020d57:	50                   	push   eax
c0020d58:	e8 33 ef fe ff       	call   c000fc90 <Timer::Timer(char const*)>
c0020d5d:	83 c4 10             	add    esp,0x10
c0020d60:	ba 60 57 02 c0       	mov    edx,0xc0025760
c0020d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d69:	89 10                	mov    DWORD PTR [eax],edx
c0020d6b:	90                   	nop
c0020d6c:	83 c4 0c             	add    esp,0xc
c0020d6f:	c3                   	ret    

c0020d70 <PIT::write(int)>:
c0020d70:	83 ec 10             	sub    esp,0x10
c0020d73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020d7b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020d85:	a3 44 a2 02 c0       	mov    ds:0xc002a244,eax
c0020d8a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020d8f:	99                   	cdq    
c0020d90:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020d94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d98:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020d9f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020da4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020da8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020dad:	ee                   	out    dx,al
c0020dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020db2:	0f b6 c0             	movzx  eax,al
c0020db5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020dbc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020dc0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020dc4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020dc9:	ee                   	out    dx,al
c0020dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dce:	c1 f8 08             	sar    eax,0x8
c0020dd1:	0f b6 c0             	movzx  eax,al
c0020dd4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020ddb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ddf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020de3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020de8:	ee                   	out    dx,al
c0020de9:	90                   	nop
c0020dea:	83 c4 10             	add    esp,0x10
c0020ded:	c3                   	ret    
c0020dee:	66 90                	xchg   ax,ax

c0020df0 <pitHandler(regs*, void*)>:
c0020df0:	83 ec 0c             	sub    esp,0xc
c0020df3:	8b 0d 44 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a244
c0020df9:	b8 10 27 00 00       	mov    eax,0x2710
c0020dfe:	99                   	cdq    
c0020dff:	f7 f9                	idiv   ecx
c0020e01:	83 ec 0c             	sub    esp,0xc
c0020e04:	50                   	push   eax
c0020e05:	e8 52 ef fe ff       	call   c000fd5c <timerHandler(unsigned int)>
c0020e0a:	83 c4 10             	add    esp,0x10
c0020e0d:	90                   	nop
c0020e0e:	83 c4 0c             	add    esp,0xc
c0020e11:	c3                   	ret    
c0020e12:	66 90                	xchg   ax,ax

c0020e14 <PIT::open(int, int, void*)>:
c0020e14:	83 ec 0c             	sub    esp,0xc
c0020e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e1d:	83 c0 24             	add    eax,0x24
c0020e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e22:	83 ec 08             	sub    esp,0x8
c0020e25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e2d:	ff d0                	call   eax
c0020e2f:	83 c4 10             	add    esp,0x10
c0020e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e36:	83 ec 0c             	sub    esp,0xc
c0020e39:	6a 00                	push   0x0
c0020e3b:	6a 01                	push   0x1
c0020e3d:	68 f0 0d 02 c0       	push   0xc0020df0
c0020e42:	6a 00                	push   0x0
c0020e44:	50                   	push   eax
c0020e45:	e8 a4 d5 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020e4a:	83 c4 20             	add    esp,0x20
c0020e4d:	89 c2                	mov    edx,eax
c0020e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e53:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020e59:	b8 00 00 00 00       	mov    eax,0x0
c0020e5e:	83 c4 0c             	add    esp,0xc
c0020e61:	c3                   	ret    
c0020e62:	66 90                	xchg   ax,ax

c0020e64 <PIT::close(int, int, void*)>:
c0020e64:	83 ec 0c             	sub    esp,0xc
c0020e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e6b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e79:	6a 01                	push   0x1
c0020e7b:	68 f0 0d 02 c0       	push   0xc0020df0
c0020e80:	6a 00                	push   0x0
c0020e82:	50                   	push   eax
c0020e83:	e8 9c d5 fe ff       	call   c000e424 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020e88:	83 c4 10             	add    esp,0x10
c0020e8b:	b8 00 00 00 00       	mov    eax,0x0
c0020e90:	83 c4 0c             	add    esp,0xc
c0020e93:	c3                   	ret    

c0020e94 <PIT::PIT()>:
c0020e94:	83 ec 0c             	sub    esp,0xc
c0020e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e9b:	83 ec 08             	sub    esp,0x8
c0020e9e:	68 88 57 02 c0       	push   0xc0025788
c0020ea3:	50                   	push   eax
c0020ea4:	e8 e7 ed fe ff       	call   c000fc90 <Timer::Timer(char const*)>
c0020ea9:	83 c4 10             	add    esp,0x10
c0020eac:	ba b0 57 02 c0       	mov    edx,0xc00257b0
c0020eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb5:	89 10                	mov    DWORD PTR [eax],edx
c0020eb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ebb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ec1:	0f b6 d0             	movzx  edx,al
c0020ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ec8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ed3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020ed9:	0f b6 d0             	movzx  edx,al
c0020edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ee0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ee9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020eef:	8d 50 01             	lea    edx,[eax+0x1]
c0020ef2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020ef6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020efc:	0f b6 d0             	movzx  edx,al
c0020eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f03:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020f07:	83 e1 3f             	and    ecx,0x3f
c0020f0a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020f0e:	90                   	nop
c0020f0f:	83 c4 0c             	add    esp,0xc
c0020f12:	c3                   	ret    
c0020f13:	66 90                	xchg   ax,ax
c0020f15:	66 90                	xchg   ax,ax
c0020f17:	66 90                	xchg   ax,ax
c0020f19:	66 90                	xchg   ax,ax
c0020f1b:	66 90                	xchg   ax,ax
c0020f1d:	66 90                	xchg   ax,ax
c0020f1f:	90                   	nop

c0020f20 <avxDetect>:
c0020f20:	b8 01 00 00 00       	mov    eax,0x1
c0020f25:	0f a2                	cpuid  
c0020f27:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020f2d:	74 15                	je     c0020f44 <avxDetect.noAVX>
c0020f2f:	b8 01 00 00 00       	mov    eax,0x1
c0020f34:	0f a2                	cpuid  
c0020f36:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020f3c:	74 06                	je     c0020f44 <avxDetect.noAVX>
c0020f3e:	b8 01 00 00 00       	mov    eax,0x1
c0020f43:	c3                   	ret    

c0020f44 <avxDetect.noAVX>:
c0020f44:	b8 00 00 00 00       	mov    eax,0x0
c0020f49:	c3                   	ret    

c0020f4a <avxSave>:
c0020f4a:	53                   	push   ebx
c0020f4b:	52                   	push   edx
c0020f4c:	31 c0                	xor    eax,eax
c0020f4e:	48                   	dec    eax
c0020f4f:	89 c2                	mov    edx,eax
c0020f51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020f55:	0f ae 23             	xsave  [ebx]
c0020f58:	5a                   	pop    edx
c0020f59:	5b                   	pop    ebx
c0020f5a:	c3                   	ret    

c0020f5b <avxLoad>:
c0020f5b:	53                   	push   ebx
c0020f5c:	52                   	push   edx
c0020f5d:	31 c0                	xor    eax,eax
c0020f5f:	48                   	dec    eax
c0020f60:	89 c2                	mov    edx,eax
c0020f62:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020f66:	0f ae 2b             	xrstor [ebx]
c0020f69:	5a                   	pop    edx
c0020f6a:	5b                   	pop    ebx
c0020f6b:	c3                   	ret    

c0020f6c <avxInit>:
c0020f6c:	e8 77 00 00 00       	call   c0020fe8 <sseInit>
c0020f71:	50                   	push   eax
c0020f72:	51                   	push   ecx
c0020f73:	0f 20 e0             	mov    eax,cr4
c0020f76:	0d 00 00 04 00       	or     eax,0x40000
c0020f7b:	0f 22 e0             	mov    cr4,eax
c0020f7e:	31 c9                	xor    ecx,ecx
c0020f80:	0f 01 d0             	xgetbv 
c0020f83:	0d 07 00 00 00       	or     eax,0x7
c0020f88:	0f 01 d1             	xsetbv 
c0020f8b:	59                   	pop    ecx
c0020f8c:	58                   	pop    eax
c0020f8d:	c3                   	ret    

c0020f8e <avxClose>:
c0020f8e:	c3                   	ret    

c0020f8f <wouldSheSayYes>:
c0020f8f:	c3                   	ret    
c0020f90:	49                   	dec    ecx
c0020f91:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020f95:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020f99:	75 20                	jne    c0020fbb <retry+0x6>
c0020f9b:	4e                   	dec    esi
c0020f9c:	79 61                	jns    c0020fff <sseClose+0x7>
c0020f9e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020fa3:	66 90                	xchg   ax,ax
c0020fa5:	66 90                	xchg   ax,ax
c0020fa7:	66 90                	xchg   ax,ax
c0020fa9:	66 90                	xchg   ax,ax
c0020fab:	66 90                	xchg   ax,ax
c0020fad:	66 90                	xchg   ax,ax
c0020faf:	90                   	nop

c0020fb0 <i386GetRDRAND>:
c0020fb0:	b9 64 00 00 00       	mov    ecx,0x64

c0020fb5 <retry>:
c0020fb5:	0f c7 f0             	rdrand eax
c0020fb8:	72 05                	jb     c0020fbf <retry.done>
c0020fba:	e2 f9                	loop   c0020fb5 <retry>

c0020fbc <retry.fail>:
c0020fbc:	31 c0                	xor    eax,eax
c0020fbe:	c3                   	ret    

c0020fbf <retry.done>:
c0020fbf:	c3                   	ret    

c0020fc0 <absolutelyNoChanceInHell>:
c0020fc0:	b8 01 00 00 00       	mov    eax,0x1
c0020fc5:	0f a2                	cpuid  
c0020fc7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020fcd:	74 06                	je     c0020fd5 <sseDetect.noSSE>
c0020fcf:	b8 01 00 00 00       	mov    eax,0x1
c0020fd4:	c3                   	ret    

c0020fd5 <sseDetect.noSSE>:
c0020fd5:	31 c0                	xor    eax,eax
c0020fd7:	c3                   	ret    

c0020fd8 <sseSave>:
c0020fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fdc:	0f ae 00             	fxsave [eax]
c0020fdf:	c3                   	ret    

c0020fe0 <sseLoad>:
c0020fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fe4:	0f ae 08             	fxrstor [eax]
c0020fe7:	c3                   	ret    

c0020fe8 <sseInit>:
c0020fe8:	e8 42 00 00 00       	call   c002102f <x87Init>
c0020fed:	0f 20 e0             	mov    eax,cr4
c0020ff0:	66 0d 00 06          	or     ax,0x600
c0020ff4:	0f 22 e0             	mov    cr4,eax
c0020ff7:	c3                   	ret    

c0020ff8 <sseClose>:
c0020ff8:	c3                   	ret    
c0020ff9:	66 90                	xchg   ax,ax
c0020ffb:	66 90                	xchg   ax,ax
c0020ffd:	66 90                	xchg   ax,ax
c0020fff:	90                   	nop

c0021000 <value_37F>:
c0021000:	7f 03                	jg     c0021005 <value_37A+0x1>

c0021002 <value_37E>:
c0021002:	7e 03                	jle    c0021007 <x87Detect+0x1>

c0021004 <value_37A>:
c0021004:	7a 03                	jp     c0021009 <x87Detect+0x3>

c0021006 <x87Detect>:
c0021006:	b8 01 00 00 00       	mov    eax,0x1
c002100b:	0f a2                	cpuid  
c002100d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021013:	74 06                	je     c002101b <x87Detect.nox87>
c0021015:	b8 01 00 00 00       	mov    eax,0x1
c002101a:	c3                   	ret    

c002101b <x87Detect.nox87>:
c002101b:	b8 00 00 00 00       	mov    eax,0x0
c0021020:	c3                   	ret    

c0021021 <x87Save>:
c0021021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021025:	dd 30                	fnsave [eax]
c0021027:	c3                   	ret    

c0021028 <x87Load>:
c0021028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002102c:	dd 20                	frstor [eax]
c002102e:	c3                   	ret    

c002102f <x87Init>:
c002102f:	0f 20 c0             	mov    eax,cr0
c0021032:	66 25 fb ff          	and    ax,0xfffb
c0021036:	66 0d 22 00          	or     ax,0x22
c002103a:	0f 22 c0             	mov    cr0,eax
c002103d:	db e3                	fninit 
c002103f:	0f 06                	clts   
c0021041:	d9 2d 04 10 02 c0    	fldcw  WORD PTR ds:0xc0021004
c0021047:	c3                   	ret    

c0021048 <x87Close>:
c0021048:	c3                   	ret    
c0021049:	66 90                	xchg   ax,ax
c002104b:	90                   	nop

c002104c <__do_global_ctors_aux>:
c002104c:	a1 10 20 02 c0       	mov    eax,ds:0xc0022010
c0021051:	83 f8 ff             	cmp    eax,0xffffffff
c0021054:	74 1a                	je     c0021070 <__do_global_ctors_aux+0x24>
c0021056:	55                   	push   ebp
c0021057:	89 e5                	mov    ebp,esp
c0021059:	53                   	push   ebx
c002105a:	52                   	push   edx
c002105b:	bb 10 20 02 c0       	mov    ebx,0xc0022010
c0021060:	ff d0                	call   eax
c0021062:	83 eb 04             	sub    ebx,0x4
c0021065:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021067:	83 f8 ff             	cmp    eax,0xffffffff
c002106a:	75 f4                	jne    c0021060 <__do_global_ctors_aux+0x14>
c002106c:	58                   	pop    eax
c002106d:	5b                   	pop    ebx
c002106e:	5d                   	pop    ebp
c002106f:	c3                   	ret    
c0021070:	c3                   	ret    
c0021071:	66 90                	xchg   ax,ax
c0021073:	90                   	nop

c0021074 <__divdi3>:
c0021074:	55                   	push   ebp
c0021075:	57                   	push   edi
c0021076:	56                   	push   esi
c0021077:	53                   	push   ebx
c0021078:	83 ec 1c             	sub    esp,0x1c
c002107b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002107f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021083:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021086:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002108a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002108e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021092:	85 db                	test   ebx,ebx
c0021094:	0f 88 8e 00 00 00    	js     c0021128 <__divdi3+0xb4>
c002109a:	89 dd                	mov    ebp,ebx
c002109c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00210a4:	89 d3                	mov    ebx,edx
c00210a6:	85 d2                	test   edx,edx
c00210a8:	79 0d                	jns    c00210b7 <__divdi3+0x43>
c00210aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00210ae:	f7 d8                	neg    eax
c00210b0:	83 d2 00             	adc    edx,0x0
c00210b3:	f7 da                	neg    edx
c00210b5:	89 d3                	mov    ebx,edx
c00210b7:	89 c7                	mov    edi,eax
c00210b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00210bc:	85 db                	test   ebx,ebx
c00210be:	75 48                	jne    c0021108 <__divdi3+0x94>
c00210c0:	39 ef                	cmp    edi,ebp
c00210c2:	76 24                	jbe    c00210e8 <__divdi3+0x74>
c00210c4:	89 ea                	mov    edx,ebp
c00210c6:	f7 f7                	div    edi
c00210c8:	89 c1                	mov    ecx,eax
c00210ca:	31 f6                	xor    esi,esi
c00210cc:	89 c8                	mov    eax,ecx
c00210ce:	89 f2                	mov    edx,esi
c00210d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00210d4:	85 c9                	test   ecx,ecx
c00210d6:	74 07                	je     c00210df <__divdi3+0x6b>
c00210d8:	f7 d8                	neg    eax
c00210da:	83 d2 00             	adc    edx,0x0
c00210dd:	f7 da                	neg    edx
c00210df:	83 c4 1c             	add    esp,0x1c
c00210e2:	5b                   	pop    ebx
c00210e3:	5e                   	pop    esi
c00210e4:	5f                   	pop    edi
c00210e5:	5d                   	pop    ebp
c00210e6:	c3                   	ret    
c00210e7:	90                   	nop
c00210e8:	85 ff                	test   edi,edi
c00210ea:	75 0b                	jne    c00210f7 <__divdi3+0x83>
c00210ec:	b8 01 00 00 00       	mov    eax,0x1
c00210f1:	31 d2                	xor    edx,edx
c00210f3:	f7 f3                	div    ebx
c00210f5:	89 c7                	mov    edi,eax
c00210f7:	31 d2                	xor    edx,edx
c00210f9:	89 e8                	mov    eax,ebp
c00210fb:	f7 f7                	div    edi
c00210fd:	89 c6                	mov    esi,eax
c00210ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021102:	f7 f7                	div    edi
c0021104:	89 c1                	mov    ecx,eax
c0021106:	eb c4                	jmp    c00210cc <__divdi3+0x58>
c0021108:	39 eb                	cmp    ebx,ebp
c002110a:	77 3c                	ja     c0021148 <__divdi3+0xd4>
c002110c:	0f bd f3             	bsr    esi,ebx
c002110f:	83 f6 1f             	xor    esi,0x1f
c0021112:	75 40                	jne    c0021154 <__divdi3+0xe0>
c0021114:	39 eb                	cmp    ebx,ebp
c0021116:	72 09                	jb     c0021121 <__divdi3+0xad>
c0021118:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002111b:	0f 87 97 00 00 00    	ja     c00211b8 <__divdi3+0x144>
c0021121:	b9 01 00 00 00       	mov    ecx,0x1
c0021126:	eb a4                	jmp    c00210cc <__divdi3+0x58>
c0021128:	f7 d9                	neg    ecx
c002112a:	83 d3 00             	adc    ebx,0x0
c002112d:	f7 db                	neg    ebx
c002112f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021132:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021136:	89 dd                	mov    ebp,ebx
c0021138:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021140:	e9 5f ff ff ff       	jmp    c00210a4 <__divdi3+0x30>
c0021145:	8d 76 00             	lea    esi,[esi+0x0]
c0021148:	31 f6                	xor    esi,esi
c002114a:	31 c9                	xor    ecx,ecx
c002114c:	e9 7b ff ff ff       	jmp    c00210cc <__divdi3+0x58>
c0021151:	8d 76 00             	lea    esi,[esi+0x0]
c0021154:	b8 20 00 00 00       	mov    eax,0x20
c0021159:	29 f0                	sub    eax,esi
c002115b:	89 f1                	mov    ecx,esi
c002115d:	d3 e3                	shl    ebx,cl
c002115f:	89 fa                	mov    edx,edi
c0021161:	88 c1                	mov    cl,al
c0021163:	d3 ea                	shr    edx,cl
c0021165:	09 da                	or     edx,ebx
c0021167:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002116b:	89 f1                	mov    ecx,esi
c002116d:	d3 e7                	shl    edi,cl
c002116f:	89 eb                	mov    ebx,ebp
c0021171:	88 c1                	mov    cl,al
c0021173:	d3 eb                	shr    ebx,cl
c0021175:	89 f1                	mov    ecx,esi
c0021177:	d3 e5                	shl    ebp,cl
c0021179:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002117c:	88 c1                	mov    cl,al
c002117e:	d3 ea                	shr    edx,cl
c0021180:	09 d5                	or     ebp,edx
c0021182:	89 e8                	mov    eax,ebp
c0021184:	89 da                	mov    edx,ebx
c0021186:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002118a:	89 d3                	mov    ebx,edx
c002118c:	89 c5                	mov    ebp,eax
c002118e:	f7 e7                	mul    edi
c0021190:	39 d3                	cmp    ebx,edx
c0021192:	72 18                	jb     c00211ac <__divdi3+0x138>
c0021194:	74 0a                	je     c00211a0 <__divdi3+0x12c>
c0021196:	89 e9                	mov    ecx,ebp
c0021198:	31 f6                	xor    esi,esi
c002119a:	e9 2d ff ff ff       	jmp    c00210cc <__divdi3+0x58>
c002119f:	90                   	nop
c00211a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00211a3:	89 f1                	mov    ecx,esi
c00211a5:	d3 e7                	shl    edi,cl
c00211a7:	39 c7                	cmp    edi,eax
c00211a9:	73 eb                	jae    c0021196 <__divdi3+0x122>
c00211ab:	90                   	nop
c00211ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00211af:	31 f6                	xor    esi,esi
c00211b1:	e9 16 ff ff ff       	jmp    c00210cc <__divdi3+0x58>
c00211b6:	66 90                	xchg   ax,ax
c00211b8:	31 c9                	xor    ecx,ecx
c00211ba:	e9 0d ff ff ff       	jmp    c00210cc <__divdi3+0x58>
c00211bf:	90                   	nop

c00211c0 <__moddi3>:
c00211c0:	55                   	push   ebp
c00211c1:	57                   	push   edi
c00211c2:	56                   	push   esi
c00211c3:	53                   	push   ebx
c00211c4:	83 ec 2c             	sub    esp,0x2c
c00211c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00211cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00211cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00211d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00211d7:	85 db                	test   ebx,ebx
c00211d9:	0f 88 85 00 00 00    	js     c0021264 <__moddi3+0xa4>
c00211df:	89 de                	mov    esi,ebx
c00211e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00211e9:	89 d7                	mov    edi,edx
c00211eb:	85 d2                	test   edx,edx
c00211ed:	79 09                	jns    c00211f8 <__moddi3+0x38>
c00211ef:	f7 d8                	neg    eax
c00211f1:	83 d2 00             	adc    edx,0x0
c00211f4:	f7 da                	neg    edx
c00211f6:	89 d7                	mov    edi,edx
c00211f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00211fc:	89 cd                	mov    ebp,ecx
c00211fe:	85 ff                	test   edi,edi
c0021200:	75 52                	jne    c0021254 <__moddi3+0x94>
c0021202:	89 c3                	mov    ebx,eax
c0021204:	39 f0                	cmp    eax,esi
c0021206:	76 24                	jbe    c002122c <__moddi3+0x6c>
c0021208:	89 c8                	mov    eax,ecx
c002120a:	89 f2                	mov    edx,esi
c002120c:	f7 f3                	div    ebx
c002120e:	89 d6                	mov    esi,edx
c0021210:	89 f0                	mov    eax,esi
c0021212:	31 d2                	xor    edx,edx
c0021214:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021218:	85 c9                	test   ecx,ecx
c002121a:	74 07                	je     c0021223 <__moddi3+0x63>
c002121c:	f7 d8                	neg    eax
c002121e:	83 d2 00             	adc    edx,0x0
c0021221:	f7 da                	neg    edx
c0021223:	83 c4 2c             	add    esp,0x2c
c0021226:	5b                   	pop    ebx
c0021227:	5e                   	pop    esi
c0021228:	5f                   	pop    edi
c0021229:	5d                   	pop    ebp
c002122a:	c3                   	ret    
c002122b:	90                   	nop
c002122c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021230:	85 db                	test   ebx,ebx
c0021232:	75 0d                	jne    c0021241 <__moddi3+0x81>
c0021234:	b8 01 00 00 00       	mov    eax,0x1
c0021239:	31 d2                	xor    edx,edx
c002123b:	f7 f7                	div    edi
c002123d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021241:	89 f0                	mov    eax,esi
c0021243:	31 d2                	xor    edx,edx
c0021245:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021249:	f7 f7                	div    edi
c002124b:	89 e8                	mov    eax,ebp
c002124d:	f7 f7                	div    edi
c002124f:	89 d6                	mov    esi,edx
c0021251:	eb bd                	jmp    c0021210 <__moddi3+0x50>
c0021253:	90                   	nop
c0021254:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021258:	39 f7                	cmp    edi,esi
c002125a:	76 20                	jbe    c002127c <__moddi3+0xbc>
c002125c:	89 c8                	mov    eax,ecx
c002125e:	89 f2                	mov    edx,esi
c0021260:	eb b2                	jmp    c0021214 <__moddi3+0x54>
c0021262:	66 90                	xchg   ax,ax
c0021264:	f7 d9                	neg    ecx
c0021266:	83 d3 00             	adc    ebx,0x0
c0021269:	f7 db                	neg    ebx
c002126b:	89 de                	mov    esi,ebx
c002126d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021275:	e9 6f ff ff ff       	jmp    c00211e9 <__moddi3+0x29>
c002127a:	66 90                	xchg   ax,ax
c002127c:	0f bd c7             	bsr    eax,edi
c002127f:	83 f0 1f             	xor    eax,0x1f
c0021282:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021286:	75 24                	jne    c00212ac <__moddi3+0xec>
c0021288:	39 f7                	cmp    edi,esi
c002128a:	72 06                	jb     c0021292 <__moddi3+0xd2>
c002128c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021290:	77 0c                	ja     c002129e <__moddi3+0xde>
c0021292:	89 e9                	mov    ecx,ebp
c0021294:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021298:	19 fe                	sbb    esi,edi
c002129a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002129e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212a2:	89 f2                	mov    edx,esi
c00212a4:	e9 6b ff ff ff       	jmp    c0021214 <__moddi3+0x54>
c00212a9:	8d 76 00             	lea    esi,[esi+0x0]
c00212ac:	b8 20 00 00 00       	mov    eax,0x20
c00212b1:	89 c2                	mov    edx,eax
c00212b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00212b7:	29 da                	sub    edx,ebx
c00212b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00212bd:	88 d9                	mov    cl,bl
c00212bf:	d3 e7                	shl    edi,cl
c00212c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212c5:	88 d1                	mov    cl,dl
c00212c7:	d3 e8                	shr    eax,cl
c00212c9:	09 c7                	or     edi,eax
c00212cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00212cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00212d3:	89 d8                	mov    eax,ebx
c00212d5:	88 d9                	mov    cl,bl
c00212d7:	d3 e7                	shl    edi,cl
c00212d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00212dd:	89 f3                	mov    ebx,esi
c00212df:	88 d1                	mov    cl,dl
c00212e1:	d3 eb                	shr    ebx,cl
c00212e3:	89 c7                	mov    edi,eax
c00212e5:	88 c1                	mov    cl,al
c00212e7:	d3 e6                	shl    esi,cl
c00212e9:	89 e8                	mov    eax,ebp
c00212eb:	88 d1                	mov    cl,dl
c00212ed:	d3 e8                	shr    eax,cl
c00212ef:	09 f0                	or     eax,esi
c00212f1:	89 f9                	mov    ecx,edi
c00212f3:	d3 e5                	shl    ebp,cl
c00212f5:	89 da                	mov    edx,ebx
c00212f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00212fb:	89 d3                	mov    ebx,edx
c00212fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021301:	89 c6                	mov    esi,eax
c0021303:	89 d1                	mov    ecx,edx
c0021305:	39 d3                	cmp    ebx,edx
c0021307:	72 27                	jb     c0021330 <__moddi3+0x170>
c0021309:	74 21                	je     c002132c <__moddi3+0x16c>
c002130b:	29 f5                	sub    ebp,esi
c002130d:	19 cb                	sbb    ebx,ecx
c002130f:	89 de                	mov    esi,ebx
c0021311:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021315:	d3 e6                	shl    esi,cl
c0021317:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002131b:	89 f9                	mov    ecx,edi
c002131d:	d3 ed                	shr    ebp,cl
c002131f:	09 ee                	or     esi,ebp
c0021321:	89 f0                	mov    eax,esi
c0021323:	d3 eb                	shr    ebx,cl
c0021325:	89 da                	mov    edx,ebx
c0021327:	e9 e8 fe ff ff       	jmp    c0021214 <__moddi3+0x54>
c002132c:	39 c5                	cmp    ebp,eax
c002132e:	73 db                	jae    c002130b <__moddi3+0x14b>
c0021330:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021334:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021338:	89 d1                	mov    ecx,edx
c002133a:	89 c6                	mov    esi,eax
c002133c:	eb cd                	jmp    c002130b <__moddi3+0x14b>
c002133e:	66 90                	xchg   ax,ax

c0021340 <__udivdi3>:
c0021340:	55                   	push   ebp
c0021341:	57                   	push   edi
c0021342:	56                   	push   esi
c0021343:	53                   	push   ebx
c0021344:	83 ec 1c             	sub    esp,0x1c
c0021347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002134b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002134f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021353:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021357:	85 d2                	test   edx,edx
c0021359:	75 41                	jne    c002139c <__udivdi3+0x5c>
c002135b:	39 f7                	cmp    edi,esi
c002135d:	76 15                	jbe    c0021374 <__udivdi3+0x34>
c002135f:	89 e8                	mov    eax,ebp
c0021361:	89 f2                	mov    edx,esi
c0021363:	f7 f7                	div    edi
c0021365:	31 db                	xor    ebx,ebx
c0021367:	89 da                	mov    edx,ebx
c0021369:	83 c4 1c             	add    esp,0x1c
c002136c:	5b                   	pop    ebx
c002136d:	5e                   	pop    esi
c002136e:	5f                   	pop    edi
c002136f:	5d                   	pop    ebp
c0021370:	c3                   	ret    
c0021371:	8d 76 00             	lea    esi,[esi+0x0]
c0021374:	89 f9                	mov    ecx,edi
c0021376:	85 ff                	test   edi,edi
c0021378:	75 0b                	jne    c0021385 <__udivdi3+0x45>
c002137a:	b8 01 00 00 00       	mov    eax,0x1
c002137f:	31 d2                	xor    edx,edx
c0021381:	f7 f7                	div    edi
c0021383:	89 c1                	mov    ecx,eax
c0021385:	31 d2                	xor    edx,edx
c0021387:	89 f0                	mov    eax,esi
c0021389:	f7 f1                	div    ecx
c002138b:	89 c3                	mov    ebx,eax
c002138d:	89 e8                	mov    eax,ebp
c002138f:	f7 f1                	div    ecx
c0021391:	89 da                	mov    edx,ebx
c0021393:	83 c4 1c             	add    esp,0x1c
c0021396:	5b                   	pop    ebx
c0021397:	5e                   	pop    esi
c0021398:	5f                   	pop    edi
c0021399:	5d                   	pop    ebp
c002139a:	c3                   	ret    
c002139b:	90                   	nop
c002139c:	39 f2                	cmp    edx,esi
c002139e:	77 1c                	ja     c00213bc <__udivdi3+0x7c>
c00213a0:	0f bd da             	bsr    ebx,edx
c00213a3:	83 f3 1f             	xor    ebx,0x1f
c00213a6:	75 24                	jne    c00213cc <__udivdi3+0x8c>
c00213a8:	39 f2                	cmp    edx,esi
c00213aa:	72 08                	jb     c00213b4 <__udivdi3+0x74>
c00213ac:	39 ef                	cmp    edi,ebp
c00213ae:	0f 87 84 00 00 00    	ja     c0021438 <__udivdi3+0xf8>
c00213b4:	b8 01 00 00 00       	mov    eax,0x1
c00213b9:	eb ac                	jmp    c0021367 <__udivdi3+0x27>
c00213bb:	90                   	nop
c00213bc:	31 db                	xor    ebx,ebx
c00213be:	31 c0                	xor    eax,eax
c00213c0:	89 da                	mov    edx,ebx
c00213c2:	83 c4 1c             	add    esp,0x1c
c00213c5:	5b                   	pop    ebx
c00213c6:	5e                   	pop    esi
c00213c7:	5f                   	pop    edi
c00213c8:	5d                   	pop    ebp
c00213c9:	c3                   	ret    
c00213ca:	66 90                	xchg   ax,ax
c00213cc:	b8 20 00 00 00       	mov    eax,0x20
c00213d1:	29 d8                	sub    eax,ebx
c00213d3:	88 d9                	mov    cl,bl
c00213d5:	d3 e2                	shl    edx,cl
c00213d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00213db:	89 fa                	mov    edx,edi
c00213dd:	88 c1                	mov    cl,al
c00213df:	d3 ea                	shr    edx,cl
c00213e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00213e5:	09 d1                	or     ecx,edx
c00213e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00213eb:	88 d9                	mov    cl,bl
c00213ed:	d3 e7                	shl    edi,cl
c00213ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00213f3:	89 f7                	mov    edi,esi
c00213f5:	88 c1                	mov    cl,al
c00213f7:	d3 ef                	shr    edi,cl
c00213f9:	88 d9                	mov    cl,bl
c00213fb:	d3 e6                	shl    esi,cl
c00213fd:	89 ea                	mov    edx,ebp
c00213ff:	88 c1                	mov    cl,al
c0021401:	d3 ea                	shr    edx,cl
c0021403:	09 d6                	or     esi,edx
c0021405:	89 f0                	mov    eax,esi
c0021407:	89 fa                	mov    edx,edi
c0021409:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002140d:	89 d7                	mov    edi,edx
c002140f:	89 c6                	mov    esi,eax
c0021411:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021415:	39 d7                	cmp    edi,edx
c0021417:	72 13                	jb     c002142c <__udivdi3+0xec>
c0021419:	74 09                	je     c0021424 <__udivdi3+0xe4>
c002141b:	89 f0                	mov    eax,esi
c002141d:	31 db                	xor    ebx,ebx
c002141f:	e9 43 ff ff ff       	jmp    c0021367 <__udivdi3+0x27>
c0021424:	88 d9                	mov    cl,bl
c0021426:	d3 e5                	shl    ebp,cl
c0021428:	39 c5                	cmp    ebp,eax
c002142a:	73 ef                	jae    c002141b <__udivdi3+0xdb>
c002142c:	8d 46 ff             	lea    eax,[esi-0x1]
c002142f:	31 db                	xor    ebx,ebx
c0021431:	e9 31 ff ff ff       	jmp    c0021367 <__udivdi3+0x27>
c0021436:	66 90                	xchg   ax,ax
c0021438:	31 c0                	xor    eax,eax
c002143a:	e9 28 ff ff ff       	jmp    c0021367 <__udivdi3+0x27>
c002143f:	90                   	nop

c0021440 <__umoddi3>:
c0021440:	55                   	push   ebp
c0021441:	57                   	push   edi
c0021442:	56                   	push   esi
c0021443:	53                   	push   ebx
c0021444:	83 ec 1c             	sub    esp,0x1c
c0021447:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002144b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002144f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021457:	89 da                	mov    edx,ebx
c0021459:	85 c0                	test   eax,eax
c002145b:	75 37                	jne    c0021494 <__umoddi3+0x54>
c002145d:	39 df                	cmp    edi,ebx
c002145f:	76 13                	jbe    c0021474 <__umoddi3+0x34>
c0021461:	89 f0                	mov    eax,esi
c0021463:	f7 f7                	div    edi
c0021465:	89 d0                	mov    eax,edx
c0021467:	31 d2                	xor    edx,edx
c0021469:	83 c4 1c             	add    esp,0x1c
c002146c:	5b                   	pop    ebx
c002146d:	5e                   	pop    esi
c002146e:	5f                   	pop    edi
c002146f:	5d                   	pop    ebp
c0021470:	c3                   	ret    
c0021471:	8d 76 00             	lea    esi,[esi+0x0]
c0021474:	89 fd                	mov    ebp,edi
c0021476:	85 ff                	test   edi,edi
c0021478:	75 0b                	jne    c0021485 <__umoddi3+0x45>
c002147a:	b8 01 00 00 00       	mov    eax,0x1
c002147f:	31 d2                	xor    edx,edx
c0021481:	f7 f7                	div    edi
c0021483:	89 c5                	mov    ebp,eax
c0021485:	89 d8                	mov    eax,ebx
c0021487:	31 d2                	xor    edx,edx
c0021489:	f7 f5                	div    ebp
c002148b:	89 f0                	mov    eax,esi
c002148d:	f7 f5                	div    ebp
c002148f:	89 d0                	mov    eax,edx
c0021491:	eb d4                	jmp    c0021467 <__umoddi3+0x27>
c0021493:	90                   	nop
c0021494:	89 f1                	mov    ecx,esi
c0021496:	39 d8                	cmp    eax,ebx
c0021498:	76 0a                	jbe    c00214a4 <__umoddi3+0x64>
c002149a:	89 f0                	mov    eax,esi
c002149c:	83 c4 1c             	add    esp,0x1c
c002149f:	5b                   	pop    ebx
c00214a0:	5e                   	pop    esi
c00214a1:	5f                   	pop    edi
c00214a2:	5d                   	pop    ebp
c00214a3:	c3                   	ret    
c00214a4:	0f bd e8             	bsr    ebp,eax
c00214a7:	83 f5 1f             	xor    ebp,0x1f
c00214aa:	75 1c                	jne    c00214c8 <__umoddi3+0x88>
c00214ac:	39 d8                	cmp    eax,ebx
c00214ae:	72 04                	jb     c00214b4 <__umoddi3+0x74>
c00214b0:	39 f7                	cmp    edi,esi
c00214b2:	77 08                	ja     c00214bc <__umoddi3+0x7c>
c00214b4:	89 da                	mov    edx,ebx
c00214b6:	29 fe                	sub    esi,edi
c00214b8:	19 c2                	sbb    edx,eax
c00214ba:	89 f1                	mov    ecx,esi
c00214bc:	89 c8                	mov    eax,ecx
c00214be:	83 c4 1c             	add    esp,0x1c
c00214c1:	5b                   	pop    ebx
c00214c2:	5e                   	pop    esi
c00214c3:	5f                   	pop    edi
c00214c4:	5d                   	pop    ebp
c00214c5:	c3                   	ret    
c00214c6:	66 90                	xchg   ax,ax
c00214c8:	ba 20 00 00 00       	mov    edx,0x20
c00214cd:	29 ea                	sub    edx,ebp
c00214cf:	89 e9                	mov    ecx,ebp
c00214d1:	d3 e0                	shl    eax,cl
c00214d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214d7:	89 f8                	mov    eax,edi
c00214d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214dd:	88 d1                	mov    cl,dl
c00214df:	d3 e8                	shr    eax,cl
c00214e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00214e5:	09 c1                	or     ecx,eax
c00214e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214eb:	89 e9                	mov    ecx,ebp
c00214ed:	d3 e7                	shl    edi,cl
c00214ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00214f3:	89 d8                	mov    eax,ebx
c00214f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214f9:	88 d1                	mov    cl,dl
c00214fb:	d3 e8                	shr    eax,cl
c00214fd:	89 c7                	mov    edi,eax
c00214ff:	89 e9                	mov    ecx,ebp
c0021501:	d3 e3                	shl    ebx,cl
c0021503:	89 f0                	mov    eax,esi
c0021505:	88 d1                	mov    cl,dl
c0021507:	d3 e8                	shr    eax,cl
c0021509:	09 d8                	or     eax,ebx
c002150b:	89 e9                	mov    ecx,ebp
c002150d:	d3 e6                	shl    esi,cl
c002150f:	89 f3                	mov    ebx,esi
c0021511:	89 fa                	mov    edx,edi
c0021513:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021517:	89 d1                	mov    ecx,edx
c0021519:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002151d:	89 c6                	mov    esi,eax
c002151f:	89 d7                	mov    edi,edx
c0021521:	39 d1                	cmp    ecx,edx
c0021523:	72 27                	jb     c002154c <__umoddi3+0x10c>
c0021525:	74 21                	je     c0021548 <__umoddi3+0x108>
c0021527:	89 ca                	mov    edx,ecx
c0021529:	29 f3                	sub    ebx,esi
c002152b:	19 fa                	sbb    edx,edi
c002152d:	89 d0                	mov    eax,edx
c002152f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021533:	d3 e0                	shl    eax,cl
c0021535:	89 e9                	mov    ecx,ebp
c0021537:	d3 eb                	shr    ebx,cl
c0021539:	09 d8                	or     eax,ebx
c002153b:	d3 ea                	shr    edx,cl
c002153d:	83 c4 1c             	add    esp,0x1c
c0021540:	5b                   	pop    ebx
c0021541:	5e                   	pop    esi
c0021542:	5f                   	pop    edi
c0021543:	5d                   	pop    ebp
c0021544:	c3                   	ret    
c0021545:	8d 76 00             	lea    esi,[esi+0x0]
c0021548:	39 c3                	cmp    ebx,eax
c002154a:	73 db                	jae    c0021527 <__umoddi3+0xe7>
c002154c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021550:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021554:	89 d7                	mov    edi,edx
c0021556:	89 c6                	mov    esi,eax
c0021558:	eb cd                	jmp    c0021527 <__umoddi3+0xe7>

Disassembly of section .init:

c002155a <_init>:
c002155a:	55                   	push   ebp
c002155b:	89 e5                	mov    ebp,esp
c002155d:	e8 b6 eb fd ff       	call   c0000118 <frame_dummy>
c0021562:	e8 e5 fa ff ff       	call   c002104c <__do_global_ctors_aux>
c0021567:	5d                   	pop    ebp
c0021568:	c3                   	ret    

Disassembly of section .fini:

c0021569 <_fini>:
c0021569:	55                   	push   ebp
c002156a:	89 e5                	mov    ebp,esp
c002156c:	e8 37 eb fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0021571:	5d                   	pop    ebp
c0021572:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021574 <Computer::~Computer()>:
c0021574:	83 ec 0c             	sub    esp,0xc
c0021577:	ba 18 2a 02 c0       	mov    edx,0xc0022a18
c002157c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021580:	89 10                	mov    DWORD PTR [eax],edx
c0021582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021586:	83 ec 0c             	sub    esp,0xc
c0021589:	50                   	push   eax
c002158a:	e8 b5 cd fe ff       	call   c000e344 <Device::~Device()>
c002158f:	83 c4 10             	add    esp,0x10
c0021592:	90                   	nop
c0021593:	83 c4 0c             	add    esp,0xc
c0021596:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021598 <Computer::~Computer()>:
c0021598:	83 ec 0c             	sub    esp,0xc
c002159b:	83 ec 0c             	sub    esp,0xc
c002159e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215a2:	e8 cd ff ff ff       	call   c0021574 <Computer::~Computer()>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	83 ec 08             	sub    esp,0x8
c00215ad:	68 ec 01 00 00       	push   0x1ec
c00215b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215b6:	e8 29 b9 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00215bb:	83 c4 10             	add    esp,0x10
c00215be:	83 c4 0c             	add    esp,0xc
c00215c1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00215c2 <idleCommon()>:
c00215c2:	83 ec 0c             	sub    esp,0xc
c00215c5:	fa                   	cli    
c00215c6:	ff 05 c8 97 02 c0    	inc    DWORD PTR ds:0xc00297c8
c00215cc:	e8 0b 54 ff ff       	call   c00169dc <schedule()>
c00215d1:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00215d6:	48                   	dec    eax
c00215d7:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00215dc:	75 01                	jne    c00215df <idleCommon()+0x1d>
c00215de:	fb                   	sti    
c00215df:	83 c4 0c             	add    esp,0xc
c00215e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00215e4 <LinkedList<UnixFile>::~LinkedList()>:
c00215e4:	90                   	nop
c00215e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00215e6 <LinkedList<UnixFile>::LinkedList()>:
c00215e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002160a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021614:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002161b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002161f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021626:	90                   	nop
c0021627:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021628 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021628:	83 ec 0c             	sub    esp,0xc
c002162b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021630:	75 10                	jne    c0021642 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021632:	83 ec 0c             	sub    esp,0xc
c0021635:	68 e8 2d 02 c0       	push   0xc0022de8
c002163a:	e8 38 1d ff ff       	call   c0013377 <Krnl::panic(char const*)>
c002163f:	83 c4 10             	add    esp,0x10
c0021642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021646:	8b 00                	mov    eax,DWORD PTR [eax]
c0021648:	85 c0                	test   eax,eax
c002164a:	74 34                	je     c0021680 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002164c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021653:	85 c0                	test   eax,eax
c0021655:	74 29                	je     c0021680 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002165e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002166d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021677:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002167e:	eb 65                	jmp    c00216e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021684:	8b 00                	mov    eax,DWORD PTR [eax]
c0021686:	85 c0                	test   eax,eax
c0021688:	75 4b                	jne    c00216d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002168a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002168e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021691:	85 c0                	test   eax,eax
c0021693:	75 40                	jne    c00216d5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021699:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002169d:	89 10                	mov    DWORD PTR [eax],edx
c002169f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216b1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00216b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216bf:	85 c0                	test   eax,eax
c00216c1:	74 22                	je     c00216e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00216c3:	83 ec 0c             	sub    esp,0xc
c00216c6:	68 0a 2e 02 c0       	push   0xc0022e0a
c00216cb:	e8 a7 1c ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00216d0:	83 c4 10             	add    esp,0x10
c00216d3:	eb 10                	jmp    c00216e5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00216d5:	83 ec 0c             	sub    esp,0xc
c00216d8:	68 14 2e 02 c0       	push   0xc0022e14
c00216dd:	e8 95 1c ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00216e2:	83 c4 10             	add    esp,0x10
c00216e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216ec:	8d 50 01             	lea    edx,[eax+0x1]
c00216ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00216f6:	90                   	nop
c00216f7:	83 c4 0c             	add    esp,0xc
c00216fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00216fc <LinkedList<UnixFile>::getFirstElement()>:
c00216fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021700:	8b 00                	mov    eax,DWORD PTR [eax]
c0021702:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021704 <LinkedList<UnixFile>::removeFirst()>:
c0021704:	83 ec 0c             	sub    esp,0xc
c0021707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002170b:	8b 00                	mov    eax,DWORD PTR [eax]
c002170d:	85 c0                	test   eax,eax
c002170f:	75 12                	jne    c0021723 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021711:	83 ec 0c             	sub    esp,0xc
c0021714:	68 20 2e 02 c0       	push   0xc0022e20
c0021719:	e8 59 1c ff ff       	call   c0013377 <Krnl::panic(char const*)>
c002171e:	83 c4 10             	add    esp,0x10
c0021721:	eb 7e                	jmp    c00217a1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021727:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002172a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002172d:	85 c0                	test   eax,eax
c002172f:	74 10                	je     c0021741 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021731:	83 ec 0c             	sub    esp,0xc
c0021734:	68 6b 2e 02 c0       	push   0xc0022e6b
c0021739:	e8 39 1c ff ff       	call   c0013377 <Krnl::panic(char const*)>
c002173e:	83 c4 10             	add    esp,0x10
c0021741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021745:	8b 00                	mov    eax,DWORD PTR [eax]
c0021747:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002174a:	85 c0                	test   eax,eax
c002174c:	75 33                	jne    c0021781 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002174e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002175c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021767:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002176a:	83 f8 01             	cmp    eax,0x1
c002176d:	74 21                	je     c0021790 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002176f:	83 ec 0c             	sub    esp,0xc
c0021772:	68 44 2e 02 c0       	push   0xc0022e44
c0021777:	e8 fb 1b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c002177c:	83 c4 10             	add    esp,0x10
c002177f:	eb 0f                	jmp    c0021790 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021785:	8b 00                	mov    eax,DWORD PTR [eax]
c0021787:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002178a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178e:	89 10                	mov    DWORD PTR [eax],edx
c0021790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021794:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021797:	8d 50 ff             	lea    edx,[eax-0x1]
c002179a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00217a1:	83 c4 0c             	add    esp,0xc
c00217a4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00217a6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00217a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00217aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217ad:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00217ae <DriverlessDevice::~DriverlessDevice()>:
c00217ae:	ba 5c 36 02 c0       	mov    edx,0xc002365c
c00217b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217b7:	89 10                	mov    DWORD PTR [eax],edx
c00217b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00217bd:	50                   	push   eax
c00217be:	e8 81 cb fe ff       	call   c000e344 <Device::~Device()>
c00217c3:	83 c4 04             	add    esp,0x4
c00217c6:	90                   	nop
c00217c7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00217c8 <DriverlessDevice::~DriverlessDevice()>:
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	83 ec 0c             	sub    esp,0xc
c00217ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d2:	e8 d7 ff ff ff       	call   c00217ae <DriverlessDevice::~DriverlessDevice()>
c00217d7:	83 c4 10             	add    esp,0x10
c00217da:	83 ec 08             	sub    esp,0x8
c00217dd:	68 58 01 00 00       	push   0x158
c00217e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e6:	e8 f9 b6 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00217eb:	83 c4 10             	add    esp,0x10
c00217ee:	83 c4 0c             	add    esp,0xc
c00217f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00217f2 <LinkedList<Device>::addElement(Device*)>:
c00217f2:	83 ec 0c             	sub    esp,0xc
c00217f5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00217fa:	75 10                	jne    c002180c <LinkedList<Device>::addElement(Device*)+0x1a>
c00217fc:	83 ec 0c             	sub    esp,0xc
c00217ff:	68 e8 2d 02 c0       	push   0xc0022de8
c0021804:	e8 6e 1b ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021809:	83 c4 10             	add    esp,0x10
c002180c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021810:	8b 00                	mov    eax,DWORD PTR [eax]
c0021812:	85 c0                	test   eax,eax
c0021814:	74 3a                	je     c0021850 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002181a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002181d:	85 c0                	test   eax,eax
c002181f:	74 2f                	je     c0021850 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021825:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021828:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002182c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021836:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002183a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002183d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021841:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021844:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002184e:	eb 68                	jmp    c00218b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021854:	8b 00                	mov    eax,DWORD PTR [eax]
c0021856:	85 c0                	test   eax,eax
c0021858:	75 4e                	jne    c00218a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002185a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002185e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021861:	85 c0                	test   eax,eax
c0021863:	75 43                	jne    c00218a8 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021869:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002186d:	89 10                	mov    DWORD PTR [eax],edx
c002186f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021877:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002187a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002187e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021881:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002188b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002188f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021892:	85 c0                	test   eax,eax
c0021894:	74 22                	je     c00218b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021896:	83 ec 0c             	sub    esp,0xc
c0021899:	68 0a 2e 02 c0       	push   0xc0022e0a
c002189e:	e8 d4 1a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00218a3:	83 c4 10             	add    esp,0x10
c00218a6:	eb 10                	jmp    c00218b8 <LinkedList<Device>::addElement(Device*)+0xc6>
c00218a8:	83 ec 0c             	sub    esp,0xc
c00218ab:	68 14 2e 02 c0       	push   0xc0022e14
c00218b0:	e8 c2 1a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00218b5:	83 c4 10             	add    esp,0x10
c00218b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00218bf:	8d 50 01             	lea    edx,[eax+0x1]
c00218c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00218c9:	90                   	nop
c00218ca:	83 c4 0c             	add    esp,0xc
c00218cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00218ce <LinkedList<Device>::LinkedList()>:
c00218ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021907:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002190e:	90                   	nop
c002190f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021910 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021914:	8b 00                	mov    eax,DWORD PTR [eax]
c0021916:	85 c0                	test   eax,eax
c0021918:	75 0e                	jne    c0021928 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002191a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002191e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021921:	85 c0                	test   eax,eax
c0021923:	75 03                	jne    c0021928 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021925:	b0 01                	mov    al,0x1
c0021927:	c3                   	ret    
c0021928:	b0 00                	mov    al,0x0
c002192a:	90                   	nop
c002192b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002192c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002192c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021930:	8b 00                	mov    eax,DWORD PTR [eax]
c0021932:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021934 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021934:	83 ec 0c             	sub    esp,0xc
c0021937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002193b:	8b 00                	mov    eax,DWORD PTR [eax]
c002193d:	85 c0                	test   eax,eax
c002193f:	75 17                	jne    c0021958 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021941:	83 ec 0c             	sub    esp,0xc
c0021944:	68 20 2e 02 c0       	push   0xc0022e20
c0021949:	e8 29 1a ff ff       	call   c0013377 <Krnl::panic(char const*)>
c002194e:	83 c4 10             	add    esp,0x10
c0021951:	e9 92 00 00 00       	jmp    c00219e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0021956:	66 90                	xchg   ax,ax
c0021958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002195f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021962:	85 c0                	test   eax,eax
c0021964:	0f 95 c0             	setne  al
c0021967:	84 c0                	test   al,al
c0021969:	74 11                	je     c002197c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002196b:	83 ec 0c             	sub    esp,0xc
c002196e:	68 6b 2e 02 c0       	push   0xc0022e6b
c0021973:	e8 ff 19 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021978:	83 c4 10             	add    esp,0x10
c002197b:	90                   	nop
c002197c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021980:	8b 00                	mov    eax,DWORD PTR [eax]
c0021982:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021985:	85 c0                	test   eax,eax
c0021987:	0f 94 c0             	sete   al
c002198a:	84 c0                	test   al,al
c002198c:	74 36                	je     c00219c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002198e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021992:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002199c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219aa:	83 f8 01             	cmp    eax,0x1
c00219ad:	74 25                	je     c00219d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00219af:	83 ec 0c             	sub    esp,0xc
c00219b2:	68 44 2e 02 c0       	push   0xc0022e44
c00219b7:	e8 bb 19 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c00219bc:	83 c4 10             	add    esp,0x10
c00219bf:	eb 13                	jmp    c00219d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00219c1:	8d 76 00             	lea    esi,[esi+0x0]
c00219c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00219ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00219cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d1:	89 10                	mov    DWORD PTR [eax],edx
c00219d3:	90                   	nop
c00219d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00219db:	8d 50 ff             	lea    edx,[eax-0x1]
c00219de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219e5:	8d 76 00             	lea    esi,[esi+0x0]
c00219e8:	83 c4 0c             	add    esp,0xc
c00219eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00219ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00219ec:	83 ec 0c             	sub    esp,0xc
c00219ef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00219f4:	75 12                	jne    c0021a08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c00219f6:	83 ec 0c             	sub    esp,0xc
c00219f9:	68 e8 2d 02 c0       	push   0xc0022de8
c00219fe:	e8 74 19 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	66 90                	xchg   ax,ax
c0021a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a0e:	85 c0                	test   eax,eax
c0021a10:	74 36                	je     c0021a48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a19:	85 c0                	test   eax,eax
c0021a1b:	74 2b                	je     c0021a48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021a44:	eb 6a                	jmp    c0021ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021a46:	66 90                	xchg   ax,ax
c0021a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a4e:	85 c0                	test   eax,eax
c0021a50:	75 4e                	jne    c0021aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a59:	85 c0                	test   eax,eax
c0021a5b:	75 43                	jne    c0021aa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a65:	89 10                	mov    DWORD PTR [eax],edx
c0021a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021a6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021a79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a87:	85 c0                	test   eax,eax
c0021a89:	74 25                	je     c0021ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021a8b:	83 ec 0c             	sub    esp,0xc
c0021a8e:	68 0a 2e 02 c0       	push   0xc0022e0a
c0021a93:	e8 df 18 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021a98:	83 c4 10             	add    esp,0x10
c0021a9b:	eb 13                	jmp    c0021ab0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0021aa0:	83 ec 0c             	sub    esp,0xc
c0021aa3:	68 14 2e 02 c0       	push   0xc0022e14
c0021aa8:	e8 ca 18 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021aad:	83 c4 10             	add    esp,0x10
c0021ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021ab7:	8d 50 01             	lea    edx,[eax+0x1]
c0021aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021abe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021ac1:	90                   	nop
c0021ac2:	83 c4 0c             	add    esp,0xc
c0021ac5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021ac8 <ACPI::~ACPI()>:
c0021ac8:	83 ec 0c             	sub    esp,0xc
c0021acb:	ba 08 3e 02 c0       	mov    edx,0xc0023e08
c0021ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ad4:	89 10                	mov    DWORD PTR [eax],edx
c0021ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ada:	83 ec 0c             	sub    esp,0xc
c0021add:	50                   	push   eax
c0021ade:	e8 61 c8 fe ff       	call   c000e344 <Device::~Device()>
c0021ae3:	83 c4 10             	add    esp,0x10
c0021ae6:	90                   	nop
c0021ae7:	83 c4 0c             	add    esp,0xc
c0021aea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021aec <ACPI::~ACPI()>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	83 ec 0c             	sub    esp,0xc
c0021af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021af6:	e8 cd ff ff ff       	call   c0021ac8 <ACPI::~ACPI()>
c0021afb:	83 c4 10             	add    esp,0x10
c0021afe:	83 ec 08             	sub    esp,0x8
c0021b01:	68 64 12 00 00       	push   0x1264
c0021b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b0a:	e8 d5 b3 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	83 c4 0c             	add    esp,0xc
c0021b15:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021b18 <LinkedList<Device>::~LinkedList()>:
c0021b18:	90                   	nop
c0021b19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021b1c <LinkedList<Device>::isEmpty()>:
c0021b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b22:	85 c0                	test   eax,eax
c0021b24:	75 0e                	jne    c0021b34 <LinkedList<Device>::isEmpty()+0x18>
c0021b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b2d:	85 c0                	test   eax,eax
c0021b2f:	75 03                	jne    c0021b34 <LinkedList<Device>::isEmpty()+0x18>
c0021b31:	b0 01                	mov    al,0x1
c0021b33:	c3                   	ret    
c0021b34:	b0 00                	mov    al,0x0
c0021b36:	90                   	nop
c0021b37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021b38 <LinkedList<Device>::getFirstElement()>:
c0021b38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b3e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021b40 <LinkedList<Device>::removeFirst()>:
c0021b40:	83 ec 0c             	sub    esp,0xc
c0021b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b49:	85 c0                	test   eax,eax
c0021b4b:	75 17                	jne    c0021b64 <LinkedList<Device>::removeFirst()+0x24>
c0021b4d:	83 ec 0c             	sub    esp,0xc
c0021b50:	68 20 2e 02 c0       	push   0xc0022e20
c0021b55:	e8 1d 18 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021b5a:	83 c4 10             	add    esp,0x10
c0021b5d:	e9 92 00 00 00       	jmp    c0021bf4 <LinkedList<Device>::removeFirst()+0xb4>
c0021b62:	66 90                	xchg   ax,ax
c0021b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b6b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021b71:	85 c0                	test   eax,eax
c0021b73:	74 13                	je     c0021b88 <LinkedList<Device>::removeFirst()+0x48>
c0021b75:	83 ec 0c             	sub    esp,0xc
c0021b78:	68 6b 2e 02 c0       	push   0xc0022e6b
c0021b7d:	e8 f5 17 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021b82:	83 c4 10             	add    esp,0x10
c0021b85:	8d 76 00             	lea    esi,[esi+0x0]
c0021b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b8e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021b94:	85 c0                	test   eax,eax
c0021b96:	75 34                	jne    c0021bcc <LinkedList<Device>::removeFirst()+0x8c>
c0021b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bb4:	83 f8 01             	cmp    eax,0x1
c0021bb7:	74 27                	je     c0021be0 <LinkedList<Device>::removeFirst()+0xa0>
c0021bb9:	83 ec 0c             	sub    esp,0xc
c0021bbc:	68 44 2e 02 c0       	push   0xc0022e44
c0021bc1:	e8 b1 17 ff ff       	call   c0013377 <Krnl::panic(char const*)>
c0021bc6:	83 c4 10             	add    esp,0x10
c0021bc9:	eb 15                	jmp    c0021be0 <LinkedList<Device>::removeFirst()+0xa0>
c0021bcb:	90                   	nop
c0021bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bd2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bdc:	89 10                	mov    DWORD PTR [eax],edx
c0021bde:	66 90                	xchg   ax,ax
c0021be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021be7:	8d 50 ff             	lea    edx,[eax-0x1]
c0021bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0021bf4:	83 c4 0c             	add    esp,0xc
c0021bf7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021bf8 <CPU::~CPU()>:
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	ba f4 3f 02 c0       	mov    edx,0xc0023ff4
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	89 10                	mov    DWORD PTR [eax],edx
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	50                   	push   eax
c0021c0e:	e8 31 c7 fe ff       	call   c000e344 <Device::~Device()>
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	90                   	nop
c0021c17:	83 c4 0c             	add    esp,0xc
c0021c1a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021c1c <CPU::~CPU()>:
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c26:	e8 cd ff ff ff       	call   c0021bf8 <CPU::~CPU()>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	68 94 11 00 00       	push   0x1194
c0021c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c3a:	e8 a5 b2 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 c4 0c             	add    esp,0xc
c0021c45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021c48 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021c48:	90                   	nop
c0021c49:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021c4c <ThreadControlBlock::ThreadControlBlock()>:
c0021c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c50:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c5b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c66:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c71:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c7c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021c83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c87:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021c8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021c93:	90                   	nop
c0021c94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021c98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ca6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cb1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cbc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021cc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cd1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021cd8:	90                   	nop
c0021cd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021cdc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021cdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ce0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021ce3:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021ce4 <Vm::_FPUState::_FPUState()>:
c0021ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce8:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021cef:	90                   	nop
c0021cf0:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021cf2 <PCI::~PCI()>:
c0021cf2:	83 ec 0c             	sub    esp,0xc
c0021cf5:	ba 90 50 02 c0       	mov    edx,0xc0025090
c0021cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cfe:	89 10                	mov    DWORD PTR [eax],edx
c0021d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d04:	83 ec 0c             	sub    esp,0xc
c0021d07:	50                   	push   eax
c0021d08:	e8 c7 c0 fe ff       	call   c000ddd4 <Bus::~Bus()>
c0021d0d:	83 c4 10             	add    esp,0x10
c0021d10:	90                   	nop
c0021d11:	83 c4 0c             	add    esp,0xc
c0021d14:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021d16 <PCI::~PCI()>:
c0021d16:	83 ec 0c             	sub    esp,0xc
c0021d19:	83 ec 0c             	sub    esp,0xc
c0021d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d20:	e8 cd ff ff ff       	call   c0021cf2 <PCI::~PCI()>
c0021d25:	83 c4 10             	add    esp,0x10
c0021d28:	83 ec 08             	sub    esp,0x8
c0021d2b:	68 5c 01 00 00       	push   0x15c
c0021d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d34:	e8 ab b1 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021d39:	83 c4 10             	add    esp,0x10
c0021d3c:	83 c4 0c             	add    esp,0xc
c0021d3f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021d40 <IDE::~IDE()>:
c0021d40:	83 ec 0c             	sub    esp,0xc
c0021d43:	ba 60 51 02 c0       	mov    edx,0xc0025160
c0021d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4c:	89 10                	mov    DWORD PTR [eax],edx
c0021d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d52:	83 ec 0c             	sub    esp,0xc
c0021d55:	50                   	push   eax
c0021d56:	e8 cd ca fe ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c0021d5b:	83 c4 10             	add    esp,0x10
c0021d5e:	90                   	nop
c0021d5f:	83 c4 0c             	add    esp,0xc
c0021d62:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021d64 <IDE::~IDE()>:
c0021d64:	83 ec 0c             	sub    esp,0xc
c0021d67:	83 ec 0c             	sub    esp,0xc
c0021d6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d6e:	e8 cd ff ff ff       	call   c0021d40 <IDE::~IDE()>
c0021d73:	83 c4 10             	add    esp,0x10
c0021d76:	83 ec 08             	sub    esp,0x8
c0021d79:	68 70 02 00 00       	push   0x270
c0021d7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d82:	e8 5d b1 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021d87:	83 c4 10             	add    esp,0x10
c0021d8a:	83 c4 0c             	add    esp,0xc
c0021d8d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021d8e <SATABus::~SATABus()>:
c0021d8e:	83 ec 0c             	sub    esp,0xc
c0021d91:	ba 2c 52 02 c0       	mov    edx,0xc002522c
c0021d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9a:	89 10                	mov    DWORD PTR [eax],edx
c0021d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da0:	83 ec 0c             	sub    esp,0xc
c0021da3:	50                   	push   eax
c0021da4:	e8 7f ca fe ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c0021da9:	83 c4 10             	add    esp,0x10
c0021dac:	90                   	nop
c0021dad:	83 c4 0c             	add    esp,0xc
c0021db0:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021db2 <SATABus::~SATABus()>:
c0021db2:	83 ec 0c             	sub    esp,0xc
c0021db5:	83 ec 0c             	sub    esp,0xc
c0021db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dbc:	e8 cd ff ff ff       	call   c0021d8e <SATABus::~SATABus()>
c0021dc1:	83 c4 10             	add    esp,0x10
c0021dc4:	83 ec 08             	sub    esp,0x8
c0021dc7:	68 64 01 00 00       	push   0x164
c0021dcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dd0:	e8 0f b1 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	83 c4 0c             	add    esp,0xc
c0021ddb:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021ddc <ATA::~ATA()>:
c0021ddc:	83 ec 0c             	sub    esp,0xc
c0021ddf:	ba a4 52 02 c0       	mov    edx,0xc00252a4
c0021de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de8:	89 10                	mov    DWORD PTR [eax],edx
c0021dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dee:	83 ec 0c             	sub    esp,0xc
c0021df1:	50                   	push   eax
c0021df2:	e8 13 cb fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0021df7:	83 c4 10             	add    esp,0x10
c0021dfa:	90                   	nop
c0021dfb:	83 c4 0c             	add    esp,0xc
c0021dfe:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021e00 <ATA::~ATA()>:
c0021e00:	83 ec 0c             	sub    esp,0xc
c0021e03:	83 ec 0c             	sub    esp,0xc
c0021e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e0a:	e8 cd ff ff ff       	call   c0021ddc <ATA::~ATA()>
c0021e0f:	83 c4 10             	add    esp,0x10
c0021e12:	83 ec 08             	sub    esp,0x8
c0021e15:	68 7c 01 00 00       	push   0x17c
c0021e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e1e:	e8 c1 b0 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021e23:	83 c4 10             	add    esp,0x10
c0021e26:	83 c4 0c             	add    esp,0xc
c0021e29:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021e2a <ATAPI::~ATAPI()>:
c0021e2a:	83 ec 0c             	sub    esp,0xc
c0021e2d:	ba 1c 53 02 c0       	mov    edx,0xc002531c
c0021e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e36:	89 10                	mov    DWORD PTR [eax],edx
c0021e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e3c:	83 ec 0c             	sub    esp,0xc
c0021e3f:	50                   	push   eax
c0021e40:	e8 c5 ca fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0021e45:	83 c4 10             	add    esp,0x10
c0021e48:	90                   	nop
c0021e49:	83 c4 0c             	add    esp,0xc
c0021e4c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021e4e <ATAPI::~ATAPI()>:
c0021e4e:	83 ec 0c             	sub    esp,0xc
c0021e51:	83 ec 0c             	sub    esp,0xc
c0021e54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e58:	e8 cd ff ff ff       	call   c0021e2a <ATAPI::~ATAPI()>
c0021e5d:	83 c4 10             	add    esp,0x10
c0021e60:	83 ec 08             	sub    esp,0x8
c0021e63:	68 84 01 00 00       	push   0x184
c0021e68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e6c:	e8 73 b0 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	83 c4 0c             	add    esp,0xc
c0021e77:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021e78 <SATA::~SATA()>:
c0021e78:	83 ec 0c             	sub    esp,0xc
c0021e7b:	ba 58 55 02 c0       	mov    edx,0xc0025558
c0021e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e84:	89 10                	mov    DWORD PTR [eax],edx
c0021e86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e8a:	83 ec 0c             	sub    esp,0xc
c0021e8d:	50                   	push   eax
c0021e8e:	e8 77 ca fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	90                   	nop
c0021e97:	83 c4 0c             	add    esp,0xc
c0021e9a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021e9c <SATA::~SATA()>:
c0021e9c:	83 ec 0c             	sub    esp,0xc
c0021e9f:	83 ec 0c             	sub    esp,0xc
c0021ea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ea6:	e8 cd ff ff ff       	call   c0021e78 <SATA::~SATA()>
c0021eab:	83 c4 10             	add    esp,0x10
c0021eae:	83 ec 08             	sub    esp,0x8
c0021eb1:	68 7c 01 00 00       	push   0x17c
c0021eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eba:	e8 25 b0 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	83 c4 0c             	add    esp,0xc
c0021ec5:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021ec6 <SATAPI::~SATAPI()>:
c0021ec6:	83 ec 0c             	sub    esp,0xc
c0021ec9:	ba c4 56 02 c0       	mov    edx,0xc00256c4
c0021ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed2:	89 10                	mov    DWORD PTR [eax],edx
c0021ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed8:	83 ec 0c             	sub    esp,0xc
c0021edb:	50                   	push   eax
c0021edc:	e8 29 ca fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	90                   	nop
c0021ee5:	83 c4 0c             	add    esp,0xc
c0021ee8:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021eea <SATAPI::~SATAPI()>:
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	83 ec 0c             	sub    esp,0xc
c0021ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ef4:	e8 cd ff ff ff       	call   c0021ec6 <SATAPI::~SATAPI()>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	83 ec 08             	sub    esp,0x8
c0021eff:	68 84 01 00 00       	push   0x184
c0021f04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f08:	e8 d7 af fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021f0d:	83 c4 10             	add    esp,0x10
c0021f10:	83 c4 0c             	add    esp,0xc
c0021f13:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021f14 <IOAPIC::~IOAPIC()>:
c0021f14:	83 ec 0c             	sub    esp,0xc
c0021f17:	ba 18 57 02 c0       	mov    edx,0xc0025718
c0021f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f20:	89 10                	mov    DWORD PTR [eax],edx
c0021f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f26:	83 ec 0c             	sub    esp,0xc
c0021f29:	50                   	push   eax
c0021f2a:	e8 15 c4 fe ff       	call   c000e344 <Device::~Device()>
c0021f2f:	83 c4 10             	add    esp,0x10
c0021f32:	90                   	nop
c0021f33:	83 c4 0c             	add    esp,0xc
c0021f36:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021f38 <IOAPIC::~IOAPIC()>:
c0021f38:	83 ec 0c             	sub    esp,0xc
c0021f3b:	83 ec 0c             	sub    esp,0xc
c0021f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f42:	e8 cd ff ff ff       	call   c0021f14 <IOAPIC::~IOAPIC()>
c0021f47:	83 c4 10             	add    esp,0x10
c0021f4a:	83 ec 08             	sub    esp,0x8
c0021f4d:	68 68 01 00 00       	push   0x168
c0021f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f56:	e8 89 af fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021f5b:	83 c4 10             	add    esp,0x10
c0021f5e:	83 c4 0c             	add    esp,0xc
c0021f61:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021f64 <APICTimer::~APICTimer()>:
c0021f64:	83 ec 0c             	sub    esp,0xc
c0021f67:	ba 60 57 02 c0       	mov    edx,0xc0025760
c0021f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f70:	89 10                	mov    DWORD PTR [eax],edx
c0021f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f76:	83 ec 0c             	sub    esp,0xc
c0021f79:	50                   	push   eax
c0021f7a:	e8 49 dd fe ff       	call   c000fcc8 <Timer::~Timer()>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	90                   	nop
c0021f83:	83 c4 0c             	add    esp,0xc
c0021f86:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021f88 <APICTimer::~APICTimer()>:
c0021f88:	83 ec 0c             	sub    esp,0xc
c0021f8b:	83 ec 0c             	sub    esp,0xc
c0021f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f92:	e8 cd ff ff ff       	call   c0021f64 <APICTimer::~APICTimer()>
c0021f97:	83 c4 10             	add    esp,0x10
c0021f9a:	83 ec 08             	sub    esp,0x8
c0021f9d:	68 60 01 00 00       	push   0x160
c0021fa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fa6:	e8 39 af fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021fab:	83 c4 10             	add    esp,0x10
c0021fae:	83 c4 0c             	add    esp,0xc
c0021fb1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021fb4 <PIT::~PIT()>:
c0021fb4:	83 ec 0c             	sub    esp,0xc
c0021fb7:	ba b0 57 02 c0       	mov    edx,0xc00257b0
c0021fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc0:	89 10                	mov    DWORD PTR [eax],edx
c0021fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fc6:	83 ec 0c             	sub    esp,0xc
c0021fc9:	50                   	push   eax
c0021fca:	e8 f9 dc fe ff       	call   c000fcc8 <Timer::~Timer()>
c0021fcf:	83 c4 10             	add    esp,0x10
c0021fd2:	90                   	nop
c0021fd3:	83 c4 0c             	add    esp,0xc
c0021fd6:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021fd8 <PIT::~PIT()>:
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	83 ec 0c             	sub    esp,0xc
c0021fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fe2:	e8 cd ff ff ff       	call   c0021fb4 <PIT::~PIT()>
c0021fe7:	83 c4 10             	add    esp,0x10
c0021fea:	83 ec 08             	sub    esp,0x8
c0021fed:	68 5c 01 00 00       	push   0x15c
c0021ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ff6:	e8 e9 ae fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0021ffb:	83 c4 10             	add    esp,0x10
c0021ffe:	83 c4 0c             	add    esp,0xc
c0022001:	c3                   	ret    
